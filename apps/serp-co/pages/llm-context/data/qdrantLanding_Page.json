[
  {
    "owner": "qdrant",
    "repo": "landing_page",
    "content": "TITLE: Switching Collection Alias in Qdrant\nDESCRIPTION: This snippet shows how to atomically switch an alias from one collection to another, which is useful for seamless upgrades when deploying new vector versions in production.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/collections.md#2025-04-21_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST 'http://localhost:6333/aliases' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"actions\": [\n      {\n        \"delete_alias\": {\n          \"alias_name\": \"my_production_collection\"\n        }\n      },\n      {\n        \"create_alias\": {\n          \"collection_name\": \"my_new_collection\",\n          \"alias_name\": \"my_production_collection\"\n        }\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Generating Code Embeddings with SentenceTransformer in Python\nDESCRIPTION: Uses the jinaai/jina-embeddings-v2-base-code model from SentenceTransformer to encode code snippets into vector embeddings. Includes increasing the context length window and batch processing with progress tracking.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/code-search.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncode_model = SentenceTransformer(\n    \"jinaai/jina-embeddings-v2-base-code\",\n    token=HF_TOKEN,\n    trust_remote_code=True\n)\ncode_model.max_seq_length = 8192  # increase the context length window\ncode_embeddings = code_model.encode(\n    code_snippets, batch_size=4, show_progress_bar=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collections with Go\nDESCRIPTION: This Go code uses the Qdrant client to query a collection based on specific filter conditions. It initializes a client with host and port configurations and performs queries on the collection with specified conditions and ordering. Required dependencies include the 'github.com/qdrant/go-client/qdrant' package. The main parameters are the 'CollectionName', which specifies the target collection, and conditions, which filter query results. The expected output is a filtered and ordered list of points from the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-with-payload/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tPrefetch: []*qdrant.PrefetchQuery{\n\t\t{\n\t\t\tQuery: qdrant.NewQuery(0.01, 0.45, 0.67),\n\t\t\tFilter: &qdrant.Filter{\n\t\t\t\tMust: []*qdrant.Condition{\n\t\t\t\t\tqdrant.NewMatch(\"color\", \"red\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tQuery: qdrant.NewQuery(0.01, 0.45, 0.67),\n\t\t\tFilter: &qdrant.Filter{\n\t\t\t\tMust: []*qdrant.Condition{\n\t\t\t\t\tqdrant.NewMatch(\"color\", \"green\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tQuery: qdrant.NewQueryOrderBy(&qdrant.OrderBy{\n\t\tKey: \"price\",\n\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Batch Upload Points in Column-Oriented Format\nDESCRIPTION: This Python snippet demonstrates how to upload points to a specified collection in a column-oriented format using the Qdrant client library. It allows for parallel uploads and includes details like payload and vector data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/points.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient.upload_collection(\n    collection_name=\"{collection_name}\",\n    ids=[1, 2],\n    payload=[\n        {\"color\": \"red\"},\n        {\"color\": \"green\"},\n    ],\n    vectors=[\n        [0.9, 0.1, 0.1],\n        [0.1, 0.9, 0.1],\n    ],\n    parallel=4,\n    max_retries=3,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector Search Function in Neural Searcher\nDESCRIPTION: Adds a search method to the NeuralSearcher class that converts text queries into vectors using the SentenceTransformer model and performs a similarity search using Qdrant. The function returns the payloads of the top 5 most similar vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef search(self, text: str):\n    # Convert text query into vector\n    vector = self.model.encode(text).tolist()\n\n    # Use `vector` for search for closest vectors in the collection\n    search_result = self.qdrant_client.query_points(\n        collection_name=self.collection_name,\n        query=vector,\n        query_filter=None,  # If you don't want any filters for now\n        limit=5,  # 5 the most closest results is enough\n    ).points\n    # `search_result` contains found vector ids with similarity scores along with the stored payload\n    # In this function you are interested in payload only\n    payloads = [hit.payload for hit in search_result]\n    return payloads\n```\n\n----------------------------------------\n\nTITLE: Oversampling and Rescoring in Qdrant Vector Search (Python)\nDESCRIPTION: Illustrates how to use oversampling and rescoring in Qdrant to improve search accuracy, especially when using quantized vectors. It retrieves extra candidates and rescores them using original vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-resource-optimization.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points(\n    collection_name=\"my_collection\",\n    query_vector=[0.22, -0.01, -0.98, 0.37],\n    search_params=models.SearchParams(\n        quantization=models.QuantizationSearchParams(\n            rescore=True,   # Enables rescoring with original vectors\n            oversampling=2  # Retrieves extra candidates for rescoring\n        )\n    ),\n    limit=4  # Desired number of final results\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Client and Collection with Multiple Vector Configurations in Python\nDESCRIPTION: This snippet initializes a Qdrant client and creates a collection with separate vector configurations for image and text data. It specifies different vector sizes and distance metrics for each data type.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/multiple-vectors/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config={\n        \"image\": models.VectorParams(size=4, distance=models.Distance.DOT),\n        \"text\": models.VectorParams(size=8, distance=models.Distance.COSINE),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a FastAPI Service for Hybrid Search in Python\nDESCRIPTION: Implements a FastAPI service that exposes the hybrid search functionality through a REST API. The service creates an instance of the HybridSearcher class and defines an endpoint that accepts search queries and returns results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\n# The file where HybridSearcher is stored\nfrom hybrid_searcher import HybridSearcher\n\napp = FastAPI()\n\n# Create a neural searcher instance\nhybrid_searcher = HybridSearcher(collection_name=\"startups\")\n\n\n@app.get(\"/api/search\")\ndef search_startup(q: str):\n    return {\"result\": hybrid_searcher.search(text=q)}\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collection with Code Embeddings\nDESCRIPTION: This snippet demonstrates how to query a Qdrant collection using code embeddings. It encodes the same query with a code-specific model to capture different aspects of the codebase than text embeddings might.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/code-search.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nhits = client.query_points(\n    \"qdrant-sources\",\n    query=code_model.encode(query).tolist(),\n    using=\"code\",\n    limit=5,\n).points\n```\n\n----------------------------------------\n\nTITLE: Query Qdrant for Relevant Results\nDESCRIPTION: Queries the Qdrant collection for books related to \"alien invasion\". It encodes the query string into a vector using the encoder and then performs a similarity search in the `my_books` collection. The `limit` parameter specifies the maximum number of results to return.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/search-beginners.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"hits = client.query_points(\\n    collection_name=\\\"my_books\\\",\\n    query=encoder.encode(\\\"alien invasion\\\").tolist(),\\n    limit=3,\\n).points\\n\\nfor hit in hits:\\n    print(hit.payload, \\\"score:\\\", hit.score)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Specialized Agents in Python\nDESCRIPTION: This snippet shows how to instantiate two agents, 'researcher' and 'synthesizer', each with specific roles and tools. The researcher gathers and analyzes information, while the synthesizer creates responses, facilitating a workflow.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nresearcher = Agent(\n    role='Research Assistant',\n    goal='Find and analyze relevant information',\n    tools=[calculator, searcher, analyzer]\n)\n\nsynthesizer = Agent(\n    role='Information Synthesizer',\n    goal='Create comprehensive and clear responses'\n)\n```\n\n----------------------------------------\n\nTITLE: Running Document Ingestion and Loading into Qdrant - Python\nDESCRIPTION: This code block orchestrates the entire process of creating a collection, loading documents from S3, processing them into embeddings, and ingesting the data into Qdrant. It builds PointStructs for each document for organized storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-ingestion-beginners.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    collection_name = \"products-data\"\n    create_collection(collection_name)\n    for i in range(1,6): # Five documents\n        folder = f\"p_{i}\"\n        loader = S3DirectoryLoader(\n            \"product-dataset\",\n            folder,\n            aws_access_key_id=aws_access_key_id,\n            aws_secret_access_key=aws_secret_access_key\n        )\n        docs = loader.load()\n        text_embedding, image_embedding, points, text_review, product_image = [], [], [], \"\", \"\"\n        for idx, doc in enumerate(docs):\n            source = doc.metadata['source']\n            if source.endswith(\".txt\"):\n                text_review, text_embedding = process_document(doc)\n            elif source.endswith(\".png\"):\n                product_image, image_embedding = process_document(doc)\n        if text_review:\n            point = PointStruct(\n                id=idx,  # Unique identifier for each point\n                vector={\n                    \"text_embedding\": text_embedding[0],                       \n                    \"image_embedding\": image_embedding[0].tolist(), \n                },\n                payload={\n                    \"review\": text_review,                           \n                    \"product_image\": product_image \n                }\n            )\n            points.append(point)\n    operation_info = ingest_data(points)\n    print(operation_info)\n```\n\n----------------------------------------\n\nTITLE: Searching Data Using FastEmbed - Python\nDESCRIPTION: This code snippet demonstrates how to perform a search operation using the FastEmbed library to embed a query. It retrieves the embedded vector for the query text and uses it to search in the specified Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/nomic.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\noutput = next(model.embed(\"What is the best vector database?\"))\n\nclient.search(\n    collection_name=\"my-collection\",\n    query_vector=output.tolist(),\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Qdrant and Cohere\nDESCRIPTION: This snippet installs the required Python packages qdrant-client and cohere that are essential for setting up and using the Qdrant vector database and the Cohere rerank model.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-semantic-search.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\npip install qdrant-client cohere\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant and OpenAI Services\nDESCRIPTION: Code snippet for setting up the configuration of Qdrant Cloud and OpenAI services. This includes initializing the API keys and URLs required to interact with both services.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/langchain-integration.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n![](/articles_data/langchain-integration/code-configuration.png)\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector Search with QdrantNeo4jRetriever\nDESCRIPTION: Retriever function that combines Qdrant's vector search with Neo4j graph data. It performs semantic similarity search and returns top k results using the QdrantNeo4jRetriever framework.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/graphrag-qdrant-neo4j.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef retriever_search(neo4j_driver, qdrant_client, collection_name, query):\n    retriever = QdrantNeo4jRetriever(\n        driver=neo4j_driver,\n        client=qdrant_client,\n        collection_name=collection_name,\n        id_property_external=\"id\",\n        id_property_neo4j=\"id\",\n    )\n\n    results = retriever.search(query_vector=openai_embeddings(query), top_k=5)\n    \n    return results\n```\n\n----------------------------------------\n\nTITLE: Testing Search Query with Python\nDESCRIPTION: Executes a test query against the search pipeline to retrieve relevant documents.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nquery = \"How to install an application using the OpenShift web console?\"\n\nsearch_pipeline.run(data={\n    \"query_embedder\": {\n        \"text\": query\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database with TypeScript\nDESCRIPTION: This snippet shows how to import the Qdrant client library, initialize a connection to a local Qdrant server, and perform a vector similarity search query on a collection. It demonstrates the basic workflow for vector search operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/simple-dense/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: [0.2, 0.1, 0.9, 0.7], // <--- Dense vector\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Similarity Search with Qdrant in Rust\nDESCRIPTION: Demonstrates how to create a Qdrant client connection to a local instance and perform a vector similarity search query. The code initializes a client, then queries a collection with a specific vector, limiting results to 3 entries and using a named vector field 'image'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/named-vector/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::QueryPointsBuilder;\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .using(\"image\"),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection for Vectors\nDESCRIPTION: Creates a new Qdrant collection specifically for startup vectors, specifying the vector size and distance metric for similarity searches.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nif not client.collection_exists(\"startups\"):\n    client.create_collection(\n        collection_name=\"startups\",\n        vectors_config=VectorParams(size=384, distance=Distance.COSINE),\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Sparse Vectors in C#\nDESCRIPTION: Demonstrates establishing a connection to Qdrant server and creating a new collection with sparse vector configuration. The code initializes a client connection to localhost:6334 and sets up a collection with in-memory sparse vector indexing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector-index-on-disk/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tsparseVectorsConfig: (\"splade-model-name\", new SparseVectorParams{\n        Index = new SparseIndexConfig {\n            OnDisk = false,\n        }\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up Tools and Language Model\nDESCRIPTION: This Python code initializes the tools, creates a `ToolNode` to manage them, sets up a ChatOpenAI language model (`gpt-4o`), and binds the tools to the language model using `llm.bind_tools`. This allows the language model to use the defined tools during its operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntools = [hf_retriever_tool, transformer_retriever_tool, search_tool]\n\ntool_node = ToolNode(tools=tools)\n\nllm = ChatOpenAI(model=\"gpt-4o\", temperature=0)\n\nllm_with_tools = llm.bind_tools(tools)\n```\n\n----------------------------------------\n\nTITLE: Scrolling Points in Qdrant Collection with HTTP POST\nDESCRIPTION: This HTTP POST request snippet demonstrates how to scroll through a collection of points in Qdrant using specific filters. The example filters points by color, setting the match value to 'red', with additional parameters to include payload information and exclude vectors. The request sets a limit of 1 for the number of points returned. There are no external dependencies since this is an HTTP request example.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-and-params/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must\": [\n            {\n                \"key\": \"color\",\n                \"match\": {\n                    \"value\": \"red\"\n                }\n            }\n        ]\n    },\n    \"limit\": 1,\n    \"with_payload\": true,\n    \"with_vector\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database with Java Client\nDESCRIPTION: Demonstrates establishing a connection to Qdrant server and executing a vector similarity search with keyword filtering. The query includes nearest neighbor search with vector coordinates, city filtering, and HNSW search parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/basic-with-filter-and-params/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.SearchParams;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n        .setFilter(Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")).build())\n        .setParams(SearchParams.newBuilder().setExact(false).setHnswEf(128).build())\n        .setLimit(3)\n        .build()).get();\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in C#\nDESCRIPTION: This snippet demonstrates creating a collection in Qdrant with C# by specifying the collection name and vector configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client.Grpc;\\n\\nawait client.CreateCollectionAsync(collectionName: \"test_collection\", vectorsConfig: new VectorParams\\n{\\n    Size = 4, Distance = Distance.Dot\\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing QdrantVectorStore with Text Documents\nDESCRIPTION: Creates a new Qdrant vector store instance from text documents using OpenAI embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langchain.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_qdrant import QdrantVectorStore\nfrom langchain_openai import OpenAIEmbeddings\n\nembeddings = OpenAIEmbeddings()\n\ndoc_store = QdrantVectorStore.from_texts(\n    texts, embeddings, url=\"<qdrant-url>\", api_key=\"<qdrant-api-key>\", collection_name=\"texts\"\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Multi-Stage Re-Scoring Queries in JSON\nDESCRIPTION: This snippet shows how to combine various query techniques in a single multi-stage query to achieve precise search results. It utilizes Qdrant's flexible Query API to perform complex re-scoring with multiple vectors and techniques.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/hybrid-queries.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\\\"/documentation/headless/snippets/query-points/hybrid-rescoring-multistage/\\\" >}}\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Points with Qdrant Client in Python\nDESCRIPTION: This snippet demonstrates how to initialize a Qdrant client connected to a local instance and perform a vector search query. It specifies search parameters like HNSW index configuration and retrieves the top 3 closest vectors to the query vector.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-params/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    search_params=models.SearchParams(hnsw_ef=128, exact=False),\n    limit=3,\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Vectors in Python\nDESCRIPTION: This snippet shows how to add multiple vectors to a collection along with their payloads using the Python client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import PointStruct\\n\\noperation_info = client.upsert(\\n    collection_name=\"test_collection\",\\n    wait=True,\\n    points=[\\n        PointStruct(id=1, vector=[0.05, 0.61, 0.76, 0.74], payload={\"city\": \"Berlin\"}),\\n        PointStruct(id=2, vector=[0.19, 0.81, 0.75, 0.11], payload={\"city\": \"London\"}),\\n        PointStruct(id=3, vector=[0.36, 0.55, 0.47, 0.94], payload={\"city\": \"Moscow\"}),\\n        PointStruct(id=4, vector=[0.18, 0.01, 0.85, 0.80], payload={\"city\": \"New York\"}),\\n        PointStruct(id=5, vector=[0.24, 0.18, 0.22, 0.44], payload={\"city\": \"Beijing\"}),\\n        PointStruct(id=6, vector=[0.35, 0.08, 0.11, 0.44], payload={\"city\": \"Mumbai\"}),\\n    ],\\n)\\n\\nprint(operation_info)\n```\n\n----------------------------------------\n\nTITLE: Downloading and Running Qdrant Docker Container\nDESCRIPTION: This snippet shows how to download and run the Qdrant Docker image, making Qdrant accessible via its APIs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull qdrant/qdrant\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6333:6333 -p 6334:6334 \\n    -v \"$(pwd)/qdrant_storage:/qdrant/storage:z\" \\n    qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Setting Up CLIP Model for Image Embeddings\nDESCRIPTION: Code that initializes the CLIP (Contrastive Language-Image Pretraining) model and processor from Hugging Face Transformers. This enables the generation of embeddings for image data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-ingestion-beginners.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nFrom transformers import CLIPProcessor, CLIPModel\nimport torch\n\n# Initialize the CLIP model and processor\nclip_model = CLIPModel.from_pretrained(\"openai/clip-vit-base-patch32\")\nclip_processor = CLIPProcessor.from_pretrained(\"openai/clip-vit-base-patch32\")\n```\n\n----------------------------------------\n\nTITLE: Running a Test Query on the RAG Chatbot\nDESCRIPTION: Demonstrates how to use the query engine to ask a question and receive an answer based on the processed PDF manuals.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/hybrid-search-llamaindex-jinaai.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresult = query_engine.query(\"What temperature should I use for my laundry?\")\nprint(result.response)\n```\n\n----------------------------------------\n\nTITLE: End-to-End GraphRAG Pipeline Implementation in Python\nDESCRIPTION: Main script that demonstrates the complete workflow of initializing clients, creating collections, extracting graph components, ingesting data into Neo4j and Qdrant, and performing retrieval and querying. Uses environment variables for configuration and processes sample text data about company relationships.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/graphrag-qdrant-neo4j.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    print(\"Script started\")\n    print(\"Loading environment variables...\")\n    load_dotenv('.env.local')\n    print(\"Environment variables loaded\")\n    \n    print(\"Initializing clients...\")\n    neo4j_driver = GraphDatabase.driver(neo4j_uri, auth=(neo4j_username, neo4j_password))\n    qdrant_client = QdrantClient(\n        url=qdrant_url,\n        api_key=qdrant_key\n    )\n    print(\"Clients initialized\")\n    \n    print(\"Creating collection...\")\n    collection_name = \"graphRAGstoreds\"\n    vector_dimension = 1536\n    create_collection(qdrant_client, collection_name, vector_dimension)\n    print(\"Collection created/verified\")\n    \n    print(\"Extracting graph components...\")\n    \n    raw_data = \"\"\"Alice is a data scientist at TechCorp's Seattle office.\n    Bob and Carol collaborate on the Alpha project.\n    Carol transferred to the New York office last year.\n    Dave mentors both Alice and Bob.\n    TechCorp's headquarters is in Seattle.\n    Carol leads the East Coast team.\n    Dave started his career in Seattle.\n    The Alpha project is managed from New York.\n    Alice previously worked with Carol at DataCo.\n    Bob joined the team after Dave's recommendation.\n    Eve runs the West Coast operations from Seattle.\n    Frank works with Carol on client relations.\n    The New York office expanded under Carol's leadership.\n    Dave's team spans multiple locations.\n    Alice visits Seattle monthly for team meetings.\n    Bob's expertise is crucial for the Alpha project.\n    Carol implemented new processes in New York.\n    Eve and Dave collaborated on previous projects.\n    Frank reports to the New York office.\n    TechCorp's main AI research is in Seattle.\n    The Alpha project revolutionized East Coast operations.\n    Dave oversees projects in both offices.\n    Bob's contributions are mainly remote.\n    Carol's team grew significantly after moving to New York.\n    Seattle remains the technology hub for TechCorp.\"\"\"\n\n    nodes, relationships = extract_graph_components(raw_data)\n    print(\"Nodes:\", nodes)\n    print(\"Relationships:\", relationships)\n    \n    print(\"Ingesting to Neo4j...\")\n    node_id_mapping = ingest_to_neo4j(nodes, relationships)\n    print(\"Neo4j ingestion complete\")\n    \n    print(\"Ingesting to Qdrant...\")\n    ingest_to_qdrant(collection_name, raw_data, node_id_mapping)\n    print(\"Qdrant ingestion complete\")\n\n    query = \"How is Bob connected to New York?\"\n    print(\"Starting retriever search...\")\n    retriever_result = retriever_search(neo4j_driver, qdrant_client, collection_name, query)\n    print(\"Retriever results:\", retriever_result)\n    \n    print(\"Extracting entity IDs...\")\n    entity_ids = [item.content.split(\"'id': '\")[1].split(\"'\")[0] for item in retriever_result.items]\n    print(\"Entity IDs:\", entity_ids)\n    \n    print(\"Fetching related graph...\")\n    subgraph = fetch_related_graph(neo4j_driver, entity_ids)\n    print(\"Subgraph:\", subgraph)\n    \n    print(\"Formatting graph context...\")\n    graph_context = format_graph_context(subgraph)\n    print(\"Graph context:\", graph_context)\n    \n    print(\"Running GraphRAG...\")\n    answer = graphRAG_run(graph_context, query)\n    print(\"Final Answer:\", answer)\n```\n\n----------------------------------------\n\nTITLE: Processing Documents to Create Embeddings - Python\nDESCRIPTION: This function processes different document types (text, PDF, images) to create embeddings. It extracts the document content based on the file type, uses appropriate embedding models for each type, and returns the processed content along with the embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-ingestion-beginners.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef process_document(doc):\n   source = doc.metadata['source']  # Extract document source (e.g., S3 URL)\n\n   # Processing Text Files\n   if source.endswith('.txt'):\n       text = doc.page_content  # Extract the content from the text file\n       print(f\"Processing .txt file: {source}\")\n       return text, text_embedding_model.embed_documents([text])  # Convert to embeddings\n\n   # Processing PDF Files\n   elif source.endswith('.pdf'):\n       content = doc.page_content  # Extract content from the PDF\n       print(f\"Processing .pdf file: {source}\")\n       return content, text_embedding_model.embed_documents([content])  # Convert to embeddings\n\n   # Processing Image Files\n   elif source.endswith('.png'):\n       print(f\"Processing .png file: {source}\")\n       bucket_name, object_key = parse_s3_url(source)  # Parse the S3 URL\n       response = s3.get_object(Bucket=bucket_name, Key=object_key)  # Fetch image from S3\n       img_bytes = response['Body'].read()\n\n       # Load the image and convert to embeddings\n       img = Image.open(io.BytesIO(img_bytes))\n       return source, embed_image_with_clip(img)  # Convert to image embeddings\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Retriever\nDESCRIPTION: This Python function `create_retriever` creates a Qdrant retriever from a collection of documents (`doc_splits`). It uses OpenAI embeddings to transform queries into vectors, which are then stored in a Qdrant vector database. The function requires the Qdrant URL (`qdrant_url`), API key (`qdrant_key`), and collection name (`collection_name`).\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef create_retriever(collection_name, doc_splits):\n    vectorstore = QdrantVectorStore.from_documents(\n        doc_splits,\n        OpenAIEmbeddings(model=\"text-embedding-3-small\"),\n        url=qdrant_url,\n        api_key=qdrant_key,\n        collection_name=collection_name,\n    )\n    return vectorstore.as_retriever()\n```\n\n----------------------------------------\n\nTITLE: Creating Points from Embeddings for Qdrant\nDESCRIPTION: Transforms embeddings into Points for Qdrant storage. Each Point contains an ID, the vector embedding, and a payload with the original document text, preparing the data for insertion into Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-semantic-search.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npoints = []\nfor idx, (embedding, doc) in enumerate(zip(doc_embeddings.embeddings.float_, documents)):\n    point = PointStruct(\n        id=idx,\n        vector=embedding,\n        payload={\"document\": doc}\n    )\n    points.append(point)\n```\n\n----------------------------------------\n\nTITLE: Creating Vectorization Function Using FastEmbed\nDESCRIPTION: Defines a user-defined function (UDF) to generate dense and sparse embeddings from input data using specified models from the FastEmbed library. This function is crucial for vectorizing textual data into a numeric format.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/databricks.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastembed import TextEmbedding, SparseTextEmbedding\n\ndef vectorize(partition_data):\n    # Initialize dense and sparse models\n    dense_model = TextEmbedding(model_name=\"BAAI/bge-small-en-v1.5\")\n    sparse_model = SparseTextEmbedding(model_name=\"Qdrant/bm25\")\n\n    for row in partition_data:\n        # Generate dense and sparse vectors\n        dense_vector = next(dense_model.embed(row.sentence1))\n        sparse_vector = next(sparse_model.embed(row.sentence2))\n\n        yield [\n            row.sentence1,  # 1st column: original text\n            row.sentence2,  # 2nd column: original text\n            dense_vector.tolist(),  # 3rd column: dense vector\n            sparse_vector.indices.tolist(),  # 4th column: sparse vector indices\n            sparse_vector.values.tolist(),  # 5th column: sparse vector values\n        ]\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG Evaluation with DeepEval and Qdrant\nDESCRIPTION: Complete example showing how to integrate Qdrant with DeepEval for evaluating RAG system responses. The code demonstrates context retrieval, prompt construction, response generation, and evaluation using multiple metrics.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/deepeval.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deepeval.test_case import LLMTestCase, ConversationalTestCase\nfrom deepeval.metrics import AnswerRelevancyMetric, FaithfulnessMetric, ...\n\n# 1. Query context from Qdrant\ncontext = qdrant_client.query_points(...)\n\n# 2. Construct prompt using query + retrieved context\nprompt = build_prompt(query, context)\n\n# 3. Generate response from your LLM\nresponse = llm.generate(prompt)\n\n# 4. Create a test case for evaluation\ntest_case = LLMTestCase(\n    input=query,\n    actual_output=response,\n    expected_output=ground_truth_answer,\n    retrieval_context=context\n)\n\n# 5. Evaluate the output using DeepEval\nevaluate(\n    test_cases=[test_case],\n    metrics=[\n        AnswerRelevancyMetric(),\n        FaithfulnessMetric(),\n        ContextualPrecisionMetric(),\n        ...\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in Qdrant to Store Embeddings - Python\nDESCRIPTION: This function creates a new collection in Qdrant for storing text and image embeddings. It defines the vector parameters for both types of embeddings, including dimensions and distance metrics.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-ingestion-beginners.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef create_collection(collection_name):\n    qdrant_client.create_collection(\n        collection_name,\n        vectors_config={\n            \"text_embedding\": models.VectorParams(\n                size=1536,  # Dimension of text embeddings\n                distance=models.Distance.COSINE,  # Cosine similarity is used for comparison\n            ),\n            \"image_embedding\": models.VectorParams(\n                size=512,  # Dimension of image embeddings\n                distance=models.Distance.COSINE,  # Cosine similarity is used for comparison\n            ),\n        },\n    )\n\ncreate_collection(\"products-data\")\n```\n\n----------------------------------------\n\nTITLE: Configuring On-disk Payload Index in Qdrant\nDESCRIPTION: This snippet provides the syntax to configure an on-disk payload index in Qdrant, which is useful for managing large payload indexes that impact memory usage and cold requests latency. The resultant index supports multiple data types.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/indexing.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/create-payload-index/keyword-on-disk/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a collection in Qdrant using TypeScript, specifying the vector size and distance metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.createCollection(\"test_collection\", {\\n  vectors: { size: 4, distance: \"Dot\" },\\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Data with Unnamed/Default Vector in Python\nDESCRIPTION: Python code to load data into Qdrant using the Spark connector with an unnamed/default vector. This example demonstrates how to specify the Qdrant URL, collection name, and embedding field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/spark.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", <QDRANT_GRPC_URL>)\n   .option(\"collection_name\", <QDRANT_COLLECTION_NAME>)\n   .option(\"embedding_field\", <EMBEDDING_FIELD_NAME>)  # Expected to be a field of type ArrayType(FloatType)\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n----------------------------------------\n\nTITLE: Creating Collection in Qdrant with Rust\nDESCRIPTION: This Rust code snippet demonstrates how to initialize a Qdrant client and create a new collection with specified vector parameters, such as vector size and distance metric. It uses the `CreateCollectionBuilder` to set up a collection and `VectorParamsBuilder` to define vector parameters with cosine distance. The `MultiVectorConfigBuilder` is used to apply a multi-vector configuration using the `MaxSim` comparator. The snippet assumes an existing Qdrant instance running at `http://localhost:6334`. It requires the `qdrant_client` library and operations are performed asynchronously.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-multivector/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, VectorParamsBuilder,\n    MultiVectorComparator, MultiVectorConfigBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(\n                VectorParamsBuilder::new(100, Distance::Cosine)\n                    .multivector_config(\n                        MultiVectorConfigBuilder::new(MultiVectorComparator::MaxSim)\n                    ),\n            ),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Agent RAG with CrewAI in Python\nDESCRIPTION: This example shows how to implement a multi-agent RAG system using CrewAI. It defines two agents: a response generator and a query reformulation agent. The system uses Qdrant as a storage layer for both entity memory and short-term memory, enabling semantic search capabilities.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/agentic-rag.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom crewai import Crew, Agent, Task\nfrom crewai.memory.entity.entity_memory import EntityMemory\nfrom crewai.memory.short_term.short_term_memory import ShortTermMemory\nfrom crewai.memory.storage.rag_storage import RAGStorage\n\nclass QdrantStorage(RAGStorage):\n    ...\n\nresponse_generator_agent = Agent(\n    role=\"Generate response based on the conversation\",\n    goal=\"Provide the best response, or admit when the response is not available.\",\n    backstory=(\n        \"I am a response generator agent. I generate \"\n        \"responses based on the conversation.\"\n    ),\n    verbose=True,\n)\n\nquery_reformulation_agent = Agent(\n    role=\"Reformulate the query\",\n    goal=\"Rewrite the query to get better results. Fix typos, grammar, word choice, etc.\",\n    backstory=(\n        \"I am a query reformulation agent. I reformulate the \" \n        \"query to get better results.\"\n    ),\n    verbose=True,\n)\n\ntask = Task(\n    description=\"Let me know why Qdrant is the best vector database out there.\",\n    expected_output=\"3 bullet points\",\n    agent=response_generator_agent,\n)\n\ncrew = Crew(\n    agents=[response_generator_agent, query_reformulation_agent],\n    tasks=[task],\n    memory=True,\n    entity_memory=EntityMemory(storage=QdrantStorage(\"entity\")),\n    short_term_memory=ShortTermMemory(storage=QdrantStorage(\"short-term\")),\n)\ncrew.kickoff()\n```\n\n----------------------------------------\n\nTITLE: Perform a Search by Image - TypeScript\nDESCRIPTION: This snippet demonstrates how to submit a search query using an image by generating an embedding for the image input and querying points in Qdrant using TypeScript.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst imageSegment = (await twelveLabsClient.embed.create({\n    modelName: \"Marengo-retrieval-2.7\",\n    imageUrl: \"https://gratisography.com/wp-content/uploads/2024/01/gratisography-cyber-kitty-1170x780.jpg\"\n})).imageEmbedding.segments[0]\n\nawait qdrantClient.query(COLLECTION_NAME, {\n    query: imageSegment.embeddingsFloat,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Configurations in Rust\nDESCRIPTION: This Rust code snippet demonstrates how to instantiate a Qdrant client from a specified URL and create a collection with a specific vector configuration using cosine distance and optimizer settings. It requires the `qdrant_client` library, and the collection name and server URL must be specified. The code configures vectors with a dimension of 768 and cosine distance, alongside optimizer parameters like segment number and size. It returns a future to be awaited, ensuring asynchronous execution.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-large-segments/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, OptimizersConfigDiffBuilder, VectorParamsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine))\n            .optimizers_config(\n                OptimizersConfigDiffBuilder::default().default_segment_number(2).max_segment_size(5000000),\n            ),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration in Rust\nDESCRIPTION: Initializes a Qdrant client and creates a new collection with 768-dimensional vectors using cosine distance and x16 product quantization compression. The configuration includes setting up vector parameters and enabling RAM-based quantization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-product-quantization/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\\n    CompressionRatio, CreateCollectionBuilder, Distance, ProductQuantizationBuilder,\\n    VectorParamsBuilder,\\n};\\nuse qdrant_client::Qdrant;\\n\\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\\n\\nclient\\n    .create_collection(\\n        CreateCollectionBuilder::new(\"{collection_name}\")\\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine))\\n            .quantization_config(\\n                ProductQuantizationBuilder::new(CompressionRatio::X16.into()).always_ram(true),\\n            ),\\n    )\\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Querying Collections in Python\nDESCRIPTION: Creates a connection to a local Qdrant server on port 6333 and retrieves a list of available collections. This snippet shows the minimal setup required to start working with a Qdrant vector database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/list-all-collections/simple/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.get_collections()\n```\n\n----------------------------------------\n\nTITLE: Implementing Agentic RAG with AutoGen and Qdrant in Python\nDESCRIPTION: This code snippet demonstrates how to create a simple agentic RAG system using AutoGen framework and Qdrant vector database. It sets up a response generator agent and a retrieval user proxy agent to answer user queries based on retrieved documents.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/agentic-rag.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom os import environ\n\nfrom autogen import ConversableAgent\nfrom autogen.agentchat.contrib.retrieve_user_proxy_agent import RetrieveUserProxyAgent\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(...)\n\nresponse_generator_agent = ConversableAgent(\n    name=\"response_generator_agent\",\n    system_message=(\n        \"You answer user questions based solely on the provided context. You ask to retrieve relevant documents for \"\n        \"your query, or reformulate the query, if it is incorrect in some way.\"\n    ),\n    description=\"A response generator agent that can answer your queries.\",\n    llm_config={\"config_list\": [{\"model\": \"gpt-4\", \"api_key\": environ.get(\"OPENAI_API_KEY\")}]},\n    human_input_mode=\"NEVER\",\n)\n\nuser_proxy = RetrieveUserProxyAgent(\n    name=\"retrieval_user\",\n    llm_config={\"config_list\": [{\"model\": \"gpt-4\", \"api_key\": environ.get(\"OPENAI_API_KEY\")}]},\n    human_input_mode=\"NEVER\",\n    retrieve_config={\n        \"task\": \"qa\",\n        \"chunk_token_size\": 2000,\n        \"vector_db\": \"qdrant\",\n        \"db_config\": {\"client\": client},\n        \"get_or_create\": True,\n        \"overwrite\": True,\n    },\n)\n\nresult = user_proxy.initiate_chat(\n    response_generator_agent,\n    message=user_proxy.message_generator,\n    problem=\"Why Qdrant is the best vector database out there?\",\n    max_turns=10,\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Database with TypeScript\nDESCRIPTION: This snippet demonstrates how to perform batch queries on a Qdrant database using the Qdrant JavaScript client. It establishes a connection to a local Qdrant instance and executes queries with specified filters and recommendation criteria. Each query utilizes a combination of positive and negative vectors for recommendations, filtered by city value and limited to the top three results. Required dependency: @qdrant/js-client-rest.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-batch/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nconst filter = {\n    must: [\n        {\n            key: \"city\",\n            match: {\n                value: \"London\",\n            },\n        },\n    ],\n};\n\nconst searches = [\n    {\n        query: {\n            recommend: {\n                positive: [100, 231],\n                negative: [718]\n            }\n        },\n        filter,\n        limit: 3,\n    },\n    {\n        query: {\n            recommend: {\n                positive: [200, 67],\n                negative: [300]\n            }\n        },\n        filter,\n        limit: 3,\n    },\n];\n\nclient.queryBatch(\"{collection_name}\", {\n    searches,\n});\n```\n\n----------------------------------------\n\nTITLE: Perform a Search by Text - TypeScript\nDESCRIPTION: This snippet demonstrates how to submit a search query using text by generating an embedding for the text input and querying points in Qdrant using TypeScript.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst textSegment = (await twelveLabsClient.embed.create({\n    modelName: \"Marengo-retrieval-2.7\",\n    text: \"<YOUR_QUERY_TEXT>\"\n})).textEmbedding.segments[0]\n\nawait qdrantClient.query(COLLECTION_NAME, {\n    query: textSegment.embeddingsFloat,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration in Java\nDESCRIPTION: Demonstrates how to initialize a Qdrant client and create a new collection with specific vector parameters and quantization settings. The collection is configured with 768-dimensional vectors using Cosine distance and x16 compression ratio with RAM storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-product-quantization/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CompressionRatio;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.ProductQuantization;\nimport io.qdrant.client.grpc.Collections.QuantizationConfig;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(768)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setQuantizationConfig(\n                QuantizationConfig.newBuilder()\n                    .setProduct(\n                        ProductQuantization.newBuilder()\n                            .setCompression(CompressionRatio.x16)\n                            .setAlwaysRam(true)\n                            .build())\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Grouping Code Search Results with Qdrant Python Client\nDESCRIPTION: Demonstrates how to perform grouped search on code embeddings using Qdrant's Python client. The code groups search results by module and returns one result per module with a limit of 5 groups.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/code-search.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nresults = client.search_groups(\n    \"qdrant-sources\",\n    query_vector=(\n        \"code\", code_model.encode(query).tolist()\n    ),\n    group_by=\"context.module\",\n    limit=5,\n    group_size=1,\n)\n```\n\n----------------------------------------\n\nTITLE: Constructing AutoGen Agents with Qdrant Integration\nDESCRIPTION: Initializes AssistantAgent and QdrantRetrieveUserProxyAgent with necessary configurations including Qdrant client setup and sentence transformer implementation\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/autogen.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\nfrom sentence_transformers import SentenceTransformer\n\nfrom autogen import AssistantAgent\nfrom autogen.agentchat.contrib.retrieve_user_proxy_agent import RetrieveUserProxyAgent\n\n# 1. Create an AssistantAgent instance named \"assistant\"\nassistant = AssistantAgent(\n    name=\"assistant\",\n    system_message=\"You are a helpful assistant.\",\n    llm_config={\n        \"timeout\": 600,\n        \"cache_seed\": 42,\n        \"config_list\": config_list,\n    },\n)\n\nsentence_transformer_ef = SentenceTransformer(\"all-distilroberta-v1\").encode\nclient = QdrantClient(url=\"http://localhost:6333/\")\n\n# 2. Create the RetrieveUserProxyAgent instance named \"ragproxyagent\"\n# Refer to https://microsoft.github.io/autogen/docs/reference/agentchat/contrib/retrieve_user_proxy_agent\n# for more information on the RetrieveUserProxyAgent\nragproxyagent = RetrieveUserProxyAgent(\n    name=\"ragproxyagent\",\n    human_input_mode=\"NEVER\",\n    max_consecutive_auto_reply=10,\n    retrieve_config={\n        \"task\": \"code\",\n        \"docs_path\": [\n            \"path/to/some/doc.md\",\n            \"path/to/some/other/doc.md\",\n        ],\n        \"chunk_token_size\": 2000,\n        \"model\": config_list[0][\"model\"],\n        \"vector_db\": \"qdrant\",\n        \"db_config\": {\"client\": client},\n        \"get_or_create\": True,\n        \"overwrite\": True,\n        \"embedding_function\": sentence_transformer_ef,  # Defaults to \"BAAI/bge-small-en-v1.5\" via FastEmbed\n    },\n    code_execution_config=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI package\nDESCRIPTION: This command installs the official OpenAI Python package using pip, which simplifies obtaining embeddings from OpenAI's models. This is a prerequisite for using OpenAI embeddings with Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/openai.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install openai\"\n```\n\n----------------------------------------\n\nTITLE: Querying Points in Qdrant Collection with Python\nDESCRIPTION: This snippet shows how to query points from a Qdrant collection using the Python SDK. It utilizes the 'query_points' method, which allows specifying a collection name, the recommendation query model with positive and negative examples, and parameters such as the data type used for querying and the limit of points to return. Required dependencies include the Qdrant Python client and its models.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-named-vectors/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points(\\n    collection_name=\"{collection_name}\",\\n    query=models.RecommendQuery(\\n        recommend=models.RecommendInput(\\n            positive=[100, 231],\\n            negative=[718],\\n        )\\n    ),\\n    using=\"image\",\\n    limit=10,\\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting Data into the Hybrid Search Collection in Python\nDESCRIPTION: This snippet constructs a list of PointStruct objects and performs an upsert operation to insert the documents along with their embeddings into the Qdrant collection for hybrid search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-hybrid-search.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import PointStruct\npoints = []\nfor idx, (dense_embedding, bm25_embedding, late_interaction_embedding, doc) in enumerate(zip(dense_embeddings, bm25_embeddings, late_interaction_embeddings, documents)):\n    point = PointStruct(\n        id=idx,\n        vector={\n            \"all-MiniLM-L6-v2\": dense_embedding,\n            \"bm25\": bm25_embedding.as_object(),\n            \"colbertv2.0\": late_interaction_embedding,\n        },\n        payload={\"document\": doc}\n    )\n    points.append(point)\n\noperation_info = client.upsert(\n    collection_name=\"hybrid-search\",\n    points=points\n)\n```\n\n----------------------------------------\n\nTITLE: Searching Documents with Cohere Embed v3 in Qdrant\nDESCRIPTION: Example showing how to search for relevant documents using Cohere's Embed v3 models. It uses the 'search_query' input type which is optimized for query embeddings that will be used to find similar documents.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/cohere.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points(\n    collection_name=\"MyCollection\",\n    query=cohere_client.embed(\n        model=\"embed-english-v3.0\",  # New Embed v3 model\n        input_type=\"search_query\",  # Input type for search queries\n        texts=[\"The best vector database\"],\n    ).embeddings[0],\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Recommendations with Filters in Qdrant API\nDESCRIPTION: An HTTP request to Qdrant's API that performs a recommendation query based on positive and negative examples. It uses the 'average_vector' strategy and includes a filter to only return points where the 'city' field matches 'London'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/basic-recommend/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"recommend\": {\n      \"positive\": [100, 231],\n      \"negative\": [718, [0.2, 0.3, 0.4, 0.5]],\n      \"strategy\": \"average_vector\"\n    }\n  },\n  \"filter\": {\n    \"must\": [\n      {\n        \"key\": \"city\",\n        \"match\": {\n          \"value\": \"London\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Qdrant and Performing Vector Search in Java\nDESCRIPTION: This snippet demonstrates how to initialize a Qdrant client connection and perform a nearest neighbor vector search query. It creates a connection to a local Qdrant instance, then queries a collection for the 3 most similar vectors to the provided vector coordinates.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/sparse-vectors/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nQdrantClient client =\n  new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setUsing(\"text\")\n                .setQuery(nearest(List.of(0.1f, 0.2f, 0.3f, 0.4f), List.of(1, 3, 5, 7)))\n                .setLimit(3)\n                .build())\n        .get();\n```\n\n----------------------------------------\n\nTITLE: Performing Text-to-Image Query with Python\nDESCRIPTION: Queries the Qdrant collection with a textual input, retrieves the corresponding image, and displays it. It demonstrates the search functionality across modalities.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/multimodal-search.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom PIL import Image\n\nfind_image = model.get_query_embedding(\"Adventures on snow hills\")\n\nImage.open(client.query_points(\n    collection_name=COLLECTION_NAME,\n    query=find_image,\n    using=\"image\",\n    with_payload=[\"image\"],\n    limit=1\n).points[0].payload['image'])\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying with Qdrant Go Client\nDESCRIPTION: This snippet demonstrates how to create a new Qdrant client connection with host and port configuration, then perform a vector similarity search with quantization parameters. It initializes a client pointing to a local Qdrant instance and executes a query with custom vector coordinates and quantization search parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-quantization-oversampling/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tParams: &qdrant.SearchParams{\n\t\tQuantization: &qdrant.QuantizationSearchParams{\n\t\t\tIgnore:       qdrant.PtrOf(false),\n\t\t\tRescore:      qdrant.PtrOf(true),\n\t\t\tOversampling: qdrant.PtrOf(2.0),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Recommendation API Request\nDESCRIPTION: Demonstrates a basic recommendation request in Qdrant, allowing search based on multiple positive and negative example vectors or point IDs\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/explore.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/query-points-explore/basic-recommend/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Defining a RAG Function\nDESCRIPTION: This code defines a function `rag` that implements a Retrieval-Augmented Generation pipeline. It queries a Qdrant vector database, constructs a metaprompt using the retrieved documents, and then calls `query_deepseek` to get an answer from the LLM.  The function takes a question as input and returns an answer from the LLM based on the retrieved context.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/rag-deepseek.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"def rag(question: str, n_points: int = 3) -> str:\\n    results = client.query(\\n        collection_name=\\\"knowledge-base\\\",\\n        query_text=question,\\n        limit=n_points,\\n    )\\n\\n    context = \\\"\\\\n\\\".join(r.document for r in results)\\n\\n    metaprompt = f\\\"\\\"\\\"\\n    You are a software architect. \\n    Answer the following question using the provided context. \\n    If you can't find the answer, do not pretend you know it, but only answer \\\"I don't know\\\".\\n    \\n    Question: {question.strip()}\\n    \\n    Context: \\n    {context.strip()}\\n    \\n    Answer:\\n    \\\"\\\"\\\"\\n\\n    return query_deepseek(metaprompt)\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Java\nDESCRIPTION: This code snippet demonstrates how to create a Qdrant client connection and asynchronously create a new collection. It uses the gRPC client to connect to a local Qdrant server and sets up a collection with cosine distance and 100-dimensional vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/simple/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nQdrantClient client = new QdrantClient(\n    QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.createCollectionAsync(\"{collection_name}\",\n        VectorParams.newBuilder().setDistance(Distance.Cosine).setSize(100).build()).get();\n```\n\n----------------------------------------\n\nTITLE: Creating a New Collection in Qdrant for Hybrid Search in Python\nDESCRIPTION: This snippet creates a new collection in Qdrant configured to handle the various types of embeddings (dense, sparse, and late interaction) needed for the hybrid search functionality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-hybrid-search.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import Distance, VectorParams, models\nclient.create_collection(\n    \"hybrid-search\",\n    vectors_config={\n        \"all-MiniLM-L6-v2\": models.VectorParams(\n            size=len(dense_embeddings[0]),\n            distance=models.Distance.COSINE,\n        ),\n        \"colbertv2.0\": models.VectorParams(\n            size=len(late_interaction_embeddings[0][0]),\n            distance=models.Distance.COSINE,\n            multivector_config=models.MultiVectorConfig(\n                comparator=models.MultiVectorComparator.MAX_SIM,\n            )\n        ),\n    },\n    sparse_vectors_config={\n        \"bm25\": models.SparseVectorParams(modifier=models.Modifier.IDF\n        )\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing QdrantClient in Python\nDESCRIPTION: This snippet demonstrates how to initialize a `QdrantClient` in Python, connecting to a Qdrant Cloud instance. It requires the `qdrant_client` library. The snippet initializes the client with the host address and API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart-cloud.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nqdrant_client = QdrantClient(\n    host=\"xyz-example.eu-central.aws.cloud.qdrant.io\",\n    api_key=\"<your-api-key>\",\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Agentic RAG with LangGraph in Python\nDESCRIPTION: This example demonstrates how to create a simple agentic RAG workflow using LangGraph. The graph consists of three nodes: query improvement, document retrieval, and response generation. The workflow starts with a user query, improves it, retrieves relevant documents, and generates a response.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/agentic-rag.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Sequence\nfrom typing_extensions import TypedDict, Annotated\nfrom langchain_core.messages import BaseMessage\nfrom langgraph.constants import START, END\nfrom langgraph.graph import add_messages, StateGraph\n\n\nclass AgentState(TypedDict):\n    # The state of the agent includes at least the messages exchanged between the agent(s) \n    # and the user. It is, however, possible to include other information in the state, as \n    # it depends on the specific agent.\n    messages: Annotated[Sequence[BaseMessage], add_messages]\n\n\ndef improve_query(state: AgentState):\n    ...\n\ndef retrieve_documents(state: AgentState):\n    ...\n\ndef generate_response(state: AgentState):\n    ...\n\n# Building a graph requires defining nodes and building the flow between them with edges.\nbuilder = StateGraph(AgentState)\n\nbuilder.add_node(\"improve_query\", improve_query)\nbuilder.add_node(\"retrieve_documents\", retrieve_documents)\nbuilder.add_node(\"generate_response\", generate_response)\n\nbuilder.add_edge(START, \"improve_query\")\nbuilder.add_edge(\"improve_query\", \"retrieve_documents\")\nbuilder.add_edge(\"retrieve_documents\", \"generate_response\")\nbuilder.add_edge(\"generate_response\", END)\n\n# Compiling the graph performs some checks and prepares the graph for execution.\ncompiled_graph = builder.compile()\n\n# Compiled graph might be invoked with the initial state to start.\ncompiled_graph.invoke({\n    \"messages\": [\n        (\"user\", \"Why Qdrant is the best vector database out there?\"),\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Hybrid Searches with Qdrant in JSON\nDESCRIPTION: This code snippet illustrates how to perform a hybrid search using the Recipocal Rank Fusion method, which involves querying with multiple prefetches of named vectors configured to hold sparse and dense vectors respectively. The snippet demonstrates how to structure and execute a query using Qdrant's Query API.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/hybrid-queries.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\\\"/documentation/headless/snippets/query-points/hybrid-basic/\\\" >}}\n```\n\n----------------------------------------\n\nTITLE: Reranking Search Results with Cohere in Python\nDESCRIPTION: This snippet shows how to rerank the documents obtained from a vector search using Cohere's rerank model. It extracts documents from the search results, then uses the 'rerank-english-v3.0' model to refine and return the top 5 most relevant documents.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-semantic-search.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndocument_list = [point.payload['document'] for point in search_result]\n\nrerank_results = co.rerank(\n    model=\"rerank-english-v3.0\",\n    query=query,\n    documents=document_list,\n    top_n=5,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Hybrid Search with Qdrant in Python\nDESCRIPTION: Complete Python implementation showing how to create a hybrid search collection and perform queries using both BM42 and dense embeddings with RRF fusion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/bm42.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient()\n\nclient.create_collection(\n    collection_name=\"my-hybrid-collection\",\n    vectors_config={\n        \"jina\": models.VectorParams(\n            size=768,\n            distance=models.Distance.COSINE,\n        )\n    },\n    sparse_vectors_config={\n        \"bm42\": models.SparseVectorParams(\n            modifier=models.Modifier.IDF,\n        )\n    }\n)\n\nfrom fastembed import SparseTextEmbedding, TextEmbedding\n\nquery_text = \"best programming language for beginners?\"\n\nmodel_bm42 = SparseTextEmbedding(model_name=\"Qdrant/bm42-all-minilm-l6-v2-attentions\")\nmodel_jina = TextEmbedding(model_name=\"jinaai/jina-embeddings-v2-base-en\")\n\nsparse_embedding = list(model_bm42.query_embed(query_text))[0]\ndense_embedding = list(model_jina.query_embed(query_text))[0]\n\nclient.query_points(\n  collection_name=\"my-hybrid-collection\",\n  prefetch=[\n      models.Prefetch(query=sparse_embedding.as_object(), using=\"bm42\", limit=10),\n      models.Prefetch(query=dense_embedding.tolist(),  using=\"jina\", limit=10),\n  ],\n  query=models.FusionQuery(fusion=models.Fusion.RRF), # <--- Combine the scores\n  limit=10\n)\n```\n\n----------------------------------------\n\nTITLE: Searching Documents with Gemini Query Embeddings\nDESCRIPTION: Code that performs a vector search in Qdrant using a query embedded with Gemini model. It demonstrates using the retrieval_query task type which is optimized for search queries rather than documents.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/gemini.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient.search(\n    collection_name=collection_name,\n    query_vector=gemini_client.embed_content(\n        model=\"models/embedding-001\",\n        content=\"Is Qdrant compatible with Gemini?\",\n        task_type=\"retrieval_query\",\n    )[\"embedding\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Reranking search results in Qdrant with Python\nDESCRIPTION: This code snippet demonstrates how to rerank search results in Qdrant using the `query_points` method. It takes pre-fetched results and late interaction embeddings as input, applies the \"colbertv2.0\" model for reranking, and returns the top 10 results with payload information.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-hybrid-search.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresults = client.query_points(\n         \"hybrid-search\",\n        prefetch=prefetch,\n        query=late_vectors,\n        using=\"colbertv2.0\",\n        with_payload=True,\n        limit=10,\n)\n\n```\n\n----------------------------------------\n\nTITLE: Indexing Documents in Qdrant using LangChain\nDESCRIPTION: Creates a Qdrant instance and adds the split documents to the 'oracle-cloud-website' collection using the configured embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.vectorstores.qdrant import Qdrant\n\nqdrant = Qdrant(\n    client=client,\n    collection_name=\"oracle-cloud-website\",\n    embeddings=embeddings,\n)\n\nqdrant.add_documents(split_documents, batch_size=20)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Upserting Vector Points in Go\nDESCRIPTION: This code snippet shows how to create a Qdrant client, connect to a local Qdrant instance, and upsert multiple vector points with payloads into a specified collection. It uses the Qdrant Go client library to perform these operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/list-of-points-simple/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Upsert(context.Background(), &qdrant.UpsertPoints{\n\tCollectionName: \"{collection_name}\",\n\tPoints: []*qdrant.PointStruct{\n\t\t{\n\t\t\tId:      qdrant.NewIDNum(1),\n\t\t\tVectors: qdrant.NewVectors(0.9, 0.1, 0.1),\n\t\t\tPayload: qdrant.NewValueMap(map[string]any{\"color\": \"red\"}),\n\t\t},\n\t\t{\n\t\t\tId:      qdrant.NewIDNum(2),\n\t\t\tVectors: qdrant.NewVectors(0.1, 0.9, 0.1),\n\t\t\tPayload: qdrant.NewValueMap(map[string]any{\"color\": \"green\"}),\n\t\t},\n\t\t{\n\t\t\tId:      qdrant.NewIDNum(3),\n\t\t\tVectors: qdrant.NewVectors(0.1, 0.1, 0.9),\n\t\t\tPayload: qdrant.NewValueMap(map[string]any{\"color\": \"blue\"}),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Upserting Multi-Vector Points in Qdrant using Python Client\nDESCRIPTION: Demonstrates how to upsert multiple points with both image and text vectors into a Qdrant collection. Each point contains two different vector types with different dimensions - image vectors (4D) and text vectors (8D). The code uses the PointStruct model to structure the data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-multiple-vectors/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n    collection_name=\"{collection_name}\",\n    points=[\n        models.PointStruct(\n            id=1,\n            vector={\n                \"image\": [0.9, 0.1, 0.1, 0.2],\n                \"text\": [0.4, 0.7, 0.1, 0.8, 0.1, 0.1, 0.9, 0.2],\n            },\n        ),\n        models.PointStruct(\n            id=2,\n            vector={\n                \"image\": [0.2, 0.1, 0.3, 0.9],\n                \"text\": [0.5, 0.2, 0.7, 0.4, 0.7, 0.2, 0.3, 0.9],\n            },\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Client and Collection with Python\nDESCRIPTION: Establishes a connection to the Qdrant server and creates a collection if it does not already exist, specifying the vector parameters for both image and text embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/multimodal-search.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom qdrant_client import QdrantClient, models\n\n# docker run -p 6333:6333 qdrant/qdrant\nclient = QdrantClient(url=\"http://localhost:6333/\")\n\nCOLLECTION_NAME = \"llama-multi\"\n\nif not client.collection_exists(COLLECTION_NAME):\n    client.create_collection(\n        collection_name=COLLECTION_NAME,\n        vectors_config={\n            \"image\": models.VectorParams(size=len(image_embeddings[0]), distance=models.Distance.COSINE),\n            \"text\": models.VectorParams(size=len(text_embeddings[0]), distance=models.Distance.COSINE),\n        }\n    )\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with C# Client\nDESCRIPTION: This snippet shows how to query a Qdrant collection using the C# client. It performs a query with a specified vector, payload selection, vector selection, limit, and offset.  It uses `QueryAsync` method to retrieve results from Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-offset/csharp.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n    payloadSelector: true,\n    vectorsSelector: true,\n    limit: 10,\n    offset: 100\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Qdrant and LangSmith\nDESCRIPTION: Configures environment variables for Qdrant URL, API key, and optional LangSmith tracing settings. These are essential for connecting to Qdrant and enabling LangChain debugging features.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-scaleway.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport QDRANT_URL=\"https://qdrant.example.com\"\nexport QDRANT_API_KEY=\"your-api-key\"\n\nexport LANGCHAIN_TRACING_V2=true\nexport LANGCHAIN_API_KEY=\"your-api-key\"\nexport LANGCHAIN_PROJECT=\"your-project\"  # if not specified, defaults to \"default\"\n```\n\n----------------------------------------\n\nTITLE: Initializing HybridSearcher Class with Qdrant Client in Python\nDESCRIPTION: Creates a HybridSearcher class that initializes a Qdrant client with dense and sparse models for hybrid search. The class sets up the connection to a local Qdrant instance and configures both dense and sparse embedding models.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\n\nclass HybridSearcher:\n    DENSE_MODEL = \"sentence-transformers/all-MiniLM-L6-v2\"\n    SPARSE_MODEL = \"prithivida/Splade_PP_en_v1\"\n    def __init__(self, collection_name):\n        self.collection_name = collection_name\n        # initialize Qdrant client\n        self.qdrant_client = QdrantClient(\"http://localhost:6333\")\n        self.qdrant_client.set_model(self.DENSE_MODEL)\n        # comment this line to use dense vectors only\n        self.qdrant_client.set_sparse_model(self.SPARSE_MODEL)\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with Filtered Query in Python\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client to perform a scroll operation on a collection. It applies a filter to match documents where the 'country.name' field is 'Germany'. This is useful for paginating through large datasets with specific criteria.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-fields/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        should=[\n            models.FieldCondition(\n                key=\"country.name\", match=models.MatchValue(value=\"Germany\")\n            ),\n        ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Qdrant with API Key Authentication (Python)\nDESCRIPTION: This Python code demonstrates how to connect to a Qdrant instance using API key authentication. It initializes a QdrantClient with the server URL and API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-a-vector-database.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(\n    url=\"https://localhost:6333\",\n    api_key=\"your_secret_api_key_here\"\n)\n```\n\n----------------------------------------\n\nTITLE: Searching Documents with Qdrant and Upstage in TypeScript\nDESCRIPTION: Embeds a search query using Upstage API and performs a vector search in the Qdrant collection to find relevant documents using TypeScript.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/upstage.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nbody = {\n    \"input\": \"What is the best to use for vector search scaling?\",\n    \"model\": \"solar-embedding-1-large-query\",\n}\n\nresponse = await fetch(UPSTAGE_BASE_URL, {\n    method: \"POST\",\n    body: JSON.stringify(body),\n    headers\n});\n\nresponse_body = await response.json()\n\nawait client.search(COLLECTION_NAME, {\n    vector: response_body.data[0].embedding,\n});\n```\n\n----------------------------------------\n\nTITLE: Query Qdrant with Filter\nDESCRIPTION: Queries the Qdrant collection for books related to \"alien invasion\" and filters the results to only include books published after the year 2000. It uses a `Filter` with a `FieldCondition` to specify the year range.  The `limit` parameter is set to 1.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/search-beginners.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n\"hits = client.query_points(\\n    collection_name=\\\"my_books\\\",\\n    query=encoder.encode(\\\"alien invasion\\\").tolist(),\\n    query_filter=models.Filter(\\n        must=[models.FieldCondition(key=\\\"year\\\", range=models.Range(gte=2000))]\\n    ),\\n    limit=1,\\n).points\\n\\nfor hit in hits:\\n    print(hit.payload, \\\"score:\\\", hit.score)\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Context-Based Query in Go\nDESCRIPTION: Creates a Qdrant client connection to a local instance and performs a query using context pairs. The query compares multiple positive and negative vector relationships specified by ID references. This demonstrates how to use the context-based querying feature of Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/context-basic/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n    CollectionName: \"{collection_name}\",\n    Query: qdrant.NewQueryContext(&qdrant.ContextInput{\n        Pairs: []*qdrant.ContextInputPair{\n            {\n                Positive: qdrant.NewVectorInputID(qdrant.NewIDNum(100)),\n                Negative: qdrant.NewVectorInputID(qdrant.NewIDNum(718)),\n            },\n            {\n                Positive: qdrant.NewVectorInputID(qdrant.NewIDNum(200)),\n                Negative: qdrant.NewVectorInputID(qdrant.NewIDNum(300)),\n            },\n        },\n    }),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection\nDESCRIPTION: This snippet creates a Qdrant collection named `arxiv-titles-instructorxl-embeddings`. It defines the vector parameters, including the size (768) and distance metric (COSINE). It uses the `QdrantClient` to interact with the Qdrant instance running at `http://localhost:6333`.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/retrieval-quality.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(\"http://localhost:6333\")\nclient.create_collection(\n    collection_name=\"arxiv-titles-instructorxl-embeddings\",\n    vectors_config=models.VectorParams(\n        size=768,  # Size of the embeddings generated by InstructorXL model\n        distance=models.Distance.COSINE,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Document Embeddings with Cohere\nDESCRIPTION: Uses Cohere's API to convert document texts into vector embeddings using the embed-english-v3.0 model. The input_type is set to 'search_document' to optimize for document representation in search applications.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-semantic-search.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmodel=\"embed-english-v3.0\"\n\ndoc_embeddings = co.embed(texts=documents,\n                          model=model,\n                          input_type=\"search_document\",\n                          embedding_types=['float'])\n```\n\n----------------------------------------\n\nTITLE: Implementing EventExtractor Module with DSPy\nDESCRIPTION: Defines an EventExtractor class that combines document retrieval from Qdrant with event information extraction using the Event signature. It processes queries to find relevant documents and extract structured event data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-vultr-dspy-ollama.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass EventExtractor(dspy.Module):\n\n    def __init__(self):\n        super().__init__()\n        # Retrieve module to get relevant documents\n        self.retriever = dspy.Retrieve(k=3)\n        # Predict module for the created signature\n        self.predict = dspy.Predict(Event)\n\n    def forward(self, query: str):\n        # Retrieve the most relevant documents\n        results = self.retriever.forward(query)\n\n        # Try to extract events from the retrieved documents\n        events = []\n        for document in results.passages:\n            event = self.predict(description=document)\n            events.append(event)\n\n        return events\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collections with Multivector Representations in Python\nDESCRIPTION: This snippet queries a Qdrant collection using a two-stage retrieval method with multivector embeddings. It demonstrates prefetching using mean-pooled representations and re-ranking results based on original multivector representations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/pdf-retrieval-at-scale.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nquery = \"Lee Harvey Oswald's involvement in the JFK assassination\"\nprocessed_queries = model_processor.process_queries([query]).to(model.device)\n\n# Resulting query embedding is a tensor of shape (22, 128)\nquery_embedding = model(**processed_queries)[0]\n\n# Final amount of results to return\nsearch_limit = 10\n# Amount of results to prefetch for reranking\nprefetch_limit = 100\n\nresponse = client.query_points(\n    collection_name=collection_name,\n    query=query_embedding,\n    prefetch=[\n        models.Prefetch(\n            query=query_embedding,\n            limit=prefetch_limit,\n            using=\"mean_pooling_columns\"\n        ),\n        models.Prefetch(\n            query=query_embedding,\n            limit=prefetch_limit,\n            using=\"mean_pooling_rows\"\n        ),\n    ],\n    limit=search_limit,\n    with_payload=True,\n    with_vector=False,\n    using=\"original\"\n)\n\ndataset[response.points[0].payload['index']]['image']\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with FastEmbed in Python\nDESCRIPTION: This snippet demonstrates how to use FastEmbed to generate embeddings for a list of text documents. It initializes the DefaultEmbedding model and uses it to create embeddings for the given texts.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/fastembed.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndocuments: List[str] = [\n    \"Hello, World!\",\n    \"fastembed is supported by and maintained by Qdrant.\"\n] \nembedding_model = DefaultEmbedding() \nembeddings: List[np.ndarray] = list(embedding_model.embed(documents))\n```\n\n----------------------------------------\n\nTITLE: Executing Filtered Vector Search in Qdrant using HTTP API\nDESCRIPTION: This HTTP request demonstrates how to perform a filtered vector search in Qdrant. It searches for laptops priced under $1000 using a combination of vector similarity and filter conditions applied to the payload metadata.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-filtering.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/online_store/points/search\n{\n  \"vector\": [ 0.2, 0.1, 0.9, 0.7 ],\n  \"filter\": {\n    \"must\": [\n      {\n        \"key\": \"category\",\n        \"match\": { \"value\": \"laptop\" }\n      },\n      {\n        \"key\": \"price\",\n        \"range\": {\n          \"gt\": null,\n          \"gte\": null,\n          \"lt\": null,\n          \"lte\": 1000\n        }\n      }\n    ]\n  },\n  \"limit\": 3,\n  \"with_payload\": true,\n  \"with_vector\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Points by ID with Lookup from Another Collection in Qdrant\nDESCRIPTION: Shows how to query points by referencing an ID from a different collection using the 'lookup_from' parameter. This method fetches a specific vector from a point in another collection to use as the query vector.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/search.md#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/search\n{\n  \"vector\": {\n    \"id\": \"existing_point_id\",\n    \"lookup_from\": {\n      \"collection\": \"another_collection\",\n      \"vector\": \"image-512\"\n    }\n  },\n  \"limit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Integration of Cohere Embeddings with Qdrant\nDESCRIPTION: Example showing how to generate embeddings using Cohere's API and insert them into a Qdrant collection. This uses the standard embed API to create vector representations of text that can be stored in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/cohere.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport cohere\nimport qdrant_client\nfrom qdrant_client.models import Batch\n\ncohere_client = cohere.Client(\"<< your_api_key >>\")\nqdrant_client = qdrant_client.QdrantClient()\nqdrant_client.upsert(\n    collection_name=\"MyCollection\",\n    points=Batch(\n        ids=[1],\n        vectors=cohere_client.embed(\n            model=\"large\",\n            texts=[\"The best vector database\"],\n        ).embeddings,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Prefetch and Multi-vector in TypeScript\nDESCRIPTION: This code snippet demonstrates how to query a Qdrant collection using the Qdrant JavaScript client. It initializes a client and then executes a query using `client.query()`. The query includes prefetching of vectors and a multi-vector query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-multivector/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    prefetch: {\n        query: [1, 23, 45, 67], // <------------- small byte vector\n        limit: 100,\n    },\n    query: [\n        [0.1, 0.2], // <─┐\n        [0.2, 0.1], // < ├─ multi-vector\n        [0.8, 0.9], // < ┘\n    ],\n    using: 'colbert',\n    limit: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Java\nDESCRIPTION: Creates a Qdrant client connection to localhost:6334 and initializes a collection with two vector spaces - one for images (4-dimensional with Dot product distance) and one for text (8-dimensional with Cosine distance). The collection creation is performed asynchronously.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/multiple-vectors/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.Map;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        \"{collection_name}\",\n        Map.of(\n            \"image\", VectorParams.newBuilder().setSize(4).setDistance(Distance.Dot).build(),\n            \"text\",\n                VectorParams.newBuilder().setSize(8).setDistance(Distance.Cosine).build()))\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Dense and Sparse Vector Fusion with RRF in Python\nDESCRIPTION: This snippet shows how to create a prefetch operation that combines dense and sparse vector retrieval using Reciprocal Rank Fusion (RRF). It uses integer-based dense vectors for initial retrieval, followed by float-based dense vectors and sparse vectors for reranking.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/hybrid-search.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsparse_dense_rrf_prefetch = models.Prefetch(\n    prefetch=[\n        models.Prefetch(\n            prefetch=[\n                # The first prefetch operation retrieves 100 documents\n                # using dense vectors using integer data type. Retrieval\n                # is faster, but quality is lower.\n                models.Prefetch(\n                    query=[7, 63, ..., 92],\n                    using=\"dense-uint8\",\n                    limit=100,\n                )\n            ],\n            # Integer-based embeddings are then re-ranked using the\n            # float-based embeddings. Here we just want to retrieve\n            # 25 documents.\n            query=[-1.234, 0.762, ..., 1.532],\n            using=\"dense\",\n            limit=25,\n        ),\n        # Here we just add another 25 documents using the sparse\n        # vectors only.\n        models.Prefetch(\n            query=models.SparseVector(\n                indices=[125, 9325, 58214],\n                values=[-0.164, 0.229, 0.731],\n            ),\n            using=\"sparse\",\n            limit=25,\n        ),\n    ],\n    # RRF is activated below, so there is no need to specify the\n    # query vector here, as fusion is done on the scores of the\n    # retrieved documents.\n    query=models.FusionQuery(\n        fusion=models.Fusion.RRF,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Modal Qdrant Collection with Python\nDESCRIPTION: Initializes a Qdrant client and creates a collection with multiple vector configurations. Configures both dense vectors for image and text data, as well as sparse vectors for text, with specific vector sizes and distance metrics.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/named-vectors/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config={\n        \"image\": models.VectorParams(size=4, distance=models.Distance.DOT),\n        \"text\": models.VectorParams(size=5, distance=models.Distance.COSINE),\n    },\n    sparse_vectors_config={\"text-sparse\": models.SparseVectorParams()},\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Text-Based Semantic Search with Qdrant in Python\nDESCRIPTION: Generates an embedding for a text query using Aleph Alpha's API and performs a similarity search in the Qdrant database to find relevant images.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/aleph-alpha-search.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntext = \"Surfing\"\n\nasync with AsyncClient(token=aa_token) as aa_client:\n    query_params = {\n        \"prompt\": Prompt.from_text(text),\n        \"representation\": SemanticRepresentation.Symmetric,\n        \"compres_to_size\": 128,\n    }\n    query_request = SemanticEmbeddingRequest(**query_params)\n    query_response = await aa_client.semantic_embed(request=query_request, model=model)\n\n    results = client.query_points(\n        collection_name=\"COCO\",\n        query=query_response.embedding,\n        limit=3,\n    ).points\n    print(results)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collection with OR Filters in TypeScript\nDESCRIPTION: Shows how to perform a scroll operation on a Qdrant collection with multiple filter conditions combined using OR logic (should). The query filters for points where either the city is 'London' OR the color is 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-should-filter/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    should: [\n      {\n        key: \"city\",\n        match: { value: \"London\" },\n      },\n      {\n        key: \"color\",\n        match: { value: \"red\" },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Converting OpenAI model outputs to Qdrant points\nDESCRIPTION: This snippet converts the OpenAI model outputs (embeddings) into Qdrant `PointStruct` objects.  It iterates through the embeddings and texts, creating a `PointStruct` for each, with the embedding as the vector and the text as the payload. This prepares the data for insertion into Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/openai.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"from qdrant_client.models import PointStruct\n\npoints = [\n    PointStruct(\n        id=idx,\n        vector=data.embedding,\n        payload={\\\"text\\\": text},\n    )\n    for idx, (data, text) in enumerate(zip(result.data, texts))\n]\"\n```\n\n----------------------------------------\n\nTITLE: Ingesting Data into Qdrant Vector Database\nDESCRIPTION: Function to generate embeddings from text paragraphs and store them in Qdrant collection with associated node IDs. Uses OpenAI for embedding generation and supports batch processing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/graphrag-qdrant-neo4j.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef ingest_to_qdrant(collection_name, raw_data, node_id_mapping):\n    embeddings = [openai_embeddings(paragraph) for paragraph in raw_data.split(\"\\n\")]\n\n    qdrant_client.upsert(\n        collection_name=collection_name,\n        points=[\n            {\n                \"id\": str(uuid.uuid4()),\n                \"vector\": embedding,\n                \"payload\": {\"id\": node_id}\n            }\n            for node_id, embedding in zip(node_id_mapping.values(), embeddings)\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Using VectorRetriever with Qdrant\nDESCRIPTION: Example of using CamelAI's VectorRetriever with OpenAI embeddings and Qdrant storage for content processing and querying.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/camel.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom camel.embeddings import OpenAIEmbedding\nfrom camel.retrievers import VectorRetriever\n\n# Initialize the VectorRetriever with an embedding model\nvr = VectorRetriever(embedding_model=OpenAIEmbedding())\n\ncontent_input_path = \"<URL-TO-SOME-RESOURCE>\"\n\nvr.process(content_input_path, qdrant_storage)\n\n# Execute the query and retrieve results\nresults = vr.query(\"<SOME_USER_QUERY>\", vector_storage)\n```\n\n----------------------------------------\n\nTITLE: Using Jina CLIP v2 with Qdrant for Multimodal Embeddings\nDESCRIPTION: This code shows how to use the jina-clip-v2 model to generate embeddings for both text and images, and then index and query them in Qdrant. It demonstrates creating a collection with named vectors and searching for similar content.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/jina-embeddings.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.models import Distance, VectorParams, PointStruct\n\n# Provide your Jina API key and choose the model.\nJINA_API_KEY = \"jina_xxxxxxxxxxx\"\nMODEL = \"jina-clip-v2\"\nDIMENSIONS = 1024  # Set the desired output vector dimensionality.\n\n# Define the inputs\ntext_input = \"A blue cat\"\nimage_url = \"https://i.pinimg.com/600x315/21/48/7e/21487e8e0970dd366dafaed6ab25d8d8.jpg\"\n\n# Get embeddings from the Jina API\nurl = \"https://api.jina.ai/v1/embeddings\"\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": f\"Bearer {JINA_API_KEY}\",\n}\ndata = {\n    \"input\": [\n        {\"text\": text_input},\n        {\"image\": image_url},\n    ],\n    \"model\": MODEL,\n    \"dimensions\": DIMENSIONS,\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nresponse_data = response.json()[\"data\"]\n\n# The model doesn't differentiate between images and text, so we extract output based on the input order.\ntext_embedding = response_data[0][\"embedding\"]\nimage_embedding = response_data[1][\"embedding\"]\n\n# Initialize Qdrant client\nclient = QdrantClient(url=\"http://localhost:6333/\")\n\n# Create a collection with named vectors\ncollection_name = \"MyCollection\"\nclient.recreate_collection(\n    collection_name=collection_name,\n    vectors_config={\n        \"text_vector\": VectorParams(size=DIMENSIONS, distance=Distance.DOT),\n        \"image_vector\": VectorParams(size=DIMENSIONS, distance=Distance.DOT),\n    },\n)\n\nclient.upsert(\n    collection_name=collection_name,\n    points=[\n        PointStruct(\n            id=0,\n            vector={\n                \"text_vector\": text_embedding,\n                \"image_vector\": image_embedding,\n            }\n        )\n    ],\n)\n\n# Now let's query the collection\nsearch_query = \"A purple cat\"\n\n# Get the embedding for the search query from the Jina API\nurl = \"https://api.jina.ai/v1/embeddings\"\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": f\"Bearer {JINA_API_KEY}\",\n}\ndata = {\n    \"input\": [{\"text\": search_query}],\n    \"model\": MODEL,\n    \"dimensions\": DIMENSIONS,\n    # \"task\": \"retrieval.query\" # Uncomment this line for text-to-text retrieval tasks\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nquery_embedding = response.json()[\"data\"][0][\"embedding\"]\n\nsearch_results = client.query_points(\n    collection_name=collection_name,\n    query=query_embedding,\n    using=\"image_vector\",\n    limit=5\n).points\n\nfor result in search_results:\n    print(f\"ID: {result.id}, Score: {result.score}\")\n```\n\n----------------------------------------\n\nTITLE: Storing Data in Qdrant for Hybrid Search\nDESCRIPTION: Configures LlamaIndex settings, creates a Qdrant vector store with hybrid search enabled, and stores the parsed document data for efficient retrieval.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/hybrid-search-llamaindex-jinaai.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.core import Settings\nSettings.embed_model = jina_embedding_model\nSettings.llm = mixtral_llm\n\nfrom llama_index.core import VectorStoreIndex, StorageContext\nfrom llama_index.vector_stores.qdrant import QdrantVectorStore\nimport qdrant_client\n\nclient = qdrant_client.QdrantClient(\n    url=os.getenv(\"QDRANT_HOST\"),\n    api_key=os.getenv(\"QDRANT_API_KEY\")\n)\n\nvector_store = QdrantVectorStore(\n    client=client, collection_name=\"demo\", enable_hybrid=True, batch_size=20\n)\nSettings.chunk_size = 512\n\nstorage_context = StorageContext.from_defaults(vector_store=vector_store)\nindex = VectorStoreIndex.from_documents(\n    documents=llama_parse_documents, \n    storage_context=storage_context\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Vectors with Payload Filtering in Qdrant\nDESCRIPTION: This HTTP request performs a vector similarity search in a Qdrant collection. It includes a 4-dimensional query vector and specifies that only specific payload fields ('city', 'village', 'town') should be returned in the response.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-payload-fields/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"with_payload\": [\"city\", \"village\", \"town\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Quantization\nDESCRIPTION: Initializes a Qdrant client and creates a new collection with 768-dimensional vectors using cosine distance and INT8 scalar quantization. The configuration specifies that quantized vectors should always be stored in RAM for faster access.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/scalar-quantization-and-vectors-in-ram/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n    quantization_config=models.ScalarQuantization(\n        scalar=models.ScalarQuantizationConfig(\n            type=models.ScalarType.INT8,\n            always_ram=True,\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Managing Collection Aliases with Qdrant Rust Client\nDESCRIPTION: This code demonstrates how to manage collection aliases in Qdrant. It first deletes an existing alias called 'production_collection', then creates a new alias with the same name that points to 'example_collection'. This pattern is useful for zero-downtime collection swapping in production environments.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/switch/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::CreateAliasBuilder;\n\nclient.delete_alias(\"production_collection\").await?;\nclient\n    .create_alias(CreateAliasBuilder::new(\n        \"example_collection\",\n        \"production_collection\",\n    ))\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Vectors from Points in Qdrant Collection\nDESCRIPTION: This API request deletes specific vector embeddings ('text' and 'image') from multiple points (IDs 0, 3, and 100) within a collection while keeping the points intact. This is useful for selectively removing vector data from multi-vector points.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-vectors/simple/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/vectors/delete\n{\n    \"points\": [0, 3, 100],\n    \"vectors\": [\"text\", \"image\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Points from Embeddings\nDESCRIPTION: Code that transforms Gemini embedding results into Qdrant point structures with vectors and payload data. Each point includes an ID, the embedding vector, and the original text as payload.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/gemini.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npoints = [\n    PointStruct(\n        id=idx,\n        vector=response['embedding'],\n        payload={\"text\": text},\n    )\n    for idx, (response, text) in enumerate(zip(results, texts))\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Multivector Search using Python Client\nDESCRIPTION: Shows how to perform a complex multivector query in Qdrant using the Python client. The example demonstrates a three-stage reranking process using different vector representations, including the final stage with ColBERT multivectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=models.Prefetch(\n        prefetch=models.Prefetch(query=[1, 23, 45, 67], using=\"mrl_byte\", limit=1000),\n        query=[0.01, 0.45, 0.67],\n        using=\"full\",\n        limit=100,\n    ),\n    query=[\n        [0.1, 0.2],\n        [0.2, 0.1],\n        [0.8, 0.9],\n    ],\n    using=\"colbert\",\n    limit=10,\n)\n```\n\n----------------------------------------\n\nTITLE: Using Qdrant's New Recommendation API with HTTP POST\nDESCRIPTION: This snippet demonstrates how to use the updated Recommendation API in Qdrant 1.6. It shows how to provide both positive and negative examples using IDs and vectors, apply filters, and specify a recommendation strategy.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/new-recommendation-api.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/recommend\n{\n  \"positive\": [100, 231],\n  \"negative\": [718, [0.2, 0.3, 0.4, 0.5]],\n  \"filter\": {\n        \"must\": [\n            {\n                \"key\": \"city\",\n                \"match\": {\n                    \"value\": \"London\"\n                }\n            }\n        ]\n  },\n  \"strategy\": \"average_vector\",\n  \"limit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding a document with OpenAI\nDESCRIPTION: This snippet demonstrates how to embed a document using OpenAI's `text-embedding-3-small` model. It calls the `embeddings.create` method with the input texts and the specified model. The resulting embeddings will be used for vector search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/openai.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"embedding_model = \\\"text-embedding-3-small\\\" \n\nresult = openai_client.embeddings.create(input=texts, model=embedding_model)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Vector Collection with Cosine Distance\nDESCRIPTION: Initializes a new Qdrant collection with 768-dimensional vectors using Cosine distance metric. Configures optimizer settings to control segment management and size.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-large-segments/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\"\n    },\n    \"optimizers_config\": {\n        \"default_segment_number\": 2,\n        \"max_segment_size\": 5000000\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Binary Quantization in Rust\nDESCRIPTION: This code initializes a Qdrant client and creates a new collection with cosine distance, 1536-dimensional vectors, and binary quantization enabled. It demonstrates the use of the CreateCollectionBuilder to configure the collection parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-binary-quantization/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::\n    BinaryQuantizationBuilder, CreateCollectionBuilder, Distance, VectorParamsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(1536, Distance::Cosine))\n            .quantization_config(BinaryQuantizationBuilder::new(true)),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Vectors and Payloads in Qdrant using Python\nDESCRIPTION: This code demonstrates how to upsert multiple points into a Qdrant collection. Each point includes an ID, a payload with a group_id, and a vector. The client.upsert method is used to perform the operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-tenant-group-id/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n    collection_name=\"{collection_name}\",\n    points=[\n        models.PointStruct(\n            id=1,\n            payload={\"group_id\": \"user_1\"},\n            vector=[0.9, 0.1, 0.1],\n        ),\n        models.PointStruct(\n            id=2,\n            payload={\"group_id\": \"user_1\"},\n            vector=[0.1, 0.9, 0.1],\n        ),\n        models.PointStruct(\n            id=3,\n            payload={\"group_id\": \"user_2\"},\n            vector=[0.1, 0.1, 0.9],\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with C# Client\nDESCRIPTION: This snippet demonstrates how to create a Qdrant client and perform a vector search.  It specifies the collection name, prefetch parameters (including a smaller byte vector and its usage within the 'mrl_byte' named vector index), the query vector (a full vector associated with named vector index 'full'), and limits the search results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  prefetch: new List<PrefetchQuery> {\n    new() {\n      Query = new float[] { 1,23, 45, 67 }, // <------------- small byte vector\n        Using = \"mrl_byte\",\n        Limit = 1000\n    }\n  },\n  query: new float[] { 0.01f, 0.299f, 0.45f, 0.67f }, // <-- full vector\n  usingVector: \"full\",\n  limit: 10\n);\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Qdrant Client\nDESCRIPTION: This snippet imports the Qdrant client library and creates an instance of the QdrantClient using the previously defined QDRANT_URL and QDRANT_API_KEY. This client allows interaction with the Qdrant service for data operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/rag-deepseek.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport qdrant_client\n\nclient = qdrant_client.QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Context-Based Vector Search in Java\nDESCRIPTION: This code establishes a connection to a Qdrant vector database and performs a context-based search query using positive and negative examples. The query is structured with multiple context pairs, allowing for nuanced semantic search operations with a specified limit of results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/context-basic/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.ContextInput;\nimport io.qdrant.client.grpc.Points.ContextInputPair;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.context;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(context(ContextInput.newBuilder()\n                .addAllPairs(List.of(\n                        ContextInputPair.newBuilder()\n                                .setPositive(vectorInput(100))\n                                .setNegative(vectorInput(718))\n                                .build(),\n                        ContextInputPair.newBuilder()\n                                .setPositive(vectorInput(200))\n                                .setNegative(vectorInput(300))\n                                .build()))\n                .build()))\n        .setLimit(10)\n        .build()).get();\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Vector Collection in Qdrant with Python\nDESCRIPTION: Creates a new collection in Qdrant with two vector configurations: one for text embeddings and one for code embeddings. This setup allows for more nuanced semantic search across both natural language and code.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/code-search.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(QDRANT_URL, api_key=QDRANT_API_KEY)\nclient.create_collection(\n    \"qdrant-sources\",\n    vectors_config={\n        \"text\": models.VectorParams(\n            size=nlp_embeddings.shape[1],\n            distance=models.Distance.COSINE,\n        ),\n        \"code\": models.VectorParams(\n            size=code_embeddings.shape[1],\n            distance=models.Distance.COSINE,\n        ),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Searching for Documents with Qdrant and Voyage AI in Python\nDESCRIPTION: Demonstrates how to perform a vector search using Qdrant. It first embeds a query using Voyage AI, then uses the resulting embedding to search for similar documents in the Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/voyage.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresponse = vclient.embed(\n    [\"What is the best to use for vector search scaling?\"],\n    model=\"voyage-large-2\",\n    input_type=\"query\",\n)\n\nqclient.search(\n    collection_name=COLLECTION_NAME,\n    query_vector=response.embeddings[0],\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Client in Go\nDESCRIPTION: This snippet illustrates the creation of a Qdrant client and the execution of a query that includes both sparse and dense queries. It requires the Qdrant Go client library as a dependency. The constructed query specifies a collection name and prefetches data points based on their identifiers and associated features.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-basic/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tPrefetch: []*qdrant.PrefetchQuery{\n\t\t{\n\t\t\tQuery: qdrant.NewQuerySparse([]uint32{1, 42}, []float32{0.22, 0.8}),\n\t\t\tUsing: qdrant.PtrOf(\"sparse\"),\n\t\t},\n\t\t{\n\t\t\tQuery: qdrant.NewQueryDense([]float32{0.01, 0.45, 0.67}),\n\t\t\tUsing: qdrant.PtrOf(\"dense\"),\n\t\t},\n\t},\n\tQuery: qdrant.NewQueryFusion(qdrant.Fusion_RRF),\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Points in Qdrant Collection via HTTP POST\nDESCRIPTION: This HTTP request performs a vector similarity search on a Qdrant collection. The request includes a vector query, quantization parameters with rescoring disabled, and a limit of 10 results to return.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-disabled-rescoring/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"params\": {\n        \"quantization\": {\n            \"rescore\": false\n        }\n    },\n    \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Points with Vector Similarity Search in Qdrant\nDESCRIPTION: HTTP POST request to search for similar vectors in a Qdrant collection. The query includes a vector of [0.2, 0.1, 0.9, 0.7] and excludes the 'city' field from the returned payload.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/exclude-fields/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"with_payload\": {\n      \"exclude\": [\"city\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Points with Multiple Vectors to Qdrant in Python\nDESCRIPTION: Uploads data points to the Qdrant collection, where each point contains both text and code embeddings along with the original structure as payload. Uses UUID for generating unique IDs and processes points in batches.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/code-search.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\npoints = [\n    models.PointStruct(\n        id=uuid.uuid4().hex,\n        vector={\n            \"text\": text_embedding,\n            \"code\": code_embedding,\n        },\n        payload=structure,\n    )\n    for text_embedding, code_embedding, structure in zip(nlp_embeddings, code_embeddings, structures)\n]\n\nclient.upload_points(\"qdrant-sources\", points=points, batch_size=64)\n```\n\n----------------------------------------\n\nTITLE: Upserting Vector Data Points with Qdrant Java Client\nDESCRIPTION: This code snippet demonstrates how to create a Qdrant client, connect to a local Qdrant server, and upsert multiple vector data points with associated payloads. It uses the QdrantClient and QdrantGrpcClient classes to establish a connection and perform the upsert operation asynchronously.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/list-of-points-simple/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\nimport java.util.Map;\n\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.ValueFactory.value;\nimport static io.qdrant.client.VectorsFactory.vectors;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PointStruct;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .upsertAsync(\n        \"{collection_name}\",\n        List.of(\n            PointStruct.newBuilder()\n                .setId(id(1))\n                .setVectors(vectors(0.9f, 0.1f, 0.1f))\n                .putAllPayload(Map.of(\"color\", value(\"red\")))\n                .build(),\n            PointStruct.newBuilder()\n                .setId(id(2))\n                .setVectors(vectors(0.1f, 0.9f, 0.1f))\n                .putAllPayload(Map.of(\"color\", value(\"green\")))\n                .build(),\n            PointStruct.newBuilder()\n                .setId(id(3))\n                .setVectors(vectors(0.1f, 0.1f, 0.9f))\n                .putAllPayload(Map.of(\"color\", value(\"blue\")))\n                .build()))\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Collection with Vector and Quantization Settings\nDESCRIPTION: This HTTP PUT request creates or updates a Qdrant collection. It specifies a 768-dimensional vector space using Cosine distance, and configures int8 scalar quantization for optimized storage and performance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/scalar-quantization-and-vectors-in-ram/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\"\n    },\n    \"quantization_config\": {\n        \"scalar\": {\n            \"type\": \"int8\",\n            \"always_ram\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Grouped Points with Lookup in Qdrant\nDESCRIPTION: HTTP POST request that performs a grouped vector search query with cross-collection lookup functionality. The request enables searching vectors, grouping results by document_id, and looking up additional data from a related collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-groups/with-lookup/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/chunks/points/query/groups\n{\n    // Same as in the regular query API\n    \"query\": [1.1],\n\n    // Grouping parameters\n    \"group_by\": \"document_id\",\n    \"limit\": 2,\n    \"group_size\": 2,\n\n    // Lookup parameters\n    \"with_lookup\": {\n        // Name of the collection to look up points in\n        \"collection\": \"documents\",\n\n        // Options for specifying what to bring from the payload \n        // of the looked up point, true by default\n        \"with_payload\": [\"title\", \"text\"],\n\n        // Options for specifying what to bring from the vector(s) \n        // of the looked up point, true by default\n        \"with_vectors\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for RAG System\nDESCRIPTION: Imports necessary Python libraries for web scraping, language model integration, document processing, and vector storage. This setup is crucial for building the RAG system with Qdrant and LangChain.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-scaleway.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport getpass\nimport os\n\nimport bs4\nfrom langchain import hub\nfrom langchain_community.document_loaders import WebBaseLoader\nfrom langchain_qdrant import Qdrant\nfrom langchain_core.output_parsers import StrOutputParser\nfrom langchain_core.runnables import RunnablePassthrough\nfrom langchain_openai import ChatOpenAI, OpenAIEmbeddings\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter\n```\n\n----------------------------------------\n\nTITLE: Generating Qdrant Filters from Natural Language with LLMs\nDESCRIPTION: Code that uses the Anthropic LLM to convert a natural language query into a structured Qdrant filter model, without any additional instructions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/automate-filtering-with-llms.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import models\n\nqdrant_filter = anthropic_client.messages.create(\n    model=\"claude-3-5-sonnet-latest\",\n    response_model=models.Filter,\n    max_tokens=1024,\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"red T-shirt\"\n        }\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing SPLADE++ Token Decoder\nDESCRIPTION: Function to decode SPLADE++ sparse embeddings into human-readable tokens with their corresponding weights, sorted by impact score.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom tokenizers import Tokenizer\n\ntokenizer = Tokenizer.from_pretrained('Qdrant/SPLADE_PP_en_v1')\n\ndef get_tokens_and_weights(sparse_embedding, tokenizer):\n    token_weight_dict = {}\n    for i in range(len(sparse_embedding.indices)):\n        token = tokenizer.decode([sparse_embedding.indices[i]])\n        weight = sparse_embedding.values[i]\n        token_weight_dict[token] = weight\n\n    # Sort the dictionary by weights\n    token_weight_dict = dict(sorted(token_weight_dict.items(), key=lambda item: item[1], reverse=True))\n    return token_weight_dict\n```\n\n----------------------------------------\n\nTITLE: Combining Text and Code Embeddings in Batch Query\nDESCRIPTION: This snippet demonstrates how to execute a batch query using both text and code embeddings simultaneously. It combines both approaches to get the most relevant code snippets from different perspectives, returning payload information with the results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/code-search.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nresponses = client.query_batch_points(\n    \"qdrant-sources\",\n    requests=[\n        models.QueryRequest(\n            query=nlp_model.encode(query).tolist(),\n            using=\"text\",\n            with_payload=True,\n            limit=5,\n        ),\n        models.QueryRequest(\n            query=code_model.encode(query).tolist(),\n            using=\"code\",\n            with_payload=True,\n            limit=5,\n        ),\n    ]\n)\n\nresults = [response.points for response in responses]\n```\n\n----------------------------------------\n\nTITLE: Building Agentic RAG with OpenAI Swarm and Qdrant in Python\nDESCRIPTION: This code example shows how to implement an agentic RAG application using OpenAI Swarm framework and Qdrant for document retrieval. It defines two agents: a query improvement agent and a response generation agent, along with a function to retrieve documents from Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/agentic-rag.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom swarm import Swarm, Agent\n\nclient = Swarm()\n\ndef retrieve_documents(query: str) -> list[str]:\n    \"\"\"\n    Retrieve documents based on the query.\n    \"\"\"\n    ...\n\ndef transfer_to_query_improve_agent():\n    return query_improve_agent\n\nquery_improve_agent = Agent(\n    name=\"Query Improve Agent\",\n    instructions=(\n        \"You are a search expert that takes user queries and improves them to get better results. You fix typos and \"\n        \"extend queries with synonyms, if needed. You never ask the user for more information.\"\n    ),\n)\n\nresponse_generation_agent = Agent(\n    name=\"Response Generation Agent\",\n    instructions=(\n        \"You take the whole conversation and generate a final response based on the chat history. \"\n        \"If you don't have enough information, you can retrieve the documents from the knowledge base or \"\n        \"reformulate the query by transferring to other agent. You never ask the user for more information. \"\n        \"You have to always be the last participant of each conversation.\"\n    ),\n    functions=[retrieve_documents, transfer_to_query_improve_agent],\n)\n\nresponse = client.run(\n    agent=response_generation_agent,\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"Why Qdrant is the best vector database out there?\"\n        }\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Cluster Write Consistency Factor - Go\nDESCRIPTION: In this Go example, a Qdrant collection is set up with a `write_consistency_factor`, essential for determining how replicas handle write confirmations. It uses the Qdrant Go client library to manage configuration indicators like vectors, shard number, and replication efforts in a distributed environment.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_28\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     300,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tShardNumber:            qdrant.PtrOf(uint32(6)),\n\tReplicationFactor:      qdrant.PtrOf(uint32(2)),\n\tWriteConsistencyFactor: qdrant.PtrOf(uint32(2)),\n})\n```\n\n----------------------------------------\n\nTITLE: Programmatically Ingesting Documents into Qdrant with Unstructured\nDESCRIPTION: Python code example demonstrating how to programmatically use Unstructured to process a document and store it in Qdrant. It configures the Qdrant writer, sets up processing parameters, and runs the ingestion process.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/unstructured.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom unstructured.ingest.connector.local import SimpleLocalConfig\nfrom unstructured.ingest.connector.qdrant import (\n    QdrantWriteConfig,\n    SimpleQdrantConfig,\n)\nfrom unstructured.ingest.interfaces import (\n    ChunkingConfig,\n    EmbeddingConfig,\n    PartitionConfig,\n    ProcessorConfig,\n    ReadConfig,\n)\nfrom unstructured.ingest.runner import LocalRunner\nfrom unstructured.ingest.runner.writers.base_writer import Writer\nfrom unstructured.ingest.runner.writers.qdrant import QdrantWriter\n\ndef get_writer() -> Writer:\n    return QdrantWriter(\n        connector_config=SimpleQdrantConfig(\n            url=\"http://localhost:6333\",\n            collection_name=\"test\",\n        ),\n        write_config=QdrantWriteConfig(batch_size=80),\n    )\n\nif __name__ == \"__main__\":\n    writer = get_writer()\n    runner = LocalRunner(\n        processor_config=ProcessorConfig(\n            verbose=True,\n            output_dir=\"local-output-to-qdrant\",\n            num_processes=2,\n        ),\n        connector_config=SimpleLocalConfig(\n            input_path=\"example-docs/book-war-and-peace-1225p.txt\",\n        ),\n        read_config=ReadConfig(),\n        partition_config=PartitionConfig(),\n        chunking_config=ChunkingConfig(chunk_elements=True),\n        embedding_config=EmbeddingConfig(provider=\"langchain-huggingface\"),\n        writer=writer,\n        writer_kwargs={},\n    )\n    runner.run()\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Qdrant Cluster with YAML\nDESCRIPTION: This YAML snippet provides the minimal configuration for a QdrantCluster resource necessary for initializing a Qdrant cluster in a Kubernetes environment. It requires a unique cluster id, version, and resource allocations like CPU and memory. The `id` must be unique across all Qdrant clusters within the same namespace.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/qdrant-cluster-management.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: qdrant.io/v1\nkind: QdrantCluster\nmetadata:\n  name: qdrant-a7d8d973-0cc5-42de-8d7b-c29d14d24840\n  labels:\n    cluster-id: \"a7d8d973-0cc5-42de-8d7b-c29d14d24840\"\n    customer-id: \"acme-industries\"\nspec:\n  id: \"a7d8d973-0cc5-42de-8d7b-c29d14d24840\"\n  version: \"v1.11.3\"\n  size: 1\n  resources:\n    cpu: 100m\n    memory: \"1Gi\"\n    storage: \"2Gi\"\n```\n\n----------------------------------------\n\nTITLE: Vector Search with Neo4j and Qdrant\nDESCRIPTION: Example of performing vector search using Neo4j GraphRAG with Qdrant. Demonstrates setup of Neo4j driver and Qdrant client for direct vector queries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/neo4j-graphrag.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom neo4j import GraphDatabase\nfrom neo4j_graphrag.retrievers import QdrantNeo4jRetriever\nfrom qdrant_client import QdrantClient\nfrom examples.embedding_biology import EMBEDDING_BIOLOGY\n\nNEO4J_URL = \"neo4j://localhost:7687\"\nNEO4J_AUTH = (\"neo4j\", \"password\")\n\nwith GraphDatabase.driver(NEO4J_URL, auth=NEO4J_AUTH) as neo4j_driver:\n    retriever = QdrantNeo4jRetriever(\n        driver=neo4j_driver,\n        client=QdrantClient(url=\"http://localhost:6333\"),\n        collection_name=\"{collection_name}\",\n        id_property_external=\"neo4j_id\",\n        id_property_neo4j=\"id\",\n    )\n\nretriever.search(query_vector=[0.5523, 0.523, 0.132, 0.523, ...], top_k=5)\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection with Vector and Sparse Vector Configurations in Python\nDESCRIPTION: This code initializes a Qdrant client and creates a collection with custom vector parameters and sparse vector configurations. It sets up a collection with 128-dimensional vectors using cosine distance and float16 datatype, along with a sparse vector index for text data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-float16-sparse-and-dense/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(\n        size=128,\n        distance=models.Distance.COSINE,\n        datatype=models.Datatype.FLOAT16\n    ),\n    sparse_vectors_config={\n        \"text\": models.SparseVectorParams(\n            index=models.SparseIndexParams(datatype=models.Datatype.FLOAT16)\n        ),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Evaluating RAG Pipeline with QuotientAI in Python\nDESCRIPTION: This function evaluates the performance of a complete RAG pipeline on a given evaluation dataset. It retrieves relevant documents, populates the context field, submits the dataset to QuotientAI for evaluation, and returns the results as a pandas dataframe.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef run_eval(eval_df, collection_name, recipe_id, num_docs=3, path=\"eval_dataset_qdrant_questions.csv\"):\n    \"\"\"\n    This function evaluates the performance of a complete RAG pipeline on a given evaluation dataset.\n\n    Given an evaluation dataset (containing questions and ground truth answers),\n    this function retrieves relevant documents, populates the context field, and submits the dataset to QuotientAI for evaluation.\n    Once the evaluation is complete, aggregated statistics on the evaluation metrics are displayed.\n\n    The evaluation results are returned as a pandas dataframe.\n    \"\"\"\n\n    # Add context to each question by retrieving relevant documents\n    eval_df['documents'] = eval_df.apply(lambda x: get_documents(collection_name=collection_name,\n                                                                query=x['input_text'],\n                                                                num_documents=num_docs), axis=1)\n    eval_df['context'] = eval_df.apply(lambda x: \"\\n\".join(x['documents']), axis=1)\n\n    # Now we'll save the eval_df to a CSV\n    eval_df.to_csv(path, index=False)\n\n    # Upload the eval dataset to QuotientAI\n    dataset = quotient.create_dataset(\n        file_path=path,\n        name=\"qdrant-questions-eval-v1\",\n    )\n\n    # Create a new task for the dataset\n    task = quotient.create_task(\n        dataset_id=dataset['id'],\n        name='qdrant-questions-qa-v1',\n        task_type='question_answering'\n    )\n\n    # Run a job to evaluate the model\n    job = quotient.create_job(\n        task_id=task['id'],\n        recipe_id=recipe_id,\n        num_fewshot_examples=0,\n        limit=500,\n        metric_ids=[5, 7, 8, 11, 12, 13, 50],\n    )\n\n    # Show the progress of the job\n    show_job_progress(quotient, job['id'])\n\n    # Once the job is complete, we can get our results\n    data = quotient.get_eval_results(job_id=job['id'])\n\n    # Add the results to a pandas dataframe to get statistics on performance\n    df = pd.json_normalize(data, \"results\")\n    df_stats = df[df.columns[df.columns.str.contains(\"metric|completion_time\")]]\n\n    df.columns = df.columns.str.replace(\"metric.\", \"\")\n    df_stats.columns = df_stats.columns.str.replace(\"metric.\", \"\")\n\n    metrics = {\n        'completion_time_ms':'Completion Time (ms)',\n        'chunk_relevance': 'Chunk Relevance',\n        'selfcheckgpt_nli_relevance':\"Context Relevance\",\n        'selfcheckgpt_nli':\"Faithfulness\",\n        'rougeL_fmeasure':\"ROUGE-L\",\n        'bert_score_f1':\"BERTScore\",\n        'bert_sentence_similarity': \"BERT Sentence Similarity\",\n        'completion_verbosity':\"Completion Verbosity\",\n        'verbosity_ratio':\"Verbosity Ratio\",}\n\n    df = df.rename(columns=metrics)\n    df_stats = df_stats.rename(columns=metrics)\n\n    display(df_stats[metrics.values()].describe())\n\n    return df\n\nmain_metrics = [\n      'Context Relevance',\n      'Chunk Relevance',\n      'Faithfulness',\n      'ROUGE-L',\n      'BERT Sentence Similarity',\n      'BERTScore',\n      ]\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector DB in Go\nDESCRIPTION: Sets up a Qdrant client connection and performs a vector similarity search with filters. The query includes a vector search with similarity thresholds, filtering by city, and search parameters for exact matching and HNSW efficiency factor.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/basic-with-filter-and-params/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t\t},\n\t},\n\tParams: &qdrant.SearchParams{\n\t\tExact:  qdrant.PtrOf(false),\n\t\tHnswEf: qdrant.PtrOf(uint64(128)),\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Ingesting Data into Qdrant - Python\nDESCRIPTION: This function ingests processed points (which include embeddings and metadata) into a specified Qdrant collection. It uses the upsert method to add new data or update existing entries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-ingestion-beginners.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef ingest_data(points):\n    operation_info = qdrant_client.upsert(\n        collection_name=\"products-data\",  # Collection where data is being inserted\n        points=points\n    )\n    return operation_info\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection to Insert the Vectors - Python\nDESCRIPTION: This snippet shows how to create a collection in Qdrant and upsert the vectors converted from the model outputs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import VectorParams, Distance\n\ncollection_name = \"twelve_labs_collection\"\n\nqdrant_client.create_collection(\n    collection_name,\n    vectors_config=VectorParams(\n        size=1024,\n        distance=Distance.COSINE,\n    ),\n)\nqdrant_client.upsert(collection_name, points)\n```\n\n----------------------------------------\n\nTITLE: Constructing Multi-Stage Vector Search Query in Qdrant\nDESCRIPTION: Builds a complex vector search query with nested prefetch queries, multiple embedding models, and configurable search limits. Demonstrates advanced query composition techniques.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-multistage/rust.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nclient.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .add_prefetch(PrefetchQueryBuilder::default()\n                .query(Query::new_nearest(vec![1.0, 23.0, 45.0, 67.0]))\n                .using(\"mlr_byte\")\n                .limit(1000u64)\n            )\n            .query(Query::new_nearest(vec![0.01, 0.45, 0.67]))\n            .using(\"full\")\n            .limit(100u64)\n        )\n        .query(Query::new_nearest(vec![\n            vec![0.1, 0.2],\n            vec![0.2, 0.1],\n            vec![0.8, 0.9],\n        ]))\n        .using(\"colbert\")\n        .limit(10u64)\n).await?\n```\n\n----------------------------------------\n\nTITLE: Python Qdrant Query Implementation\nDESCRIPTION: Python client implementation for querying Qdrant with majority consistency, using the official client library with vector query and city filter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"city\",\n                match=models.MatchValue(\n                    value=\"London\",\n                ),\n            )\n        ]\n    ),\n    search_params=models.SearchParams(hnsw_ef=128, exact=False),\n    limit=3,\n    consistency=\"majority\",\n)\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with Exclusion Filters in Python\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client to perform a scroll query on a collection with exclusion filters. It excludes records where the city is 'London' and the color is 'red' from the query results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-must-not-filter/python.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must_not=[\n            models.FieldCondition(key=\"city\", match=models.MatchValue(value=\"London\")),\n            models.FieldCondition(key=\"color\", match=models.MatchValue(value=\"red\")),\n        ]\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Collection with Multivector Configuration\nDESCRIPTION: HTTP PUT request to create or update a collection with specified vector parameters. Configures a 128-dimensional vector space using Cosine distance and max similarity comparator for multivector setup.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-multivector/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT collections/{collection_name}\n{\n  \"vectors\": {\n    \"size\": 128,\n    \"distance\": \"Cosine\",\n    \"multivector_config\": {\n      \"comparator\": \"max_sim\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Collection Creation for Late Interaction Models in Python\nDESCRIPTION: This snippet demonstrates how to optimize the creation of a Qdrant collection when using late interaction models for reranking. It disables the HNSW graph creation for the late interaction model to reduce resource usage during indexing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/hybrid-search.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n    collection_name=\"my-collection\",\n    vectors_config={\n        \"dense\": models.VectorParams(...),\n        \"late-interaction\": models.VectorParams(\n            size=128,\n            distance=models.Distance.COSINE,\n            multivector_config=models.MultiVectorConfig(\n                comparator=models.MultiVectorComparator.MAX_SIM\n            ),\n            hnsw_config=models.HnswConfigDiff(\n                m=0,  # Disable HNSW graph creation\n            ),\n        )\n    },\n    sparse_vectors_config={\n        \"sparse\": models.SparseVectorParams(...)\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Scroll Query with Nested Filters in Qdrant\nDESCRIPTION: This code uses the Qdrant client to execute a scroll query on a collection with a complex filter. The filter excludes records that match both 'London' for the city and 'red' for the color.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-nested-clauses-filter/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must_not=[\n            models.Filter(\n                must=[\n                    models.FieldCondition(\n                        key=\"city\", match=models.MatchValue(value=\"London\")\n                    ),\n                    models.FieldCondition(\n                        key=\"color\", match=models.MatchValue(value=\"red\")\n                    ),\n                ],\n            ),\n        ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries for Data Ingestion\nDESCRIPTION: A list of Python libraries required to set up the data ingestion pipeline. This includes AWS SDK (boto3), LangChain components, text processing libraries, and the Qdrant client for vector storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-ingestion-beginners.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nboto3\nlangchain-community\nlangchain\npython-dotenv\nunstructured\nunstructured[pdf]\nqdrant_client\n```\n\n----------------------------------------\n\nTITLE: Initialize Qdrant Client in Memory\nDESCRIPTION: Initializes the Qdrant client to use in-memory storage. This is suitable for development and testing but not for production environments where data persistence is required.  The `\":memory:\"` argument specifies that the data should be stored in RAM.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/search-beginners.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"client = QdrantClient(\\\":memory:\\\")\"\n```\n\n----------------------------------------\n\nTITLE: LLM Integration for Graph-based RAG\nDESCRIPTION: Function to integrate graph context with GPT-4 for answering user queries. Formats graph data into a prompt and handles the LLM API interaction using OpenAI's chat completions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/graphrag-qdrant-neo4j.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef graphRAG_run(graph_context, user_query):\n    nodes_str = \", \".join(graph_context[\"nodes\"])\n    edges_str = \"; \".join(graph_context[\"edges\"])\n    prompt = f\"\"\"\n    You are an intelligent assistant with access to the following knowledge graph:\n\n    Nodes: {nodes_str}\n\n    Edges: {edges_str}\n\n    Using this graph, Answer the following question:\n\n    User Query: \"{user_query}\"\n    \"\"\"\n    \n    try:\n        response = client.chat.completions.create(\n            model=\"gpt-4\",\n            messages=[\n                {\"role\": \"system\", \"content\": \"Provide the answer for the following question:\"},\n                {\"role\": \"user\", \"content\": prompt}\n            ]\n        )\n        return response.choices[0].message\n    \n    except Exception as e:\n        return f\"Error querying LLM: {str(e)}\"\n```\n\n----------------------------------------\n\nTITLE: Uploading Dataset to Qdrant in Batches\nDESCRIPTION: Demonstrates how to upload the arXiv embeddings dataset to Qdrant in batches using the upsert method of the Qdrant client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/huggingface-datasets.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbatch_size = 100\n\nfor batch in batched(dataset, batch_size):\n    ids = [point.pop(\"id\") for point in batch]\n    vectors = [point.pop(\"vector\") for point in batch]\n\n    client.upsert(\n        collection_name=\"arxiv-titles-instructorxl-embeddings\",\n        points=models.Batch(\n            ids=ids,\n            vectors=vectors,\n            payloads=batch,\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in Qdrant using Python\nDESCRIPTION: This code snippet initializes a Qdrant client and creates a collection with specific vector parameters and HNSW configurations. It requires the Qdrant client package to be installed. The parameters 'collection_name', 'size', 'distance', and 'on_disk' are critical for defining the characteristics of the new collection. The expected output is the successful creation of the collection in the Qdrant server.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-vectors-and-hnsw-on-disk/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE, on_disk=True),\n    hnsw_config=models.HnswConfigDiff(on_disk=True),\n)\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Code Structures in Python\nDESCRIPTION: Loads code structure data from a JSONL file into a list of dictionaries for processing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/code-search.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nstructures = []\nwith open(\"structures.jsonl\", \"r\") as fp:\n    for i, row in enumerate(fp):\n        entry = json.loads(row)\n        structures.append(entry)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Collection Parameters using cURL\nDESCRIPTION: A cURL command that sends a PATCH request to update Qdrant collection settings. Configures vector parameters including HNSW index settings, quantization configuration for both product and scalar quantization, and storage options.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/hnsw-and-quantization/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"vectors\": {\n        \"my_vector\": {\n            \"hnsw_config\": {\n                \"m\": 32,\n                \"ef_construct\": 123\n            },\n            \"quantization_config\": {\n                \"product\": {\n                    \"compression\": \"x32\",\n                    \"always_ram\": true\n                }\n            },\n            \"on_disk\": true\n        }\n    },\n    \"hnsw_config\": {\n        \"ef_construct\": 123\n    },\n    \"quantization_config\": {\n        \"scalar\": {\n            \"type\": \"int8\",\n            \"quantile\": 0.8,\n            \"always_ram\": false\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Scrolling Records with Timestamp Ordering in Qdrant\nDESCRIPTION: Shows how to use the scroll method of the Qdrant client to retrieve paginated results ordered by timestamp. The query specifies a limit of 15 records and orders results by the timestamp field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-order-by-simple/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"{collection_name}\", {\n  limit: 15,\n  order_by: \"timestamp\", // <-- this!\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Vectors with Qdrant Client in Rust\nDESCRIPTION: Establishes a connection to a Qdrant server and performs a vector similarity search with specific parameters. The query includes a 4-dimensional vector, limits results to 3 matches, excludes the 'city' payload field, and includes vector values in the response.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/exclude-fields/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{with_payload_selector::SelectorOptions, QueryPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .with_payload(SelectorOptions::Exclude(vec![\"city\".to_string()].into()))\n            .with_vectors(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client\nDESCRIPTION: Setting up Qdrant client in memory mode for local experimentation\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-rerankers.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nqdrant_client = QdrantClient(\":memory:\") # Qdrant is running from RAM.\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection\nDESCRIPTION: Creating a collection in Qdrant with vector configuration for storing embeddings\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-rerankers.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nqdrant_client.create_collection(\n    collection_name=\"movies\",\n    vectors_config={\n        \"embedding\": models.VectorParams(\n            size=384, #size of `all-MiniLM-L6-v2` embeddings\n            distance=models.Distance.COSINE\n        )\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Embedding and Uploading Notes to Qdrant\nDESCRIPTION: Uses Cohere's API to generate embeddings for the note texts, then uploads these embeddings along with the original note data to the Qdrant collection. This process prepares the data for semantic search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/cohere-rag-connector.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport cohere\nimport uuid\n\ncohere_client = cohere.Client(api_key=\"my-cohere-api-key\")\n\nresponse = cohere_client.embed(\n    texts=[\n        note.get(\"text\")\n        for note in notes\n    ],\n    model=\"embed-multilingual-v3.0\",\n    input_type=\"search_document\",\n)\n\nclient.upload_points(\n    collection_name=\"personal-notes\",\n    points=[\n        models.PointStruct(\n            id=uuid.uuid4().hex,\n            vector=embedding,\n            payload=note,\n        )\n        for note, embedding in zip(notes, response.embeddings)\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring DSPy with Qdrant in Python\nDESCRIPTION: This snippet demonstrates how to configure DSPy to use Qdrant as the retrieval mechanism. It establishes connections with Qdrant and sets up DSPy with the required LLM from OpenAI. Dependencies include DSPy and Qdrant client libraries. It requires the collection name and k-value for retrieval configuration. The setup is crucial for building modules that rely on DSPy's integration with LLMs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/dspy-vs-langchain.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# pip install dspy-ai[qdrant]\n\nimport dspy\n\nfrom dspy.retrieve.qdrant_rm import QdrantRM\n\nfrom qdrant_client import QdrantClient\n\nllm = dspy.OpenAI(model=\"gpt-3.5-turbo\")\n\nqdrant_client = QdrantClient()\n\nqdrant_rm = QdrantRM(\"collection-name\", qdrant_client, k=3)\n\ndspy.settings.configure(lm=llm, rm=qdrant_rm)\n```\n\n----------------------------------------\n\nTITLE: Using Jina Embeddings v3 with Qdrant in Python\nDESCRIPTION: This code demonstrates how to get embeddings from Jina AI API using the jina-embeddings-v3 model and index them in Qdrant. It shows the process of making API requests to generate embeddings and then storing them in a Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/jina-embeddings.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nimport qdrant_client\nfrom qdrant_client.models import Distance, VectorParams, Batch\n\n# Provide Jina API key and choose one of the available models.\nJINA_API_KEY = \"jina_xxxxxxxxxxx\"\nMODEL = \"jina-embeddings-v3\"\nDIMENSIONS = 1024 # Or choose your desired output vector dimensionality.\nTASK = 'retrieval.passage' # For indexing, or set to retrieval.query for querying\n\n# Get embeddings from the API\nurl = \"https://api.jina.ai/v1/embeddings\"\n\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": f\"Bearer {JINA_API_KEY}\",\n}\n\ndata = {\n    \"input\": [\"Your text string goes here\", \"You can send multiple texts\"],\n    \"model\": MODEL,\n    \"dimensions\": DIMENSIONS,\n    \"task\": TASK,\n    \"late_chunking\": True,\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nembeddings = [d[\"embedding\"] for d in response.json()[\"data\"]]\n\n\n# Index the embeddings into Qdrant\nclient = qdrant_client.QdrantClient(\":memory:\")\nclient.create_collection(\n    collection_name=\"MyCollection\",\n    vectors_config=VectorParams(size= DIMENSIONS, distance=Distance.DOT),\n)\n\n\nqdrant_client.upsert(\n    collection_name=\"MyCollection\",\n    points=Batch(\n        ids=list(range(len(embeddings))),\n        vectors=embeddings,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Data Fetching and Conversion Components\nDESCRIPTION: Configures LinkContentFetcher and HTMLToDocument components for fetching and converting HTML content\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom haystack.components.fetchers import LinkContentFetcher\nfrom haystack.components.converters import HTMLToDocument\n\nfetcher = LinkContentFetcher()\nconverter = HTMLToDocument()\n\nindexing_pipeline.add_component(\"fetcher\", fetcher)\nindexing_pipeline.add_component(\"converter\", converter)\n\nindexing_pipeline.connect(\"fetcher.streams\", \"converter.sources\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Qdrant Client in Python\nDESCRIPTION: This code demonstrates how to use the AsyncQdrantClient to perform asynchronous operations with Qdrant. It includes creating a collection, inserting a vector, and searching for nearest neighbors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/async-api.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import models\n\nimport qdrant_client\nimport asyncio\n\n\nasync def main():\n    client = qdrant_client.AsyncQdrantClient(\"localhost\")\n\n    # Create a collection\n    await client.create_collection(\n        collection_name=\"my_collection\",\n        vectors_config=models.VectorParams(size=4, distance=models.Distance.COSINE),\n    )\n\n    # Insert a vector\n    await client.upsert(\n        collection_name=\"my_collection\",\n        points=[\n            models.PointStruct(\n                id=\"5c56c793-69f3-4fbf-87e6-c4bf54c28c26\",\n                payload={\n                    \"color\": \"red\",\n                },\n                vector=[0.9, 0.1, 0.1, 0.5],\n            ),\n        ],\n    )\n\n    # Search for nearest neighbors\n    points = await client.query_points(\n        collection_name=\"my_collection\",\n        query=[0.9, 0.1, 0.1, 0.5],\n        limit=2,\n    ).points\n\n    # Your async code using AsyncQdrantClient might be put here\n    # ...\n\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics for FAQ Similarity Model\nDESCRIPTION: This snippet shows how to configure evaluation metrics for the FAQ similarity model. It adds RetrievalPrecision and RetrievalReciprocalRank metrics to the model using the AttachedMetric wrapper for easy logging.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/faq-question-answering.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom quaterion.eval.pair import RetrievalPrecision, RetrievalReciprocalRank\nfrom quaterion.eval.attached_metric import AttachedMetric\n\n\nclass FAQModel(TrainableModel):\n    def __init__(self, lr=10e-5, *args, **kwargs):\n        self.lr = lr\n        super().__init__(*args, **kwargs)\n    \n    ...\n    def configure_metrics(self):\n        return [\n            AttachedMetric(\n                \"RetrievalPrecision\",\n                RetrievalPrecision(k=1),\n                prog_bar=True,\n                on_epoch=True,\n            ),\n            AttachedMetric(\n                \"RetrievalReciprocalRank\",\n                RetrievalReciprocalRank(),\n                prog_bar=True,\n                on_epoch=True\n            ),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Baseline RAG Implementation with Qdrant\nDESCRIPTION: Initial setup using bge-small-en embeddings with 512 chunk size and 64 overlap. Documents are processed and ingested into Qdrant collection using add_documents method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n#experiment1 - base config\nchunk_size = 512\nchunk_overlap = 64\nembedding_model_name = \"BAAI/bge-small-en\"\nnum_docs = 3\n\nCOLLECTION_NAME = f\"experiment_{chunk_size}_{chunk_overlap}_{embedding_model_name.split('/')[1]}\"\n\nadd_documents(client,\n              collection_name=COLLECTION_NAME,\n              chunk_size=chunk_size,\n              chunk_overlap=chunk_overlap,\n              embedding_model_name=embedding_model_name)\n              \n#Outputs\n#processed: 4504\n#content:   4504\n#metadata:  4504\n```\n\n----------------------------------------\n\nTITLE: Implementing Multistep Retrieval with Matryoshka Embeddings in Python\nDESCRIPTION: This snippet demonstrates how to create a prefetch operation using Matryoshka embeddings with increasing dimensionality for multistep retrieval and reranking. It uses embeddings of 64, 128, and 256 dimensions in successive steps.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/hybrid-search.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmatryoshka_prefetch = models.Prefetch(\n    prefetch=[\n        models.Prefetch(\n            prefetch=[\n                # The first prefetch operation retrieves 100 documents\n                # using the Matryoshka embeddings with the lowest\n                # dimensionality of 64.\n                models.Prefetch(\n                    query=[0.456, -0.789, ..., 0.239],\n                    using=\"matryoshka-64dim\",\n                    limit=100,\n                ),\n            ],\n            # Then, the retrieved documents are re-ranked using the\n            # Matryoshka embeddings with the dimensionality of 128.\n            query=[0.456, -0.789, ..., -0.789],\n            using=\"matryoshka-128dim\",\n            limit=50,\n        )\n    ],\n    # Finally, the results are re-ranked using the Matryoshka\n    # embeddings with the dimensionality of 256.\n    query=[0.456, -0.789, ..., 0.123],\n    using=\"matryoshka-256dim\",\n    limit=25,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Connection Parameters in Python\nDESCRIPTION: Sets up connection parameters for a Qdrant server, which can be either a local Docker instance or a Qdrant Cloud deployment. Requires a URL and, for cloud deployments, an API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/code-search.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nQDRANT_URL = \"https://my-cluster.cloud.qdrant.io:6333\" # http://localhost:6333 for local instance\nQDRANT_API_KEY = \"THIS_IS_YOUR_API_KEY\" # None for local instance\n```\n\n----------------------------------------\n\nTITLE: Generating embeddings with AWS Bedrock and storing them in Qdrant using JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use AWS Bedrock's Titan Embeddings G1 model to generate embeddings and store them in a Qdrant collection. It requires @aws-sdk/client-bedrock-runtime and @qdrant/js-client-rest dependencies, and proper AWS credentials configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/bedrock.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Install the required dependencies\n// npm install @aws-sdk/client-bedrock-runtime @qdrant/js-client-rest\n\nimport {\n    BedrockRuntimeClient,\n    InvokeModelCommand,\n} from \"@aws-sdk/client-bedrock-runtime\";\nimport { QdrantClient } from '@qdrant/js-client-rest';\n\nconst main = async () => {\n    const bedrockClient = new BedrockRuntimeClient({\n        region: \"<YOUR_AWS_REGION>\",\n        credentials: {\n            accessKeyId: \"<YOUR_AWS_ACCESS_KEY_ID>\",,\n            secretAccessKey: \"<YOUR_AWS_SECRET_KEY>\",\n        },\n    });\n\n    const qdrantClient = new QdrantClient({ url: 'http://localhost:6333' });\n\n    await qdrantClient.createCollection(\"{collection_name}\", {\n        vectors: {\n            size: 1536,\n            distance: 'Cosine',\n        }\n    });\n\n    const response = await bedrockClient.send(\n        new InvokeModelCommand({\n            modelId: \"amazon.titan-embed-text-v1\",\n            body: JSON.stringify({\n                inputText: \"Some text to generate embeddings for\",\n            }),\n            contentType: \"application/json\",\n            accept: \"application/json\",\n        })\n    );\n\n    const body = new TextDecoder().decode(response.body);\n\n    await qdrantClient.upsert(\"{collection_name}\", {\n        points: [\n            {\n                id: 1,\n                vector: JSON.parse(body).embedding,\n            },\n        ],\n    });\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Chunking and Indexing Blog Content in Qdrant\nDESCRIPTION: Splits the loaded document into smaller chunks and indexes them in Qdrant using OpenAI embeddings. This process prepares the content for efficient retrieval in the RAG system.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-scaleway.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntext_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)\ntext_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)\nsplits = text_splitter.split_documents(docs)\n\nvectorstore = Qdrant.from_documents(\n    documents=splits,\n    embedding=OpenAIEmbeddings(),\n    collection_name=\"lilianweng\",\n    url=os.environ[\"QDRANT_URL\"],\n    api_key=os.environ[\"QDRANT_API_KEY\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Car Image Dataset and DataLoader Setup in Python\nDESCRIPTION: Sets up dataset processing pipeline for Stanford Cars dataset using PyTorch and Quaterion. Includes dataset splitting into train/test sets with distinct categories, image transformations, and custom dataset class implementation. Uses GroupSimilarityDataLoader for similarity learning.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/cars-recognition.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport os\nimport tqdm\nfrom torch.utils.data import Dataset, Subset\nfrom torchvision import datasets, transforms\nfrom typing import Callable\nfrom pytorch_lightning import seed_everything\n\nfrom quaterion.dataset import (\n    GroupSimilarityDataLoader,\n    SimilarityGroupSample,\n)\n\n# set seed to deterministically sample train and test categories later on\nseed_everything(seed=42)\n\n# dataset will be downloaded to this directory under local directory\ndataset_path = os.path.join(\".\", \"torchvision\", \"datasets\")\n\n\ndef get_datasets(input_size: int):\n    # Use Mean and std values for the ImageNet dataset as the base model was pretrained on it.\n    # taken from https://www.geeksforgeeks.org/how-to-normalize-images-in-pytorch/\n    mean = [0.485, 0.456, 0.406]\n    std = [0.229, 0.224, 0.225]\n\n    # create train and test transforms\n    transform = transforms.Compose(\n        [\n            transforms.Resize((input_size, input_size)),\n            transforms.ToTensor(),\n            transforms.Normalize(mean, std),\n        ]\n    )\n\n    # we need to merge train and test splits into a full dataset first,\n    # and then we will split it to two subsets again with each one composed of distinct labels.\n    full_dataset = datasets.StanfordCars(\n        root=dataset_path, split=\"train\", download=True\n    ) + datasets.StanfordCars(root=dataset_path, split=\"test\", download=True)\n\n    # full_dataset contains examples from 196 categories labeled with an integer from 0 to 195\n    # randomly sample half of it to be used for training\n    train_categories = np.random.choice(a=196, size=196 // 2, replace=False)\n\n    # get a list of labels for all samples in the dataset\n    labels_list = np.array([label for _, label in tqdm.tqdm(full_dataset)])\n\n    # get a mask for indices where label is included in train_categories\n    labels_mask = np.isin(labels_list, train_categories)\n\n    # get a list of indices to be used as train samples\n    train_indices = np.argwhere(labels_mask).squeeze()\n\n    # others will be used as test samples\n    test_indices = np.argwhere(np.logical_not(labels_mask)).squeeze()\n\n    # now that we have distinct indices for train and test sets, we can use `Subset` to create new datasets\n    # from `full_dataset`, which contain only the samples at given indices.\n    # finally, we apply transformations created above.\n    train_dataset = CarsDataset(\n        Subset(full_dataset, train_indices), transform=transform\n    )\n\n    test_dataset = CarsDataset(\n        Subset(full_dataset, test_indices), transform=transform\n    )\n\n    return train_dataset, test_dataset\n\n\ndef get_dataloaders(\n    batch_size: int,\n    input_size: int,\n    shuffle: bool = False,\n):\n    train_dataset, test_dataset = get_datasets(input_size)\n\n    train_dataloader = GroupSimilarityDataLoader(\n        train_dataset, batch_size=batch_size, shuffle=shuffle\n    )\n\n    test_dataloader = GroupSimilarityDataLoader(\n        test_dataset, batch_size=batch_size, shuffle=False\n    )\n\n    return train_dataloader, test_dataloader\n\n\nclass CarsDataset(Dataset):\n    def __init__(self, dataset: Dataset, transform: Callable):\n        self._dataset = dataset\n        self._transform = transform\n\n    def __len__(self) -> int:\n        return len(self._dataset)\n\n    def __getitem__(self, index) -> SimilarityGroupSample:\n        image, label = self._dataset[index]\n        image = self._transform(image)\n\n        return SimilarityGroupSample(obj=image, group=label)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Client with LlamaIndex\nDESCRIPTION: Python code to initialize QdrantClient and set up VectorStoreIndex for document storage and retrieval. Shows how to connect to either Qdrant Cloud or local instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/llama-index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.core.indices.vector_store.base import VectorStoreIndex\nfrom llama_index.vector_stores.qdrant import QdrantVectorStore\n\nimport qdrant_client\n\nclient = qdrant_client.QdrantClient(\n    \"<qdrant-url>\",\n    api_key=\"<qdrant-api-key>\", # For Qdrant Cloud, None for local instance\n)\n\nvector_store = QdrantVectorStore(client=client, collection_name=\"documents\")\nindex = VectorStoreIndex.from_vector_store(vector_store=vector_store)\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in TypeScript\nDESCRIPTION: Creates a new Qdrant client connection to localhost and initializes a collection with 768-dimensional vectors using Cosine distance. Includes int8 scalar quantization configuration with RAM storage enabled.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/scalar-quantization-and-vectors-in-ram/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n  },\n  quantization_config: {\n    scalar: {\n      type: \"int8\",\n      always_ram: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Custom Sharding in Qdrant\nDESCRIPTION: This code demonstrates how to create a collection with custom sharding method and define specific shard keys for different regions (Canada and Germany).\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/multitenancy.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n    collection_name=\"{tenant_data}\",\n    shard_number=2,\n    sharding_method=models.ShardingMethod.CUSTOM,\n    # ... other collection parameters\n)\nclient.create_shard_key(\"{tenant_data}\", \"canada\")\nclient.create_shard_key(\"{tenant_data}\", \"germany\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Embedding and Reranker Models\nDESCRIPTION: Loading the dense embedding model for first-stage retrieval and cross-encoder for reranking\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-rerankers.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndense_embedding_model = TextEmbedding(\"sentence-transformers/all-MiniLM-L6-v2\")\nreranker = TextCrossEncoder(model_name='jinaai/jina-reranker-v2-base-multilingual')\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Method in HybridSearcher Class in Python\nDESCRIPTION: Implements a search method that uses the Qdrant client to perform hybrid search queries. The method takes a text input, queries the Qdrant collection, and returns metadata from the search results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef search(self, text: str):\n    search_result = self.qdrant_client.query(\n        collection_name=self.collection_name,\n        query_text=text,\n        query_filter=None,  # If you don't want any filters for now\n        limit=5,  # 5 the closest results\n    )\n    # `search_result` contains found vector ids with similarity scores \n    # along with the stored payload\n    \n    # Select and return metadata\n    metadata = [hit.metadata for hit in search_result]\n    return metadata\n```\n\n----------------------------------------\n\nTITLE: Integrating Ollama with Qdrant using Python\nDESCRIPTION: This Python script initializes Ollama and Qdrant clients, generates embeddings for a given text using a specified Ollama model, and stores the embeddings in a Qdrant collection along with the original text as payload. It also creates the Qdrant collection if it doesn't already exist, configuring the vector parameters with cosine distance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/ollama.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"from qdrant_client import QdrantClient, models\nimport ollama\n\nCOLLECTION_NAME = \\\"NicheApplications\\\"\n\n# Initialize Ollama client\noclient = ollama.Client(host=\\\"localhost\\\")\n\n# Initialize Qdrant client\nqclient = QdrantClient(host=\\\"localhost\\\", port=6333)\n\n# Text to embed\ntext = \\\"Ollama excels in niche applications with specific embeddings\\\"\n\n# Generate embeddings\nresponse = oclient.embeddings(model=\\\"llama3.2\\\", prompt=text)\nembeddings = response[\\\"embedding\\\"]\n\n# Create a collection if it doesn't already exist\nif not qclient.collection_exists(COLLECTION_NAME):\n    qclient.create_collection(\n        collection_name=COLLECTION_NAME,\n        vectors_config=models.VectorParams(\n            size=len(embeddings), distance=models.Distance.COSINE\n        ),\n    )\n\n# Upload the vectors to the collection along with the original text as payload\nqclient.upsert(\n    collection_name=COLLECTION_NAME,\n    points=[models.PointStruct(id=1, vector=embeddings, payload={\\\"text\\\": text})],\n)\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Collection with Vector Parameters in Qdrant\nDESCRIPTION: This snippet demonstrates how to configure a collection in Qdrant using HTTP PUT request. It specifies vector configuration including size and distance measurement, and ensures data is stored on disk with the HNSW algorithm. No additional dependencies are required besides a running Qdrant instance. Parameters include 'collection_name' to define the target collection, 'size' to set the vector dimension, 'distance' for distance computation method, and 'on_disk' to enable persistent storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-vectors-and-hnsw-on-disk/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\",\n      \"on_disk\": true\n    },\n    \"hnsw_config\": {\n        \"on_disk\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Re-Scoring Queries Using Multi-Vectors in JSON\nDESCRIPTION: This snippet demonstrates fetching 100 results using a default vector and then re-scoring them with a multi-vector model to collect the top 10. It illustrates Qdrant's capability to handle complex vector queries efficiently for enhanced accuracy.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/hybrid-queries.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\\\"/documentation/headless/snippets/query-points/hybrid-rescoring-multivector/\\\" >}}\n```\n\n----------------------------------------\n\nTITLE: Upserting Sparse Vectors in Qdrant Collection using Python\nDESCRIPTION: This code demonstrates how to upsert multiple points with sparse vectors into a Qdrant collection. It uses the Qdrant client to insert two points, each with a unique ID and a sparse vector representation for the 'text' field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/sparse-vectors/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n    collection_name=\"{collection_name}\",\n    points=[\n        models.PointStruct(\n            id=1,\n            vector={\n                \"text\": models.SparseVector(\n                    indices=[6, 7],\n                    values=[1.0, 2.0],\n                )\n            },\n        ),\n        models.PointStruct(\n            id=2,\n            vector={\n                \"text\": models.SparseVector(\n                    indices=[1, 2, 3, 4, 5],\n                    values=[0.1, 0.2, 0.3, 0.4, 0.5],\n                )\n            },\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Payload Fields with Filtering in Qdrant Collection using TypeScript\nDESCRIPTION: This snippet demonstrates how to delete specific payload fields from points in a Qdrant collection that match certain criteria. The example removes 'color' and 'price' fields from all points where the color field value is 'red'. The operation uses a filter to specify which points should be affected by the deletion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-payload/by-filter/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.deletePayload(\"{collection_name}\", {\n  keys: [\"color\", \"price\"],\n  filter: {\n    must: [\n      {\n        key: \"color\",\n        match: {\n          value: \"red\",\n        },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtered Vector Search with Payload in Qdrant\nDESCRIPTION: This code snippet shows how to perform a filtered vector search in Qdrant. It searches for vectors similar to [0.2, 0.1, 0.9, 0.7] in the 'test_collection', but only returns results where the 'city' field matches 'London'. The search includes payload in the results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import Filter, FieldCondition, MatchValue\n\nsearch_result = client.query_points(\n    collection_name=\"test_collection\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    query_filter=Filter(\n        must=[FieldCondition(key=\"city\", match=MatchValue(value=\"London\"))]\n    ),\n    with_payload=True,\n    limit=3,\n).points\n\nprint(search_result)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsearchResult = await client.query(\"test_collection\", {\n    query: [0.2, 0.1, 0.9, 0.7],\n    filter: {\n        must: [{ key: \"city\", match: { value: \"London\" } }],\n    },\n    with_payload: true,\n    limit: 3,\n});\n\nconsole.debug(searchResult);\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, QueryPointsBuilder};\n\nlet search_result = client\n    .query(\n        QueryPointsBuilder::new(\"test_collection\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .filter(Filter::must([Condition::matches(\n                \"city\",\n                \"London\".to_string(),\n            )]))\n            .with_payload(true),\n    )\n    .await?;\n\ndbg!(search_result);\n```\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nList<ScoredPoint> searchResult =\n    client.queryAsync(QueryPoints.newBuilder()\n                .setCollectionName(\"test_collection\")\n                .setLimit(3)\n                .setFilter(Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")))\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setWithPayload(enable(true))\n                .build()).get();\n\nSystem.out.println(searchResult);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar searchResult = await client.QueryAsync(\n    collectionName: \"test_collection\",\n    query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n    filter: MatchKeyword(\"city\", \"London\"),\n    limit: 3,\n    payloadSelector: true\n);\n\nConsole.WriteLine(searchResult);\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nsearchResult, err := client.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"test_collection\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t\t},\n\t},\n\tWithPayload: qdrant.NewWithPayload(true),\n})\nif err != nil {\n\tpanic(err)\n}\n\nfmt.Println(searchResult)\n```\n\n----------------------------------------\n\nTITLE: Upserting Data in Qdrant Using Python Client\nDESCRIPTION: This snippet demonstrates how to use a Python client to upsert data into a Qdrant collection. It employs the 'upsert' method to add data points defined by IDs, associated payloads, and vectors. Key dependencies include a pre-initialized 'client' object and existence of a 'models.Batch' class. Inputs are collection name, point IDs, payloads, and their respective vector representations. No explicit output is defined; typically used to persist data in the Qdrant vector database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/batch-simple/python.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclient.upsert(\n    collection_name=\\\"{collection_name}\\\",\n    points=models.Batch(\n        ids=[1, 2, 3],\n        payloads=[\n            {\\\"color\\\": \\\"red\\\"},\n            {\\\"color\\\": \\\"green\\\"},\n            {\\\"color\\\": \\\"blue\\\"},\n        ],\n        vectors=[\n            [0.9, 0.1, 0.1],\n            [0.1, 0.9, 0.1],\n            [0.1, 0.1, 0.9],\n        ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Representing Sparse Vectors in JSON\nDESCRIPTION: Example of a sparse vector representation in JSON format, showing token IDs and their corresponding weights.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-a-vector-database.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   193: 0.04,\n   9182: 0.12,\n   15012: 0.73,\n   6731: 0.69,\n   454: 0.21\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collection with Text Embeddings\nDESCRIPTION: This snippet shows how to query a Qdrant collection using text embeddings to find relevant code snippets. It encodes the natural language query using an NLP model and searches the 'qdrant-sources' collection with a limit of 5 results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/code-search.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nquery = \"How do I count points in a collection?\"\n\nhits = client.query_points(\n    \"qdrant-sources\",\n    query=nlp_model.encode(query).tolist(),\n    using=\"text\",\n    limit=5,\n).points\n```\n\n----------------------------------------\n\nTITLE: Querying Points in Collection using HTTP POST for Qdrant API\nDESCRIPTION: This snippet demonstrates how to formulate an HTTP POST request to query points in a specified collection within the Qdrant service. It includes options for multi-vector queries and setting limits on results based on different query modes such as 'mrl_byte', 'full', and 'colbert'. Key parameters include 'query', 'using', and 'limit', which dictate the nature of the query and its constraints.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-multistage/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": {\n        \"prefetch\": {\n            \"query\": [1, 23, 45, 67], // <------ small byte vector\n            \"using\": \"mrl_byte\"\n            \"limit\": 1000\n        },\n        \"query\": [0.01, 0.45, 0.67, ...], // <-- full dense vector\n        \"using\": \"full\"\n        \"limit\": 100\n    },\n    \"query\": [           // <─┐\n        [0.1, 0.2, ...], // < │\n        [0.2, 0.1, ...], // < ├─ multi-vector\n        [0.8, 0.9, ...]  // < │\n    ],                   // <─┘       \n    \"using\": \"colbert\",\n    \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Client and Performing Vector Similarity Search in Java\nDESCRIPTION: This snippet demonstrates how to instantiate a Qdrant client and execute a nearest-neighbor search query. It creates a gRPC client connection to a Qdrant server, defines a vector query with specific dimensions, limits the results to 3 points, and includes only certain payload fields in the response.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-payload-fields/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.WithPayloadSelectorFactory.include;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setWithPayload(include(List.of(\"city\", \"village\", \"town\")))\n                .setLimit(3)\n                .build())\n        .get();\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Components - Java Configuration\nDESCRIPTION: Java configuration class that sets up the embedding model, QdrantClient, and QdrantRepository beans for dependency injection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/solon.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class DemoConfig {\n    \n    // Create the embedding model\n    @Bean\n    public EmbeddingModel embeddingModel(@Inject(\"${solon.ai.embed.bgem3}\") EmbeddingConfig config) {\n        return EmbeddingModel.of(config).build();\n    }\n    \n    // Configure the QdrantClient using QdrantGrpcClient\n    @BindProps(prefix = \"solon.ai.repo.qdrant\")\n    @Bean\n    public QdrantClient qdrantClient(@Value(\"${solon.ai.repo.qdrant.host}\") String host, \n                                     @Value(\"${solon.ai.repo.qdrant.port}\") int port, \n                                     @Value(\"${solon.ai.repo.qdrant.useSsl}\") boolean useSsl) {\n        return new QdrantClient(\n                QdrantGrpcClient.newBuilder(host, port, useSsl).build()\n        );\n    }\n    \n    // Initialize the Qdrant knowledge base\n    @Bean\n    public QdrantRepository repository(EmbeddingModel embeddingModel, QdrantClient client) {\n        return new QdrantRepository(embeddingModel, client);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Quantization\nDESCRIPTION: Initializes a Qdrant client and creates a new collection with 768-dimensional vectors using cosine distance metric. Configures scalar quantization using INT8 type with always-in-RAM storage mode.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/scalar-quantization-in-ram/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE, on_disk=True),\n    quantization_config=models.ScalarQuantization(\n        scalar=models.ScalarQuantizationConfig(\n            type=models.ScalarType.INT8,\n            always_ram=True,\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Document Store\nDESCRIPTION: Sets up Qdrant document store and writer component for storing embeddings\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom haystack.utils import Secret\nfrom haystack_integrations.document_stores.qdrant import QdrantDocumentStore\nfrom haystack.components.writers import DocumentWriter\n\ndocument_store = QdrantDocumentStore(\n    os.environ[\"QDRANT_URL\"], \n    api_key=Secret.from_env_var(\"QDRANT_API_KEY\"),\n    index=\"red-hat-learning\", \n    return_embedding=True, \n    embedding_dim=768,\n)\nwriter = DocumentWriter(document_store=document_store)\n\nindexing_pipeline.add_component(\"writer\", writer)\n\nindexing_pipeline.connect(\"embedder.documents\", \"writer.documents\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Reranking Pipeline with Qdrant Query API in Python\nDESCRIPTION: This snippet showcases how to use Qdrant's Query API to create a reranking pipeline. It retrieves 50 results using a dense vector, then reranks them using output token embeddings to get the top 10 results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/late-interaction-models.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nquery = \"What else can be done with just all-MiniLM-L6-v2 model?\"\n\nclient.query_points(\n    collection_name=\"my-collection\",\n    prefetch=[\n        # Prefetch the dense embeddings of the top-50 documents\n        models.Prefetch(\n            query=model.encode(query).tolist(),\n            using=\"dense-vector\",\n            limit=50,\n        )\n    ],\n    # Rerank the top-50 documents retrieved by the dense embedding model\n    # and return just the top-10. Please note we call the same model, but\n    # we ask for the token embeddings by setting the output_value parameter.\n    query=model.encode(query, output_value=\"token_embeddings\").tolist(),\n    using=\"output-token-embeddings\",\n    limit=10,\n)\n```\n\n----------------------------------------\n\nTITLE: Managing Qdrant Collection Aliases in Go\nDESCRIPTION: This snippet demonstrates how to manage collection aliases in Qdrant. It first deletes an existing alias named 'production_collection' and then creates the same alias to point to a collection called 'example_collection'. This is a common pattern for zero-downtime collection switching in production environments.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/switch/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"context\"\n\nclient.DeleteAlias(context.Background(), \"production_collection\")\nclient.CreateAlias(context.Background(), \"production_collection\", \"example_collection\")\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Modal Vector Collection in Qdrant using C#\nDESCRIPTION: Demonstrates initialization of a Qdrant client and creation of a collection with multiple vector configurations. The collection is configured with two dense vector spaces (image and text) and one sparse vector space (text-sparse). The image vectors use dot product distance while text vectors use cosine similarity.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/named-vectors/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  vectorsConfig: new VectorParamsMap\n  {\n      Map = {\n      [\"image\"] = new VectorParams {\n        Size = 4, Distance = Distance.Dot\n      },\n      [\"text\"] = new VectorParams {\n        Size = 5, Distance = Distance.Cosine\n      },\n    }\n  },\n  sparseVectorsConfig: new SparseVectorConfig\n  {\n      Map = {\n        [\"text-sparse\"] = new()\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Representing Dense Vectors in JSON\nDESCRIPTION: This snippet shows the structure of a dense vector in JSON format, which is a simple list of floating-point numbers with fixed length. Dense vectors are the most common output format from neural networks.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/vectors.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// A piece of a real-world dense vector\n[\n    -0.013052909,\n    0.020387933,\n    -0.007869,\n    -0.11111383,\n    -0.030188112,\n    -0.0053388323,\n    0.0010654867,\n    0.072027855,\n    -0.04167721,\n    0.014839341,\n    -0.032948174,\n    -0.062975034,\n    -0.024837125,\n    ....\n]\n```\n\n----------------------------------------\n\nTITLE: Example Output Format of Sparse Embeddings in Qdrant\nDESCRIPTION: Example showing the structure of a sparse embedding as stored in Qdrant, containing values (weights) and indices (token IDs) where the weights are non-zero.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nSparseEmbedding(\n  values=array([1.57449973, 0.90787691, ..., 1.21796167, 1.1321187]),\n  indices=array([ 1040,  2001, ..., 28667, 29137])\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Neo4j and Qdrant Clients in Python\nDESCRIPTION: This snippet initializes the Neo4j and Qdrant clients using previously loaded credentials. It establishes connections to the Neo4j graph database and the Qdrant vector store for further operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/graphrag-qdrant-neo4j.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Initialize Neo4j driver\nneo4j_driver = GraphDatabase.driver(neo4j_uri, auth=(neo4j_username, neo4j_password))\n\n# Initialize Qdrant client\nqdrant_client = QdrantClient(\n    url=qdrant_url,\n    api_key=qdrant_key\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Qdrant Client and Upstage Session in Python\nDESCRIPTION: Initializes the Qdrant client and Upstage session with necessary configurations and API keys. It also defines sample texts for embedding.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/upstage.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom qdrant_client import QdrantClient\n\nUPSTAGE_BASE_URL = \"https://api.upstage.ai/v1/solar/embeddings\"\n\nUPSTAGE_API_KEY = \"<YOUR_API_KEY>\"\n\nupstage_session = requests.Session()\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nheaders = {\n    \"Authorization\": f\"Bearer {UPSTAGE_API_KEY}\",\n    \"Accept\": \"application/json\",\n}\n\ntexts = [\n    \"Qdrant is the best vector search engine!\",\n    \"Loved by Enterprises and everyone building for low latency, high performance, and scale.\",\n]\n```\n\n----------------------------------------\n\nTITLE: Upserting Vector Data with Qdrant Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to upsert multiple points with vectors and payloads into a Qdrant collection using the client's upsert method. It includes three points with different colors as payloads and corresponding vector representations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/list-of-points-simple/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.upsert(\"{collection_name}\", {\n  points: [\n    {\n      id: 1,\n      payload: { color: \"red\" },\n      vector: [0.9, 0.1, 0.1],\n    },\n    {\n      id: 2,\n      payload: { color: \"green\" },\n      vector: [0.1, 0.9, 0.1],\n    },\n    {\n      id: 3,\n      payload: { color: \"blue\" },\n      vector: [0.1, 0.1, 0.9],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection via REST API using cURL\nDESCRIPTION: Creates a new vector collection in Qdrant using PUT request. Configures the collection with 300-dimensional vectors and Cosine distance metric for similarity calculations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/simple/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"vectors\": {\n      \"size\": 300,\n      \"distance\": \"Cosine\"\n    } \n  }'\n```\n\n----------------------------------------\n\nTITLE: Initialize Sentence Transformer Encoder\nDESCRIPTION: Initializes a Sentence Transformer model.  Specifically, it loads the `all-MiniLM-L6-v2` model, which is a relatively fast and efficient model for generating sentence embeddings.  The `encoder` object will be used to encode text into vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/search-beginners.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"encoder = SentenceTransformer(\\\"all-MiniLM-L6-v2\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Scalar Quantization in Qdrant using Python Client\nDESCRIPTION: This Python code demonstrates how to create a collection with Scalar Quantization using the Qdrant Python client. It configures the same parameters as the HTTP example, using int8 type with a quantile of 0.99 for 128-dimensional vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-quantization.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=128, distance=models.Distance.COSINE),\n    quantization_config=models.ScalarQuantization(\n        scalar=models.ScalarQuantizationConfig(\n            type=models.ScalarType.INT8,\n            quantile=0.99,\n            always_ram=True,\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Vectors Across Collections with Qdrant C# Client\nDESCRIPTION: Initializes a Qdrant client and performs a cross-collection vector lookup query. Creates connection to Qdrant server on localhost:6334 and queries a vector by point ID while specifying vector names and target collections.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/by-existing-id-with-lookup/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  query: Guid.Parse(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\"), // <--- point id\n  usingVector: \"512d-vector\",\n  lookupFrom: new() {\n    CollectionName = \"another_collection\", // <--- other collection name\n      VectorName = \"image-512\" // <--- vector name in the other collection\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Qdrant Storage for CrewAI in Python\nDESCRIPTION: Definition of a QdrantStorage class that extends RAGStorage to handle embeddings for memory entries using Qdrant. It includes methods for searching, resetting, initializing, and saving data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/crewai.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, Dict, List, Optional\n\nfrom crewai.memory.storage.rag_storage import RAGStorage\nfrom qdrant_client import QdrantClient\n\n\nclass QdrantStorage(RAGStorage):\n    \"\"\"\n    Extends Storage to handle embeddings for memory entries using Qdrant.\n\n    \"\"\"\n\n    def __init__(self, type, allow_reset=True, embedder_config=None, crew=None):\n        super().__init__(type, allow_reset, embedder_config, crew)\n\n    def search(\n        self,\n        query: str,\n        limit: int = 3,\n        filter: Optional[dict] = None,\n        score_threshold: float = 0,\n    ) -> List[Any]:\n        points = self.client.query(\n            self.type,\n            query_text=query,\n            query_filter=filter,\n            limit=limit,\n            score_threshold=score_threshold,\n        )\n        results = [\n            {\n                \"id\": point.id,\n                \"metadata\": point.metadata,\n                \"context\": point.document,\n                \"score\": point.score,\n            }\n            for point in points\n        ]\n\n        return results\n\n    def reset(self) -> None:\n        self.client.delete_collection(self.type)\n\n    def _initialize_app(self):\n        self.client = QdrantClient()\n        # uncomment the next line of code\n        # and choose from the [supported embedders](https://qdrant.github.io/fastembed/examples/Supported_Models/)\n        # if you don't want to use the default one\n        # self.client._embedding_model_name = 'jinaai/jina-embeddings-v2-small-en'\n        if not self.client.collection_exists(self.type):\n            self.client.create_collection(\n                collection_name=self.type,\n                vectors_config=self.client.get_fastembed_vector_params(),\n                sparse_vectors_config=self.client.get_fastembed_sparse_vector_params(),\n            )\n\n    def save(self, value: Any, metadata: Dict[str, Any]) -> None:\n        self.client.add(self.type, documents=[value], metadata=[metadata or {}])\n```\n\n----------------------------------------\n\nTITLE: Creating Multivector Collection - Python\nDESCRIPTION: Configure and create a collection for storing movie embeddings using multivector functionality with ColBERT 128-dimensional vectors and cosine similarity.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-colbert.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nqdrant_client.create_collection(\n    collection_name=\"movies\",\n    vectors_config=models.VectorParams(\n        size=128, #size of each vector produced by ColBERT\n        distance=models.Distance.COSINE, #similarity metric between each vector\n        multivector_config=models.MultiVectorConfig(\n            comparator=models.MultiVectorComparator.MAX_SIM #similarity metric between multivectors (matrices)\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Update Operations with Qdrant Java Client\nDESCRIPTION: This snippet demonstrates how to perform multiple update operations in a single batch request to a Qdrant collection. The operations include upserting a point, updating vectors, deleting vectors, overwriting payload, setting payload, deleting specific payload keys, clearing all payload, and deleting points completely. All operations target a point with ID 1.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/batch-update-points/basic/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclient\n    .batchUpdateAsync(\n        \"{collection_name}\",\n        List.of(\n            PointsUpdateOperation.newBuilder()\n                .setUpsert(\n                    PointStructList.newBuilder()\n                        .addPoints(\n                            PointStruct.newBuilder()\n                                .setId(id(1))\n                                .setVectors(vectors(1.0f, 2.0f, 3.0f, 4.0f))\n                                .build())\n                        .build())\n                .build(),\n            PointsUpdateOperation.newBuilder()\n                .setUpdateVectors(\n                    UpdateVectors.newBuilder()\n                        .addPoints(\n                            PointVectors.newBuilder()\n                                .setId(id(1))\n                                .setVectors(vectors(1.0f, 2.0f, 3.0f, 4.0f))\n                                .build())\n                        .build())\n                .build(),\n            PointsUpdateOperation.newBuilder()\n                .setDeleteVectors(\n                    DeleteVectors.newBuilder()\n                        .setPointsSelector(\n                            PointsSelector.newBuilder()\n                                .setPoints(PointsIdsList.newBuilder().addIds(id(1)).build())\n                                .build())\n                        .setVectors(VectorsSelector.newBuilder().addNames(\"\").build())\n                        .build())\n                .build(),\n            PointsUpdateOperation.newBuilder()\n                .setOverwritePayload(\n                    SetPayload.newBuilder()\n                        .setPointsSelector(\n                            PointsSelector.newBuilder()\n                                .setPoints(PointsIdsList.newBuilder().addIds(id(1)).build())\n                                .build())\n                        .putAllPayload(Map.of(\"test_payload\", value(1)))\n                        .build())\n                .build(),\n            PointsUpdateOperation.newBuilder()\n                .setSetPayload(\n                    SetPayload.newBuilder()\n                        .setPointsSelector(\n                            PointsSelector.newBuilder()\n                                .setPoints(PointsIdsList.newBuilder().addIds(id(1)).build())\n                                .build())\n                        .putAllPayload(\n                            Map.of(\"test_payload_2\", value(2), \"test_payload_3\", value(3)))\n                        .build())\n                .build(),\n            PointsUpdateOperation.newBuilder()\n                .setDeletePayload(\n                    DeletePayload.newBuilder()\n                        .setPointsSelector(\n                            PointsSelector.newBuilder()\n                                .setPoints(PointsIdsList.newBuilder().addIds(id(1)).build())\n                                .build())\n                        .addKeys(\"test_payload_2\")\n                        .build())\n                .build(),\n            PointsUpdateOperation.newBuilder()\n                .setClearPayload(\n                    ClearPayload.newBuilder()\n                        .setPoints(\n                            PointsSelector.newBuilder()\n                                .setPoints(PointsIdsList.newBuilder().addIds(id(1)).build())\n                                .build())\n                        .build())\n                .build(),\n            PointsUpdateOperation.newBuilder()\n                .setDeletePoints(\n                    DeletePoints.newBuilder()\n                        .setPoints(\n                            PointsSelector.newBuilder()\n                                .setPoints(PointsIdsList.newBuilder().addIds(id(1)).build())\n                                .build())\n                        .build())\n                .build()))\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Counting Documents with Filters in Qdrant Collection\nDESCRIPTION: Executes a count operation on a Qdrant collection with a filter condition on the 'color' field. The query uses an exact count (not an estimate) and filters for documents where the color matches 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/count-points/with-filter-exact/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.count(\n    collection_name=\"{collection_name}\",\n    count_filter=models.Filter(\n        must=[\n            models.FieldCondition(key=\"color\", match=models.MatchValue(value=\"red\")),\n        ]\n    ),\n    exact=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Uploading Data to Qdrant with Python\nDESCRIPTION: Uploads the vectorized image and text data to the specified Qdrant collection, using the document embeddings created earlier.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/multimodal-search.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python\nclient.upload_points(\n    collection_name=COLLECTION_NAME,\n    points=[\n        models.PointStruct(\n            id=idx,\n            vector={\n                \"text\": text_embeddings[idx],\n                \"image\": image_embeddings[idx],\n            },\n            payload=doc\n        )\n        for idx, doc in enumerate(documents)\n    ]\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing CrewAI Knowledge Processing in Python\nDESCRIPTION: Python implementation of a CrewAI-based system for processing and organizing knowledge, including agent and task configuration with Claude 3 integration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/webinar-crewai-qdrant-obsidian.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom crewai import Agent, Crew, Process, Task\nfrom crewai.project import CrewBase, agent, crew, task\nfrom email_assistant import models\n\n...\n\n@CrewBase\nclass KnowledgeOrganizingCrew(BaseCrew):\n    \"\"\"\n    A crew responsible for processing raw text data and converting it into structured knowledge.\n    \"\"\"\n\n    agents_config = \"config/knowledge/agents.yaml\"\n    tasks_config = \"config/knowledge/tasks.yaml\"\n\n    @agent\n    def chunks_extractor(self) -> Agent:\n        return Agent(\n            config=self.agents_config[\"chunks_extractor\"],\n            verbose=True,\n            llm=\"anthropic/claude-3-5-sonnet-20241022\",\n        )\n\n    ...\n\n    @task\n    def contextualize_chunks(self) -> Task:\n        # The task description is borrowed from the Anthropic Contextual Retrieval\n        # See: https://www.anthropic.com/news/contextual-retrieval/\n        return Task(\n            config=self.tasks_config[\"contextualize_chunks\"],\n            output_pydantic=models.ContextualizedChunks,\n        )\n\n    ...\n\n    @crew\n    def crew(self) -> Crew:\n        \"\"\"Creates the KnowledgeOrganizingCrew crew\"\"\"\n        return Crew(\n            agents=self.agents,  # Automatically created by the @agent decorator\n            tasks=self.tasks,  # Automatically created by the @task decorator\n            process=Process.sequential,\n            memory=True,\n            entity_memory=self.entity_memory(),\n            short_term_memory=self.short_term_memory(),\n            embedder=self.embedder_config,\n            verbose=True,\n        )\n```\n\n----------------------------------------\n\nTITLE: Loading and Parsing Blog Content\nDESCRIPTION: Uses WebBaseLoader to load and parse HTML content from a specified blog URL. It focuses on extracting relevant parts of the blog post for further processing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-scaleway.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nloader = WebBaseLoader(\n    web_paths=(\"https://lilianweng.github.io/posts/2023-06-23-agent/\",),\n    bs_kwargs=dict(\n        parse_only=bs4.SoupStrainer(\n            class_=(\"post-content\", \"post-title\", \"post-header\")\n        )\n    ),\n)\ndocs = loader.load()\n```\n\n----------------------------------------\n\nTITLE: Computing Sparse Vector with SPLADE in Python\nDESCRIPTION: Defines a function to compute a sparse vector from the input text using the SPLADE model. It applies ReLU, log, and max operations on the model's output logits to generate the sparse vector representation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/sparse-vectors.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport torch\n\n\ndef compute_vector(text):\n    \"\"\"\n    Computes a vector from logits and attention mask using ReLU, log, and max operations.\n    \"\"\"\n    tokens = tokenizer(text, return_tensors=\"pt\")\n    output = model(**tokens)\n    logits, attention_mask = output.logits, tokens.attention_mask\n    relu_log = torch.log(1 + torch.relu(logits))\n    weighted_log = relu_log * attention_mask.unsqueeze(-1)\n    max_val, _ = torch.max(weighted_log, dim=1)\n    vec = max_val.squeeze()\n\n    return vec, tokens\n\n\nvec, tokens = compute_vector(text)\nprint(vec.shape)\n```\n\n----------------------------------------\n\nTITLE: Batch Vector Search Query with Filtering\nDESCRIPTION: HTTP POST request for performing multiple vector similarity searches in parallel. Each search includes a vector query, city-based filtering, and result limit. The endpoint allows searching points in a specified collection with custom filters and limits for each sub-query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/batch-search/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query/batch\n{\n    \"searches\": [\n        {\n            \"query\": [0.2, 0.1, 0.9, 0.7],\n            \"filter\": {\n                \"must\": [\n                    {\n                        \"key\": \"city\",\n                        \"match\": {\n                            \"value\": \"London\"\n                        }\n                    }\n                ]\n            },\n            \"limit\": 3\n        },\n        {\n            \"query\": [0.5, 0.3, 0.2, 0.3],\n            \"filter\": {\n                \"must\": [\n                    {\n                        \"key\": \"city\",\n                        \"match\": {\n                            \"value\": \"London\"\n                        }\n                    }\n                ]\n            },\n            \"limit\": 3\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Complex Hybrid Search Query with Late Interaction Reranking in Python\nDESCRIPTION: This snippet demonstrates how to execute a complex hybrid search query using the Qdrant Query API. It combines the previously defined prefetch operations and adds a final reranking step using a late interaction model.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/hybrid-search.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points(\n    \"my-collection\",\n    prefetch=[\n        matryoshka_prefetch,\n        sparse_dense_rrf_prefetch,\n    ],\n    # Finally rerank the results with the late interaction model. It only \n    # considers the documents retrieved by all the prefetch operations above. \n    # Return 10 final results.\n    query=[\n        [1.928, -0.654, ..., 0.213],\n        [-1.197, 0.583, ..., 1.901],\n        ...,\n        [0.112, -1.473, ..., 1.786],\n    ],\n    using=\"late-interaction\",\n    with_payload=False,\n    limit=10,\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting a Point in Qdrant Collection using TypeScript\nDESCRIPTION: This code demonstrates how to upsert a single point into a Qdrant collection. It includes the point's ID, a payload with a 'color' attribute, and a 3-dimensional vector representation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/int-one-point-simple/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.upsert(\"{collection_name}\", {\n  points: [\n    {\n      id: 1,\n      payload: {\n        color: \"red\",\n      },\n      vector: [0.9, 0.1, 0.1],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Qdrant client, create a client instance, and create a new collection. It specifies vector size, distance metric, and quantization configuration for the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-binary-quantization/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 1536,\n    distance: \"Cosine\",\n  },\n  quantization_config: {\n    binary: {\n      always_ram: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Filtered Scroll Query in Qdrant using Java\nDESCRIPTION: This code demonstrates how to perform an asynchronous scroll query on a Qdrant collection with negation filters. It excludes points where the 'city' is 'London' and the 'color' is 'red'. The query is built using the ScrollPoints builder and executed using the client's scrollAsync method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-must-not-filter/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addAllMustNot(\n                        List.of(matchKeyword(\"city\", \"London\"), matchKeyword(\"color\", \"red\")))\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Set Up OpenAI Embedding Instance\nDESCRIPTION: This Python snippet sets up the OpenAI embedding instance using the `OpenAIEmbedding` class from the `camel.embeddings` module. It specifies the embedding model to be used as `TEXT_EMBEDDING_3_LARGE`.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-camelai-discord.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"from camel.embeddings import OpenAIEmbedding\nfrom camel.types import EmbeddingModelType\n\nembedding_instance = OpenAIEmbedding(model_type=EmbeddingModelType.TEXT_EMBEDDING_3_LARGE)\"\n```\n\n----------------------------------------\n\nTITLE: Creating RAG Module with DSPy in Python\nDESCRIPTION: This snippet defines a RAG (Retrieve and Generate) module using DSPy to process questions. It retrieves relevant passages and generates an answer using LLM chain of thought methodology. The class inherits from DSPy Module and overrides the forward method to perform retrieval and answer generation. It requires a parameter for the number of passages and integrates with the DSPy retrieval system.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/dspy-vs-langchain.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass RAG(dspy.Module):\n    def __init__(self, num_passages=5):\n        super().__init__()\n\n        self.retrieve = dspy.Retrieve(k=num_passages)\n        self.generate_answer = dspy.ChainOfThought('context, question -> answer') # using inline signature\n    \n    def forward(self, question):\n        context = self.retrieve(question).passages\n        prediction = self.generate_answer(context=context, question=question)\n        return dspy.Prediction(context=context, answer=prediction.answer)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Python\nDESCRIPTION: This snippet imports the QdrantClient and initializes it with the local Qdrant instance's URL.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\\n\\nclient = QdrantClient(url=\"http://localhost:6333\")\n```\n\n----------------------------------------\n\nTITLE: Document Preprocessing Function in Python\nDESCRIPTION: The `preprocess_dataset` function splits large documents into smaller chunks while preserving important context. It uses RecursiveCharacterTextSplitter from LangChain, allowing customizable chunk sizes and overlap for maintaining context.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef preprocess_dataset(docs_list):\n    text_splitter = RecursiveCharacterTextSplitter.from_tiktoken_encoder(\n        chunk_size=700,\n        chunk_overlap=50,\n        disallowed_special=()\n    )\n    doc_splits = text_splitter.split_documents(docs_list)\n    return doc_splits\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection for Vector Storage in Python\nDESCRIPTION: This function creates a collection in Qdrant for storing vector embeddings. It checks if the collection exists and creates it if not, specifying the vector dimension and distance metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/graphrag-qdrant-neo4j.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef create_collection(client, collection_name, vector_dimension):\n    try:\n        # Try to fetch the collection status\n        try:\n            collection_info = client.get_collection(collection_name)\n            print(f\"Skipping creating collection; '{collection_name}' already exists.\")\n        except Exception as e:\n            # If collection does not exist, an error will be thrown, so we create the collection\n            if 'Not found: Collection' in str(e):\n                print(f\"Collection '{collection_name}' not found. Creating it now...\")\n\n                client.create_collection(\n                    collection_name=collection_name,\n                    vectors_config=models.VectorParams(size=vector_dimension, distance=models.Distance.COSINE)\n                )\n\n                print(f\"Collection '{collection_name}' created successfully.\")\n            else:\n                print(f\"Error while checking collection: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Executing Scroll Query with Nested Array Filters in Qdrant using Python\nDESCRIPTION: This code performs a scroll query on a Qdrant collection, filtering records where the 'diet' array contains an object with 'food' equal to 'meat' and 'likes' equal to True. It uses the Qdrant Python client to execute the query with nested field conditions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-multiple-nested/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"diet[].food\", match=models.MatchValue(value=\"meat\")\n            ),\n            models.FieldCondition(\n                key=\"diet[].likes\", match=models.MatchValue(value=True)\n            ),\n        ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Points from Collection using HTTP\nDESCRIPTION: This code snippet shows an HTTP POST request to the Qdrant API for querying points within a specified collection. It takes a collection name as a parameter, structured to include a query targeting specific vectors and contextual information, and specifies the limit of returned results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/discovery-basic/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"discover\": {\n      \"target\": [0.2, 0.1, 0.9, 0.7],\n      \"context\": [\n        {\n          \"positive\": 100,\n          \"negative\": 718\n        },\n        {\n          \"positive\": 200,\n          \"negative\": 300\n        }\n      ]\n    }\n  },\n  \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Collection Configuration in Qdrant with TypeScript\nDESCRIPTION: This code snippet demonstrates how to update the configuration of a Qdrant collection using the TypeScript client. It specifically modifies the `indexing_threshold` within the `optimizers_config` of the specified collection.  The collection name should be replaced with the desired collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/simple/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.updateCollection(\"{collection_name}\", {\n  optimizers_config: {\n    indexing_threshold: 10000,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Retrieval and Generation Chain\nDESCRIPTION: Configures the retrieval process and sets up a chain for generating responses. This includes formatting retrieved documents, applying a RAG prompt, and using the language model to generate answers.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-scaleway.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nretriever = vectorstore.as_retriever()\nprompt = hub.pull(\"rlm/rag-prompt\")\n\n\ndef format_docs(docs):\n    return \"\\n\\n\".join(doc.page_content for doc in docs)\n\n\nrag_chain = (\n    {\"context\": retriever | format_docs, \"question\": RunnablePassthrough()}\n    | prompt\n    | llm\n    | StrOutputParser()\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration\nDESCRIPTION: Demonstrates initializing a Qdrant client and creating a new collection with specific vector parameters and scalar quantization settings. The collection is configured with 768-dimensional vectors using cosine distance and Int8 scalar quantization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-scalar-quantization-params/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.QuantizationConfig;\nimport io.qdrant.client.grpc.Collections.QuantizationType;\nimport io.qdrant.client.grpc.Collections.ScalarQuantization;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(768)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setQuantizationConfig(\n                QuantizationConfig.newBuilder()\n                    .setScalar(\n                        ScalarQuantization.newBuilder()\n                            .setType(QuantizationType.Int8)\n                            .setQuantile(0.99f)\n                            .setAlwaysRam(true)\n                            .build())\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration\nDESCRIPTION: Initializes a Qdrant client and creates a new collection with 768-dimensional vectors using cosine distance. Configures scalar quantization with INT8 type and disk storage optimization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/quantization-on-disk/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\\n    CreateCollectionBuilder, Distance, QuantizationType, ScalarQuantizationBuilder,\\n    VectorParamsBuilder,\\n};\\nuse qdrant_client::Qdrant;\\n\\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\\n\\nclient\\n    .create_collection(\\n        CreateCollectionBuilder::new(\"{collection_name}\")\\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine).on_disk(true))\\n            .quantization_config(\\n                ScalarQuantizationBuilder::default()\\n                    .r#type(QuantizationType::Int8.into())\\n                    .always_ram(false),\\n            ),\\n    )\\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Searching for Documents with Qdrant and Voyage AI in TypeScript\nDESCRIPTION: Demonstrates how to perform a vector search using Qdrant. It first embeds a query using Voyage AI API, then uses the resulting embedding to search for similar documents in the Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/voyage.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nbody = {\n    \"input\": [\"What is the best to use for vector search scaling?\"],\n    \"model\": \"voyage-large-2\",\n    \"input_type\": \"query\",\n};\n\nresponse = await fetch(VOYAGEAI_BASE_URL, {\n    method: \"POST\",\n    body: JSON.stringify(body),\n    headers\n});\n\nresponse_body = await response.json();\n\nawait client.search(COLLECTION_NAME, {\n    vector: response_body.data[0].embedding,\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Prefetch using TypeScript\nDESCRIPTION: This snippet demonstrates how to query a Qdrant collection with prefetch options. It uses the `client.query` method to search within the specified collection and prefetch related data based on specified query parameters, including sparse and dense vector search configurations and fusion method for combining results. The collection name needs to be specified by replacing `{collection_name}`.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-basic/typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclient.query(\"{collection_name}\", {\n    prefetch: [\n        {\n            query: {\n                values: [0.22, 0.8],\n                indices: [1, 42],\n            },\n            using: 'sparse',\n            limit: 20,\n        },\n        {\n            query: [0.01, 0.45, 0.67],\n            using: 'dense',\n            limit: 20,\n        },\n    ],\n    query: {\n        fusion: 'rrf',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Sparse Vectors\nDESCRIPTION: Demonstrates connecting to a Qdrant server and creating a new collection with IDF-modified sparse vector configuration. The code establishes a client connection to a local Qdrant instance and sets up a collection with custom sparse vector parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector-idf/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\\n    CreateCollectionBuilder, Modifier, SparseVectorParamsBuilder, SparseVectorsConfigBuilder,\\n};\\nuse qdrant_client::{Qdrant, QdrantError};\\n\\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\\n\\nlet mut sparse_vectors_config = SparseVectorsConfigBuilder::default();\\nsparse_vectors_config.add_named_vector_params(\\n    \"text\",\\n    SparseVectorParamsBuilder::default().modifier(Modifier::Idf),\\n);\\n\\nclient\\n    .create_collection(\\n        CreateCollectionBuilder::new(\"{collection_name}\")\\n            .sparse_vectors_config(sparse_vectors_config),\\n    )\\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in TypeScript\nDESCRIPTION: This snippet shows how to import the Qdrant client, create a connection to a local Qdrant instance, and create a new collection with sparse vector configuration. The collection is set up for text-based sparse vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  sparse_vectors: {\n    text: { },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Distance Matrix API in Graph UI for Qdrant\nDESCRIPTION: This JSON configuration demonstrates how to set up the Distance Matrix API within the Graph Exploration Tool, retrieving 900 sample points with 5 connections per vector in a tree visualization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.12.x.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"limit\": 5,\n  \"sample\": 900,\n  \"tree\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Multivector Search using Rust Client\nDESCRIPTION: Shows how to perform a complex multivector query in Qdrant using the Rust client. The example creates a three-stage search pipeline that progressively refines results using different vector representations, culminating in ColBERT multivector ranking.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{PrefetchQueryBuilder, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .add_prefetch(PrefetchQueryBuilder::default()\n                .query(Query::new_nearest(vec![1.0, 23.0, 45.0, 67.0]))\n                .using(\"mrl_byte\")\n                .limit(1000u64)\n            )\n            .query(Query::new_nearest(vec![0.01, 0.45, 0.67]))\n            .using(\"full\")\n            .limit(100u64)\n        )\n        .query(Query::new_nearest(vec![\n            vec![0.1, 0.2],\n            vec![0.2, 0.1],\n            vec![0.8, 0.9],\n        ]))\n        .using(\"colbert\")\n        .limit(10u64)\n).await?;\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant collection with sparse vectors in Python\nDESCRIPTION: This code initializes a Qdrant client with a connection to a local server and executes a sparse vector query against a specified collection. The query uses the 'text' sparse vector reference and defines specific indices and values for the sparse vector search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/sparse-vectors/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\n\nresult = client.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.SparseVector(indices=[1, 3, 5, 7], values=[0.1, 0.2, 0.3, 0.4]),\n    using=\"text\",\n).points\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Vector Collection in Qdrant\nDESCRIPTION: HTTP PUT request to create a new collection with two vector configurations - one for images (4-dimensional with Dot product distance) and one for text (8-dimensional with Cosine distance). Demonstrates setting up different distance metrics and vector sizes for different named vectors within the same collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/multiple-vectors/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n        \"image\": {\n            \"size\": 4,\n            \"distance\": \"Dot\"\n        },\n        \"text\": {\n            \"size\": 8,\n            \"distance\": \"Cosine\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing QdrantClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a `QdrantClient` in TypeScript, connecting to a Qdrant Cloud instance. It requires the `@qdrant/js-client-rest` library.  The snippet initializes the client with the host address and API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart-cloud.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({\n  host: \"xyz-example.eu-central.aws.cloud.qdrant.io\",\n  apiKey: \"<your-api-key>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Go\nDESCRIPTION: Demonstrates how to create a Qdrant client connection and set up a new collection with vector configurations. The code configures vector size, distance metric (Cosine), and quantization settings using Int8 type with RAM storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/scalar-quantization-and-vectors-in-ram/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tQuantizationConfig: qdrant.NewQuantizationScalar(&qdrant.ScalarQuantization{\n\t\tType:      qdrant.QuantizationType_Int8,\n\t\tAlwaysRam: qdrant.PtrOf(true),\n\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Collection with Qdrant Client in Rust\nDESCRIPTION: This code snippet demonstrates how to update a collection in Qdrant using the Rust client library. It utilizes the UpdateCollectionBuilder to specify the collection name and the OptimizersConfigDiffBuilder to set the indexing threshold. Dependencies include the qdrant_client::qdrant module. Expected input is a collection name as a string, and the operation updates the configuration of that collection. It executes asynchronously, thus requiring an async runtime environment.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/simple/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{OptimizersConfigDiffBuilder, UpdateCollectionBuilder};\n\nclient\n    .update_collection(\n        UpdateCollectionBuilder::new(\"{collection_name}\").optimizers_config(\n            OptimizersConfigDiffBuilder::default().indexing_threshold(10000),\n        ),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing Discover Queries using Qdrant Client in Python\nDESCRIPTION: This snippet demonstrates how to set up a QdrantClient and prepare a list of DiscoverQuery requests. It includes creating query requests with specific target vectors and context pairs, and then calling the client to execute these requests in a batch. Dependencies include the qdrant_client library and its models. Key parameters include the Qdrant API URL and collection name.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/discovery-basic/python.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\ndiscover_queries = [\n    models.QueryRequest(\n        query=models.DiscoverQuery(\n            discover=models.DiscoverInput(\n                target=[0.2, 0.1, 0.9, 0.7],\n                context=[\n                    models.ContextPair(\n                        positive=100,\n                        negative=718,\n                    ),\n                    models.ContextPair(\n                        positive=200,\n                        negative=300,\n                    ),\n                ],\n            )\n        ),\n        limit=10,\n    ),\n]\n\nclient.query_batch_points(\n    collection_name=\"{collection_name}\", requests=discover_queries\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting Points to Qdrant Collection in Rust\nDESCRIPTION: This code demonstrates how to connect to a Qdrant server, create point structures with vector embeddings and metadata, and upsert them into a specified collection. It uses the Qdrant client library for Rust to perform these operations asynchronously.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-tenant-group-id/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{PointStruct, UpsertPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .upsert_points(UpsertPointsBuilder::new(\n        \"{collection_name}\",\n        vec![\n            PointStruct::new(1, vec![0.9, 0.1, 0.1], [(\"group_id\", \"user_1\".into())]),\n            PointStruct::new(2, vec![0.1, 0.9, 0.1], [(\"group_id\", \"user_1\".into())]),\n            PointStruct::new(3, vec![0.1, 0.1, 0.9], [(\"group_id\", \"user_2\".into())]),\n        ],\n    ))\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Embedding Videos - TypeScript\nDESCRIPTION: This snippet shows how to create an embedding task for a video using the Twelve Labs client in TypeScript. It waits for the task to complete and retrieves the result.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst task = await twelveLabsClient.embed.task.create(\"Marengo-retrieval-2.7\", {\n    url: \"https://sample-videos.com/video321/mp4/720/big_buck_bunny_720p_2mb.mp4\"\n})\n\nawait task.waitForDone(3)\n\nconst taskResult = await twelveLabsClient.embed.task.retrieve(task.id)\n```\n\n----------------------------------------\n\nTITLE: Creating a Payload Index in Qdrant\nDESCRIPTION: This code snippet demonstrates the process of marking a field as indexable in Qdrant. By using this configuration, users can enhance search performance through efficient filtering based on indexed fields.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/indexing.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/create-payload-index/simple-keyword/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection with Vector and Sparse Vector Configuration in C#\nDESCRIPTION: This snippet initializes a Qdrant client and creates a new collection with specific vector parameters. It configures a 128-dimensional vector with cosine distance and Float16 datatype, while also setting up sparse vector indexing for a field named 'text'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-float16-sparse-and-dense/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  vectorsConfig: new VectorParams {\n    Size = 128,\n      Distance = Distance.Cosine,\n      Datatype = Datatype.Float16\n  },\n  sparseVectorsConfig: (\n    \"text\",\n    new SparseVectorParams {\n      Index = new SparseIndexConfig {\n        Datatype = Datatype.Float16\n      }\n    }\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Operations with Qdrant TypeScript Client\nDESCRIPTION: This code demonstrates how to execute multiple operations in a single batch request using the Qdrant client. It includes operations for upserting points, updating vectors, managing payloads (set, overwrite, delete, clear), and deleting points entirely.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/batch-update-points/basic/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.batchUpdate(\"{collection_name}\", {\n  operations: [\n    {\n      upsert: {\n        points: [\n          {\n            id: 1,\n            vector: [1.0, 2.0, 3.0, 4.0],\n            payload: {},\n          },\n        ],\n      },\n    },\n    {\n      update_vectors: {\n        points: [\n          {\n            id: 1,\n            vector: [1.0, 2.0, 3.0, 4.0],\n          },\n        ],\n      },\n    },\n    {\n      delete_vectors: {\n        points: [1],\n        vector: [\"\"],\n      },\n    },\n    {\n      overwrite_payload: {\n        payload: {\n          test_payload: 1,\n        },\n        points: [1],\n      },\n    },\n    {\n      set_payload: {\n        payload: {\n          test_payload_2: 2,\n          test_payload_3: 3,\n        },\n        points: [1],\n      },\n    },\n    {\n      delete_payload: {\n        keys: [\"test_payload_2\"],\n        points: [1],\n      },\n    },\n    {\n      clear_payload: {\n        points: [1],\n      },\n    },\n    {\n      delete: {\n        points: [1],\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CrewAI with Qdrant Storage\nDESCRIPTION: Example configuration showing how to set up a CrewAI crew with Qdrant as both entity and short-term memory storage layers. Demonstrates connection settings and memory configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/webinar-crewai-qdrant-obsidian.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom crewai import Crew, Process\nfrom crewai.memory import EntityMemory, ShortTermMemory\nfrom email_assistant.storage import QdrantStorage\n\nqdrant_location= \"http://localhost:6333\"\nqdrant_api_key = \"your-secret-api-key\"\nembedder_config = {...}\n\ncrew = Crew(\n    agents=[...],\n    tasks=[...],  # Automatically created by the @task decorator\n    process=Process.sequential,\n    memory=True,\n    entity_memory=EntityMemory(\n        storage=QdrantStorage(\n            type=\"entity-memory\",\n            embedder_config=embedder_config,\n            qdrant_location=qdrant_location,\n            qdrant_api_key=qdrant_api_key,\n        ),\n    ),\n    short_term_memory=ShortTermMemory(\n        storage=QdrantStorage(\n            type=\"short-term-memory\",\n            embedder_config=embedder_config,\n            qdrant_location=qdrant_location,\n            qdrant_api_key=qdrant_api_key,\n        ),\n    ),\n    embedder=embedder_config,\n    verbose=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for the AI Agent\nDESCRIPTION: This snippet loads the essential libraries required for building the AI agent. It includes libraries for handling environment variables, managing state in LangGraph, performing vector operations with Qdrant, and executing web searches. Dependencies include dotenv for environment variables and OpenAI's embedding models.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\nfrom typing import Annotated, TypedDict\nfrom dotenv import load_dotenv\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langgraph import StateGraph, tool, ToolNode, ToolMessage\nfrom langchain.document_loaders import HuggingFaceDatasetLoader\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain.llms import ChatOpenAI\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.http.models import VectorParams\nfrom brave_search import BraveSearch\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection and Inserting Documents\nDESCRIPTION: Sets up a new Qdrant collection with appropriate vector parameters (size and distance metric) and inserts the prepared document points into the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/mistral.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(collection_name, vectors_config=VectorParams(\n        size=1024,\n        distance=Distance.COSINE,\n    )\n)\nclient.upsert(collection_name, points)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Discover and Context - Java\nDESCRIPTION: This code snippet demonstrates how to perform a query against a Qdrant collection using the `discover` function with context input. It sets up a Qdrant client, builds a `DiscoverInput` with target vector and context containing positive and negative vector pairs. It executes the query using `queryAsync` and retrieves the result.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/discovery-basic/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.ContextInput;\nimport io.qdrant.client.grpc.Points.ContextInputPair;\nimport io.qdrant.client.grpc.Points.DiscoverInput;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.discover;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(discover(DiscoverInput.newBuilder()\n                .setTarget(vectorInput(0.2f, 0.1f, 0.9f, 0.7f))\n                .setContext(ContextInput.newBuilder()\n                        .addAllPairs(List.of(\n                                ContextInputPair.newBuilder()\n                                        .setPositive(vectorInput(100))\n                                        .setNegative(vectorInput(718))\n                                        .build(),\n                                ContextInputPair.newBuilder()\n                                        .setPositive(vectorInput(200))\n                                        .setNegative(vectorInput(300))\n                                        .build()))\n                        .build())\n                .build()))\n        .setLimit(10)\n        .build()).get();\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection for Hybrid Search\nDESCRIPTION: This snippet shows how to create a Qdrant collection that supports both dense and sparse vectors for hybrid search. It configures the collection with parameters for both vector types.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/sparse-vectors.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n    collection_name=COLLECTION_NAME,\n    vectors_config={\n        \"text-dense\": models.VectorParams(\n            size=1536,  # OpenAI Embeddings\n            distance=models.Distance.COSINE,\n        )\n    },\n    sparse_vectors_config={\n        \"text-sparse\": models.SparseVectorParams(\n            index=models.SparseIndexParams(\n                on_disk=False,\n            )\n        )\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Neo4j Graph Data Retrieval\nDESCRIPTION: Function to fetch related subgraph data from Neo4j based on entity IDs. Implements a Cypher query to retrieve connected nodes and relationships up to two hops away.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/graphrag-qdrant-neo4j.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef fetch_related_graph(neo4j_client, entity_ids):\n    query = \"\"\"\n    MATCH (e:Entity)-[r1]-(n1)-[r2]-(n2)\n    WHERE e.id IN $entity_ids\n    RETURN e, r1 as r, n1 as related, r2, n2\n    UNION\n    MATCH (e:Entity)-[r]-(related)\n    WHERE e.id IN $entity_ids`\n    RETURN e, r, related, null as r2, null as n2\n    \"\"\"\n    with neo4j_client.session() as session:\n        result = session.run(query, entity_ids=entity_ids)\n        subgraph = []\n        for record in result:\n            subgraph.append({\n                \"entity\": record[\"e\"],\n                \"relationship\": record[\"r\"],\n                \"related_node\": record[\"related\"]\n            })\n            if record[\"r2\"] and record[\"n2\"]:\n                subgraph.append({\n                    \"entity\": record[\"related\"],\n                    \"relationship\": record[\"r2\"],\n                    \"related_node\": record[\"n2\"]\n                })\n    return subgraph\n```\n\n----------------------------------------\n\nTITLE: Generating and Storing MixedBread Embeddings in Qdrant\nDESCRIPTION: Example showing how to initialize a MixedBread model, generate embeddings from text, and store them in a Qdrant collection. This demonstrates the complete workflow from embedding generation to vector database storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/mixedbread.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport qdrant_client\nfrom qdrant_client.models import Batch\nfrom mixedbread import MixedBreadModel\n\n# Initialize MixedBread model\nmodel = MixedBreadModel(\"mixedbread-variant\")\n\n# Generate embeddings\ntext = \"MixedBread provides versatile embeddings for various domains.\"\nembeddings = model.embed(text)\n\n# Initialize Qdrant client\nqdrant_client = qdrant_client.QdrantClient(host=\"localhost\", port=6333)\n\n# Upsert the embedding into Qdrant\nqdrant_client.upsert(\n    collection_name=\"VersatileEmbeddings\",\n    points=Batch(\n        ids=[1],\n        vectors=[embeddings],\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentence Transformer Model\nDESCRIPTION: Downloads and creates a pre-trained sentence encoder model to convert descriptions into embeddings. Can utilize GPU if available.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nmodel = SentenceTransformer(\n    \"all-MiniLM-L6-v2\", device=\"cuda\"\n)  # or device=\"cpu\" if you don't have a GPU\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Quantization in Qdrant (HTTP)\nDESCRIPTION: This HTTP request configures Product Quantization for a Qdrant collection. It sets up a vector space with 1024 dimensions using Cosine distance, and applies x32 compression with the quantized data always kept in RAM.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-quantization.md#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 1024,\n      \"distance\": \"Cosine\"\n    },\n    \"quantization_config\": {\n        \"product\": {\n            \"compression\": \"x32\",\n            \"always_ram\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Search with Qdrant in Python\nDESCRIPTION: This snippet demonstrates how to use Qdrant's client to perform a vector search on a collection. It queries the 'basic-search-rerank' collection using a query embedding and returns the top 10 most relevant points.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-semantic-search.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsearch_result = client.query_points(\n    collection_name=\"basic-search-rerank\", query=query_embeddings.embeddings.float_[0], limit=10\n).points\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Database Snapshot with TypeScript Client\nDESCRIPTION: Demonstrates how to initialize a Qdrant client connection and create a full database snapshot. Requires the @qdrant/js-client-rest package and a running Qdrant instance on localhost:6333.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/create-full-snapshot/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createFullSnapshot();\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector and Sparse Vector Configurations in Python\nDESCRIPTION: This snippet initializes a QdrantClient and creates a collection with custom vector parameters and sparse vector configurations. It sets up a collection with 128-dimensional vectors using cosine distance and uint8 datatype, along with a sparse vector index for text data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-uint8-sparse-and-dense/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(\n        size=128, distance=models.Distance.COSINE, datatype=models.Datatype.UINT8\n    ),\n    sparse_vectors_config={\n        \"text\": models.SparseVectorParams(\n            index=models.SparseIndexParams(datatype=models.Datatype.UINT8)\n        ),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Processing Function in Python\nDESCRIPTION: Defines a helper function to split an iterable into batches, useful for processing large datasets in chunks.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/huggingface-datasets.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom itertools import islice\n\ndef batched(iterable, n):\n    iterator = iter(iterable)\n    while batch := list(islice(iterator, n)):\n        yield batch\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection via HTTP\nDESCRIPTION: This snippet demonstrates how to create a collection in Qdrant using an HTTP PUT request. The request includes the collection name in the endpoint and a JSON payload defining the vector parameters, such as size (768), distance metric (Cosine), and whether to store vectors on disk (true).\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-vectors-on-disk/http.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\",\n      \"on_disk\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Matrix Pair Search in Go\nDESCRIPTION: This code establishes a connection to a Qdrant server running on localhost:6334 and performs a search for matrix pairs. The search includes parameters for sample size, result limit, and filtering for items where the 'color' field equals 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/distance-matrix/basic/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nsample := uint64(10)\nlimit := uint64(2)\nres, err := client.SearchMatrixPairs(ctx, &qdrant.SearchMatrixPoints{\n    CollectionName: \"{collection_name}\",\n    Sample:         &sample,\n    Limit:          &limit,\n    Filter: &qdrant.Filter{\n        Must: []*qdrant.Condition{\n            qdrant.NewMatch(\"color\", \"red\"),\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Sparse Vectors in Java\nDESCRIPTION: Initializes a Qdrant client and creates a new collection configured with sparse vector support. The code connects to a local Qdrant instance on port 6334 and sets up a collection with sparse vector indexing parameters for a SPLADE model.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector-index-on-disk/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Collections;\n\nQdrantClient client = new QdrantClient(\n    QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.createCollectionAsync(\n    Collections.CreateCollection.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setSparseVectorsConfig(\n            Collections.SparseVectorConfig.newBuilder().putMap(\n                \"splade-model-name\",\n                Collections.SparseVectorParams.newBuilder()\n                    .setIndex(\n                        Collections.SparseIndexConfig\n                            .newBuilder()\n                            .setOnDisk(false)\n                            .build()\n                    ).build()\n            ).build()\n        ).build()\n).get();\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection and Inserting Documents in TypeScript\nDESCRIPTION: Creates a new Qdrant collection with specified vector parameters and inserts the embedded documents into the collection using TypeScript.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/upstage.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst COLLECTION_NAME = \"example_collection\"\n\nawait client.createCollection(COLLECTION_NAME, {\n    vectors: {\n        size: 4096,\n        distance: 'Cosine',\n    }\n});\n\nawait client.upsert(COLLECTION_NAME, {\n    wait: true,\n    points\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using QdrantClient in TypeScript\nDESCRIPTION: This code demonstrates how to import and initialize a Qdrant client connected to a local Qdrant server on port 6333, then perform a basic operation to retrieve all collection aliases.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/list-all/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.getAliases();\n```\n\n----------------------------------------\n\nTITLE: Querying Points in Qdrant using Rust\nDESCRIPTION: This snippet initializes a Qdrant client and performs a query with multiple vector inputs. It requires the 'qdrant_client' crate for interaction with the Qdrant API. The expected input is a collection name and a list of vectors, while the output is a response from the Qdrant server.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/multivector/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{ QueryPointsBuilder, VectorInput };\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet res = client.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(VectorInput::new_multi(\n            vec![\n                vec![-0.013,  0.020, -0.007, -0.111],\n                vec![-0.030, -0.055,  0.001,  0.072],\n                vec![-0.041,  0.014, -0.032, -0.062],\n            ]\n        ))\n).await?;\n```\n\n----------------------------------------\n\nTITLE: Encoding and Uploading Startup Vectors to Qdrant\nDESCRIPTION: Add startup documents to Qdrant collection, generating dense and sparse vectors in parallel\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclient.add(\n    collection_name=\"startups\",\n    documents=documents,\n    metadata=metadata,\n    parallel=0,  # Use all available CPU cores to encode data. \n    # Requires wrapping code into if __name__ == '__main__' block\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Text Embeddings with OpenAI in Python\nDESCRIPTION: This function generates embeddings for text using OpenAI's API. It utilizes the 'text-embedding-3-small' model to transform input text into vector representations for use in semantic search applications.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/graphrag-qdrant-neo4j.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef openai_embeddings(text):\n    response = client.embeddings.create(\n        input=text,\n        model=\"text-embedding-3-small\"\n    )\n    \n    return response.data[0].embedding\n```\n\n----------------------------------------\n\nTITLE: Generating Image Embeddings with Aleph Alpha and Storing in Qdrant\nDESCRIPTION: Python code that demonstrates generating image embeddings using Aleph Alpha's API and storing them in Qdrant. It uses the AsyncClient to make API requests, creates an embedding from an image file, and stores the resulting vector in a Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/aleph-alpha.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport qdrant_client\nfrom qdrant_client.models import Batch\n\nfrom aleph_alpha_client import (\n    Prompt,\n    AsyncClient,\n    SemanticEmbeddingRequest,\n    SemanticRepresentation,\n    ImagePrompt\n)\n\naa_token = \"<< your_token >>\"\nmodel = \"luminous-base\"\n\nqdrant_client = qdrant_client.QdrantClient()\nasync with AsyncClient(token=aa_token) as client:\n    prompt = ImagePrompt.from_file(\"./path/to/the/image.jpg\")\n    prompt = Prompt.from_image(prompt)\n\n    query_params = {\n        \"prompt\": prompt,\n        \"representation\": SemanticRepresentation.Symmetric,\n        \"compress_to_size\": 128,\n    }\n    query_request = SemanticEmbeddingRequest(**query_params)\n    query_response = await client.semantic_embed(\n        request=query_request, model=model\n    )\n    \n    qdrant_client.upsert(\n        collection_name=\"MyCollection\",\n        points=Batch(\n            ids=[1],\n            vectors=[query_response.embedding],\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Generating embeddings with AWS Bedrock and storing them in Qdrant using Python\nDESCRIPTION: This Python code demonstrates how to use AWS Bedrock's Titan Embeddings G1 model to generate embeddings and store them in a Qdrant collection. It requires boto3 and qdrant_client dependencies, and proper AWS credentials configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/bedrock.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install the required dependencies\n# pip install boto3 qdrant_client\n\nimport json\nimport boto3\n\nfrom qdrant_client import QdrantClient, models\n\nsession = boto3.Session()\n\nbedrock_client = session.client(\n    \"bedrock-runtime\",\n    region_name=\"<YOUR_AWS_REGION>\",\n    aws_access_key_id=\"<YOUR_AWS_ACCESS_KEY_ID>\",\n    aws_secret_access_key=\"<YOUR_AWS_SECRET_KEY>\",\n)\n\nqdrant_client = QdrantClient(url=\"http://localhost:6333\")\n\nqdrant_client.create_collection(\n    \"{collection_name}\",\n    vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),\n)\n\nbody = json.dumps({\"inputText\": \"Some text to generate embeddings for\"})\n\nresponse = bedrock_client.invoke_model(\n    body=body,\n    modelId=\"amazon.titan-embed-text-v1\",\n    accept=\"application/json\",\n    contentType=\"application/json\",\n)\n\nresponse_body = json.loads(response.get(\"body\").read())\n\nqdrant_client.upsert(\n    \"{collection_name}\",\n    points=[models.PointStruct(id=1, vector=response_body[\"embedding\"])],\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Neural Searcher Class with Qdrant Client in Python\nDESCRIPTION: Creates a NeuralSearcher class that initializes the Sentence Transformer model for encoding text queries into vectors and sets up the Qdrant client for performing vector searches. This class serves as the foundation for neural search functionality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\nfrom sentence_transformers import SentenceTransformer\n\n\nclass NeuralSearcher:\n    def __init__(self, collection_name):\n        self.collection_name = collection_name\n        # Initialize encoder model\n        self.model = SentenceTransformer(\"all-MiniLM-L6-v2\", device=\"cpu\")\n        # initialize Qdrant client\n        self.qdrant_client = QdrantClient(\"http://localhost:6333\")\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Binary Quantization\nDESCRIPTION: Creates a Qdrant collection named 'contracts' with 5120-dimensional vectors, cosine distance, and binary quantization for efficient storage and retrieval.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-contract-management-stackit-aleph-alpha.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(\n    location=os.environ[\"QDRANT_URL\"],\n    api_key=os.environ[\"QDRANT_API_KEY\"],\n)\nclient.create_collection(\n    collection_name=\"contracts\",\n    vectors_config=models.VectorParams(\n        size=5120,\n        distance=models.Distance.COSINE,\n        quantization_config=models.BinaryQuantization(\n            binary=models.BinaryQuantizationConfig(\n                always_ram=True,\n            )\n        )\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring HNSW Vector Index Parameters in Qdrant\nDESCRIPTION: YAML configuration for the HNSW (Hierarchical Navigable Small World) index in Qdrant. Specifies parameters like m (edges per node), ef_construct (neighbors during index building), and full_scan_threshold for optimizing search accuracy and performance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/indexing.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  # Default parameters of HNSW Index. Could be overridden for each collection or named vector individually\n  hnsw_index:\n    # Number of edges per node in the index graph.\n    # Larger the value - more accurate the search, more space required.\n    m: 16\n    # Number of neighbours to consider during the index building.\n    # Larger the value - more accurate the search, more time required to build index.\n    ef_construct: 100\n    # Minimal size (in KiloBytes) of vectors for additional payload-based indexing.\n    # If payload chunk is smaller than `full_scan_threshold_kb` additional indexing won't be used -\n    # in this case full-scan search should be preferred by query planner and additional indexing is not required.\n    # Note: 1Kb = 1 vector of size 256\n    full_scan_threshold: 10000\n```\n\n----------------------------------------\n\nTITLE: Reranking with Late Interaction Models in Qdrant (Python)\nDESCRIPTION: Demonstrates how to perform reranking in Qdrant using late interaction models like ColBERT. This approach reorders search results based on additional processing of document content for improved relevance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-resource-optimization.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points(\n       \"collection-name\",\n       prefetch=prefetch, # Previous results\n       query=late_vectors, # Colbert converted query\n       using=\"colbertv2.0\",\n       with_payload=True,\n       limit=10,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in Qdrant with Python\nDESCRIPTION: This Python snippet demonstrates how to create a new collection in Qdrant using the QdrantClient. It sets up a connection to a Qdrant instance running locally and configures a collection with specified vector parameters, including size and the COSINE distance metric. This requires the qdrant-client Python package and a running Qdrant server instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-vectors-on-disk/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(\n        size=768, distance=models.Distance.COSINE, on_disk=True\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database using TypeScript\nDESCRIPTION: Creates a Qdrant client instance connecting to a local server, then executes a vector similarity search with custom parameters. The query searches for vectors similar to the provided embedding array, setting HNSW search parameters and limiting results to 3 items.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-params/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: [0.2, 0.1, 0.9, 0.7],\n    params: {\n        hnsw_ef: 128,\n        exact: false,\n    },\n    limit: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Training and Querying with Vanna\nDESCRIPTION: Complete example showing how to train the Vanna agent with DDL statements, documentation, and SQL queries, and how to remove training data and ask questions\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/vanna-ai.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# You can add DDL statements that specify table names, column names, types, and potentially relationships\nvn.train(ddl=\"\"\"\n    CREATE TABLE IF NOT EXISTS my-table (\n        id INT PRIMARY KEY,\n        name VARCHAR(100),\n        age INT\n    )\n\"\"\")\n\n# You can add documentation about your business terminology or definitions.\nvn.train(documentation=\"Our business defines OTIF score as the percentage of orders that are delivered on time and in full\")\n\n# You can also add SQL queries to your training data. This is useful if you have some queries already laying around.\nvn.train(sql=\"SELECT * FROM my-table WHERE name = 'John Doe'\")\n\n# You can remove training data if there's obsolete/incorrect information. \nvn.remove_training_data(id='1-ddl')\n\n# Whenever you ask a new question, Vanna will retrieve 10 most relevant pieces of training data and use it as part of the LLM prompt to generate the SQL.\n\nvn.ask(question=\"<YOUR_QUESTION>\")\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Multivector Search using TypeScript Client\nDESCRIPTION: Demonstrates how to implement a multi-stage reranking query with multivectors in Qdrant using the TypeScript client. The code prefetches results with a byte vector, reranks with a full vector, and finally applies ColBERT multivector ranking.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    prefetch: {\n        prefetch: {\n            query: [1, 23, 45, 67],\n            using: 'mrl_byte',\n            limit: 1000\n        },\n        query: [0.01, 0.45, 0.67],\n        using: 'full',\n        limit: 100,\n    },\n    query: [\n        [0.1, 0.2],\n        [0.2, 0.1],\n        [0.8, 0.9],\n    ],\n    using: 'colbert',\n    limit: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Documents into Different Types of Embeddings in Python\nDESCRIPTION: This snippet converts a list of documents into their dense, sparse, and late interaction embeddings using the previously loaded models, which are necessary for indexing in the vector database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-hybrid-search.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndense_embeddings = list(dense_embedding_model.embed(doc for doc in documents))\nbm25_embeddings = list(bm25_embedding_model.embed(doc for doc in documents))\nlate_interaction_embeddings = list(late_interaction_embedding_model.embed(doc for doc in documents))\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Vector Database in YAML\nDESCRIPTION: A complete YAML configuration file for Qdrant vector database. It defines storage locations, performance parameters, optimization settings, indexing configurations, and service endpoints. The file contains extensive comments explaining each option's purpose and impact on the system.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/configuration.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  # Where to store all the data\n  storage_path: ./storage\n\n  # Where to store snapshots\n  snapshots_path: ./snapshots\n\n  snapshots_config:\n    # \"local\" or \"s3\" - where to store snapshots\n    snapshots_storage: local\n    # s3_config:\n    #   bucket: \"\"\n    #   region: \"\"\n    #   access_key: \"\"\n    #   secret_key: \"\"\n\n  # Where to store temporary files\n  # If null, temporary snapshots are stored in: storage/snapshots_temp/\n  temp_path: null\n\n  # If true - point payloads will not be stored in memory.\n  # It will be read from the disk every time it is requested.\n  # This setting saves RAM by (slightly) increasing the response time.\n  # Note: those payload values that are involved in filtering and are indexed - remain in RAM.\n  # \n  # Default: true\n  on_disk_payload: true\n\n  # Maximum number of concurrent updates to shard replicas\n  # If `null` - maximum concurrency is used.\n  update_concurrency: null\n\n  # Write-ahead-log related configuration\n  wal:\n    # Size of a single WAL segment\n    wal_capacity_mb: 32\n\n    # Number of WAL segments to create ahead of actual data requirement\n    wal_segments_ahead: 0\n\n  # Normal node - receives all updates and answers all queries\n  node_type: \"Normal\"\n\n  # Listener node - receives all updates, but does not answer search/read queries\n  # Useful for setting up a dedicated backup node\n  # node_type: \"Listener\"\n\n  performance:\n    # Number of parallel threads used for search operations. If 0 - auto selection.\n    max_search_threads: 0\n\n    # Max number of threads (jobs) for running optimizations across all collections, each thread runs one job.\n    # If 0 - have no limit and choose dynamically to saturate CPU.\n    # Note: each optimization job will also use `max_indexing_threads` threads by itself for index building.\n    max_optimization_threads: 0\n\n    # CPU budget, how many CPUs (threads) to allocate for an optimization job.\n    # If 0 - auto selection, keep 1 or more CPUs unallocated depending on CPU size\n    # If negative - subtract this number of CPUs from the available CPUs.\n    # If positive - use this exact number of CPUs.\n    optimizer_cpu_budget: 0\n\n    # Prevent DDoS of too many concurrent updates in distributed mode.\n    # One external update usually triggers multiple internal updates, which breaks internal\n    # timings. For example, the health check timing and consensus timing.\n    # If null - auto selection.\n    update_rate_limit: null\n\n    # Limit for number of incoming automatic shard transfers per collection on this node, does not affect user-requested transfers.\n    # The same value should be used on all nodes in a cluster.\n    # Default is to allow 1 transfer.\n    # If null - allow unlimited transfers.\n    #incoming_shard_transfers_limit: 1\n\n    # Limit for number of outgoing automatic shard transfers per collection on this node, does not affect user-requested transfers.\n    # The same value should be used on all nodes in a cluster.\n    # Default is to allow 1 transfer.\n    # If null - allow unlimited transfers.\n    #outgoing_shard_transfers_limit: 1\n\n    # Enable async scorer which uses io_uring when rescoring.\n    # Only supported on Linux, must be enabled in your kernel.\n    # See: <https://qdrant.tech/articles/io_uring/#and-what-about-qdrant>\n    #async_scorer: false\n\n  optimizers:\n    # The minimal fraction of deleted vectors in a segment, required to perform segment optimization\n    deleted_threshold: 0.2\n\n    # The minimal number of vectors in a segment, required to perform segment optimization\n    vacuum_min_vector_number: 1000\n\n    # Target amount of segments optimizer will try to keep.\n    # Real amount of segments may vary depending on multiple parameters:\n    #  - Amount of stored points\n    #  - Current write RPS\n    #\n    # It is recommended to select default number of segments as a factor of the number of search threads,\n    # so that each segment would be handled evenly by one of the threads.\n    # If `default_segment_number = 0`, will be automatically selected by the number of available CPUs\n    default_segment_number: 0\n\n    # Do not create segments larger this size (in KiloBytes).\n    # Large segments might require disproportionately long indexation times,\n    # therefore it makes sense to limit the size of segments.\n    #\n    # If indexation speed have more priority for your - make this parameter lower.\n    # If search speed is more important - make this parameter higher.\n    # Note: 1Kb = 1 vector of size 256\n    # If not set, will be automatically selected considering the number of available CPUs.\n    max_segment_size_kb: null\n\n    # Maximum size (in KiloBytes) of vectors to store in-memory per segment.\n    # Segments larger than this threshold will be stored as read-only memmapped file.\n    # To enable memmap storage, lower the threshold\n    # Note: 1Kb = 1 vector of size 256\n    # To explicitly disable mmap optimization, set to `0`.\n    # If not set, will be disabled by default.\n    memmap_threshold_kb: null\n\n    # Maximum size (in KiloBytes) of vectors allowed for plain index.\n    # Default value based on https://github.com/google-research/google-research/blob/master/scann/docs/algorithms.md\n    # Note: 1Kb = 1 vector of size 256\n    # To explicitly disable vector indexing, set to `0`.\n    # If not set, the default value will be used.\n    indexing_threshold_kb: 20000\n\n    # Interval between forced flushes.\n    flush_interval_sec: 5\n\n    # Max number of threads (jobs) for running optimizations per shard.\n    # Note: each optimization job will also use `max_indexing_threads` threads by itself for index building.\n    # If null - have no limit and choose dynamically to saturate CPU.\n    # If 0 - no optimization threads, optimizations will be disabled.\n    max_optimization_threads: null\n\n  # This section has the same options as 'optimizers' above. All values specified here will overwrite the collections\n  # optimizers configs regardless of the config above and the options specified at collection creation.\n  #optimizers_overwrite:\n  #  deleted_threshold: 0.2\n  #  vacuum_min_vector_number: 1000\n  #  default_segment_number: 0\n  #  max_segment_size_kb: null\n  #  memmap_threshold_kb: null\n  #  indexing_threshold_kb: 20000\n  #  flush_interval_sec: 5\n  #  max_optimization_threads: null\n\n  # Default parameters of HNSW Index. Could be overridden for each collection or named vector individually\n  hnsw_index:\n    # Number of edges per node in the index graph. Larger the value - more accurate the search, more space required.\n    m: 16\n\n    # Number of neighbours to consider during the index building. Larger the value - more accurate the search, more time required to build index.\n    ef_construct: 100\n\n    # Minimal size (in KiloBytes) of vectors for additional payload-based indexing.\n    # If payload chunk is smaller than `full_scan_threshold_kb` additional indexing won't be used -\n    # in this case full-scan search should be preferred by query planner and additional indexing is not required.\n    # Note: 1Kb = 1 vector of size 256\n    full_scan_threshold_kb: 10000\n\n    # Number of parallel threads used for background index building.\n    # If 0 - automatically select.\n    # Best to keep between 8 and 16 to prevent likelihood of building broken/inefficient HNSW graphs.\n    # On small CPUs, less threads are used.\n    max_indexing_threads: 0\n\n    # Store HNSW index on disk. If set to false, index will be stored in RAM. Default: false\n    on_disk: false\n\n    # Custom M param for hnsw graph built for payload index. If not set, default M will be used.\n    payload_m: null\n\n  # Default shard transfer method to use if none is defined.\n  # If null - don't have a shard transfer preference, choose automatically.\n  # If stream_records, snapshot or wal_delta - prefer this specific method.\n  # More info: https://qdrant.tech/documentation/guides/distributed_deployment/#shard-transfer-method\n  shard_transfer_method: null\n\n  # Default parameters for collections\n  collection:\n    # Number of replicas of each shard that network tries to maintain\n    replication_factor: 1\n\n    # How many replicas should apply the operation for us to consider it successful\n    write_consistency_factor: 1\n\n    # Default parameters for vectors.\n    vectors:\n      # Whether vectors should be stored in memory or on disk.\n      on_disk: null\n\n    # shard_number_per_node: 1\n\n    # Default quantization configuration.\n    # More info: https://qdrant.tech/documentation/guides/quantization\n    quantization: null\n\n    # Default strict mode parameters for newly created collections.\n    strict_mode:\n      # Whether strict mode is enabled for a collection or not.\n      enabled: false\n\n      # Max allowed `limit` parameter for all APIs that don't have their own max limit.\n      max_query_limit: null\n\n      # Max allowed `timeout` parameter.\n      max_timeout: null\n\n      # Allow usage of unindexed fields in retrieval based (eg. search) filters.\n      unindexed_filtering_retrieve: null\n\n      # Allow usage of unindexed fields in filtered updates (eg. delete by payload).\n      unindexed_filtering_update: null\n\n      # Max HNSW value allowed in search parameters.\n      search_max_hnsw_ef: null\n\n      # Whether exact search is allowed or not.\n      search_allow_exact: null\n\n      # Max oversampling value allowed in search.\n      search_max_oversampling: null\n\nservice:\n  # Maximum size of POST data in a single request in megabytes\n  max_request_size_mb: 32\n\n  # Number of parallel workers used for serving the api. If 0 - equal to the number of available cores.\n  # If missing - Same as storage.max_search_threads\n  max_workers: 0\n\n  # Host to bind the service on\n  host: 0.0.0.0\n\n  # HTTP(S) port to bind the service on\n  http_port: 6333\n\n  # gRPC port to bind the service on.\n  # If `null` - gRPC is disabled. Default: null\n  # Comment to disable gRPC:\n  grpc_port: 6334\n\n  # Enable CORS headers in REST API.\n```\n\n----------------------------------------\n\nTITLE: Performing Recommendation Query with Qdrant Java Client\nDESCRIPTION: This snippet demonstrates a complete workflow for performing recommendation queries with the Qdrant Java client. It establishes a client connection to a local Qdrant instance, then creates and executes a recommendation query with positive and negative vector examples, filtering results to only include documents where the 'city' field is 'London', and limiting the results to 3 items.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/basic-recommend/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.RecommendInput;\nimport io.qdrant.client.grpc.Points.RecommendStrategy;\nimport io.qdrant.client.grpc.Points.Filter;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.recommend;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(recommend(RecommendInput.newBuilder()\n                .addAllPositive(List.of(vectorInput(100), vectorInput(200), vectorInput(100.0f, 231.0f)))\n                .addAllNegative(List.of(vectorInput(718), vectorInput(0.2f, 0.3f, 0.4f, 0.5f)))\n                .setStrategy(RecommendStrategy.AverageVector)\n                .build()))\n        .setFilter(Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")))\n        .setLimit(3)\n        .build()).get();\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Multivector Search using Java Client\nDESCRIPTION: Demonstrates implementation of a multi-stage reranking query with multivectors in Qdrant using the Java client. The example shows how to set up a search pipeline that uses different vector types for each refinement stage, including ColBERT multivectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PrefetchQuery;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .queryAsync(\n        QueryPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .addPrefetch(\n                PrefetchQuery.newBuilder()\n                    .addPrefetch(\n                        PrefetchQuery.newBuilder()\n                            .setQuery(nearest(1, 23, 45, 67)) // <------------- small byte vector\n                            .setUsing(\"mrl_byte\")\n                            .setLimit(1000)\n                            .build())\n                    .setQuery(nearest(0.01f, 0.45f, 0.67f)) // <-- dense vector\n                    .setUsing(\"full\")\n                    .setLimit(100)\n                    .build())\n            .setQuery(\n                nearest(\n                    new float[][] {\n                      {0.1f, 0.2f}, // <─┐\n                      {0.2f, 0.1f}, // < ├─ multi-vector\n                      {0.8f, 0.9f}  // < ┘\n                    }))\n            .setUsing(\"colbert\")\n            .setLimit(10)\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection - TypeScript\nDESCRIPTION: Shows how to import and instantiate a Qdrant client, then create a new collection with specified vector dimensions and distance metric. The collection is configured with 100-dimensional vectors using Cosine similarity distance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/simple/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: { size: 100, distance: \"Cosine\" },\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Search Parameters\nDESCRIPTION: Search configuration with HNSW and exact search parameters for balancing speed and precision.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/optimize.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"params\": {\n    \"hnsw_ef\": 128,\n    \"exact\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Qdrant Collection in Python\nDESCRIPTION: This snippet illustrates how to create a collection in Qdrant, specifying details such as the collection name and the vector configuration to use.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nqdrant_client.create_collection(\n    collection_name=COLLECTION_NAME, \n    vectors_config=VectorParams(size=3072, distance=Distance.DOT)\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Qdrant and Upserting Data in Java\nDESCRIPTION: This code demonstrates how to create a Qdrant client, connect to a local Qdrant server, and upsert a point with named vectors into a specified collection. It uses the Qdrant Java client library to perform these operations asynchronously.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/sparse-vectors-single/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\nimport java.util.Map;\n\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.VectorFactory.vector;\nimport static io.qdrant.client.VectorsFactory.namedVectors;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PointStruct;\n\nQdrantClient client =\n  new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n  .upsertAsync(\n    \"{collection_name}\",\n    List.of(\n      PointStruct.newBuilder()\n      .setId(id(1))\n      .setVectors(\n        namedVectors(Map.of(\n          \"text\", vector(List.of(1.0f, 2.0f), List.of(6, 7))))\n      )\n      .build()))\n  .get();\n```\n\n----------------------------------------\n\nTITLE: Perform a Search by Image - Python\nDESCRIPTION: This snippet demonstrates how to submit a search query using an image by generating an embedding for the image input and querying points in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimage_segment = twelvelabs_client.embed.create(\n    model_name=\"Marengo-retrieval-2.7\",\n    image_url=\"https://gratisography.com/wp-content/uploads/2024/01/gratisography-cyber-kitty-1170x780.jpg\",\n).image_embedding.segments[0]\n\nqdrant_client.query_points(\n    collection_name=collection_name,\n    query=image_segment.embeddings_float,\n)\n```\n\n----------------------------------------\n\nTITLE: Executing a Hybrid Search Query in Qdrant\nDESCRIPTION: This code demonstrates how to perform a hybrid search query in Qdrant using both dense and sparse vectors. It computes both vector types for the query and sends a batch search request to retrieve results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/sparse-vectors.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nquery_text = \"Who was Arthur Ashe?\"\n\n# Compute sparse and dense vectors\nquery_indices, query_values = compute_sparse_vector(query_text)\nquery_dense_vector = compute_dense_vector(query_text)\n\n\nclient.search_batch(\n    collection_name=COLLECTION_NAME,\n    requests=[\n        models.SearchRequest(\n            vector=models.NamedVector(\n                name=\"text-dense\",\n                vector=query_dense_vector,\n            ),\n            limit=10,\n        ),\n        models.SearchRequest(\n            vector=models.NamedSparseVector(\n                name=\"text-sparse\",\n                vector=models.SparseVector(\n                    indices=query_indices,\n                    values=query_values,\n                ),\n            ),\n            limit=10,\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Recovering Qdrant Collection Snapshot in Python\nDESCRIPTION: Demonstrates how to connect to a Qdrant instance and recover a collection snapshot from another node. Uses QdrantClient to establish connection on port 6333 and recover a snapshot for a specified collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/recover-collection-snapshot-from-url/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://qdrant-node-2:6333\")\n\nclient.recover_snapshot(\n    \"{collection_name}\",\n    \"http://qdrant-node-1:6333/collections/collection_name/snapshots/snapshot-2022-10-10.shapshot\",\n)\n```\n\n----------------------------------------\n\nTITLE: Embedding Images and Captions with Python\nDESCRIPTION: Uses the `HuggingFaceEmbedding` model from LlamaIndex to create embeddings for a set of images and their respective captions. The embeddings are utilized for efficient searching and querying across modalities.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/multimodal-search.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom llama_index.embeddings.huggingface import HuggingFaceEmbedding\n\nmodel = HuggingFaceEmbedding(\n    model_name=\"llamaindex/vdr-2b-multi-v1\",\n    device=\"cpu\",  # \"mps\" for mac, \"cuda\" for nvidia GPUs\n    trust_remote_code=True,\n)\n\ndocuments = [\n    {\"caption\": \"An image about plane emergency safety.\", \"image\": \"images/image-1.png\"},\n    {\"caption\": \"An image about airplane components.\", \"image\": \"images/image-2.png\"},\n    {\"caption\": \"An image about COVID safety restrictions.\", \"image\": \"images/image-3.png\"},\n    {\"caption\": \"An confidential image about UFO sightings.\", \"image\": \"images/image-4.png\"},\n    {\"caption\": \"An image about unusual footprints on Aralar 2011.\", \"image\": \"images/image-5.png\"},\n]\n\ntext_embeddings = model.get_text_embedding_batch([doc[\"caption\"] for doc in documents])\nimage_embeddings = model.get_image_embedding_batch([doc[\"image\"] for doc in documents])\n```\n```\n\n----------------------------------------\n\nTITLE: Search By Existing Vector ID in Qdrant\nDESCRIPTION: Perform a search using an already stored vector ID, bypassing embedding model inference\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/search.md#2025-04-21_snippet_1\n\nLANGUAGE: rest\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n```\n\n----------------------------------------\n\nTITLE: Code to Natural Language Conversion Function\nDESCRIPTION: Converts code structures into natural language text by processing signatures, docstrings and context information. Uses inflection library for name formatting.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/code-search.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport inflection\nimport re\n\nfrom typing import Dict, Any\n\ndef textify(chunk: Dict[str, Any]) -> str:\n    # Get rid of all the camel case / snake case\n    # - inflection.underscore changes the camel case to snake case\n    # - inflection.humanize converts the snake case to human readable form\n    name = inflection.humanize(inflection.underscore(chunk[\"name\"]))\n    signature = inflection.humanize(inflection.underscore(chunk[\"signature\"]))\n\n    # Check if docstring is provided\n    docstring = \"\"\n    if chunk[\"docstring\"]:\n        docstring = f\"that does {chunk['docstring']} \"\n\n    # Extract the location of that snippet of code\n    context = (\n        f\"module {chunk['context']['module']} \"\n        f\"file {chunk['context']['file_name']}\"\n    )\n    if chunk[\"context\"][\"struct_name\"]:\n        struct_name = inflection.humanize(\n            inflection.underscore(chunk[\"context\"][\"struct_name\"])\n        )\n        context = f\"defined in struct {struct_name} {context}\"\n\n    # Combine all the bits and pieces together\n    text_representation = (\n        f\"{chunk['code_type']} {name} \"\n        f\"{docstring}\"\n        f\"defined as {signature} \"\n        f\"{context}\"\n    )\n\n    # Remove any special characters and concatenate the tokens\n    tokens = re.split(r\"\\W\", text_representation)\n    tokens = filter(lambda x: x, tokens)\n    return \" \".join(tokens)\n```\n\n----------------------------------------\n\nTITLE: Scrolling Filtered Points with Qdrant Client in Rust\nDESCRIPTION: This code initializes a Qdrant client and performs a scroll operation on a collection with specific filter conditions. It filters points based on the city 'london' and color 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-must-filter/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::must([\n            Condition::matches(\"city\", \"london\".to_string()),\n            Condition::matches(\"color\", \"red\".to_string()),\n        ])),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Constructing a Hybrid Search Query in JSON\nDESCRIPTION: Example of a hybrid search query combining dense vector search with specific keyword filtering in Qdrant's Query API.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-a-vector-database.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nsearch_query = {\n    \"vector\": query_vector,  # Dense vector for semantic search\n    \"filter\": {  # Filtering for specific terms\n        \"must\": [\n            {\"key\": \"text\", \"match\": \"transformers\"}  # Exact keyword match in the paper\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Keyword Payload Index in Qdrant\nDESCRIPTION: Configures a keyword payload index for a specific collection with on-disk storage. Enables efficient searching and filtering of payload fields using Qdrant's indexing capabilities.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/keyword-on-disk/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"payload_field_name\",\n    field_schema=models.KeywordIndexParams(\n        type=models.KeywordIndexType.KEYWORD,\n        on_disk=True,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Database in C#\nDESCRIPTION: This snippet initializes a Qdrant client and performs an asynchronous query. It requires the Qdrant.Client library to be included in the project. The query takes a collection name and an array of float arrays representing the query vectors. It returns results based on the given vectors for the specified collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/multivector/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  query: new float[][] {\n    [-0.013f, 0.020f, -0.007f, -0.111f],\n    [-0.030f, -0.055f, 0.001 , 0.072f],\n    [-0.041f, 0.014f, -0.032f, -0.062f],\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Database with Qdrant Client in TypeScript\nDESCRIPTION: This code demonstrates how to perform a vector similarity search in a Qdrant collection. The query uses a 4-dimensional vector and requests that matching records be returned with both their original vectors and payload data included in the results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-payload-and-vectors/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.query(\"{collection_name}\", {\n  query: [0.2, 0.1, 0.9, 0.7],\n  with_vector: true,\n  with_payload: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Qdrant Client in Python\nDESCRIPTION: This code initializes a Qdrant client and upserts a point into a collection. It demonstrates how to create a point with an ID, payload, and vector, and insert it into a specified collection using the client's upsert method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/uuid-one-point-simple/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.upsert(\n    collection_name=\"{collection_name}\",\n    points=[\n        models.PointStruct(\n            id=\"5c56c793-69f3-4fbf-87e6-c4bf54c28c26\",\n            payload={\n                \"color\": \"red\",\n            },\n            vector=[0.9, 0.1, 0.1],\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Search on Embedded Documents\nDESCRIPTION: Demonstrates generating a query embedding and searching the Qdrant collection to find the most relevant documents based on semantic similarity.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/nvidia.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npayload = {\n    \"input\": \"What is the best to use for vector search scaling?\",\n    \"input_type\": \"query\",\n    \"model\": \"NV-Embed-QA\",\n}\n\nresponse_body = nvidia_session.post(\n    NVIDIA_BASE_URL, headers=headers, json=payload\n).json()\n\nclient.search(\n    collection_name=collection_name,\n    query_vector=response_body[\"data\"][0][\"embedding\"],\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nbody = {\n    \"input\": \"What is the best to use for vector search scaling?\",\n    \"input_type\": \"query\",\n    \"model\": \"NV-Embed-QA\",\n}\n\nresponse = await fetch(NVIDIA_BASE_URL, {\n    method: \"POST\",\n    body: JSON.stringify(body),\n    headers\n});\n\nresponse_body = await response.json()\n\nawait client.search(COLLECTION_NAME, {\n    vector: response_body.data[0].embedding,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Search Query with Filter and Parameters\nDESCRIPTION: Advanced search query demonstrating filtering, limiting results, and specifying custom search parameters\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/search.md#2025-04-21_snippet_2\n\nLANGUAGE: rest\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI LLM Parser for Graph Extraction in Python\nDESCRIPTION: This function initializes the OpenAI client and defines a method to send prompts to the LLM, extracting graph components from text. It uses the GPT-4 model to parse text into structured graph data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/graphrag-qdrant-neo4j.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient = OpenAI()\n\ndef openai_llm_parser(prompt):\n    completion = client.chat.completions.create(\n        model=\"gpt-4o-2024-08-06\",\n        response_format={\"type\": \"json_object\"},\n        messages=[\n            {\n                \"role\": \"system\",\n                \"content\": \n                   \n                \"\"\" You are a precise graph relationship extractor. Extract all \n                    relationships from the text and format them as a JSON object \n                    with this exact structure:\n                    {\n                        \"graph\": [\n                            {\"node\": \"Person/Entity\", \n                             \"target_node\": \"Related Entity\", \n                             \"relationship\": \"Type of Relationship\"},\n                            ...more relationships...\n                        ]\n                    }\n                    Include ALL relationships mentioned in the text, including \n                    implicit ones. Be thorough and precise. \"\"\"\n                    \n            },\n            {\n                \"role\": \"user\",\n                \"content\": prompt\n            }\n        ]\n    )\n    \n    return GraphComponents.model_validate_json(completion.choices[0].message.content)\n    \n```\n\n----------------------------------------\n\nTITLE: Executing Nearest Neighbor Search with Qdrant Java Client\nDESCRIPTION: Shows how to instantiate a Qdrant client and perform an asynchronous nearest neighbor search query. The query looks up vectors from another collection using UUID reference and performs similarity search across a specified vector field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/by-existing-id-with-lookup/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.LookupLocation;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport java.util.UUID;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .queryAsync(\n        QueryPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setQuery(nearest(UUID.fromString(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")))\n            .setUsing(\"512d-vector\")\n            .setLookupFrom(\n                LookupLocation.newBuilder()\n                    .setCollectionName(\"another_collection\")\n                    .setVectorName(\"image-512\")\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Using Grouping API for Search in Qdrant\nDESCRIPTION: Illustrates how to use the grouping API in Qdrant to group search results by a certain field. This example groups results by 'document_id', returning the best 3 points for each group, with a limit of 5 groups.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/search.md#2025-04-21_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/search/groups\n{\n  \"vector\": [0.2, 0.1, 0.9, 0.7],\n  \"group_by\": \"document_id\",\n  \"group_size\": 3,\n  \"limit\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Retrieval Chain for Question Answering\nDESCRIPTION: Implements a retrieval chain that combines Qdrant vector search with document processing and LLM response generation. Uses Langchain's document combination and retrieval chain components.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.chains.combine_documents import create_stuff_documents_chain\nfrom langchain.chains.retrieval import create_retrieval_chain\nfrom langchain import hub\n\nretriever = qdrant.as_retriever()\ncombine_docs_chain = create_stuff_documents_chain(\n    llm=llm,\n    # Default prompt is loaded from the hub, but we can also modify it\n    prompt=hub.pull(\"langchain-ai/retrieval-qa-chat\"),\n)\nretrieval_qa_chain = create_retrieval_chain(\n    retriever=retriever,\n    combine_docs_chain=combine_docs_chain,\n)\nresponse = retrieval_qa_chain.invoke({\"input\": \"What is the Oracle Cloud Free Tier?\"})\n```\n\n----------------------------------------\n\nTITLE: HTTPS Client Examples\nDESCRIPTION: Examples of connecting to Qdrant with TLS enabled in different programming languages.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://localhost:6333\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(\n    url=\"https://localhost:6333\",\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ url: \"https://localhost\", port: 6333 });\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n```\n\n----------------------------------------\n\nTITLE: Computing Movie Scores and Generating Recommendations (Python)\nDESCRIPTION: Python code to compute movie scores based on similar users' ratings and generate personalized movie recommendations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/recommendation-system-ovhcloud.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef results_to_scores(results):\n    movie_scores = defaultdict(lambda: 0)\n\n    for user in results:\n        user_scores = user.vector['ratings']\n        for idx, rating in zip(user_scores.indices, user_scores.values):\n            if idx in my_ratings:\n                continue\n            movie_scores[idx] += rating\n\n    return movie_scores\n\nmovie_scores = results_to_scores(results)\ntop_movies = sorted(movie_scores.items(), key=lambda x: x[1], reverse=True)\n\nfor movie_id, score in top_movies[:5]:\n    print(movies[movies.movie_id == movie_id].title.values[0], score)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Collection with Vector Configuration\nDESCRIPTION: Creates a new Qdrant collection with specified vector parameters including dimensionality and distance metric. Configures memory-mapping threshold for optimization. Uses COSINE distance and 768-dimensional vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-optimizer-config/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n    optimizers_config=models.OptimizersConfigDiff(memmap_threshold=20000),\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting Data Using FastEmbed - Python\nDESCRIPTION: This code snippet shows how to embed text using the FastEmbed library and upsert the resulting vectors into a Qdrant collection. The TextEmbedding model is initialized with the Nomic model, and the embeddings are created with the input text. The batch is then constructed and sent to the Qdrant client for upsertion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/nomic.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastembed import TextEmbedding\nfrom client import QdrantClient, models\n\nmodel = TextEmbedding(\"nomic-ai/nomic-embed-text-v1\")\n\noutput = model.embed([\"Qdrant is the best vector database!\"])\n\nclient = QdrantClient()\nclient.upsert(\n    collection_name=\"my-collection\",\n    points=models.Batch(\n        ids=[1],\n        vectors=[embeddings.tolist() for embeddings in output],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: JWT User Role Validation Configuration\nDESCRIPTION: Example of using value_exists claim for user role validation in a users collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value_exists\": {\n    \"collection\": \"users\",\n    \"matches\": [\n      { \"key\": \"user_id\", \"value\": \"andrey\" },\n      { \"key\": \"role\", \"value\": \"manager\" }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing the LangGraph Graph\nDESCRIPTION: This Python code constructs the LangGraph graph using the `StateGraph` class. It adds the agent and tool node, defines conditional edges based on the `route` function, and adds edges to connect the tools back to the agent and from the start to the agent.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ngraph_builder = StateGraph(State)\n\ngraph_builder.add_node(\"agent\", agent)\ngraph_builder.add_node(\"tools\", tool_node)\n\ngraph_builder.add_conditional_edges(\n    \"agent\",\n    route,\n    {\"tools\": \"tools\", END: END},\n)\n\ngraph_builder.add_edge(\"tools\", \"agent\")\ngraph_builder.add_edge(START, \"agent\")\n```\n\n----------------------------------------\n\nTITLE: Initialize OpenAI Client with API Key\nDESCRIPTION: This Python snippet initializes the OpenAI client using the API key stored in the `.env` file. It loads the environment variables using `dotenv` and then creates an OpenAI client instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-camelai-discord.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"import openai\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nopenai_client = openai.Client(\n    api_key=os.getenv(\"OPENAI_API_KEY\")\n)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration in Rust\nDESCRIPTION: Establishes connection to Qdrant server and creates a new collection with cosine distance similarity metric and 100-dimensional vectors. The collection is initialized using data from an existing collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/init-from/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{CreateCollectionBuilder, Distance, VectorParamsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(100, Distance::Cosine))\n            .init_from_collection(\"{from_collection_name}\"),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Setup CAMEL-AI ChatAgent Instance\nDESCRIPTION: This Python snippet sets up a CAMEL-AI `ChatAgent` instance using OpenAI models. It configures the OpenAI model, creates a chat agent with a specified system message for answering questions based on retrieved context.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-camelai-discord.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"from camel.configs import ChatGPTConfig\nfrom camel.models import ModelFactory\nfrom camel.types import ModelPlatformType, ModelType\nfrom camel.agents import ChatAgent\n\n# Create a ChatGPT configuration\nconfig = ChatGPTConfig(temperature=0.2).as_dict()\n\n# Create an OpenAI model using the configuration\nopenai_model = ModelFactory.create(\n    model_platform=ModelPlatformType.OPENAI,\n    model_type=ModelType.GPT_4O_MINI,\n    model_config_dict=config,\n)\n\nassistant_sys_msg = \\\"\\\"\\\"You are a helpful assistant to answer question,\\n         I will give you the Original Query and Retrieved Context,\n        answer the Original Query based on the Retrieved Context,\n        if you can't answer the question just say I don't know.\\\"\\\"\\\" \n\nqdrant_agent = ChatAgent(system_message=assistant_sys_msg, model=openai_model)\"\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Tenant-Specific Filter\nDESCRIPTION: This code shows how to search for vectors by applying a filter that restricts results to a specific tenant, ensuring data isolation between tenants.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/multitenancy.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient.search(\n    collection_name=\"{tenant_data}\",\n    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"group_id\",\n                match=models.MatchValue(\n                    value=\"tenant_1\",\n                ),\n            ),\n        ]\n    ),\n    query_vector=[0.1, 0.1, 0.9],\n    limit=10,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection in C#\nDESCRIPTION: This snippet demonstrates how to create a new Qdrant collection using the C# client. It initializes a QdrantClient, then calls CreateCollectionAsync with specified parameters including collection name, vector size, distance metric, and an optional source collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/init-from/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 100, Distance = Distance.Cosine },\n\tinitFromCollection: \"{from_collection_name}\"\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Multiple Vectors\nDESCRIPTION: Python code to create a Qdrant collection that supports multiple vector types with different configurations for title and image vectors\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/storing-multiple-vectors-per-object-in-qdrant.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.http.models import VectorParams, Distance\n\nclient = QdrantClient()\nclient.create_collection(\n   collection_name=\"multiple_vectors\",\n   vectors_config={\n       \"title\": VectorParams(\n           size=100,\n           distance=Distance.EUCLID,\n       ),\n       \"image\": VectorParams(\n           size=786,\n           distance=Distance.COSINE,\n       ),\n   }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Index in Qdrant Collection via HTTP\nDESCRIPTION: This HTTP request configures an index for a specified collection in Qdrant. It sets the `timestamp` field as a primary index of type integer. Replace `{collection_name}` with the actual name of the collection where the index is intended. Ensure the Qdrant server is running and accessible.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/integer-is-principal/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/index\n{\n    \"field_name\": \"timestamp\",\n    \"field_schema\": {\n        \"type\": \"integer\",\n        \"is_principal\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Payload Data in Qdrant Collection\nDESCRIPTION: Demonstrates how to clear payload data for specific points in a Qdrant collection using the client API. The operation targets individual points by their IDs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/clear-payload/simple/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.clear_payload(\n    collection_name=\"{collection_name}\",\n    points_selector=[0, 3, 100],\n)\n```\n\n----------------------------------------\n\nTITLE: Updating HNSW and Quantization Parameters in Qdrant\nDESCRIPTION: This code snippet shows how to update HNSW index and quantization parameters for both the entire collection and a specific named vector. It configures index settings like ef_construct and m parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/collections.md#2025-04-21_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PATCH 'http://localhost:6333/collections/my_collection' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"optimizers_config\": {\n      \"indexing_threshold\": 10000\n    },\n    \"hnsw_config\": {\n      \"m\": 16,\n      \"ef_construct\": 100\n    },\n    \"quantization_config\": {\n      \"scalar\": {\n        \"type\": \"int8\",\n        \"always_ram\": true\n      }\n    },\n    \"vectors_config\": {\n      \"my_vector\": {\n        \"hnsw_config\": {\n          \"m\": 16,\n          \"ef_construct\": 100\n        },\n        \"quantization_config\": {\n          \"scalar\": {\n            \"type\": \"int8\",\n            \"always_ram\": true\n          }\n        }\n      }\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter for Pricing Page\nDESCRIPTION: Metadata configuration for Qdrant's pricing page, including title, subtitle, and sitemap exclusion\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/pricing/qdrant-pricing-hero.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Qdrant Pricing\nsubtitle: Cloud & Enterprise solutions\ndescription: Choose the deployment option for your application and explore our transparent pricing plans.\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Deleting Points from Qdrant Collection via REST API\nDESCRIPTION: POST request to the Qdrant API that deletes specific points by their IDs from a collection. The request targets the delete endpoint and includes an array of point IDs (0, 3, and 100) to be removed from the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-points/simple/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ids\": [0, 3, 100]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection in Go\nDESCRIPTION: This code snippet illustrates how to initialize a Qdrant client and create a new collection using the Go client library. It requires the 'github.com/qdrant/go-client/qdrant' package. The main parameters include the collection name and vector configuration, which specifies the size, distance metric, and storage options. The snippet assumes the Qdrant server is running locally on port 6334.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-vectors-on-disk/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t\tOnDisk:   qdrant.PtrOf(true),\n\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Vectors from a Qdrant Collection in Python\nDESCRIPTION: This snippet shows how to use the delete_vectors method from the Qdrant Python client to remove vectors from a collection. It deletes the vectors named 'text' and 'image' from points with IDs 0, 3, and 100 in the specified collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-vectors/simple/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.delete_vectors(\n    collection_name=\"{collection_name}\",\n    points=[0, 3, 100],\n    vectors=[\"text\", \"image\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Cluster Write Consistency Factor - Java\nDESCRIPTION: This Java snippet uses the QdrantClient to create a collection in a Qdrant cluster. It sets the `write_consistency_factor` alongside other parameters like vectors size, distance type, shard number, and replication factor, essential for managing distributed write operations with high consistency.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(300)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setShardNumber(6)\n            .setReplicationFactor(2)\n            .setWriteConsistencyFactor(2)\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Converting Upstage Model Outputs to Qdrant Points in Python\nDESCRIPTION: Transforms the embedding results from Upstage into Qdrant point structures, including the embedding vector and original text as payload.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/upstage.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import PointStruct\n\npoints = [\n    PointStruct(\n        id=idx,\n        vector=data[\"embedding\"],\n        payload={\"text\": text},\n    )\n    for idx, (data, text) in enumerate(zip(response_body[\"data\"], texts))\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Product Quantization in Qdrant\nDESCRIPTION: This snippet demonstrates how to enable product quantization when creating a collection. Product quantization compresses vectors to reduce storage requirements with configurable compression ratio and RAM caching options.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/quantization.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vectors\": {\n    \"size\": 768,\n    \"distance\": \"Cosine\"\n  },\n  \"quantization_config\": {\n    \"scalar\": {\n      \"type\": \"product\",\n      \"compression\": \"x16\",\n      \"always_ram\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Collection Alias in Qdrant via HTTP POST\nDESCRIPTION: This snippet demonstrates how to create an alias for a Qdrant collection using an HTTP POST request. It specifies the endpoint '/collections/aliases' and includes a JSON payload with an action to create an alias named 'production_collection' for the 'example_collection'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/create/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/aliases\n{\n    \"actions\": [\n        {\n            \"create_alias\": {\n                \"collection_name\": \"example_collection\",\n                \"alias_name\": \"production_collection\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Nested Object Filter with HasId in Qdrant\nDESCRIPTION: Shows how to combine a nested object filter with a hasId condition, as hasId is not supported within the nested filter itself.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/filtering.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filter\": {\n    \"must\": [\n      {\n        \"nested\": {\n          \"key\": \"diet\",\n          \"filter\": {\n            \"must\": [\n              {\"key\": \"food\", \"match\": {\"value\": \"meat\"}},\n              {\"key\": \"likes\", \"match\": {\"value\": true}}\n            ]\n          }\n        }\n      },\n      {\n        \"has_id\": [1, 2, 3]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Sparse Vector Search Query in Qdrant\nDESCRIPTION: This code demonstrates how to perform a search query using sparse vectors in Qdrant. It constructs a named sparse vector query and executes the search, returning similar documents based on the query vector.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/sparse-vectors.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresult = client.search(\n    collection_name=COLLECTION_NAME,\n    query_vector=models.NamedSparseVector(\n        name=\"text\",\n        vector=models.SparseVector(\n            indices=query_indices,\n            values=query_values,\n        ),\n    ),\n    with_vectors=True,\n)\n\nresult\n```\n\n----------------------------------------\n\nTITLE: Uploading Data to Qdrant\nDESCRIPTION: Uses the Qdrant client to upload vectors and associated data to the created Qdrant collection, batching requests for efficiency.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nclient.upload_collection(\n    collection_name=\"startups\",\n    vectors=vectors,\n    payload=payload,\n    ids=None,  # Vector ids will be assigned automatically\n    batch_size=256,  # How many vectors will be uploaded in a single request?\n)\n```\n\n----------------------------------------\n\nTITLE: Dense Vector Search Implementation\nDESCRIPTION: Configures and performs dense vector search using Qdrant vector store.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langchain.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_qdrant import RetrievalMode\n\nqdrant = QdrantVectorStore.from_documents(\n    docs,\n    embedding=embeddings,\n    location=\":memory:\",\n    collection_name=\"my_documents\",\n    retrieval_mode=RetrievalMode.DENSE,\n)\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\nfound_docs = qdrant.similarity_search(query)\n```\n\n----------------------------------------\n\nTITLE: Creating Retriever Tools\nDESCRIPTION: These Python snippets demonstrate how to create retriever tools using a `create_retriever_tool` function (not defined in the provided context). It showcases creating tools for both Hugging Face documentation and Transformers documentation, each associated with a specific collection name and a description.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nhf_retriever_tool = create_retriever_tool(\n    hf_retriever,\n    \"retriever_hugging_face_documentation\",\n    \"Search and return information about hugging face documentation, it includes the guide and Python code.\",\n)\n\ntransformer_retriever_tool = create_retriever_tool(\n    transformer_retriever,\n    \"retriever_transformer\",\n    \"Search and return information specifically about transformers library\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a collection to insert documents\nDESCRIPTION: This snippet creates a Qdrant collection named `example_collection` with a vector configuration that specifies the vector size (1536) and distance metric (cosine).  It then upserts the previously created points into the collection, indexing the documents for search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/openai.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"from qdrant_client.models import VectorParams, Distance\n\ncollection_name = \\\"example_collection\\\"\n\nclient.create_collection(\n    collection_name,\n    vectors_config=VectorParams(\n        size=1536,\n        distance=Distance.COSINE,\n    ),\n)\nclient.upsert(collection_name, points)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Ingestion and Retrieval with Rig and Qdrant\nDESCRIPTION: Complete example showing how to initialize clients, create embeddings, store documents in Qdrant, and perform semantic search. Uses OpenAI's text embedding model and demonstrates vector store operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/rig-rs.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::{\n    qdrant::{PointStruct, QueryPointsBuilder, UpsertPointsBuilder},\n    Payload, Qdrant,\n};\nuse rig::{\n    embeddings::EmbeddingsBuilder,\n    providers::openai::{Client, TEXT_EMBEDDING_3_SMALL},\n    vector_store::VectorStoreIndex,\n};\nuse rig_qdrant::QdrantVectorStore;\nuse serde_json::json;\n\nconst COLLECTION_NAME: &str = \"rig-collection\";\n\n// Initialize Qdrant client.\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n// Initialize OpenAI client.\nlet openai_client = Client::new(\"<OPENAI_API_KEY>\");\nlet model = openai_client.embedding_model(TEXT_EMBEDDING_3_SMALL);\n\nlet documents = EmbeddingsBuilder::new(model.clone())\n    .simple_document(\"0981d983-a5f8-49eb-89ea-f7d3b2196d2e\", \"Definition of a *flurbo*: A flurbo is a green alien that lives on cold planets\")\n    .simple_document(\"62a36d43-80b6-4fd6-990c-f75bb02287d1\", \"Definition of a *glarb-glarb*: A glarb-glarb is a ancient tool used by the ancestors of the inhabitants of planet Jiro to farm the land.\")\n    .simple_document(\"f9e17d59-32e5-440c-be02-b2759a654824\", \"Definition of a *linglingdong*: A term used by inhabitants of the far side of the moon to describe humans.\")\n    .build()\n    .await?;\n\nlet points: Vec<PointStruct> = documents\n    .into_iter()\n    .map(|d| {\n        let vec: Vec<f32> = d.embeddings[0].vec.iter().map(|&x| x as f32).collect();\n        PointStruct::new(\n            d.id,\n            vec,\n            Payload::try_from(json!({\n                \"document\": d.document,\n            }))\n            .unwrap(),\n        )\n    })\n    .collect();\n\nclient\n    .upsert_points(UpsertPointsBuilder::new(COLLECTION_NAME, points))\n    .await?;\n\nlet query_params = QueryPointsBuilder::new(COLLECTION_NAME).with_payload(true);\nlet vector_store = QdrantVectorStore::new(client, model, query_params.build());\n\nlet results = vector_store\n    .top_n::<serde_json::Value>(\"Define a glarb-glarb?\", 1)\n    .await?;\n\nprintln!(\"Results: {:?}\", results);\n```\n\n----------------------------------------\n\nTITLE: Implementing Question-Answering System\nDESCRIPTION: Creates a retrieval-based QA system using custom prompt template and configured components.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-contract-management-stackit-aleph-alpha.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains.retrieval_qa.base import RetrievalQA\n\nprompt_template = \"\"\"\nQuestion: {question}\nAnswer the question using the Source. If there's no answer, say \"NO ANSWER IN TEXT\".\n\nSource: {context}\n\n### Response:\n\"\"\"\nprompt = PromptTemplate(\n    template=prompt_template, input_variables=[\"context\", \"question\"]\n)\n\nretrieval_qa = RetrievalQA.from_chain_type(\n    llm=llm,\n    chain_type=\"stuff\",\n    retriever=qdrant_retriever,\n    return_source_documents=True,\n    chain_type_kwargs={\"prompt\": prompt},\n)\n\nresponse = retrieval_qa.invoke({\"query\": \"What are the rules of performing the audit?\"})\nprint(response[\"result\"])\n```\n\n----------------------------------------\n\nTITLE: Searching for Video Chunks Using Text Queries\nDESCRIPTION: Code to perform semantic search for video chunks using a text query. The text is embedded using the same model as the video chunks and then used to find similar content in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/mixpeek.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nquery_text = \"a car chase scene\"\n\n# Embed the text query\nquery_embedding = mixpeek.embed.video(\n    model_id=\"vuse-generic-v1\",\n    input=query_text,\n    input_type=\"text\"\n)['embedding']\n\n# Search in Qdrant\nsearch_results = client.query_points(\n    collection_name=\"video_chunks\",\n    query=query_embedding,\n    limit=5\n).points\n\nfor result in search_results:\n    print(f\"Chunk ID: {result.id}, Score: {result.score}\")\n    print(f\"Time range: {result.payload['start_time']} - {result.payload['end_time']}\")\n```\n\n----------------------------------------\n\nTITLE: Sparse Vector Search\nDESCRIPTION: Demonstrate search functionality for sparse vectors with specific query parameters\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/search.md#2025-04-21_snippet_4\n\nLANGUAGE: rest\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n```\n\n----------------------------------------\n\nTITLE: Getting Patch Dimensions for PDF Pages in Python\nDESCRIPTION: This code snippet uses the `get_n_patches` function to calculate the number of patches (x and y) that models like ColPali and ColQwen2 will generate for a given PDF page size and patch size. This piece supports dynamic vector generation based on model configurations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/pdf-retrieval-at-scale.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nx_patches, y_patches = model_processor.get_n_patches(\n    image_size, \n    patch_size=model.patch_size\n)\n```\n\n----------------------------------------\n\nTITLE: Setting API Key via Environment Variable with Docker\nDESCRIPTION: Example of running Qdrant in Docker with API key authentication enabled via environment variable, which is an alternative to YAML configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6333:6333 \\\n    -e QDRANT__SERVICE__API_KEY=your_secret_api_key_here \\\n    qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Facet Query in Go\nDESCRIPTION: This snippet demonstrates how to import the Qdrant Go client, initialize a connection to a Qdrant server, and perform a facet query with filtering. The query retrieves facet counts for the 'size' field while filtering for items with a 'color' value of 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/facet-counts/simple-with-filter/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nres, err := client.Facet(ctx, &qdrant.FacetCounts{\n    CollectionName: \"{collection_name}\",\n    Key:            \"size\",\n        Filter: &qdrant.Filter{\n        Must: []*qdrant.Condition{\n            qdrant.NewMatch(\"color\", \"red\"),\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Full-text Index on Payload Field in Qdrant\nDESCRIPTION: Example of creating a full-text index on a payload field in Qdrant, demonstrating options for tokenizer, min/max token length, and case sensitivity.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/full-text-filter-and-index-are-already-available.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![](/blog/from_cms/1_pohx4eznqpgoxak6ppzypq.webp \"Full-text search behaviour on an indexed payload field There are more options if you create a full-text index on a field you will filter by.\")\n```\n\n----------------------------------------\n\nTITLE: Loading ColBERT Model\nDESCRIPTION: Initializes the ColBERT model for generating embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-colbert.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nembedding_model = LateInteractionTextEmbedding(\"colbert-ir/colbertv2.0\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection with On-Disk Storage\nDESCRIPTION: This snippet demonstrates how to create a Qdrant collection with vectors stored on disk using memmap. It sets up a client connection and specifies vector parameters including size, distance metric, and on-disk storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-a-vector-database.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url='http://localhost:6333')\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(\n        size=768, distance=models.Distance.COSINE, on_disk=True\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Search with Qdrant and OpenAI Embeddings\nDESCRIPTION: Complete example demonstrating how to use Ragbits with Qdrant for document ingestion and similarity search. Uses OpenAI embeddings via LiteLLM, demonstrates document creation, ingestion, and searching with configurable parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/ragbits.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom qdrant_client import AsyncQdrantClient\n\nfrom ragbits.core.embeddings.litellm import LiteLLMEmbeddings\nfrom ragbits.core.vector_stores.qdrant import QdrantVectorStore\nfrom ragbits.document_search import DocumentSearch, SearchConfig\nfrom ragbits.document_search.documents.document import DocumentMeta\n\ndocuments = [\n    DocumentMeta.create_text_document_from_literal(\n        \"RIP boiled water. You will be mist.\"\n    ),\n    DocumentMeta.create_text_document_from_literal(\n        \"Why programmers don't like to swim? Because they're scared of the floating points.\"\n    ),\n    DocumentMeta.create_text_document_from_literal(\"This one is completely unrelated.\"),\n]\n\n\nasync def main() -> None:\n    embedder = LiteLLMEmbeddings(\n        model=\"text-embedding-3-small\",\n    )\n    vector_store = QdrantVectorStore(\n        client=AsyncQdrantClient(url=\"http://localhost:6333\"),\n        collection_name=\"{collection_name}\",\n    )\n    document_search = DocumentSearch(\n        embedder=embedder,\n        vector_store=vector_store,\n    )\n\n    await document_search.ingest(documents)\n\n    all_documents = await vector_store.list()\n    print([doc.metadata[\"content\"] for doc in all_documents])\n\n    query = \"I write computer software. Tell me something.\"\n    vector_store_kwargs = {\n        \"k\": 1,\n        \"max_distance\": None,\n    }\n    results = await document_search.search(\n        query,\n        config=SearchConfig(vector_store_kwargs=vector_store_kwargs),\n    )\n\n    print(f\"Documents similar to: {query}\")\n    print([element.get_key() for element in results])\n```\n\n----------------------------------------\n\nTITLE: Connecting to Qdrant Client in Python\nDESCRIPTION: Initializes a connection to Qdrant using the QdrantClient. Requires your Qdrant Cloud URL and API key to authenticate and connect to your cluster.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-semantic-search.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nclient = QdrantClient(\n    url=\"<ADD-URL>\",\n    api_key=\"<API-KEY>\",\n)\n\nprint(client.get_collections())\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with Filter in TypeScript\nDESCRIPTION: This code performs a scroll query on a Qdrant collection, filtering for records where the country name is 'Germany'. It uses the client.scroll method with a specified collection name and a filter object.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-fields/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    should: [\n      {\n        key: \"country.name\",\n        match: { value: \"Germany\" },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Token for Qdrant Authentication in Python\nDESCRIPTION: This code snippet demonstrates how to generate a JWT token using the PyJWT library for authenticating with Qdrant. It includes defining the API key and payload, then encoding the token using the HS256 algorithm.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/data-privacy.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport jwt\nimport datetime\n\n# Define your API key and other payload data\napi_key = \"your_api_key\"\npayload = { ...\n}\n\ntoken = jwt.encode(payload, api_key, algorithm=\"HS256\")\nprint(token)\n```\n\n----------------------------------------\n\nTITLE: Upserting Data with Multitenancy in Qdrant (Python)\nDESCRIPTION: This code snippet shows how to upsert data into a Qdrant collection using multitenancy. It tags the vector with a tenant-specific group_id and specifies a shard key selector for data isolation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-a-vector-database.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n    collection_name=\"tenant_data\",\n    points=[models.PointStruct(\n        id=2, \n        payload={\"group_id\": \"tenant_1\"}, \n        vector=[0.1, 0.9, 0.1]\n    )],\n    shard_key_selector=\"canada\"\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Client in TypeScript\nDESCRIPTION: This snippet initializes a Qdrant client in TypeScript and performs a query on a specified collection. The QdrantClient is imported from the '@qdrant/js-client-rest' package, and the client is configured to connect to a local instance on port 6333. A query is executed on a given collection with an array of vectors. This example demonstrates how to set up the client and run a query operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/multivector/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  \"query\": [\n    [-0.013, 0.020, -0.007, -0.111],\n    [-0.030, -0.055, 0.001, 0.072],\n    [-0.041, 0.014, -0.032, -0.062]\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Counting Points with Filter in Qdrant API\nDESCRIPTION: This snippet shows how to use the Count API to get the number of points matching specific filter conditions without performing a full search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/points.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 3811\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vanna with Qdrant and OpenAI\nDESCRIPTION: Setup code for initializing a Vanna agent using Qdrant as vector store and OpenAI as the LLM provider. Requires Qdrant client configuration and OpenAI API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/vanna-ai.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vanna.openai import OpenAI_Chat\nfrom vanna.qdrant import Qdrant_VectorStore\nfrom qdrant_client import QdrantClient\n\nclass MyVanna(Qdrant, OpenAI_Chat):\n    def __init__(self, config=None):\n        Qdrant_VectorStore.__init__(self, config=config)\n        OpenAI_Chat.__init__(self, config=config)\n\nvn = MyVanna(config={\n    'client': QdrantClient(...),\n    'api_key': sk-...,\n    'model': gpt-4-...,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying with Qdrant Java Client\nDESCRIPTION: This snippet demonstrates how to create a Qdrant client connection to a local server and perform a nearest vector search query. It shows how to set up the client, construct a query with specific vector coordinates (0.2, 0.1, 0.9, 0.7), and configure the query to return both payload and vector data for the top 3 matching results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-payload-and-vectors/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.WithVectorsSelectorFactory;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.WithPayloadSelectorFactory.enable;\n\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setWithPayload(enable(true))\n                .setWithVectors(WithVectorsSelectorFactory.enable(true))\n                .setLimit(3)\n                .build())\n        .get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Qdrant Query Tool for SmolAgents\nDESCRIPTION: Custom implementation of a SmolAgents Tool class that integrates with Qdrant for semantic search capabilities. The tool uses FastEmbed for local text vectorization and queries a movie database stored in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/smolagents.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastembed import TextEmbedding\nfrom qdrant_client import QdrantClient\nfrom smolagents import Tool\n\n\nclass QdrantQueryTool(Tool):\n    name = \"qdrant_query\"\n    description = \"Uses semantic search to retrieve movies from a Qdrant collection.\"\n    inputs = {\n        \"query\": {\n            \"type\": \"string\",\n            \"description\": \"The query to perform. This should be semantically close to your target documents.\",\n        }\n    }\n    output_type = \"string\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.collection_name = \"smolagents\"\n        self.client = QdrantClient()\n\n        if not self.client.collection_exists(self.collection_name):\n            self.client.recover_snapshot(\n                collection_name=self.collection_name,\n                location=\"https://snapshots.qdrant.io/imdb-1000-jina.snapshot\",\n            )\n        self.embedder = TextEmbedding(model_name=\"jinaai/jina-embeddings-v2-base-en\")\n\n    def forward(self, query: str) -> str:\n        points = self.client.query_points(\n            self.collection_name, query=next(self.embedder.query_embed(query)), limit=5\n        ).points\n        docs = \"Retrieved documents:\\n\" + \"\".join(\n            [\n                f\"== Document {str(i)} ==\\n\"\n                + f\"MOVIE TITLE: {point.payload['movie_name']}\\n\"\n                + f\"MOVIE SUMMARY: {point.payload['description']}\\n\"\n                for i, point in enumerate(points)\n            ]\n        )\n\n        return docs\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG Module with Qdrant\nDESCRIPTION: Example implementation of a Retrieval-Augmented Generation (RAG) module using Qdrant as the retriever in DSPy.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/dspy.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass RAG(dspy.Module):\n    def __init__(self, num_passages=3):\n        super().__init__()\n\n        self.retrieve = dspy.Retrieve(k=num_passages)\n        ...\n\n    def forward(self, question):\n        context = self.retrieve(question).passages\n        ...\n```\n\n----------------------------------------\n\nTITLE: Parsing PDF Documents with LlamaParse\nDESCRIPTION: Uses LlamaParse to extract textual content from PDF documents, which will serve as the knowledge base for the RAG system.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/hybrid-search-llamaindex-jinaai.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport nest_asyncio\nnest_asyncio.apply()\nfrom llama_parse import LlamaParse\n\nllamaparse_api_key = os.getenv(\"LLAMA_CLOUD_API_KEY\")\n\nllama_parse_documents = LlamaParse(api_key=llamaparse_api_key, result_type=\"markdown\").load_data([\n    \"data/DJ68-00682F_0.0.pdf\", \n    \"data/F500E_WF80F5E_03445F_EN.pdf\", \n    \"data/O_ME4000R_ME19R7041FS_AA_EN.pdf\"\n])\n```\n\n----------------------------------------\n\nTITLE: Upload Data to Qdrant Collection\nDESCRIPTION: Uploads the book data to the Qdrant collection. It iterates through the `documents` list, encodes the description of each book into a vector using the `encoder`, and creates a `PointStruct` object.  Each point has an `id`, a `vector`, and a `payload` containing the book's metadata.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/search-beginners.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"client.upload_points(\\n    collection_name=\\\"my_books\\\",\\n    points=[\\n        models.PointStruct(\\n            id=idx, vector=encoder.encode(doc[\\\"description\\\"]).tolist(), payload=doc\\n        )\\n        for idx, doc in enumerate(documents)\\n    ],\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Multi-Vector Representations in Python\nDESCRIPTION: This snippet shows how to create a Qdrant collection with multi-vector representations, including dense vectors, late interaction models, and sparse vectors. It demonstrates the default configuration where HNSW graphs are created for all vector types.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/hybrid-search.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(...)\nclient.create_collection(\n    collection_name=\"my-collection\",\n    vectors_config={\n        \"dense\": models.VectorParams(...),\n        \"late-interaction\": models.VectorParams(\n            size=128,\n            distance=models.Distance.COSINE,\n            multivector_config=models.MultiVectorConfig(\n                comparator=models.MultiVectorComparator.MAX_SIM\n            ),\n        )\n    },\n    sparse_vectors_config={\n        \"sparse\": models.SparseVectorParams(...)\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Meeting Search Tool in Python\nDESCRIPTION: This snippet implements a 'SearchMeetingsTool' class that converts natural language queries into vector representations and performs a search on a meeting database using embeddings from OpenAI. Dependencies include the 'openai_client' for embeddings and 'qdrant_client' for searching.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass SearchMeetingsTool(BaseTool):\n    def _run(self, query: str) -> List[Dict]:\n        response = openai_client.embeddings.create(\n            model=\"text-embedding-ada-002\",\n            input=query\n        )\n        query_vector = response.data[0].embedding\n        \n        return self.qdrant_client.search(\n            collection_name='zoom_recordings',\n            query_vector=query_vector,\n            limit=10\n        )\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Points with Quantization Parameters in Qdrant\nDESCRIPTION: This HTTP request queries vector points in a named collection with specific quantization settings. It includes a vector query, quantization parameters for controlling search behavior, and limits the results to 10 points.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-quantization-oversampling/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"params\": {\n        \"quantization\": {\n            \"ignore\": false,\n            \"rescore\": true,\n            \"oversampling\": 2.0\n        }\n    },\n    \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: LLM Prompt Structure for Question Answering with Context\nDESCRIPTION: Example of a prompt structure used to send to the language model for question answering. The prompt includes contextual information followed by the question, instructing the model to use the provided context to answer the question.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/langchain-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUse the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\nIt's as certain as 2 + 2 = 4\n...\n\nQuestion: How much is 2 + 2?\nHelpful Answer:\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Quantization in Qdrant using HTTP API\nDESCRIPTION: This HTTP request demonstrates how to set up Binary Quantization when creating a collection in Qdrant. It configures binary quantization for 1536-dimensional vectors (typical for OpenAI embeddings) using Cosine distance, with vectors always stored in RAM.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-quantization.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 1536,\n      \"distance\": \"Cosine\"\n    },\n    \"quantization_config\": {\n        \"binary\": {\n            \"always_ram\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Cluster with Terraform\nDESCRIPTION: This Terraform configuration example demonstrates how to create a new Qdrant cluster on Google Cloud Platform. Dependencies include a Terraform installation and an API key for Qdrant cloud. The configuration specifies required provider versions and details for the Qdrant cloud provider, such as the API key and account ID. A resource block describes the new cluster, specifying its name, cloud provider, region, and configuration including the number of nodes and package ID. The output section provides the cluster URL once it is created. The snippet requires Terraform v1.7.0 or higher and the Qdrant Terraform provider v1.1.0 or higher.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/cloud-tools/terraform.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_version = \">= 1.7.0\"\n  required_providers {\n    qdrant-cloud = {\n      source  = \"qdrant/qdrant-cloud\"\n      version = \">=1.1.0\"\n    }\n  }\n}\n\nprovider \"qdrant-cloud\" {\n  api_key    = \"<QDRANT_CLOUD_API_KEY>\"\n  account_id = \"QDRANT_ACCOUNT_ID>\" // Account ID from cloud.qdrant.io/accounts/<QDRANT_ACCOUNT_ID>/ (can be overriden on resource level)\n}\n\nresource \"qdrant-cloud_accounts_cluster\" \"example\" {\n  name           = \"tf-example-cluster\"\n  cloud_provider = \"gcp\"\n  cloud_region   = \"us-east4\"\n  configuration {\n    number_of_nodes = 1\n    node_configuration {\n       package_id = \"7c939d96-d671-4051-aa16-3b8b7130fa42\"\n    }\n  }\n}\n\noutput \"url\" {\n  value = qdrant-cloud_accounts_cluster.example.url\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Qdrant Collection and Inserting Embeddings in Rust\nDESCRIPTION: This Rust function sets up a Qdrant collection and inserts embedded data points. It creates a collection if it doesn't exist, configures vector parameters, and upserts points with embeddings and payloads. The function requires a Qdrant client, embedding client, API keys, and collection details.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/serverless.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse anyhow::Result;\nuse qdrant_client::prelude::*;\nuse qdrant_client::qdrant::{VectorsConfig, VectorParams};\nuse qdrant_client::qdrant::vectors_config::Config;\nuse std::collections::HashMap;\n\nfn setup<'i>(\n    embed_client: &reqwest::Client,\n    embed_api_key: &str,\n    qdrant_url: &str,\n    api_key: Option<&str>,\n    collection_name: &str,\n    data: impl Iterator<Item = (&'i str, HashMap<String, Value>)>,\n) -> Result<()> {\n    let mut config = QdrantClientConfig::from_url(qdrant_url);\n    config.api_key = api_key;\n    let client = QdrantClient::new(Some(config))?;\n\n    // create the collections\n    if !client.has_collection(collection_name).await? {\n        client\n            .create_collection(&CreateCollection {\n                collection_name: collection_name.into(),\n                vectors_config: Some(VectorsConfig {\n                    config: Some(Config::Params(VectorParams {\n                        size: 1024, // output dimensions from above\n                        distance: Distance::Cosine as i32,\n                        ..Default::default()\n                    })),\n                }),\n                ..Default::default()\n            })\n            .await?;\n    }\n    let mut id_counter = 0_u64;\n    let points = data.map(|(text, payload)| {\n        let id = std::mem::replace(&mut id_counter, *id_counter + 1);\n        let vectors = Some(embed(embed_client, text, embed_api_key).unwrap());\n        PointStruct { id, vectors, payload }\n    }).collect();\n    client.upsert_points(collection_name, points, None).await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Query with Filters in Qdrant - HTTP\nDESCRIPTION: The code snippet performs an HTTP POST request to query a Qdrant collection for vector data. It includes filtering criteria that specify that only data matching 'group_id' with a value of 'user_1' should be considered. The 'query' field contains the vector to be queried, while 'limit' specifies the maximum number of results to return. The operation assumes an active Qdrant server with the specified collection name is running.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-filter-by-group-id/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.1, 0.1, 0.9],\n    \"filter\": {\n        \"must\": [\n            {\n                \"key\": \"group_id\",\n                \"match\": {\n                    \"value\": \"user_1\"\n                }\n            }\n        ]\n    },\n    \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Go\nDESCRIPTION: This snippet demonstrates how to create a Qdrant client and set up a new collection with dense and sparse vector configurations. It specifies the host, port, collection name, vector size, distance metric, and datatype for both dense and sparse vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-float16-sparse-and-dense/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     128,\n\t\tDistance: qdrant.Distance_Cosine,\n\t\tDatatype: qdrant.Datatype_Float16.Enum(),\n\t}),\n\tSparseVectorsConfig: qdrant.NewSparseVectorsConfig(\n\t\tmap[string]*qdrant.SparseVectorParams{\n\t\t\t\"text\": {\n\t\t\t\tIndex: &qdrant.SparseIndexConfig{\n\t\t\t\t\tDatatype: qdrant.Datatype_Float16.Enum(),\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection with Multiple Vector Types in TypeScript\nDESCRIPTION: This code initializes a Qdrant client and creates a collection with multiple vector types. It defines dense vectors for image and text data, as well as a sparse vector for text. The collection is configured with specific vector sizes and distance metrics.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/named-vectors/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n    vectors: {\n        image: { size: 4, distance: \"Dot\" },\n        text: { size: 5, distance: \"Cosine\" },\n    },\n    sparse_vectors: {\n        text_sparse: {}\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Search Filter for Recommendations\nDESCRIPTION: Defines a filter condition to match documents with 'city' equal to 'London'. Used to narrow down search results based on specific metadata attributes.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-batch/go.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfilter := qdrant.Filter{\n    Must: []*qdrant.Condition{\n        qdrant.NewMatch(\"city\", \"London\"),\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Querying using HTTP\nDESCRIPTION: This HTTP snippet demonstrates how to batch query a collection for recommendations, including query parameters for positive and negative examples, filtering by city, and result limits. It is structured to make POST requests to a server endpoint for processing recommendation queries. Ensure the server can handle batch processing and the necessary query fields are correctly defined.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-batch/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/query/batch\n{\n  \"searches\": [\n    {\n      \"query\": {\n        \"recommend\": {\n          \"positive\": [100, 231],\n          \"negative\": [718]\n        }\n      },\n      \"filter\": {\n        \"must\": [\n          {\n            \"key\": \"city\",\n            \"match\": {\n              \"value\": \"London\"\n            }\n          }\n        ]\n      },\n      \"limit\": 10\n    },\n    {\n      \"query\": {\n        \"recommend\": {\n          \"positive\": [200, 67],\n          \"negative\": [300]\n        }\n      },\n      \"filter\": {\n        \"must\": [\n          {\n            \"key\": \"city\",\n            \"match\": {\n              \"value\": \"London\"\n            }\n          }\n        ]\n      },\n      \"limit\": 10\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with HTTP PUT\nDESCRIPTION: This HTTP PUT request creates a new collection in Qdrant vector database. It specifies the vector size as 300 and uses Cosine distance as the similarity metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/simple/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 300,\n      \"distance\": \"Cosine\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Documents from S3 with LangChain\nDESCRIPTION: Code snippet that demonstrates how to use LangChain's S3DirectoryLoader to retrieve documents from an AWS S3 bucket. It initializes the loader with bucket name, folder path, and AWS credentials.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-ingestion-beginners.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfrom langchain_community.document_loaders import S3DirectoryLoader\n\n# Initialize the S3 document loader\nloader = S3DirectoryLoader(\n   \"product-dataset\",  # S3 bucket name\n   \"p_1\", #S3 Folder name containing the data for the first product\n   aws_access_key_id=aws_access_key_id,  # AWS Access Key\n   aws_secret_access_key=aws_secret_access_key  # AWS Secret Access Key\n)\n\n# Load documents from the specified S3 bucket\ndocs = loader.load()\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Database in C#\nDESCRIPTION: Initializes a Qdrant client connection to localhost on port 6334 and executes a query against a specified collection using a GUID. The code demonstrates basic client setup and asynchronous querying functionality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/by-existing-id/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: Guid.Parse(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Memmap Vector Storage in Qdrant (Python)\nDESCRIPTION: Shows how to enable memmap vector storage when creating a collection in Qdrant. This storage method balances performance and memory usage, allowing work with datasets larger than physical RAM.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-resource-optimization.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n   collection_name=\"{collection_name}\",\n   vectors_config=models.VectorParams(\n      …\n      on_disk=True\n   )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection and Inserting Documents in Python\nDESCRIPTION: Creates a new Qdrant collection with the appropriate vector configuration and inserts the embedded documents. The collection uses cosine distance and vectors of size 1536.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/voyage.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import VectorParams, Distance\n\nCOLLECTION_NAME = \"example_collection\"\n\nqclient.create_collection(\n    COLLECTION_NAME,\n    vectors_config=VectorParams(\n        size=1536,\n        distance=Distance.COSINE,\n    ),\n)\nqclient.upsert(COLLECTION_NAME, points)\n```\n\n----------------------------------------\n\nTITLE: Processing Meeting Data with Python\nDESCRIPTION: This command executes the `data_loader.py` script, which processes meeting data and stores it in the Qdrant vector database. After running this script, a collection named `zoom_recordings` should be present in your Qdrant Cloud account.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython vector/data_loader.py\n```\n\n----------------------------------------\n\nTITLE: Matching Conditions with GRPC Client in C#\nDESCRIPTION: This snippet sets up a condition to match specific attributes using the Qdrant.Client.Grpc.Conditions module. It demonstrates functionality in C# where the `Match` method is used to filter entities based on provided attributes, in this case, 'color' with values 'black' and 'yellow'. This requires the Qdrant Client library and is designed for use in environments that interact with GRPC services.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-except/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing static Qdrant.Client.Grpc.Conditions;\n\nMatch(\"color\", [\"black\", \"yellow\"]);\n```\n\n----------------------------------------\n\nTITLE: Create Qdrant Collection\nDESCRIPTION: Creates a collection in Qdrant to store the book embeddings and metadata. `collection_name` specifies the name of the collection. `vectors_config` defines the vector parameters: `size` is the dimensionality of the embeddings (obtained from the encoder), and `distance` is the distance metric used for similarity search (cosine distance).\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/search-beginners.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"client.create_collection(\\n    collection_name=\\\"my_books\\\",\\n    vectors_config=models.VectorParams(\\n        size=encoder.get_sentence_embedding_dimension(),  # Vector size is defined by used model\\n        distance=models.Distance.COSINE,\\n    ),\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings in TypeScript\nDESCRIPTION: This TypeScript snippet defines an asynchronous function to obtain document embeddings via the PremAI client, returning the response directly.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getEmbeddings(projectID, embeddingModel, documents) {\n    const response = await premaiClient.embeddings.create({\n        project_id: projectID,\n        model: embeddingModel,\n        input: documents\n    });\n    return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection with Multiple Vectors\nDESCRIPTION: Creates a Qdrant client instance and initializes a collection with two vector configurations - one for images and one for text. The image vector has size 4 with Dot product distance, while the text vector has size 8 with Cosine distance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/multiple-vectors/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    image: { size: 4, distance: \"Dot\" },\n    text: { size: 8, distance: \"Cosine\" },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Snapshots via HTTP GET Request\nDESCRIPTION: HTTP GET endpoint for retrieving snapshots from the Qdrant database. This endpoint returns a list of available snapshots that can be used for backup and restore operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/list-full-snapshots/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /snapshots\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Upserting Sparse Vectors in Go\nDESCRIPTION: This code snippet demonstrates how to create a Qdrant client connection and upsert points with sparse vectors into a specified collection. It uses the Qdrant Go client library to perform these operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/sparse-vectors/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Upsert(context.Background(), &qdrant.UpsertPoints{\n\tCollectionName: \"{collection_name}\",\n\tPoints: []*qdrant.PointStruct{\n\t\t{\n\t\t\tId: qdrant.NewIDNum(1),\n\t\t\tVectors: qdrant.NewVectorsMap(map[string]*qdrant.Vector{\n\t\t\t\t\"text\": qdrant.NewVectorSparse(\n\t\t\t\t\t[]uint32{6, 7},\n\t\t\t\t\t[]float32{1.0, 2.0}),\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tId: qdrant.NewIDNum(2),\n\t\t\tVectors: qdrant.NewVectorsMap(map[string]*qdrant.Vector{\n\t\t\t\t\"text\": qdrant.NewVectorSparse(\n\t\t\t\t\t[]uint32{1, 2, 3, 4, 5},\n\t\t\t\t\t[]float32{0.1, 0.2, 0.3, 0.4, 0.5}),\n\t\t\t}),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Qdrant Customer Review\nDESCRIPTION: YAML frontmatter configuration for a customer testimonial page, including the review text, reviewer details, and associated images for avatar and company logo.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/customers-testimonial-0.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreview: \"Qdrant powers our demanding recommendation and RAG applications. We chose it for its ease of deployment and high performance at scale, and have been consistently impressed with its results. The platform's continuous feature enhancements and overall performance gains, coupled with their responsiveness, make Qdrant a reliable solution for our AI infrastructure.\"\nnames: Srubin Sethu Madhavan\npositions: Technical Lead II at Hubspot\navatar:\n  src: /img/customers/srubin-sethu-madhavan.svg\n  alt: Srubin Sethu Madhavan Avatar\nlogo:\n  src: /img/brands/hubspot.svg\n  alt: Logo\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Querying Vectors in Qdrant Collection with Named Vector\nDESCRIPTION: This HTTP request example shows how to query vectors in a Qdrant collection using a specific named vector space called 'image'. The request specifies a 4-dimensional vector to search against, and limits results to the top 3 most similar points.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/named-vector/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"using\": \"image\",\n    \"limit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Collection with Strict Mode in Rust\nDESCRIPTION: Rust code for updating an existing Qdrant collection to enable strict mode with unindexed filtering retrieve restriction using the Qdrant Rust client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{StrictModeConfigBuilder, UpdateCollectionBuilder};\n\nclient\n    .update_collection(\n        UpdateCollectionBuilder::new(\"{collection_name}\").strict_mode_config(\n            StrictModeConfigBuilder::default().enabled(true).unindexed_filtering_retrieve(true),\n        ),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Search with Named Vector\nDESCRIPTION: Perform search on a specific named vector within a multi-vector collection\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/search.md#2025-04-21_snippet_3\n\nLANGUAGE: rest\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n```\n\n----------------------------------------\n\nTITLE: Creating a Full-text Index in Qdrant\nDESCRIPTION: This code snippet outlines how to create a full-text index in Qdrant for string payloads. It includes details on tokenization parameters, which are crucial for splitting and indexing words in the payload field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/indexing.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/create-payload-index/simple-full-text/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Installing Langchain-Qdrant Package\nDESCRIPTION: Command to install the Langchain-Qdrant integration package using pip package manager.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langchain.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-qdrant\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying with Qdrant Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Qdrant client, initialize a connection to a local Qdrant instance, and perform a vector similarity search query. The query specifies a 4-dimensional vector, uses the 'image' search field, and limits results to 3 items.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/named-vector/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  query: [0.2, 0.1, 0.9, 0.7],\n  using: \"image\",\n  limit: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding Documents with Voyage AI in TypeScript\nDESCRIPTION: Sends a POST request to the Voyage AI API to embed the sample texts using the 'voyage-large-2' model. This model generates sentence embeddings of size 1536.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/voyage.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet body = {\n    \"input\": texts,\n    \"model\": \"voyage-large-2\",\n    \"input_type\": \"document\",\n}\n\nlet response = await fetch(VOYAGEAI_BASE_URL, {\n    method: \"POST\",\n    body: JSON.stringify(body),\n    headers\n});\n\nlet response_body = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Qdrant Client with FastEmbed\nDESCRIPTION: This code snippet installs the Qdrant client with FastEmbed support, allowing for vector embeddings to be utilized in combination with Qdrant's vector storage capabilities. Dependencies include the Python package 'qdrant-client' with FastEmbed. The main parameters are the Qdrant_URL and Qdrant_API_KEY, which are required to connect to the Qdrant service.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/rag-deepseek.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install \"qdrant-client[fastembed]\"\n```\n\nLANGUAGE: python\nCODE:\n```\nQDRANT_URL = \"https://xyz-example.eu-central.aws.cloud.qdrant.io:6333\"\nQDRANT_API_KEY = \"<your-api-key>\"\n```\n\n----------------------------------------\n\nTITLE: Ingesting Graph Data into Neo4j in Python\nDESCRIPTION: This function ingests extracted graph data (nodes and relationships) into Neo4j. It creates nodes as entities and establishes relationships between them in the Neo4j graph database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/graphrag-qdrant-neo4j.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef ingest_to_neo4j(nodes, relationships):\n    \"\"\"\n    Ingest nodes and relationships into Neo4j.\n    \"\"\"\n\n    with neo4j_driver.session() as session:\n        # Create nodes in Neo4j\n        for name, node_id in nodes.items():\n            session.run(\n                \"CREATE (n:Entity {id: $id, name: $name})\",\n                id=node_id,\n                name=name\n            )\n\n        # Create relationships in Neo4j\n        for relationship in relationships:\n            session.run(\n                \"MATCH (a:Entity {id: $source_id}), (b:Entity {id: $target_id}) \"\n                \"CREATE (a)-[:RELATIONSHIP {type: $type}]->(b)\",\n                source_id=relationship[\"source\"],\n                target_id=relationship[\"target\"],\n                type=relationship[\"type\"]\n            )\n\n    return nodes\n```\n\n----------------------------------------\n\nTITLE: Setting up Qdrant and Voyage AI Clients in Python\nDESCRIPTION: Initializes Qdrant and Voyage AI clients and prepares sample texts for embedding. Requires Qdrant client and Voyage AI libraries, as well as a Voyage AI API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/voyage.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\nimport voyageai\n\nVOYAGE_API_KEY = \"<YOUR_VOYAGEAI_API_KEY>\"\n\nqclient = QdrantClient(\":memory:\")\nvclient = voyageai.Client(api_key=VOYAGE_API_KEY)\n\ntexts = [\n    \"Qdrant is the best vector search engine!\",\n    \"Loved by Enterprises and everyone building for low latency, high performance, and scale.\",\n]\n```\n\n----------------------------------------\n\nTITLE: Performing Exact Facet Query with Qdrant Python Client\nDESCRIPTION: This code demonstrates how to execute a facet query on the 'size' field with exact matching enabled. The facet operation retrieves count distributions of field values in the specified collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/facet-counts/exact/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.facet(\n    collection_name=\"{collection_name}\",\n    key=\"size\",\n    exact=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Connection Properties\nDESCRIPTION: Spring Boot application properties configuration for setting up Qdrant connection details including host, port, API key, and collection name.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/spring-ai.md#2025-04-21_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nspring.ai.vectorstore.qdrant.host=<host of your qdrant instance>\nspring.ai.vectorstore.qdrant.port=<the GRPC port of your qdrant instance>\nspring.ai.vectorstore.qdrant.api-key=<your api key>\nspring.ai.vectorstore.qdrant.collection-name=<The name of the collection to use in Qdrant>\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database with Rust Client\nDESCRIPTION: This snippet demonstrates how to connect to a Qdrant server, initialize a client, and perform a nearest neighbors vector search query. It uses the QueryPointsBuilder to construct a query that finds vectors similar to the provided vector [0.2, 0.1, 0.9, 0.7].\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/simple-dense/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{Condition, Filter, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(Query::new_nearest(vec![0.2, 0.1, 0.9, 0.7]))\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Complex Query Filter Generation\nDESCRIPTION: Demonstrates handling of complex queries with multiple conditions including geo-location, price ranges, and material exclusions. Shows how the LLM can generate sophisticated filter combinations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/automate-filtering-with-llms.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nqdrant_filter = anthropic_client.messages.create(\n    model=\"claude-3-5-sonnet-latest\",\n    response_model=models.Filter,\n    max_tokens=1024,\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": SYSTEM_PROMPT.strip(),\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": \"Okay, I will follow all the rules.\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": (\n                \"<query>\"\n                \"white T-shirt available no more than 30 miles from London, \"\n                \"but not in the city itself, below $15.70, not made from polyester\"\n                \"</query>\\n\"\n                \"<indexes>\\n\"\n                f\"{formatted_indexes}\\n\"\n                \"</indexes>\"\n            )\n        },\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Establishing Connection to Qdrant using Python SDK\nDESCRIPTION: This code creates a QdrantClient instance to connect to the main Qdrant cluster URL using the provided API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/create-snapshot.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(QDRANT_MAIN_URL, api_key=QDRANT_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Patching Collection Configurations in HTTP\nDESCRIPTION: This HTTP snippet shows the use of a PATCH request to modify vector configurations in a collection. It requires a specified collection name and includes a body that sets vectors to be stored on disk with the 'on_disk' parameter set to true. No specific vector name is provided, which may imply global settings or a placeholder for specific identifiers.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/vectors-to-disk-default/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPATCH /collections/{collection_name}\n{\n    \"vectors\": {\n        \"\": {\n            \"on_disk\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Embeddings to Qdrant Points\nDESCRIPTION: Transform embedding vectors and text into Qdrant point structures for collection insertion\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/snowflake.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import PointStruct\n\npoints = [\n    PointStruct(\n        id=idx,\n        vector=embedding,\n        payload={\"text\": text},\n    )\n    for idx, (embedding, text) in enumerate(zip(embeddings, texts))\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet points = embeddings.tolist().map((embedding, i) => {\n    return {\n        id: i,\n        vector: embedding,\n        payload: {\n            text: texts[i]\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Points with Payload Exclusion using Qdrant Python Client\nDESCRIPTION: Initializes a Qdrant client and performs a vector similarity search while excluding specific payload fields. The query searches for vectors similar to [0.2, 0.1, 0.9, 0.7] and excludes the 'city' field from the returned payload.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/exclude-fields/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    with_payload=models.PayloadSelectorExclude(\n        exclude=[\"city\"],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Index with Qdrant Client Python\nDESCRIPTION: This code snippet establishes a connection to a Qdrant instance and creates an index on a specified field in a given collection. The dependencies include the 'qdrant_client' library and a running Qdrant instance accessible via a provided URL. Key parameters are 'collection_name' for specifying the collection and 'name_of_the_field_to_index' for the field to be indexed. The code sets up an integer index, and the expected functionality is to enhance querying performance within the field constraints.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/integer-with-params/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"name_of_the_field_to_index\",\n    field_schema=models.IntegerIndexParams(\n        type=models.IntegerIndexType.INTEGER,\n        lookup=False,\n        range=True,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Search Effectiveness with Ranx in Python\nDESCRIPTION: Uses the ranx library to calculate the NDCG@5 metric for evaluating search quality. Demonstrates creating Qrels (ground truth) and Run (search results) objects and evaluating them.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/hybrid-search.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ranx import Qrels, Run, evaluate\n\n# Qrels, or query relevance judgments, keep the ground truth data\nqrels_dict = { \"q_1\": { \"d_12\": 5, \"d_25\": 3 },\n               \"q_2\": { \"d_11\": 6, \"d_22\": 1 } }\n\n# Runs are built from the search results\nrun_dict = { \"q_1\": { \"d_12\": 0.9, \"d_23\": 0.8, \"d_25\": 0.7,\n                      \"d_36\": 0.6, \"d_32\": 0.5, \"d_35\": 0.4  },\n             \"q_2\": { \"d_12\": 0.9, \"d_11\": 0.8, \"d_25\": 0.7,\n                      \"d_36\": 0.6, \"d_22\": 0.5, \"d_35\": 0.4  } }\n\n# We need to create both objects, and then we can evaluate the run against the qrels\nqrels = Qrels(qrels_dict)\nrun = Run(run_dict)\n\n# Calculating the NDCG@5 metric is as simple as that\nevaluate(qrels, run, \"ndcg@5\")\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration\nDESCRIPTION: HTTP PUT request to create a new collection with specified vector dimensions and distance metric. Includes binary quantization configuration for RAM optimization. The collection is configured with 1536-dimensional vectors using Cosine similarity.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-binary-quantization/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 1536,\n      \"distance\": \"Cosine\"\n    },\n    \"quantization_config\": {\n        \"binary\": {\n            \"always_ram\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Scalar Quantization with RAM Storage\nDESCRIPTION: Configuration for high-speed search with low memory usage using in-memory quantization and on-disk vector storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/optimize.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"quantization_config\": {\n    \"scalar\": {\n        \"type\": \"int8\",\n        \"always_ram\": true\n    }\n},\n\"on_disk\": true\n```\n\n----------------------------------------\n\nTITLE: Implementing Two-Stage Vector Search Query in Python with Qdrant\nDESCRIPTION: Python code demonstrating a two-stage vector search query implementation using Qdrant. Uses prefetch for in-RAM candidate selection and rescore for full vector comparison from disk. Includes oversampling configuration for balancing speed and accuracy.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/large-scale-search.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlimit = 50\nrescore_limit = 1000 # oversampling factor is 20\n\nquery = vectors[query_id] # One of existing vectors\n\nresponse = client.query_points(\n        collection_name=QDRANT_COLLECTION_NAME,\n        query=query,\n        limit=limit,\n        # Go to disk \n        search_params=models.SearchParams(\n            quantization=models.QuantizationSearchParams(\n                rescore=True,\n            ),\n        ),\n        # Prefetch is performed using only in-RAM data,\n        # so querying even large amount of data is fast\n        prefetch=models.Prefetch(\n            query=query,\n            limit=rescore_limit,\n            params=models.SearchParams(\n                quantization=models.QuantizationSearchParams(\n                    # Avoid rescoring in prefetch\n                    # We should do it explicitly on the second stage\n                    rescore=False,\n                ),\n            )\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client (Python)\nDESCRIPTION: This snippet initializes the Qdrant client, connecting to a Qdrant instance running locally at `http://localhost:6333`.  It establishes the connection necessary for subsequent operations such as querying or inserting data into Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-batch/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n```\n\n----------------------------------------\n\nTITLE: Scroll Query with Filter in Qdrant using Rust\nDESCRIPTION: Demonstrates how to execute a scroll query operation in Qdrant with a filter condition matching country name. Uses the ScrollPointsBuilder to construct the query and applies a filter to match records where the country name equals 'Germany'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-fields/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::should([\n            Condition::matches(\"country.name\", \"Germany\".to_string()),\n        ])),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration\nDESCRIPTION: Demonstrates establishing a connection to a Qdrant server and creating a new collection with cosine distance metrics. The code configures vector parameters with size 768 and sets memory mapping threshold to 20000.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-optimizer-config/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(768)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setOptimizersConfig(\n                OptimizersConfigDiff.newBuilder().setMemmapThreshold(20000).build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Configuring OrderBy in Qdrant Go Client\nDESCRIPTION: Sets up query ordering configuration using the Qdrant Go client. Orders results by timestamp in descending order, starting from index 123. Uses the official Qdrant Go client package.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-order-by-advanced/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.OrderBy{\n\tKey:       \"timestamp\",\n\tDirection: qdrant.Direction_Desc.Enum(),\n\tStartFrom: qdrant.NewStartFromInt(123),\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Recommendations and Filters in Python\nDESCRIPTION: This code demonstrates how to use the Qdrant Python client to perform a recommendation query. It initializes a client connection to a local Qdrant server, then performs a query with positive and negative examples using the average vector strategy. The query also includes a filter to return only points where the 'city' field matches 'London' and limits the results to 3 items.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/basic-recommend/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.RecommendQuery(\n        recommend=models.RecommendInput(\n            positive=[100, 231],\n            negative=[718, [0.2, 0.3, 0.4, 0.5]],\n            strategy=models.RecommendStrategy.AVERAGE_VECTOR,\n        )\n    ),\n    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"city\",\n                match=models.MatchValue(\n                    value=\"London\",\n                ),\n            )\n        ]\n    ),\n    limit=3,\n)\n```\n\n----------------------------------------\n\nTITLE: HasVector Filtering in Qdrant\nDESCRIPTION: Shows how to use the HasVector condition to filter points based on the presence of a specific named vector, useful for collections with multiple vector types.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/filtering.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filter\": {\n    \"must\": [\n      {\n        \"has_vector\": \"image\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using EventExtractor Example\nDESCRIPTION: Demonstrates how to use the EventExtractor class by creating an instance and processing a query about blockchain events.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-vultr-dspy-ollama.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nextractor = EventExtractor()\nextractor.forward(\"Blockchain events close to Europe\")\n```\n\n----------------------------------------\n\nTITLE: Executing Recommendation Query\nDESCRIPTION: Performs similarity search and processes results to generate movie recommendations based on user preferences.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/collaborative-filtering.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresults = qdrant_client.query_points(\n    collection_name=collection_name,\n    query=to_vector(my_ratings),\n    using=\"ratings\",\n    limit=20\n).points\n\ndef results_to_scores(results):\n    movie_scores = defaultdict(lambda: 0)\n    for result in results:\n        for movie_id in result.payload[\"movie_id\"]:\n            movie_scores[movie_id] += result.score\n    return movie_scores\n\nmovie_scores = results_to_scores(results)\ntop_movies = sorted(movie_scores.items(), key=lambda x: x[1], reverse=True)\n```\n\n----------------------------------------\n\nTITLE: Updating HNSW Parameters in Qdrant Collection (Python)\nDESCRIPTION: This code snippet demonstrates how to update the HNSW configuration of a Qdrant collection, increasing the number of edges per node (m) and the number of neighbours to consider during indexing (ef_construct). It also includes a loop to wait for the indexing process to complete.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/retrieval-quality.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclient.update_collection(\n    collection_name=\"arxiv-titles-instructorxl-embeddings\",\n    hnsw_config=models.HnswConfigDiff(\n        m=32,  # Increase the number of edges per node from the default 16 to 32\n        ef_construct=200,  # Increase the number of neighbours from the default 100 to 200\n    )\n)\n\nwhile True:\n    collection_info = client.get_collection(collection_name=\"arxiv-titles-instructorxl-embeddings\")\n    if collection_info.status == models.CollectionStatus.GREEN:\n        # Collection status is green, which means the indexing is finished\n        break\n```\n\n----------------------------------------\n\nTITLE: Text-Based Search with Language Embeddings\nDESCRIPTION: Implementation of text-based vector search using Langchain embeddings with HuggingFace model integration for automatic text vectorization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/neo4j-graphrag.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_huggingface.embeddings import HuggingFaceEmbeddings\nfrom neo4j import GraphDatabase\nfrom neo4j_graphrag.retrievers import QdrantNeo4jRetriever\nfrom qdrant_client import QdrantClient\n\nNEO4J_URL = \"neo4j://localhost:7687\"\nNEO4J_AUTH = (\"neo4j\", \"password\")\n\nwith GraphDatabase.driver(NEO4J_URL, auth=NEO4J_AUTH) as neo4j_driver:\n    embedder = HuggingFaceEmbeddings(model_name=\"all-MiniLM-L6-v2\")\n    retriever = QdrantNeo4jRetriever(\n        driver=neo4j_driver,\n        client=QdrantClient(url=\"http://localhost:6333\"),\n        collection_name=\"{collection_name}\",\n        id_property_external=\"neo4j_id\",\n        id_property_neo4j=\"id\",\n        embedder=embedder,\n    )\n\nretriever.search(query_text=\"my user query\", top_k=10)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Vector Search Query in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a Qdrant client connection to a local instance and perform a vector similarity search query. It configures quantization parameters, sets the query vector, and limits results to 10 items.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-quantization-oversampling/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: [0.2, 0.1, 0.9, 0.7],\n    params: {\n        quantization: {\n            ignore: false,\n            rescore: true,\n            oversampling: 2.0,\n        },\n    },\n    limit: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Querying the RAG Function\nDESCRIPTION: This code snippet calls the `rag` function with the question \"What can the stack for a web api look like?\". The function retrieves relevant documents from Qdrant and uses them as context for the LLM to answer the question. The expected output is an answer generated by the LLM based on the retrieved information.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/rag-deepseek.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n\"rag(\\\"What can the stack for a web api look like?\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Python Client with JWT Authentication\nDESCRIPTION: Example of initializing the Qdrant Python client with JWT authentication. The JWT token is passed as the API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nqdrant_client = QdrantClient(\n    \"xyz-example.eu-central.aws.cloud.qdrant.io\",\n    api_key=\"<JWT>\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Event Signature Class in Python with DSPy\nDESCRIPTION: Creates a DSPy signature class that defines the input and output fields for event information extraction. It specifies fields for event description input and structured outputs for event name, location, and dates.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-vultr-dspy-ollama.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Event(dspy.Signature):\n    description = dspy.InputField(\n        desc=\"Textual description of the event, including name, location and dates\"\n    )\n    event_name = dspy.OutputField(desc=\"Name of the event\")\n    location = dspy.OutputField(desc=\"Location of the event\")\n    start_date = dspy.OutputField(desc=\"Start date of the event, YYYY-MM-DD\")\n    end_date = dspy.OutputField(desc=\"End date of the event, YYYY-MM-DD\")\n```\n\n----------------------------------------\n\nTITLE: Performing Grouped Search with Qdrant in Python\nDESCRIPTION: Demonstrates how to encode a text query into a vector using CLIP model and perform a grouped search in Qdrant to get diverse results across restaurants.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/food-discovery-demo.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport settings\n\n# Encode query into a vector, model is an instance of\n# sentence_transformers.SentenceTransformer that loaded CLIP model\nquery_vector = model.encode(query).tolist()\n\n# Search for nearest neighbors, client is an instance of \n# qdrant_client.QdrantClient that has to be initialized before\nresponse = client.search_groups(\n    settings.QDRANT_COLLECTION,\n    query_vector=query_vector,\n    group_by=settings.GROUP_BY_FIELD,\n    limit=search_query.limit,\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Voyage AI Embeddings to Qdrant Points in Python\nDESCRIPTION: Transforms the Voyage AI embedding response into Qdrant PointStruct objects. Each point includes an ID, the embedding vector, and a payload containing the original text.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/voyage.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import PointStruct\n\npoints = [\n    PointStruct(\n        id=idx,\n        vector=embedding,\n        payload={\"text\": text},\n    )\n    for idx, (embedding, text) in enumerate(zip(response.embeddings, texts))\n]\n```\n\n----------------------------------------\n\nTITLE: Performing Multi-Vector Similarity Search with Qdrant\nDESCRIPTION: Executes a vector search query using Qdrant client, supporting prefetch, multiple query vectors, and a specific search method (ColBERT). Allows retrieving up to 10 most similar points across different vector embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-multivector/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=models.Prefetch(\n        query=[0.01, 0.45, 0.67, 0.53],  # <-- dense vector\n        limit=100,\n    ),\n    query=[\n        [0.1, 0.2, 0.32],  # <─┐\n        [0.2, 0.1, 0.52],  # < ├─ multi-vector\n        [0.8, 0.9, 0.93],  # < ┘\n    ],\n    using=\"colbert\",\n    limit=10,\n)\n```\n\n----------------------------------------\n\nTITLE: Data Preparation and Normalization\nDESCRIPTION: Loads and processes movie datasets, normalizes ratings, and merges movie metadata with user ratings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/collaborative-filtering.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nratings_df = pd.read_csv('data/ratings.csv', low_memory=False)\nmovies_df = pd.read_csv('data/movies.csv', low_memory=False)\n\nratings_df['movieId'] = ratings_df['movieId'].astype(str)\nmovies_df['movieId'] = movies_df['movieId'].astype(str)\n\nrating = ratings_df['rating']\nratings_df['rating'] = (rating - rating.mean()) / rating.std()\n\nmerged_df = ratings_df.merge(\n    movies_df[['movieId', 'title']],\n    left_on='movieId', right_on='movieId', how='inner'\n)\n\nratings_agg_df = merged_df.groupby(['userId', 'movieId']).rating.mean().reset_index()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database in C#\nDESCRIPTION: This code demonstrates how to set up a Qdrant client connection to a local server and execute a vector similarity search query with quantization parameters. The query searches for vectors similar to the provided embedding and applies quantization settings to control the search process.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-quantization-oversampling/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\tsearchParams: new SearchParams\n\t{\n\t\tQuantization = new QuantizationSearchParams\n\t\t{\n\t\t\tIgnore = false,\n\t\t\tRescore = true,\n\t\t\tOversampling = 2.0\n\t\t}\n\t},\n\tlimit: 10\n);\n```\n\n----------------------------------------\n\nTITLE: Uploading Points with Named Vectors to Qdrant via HTTP\nDESCRIPTION: This snippet demonstrates how to upload points with named vectors to a Qdrant collection using an HTTP PUT request. The request sends a JSON payload containing an array of points, each having a unique ID and a vector composed of named vectors ('image' and 'text'). The collection name must be specified in the request URL.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-multiple-vectors/http.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPUT /collections/{collection_name}/points\n{\n    \"points\": [\n        {\n            \"id\": 1,\n            \"vector\": {\n                \"image\": [0.9, 0.1, 0.1, 0.2],\n                \"text\": [0.4, 0.7, 0.1, 0.8, 0.1, 0.1, 0.9, 0.2]\n            }\n        },\n        {\n            \"id\": 2,\n            \"vector\": {\n                \"image\": [0.2, 0.1, 0.3, 0.9],\n                \"text\": [0.5, 0.2, 0.7, 0.4, 0.7, 0.2, 0.3, 0.9]\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Filters to Vector Search in Qdrant\nDESCRIPTION: Demonstrates how to add filtering to the vector search query using Qdrant's Filter model. This example shows filtering search results by city, combining semantic similarity with metadata filtering to narrow down results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import Filter\n\n    ...\n\n    city_of_interest = \"Berlin\"\n\n    # Define a filter for cities\n    city_filter = Filter(**{\n        \"must\": [{\n            \"key\": \"city\", # Store city information in a field of the same name \n            \"match\": { # This condition checks if payload field has the requested value\n                \"value\": city_of_interest\n            }\n        }]\n    })\n\n    search_result = self.qdrant_client.query_points(\n        collection_name=self.collection_name,\n        query=vector,\n        query_filter=city_filter,\n        limit=5\n    ).points\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection Utility Function\nDESCRIPTION: This snippet provides a utility function for creating a Qdrant collection, checking if it exists and creating it if it doesn't. The function uses QdrantClient to interact with Qdrant's API.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/data-streaming-kafka-qdrant.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\", api_key=\"<YOUR_KEY>\")\ndimension_dict = {\"snowflake/snowflake-arctic-embed-s\": 384}\n\ndef create_qdrant_collection(collection_name: str, embed_model: str):\n\n    if not client.collection_exists(collection_name=collection_name):\n        client.create_collection(\n            collection_name=collection_name,\n            vectors_config=models.VectorParams(size=dimension_dict.get(embed_model), distance=models.Distance.COSINE)\n        )\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in TypeScript\nDESCRIPTION: Creates a new Qdrant client instance connected to localhost and initializes a collection with specified vector parameters. The collection is configured with image vectors of size 1024, using Cosine distance and uint8 datatype.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-uint8/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    image: { size: 1024, distance: \"Cosine\", datatype: \"uint8\" },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Downloading Qdrant Snapshots using Python Requests\nDESCRIPTION: This Python code downloads the created snapshots from each node of the Qdrant cluster using the requests library. It creates a local directory to store the snapshots and includes the API key in the request headers.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/create-snapshot.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport os\n\n# Create a directory to store snapshots\nos.makedirs(\"snapshots\", exist_ok=True)\n\nlocal_snapshot_paths = []\nfor snapshot_url in snapshot_urls:\n    snapshot_name = os.path.basename(snapshot_url)\n    local_snapshot_path = os.path.join(\"snapshots\", snapshot_name)\n\n    response = requests.get(\n        snapshot_url, headers={\"api-key\": QDRANT_API_KEY}\n    )\n    with open(local_snapshot_path, \"wb\") as f:\n        response.raise_for_status()\n        f.write(response.content)\n\n    local_snapshot_paths.append(local_snapshot_path)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database with Filters in Python\nDESCRIPTION: Demonstrates how to connect to a Qdrant instance and perform a vector similarity search with filtering. The query includes a vector query, city filter condition, search parameters for HNSW index, and result limit. The client connects to a local Qdrant instance on port 6333.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/basic-with-filter-and-params/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"city\",\n                match=models.MatchValue(\n                    value=\"London\",\n                ),\n            )\n        ]\n    ),\n    search_params=models.SearchParams(hnsw_ef=128, exact=False),\n    limit=3,\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Similarity Search in Qdrant\nDESCRIPTION: SQL query that performs a similarity search using vector embeddings. This example uses a subquery to retrieve an embedding vector from another database to use as the search vector.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/mindsdb.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM qdrant_test.test_table\nWHERE search_vector = (select embeddings from mysql_demo_db.test_embeddings limit 1)\n```\n\n----------------------------------------\n\nTITLE: Updating Collection Vectors with cURL in Qdrant\nDESCRIPTION: This snippet demonstrates how to update the vector configuration of a Qdrant collection using a PATCH request with cURL. The request sets the `on_disk` property to `true`, indicating that the vectors should be stored on disk. It requires the collection name to be specified in the URL.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/vectors-to-disk-default/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"vectors\": {\n        \"\": { \n            \"on_disk\": true \n      }\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection with Java\nDESCRIPTION: This snippet demonstrates how to create a collection in Qdrant using the Java client. It initializes a Qdrant client and then creates a collection with a specified name, vector parameters (size, distance, on-disk storage), and HNSW configuration (on-disk storage).\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-vectors-and-hnsw-on-disk/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.HnswConfigDiff;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(768)\n                            .setDistance(Distance.Cosine)\n                            .setOnDisk(true)\n                            .build())\n                    .build())\n            .setHnswConfig(HnswConfigDiff.newBuilder().setOnDisk(true).build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Uploading Dataset to Qdrant Collection in Python\nDESCRIPTION: This snippet processes the dataset, extracting IDs, vectors, and payloads, and uploads the first 1000 items to the Qdrant collection using the upsert method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/create-snapshot.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nids, vectors, payloads = [], [], []\nfor payload in dataset:\n    id_ = payload.pop(\"id\")\n    vector = payload.pop(\"vector\")\n\n    ids.append(id_)\n    vectors.append(vector)\n    payloads.append(payload)\n\n    # We are going to upload only 1000 vectors\n    if len(ids) == 1000:\n        break\n\nclient.upsert(\n    collection_name=\"test_collection\",\n    points=models.Batch(\n        ids=ids,\n        vectors=vectors,\n        payloads=payloads,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with C# Client\nDESCRIPTION: Initializes a Qdrant client and creates a new collection with specified vector parameters and scalar quantization configuration. The collection is configured with 768-dimensional vectors using cosine distance and Int8 scalar quantization stored in RAM.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/scalar-quantization-and-vectors-in-ram/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine},\n\tquantizationConfig: new QuantizationConfig\n\t{\n\t\tScalar = new ScalarQuantization { Type = QuantizationType.Int8, AlwaysRam = true }\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Qdrant Collection using Sycamore\nDESCRIPTION: Example demonstrates reading from a Qdrant collection using Sycamore's read.qdrant() function. Shows configuration for cloud instance connection with API key and query parameters including collection name and result limit.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/sycamore.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndocs = ctx.read.qdrant(\n    {\n        \"url\": \"https://xyz-example.eu-central.aws.cloud.qdrant.io:6333\",\n        \"api_key\": \"<paste-your-api-key-here>\",\n    },\n    {\"collection_name\": \"{collection_name}\", \"limit\": 100, \"using\": \"{optional_vector_name}\"},\n).take_all()\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Embeddings with Qdrant using Sentence Transformers\nDESCRIPTION: Demonstrates how to use static embeddings model from sentence-transformers library with Qdrant vector database. The code shows initialization of the model, encoding text, and upserting vectors into a Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/static-embeddings.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\nfrom sentence_transformers import SentenceTransformer\nfrom qdrant_client import QdrantClient, models\n\n# The model produces vectors of size 1024\nmodel = SentenceTransformer(\n    \"sentence-transformers/static-retrieval-mrl-en-v1\"\n)\n\n# Let's assume we have a collection \"my_collection\" \n# with a single vector called \"static\"\nclient = QdrantClient(\"http://localhost:6333\")\n\n# Calling the sentence transformer model to encode \n# the text is not different compared to any other model\nclient.upsert(\n    \"my_collection\",\n    points=[\n        models.PointStruct(\n            id=uuid.uuid4().hex,\n            vector=model.encode(\"Hello, world!\"),\n            payload={\"static\": \"Hello, world!\"},\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collection with Array Filters in C#\nDESCRIPTION: Demonstrates how to initialize a Qdrant client and perform a scroll query with filters on array fields. The query searches for records where the 'diet' array contains elements with 'food' equal to 'meat' AND 'likes' equal to true.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-multiple-nested/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: MatchKeyword(\"diet[].food\", \"meat\") & Match(\"diet[].likes\", true)\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting Multi-Vector Point in Qdrant Collection via HTTP PUT\nDESCRIPTION: This HTTP PUT request inserts a point with multiple vector types into a Qdrant collection. It includes dense vectors for 'image' and 'text', and a sparse vector for 'text-sparse'. The request waits for the operation to complete before responding.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/named-vectors/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/points?wait=true\n{\n    \"points\": [\n        {\n            \"id\": 1,\n            \"vector\": {\n                \"image\": [0.9, 0.1, 0.1, 0.2],\n                \"text\": [0.4, 0.7, 0.1, 0.8, 0.1],\n                \"text-sparse\": {\n                  \"indices\": [1, 3, 5, 7],\n                  \"values\": [0.1, 0.2, 0.3, 0.4]\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Points in Qdrant with Python\nDESCRIPTION: This snippet demonstrates querying points in a Qdrant collection using a recommend query. It requires the 'qdrant' client library and a 'models' module providing query-related classes. Main parameters include 'positive' and 'negative' for recommendation input, 'using' for search type, and 'limit' for result count. The 'lookup_from' parameter specifies a location in an external collection. The query returns a set of recommended points within the given constraints.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-lookup-from/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points(\n    collection_name=\\\"{collection_name}\\\",\n    query=models.RecommendQuery(\n        recommend=models.RecommendInput(\n            positive=[100, 231],\n            negative=[718],\n        )\n    ),\n    using=\\\"image\\\",\n    limit=10,\n    lookup_from=models.LookupLocation(\n        collection=\\\"{external_collection_name}\\\", vector=\\\"{external_vector_name}\\\"\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting Vector Data with Qdrant Python Client\nDESCRIPTION: Demonstrates connecting to a Qdrant instance and upserting a point with multi-dimensional vector data. Uses the qdrant_client library to connect to a local Qdrant server and insert a point with a 3x4 vector array.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-multivector/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.upsert(\n    collection_name=\"{collection_name}\",\n    points=[\n        models.PointStruct(\n            id=1,\n            vector=[\n                [-0.013,  0.020, -0.007, -0.111],\n                [-0.030, -0.055,  0.001,  0.072],\n                [-0.041,  0.014, -0.032, -0.062]\n            ],\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-Based Query Decryption\nDESCRIPTION: Shows how to query encrypted vectors and decrypt results based on role-based access permissions, including error handling for unauthorized access.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/mirror-security.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom mirror_sdk.core import MirrorError\nfrom mirror_sdk.core.models import MirrorCrypto\nfrom mirror_sdk.utils import decode_binary_data\n\n# Encrypt a query vector for secure search\n# query_embedding = generate_query_embedding(...)\n\nquery_data = RBACVectorData(vector=query_embedding, id=\"query\", access_policy=policy)\nencrypted_query = mirror_sdk.rbac.encrypt(query_data)\n\nresults = qdrant.query_points(\n    collection_name=\"vectax\", query=encrypted_query.crypto.ciphertext, limit=10\n)\n\naccessible_results = []\nfor point in results.points:\n    try:\n        encrypted_vector_metadata = decode_binary_data(\n            point.payload[\"encrypted_vector_metadata\"]\n        )\n        mirror_data = MirrorCrypto.deserialize(encrypted_vector_metadata)\n        admin_decrypted = mirror_sdk.rbac.decrypt(\n            mirror_data,\n            point.payload[\"encrypted_header\"],\n            admin_key,\n        )\n        accessible_results.append(\n            {\n                \"id\": point.id,\n                \"content\": point.payload[\"content\"],\n                \"score\": point.score,\n                \"accessible\": True,\n            }\n        )\n\n    except MirrorError as e:\n        print(f\"Access denied for point {point.id}: {e}\")\n\n# Proceed to only use results within `accessible_results`.\n```\n\n----------------------------------------\n\nTITLE: Querying Vectors with Qdrant Python Client\nDESCRIPTION: Performs a vector similarity search in a Qdrant collection using a 4-dimensional query vector. The query retrieves matching points along with their original vectors and associated payload data, which is useful for retrieval augmented generation (RAG) applications.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-payload-and-vectors/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    with_vectors=True,\n    with_payload=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Documents to Qdrant Collection\nDESCRIPTION: Code to index documents in Qdrant vector database using the QdrantClient, creating a new collection if it doesn't exist.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-vultr-dspy-ollama.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient.add(\n    collection_name=\"document-parts\",\n    documents=documents,\n    metadata=[{\"document\": document} for document in documents],\n)\n```\n\n----------------------------------------\n\nTITLE: Grouping API with Lookup in Qdrant\nDESCRIPTION: Shows how to use the grouping API with the 'with_lookup' parameter to bring information from points in another collection. This optimizes storage by storing shared information in a separate collection and retrieving it during the query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/search.md#2025-04-21_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/search/groups\n{\n  \"vector\": [0.2, 0.1, 0.9, 0.7],\n  \"group_by\": \"document_id\",\n  \"group_size\": 3,\n  \"limit\": 5,\n  \"with_lookup\": {\n    \"collection\": \"documents\",\n    \"payload_fields\": [\"title\", \"text\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Sparse Vectors in Qdrant using Rust\nDESCRIPTION: This code uses the Qdrant client to upsert two points with sparse vectors into a specified collection. It demonstrates creating PointStruct objects with IDs, sparse vectors, and default payloads, then using the UpsertPointsBuilder to perform the operation asynchronously.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/sparse-vectors/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse std::collections::HashMap;\n\nuse qdrant_client::qdrant::{PointStruct, UpsertPointsBuilder, Vector};\nuse qdrant_client::Payload;\n\nclient\n    .upsert_points(\n        UpsertPointsBuilder::new(\n            \"{collection_name}\",\n            vec![\n                PointStruct::new(\n                    1,\n                    HashMap::from([(\"text\".to_string(), vec![(6, 1.0), (7, 2.0)])]),\n                    Payload::default(),\n                ),\n                PointStruct::new(\n                    2,\n                    HashMap::from([(\n                        \"text\".to_string(),\n                        vec![(1, 0.1), (2, 0.2), (3, 0.3), (4, 0.4), (5, 0.5)],\n                    )]),\n                    Payload::default(),\n                ),\n            ],\n        )\n        .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Inserting Point with Named Vectors in Qdrant using Python\nDESCRIPTION: This code snippet demonstrates how to insert a point with named vectors into a Qdrant collection. The point has an ID and contains vectors labeled as 'image,' 'text,' and 'text-sparse.' The 'image' vector has four values, the 'text' vector has five values, and the 'text-sparse' vector includes indices and corresponding values.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/named-vectors/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n    collection_name=\"my_collection\",\n    points=[\n        PointStruct(\n            id=1,\n            vector={\n                \"image\": [0.1, 0.2, 0.3, 0.4],\n                \"text\": [0.5, 0.6, 0.7, 0.8, 0.9],\n                \"text-sparse\": SparseVector(\n                    indices=[1, 3, 4],\n                    values=[0.2, 0.5, 0.7]\n                ),\n            },\n            payload={\"payload_key\": \"payload_value\"}\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Vector Similarity Search with Qdrant in Rust\nDESCRIPTION: Demonstrates how to create and execute a batch of vector similarity searches using the Qdrant client. The code establishes a connection to a Qdrant server, creates a filter for points in London, and performs two separate vector searches with different query vectors, both limited to 3 results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/batch-search/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, QueryBatchPointsBuilder, QueryPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet filter = Filter::must([Condition::matches(\"city\", \"London\".to_string())]);\n\nlet searches = vec![\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(vec![0.1, 0.2, 0.3, 0.4])\n        .limit(3)\n        .filter(filter.clone())\n        .build(),\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(vec![0.5, 0.3, 0.2, 0.3])\n        .limit(3)\n        .filter(filter)\n        .build(),\n];\n\nclient\n        .query_batch(QueryBatchPointsBuilder::new(\"{collection_name}\", searches))\n        .await?;\n```\n\n----------------------------------------\n\nTITLE: Searching Qdrant Collection with Nested Field Filter in Python\nDESCRIPTION: This code snippet demonstrates how to perform a search operation on a Qdrant collection using a filter condition based on a nested field. It filters points where the 'country.name' field matches 'Germany', allowing retrieval of scroll points that meet this specific criteria.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-fields/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.scroll(\n    collection_name=\"my_collection\",\n    scroll_filter=Filter(\n        must=[\n            FieldCondition(\n                key=\"country.name\",\n                match={\n                    \"value\": \"Germany\"\n                }\n            )\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Image-to-Text Query with Python\nDESCRIPTION: Queries the Qdrant collection using an image to find the associated text description, demonstrating the reverse search feature of the system.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/multimodal-search.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n```python\nclient.query_points(\n    collection_name=COLLECTION_NAME,\n    query=model.get_image_embedding(\"images/image-2.png\"),  \n    # Now we are searching only among text vectors with our image query\n    using=\"text\",\n    with_payload=[\"caption\"],\n    limit=1\n).points[0].payload['caption']\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Replicated Collection in Qdrant (Python)\nDESCRIPTION: This snippet demonstrates how to create a collection in Qdrant with sharding and replication for high availability. It specifies 4 shards with a replication factor of 2, resulting in 8 physical shards distributed across the cluster.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-a-vector-database.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),\n    shard_number=4,\n    replication_factor=2, \n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database with Recommendations in C#\nDESCRIPTION: This snippet demonstrates how to connect to a Qdrant vector database server and perform a recommendation query with positive and negative examples. It includes filtering results by a keyword match and limiting the number of results returned.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/basic-recommend/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new RecommendInput {\n        Positive = { 100, 231 },\n        Negative = { 718 }\n    },\n    filter: MatchKeyword(\"city\", \"London\"),\n    limit: 3\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Configuration Path in Docker\nDESCRIPTION: Example of specifying a custom configuration file path using the --config-path argument in Docker.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6333:6333 \\\n    -v $(pwd)/config.yaml:/path/to/config.yaml \\\n    qdrant/qdrant \\\n    ./qdrant --config-path /path/to/config.yaml\n```\n\n----------------------------------------\n\nTITLE: Scrolling Points with Filter in Qdrant API\nDESCRIPTION: This snippet demonstrates how to use the Scroll API to retrieve points matching a filter condition. It returns points with 'color' equal to 'red' in a paginated manner.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/points.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": {\n    \"next_page_offset\": 1,\n    \"points\": [\n      {\n        \"id\": 0,\n        \"payload\": {\n          \"color\": \"red\"\n        }\n      }\n    ]\n  },\n  \"status\": \"ok\",\n  \"time\": 0.0001\n}\n```\n\n----------------------------------------\n\nTITLE: Re-enabling HNSW Indexing After Upload in C#\nDESCRIPTION: C# implementation to update a Qdrant collection by enabling HNSW indexing after bulk upload. Changes the M parameter from 0 to 16 to initiate the construction of the HNSW graph for efficient vector search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpdateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\thnswConfig: new HnswConfigDiff { M = 16 }\n);\n```\n\n----------------------------------------\n\nTITLE: Searching Documents with Mistral Embeddings in Qdrant\nDESCRIPTION: Performs a vector search in Qdrant using a query converted to an embedding via Mistral's embedding model, retrieving the most relevant documents.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/mistral.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient.search(\n    collection_name=collection_name,\n    query_vector=mistral_client.embeddings(\n        model=\"mistral-embed\", input=[\"What is the best to use for vector search scaling?\"]\n    ).data[0].embedding,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index in Qdrant with Python\nDESCRIPTION: This snippet utilizes the Qdrant client to create a payload index for a specified collection. It requires specifying the collection name, the field to index, and the schema type. Inputs include the collection name as a string and the field configurations; the output is the creation status of the index.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/simple-keyword/python.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclient.create_payload_index(\\\n    collection_name=\"{collection_name}\",\\\n    field_name=\"name_of_the_field_to_index\",\\\n    field_schema=\"keyword\",\\\n)\n```\n\n----------------------------------------\n\nTITLE: Creating GeoPolygon with Qdrant Go Client\nDESCRIPTION: This snippet shows how to create a new geo polygon using the Qdrant Go client. The code initializes two geo lines, each defined by a series of geographical points (latitude and longitude). It takes advantage of the Qdrant geometry-related functionalities to allow for spatial data representation. The required dependency is the Qdrant Go client library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-poligon/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewGeoPolygon(\"location\",\n\t&qdrant.GeoLineString{\n\t\tPoints: []*qdrant.GeoPoint{\n\t\t\t{Lat: -70, Lon: -70},\n\t\t\t{Lat: 60, Lon: -70},\n\t\t\t{Lat: 60, Lon: 60},\n\t\t\t{Lat: -70, Lon: 60},\n\t\t\t{Lat: -70, Lon: -70},\n\t\t},\n\t}, &qdrant.GeoLineString{\n\tPoints: []*qdrant.GeoPoint{\n\t\t{Lat: -65, Lon: -65},\n\t\t{Lat: 0, Lon: -65},\n\t\t{Lat: 0, Lon: 0},\n\t\t{Lat: -65, Lon: 0},\n\t\t{Lat: -65, Lon: -65},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Vectors and Payload in Qdrant using C#\nDESCRIPTION: This code creates a QdrantClient instance, then uses it to upsert multiple points into a specified collection. Each point has an ID, a vector representation, and a payload containing a color attribute. The client connects to a local Qdrant server running on port 6334.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/list-of-points-simple/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpsertAsync(\n\tcollectionName: \"{collection_name}\",\n\tpoints: new List<PointStruct>\n\t{\n\t\tnew()\n\t\t{\n\t\t\tId = 1,\n\t\t\tVectors = new[] { 0.9f, 0.1f, 0.1f },\n\t\t\tPayload = { [\"color\"] = \"red\" }\n\t\t},\n\t\tnew()\n\t\t{\n\t\t\tId = 2,\n\t\t\tVectors = new[] { 0.1f, 0.9f, 0.1f },\n\t\t\tPayload = { [\"color\"] = \"green\" }\n\t\t},\n\t\tnew()\n\t\t{\n\t\t\tId = 3,\n\t\t\tVectors = new[] { 0.1f, 0.1f, 0.9f },\n\t\t\tPayload = { [\"color\"] = \"blue\" }\n\t\t}\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Collection Optimizers Configurations Using HTTP PATCH\nDESCRIPTION: This snippet demonstrates how to update the optimizers configuration for a specific collection in Qdrant using an HTTP PATCH request. It includes a defined URL path variable for specifying the collection name and a payload structure to pass new configuration parameters. The expected input is the collection name in the URL and an optimizers configuration object in the request body. The output is the status of the operation indicating success or failure.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/trigger-indexing/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPATCH /collections/{collection_name}\n{\n    \"optimizers_config\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Precision at K\nDESCRIPTION: This snippet defines a function `avg_precision_at_k` that calculates the average precision@k for the approximate search results compared to the exact search results. It iterates through the `test_dataset`, performs both approximate and exact searches, and then compares the ids of the search results to calculate precision@k.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/retrieval-quality.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef avg_precision_at_k(k: int):\n    precisions = []\n    for item in test_dataset:\n        ann_result = client.query_points(\n            collection_name=\"arxiv-titles-instructorxl-embeddings\",\n            query=item[\"vector\"],\n            limit=k,\n        ).points\n    \n        knn_result = client.query_points(\n            collection_name=\"arxiv-titles-instructorxl-embeddings\",\n            query=item[\"vector\"],\n            limit=k,\n            search_params=models.SearchParams(\n                exact=True,  # Turns on the exact search mode\n            ),\n        ).points\n\n        # We can calculate the precision@k by comparing the ids of the search results\n        ann_ids = set(item.id for item in ann_result)\n        knn_ids = set(item.id for item in knn_result)\n        precision = len(ann_ids.intersection(knn_ids)) / k\n        precisions.append(precision)\n    \n    return sum(precisions) / len(precisions)\n```\n\n----------------------------------------\n\nTITLE: Configuring Quantization with On-Disk Storage in Qdrant\nDESCRIPTION: This snippet demonstrates how to configure a collection where both original and quantized vectors are stored on disk. This achieves the smallest memory footprint but may impact search speed, especially on systems with slow storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/quantization.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vectors\": {\n    \"size\": 768,\n    \"distance\": \"Cosine\",\n    \"storage_type\": \"Mmap\"\n  },\n  \"quantization_config\": {\n    \"scalar\": {\n      \"type\": \"scalar\",\n      \"quantile\": 0.99,\n      \"always_ram\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Graph Components from Raw Data in Python\nDESCRIPTION: This function processes raw data to extract nodes and relationships as graph components. It uses the OpenAI LLM parser to interpret the data and assigns unique IDs to nodes and relationships.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/graphrag-qdrant-neo4j.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef extract_graph_components(raw_data):\n    prompt = f\"Extract nodes and relationships from the following text:\\n{raw_data}\"\n\n    parsed_response = openai_llm_parser(prompt)  # Assuming this returns a list of dictionaries\n    parsed_response = parsed_response.graph  # Assuming the 'graph' structure is a key in the parsed response\n\n    nodes = {}\n    relationships = []\n\n    for entry in parsed_response:\n        node = entry.node\n        target_node = entry.target_node  # Get target node if available\n        relationship = entry.relationship  # Get relationship if available\n\n        # Add nodes to the dictionary with a unique ID\n        if node not in nodes:\n            nodes[node] = str(uuid.uuid4())\n\n        if target_node and target_node not in nodes:\n            nodes[target_node] = str(uuid.uuid4())\n\n        # Add relationship to the relationships list with node IDs\n        if target_node and relationship:\n            relationships.append({\n                \"source\": nodes[node],\n                \"target\": nodes[target_node],\n                \"type\": relationship\n            })\n\n    return nodes, relationships\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Operations with Qdrant Client in Rust\nDESCRIPTION: This code demonstrates how to use the UpdateBatchPointsBuilder to perform multiple point operations in a single request to a Qdrant collection. It showcases the full range of operations including upsert, vector updates, payload management, and point deletion. The batch pattern is useful for efficiently applying multiple changes to a collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/batch-update-points/basic/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse std::collections::HashMap;\n\nuse qdrant_client::qdrant::\n    points_update_operation::\n        ClearPayload, DeletePayload, DeletePoints, DeleteVectors, Operation, OverwritePayload,\n        PointStructList, SetPayload, UpdateVectors,\n    },\n    PointStruct, PointVectors, PointsUpdateOperation, UpdateBatchPointsBuilder, VectorsSelector,\n};\nuse qdrant_client::Payload;\n\nclient\n    .update_points_batch(\n        UpdateBatchPointsBuilder::new(\n            \"{collection_name}\",\n            vec![\n                PointsUpdateOperation {\n                    operation: Some(Operation::Upsert(PointStructList {\n                        points: vec![PointStruct::new(\n                            1,\n                            vec![1.0, 2.0, 3.0, 4.0],\n                            Payload::default(),\n                        )],\n                        ..Default::default()\n                    })),\n                },\n                PointsUpdateOperation {\n                    operation: Some(Operation::UpdateVectors(UpdateVectors {\n                        points: vec![PointVectors {\n                            id: Some(1.into()),\n                            vectors: Some(vec![1.0, 2.0, 3.0, 4.0].into()),\n                        }],\n                        ..Default::default()\n                    })),\n                },\n                PointsUpdateOperation {\n                    operation: Some(Operation::DeleteVectors(DeleteVectors {\n                        points_selector: Some(vec![1.into()].into()),\n                        vectors: Some(VectorsSelector {\n                            names: vec![\"\".into()],\n                        }),\n                        ..Default::default()\n                    })),\n                },\n                PointsUpdateOperation {\n                    operation: Some(Operation::OverwritePayload(OverwritePayload {\n                        points_selector: Some(vec![1.into()].into()),\n                        payload: HashMap::from([(\"test_payload\".to_string(), 1.into())]),\n                        ..Default::default()\n                    })),\n                },\n                PointsUpdateOperation {\n                    operation: Some(Operation::SetPayload(SetPayload {\n                        points_selector: Some(vec![1.into()].into()),\n                        payload: HashMap::from([\n                            (\"test_payload_2\".to_string(), 2.into()),\n                            (\"test_payload_3\".to_string(), 3.into()),\n                        ]),\n                        ..Default::default()\n                    })),\n                },\n                PointsUpdateOperation {\n                    operation: Some(Operation::DeletePayload(DeletePayload {\n                        points_selector: Some(vec![1.into()].into()),\n                        keys: vec![\"test_payload_2\".to_string()],\n                        ..Default::default()\n                    })),\n                },\n                PointsUpdateOperation {\n                    operation: Some(Operation::ClearPayload(ClearPayload {\n                        points: Some(vec![1.into()].into()),\n                        ..Default::default()\n                    })),\n                },\n                PointsUpdateOperation {\n                    operation: Some(Operation::DeletePoints(DeletePoints {\n                        points: Some(vec![1.into()].into()),\n                        ..Default::default()\n                    })),\n                },\n            ],\n        )\n        .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Performing Matrix Offsets Search with Filtering in Qdrant\nDESCRIPTION: This HTTP POST request searches for points in a specified collection using matrix offsets. The request includes parameters for sampling size, result limit, and a filter to match points with the 'color' property equal to 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/distance-matrix/offsets-format/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/search/matrix/offsets\n{\n    \"sample\": 10,\n    \"limit\": 2,\n    \"filter\": {\n        \"must\": {\n            \"key\": \"color\",\n            \"match\": { \"value\": \"red\" }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TLS Configuration in Qdrant\nDESCRIPTION: YAML configuration for enabling TLS encryption for REST and gRPC API.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  enable_tls: true\n\ntls:\n  cert: ./tls/cert.pem\n  key: ./tls/key.pem\n```\n\n----------------------------------------\n\nTITLE: Loading Image Embeddings into Qdrant in Python\nDESCRIPTION: Creates a Qdrant collection and uploads the generated image embeddings along with their metadata for efficient vector search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/aleph-alpha-search.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport qdrant_client\nfrom qdrant_client.models import Batch, VectorParams, Distance\n\nclient = qdrant_client.QdrantClient()\nclient.create_collection(\n    collection_name=\"COCO\",\n    vectors_config=VectorParams(\n        size=len(vectors[0]),\n        distance=Distance.COSINE,\n    ),\n)\nclient.upsert(\n    collection_name=\"COCO\",\n    points=Batch(\n        ids=ids,\n        vectors=vectors,\n        payloads=payloads,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: POST Request for Recommendation Search in Qdrant\nDESCRIPTION: Example of a POST request to Qdrant's recommend endpoint, using a point ID from a prefix cache to find similar content without computing a new embedding.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/search-as-you-type.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nPOST collections/site/points/recommend\n{\n  \"positive\": [1936024932],\n  \"limit\": 5,\n  \"with_payload\": true,\n  \"lookup_from\": {\n    \"collection\": \"prefix_cache\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing QdrantIndex Configuration\nDESCRIPTION: Sets up QdrantIndex with cloud URL and API key for vector storage\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/semantic-router.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.index import QdrantIndex\n\nqdrant_index = QdrantIndex(\n    url=\"https://xyz-example.eu-central.aws.cloud.qdrant.io\", api_key=\"<your-api-key>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection for Document Storage\nDESCRIPTION: Creates a Qdrant collection named 'oracle-cloud-website' with a vector size of 1024 for storing document embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(\n    location=os.environ.get(\"QDRANT_URL\"),\n    api_key=os.environ.get(\"QDRANT_API_KEY\"),\n)\nclient.create_collection(\n    collection_name=\"oracle-cloud-website\",\n    vectors_config=models.VectorParams(\n        size=1024,\n        distance=models.Distance.COSINE,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Memory Size for Vector Storage in Qdrant\nDESCRIPTION: Formula for estimating the memory size required to store vectors in Qdrant, including HNSW graph overhead.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/scalar-quantization.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmemory_size = 1.5 * number_of_vectors * vector_dimension * 4 bytes\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection for Late Interaction Retrieval in Python\nDESCRIPTION: This snippet demonstrates how to create a Qdrant collection with two named vectors: 'dense-vector' and 'output-token-embeddings'. It sets up the vector configurations for both single-vector and multi-vector representations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/late-interaction-models.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"my-collection\",\n    vectors_config={\n        \"dense-vector\": models.VectorParams(\n            size=384,\n            distance=models.Distance.COSINE,\n        ),\n        \"output-token-embeddings\": models.VectorParams(\n            size=384,\n            distance=models.Distance.COSINE,\n            multivector_config=models.MultiVectorConfig(\n                comparator=models.MultiVectorComparator.MAX_SIM\n            ),\n        ),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database in Go\nDESCRIPTION: Demonstrates how to create a Qdrant client connection and execute a cross-collection vector lookup query. The code establishes a connection to a local Qdrant instance and performs a query using a specific vector ID while looking up vectors from another collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/by-existing-id-with-lookup/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQueryID(qdrant.NewID(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")),\n\tUsing:          qdrant.PtrOf(\"512d-vector\"),\n\tLookupFrom: &qdrant.LookupLocation{\n\t\tCollectionName: \"another_collection\",\n\t\tVectorName:     qdrant.PtrOf(\"image-512\"),\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection with Sparse Vector Support\nDESCRIPTION: This snippet demonstrates how to create a Qdrant collection that supports sparse vectors. It configures the collection with sparse vector parameters and sets up the index for in-memory storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/sparse-vectors.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n    collection_name=COLLECTION_NAME,\n    vectors_config={},\n    sparse_vectors_config={\n        \"text\": models.SparseVectorParams(\n            index=models.SparseIndexParams(\n                on_disk=False,\n            )\n        )\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Representing Sparse Vectors in JSON\nDESCRIPTION: This snippet demonstrates the structure of a sparse vector in Qdrant, which stores only non-zero elements and their indexes. Sparse vectors don't have a fixed length and are stored in a special format for memory efficiency.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/vectors.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// A sparse vector with 4 non-zero elements\n{\n    \"indexes\": [1, 3, 5, 7],\n    \"values\": [0.1, 0.2, 0.3, 0.4]\n}\n```\n\n----------------------------------------\n\nTITLE: Activate Virtual Environment\nDESCRIPTION: Activates a Python virtual environment using the `source` command in bash. This isolates the project's dependencies from the system-wide Python installation. Assumes a virtual environment named `tutorial-env` has been created.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/search-beginners.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"source tutorial-env/bin/activate\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection\nDESCRIPTION: Establishes connection to a Qdrant server and creates a new collection with specified vector parameters. Configures vector dimensions (768), cosine distance metric, and segment optimization settings for the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-large-segments/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n    optimizers_config=models.OptimizersConfigDiff(default_segment_number=2, max_segment_size=5000000),\n)\n```\n\n----------------------------------------\n\nTITLE: Extracting Attention Weights from Transformer Model in Python\nDESCRIPTION: Demonstrates how to extract and process attention weights from a transformer model for the [CLS] token. The code shows tokenization, attention extraction, and weight calculation for each token in the input text.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/bm42.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsentences = \"Hello, World - is the starting point in most programming languages\"\n\nfeatures = transformer.tokenize(sentences)\n\n# ...\n\nattentions = transformer.auto_model(**features, output_attentions=True).attentions\n\nweights = torch.mean(attentions[-1][0,:,0], axis=0)                       \n#                ▲               ▲  ▲   ▲                                 \n#                │               │  │   └─── [CLS] token is the first one\n#                │               │  └─────── First item of the batch         \n#                │               └────────── Last transformer layer       \n#                └────────────────────────── Average all 6 attention heads\n\nfor weight, token in zip(weights, tokens):\n    print(f\"{token}: {weight}\")\n```\n\n----------------------------------------\n\nTITLE: Re-enabling HNSW Indexing After Upload in TypeScript\nDESCRIPTION: TypeScript code to update a Qdrant collection by enabling HNSW indexing after bulk data upload. Sets the m parameter to 16 to activate the construction of the HNSW graph for efficient vector search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.updateCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n  },\n  hnsw_config: {\n    m: 16,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Batch Vector Search with City Filter in Qdrant using Python\nDESCRIPTION: Demonstrates how to perform batch vector similarity search in Qdrant with a filter condition on the 'city' field. The code connects to a Qdrant instance, creates a filter for London city, and executes multiple vector queries in batch with the specified filter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/batch-search/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nfilter_ = models.Filter(\n    must=[\n        models.FieldCondition(\n            key=\"city\",\n            match=models.MatchValue(\n                value=\"London\",\n            ),\n        )\n    ]\n)\n\nsearch_queries = [\n    models.QueryRequest(query=[0.2, 0.1, 0.9, 0.7], filter=filter_, limit=3),\n    models.QueryRequest(query=[0.5, 0.3, 0.2, 0.3], filter=filter_, limit=3),\n]\n\nclient.query_batch_points(collection_name=\"{collection_name}\", requests=search_queries)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Sparse Vector Index Configuration in Python\nDESCRIPTION: This code snippet demonstrates how to create a Qdrant collection with a configuration for indexing sparse vectors in memory. It sets up the client, defines the vector size and distance, and specifies the sparse vector configuration with on_disk set to false for in-memory storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector-index-on-disk/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.http import models\n\nclient = QdrantClient(\"localhost\", port=6333)\n\nclient.create_collection(\n    collection_name=\"my_collection\",\n    vectors_config=models.VectorParams(\n        size=100,\n        distance=models.Distance.COSINE\n    ),\n    sparse_vectors_config={\n        \"my_sparse\": models.SparseVectorParams(\n            index=models.SparseIndexParams(on_disk=False)\n        )\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Uploading Vectors to Qdrant Collection with Binary Quantization\nDESCRIPTION: This code snippet shows how to upload vectors and their associated payloads to a Qdrant collection with Binary Quantization. It uses batch uploading for efficiency.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/binary-quantization.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbatch_size = 10000\nclient.upload_collection(\n    collection_name=collection_name,\n    ids=range(len(dataset)),\n    vectors=dataset[\"openai\"],\n    payload=[\n        {\"text\": x} for x in dataset[\"text\"]\n    ],\n    parallel=10, # based on the machine\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection from Existing Collection\nDESCRIPTION: Initializes a new Qdrant collection with vector configuration copied from an existing collection. The code establishes a connection to a local Qdrant instance and creates a collection with 100-dimensional vectors using cosine distance metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/init-from/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=100, distance=models.Distance.COSINE),\n    init_from=models.InitFrom(collection=\"{from_collection_name}\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting Vector Points with Payloads in Qdrant\nDESCRIPTION: Initializes a Qdrant client and inserts multiple vector points with associated payload data including city names and prices. Each point contains a 4-dimensional vector and metadata stored in the payload field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-payload/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.upsert(\n    collection_name=\"{collection_name}\",\n    points=[\n        models.PointStruct(\n            id=1,\n            vector=[0.05, 0.61, 0.76, 0.74],\n            payload={\n                \"city\": \"Berlin\",\n                \"price\": 1.99,\n            },\n        ),\n        models.PointStruct(\n            id=2,\n            vector=[0.19, 0.81, 0.75, 0.11],\n            payload={\n                \"city\": [\"Berlin\", \"London\"],\n                \"price\": 1.99,\n            },\n        ),\n        models.PointStruct(\n            id=3,\n            vector=[0.36, 0.55, 0.47, 0.94],\n            payload={\n                \"city\": [\"Berlin\", \"Moscow\"],\n                \"price\": [1.99, 2.99],\n            },\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting Multi-Modal Vector Point in Qdrant using TypeScript\nDESCRIPTION: This snippet demonstrates how to upsert a point with multi-modal vectors (dense and sparse) into a Qdrant collection using the client API. It includes an image vector, a text vector, and a sparse text vector.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/named-vectors/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.upsert(\"{collection_name}\", {\n    points: [\n        {\n            id: 1,\n            vector: {\n                image: [0.9, 0.1, 0.1, 0.2],\n                text: [0.4, 0.7, 0.1, 0.8, 0.1],\n                text_sparse: {\n                    indices: [1, 3, 5, 7],\n                    values: [0.1, 0.2, 0.3, 0.4]\n                }\n            },\n        },\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Points by ID in Qdrant Collection Using Python Client\nDESCRIPTION: Shows how to retrieve specific points from a Qdrant collection using their unique IDs. The query uses the client.query_points() method with a collection name and point ID as parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/by-existing-id/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\", # <--- point id\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Go\nDESCRIPTION: This snippet demonstrates how to initialize a new Qdrant client in Go. It uses the `qdrant.NewClient` function, passing a `qdrant.Config` struct with the host and port details. The function returns a client instance and an error, which should be checked for proper initialization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/multivector/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up PremAI and Qdrant Clients in Python\nDESCRIPTION: This snippet demonstrates how to initialize the Prem and Qdrant clients by passing in necessary configuration such as API keys and server URLs in Python.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprem_client = Prem(api_key=\"xxxx-xxx-xxx\")\nqdrant_client = QdrantClient(url=QDRANT_SERVER_URL)\n```\n\n----------------------------------------\n\nTITLE: Creating a Range Condition with Qdrant Client in Rust\nDESCRIPTION: This code snippet illustrates how to use the Qdrant client to define a range condition for the 'price' field in a database query. It specifies minimum and maximum value constraints for filtering query results. This snippet requires the 'qdrant_client' crate as a dependency.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/range/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Range};\n\nCondition::range(\n    \"price\",\n    Range {\n        gt: None,\n        gte: Some(100.0),\n        lt: None,\n        lte: Some(450.0),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Points from Collection Using TypeScript\nDESCRIPTION: This snippet allows the user to delete specific points from a Qdrant collection by providing the collection name and an array of point IDs. It requires the Qdrant client to be initialized and connected to the appropriate service. The function outputs a confirmation of the deletion based on the points specified.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-points/simple/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.delete(\"{collection_name}\", {\n  points: [0, 3, 100],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Scalar Quantization in Qdrant\nDESCRIPTION: API call to enable scalar quantization with int8 compression, keeping vectors in RAM while reducing memory usage. The always_ram flag ensures quantized vectors remain in memory for optimal search performance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/indexing-optimization.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nPATCH /collections/your_collection\n{\n  \"quantization_config\": {\n    \"scalar\": {\n      \"type\": \"int8\",\n      \"always_ram\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upserting Points into Qdrant with C#\nDESCRIPTION: This snippet showcases how to use the Qdrant C# client to upsert points into a collection. It initializes a `QdrantClient`, creates a list of `PointStruct` objects with IDs, vectors, and payloads (including different data types like strings, string arrays, and nested lists as `Value`), and then uses `UpsertAsync` to add these points to the specified collection. The `collectionName` parameter specifies the target collection in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-payload/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpsertAsync(\n    collectionName: \"{collection_name}\",\n    points: new List<PointStruct>\n    {\n        new PointStruct\n        {\n            Id = 1,\n            Vectors = new[] { 0.05f, 0.61f, 0.76f, 0.74f },\n            Payload = { [\"city\"] = \"Berlin\", [\"price\"] = 1.99 }\n        },\n        new PointStruct\n        {\n            Id = 2,\n            Vectors = new[] { 0.19f, 0.81f, 0.75f, 0.11f },\n            Payload = { [\"city\"] = new[] { \"Berlin\", \"London\" } }\n        },\n        new PointStruct\n        {\n            Id = 3,\n            Vectors = new[] { 0.36f, 0.55f, 0.47f, 0.94f },\n            Payload =\n            {\n                [\"city\"] = new[] { \"Berlin\", \"Moscow\" },\n                [\"price\"] = new Value\n                {\n                    ListValue = new ListValue { Values = { new Value[] { 1.99, 2.99 } } }\n                }\n            }\n        }\n    }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Group Lookup API HTTP Request\nDESCRIPTION: HTTP POST request demonstrating the group lookup feature for searching points across collections with custom payload and vector options\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qdrant-1.3.x.md#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/chunks/points/search/groups\n{\n    \"vector\": [1.1],\n    \"group_by\": \"document_id\",  \n    \"limit\": 2,                 \n    \"group_size\": 2,            \n    \"with_lookup\": {\n        \"collection_name\": \"documents\",\n        \"with_payload\": [\"title\", \"text\"],\n        \"with_vectors: false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ChatGPT Plugin Configuration JSON\nDESCRIPTION: Complete configuration file for the AI plugin that tells ChatGPT how to use the plugin, including its purpose, authentication method, and API endpoints. This file must be accessible at /.well-known/ai-plugin.json.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/chatgpt-plugin.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schema_version\": \"v1\",\n  \"name_for_model\": \"qdrant\",\n  \"name_for_human\": \"Qdrant Documentation Plugin\",\n  \"description_for_model\": \"Plugin for searching through the Qdrant documentation to find answers to questions and retrieve relevant information. Use it whenever a user asks something that might be related to Qdrant vector database or semantic vector search\",\n  \"description_for_human\": \"Search through Qdrant docs\",\n  \"auth\": {\n    \"type\": \"user_http\",\n    \"authorization_type\": \"bearer\"\n  },\n  \"api\": {\n    \"type\": \"openapi\",\n    \"url\": \"https://your-application-name.fly.dev/.well-known/openapi.yaml\",\n    \"has_user_authentication\": false\n  },\n  \"logo_url\": \"https://your-application-name.fly.dev/.well-known/logo.png\",\n  \"contact_email\": \"email@domain.com\",\n  \"legal_info_url\": \"email@domain.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Recommendation Queries with Qdrant Rust Client\nDESCRIPTION: This code demonstrates how to create a Qdrant client and perform a recommendation query with both positive and negative examples. It shows how to set up the query with specific points by ID and vector values, apply a recommendation strategy, set result limits, and filter results by a specific condition.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/basic-recommend/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::\n    Condition, Filter, QueryPointsBuilder, RecommendInputBuilder, RecommendStrategy,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n    \nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(\n                RecommendInputBuilder::default()\n                    .add_positive(100)\n                    .add_positive(231)\n                    .add_positive(vec![0.2, 0.3, 0.4, 0.5])\n                    .add_negative(718)\n                    .strategy(RecommendStrategy::AverageVector)\n                    .build(),\n            )\n            .limit(3)\n            .filter(Filter::must([Condition::matches(\n                \"city\",\n                \"London\".to_string(),\n            )])),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector and Quantization Config\nDESCRIPTION: Initializes a Qdrant client and creates a new collection with 768-dimensional vectors using cosine similarity distance metric. Configures INT8 scalar quantization with 0.99 quantile and RAM storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-scalar-quantization-params/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n    quantization_config=models.ScalarQuantization(\n        scalar=models.ScalarQuantizationConfig(\n            type=models.ScalarType.INT8,\n            quantile=0.99,\n            always_ram=True,\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection for Gemini Embeddings\nDESCRIPTION: Code that creates a Qdrant collection configured for Gemini embeddings. It sets up a vector configuration with the correct dimension size (768) and using cosine distance metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/gemini.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(collection_name, vectors_config=\n    VectorParams(\n        size=768,\n        distance=Distance.COSINE,\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Data with Multiple Named Vectors in Python\nDESCRIPTION: Python code to load data into Qdrant using the Spark connector with multiple named vectors. This example demonstrates how to specify multiple vector fields and names.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/spark.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", \"<QDRANT_GRPC_URL>\")\n   .option(\"collection_name\", \"<QDRANT_COLLECTION_NAME>\")\n   .option(\"vector_fields\", \"<COLUMN_NAME>,<ANOTHER_COLUMN_NAME>\")\n   .option(\"vector_names\", \"<VECTOR_NAME>,<ANOTHER_VECTOR_NAME>\")\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Go\nDESCRIPTION: This code initializes a Qdrant client and creates a new collection. It sets up the client with a local host and port, then creates a collection with specified vector parameters and an option to initialize from another collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/init-from/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     100,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tInitFromCollection: qdrant.PtrOf(\"{from_collection_name}\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Points with Filter Conditions in Qdrant Python Client\nDESCRIPTION: This code deletes all points from a specified collection that match the given filter criteria. It uses a FilterSelector with a 'must' condition to target only points where the 'color' field equals 'red'. This is a common pattern for selective data removal in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-points/by-filter/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.delete(\n    collection_name=\"{collection_name}\",\n    points_selector=models.FilterSelector(\n        filter=models.Filter(\n            must=[\n                models.FieldCondition(\n                    key=\"color\",\n                    match=models.MatchValue(value=\"red\"),\n                ),\n            ],\n        )\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Querying vectors in Qdrant collection using Rust client\nDESCRIPTION: Demonstrates connecting to a Qdrant server and performing a vector similarity search with custom parameters. The code shows how to build a client connection, construct a query with a vector, set a limit on the number of results, and configure search parameters like HNSW ef and exact search mode.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-params/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{QueryPointsBuilder, SearchParamsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .params(SearchParamsBuilder::default().hnsw_ef(128).exact(false)),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Python\nDESCRIPTION: Creates a connection to the Qdrant server running locally on port 6333 using the qdrant-client library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/neural-search-tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Import client library\nfrom qdrant_client import QdrantClient\nfrom qdrant_client import models\nqdrant_client = QdrantClient(host='localhost', port=6333)\n```\n\n----------------------------------------\n\nTITLE: Loading Data with Combination of Named Dense and Sparse Vectors in Python\nDESCRIPTION: Python code to load data into Qdrant using the Spark connector with a combination of named dense and sparse vectors. This example shows how to specify both types of vectors in a single operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/spark.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", \"<QDRANT_GRPC_URL>\")\n   .option(\"collection_name\", \"<QDRANT_COLLECTION_NAME>\")\n   .option(\"vector_fields\", \"<COLUMN_NAME>,<ANOTHER_COLUMN_NAME>\")\n   .option(\"vector_names\", \"<VECTOR_NAME>,<ANOTHER_VECTOR_NAME>\")\n   .option(\"sparse_vector_value_fields\", \"<COLUMN_NAME>,<ANOTHER_COLUMN_NAME>\")\n   .option(\"sparse_vector_index_fields\", \"<COLUMN_NAME>,<ANOTHER_COLUMN_NAME>\")\n   .option(\"sparse_vector_names\", \"<SPARSE_VECTOR_NAME>,<ANOTHER_SPARSE_VECTOR_NAME>\")\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n----------------------------------------\n\nTITLE: Converting Mistral Embeddings to Qdrant Points\nDESCRIPTION: Transforms the embeddings from Mistral into Qdrant point structures that include the document ID, vector representation, and original text payload.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/mistral.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npoints = [\n    PointStruct(\n        id=idx,\n        vector=response.embedding,\n        payload={\"text\": text},\n    )\n    for idx, (response, text) in enumerate(zip(result.data, texts))\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection for Cohere Embeddings\nDESCRIPTION: Initializes a Qdrant client and creates a collection configured for Cohere's embed-multilingual-v3.0 model, which produces 1024-dimensional embeddings. The collection is set up for storing personal notes.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/cohere-rag-connector.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(\n    \"https://my-cluster.cloud.qdrant.io:6333\", \n    api_key=\"my-api-key\",\n)\nclient.create_collection(\n    collection_name=\"personal-notes\",\n    vectors_config=models.VectorParams(\n        size=1024,\n        distance=models.Distance.DOT,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Payload Index Representation in JSON\nDESCRIPTION: This snippet showcases a tabular representation of a payload index for a 'category' field. Each category maps to a list of corresponding point IDs, illustrating how metadata fields are linked to data points for accelerated search queries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-filtering.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\nPayload Index by keyword:\n+------------+-------------+\n| category   | id          |\n+------------+-------------+\n| laptop     | 1, 4, 7     |\n| desktop    | 2, 5, 9     |\n| speakers   | 3, 6, 8     |\n| keyboard   | 10, 11      |\n+------------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Vector Collection in Qdrant using Java\nDESCRIPTION: Creates a new collection in Qdrant with multiple vector spaces for different modalities (image and text) and sparse vector configuration. The example configures two dense vector spaces with different dimensions and distance metrics, plus a sparse vector space for text.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/named-vectors/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.Map;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.SparseVectorConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorParams;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorParamsMap;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(VectorsConfig.newBuilder().setParamsMap(\n                VectorParamsMap.newBuilder().putAllMap(Map.of(\"image\",\n                    VectorParams.newBuilder()\n                        .setSize(4)\n                        .setDistance(Distance.Dot)\n                        .build(),\n                    \"text\",\n                    VectorParams.newBuilder()\n                        .setSize(5)\n                        .setDistance(Distance.Cosine)\n                        .build()))))\n            .setSparseVectorsConfig(SparseVectorConfig.newBuilder().putMap(\n                \"text-sparse\", SparseVectorParams.getDefaultInstance()))\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Updating Qdrant Collection Configuration in C#\nDESCRIPTION: Demonstrates how to update a Qdrant collection's configuration using the C# client. The code sets HNSW parameters, vector configurations, and scalar quantization settings for optimizing vector search performance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/hnsw-and-quantization/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpdateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\thnswConfig: new HnswConfigDiff { EfConstruct = 123 },\n\tvectorsConfig: new VectorParamsDiffMap\n\t{\n\t\tMap =\n\t\t{\n\t\t\t{\n\t\t\t\t\"my_vector\",\n\t\t\t\tnew VectorParamsDiff\n\t\t\t\t{\n\t\t\t\t\tHnswConfig = new HnswConfigDiff { M = 3, EfConstruct = 123 }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tquantizationConfig: new QuantizationConfigDiff\n\t{\n\t\tScalar = new ScalarQuantization\n\t\t{\n\t\t\tType = QuantizationType.Int8,\n\t\t\tQuantile = 0.8f,\n\t\t\tAlwaysRam = true\n\t\t}\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Scroll Query in Go\nDESCRIPTION: This snippet demonstrates how to create a Qdrant client, configure the connection, and execute a scroll query with a filter. It uses the Qdrant Go client library to connect to a local Qdrant instance and perform a search on a specific collection with a range condition.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-array/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tShould: []*qdrant.Condition{\n\t\t\tqdrant.NewRange(\"country.cities[].population\", &qdrant.Range{\n\t\t\t\tGte: qdrant.PtrOf(9.0),\n\t\t\t}),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant gRPC Client Connection\nDESCRIPTION: Creates a Qdrant client connection to a local server running on default port 6334 using gRPC protocol. Establishes the connection without SSL encryption.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/named-vector/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Database in Go\nDESCRIPTION: Demonstrates how to set up a Qdrant client connection and execute a scroll query with filters. The code connects to a local Qdrant instance on port 6334 and performs a filtered search for points where the country name matches 'Germany'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-fields/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tShould: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"country.name\", \"Germany\"),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Prefetch for Hybrid Search Queries in Python\nDESCRIPTION: This snippet demonstrates how to set up the prefetch parameter for executing hybrid search by running multiple sub-queries simultaneously, allowing for a more efficient search process.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-hybrid-search.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprefetch = [\n        models.Prefetch(\n            query=dense_vectors,\n            using=\"all-MiniLM-L6-v2\",\n            limit=20,\n        ),\n        models.Prefetch(\n            query=models.SparseVector(**sparse_vectors.as_object()),\n            using=\"bm25\",\n            limit=20,\n        ),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Indexed Fields from Qdrant Collection\nDESCRIPTION: Code to query a Qdrant collection for its indexed fields, which will be used to restrict filter generation to valid fields only.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/automate-filtering-with-llms.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(\"http://localhost:6333\")\ncollection_info = client.get_collection(collection_name=\"test_filter\")\nindexes = collection_info.payload_schema\nprint(indexes)\n```\n\n----------------------------------------\n\nTITLE: Batch Recommendation API Request\nDESCRIPTION: Shows how to perform multiple recommendation requests in a single API call, improving efficiency for batch processing\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/explore.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/query-points-explore/recommend-batch/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Full-Text Match Filtering in Qdrant\nDESCRIPTION: Demonstrates how to use the full-text match condition for searching substrings or tokens within text fields. This depends on the full-text index configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/filtering.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"must\": [\n    {\n      \"key\": \"text_field\",\n      \"match\": {\n        \"text\": \"text to match\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking the RAG Chain for Question Answering\nDESCRIPTION: Demonstrates how to use the configured RAG chain to answer a specific question. This step showcases the final functionality of the RAG system in retrieving and generating relevant information.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-scaleway.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrag_chain.invoke(\"What is Task Decomposition?\")\n```\n\n----------------------------------------\n\nTITLE: Checking Collection Existence in Qdrant with TypeScript\nDESCRIPTION: This code snippet shows how to verify if a collection exists in the Qdrant vector database using the Qdrant TypeScript client. The method returns a boolean indicating whether the specified collection exists.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/check-collection-exists/simple/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.collectionExists(\"{collection_name}\");\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Collection with HTTP PUT Request\nDESCRIPTION: HTTP PUT request to create or update a Qdrant collection with 768-dimensional vectors using Cosine distance metric and x16 product quantization compression. The configuration enables RAM-based storage for quantized vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-product-quantization/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\"\n    },\n    \"quantization_config\": {\n        \"product\": {\n            \"compression\": \"x16\",\n            \"always_ram\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Quantization in Qdrant (Python)\nDESCRIPTION: This Python code snippet configures Product Quantization for a Qdrant collection using the Python client. It sets up a vector space with 1024 dimensions using Cosine distance, and applies x32 compression with the quantized data always kept in RAM.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-quantization.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=1024, distance=models.Distance.COSINE),\n    quantization_config=models.ProductQuantization(\n        product=models.ProductQuantizationConfig(\n            compression=models.CompressionRatio.X32,\n            always_ram=True,\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration\nDESCRIPTION: Initializes a Qdrant client and creates a new collection with 768-dimensional vectors using cosine distance. Sets memory mapping threshold to 20000 in the optimizer configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-optimizer-config/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\\n    CreateCollectionBuilder, Distance, OptimizersConfigDiffBuilder, VectorParamsBuilder,\\n};\\nuse qdrant_client::Qdrant;\\n\\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\\n\\nclient\\n    .create_collection(\\n        CreateCollectionBuilder::new(\"{collection_name}\")\\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine))\\n            .optimizers_config(OptimizersConfigDiffBuilder::default().memmap_threshold(20000)),\\n    )\\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Field Condition with MatchExcept in Qdrant\nDESCRIPTION: This Python code snippet demonstrates how to create a field condition in Qdrant using the `MatchExcept` operator. It allows filtering results where the value of the 'color' field is not equal to 'black' or 'yellow'. This is useful for excluding specific values from a vector search query based on metadata.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-except/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodels.FieldCondition(\n    key=\"color\",\n    match=models.MatchExcept(**{\"except\": [\"black\", \"yellow\"]}),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Geo-Radius Filter for Location-Based Search in Qdrant\nDESCRIPTION: Implementation of a geographic radius filter for location-based search using Qdrant's filtering capabilities. Creates a filter condition that searches within a specified radius from a given location point.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/food-discovery-demo.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import models\n\n# Create a geo radius filter\nquery_filter = models.Filter(\n    must=[\n        models.FieldCondition(\n            key=\"cafe.location\",\n            geo_radius=models.GeoRadius(\n                center=models.GeoPoint(\n                    lon=location.longitude,\n                    lat=location.latitude,\n                ),\n                radius=location.radius_km * 1000,\n            ),\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating Cohere Embeddings with Qdrant in Python\nDESCRIPTION: This snippet shows how to directly use the output from Cohere's co.embed API as input for Qdrant's upsert method. It demonstrates the ease of combining these two services for semantic search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qa-with-cohere-and-qdrant.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Putting the co.embed API response directly as Qdrant method input\nqdrant_client.upsert(\n    collection_name=\"collection\",\n    points=rest.Batch(\n        ids=[...],\n        vectors=cohere_client.embed(...).embeddings,\n        payloads=[...],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Pydantic Models for Graph Components in Python\nDESCRIPTION: This code defines Pydantic models to structure the LLM's responses into a usable format for graph components. It includes classes for individual graph elements and a collection of these elements.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/graphrag-qdrant-neo4j.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass single(BaseModel):\n    node: str\n    target_node: str\n    relationship: str\n\nclass GraphComponents(BaseModel):\n    graph: list[single]\n```\n\n----------------------------------------\n\nTITLE: Loading Data with Multiple Sparse Vectors in Python\nDESCRIPTION: Python code to load data into Qdrant using the Spark connector with multiple sparse vectors. This example demonstrates how to specify multiple sparse vector fields and names.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/spark.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", \"<QDRANT_GRPC_URL>\")\n   .option(\"collection_name\", \"<QDRANT_COLLECTION_NAME>\")\n   .option(\"sparse_vector_value_fields\", \"<COLUMN_NAME>,<ANOTHER_COLUMN_NAME>\")\n   .option(\"sparse_vector_index_fields\", \"<COLUMN_NAME>,<ANOTHER_COLUMN_NAME>\")\n   .option(\"sparse_vector_names\", \"<SPARSE_VECTOR_NAME>,<ANOTHER_SPARSE_VECTOR_NAME>\")\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n----------------------------------------\n\nTITLE: Defining and Indexing Documents\nDESCRIPTION: Creating Document objects with metadata and inserting them into the VectorStoreIndex.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/llama-index-multitenancy.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.core.schema import Document\n\ndocuments = [\n    Document(\n        text=\"LlamaIndex is a simple, flexible data framework for connecting custom data sources to large language models.\",\n        metadata={\n            \"library\": \"llama-index\",\n        },\n    ),\n    Document(\n        text=\"Qdrant is a vector database & vector similarity search engine.\",\n        metadata={\n            \"library\": \"qdrant\",\n        },\n    ),\n]\n\nfor document in documents:\n    index.insert(document)\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings\nDESCRIPTION: Generates multivector embeddings for the movie descriptions using ColBERT model.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-colbert.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndescriptions_embeddings = list(\n    embedding_model.embed(descriptions)\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Search in Qdrant\nDESCRIPTION: Generate a query embedding and search for the most relevant documents using cosine similarity\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/snowflake.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nquery_embedding = next(embedding_model.query_embed(\"What is the best to use for vector search scaling?\"))\n\nqclient.search(\n    collection_name=COLLECTION_NAME,\n    query_vector=query_embedding,\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst query_embedding = await extractor(\"What is the best to use for vector search scaling?\", {\n    normalize: true,\n    pooling: 'cls'\n});\n\nawait client.search(COLLECTION_NAME, {\n    vector: query_embedding.tolist()[0],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Vector Collection with Client Configuration\nDESCRIPTION: Initializes a Qdrant vector collection with specific vector size, distance metric, and storage configuration using the Qdrant JavaScript client\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-vectors-and-hnsw-on-disk/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n    on_disk: true,\n  },\n  hnsw_config: {\n    on_disk: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection for Video Embeddings\nDESCRIPTION: Code to create a Qdrant collection with appropriate vector dimensions for storing video embeddings. The collection uses a 768-dimensional vector space with cosine similarity.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/mixpeek.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n    collection_name=\"video_chunks\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE)\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Points using Python\nDESCRIPTION: This snippet demonstrates how to query points from a Qdrant database collection using Python. It uses the qdrant-client library to connect to a local instance of Qdrant and performs a query operation to prefetch points that match dense vector conditions and specific field criteria like color. The client also orders the resulting points by the 'price' field. Key dependencies include the qdrant-client library and a running Qdrant instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-with-payload/python.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=[\n        models.Prefetch(\n            query=[0.01, 0.45, 0.67],  # <-- dense vector\n            filter=models.Filter(\n                must=models.FieldCondition(\n                    key=\"color\",\n                    match=models.MatchValue(value=\"red\"),\n                ),\n            ),\n            limit=10,\n        ),\n        models.Prefetch(\n            query=[0.01, 0.45, 0.67],  # <-- dense vector\n            filter=models.Filter(\n                must=models.FieldCondition(\n                    key=\"color\",\n                    match=models.MatchValue(value=\"green\"),\n                ),\n            ),\n            limit=10,\n        ),\n    ],\n    query=models.OrderByQuery(order_by=\"price\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Quantization Search Parameters\nDESCRIPTION: This Python code snippet demonstrates how to query points in a Qdrant collection using the `qdrant_client` library.  It configures search parameters to ignore quantization during the query, ensuring that the search is performed on the original vectors. The snippet requires the `qdrant_client` package to be installed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-ignored-quantization/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    search_params=models.SearchParams(\n        quantization=models.QuantizationSearchParams(\n            ignore=True,\n        )\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Inserting Points into Qdrant Collection via HTTP PUT\nDESCRIPTION: This code snippet shows how to insert a point into a Qdrant collection using an HTTP PUT request. It includes the point's ID, a payload with a color attribute, and a 3-dimensional vector representation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/uuid-one-point-simple/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/points\n{\n    \"points\": [\n        {\n            \"id\": \"5c56c793-69f3-4fbf-87e6-c4bf54c28c26\",\n            \"payload\": {\"color\": \"red\"},\n            \"vector\": [0.9, 0.1, 0.1]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Grouped Points in Qdrant using Python\nDESCRIPTION: Shows how to query vector points with grouping in Qdrant. The query performs vector similarity search and groups results by document_id field, limiting to 4 groups with maximum 2 points per group.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-groups/basic/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points_groups(\n    collection_name=\"{collection_name}\",\n    # Same as in the regular query_points() API\n    query=[1.1],\n    # Grouping parameters\n    group_by=\"document_id\",  # Path of the field to group by\n    limit=4,  # Max amount of groups\n    group_size=2,  # Max amount of points per group\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Strong Ordering in Python\nDESCRIPTION: This Python snippet shows how to use the Qdrant client to upsert points into a specified collection with strong ordering. It constructs a batch with specific IDs, payloads, and vectors and specifies the write ordering.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n    collection_name=\"{collection_name}\",\n    points=models.Batch(\n        ids=[1, 2, 3],\n        payloads=[\n            {\"color\": \"red\"},\n            {\"color\": \"green\"},\n            {\"color\": \"blue\"},\n        ],\n        vectors=[\n            [0.9, 0.1, 0.1],\n            [0.1, 0.9, 0.1],\n            [0.1, 0.1, 0.9],\n        ],\n    ),\n    ordering=models.WriteOrdering.STRONG,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Vector Search in C#\nDESCRIPTION: This snippet demonstrates how to establish a connection to a Qdrant server and execute a vector search query. It initializes a QdrantClient with a localhost connection, then performs a search operation with a 4-dimensional vector against a specific collection with quantization parameters and a limit of 3 results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-disabled-rescoring/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\tsearchParams: new SearchParams\n\t{\n\t\tQuantization = new QuantizationSearchParams { Rescore = false }\n\t},\n\tlimit: 3\n);\n```\n\n----------------------------------------\n\nTITLE: Uploading DataFrame to Qdrant\nDESCRIPTION: Uploads the vectorized Spark DataFrame to Qdrant using the specified format and connection options. This step ensures that the embeddings are stored properly in the Qdrant database for further querying.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/databricks.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\noptions = {\n    \"qdrant_url\": \"<QDRANT_GRPC_URL>\",\n    \"api_key\": \"<QDRANT_API_KEY>\",\n    \"collection_name\": \"<QDRANT_COLLECTION_NAME>\",\n    \"vector_fields\": \"dense_vector\",\n    \"vector_names\": \"dense\",\n    \"sparse_vector_value_fields\": \"sparse_vector_values\",\n    \"sparse_vector_index_fields\": \"sparse_vector_indices\",\n    \"sparse_vector_names\": \"sparse\",\n    \"schema\": embeddings_df.schema.json(),\n}\n\nembeddings_df.write.format(\"io.qdrant.spark.Qdrant\").options(**options).mode(\n    \"append\"\n).save()\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection with Sparse Vectors in Go\nDESCRIPTION: This snippet demonstrates how to create a Qdrant client connection and set up a new collection with sparse vector configuration for text data. It uses the Qdrant Go client library to establish a connection to a local Qdrant instance and create a collection with specific parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tSparseVectorsConfig: qdrant.NewSparseVectorsConfig(\n\t\tmap[string]*qdrant.SparseVectorParams{\n\t\t\t\"text\": {},\n\t\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Haystack Integration\nDESCRIPTION: Command to install the Qdrant document store package for Haystack integration via pip.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/haystack.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install qdrant-haystack\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Python Client\nDESCRIPTION: Command to install the Qdrant client library for Python using pip.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/neural-search-tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install qdrant-client\n```\n\n----------------------------------------\n\nTITLE: Implementing Scalar Quantization in Qdrant Collection\nDESCRIPTION: Creates a collection with scalar quantization configuration to compress vector data. Includes settings for vector size, distance metric, and quantization parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-resource-optimization.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n   collection_name=\"{collection_name}\",\n   vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),\n   quantization_config=models.ScalarQuantization(\n       scalar=models.ScalarQuantizationConfig(\n           type=models.ScalarType.INT8,\n           quantile=0.99,\n           always_ram=True,\n       ),\n   ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with HNSW Configuration in Rust\nDESCRIPTION: Demonstrates how to create a new Qdrant collection with 768-dimensional vectors using cosine distance and custom HNSW configuration parameters. The code establishes a connection to a local Qdrant instance and sets up a collection with specific vector parameters and HNSW index settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-disabled-global-hnsw/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\\n    CreateCollectionBuilder, Distance, HnswConfigDiffBuilder, VectorParamsBuilder,\\n};\\nuse qdrant_client::Qdrant;\\n\\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\\n\\nclient\\n    .create_collection(\\n        CreateCollectionBuilder::new(\"{collection_name}\")\\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine))\\n            .hnsw_config(HnswConfigDiffBuilder::default().payload_m(16).m(0)),\\n    )\\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Information in Qdrant\nDESCRIPTION: This snippet shows how to retrieve detailed information about a collection including its status, vector counts, and configuration parameters like HNSW settings and optimizer configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/collections.md#2025-04-21_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl 'http://localhost:6333/collections/my_collection'\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database with TypeScript\nDESCRIPTION: This code demonstrates how to initialize a Qdrant client connection to a local instance and execute a vector similarity search query. The query includes a vector of floating-point values and specifies which payload fields to return in the results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-payload-fields/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  query: [0.2, 0.1, 0.9, 0.7],\n  with_payload: [\"city\", \"village\", \"town\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection Alias\nDESCRIPTION: Updates collection aliases by creating a new alias 'production_collection' that points to 'example_collection'. This allows for transparent collection switching and management in production environments.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/create/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.updateCollectionAliases({\n  actions: [\n    {\n      create_alias: {\n        collection_name: \"example_collection\",\n        alias_name: \"production_collection\",\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Query with Read Consistency\nDESCRIPTION: HTTP endpoint example for querying points with majority consistency, including vector query, city filter, and search parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_29\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query?consistency=majority\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"filter\": {\n        \"must\": [\n            {\n                \"key\": \"city\",\n                \"match\": {\n                    \"value\": \"London\"\n                }\n            }\n        ]\n    },\n    \"params\": {\n        \"hnsw_ef\": 128,\n        \"exact\": false\n    },\n    \"limit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Jina Embeddings and Mixtral LLM\nDESCRIPTION: Sets up the Jina Embeddings API and Mixtral LLM for use with LlamaIndex, configuring them with the appropriate API keys.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/hybrid-search-llamaindex-jinaai.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.embeddings.jinaai import JinaEmbedding\n\njina_embedding_model = JinaEmbedding(\n    model=\"jina-embeddings-v2-base-en\",\n    api_key=os.getenv(\"JINAAI_API_KEY\"),\n)\n\nfrom llama_index.llms.huggingface import HuggingFaceInferenceAPI\n\nmixtral_llm = HuggingFaceInferenceAPI(\n    model_name = \"mistralai/Mixtral-8x7B-Instruct-v0.1\",\n    token=os.getenv(\"HF_INFERENCE_API_KEY\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Import Qdrant and Sentence Transformer Models\nDESCRIPTION: Imports necessary modules from the `qdrant_client` and `sentence_transformers` libraries. `models` from `qdrant_client` provides data structures for interacting with Qdrant, `QdrantClient` is the client class, and `SentenceTransformer` from `sentence_transformers` is used to load pre-trained sentence embedding models.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/search-beginners.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"from qdrant_client import models, QdrantClient\\nfrom sentence_transformers import SentenceTransformer\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Querying Collection with Filters in Python\nDESCRIPTION: This code initializes a Qdrant client and performs a scroll operation on a specified collection. It applies multiple filter conditions to match documents where the city is 'London' and the color is 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-must-filter/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"city\",\n                match=models.MatchValue(value=\"London\"),\n            ),\n            models.FieldCondition(\n                key=\"color\",\n                match=models.MatchValue(value=\"red\"),\n            ),\n        ]\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Vector Recommendations with Filtering\nDESCRIPTION: Executes a batch query with multiple recommendation points, using positive and negative vector references to find similar vectors while applying city-based filtering.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-batch/go.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nclient.QueryBatch(context.Background(), &qdrant.QueryBatchPoints{\n    CollectionName: \"{collection_name}\",\n    QueryPoints: []*qdrant.QueryPoints{\n        {\n            CollectionName: \"{collection_name}\",\n            Query: qdrant.NewQueryRecommend(&qdrant.RecommendInput{\n                Positive: []*qdrant.VectorInput{\n                    qdrant.NewVectorInputID(qdrant.NewIDNum(100)),\n                    qdrant.NewVectorInputID(qdrant.NewIDNum(231)),\n                },\n                Negative: []*qdrant.VectorInput{\n                    qdrant.NewVectorInputID(qdrant.NewIDNum(718)),\n                },\n            }),\n            Filter: &filter,\n        },\n        {\n            CollectionName: \"{collection_name}\",\n            Query: qdrant.NewQueryRecommend(&qdrant.RecommendInput{\n                Positive: []*qdrant.VectorInput{\n                    qdrant.NewVectorInputID(qdrant.NewIDNum(200)),\n                    qdrant.NewVectorInputID(qdrant.NewIDNum(67)),\n                },\n                Negative: []*qdrant.VectorInput{\n                    qdrant.NewVectorInputID(qdrant.NewIDNum(300)),\n                },\n            }),\n            Filter: &filter,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Embedding Models from FastEmbed in Python\nDESCRIPTION: This snippet imports different embedding models from the FastEmbed library to be used in the hybrid search implementation. It essential for setting up the embedding generation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-hybrid-search.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastembed import TextEmbedding, LateInteractionTextEmbedding, SparseTextEmbedding\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Vector Database Connection\nDESCRIPTION: Sets up Qdrant client connection with vector size configuration and cosine distance metric. Creates collection and index for video metadata filtering.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/talk-with-youtube-without-paying-a-cent-francesco-saverio-zuppichini-vector-space-talks.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = QdrantClient()\ncollection_config = {\n    \"vector_size\": vector_size,\n    \"distance\": \"cosine\"\n}\nclient.create_collection(\"embeddings\", collection_config)\nclient.create_index(\"embeddings\", field_name=\"metadata.video_id\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Points for Deletion\nDESCRIPTION: This snippet illustrates using filters to remove specific points that match a defined criterion, such as color in this case.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/points.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/delete-points/by-filter/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents into the Collection in Python\nDESCRIPTION: This Python snippet shows how to insert generated points into a Qdrant collection by performing an upsert operation with the designated collection name.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndoc_ids = list(range(len(embeddings)))\n\nqdrant_client.upsert(\n    collection_name=COLLECTION_NAME, \n    points=points\n )\n```\n\n----------------------------------------\n\nTITLE: Querying Recommendations in Go\nDESCRIPTION: This snippet performs a query to recommend items from a Qdrant collection based on specified positive and negative input vectors. It uses the context for the query execution and specifies the collection names for both the query and the lookup. The snippet requires the Qdrant Go client library for handling queries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-lookup-from/go.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.Query(context.Background(), &qdrant.QueryPoints{\n    CollectionName: \"{collection_name}\",\n    Query: qdrant.NewQueryRecommend(&qdrant.RecommendInput{\n        Positive: []*qdrant.VectorInput{\n            qdrant.NewVectorInputID(qdrant.NewIDNum(100)),\n            qdrant.NewVectorInputID(qdrant.NewIDNum(231)),\n        },\n        Negative: []*qdrant.VectorInput{\n            qdrant.NewVectorInputID(qdrant.NewIDNum(718)),\n        },\n    }),\n    Using: qdrant.PtrOf(\"image\"),\n    LookupFrom: &qdrant.LookupLocation{\n        CollectionName: \"{external_collection_name}\",\n        VectorName:     qdrant.PtrOf(\"{external_vector_name}\"),\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a QdrantClusterScheduledSnapshot\nDESCRIPTION: This snippet shows how to create a recurring backup using the `QdrantClusterScheduledSnapshot` resource.  It defines a schedule for creating snapshots of the Qdrant cluster, and includes parameters for specifying the cluster ID, schedule, and retention period. The `cluster-id` and `customer-id` labels must match the corresponding `QdrantCluster` resource.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/backups.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: qdrant.io/v1\nkind: QdrantClusterScheduledSnapshot\nmetadata:\n  name: \"qdrant-a7d8d973-0cc5-42de-8d7b-c29d14d24840-snapshot-timestamp\"\n  labels:\n    cluster-id: \"a7d8d973-0cc5-42de-8d7b-c29d14d24840\"\n    customer-id: \"acme-industries\"\nspec:\n  scheduleShortId: a7d8d973\n  cluster-id: \"a7d8d973-0cc5-42de-8d7b-c29d14d24840\"\n  # every hour\n  schedule: \"0 * * * *\"\n  retention: 1h\n```\n```\n\n----------------------------------------\n\nTITLE: Upserting Multi-Vector Point in Qdrant using Python\nDESCRIPTION: This code demonstrates how to upsert a point with multiple vector types (dense and sparse) into a Qdrant collection. It includes an image vector, a text vector, and a sparse text vector, showcasing Qdrant's flexibility in handling different vector formats.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/named-vectors/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n    collection_name=\"{collection_name}\",\n    points=[\n        models.PointStruct(\n            id=1,\n            vector={\n                \"image\": [0.9, 0.1, 0.1, 0.2],\n                \"text\": [0.4, 0.7, 0.1, 0.8, 0.1],\n                \"text-sparse\": {\n                    \"indices\": [1, 3, 5, 7],\n                    \"values\": [0.1, 0.2, 0.3, 0.4],\n                },\n            },\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Ratings to Sparse Vectors\nDESCRIPTION: Transforms user ratings into sparse vector format for efficient similarity search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/collaborative-filtering.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nuser_sparse_vectors = defaultdict(lambda: {\"values\": [], \"indices\": []})\nfor row in ratings_agg_df.itertuples():\n    user_sparse_vectors[row.userId][\"values\"].append(row.rating)\n    user_sparse_vectors[row.userId][\"indices\"].append(int(row.movieId))\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection with Multiple Vector Configurations in C#\nDESCRIPTION: This code initializes a Qdrant client connection to a local server and creates a new collection with custom vector configurations for 'image' and 'text' data types. It demonstrates how to set up different vector sizes and distance metrics for each data type within the same collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/multiple-vectors/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParamsMap\n\t{\n\t\tMap =\n\t\t{\n\t\t\t[\"image\"] = new VectorParams { Size = 4, Distance = Distance.Dot },\n\t\t\t[\"text\"] = new VectorParams { Size = 8, Distance = Distance.Cosine },\n\t\t}\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Sharding in Qdrant using Python\nDESCRIPTION: Python code example showing how to create a collection in Qdrant with a custom number of shards for distributed deployment.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-a-vector-database.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),\n    shard_number=4, # Custom number of shards\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Upserting Vector Data in Java\nDESCRIPTION: This code demonstrates how to create a Qdrant client connection and upsert a vector with metadata into a specified collection. It uses the Qdrant Java client library to perform these operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/uuid-one-point-simple/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.ValueFactory.value;\nimport static io.qdrant.client.VectorsFactory.vectors;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PointStruct;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .upsertAsync(\n        \"{collection_name}\",\n        List.of(\n            PointStruct.newBuilder()\n                .setId(id(UUID.fromString(\"5c56c793-69f3-4fbf-87e6-c4bf54c28c26\")))\n                .setVectors(vectors(0.05f, 0.61f, 0.76f, 0.74f))\n                .putAllPayload(Map.of(\"color\", value(\"Red\")))\n                .build()))\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Loading Data with Multiple Multi-vectors in Python\nDESCRIPTION: Python code to load data into Qdrant using the Spark connector with multiple multi-vectors. This example shows how to specify multiple multi-vector fields and names.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/spark.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", \"<QDRANT_GRPC_URL>\")\n   .option(\"collection_name\", \"<QDRANT_COLLECTION_NAME>\")\n   .option(\"multi_vector_fields\", \"<COLUMN_NAME>,<ANOTHER_COLUMN_NAME>\")\n   .option(\"multi_vector_names\", \"<MULTI_VECTOR_NAME>,<ANOTHER_MULTI_VECTOR_NAME>\")\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n----------------------------------------\n\nTITLE: Adding Documents to Qdrant Collection in Python\nDESCRIPTION: This function processes documents, splits them into chunks, and adds them to a specified Qdrant collection using the given RAG parameters and embedding model.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef add_documents(client, collection_name, chunk_size, chunk_overlap, embedding_model_name):\n    \"\"\"\n    This function adds documents to the desired Qdrant collection given the specified RAG parameters.\n    \"\"\"\n\n    ## Processing each document with desired TEXT_SPLITTER_ALGO, CHUNK_SIZE, CHUNK_OVERLAP\n    text_splitter = RecursiveCharacterTextSplitter(\n        chunk_size=chunk_size,\n        chunk_overlap=chunk_overlap,\n        add_start_index=True,\n        separators=[\"\\n\\n\", \"\\n\", \".\", \" \", \"\"],\n    )\n\n    docs_processed = []\n    for doc in langchain_docs:\n        docs_processed += text_splitter.split_documents([doc])\n\n    ## Processing documents to be encoded by Fastembed\n    docs_contents = []\n    docs_metadatas = []\n\n    for doc in docs_processed:\n        if hasattr(doc, 'page_content') and hasattr(doc, 'metadata'):\n            docs_contents.append(doc.page_content)\n            docs_metadatas.append(doc.metadata)\n        else:\n            # Handle the case where attributes are missing\n            print(\"Warning: Some documents do not have 'page_content' or 'metadata' attributes.\")\n\n    print(\"processed: \", len(docs_processed))\n    print(\"content: \", len(docs_contents))\n    print(\"metadata: \", len(docs_metadatas))\n\n    ## Adding documents to Qdrant using desired embedding model\n    client.set_model(embedding_model_name=embedding_model_name)\n    client.add(collection_name=collection_name, metadata=docs_metadatas, documents=docs_contents)\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Search Query with Qdrant in Rust\nDESCRIPTION: Demonstrates how to create a Qdrant client connection and execute a vector similarity search query. The example includes setting up search parameters, quantization settings, and specifying the query vector with dimension 4. The search is limited to return 3 results and uses disabled rescoring for quantization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/disable-quantization-rescoring/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\\n    QuantizationSearchParamsBuilder, QueryPointsBuilder, SearchParamsBuilder,\\n};\\nuse qdrant_client::Qdrant;\\n\\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\\n\\nclient\\n    .query(\\n        QueryPointsBuilder::new(\"{collection_name}\")\\n            .query(vec![0.2, 0.1, 0.9, 0.7])\\n            .limit(3)\\n            .params(\\n                SearchParamsBuilder::default()\\n                    .quantization(QuantizationSearchParamsBuilder::default().rescore(false)),\\n            ),\\n    )\\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Optimized Bulk Upload Configuration\nDESCRIPTION: Combined configuration for optimal bulk upload performance, including disabled HNSW indexing and increased indexing threshold.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/indexing-optimization.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nPATCH /collections/your_collection\n{\n  \"hnsw_config\": {\n    \"m\": 0\n  },\n  \"optimizer_config\": {\n    \"indexing_threshold\": 10000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling in Qdrant Collection using Python\nDESCRIPTION: This snippet demonstrates the use of the Qdrant client's scroll function to retrieve documents from a specified collection. It uses a filter condition to match documents where the 'color' field has the value 'red'. The snippet retrieves one document with its payload, skipping vector data. Key dependencies include the Qdrant client and associated data models. The main inputs are the collection name and filter conditions, while the output is the filtered data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-and-params/python.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclient.scroll(\n    collection_name=\\\"{collection_name}\\\",\\n    scroll_filter=models.Filter(\\n        must=[\\n            models.FieldCondition(key=\\\"color\\\", match=models.MatchValue(value=\\\"red\\\")),\\n        ]\\n    ),\\n    limit=1,\\n    with_payload=True,\\n    with_vectors=False,\\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Typescript\nDESCRIPTION: This snippet demonstrates how to initialize a Qdrant client using the `@qdrant/js-client-rest` library. It establishes a connection to a Qdrant instance running on localhost at port 6333.  The client object can then be used to perform operations on the Qdrant database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/integer-with-params/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables for Neo4j, Qdrant, and OpenAI in Python\nDESCRIPTION: This code snippet loads environment variables containing credentials for Neo4j, Qdrant, and OpenAI. It ensures secure storage of sensitive information like API keys and database credentials.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/graphrag-qdrant-neo4j.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Load environment variables\nload_dotenv()\n\n# Get credentials from environment variables\nqdrant_key = os.getenv(\"QDRANT_KEY\")\nqdrant_url = os.getenv(\"QDRANT_URL\")\nneo4j_uri = os.getenv(\"NEO4J_URI\")\nneo4j_username = os.getenv(\"NEO4J_USERNAME\")\nneo4j_password = os.getenv(\"NEO4J_PASSWORD\")\nopenai_key = os.getenv(\"OPENAI_API_KEY\")\n```\n\n----------------------------------------\n\nTITLE: Adding Search Filters to Qdrant Queries in Python\nDESCRIPTION: Demonstrates how to add conditional filters to Qdrant search queries. This example shows filtering search results by city, using Qdrant's filtering capabilities to narrow down search results based on metadata.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import models\n\n    ...\n\n    city_of_interest = \"Berlin\"\n\n    # Define a filter for cities\n    city_filter = models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"city\", \n                match=models.MatchValue(value=city_of_interest)\n            )\n        ]\n    )\n\n    search_result = self.qdrant_client.query(\n        collection_name=self.collection_name,\n        query_text=text,\n        query_filter=city_filter,\n        limit=5\n    )\n    ...\n```\n\n----------------------------------------\n\nTITLE: Executing Contextual Vector Query in Qdrant\nDESCRIPTION: Performs an asynchronous vector search query with context pairs and vector embedding using Qdrant client. Supports advanced vector search with context-based filtering and similarity matching.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/discovery-basic/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\").query(\n            DiscoverInputBuilder::new(\n                vec![0.2, 0.1, 0.9, 0.7],\n                ContextInputBuilder::default()\n                    .add_pair(100, 718)\n                    .add_pair(200, 300),\n            )\n            .build(),\n        ),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Scrolling Points Asynchronously in Qdrant Java Client\nDESCRIPTION: This Java snippet demonstrates how to scroll through points in a Qdrant collection asynchronously using a filter condition. It uses the Qdrant Java client library, specifically methods from the ConditionFactory and PointIdFactory classes, to create filters and identify points. The ScrollPoints and Filter builders are used to configure the scroll operation. The required dependency is the Qdrant Java client library, and the input is the collection name along with filter conditions specifying vectors. The output is an asynchronous operation handle.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-has-vector/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.hasVector;\nimport static io.qdrant.client.PointIdFactory.id;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addMust(hasVector(\"image\"))\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Matching Keywords with Grpc in C#\nDESCRIPTION: This snippet demonstrates how to match a keyword in a Qdrant database using its Grpc client. It invokes the MatchKeyword method with a field name and a UUID value to find relevant records. Dependencies include the Qdrant.Client.Grpc library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-uuid/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing static Qdrant.Client.Grpc.Conditions;\n\nMatchKeyword(\"uuid\", \"f47ac10b-58cc-4372-a567-0e02b2c3d479\");\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with cURL\nDESCRIPTION: This cURL command creates a new collection in Qdrant with specified vector configurations. It sets the vector size to 1024, uses Cosine distance, and sets the datatype to uint8.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-uint8/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"vectors\": {\n      \"size\": 1024,\n      \"distance\": \"Cosine\",\n      \"datatype\": \"uint8\"\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection in Rust\nDESCRIPTION: This code snippet demonstrates how to create a new collection in Qdrant using the Rust client. It initializes a Qdrant client, defines the collection's vector parameters (dimension and distance metric), and then sends a request to create the collection.  It uses the `qdrant-client` crate and asynchronous execution (`.await`).\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-vectors-on-disk/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse qdrant_client::qdrant::{CreateCollectionBuilder, Distance, VectorParamsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine).on_disk(true)),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Metrics Endpoint in Datadog\nDESCRIPTION: YAML configuration for setting the OpenMetrics endpoint to collect Qdrant metrics, typically pointing to the local Qdrant instance metrics endpoint\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/observability/datadog.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninstances:\n  - openmetrics_endpoint: http://localhost:6333/metrics\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Go\nDESCRIPTION: Establishes a connection to a Qdrant vector database running on localhost:6334 and creates a new collection with 1024-dimensional uint8 vectors using cosine distance metric. The code demonstrates client initialization and collection creation with specific vector parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-uint8/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     1024,\n\t\tDistance: qdrant.Distance_Cosine,\n\t\tDatatype: qdrant.Datatype_Uint8.Enum(),\n\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection and Inserting Documents in TypeScript\nDESCRIPTION: Creates a new Qdrant collection with the appropriate vector configuration and inserts the embedded documents. The collection uses cosine distance and vectors of size 1536.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/voyage.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst COLLECTION_NAME = \"example_collection\"\n\nawait client.createCollection(COLLECTION_NAME, {\n    vectors: {\n        size: 1536,\n        distance: 'Cosine',\n    }\n});\n\nawait client.upsert(COLLECTION_NAME, {\n    wait: true,\n    points\n});\n```\n\n----------------------------------------\n\nTITLE: Vectorizing Answers and Uploading to Qdrant in Python\nDESCRIPTION: This code vectorizes all the answers from the dataset using Cohere's co.embed API, then uploads them to Qdrant along with their payloads and identifiers. This process creates a searchable collection in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qa-with-cohere-and-qdrant.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nanswer_response = cohere_client.embed(\n    texts=dataset[\"train\"][\"long_answer\"],\n    model=\"large\",\n)\nvectors = [\n    # Conversion to float is required for Qdrant\n    list(map(float, vector)) \n    for vector in answer_response.embeddings\n]\nids = [entry[\"pubid\"] for entry in dataset[\"train\"]]\n\n# Filling up Qdrant collection with the embeddings generated by Cohere co.embed API\nqdrant_client.upsert(\n    collection_name=\"pubmed_qa\", \n    points=rest.Batch(\n        ids=ids,\n        vectors=vectors,\n        payloads=list(dataset[\"train\"]),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Batch Upserting Vectors in Qdrant\nDESCRIPTION: This snippet demonstrates how to perform a batch upsert of multiple vectors in a Qdrant collection. It creates a list of PointStruct objects and uses the upsert method to insert or update them in bulk.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-a-vector-database.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbatch_of_updates = [\n    PointStruct(id=product_id_1, vector=updated_vector_1, payload=new_payload_1),\n    PointStruct(id=product_id_2, vector=updated_vector_2, payload=new_payload_2),\n    # Add more points...\n]\n\nclient.upsert(\n    collection_name='product_collection',\n    points=batch_of_updates\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Database with TypeScript\nDESCRIPTION: This TypeScript code snippet initializes a Qdrant client using the Qdrant JavaScript client library and executes a query on a specific collection. The query is defined to discover data points with specified targets and contexts. The snippet depends on the @qdrant/js-client-rest package. It requires a collection name and parameters such as query targets and contexts. The expected input is a set of query parameters, and it returns query results with a maximum of 10 results. Ensure the Qdrant server is running locally on port 6333.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/discovery-basic/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: {\n        discover: {\n            target: [0.2, 0.1, 0.9, 0.7],\n            context: [\n                {\n                    positive: 100,\n                    negative: 718,\n                },\n                {\n                    positive: 200,\n                    negative: 300,\n                },\n            ],\n        }\n    },\n    limit: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Qdrant Vector Store with DSPy\nDESCRIPTION: This code snippet shows how to set up Qdrant vector store as a retrieval model in DSPy. It includes the process of initializing the vector store and configuring it for use with DSPy.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/dspy-vs-langchain.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\nfrom dspy.retrieve.qdrant import QdrantRetriever\n\nclient = QdrantClient(\"localhost\", port=6333)\n\nretriever = QdrantRetriever(\n    client=client,\n    collection_name=\"my_collection\",\n    number_of_retrievals=5,\n)\n\ndspy.configure(rm=retriever)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Java\nDESCRIPTION: This snippet shows how to create a Qdrant client using the gRPC interface with Java.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\\nimport io.qdrant.client.QdrantGrpcClient;\\n\\n// The Java client uses Qdrant's gRPC interface\\nQdrantClient client = new QdrantClient(\\n    QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with uint8 Embeddings in Qdrant\nDESCRIPTION: This code snippet demonstrates how to create a collection in Qdrant using uint8 embeddings. It specifies the vector size, distance metric, and datatype as uint8 for memory savings and search speed improvements.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.9.x.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 1024,\n      \"distance\": \"Dot\",\n      \"datatype\": \"uint8\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Simple Facet Count with Filter in Qdrant\nDESCRIPTION: This code demonstrates how to perform a facet count operation on a field with an optional filter. It retrieves counts of unique values in the 'size' field, limited to 10 results by default.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/payload.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": {\n    \"hits\": [\n      {\"value\": \"L\", \"count\": 19},\n      {\"value\": \"S\", \"count\": 10},\n      {\"value\": \"M\", \"count\": 5},\n      {\"value\": \"XL\", \"count\": 1},\n      {\"value\": \"XXL\", \"count\": 1}\n    ]\n  },\n  \"time\": 0.0001\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Points in Qdrant with Go\nDESCRIPTION: This snippet demonstrates how to perform a query on a specific Qdrant collection. It uses a QueryPoints structure with positive and negative vector inputs, leveraging the Qdrant client created previously. The 'collection_name' parameter must be replaced with the actual name of the collection you wish to query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-named-vectors/go.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.Query(context.Background(), &qdrant.QueryPoints{\n    CollectionName: \"{collection_name}\",\n    Query: qdrant.NewQueryRecommend(&qdrant.RecommendInput{\n        Positive: []*qdrant.VectorInput{\n            qdrant.NewVectorInputID(qdrant.NewIDNum(100)),\n            qdrant.NewVectorInputID(qdrant.NewIDNum(231)),\n        },\n        Negative: []*qdrant.VectorInput{\n            qdrant.NewVectorInputID(qdrant.NewIDNum(718)),\n        },\n    }),\n    Using: qdrant.PtrOf(\"image\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database with Custom Search Parameters in Rust\nDESCRIPTION: This snippet demonstrates connecting to a Qdrant vector database and performing a search query with custom parameters. It initializes a client connection to a local Qdrant instance, builds a query with a specific vector, limits the results to 3, and configures search parameters to ignore quantization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-ignored-quantization/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::\n    QuantizationSearchParamsBuilder, QueryPointsBuilder, SearchParamsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .params(\n                SearchParamsBuilder::default()\n                    .quantization(QuantizationSearchParamsBuilder::default().ignore(true)),\n            ),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Database in TypeScript\nDESCRIPTION: This code snippet initializes a Qdrant client and performs a complex query on a specified collection. The query includes multiple vectors and various settings for prefetching. It demonstrates how to structure a query with both dense and sparse vectors while controlling the result limits.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-multistage/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  prefetch: {\n    prefetch: {\n      query: [1, 23, 45, 67], // <------------- small byte vector\n      using: 'mrl_byte',\n      limit: 1000,\n    },\n    query: [0.01, 0.45, 0.67],  // <-- full dense vector\n    using: 'full',\n    limit: 100,\n  },\n  query: [\n    [0.1, 0.2], // <─┐\n    [0.2, 0.1], // < ├─ multi-vector\n    [0.8, 0.9], // < ┘\n  ],\n  using: 'colbert',\n  limit: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration in Java\nDESCRIPTION: Demonstrates initialization of QdrantClient and creation of a new collection with 1536-dimensional vectors using cosine distance metric and binary quantization. The code establishes a connection to a local Qdrant instance on port 6334 and configures vector parameters with RAM-based binary quantization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-binary-quantization/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.BinaryQuantization;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.QuantizationConfig;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(1536)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setQuantizationConfig(\n                QuantizationConfig.newBuilder()\n                    .setBinary(BinaryQuantization.newBuilder().setAlwaysRam(true).build())\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Sparse Vector Configuration in Python\nDESCRIPTION: This code initializes a Qdrant client and creates a new collection with custom configuration for sparse vectors. It sets up the collection with an IDF modifier for the 'text' sparse vector.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector-idf/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config={},\n    sparse_vectors_config={\n        \"text\": models.SparseVectorParams(\n            modifier=models.Modifier.IDF,\n        ),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Searching with Quantization Oversampling in Qdrant\nDESCRIPTION: This snippet shows how to perform a search with oversampling configuration. Oversampling allows tuning the trade-off between search quality and speed by pre-selecting more vectors with quantized index before rescoring.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/quantization.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vector\": [0.2, 0.1, 0.9, 0.7],\n  \"top\": 10,\n  \"with_vectors\": true,\n  \"quantization\": {\n    \"ignore\": false,\n    \"rescore\": true,\n    \"oversampling\": 2.4\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index with Qdrant Java Client\nDESCRIPTION: This Java snippet initializes a Qdrant client and creates a payload index asynchronously on a specified collection. The QdrantClient is configured to connect to a local server running on port 6334. The createPayloadIndexAsync method is used to define the payload index with specified schema type and index parameters. It requires the collection name, field name, schema type, and index parameters as key inputs and processes payload indexing asynchronously. The operation assumes that the Qdrant server is accessible and running on the specified host and port.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/with-group-id-as-tenant/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.PayloadIndexParams;\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\nimport io.qdrant.client.grpc.Collections.KeywordIndexParams;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createPayloadIndexAsync(\n        \"{collection_name}\",\n        \"group_id\",\n        PayloadSchemaType.Keyword,\n        PayloadIndexParams.newBuilder()\n            .setKeywordIndexParams(\n                KeywordIndexParams.newBuilder()\n                    .setIsTenant(true)\n                    .build())\n            .build(),\n        null,\n        null,\n        null)\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Go\nDESCRIPTION: Demonstrates establishing a connection to Qdrant server and creating a new collection with specific vector parameters and scalar quantization settings. The collection is configured with 768-dimensional vectors using cosine distance metric and on-disk storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/quantization-on-disk/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t\tOnDisk:   qdrant.PtrOf(true),\n\t}),\n\tQuantizationConfig: qdrant.NewQuantizationScalar(\n\t\t&qdrant.ScalarQuantization{\n\t\t\tType:      qdrant.QuantizationType_Int8,\n\t\t\tAlwaysRam: qdrant.PtrOf(false),\n\t\t},\n\t),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector Disk Storage in Qdrant Collection\nDESCRIPTION: Update a collection to enable on-disk vector storage for a specific named vector. This configuration allows persistent storage of vector data, improving performance and data durability.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/vectors-to-disk-named/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncollection_config = {\"vectors\": {\"my_vector\": {\"on_disk\": True}}}\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Collection with HTTP PUT Request\nDESCRIPTION: HTTP PUT request to create or update a Qdrant collection with specified vector configurations. Defines settings for both dense vectors (size 128, Cosine distance) and sparse vectors with float16 datatype.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-float16-sparse-and-dense/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n  \"vectors\": {\n    \"size\": 128,\n    \"distance\": \"Cosine\",\n    \"datatype\": \"float16\" // <-- For dense vectors\n  },\n  \"sparse_vectors\": {\n    \"text\": {\n      \"index\": {\n        \"datatype\": \"float16\" // <-- And for sparse vectors \n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Collection with Vector Configuration\nDESCRIPTION: Creates a new Qdrant collection with 768-dimensional vectors using cosine similarity and 16x product quantization compression. The configuration includes vector parameters and quantization settings for optimized storage and retrieval.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-product-quantization/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n    quantization_config=models.ProductQuantization(\n        product=models.ProductQuantizationConfig(\n            compression=models.CompressionRatio.X16,\n            always_ram=True,\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Upserting Vectors\nDESCRIPTION: Shows how to create a Qdrant client instance and upsert multiple vectors with associated payloads. The example includes three vectors with different dimensions and group_id payloads, demonstrating batch vector insertion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-tenant-group-id/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.upsert(\"{collection_name}\", {\n  points: [\n    {\n      id: 1,\n      payload: { group_id: \"user_1\" },\n      vector: [0.9, 0.1, 0.1],\n    },\n    {\n      id: 2,\n      payload: { group_id: \"user_1\" },\n      vector: [0.1, 0.9, 0.1],\n    },\n    {\n      id: 3,\n      payload: { group_id: \"user_2\" },\n      vector: [0.1, 0.1, 0.9],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Batch Update Points Operations in Qdrant using Python\nDESCRIPTION: Comprehensive example showing multiple point operations in Qdrant including vector updates, payload management, and deletions. Demonstrates upsert operations, vector updates, payload modifications, and point deletion using the batch_update_points method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/batch-update-points/basic/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.batch_update_points(\n    collection_name=\"{collection_name}\",\n    update_operations=[\n        models.UpsertOperation(\n            upsert=models.PointsList(\n                points=[\n                    models.PointStruct(\n                        id=1,\n                        vector=[1.0, 2.0, 3.0, 4.0],\n                        payload={},\n                    ),\n                ]\n            )\n        ),\n        models.UpdateVectorsOperation(\n            update_vectors=models.UpdateVectors(\n                points=[\n                    models.PointVectors(\n                        id=1,\n                        vector=[1.0, 2.0, 3.0, 4.0],\n                    )\n                ]\n            )\n        ),\n        models.DeleteVectorsOperation(\n            delete_vectors=models.DeleteVectors(points=[1], vector=[\"\"])\n        ),\n        models.OverwritePayloadOperation(\n            overwrite_payload=models.SetPayload(\n                payload={\"test_payload\": 1},\n                points=[1],\n            )\n        ),\n        models.SetPayloadOperation(\n            set_payload=models.SetPayload(\n                payload={\n                    \"test_payload_2\": 2,\n                    \"test_payload_3\": 3,\n                },\n                points=[1],\n            )\n        ),\n        models.DeletePayloadOperation(\n            delete_payload=models.DeletePayload(keys=[\"test_payload_2\"], points=[1])\n        ),\n        models.ClearPayloadOperation(clear_payload=models.PointIdsList(points=[1])),\n        models.DeleteOperation(delete=models.PointIdsList(points=[1])),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SmolAgents CodeAgent with Qdrant Tool\nDESCRIPTION: Setup code for initializing the CodeAgent with the custom QdrantQueryTool and HuggingFace API model.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/smolagents.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom smolagents import CodeAgent, HfApiModel\nimport os\n\n# HuggingFace Access Token\n# https://huggingface.co/docs/hub/en/security-tokens\nos.environ[\"HF_TOKEN\"] = \"----------\"\n\nagent = CodeAgent(\n    tools=[QdrantQueryTool()], model=HfApiModel(), max_iterations=4, verbose=True\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Database in Rust\nDESCRIPTION: This Rust code snippet connects to a Qdrant database and performs a query using `Qdrant`. It utilizes the `QueryPointsBuilder` to specify conditions such as filtering by color and limiting results to a certain number. The snippet requires the `qdrant_client` library and establishes a connection with the database hosted at a specific URL. Key parameters include collection name and vectors for query conditions. It outputs the result of the query execution and handles multiple condition filters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-with-payload/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{Condition, Filter, PrefetchQueryBuilder, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .query(Query::new_nearest(vec![0.01, 0.45, 0.67]))\n            .filter(Filter::must([Condition::matches(\n                \"color\",\n                \"red\".to_string(),\n            )]))\n            .limit(10u64)\n        )\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .query(Query::new_nearest(vec![0.01, 0.45, 0.67]))\n            .filter(Filter::must([Condition::matches(\n                \"color\",\n                \"green\".to_string(),\n            )]))\n            .limit(10u64)\n        )\n        .query(Query::new_order_by(\"price\"))\n).await?;\n\n```\n\n----------------------------------------\n\nTITLE: Setting Qdrant Environment Variables in Python\nDESCRIPTION: Sets environment variables for Qdrant URL and API key using Python's os module.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-customer-support-cohere-airbyte-aws.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nos.environ[\"QDRANT_URL\"] = \"https://qdrant.example.com\"\nos.environ[\"QDRANT_API_KEY\"] = \"your-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Updating Point Properties in Qdrant Collection Using Python\nDESCRIPTION: This snippet updates specified properties for unique points in a Qdrant collection. It requires the Qdrant client to be initialized and the collection's unique point IDs to be provided. The function sends an update request to the Qdrant server with the new payload data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/set-payload/by-point-id/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef update_properties(collection, points, payload):\n    \"\"\"\n    Update the specified properties with the provided values for the selected points.\n    \n    Args:\n        collection (str): The collection name.\n        points (list): List of unique point IDs to update.\n        payload (dict): The properties to set.\n    \"\"\"\n    # Code to update the properties in the collection\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents into Qdrant Knowledge Base\nDESCRIPTION: Demonstrates how to create Document objects and insert them into the Qdrant knowledge base using the upsert method. This allows adding data for retrieval and generation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/canopy.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom canopy.models.data_models import Document\n\ndocuments = [\n    Document(\n        id=\"1\",\n        text=\"U2 are an Irish rock band from Dublin, formed in 1976.\",\n        source=\"https://en.wikipedia.org/wiki/U2\",\n    ),\n    Document(\n        id=\"2\",\n        text=\"Arctic Monkeys are an English rock band formed in Sheffield in 2002.\",\n        source=\"https://en.wikipedia.org/wiki/Arctic_Monkeys\",\n        metadata={\"my-key\": \"my-value\"},\n    ),\n]\n\nkb.upsert(documents)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database in Java\nDESCRIPTION: Demonstrates initializing a Qdrant client connection and performing a nearest neighbor vector search query. The example shows connecting to a local Qdrant instance, executing an async query with vector coordinates, excluding specific payload fields, and limiting results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/exclude-fields/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.WithPayloadSelectorFactory.exclude;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setWithPayload(exclude(List.of(\"city\")))\n                .setLimit(3)\n                .build())\n        .get();\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in Qdrant\nDESCRIPTION: Creates a new collection in Qdrant to store vectors with specified parameters. The vector size is set to 1024 to match dense embeddings, and dot product is used as the distance metric for similarity calculations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-semantic-search.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nclient.create_collection(\n    collection_name=\"basic-search-rerank\",\n    vectors_config=VectorParams(size=1024, distance=Distance.DOT),\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Points in Qdrant Collection using HTTP POST\nDESCRIPTION: This HTTP request queries a Qdrant collection for similar vectors to the provided 4-dimensional query vector. The request includes options to return vectors and payload data in the response, and implements pagination with a limit of 10 results starting from offset 100.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-offset/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"with_vectors\": true,\n    \"with_payload\": true,\n    \"limit\": 10,\n    \"offset\": 100\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Similarity Search Query\nDESCRIPTION: Executes a vector similarity search in a specified collection using a 4-dimensional vector, retrieving the top 3 most similar points using the 'image' similarity metric\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/named-vector/python.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    using=\"image\",\n    limit=3,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Qdrant Search with Embeddings in Rust\nDESCRIPTION: Defines a function to perform a vector search in Qdrant using the embedding vector obtained from Mighty. It uses the Qdrant client to execute the search query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/mighty.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse anyhow::anyhow;\nuse qdrant_client::prelude::*;\n\npub const SEARCH_LIMIT: u64 = 5;\nconst COLLECTION_NAME: &str = \"mighty\";\n\npub async fn qdrant_search_embeddings(\n    qdrant_client: &QdrantClient,\n    vector: Vec<f32>,\n) -> anyhow::Result<Vec<ScoredPoint>> {\n    qdrant_client\n        .search_points(&SearchPoints {\n            collection_name: COLLECTION_NAME.to_string(),\n            vector,\n            limit: SEARCH_LIMIT,\n            with_payload: Some(true.into()),\n            ..Default::default()\n        })\n        .await\n        .map_err(|err| anyhow!(\"Failed to search Qdrant: {}\", err))\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Payload from Multiple Points in Qdrant Collection using Java Client\nDESCRIPTION: This code snippet demonstrates how to clear payload data from multiple points in a Qdrant collection using the asynchronous API. It imports necessary classes, creates point IDs with a factory method, and calls the clearPayloadAsync method with a collection name and list of point IDs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/clear-payload/simple/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.PointIdFactory.id;\n\nclient\n    .clearPayloadAsync(\"{collection_name}\", List.of(id(0), id(3), id(100)), true, null, null)\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Upserting Data for Different Tenant to Another Shard\nDESCRIPTION: This code demonstrates upserting vector data for a different tenant (tenant_2) to the German shard, showing how tenant data can be isolated by region.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/multitenancy.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n    collection_name=\"{tenant_data}\",\n    points=[\n        models.PointStruct(\n            id=3,\n            payload={\"group_id\": \"tenant_2\"},\n            vector=[0.1, 0.1, 0.9],\n        ),\n    ],\n    shard_key_selector=\"germany\",\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Go\nDESCRIPTION: Sets up a Qdrant client connection to localhost and creates a new collection with 768-dimensional vectors using cosine distance. Includes scalar quantization configuration with Int8 type and specific quantile parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-scalar-quantization-params/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tQuantizationConfig: qdrant.NewQuantizationScalar(\n\t\t&qdrant.ScalarQuantization{\n            Type:      qdrant.QuantizationType_Int8,\n\t\t\tQuantile:  qdrant.PtrOf(float32(0.99)),\n\t\t\tAlwaysRam: qdrant.PtrOf(true),\n\t\t},\n\t),\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Combined Dense and Sparse Vectors to Qdrant via Kafka\nDESCRIPTION: JSON format for sending a combination of named dense and sparse vectors to Qdrant via the Kafka connector. The message includes both vector types under different keys in the vector field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/confluent.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collection_name\": \"{collection_name}\",\n    \"id\": \"a10435b5-2a58-427a-a3a0-a5d845b147b7\",\n    \"vector\": {\n        \"some-other-dense\": [\n            0.1,\n            0.2,\n            0.3,\n            0.4,\n            0.5,\n            0.6,\n            0.7,\n            0.8\n        ],\n        \"some-sparse\": {\n            \"indices\": [\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9\n            ],\n            \"values\": [\n                0.1,\n                0.2,\n                0.3,\n                0.4,\n                0.5,\n                0.6,\n                0.7,\n                0.8,\n                0.9,\n                1.0\n            ]\n        }\n    },\n    \"payload\": {\n        \"name\": \"kafka\",\n        \"description\": \"Kafka is a distributed streaming platform\",\n        \"url\": \"https://kafka.apache.org/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering with Range Condition in Qdrant using Python\nDESCRIPTION: This code snippet demonstrates how to define a field condition with a range filter using the Qdrant Python client. It sets the 'price' field to be within a specified range (greater than or equal to 100.0 and less than or equal to 450.0). This condition can then be used to filter search results in a Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/range/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodels.FieldCondition(\n    key=\"price\",\n    range=models.Range(\n        gt=None,\n        gte=100.0,\n        lt=None,\n        lte=450.0,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Points from Qdrant Database in Python\nDESCRIPTION: This snippet initializes a Qdrant client and executes a query to retrieve points from a specified collection. It demonstrates how to use both small byte vectors and full vectors for querying, specifying limits for the number of returned results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=models.Prefetch(\n        query=[1, 23, 45, 67],  # <------------- small byte vector\n        using=\"mrl_byte\",\n        limit=1000,\n    ),\n    query=[0.01, 0.299, 0.45, 0.67],  # <-- full vector\n    using=\"full\",\n    limit=10,\n)\n```\n\n----------------------------------------\n\nTITLE: Batch Search Request with Prioritized Filtering in Qdrant\nDESCRIPTION: Example of a batch search request that performs multiple prioritized searches in parallel: exact title matches, body matches, semantic title matches, and general semantic matches.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/search-as-you-type.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nPOST collections/site/points/search/batch\n{\n  \"searches\": [\n    {\n      \"vector\": [-0.06716014,-0.056464013, ...],\n      \"filter\": {\n        \"must\": [ \n          { \"key\": \"text\", \"match\": { \"text\": <query> }},\n          { \"key\": \"tag\", \"match\": { \"any\": [\"h1\", \"h2\", \"h3\"] }},\n        ]\n      }\n      ...,\n    },\n    {\n      \"vector\": [-0.06716014,-0.056464013, ...],\n      \"filter\": {\n        \"must\": [ { \"key\": \"body\", \"match\": { \"text\": <query> }} ]\n      }\n      ...,\n    },\n    {\n      \"vector\": [-0.06716014,-0.056464013, ...],\n      \"filter\": {\n        \"must\": [ { \"key\": \"tag\", \"match\": { \"any\": [\"h1\", \"h2\", \"h3\"] }} ]\n      }\n      ...,\n    },\n    {\n      \"vector\": [-0.06716014,-0.056464013, ...],\n      ...,\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Query Embeddings in Python\nDESCRIPTION: This snippet converts the user's query into the necessary embeddings by utilizing the same models used for indexing, enabling the hybrid search functionality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-hybrid-search.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndense_vectors = next(dense_embedding_model.query_embed(query))\nsparse_vectors = next(bm25_embedding_model.query_embed(query))\nlate_vectors = next(late_interaction_embedding_model.query_embed(query))\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Embedding Store in Langchain4J\nDESCRIPTION: Java code example demonstrating how to configure and initialize a QdrantEmbeddingStore for use with Langchain4J. Requires configuration of collection name, host URL, GRPC port, and API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langchain4j.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport dev.langchain4j.store.embedding.EmbeddingStore;\nimport dev.langchain4j.store.embedding.qdrant.QdrantEmbeddingStore;\n\nEmbeddingStore<TextSegment> embeddingStore =\n    QdrantEmbeddingStore.builder()\n        // Ensure the collection is configured with the appropriate dimensions\n        // of the embedding model.\n        // Reference https://qdrant.tech/documentation/concepts/collections/\n        .collectionName(\"YOUR_COLLECTION_NAME\")\n        .host(\"YOUR_HOST_URL\")\n        // GRPC port of the Qdrant server\n        .port(6334)\n        .apiKey(\"YOUR_API_KEY\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Calculating HNSW Vector Index Size in Memory\nDESCRIPTION: Calculation of memory requirements for the HNSW vector index with an M parameter of 6. The formula estimates the size of connection information stored in the graph structure of the index.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/large-scale-search.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n400_000_000 * (6 * 2) * 4 bytes / 1024 (Kb) / 1024 (Mb) / 1024 (Gb) = 17.881Gb\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection Snapshot in Qdrant\nDESCRIPTION: REST API call to create a snapshot of a specific collection. This synchronous operation generates a tar archive file in the configured snapshot path.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/snapshots.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'http://{qdrant-url}:6333/collections/{collection_name}/snapshots'\n    -H 'api-key: ********'\n```\n\n----------------------------------------\n\nTITLE: Updating Point Payload and Vector in Qdrant - Python\nDESCRIPTION: This snippet demonstrates how to update a point in a Qdrant collection by modifying its payload to change the color and updating its vector coordinates. It specifically targets a point with id 1 and sets its color to 'red' while altering its vector representation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/int-one-point-simple/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclient.update_points(\n    collection_name='example_collection',\n    points=[{\n        'id': 1,\n        'payload': {'color': 'red'},\n        'vector': [0.9, 0.1, 0.1]\n    }]\n)\n```\n\n----------------------------------------\n\nTITLE: IsEmpty Condition Filtering in Qdrant\nDESCRIPTION: Demonstrates how to use the IsEmpty condition to filter out records missing a specific value or having null or empty array values.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/filtering.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"must\": [\n    {\n      \"is_empty\": {\n        \"key\": \"reports\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Documents to the Qdrant Knowledge Base\nDESCRIPTION: This code snippet sets a model and adds vector embeddings related to various topics into the Qdrant collection named 'knowledge-base'. It demonstrates how to store relevant text documents to be used for knowledge retrieval within the RAG pipeline. The script utilizes the FastEmbed model for generating embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/rag-deepseek.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient.set_model(\"BAAI/bge-base-en-v1.5\")\n\nclient.add(\n    collection_name=\"knowledge-base\",\n    documents=[\n        \"Qdrant is a vector database & vector similarity search engine. It deploys as an API service providing search for the nearest high-dimensional vectors. With Qdrant, embeddings or neural network encoders can be turned into full-fledged applications for matching, searching, recommending, and much more!\",\n        \"Docker helps developers build, share, and run applications anywhere — without tedious environment configuration or management.\",\n        \"PyTorch is a machine learning framework based on the Torch library, used for applications such as computer vision and natural language processing.\",\n        \"MySQL is an open-source relational database management system (RDBMS). A relational database organizes data into one or more data tables in which data may be related to each other; these relations help structure the data. SQL is a language that programmers use to create, modify and extract data from the relational database, as well as control user access to the database.\",\n        \"NGINX is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. NGINX is known for its high performance, stability, rich feature set, simple configuration, and low resource consumption.\",\n        \"FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.7+ based on standard Python type hints.\",\n        \"SentenceTransformers is a Python framework for state-of-the-art sentence, text and image embeddings. You can use this framework to compute sentence / text embeddings for more than 100 languages. These embeddings can then be compared e.g. with cosine-similarity to find sentences with a similar meaning. This can be useful for semantic textual similar, semantic search, or paraphrase mining.\",\n        \"The cron command-line utility is a job scheduler on Unix-like operating systems. Users who set up and maintain software environments use cron to schedule jobs (commands or shell scripts), also known as cron jobs, to run periodically at fixed times, dates, or intervals.\",\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Uploading Embeddings to Qdrant\nDESCRIPTION: Uploads movie metadata along with their SPLADE++ sparse embeddings to the Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nqdrant_client.upsert(\n    collection_name=\"movies\",\n    points=[\n        models.PointStruct(\n            id=idx,\n            payload=metadata[idx],\n            vector={\n                \"film_description\": models.SparseVector(\n                    indices=vector.indices,\n                    values=vector.values\n                )\n            },\n        )\n        for idx, vector in enumerate(sparse_descriptions)\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Geo Radius Filtering in Qdrant\nDESCRIPTION: Shows how to use geo radius filters to match locations within a circular area defined by a center point and radius in meters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/filtering.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"must\": [\n    {\n      \"key\": \"location\",\n      \"geo_radius\": {\n        \"center\": {\n          \"lon\": -73.935242,\n          \"lat\": 40.730610\n        },\n        \"radius\": 1000\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up SPLADE Model and Tokenizer in Python\nDESCRIPTION: Initializes the SPLADE model and tokenizer using the Hugging Face Transformers library. It loads a pre-trained SPLADE model and prepares a sample text for processing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/sparse-vectors.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom transformers import AutoModelForMaskedLM, AutoTokenizer\n\nmodel_id = \"naver/splade-cocondenser-ensembledistil\"\n\ntokenizer = AutoTokenizer.from_pretrained(model_id)\nmodel = AutoModelForMaskedLM.from_pretrained(model_id)\n\ntext = \"\"\"Arthur Robert Ashe Jr. (July 10, 1943 – February 6, 1993) was an American professional tennis player. He won three Grand Slam titles in singles and two in doubles.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Collection Points with OR Condition in Qdrant\nDESCRIPTION: HTTP POST request demonstrating how to scroll through points in a Qdrant collection using a filter with OR conditions. The filter matches points where either the city is 'London' OR the color is 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-should-filter/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"should\": [\n            { \"key\": \"city\", \"match\": { \"value\": \"London\" } },\n            { \"key\": \"color\", \"match\": { \"value\": \"red\" } }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in C#\nDESCRIPTION: This snippet initializes a Qdrant client, establishing a connection to a Qdrant instance running on localhost at port 6334. The client object is then used for subsequent operations on the Qdrant database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/retrieve-points/simple/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database in Rust\nDESCRIPTION: Shows how to establish a connection to a local Qdrant instance and perform a nearest neighbor search query using a specific point ID. Uses the qdrant_client crate to interact with the database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/by-existing-id/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{Condition, Filter, PointId, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(Query::new_nearest(PointId::new(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")))\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Go\nDESCRIPTION: Demonstrates how to establish a connection to a Qdrant server and create a new collection with specific vector configurations. The collection is configured with 128-dimensional vectors using cosine distance and uint8 datatype, along with sparse vector support for text data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-uint8-sparse-and-dense/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     128,\n\t\tDistance: qdrant.Distance_Cosine,\n\t\tDatatype: qdrant.Datatype_Uint8.Enum(),\n\t}),\n\tSparseVectorsConfig: qdrant.NewSparseVectorsConfig(\n\t\tmap[string]*qdrant.SparseVectorParams{\n\t\t\t\"text\": {\n\t\t\t\tIndex: &qdrant.SparseIndexConfig{\n\t\t\t\t\tDatatype: qdrant.Datatype_Uint8.Enum(),\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Searching Documents with Qdrant and Upstage in Python\nDESCRIPTION: Embeds a search query using Upstage API and performs a vector search in the Qdrant collection to find relevant documents.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/upstage.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbody = {\n    \"input\": \"What is the best to use for vector search scaling?\",\n    \"model\": \"solar-embedding-1-large-query\",\n}\n\nresponse_body = upstage_session.post(\n    UPSTAGE_BASE_URL, headers=headers, json=body\n).json()\n\nclient.search(\n    collection_name=collection_name,\n    query_vector=response_body[\"data\"][0][\"embedding\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Building Knowledge Base with Qdrant and SentenceTransformers\nDESCRIPTION: Code for vectorizing answers using the SentenceTransformers model and storing them in Qdrant. This process transforms text data into embeddings that can be efficiently searched for relevant content.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/langchain-integration.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n![](/articles_data/langchain-integration/code-qdrant.png)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database with Filters in Python\nDESCRIPTION: This code demonstrates how to query points in a Qdrant vector database by connecting to a local instance, specifying a vector query, and applying filters on metadata fields. It uses the QdrantClient to find the 10 most similar vectors within a specific group.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-filter-by-group-id/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.1, 0.1, 0.9],\n    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"group_id\",\n                match=models.MatchValue(\n                    value=\"user_1\",\n                ),\n            )\n        ]\n    ),\n    limit=10,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection in Python\nDESCRIPTION: This snippet initializes a Qdrant collection to store multivector representations with specific configurations for original and mean-pooled vectors. The setup disables HNSW index construction for original vectors and sets mean pooling configurations for rows and columns, all using the COSINE distance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/pdf-retrieval-at-scale.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n    collection_name=collection_name,\n    vectors_config={\n        \"original\": \n            models.VectorParams( #switch off HNSW\n                    size=128,\n                    distance=models.Distance.COSINE,\n                    multivector_config=models.MultiVectorConfig(\n                        comparator=models.MultiVectorComparator.MAX_SIM\n                    ),\n                    hnsw_config=models.HnswConfigDiff(\n                        m=0 #switching off HNSW\n                    )\n            ),\n        \"mean_pooling_columns\": models.VectorParams(\n                size=128,\n                distance=models.Distance.COSINE,\n                multivector_config=models.MultiVectorConfig(\n                    comparator=models.MultiVectorComparator.MAX_SIM\n                )\n            ),\n        \"mean_pooling_rows\": models.VectorParams(\n                size=128,\n                distance=models.Distance.COSINE,\n                multivector_config=models.MultiVectorConfig(\n                    comparator=models.MultiVectorComparator.MAX_SIM\n                )\n            )\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Searching Matrix Pairs with Filtering in Qdrant using TypeScript\nDESCRIPTION: Initializes a QdrantClient connected to a local Qdrant instance and performs a searchMatrixPairs operation with filtering by the 'color' property. The search includes sampling 10 pairs and limiting results to 2 pairs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/distance-matrix/basic/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.searchMatrixPairs(\"{collection_name}\", {\n    filter: {\n        must: [\n            {\n                key: \"color\",\n                match: {\n                    value: \"red\",\n                },\n            },\n        ],\n    },\n    sample: 10,\n    limit: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Payload Properties in Qdrant using Python Client\nDESCRIPTION: Shows how to update payload properties for vector points that match a specific filter condition. The example sets two string properties on points where the 'color' field matches 'red'. Uses the Qdrant Python client's set_payload method with filter conditions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/set-payload/by-filter/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.set_payload(\n    collection_name=\"{collection_name}\",\n    payload={\n        \"property1\": \"string\",\n        \"property2\": \"string\",\n    },\n    points=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"color\",\n                match=models.MatchValue(value=\"red\"),\n            ),\n        ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Vector Collection with Custom Configuration\nDESCRIPTION: Establishes a connection to a local Qdrant server and creates a new vector collection with 768-dimensional vectors using cosine distance metric. Configures optimizer settings to use 16 default segments.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-high-number-of-segments/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n    optimizers_config=models.OptimizersConfigDiff(default_segment_number=16),\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with C# Client\nDESCRIPTION: This snippet demonstrates querying a Qdrant collection using the C# client. It initializes the client, constructs a complex query with prefetch parameters including dense and smaller byte vectors and executes the query with parameters like collection name, query vectors, vector usage and result limit.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-multistage/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  prefetch: new List <PrefetchQuery> {\n    new() {\n      Prefetch = {\n          new List <PrefetchQuery> {\n            new() {\n              Query = new float[] { 1, 23, 45, 67 }, // <------------- small byte vector\n                Using = \"mrl_byte\",\n                Limit = 1000\n            },\n          }\n        },\n        Query = new float[] {0.01f, 0.45f, 0.67f}, // <-- dense vector\n        Using = \"full\",\n        Limit = 100\n    }\n  },\n  query: new float[][] {\n    [0.1f, 0.2f], // <─┐\n    [0.2f, 0.1f], // < ├─ multi-vector\n    [0.8f, 0.9f]  // < ┘\n  },\n  usingVector: \"colbert\",\n  limit: 10\n);\n\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Points into Qdrant Collection\nDESCRIPTION: This HTTP PUT request inserts three points into a specified Qdrant collection. Each point has an ID, a payload containing a color attribute, and a 3-dimensional vector. The collection name is a path parameter in the URL.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/list-of-points-simple/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/points\n{\n    \"points\": [\n        {\n            \"id\": 1,\n            \"payload\": {\"color\": \"red\"},\n            \"vector\": [0.9, 0.1, 0.1]\n        },\n        {\n            \"id\": 2,\n            \"payload\": {\"color\": \"green\"},\n            \"vector\": [0.1, 0.9, 0.1]\n        },\n        {\n            \"id\": 3,\n            \"payload\": {\"color\": \"blue\"},\n            \"vector\": [0.1, 0.1, 0.9]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector Search with Filters\nDESCRIPTION: Performs similarity search on vectors with video ID filtering. Returns matching documents based on query embedding and metadata filters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/talk-with-youtube-without-paying-a-cent-francesco-saverio-zuppichini-vector-space-talks.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef search(client, query, video_id, limit):\n    filter = models.Filter(\n        must=[models.FieldCondition(key=\"metadata.video_id\", match=video_id)]\n    )\n    results = client.search(\n        collection_name=\"embeddings\",\n        query_vector=query,\n        limit=limit,\n        query_filter=filter\n    )\n    return [hit.payload for hit in results]\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Java\nDESCRIPTION: Demonstrates how to initialize a Qdrant client connection to localhost and create a new collection with 128-dimensional vectors using Cosine distance and MaxSim multi-vector comparator. The code shows the basic setup required for connecting to a Qdrant vector database and configuring vector parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-multivector/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.MultiVectorComparator;\nimport io.qdrant.client.grpc.Collections.MultiVectorConfig;\nimport io.qdrant.client.grpc.Collections.VectorParams;\n\nQdrantClient client =\n  new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.createCollectionAsync(\"{collection_name}\",\n  VectorParams.newBuilder().setSize(128)\n  .setDistance(Distance.Cosine)\n  .setMultivectorConfig(MultiVectorConfig.newBuilder()\n    .setComparator(MultiVectorComparator.MaxSim)\n    .build())\n  .build()).get();\n```\n\n----------------------------------------\n\nTITLE: Loading Datasets Using HuggingFaceDatasetLoader\nDESCRIPTION: This snippet demonstrates loading datasets from Hugging Face using the HuggingFaceDatasetLoader. Adapt these loaders to fetch specific datasets and preprocess them for use in AI applications like document retrieval and response generation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nhugging_face_doc = HuggingFaceDatasetLoader(\"m-ric/huggingface_doc\",\"text\")\ntransformers_doc = HuggingFaceDatasetLoader(\"m-ric/transformers_documentation_en\",\"text\")\n```\n\n----------------------------------------\n\nTITLE: Querying Points with Qdrant Python Client\nDESCRIPTION: Demonstrates initializing a Qdrant client and querying points from a collection with vector similarity search. Includes configuration of quantization search parameters with rescoring disabled.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/disable-quantization-rescoring/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    search_params=models.SearchParams(\n        quantization=models.QuantizationSearchParams(rescore=False)\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Collection with uint8 Vectors in Python\nDESCRIPTION: This code snippet shows how to create a Qdrant collection configured to store vectors as uint8 datatypes. It sets the vector size to 1024 and uses the Cosine distance metric. This configuration is particularly useful for pre-quantized embeddings, such as those provided by embedding services like Cohere.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-uint8/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.http import models\n\nclient = QdrantClient(\"localhost\", port=6333)\n\nclient.create_collection(\n    collection_name=\"my_collection\",\n    vectors_config=models.VectorParams(\n        size=1024,\n        distance=models.Distance.COSINE,\n        on_disk=True,\n        quantization_config=models.ScalarQuantization(\n            type=models.ScalarType.UINT8\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Python\nDESCRIPTION: This code initializes a Qdrant client and creates a new collection with custom vector parameters and scalar quantization configuration. It sets up a connection to a local Qdrant server and defines the collection's vector size, distance metric, and quantization settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/quantization-on-disk/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE, on_disk=True),\n    quantization_config=models.ScalarQuantization(\n        scalar=models.ScalarQuantizationConfig(\n            type=models.ScalarType.INT8,\n            always_ram=False,\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Configure High Number of Segments\nDESCRIPTION: Configuration for minimizing latency by setting up multiple segments equal to system cores.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/optimize.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"vectors\": {\n    \"size\": 768,\n    \"distance\": \"Cosine\"\n},\n\"optimizers_config\": {\n    \"default_segment_number\": 12,\n    \"max_segment_size\": 100000\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Points into Qdrant Collection via HTTP PUT\nDESCRIPTION: This HTTP request adds one or more points to a specified Qdrant collection. Each point consists of an ID, a payload (metadata), and a vector representation. The example inserts a single point with ID 1, a color payload, and a 3-dimensional vector.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/int-one-point-simple/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/points\n{\n    \"points\": [\n        {\n            \"id\": 1,\n            \"payload\": {\"color\": \"red\"},\n            \"vector\": [0.9, 0.1, 0.1]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Cluster Write Consistency Factor - Rust\nDESCRIPTION: In this Rust example, the code configures a Qdrant collection using the Qdrant client library, setting a `write_consistency_factor`. This factor impacts how many replicas must confirm a write operation before success, affecting how write operations handle failure scenarios.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_25\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{CreateCollectionBuilder, Distance, VectorParamsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(300, Distance::Cosine))\n            .shard_number(6)\n            .replication_factor(2)\n            .write_consistency_factor(2),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index in Qdrant\nDESCRIPTION: Setting up a payload index in Qdrant for efficient filtering on the 'library' metadata field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/llama-index-multitenancy.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import models\n\nclient.create_payload_index(\n    collection_name=\"my_collection\",\n    field_name=\"metadata.library\",\n    field_type=models.PayloadSchemaType.KEYWORD,\n)\n```\n\n----------------------------------------\n\nTITLE: JSON Payload Example with Complex Data Types\nDESCRIPTION: Demonstrates a comprehensive JSON payload with multiple nested data types and structures in Qdrant\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/payload.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"jacket\",\n    \"colors\": [\"red\", \"blue\"],\n    \"count\": 10,\n    \"price\": 11.99,\n    \"locations\": [\n        {\n            \"lon\": 52.5200, \n            \"lat\": 13.4050\n        }\n    ],\n    \"reviews\": [\n        {\n            \"user\": \"alice\",\n            \"score\": 4\n        },\n        {\n            \"user\": \"bob\",\n            \"score\": 5\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Shards for Parallel Upload\nDESCRIPTION: Creates a collection with multiple shards to enable parallel data upload. Uses 2 shards which allows for better write throughput on a single machine. Includes standard vector configuration with size 768 and Cosine distance metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\"\n    },\n    \"shard_number\": 2\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n    shard_number=2,\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Grouped Points with Lookup in Qdrant using Python\nDESCRIPTION: Demonstrates how to perform a grouped search query in Qdrant with lookup functionality. The code searches the 'chunks' collection, groups results by 'document_id', and looks up additional information from a 'documents' collection. Includes configuration for group size, limits, and payload/vector retrieval options.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-groups/with-lookup/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points_groups(\n    collection_name=\"chunks\",\n    # Same as in the regular search() API\n    query=[1.1],\n    # Grouping parameters\n    group_by=\"document_id\",  # Path of the field to group by\n    limit=2,  # Max amount of groups\n    group_size=2,  # Max amount of points per group\n    # Lookup parameters\n    with_lookup=models.WithLookup(\n        # Name of the collection to look up points in\n        collection=\"documents\",\n        # Options for specifying what to bring from the payload\n        # of the looked up point, True by default\n        with_payload=[\"title\", \"text\"],\n        # Options for specifying what to bring from the vector(s)\n        # of the looked up point, True by default\n        with_vectors=False,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Uploading Data to Qdrant\nDESCRIPTION: Creates and uploads sparse vector representations of user ratings to Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/collaborative-filtering.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef data_generator():\n    for user_id, sparse_vector in user_sparse_vectors.items():\n        yield PointStruct(\n            id=user_id,\n            vector={\"ratings\": SparseVector(\n                indices=sparse_vector[\"indices\"],\n                values=sparse_vector[\"values\"]\n            )},\n            payload={\"user_id\": user_id, \"movie_id\": sparse_vector[\"indices\"]}\n        )\n\nqdrant_client.upload_points(\n    collection_name=collection_name,\n    points=data_generator()\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Setting Payload in Go\nDESCRIPTION: Creates a new Qdrant client connection to localhost:6334 and sets payload properties for specific points in a collection. The code demonstrates how to update multiple points (0 and 3) with string properties using the SetPayload method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/set-payload/by-point-id/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.SetPayload(context.Background(), &qdrant.SetPayloadPoints{\n    CollectionName: \"{collection_name}\",\n    Payload: qdrant.NewValueMap(\n        map[string]any{\"property1\": \"string\", \"property2\": \"string\"}),\n    PointsSelector: qdrant.NewPointsSelector(\n        qdrant.NewIDNum(0),\n        qdrant.NewIDNum(3)),\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Recommendation-Based Vector Search in Qdrant\nDESCRIPTION: Sends a POST request to query collection points using recommendation vectors with specified positive and negative reference points. Uses 'image' as the embedding space and limits results to 10 items.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-named-vectors/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"recommend\": {\n      \"positive\": [100, 231],\n      \"negative\": [718]\n    }\n  },\n  \"using\": \"image\",\n  \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Database Using gRPC with C#\nDESCRIPTION: This C# snippet demonstrates how to interact with a Qdrant database using gRPC. It initializes a `QdrantClient` object to connect to a local Qdrant server running on port 6334. The `QueryAsync` method is used to perform a recommendation query on a specified collection, utilizing positive and negative vector inputs and a limit on the number of returned results. Dependencies include Qdrant.Client and Qdrant.Client.Grpc. The snippet requires a running Qdrant server and appropriate collection setup.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-named-vectors/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new RecommendInput {\n        Positive = { 100, 231 },\n        Negative = { 718 }\n    },\n    usingVector: \"image\",\n    limit: 10\n);\n```\n\n----------------------------------------\n\nTITLE: Geo Polygon Filtering in Qdrant\nDESCRIPTION: Demonstrates how to use geo polygon filters to match locations within an irregularly shaped area defined by a series of coordinates.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/filtering.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"must\": [\n    {\n      \"key\": \"location\",\n      \"geo_polygon\": {\n        \"exterior\": {\n          \"points\": [\n            {\"lon\": -70.0, \"lat\": 40.0},\n            {\"lon\": -60.0, \"lat\": 40.0},\n            {\"lon\": -60.0, \"lat\": 50.0},\n            {\"lon\": -70.0, \"lat\": 50.0},\n            {\"lon\": -70.0, \"lat\": 40.0}\n          ]\n        },\n        \"interiors\": [\n          {\n            \"points\": [\n              {\"lon\": -65.0, \"lat\": 42.0},\n              {\"lon\": -62.0, \"lat\": 42.0},\n              {\"lon\": -62.0, \"lat\": 48.0},\n              {\"lon\": -65.0, \"lat\": 48.0},\n              {\"lon\": -65.0, \"lat\": 42.0}\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Shards in Python\nDESCRIPTION: Demonstrates how to create a Qdrant collection with 6 shards using the Python client. The code initializes a client connection and configures a new collection with specified vector parameters and shard count.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),\n    shard_number=6,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Binary Quantization in Qdrant\nDESCRIPTION: This snippet shows how to create a collection with binary quantization enabled. Binary quantization reduces vector size while preserving search capabilities, with an option to keep vectors cached in RAM.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/quantization.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vectors\": {\n    \"size\": 768,\n    \"distance\": \"Cosine\"\n  },\n  \"quantization_config\": {\n    \"scalar\": {\n      \"type\": \"binary\",\n      \"always_ram\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Points from Qdrant Client in Python\nDESCRIPTION: This snippet connects to a Qdrant client using a specified URL and queries points from a designated collection with given coordinates. It requires the Qdrant client library to be installed and accessible. The input parameters include the collection name and a list of query vectors, while the output is the result of the queried points based on the input vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/multivector/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[\n        [-0.013,  0.020, -0.007, -0.111],\n        [-0.030, -0.055,  0.001,  0.072],\n        [-0.041,  0.014, -0.032, -0.062]\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Points by Existing ID in Qdrant\nDESCRIPTION: Demonstrates how to query points using an existing point ID as the input vector. This method allows fetching the default vector from a point with a specific ID and using it as the query vector.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/search.md#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/search\n{\n  \"vector\": { \"id\": \"existing_point_id\" },\n  \"limit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Video Chunks Using Video Queries\nDESCRIPTION: Code to perform similarity search for video chunks using another video as the query. The query video is embedded and used to find similar video segments in the database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/mixpeek.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nquery_video_url = \"https://mixpeek-public-demo.s3.us-east-2.amazonaws.com/starter/jurassic_bunny.mp4\"\n\n# Embed the video query\nquery_embedding = mixpeek.embed.video(\n    model_id=\"vuse-generic-v1\",\n    input=query_video_url,\n    input_type=\"url\"\n)['embedding']\n\n# Search in Qdrant\nsearch_results = client.query_points(\n    collection_name=\"video_chunks\",\n    query=query_embedding,\n    limit=5\n).points\n\nfor result in search_results:\n    print(f\"Chunk ID: {result.id}, Score: {result.score}\")\n    print(f\"Time range: {result.payload['start_time']} - {result.payload['end_time']}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing System Prompt for Better Filter Generation\nDESCRIPTION: Shows how to implement a system prompt to provide better guidance for the LLM when interpreting queries and generating filters. Includes specific rules for query interpretation and field matching.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/automate-filtering-with-llms.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nSYSTEM_PROMPT = \"\"\"\nYou are extracting filters from a text query. Please follow the following rules:\n1. Query is provided in the form of a text enclosed in <query> tags.\n2. Available indexes are put at the end of the text in the form of a list enclosed in <indexes> tags.\n3. You cannot use any field that is not available in the indexes.\n4. Generate a filter only if you are certain that user's intent matches the field name.\n5. Prices are always in USD.\n6. It's better not to generate a filter than to generate an incorrect one.\n\"\"\"\n\nqdrant_filter = anthropic_client.messages.create(\n    model=\"claude-3-5-sonnet-latest\",\n    response_model=models.Filter,\n    max_tokens=1024,\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": SYSTEM_PROMPT.strip(),\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": \"Okay, I will follow all the rules.\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": (\n                \"<query>fruit salad with no more than 100 calories</query>\"\n                f\"<indexes>\\n{formatted_indexes}\\n</indexes>\"\n            )\n        }\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Recommendations with Positive/Negative Examples in Qdrant\nDESCRIPTION: Code demonstrates how to use Qdrant's recommendation API to find items based on positive and negative examples. The search is performed using group recommendations with specified collection and limits.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/food-discovery-demo.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.recommend_groups(\n    settings.QDRANT_COLLECTION,\n    positive=search_query.positive,\n    negative=search_query.negative,\n    group_by=settings.GROUP_BY_FIELD,\n    limit=search_query.limit,\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Data with Named Vector in Python\nDESCRIPTION: Python code to load data into Qdrant using the Spark connector with a named vector. This example shows how to specify the vector name in addition to other parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/spark.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", <QDRANT_GRPC_URL>)\n   .option(\"collection_name\", <QDRANT_COLLECTION_NAME>)\n   .option(\"embedding_field\", <EMBEDDING_FIELD_NAME>)  # Expected to be a field of type ArrayType(FloatType)\n   .option(\"vector_name\", <VECTOR_NAME>)\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n----------------------------------------\n\nTITLE: Scrolling Filtered Points in Qdrant Collection using HTTP POST\nDESCRIPTION: This HTTP POST request demonstrates how to scroll through points in a Qdrant collection with a filter applied. It targets the /collections/{collection_name}/points/scroll endpoint and includes a JSON body with a filter to match points where the 'country.name' is 'Germany'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-fields/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"should\": [\n            {\n                \"key\": \"country.name\",\n                \"match\": {\n                    \"value\": \"Germany\"\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client\nDESCRIPTION: Sets up the Qdrant client connection and creates a collection for storing startup vectors with specified parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/neural-search-tutorial.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.models import VectorParams, Distance\n\nqdrant_client = QdrantClient(host='localhost', port=6333)\n\nif not qdrant_client.collection_exists('startups'):\n    qdrant_client.create_collection(\n        collection_name='startups', \n        vectors_config=VectorParams(size=384, distance=Distance.COSINE),\n    )\n```\n\n----------------------------------------\n\nTITLE: Connecting to Qdrant Vector Database and Retrieving Aliases in Python\nDESCRIPTION: This code initializes a connection to a local Qdrant vector database server running on the default port 6333 and retrieves all collection aliases. The QdrantClient is the main entry point for interacting with Qdrant database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/list-all/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.get_aliases()\n```\n\n----------------------------------------\n\nTITLE: Batch Querying in Qdrant (Python)\nDESCRIPTION: Shows how to perform batch queries in Qdrant, reducing the number of round trips to the database and optimizing performance for multiple similar queries or simultaneous user requests.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-resource-optimization.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresults = client.search_batch(\n   collection_name=\"test_collection\",\n   requests=[\n       SearchRequest(\n           vector=[0., 0., 2., 0.],\n           limit=1,\n       ),\n       SearchRequest(\n           vector=[0., 0., 0., 0.01],\n           with_vector=True,\n           limit=2,\n       )\n   ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Meeting Analysis Tool in Python\nDESCRIPTION: This snippet defines a 'MeetingAnalysisTool' class responsible for analyzing meeting data. It formats the meeting data and sends it to an AI model (Claude) for insights. The input is meeting data in dictionary form, and the output is a dictionary with analysis results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass MeetingAnalysisTool(BaseTool):\n    def _run(self, meeting_data: dict) -> Dict:\n        meetings_text = self._format_meetings(meeting_data)\n        \n        message = client.messages.create(\n            model=\"claude-3-sonnet-20240229\",\n            messages=[{\n                \"role\": \"user\", \n                \"content\": f\"Analyze these meetings:\\n\\n{meetings_text}\"\n            }]\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Qdrant Filter Structure with Pydantic in Python\nDESCRIPTION: Pydantic model definition for Qdrant filters that enables structured filter creation with must, should, and must_not conditions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/automate-filtering-with-llms.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Filter(BaseModel, extra=\"forbid\"):\n    should: Optional[Union[List[\"Condition\"], \"Condition\"]] = Field(\n        default=None, description=\"At least one of those conditions should match\"\n    )\n    min_should: Optional[\"MinShould\"] = Field(\n        default=None, description=\"At least minimum amount of given conditions should match\"\n    )\n    must: Optional[Union[List[\"Condition\"], \"Condition\"]] = Field(default=None, description=\"All conditions must match\")\n    must_not: Optional[Union[List[\"Condition\"], \"Condition\"]] = Field(\n        default=None, description=\"All conditions must NOT match\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Upserting Sparse Vector Data in Python\nDESCRIPTION: This code initializes a Qdrant client connected to a local instance and inserts a point with a sparse vector into a specified collection. It demonstrates the use of the QdrantClient class and the upsert method to add data to Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/sparse-vectors-single/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.upsert(\n    collection_name=\"{collection_name}\",\n    points=[\n        models.PointStruct(\n            id=1,\n            payload={},  # Add any additional payload if necessary\n            vector={\n                \"text\": models.SparseVector(\n                    indices=[1, 3, 5, 7],\n                    values=[0.1, 0.2, 0.3, 0.4]\n                )\n            },\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting Data to Qdrant Collection\nDESCRIPTION: Uploads the generated Points to the specified Qdrant collection. The upsert operation will add new Points or update existing ones if they have the same IDs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-semantic-search.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\noperation_info = client.upsert(\n    collection_name=\"basic-search-rerank\",\n    points=points\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Points with Qdrant Client in Python\nDESCRIPTION: This Python snippet demonstrates querying points from a collection using the Qdrant Client. It initializes a client instance, specifies a collection name, and uses prefetch settings with various vector queries. The prefetch feature allows optimized searching with byte and dense vectors. Dependencies include the Qdrant Python client library. Input vectors are specified, and a query limit is set for the results. The limit parameter dictates the maximum number of points returned.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-multistage/python.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=models.Prefetch(\n        prefetch=models.Prefetch(\n            query=[1, 23, 45, 67],  # <------ small byte vector\n            using=\"mrl_byte\",\n            limit=1000,\n        ),\n        query=[0.01, 0.45, 0.67],  # <-- full dense vector\n        using=\"full\",\n        limit=100,\n    ),\n    query=[\n        [0.17, 0.23, 0.52],  # <─┐\n        [0.22, 0.11, 0.63],  # < ├─ multi-vector\n        [0.86, 0.93, 0.12],  # < ┘\n    ],\n    using=\"colbert\",\n    limit=10,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Traceloop in Python\nDESCRIPTION: This Python snippet imports and initializes the Traceloop SDK, allowing for integration with the OpenLLMetry setup for tracing Qdrant client usage. Ensure that the 'traceloop-sdk' package is installed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/observability/openllmetry.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom traceloop.sdk import Traceloop\n\nTraceloop.init()\n```\n\n----------------------------------------\n\nTITLE: Creating Field Conditions with Models in Python\nDESCRIPTION: This snippet demonstrates how to create a FieldCondition using the models module. It specifies a condition where the 'key' is matched against any value present in the provided list, in this case, \"black\" or \"yellow\". Dependencies include the 'models' module. Ensures that the condition is suitable for matching against these specified parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-any/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodels.FieldCondition(\n    key=\"color\",\n    match=models.MatchAny(any=[\"black\", \"yellow\"]),\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Context Search Implementation in Qdrant\nDESCRIPTION: Example of a basic context search query that uses positive and negative examples to find vectors that are closer to positive examples than negative ones.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/explore.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/query-points-explore/context-basic/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Environment and Dependencies\nDESCRIPTION: Sets up the required libraries, API keys, and Qdrant client configuration for the recommendation system.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/collaborative-filtering.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport pandas as pd\nimport requests\nfrom qdrant_client import QdrantClient, models\nfrom qdrant_client.models import PointStruct, SparseVector, NamedSparseVector\nfrom collections import defaultdict\n\nomdb_api_key = os.getenv(\"OMDB_API_KEY\")\ncollection_name = \"movies\"\n\nqdrant_client = QdrantClient(\n    os.getenv(\"QDRANT_HOST\"),\n    api_key=os.getenv(\"QDRANT_API_KEY\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection and Inserting Documents in Python\nDESCRIPTION: Creates a new Qdrant collection with specified vector parameters and inserts the embedded documents into the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/upstage.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import VectorParams, Distance\n\ncollection_name = \"example_collection\"\n\nclient.create_collection(\n    collection_name,\n    vectors_config=VectorParams(\n        size=4096,\n        distance=Distance.COSINE,\n    ),\n)\nclient.upsert(collection_name, points)\n```\n\n----------------------------------------\n\nTITLE: Initializing Instructor with Anthropic Client\nDESCRIPTION: Code to initialize the Instructor library with Anthropic's API client for generating structured outputs from LLM responses.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/automate-filtering-with-llms.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport instructor\nfrom anthropic import Anthropic\n\nanthropic_client = instructor.from_anthropic(\n    client=Anthropic(\n        api_key=\"YOUR_API_KEY\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Batch Upload Points in Record-Oriented Format\nDESCRIPTION: This Python snippet shows how to upload multiple points in a record-oriented format with the Qdrant client. It uses the PointStruct model to define each point's ID, payload, and vector.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/points.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient.upload_points(\n    collection_name=\"{collection_name}\",\n    points=[\n        models.PointStruct(\n            id=1,\n            payload={\n                \"color\": \"red\",\n            },\n            vector=[0.9, 0.1, 0.1],\n        ),\n        models.PointStruct(\n            id=2,\n            payload={\n                \"color\": \"green\",\n            },\n            vector=[0.1, 0.9, 0.1],\n        ),\n    ],\n    parallel=4,\n    max_retries=3,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Settings in Qdrant YAML\nDESCRIPTION: Configuration options for GPU usage in Qdrant, including indexing settings, precision control, device filtering, and parallel processing parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/running-with-GPU.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngpu:\n    # Enable GPU indexing.\n    indexing: false\n    # Force half precision for `f32` values while indexing.\n    # `f16` conversion will take place \n    # only inside GPU memory and won't affect storage type.\n    force_half_precision: false\n    # Used vulkan \"groups\" of GPU. \n    # In other words, how many parallel points can be indexed by GPU.\n    # Optimal value might depend on the GPU model.\n    # Proportional, but doesn't necessary equal\n    # to the physical number of warps.\n    # Do not change this value unless you know what you are doing.\n    # Default: 512\n    groups_count: 512\n    # Filter for GPU devices by hardware name. Case insensitive.\n    # Comma-separated list of substrings to match \n    # against the gpu device name.\n    # Example: \"nvidia\"\n    # Default: \"\" - all devices are accepted.\n    device_filter: \"\"\n    # List of explicit GPU devices to use.\n    # If host has multiple GPUs, this option allows to select specific devices\n    # by their index in the list of found devices.\n    # If `device_filter` is set, indexes are applied after filtering.\n    # By default, all devices are accepted.\n    devices: null\n    # How many parallel indexing processes are allowed to run.\n    # Default: 1\n    parallel_indexes: 1\n    # Allow to use integrated GPUs.\n    # Default: false\n    allow_integrated: false\n    # Allow to use emulated GPUs like LLVMpipe. Useful for CI.\n    # Default: false\n    allow_emulated: false\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Points in Qdrant Collection via HTTP POST\nDESCRIPTION: This HTTP request queries a Qdrant collection for vector points similar to the provided 4-dimensional vector. The request includes options to return the original vectors and payload data in the response.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-payload-and-vectors/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"with_vectors\": true,\n    \"with_payload\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Datetime Range Condition in Qdrant with Rust\nDESCRIPTION: This snippet demonstrates how to create a `DatetimeRange` condition using the `qdrant_client` crate in Rust. It defines a range for the \"date\" field, specifying the `gt` (greater than) and `lte` (less than or equal to) boundaries using `Timestamp::date_time`. The `unwrap()` calls handle potential errors during timestamp creation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/datetime-range/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, DatetimeRange, Timestamp};\n\nCondition::datetime_range(\n    \"date\",\n    DatetimeRange {\n        gt: Some(Timestamp::date_time(2023, 2, 8, 10, 49, 0).unwrap()),\n        gte: None,\n        lt: None,\n        lte: Some(Timestamp::date_time(2024, 1, 31, 10, 14, 31).unwrap()),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Qdrant Client in C#\nDESCRIPTION: This snippet illustrates how to instantiate a Qdrant client and create a new collection with specified parameters, such as collection name and vector configurations. The vector parameters include size and distance metrics, while the optimizers configuration sets the default segment number. It requires the Qdrant.Client and Qdrant.Client.Grpc libraries to be referenced.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-high-number-of-segments/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine },\n\toptimizersConfig: new OptimizersConfigDiff { DefaultSegmentNumber = 16 }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Qdrant Collection Aliases with Python Client\nDESCRIPTION: Shows how to perform atomic alias operations in Qdrant by first deleting an existing alias 'production_collection' and then creating a new alias with the same name pointing to 'example_collection'. Uses the models.DeleteAliasOperation and models.CreateAliasOperation classes to define the operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/switch/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.update_collection_aliases(\n    change_aliases_operations=[\n        models.DeleteAliasOperation(\n            delete_alias=models.DeleteAlias(alias_name=\"production_collection\")\n        ),\n        models.CreateAliasOperation(\n            create_alias=models.CreateAlias(\n                collection_name=\"example_collection\", alias_name=\"production_collection\"\n            )\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Go\nDESCRIPTION: Creates a new Qdrant client by importing the necessary packages and configuring the connection to a Qdrant server running on localhost port 6334.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/random-sample/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining State in LangGraph\nDESCRIPTION: Defines a state in LangGraph for managing intermediate data during task execution. Using TypedDict and Annotations, the state maintains message lists essential for task processing and response generation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass State(TypedDict):\n    messages: Annotated[list, add_messages]\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Collection with Quantization in Qdrant\nDESCRIPTION: HTTP PUT request to create a new collection with specified vector dimensions, distance metric, and scalar quantization settings. Sets up a 768-dimensional vector space using Cosine distance and int8 quantization with 0.99 quantile threshold.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-scalar-quantization-params/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\"\n    },\n    \"quantization_config\": {\n        \"scalar\": {\n            \"type\": \"int8\",\n            \"quantile\": 0.99,\n            \"always_ram\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CarsEncoder Class with Encoder Implementation in Python\nDESCRIPTION: This snippet defines the `CarsEncoder` class, a subclass of `Encoder` from the Quaterion framework. It sets up the encoder model and includes properties for trainability and embedding size. The encoder processes input images using a pretrained ResNet model.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/cars-recognition.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nimport torch\nimport torch.nn as nn\nfrom quaterion_models.encoders import Encoder\n\n\nclass CarsEncoder(Encoder):\n    def __init__(self, encoder_model: nn.Module):\n        super().__init__()\n        self._encoder = encoder_model\n        self._embedding_size = 2048  # last dimension from the ResNet model\n\n    @property\n    def trainable(self) -> bool:\n        return False\n\n    @property\n    def embedding_size(self) -> int:\n        return self._embedding_size\n```\n\n----------------------------------------\n\nTITLE: Performing Asynchronous Scroll Operation with Nested Filters in Qdrant Java Client\nDESCRIPTION: This code demonstrates how to use the Qdrant Java client to perform an asynchronous scroll operation on a collection. It applies a nested filter to query points where the 'diet' field contains 'food' matching 'meat' and 'likes' is true.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-nested-clause/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.match;\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\nimport static io.qdrant.client.ConditionFactory.nested;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addMust(\n                        nested(\n                            \"diet\",\n                            Filter.newBuilder()\n                                .addAllMust(\n                                    List.of(\n                                        matchKeyword(\"food\", \"meat\"), match(\"likes\", true)))\n                                .build()))\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Creating FastAPI Service\nDESCRIPTION: Implements a FastAPI service with a search endpoint using the NeuralSearcher class.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/neural-search-tutorial.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\n# That is the file where NeuralSearcher is stored\nfrom neural_searcher import NeuralSearcher\n\napp = FastAPI()\n\n# Create an instance of the neural searcher\nneural_searcher = NeuralSearcher(collection_name='startups')\n\n@app.get(\"/api/search\")\ndef search_startup(q: str):\n    return {\n        \"result\": neural_searcher.search(text=q)\n    }\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```\n\n----------------------------------------\n\nTITLE: Querying Points with Filters in Qdrant Collection\nDESCRIPTION: HTTP POST request to search for similar vectors in a collection with filtering by city. The request includes a query vector, filter conditions, search parameters like HNSW search quality (ef), and result limit.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/basic-with-filter-and-params/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.79],\n    \"filter\": {\n        \"must\": [\n            {\n                \"key\": \"city\",\n                \"match\": {\n                    \"value\": \"London\"\n                }\n            }\n        ]\n    },\n    \"params\": {\n        \"hnsw_ef\": 128,\n        \"exact\": false\n    },\n    \"limit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Data with Sparse Vectors in Python\nDESCRIPTION: Python code to load data into Qdrant using the Spark connector with sparse vectors. This example shows how to specify sparse vector value fields, index fields, and names.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/spark.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", \"<QDRANT_GRPC_URL>\")\n   .option(\"collection_name\", \"<QDRANT_COLLECTION_NAME>\")\n   .option(\"sparse_vector_value_fields\", \"<COLUMN_NAME>\")\n   .option(\"sparse_vector_index_fields\", \"<COLUMN_NAME>\")\n   .option(\"sparse_vector_names\", \"<SPARSE_VECTOR_NAME>\")\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection with Vector Configuration in Python\nDESCRIPTION: This code checks if a collection exists and creates it if not. It sets up the vector configuration with a size of 768 (matching the InstructorXL model's output) and uses cosine distance for similarity calculations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/create-snapshot.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import models\n\nif not client.collection_exists(\"test_collection\"):\n    client.create_collection(\n        collection_name=\"test_collection\",\n        vectors_config=models.VectorParams(\n            size=768,  # Size of the embedding vector generated by the InstructorXL model\n            distance=models.Distance.COSINE\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Filtering Points with Nested Object Conditions in Qdrant\nDESCRIPTION: This code snippet demonstrates a POST request that filters points in a Qdrant collection based on nested object conditions. It specifically targets points where a nested 'diet' object contains sub-objects matching specified 'food' and 'likes' criteria. This approach allows for querying arrays of objects independently within the database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-nested-clause/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"filter\": {\n    \"must\": [\n      {\n        \"key\": \"diet\",\n        \"match\": {\n          \"any\": [\n            {\n              \"must\": [\n                { \"key\": \"food\", \"match\": { \"value\": \"meat\" } },\n                { \"key\": \"likes\", \"match\": { \"value\": 10 } }\n              ]\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Text Embeddings in Python\nDESCRIPTION: This Python code demonstrates how the meeting data, which includes the topic, content, and summary, is converted into a rich text format before generating vector embeddings. This ensures that the vector embeddings capture the full context of each meeting.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntext_to_embed = f\"\"\"\n    Topic: {meeting.get('topic', '')}\n    Content: {meeting.get('vtt_content', '')}\n    Summary: {json.dumps(meeting.get('summary', {}))}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Upserting Data in TypeScript\nDESCRIPTION: This code initializes a Qdrant client connected to a local instance and upserts a point with a sparse vector into a specified collection. It demonstrates client setup and data insertion using the @qdrant/js-client-rest package.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/sparse-vectors-single/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.upsert(\"{collection_name}\", {\n  points: [\n    {\n      id: 1,\n      vector: {\n        text: {\n          indices: [1, 3, 5, 7],\n          values: [0.1, 0.2, 0.3, 0.4]\n        },\n      },\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Points with Quantization Parameters in Qdrant using Python\nDESCRIPTION: This code initializes a Qdrant client connection to a local instance and performs a vector similarity search with custom quantization parameters. It configures the search to use quantization with rescoring enabled and an oversampling factor of 2.0.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-quantization-oversampling/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    search_params=models.SearchParams(\n        quantization=models.QuantizationSearchParams(\n            ignore=False,\n            rescore=True,\n            oversampling=2.0,\n        )\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Vector Store Configuration Bean\nDESCRIPTION: Java configuration class for setting up QdrantVectorStoreConfig bean with connection parameters using the builder pattern.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/spring-ai.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic QdrantVectorStoreConfig qdrantVectorStoreConfig() {\n\n    return QdrantVectorStoreConfig.builder()\n        .withHost(\"<QDRANT_HOSTNAME>\")\n        .withPort(<QDRANT_GRPC_PORT>)\n        .withCollectionName(\"<QDRANT_COLLECTION_NAME>\")\n        .withApiKey(\"<QDRANT_API_KEY>\")\n        .build();\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating CrewAI with Qdrant Storage in Python\nDESCRIPTION: Example of creating a Crew instance with custom Qdrant storage for both entity memory and short-term memory. This setup allows the crew to use Qdrant for memory ingestion and retrieval.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/crewai.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom crewai import Crew\nfrom crewai.memory.entity.entity_memory import EntityMemory\nfrom crewai.memory.short_term.short_term_memory import ShortTermMemory\n\nfrom mycrew.storage import QdrantStorage\n\nCrew(\n    # Import the agents and tasks here.\n    memory=True,\n    entity_memory=EntityMemory(storage=QdrantStorage(\"entity\")),\n    short_term_memory=ShortTermMemory(storage=QdrantStorage(\"short-term\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client for Vector Database Access in Python\nDESCRIPTION: Code snippet showing three different ways to initialize a Qdrant client: in-memory, cloud-based, or local connection. The cloud-based option is uncommented and uses environment variables for authentication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n##Uncomment to initialise qdrant client in memory\n#client = qdrant_client.QdrantClient(\n#    location=\":memory:\",\n#)\n\n##Uncomment below to connect to Qdrant Cloud\nclient = qdrant_client.QdrantClient(\n    os.environ.get(\"QDRANT_URL\"),\n    api_key=os.environ.get(\"QDRANT_API_KEY\"),\n)\n\n## Uncomment below to connect to local Qdrant\n#client = qdrant_client.QdrantClient(\"http://localhost:6333\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Go\nDESCRIPTION: Demonstrates how to establish a connection to a Qdrant vector database and create a new collection. The code configures vector parameters including size (768 dimensions) and cosine distance metric, along with optimizer settings for maximum segment size.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-optimizer-config/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tOptimizersConfig: &qdrant.OptimizersConfigDiff{\n\t\tMaxSegmentSize: qdrant.PtrOf(uint64(20000)),\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Qdrant Java Client\nDESCRIPTION: This code snippet demonstrates how to create a collection in Qdrant using the Java client. It initializes the Qdrant client, defines the vector parameters (size and distance metric), and then creates a new collection with the specified parameters. The collection name is defined as \"{collection_name}\".\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-vectors-on-disk/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        \"{collection_name}\",\n        VectorParams.newBuilder()\n            .setSize(768)\n            .setDistance(Distance.Cosine)\n            .setOnDisk(true)\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Re-enabling HNSW Indexing After Upload in Go\nDESCRIPTION: Go code to update a Qdrant collection by enabling HNSW indexing after bulk upload. Changes the m parameter from 0 to 16 to initiate the construction of the HNSW graph for fast vector search capabilities.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nqdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient, err := client.UpdateCollection(context.Background(), &qdrant.UpdateCollection{\n\tCollectionName: \"{collection_name}\",\n\tHnswConfig: &qdrant.HnswConfigDiff{\n\t\tM:        qdrant.PtrOf(uint64(16)),\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration in Go\nDESCRIPTION: Initializes a Qdrant client and creates a new collection with specific vector parameters and product quantization settings. The collection is configured with 768-dimensional vectors using cosine distance metric and x16 compression ratio.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-product-quantization/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tQuantizationConfig: qdrant.NewQuantizationProduct(\n\t\t&qdrant.ProductQuantization{\n\t\t\tCompression: qdrant.CompressionRatio_x16,\n\t\t\tAlwaysRam:   qdrant.PtrOf(true),\n\t\t},\n\t),\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Recommendation Queries with Qdrant\nDESCRIPTION: This Java snippet demonstrates the initialization of a Qdrant client and execution of a set of recommendation queries using the Qdrant Java client and gRPC. It sets up a connection to a local Qdrant server and constructs recommendation queries with positive and negative vector inputs filtered by a specified city. Dependencies include Qdrant Java client libraries and gRPC. Inputs include connection parameters and query details while the output is not directly shown but executed asynchronously. Key constraints include connecting to the correct server endpoint and specifying valid collection and query data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-batch/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.RecommendInput;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.recommend;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nFilter filter = Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")).build();\n\nList<QueryPoints> recommendQueries = List.of(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(recommend(\n                        RecommendInput.newBuilder()\n                                .addAllPositive(List.of(vectorInput(100), vectorInput(231)))\n                                .addAllNegative(List.of(vectorInput(731)))\n                                .build()))\n                .setFilter(filter)\n                .setLimit(3)\n                .build(),\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(recommend(\n                        RecommendInput.newBuilder()\n                                .addAllPositive(List.of(vectorInput(200), vectorInput(67)))\n                                .addAllNegative(List.of(vectorInput(300)))\n                                .build()))\n                .setFilter(filter)\n                .setLimit(3)\n                .build());\n                \nclient.queryBatchAsync(\"{collection_name}\", recommendQueries).get();\n```\n\n----------------------------------------\n\nTITLE: Performing Nearest Neighbors Search with Qdrant\nDESCRIPTION: Demonstrates a basic vector similarity search using Qdrant's Query API to find the most similar vectors\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/search.md#2025-04-21_snippet_0\n\nLANGUAGE: rest\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n```\n\n----------------------------------------\n\nTITLE: Managing Collection Aliases with HTTP POST in Qdrant\nDESCRIPTION: This HTTP POST request demonstrates how to manage collection aliases in Qdrant. It includes two actions: deleting an existing alias named 'production_collection' and creating a new alias with the same name pointing to 'example_collection'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/switch/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/aliases\n{\n    \"actions\": [\n        {\n            \"delete_alias\": {\n                \"alias_name\": \"production_collection\"\n            }\n        },\n        {\n            \"create_alias\": {\n                \"collection_name\": \"example_collection\",\n                \"alias_name\": \"production_collection\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection Alias in Qdrant with Go\nDESCRIPTION: This code demonstrates how to create an alias for a Qdrant collection using the Go client. It imports the context package and calls the CreateAlias method to create an alias named 'production_collection' for the 'example_collection'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/create/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"context\"\n\nclient.CreateAlias(context.Background(), \"production_collection\", \"example_collection\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Points with Negation in Qdrant Collection\nDESCRIPTION: HTTP POST request that demonstrates using must_not and must operators to filter points in a Qdrant collection. The example excludes points that match both London city and red color conditions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-nested-clauses-filter/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must_not\": [\n            {\n                \"must\": [\n                    { \"key\": \"city\", \"match\": { \"value\": \"London\" } },\n                    { \"key\": \"color\", \"match\": { \"value\": \"red\" } }\n                ]\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Text Embedding Model\nDESCRIPTION: Code that sets up the OpenAI text embedding model for converting text data into vector representations. Uses the 'text-embedding-3-small' model to capture semantic meaning of text documents.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-ingestion-beginners.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfrom langchain_openai import OpenAIEmbeddings\n\n# Initialize the text embedding model from OpenAI\ntext_embedding_model = OpenAIEmbeddings(model=\"text-embedding-3-small\")\n```\n\n----------------------------------------\n\nTITLE: Querying Points in Qdrant Collection with HTTP\nDESCRIPTION: This snippet illustrates how to send a POST request to the Qdrant API for querying points. It includes parameters for specifying the query vector and additional options like quantization and result limits. Dependencies include a functioning HTTP client capable of making POST requests to the Qdrant API.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-ignored-quantization/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"params\": {\n        \"quantization\": {\n            \"ignore\": true\n        }\n    },\n    \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Data into Qdrant with Apify Integration\nDESCRIPTION: This Python code configures and calls the Apify Qdrant integration actor to store data in a Qdrant Vector Database.  It sets parameters like the Qdrant URL, API key, collection name, dataset ID, and embedding provider, and also configures chunking and delta updates.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/platforms/apify.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python\nqdrant_integration_inputs = {\n    \"qdrantUrl\": QDRANT_URL,\n    \"qdrantApiKey\": QDRANT_API_KEY,\n    \"qdrantCollectionName\": \"apify\",\n    \"qdrantAutoCreateCollection\": True,\n    \"datasetId\": actor_call[\"defaultDatasetId\"],\n    \"datasetFields\": [\"text\"],\n    \"enableDeltaUpdates\": True,\n    \"deltaUpdatesPrimaryDatasetFields\": [\"url\"],\n    \"expiredObjectDeletionPeriodDays\": 30,\n    \"embeddingsProvider\": \"OpenAI\", # \"Cohere\"\n    \"embeddingsApiKey\": OPENAI_API_KEY,\n    \"performChunking\": True,\n    \"chunkSize\": 1000,\n    \"chunkOverlap\": 0,\n}\nactor_call = client.actor(\"apify/qdrant-integration\").call(run_input=qdrant_integration_inputs)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Retriever Tool in Python\nDESCRIPTION: Sets up a Qdrant vector store with hybrid search capabilities using FastEmbed embeddings and creates a retriever tool for use in LangGraph.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langgraph.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.tools.retriever import create_retriever_tool\nfrom langchain_community.embeddings import FastEmbedEmbeddings\n\nfrom langchain_qdrant import FastEmbedSparse, QdrantVectorStore, RetrievalMode\n\n# We'll set up Qdrant to retrieve documents using Hybrid search.\n# Learn more at https://qdrant.tech/articles/hybrid-search/\nretriever = QdrantVectorStore.from_texts(\n    url=\"http://localhost:6333/\",\n    collection_name=\"langgraph-collection\",\n    embedding=FastEmbedEmbeddings(model_name=\"BAAI/bge-small-en-v1.5\"),\n    sparse_embedding=FastEmbedSparse(model_name=\"Qdrant/bm25\"),\n    retrieval_mode=RetrievalMode.HYBRID,\n    texts=[\"<SOME_KNOWLEDGE_TEXT>\", \"<SOME_OTHER_TEXT>\", ...]\n).as_retriever()\n\nretriever_tool = create_retriever_tool(\n    retriever,\n    \"retrieve_my_texts\",\n    \"Retrieve texts stored in the Qdrant collection\",\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Price Filter in Qdrant JSON Format\nDESCRIPTION: This JSON snippet shows how to set a price filter in Qdrant to select laptops with a price less than or equal to $1000. It uses the 'range' condition to specify the price criteria.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-filtering.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"price\",\n  \"range\": {\n    \"gt\": null,\n    \"gte\": null,\n    \"lt\": null,\n    \"lte\": 1000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multitenancy in Qdrant (Python)\nDESCRIPTION: This code shows how to set up multitenancy in Qdrant by creating a payload index with the 'is_tenant' parameter. It also includes an example of upserting points with tenant-specific payloads.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-resource-optimization.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"group_id\",\n    field_schema=models.KeywordIndexParams(\n        type=\"keyword\",\n        is_tenant=True,\n    ),\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n   collection_name=\"{collection_name}\",\n   points=[\n       models.PointStruct(\n           id=1,\n           payload={\"group_id\": \"user_1\"},\n           vector=[0.9, 0.1, 0.1],\n       ),\n\n       models.PointStruct(\n           id=2,\n           payload={\"group_id\": \"user_2\"},\n           vector=[0.5, 0.9, 0.4],\n       )\n   ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration\nDESCRIPTION: Initializes a Qdrant client connection to localhost and creates a new collection with 768-dimensional vectors using Cosine distance. Includes on-disk storage and int8 scalar quantization configuration for optimized storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/quantization-on-disk/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n    on_disk: true,\n  },\n  quantization_config: {\n    scalar: {\n      type: \"int8\",\n      always_ram: false,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: JWT Collection-Specific Access Configuration\nDESCRIPTION: Example of configuring read-write access for specific collections.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access\": [\n    {\n      \"collection\": \"my_collection\",\n      \"access\": \"rw\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Upserting Sparse Vector Points in Qdrant using Rust\nDESCRIPTION: This snippet demonstrates how to create a Qdrant client, construct a point with a sparse vector, and upsert it into a specified collection. It uses the qdrant_client crate to interact with the Qdrant vector database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/sparse-vectors-single/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{NamedVectors, PointStruct, UpsertPointsBuilder, Vector};\n\nuse qdrant_client::{Payload, Qdrant};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet points = vec![PointStruct::new(\n    1,\n    NamedVectors::default().add_vector(\n        \"text\",\n        Vector::new_sparse(vec![1, 3, 5, 7], vec![0.1, 0.2, 0.3, 0.4]),\n    ),\n    Payload::new(),\n)];\n\nclient\n    .upsert_points(UpsertPointsBuilder::new(\"{collection_name}\", points))\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Basic Discovery Search Request\nDESCRIPTION: Demonstrates a basic discovery search request in Qdrant, using context pairs to constrain and refine vector search results\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/explore.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/query-points-explore/discovery-basic/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collection with Dense Vector\nDESCRIPTION: This HTTP request queries points in a Qdrant collection using a dense vector. The request is made to the collection-specific endpoint, providing a vector of floating-point values that will be used for similarity search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/simple-dense/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7] // <--- Dense vector\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Java\nDESCRIPTION: This code snippet demonstrates how to query a Qdrant collection using the Java client. It uses `QueryFactory.recommend` to build a query with positive and negative vector inputs, then executes the query using `client.queryAsync`. The query is performed on a specified collection and index, with a limit on the number of results returned.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-named-vectors/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.RecommendInput;\n\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.recommend;\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(recommend(RecommendInput.newBuilder()\n                .addAllPositive(List.of(vectorInput(100), vectorInput(231)))\n                .addAllNegative(List.of(vectorInput(718)))\n                .build()))\n        .setUsing(\"image\")\n        .setLimit(10)\n        .build()).get();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Client in TypeScript\nDESCRIPTION: Sets up a Qdrant client connection to localhost and performs a vector similarity search query. The query includes a 4-dimensional vector and excludes the 'city' field from the returned payload.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/exclude-fields/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  query: [0.2, 0.1, 0.9, 0.7],\n  with_payload: {\n    exclude: [\"city\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Sparse Embeddings\nDESCRIPTION: Processes documents to create sparse embeddings with batching\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-splade.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsparse_embeddings_list: List[SparseEmbedding] = list(\n    model.embed(documents, batch_size=6)\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Database\nDESCRIPTION: This snippet initializes a Qdrant client and constructs a query to retrieve nearest points from a specified collection. It demonstrates the use of prefetch queries to optimize the retrieval of data, including a limit on the number of points returned. Requires the 'qdrant_client' crate for Rust.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-multivector/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{PrefetchQueryBuilder, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .query(Query::new_nearest(vec![0.01, 0.45, 0.67]))\n            .limit(100u64)\n        )\n        .query(Query::new_nearest(vec![\n            vec![0.1, 0.2],\n            vec![0.2, 0.1],\n            vec![0.8, 0.9],\n        ]))\n        .using(\"colbert\")\n        .limit(10u64)\n).await?;\n```\n\n----------------------------------------\n\nTITLE: Indexing Field in Qdrant Collection via HTTP\nDESCRIPTION: This HTTP PUT request demonstrates how to create an index for a specific field within a Qdrant collection. It defines the `field_name` to index and configures its `field_schema` with properties like `type`, `lookup`, and `range`.  This example sets the field type to integer and enables range filtering.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/integer-with-params/http.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPUT /collections/{collection_name}/index\n{\n    \"field_name\": \"name_of_the_field_to_index\",\n    \"field_schema\": {\n        \"type\": \"integer\",\n        \"lookup\": false,\n        \"range\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with Nested Field Filter in Python\nDESCRIPTION: This code performs a scroll query on a Qdrant collection using the client's scroll method. It applies a filter to match records where the nested field 'country.cities[].sightseeing' contains the value 'Osaka Castle'. This query is useful for retrieving paginated results that meet specific criteria in nested document structures.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-array-match/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        should=[\n            models.FieldCondition(\n                key=\"country.cities[].sightseeing\",\n                match=models.MatchValue(value=\"Osaka Castle\"),\n            ),\n        ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Match Condition in Qdrant Client\nDESCRIPTION: Imports and uses the static match method from ConditionFactory to create a condition matching a specific field value. Useful for filtering vector search results or performing conditional queries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-integer/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.match;\n\nmatch(\"count\", 0);\n```\n\n----------------------------------------\n\nTITLE: Checking Emptiness of Reports Using Qdrant gRPC\nDESCRIPTION: This code snippet checks if the reports collection is empty by invoking the IsEmpty method from Qdrant's gRPC client. It requires the Qdrant gRPC client library to be included in the project. The primary function is to return a boolean value indicating whether the reports collection contains any entries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/is-empty/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nIsEmpty(\"reports\");\n```\n\n----------------------------------------\n\nTITLE: Document Processing and Vector Storage\nDESCRIPTION: Processes documents using UnstructuredFileLoader, splits them into chunks, and stores them in Qdrant with associated metadata and access roles.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-contract-management-stackit-aleph-alpha.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.document_loaders.unstructured import UnstructuredFileLoader\n\nfor document_path, roles in documents.items():\n    document_loader = UnstructuredFileLoader(file_path=document_path)\n\n    # Unstructured loads each file into a single Document object\n    loaded_documents = document_loader.load()\n    for doc in loaded_documents:\n        doc.metadata[\"roles\"] = roles\n\n    # Chunks will have the same metadata as the original document\n    document_chunks = text_splitter.split_documents(loaded_documents)\n\n    # Add the documents to the Qdrant collection\n    qdrant.add_documents(document_chunks, batch_size=20)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in TypeScript\nDESCRIPTION: Sets up a Qdrant client connection to localhost and creates a new vector collection with specified dimensions, distance metric, and optimizer settings. The collection is configured for 768-dimensional vectors using Cosine similarity, with optimization parameters for segment management.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-large-segments/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n  },\n  optimizers_config: {\n    default_segment_number: 2,\n    max_segment_size: 5000000,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Sparse Vector Index on Disk in Qdrant\nDESCRIPTION: Code snippet showing how to configure a sparse vector index stored on disk. This is useful for vectors with a high proportion of zeroes and allows for more memory-efficient storage while maintaining search capabilities.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/indexing.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/create-collection/sparse-vector-index-on-disk/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Computing Valid Triplet Mask in PyTorch\nDESCRIPTION: Helper function to compute a mask for valid triplets in a batch. Handles distinct indices and valid anchor-positive-negative triplets based on label equality conditions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/triplet-loss.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_triplet_mask(labels):\n  \"\"\"compute a mask for valid triplets\n\n  Args:\n    labels: Batch of integer labels. shape: (batch_size,)\n\n  Returns:\n    Mask tensor to indicate which triplets are actually valid. Shape: (batch_size, batch_size, batch_size)\n    A triplet is valid if:\n    `labels[i] == labels[j] and labels[i] != labels[k]`\n    and `i`, `j`, `k` are different.\n  \"\"\"\n  # step 1 - get a mask for distinct indices\n\n  # shape: (batch_size, batch_size)\n  indices_equal = torch.eye(labels.size()[0], dtype=torch.bool, device=labels.device)\n  indices_not_equal = torch.logical_not(indices_equal)\n  # shape: (batch_size, batch_size, 1)\n  i_not_equal_j = indices_not_equal.unsqueeze(2)\n  # shape: (batch_size, 1, batch_size)\n  i_not_equal_k = indices_not_equal.unsqueeze(1)\n  # shape: (1, batch_size, batch_size)\n  j_not_equal_k = indices_not_equal.unsqueeze(0)\n  # Shape: (batch_size, batch_size, batch_size)\n  distinct_indices = torch.logical_and(torch.logical_and(i_not_equal_j, i_not_equal_k), j_not_equal_k)\n\n  # step 2 - get a mask for valid anchor-positive-negative triplets\n\n  # shape: (batch_size, batch_size)\n  labels_equal = labels.unsqueeze(0) == labels.unsqueeze(1)\n  # shape: (batch_size, batch_size, 1)\n  i_equal_j = labels_equal.unsqueeze(2)\n  # shape: (batch_size, 1, batch_size)\n  i_equal_k = labels_equal.unsqueeze(1)\n  # shape: (batch_size, batch_size, batch_size)\n  valid_indices = torch.logical_and(i_equal_j, torch.logical_not(i_equal_k))\n\n  # step 3 - combine two masks\n  mask = torch.logical_and(distinct_indices, valid_indices)\n\n  return mask\n```\n\n----------------------------------------\n\nTITLE: Implementing Distribution-Based Score Fusion with C# in Qdrant\nDESCRIPTION: C# client example for using DBSF in Qdrant to combine results from sparse and dense vector queries. The code demonstrates how to structure queries with appropriate vectors and specify the fusion method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.11.x.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  prefetch: new List < PrefetchQuery > {\n    new() {\n      Query = new(float, uint)[] {\n          (0.22f, 1), (0.8f, 42),\n        },\n        Using = \"sparse\",\n        Limit = 20\n    },\n    new() {\n      Query = new float[] {\n          0.01f, 0.45f, 0.67f\n        },\n        Using = \"dense\",\n        Limit = 20\n    }\n  },\n  query: Fusion.Dbsf\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Qdrant Collections via HTTP GET\nDESCRIPTION: This HTTP GET request retrieves a list of all collections from a Qdrant vector database. It targets the /collections endpoint, which is expected to return information about the available collections in the Qdrant instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/list-all-collections/simple/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /collections\n```\n\n----------------------------------------\n\nTITLE: ToolNode Class Definition\nDESCRIPTION: This Python code defines the `ToolNode` class.  It initializes a list of tools by name and provides a `__call__` method to execute the appropriate tool based on the `tool_calls` in the input. The tool results are then packaged as `ToolMessage` objects and returned.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass ToolNode:\n    def __init__(self, tools: list) -> None:\n        self.tools_by_name = {tool.name: tool for tool in tools}\n\n    def __call__(self, inputs: dict):\n        if messages := inputs.get(\"messages\", []):\n            message = messages[-1]\n        else:\n            raise ValueError(\"No message found in input\")\n\n        outputs = []\n        for tool_call in message.tool_calls:\n            tool_result = self.tools_by_name[tool_call[\"name\"]].invoke(\n                tool_call[\"args\"]\n            )\n            outputs.append(\n                ToolMessage(\n                    content=json.dumps(tool_result),\n                    name=tool_call[\"name\"],\n                    tool_call_id=tool_call[\"id\"],\n                )\n            )\n\n        return {\"messages\": outputs}\n```\n\n----------------------------------------\n\nTITLE: C# Client with API Key Authentication\nDESCRIPTION: Example of initializing the Qdrant .NET client with API key authentication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\n  host: \"xyz-example.eu-central.aws.cloud.qdrant.io\",\n  https: true,\n  apiKey: \"<paste-your-api-key-here>\"\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Field-Restricted Qdrant Filters with LLMs\nDESCRIPTION: Enhanced code that provides the LLM with information about available indexed fields, ensuring the generated filter only uses valid field names and appropriate filter types.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/automate-filtering-with-llms.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nqdrant_filter = anthropic_client.messages.create(\n    model=\"claude-3-5-sonnet-latest\",\n    response_model=models.Filter,\n    max_tokens=1024,\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": (\n                \"<query>color is red</query>\"\n                f\"<indexes>\\n{formatted_indexes}\\n</indexes>\"\n            )\n        }\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Collection with HNSW Configuration\nDESCRIPTION: Creates a new Qdrant collection with 768-dimensional vectors using cosine similarity and custom HNSW index parameters. The code establishes a connection to a local Qdrant instance and configures the collection with specific payload and graph parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-disabled-global-hnsw/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n    hnsw_config=models.HnswConfigDiff(\n        payload_m=16,\n        m=0,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Query to Embedding for Search\nDESCRIPTION: Transforms the search query into a vector embedding using Cohere's API. The input_type is set to 'search_query' to optimize the embedding specifically for search queries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-semantic-search.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nquery_embeddings = co.embed(texts=[query],\n                          model=model,\n                          input_type=\"search_query\",\n                          embedding_types=['float'])\n```\n\n----------------------------------------\n\nTITLE: JWT Configuration for Customer Support Role\nDESCRIPTION: Complete JWT payload example for a customer support representative role with department-specific access controls.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/data-privacy.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 1690995200,\n  \"access\": [\n    {\n      \"collection\": \"customer_data\",\n      \"access\": \"rw\",\n      \"payload\": {\n        \"department\": \"support\"\n      }\n    }\n  ],\n  \"value_exists\": {\n    \"collection\": \"departments\",\n    \"matches\": [\n      { \"key\": \"department\", \"value\": \"support\" }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Cloud with cURL\nDESCRIPTION: This snippet shows how to authenticate and query a Qdrant Cloud instance using `curl`. It uses either the `api-key` header or the `Authorization` header with a `Bearer` token for authentication. The snippet includes the necessary headers and URL for a basic GET request.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart-cloud.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X GET https://xyz-example.eu-central.aws.cloud.qdrant.io:6333 \\\n  --header 'api-key: <your-api-key>'\n\n# Alternatively, you can use the `Authorization` header with the `Bearer` prefix\ncurl \\\n  -X GET https://xyz-example.eu-central.aws.cloud.qdrant.io:6333 \\\n  --header 'Authorization: Bearer <your-api-key>'\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database in Rust\nDESCRIPTION: Creates a query to search for similar vectors in a Qdrant collection with specific payload fields returned. The query includes a 4-dimensional vector, limits results to 3 entries, selectively returns only specific payload fields, and includes the vector values in the response.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-payload-fields/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{with_payload_selector::SelectorOptions, QueryPointsBuilder};\nuse qdrant_client::Qdrant;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .with_payload(SelectorOptions::Include(\n                vec![\n                    \"city\".to_string(),\n                    \"village\".to_string(),\n                    \"town\".to_string(),\n                ]\n                .into(),\n            ))\n            .with_vectors(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection Points with Exclusion Filters\nDESCRIPTION: This HTTP POST request scrolls through points in a Qdrant collection, excluding points that match specific criteria. It uses a 'must_not' filter to exclude points where the city is London or the color is red.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-must-not-filter/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must_not\": [\n            { \"key\": \"city\", \"match\": { \"value\": \"London\" } },\n            { \"key\": \"color\", \"match\": { \"value\": \"red\" } }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Vectors in Qdrant Collection with TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use a Qdrant client to update vector data in a specified collection. It involves sending an update request with a list of points, each associated with a unique ID and a vector array, either from image or text sources. This operation relies on an existing Qdrant setup with accessible collections. Key parameters include the collection name and the structure of the vector data. There are no specific constraints apart from the need of valid vector data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-vectors/simple/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.updateVectors(\"{collection_name}\", {\n  points: [\n    {\n      id: 1,\n      vector: {\n        image: [0.1, 0.2, 0.3, 0.4],\n      },\n    },\n    {\n      id: 2,\n      vector: {\n        text: [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure CSI VolumeSnapshotClass for Kubernetes\nDESCRIPTION: YAML configuration for creating a VolumeSnapshotClass in Azure Kubernetes Service (AKS). This setup is required to enable backups and restores in Qdrant deployments on AKS, using Azure Disk CSI driver.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/platform-deployment-options.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: snapshot.storage.k8s.io/v1\nkind: VolumeSnapshotClass\nmetadata:\n  name: csi-snapclass\ndeletionPolicy: Delete\ndriver: disk.csi.azure.com\n```\n\n----------------------------------------\n\nTITLE: Inserting Points with Vectors and Payloads in Qdrant Collection\nDESCRIPTION: This HTTP PUT request inserts multiple points into a Qdrant collection. Each point includes an ID, a vector, and a payload with metadata. The payload can contain both single values and arrays for flexibility in data representation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-payload/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/points\n{\n    \"points\": [\n        {\n            \"id\": 1,\n            \"vector\": [0.05, 0.61, 0.76, 0.74],\n            \"payload\": {\"city\": \"Berlin\", \"price\": 1.99}\n        },\n        {\n            \"id\": 2,\n            \"vector\": [0.19, 0.81, 0.75, 0.11],\n            \"payload\": {\"city\": [\"Berlin\", \"London\"], \"price\": 1.99}\n        },\n        {\n            \"id\": 3,\n            \"vector\": [0.36, 0.55, 0.47, 0.94],\n            \"payload\": {\"city\": [\"Berlin\", \"Moscow\"], \"price\": [1.99, 2.99]}\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Neo4j GraphRAG with Qdrant Support\nDESCRIPTION: Command to install the Neo4j GraphRAG package with Qdrant integration support using pip.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/neo4j-graphrag.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install neo4j-graphrag[qdrant]\n```\n\n----------------------------------------\n\nTITLE: Enabling On-Disk Payload Storage in Qdrant (Python)\nDESCRIPTION: Demonstrates how to enable on-disk payload storage when creating a collection in Qdrant. This approach helps manage memory usage for large datasets by storing payloads on disk.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-resource-optimization.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    on_disk_payload= True\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Basic Vector Similarity Search in Qdrant\nDESCRIPTION: This code snippet demonstrates how to perform a basic vector similarity search in Qdrant using a query vector [0.2, 0.1, 0.9, 0.7]. It searches the 'test_collection' and returns the top 3 most similar vectors without payload.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nsearch_result = client.query_points(\n    collection_name=\"test_collection\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    with_payload=False,\n    limit=3\n).points\n\nprint(search_result)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet searchResult = await client.query(\n    \"test_collection\", {\n    query: [0.2, 0.1, 0.9, 0.7],\n    limit: 3\n});\n\nconsole.debug(searchResult.points);\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::QueryPointsBuilder;\n\nlet search_result = client\n    .query(\n        QueryPointsBuilder::new(\"test_collection\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n    )\n    .await?;\n\ndbg!(search_result);\n```\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport io.qdrant.client.grpc.Points.ScoredPoint;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nList<ScoredPoint> searchResult =\n    client.queryAsync(QueryPoints.newBuilder()\n                .setCollectionName(\"test_collection\")\n                .setLimit(3)\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .build()).get();\n      \nSystem.out.println(searchResult);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar searchResult = await client.QueryAsync(\n    collectionName: \"test_collection\",\n    query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n    limit: 3,\n);\n\nConsole.WriteLine(searchResult);\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nsearchResult, err := client.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"test_collection\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n})\nif err != nil {\n\tpanic(err)\n}\n\nfmt.Println(searchResult)\n```\n\n----------------------------------------\n\nTITLE: Implementing Mighty API for Embeddings in Rust\nDESCRIPTION: Defines a function to fetch embeddings from the Mighty API using Reqwest. It handles the API response and extracts the embedding vector.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/mighty.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse anyhow::anyhow;\nuse reqwest::Client;\nuse serde::Deserialize;\nuse serde_json::Value as JsonValue;\n\n#[derive(Deserialize)]\nstruct EmbeddingsResponse {\n    pub outputs: Vec<Vec<f32>>,\n}\n\npub async fn get_mighty_embedding(\n    client: &Client,\n    url: &str,\n    text: &str\n) -> anyhow::Result<Vec<f32>> {\n    let response = client.get(url).query(&[(\"text\", text)]).send().await?;\n\n    if !response.status().is_success() {\n        return Err(anyhow!(\n            \"Mighty API returned status code {}\",\n            response.status()\n        ));\n    }\n\n    let embeddings: EmbeddingsResponse = response.json().await?;\n    // ignore multiple embeddings at the moment\n    embeddings.get(0).ok_or_else(|| anyhow!(\"mighty returned empty embedding\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database with TypeScript\nDESCRIPTION: Creates a connection to a Qdrant vector database running on localhost:6333 and performs a vector similarity search. The query includes a 4-dimensional vector and parameters to disable rescoring during quantization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-disabled-rescoring/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: [0.2, 0.1, 0.9, 0.7],\n    params: {\n        quantization: {\n            rescore: false,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling On-Disk Vector Storage in Qdrant\nDESCRIPTION: Configuration to enable on-disk storage for vectors, reducing RAM usage during vector operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/indexing-optimization.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nPATCH /collections/your_collection\n{\n    \"vectors\": {\n      \"on_disk\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection in Rust\nDESCRIPTION: This code snippet demonstrates how to create a collection in Qdrant using the Rust client. It utilizes the `qdrant_client` crate to build a client connection and create a collection with specified vector parameters (dimension 768, distance Cosine) and optimizer configurations (default segment number 16).\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-high-number-of-segments/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, OptimizersConfigDiffBuilder, VectorParamsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine))\n            .optimizers_config(\n                OptimizersConfigDiffBuilder::default().default_segment_number(16),\n            ),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Go\nDESCRIPTION: This snippet demonstrates how to create a new Qdrant client, specifying the host and port for the connection. It also includes the functionality to delete specific points from a collection by using the DeletePoints structure that takes a collection name and a selector for point IDs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-points/simple/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Delete(context.Background(), &qdrant.DeletePoints{\n\tCollectionName: \"{collection_name}\",\n\tPoints: qdrant.NewPointsSelector(\n\t\tqdrant.NewIDNum(0), qdrant.NewIDNum(3), qdrant.NewIDNum(100),\n\t),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection with Rust Client\nDESCRIPTION: This code establishes a connection to a Qdrant server and creates a new collection. It sets up the collection with 100-dimensional vectors using cosine distance for similarity calculations. The collection name is parameterized.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/simple/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{CreateCollectionBuilder, VectorParamsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(100, Distance::Cosine)),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Collection with MMAP for Vectors\nDESCRIPTION: HTTP request to create a Qdrant collection with memory-mapped file storage for vectors, enabling more efficient memory usage for large vector datasets.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/memory-consumption.md#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/benchmark\n{\n  \"vectors\": {\n    ...\n    \"on_disk\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ValuesCount Condition in Qdrant with Java\nDESCRIPTION: This snippet demonstrates how to create a `ValuesCount` condition using the Qdrant Java client. The `valuesCount` method from the `ConditionFactory` is used to create a condition that filters points where the count of values in the \"comments\" field is greater than 2. The code requires the `io.qdrant.client` dependency.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/values-count/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.valuesCount;\n\nimport io.qdrant.client.grpc.Points.ValuesCount;\n\nvaluesCount(\"comments\", ValuesCount.newBuilder().setGt(2).build());\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in Python\nDESCRIPTION: This snippet creates a collection named 'test_collection' in Qdrant with specific vector parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import Distance, VectorParams\\n\\nclient.create_collection(\\n    collection_name=\"test_collection\",\\n    vectors_config=VectorParams(size=4, distance=Distance.DOT)\\n);\n```\n\n----------------------------------------\n\nTITLE: Cross-Collection Vector Lookup Query in Qdrant\nDESCRIPTION: HTTP POST request for querying points across collections in Qdrant. Uses a point ID from one collection to look up its vector and search in another collection. The lookup_from parameter specifies the source collection and vector name.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/by-existing-id-with-lookup/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": \"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\", // <--- point id\n    \"using\": \"512d-vector\"\n    \"lookup_from\": {\n        \"collection\": \"another_collection\", // <--- other collection name\n        \"vector\": \"image-512\" // <--- vector name in the other collection\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Qdrant Client and Creating Collection in Go\nDESCRIPTION: This Go snippet shows how to initialize a Qdrant client and create a collection using Qdrant's Go client library. It starts by creating a new client with specified host and port. Then, it uses the client to create a collection by specifying collection name, vector parameters for size and distance, and HNSW configuration parameters. This snippet requires Qdrant's Go client library. The main function calls include \\'qdrant.NewClient\\', \\'client.CreateCollection\\', and configurations such as \\'qdrant.NewVectorsConfig\\' and \\'qdrant.HnswConfigDiff\\'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-disabled-global-hnsw/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tHnswConfig: &qdrant.HnswConfigDiff{\n\t\tPayloadM: qdrant.PtrOf(uint64(16)),\n\t\tM:        qdrant.PtrOf(uint64(0)),\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Upserting Data Using Nomic SDK - Python\nDESCRIPTION: This snippet demonstrates how to use the Nomic SDK to embed text into vector representations and then upsert them into a specified Qdrant collection. It utilizes the 'search_document' task type to define the embeddings used for documents. The output from the embedding process is used to create a batch of points to be added to the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/nomic.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\nfrom nomic import embed\n\noutput = embed.text(\n    texts=[\"Qdrant is the best vector database!\"],\n    model=\"nomic-embed-text-v1\",\n    task_type=\"search_document\",\n)\n\nclient = QdrantClient()\nclient.upsert(\n    collection_name=\"my-collection\",\n    points=models.Batch(\n        ids=[1],\n        vectors=output[\"embeddings\"],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying with Qdrant Go Client\nDESCRIPTION: This snippet shows how to import the Qdrant client package, establish a connection to a Qdrant server running on localhost:6334, and perform a basic vector query. The query uses vector coordinates for similarity search against a specified collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/simple-dense/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n})\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with OR Filters in Python\nDESCRIPTION: Demonstrates using the Qdrant client scroll method to retrieve records matching either of two field conditions. The query uses OR logic to find records where either city is 'London' OR color is 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-should-filter/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        should=[\n            models.FieldCondition(\n                key=\"city\",\n                match=models.MatchValue(value=\"London\"),\n            ),\n            models.FieldCondition(\n                key=\"color\",\n                match=models.MatchValue(value=\"red\"),\n            ),\n        ]\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection for MS COCO Dataset\nDESCRIPTION: Setting up a Qdrant collection with configuration for both text and image vectors\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/storing-multiple-vectors-per-object-in-qdrant.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.http.models import VectorParams, Distance\n\nclient = QdrantClient(timeout=None)\nclient.create_collection(\n   collection_name=\"ms-coco-2017\",\n   vectors_config={\n       \"text\": VectorParams(\n           size=384,\n           distance=Distance.EUCLID,\n       ),\n       \"image\": VectorParams(\n           size=1000,\n           distance=Distance.COSINE,\n       ),\n   },\n)\n```\n\n----------------------------------------\n\nTITLE: Setting JWT RBAC via Environment Variables\nDESCRIPTION: Example of enabling JWT-based Role-Based Access Control in Qdrant using environment variables.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport QDRANT__SERVICE__API_KEY=your_secret_api_key_here\nexport QDRANT__SERVICE__JWT_RBAC=true\n```\n\n----------------------------------------\n\nTITLE: Basic Cross-Encoder Usage Example in Python\nDESCRIPTION: Demonstrates the basic usage of the TextCrossEncoder class for re-ranking documents based on a query. Shows how to initialize the encoder with a specific model and obtain relevance scores.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/cross-encoder-integration-gsoc.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastembed.rerank.cross_encoder import TextCrossEncoder\n\nencoder = TextCrossEncoder(model_name=\"Xenova/ms-marco-MiniLM-L-6-v2\")\nscores = encoder.rerank(query, documents)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection for arXiv Embeddings\nDESCRIPTION: Shows how to create a Qdrant collection to store the arXiv title embeddings using the Qdrant Python client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/huggingface-datasets.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"arxiv-titles-instructorxl-embeddings\",\n    vectors_config=models.VectorParams(\n        size=768,\n        distance=models.Distance.COSINE,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index Asynchronously with Qdrant Client in Java\nDESCRIPTION: This snippet demonstrates how to configure and execute the asynchronous creation of a payload index using Qdrant's Java client. The snippet requires the Qdrant Java library and a running Qdrant server. Parameters include 'collection_name' which specifies the target collection, and 'name_of_the_field_to_index', which names the field to be indexed. The example employs an integer index type and specifies that the index should support range queries but not lookup.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/integer-with-params/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\\nimport io.qdrant.client.QdrantGrpcClient;\\nimport io.qdrant.client.grpc.Collections.IntegerIndexParams;\\nimport io.qdrant.client.grpc.Collections.PayloadIndexParams;\\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\\n\\nQdrantClient client =\\n    new QdrantClient(QdrantGrpcClient.newBuilder(\\\"localhost\\\", 6334, false).build());\\n\\nclient\\n    .createPayloadIndexAsync(\\n        \\\"{collection_name}\\\",\\n        \\\"name_of_the_field_to_index\\\",\\n        PayloadSchemaType.Integer,\\n        PayloadIndexParams.newBuilder()\\n            .setIntegerIndexParams(\\n                IntegerIndexParams.newBuilder().setLookup(false).setRange(true).build())\\n            .build(),\\n        null,\\n        null,\\n        null)\\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Batch Recommendation Queries (Python)\nDESCRIPTION: This snippet defines a batch of recommendation queries to be sent to Qdrant. Each query specifies positive and negative point IDs for recommendations, applies a pre-defined filter (`filter_`), and limits the result set to 3 points.  These queries are then executed against the Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-batch/python.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrecommend_queries = [\n    models.QueryRequest(\n        query=models.RecommendQuery(\n            recommend=models.RecommendInput(positive=[100, 231], negative=[718])\n        ),\n        filter=filter_,\n        limit=3,\n    ),\n    models.QueryRequest(\n        query=models.RecommendQuery(\n            recommend=models.RecommendInput(positive=[200, 67], negative=[300])\n        ),\n        filter=filter_,\n        limit=3,\n    ),\n]\n\nclient.query_batch_points(\n    collection_name=\"{collection_name}\", requests=recommend_queries\n)\n```\n\n----------------------------------------\n\nTITLE: Inserting Points with Sparse Vectors in Qdrant Collection\nDESCRIPTION: This HTTP PUT request inserts a point with a sparse vector into a Qdrant collection. The request body includes the point ID and the vector data represented as indices and values.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/sparse-vectors-single/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/points\n{\n    \"points\": [\n        {\n            \"id\": 1,\n            \"vector\": {\n                \"text\": {\n                    \"indices\": [1, 3, 5, 7],\n                    \"values\": [0.1, 0.2, 0.3, 0.4]\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Facet Query with Qdrant Client in Python\nDESCRIPTION: This code establishes a connection to a local Qdrant server and performs a facet query on a specified collection. It retrieves facet values for the 'size' field while filtering for documents that have 'color' set to 'red'. This demonstrates Qdrant's capability for faceted search and filtering.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/facet-counts/simple-with-filter/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.facet(\n    collection_name=\"{collection_name}\",\n    key=\"size\",\n    facet_filter=models.Filter(must=[models.Match(\"color\", \"red\")]),\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Context-Aware Queries with Qdrant in C#\nDESCRIPTION: This snippet demonstrates how to initialize a Qdrant client connection and perform a query with context pairs. The query uses positive and negative vector IDs to find semantically similar vectors within a collection, limiting the results to 10 items.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/context-basic/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  query: new ContextInput {\n    Pairs = {\n      new ContextInputPair {\n        Positive = 100,\n          Negative = 718\n      },\n      new ContextInputPair {\n        Positive = 200,\n          Negative = 300\n      },\n    }\n  },\n  limit: 10\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Database with Java Client\nDESCRIPTION: Shows how to initialize a Qdrant client connection and execute an asynchronous nearest neighbor query. Uses the gRPC client to connect to a local Qdrant instance and searches for vectors nearest to a specified UUID.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/by-existing-id/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.UUID;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n  .setCollectionName(\"{collectionName}\")\n  .setQuery(nearest(UUID.fromString(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")))\n  .build()).get();\n```\n\n----------------------------------------\n\nTITLE: Performing Image-Based Semantic Search with Qdrant in Python\nDESCRIPTION: Generates an embedding for a query image using Aleph Alpha's API and performs a similarity search in the Qdrant database to find matching images.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/aleph-alpha-search.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync with AsyncCliet(token=aa_token) as aa_client:\n    prompt = ImagePrompt.from_file(\"query.jpg\")\n    prompt = Prompt.from_image(prompt)\n\n    query_params = {\n        \"prompt\": prompt,\n        \"representation\": SemanticRepresentation.Symmetric,\n        \"compress_to_size\": 128,\n    }\n    query_request = SemanticEmbeddingRequest(**query_params)\n    query_response = await aa_client.semantic_embed(request=query_request, model=model)\n\n    results = client.query_points(\n        collection_name=\"COCO\",\n        query=query_response.embedding,\n        limit=3,\n    ).points\n    print(results)\n```\n\n----------------------------------------\n\nTITLE: Updating Vectors in Qdrant Collection - Rust\nDESCRIPTION: This Rust code snippet updates vector data for specific points in a Qdrant collection using `qdrant_client`. It uses `UpdatePointVectorsBuilder` to construct the update request, which includes point IDs and their associated vector data. The code relies on `std::collections::HashMap` for vector storage and requires the `qdrant_client` crate. Inputs include collection name, point IDs, and vectors, while outputs are handled by the client asynchronously.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-vectors/simple/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse std::collections::HashMap;\n\nuse qdrant_client::qdrant::{\n    PointVectors, UpdatePointVectorsBuilder,\n};\n\nclient\n    .update_vectors(\n        UpdatePointVectorsBuilder::new(\n            \"{collection_name}\",\n            vec![\n                PointVectors {\n                    id: Some(1.into()),\n                    vectors: Some(\n                        HashMap::from([(\\\"image\\\".to_string(), vec![0.1, 0.2, 0.3, 0.4])]).into(),\n                    ),\n                },\n                PointVectors {\n                    id: Some(2.into()),\n                    vectors: Some(\n                        HashMap::from([(\n                            \\\"text\\\".to_string(),\n                            vec![0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],\n                        )])\n                        .into(),\n                    ),\n                },\n            ],\n        )\n        .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Strong Ordering in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to execute an upsert operation on points in Qdrant with strong ordering. It constructs a batch with IDs, payloads, and vectors while specifying the ordering parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nclient.upsert(\"{collection_name}\", {\n  batch: {\n    ids: [1, 2, 3],\n    payloads: [{ color: \"red\" }, { color: \"green\" }, { color: \"blue\" }],\n    vectors: [\n      [0.9, 0.1, 0.1],\n      [0.1, 0.9, 0.1],\n      [0.1, 0.1, 0.9],\n    ],\n  },\n  ordering: \"strong\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Shards in Java\nDESCRIPTION: Shows how to create a Qdrant collection with 6 shards using the Java client. The code establishes a gRPC connection to Qdrant and builds a request to create a new collection with specified vector parameters and shard count.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(300)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setShardNumber(6)\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Deferred HNSW Indexing in TypeScript\nDESCRIPTION: TypeScript code using the Qdrant JavaScript client to create a collection with HNSW indexing disabled. Setting m=0 optimizes for bulk uploads by deferring index construction until after data ingestion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n  },\n  hnsw_config: {\n    m: 0,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Vectors in Points via REST API\nDESCRIPTION: This code snippet illustrates how to update specified vectors of a point in Qdrant through the REST API. Unspecified vectors remain unchanged.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/points.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/update-vectors/simple/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Handling Operation Response in Python\nDESCRIPTION: This snippet displays the expected output format from the operation response after upserting vectors using Python.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\noperation_id=0 status=<UpdateStatus.COMPLETED: 'completed'>\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant via Docker - Bash\nDESCRIPTION: This Bash snippet demonstrates running the Qdrant service in a Docker container with ports for both REST and gRPC exposed. It includes volume binding for persistent storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/interfaces.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6333:6333 -p 6334:6334 \\\n    -v $(pwd)/qdrant_storage:/qdrant/storage:z \\\n    qdrant/qdrant\n\n```\n\n----------------------------------------\n\nTITLE: Setting Oversampling Factor via HTTP Request\nDESCRIPTION: HTTP POST request example showing how to configure the oversampling factor for quantization search with rescore parameter\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qdrant-1.3.x.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/search\n{\n  \"params\": {\n    \"quantization\": {\n      \"ignore\": false,\n      \"rescore\": true,\n      \"oversampling\": 2.4\n    }\n  },\n  \"vector\": [0.2, 0.1, 0.9, 0.7],\n  \"limit\": 100\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Vector Queries with Qdrant Client in C#\nDESCRIPTION: Executes multiple vector similarity search queries against a Qdrant collection with filtering and recommendation vectors. Connects to a local Qdrant instance and performs batch queries with specified positive and negative reference points.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-batch/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nvar filter = MatchKeyword(\"city\", \"london\");\n\nawait client.QueryBatchAsync(\n    collectionName: \"{collection_name}\",\n    queries:\n    [\n        new QueryPoints()\n        {\n            CollectionName = \"{collection_name}\",\n            Query = new RecommendInput {\n                Positive = { 100, 231 },\n                Negative = { 718 },\n            },\n            Limit = 3,\n            Filter = filter,\n        },\n                new QueryPoints()\n        {\n            CollectionName = \"{collection_name}\",\n            Query = new RecommendInput {\n                Positive = { 200, 67 },\n                Negative = { 300 },\n            },\n            Limit = 3,\n            Filter = filter,\n        }\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Cluster Write Consistency Factor - Python\nDESCRIPTION: This Python snippet uses the QdrantClient to set the `write_consistency_factor` during the creation of a collection. Dependencies include the `qdrant_client` library. Key parameters involve vector size and distance, shard number, and replication and write consistency factors. The function result is a configured collection in the Qdrant database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),\n    shard_number=6,\n    replication_factor=2,\n    write_consistency_factor=2,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Shards in Rust\nDESCRIPTION: Demonstrates creating a Qdrant collection with 6 shards using the Rust client. The code establishes a connection to Qdrant and uses a builder pattern to configure the collection with vector parameters and shard count.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{CreateCollectionBuilder, Distance, VectorParamsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(300, Distance::Cosine))\n            .shard_number(6),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with Exclusion Filters in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client to scroll through a collection while applying exclusion filters. It filters out results where the city is 'London' and the color is 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-must-not-filter/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must_not: [\n      {\n        key: \"city\",\n        match: { value: \"London\" },\n      },\n      {\n        key: \"color\",\n        match: { value: \"red\" },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Storing Encrypted Data with RBAC Policies\nDESCRIPTION: Demonstrates how to store vector data with role-based access control policies in Qdrant, including metadata and encryption headers.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/mirror-security.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom mirror_sdk.core.models import RBACVectorData\nfrom mirror_sdk.utils import encode_binary_data\n\npolicy = {\n    \"roles\": [\"admin\"],\n    \"groups\": [\"team_a\"],\n    \"departments\": [\"research\"],\n}\n# vector_embedding = generate_vector_embedding(...)\nvector_data = RBACVectorData(\n    # Generate or retrieve vector embeddings\n    vector=vector_embedding,\n    id=1,\n    access_policy=policy,\n)\nencrypted = mirror_sdk.rbac.encrypt(vector_data)\n\nqdrant.upsert(\n    collection_name=\"vectax\",\n    points=[\n        models.PointStruct(\n            id=1,\n            vector=encrypted.crypto.ciphertext,\n            payload={\n                \"encrypted_header\": encrypted.encrypted_header,\n                \"encrypted_vector_metadata\": encode_binary_data(\n                    encrypted.crypto.serialize()\n                ),\n                \"content\": \"My content\",\n            },\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Collection with HNSW and Quantization in Go\nDESCRIPTION: Initializes a Qdrant client and updates collection settings with custom HNSW vector configuration and scalar quantization parameters. The code sets up vector parameters like M and EfConstruct for HNSW indexing, and configures Int8 quantization with specified quantile and RAM settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/hnsw-and-quantization/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.UpdateCollection(context.Background(), &qdrant.UpdateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfigDiffMap(\n\t\tmap[string]*qdrant.VectorParamsDiff{\n\t\t\t\"my_vector\": {\n\t\t\t\tHnswConfig: &qdrant.HnswConfigDiff{\n\t\t\t\t\tM:           qdrant.PtrOf(uint64(3)),\n\t\t\t\t\tEfConstruct: qdrant.PtrOf(uint64(123)),\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\tQuantizationConfig: qdrant.NewQuantizationDiffScalar(\n\t\t&qdrant.ScalarQuantization{\n\t\t\tType:      qdrant.QuantizationType_Int8,\n\t\t\tQuantile:  qdrant.PtrOf(float32(0.8)),\n\t\t\tAlwaysRam: qdrant.PtrOf(true),\n\t\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Client in Go\nDESCRIPTION: Creates a new Qdrant client connection to localhost:6334 and performs a point query to retrieve a vector by its ID. The code demonstrates client initialization and basic querying functionality using the go-client library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/by-existing-id/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQueryID(qdrant.NewID(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")),\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting a Collection Alias in Qdrant with Rust\nDESCRIPTION: This code snippet removes a collection alias named 'production_collection' using the Qdrant client. The operation is asynchronous and returns a Result that must be handled with the ? operator, propagating any errors that occur during the deletion process.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/delete/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nclient.delete_alias(\"production_collection\").await?;\n```\n\n----------------------------------------\n\nTITLE: Running Full Search Pipeline with Python\nDESCRIPTION: Executes the complete search pipeline including document retrieval and answer generation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nquery = \"How to install an application using the OpenShift web console?\"\n\nresponse = search_pipeline.run(data={\n    \"query_embedder\": {\n        \"text\": query\n    },\n    \"prompt_builder\": {\n        \"query\": query\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in C#\nDESCRIPTION: Demonstrates how to connect to a Qdrant server and create a new collection with 768-dimensional vectors using cosine distance. Configures collection optimization parameters including segment number and size limits.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-large-segments/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine },\n\toptimizersConfig: new OptimizersConfigDiff { DefaultSegmentNumber = 2, MaxSegmentSize = 5000000 }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection and Inserting Embeddings\nDESCRIPTION: Initializes a Qdrant collection with 1024-dimensional cosine distance vectors and inserts the generated embedding points.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/nvidia.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import VectorParams, Distance\n\ncollection_name = \"example_collection\"\n\nclient.create_collection(\n    collection_name,\n    vectors_config=VectorParams(\n        size=1024,\n        distance=Distance.COSINE,\n    ),\n)\nclient.upsert(collection_name, points)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst COLLECTION_NAME = \"example_collection\"\n\nawait client.createCollection(COLLECTION_NAME, {\n    vectors: {\n        size: 1024,\n        distance: 'Cosine',\n    }\n});\n\nawait client.upsert(COLLECTION_NAME, {\n    wait: true,\n    points\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Python\nDESCRIPTION: This code initializes a Qdrant client and creates a new collection with specified vector parameters and binary quantization configuration. It sets up a connection to a local Qdrant server and configures the collection for cosine similarity search with 1536-dimensional vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-binary-quantization/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),\n    quantization_config=models.BinaryQuantization(\n        binary=models.BinaryQuantizationConfig(\n            always_ram=True,\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key and Initializing Language Model\nDESCRIPTION: Securely sets the OpenAI API key and initializes the GPT-4o language model. This step is essential for using OpenAI's services in the RAG system.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-scaleway.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass()\n\nllm = ChatOpenAI(model=\"gpt-4o\")\n```\n\n----------------------------------------\n\nTITLE: Re-enabling Vector Indexing in Qdrant\nDESCRIPTION: Updates an existing collection to enable indexing by setting indexing_threshold to 20000 (default value). This should be done after the initial data upload is complete to optimize storage and search performance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPATCH /collections/{collection_name}\n{\n    \"optimizers_config\": {\n        \"indexing_threshold\": 20000\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.update_collection(\n    collection_name=\"{collection_name}\",\n    optimizer_config=models.OptimizersConfigDiff(indexing_threshold=20000),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Collection with HNSW Configuration in Qdrant\nDESCRIPTION: HTTP PUT request to create a new collection with specified vector dimensions and HNSW index parameters. Configures a 768-dimensional vector space using Cosine distance metric and custom HNSW parameters including payload_m=16.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-disabled-global-hnsw/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\"\n    },\n    \"hnsw_config\": {\n        \"payload_m\": 16,\n        \"m\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling and Running Qdrant Docker Image\nDESCRIPTION: Download the Qdrant Docker image and start a container with persistent storage mapping\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull qdrant/qdrant\n\ndocker run -p 6333:6333 \\\n    -v $(pwd)/qdrant_storage:/qdrant/storage \\\n    qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Implementing Distribution-Based Score Fusion with Java in Qdrant\nDESCRIPTION: Java client implementation for DBSF fusion in Qdrant, combining sparse and dense vector queries. The example demonstrates how to set up prefetch queries with appropriate vectors and specify the DBSF fusion method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.11.x.md#2025-04-21_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport java.util.List;\n\nimport static io.qdrant.client.QueryFactory.fusion;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Fusion;\nimport io.qdrant.client.grpc.Points.PrefetchQuery;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n    QueryPoints.newBuilder()\n    .setCollectionName(\"{collection_name}\")\n    .addPrefetch(PrefetchQuery.newBuilder()\n      .setQuery(nearest(List.of(0.22f, 0.8f), List.of(1, 42)))\n      .setUsing(\"sparse\")\n      .setLimit(20)\n      .build())\n    .addPrefetch(PrefetchQuery.newBuilder()\n      .setQuery(nearest(List.of(0.01f, 0.45f, 0.67f)))\n      .setUsing(\"dense\")\n      .setLimit(20)\n      .build())\n    .setQuery(fusion(Fusion.DBSF))\n    .build())\n  .get();\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Vectors from Points in Qdrant using Rust\nDESCRIPTION: This code snippet demonstrates how to delete specific named vectors ('text' and 'image') from particular points in a Qdrant collection. It uses the DeletePointVectorsBuilder to construct the deletion operation, targeting specific point IDs and waiting for the operation to complete.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-vectors/simple/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::\n    DeletePointVectorsBuilder, PointsIdsList,\n};\n\nclient\n    .delete_vectors(\n        DeletePointVectorsBuilder::new(\"{collection_name}\")\n            .points_selector(PointsIdsList {\n                ids: vec![0.into(), 3.into(), 10.into()],\n            })\n            .vectors(vec![\"text\".into(), \"image\".into()])\n            .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Applying Conditions with Qdrant in Rust\nDESCRIPTION: This snippet demonstrates how to use the `qdrant_client` crate in Rust to apply a condition on values count using the `Condition::values_count` function. It sets a condition that selects items with more than two 'comments'. This requires the `qdrant_client` crate and assumes the presence of a collection with a 'comments' field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/values-count/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, ValuesCount};\n\nCondition::values_count(\n    \"comments\",\n    ValuesCount {\n        gt: Some(2),\n        ..Default::default()\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Grouped Vector Search with Qdrant C# Client\nDESCRIPTION: Demonstrates initializing a Qdrant client and performing a grouped vector similarity search. The query searches for vectors similar to the provided float array, grouping results by 'document_id' field, limiting to 4 groups with 2 results per group.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-groups/basic/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryGroupsAsync(\n    collectionName: \"{collection_name}\",\n    query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n    groupBy: \"document_id\",\n    limit: 4,\n    groupSize: 2\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Upserting Points in Go\nDESCRIPTION: This snippet demonstrates how to create a new Qdrant client connection and upsert a point into a collection. It includes setting up the client configuration, creating a point with an ID, vector, and payload, and performing the upsert operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/uuid-one-point-simple/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Upsert(context.Background(), &qdrant.UpsertPoints{\n\tCollectionName: \"{collection_name}\",\n\tPoints: []*qdrant.PointStruct{\n\t\t{\n\t\t\tId:      qdrant.NewID(\"5c56c793-69f3-4fbf-87e6-c4bf54c28c26\"),\n\t\t\tVectors: qdrant.NewVectors(0.05, 0.61, 0.76, 0.74),\n\t\t\tPayload: qdrant.NewValueMap(map[string]any{\"color\": \"Red\"}),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Points in Qdrant Collection via HTTP POST\nDESCRIPTION: This HTTP request performs a vector similarity search in a specified Qdrant collection. It includes a query vector, search parameters like HNSW ef parameter and exact search flag, and limits the results to 3 matches.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-params/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"params\": {\n        \"hnsw_ef\": 128,\n        \"exact\": false\n    },\n    \"limit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Matrix Search in Go\nDESCRIPTION: This code snippet demonstrates how to initialize a Qdrant client by specifying host and port, then performing a matrix offsets search with sample size, limits, and filtering by a specific attribute value.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/distance-matrix/offsets-format/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nsample := uint64(10)\nlimit := uint64(2)\nres, err := client.SearchMatrixOffsets(ctx, &qdrant.SearchMatrixPoints{\n    CollectionName: \"{collection_name}\",\n    Sample:         &sample,\n    Limit:          &limit,\n    Filter: &qdrant.Filter{\n        Must: []*qdrant.Condition{\n            qdrant.NewMatch(\"color\", \"red\"),\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Performing a Search with Quantized Vectors in Qdrant (HTTP)\nDESCRIPTION: This HTTP request performs a search operation on a Qdrant collection using quantized vectors. It includes a query vector and enables rescoring for better accuracy. The search returns the top 10 results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-quantization.md#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/search\n{\n    \"query\": [0.22, -0.01, -0.98, 0.37],\n    \"params\": {\n        \"quantization\": {\n            \"rescore\": true\n        }\n    },\n    \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Query to Retrieve Data in Go\nDESCRIPTION: This snippet demonstrates how to execute a query on the Qdrant database to retrieve points from a specified collection using dense vector queries. The query includes parameters for prefetching and limits the number of results. The expected input is a collection name and dense query vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring/go.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tPrefetch: []*qdrant.PrefetchQuery{\n\t\t{\n\t\t\tQuery: qdrant.NewQueryDense([]float32{1, 23, 45, 67}),\n\t\t\tUsing: qdrant.PtrOf(\"mrl_byte\"),\n\t\t\tLimit: qdrant.PtrOf(uint64(1000)),\n\t\t},\n\t},\n\tQuery: qdrant.NewQueryDense([]float32{0.01, 0.299, 0.45, 0.67}),\n\tUsing: qdrant.PtrOf(\"full\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Qdrant Retrieval\nDESCRIPTION: Example of setting up and using a Qdrant retriever for document retrieval\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/genkit.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const qdrantRetriever = qdrantRetrieverRef({\n  collectionName: 'some-collection',\n  displayName: 'Some Collection Retriever',\n});\n\nlet docs = await retrieve({ retriever: qdrantRetriever, query });\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Conditions using models in Python\nDESCRIPTION: This Python snippet defines a field condition on a 'comments' field, specifying a condition on the count of values with more than two occurrences. It requires the 'models' module imported and configured in the environment. The snippet represents the use of the FieldCondition class and ValuesCount object to apply constraints on data fields.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/values-count/python.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nmodels.FieldCondition(\n    key=\"comments\",\n    values_count=models.ValuesCount(gt=2),\n)\n```\n\n----------------------------------------\n\nTITLE: Randomly Sampling Points from a Qdrant Collection in Python\nDESCRIPTION: This snippet demonstrates how to use the QdrantClient to perform random sampling of points from a specified collection. It uses the query_points method with SampleQuery and specifies the RANDOM sampling strategy to retrieve a random subset of vectors from the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/random-sample/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\n\nsampled = client.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.SampleQuery(sample=models.Sample.RANDOM)\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vector Records by IDs in Qdrant\nDESCRIPTION: Retrieves specific vector records from a Qdrant collection using a list of numeric identifiers. Allows targeted data extraction from a vector database by specifying the collection name and desired record IDs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/retrieve-points/simple/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.retrieve(\n    collection_name=\"{collection_name}\",\n    ids=[0, 3, 100],\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database with Java Client\nDESCRIPTION: This code demonstrates how to initialize a Qdrant client connection to a local instance and perform a nearest-neighbor vector similarity search. It configures search parameters including HNSW ef parameter, exact search flag, and result limit.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-params/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.SearchParams;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setParams(SearchParams.newBuilder().setHnswEf(128).setExact(false).build())\n                .setLimit(3)\n                .build())\n        .get();\n```\n\n----------------------------------------\n\nTITLE: Generating NLP Embeddings with Sentence Transformers\nDESCRIPTION: Uses the all-MiniLM-L6-v2 model to generate embeddings for natural language code descriptions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/code-search.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sentence_transformers import SentenceTransformer\n\nnlp_model = SentenceTransformer(\"all-MiniLM-L6-v2\")\nnlp_embeddings = nlp_model.encode(\n    text_representations, show_progress_bar=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Collection Snapshot with Qdrant C# Client\nDESCRIPTION: Establishes a connection to a Qdrant server running on localhost:6334 and creates a snapshot of a specified collection. The code shows the basic client initialization and snapshot creation process using the async API.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/create-collection-snapshot/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateSnapshotAsync(\"{collection_name}\");\n```\n\n----------------------------------------\n\nTITLE: Constructing Datetime Range Filter for Qdrant\nDESCRIPTION: Creates a datetime range condition for filtering Qdrant points between specific timestamp boundaries using Instant and Protobuf Timestamp\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/datetime-range/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.datetimeRange;\n\nimport com.google.protobuf.Timestamp;\nimport io.qdrant.client.grpc.Points.DatetimeRange;\nimport java.time.Instant;\n\nlong gt = Instant.parse(\"2023-02-08T10:49:00Z\").getEpochSecond();\nlong lte = Instant.parse(\"2024-01-31T10:14:31Z\").getEpochSecond();\n\ndatetimeRange(\"date\",\n    DatetimeRange.newBuilder()\n        .setGt(Timestamp.newBuilder().setSeconds(gt))\n        .setLte(Timestamp.newBuilder().setSeconds(lte))\n        .build());\n```\n\n----------------------------------------\n\nTITLE: Hybrid Search with Python Client\nDESCRIPTION: Implementation of hybrid search using the Qdrant Python client with both sparse and dense vector queries\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=[\n        models.Prefetch(\n            query=models.SparseVector(indices=[1, 42], values=[0.22, 0.8]),\n            using=\"sparse\",\n            limit=20,\n        ),\n        models.Prefetch(\n            query=[0.01, 0.45, 0.67],\n            using=\"dense\",\n            limit=20,\n        ),\n    ],\n    query=models.FusionQuery(fusion=models.Fusion.RRF),\n)\n```\n\n----------------------------------------\n\nTITLE: Performing a Search with Quantized Vectors in Qdrant (Python)\nDESCRIPTION: This Python code snippet performs a search operation on a Qdrant collection using quantized vectors. It includes a query vector and enables rescoring for better accuracy. The search returns the top 10 results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-quantization.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points(\n    collection_name=\"my_collection\",\n    query_vector=[0.22, -0.01, -0.98, 0.37],  # Your query vector\n    search_params=models.SearchParams(\n        quantization=models.QuantizationSearchParams(\n            rescore=True  # Enables rescoring with original vectors\n        )\n    ),\n    limit=10  # Return the top 10 results\n)\n```\n\n----------------------------------------\n\nTITLE: Extracting Code Snippets from Structure Data in Python\nDESCRIPTION: Extracts code snippets from a list of structure objects and stores them in a separate list for further processing. This is the first step in the pipeline for creating searchable code embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/code-search.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncode_snippets = [\n    structure[\"context\"][\"snippet\"] for structure in structures\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Field Index in Qdrant\nDESCRIPTION: This snippet initializes a Qdrant client and creates a field index for a specified collection using the 'CreateFieldIndexCollectionBuilder'. The index is defined with keyword parameters that indicate it's tenant-specific.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/with-group-id-as-tenant/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse qdrant_client::qdrant::{\n    CreateFieldIndexCollectionBuilder,\n    KeywordIndexParamsBuilder,\n    FieldType\n};\nuse qdrant_client::{Qdrant, QdrantError};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.create_field_index(\n        CreateFieldIndexCollectionBuilder::new(\n            \"{collection_name}\",\n            \"group_id\",\n            FieldType::Keyword,\n        ).field_index_params(\n            KeywordIndexParamsBuilder::default()\n                .is_tenant(true)\n        )\n    ).await?;\n\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant Docker with NVIDIA GPU Support\nDESCRIPTION: Docker command to run Qdrant with NVIDIA GPU support, including necessary flags and environment variables.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/running-with-GPU.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n\t--rm \\\n\t--gpus=all \\\n\t-p 6333:6333 \\\n\t-p 6334:6334 \\\n\t-e QDRANT__GPU__INDEXING=1 \\\n\tqdrant/qdrant:gpu-nvidia-latest\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database with Filtering in Rust\nDESCRIPTION: This snippet shows how to connect to a Qdrant server, construct a vector search query, and filter the results based on metadata. It creates a client connection to a local Qdrant instance, then performs a vector similarity search with a filter condition that matches a specific group_id.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-filter-by-group-id/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, QueryPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.1, 0.1, 0.9])\n            .limit(10)\n            .filter(Filter::must([Condition::matches(\n                \"group_id\",\n                \"user_1\".to_string(),\n            )])),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Writing Data to Qdrant Collection using Sycamore\nDESCRIPTION: Example shows how to write a Docset to a Qdrant collection using Sycamore's write.qdrant() function. The code demonstrates setting up client parameters for connection and collection configuration including vector size and distance metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/sycamore.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nds.write.qdrant(\n    {\n        \"url\": \"http://localhost:6333\",\n        \"timeout\": 50,\n    },\n    {\n        \"collection_name\": \"{collection_name}\",\n        \"vectors_config\": {\n            \"size\": 384,\n            \"distance\": \"Cosine\",\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Field Index in Qdrant Go Client\nDESCRIPTION: This snippet demonstrates how to create a field index for a specified collection in Qdrant using the Go programming language. It establishes a connection to the Qdrant server and utilizes the CreateFieldIndex method to index a field. The parameters include collection name, field name, and field type. It requires the Qdrant Go client library and a running instance of Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/simple-keyword/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.CreateFieldIndex(context.Background(), &qdrant.CreateFieldIndexCollection{\n    CollectionName: \"{collection_name}\",\n    FieldName:      \"name_of_the_field_to_index\",\n    FieldType:      qdrant.FieldType_FieldTypeKeyword.Enum(),\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Similarity Search with Qdrant in Rust\nDESCRIPTION: This snippet demonstrates how to create a Qdrant client connection and perform a vector similarity search with custom search parameters. It initializes a connection to a local Qdrant instance, constructs a query with a 4-dimensional vector, and sets quantization parameters with rescore disabled.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-disabled-rescoring/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::\n    QuantizationSearchParamsBuilder, QueryPointsBuilder, SearchParamsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .params(\n                SearchParamsBuilder::default()\n                    .quantization(QuantizationSearchParamsBuilder::default().rescore(false)),\n            ),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection with Sparse Vectors in TypeScript\nDESCRIPTION: This code initializes a Qdrant client connected to a local instance and creates a new collection with sparse vector configuration. It sets up a sparse vector named 'splade-model-name' with in-memory indexing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector-index-on-disk/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient, Schemas } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  sparse_vectors: {\n    \"splade-model-name\": {\n      index: {\n        on_disk: false\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document Vectors from Qdrant Store\nDESCRIPTION: Python code example demonstrating how to retrieve document vectors from Qdrant online store using Feast. Shows query vector configuration and top-k retrieval.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/feast.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom feast import FeatureStore\n\nfeature_store = FeatureStore(repo_path=\"feature_store.yaml\")\n\nquery_vector = [1.0, 2.0, 3.0, 4.0, 5.0]\ntop_k = 5\n\nfeature_values = feature_store.retrieve_online_documents(\n    feature=\"my_feature\",\n    query=query_vector,\n    top_k=top_k\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Grouped Vector Search Query in Qdrant with TypeScript\nDESCRIPTION: Performs a vector similarity search with result grouping in Qdrant. The query searches using a single vector [1.1], groups results by document_id field, limits to 4 total groups with max 2 results per group.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-groups/basic/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.queryGroups(\"{collection_name}\", {\n    query: [1.1],\n    group_by: \"document_id\",\n    limit: 4,\n    group_size: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Access Policies\nDESCRIPTION: Sets up role-based access control policies defining roles, groups, and departments for secure access management.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/mirror-security.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp_policy = {\n    \"roles\": [\"admin\", \"analyst\", \"user\"],\n    \"groups\": [\"team_a\", \"team_b\"],\n    \"departments\": [\"research\", \"engineering\"],\n}\nmirror_sdk.set_policy(app_policy)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Vector Search Client\nDESCRIPTION: Establishes a connection to a local Qdrant server running at http://localhost:6333 for vector database operations\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/named-vector/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Prompt and Query Engine\nDESCRIPTION: Defines a custom prompt template and sets up a query engine with hybrid retrieval and response synthesis for answering user queries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/hybrid-search-llamaindex-jinaai.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.core import PromptTemplate\n\nqa_prompt_tmpl = (\n    \"Context information is below.\\n\"\n    \"-------------------------------\"\n    \"{context_str}\\n\"\n    \"-------------------------------\"\n    \"Given the context information and not prior knowledge,\"\n    \"answer the query. Please be concise, and complete.\\n\"\n    \"If the context does not contain an answer to the query,\"\n    \"respond with \\\"I don't know!\\\".\"\n    \"Query: {query_str}\\n\"\n    \"Answer: \"\n)\nqa_prompt = PromptTemplate(qa_prompt_tmpl)\n\nfrom llama_index.core.retrievers import VectorIndexRetriever\nfrom llama_index.core.query_engine import RetrieverQueryEngine\nfrom llama_index.core import get_response_synthesizer\nfrom llama_index.core import Settings\nSettings.embed_model = jina_embedding_model\nSettings.llm = mixtral_llm\n\n# retriever\nretriever = VectorIndexRetriever(\n    index=index,\n    similarity_top_k=2,\n    sparse_top_k=12,\n    vector_store_query_mode=\"hybrid\"\n)\n\n# response synthesizer\nresponse_synthesizer = get_response_synthesizer(\n    llm=mixtral_llm,\n    text_qa_template=qa_prompt,\n    response_mode=\"compact\",\n)\n\n# query engine\nquery_engine = RetrieverQueryEngine(\n    retriever=retriever,\n    response_synthesizer=response_synthesizer,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection with Binary Quantization\nDESCRIPTION: This snippet demonstrates how to create a Qdrant collection with Binary Quantization enabled. It configures the collection to store full vectors on disk and binary embeddings in RAM for optimal performance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/binary-quantization.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\n#collect to our Qdrant Server\nclient = QdrantClient(\n    url=\"http://localhost:6333\",\n    prefer_grpc=True,\n)\n\n#Create the collection to hold our embeddings\n# on_disk=True and the quantization_config are the areas to focus on\ncollection_name = \"binary-quantization\"\nif not client.collection_exists(collection_name):\n    client.create_collection(\n        collection_name=f\"{collection_name}\",\n        vectors_config=models.VectorParams(\n            size=1536,\n            distance=models.Distance.DOT,\n            on_disk=True,\n        ),\n        optimizers_config=models.OptimizersConfigDiff(\n            default_segment_number=5,\n        ),\n        hnsw_config=models.HnswConfigDiff(\n        m=0,\n        ),\n        quantization_config=models.BinaryQuantization(\n            binary=models.BinaryQuantizationConfig(always_ram=True),\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Starting Additional Qdrant Nodes with Bootstrap Parameter\nDESCRIPTION: Command to start subsequent nodes in a Qdrant cluster with the '--bootstrap' flag that specifies an existing node to connect to.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./qdrant --bootstrap 'http://qdrant_node_1:6335'\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Payload Keys from Points in Qdrant\nDESCRIPTION: This code demonstrates how to delete specific payload keys ('color' and 'price') from points with IDs 0, 3, and 100 in a Qdrant collection. The operation targets only the specified fields while leaving other payload data intact.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-payload/by-point-id/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"keys\": [\"color\", \"price\"],\n  \"points\": [0, 3, 100]\n}\n```\n\n----------------------------------------\n\nTITLE: Integer and Float Payload Types in Qdrant\nDESCRIPTION: Example of storing integer and float values in Qdrant payload, demonstrating single and multiple value scenarios\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/payload.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"count\": 10,\n    \"sizes\": [35, 36, 38]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"price\": 11.99,\n    \"ratings\": [9.1, 9.2, 9.4]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Qdrant Collection Optimizer Configuration\nDESCRIPTION: Modifies the optimizer settings for a specified collection using Qdrant client. Allows fine-tuning of collection optimization parameters without changing core collection structure.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/trigger-indexing/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.update_collection(\n    collection_name=\"{collection_name}\",\n    optimizer_config=models.OptimizersConfigDiff(),\n)\n```\n\n----------------------------------------\n\nTITLE: Interacting with DeepSeek API in Python\nDESCRIPTION: The function `query_deepseek` sends a prompt to the DeepSeek API and retrieves a completion result. It constructs the necessary headers using a user-supplied API key and sends a POST request to the DeepSeek API endpoint, handling both normal and erroneous responses. The function assumes that the `requests` and `json` libraries are available in the Python environment.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/rag-deepseek.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# from https://platform.deepseek.com/api_keys\nAPI_KEY = \"\\u003cYOUR_DEEPSEEK_KEY\\u003e\"\n\nHEADERS = {\n    'Authorization': f'Bearer {API_KEY}',\n    'Content-Type': 'application/json',\n}\n\ndef query_deepseek(prompt):\n    data = {\n        'model': 'deepseek-chat',\n        'messages': [\n            {'role': 'user', 'content': prompt}\n        ],\n        'stream': False\n    }\n\n    response = requests.post(\"https://api.deepseek.com/chat/completions\", headers=HEADERS, data=json.dumps(data))\n\n    if response.ok:\n        result = response.json()\n        return result['choices'][0]['message']['content']\n    else:\n        raise Exception(f\"Error {response.status_code}: {response.text}\")\n```\n\n----------------------------------------\n\nTITLE: Deleting Points by ID in Qdrant using Python Client\nDESCRIPTION: This snippet demonstrates how to delete points from a Qdrant collection using their IDs. It utilizes the Qdrant client's `delete` method with `PointIdsList` to specify the points to be removed. The `collection_name` variable should be replaced with the actual name of the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-points/simple/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.delete(\n    collection_name=\"{collection_name}\",\n    points_selector=models.PointIdsList(\n        points=[0, 3, 100],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Using QdrantIngestOperator for Uploading Data to Qdrant\nDESCRIPTION: Demonstrates how to use the QdrantIngestOperator to upload vector data with IDs and payload to a Qdrant collection. This operator simplifies batch ingestion operations in Airflow DAGs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/airflow.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom airflow.providers.qdrant.operators.qdrant import QdrantIngestOperator\n\nvectors = [\n    [0.11, 0.22, 0.33, 0.44],\n    [0.55, 0.66, 0.77, 0.88],\n    [0.88, 0.11, 0.12, 0.13],\n]\nids = [32, 21, \"b626f6a9-b14d-4af9-b7c3-43d8deb719a6\"]\npayload = [{\"meta\": \"data\"}, {\"meta\": \"data_2\"}, {\"meta\": \"data_3\", \"extra\": \"data\"}]\n\nQdrantIngestOperator(\n    conn_id=\"qdrant_connection\",\n    task_id=\"qdrant_ingest\",\n    collection_name=\"<COLLECTION_NAME>\",\n    vectors=vectors,\n    ids=ids,\n    payload=payload,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Vectors on Disk in Qdrant\nDESCRIPTION: JSON configuration for creating a Qdrant collection with vectors stored on disk using memmap storage. This approach is recommended for Qdrant instances with fast disks that need to handle large collections.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/storage.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/create-collection/with-vectors-on-disk/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index in Qdrant with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a payload index in Qdrant using the TypeScript client. It specifies the collection name, the field to index, and the schema of the field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/simple-keyword/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"name_of_the_field_to_index\",\n  field_schema: \"keyword\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in C#\nDESCRIPTION: This snippet shows how to create a Qdrant client with the specified host and port using the C# client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\\n\\n// The C# client uses Qdrant's gRPC interface\\nvar client = new QdrantClient(\"localhost\", 6334);\n```\n\n----------------------------------------\n\nTITLE: Updating Qdrant Collection Configuration with TypeScript\nDESCRIPTION: This snippet updates the configuration of a Qdrant collection using the `updateCollection` method. It modifies settings such as vector parameters (including HNSW and quantization), global HNSW configuration, and global scalar quantization. It requires the Qdrant client to be initialized and authenticated.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/hnsw-and-quantization/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.updateCollection(\"{collection_name}\", {\n  vectors: {\n    my_vector: {\n      hnsw_config: {\n        m: 32,\n        ef_construct: 123,\n      },\n      quantization_config: {\n        product: {\n          compression: \"x32\",\n          always_ram: true,\n        },\n      },\n      on_disk: true,\n    },\n  },\n  hnsw_config: {\n    ef_construct: 123,\n  },\n  quantization_config: {\n    scalar: {\n      type: \"int8\",\n      quantile: 0.8,\n      always_ram: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Python Client with FastEmbed\nDESCRIPTION: Install the Qdrant client library with FastEmbed integration for vector search\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"qdrant-client[fastembed]>=1.8.2\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Go\nDESCRIPTION: This snippet initializes the Qdrant client using the gRPC interface in Go, specifying the host and port.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\\n\\n// The Go client uses Qdrant's gRPC interface\\nclient, err := qdrant.NewClient(&qdrant.Config{\\n\\tHost: \"localhost\",\\n\\tPort: 6334,\\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced FastEmbed Usage with Prefixes in Python\nDESCRIPTION: This code snippet shows a more advanced usage of FastEmbed, including importing the DefaultEmbedding class, defining documents with 'passage' and 'query' prefixes, initializing the embedding model, and generating embeddings for the documents.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/fastembed.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastembed.embedding import DefaultEmbedding\n\ndocuments: List[str] = [\n    \"passage: Hello, World!\",\n    \"query: How is the World?\",\n    \"passage: This is an example passage.\",\n    \"fastembed is supported by and maintained by Qdrant.\"\n]\n\nembedding_model = DefaultEmbedding()\n\nembeddings: List[np.ndarray] = list(embedding_model.embed(documents))\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Client and Collection in Rust\nDESCRIPTION: This code snippet shows how to create a Qdrant client connected to a local instance and create a new collection with custom vector parameters. It uses the Qdrant Rust client library to define a 1024-dimensional vector space with Cosine distance and Uint8 datatype.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-uint8/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::\n    CreateCollectionBuilder, Datatype, Distance, VectorParamsBuilder,\n};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\").vectors_config(\n            VectorParamsBuilder::new(1024, Distance::Cosine).datatype(Datatype::Uint8),\n        ),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Sparse Vector Search Setup\nDESCRIPTION: Implements sparse vector search using FastEmbed-based sparse embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langchain.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_qdrant import FastEmbedSparse, RetrievalMode\n\nsparse_embeddings = FastEmbedSparse(model_name=\"Qdrant/BM25\")\n\nqdrant = QdrantVectorStore.from_documents(\n    docs,\n    sparse_embedding=sparse_embeddings,\n    location=\":memory:\",\n    collection_name=\"my_documents\",\n    retrieval_mode=RetrievalMode.SPARSE,\n)\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\nfound_docs = qdrant.similarity_search(query)\n```\n\n----------------------------------------\n\nTITLE: Re-enabling HNSW Indexing After Upload in Python\nDESCRIPTION: Python code to update a Qdrant collection by enabling HNSW indexing after bulk upload. This changes the m parameter from 0 to 16, which starts the index construction process for efficient vector search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.update_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n    hnsw_config=models.HnswConfigDiff(\n        m=16,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring On-Disk Text Indexing in Qdrant\nDESCRIPTION: This HTTP request shows how to set up on-disk text indexing for a field named 'review_text', specifying tokenization settings and enabling on-disk storage to reduce memory usage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.12.x.md#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/index\n{\n    \"field_name\": \"review_text\",\n    \"field_schema\": {\n        \"type\": \"text\",\n        \"tokenizer\": \"word\",\n        \"min_token_len\": 2,\n        \"max_token_len\": 20,\n        \"lowercase\": true,\n        \"on_disk\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Vector Collection in Qdrant using Rust\nDESCRIPTION: Demonstrates establishing a Qdrant client connection and creating a collection with multiple named vector configurations. Sets up two vector spaces - one for images with dot product distance and another for text with cosine distance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/multiple-vectors/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, VectorParamsBuilder, VectorsConfigBuilder,\n};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet mut vectors_config = VectorsConfigBuilder::default();\nvectors_config\n    .add_named_vector_params(\"image\", VectorParamsBuilder::new(4, Distance::Dot).build());\nvectors_config.add_named_vector_params(\n    \"text\",\n    VectorParamsBuilder::new(8, Distance::Cosine).build(),\n);\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\").vectors_config(vectors_config),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with Nested Field Range Filter in Python\nDESCRIPTION: This code performs a scroll query on a Qdrant collection using a nested field filter. It searches for documents where the population of any city in a country is greater than or equal to 9.0. The query demonstrates how to use nested field conditions and range filters with the Qdrant client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-array/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        should=[\n            models.FieldCondition(\n                key=\"country.cities[].population\",\n                range=models.Range(\n                    gt=None,\n                    gte=9.0,\n                    lt=None,\n                    lte=None,\n                ),\n            ),\n        ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting Multi-Vector Points with Qdrant Java Client\nDESCRIPTION: Shows how to establish a connection to a Qdrant server and upsert a point containing multiple vectors. Uses the QdrantClient to connect to a local instance on port 6334 and inserts a point with ID 1 containing three 4-dimensional vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-multivector/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.VectorsFactory.vectors;\nimport static io.qdrant.client.VectorFactory.multiVector;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PointStruct;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n.upsertAsync(\n    \"{collection_name}\",\n    List.of(\n        PointStruct.newBuilder()\n            .setId(id(1))\n            .setVectors(vectors(multiVector(new float[][] {\n                {-0.013f,  0.020f, -0.007f, -0.111f},\n                {-0.030f, -0.055f,  0.001f,  0.072f},\n                {-0.041f,  0.014f, -0.032f, -0.062f}\n            })))\n            .build()\n    ))\n.get();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Logs for Qdrant Cluster\nDESCRIPTION: Kubectl command to fetch logs for a specific Qdrant cluster using labels for filtering\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/logging-monitoring.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n qdrant-private-cloud logs -l app=qdrant,cluster-id=a7d8d973-0cc5-42de-8d7b-c29d14d24840\n```\n\n----------------------------------------\n\nTITLE: Restoring from a Qdrant Backup\nDESCRIPTION: This snippet demonstrates how to restore a Qdrant cluster from a backup using the `QdrantClusterRestore` resource. The `source` section specifies the snapshot to restore from, while the `destination` section specifies the cluster to restore to. The `cluster-id` and `customer-id` labels must match the corresponding `QdrantCluster` resource.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/backups.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: qdrant.io/v1\nkind: QdrantClusterRestore\nmetadata:\n  name: \"qdrant-a7d8d973-0cc5-42de-8d7b-c29d14d24840-snapshot-restore-01\"\n  labels:\n    cluster-id: \"a7d8d973-0cc5-42de-8d7b-c29d14d24840\"\n    customer-id: \"acme-industries\"\nspec:\n  source:\n    snapshotName: qdrant-a7d8d973-0cc5-42de-8d7b-c29d14d24840-snapshot-timestamp\n    namespace: qdrant-private-cloud\n  destination:\n    name: qdrant-a7d8d973-0cc5-42de-8d7b-c29d14d24840\n    namespace: qdrant-private-cloud\n```\n```\n\n----------------------------------------\n\nTITLE: Searching Vector Database with Qdrant Client in Python\nDESCRIPTION: This snippet initializes a Qdrant client connected to a local server and performs a matrix offset search with filters. It queries a collection for vectors matching the 'red' color condition, limiting results and specifying a sample size.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/distance-matrix/offsets-format/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.search_matrix_offsets(\n    collection_name=\"{collection_name}\",\n    sample=10,\n    limit=2,\n    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"color\", match=models.MatchValue(value=\"red\")\n            ),\n        ]\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector and Quantization Configurations in Java\nDESCRIPTION: This code initializes a Qdrant client and creates a new collection asynchronously. It sets up vector parameters including size, distance metric, and storage location. The collection is configured with scalar quantization of type Int8.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/quantization-on-disk/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\nimport io.qdrant.client.grpc.Collections.QuantizationConfig;\nimport io.qdrant.client.grpc.Collections.QuantizationType;\nimport io.qdrant.client.grpc.Collections.ScalarQuantization;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(768)\n                            .setDistance(Distance.Cosine)\n                            .setOnDisk(true)\n                            .build())\n                    .build())\n            .setQuantizationConfig(\n                QuantizationConfig.newBuilder()\n                    .setScalar(\n                        ScalarQuantization.newBuilder()\n                            .setType(QuantizationType.Int8)\n                            .setAlwaysRam(false)\n                            .build())\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Performing a Search in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to execute a search operation using Qdrant, utilizing an embedding created from a query string.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = \"what is the extension of javascript document\";\nconst query_embedding_response = await getEmbeddings(PROJECT_ID, EMBEDDING_MODEL, query);\n\nawait qdrantClient.search(COLLECTION_NAME, {\n    vector: query_embedding_response.data[0].embedding\n});\n```\n\n----------------------------------------\n\nTITLE: Search with Payload and Vector Retrieval\nDESCRIPTION: Example of retrieving additional payload and vector information in search results\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/search.md#2025-04-21_snippet_5\n\nLANGUAGE: rest\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n```\n\n----------------------------------------\n\nTITLE: Setting Up User-Defined Sharding in Qdrant (Python)\nDESCRIPTION: This code demonstrates how to create a collection with user-defined sharding in Qdrant. It sets up a custom sharded collection and creates a shard key. An example of upserting a point with a specific shard key is also provided.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-resource-optimization.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n    collection_name=\"my_custom_sharded_collection\",\n    shard_number=1,\n    sharding_method=models.ShardingMethod.CUSTOM\n)\nclient.create_shard_key(\"my_custom_sharded_collection\", \"tenant_id\")\n```\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n    collection_name=\"my_custom_sharded_collection\", \n    points=[\n        models.PointStruct(\n            id=1111, \n            vector=[0.1, 0.2, 0.3]\n        )\n    ], \n    shard_key_selector=\"tenant_1\"\n)\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with Nested Filters in Rust\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client to scroll through a collection with nested filtering conditions. It creates a filter that matches points where the 'diet' field contains 'food' matching 'meat' and 'likes' is true.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-nested-clause/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, NestedCondition, ScrollPointsBuilder};\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::must([NestedCondition {\n            key: \"diet\".to_string(),\n            filter: Some(Filter::must([\n                Condition::matches(\"food\", \"meat\".to_string()),\n                Condition::matches(\"likes\", true),\n            ])),\n        }\n        .into()])),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Go\nDESCRIPTION: This snippet sets up a Qdrant client connection and creates a new collection with sparse vector configuration. It uses the go-client library for Qdrant, specifying the host and port for the connection. The collection is created with a sparse vectors config for text data using IDF modifier.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector-idf/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tSparseVectorsConfig: qdrant.NewSparseVectorsConfig(\n\t\tmap[string]*qdrant.SparseVectorParams{\n\t\t\t\"text\": {\n\t\t\t\tModifier: qdrant.Modifier_Idf.Enum(),\n\t\t\t},\n\t\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Running the Agent\nDESCRIPTION: This Python code defines the `run_agent` function which takes a user input string and streams events from the LangGraph `graph`. It prints the content of the last message from the assistant for each event.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef run_agent(user_input: str):\n    for event in graph.stream({\"messages\": [(\"user\", user_input)]}):\n        for value in event.values():\n            print(\"Assistant:\", value[\"messages\"][-1].content)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in C#\nDESCRIPTION: Creates a connection to a Qdrant server running on localhost:6334 and initializes a new collection with 1024-dimensional uint8 vectors using cosine distance metric. The code demonstrates basic setup for vector database operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-uint8/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  vectorsConfig: new VectorParams {\n    Size = 1024, Distance = Distance.Cosine, Datatype = Datatype.Uint8\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting Points with Multi-dimensional Vectors in Qdrant\nDESCRIPTION: This HTTP PUT request demonstrates how to insert points with multi-dimensional vectors into a Qdrant collection. The request body includes an array of points, each with an ID and a vector array containing multiple nested arrays representing different dimensions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-multivector/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT collections/{collection_name}/points\n{\n  \"points\": [\n    {\n      \"id\": 1,\n      \"vector\": [\n        [-0.013,  0.020, -0.007, -0.111, ...],\n        [-0.030, -0.055,  0.001,  0.072, ...],\n        [-0.041,  0.014, -0.032, -0.062, ...]\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection with JSON Configuration\nDESCRIPTION: Sends an HTTP PUT request to create a collection in Qdrant with the necessary configuration to support both dense and sparse vectors. This step prepares the Qdrant environment to receive the uploaded data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/databricks.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nPUT /collections/{collection_name}\n{\n  \"vectors\": {\n    \"dense\": {\n      \"size\": 384,\n      \"distance\": \"Cosine\"\n    }\n  },\n  \"sparse_vectors\": {\n    \"sparse\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Deferred HNSW Indexing in Go\nDESCRIPTION: Go code to create a Qdrant collection with HNSW indexing disabled. This optimizes the collection for bulk uploads by setting m=0, which defers index construction until after the upload is complete.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tHnswConfig: &qdrant.HnswConfigDiff{\n\t\tM:        qdrant.PtrOf(uint64(0)),\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Overwriting Payload in C#\nDESCRIPTION: Sets up a Qdrant client connection and demonstrates how to overwrite payload data for multiple vectors. The code connects to a local Qdrant instance and updates payload properties for specified vector IDs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/overwrite-payload/by-point-id/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.OverwritePayloadAsync(\n    collectionName: \"{collection_name}\",\n    payload: new Dictionary<string, Value> { { \"property1\", \"string\" }, { \"property2\", \"string\" } },\n    ids: new ulong[] { 0, 3, 10 }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collection with Payload Field Filtering\nDESCRIPTION: This code demonstrates a POST request to query points from a Qdrant collection, specifying which payload fields to include in the response. The query includes vector data and limits the payload to only return 'city', 'village', and 'town' fields.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-payload-fields/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vector\": [0.2, 0.1, 0.9, 0.7],\n  \"with_payload\": {\n    \"include\": [\"city\", \"village\", \"town\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Quantization in Qdrant using Python Client\nDESCRIPTION: This Python code shows how to create a collection with Binary Quantization using the Qdrant Python client. It sets up binary quantization for 1536-dimensional vectors with Cosine distance, keeping vectors in RAM for fastest access.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-quantization.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),\n    quantization_config=models.BinaryQuantization(\n        binary=models.BinaryQuantizationConfig(\n            always_ram=True,\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Executing Scroll Query in Go\nDESCRIPTION: This code initializes a Qdrant client connection and performs a scroll query on a collection. It demonstrates how to set up the client configuration and apply a filter condition to search for points where 'country.cities[].sightseeing' matches 'Germany'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-array-match/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tShould: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"country.cities[].sightseeing\", \"Germany\"),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Embedding Dimensions\nDESCRIPTION: Displays the shape of the first embedding to show the multivector structure.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-colbert.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndescriptions_embeddings[0].shape\n```\n\n----------------------------------------\n\nTITLE: Batch Query with Recommendations in Rust\nDESCRIPTION: This code snippet demonstrates how to perform a batch query with recommendations using the Qdrant client in Rust. It initializes a Qdrant client, defines a filter based on a condition (city equals London), constructs multiple recommendation queries with positive and negative examples, and then executes the batch query against a specified collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-batch/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\n    Condition, Filter, QueryBatchPointsBuilder, QueryPointsBuilder,\n    RecommendInputBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet filter = Filter::must([Condition::matches(\"city\", \"London\".to_string())]);\n\nlet recommend_queries = vec![\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(\n            RecommendInputBuilder::default()\n                .add_positive(100)\n                .add_positive(231)\n                .add_negative(718)\n                .build(),\n        )\n        .filter(filter.clone())\n        .build(),\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(\n            RecommendInputBuilder::default()\n                .add_positive(200)\n                .add_positive(67)\n                .add_negative(300)\n                .build(),\n        )\n        .filter(filter)\n        .build(),\n];\n\nclient\n    .query_batch(QueryBatchPointsBuilder::new(\n        \"{collection_name}\",\n        recommend_queries,\n    ))\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Filtering with FieldCondition in Qdrant (Python)\nDESCRIPTION: This snippet demonstrates how to create a `FieldCondition` object for filtering data in Qdrant based on a specific field (`count`) and a matching value (0). It utilizes the `models` module, likely from a Qdrant client library, to define the condition. The condition is then used in a Qdrant query to retrieve points that satisfy the specified criteria.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-integer/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodels.FieldCondition(\n    key=\"count\",\n    match=models.MatchValue(value=0),\n)\n```\n\n----------------------------------------\n\nTITLE: Embedding Documents with Voyage AI in Python\nDESCRIPTION: Uses the Voyage AI client to embed the sample texts using the 'voyage-large-2' model. This model generates sentence embeddings of size 1536.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/voyage.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresponse = vclient.embed(texts, model=\"voyage-large-2\", input_type=\"document\")\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration\nDESCRIPTION: Demonstrates establishing a connection to Qdrant server and creating a new collection with 768-dimensional vectors using cosine distance metric. The configuration includes setting up vector parameters and optimizer settings with 16 default segments.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-high-number-of-segments/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(768)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setOptimizersConfig(\n                OptimizersConfigDiff.newBuilder().setDefaultSegmentNumber(16).build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in TypeScript\nDESCRIPTION: Sets up a Qdrant client connection to localhost and creates a new collection with 768-dimensional vectors using Cosine distance. Includes product quantization configuration with x16 compression and RAM storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-product-quantization/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n  },\n  quantization_config: {\n    product: {\n      compression: \"x16\",\n      always_ram: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying with Deepseek API\nDESCRIPTION: This snippet uses the `query_deepseek` function, likely an API call to a Deepseek LLM, to generate a response based on the previously defined `metaprompt`. The `metaprompt` variable contains instructions and context for the LLM to answer a question.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/rag-deepseek.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"query_deepseek(metaprompt)\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection\nDESCRIPTION: This snippet initializes a Qdrant client and creates a new collection with the specified vector configuration. It requires the Qdrant Go client library and specifies collection parameters such as name, vector size, distance metric, and multi-vector configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-multivector/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     128,\n\t\tDistance: qdrant.Distance_Cosine,\n\t\tMultivectorConfig: &qdrant.MultiVectorConfig{\n\t\t\tComparator: qdrant.MultiVectorComparator_MaxSim,\n\t\t},\n\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Running the Neural Search API Service\nDESCRIPTION: Command to start the FastAPI service that will make the neural search API available at localhost:8000.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npython service.py\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Vector Search in C#\nDESCRIPTION: This code initializes a connection to a Qdrant vector database running on localhost:6334 and performs a vector similarity search query. The query searches for the 3 most similar vectors to the provided embedding and returns both payload and vector data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-payload-and-vectors/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\tpayloadSelector: true,\n\tvectorsSelector: true,\n\tlimit: 3\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT RBAC in YAML\nDESCRIPTION: YAML configuration for enabling JWT-based Role-Based Access Control (RBAC) in Qdrant, which requires setting an API key that will be used to encode and decode JWT tokens.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  api_key: you_secret_api_key_here\n  jwt_rbac: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Online Store in Feast\nDESCRIPTION: YAML configuration example for setting up Qdrant as an online store in Feast. Includes essential parameters like host, port, API key, and vector specifications.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/feast.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nproject: my_feature_repo\nregistry: data/registry.db\nprovider: local\nonline_store:\n    type: qdrant\n    host: xyz-example.eu-central.aws.cloud.qdrant.io\n    port: 6333\n    api_key: <your-own-key>\n    vector_len: 384\n    # Reference: https://qdrant.tech/documentation/concepts/vectors/#named-vectors\n    # vector_name: text-vec\n    write_batch_size: 100\n```\n\n----------------------------------------\n\nTITLE: Searching with Named Vectors\nDESCRIPTION: Example of performing a search operation using named vectors in Qdrant\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/storing-multiple-vectors-per-object-in-qdrant.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.http.models import NamedVector\n\ntext_results = client.search(\n   collection_name=\"ms-coco-2017\",\n   query_vector=NamedVector(\n       name=\"text\",\n       vector=row[\"text_vector\"],\n   ),\n   limit=5,\n   with_vectors=False,\n   with_payload=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Vectors in Qdrant\nDESCRIPTION: This snippet updates the vector representations of points in a specific Qdrant collection. It requires the `models` module to define point vectors. The `collection_name` parameter indicates the target collection, while the `points` parameter is a list of `PointVectors`, each containing an ID and its associated vector data. Expect to provide valid collection names and correctly formatted vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-vectors/simple/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.update_vectors(\n    collection_name=\"{collection_name}\",\n    points=[\n        models.PointVectors(\n            id=1,\n            vector={\n                \"image\": [0.1, 0.2, 0.3, 0.4],\n            },\n        ),\n        models.PointVectors(\n            id=2,\n            vector={\n                \"text\": [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],\n            },\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Embeddings to Qdrant Points in Python\nDESCRIPTION: This Python snippet converts generated embeddings into a format suitable for Qdrant by creating points with associated IDs and payloads.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import PointStruct\n\nembeddings = get_embeddings(\n    project_id=PROJECT_ID,\n    embedding_model=EMBEDDING_MODEL, \n    documents=DOCUMENTS \n)\n\npoints = [\n    PointStruct(\n        id=idx, \n        vector=embedding,\n        payload={\"text\": text},\n    ) for idx, (embedding, text) in enumerate(zip(embeddings, DOCUMENTS))\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Vacuum Optimizer Parameters\nDESCRIPTION: This YAML configuration sets the parameters for the Vacuum Optimizer, which triggers optimization based on the fraction of deleted vectors and the minimum number of vectors in a segment.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/optimizer.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  optimizers:\n    # The minimal fraction of deleted vectors in a segment, required to perform segment optimization\n    deleted_threshold: 0.2\n    # The minimal number of vectors in a segment, required to perform segment optimization\n    vacuum_min_vector_number: 1000\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection for Startup Vectors\nDESCRIPTION: Create a new Qdrant collection with vector configurations for hybrid search\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif not client.collection_exists(\"startups\"):\n    client.create_collection(\n        collection_name=\"startups\",\n        vectors_config=client.get_fastembed_vector_params(),\n        # comment this line to use dense vectors only\n        sparse_vectors_config=client.get_fastembed_sparse_vector_params(),  \n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Strict Mode in Rust\nDESCRIPTION: Rust code for creating a new Qdrant collection with strict mode enabled and unindexed filtering retrieve restriction using the Qdrant Rust client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{CreateCollectionBuilder, StrictModeConfigBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .strict_config_mode(StrictModeConfigBuilder::default().enabled(true).unindexed_filtering_retrieve(true)),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Named Vectors in Qdrant\nDESCRIPTION: HTTP request to create a collection with multiple named vectors, defining vector sizes and distance metrics for both dense and sparse vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.13.x.md#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n        \"image\": {\n            \"size\": 4,\n            \"distance\": \"Dot\"\n        },\n        \"text\": {\n            \"size\": 8,\n            \"distance\": \"Cosine\"\n        }\n    },\n    \"sparse_vectors\": {\n        \"sparse-image\": {},\n        \"sparse-text\": {},\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FastEmbed for Embedding Generation in Python\nDESCRIPTION: This snippet demonstrates how to install the FastEmbed library, which is necessary for generating different types of embeddings required in the hybrid search process.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-hybrid-search.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install fastembed\n```\n\n----------------------------------------\n\nTITLE: Getting Exact Facet Counts in Qdrant\nDESCRIPTION: This code shows how to use the 'exact' parameter to get precise facet counts instead of the default approximate counts. Exact counting may be slower but provides accurate results for debugging purposes.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/payload.md#2025-04-21_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Batch Insertion of Vectors in Qdrant (Python)\nDESCRIPTION: Demonstrates how to perform batch insertion of vectors into a Qdrant collection, reducing the number of database requests and write operation overhead for faster data ingestion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-resource-optimization.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nvectors = [\n   [.1, .0, .0, .0],\n   [.0, .1, .0, .0],\n   [.0, .0, .1, .0],\n   [.0, .0, .0, .1],\n   …\n]\nclient.upload_collection(\n   collection_name=\"test_collection\",\n   vectors=vectors,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Full Snapshot with Qdrant C# Client\nDESCRIPTION: Initializes a Qdrant client connection to localhost on port 6334 and creates a full snapshot of the database. The code demonstrates basic client setup and snapshot functionality using the C# Qdrant client library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/create-full-snapshot/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateFullSnapshotAsync();\n```\n\n----------------------------------------\n\nTITLE: Qdrant-Spark Configuration Options Table\nDESCRIPTION: Markdown table documenting all configuration options available for Qdrant-Spark integration, including parameter names, descriptions, data types, and whether they are required or optional.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/spark.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Option                       | Description                                                                          | Column DataType                   | Required |\n| :--------------------------- | :----------------------------------------------------------------------------------- | :-------------------------------- | :------- |\n| `qdrant_url`                 | gRPC URL of the Qdrant instance. Eg: <http://localhost:6334>                         | -                                 | ✅       |\n| `collection_name`            | Name of the collection to write data into                                            | -                                 | ✅       |\n| `schema`                     | JSON string of the dataframe schema                                                  | -                                 | ✅       |\n| `embedding_field`            | Name of the column holding the embeddings (Deprecated - Use `vector_fields` instead) | `ArrayType(FloatType)`            | ❌       |\n| `id_field`                   | Name of the column holding the point IDs. Default: Random UUID                       | `StringType` or `IntegerType`     | ❌       |\n| `batch_size`                 | Max size of the upload batch. Default: 64                                            | -                                 | ❌       |\n| `retries`                    | Number of upload retries. Default: 3                                                 | -                                 | ❌       |\n| `api_key`                    | Qdrant API key for authentication                                                    | -                                 | ❌       |\n| `vector_name`                | Name of the vector in the collection.                                                | -                                 | ❌       |\n| `vector_fields`              | Comma-separated names of columns holding the vectors.                                | `ArrayType(FloatType)`            | ❌       |\n| `vector_names`               | Comma-separated names of vectors in the collection.                                  | -                                 | ❌       |\n| `sparse_vector_index_fields` | Comma-separated names of columns holding the sparse vector indices.                  | `ArrayType(IntegerType)`          | ❌       |\n| `sparse_vector_value_fields` | Comma-separated names of columns holding the sparse vector values.                   | `ArrayType(FloatType)`            | ❌       |\n| `sparse_vector_names`        | Comma-separated names of the sparse vectors in the collection.                       | -                                 | ❌       |\n| `multi_vector_fields`        | Comma-separated names of columns holding the multi-vector values.                    | `ArrayType(ArrayType(FloatType))` | ❌       |\n| `multi_vector_names`         | Comma-separated names of the multi-vectors in the collection.                        | -                                 | ❌       |\n| `shard_key_selector`         | Comma-separated names of custom shard keys to use during upsert.                     | -                                 | ❌       |\n| `wait`                       | Wait for each batch upsert to complete. `true` or `false`. Defaults to `true`.       | -                                 | ❌       |\n```\n\n----------------------------------------\n\nTITLE: Hybrid Search with Query API - HTTP Request\nDESCRIPTION: Example showing how to perform hybrid search using sparse and dense vectors with reciprocal rank fusion\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": [\n        {\n            \"query\": { \n                \"indices\": [1, 42],    \n                \"values\": [0.22, 0.8]  \n             },\n            \"using\": \"sparse\",\n            \"limit\": 20\n        },\n        {\n            \"query\": [0.01, 0.45, 0.67, ...], \n            \"using\": \"dense\",\n            \"limit\": 20\n        }\n    ],\n    \"query\": { \"fusion\": \"rrf\" }, \n    \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Executing Filtered Scroll Query in TypeScript\nDESCRIPTION: This snippet shows how to create a Qdrant client instance and perform a scroll query with multiple filter conditions. It connects to a local Qdrant server and searches for documents in a specified collection that match both 'city' and 'color' criteria.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-must-filter/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must: [\n      {\n        key: \"city\",\n        match: { value: \"London\" },\n      },\n      {\n        key: \"color\",\n        match: { value: \"red\" },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Geo Radius Condition in Qdrant with Rust\nDESCRIPTION: This snippet demonstrates how to create a `GeoRadius` condition using the `qdrant_client` crate in Rust. It defines a geographic location (latitude and longitude) and a radius, and constructs a condition to filter points within that radius of the specified location. This condition can be used in Qdrant queries to find points near a specific geographic area.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-radius/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, GeoPoint, GeoRadius};\n\nCondition::geo_radius(\n    \"location\",\n    GeoRadius {\n        center: Some(GeoPoint {\n            lon: 13.403683,\n            lat: 52.520711,\n        }),\n        radius: 1000.0,\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Faceted Search Results with Filtering in Qdrant\nDESCRIPTION: A POST request to the Qdrant facet endpoint for retrieving facet information based on a specific key with an applied filter. The example requests facets for the 'size' key while filtering for items where the 'color' matches 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/facet-counts/simple-with-filter/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/facet\n{\n    \"key\": \"size\",\n    \"filter\": {\n      \"must\": {\n        \"key\": \"color\",\n        \"match\": { \"value\": \"red\" }\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Qdrant client, create a client instance, and use it to create a new collection. The collection is configured with specific vector size, distance metric, and quantization settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/scalar-quantization-in-ram/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n    on_disk: true,\n  },\n  quantization_config: {\n    scalar: {\n      type: \"int8\",\n      always_ram: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Perform a Search by Audio - Python\nDESCRIPTION: This snippet demonstrates how to submit a search query using audio by generating an embedding for the audio input and querying points in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\naudio_segment = twelvelabs_client.embed.create(\n    model_name=\"Marengo-retrieval-2.7\",\n    audio_url=\"https://codeskulptor-demos.commondatastorage.googleapis.com/descent/background%20music.mp3\",\n).audio_embedding.segments[0]\n\nqdrant_client.query_points(\n    collection_name=collection_name,\n    query=audio_segment.embeddings_float,\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database in C#\nDESCRIPTION: Demonstrates connecting to a Qdrant server and performing a vector similarity search with keyword filtering. The query includes a 4-dimensional vector, filters results to match 'London' in the city field, and returns the top 3 matches using approximate search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/basic-with-filter-and-params/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n    filter: MatchKeyword(\"city\", \"London\"),\n    searchParams: new SearchParams { Exact = false, HnswEf = 128 },\n    limit: 3\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents from Qdrant Collection in Python\nDESCRIPTION: This function retrieves a specified number of documents from a Qdrant collection based on a given query, returning a list of the retrieved documents.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_documents(collection_name, query, num_documents=3):\n    \"\"\"\n    This function retrieves the desired number of documents from the Qdrant collection given a query.\n    It returns a list of the retrieved documents.\n    \"\"\"\n    search_results = client.query(\n        collection_name=collection_name,\n        query_text=query,\n        limit=num_documents,\n    )\n    results = [r.metadata[\"document\"] for r in search_results]\n    return results\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Quantization\nDESCRIPTION: Creates a new Qdrant collection using the client builder pattern. Configures a 768-dimensional vector space with Cosine distance and Int8 scalar quantization stored in RAM.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/scalar-quantization-in-ram/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\\n    CreateCollectionBuilder, Distance, QuantizationType, ScalarQuantizationBuilder,\\n    VectorParamsBuilder,\\n};\\nuse qdrant_client::Qdrant;\\n\\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\\n\\nclient\\n    .create_collection(\\n        CreateCollectionBuilder::new(\"{collection_name}\")\\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine))\\n            .quantization_config(\\n                ScalarQuantizationBuilder::default()\\n                    .r#type(QuantizationType::Int8.into())\\n                    .always_ram(true),\\n            ),\\n    )\\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Client with FastEmbed\nDESCRIPTION: Commands to install the Qdrant Client package with FastEmbed integration using pip. Includes alternative syntax for zsh shell users.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/fastembed.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install qdrant-client[fastembed]\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install 'qdrant-client[fastembed]'\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration\nDESCRIPTION: HTTP PUT request to create a new collection with specified vector dimensionality and distance metric. The collection can be initialized from an existing collection using the init_from parameter. Requires vector size and distance metric specification.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/init-from/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 100,\n      \"distance\": \"Cosine\"\n    },\n    \"init_from\": {\n       \"collection\": \"{from_collection_name}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Write Lock in Qdrant API\nDESCRIPTION: HTTP POST request to enable write locking on a Qdrant instance. The lock prevents creation of new collections and data additions while allowing deletion operations. Includes an optional custom error message for locked operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /locks\n{\n    \"error_message\": \"write is forbidden\",\n    \"write\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Collection Points with Filter Condition in Qdrant using Rust\nDESCRIPTION: This code counts the number of points in a Qdrant collection that match a specific filter condition. It uses the CountPointsBuilder to construct a query that filters for points where the 'color' field equals 'red', with exact counting enabled.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/count-points/with-filter-exact/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, CountPointsBuilder, Filter};\n\nclient\n    .count(\n        CountPointsBuilder::new(\"{collection_name}\")\n            .filter(Filter::must([Condition::matches(\n                \"color\",\n                \"red\".to_string(),\n            )]))\n            .exact(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Vector Search in Go\nDESCRIPTION: This snippet shows how to import the Qdrant Go client, create a new client instance connected to a local Qdrant server, and perform a vector similarity search query with specific vector coordinates on a collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/named-vector/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tUsing:          qdrant.PtrOf(\"image\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Points in Qdrant using Go\nDESCRIPTION: This snippet showcases querying points in a Qdrant collection using the Go client.  It uses the `client.Query` method, passing a `context.Background()` and a `qdrant.QueryPoints` struct. The `QueryPoints` struct includes the `CollectionName` and the query vector defined using `qdrant.NewQueryMulti`.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/multivector/go.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery: qdrant.NewQueryMulti(\n\t\t[][]float32{\n\t\t\t{-0.013, 0.020, -0.007, -0.111},\n\t\t\t{-0.030, -0.055, 0.001, 0.072},\n\t\t\t{-0.041, 0.014, -0.032, -0.062},\n\t\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Grouped Vector Search Query with Lookup in Qdrant\nDESCRIPTION: Demonstrates performing a grouped vector search query with collection lookup functionality. The query searches for nearest vectors with a specified threshold, groups results by document_id, limits results per group, and includes specific payload fields from a linked collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-groups/with-lookup/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport io.qdrant.client.grpc.Points.QueryPointGroups;\nimport io.qdrant.client.grpc.Points.WithLookup;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.WithVectorsSelectorFactory.enable;\nimport static io.qdrant.client.WithPayloadSelectorFactory.include;\n\nclient.queryGroupsAsync(\n        QueryPointGroups.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setGroupBy(\"document_id\")\n                .setLimit(2)\n                .setGroupSize(2)\n                .setWithLookup(\n                        WithLookup.newBuilder()\n                                .setCollection(\"documents\")\n                                .setWithPayload(include(List.of(\"title\", \"text\")))\n                                .setWithVectors(enable(false))\n                                .build())\n                .build())\n        .get();\n```\n\n----------------------------------------\n\nTITLE: Normalizing Movie Ratings (Python)\nDESCRIPTION: Python code to normalize movie ratings to have a mean of 0 and a standard deviation of 1.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/recommendation-system-ovhcloud.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nratings.rating = (ratings.rating - ratings.rating.mean()) / ratings.rating.std()\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with Negated Filter in Java\nDESCRIPTION: This code performs an asynchronous scroll operation on a Qdrant collection. It applies a filter that excludes points where the city is 'London' and the color is 'red'. The operation uses the Qdrant Java client and its condition factory for filter creation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-nested-clauses-filter/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.filter;\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addMustNot(\n                        filter(\n                            Filter.newBuilder()\n                                .addAllMust(\n                                    List.of(\n                                        matchKeyword(\"city\", \"London\"),\n                                        matchKeyword(\"color\", \"red\")))\n                                .build()))\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Re-enabling HNSW Indexing After Upload in Rust\nDESCRIPTION: Rust implementation to update a Qdrant collection by enabling HNSW indexing after bulk upload. Changes the m parameter from 0 to 16 to begin constructing the HNSW graph for fast vector search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::\n    UpdateCollectionBuilder, HnswConfigDiffBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .update_collection(\n        UpdateCollectionBuilder::new(\"{collection_name}\")\n            .hnsw_config(HnswConfigDiffBuilder::default().m(16)),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Updating a Collection with Strict Mode in Go\nDESCRIPTION: Go code for updating an existing Qdrant collection to enable strict mode with unindexed filtering retrieve restriction using the Qdrant Go client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"context\"\n\n  \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n  Host: \"localhost\",\n  Port: 6334,\n})\n\nclient.UpdateCollection(context.Background(), &qdrant.UpdateCollection{\n  CollectionName: \"{collection_name}\",\n  StrictModeConfig: &qdrant.StrictModeConfig{\n        Enabled: qdrant.PtrOf(true),\n    UnindexedFilteringRetrieve: qdrant.PtrOf(true),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Upserting Data into Qdrant Collection in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the upsert function from the Qdrant client library to insert or update data in a specified collection. It includes dependencies on the Qdrant client library, and the input includes a collection name, a batch of IDs, payloads, and vectors. The output updates or inserts the given data into the specified collection in Qdrant, with no explicit return value.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/batch-simple/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.upsert(\"{collection_name}\", {\n  batch: {\n    ids: [1, 2, 3],\n    payloads: [{ color: \"red\" }, { color: \"green\" }, { color: \"blue\" }],\n    vectors: [\n      [0.9, 0.1, 0.1],\n      [0.1, 0.9, 0.1],\n      [0.1, 0.1, 0.9],\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Qdrant Collection Configuration via PATCH Request\nDESCRIPTION: HTTP PATCH request to modify collection settings including vector configurations, HNSW parameters, and quantization options. Allows updating vector-specific settings like HNSW index parameters (m, ef_construct) and quantization configuration (compression type, RAM storage). Also supports global collection-level HNSW and scalar quantization settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/hnsw-and-quantization/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPATCH /collections/{collection_name}\n{\n    \"vectors\": {\n        \"my_vector\": {\n            \"hnsw_config\": {\n                \"m\": 32,\n                \"ef_construct\": 123\n            },\n            \"quantization_config\": {\n                \"product\": {\n                    \"compression\": \"x32\",\n                    \"always_ram\": true\n                }\n            },\n            \"on_disk\": true\n        }\n    },\n    \"hnsw_config\": {\n        \"ef_construct\": 123\n    },\n    \"quantization_config\": {\n        \"scalar\": {\n            \"type\": \"int8\",\n            \"quantile\": 0.8,\n            \"always_ram\": false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Routing Function Definition\nDESCRIPTION: This Python code defines the `route` function.  This function determines whether to use a tool or end the cycle, based on the presence of `tool_calls` in the last message of the state. It returns \"tools\" if tool calls are present and `END` otherwise.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef route(state: State):\n    if isinstance(state, list):\n        ai_message = state[-1]\n    elif messages := state.get(\"messages\", []):\n        ai_message = messages[-1]\n    else:\n        raise ValueError(f\"No messages found in input state to tool_edge: {state}\")\n\n    if hasattr(ai_message, \"tool_calls\") and len(ai_message.tool_calls) > 0:\n        return \"tools\"\n\n    return END\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Match Query in Typescript\nDESCRIPTION: Defines a query object with a 'color' key that matches any of multiple color values, allowing flexible color-based filtering or selection\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-any/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    key: 'color',\n    match: {any: ['black', 'yellow']}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Querying with Discover\nDESCRIPTION: This code snippet initializes a Qdrant client and then executes a `Query` operation with a `Discover` query. It establishes a connection to a Qdrant instance running on localhost, defines a discovery query targeting similar vectors, and provides context using positive and negative examples identified by numerical IDs. The `context.Background()` is used for the context.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/discovery-basic/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n    CollectionName: \"{collection_name}\",\n    Query: qdrant.NewQueryDiscover(&qdrant.DiscoverInput{\n        Target: qdrant.NewVectorInput(0.2, 0.1, 0.9, 0.7),\n        Context: &qdrant.ContextInput{\n            Pairs: []*qdrant.ContextInputPair{\n                {\n                    Positive: qdrant.NewVectorInputID(qdrant.NewIDNum(100)),\n                    Negative: qdrant.NewVectorInputID(qdrant.NewIDNum(718)),\n                },\n                {\n                    Positive: qdrant.NewVectorInputID(qdrant.NewIDNum(200)),\n                    Negative: qdrant.NewVectorInputID(qdrant.NewIDNum(300)),\n                },\n            },\n        },\n    }),\n})\n```\n\n----------------------------------------\n\nTITLE: Uploading Points to Collection - Python\nDESCRIPTION: Upload movie data points with embeddings and metadata to the Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-colbert.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nqdrant_client.upload_points(\n    collection_name=\"movies\",\n    points=[\n        models.PointStruct(\n            id=idx,\n            payload=metadata[idx],\n            vector=vector\n        )\n        for idx, vector in enumerate(descriptions_embeddings)\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Running the DLT Pipeline with Vector Embedding\nDESCRIPTION: Python code that executes the DLT pipeline to load data into Qdrant with vector embeddings. The qdrant_adapter function specifies which fields should be embedded for vector search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/dlt.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ninfo = pipeline.run(\n    qdrant_adapter(\n        movies,\n        embed=[\"title\", \"description\"]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Simplified IdTracker Structure for Memory Usage Estimation\nDESCRIPTION: Simplified Rust structure showing how Qdrant internally stores ID and version information for vector points. This helps estimate the memory requirements for tracking 400 million points in a collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/large-scale-search.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n// This is s simplified version of the IdTracker struct\n// It omits all optimizations and small details,\n// but gives a good estimation of memory usage\nIdTracker {\n    // Mapping of internal id to version (u64), compressed to 4 bytes\n    // Required for versioning and conflict resolution between segments\n    internal_to_version, // 400M x 4 = 1.5Gb\n\n    // Mapping of external id to internal id, 4 bytes per point.\n    // Required to determine original point ID after search inside the segment\n    internal_to_external: Vec<u128>, // 400M x 16 = 6.4Gb\n\n    // Mapping of external id to internal id. For numeric ids it uses 8 bytes,\n    //  UUIDs are stored as 16 bytes.\n    // Required to determine sequential point ID inside the segment\n    external_to_internal: Vec<u64, u32>, // 400M x (8 + 4) = 4.5Gb\n}\n```\n\n----------------------------------------\n\nTITLE: Indexing Documents with Cohere Embed v3 Models in Qdrant\nDESCRIPTION: Example demonstrating how to index documents using Cohere's Embed v3 models. It specifies the input_type as 'search_document' which is optimized for storing documents in a vector database for retrieval.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/cohere.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport cohere\nimport qdrant_client\nfrom qdrant_client.models import Batch\n\ncohere_client = cohere.Client(\"<< your_api_key >>\")\nclient = qdrant_client.QdrantClient()\nclient.upsert(\n    collection_name=\"MyCollection\",\n    points=Batch(\n        ids=[1],\n        vectors=cohere_client.embed(\n            model=\"embed-english-v3.0\",  # New Embed v3 model\n            input_type=\"search_document\",  # Input type for documents\n            texts=[\"Qdrant is the a vector database written in Rust\"],\n        ).embeddings,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Search with Qdrant\nDESCRIPTION: This code demonstrates how to use the search_batch method to perform multiple vector searches in a single API call. It sends two search requests with different parameters and shows the returned results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/batch-vector-search-with-qdrant.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresults = client.search_batch(\n    collection_name=\"test_collection\",\n    requests=[\n        SearchRequest(\n            vector=[0., 0., 2., 0.],\n            limit=1,\n        ),\n        SearchRequest(\n            vector=[0., 0., 0., 0.01],\n            with_vector=True,\n            limit=2,\n        )\n    ]\n)\n\n# Out: [\n#   [ScoredPoint(id=2, version=0, score=1.9, \n#                payload=None, vector=None)],\n#   [ScoredPoint(id=3, version=0, score=0.09, \n#                payload=None, vector=[0.0, 0.0, 0.0, 0.1]),\n#    ScoredPoint(id=1, version=0, score=0.10049876, \n#                payload=None, vector=[0.0, 0.1, 0.0, 0.0])]\n# ]\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Sparse Vectors Configuration in Rust\nDESCRIPTION: This code initializes a Qdrant client, configures sparse vectors with on-disk indexing, and creates a new collection. It uses the Qdrant Rust client to interact with a Qdrant server running on localhost:6334.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector-index-on-disk/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::\n    CreateCollectionBuilder, SparseIndexConfigBuilder, SparseVectorParamsBuilder,\n    SparseVectorsConfigBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet mut sparse_vectors_config = SparseVectorsConfigBuilder::default();\n\nsparse_vectors_config.add_named_vector_params(\n    \"splade-model-name\",\n    SparseVectorParamsBuilder::default()\n        .index(SparseIndexConfigBuilder::default().on_disk(true)),\n);\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .sparse_vectors_config(sparse_vectors_config),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collections with C#\nDESCRIPTION: This snippet initializes a Qdrant client and performs an asynchronous query against a specified collection using a float array as a query vector. The search parameters include quantization settings. Required dependencies include the Qdrant.Client and Qdrant.Client.Grpc libraries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-ignored-quantization/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\tsearchParams: new SearchParams\n\t{\n\t\tQuantization = new QuantizationSearchParams { Ignore = true }\n\t},\n\tlimit: 10\n);\n\n```\n\n----------------------------------------\n\nTITLE: Importing Required Python Libraries\nDESCRIPTION: This code imports the necessary Python libraries for connecting to Qdrant, performing UMAP dimensionality reduction, and visualization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/distance-based-exploration.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\nfrom umap import UMAP\nfrom scipy.sparse import csr_matrix\nimport seaborn as sns\n```\n\n----------------------------------------\n\nTITLE: Building Ordered Query with Qdrant in Rust\nDESCRIPTION: Creates an ordered query builder instance to sort results by timestamp in descending order, starting from a specific integer value. Uses the Qdrant client library's OrderByBuilder to construct the query parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-order-by-advanced/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{start_from::Value, Direction, OrderByBuilder};\n\nOrderByBuilder::new(\"timestamp\")\n    .direction(Direction::Desc.into())\n    .start_from(Value::Integer(123))\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshots on Multiple Qdrant Nodes using Python SDK\nDESCRIPTION: This code creates snapshots of the 'test_collection' on each node of the Qdrant cluster using the Python SDK. It iterates through the node URLs, creates a client for each, and triggers snapshot creation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/create-snapshot.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsnapshot_urls = []\nfor node_url in QDRANT_NODES:\n    node_client = QdrantClient(node_url, api_key=QDRANT_API_KEY)\n    snapshot_info = node_client.create_snapshot(collection_name=\"test_collection\")\n\n    snapshot_url = f\"{node_url}/collections/test_collection/snapshots/{snapshot_info.name}\"\n    snapshot_urls.append(snapshot_url)\n```\n\n----------------------------------------\n\nTITLE: Configuring IDF in Qdrant Collection - Python\nDESCRIPTION: Python code using the Qdrant client to create a collection with IDF modifier enabled for sparse vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\nclient = QdrantClient(url=\"http://localhost:6333\")\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    sparse_vectors={\n        \"text\": models.SparseVectorParams(\n            modifier=models.Modifier.IDF,\n        ),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Querying the Qdrant Knowledge Base\nDESCRIPTION: Shows how to query the Qdrant knowledge base using the query method. This example demonstrates searching for similar documents with optional parameters like top_k and metadata filtering.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/canopy.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom canopy.models.data_models import Query\n\nkb.query(\n    [\n        Query(text=\"Arctic Monkeys music genre\"),\n        Query(\n            text=\"U2 music genre\",\n            top_k=10,\n            metadata_filter={\"key\": \"my-key\", \"match\": {\"value\": \"my-value\"}},\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Swarm Agents\nDESCRIPTION: Implementation of two collaborative agents: a general assistant and an arithmetic specialist, demonstrating agent creation and transfer functionality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/swarm.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom swarm import Swarm, Agent\n\nclient = Swarm()\n\n# Define Agent B\nagent_b = Agent(\n    name=\"Agent B\",\n    instructions=\"Arithmetic solving expertise holder.\",\n)\n\ndef transfer_to_agent_b():\n    return agent_b\n\n# Define Agent A\nagent_a = Agent(\n    name=\"Agent A\",\n    instructions=\"You are a helpful agent.\",\n    functions=[transfer_to_agent_b],\n)\n\n# Run the interaction\nresponse = client.run(\n    agent=agent_a,\n    messages=[{\"role\": \"user\", \"content\": \"I want some help with numbers.\"}],\n)\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collection with Filter in TypeScript\nDESCRIPTION: This code snippet demonstrates how to query a Qdrant collection with a filter. It uses the `client.scroll` method to retrieve data based on specified criteria such as color. The snippet showcases the use of filters, limits, payload inclusion, and vector exclusion in a Qdrant query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-and-params/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must: [\n      {\n        key: \"color\",\n        match: {\n          value: \"red\",\n        },\n      },\n    ],\n  },\n  limit: 1,\n  with_payload: true,\n  with_vector: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Go Client with JWT Authentication\nDESCRIPTION: Example of initializing the Qdrant Go client with JWT authentication. The JWT token is passed as the API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost:   \"xyz-example.eu-central.aws.cloud.qdrant.io\",\n\tPort:   6334,\n\tAPIKey: \"<JWT>\",\n\tUseTLS: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection and Inserting Documents\nDESCRIPTION: Initialize a Qdrant collection with cosine distance and 384-dimensional vectors, then insert document points\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/snowflake.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import VectorParams, Distance\n\nCOLLECTION_NAME = \"example_collection\"\n\nqclient.create_collection(\n    COLLECTION_NAME,\n    vectors_config=VectorParams(\n        size=384,\n        distance=Distance.COSINE,\n    ),\n)\nqclient.upsert(COLLECTION_NAME, points)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst COLLECTION_NAME = \"example_collection\"\n\nawait client.createCollection(COLLECTION_NAME, {\n    vectors: {\n        size: 384,\n        distance: 'Cosine',\n    }\n});\n\nawait client.upsert(COLLECTION_NAME, {\n    wait: true,\n    points\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Grouped Vector Search with Lookup in Qdrant using C#\nDESCRIPTION: Demonstrates how to perform a grouped vector search operation with cross-collection lookup using the Qdrant C# client. The code initializes a client connection to Qdrant and executes a search query that groups results by document_id, includes specific payload fields, and performs a lookup against a documents collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-groups/with-lookup/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.SearchGroupsAsync(\n    collectionName: \"{collection_name}\",\n    vector: new float[] { 0.2f, 0.1f, 0.9f, 0.7f},\n    groupBy: \"document_id\",\n    limit: 2,\n    groupSize: 2,\n    withLookup: new WithLookup\n    {\n        Collection = \"documents\",\n        WithPayload = new WithPayloadSelector\n        {\n            Include = new PayloadIncludeSelector { Fields = { new string[] { \"title\", \"text\" } } }\n        },\n        WithVectors = false\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Performing Faceted Search with Qdrant Java Client\nDESCRIPTION: This code snippet demonstrates how to perform a faceted search operation using the Qdrant Java client. It creates a facet count request for a field named 'foo' in the specified collection with exact counting enabled, then executes it asynchronously and waits for the result.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/facet-counts/exact/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclient\n      .facetAsync(\n          Points.FacetCounts.newBuilder()\n              .setCollectionName(collection_name)\n              .setKey(\"foo\")\n              .setExact(true)\n              .build())\n      .get();\n```\n\n----------------------------------------\n\nTITLE: Vector Search Example with Qdrant Integration\nDESCRIPTION: Complete Python example demonstrating how to perform vector search using Superduper with Qdrant, including data loading, model initialization, and query execution\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/superduper.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests \nfrom superduper import superduper, Document\nfrom superduper.ext.sentence_transformers import SentenceTransformer\n\nr = requests.get('https://superduperdb-public-demo.s3.amazonaws.com/text.json')\n\nwith open('text.json', 'wb') as f:\n    f.write(r.content)\n\nwith open('text.json', 'r') as f:\n    data = json.load(f)        \n\ndb = superduper('mongomock://test')\n\n_ = db['documents'].insert_many([Document({'txt': txt}) for txt in data]).execute()\n\nmodel = SentenceTransformer(\n    identifier=\"test\",\n    predict_kwargs={\"show_progress_bar\": True},\n    model=\"all-MiniLM-L6-v2\",\n    device=\"cpu\",\n    postprocess=lambda x: x.tolist(),\n)\n\nvector_index = model.to_vector_index(select=db['documents'].find(), key='txt')\n\ndb.apply(vector_index)\n\nquery = db['documents'].like({'txt': 'Tell me about vector-search'}, vector_index=vector_index.identifier, n=3).find()\ncursor = query.execute()\n\nfor r in cursor:\n    print('=' * 100)\n    print(r.unpack()['txt'])\n    print('=' * 100)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant for Similar Users (Python)\nDESCRIPTION: Python code to query Qdrant and find users with similar tastes based on provided personal ratings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/recommendation-system-ovhcloud.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nresults = client.query_points(\n    \"movielens\",\n    query=to_vector(my_ratings),\n    using=\"ratings\",\n    with_vectors=True, # We will use those to find new movies\n    limit=20\n).points\n```\n\n----------------------------------------\n\nTITLE: Implementing Best Score Strategy in Rust\nDESCRIPTION: This code snippet shows the implementation of the 'best_score' strategy in Rust. It calculates the score of a potential point based on its proximity to positive and negative examples, penalizing points closer to negative examples.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/new-recommendation-api.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nif best_positive_score > best_negative_score {\n    score = best_positive_score\n} else {\n    score = -(best_negative_score * best_negative_score)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Vector Search Client in Rust\nDESCRIPTION: Creates a Qdrant client connection to a local server endpoint for performing vector similarity searches. Configures connection parameters and establishes client instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-multistage/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?\n```\n\n----------------------------------------\n\nTITLE: Configuring Quantization in Qdrant using Python\nDESCRIPTION: Python code snippet demonstrating how to set up binary quantization when creating a new collection in Qdrant, including vector configuration and quantization settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-a-vector-database.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(\n        size=1536,  \n        distance=models.Distance.COSINE\n    ),\n\n    # Choose your preferred quantization method\n    quantization_config=models.BinaryQuantization(  \n        binary=models.BinaryQuantizationConfig(\n            always_ram=True,  # Store the quantized vectors in RAM for faster access\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Executing Nearest Neighbor Query in Java\nDESCRIPTION: This code demonstrates how to create a connection to a Qdrant vector database server and perform a nearest neighbor search. It initializes a QdrantClient using the gRPC protocol, connecting to a local Qdrant instance at port 6334, and executes an asynchronous nearest neighbor search query with a specific vector.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/simple-dense/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n  .setCollectionName(\"{collectionName}\")\n  .setQuery(nearest(List.of(0.2f, 0.1f, 0.9f, 0.7f)))\n  .build()).get();\n```\n\n----------------------------------------\n\nTITLE: Embedding Documents with Upstage API in Python\nDESCRIPTION: Sends a POST request to the Upstage API to embed the sample texts using the 'solar-embedding-1-large-passage' model.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/upstage.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbody = {\n    \"input\": texts,\n    \"model\": \"solar-embedding-1-large-passage\",\n}\n\nresponse_body = upstage_session.post(\n    UPSTAGE_BASE_URL, headers=headers, json=body\n).json()\n```\n\n----------------------------------------\n\nTITLE: Sending Multi-vectors to Qdrant via Kafka\nDESCRIPTION: JSON format for sending multi-vectors to Qdrant via the Kafka connector. Multi-vectors are represented as an array of vector arrays under a named key in the vector field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/confluent.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collection_name\": \"{collection_name}\",\n    \"id\": 1,\n    \"vector\": {\n        \"some-multi\": [\n            [\n                0.1,\n                0.2,\n                0.3,\n                0.4,\n                0.5,\n                0.6,\n                0.7,\n                0.8,\n                0.9,\n                1.0\n            ],\n            [\n                1.0,\n                0.9,\n                0.8,\n                0.5,\n                0.4,\n                0.8,\n                0.6,\n                0.4,\n                0.2,\n                0.1\n            ]\n        ]\n    },\n    \"payload\": {\n        \"name\": \"kafka\",\n        \"description\": \"Kafka is a distributed streaming platform\",\n        \"url\": \"https://kafka.apache.org/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Upserting Data with Tenant Identification to Specific Shard\nDESCRIPTION: This code shows how to upsert vector data with a tenant identifier in the payload to a specific shard using the shard_key_selector parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/multitenancy.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n    collection_name=\"{tenant_data}\",\n    points=[\n        models.PointStruct(\n            id=1,\n            payload={\"group_id\": \"tenant_1\"},\n            vector=[0.9, 0.1, 0.1], \n        ),\n        models.PointStruct(\n            id=2,\n            payload={\"group_id\": \"tenant_1\"},\n            vector=[0.1, 0.9, 0.1],\n        ),\n    ],\n    shard_key_selector=\"canada\",\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Collection with Multiple Vector Types\nDESCRIPTION: This HTTP PUT request configures a Qdrant collection with multiple vector types. It defines dense vectors for image and text data, each with specific sizes and distance metrics, and a sparse vector for text data. The collection name is specified as a path parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/named-vectors/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n  \"vectors\": {\n    \"image\": {\n      \"size\": 4,\n      \"distance\": \"Dot\"\n    },\n    \"text\": {\n      \"size\": 5,\n      \"distance\": \"Cosine\"\n    }\n  },\n  \"sparse_vectors\": {\n    \"text-sparse\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Java Client\nDESCRIPTION: Creates a new collection in Qdrant with 768-dimensional vectors using cosine distance metric. The collection is configured with Int8 scalar quantization and vectors stored on disk. The client connects to a local Qdrant instance on port 6334.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/scalar-quantization-in-ram/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\nimport io.qdrant.client.grpc.Collections.QuantizationConfig;\nimport io.qdrant.client.grpc.Collections.QuantizationType;\nimport io.qdrant.client.grpc.Collections.ScalarQuantization;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(768)\n                            .setDistance(Distance.Cosine)\n                            .setOnDisk(true)\n                            .build())\n                    .build())\n            .setQuantizationConfig(\n                QuantizationConfig.newBuilder()\n                    .setScalar(\n                        ScalarQuantization.newBuilder()\n                            .setType(QuantizationType.Int8)\n                            .setAlwaysRam(true)\n                            .build())\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index with Qdrant in TypeScript\nDESCRIPTION: This code snippet demonstrates the creation of a payload index in a Qdrant collection using TypeScript. The `createPayloadIndex` method is used, specifying the collection name and indexing parameters for the field. The payload index is created for a field named `timestamp` of type `integer`, which is set as the principal index field. This setup allows for efficient querying and indexing of temporal data in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/integer-is-principal/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"timestamp\",\n  field_schema: {\n    type: \"integer\",\n    is_principal: true\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Prefetching in Rust\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client to perform a query with prefetching. It initializes a `Qdrant` client, builds a query with prefetching for nearest neighbors, and then executes the query. The query includes specifying a collection name, nearest vectors, using filters, and setting limits.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{PrefetchQueryBuilder, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .query(Query::new_nearest(vec![1.0, 23.0, 45.0, 67.0]))\n            .using(\"mlr_byte\")\n            .limit(1000u64)\n        )\n        .query(Query::new_nearest(vec![0.01, 0.299, 0.45, 0.67]))\n        .using(\"full\")\n        .limit(10u64)\n).await?;\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Language Model with DSPy\nDESCRIPTION: This snippet demonstrates how to set up and configure an OpenAI language model using DSPy. It includes importing the library, initializing the model, and testing it with a simple question-answering task.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/dspy-vs-langchain.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# pip install dspy\n\nimport dspy\n\nllm = dspy.OpenAI(model='gpt-3.5-turbo-1106', max_tokens=300)\n\ndspy.configure(lm=llm)\n\n# Let's test this. First define a module (ChainOfThought) and assign it a signature (return an answer, given a question).\n\nqa = dspy.ChainOfThought('question -> answer')\n\n# Then, run with the default LM configured.\n\nresponse = qa(question=\"Where is Paris?\")\n\nprint(response.answer)\n```\n\n----------------------------------------\n\nTITLE: Initializing Cohere Client for Reranking\nDESCRIPTION: Sets up a connection to Cohere's API for reranking capabilities. Requires an API key from your Cohere account for authentication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-semantic-search.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nco = cohere.Client(\"<API-KEY>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring a Collection with Optimizer Settings in Qdrant\nDESCRIPTION: JSON configuration for creating a Qdrant collection with specific optimizer configurations including the memmap_threshold parameter, which determines when segments are converted to memmap storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/storage.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/create-collection/with-optimizer-config/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Sparse Vectors using C#\nDESCRIPTION: Initializes a Qdrant client and creates a new collection with sparse vector configuration. The client connects to a local Qdrant instance on port 6334 and sets up a collection with text-based sparse vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tsparseVectorsConfig: (\"text\", new SparseVectorParams())\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Scroll Operation in C#\nDESCRIPTION: This code initializes a Qdrant client and performs a scroll operation on a collection with a nested filter. The filter combines a keyword match and a boolean match within a nested structure.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-nested-clause/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: Nested(\"diet\", MatchKeyword(\"food\", \"meat\") & Match(\"likes\", true))\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Sparse Vectors in Rust\nDESCRIPTION: Initializes a Qdrant client and creates a new collection with sparse vector configuration. The code connects to a local Qdrant instance, configures sparse vector parameters, and creates a collection with the specified configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{\\n    CreateCollectionBuilder, SparseVectorParamsBuilder, SparseVectorsConfigBuilder,\\n};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet mut sparse_vector_config = SparseVectorsConfigBuilder::default();\n\nsparse_vector_config.add_named_vector_params(\"text\", SparseVectorParamsBuilder::default());\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .sparse_vectors_config(sparse_vector_config),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Rust Client with API Key Authentication\nDESCRIPTION: Example of initializing the Qdrant Rust client with API key authentication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"https://xyz-example.eu-central.aws.cloud.qdrant.io:6334\")\n    .api_key(\"<paste-your-api-key-here>\")\n    .build()?;\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with Filters in TypeScript\nDESCRIPTION: This code performs a scroll query on a Qdrant collection using filters. It includes points where the 'city' is 'London' and excludes points where the 'color' is 'red'. The query uses the 'must' and 'must_not' conditions to define the filter criteria.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-multiple-clauses-combination/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must: [\n      {\n        key: \"city\",\n        match: { value: \"London\" },\n      },\n    ],\n    must_not: [\n      {\n        key: \"color\",\n        match: { value: \"red\" },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering Collection Optimization in Qdrant\nDESCRIPTION: This snippet demonstrates how to trigger optimization for a collection that has a grey status. It shows how to send an empty update operation to start pending optimizations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/collections.md#2025-04-21_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PATCH 'http://localhost:6333/collections/my_collection' \\\n  -H 'Content-Type: application/json' \\\n  -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying with Qdrant Go Client\nDESCRIPTION: Creates a new Qdrant client connection to a local server and performs a vector similarity search with custom query parameters. The query demonstrates using vector coordinates (0.2, 0.1, 0.9, 0.7) with quantization options where rescoring is disabled.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-disabled-rescoring/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tParams: &qdrant.SearchParams{\n\t\tQuantization: &qdrant.QuantizationSearchParams{\n\t\t\tRescore: qdrant.PtrOf(false),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Qdrant Collection in Go\nDESCRIPTION: This snippet shows how to initialize a Qdrant client and update a collection configuration using the Go client library. It requires the Qdrant Go client library as a dependency and assumes that the server is running on localhost at port 6334. The key parameters include the collection name and an optimizers configuration, specifying an indexing threshold. This example outputs nothing directly but updates the collection configuration on the server.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/simple/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.UpdateCollection(context.Background(), &qdrant.UpdateCollection{\n\tCollectionName: \"{collection_name}\",\n\tOptimizersConfig: &qdrant.OptimizersConfigDiff{\n\t\tIndexingThreshold: qdrant.PtrOf(uint64(10000)),\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Distribution-Based Score Fusion with Rust in Qdrant\nDESCRIPTION: Rust client example for using DBSF fusion in Qdrant to combine sparse and dense vector query results. The code shows the builder pattern used to construct the query with prefetch operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.11.x.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{Fusion, PrefetchQueryBuilder, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .query(Query::new_nearest([(1, 0.22), (42, 0.8)].as_slice()))\n            .using(\"sparse\")\n            .limit(20u64)\n        )\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .query(Query::new_nearest(vec![0.01, 0.45, 0.67]))\n            .using(\"dense\")\n            .limit(20u64)\n        )\n        .query(Query::new_fusion(Fusion::Dbsf))\n).await?;\n```\n\n----------------------------------------\n\nTITLE: Integrating Swarm with Qdrant\nDESCRIPTION: Complete implementation of Qdrant integration with OpenAI Swarm, including vector similarity search and agent delegation for knowledge base queries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/swarm.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport qdrant_client\nfrom openai import OpenAI\n\n# Initialize clients\nopenai_client = OpenAI()\nqdrant = qdrant_client.QdrantClient(host=\"localhost\")\n\n# Configuration\nEMBEDDING_MODEL = \"text-embedding-3-small\"\nCOLLECTION_NAME = \"help_center\"\nLIMIT = 5\nSCORE_THRESHOLD = 0.7\n\n# Function to query Qdrant\ndef query_qdrant(query):\n    \"\"\"Retrieve semantically relevant content from Qdrant.\"\"\"\n    embedded_query = openai_client.embeddings.create(\n        input=query,\n        model=EMBEDDING_MODEL,\n    ).data[0].embedding\n\n    results = qdrant.query_points(\n        collection_name=COLLECTION_NAME,\n        query=embedded_query,\n        limit=LIMIT,\n        score_threshold=SCORE_THRESHOLD,\n    ).points\n\n    if results:\n        return {\"response\": \"\\n\".join([point.payload[\"text\"] for point in results])}\n    else:\n        return {\"response\": \"No results found.\"}\n\n# Define agents\nqdrant_agent = Agent(\n    name=\"Qdrant Agent\",\n    instructions=\"Retrieve relevant info from a knowledge base stored in Qdrant.\",\n    functions=[query_qdrant],\n)\n\ndef transfer_to_qdrant():\n    return qdrant_agent\n\nmain_agent = Agent(\n    name=\"Main Agent\",\n    instructions=\"Handle user queries and delegate searches to Qdrant.\",\n    functions=[transfer_to_qdrant],\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Collection Aliases in Qdrant\nDESCRIPTION: This snippet demonstrates how to list all aliases for a specific collection, allowing you to see what alternative names are set up for a collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/collections.md#2025-04-21_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl 'http://localhost:6333/collections/my_collection/aliases'\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Scroll Query in C#\nDESCRIPTION: This snippet demonstrates how to create a Qdrant client connection and execute a scroll query with a keyword match filter. It connects to a local Qdrant instance and searches for records in a specified collection where the 'country.name' field matches 'Germany'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-fields/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(collectionName: \"{collection_name}\", filter: MatchKeyword(\"country.name\", \"Germany\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a FastAPI Service for Neural Search\nDESCRIPTION: Implements a FastAPI application that exposes the neural search functionality through a REST API endpoint. The service initializes the NeuralSearcher class and creates a GET endpoint for searching startups based on text queries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\n# The file where NeuralSearcher is stored\nfrom neural_searcher import NeuralSearcher\n\napp = FastAPI()\n\n# Create a neural searcher instance\nneural_searcher = NeuralSearcher(collection_name=\"startups\")\n\n\n@app.get(\"/api/search\")\ndef search_startup(q: str):\n    return {\"result\": neural_searcher.search(text=q)}\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```\n\n----------------------------------------\n\nTITLE: Deleting Points with Filter in Qdrant using Java Client\nDESCRIPTION: This snippet demonstrates how to delete points from a Qdrant collection asynchronously using a filter condition. It creates a filter that matches points where the 'color' field equals 'red' and passes this to the deleteAsync method. The operation is executed using get() to await completion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-points/by-filter/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.grpc.Points.Filter;\n\nclient\n    .deleteAsync(\n        \"{collection_name}\",\n        Filter.newBuilder().addMust(matchKeyword(\"color\", \"red\")).build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Setting up Qdrant and Voyage AI Clients in TypeScript\nDESCRIPTION: Initializes Qdrant client and sets up variables for Voyage AI API. Requires Qdrant JS client and Voyage AI API key. Prepares headers and sample texts for embedding.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/voyage.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {QdrantClient} from '@qdrant/js-client-rest';\n\nconst VOYAGEAI_BASE_URL = \"https://api.voyageai.com/v1/embeddings\"\nconst VOYAGEAI_API_KEY = \"<YOUR_VOYAGEAI_API_KEY>\"\n\nconst client = new QdrantClient({ url: 'http://localhost:6333' });\n\nconst headers = {\n    \"Authorization\": \"Bearer \" + VOYAGEAI_API_KEY,\n    \"Content-Type\": \"application/json\"\n}\n\nconst texts = [\n    \"Qdrant is the best vector search engine!\",\n    \"Loved by Enterprises and everyone building for low latency, high performance, and scale.\",\n]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Collection Alias with Qdrant Python Client\nDESCRIPTION: This snippet demonstrates how to delete a collection alias named 'production_collection' using the Qdrant Python client. It uses the update_collection_aliases method with a DeleteAliasOperation that contains a DeleteAlias object specifying the alias name to be removed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/delete/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.update_collection_aliases(\n    change_aliases_operations=[\n        models.DeleteAliasOperation(\n            delete_alias=models.DeleteAlias(alias_name=\"production_collection\")\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Batch Vector Search with Qdrant Client in TypeScript\nDESCRIPTION: Initializes a Qdrant client and performs batch vector similarity searches with filters. Sets up multiple search queries with different vector embeddings, applies a city filter, and limits results to 3 items per search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/batch-search/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nconst filter = {\n    must: [\n        {\n            key: \"city\",\n            match: {\n                value: \"London\",\n            },\n        },\n    ],\n};\n\nconst searches = [\n    {\n        query: [0.2, 0.1, 0.9, 0.7],\n        filter,\n        limit: 3,\n    },\n    {\n        query: [0.5, 0.3, 0.2, 0.3],\n        filter,\n        limit: 3,\n    },\n];\n\nclient.queryBatch(\"{collection_name}\", {\n    searches,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cheshire Cat Environment Variables\nDESCRIPTION: This snippet shows the environment variable configuration for Cheshire Cat, including the core host and port settings, as well as optional Qdrant server settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/cheshire-cat.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Decide host and port for your Cat. Default will be localhost:1865\nCORE_HOST=localhost\nCORE_PORT=1865\n\n# Qdrant server\n# QDRANT_HOST=localhost\n# QDRANT_PORT=6333\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Cluster Configuration - YAML\nDESCRIPTION: This YAML snippet defines the configuration for creating a Qdrant cluster with GPU support in Kubernetes. It specifies the cluster's metadata, specifications including resources, and GPU configurations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/qdrant-cluster-management.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: qdrant.io/v1\nkind: QdrantCluster\nmetadata:\n  name: qdrant-a7d8d973-0cc5-42de-8d7b-c29d14d24840\n  labels:\n    cluster-id: \"a7d8d973-0cc5-42de-8d7b-c29d14d24840\"\n    customer-id: \"acme-industries\"\nspec:\n  id: \"a7d8d973-0cc5-42de-8d7b-c29d14d24840\"\n  version: \"v1.13.4\"\n  size: 1\n  resources:\n    cpu: 2\n    memory: \"8Gi\"\n    storage: \"40Gi\"\n  gpu:\n    gpuType: \"nvidia\"\n```\n\n----------------------------------------\n\nTITLE: Searching with Disabled Rescoring in Qdrant\nDESCRIPTION: This snippet shows how to perform a search with rescoring disabled. Disabling rescoring can improve search speed when original vectors are stored on slow storage, at the cost of potentially lower search quality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/quantization.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vector\": [0.2, 0.1, 0.9, 0.7],\n  \"top\": 10,\n  \"with_vectors\": true,\n  \"quantization\": {\n    \"ignore\": false,\n    \"rescore\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling Filtered Data in Qdrant using Java\nDESCRIPTION: Demonstrates how to perform a scroll operation on a Qdrant collection with keyword matching filters. The query filters for documents matching either 'London' as city or 'red' as color using OR condition (should). Uses async client API with builder pattern.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-should-filter/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\nimport java.util.List;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addAllShould(\n                        List.of(matchKeyword(\"city\", \"London\"), matchKeyword(\"color\", \"red\")))\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Upserting a Single Vector in Qdrant\nDESCRIPTION: This code shows how to upsert (insert or update) a single vector in a Qdrant collection. It specifies the collection name, point ID, vector, and payload for the upsert operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-a-vector-database.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n    collection_name='product_collection',\n    points=[PointStruct(id=product_id, vector=new_vector, payload=new_payload)]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection with Sparse Vectors in C#\nDESCRIPTION: This code initializes a Qdrant client connected to localhost on port 6334. It then creates a new collection with a specified name and configures sparse vectors for text data using IDF (Inverse Document Frequency) modifier.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector-idf/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  sparseVectorsConfig: (\"text\", new SparseVectorParams {\n    Modifier = Modifier.Idf,\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Upserting Points into Qdrant Collection\nDESCRIPTION: Code that adds (upserts) the previously created points with Gemini embeddings into the Qdrant collection for indexing and retrieval.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/gemini.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(collection_name, points)\n```\n\n----------------------------------------\n\nTITLE: Performing Multilingual Search with Python\nDESCRIPTION: Executes a search using an Italian query on the Qdrant collection and retrieves the relevant image, showcasing the multilingual capabilities of the system.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/multimodal-search.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n```python\nImage.open(client.query_points(\n    collection_name=COLLECTION_NAME,\n    query=model.get_query_embedding(\"Avventure sulle colline innevate\"),\n    using=\"image\",\n    with_payload=[\"image\"],\n    limit=1\n).points[0].payload['image'])\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Role-Based Access Control\nDESCRIPTION: Implements role-based access control for document retrieval using Qdrant's filtering capabilities.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-contract-management-stackit-aleph-alpha.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nuser_roles = [\"stackit\", \"aleph-alpha\"]\n\nqdrant_retriever = qdrant.as_retriever(\n    search_kwargs={\n        \"filter\": models.Filter(\n            must=[\n                models.FieldCondition(\n                    key=\"metadata.roles\",\n                    match=models.MatchAny(any=user_roles)\n                )\n            ]\n        )\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Scrolling Filtered Results in Qdrant using Python\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client to scroll through filtered results in a specified collection. It uses a filter condition to select only records with specific IDs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-has-id-filter/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must=[\n            models.HasIdCondition(has_id=[1, 3, 5, 7, 9, 11]),\n        ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Document and Results Models\nDESCRIPTION: Defines Pydantic models for document structure and search results that conform to Cohere connector requirements.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/cohere-rag-connector.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nclass Document(BaseModel):\n    title: str\n    text: str\n\nclass SearchResults(BaseModel):\n    results: List[Document]\n```\n\n----------------------------------------\n\nTITLE: Creating Geospatial Condition with Qdrant Client in Java\nDESCRIPTION: This code snippet demonstrates how to create a geospatial condition using the Qdrant Java client. It utilizes the geoPolygon function from Qdrant's ConditionFactory, along with GeoLineString and GeoPoint classes, to define a polygon based on geographical coordinates. The polygon is specified by a list of geographic points, allowing for complex location-based queries. The snippet requires the Qdrant Java client library as a dependency.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-poligon/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.geoPolygon;\n\nimport io.qdrant.client.grpc.Points.GeoLineString;\nimport io.qdrant.client.grpc.Points.GeoPoint;\n\ngeoPolygon(\n    \"location\",\n    GeoLineString.newBuilder()\n        .addAllPoints(\n            List.of(\n                GeoPoint.newBuilder().setLon(-70.0).setLat(-70.0).build(),\n                GeoPoint.newBuilder().setLon(60.0).setLat(-70.0).build(),\n                GeoPoint.newBuilder().setLon(60.0).setLat(60.0).build(),\n                GeoPoint.newBuilder().setLon(-70.0).setLat(60.0).build(),\n                GeoPoint.newBuilder().setLon(-70.0).setLat(-70.0).build()))\n        .build(),\n    List.of(\n        GeoLineString.newBuilder()\n            .addAllPoints(\n                List.of(\n                    GeoPoint.newBuilder().setLon(-65.0).setLat(-65.0).build(),\n                    GeoPoint.newBuilder().setLon(0.0).setLat(-65.0).build(),\n                    GeoPoint.newBuilder().setLon(0.0).setLat(0.0).build(),\n                    GeoPoint.newBuilder().setLon(-65.0).setLat(0.0).build(),\n                    GeoPoint.newBuilder().setLon(-65.0).setLat(-65.0).build()))\n            .build()));\n```\n\n----------------------------------------\n\nTITLE: Creating a Full Storage Snapshot in Qdrant\nDESCRIPTION: REST API call to create a snapshot of the entire storage, including all collections and aliases. This is suitable only for single-node deployments.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/snapshots.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'http://{qdrant-url}:6333/snapshots'\n    -H 'api-key: ********'\n```\n\n----------------------------------------\n\nTITLE: Installing Dynamiq Framework\nDESCRIPTION: Command to install the Dynamiq library using pip package manager.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/dynamiq.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install dynamiq\n```\n\n----------------------------------------\n\nTITLE: Serving Trained Model for Answer Retrieval in Quaterion Using Python\nDESCRIPTION: This code snippet loads a pre-trained model, encodes questions and answers using `SimilarityModel`, and retrieves the closest answers based on cosine distance. The code showcases how to handle encoding and distance calculations using the Quaterion framework, specifically the `quaterion_models` library. Dependencies include `torch`, `quaterion_models.model`, and `quaterion.distances`. Inputs include a dataset of answers and a list of questions, and outputs are printed question-answer pairs matched by similarity.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/faq-question-answering.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nimport os\nimport json\n\nimport torch\nfrom quaterion_models.model import SimilarityModel\nfrom quaterion.distances import Distance\n\nfrom faq.config import DATA_DIR, ROOT_DIR\n\n\nif __name__ == \"__main__\":\n    device = \"cuda:0\" if torch.cuda.is_available() else \"cpu\"\n    model = SimilarityModel.load(os.path.join(ROOT_DIR, \"servable\"))\n    model.to(device)\n    dataset_path = os.path.join(DATA_DIR, \"val_cloud_faq_dataset.jsonl\")\n\n    with open(dataset_path) as fd:\n        answers = [json.loads(json_line)[\"answer\"] for json_line in fd]\n    \n    # everything is ready, let's encode our answers\n    answer_embeddings = model.encode(answers, to_numpy=False)\n        \n    # Some prepared questions and answers to ensure that our model works as intended\n    questions = [\n        \"what is the pricing of aws lambda functions powered by aws graviton2 processors?\",\n        \"can i run a cluster or job for a long time?\",\n        \"what is the dell open manage system administrator suite (omsa)?\",\n        \"what are the differences between the event streams standard and event streams enterprise plans?\",\n    ]\n    ground_truth_answers = [\n        \"aws lambda functions powered by aws graviton2 processors are 20% cheaper compared to x86-based lambda functions\",\n        \"yes, you can run a cluster for as long as is required\",\n        \"omsa enables you to perform certain hardware configuration tasks and to monitor the hardware directly via the operating system\",\n        \"to find out more information about the different event streams plans, see choosing your plan\",\n    ]\n    \n    # encode our questions and find the closest to them answer embeddings\n    question_embeddings = model.encode(questions, to_numpy=False)\n    distance = Distance.get_by_name(Distance.COSINE)\n    question_answers_distances = distance.distance_matrix(\n        question_embeddings, answer_embeddings\n    )\n    answers_indices = question_answers_distances.min(dim=1)[1]\n    for q_ind, a_ind in enumerate(answers_indices):\n        print(\"Q:\", questions[q_ind])\n        print(\"A:\", answers[a_ind], end=\"\\n\\n\")\n        assert (\n            answers[a_ind] == ground_truth_answers[q_ind]\n        ), f\"<{answers[a_ind]}> != <{ground_truth_answers[q_ind]}>\"\n\n```\n\n----------------------------------------\n\nTITLE: Hybrid Vector Search Configuration\nDESCRIPTION: Sets up hybrid search combining both dense and sparse vectors with score fusion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langchain.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_qdrant import FastEmbedSparse, RetrievalMode\n\nsparse_embeddings = FastEmbedSparse(model_name=\"Qdrant/bm25\")\n\nqdrant = QdrantVectorStore.from_documents(\n    docs,\n    embedding=embeddings,\n    sparse_embedding=sparse_embeddings,\n    location=\":memory:\",\n    collection_name=\"my_documents\",\n    retrieval_mode=RetrievalMode.HYBRID,\n)\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\nfound_docs = qdrant.similarity_search(query)\n```\n\n----------------------------------------\n\nTITLE: Processing and Embedding Video Content\nDESCRIPTION: Complete workflow for processing a video into chunks, generating embeddings for each chunk, and storing them in Qdrant. Each chunk is stored with temporal metadata including start and end times.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/mixpeek.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom mixpeek import Mixpeek\nfrom qdrant_client import QdrantClient, models\n\nmixpeek = Mixpeek('your_api_key_here')\nclient = QdrantClient(\"localhost\", port=6333)\n\nvideo_url = \"https://mixpeek-public-demo.s3.us-east-2.amazonaws.com/starter/jurassic_park_trailer.mp4\"\n\n# Process video chunks\nprocessed_chunks = mixpeek.tools.video.process(\n    video_source=video_url,\n    chunk_interval=1,  # 1 second intervals\n    resolution=[720, 1280]\n)\n\n# Embed each chunk and insert into Qdrant\nfor index, chunk in enumerate(processed_chunks):\n    print(f\"Processing video chunk: {index}\")\n\n    embedding = mixpeek.embed.video(\n        model_id=\"vuse-generic-v1\",\n        input=chunk['base64_chunk'],\n        input_type=\"base64\"\n    )['embedding']\n\n    # Insert into Qdrant\n    client.upsert(\n        collection_name=\"video_chunks\",\n        points=[models.PointStruct(\n            id=index,\n            vector=embedding,\n            payload={\n                \"start_time\": chunk[\"start_time\"],\n                \"end_time\": chunk[\"end_time\"]\n            }\n        )]\n    )\n\n    print(f\"  Embedding preview: {embedding[:5] + ['...'] + embedding[-5:]}\")\n\nprint(f\"Processed and inserted {len(processed_chunks)} chunks\")\n```\n\n----------------------------------------\n\nTITLE: Creating RouteLayer with Qdrant\nDESCRIPTION: Initializes RouteLayer with an encoder, routes, and Qdrant index\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/semantic-router.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.layer import RouteLayer\n\nRouteLayer(encoder=some_encoder, routes=some_routes, index=qdrant_index)\n```\n\n----------------------------------------\n\nTITLE: Creating Collection in Qdrant with Python\nDESCRIPTION: This snippet initializes a Qdrant client to connect to a local Qdrant instance and creates a collection with specific vector parameters such as size and distance type. It requires the 'qdrant_client' library to be installed for proper functionality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/simple/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=100, distance=models.Distance.COSINE),\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Array Element Filtering\nDESCRIPTION: Examples of filtering array elements using simple conditions across multiple languages\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-filtering.md#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/dinosaurs/points/scroll\n{\n    \"filter\": {\n        \"must\": [\n            {\n                \"key\": \"diet[].food\",\n                  \"match\": {\n                    \"value\": \"meat\"\n                }\n            },\n            {\n                \"key\": \"diet[].likes\",\n                  \"match\": {\n                    \"value\": true\n                }\n            }\n        ]\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nclient.scroll(\n    collection_name=\"dinosaurs\",\n    scroll_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"diet[].food\", match=models.MatchValue(value=\"meat\")\n            ),\n            models.FieldCondition(\n                key=\"diet[].likes\", match=models.MatchValue(value=True)\n            ),\n        ],\n    ),\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"dinosaurs\", {\n  filter: {\n    must: [\n      {\n        key: \"diet[].food\",\n        match: { value: \"meat\" },\n      },\n      {\n        key: \"diet[].likes\",\n        match: { value: true },\n      },\n    ],\n  },\n});\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"dinosaurs\").filter(Filter::must([\n            Condition::matches(\"diet[].food\", \"meat\".to_string()),\n            Condition::matches(\"diet[].likes\", true),\n        ])),\n    )\n    .await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.match;\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"dinosaurs\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addAllMust(\n                        List.of(matchKeyword(\"diet[].food\", \"meat\"), match(\"diet[].likes\", true)))\n                    .build())\n            .build())\n    .get();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(\n\tcollectionName: \"dinosaurs\",\n\tfilter: MatchKeyword(\"diet[].food\", \"meat\") & Match(\"diet[].likes\", true)\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing QdrantDocumentWriter Node\nDESCRIPTION: Example of implementing a QdrantDocumentWriter node for storing documents in the Qdrant vector database. The node can create new indices if they don't exist and handles document storage operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/dynamiq.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dynamiq.nodes.writers import QdrantDocumentWriter\n\n# Define a writer node to store documents in Qdrant\nwriter_node = QdrantDocumentWriter(\n    index_name=\"default\",\n    create_if_not_exist=True\n)\n\n# Create a workflow and add the writer node\nwf = Workflow()\nwf.flow.add_nodes(writer_node)\n\n# Execute writing\nresult = wf.run(input_data={\n  'documents': embedded_documents  # Provide embedded documents for storage\n})\n```\n\n----------------------------------------\n\nTITLE: Upserting Point with Named Vectors using Qdrant Java Client\nDESCRIPTION: This code demonstrates how to upsert a point with multiple named vectors into a Qdrant collection using the Java client. It creates a PointStruct with an ID and three named vectors: 'image' (dense), 'text' (dense), and 'text-sparse' (sparse). The upsert operation is performed asynchronously.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/named-vectors/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\nimport java.util.Map;\n\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.VectorFactory.vector;\nimport static io.qdrant.client.VectorsFactory.namedVectors;\n\nimport io.qdrant.client.grpc.Points.PointStruct;\n\nclient\n    .upsertAsync(\n        \"{collection_name}\",\n        List.of(\n            PointStruct.newBuilder()\n                .setId(id(1))\n                .setVectors(\n                    namedVectors(\n                        Map.of(\n                            \"image\",\n                            vector(List.of(0.9f, 0.1f, 0.1f, 0.2f)),\n                            \"text\",\n                            vector(List.of(0.4f, 0.7f, 0.1f, 0.8f, 0.1f)),\n                            \"text-sparse\",\n                            vector(List.of(0.1f, 0.2f, 0.3f, 0.4f), List.of(1, 3, 5, 7)))))\n                .build()))\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Creating Collection Alias with cURL in Qdrant\nDESCRIPTION: Makes a POST request to create an alias 'production_collection' for an existing collection 'example_collection' in Qdrant. The request is sent to the /collections/aliases endpoint with a JSON payload specifying the alias creation action.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/create/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:6333/collections/aliases \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"actions\": [\n        {\n            \"create_alias\": {\n                \"collection_name\": \"example_collection\",\n                \"alias_name\": \"production_collection\"\n            }\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Vector Data in Qdrant using Rust\nDESCRIPTION: This code snippet demonstrates how to upsert multiple points with vector data into a Qdrant collection. It creates two points with 'image' and 'text' vector fields and uses the UpsertPointsBuilder to insert them into the specified collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-multiple-vectors/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse std::collections::HashMap;\n\nuse qdrant_client::qdrant::{PointStruct, UpsertPointsBuilder};\nuse qdrant_client::Payload;\n\nclient\n    .upsert_points(\n        UpsertPointsBuilder::new(\n            \"{collection_name}\",\n            vec![\n                PointStruct::new(\n                    1,\n                    HashMap::from([\n                        (\"image\".to_string(), vec![0.9, 0.1, 0.1, 0.2]),\n                        (\n                            \"text\".to_string(),\n                            vec![0.4, 0.7, 0.1, 0.8, 0.1, 0.1, 0.9, 0.2],\n                        ),\n                    ]),\n                    Payload::default(),\n                ),\n                PointStruct::new(\n                    2,\n                    HashMap::from([\n                        (\"image\".to_string(), vec![0.2, 0.1, 0.3, 0.9]),\n                        (\n                            \"text\".to_string(),\n                            vec![0.5, 0.2, 0.7, 0.4, 0.7, 0.2, 0.3, 0.9],\n                        ),\n                    ]),\n                    Payload::default(),\n                ),\n            ],\n        )\n        .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Upserting Points into Qdrant Collection in Go\nDESCRIPTION: This snippet demonstrates how to upsert points into a Qdrant collection using the Go client. It constructs a `qdrant.UpsertPoints` struct with the collection name and a list of points to be inserted or updated. Each point has an ID, vector representation, and an optional payload (metadata).\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/int-one-point-simple/go.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nclient.Upsert(context.Background(), &qdrant.UpsertPoints{\n\tCollectionName: \"{collection_name}\",\n\tPoints: []*qdrant.PointStruct{\n\t\t{\n\t\t\tId:      qdrant.NewIDNum(1),\n\t\t\tVectors: qdrant.NewVectors(0.05, 0.61, 0.76, 0.74),\n\t\t\tPayload: qdrant.NewValueMap(map[string]any{\"color\": \"Red\"}),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Asynchronously in Java\nDESCRIPTION: This snippet demonstrates how to initialize a Qdrant client and perform an asynchronous query to retrieve similar items from a collection using both small and dense vectors. It involves setting up prefetch queries for efficient data retrieval.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-multistage/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PrefetchQuery;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .queryAsync(\n        QueryPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .addPrefetch(\n                PrefetchQuery.newBuilder()\n                    .addPrefetch(\n                        PrefetchQuery.newBuilder()\n                            .setQuery(nearest(1, 23, 45, 67))\t// <------------- small byte vector\n                            .setUsing(\"mrl_byte\")\n                            .setLimit(1000)\n                            .build())\n                    .setQuery(nearest(0.01f, 0.45f, 0.67f)) // <-- dense vector\n                    .setUsing(\"full\")\n                    .setLimit(100)\n                    .build())\n            .setQuery(\n                nearest(\n                    new float[][] {\n                      {0.1f, 0.2f},\t// <─┐\n                      {0.2f, 0.1f},\t// < ├─ multi-vector\n                      {0.8f, 0.9f}\t// < ┘\n                    }))\n            .setUsing(\"colbert\")\n            .setLimit(10)\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Enabling Binary Quantization in Qdrant (Python)\nDESCRIPTION: This code snippet demonstrates how to create a collection with binary quantization enabled in Qdrant. It sets up vector parameters and configures binary quantization for efficient storage and faster queries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-resource-optimization.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n   collection_name=\"{collection_name}\",\n   vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),\n   quantization_config=models.BinaryQuantization(\n       binary=models.BinaryQuantizationConfig(\n           always_ram=True,\n       ),\n   ),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Geo-Location Condition in Python\nDESCRIPTION: This snippet defines a geolocation-based field condition using the \"models\" library. It specifies a location with longitude and latitude, and defines a search radius around that location. This setup suggests dependencies on a geospatial library capable of handling models like FieldCondition, GeoRadius, and GeoPoint. The key parameter indicates the field to be evaluated, while geo_radius defines the criteria involving a center point and radius. Outputs include a configured FieldCondition object, useful for filtering queries based on geographic data. No direct inputs are visible, as values are hard-coded.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-radius/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodels.FieldCondition(\n    key=\"location\",\n    geo_radius=models.GeoRadius(\n        center=models.GeoPoint(\n            lon=13.403683,\n            lat=52.520711,\n        ),\n        radius=1000.0,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Payload for Multiple Points in Qdrant Collection\nDESCRIPTION: Asynchronously updates payload properties for specified point IDs in a Qdrant vector database collection. Allows setting multiple properties with different values across multiple point identifiers.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/set-payload/by-point-id/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclient\n    .setPayloadAsync(\n        \"{collection_name}\",\n        Map.of(\"property1\", value(\"string\"), \"property2\", value(\"string\")),\n        List.of(id(0), id(3), id(10)),\n        true,\n        null,\n        null)\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Go Qdrant Query Implementation\nDESCRIPTION: Go client implementation for querying Qdrant with majority consistency, using the official client library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_35\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t\t},\n\t},\n\tParams: &qdrant.SearchParams{\n\t\tHnswEf: qdrant.PtrOf(uint64(128)),\n\t},\n\tLimit:           qdrant.PtrOf(uint64(3)),\n\tReadConsistency: qdrant.NewReadConsistencyType(qdrant.ReadConsistencyType_Majority),\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database with Context Input in Rust\nDESCRIPTION: This snippet demonstrates how to connect to a Qdrant server, construct a context-based query, and execute it against a collection. The query uses ContextInputBuilder to add specific context pairs (100,718 and 200,300) that help with semantic search or recommendations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/context-basic/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{ContextInputBuilder, QueryPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\").query(\n            ContextInputBuilder::default()\n                .add_pair(100, 718)\n                .add_pair(200, 300)\n                .build(),\n        ),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Inserting Multi-Vector Points via Qdrant API\nDESCRIPTION: This snippet demonstrates how to insert points with multiple named vectors ('image' and 'text') into a Qdrant collection using a PUT API request. Each point has an id and associated vector data. The idempotent nature of Qdrant ensures data consistency even with repeated uploads.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-multiple-vectors/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\nPUT /collections/{collection_name}/points\n{\n  \"points\": [\n    {\n      \"id\": 1,\n      \"vector\": {\n        \"image\": [0.05, 0.61, 0.76, 0.74],\n        \"text\": [0.19, 0.81, 0.75, 0.11]\n      }\n    },\n    {\n      \"id\": 2,\n      \"vector\": {\n        \"image\": [0.35, 0.71, 0.56, 0.94],\n        \"text\": [0.39, 0.21, 0.45, 0.81]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Qdrant Client with OpenTelemetry\nDESCRIPTION: This Python snippet instantiates and applies the QdrantInstrumentor from OpenTelemetry. Ensure the package 'opentelemetry-instrumentation-qdrant' is installed for this to work properly.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/observability/openllmetry.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.qdrant import QdrantInstrumentor\n\nQdrantInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Vector Store Bean\nDESCRIPTION: Java configuration for creating a VectorStore bean using QdrantVectorStore implementation with the configured settings and embedding client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/spring-ai.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic VectorStore vectorStore(QdrantVectorStoreConfig config, EmbeddingClient embeddingClient) {\n    return new QdrantVectorStore(config, embeddingClient);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TrainableModel Subclass with Encoder Configuration\nDESCRIPTION: This snippet defines a Model class that inherits from TrainableModel and configures the encoder using a pretrained ResNet152 model.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/cars-recognition.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Model(TrainableModel):\n    def __init__(self, lr: float, mining: str):\n        self._lr = lr\n        self._mining = mining\n        super().__init__()\n\n    def configure_encoders(self) -> Union[Encoder, Dict[str, Encoder]]:\n        pre_trained_encoder = torchvision.models.resnet152(pretrained=True)\n        pre_trained_encoder.fc = nn.Identity()\n        return CarsEncoder(pre_trained_encoder)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection Alias\nDESCRIPTION: Sets up an alias named 'production_collection' that points to a collection called 'example_collection'. Aliases are useful for managing production deployments and making collection updates without downtime.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/create/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nproduction_collection -> example_collection\n```\n\n----------------------------------------\n\nTITLE: Python Client with API Key Authentication\nDESCRIPTION: Example of initializing the Qdrant Python client with API key authentication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(\n    url=\"https://localhost:6333\",\n    api_key=\"your_secret_api_key_here\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Field Condition in Python using Qdrant\nDESCRIPTION: This snippet demonstrates how to create a field condition for matching a specific UUID using the Qdrant library. It utilizes the FieldCondition model with key and match parameters to identify the desired value. Required dependencies include the Qdrant SDK.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-uuid/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodels.FieldCondition(\n    key=\"uuid\",\n    match=models.MatchValue(value=\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to On-Premise Qdrant Server\nDESCRIPTION: Establishes connection to a self-hosted Qdrant server instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langchain.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nurl = \"<---qdrant url here --->\"\nqdrant = QdrantVectorStore.from_documents(\n    docs,\n    embeddings,\n    url,\n    prefer_grpc=True,\n    collection_name=\"my_documents\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Qdrant Collection for Canopy\nDESCRIPTION: Uses the create_canopy_collection method to set up a new Qdrant collection specifically configured for use with Canopy.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/canopy.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nkb.create_canopy_collection()\n```\n\n----------------------------------------\n\nTITLE: Adding Vectors in Go\nDESCRIPTION: This snippet shows how to add multiple vectors with payload information into a Qdrant collection using Go.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nimport (\\n\\t\"context\"\\n\\t\"fmt\"\\n\\t\"github.com/qdrant/go-client/qdrant\"\\n)\\n\\noperationInfo, err := client.Upsert(context.Background(), &qdrant.UpsertPoints{\\n\\tCollectionName: \"test_collection\",\\n\\tPoints: []*qdrant.PointStruct{\\n\\t\\t{\\n\\t\\t\\tId: qdrant.NewIDNum(1),\\n\\t\\t\\tVectors: qdrant.NewVectors(0.05, 0.61, 0.76, 0.74),\\n\\t\\t\\tPayload: qdrant.NewValueMap(map[string]any{\"city\": \"Berlin\"}),\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tId: qdrant.NewIDNum(2),\\n\\t\\t\\tVectors: qdrant.NewVectors(0.19, 0.81, 0.75, 0.11),\\n\\t\\t\\tPayload: qdrant.NewValueMap(map[string]any{\"city\": \"London\"}),\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tId: qdrant.NewIDNum(3),\\n\\t\\t\\tVectors: qdrant.NewVectors(0.36, 0.55, 0.47, 0.94),\\n\\t\\t\\tPayload: qdrant.NewValueMap(map[string]any{\"city\": \"Moscow\"}),\\n\\t\\t},\\n        // Truncated\\n\\t},\\n})\\nif err != nil {\\n\\tpanic(err)\\n}\\nfmt.Println(operationInfo)\n```\n\n----------------------------------------\n\nTITLE: Updating Vectors in Qdrant with Java\nDESCRIPTION: This code snippet demonstrates how to update vectors associated with specific point IDs in a Qdrant collection using the Java client. It utilizes `PointVectors` to specify the ID and the vectors to be updated, using named vectors with `namedVectors`. The update is performed asynchronously using `updateVectorsAsync` and `get()` to ensure the operation completes.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-vectors/simple/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\nimport java.util.Map;\n\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.VectorFactory.vector;\nimport static io.qdrant.client.VectorsFactory.namedVectors;\n\nclient\n    .updateVectorsAsync(\n        \"{collection_name}\",\n        List.of(\n            PointVectors.newBuilder()\n                .setId(id(1))\n                .setVectors(namedVectors(Map.of(\"image\", vector(List.of(0.1f, 0.2f, 0.3f, 0.4f)))))\n                .build(),\n            PointVectors.newBuilder()\n                .setId(id(2))\n                .setVectors(\n                    namedVectors(\n                        Map.of(\n                            \"text\", vector(List.of(0.9f, 0.8f, 0.7f, 0.6f, 0.5f, 0.4f, 0.3f, 0.2f)))))\n                .build()))\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Prefetching and Fusion in Rust\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant Rust client to perform a query that prefetches results based on both sparse and dense vector similarity, and then fuses those results using Reciprocal Rank Fusion (RRF). It requires the `qdrant_client` crate and a running Qdrant instance at the specified URL. The prefetching allows for efficient retrieval of related points based on different similarity metrics.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-basic/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{Fusion, PrefetchQueryBuilder, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .query(Query::new_nearest([(1, 0.22), (42, 0.8)].as_slice()))\n            .using(\"sparse\")\n            .limit(20u64)\n        )\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .query(Query::new_nearest(vec![0.01, 0.45, 0.67]))\n            .using(\"dense\")\n            .limit(20u64)\n        )\n        .query(Query::new_fusion(Fusion::Rrf))\n).await?;\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection with Dense and Sparse Vector Configurations in Java\nDESCRIPTION: This code initializes a Qdrant client and creates a new collection with specific vector configurations. It sets up a dense vector field with 128 dimensions, Cosine distance metric, and Float16 data type, along with a sparse vector configuration for a 'text' field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-float16-sparse-and-dense/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Datatype;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.SparseIndexConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorParams;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n  .createCollectionAsync(\n    CreateCollection.newBuilder()\n    .setCollectionName(\"{collection_name}\")\n    .setVectorsConfig(VectorsConfig.newBuilder()\n      .setParams(VectorParams.newBuilder()\n        .setSize(128)\n        .setDistance(Distance.Cosine)\n        .setDatatype(Datatype.Float16)\n        .build())\n      .build())\n    .setSparseVectorsConfig(\n      SparseVectorConfig.newBuilder()\n      .putMap(\"text\", SparseVectorParams.newBuilder()\n        .setIndex(SparseIndexConfig.newBuilder()\n          .setDatatype(Datatype.Float16)\n          .build())\n        .build()))\n    .build())\n  .get();\n```\n\n----------------------------------------\n\nTITLE: Defining Geo Polygon Filter in TypeScript\nDESCRIPTION: This code defines a geo polygon filter for Qdrant using TypeScript. It specifies the key, exterior boundary, and interior boundaries using longitude and latitude coordinates. The geo_polygon filter allows you to search for points within a defined polygon area, excluding points within specified interior polygons.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-poligon/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  key: \"location\",\n  geo_polygon: {\n    exterior: {\n      points: [\n        {\n          lon: -70.0,\n          lat: -70.0\n        },\n        {\n          lon: 60.0,\n          lat: -70.0\n        },\n        {\n          lon: 60.0,\n          lat: 60.0\n        },\n        {\n          lon: -70.0,\n          lat: 60.0\n        },\n        {\n          lon: -70.0,\n          lat: -70.0\n        }\n      ]\n    },\n    interiors: [\n      {\n        points: [\n          {\n            lon: -65.0,\n            lat: -65.0\n          },\n          {\n            lon: 0,\n            lat: -65.0\n          },\n          {\n            lon: 0,\n            lat: 0\n          },\n          {\n            lon: -65.0,\n            lat: 0\n          },\n          {\n            lon: -65.0,\n            lat: -65.0\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the Question Answering Chain with Example Queries\nDESCRIPTION: Code demonstrating how to use the implemented QA chain with various test queries. This shows the practical application of the entire system for answering different types of questions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/langchain-integration.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n![](/articles_data/langchain-integration/code-answering.png)\n```\n\n----------------------------------------\n\nTITLE: Verifying Qdrant Collection Connection\nDESCRIPTION: Checks the connection to the Qdrant collection using the verify_index_connection method, ensuring the knowledge base is properly set up.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/canopy.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nkb.verify_index_connection()\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Scroll Operation in Java\nDESCRIPTION: This code initializes a Qdrant client and performs an asynchronous scroll operation on a collection with specific filters. It demonstrates how to set up the client, create a filter, and execute a scroll query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-multiple-nested/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.match;\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addAllMust(\n                        List.of(matchKeyword(\"diet[].food\", \"meat\"), match(\"diet[].likes\", true)))\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying with Qdrant Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Qdrant client, create a connection to a local Qdrant server, and execute a query with context-based filtering. The query includes multiple context filters with positive and negative vectors, and limits the results to 10 items.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/context-basic/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: {\n        context: [\n            {\n                positive: 100,\n                negative: 718,\n            },\n            {\n                positive: 200,\n                negative: 300,\n            },\n        ]\n    },\n    limit: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages\nDESCRIPTION: Installs Sentence Transformer and other required packages using pip to process text data into vectors. Python version >=3.8 is required.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\npip install sentence-transformers numpy pandas tqdm\n```\n\n----------------------------------------\n\nTITLE: Qdrant Client Setup\nDESCRIPTION: Basic setup for connecting to Qdrant using the client library. Referenced as being straightforward with good type support, though exact code is not shown in the content.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/talk-with-youtube-without-paying-a-cent-francesco-saverio-zuppichini-vector-space-talks.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Client setup mentioned but not explicitly shown in the content\n```\n\n----------------------------------------\n\nTITLE: Deleting a Collection Alias in Qdrant using Java\nDESCRIPTION: This snippet demonstrates how to asynchronously delete an alias for a collection in Qdrant. The code uses the client's deleteAliasAsync method to remove the 'production_collection' alias and then waits for the operation to complete with the get() method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/delete/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclient.deleteAliasAsync(\"production_collection\").get();\n```\n\n----------------------------------------\n\nTITLE: Embedding Documents with Mistral\nDESCRIPTION: Uses Mistral's embedding API to convert text documents into vector embeddings with the mistral-embed model.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/mistral.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult = mistral_client.embeddings(\n    model=\"mistral-embed\",\n    input=texts,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Cluster Write Consistency Factor - HTTP\nDESCRIPTION: This HTTP request demonstrates how to configure the `write_consistency_factor` when creating a collection in a Qdrant cluster. The `write_consistency_factor` specifies the number of replicas required to acknowledge a write operation, helping manage write operations when network partitions occur. Necessary fields include `vectors`, `shard_number`, `replication_factor`, and `write_consistency_factor`. The output is the configuration of the collection in the cluster with updated consistency settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n        \"size\": 300,\n        \"distance\": \"Cosine\"\n    },\n    \"shard_number\": 6,\n    \"replication_factor\": 2,\n    \"write_consistency_factor\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Negative Feedback Search with Vector Negation in Python\nDESCRIPTION: Implements a search based on negative feedback by retrieving disliked items, calculating their mean vector, negating it, and using it for search to push disliked items away from results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/food-discovery-demo.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\n# Retrieve the disliked points based on their ids\ndisliked_points, _ = client.scroll(\n    settings.QDRANT_COLLECTION,\n    scroll_filter=models.Filter(\n        must=[\n            models.HasIdCondition(has_id=search_query.negative),\n        ]\n    ),\n    with_vectors=True,\n)\n\n# Calculate a mean vector of disliked points\ndisliked_vectors = np.array([point.vector for point in disliked_points])\nmean_vector = np.mean(disliked_vectors, axis=0)\nnegated_vector = -mean_vector\n\n# Search for nearest neighbors of the negated mean vector\nresponse = client.search_groups(\n    settings.QDRANT_COLLECTION,\n    query_vector=negated_vector.tolist(),\n    group_by=settings.GROUP_BY_FIELD,\n    limit=search_query.limit,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Listing Aliases in C#\nDESCRIPTION: This code initializes a Qdrant client connection to a local server on port 6334 and then asynchronously retrieves a list of aliases. It demonstrates the basic setup required to start interacting with a Qdrant database from a C# application.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/list-all/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ListAliasesAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring On-Disk Storage for Sparse Vectors\nDESCRIPTION: Configuration for enabling on-disk storage for sparse vectors and their corresponding index.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/indexing-optimization.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nPATCH /collections/your_collection\n{\n    \"sparse_vectors\": {\n        \"text\": {\n            \"on_disk\": true,\n            \"index\": {\n                \"on_disk\": true\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Payload Fields from Vectors in Qdrant Collection using Python\nDESCRIPTION: This code snippet demonstrates how to delete specific payload fields ('color' and 'price') from multiple vector points in a Qdrant collection. The method takes the collection name as a parameter, along with the keys to delete and the point IDs from which to remove the specified payload fields.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-payload/by-point-id/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.delete_payload(\n    collection_name=\"{collection_name}\",\n    keys=[\"color\", \"price\"],\n    points=[0, 3, 100],\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Points in Qdrant Collection using Async Java Client\nDESCRIPTION: This code snippet initializes a Qdrant client and performs an asynchronous query to fetch points from a specified collection. It constructs two queries: one for a prefetch with a small byte vector and another for the full vector, each with respective limits and configurations. The required dependencies include the Qdrant Java client library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PrefetchQuery;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .queryAsync(\n        QueryPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .addPrefetch(\n                PrefetchQuery.newBuilder()\n                    .setQuery(nearest(1, 23, 45, 67))\\t// <------------- small byte vector\n                    .setLimit(1000)\n                    .setUsing(\"mrl_byte\")\n                    .build())\n            .setQuery(nearest(0.01f, 0.299f, 0.45f, 0.67f))\\t// <-- full vector\n            .setUsing(\"full\")\n            .setLimit(10)\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Named Vectors in Qdrant using Rust\nDESCRIPTION: This code demonstrates how to upsert a point with multiple named vectors into a Qdrant collection. It uses the UpsertPointsBuilder to create a point with a unique ID and three different vectors: a dense 'text' vector, a dense 'image' vector, and a sparse 'text-sparse' vector. The operation is configured to wait for completion before returning.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/named-vectors/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::\n    NamedVectors, PointStruct, UpsertPointsBuilder, Vector,\n};\nuse qdrant_client::Payload;\n\nclient\n    .upsert_points(\n        UpsertPointsBuilder::new(\n            \"{collection_name}\",\n            vec![PointStruct::new(\n                1,\n                NamedVectors::default()\n                    .add_vector(\"text\", Vector::new_dense(vec![0.4, 0.7, 0.1, 0.8, 0.1]))\n                    .add_vector(\"image\", Vector::new_dense(vec![0.9, 0.1, 0.1, 0.2]))\n                    .add_vector(\n                        \"text-sparse\",\n                        Vector::new_sparse(vec![1, 3, 5, 7], vec![0.1, 0.2, 0.3, 0.4]),\n                    ),\n                Payload::default(),\n            )],\n        )\n        .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Executing a Query in Qdrant Client - TypeScript\nDESCRIPTION: This snippet imports the Qdrant client library, creates a client instance connected to a specified host and port, and performs a query on a given collection. It allows for filtering results based on specific criteria and setting parameters for the query execution, such as limit and distance metric configurations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/basic-with-filter-and-params/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: [0.2, 0.1, 0.9, 0.7],\n    filter: {\n        must: [\n            {\n                key: \"city\",\n                match: {\n                    value: \"London\",\n                },\n            },\n        ],\n    },\n    params: {\n        hnsw_ef: 128,\n        exact: false,\n    },\n    limit: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Field Index with Qdrant Client in Go\nDESCRIPTION: This Go code snippet demonstrates how to initialize a Qdrant client and create a field index. It requires the Qdrant Go client library and a running instance of Qdrant. The key parameters include the collection name, field name, and field type. The snippet sets up a field index on disk for efficient querying. Expected input includes a collection name and a field name. The operation assumes a running Qdrant instance on localhost.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/keyword-on-disk/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateFieldIndex(context.Background(), &qdrant.CreateFieldIndexCollection{\n\tCollectionName: \"{collection_name}\",\n\tFieldName:      \"name_of_the_field_to_index\",\n\tFieldType:      qdrant.FieldType_FieldTypeKeyword.Enum(),\n\tFieldIndexParams: qdrant.NewPayloadIndexParamsKeyword(\n\t\t&qdrant.KeywordIndexParams{\n\t\t\tOnDisk: qdrant.PtrOf(true),\n\t\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Scrolling Filtered Points in Qdrant Collection using Java\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client to scroll through points in a collection. It applies a filter to select points where the 'population' field of cities in a country is greater than or equal to 9.0.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-array/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.range;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.Range;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addShould(\n                        range(\n                            \"country.cities[].population\",\n                            Range.newBuilder().setGte(9.0).build()))\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Manual Shard Replica Management\nDESCRIPTION: HTTP endpoints for manually creating and dropping shard replicas in a collection. Used primarily in self-hosted Qdrant deployments where automatic replication is not available.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/cluster\n{\n    \"replicate_shard\": {\n        \"shard_id\": 0,\n        \"from_peer_id\": 381894127,\n        \"to_peer_id\": 467122995\n    }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/cluster\n{\n    \"drop_replica\": {\n        \"shard_id\": 0,\n        \"peer_id\": 381894127\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of query_deepseek Function in Python\nDESCRIPTION: This snippet demonstrates how to use the `query_deepseek` function to send a prompt to the DeepSeek service. It assumes the function is defined in the same script or properly imported from another module.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/rag-deepseek.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nquery_deepseek(prompt)\n```\n\n----------------------------------------\n\nTITLE: Testing Search Endpoint with cURL\nDESCRIPTION: Example cURL command to test the search endpoint with a sample query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/cohere-rag-connector.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X \"POST\" \\\n    -H \"Content-type: application/json\" \\\n    -d '{\"query\": \"Is there anything I have to do regarding the project infrastructure?\"}' \\\n    \"http://localhost:8000/search\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Database with TypeScript\nDESCRIPTION: Shows how to create a Qdrant client instance and perform a vector similarity search query with quantization settings. The example connects to a local Qdrant server and executes a search with a 4-dimensional vector query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/disable-quantization-rescoring/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: [0.2, 0.1, 0.9, 0.7],\n    params: {\n        quantization: {\n            rescore: false,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Executing AutoGen Agent Conversation\nDESCRIPTION: Demonstrates how to initiate and run a conversation between the assistant and RAG proxy agent\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/autogen.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Always reset the assistant before starting a new conversation.\nassistant.reset()\n\n# We use the ragproxyagent to generate a prompt to be sent to the assistant as the initial message.\n# The assistant receives it and generates a response. The response will be sent back to the ragproxyagent for processing.\n# The conversation continues until the termination condition is met.\n\nqa_problem = \"What is the .....?\"\nchat_results = ragproxyagent.initiate_chat(assistant, message=ragproxyagent.message_generator, problem=qa_problem)\n```\n\n----------------------------------------\n\nTITLE: Performing a Search in Python\nDESCRIPTION: This Python snippet outlines the procedure for searching a Qdrant collection using an embedding obtained from a query, demonstrating the search functionality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nquery = \"what is the extension of python document\"\n\nquery_embedding = get_embeddings(\n    project_id=PROJECT_ID, \n    embedding_model=EMBEDDING_MODEL, \n    documents=query\n)\n\nqdrant_client.search(collection_name=COLLECTION_NAME, query_vector=query_embedding[0])\n```\n\n----------------------------------------\n\nTITLE: Embedding Documents with Upstage API in TypeScript\nDESCRIPTION: Sends a POST request to the Upstage API to embed the sample texts using the 'solar-embedding-1-large-passage' model in TypeScript.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/upstage.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet body = {\n    \"input\": texts,\n    \"model\": \"solar-embedding-1-large-passage\",\n}\n\nlet response = await fetch(UPSTAGE_BASE_URL, {\n    method: \"POST\",\n    body: JSON.stringify(body),\n    headers\n});\n\nlet response_body = await response.json()\n```\n\n----------------------------------------\n\nTITLE: Converting Dataset to Spark DataFrame\nDESCRIPTION: Converts the downloaded dataset into a Spark DataFrame for distributed processing within the Databricks environment. This is critical for leveraging Spark's capabilities for large scale data processing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/databricks.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndataset.to_parquet(\"/dbfs/pq.pq\")\ndataset_df = spark.read.parquet(\"file:/dbfs/pq.pq\")\n```\n\n----------------------------------------\n\nTITLE: Random Sampling in Qdrant Query API\nDESCRIPTION: Demonstrates how to use the random sampling feature in Qdrant's Universal Query API. This example retrieves a random sample of 10 points from the collection, which can be useful for debugging, testing, or providing entry points for exploration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/search.md#2025-04-21_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/search\n{\n  \"sample_size\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Aliases with curl in Qdrant\nDESCRIPTION: This command sends a GET request to the Qdrant API endpoint to retrieve all aliases associated with a specific collection. The {collection_name} placeholder should be replaced with the actual name of the collection you want to inspect.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/list/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET http://localhost:6333/collections/{collection_name}/aliases\n```\n\n----------------------------------------\n\nTITLE: Updating a Collection with Strict Mode in Python\nDESCRIPTION: Python code for updating an existing Qdrant collection to enable strict mode with unindexed filtering retrieve restriction using the Qdrant client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.update_collection(\n    collection_name=\"{collection_name}\",\n    strict_mode_config=models.StrictModeConfig(enabled=True, unindexed_filtering_retrieve=True),\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Qdrant and Upserting Data in Java\nDESCRIPTION: This code snippet illustrates how to create a Qdrant client connection and upsert a point into a collection. It includes setting up the client, creating a point with a vector and payload, and performing an asynchronous upsert operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/int-one-point-simple/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\nimport java.util.Map;\n\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.ValueFactory.value;\nimport static io.qdrant.client.VectorsFactory.vectors;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PointStruct;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .upsertAsync(\n        \"{collection_name}\",\n        List.of(\n            PointStruct.newBuilder()\n                .setId(id(1))\n                .setVectors(vectors(0.05f, 0.61f, 0.76f, 0.74f))\n                .putAllPayload(Map.of(\"color\", value(\"Red\")))\n                .build()))\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Converting Embeddings to Qdrant Points\nDESCRIPTION: Transforms Nvidia embedding responses into Qdrant point structures, mapping each text to a unique vector embedding for indexing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/nvidia.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import PointStruct\n\npoints = [\n    PointStruct(\n        id=idx,\n        vector=data[\"embedding\"],\n        payload={\"text\": text},\n    )\n    for idx, (data, text) in enumerate(zip(response_body[\"data\"], texts))\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet points = response_body.data.map((data, i) => {\n    return {\n        id: i,\n        vector: data.embedding,\n        payload: {\n            text: texts[i]\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing FastAPI Search Endpoint\nDESCRIPTION: Creates a FastAPI endpoint that handles search requests by integrating Qdrant and Cohere services using dependency injection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/cohere-rag-connector.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Depends\nfrom typing import Annotated\n\napp = FastAPI()\n\ndef client() -> QdrantClient:\n    return QdrantClient(config.QDRANT_URL, api_key=config.QDRANT_API_KEY)\n\ndef cohere_client() -> cohere.Client:\n    return cohere.Client(api_key=config.COHERE_API_KEY)\n\n@app.post(\"/search\")\ndef search(\n    query: SearchQuery,\n    client: Annotated[QdrantClient, Depends(client)],\n    cohere_client: Annotated[cohere.Client, Depends(cohere_client)],\n) -> SearchResults:\n    response = cohere_client.embed(\n        texts=[query.query],\n        model=\"embed-multilingual-v3.0\",\n        input_type=\"search_query\",\n    )\n    results = client.query_points(\n        collection_name=\"personal-notes\",\n        query=response.embeddings[0],\n        limit=2,\n    ).points\n    return SearchResults(\n        results=[\n            Document(**point.payload)\n            for point in results\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying with Qdrant Client in Go\nDESCRIPTION: This snippet demonstrates how to create a Qdrant client connection and perform a vector similarity search. It includes importing the necessary packages, configuring the client with host and port, and executing a query with specified parameters for collection, vector weights, and response options.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-payload-and-vectors/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tWithPayload:    qdrant.NewWithPayload(true),\n\tWithVectors:    qdrant.NewWithVectors(true),\n})\n```\n\n----------------------------------------\n\nTITLE: Upserting Data into Qdrant Collection using TypeScript\nDESCRIPTION: This snippet illustrates how to import the Qdrant client, instantiate it with local connection parameters, and perform an upsert operation to place data into a specific collection. The upsert receives a collection name and an array of points, where each point includes an ID and a vector of numerical features. This allows for efficient storage and retrieval of high-dimensional data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-multivector/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.upsert(\"{collection_name}\", {\n  points: [\n    {\n      id: 1,\n      vector: [\n        [-0.013,  0.020, -0.007, -0.111, ...],\n        [-0.030, -0.055,  0.001,  0.072, ...],\n        [-0.041,  0.014, -0.032, -0.062, ...]\n      ],\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Points with Rust Qdrant Client\nDESCRIPTION: The code snippet demonstrates the process of retrieving data points from a specified Qdrant collection using the Rust client. It requires the `qdrant-client` library, and it fetches points with specified identifiers. The main inputs are the collection name and the list of point ids. The execution is asynchronous and requires handling the future with await.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/retrieve-points/simple/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::GetPointsBuilder;\n\nclient\n    .get_points(GetPointsBuilder::new(\n        \"{collection_name}\",\n        vec![0.into(), 30.into(), 100.into()],\n    ))\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Installing Aleph Alpha Client with pip\nDESCRIPTION: Command to install the official Aleph Alpha Python client using pip package manager. This client provides access to Aleph Alpha's multimodal and multilingual embedding API.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/aleph-alpha.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install aleph-alpha-client\n```\n\n----------------------------------------\n\nTITLE: Deleting Named Vectors from Specific Points in Qdrant Using Go Client\nDESCRIPTION: This code snippet demonstrates how to delete specific named vectors ('text' and 'image') from selected points in a Qdrant collection. It uses the DeleteVectors method with PointsSelector to target specific point IDs (0, 3, 10) and VectorsSelector to specify which named vectors to remove from those points.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-vectors/simple/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient.DeleteVectors(context.Background(), &qdrant.DeletePointVectors{\n\tCollectionName: \"{collection_name}\",\n\tPointsSelector: qdrant.NewPointsSelector(\n\t\tqdrant.NewIDNum(0), qdrant.NewIDNum(3), qdrant.NewIDNum(10)),\n\tVectors: &qdrant.VectorsSelector{\n\t\tNames: []string{\"text\", \"image\"},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Upserting Points in Go\nDESCRIPTION: This snippet demonstrates how to create a Qdrant client connection and upsert points into a specified collection. It includes creating a client with a local host configuration and upserting a point with multiple vector values.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-multivector/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Upsert(context.Background(), &qdrant.UpsertPoints{\n\tCollectionName: \"{collection_name}\",\n\tPoints: []*qdrant.PointStruct{\n\t\t{\n\t\t\tId: qdrant.NewIDNum(1),\n\t\t\tVectors: qdrant.NewVectorsMulti(\n\t\t\t\t[][]float32{\n\t\t\t\t\t{-0.013, 0.020, -0.007, -0.111},\n\t\t\t\t\t{-0.030, -0.055, 0.001, 0.072},\n\t\t\t\t\t{-0.041, 0.014, -0.032, -0.062}}),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Sparse Vector Configuration in Java\nDESCRIPTION: This code initializes a Qdrant client and creates a new collection asynchronously. It sets up a sparse vector configuration for the 'text' field. The collection name is parameterized and should be replaced with the actual name.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.SparseVectorConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorParams;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setSparseVectorsConfig(\n                SparseVectorConfig.newBuilder()\n                    .putMap(\"text\", SparseVectorParams.getDefaultInstance()))\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Basic QdrantStorage Operations\nDESCRIPTION: Demonstration of core QdrantStorage operations including adding vectors, querying similar vectors, and clearing the storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/camel.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nqdrant_storage.add([VectorRecord(\n            vector=[-0.1, 0.1, ...],\n            payload={'key1': 'value1'},\n        ),\n        VectorRecord(\n            vector=[-0.1, 0.1, ...],\n            payload={'key2': 'value2'},\n        ),])\n\nquery_results = qdrant_storage.query(VectorDBQuery(query_vector=[0.1, 0.2, ...], top_k=10))\nfor result in query_results:\n    print(result.record.payload, result.similarity)\n\nqdrant_storage.clear()\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in Go\nDESCRIPTION: This snippet creates a collection in Qdrant using Go with specified configuration for vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nimport (\\n\\t\"context\"\\n\\t\"github.com/qdrant/go-client/qdrant\"\\n)\\n\\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\\n\\tCollectionName: \"test_collection\",\\n\\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\\n\\t\\tSize: 4,\\n\\t\\tDistance: qdrant.Distance_Cosine,\\n\\t}),\\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Facets with Filters in TypeScript\nDESCRIPTION: This snippet performs a facet query on the specified collection. It filters the results to only include documents where the 'color' field is 'red' and computes the facets for the 'size' field.  It requires the initialized Qdrant client instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/facet-counts/simple-with-filter/typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclient.facet(\"{collection_name}\", {\n    filter: {\n        must: [\n            {\n                key: \"color\",\n                match: {\n                    value: \"red\",\n                },\n            },\n        ],\n    },\n    key: \"size\",\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Strict Mode in C#\nDESCRIPTION: C# code for updating an existing Qdrant collection to disable strict mode using the Qdrant C# client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpdateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  strictModeConfig: new StrictModeConfig { Enabled = false }\n);\n```\n\n----------------------------------------\n\nTITLE: Scrape and Process Data with VectorRetriever\nDESCRIPTION: This Python snippet uses the `VectorRetriever` to scrape and process data from specified URLs.  It iterates through a list of Qdrant documentation URLs, processing each one to create embeddings and store them in the Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-camelai-discord.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"from camel.retrievers import VectorRetriever\n\nvector_retriever = VectorRetriever(embedding_model=embedding_instance,\n                                   storage=storage_instance)\n\nqdrant_urls = [\n    \\\"https://qdrant.tech/documentation/overview\\\",\n    \\\"https://qdrant.tech/documentation/guides/installation\\\",\n    \\\"https://qdrant.tech/documentation/concepts/filtering\\\",\n    \\\"https://qdrant.tech/documentation/concepts/indexing\\\",\n    \\\"https://qdrant.tech/documentation/guides/distributed_deployment\\\",\n    \\\"https://qdrant.tech/documentation/guides/quantization\\\"\n    # Add more URLs as needed\n]\n\nfor qdrant_url in qdrant_urls:\n  vector_retriever.process(\n      content=qdrant_url,\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Performing Faceted Search with Qdrant Client in C#\nDESCRIPTION: This code snippet demonstrates how to perform a faceted search operation using the Qdrant .NET client. It uses the FacetAsync method to retrieve facet values for the 'size' field in a collection, with the 'exact' parameter set to true for precise counting.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/facet-counts/exact/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nawait client.FacetAsync(\n    \"{collection_name}\",\n    key: \"size\",\n    exact: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Distribution-Based Score Fusion with HTTP in Qdrant\nDESCRIPTION: Example of using Distribution-Based Score Fusion (DBSF) to combine results from sparse and dense vector queries via HTTP POST request. DBSF normalizes scores using mean ± 3rd standard deviation as limits before summing scores across different queries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.11.x.md#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": [\n        {\n            \"query\": { \n                \"indices\": [1, 42],    // <┐\n                \"values\": [0.22, 0.8]  // <┴─Sparse vector\n             },\n            \"using\": \"sparse\",\n            \"limit\": 20\n        },\n        {\n            \"query\": [0.01, 0.45, 0.67, ...], // <-- Dense vector\n            \"using\": \"dense\",\n            \"limit\": 20\n        }\n    ],\n    \"query\": { \"fusion\": \"dbsf\" }, // <--- Distribution Based Score Fusion\n    \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Recommendation with Lookup from Another Collection\nDESCRIPTION: Demonstrates how to perform recommendations by looking up vectors from an external collection with matching dimensionality\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/explore.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/query-points-explore/recommend-lookup-from/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Collection with Vector and Quantization Settings\nDESCRIPTION: This HTTP PUT request creates or updates a Qdrant collection. It specifies vector properties including size, distance metric, and storage location. Additionally, it configures scalar quantization for optimized storage and retrieval.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/quantization-on-disk/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\",\n      \"on_disk\": true\n    },\n    \"quantization_config\": {\n        \"scalar\": {\n            \"type\": \"int8\",\n            \"always_ram\": false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Grouped Results in Qdrant\nDESCRIPTION: Examples of using the groups endpoint to query points and group results by a specific payload field across different programming languages.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.11.x.md#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query/groups\n{\n    \"query\": [0.01, 0.45, 0.67],\n    group_by=\"document_id\",  # Path of the field to group by\n    limit=4,  # Max amount of groups\n    group_size=2,  # Max amount of points per group\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points_groups(\n    collection_name=\"{collection_name}\",\n    query=[0.01, 0.45, 0.67],\n    group_by=\"document_id\",\n    limit=4,\n    group_size=2,\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.queryGroups(\"{collection_name}\", {\n    query: [0.01, 0.45, 0.67],\n    group_by: \"document_id\",\n    limit: 4,\n    group_size: 2,\n});\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.query_groups(\n    QueryPointGroupsBuilder::new(\"{collection_name}\", \"document_id\")\n        .query(Query::from(vec![0.01, 0.45, 0.67]))\n        .limit(4u64)\n        .group_size(2u64)\n).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPointGroups;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .queryGroupsAsync(\n        QueryPointGroups.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setGroupBy(\"document_id\")\n            .setQuery(nearest(0.01f, 0.45f, 0.67f))\n            .setLimit(4)\n            .setGroupSize(2)\n            .build())\n    .get();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryGroupsAsync(\n  collectionName: \"{collection_name}\",\n  groupBy: \"document_id\",\n  query: new float[] {\n    0.01f, 0.45f, 0.67f\n  },\n  limit: 4,\n  groupSize: 2\n);\n```\n\n----------------------------------------\n\nTITLE: Rust Client with JWT Authentication\nDESCRIPTION: Example of initializing the Qdrant Rust client with JWT authentication. The JWT token is passed as the API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"https://xyz-example.eu-central.aws.cloud.qdrant.io:6334\")\n    .api_key(\"<JWT>\")\n    .build()?;\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Database with Go\nDESCRIPTION: This Go code snippet initializes a Qdrant client and executes a query on a specified collection. It uses the Qdrant Go client library for establishing a connection to the database, configuring host and port details. The query is executed with specified parameters such as collection name, query criteria, payload, vectors inclusion, and offset. The code snippet requires the 'context' and 'qdrant/go-client' packages, and it outputs the queried results based on the specified parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-offset/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\\n\\t\\\"context\\\"\\n\\n\\t\\\"github.com/qdrant/go-client/qdrant\\\"\\n)\\n\\nclient, err := qdrant.NewClient(&qdrant.Config{\\n\\tHost: \\\"localhost\\\",\\n\\tPort: 6334,\\n})\\n\\nclient.Query(context.Background(), &qdrant.QueryPoints{\\n\\tCollectionName: \\\"{collection_name}\\\",\\n\\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\\n\\tWithPayload:    qdrant.NewWithPayload(true),\\n\\tWithVectors:    qdrant.NewWithVectors(true),\\n\\tOffset:         qdrant.PtrOf(uint64(100)),\\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Datadog Integration via Agent\nDESCRIPTION: Command to install the Qdrant integration using Datadog Agent with a specific version\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/observability/datadog.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndatadog-agent integration install -t qdrant==1.0.0\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index using Qdrant Client - Python\nDESCRIPTION: This code snippet demonstrates how to create an index on the 'timestamp' field of a collection using the Qdrant Python client. It requires the Qdrant library SDK, particularly the 'models.IntegerIndexParams' and 'models.IntegerIndexType' classes for defining the index schema. The main function, 'client.create_payload_index', takes parameters for 'collection_name' and 'field_name' to specify where the index is applied. Key constraints include the necessity of the 'is_principal' parameter set to 'True', indicating the primary nature of the index.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/integer-is-principal/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"timestamp\",\n    field_schema=models.IntegerIndexParams(\n        type=models.IntegerIndexType.INTEGER,\n        is_principal=True,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with C# Client\nDESCRIPTION: Initializes a Qdrant client and creates a new collection with 128-dimensional vectors using cosine distance and max similarity comparator for multivector configuration. The code establishes a connection to a Qdrant server running on localhost:6334.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-multivector/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  vectorsConfig: new VectorParams {\n    Size = 128,\n      Distance = Distance.Cosine,\n      MultivectorConfig = new() {\n        Comparator = MultiVectorComparator.MaxSim\n      }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Performing Async Scroll Operation with Vector Filter\nDESCRIPTION: Executes an asynchronous scroll operation on a specified collection, filtering points that have a vector. Useful for retrieving and iterating through vector database entries conditionally.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-has-vector/csharp.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.ScrollAsync(collectionName: \"{collection_name}\", filter: HasVector(\"image\"));\n```\n\n----------------------------------------\n\nTITLE: Uploading Multiple Points in Batch to Qdrant\nDESCRIPTION: Demonstrates how to efficiently insert multiple points into a Qdrant collection using a single batch operation. The method allows uploading points with unique IDs, associated payloads, and vector embeddings in one API call.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/batch-simple/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n    collection_name=\"my_collection\",\n    points=[\n        PointStruct(\n            id=1, \n            payload={\"color\": \"red\"}, \n            vector=[0.1, 0.2, 0.3]\n        ),\n        PointStruct(\n            id=2, \n            payload={\"color\": \"blue\"}, \n            vector=[0.4, 0.5, 0.6]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Splitting Dataset into Training and Testing Sets\nDESCRIPTION: This snippet splits the loaded dataset into training and testing sets. It iterates through the dataset, taking the first 60000 items for training and the next 1000 for testing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/retrieval-quality.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndataset_iterator = iter(dataset)\ntrain_dataset = [next(dataset_iterator) for _ in range(60000)]\ntest_dataset = [next(dataset_iterator) for _ in range(1000)]\n```\n\n----------------------------------------\n\nTITLE: Uploading Data to Qdrant Collection\nDESCRIPTION: Loads startup data and vectors from files and uploads them to the Qdrant collection using batch processing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/neural-search-tutorial.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport json\n\nfd = open('./startups.json')\n\n# payload is now an iterator over startup data\npayload = map(json.loads, fd)\n\n# Here we load all vectors into memory, numpy array works as iterable for itself.\n# Other option would be to use Mmap, if we don't want to load all data into RAM\nvectors = np.load('./startup_vectors.npy')\n\n# And the final step - data uploading\nqdrant_client.upload_collection(\n  collection_name='startups',\n  vectors=vectors,\n  payload=payload,\n  ids=None,  # Vector ids will be assigned automatically\n  batch_size=256  # How many vectors will be uploaded in a single request?\n```\n\n----------------------------------------\n\nTITLE: Updating Vector Storage to Disk for Named Vector in Qdrant\nDESCRIPTION: This snippet demonstrates how to update a collection to store a specific named vector on disk. This is applicable for collections that use named vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/collections.md#2025-04-21_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PATCH 'http://localhost:6333/collections/my_collection' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"vectors\": {\n      \"name\": \"my_vector\",\n      \"storage_type\": \"Disk\"\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Removing a Collection Alias in Qdrant\nDESCRIPTION: This snippet demonstrates how to remove an alias from a collection, which allows for cleaning up unused aliases when they're no longer needed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/collections.md#2025-04-21_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST 'http://localhost:6333/aliases' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"actions\": [\n      {\n        \"delete_alias\": {\n          \"alias_name\": \"my_production_collection\"\n        }\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Named Vector Recommendation Request\nDESCRIPTION: Shows how to perform recommendations on a collection with multiple vectors by specifying the vector name to use\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/explore.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/query-points-explore/recommend-named-vectors/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Qdrant Client for Sparse Vector Operations in Python\nDESCRIPTION: This code initializes the Qdrant client for in-memory operations and sets up the collection name for subsequent sparse vector operations. It's the first step in implementing sparse vector functionality with Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/sparse-vectors.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Qdrant client setup\nclient = QdrantClient(\":memory:\")\n\n# Define collection name\nCOLLECTION_NAME = \"example_collection\"\n\n# Insert sparse vector into Qdrant collection\npoint_id = 1  # Assign a unique ID for the point\n```\n\n----------------------------------------\n\nTITLE: Using Qdrant Client with QdrantHook in Apache Airflow\nDESCRIPTION: Shows how to access and use the underlying qdrant_client instance from a QdrantHook to perform operations like counting elements and upserting data points into a Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/airflow.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import models\n\nhook.conn.count(\"<COLLECTION_NAME>\")\n\nhook.conn.upsert(\n    \"<COLLECTION_NAME>\",\n    points=[\n        models.PointStruct(id=32, vector=[0.32, 0.12, 0.123], payload={\"color\": \"red\"})\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Preparing a Query Vector for Sparse Vector Search in Qdrant\nDESCRIPTION: This snippet illustrates the process of preparing a query vector for sparse vector search in Qdrant. It involves computing the vector from query text and extracting its indices and values.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/sparse-vectors.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nquery_text = \"Who was Arthur Ashe?\"\nquery_vec, query_tokens = compute_vector(query_text)\nquery_vec.shape\n\nquery_indices = query_vec.nonzero().numpy().flatten()\nquery_values = query_vec.detach().numpy()[query_indices]\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Strict Mode in HTTP\nDESCRIPTION: HTTP request for creating a new Qdrant collection with strict mode enabled and unindexed filtering retrieve restriction.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"strict_mode_config\": {\n        \"enabled\": true,\n        \"unindexed_filtering_retrieve\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Large Segments\nDESCRIPTION: Configuration for maximizing throughput using fewer but larger segments.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/optimize.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"vectors\": {\n    \"size\": 768,\n    \"distance\": \"Cosine\"\n},\n\"optimizers_config\": {\n    \"default_segment_number\": 2,\n    \"max_segment_size\": 200000000\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Payload in Qdrant Client TypeScript\nDESCRIPTION: This snippet demonstrates how to set a payload in a collection using the Qdrant client library. It defines a structure with properties and associates them with specific points. Requires a configured Qdrant client instance. The function takes a collection name and an object specifying the payload properties and target points.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/set-payload/by-point-id/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.setPayload(\"{collection_name}\", {\n  payload: {\n    property1: \"string\",\n    property2: \"string\",\n  },\n  points: [0, 3, 10],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database in TypeScript\nDESCRIPTION: This code demonstrates how to import, initialize, and query a Qdrant vector database using the REST client. It creates a client connected to a local Qdrant instance, then performs a vector similarity search with filtering criteria to limit results to a specific user group.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-filter-by-group-id/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: [0.1, 0.1, 0.9],\n    filter: {\n        must: [{ key: \"group_id\", match: { value: \"user_1\" } }],\n    },\n    limit: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI and Uvicorn for API Deployment\nDESCRIPTION: Command to install FastAPI and Uvicorn packages, which are required to build and serve the REST API for the neural search service.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npip install fastapi uvicorn\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Tool Descriptions for Frontend Code Management\nDESCRIPTION: Environment variable configuration for the find and store tools used by the MCP server. These define instructions for the AI agent on when and how to use the search and storage capabilities for frontend code snippets.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/webinar-vibe-coding-rag.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport TOOL_FIND_DESCRIPTION=\"Use this tool ALWAYS before generating any FRONTEND code. \\\nIt lets you search for relevant code snippets based on natural language descriptions. \\\nThe 'query' parameter should describe what you're looking for, and the tool will return the most relevant code \\\nsnippets. If this tool finds something similar, then create your code so it is consistent. Reuse existing code \\\nas much as you can.\"\n\nexport TOOL_STORE_DESCRIPTION=\"Store reusable FRONTEND code snippets for later retrieval. \\\nThe 'information' parameter should contain a natural language description of what the code does, while the actual \\\ncode should be included in the 'metadata' parameter as a 'code' property. The value of 'metadata' is a Python \\\ndictionary with strings as keys. Use this always when you generate some code to store it for further reference.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Cluster Write Consistency Factor - TypeScript\nDESCRIPTION: This TypeScript code snippet configures the Qdrant collection creation with a specified `write_consistency_factor` using the Qdrant JS Client. It sets parameters for vectors, shard number, replication factor, and write consistency to manage cluster operation consistency.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 300,\n    distance: \"Cosine\",\n  },\n  shard_number: 6,\n  replication_factor: 2,\n  write_consistency_factor: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata Index in Qdrant using Python\nDESCRIPTION: This snippet illustrates how to use the QdrantClient in Python to create a payload index for a metadata field 'category'. This requires the Qdrant Python client library and a running Qdrant instance at the specified URL. The index optimizes query performance by organizing metadata based on specified schemas.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-filtering.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_payload_index(\n   collection_name=\"computers\",\n   field_name=\"category\",\n   field_schema=\"keyword\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Keyword Match Filter in Go with Qdrant\nDESCRIPTION: This code snippet demonstrates how to create a keyword match filter using the Qdrant Go client.  It utilizes the `NewMatchKeywords` function to specify the field and keywords for filtering search results. This function constructs a `Filter` object that can be used in Qdrant queries to refine the search based on keyword criteria.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-any/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewMatchKeywords(\"color\", \"black\", \"yellow\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Precision at K in Qdrant (Python)\nDESCRIPTION: This code snippet shows how to calculate and print the average precision at k (in this case, k=5) for a Qdrant collection. It assumes the existence of a function 'avg_precision_at_k' that performs the calculation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/retrieval-quality.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprint(f\"avg(precision@5) = {avg_precision_at_k(k=5)}\")\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Shard Key - HTTP\nDESCRIPTION: Demonstrates how to upsert points with a specific shard key using the HTTP API. Includes vector data and shard key specification.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/points\n{\n    \"points\": [\n        {\n            \"id\": 1111,\n            \"vector\": [0.1, 0.2, 0.3]\n        },\n    ]\n    \"shard_key\": \"user_1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Forward Method for CarsEncoder in Python\nDESCRIPTION: This snippet implements the `forward` method in the `CarsEncoder` class, which is a critical part of processing input data through the encoder. In this instance, it passes images through the pretrained ResNet model and returns the resulting embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/cars-recognition.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n    def forward(self, images):\n        embeddings = self._encoder.forward(images)\n        return embeddings\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client\nDESCRIPTION: Creates a client object to interact with the local Qdrant instance, essential for managing uploaded vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# Import client library\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.models import VectorParams, Distance\n\nclient = QdrantClient(\"http://localhost:6333\")\n```\n\n----------------------------------------\n\nTITLE: In-Memory Qdrant Vector Store Setup\nDESCRIPTION: Creates a local in-memory Qdrant vector store instance for testing and experimentation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langchain.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nqdrant = QdrantVectorStore.from_documents(\n    docs,\n    embeddings,\n    location=\":memory:\",  # Local mode with in-memory storage only\n    collection_name=\"my_documents\",\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Qdrant Vector Search in Dagster Pipeline\nDESCRIPTION: Example showing how to create a Dagster asset that connects to Qdrant, adds documents to a collection, and performs vector search. Demonstrates configuration of QdrantResource and execution of basic vector operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/dagster.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dagster_qdrant import QdrantConfig, QdrantResource\n\nimport dagster as dg\n\n\n@dg.asset\ndef my_table(qdrant_resource: QdrantResource):\n    with qdrant_resource.get_client() as qdrant:\n        qdrant.add(\n            collection_name=\"test_collection\",\n            documents=[\n                \"This is a document about oranges\",\n                \"This is a document about pineapples\",\n                \"This is a document about strawberries\",\n                \"This is a document about cucumbers\",\n            ],\n        )\n        results = qdrant.query(\n            collection_name=\"test_collection\", query_text=\"hawaii\", limit=3\n        )\n\n\ndefs = dg.Definitions(\n    assets=[my_table],\n    resources={\n        \"qdrant_resource\": QdrantResource(\n            config=QdrantConfig(\n                host=\"xyz-example.eu-central.aws.cloud.qdrant.io\",\n                api_key=\"<your-api-key>\",\n            )\n        )\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Index with Qdrant HTTP\nDESCRIPTION: This HTTP request creates an index on a specified field within a Qdrant collection. It uses a PUT method to define the schema for the index, targeting a specific collection and field. The required parameters include the collection name, field name, and field schema. Outputs are not explicitly mentioned, but the successful operation creates an index based on the given schema.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/with-group-id-as-tenant/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/index\n{\n    \"field_name\": \"group_id\",\n    \"field_schema\": {\n        \"type\": \"keyword\",\n        \"is_tenant\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Matrix Search with Filters Using Qdrant Java Client\nDESCRIPTION: This code initializes a Qdrant client connection to a local server and performs an asynchronous matrix search operation with a keyword filter. The search is limited to 2 results from a sample of 10 points, filtering for items where the 'color' field equals 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/distance-matrix/offsets-format/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.SearchMatrixPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .searchMatrixOffsetsAsync(\n        SearchMatrixPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(Filter.newBuilder().addMust(matchKeyword(\"color\", \"red\")).build())\n            .setSample(10)\n            .setLimit(2)\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Upserting Multi-dimensional Vectors in Qdrant using Rust\nDESCRIPTION: Demonstrates connecting to a Qdrant database and upserting points with multi-dimensional vectors. Creates a client connection to a local Qdrant instance and inserts a point with three 4-dimensional vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-multivector/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{PointStruct, UpsertPointsBuilder, Vector};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet points = vec![\n    PointStruct::new(\n        1,\n        Vector::new_multi(vec![\n            vec![-0.013, 0.020, -0.007, -0.111],\n            vec![-0.030, -0.055, 0.001, 0.072],\n            vec![-0.041, 0.014, -0.032, -0.062],\n        ]),\n        Payload::new()\n    )\n];\n\nclient\n    .upsert_points(\n        UpsertPointsBuilder::new(\"{collection_name}\", points)\n    ).await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Collection\nDESCRIPTION: This snippet initializes a Qdrant client and creates a collection with a specified name, defining the vector size and distance metric. The collection configuration includes a multivector configuration with a maximum similarity comparator. The code requires the Qdrant JavaScript client as a dependency.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-multivector/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 128,\n    distance: \"Cosine\",\n    multivector_config: {\n      comparator: \"max_sim\"\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Collection with Quantization\nDESCRIPTION: HTTP PUT request to create a new collection with specified vector dimensions, distance metric, and scalar quantization settings. Configures a 768-dimensional vector space using cosine similarity and int8 scalar quantization stored in RAM.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/scalar-quantization-in-ram/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n        \"size\": 768,\n        \"distance\": \"Cosine\",\n        \"on_disk\": true\n    },\n    \"quantization_config\": {\n        \"scalar\": {\n            \"type\": \"int8\",\n            \"always_ram\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Landing Page for Qdrant Startup Program in YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration for a landing page promoting the Qdrant for Startups program. It includes a title, description, button definition with URL and text, an SVG image reference, and a sitemapExclude setting.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/ai-agents/ai-agents-get-started.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Building AI agents?\ndescription: Apply for the Qdrant for Startups program to access a 20% discount to Qdrant Cloud, our managed cloud service, perks from Hugging Face, LlamaIndex, and Airbyte, and much more.\nbutton:\n  url: /qdrant-for-startups/\n  text: Apply Now\nimage:\n  src: /img/ai-agent.svg\n  alt: AI agent\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Deleting Point Payload Fields in Go\nDESCRIPTION: This snippet demonstrates how to connect to a Qdrant server and delete specific payload fields ('color' and 'price') from selected points in a collection. It initializes a client connection to a local Qdrant instance and then uses the DeletePayload method to remove the specified keys from points with IDs 0 and 3.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-payload/by-point-id/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.DeletePayload(context.Background(), &qdrant.DeletePayloadPoints{\n    CollectionName: \"{collection_name}\",\n    Keys:           []string{\"color\", \"price\"},\n    PointsSelector: qdrant.NewPointsSelector(\n        qdrant.NewIDNum(0),\n        qdrant.NewIDNum(3)),\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Vectors Asynchronously in C#\nDESCRIPTION: This snippet demonstrates how to asynchronously delete vectors from a specified collection using a client service in C#. The collection is identified by \"{collection_name}\" and the vectors are removed based on their types such as \"text\" and \"image\" along with specified indices. Ensure that an instance of the client service is properly configured and running before executing this operation. Inputs include the collection name as a string and lists of vector types and indices, while there are no direct outputs returned to the console, as the operation typically affects the database or service backend.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-vectors/simple/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.DeleteVectorsAsync(\"{collection_name}\", [\"text\", \"image\"], [0, 3, 10]);\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Environment variable configuration for OpenAI API authentication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/swarm.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=\"<YOUR_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector and Quantization Configurations in C#\nDESCRIPTION: This snippet initializes a Qdrant client and creates a new collection. It specifies vector parameters including size, distance metric, and storage location. It also configures scalar quantization for the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/scalar-quantization-in-ram/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine, OnDisk = true },\n\tquantizationConfig: new QuantizationConfig\n\t{\n\t\tScalar = new ScalarQuantization { Type = QuantizationType.Int8, AlwaysRam = true }\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Collection Existence in Qdrant using Python\nDESCRIPTION: This code snippet demonstrates how to check if a collection exists in Qdrant using the client API. It returns a boolean value indicating whether the specified collection exists in the database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/check-collection-exists/simple/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.collection_exists(collection_name=\"{collection_name}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Vectors in TypeScript\nDESCRIPTION: This snippet performs the addition of several vectors with payloads to a Qdrant collection using TypeScript.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst operationInfo = await client.upsert(\"test_collection\", {\\n  wait: true,\\n  points: [\\n    { id: 1, vector: [0.05, 0.61, 0.76, 0.74], payload: { city: \"Berlin\" } },\\n    { id: 2, vector: [0.19, 0.81, 0.75, 0.11], payload: { city: \"London\" } },\\n    { id: 3, vector: [0.36, 0.55, 0.47, 0.94], payload: { city: \"Moscow\" } },\\n    { id: 4, vector: [0.18, 0.01, 0.85, 0.80], payload: { city: \"New York\" } },\\n    { id: 5, vector: [0.24, 0.18, 0.22, 0.44], payload: { city: \"Beijing\" } },\\n    { id: 6, vector: [0.35, 0.08, 0.11, 0.44], payload: { city: \"Mumbai\" } },\\n  ],\\n});\\n\\nconsole.debug(operationInfo);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Database in Go\nDESCRIPTION: Demonstrates how to create a Qdrant client connection and execute a scroll query with nested array filters. The code shows filtering on array fields using match conditions for both string and boolean values.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-multiple-nested/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"diet[].food\", \"meat\"),\n\t\t\tqdrant.NewMatchBool(\"diet[].likes\", true),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index in Qdrant with C#\nDESCRIPTION: This C# code snippet demonstrates how to create a payload index in Qdrant. It utilizes the `QdrantClient` to connect to a Qdrant instance and calls the `CreatePayloadIndexAsync` method to create a payload index with specific parameters like collection name, field name, schema type, and index parameters including setting `IsTenant` to true.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/keyword-is-tenant/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreatePayloadIndexAsync(\n collectionName: \"{collection_name}\",\n fieldName: \"payload_field_name\",\n schemaType: PayloadSchemaType.Keyword,\n indexParams: new PayloadIndexParams\n {\n  KeywordIndexParams = new KeywordIndexParams\n  {\n   IsTenant = true\n  }\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Operator Settings in YAML\nDESCRIPTION: This YAML snippet specifies configuration options for the Qdrant operator, including annotations, service monitoring, resources, node selectors, tolerations, affinity, and logging levels. The settings object further defines details such as controller configurations, database configurations, storage settings, and security context.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/operator-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# Additional pod annotations\npodAnnotations: {}\n\n# Configuration for the Qdrant operator service monitor to scrape metrics\nserviceMonitor:\n  enabled: false\n\n# Resource requests and limits for the Qdrant operator\nresources: {}\n\n# Node selector for the Qdrant operator\nnodeSelector: {}\n\n# Tolerations for the Qdrant operator\ntolerations: []\n\n# Affinity configuration for the Qdrant operator\naffinity: {}\n\n# Configuration for the Qdrant operator (v2)\nsettings:\n  # The log level for the operator\n  # Available options: DEBUG | INFO | WARN | ERROR\n  logLevel: INFO \n  # Controller related settings\n  controller:\n    # The period a forced recync is done by the controller (if watches are missed / nothing happened)\n    forceResyncPeriod: 10h\n    # QPS indicates the maximum QPS to the master from this client.\n    # Default is 200\n    qps: 200\n    # Maximum burst for throttle.\n    # Default is 500.\n    burst: 500\n  # Features contains the settings for enabling / disabling the individual features of the operator\n  features:\n    # ClusterManagement contains the settings for qdrant (database) cluster management\n    clusterManagement:\n      # Whether or not the Qdrant cluster features are enabled.\n      # If disabled, all other properties in this struct are disregarded. Otherwise, the individual features will be inspected.\n      # Default is true.\n      enable: true\n      # The StorageClass used to make database and snapshot PVCs.\n      # Default is nil, meaning the default storage class of Kubernetes.\n      storageClass: \n        # The StorageClass used to make database PVCs.\n        # Default is nil, meaning the default storage class of Kubernetes.\n        #database: \n        # The StorageClass used to make snapshot PVCs.\n        # Default is nil, meaning the default storage class of Kubernetes.\n        #snapshot:\n      # Qdrant config contains settings specific for the database\n      qdrant:\n        # The config where to find the image for qdrant\n        image: \n          # The repository where to find the image for qdrant\n          # Default is \"qdrant/qdrant\"\n          repository: qdrant/qdrant\n          # Docker image pull policy\n          # Default \"IfNotPresent\", unless the tag is dev, master or latest. Then \"Always\"\n          #pullPolicy:\n          # Docker image pull secret name\n          # This secret should be available in the namespace where the cluster is running\n          # Default not set\n          #pullSecretName:\n        # storage contains the settings for the storage of the Qdrant cluster\n        storage:\n          performance:\n            # CPU budget, how many CPUs (threads) to allocate for an optimization job.\n            # If 0 - auto selection, keep 1 or more CPUs unallocated depending on CPU size\n            # If negative - subtract this number of CPUs from the available CPUs.\n            # If positive - use this exact number of CPUs.\n            optimizerCpuBudget: 0\n            # Enable async scorer which uses io_uring when rescoring.\n            # Only supported on Linux, must be enabled in your kernel.\n            # See: <https://qdrant.tech/articles/io_uring/#and-what-about-qdrant>\n            asyncScorer: false\n        # Qdrant DB log level\n        # Available options: DEBUG | INFO | WARN | ERROR \n        # Default is \"INFO\"\n        logLevel: INFO\n        # Default Qdrant security context configuration\n        securityContext:\n          # Enable default security context\n          # Default is false\n          enabled: false\n          # Default user for qdrant container\n          # Default not set\n          #user: 1000\n          # Default fsGroup for qdrant container\n          # Default not set\n          #fsUser: 2000\n          # Default group for qdrant container\n          # Default not set\n          #group: 3000\n        # Network policies configuration for the Qdrant databases\n        networkPolicies:\n          ingress:\n            - ports:\n                - protocol: TCP\n                  port: 6333\n                - protocol: TCP\n                  port: 6334\n          # Allow DNS resolution from qdrant pods at Kubernetes internal DNS server\n          egress:\n            - ports:\n                - protocol: UDP\n                  port: 53\n      # Scheduling config contains the settings specific for scheduling\n      scheduling:\n        # Default topology spread constraints (list from type corev1.TopologySpreadConstraint)\n        topologySpreadConstraints:\n          - maxSkew: 1\n            topologyKey: \"kubernetes.io/hostname\"\n            whenUnsatisfiable: \"ScheduleAnyway\"\n        # Default pod disruption budget (object from type policyv1.PodDisruptionBudgetSpec)\n        podDisruptionBudget:\n          maxUnavailable: 1\n      # ClusterManager config contains the settings specific for cluster manager\n      clusterManager:\n        # Whether or not the cluster manager (on operator level).\n        # If disabled, all other properties in this struct are disregarded. Otherwise, the individual features will be inspected.\n        # Default is false.\n        enable: true\n        # The endpoint address the cluster manager could be reached\n        # If set, this should be a full URL like: http://cluster-manager.qdrant-cloud-ns.svc.cluster.local:7333\n        endpointAddress: http://qdrant-cluster-manager:80\n        # InvocationInterval is the interval between calls (started after the previous call is retured)\n        # Default is 10 seconds\n        invocationInterval: 10s\n        # Timeout is the duration a single call to the cluster manager is allowed to take.\n        # Default is 30 seconds\n        timeout: 30s\n        # Specifies overrides for the manage rules\n        manageRulesOverrides:\n          #dry_run: \n          #max_transfers:\n          #max_transfers_per_collection:\n          #rebalance:\n          #replicate:\n      # Ingress config contains the settings specific for ingress\n      ingress:\n        # Whether or not the Ingress feature is enabled.\n        # Default is true.\n        enable: false\n        # Which specific ingress provider should be used\n        # Default is KubernetesIngress\n        provider: KubernetesIngress\n        # The specific settings when the Provider is QdrantCloudTraefik\n        qdrantCloudTraefik:\n          # Enable tls\n          # Default is false\n          tls: false\n          # Secret with TLS certificate\n          # Default is None\n          secretName: \"\"\n          # List of Traefik middlewares to apply\n          # Default is an empty list\n          middlewares: []\n          # IP Allowlist Strategy for Traefik\n          # Default is None\n          ipAllowlistStrategy:\n          # Enable body validator plugin and matching ingressroute rules\n          # Default is false\n          enableBodyValidatorPlugin: false\n        # The specific settings when the Provider is KubernetesIngress\n        kubernetesIngress:\n          # Name of the ingress class\n          # Default is None\n          #ingressClassName:\n      # TelemetryTimeout is the duration a single call to the cluster telemetry endpoint is allowed to take.\n      # Default is 3 seconds\n      telemetryTimeout: 3s\n      # MaxConcurrentReconciles is the maximum number of concurrent Reconciles which can be run. Defaults to 20.\n      maxConcurrentReconciles: 20  \n      # VolumeExpansionMode specifies the expansion mode, which can be online or offline (e.g. in case of Azure).\n      # Available options: Online, Offline\n      # Default is Online\n      volumeExpansionMode: Online\n    # BackupManagementConfig contains the settings for backup management\n    backupManagement:\n      # Whether or not the backup features are enabled.\n      # If disabled, all other properties in this struct are disregarded. Otherwise, the individual features will be inspected.\n      # Default is true.\n      enable: true\n      # Snapshots contains the settings for snapshots as part of backup management.\n      snapshots:\n        # Whether or not the Snapshot feature is enabled.\n        # Default is true.\n        enable: true\n        # The VolumeSnapshotClass used to make VolumeSnapshots.\n        # Default is \"csi-snapclass\".\n        volumeSnapshotClass: \"csi-snapclass\"\n        # The duration a snapshot is retained when the phase becomes Failed or Skipped\n        # Default is 72h (3d).\n        retainUnsuccessful: 72h\n        # MaxConcurrentReconciles is the maximum number of concurrent Reconciles which can be run. Defaults to 1.\n        maxConcurrentReconciles: 1\n      # ScheduledSnapshots contains the settings for scheduled snapshot as part of backup management.\n      scheduledSnapshots:\n        # Whether or not the ScheduledSnapshot feature is enabled.\n        # Default is true.\n        enable: true\n        # MaxConcurrentReconciles is the maximum number of concurrent Reconciles which can be run. Defaults to 1.\n        maxConcurrentReconciles: 1\n      # Restores contains the settings for restoring (a snapshot) as part of backup management.\n      restores:\n        # Whether or not the Restore feature is enabled.\n        # Default is true.\n        enable:  true\n        # MaxConcurrentReconciles is the maximum number of concurrent Reconciles which can be run. Defaults to 1.\n        maxConcurrentReconciles: 1\n```\n\n----------------------------------------\n\nTITLE: Executing Filtered Scroll Query with Qdrant Client in Rust\nDESCRIPTION: This code initializes a Qdrant client and performs a scroll query on a collection. It applies a filter to exclude points where the 'city' is 'london' and the 'color' is 'red'. The query is executed asynchronously.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-must-not-filter/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::must_not([\n            Condition::matches(\"city\", \"london\".to_string()),\n            Condition::matches(\"color\", \"red\".to_string()),\n        ])),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Float16 Vectors in Python\nDESCRIPTION: This Python code shows how to create a Qdrant collection using the Python client, configuring float16 vectors for reduced memory usage and potentially faster operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    \"{collection_name}\",\n    vectors_config=models.VectorParams(\n        size=1024, distance=models.Distance.COSINE, datatype=models.Datatype.FLOAT16\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Querying points from Qdrant vector database using Python client\nDESCRIPTION: This code initializes a connection to a Qdrant server running locally on port 6333 and performs a vector similarity search. The query specifies a 4-dimensional vector and requests that only specific payload fields ('city', 'village', 'town') be returned with the results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-payload-fields/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    with_payload=[\"city\", \"village\", \"town\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Filter Condition Using Qdrant Client in C#\nDESCRIPTION: This snippet demonstrates how to instantiate a Qdrant client connection to a local server and delete records from a collection based on a keyword match filter. It requires the Qdrant.Client NuGet package and uses the MatchKeyword condition to filter records where the 'color' field equals 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-points/by-filter/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.DeleteAsync(collectionName: \"{collection_name}\", filter: MatchKeyword(\"color\", \"red\"));\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collection\nDESCRIPTION: Performs a semantic search query using SPLADE++ embeddings to find relevant movies.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nquery_embedding = list(sparse_model.embed(\"A movie about music\"))[0]\n\nresponse = qdrant_client.query_points(\n    collection_name=\"movies\",\n    query=models.SparseVector(indices=query_embedding.indices, values=query_embedding.values),\n    using=\"film_description\",\n    limit=1,\n    with_vectors=True,\n    with_payload=True\n)\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Go Client with API Key Authentication\nDESCRIPTION: Example of initializing the Qdrant Go client with API key authentication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost:   \"xyz-example.eu-central.aws.cloud.qdrant.io\",\n\tPort:   6334,\n\tAPIKey: \"<paste-your-api-key-here>\",\n\tUseTLS: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating GeoPolygon with Field Conditions in Python\nDESCRIPTION: This snippet initializes a FieldCondition object that defines a geographical polygon using the Qdrant model. It specifies both the exterior boundary points and the interior hole points of the polygon. This is useful for filtering data based on specified geographic areas.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-poligon/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodels.FieldCondition(\n    key=\"location\",\n    geo_polygon=models.GeoPolygon(\n        exterior=models.GeoLineString(\n            points=[\n                models.GeoPoint(\n                    lon=-70.0,\n                    lat=-70.0,\n                ),\n                models.GeoPoint(\n                    lon=60.0,\n                    lat=-70.0,\n                ),\n                models.GeoPoint(\n                    lon=60.0,\n                    lat=60.0,\n                ),\n                models.GeoPoint(\n                    lon=-70.0,\n                    lat=60.0,\n                ),\n                models.GeoPoint(\n                    lon=-70.0,\n                    lat=-70.0,\n                ),\n            ]\n        ),\n        interiors=[\n            models.GeoLineString(\n                points=[\n                    models.GeoPoint(\n                        lon=-65.0,\n                        lat=-65.0,\n                    ),\n                    models.GeoPoint(\n                        lon=0.0,\n                        lat=-65.0,\n                    ),\n                    models.GeoPoint(\n                        lon=0.0,\n                        lat=0.0,\n                    ),\n                    models.GeoPoint(\n                        lon=-65.0,\n                        lat=0.0,\n                    ),\n                    models.GeoPoint(\n                        lon=-65.0,\n                        lat=-65.0,\n                    ),\n                ]\n            )\n        ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Install Sentence Transformers\nDESCRIPTION: Installs the Sentence Transformers library using pip. Sentence Transformers is used for encoding text into numerical vectors (embeddings). The `-U` flag upgrades the package if it's already installed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/search-beginners.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install -U sentence-transformers\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Strict Mode in C#\nDESCRIPTION: C# code for creating a new Qdrant collection with strict mode enabled and unindexed filtering retrieve restriction using the Qdrant C# client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  strictModeConfig: new StrictModeConfig { enabled = true, unindexed_filtering_retrieve = true }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Vector Store Connection\nDESCRIPTION: Example of creating a new QdrantVector instance with connection configuration including URL, API key, and HTTPS settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/mastra.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantVector } from \"@mastra/rag\";\n\nconst qdrant = new QdrantVector({\n  url: \"https://xyz-example.eu-central.aws.cloud.qdrant.io:6333\"\n  apiKey: \"<YOUR_API_KEY>\",\n  https: true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index in Qdrant with C#\nDESCRIPTION: This code snippet demonstrates how to create a payload index in a Qdrant collection using the C# client library. It initializes a QdrantClient and then calls the CreatePayloadIndexAsync method to create an index on a specified field. The index is configured with text indexing parameters, including the tokenizer type, minimum and maximum token lengths, and lowercase conversion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/simple-full-text/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreatePayloadIndexAsync(\n\tcollectionName: \"{collection_name}\",\n\tfieldName: \"name_of_the_field_to_index\",\n\tschemaType: PayloadSchemaType.Text,\n\tindexParams: new PayloadIndexParams\n\t{\n\t\tTextIndexParams = new TextIndexParams\n\t\t{\n\t\t\tTokenizer = TokenizerType.Word,\n\t\t\tMinTokenLen = 2,\n\t\t\tMaxTokenLen = 10,\n\t\t\tLowercase = true\n\t\t}\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing QdrantClient and Performing Filtered Scroll Operation in C#\nDESCRIPTION: This snippet demonstrates how to create a QdrantClient instance and use it to perform a scroll operation on a collection with a filter condition. It connects to a Qdrant server running on localhost:6334 and searches for documents where 'Germany' is mentioned in the 'country.cities[].sightseeing' field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-array-match/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: MatchKeyword(\"country.cities[].sightseeing\", \"Germany\")\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Database with TypeScript\nDESCRIPTION: Creates a connection to a local Qdrant instance and performs a query operation using a point ID. The client connects to localhost on port 6333 and queries a specified collection using a UUID as the point identifier.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/by-existing-id/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: '43cf51e2-8777-4f52-bc74-c2cbde0c8b04', // <--- point id\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Match Condition in Rust\nDESCRIPTION: This snippet defines a condition to match the 'color' attribute against a list of specified values. It utilizes the 'Condition' struct to achieve this functionality within a Rust project. Required dependencies include the respective libraries providing the 'Condition' type, which enables attribute matching.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-any/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nCondition::matches(\"color\", vec![\"black\".to_string(), \"yellow\".to_string()])\n```\n\n----------------------------------------\n\nTITLE: Installing FastEmbed Package\nDESCRIPTION: Install the FastEmbed package using pip package manager\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install fastembed\n```\n\n----------------------------------------\n\nTITLE: Retrieving Facet Counts with Qdrant Go Client\nDESCRIPTION: This snippet shows how to query facet counts from a Qdrant collection. It performs an exact facet count on a specific key in the specified collection. The result and any potential error are captured in the response variables.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/facet-counts/exact/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.Facet(ctx, &qdrant.FacetCounts{\n    CollectionName: \"{collection_name}\",\n    Key:            \"key\",\n    Exact:          true,\n})\n```\n\n----------------------------------------\n\nTITLE: Recovering a Collection with Priority Setting in Qdrant\nDESCRIPTION: REST API call to restore a collection from a snapshot with a specified priority setting. The priority determines how conflicts between snapshot data and existing data are resolved.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/snapshots.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT 'http://{qdrant-url}:6333/collections/{collection_name}/snapshots/recover'\n    -H 'api-key: ********' \n    -H 'Content-Type: application/json' \n    -d '{\"location\":\"http://example.com/path/to/snapshot.snapshot\", \"priority\": \"snapshot\"}'\n```\n\n----------------------------------------\n\nTITLE: Selecting Documents for Processing in Python\nDESCRIPTION: Selects the first 50 documents from loaded datasets and preprocesses them using the preprocess_dataset function. This snippet sets up the dataset for storage in a vector database, enabling complex information retrieval tasks.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nhf_splits = preprocess_dataset(hugging_face_doc.load()[:number_of_docs])\ntransformer_splits = preprocess_dataset(transformers_doc.load()[:number_of_docs])\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index in Qdrant with TypeScript\nDESCRIPTION: The snippet demonstrates how to create a payload index using the Qdrant client in TypeScript. It requires a valid collection name and specifies 'field_name' and 'field_schema' to define the keyword type and indicate tenant status. No output is specified, but it configures the index in the mentioned Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/with-group-id-as-tenant/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"group_id\",\n  field_schema: {\n    type: \"keyword\",\n    is_tenant: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering with FieldCondition and MatchExcept in Qdrant\nDESCRIPTION: This snippet shows how to create a `FieldCondition` with a `MatchExcept` condition.  This condition filters points where the \"color\" field does *not* have values of \"black\" or \"yellow\". It is commonly used to exclude particular values when querying or filtering data in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-except/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"from qdrant_client.http.models import FieldCondition, MatchExcept\\n\\ncondition = FieldCondition(\\n    key=\"color\",\\n    match=MatchExcept(must_not=[\\\"black\\\", \\\"yellow\\\"])\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Updating a Collection with Strict Mode in Java\nDESCRIPTION: Java code for updating an existing Qdrant collection to enable strict mode with unindexed filtering retrieve restriction using the Qdrant Java client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.grpc.Collections.StrictModeConfigBuilder;\nimport io.qdrant.client.grpc.Collections.UpdateCollection;\n\nclient.updateCollectionAsync(\n    UpdateCollection.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setStrictModeConfig(\n            StrictModeConfig.newBuilder().setEnabled(true).setUnindexedFilteringRetrieve(true).build())\n        .build());\n```\n\n----------------------------------------\n\nTITLE: Querying Point Groups in Qdrant using Rust Client\nDESCRIPTION: Demonstrates how to build and execute a grouped query using QueryPointGroupsBuilder. The query includes a 4-dimensional vector search with group size of 2, includes payload and vectors in results, and limits to 4 results. Uses the async/await pattern for execution.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-groups/basic/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::QueryPointGroupsBuilder;\n\nclient\n    .query_groups(\n        QueryPointGroupsBuilder::new(\"{collection_name}\", \"document_id\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .group_size(2u64)\n            .with_payload(true)\n            .with_vectors(true)\n            .limit(4u64),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Checking Color Values with Match Any in Qdrant\nDESCRIPTION: This snippet uses the Match Any condition to filter records where the 'color' field can be either 'black' or 'yellow'. This approach is similar to the IN operator found in SQL databases. It is crucial for building flexible query filters based on multiple acceptable values.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-any/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfilter = {\"color\": {\"match_any\": [\"black\", \"yellow\"]}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Qdrant Indexing\nDESCRIPTION: Example of setting up and using a Qdrant indexer for document indexing\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/genkit.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const qdrantIndexer = qdrantIndexerRef({\n  collectionName: 'some-collection',\n  displayName: 'Some Collection indexer',\n});\n\nawait index({ indexer: qdrantIndexer, documents });\n```\n\n----------------------------------------\n\nTITLE: Complete Semantic-Router Implementation Example\nDESCRIPTION: Full example showing route definition, encoder setup, and usage with Qdrant for semantic routing\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/semantic-router.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom semantic_router import Route\nfrom semantic_router.encoders import OpenAIEncoder\nfrom semantic_router.index import QdrantIndex\nfrom semantic_router.layer import RouteLayer\n\n# we could use this as a guide for our chatbot to avoid political conversations\npolitics = Route(\n    name=\"politics value\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\n# this could be used as an indicator to our chatbot to switch to a more\n# conversational prompt\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\n# we place both of our decisions together into single list\nroutes = [politics, chitchat]\n\nos.environ[\"OPENAI_API_KEY\"] = \"<YOUR_API_KEY>\"\nencoder = OpenAIEncoder()\n\nrl = RouteLayer(\n    encoder=encoder,\n    routes=routes,\n    index=QdrantIndex(location=\":memory:\"),\n)\n\nprint(rl(\"What have you been upto?\").name)\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata Index in Qdrant using HTTP\nDESCRIPTION: This snippet demonstrates how to create a payload index for a metadata field 'category' using an HTTP PUT request. It requires Qdrant to be running and accessible at the specified endpoint. The index helps organize metadata efficiently for faster retrieval during searches.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-filtering.md#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/computers/index\n{\n    \"field_name\": \"category\",\n    \"field_schema\": \"keyword\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Relari Dataset from GitLab Policies\nDESCRIPTION: Creates a synthetic dataset in Relari using the downloaded GitLab legal policies for evaluation purposes.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-relari.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\ndir = Path(\"gitlab_legal_policies\")\ntask_id = client.synth.new(\n    project_id=proj[\"id\"],\n    name=\"Gitlab Legal Policies\",\n    samples=30,\n    files=list(dir.glob(\"*.txt\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Qdrant Search with Pagination\nDESCRIPTION: This code demonstrates how to paginate search results by specifying an offset. The query includes parameters to request points with vectors and payloads, sets a limit on the number of results returned, and an offset of 100 to skip the first 100 results before returning the next set of results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-offset/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis code snippet demonstrates how to paginate search results by specifying an offset to skip the initial results and retrieve the subsequent results. The query includes parameters to request points with vectors and payloads, set a limit on the number of results returned, and an offset of 100 to skip the first 100 results before returning the next set of results.\n```\n\n----------------------------------------\n\nTITLE: Printing Average Precision at 5\nDESCRIPTION: This snippet calls the `avg_precision_at_k` function with `k=5` and prints the result. This demonstrates how to use the defined function to calculate and display the average precision at a specific value of k.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/retrieval-quality.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(f\"avg(precision@5) = {avg_precision_at_k(k=5)}\")\n```\n\n----------------------------------------\n\nTITLE: Distance Matrix Calculation with Offset Format\nDESCRIPTION: Example of using the distance matrix API with the offset format output. Returns the sparse matrix as arrays of row offsets, column offsets, scores, and point ids.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/explore.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/distance-matrix/offsets-format/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Bool and Keyword Payload Types in Qdrant\nDESCRIPTION: Demonstrates storage of boolean and string (keyword) values in single and array formats\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/payload.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"is_delivered\": true,\n    \"responses\": [false, false, true, false]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Alice\",\n    \"friends\": [\n        \"bob\",\n        \"eva\",\n        \"jack\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up LLM Answer Generation with Python\nDESCRIPTION: Configures the prompt builder and Hugging Face model for generating answers from retrieved documents.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom haystack.components.builders.prompt_builder import PromptBuilder\nfrom haystack.components.generators import HuggingFaceTGIGenerator\n\nprompt_builder = PromptBuilder(\"\"\"\nGiven the following information, answer the question.\n\nContext: \n{% for document in documents %}\n    {{ document.content }}\n{% endfor %}\n\nQuestion: {{ query }}\n\"\"\")\nllm = HuggingFaceTGIGenerator(\n    model=\"mistralai/Mistral-7B-Instruct-v0.1\",\n    url=os.environ[\"INFERENCE_ENDPOINT_URL\"],\n    generation_kwargs={\n        \"max_new_tokens\": 1000,  # Allow longer responses\n    },\n)\n\nsearch_pipeline.add_component(\"prompt_builder\", prompt_builder)\nsearch_pipeline.add_component(\"llm\", llm)\n\nsearch_pipeline.connect(\"retriever.documents\", \"prompt_builder.documents\")\nsearch_pipeline.connect(\"prompt_builder.prompt\", \"llm.prompt\")\n```\n\n----------------------------------------\n\nTITLE: Querying with Qdrant Go Client\nDESCRIPTION: This code snippet demonstrates querying a Qdrant collection in batch mode using the Go client. It initializes a client, defines a filter to match documents where the 'city' is 'London', and then executes a QueryBatch operation with two query points, each with the same filter and collection name. The `context.Background()` is used as the context for the operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/batch-search/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nfilter := qdrant.Filter{\n\tMust: []*qdrant.Condition{\n\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t},\n}\n\nclient.QueryBatch(context.Background(), &qdrant.QueryBatchPoints{\n\tCollectionName: \"{collection_name}\",\n\tQueryPoints: []*qdrant.QueryPoints{\n\t\t{\n\t\t\tCollectionName: \"{collection_name}\",\n\t\t\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\t\t\tFilter:         &filter,\n\t\t},\n\t\t{\n\t\t\tCollectionName: \"{collection_name}\",\n\t\t\tQuery:          qdrant.NewQuery(0.5, 0.3, 0.2, 0.3),\n\t\t\tFilter:         &filter,\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Configure On-Disk Vector and HNSW Storage\nDESCRIPTION: Configuration for high precision with low memory usage by storing both vectors and HNSW index on disk.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/optimize.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"vectors\": {\n    \"size\": 768,\n    \"distance\": \"Cosine\",\n    \"on_disk\": true\n},\n\"hnsw_config\": {\n    \"m\": 16,\n    \"ef_construct\": 100,\n    \"full_scan_threshold\": 10000,\n    \"on_disk\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Collection with Advanced Configuration\nDESCRIPTION: Configures a new vector collection with 768-dimensional vectors, using cosine distance metric, with on-disk storage enabled for vectors and HNSW index\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-vectors-and-hnsw-on-disk/go.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t\tOnDisk:   qdrant.PtrOf(true),\n\t}),\n\tHnswConfig: &qdrant.HnswConfigDiff{\n\t\tOnDisk: qdrant.PtrOf(true),\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index using Qdrant Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a payload index in a Qdrant client. It takes the collection name and an object defining the field name and schema, specifying the type and tenant properties. Ensure that the Qdrant client is properly initialized before calling this function.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/keyword-is-tenant/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"payload_field_name\",\n  field_schema: {\n    type: \"keyword\",\n    is_tenant: true\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Similarity Search in Qdrant using Python Client\nDESCRIPTION: Example of executing a similarity search query using the Qdrant Python client to retrieve the top 5 results from a collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/data-privacy.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresponse = qdrant_client.search(\n    collection_name=\"demo_collection\",\n    query_vector=search_vector,\n    limit=5  # Number of results to retrieve\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index in Qdrant with Java\nDESCRIPTION: This Java snippet demonstrates the use of Qdrant's Java SDK to create a payload index on a specific field in a Qdrant collection. It initializes a connection to the Qdrant server using QdrantGrpcClient. The snippet sets text-specific index parameters, including tokenization settings with Word tokenizer type, and defines token length constraints. The key dependencies include the Qdrant Java client libraries and access to a running Qdrant server.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/simple-full-text/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.PayloadIndexParams;\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\nimport io.qdrant.client.grpc.Collections.TextIndexParams;\nimport io.qdrant.client.grpc.Collections.TokenizerType;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createPayloadIndexAsync(\n        \"{collection_name}\",\n        \"name_of_the_field_to_index\",\n        PayloadSchemaType.Text,\n        PayloadIndexParams.newBuilder()\n            .setTextIndexParams(\n                TextIndexParams.newBuilder()\n                    .setTokenizer(TokenizerType.Word)\n                    .setMinTokenLen(2)\n                    .setMaxTokenLen(10)\n                    .setLowercase(true)\n                    .build())\n            .build(),\n        null,\n        null,\n        null)\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Upserting Vector Data to Qdrant Collection in C#\nDESCRIPTION: This code initializes a Qdrant client and upserts multiple points with vector data into a specified collection. It demonstrates how to structure point data with IDs and multiple vector dimensions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/sparse-vectors/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpsertAsync(\n\tcollectionName: \"{collection_name}\",\n\tpoints: new List<PointStruct>\n\t{\n\t\tnew()\n\t\t{\n\t\t\tId = 1,\n\t\t\tVectors = new Dictionary<string, Vector> { [\"text\"] = ([1.0f, 2.0f], [6, 7]) }\n\t\t},\n\t\tnew()\n\t\t{\n\t\t\tId = 2,\n\t\t\tVectors = new Dictionary<string, Vector>\n\t\t\t{\n\t\t\t\t[\"text\"] = ([0.1f, 0.2f, 0.3f, 0.4f, 0.5f], [1, 2, 3, 4, 5])\n\t\t\t}\n\t\t}\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository\nDESCRIPTION: This command clones the specified GitHub repository to your local machine, allowing you to access the project's files and code.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/qdrant/examples.git\ncd agentic_rag_zoom_crewai\n```\n\n----------------------------------------\n\nTITLE: Configuring Sparse Vectors in Qdrant Collection via cURL\nDESCRIPTION: Makes a PUT request to configure sparse vectors for a Qdrant collection. The request creates or updates a collection with an empty sparse vector configuration for the 'text' field. This enables sparse vector support for text-based search operations in the specified collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"sparse_vectors\": {\n        \"text\": { }\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Creating Price Range Field Condition in Qdrant\nDESCRIPTION: Establishes a field condition that filters items with prices between 100.0 and 450.0, inclusive. This allows for precise product selection based on price constraints.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/range/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nFieldCondition(key='price', range={'gte': 100.0, 'lte': 450.0})\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client\nDESCRIPTION: Creates a Qdrant client instance in memory mode for local experimentation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\nqdrant_client = QdrantClient(\":memory:\") # Qdrant is running from RAM.\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Upserting Data in TypeScript\nDESCRIPTION: This snippet shows how to create a Qdrant client instance and use it to upsert a point into a collection. It includes setting up the client with a local host and port, and then inserting a point with an ID, color payload, and vector data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/uuid-one-point-simple/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.upsert(\"{collection_name}\", {\n  points: [\n    {\n      id: \"5c56c793-69f3-4fbf-87e6-c4bf54c28c26\",\n      payload: {\n        color: \"red\",\n      },\n      vector: [0.9, 0.1, 0.1],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: JWT Header Structure for Qdrant Authentication\nDESCRIPTION: Example of the JSON Web Token header structure used for Qdrant authentication. Qdrant uses the HS256 algorithm to decode tokens.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing QdrantClient in C#\nDESCRIPTION: This snippet demonstrates how to initialize a `QdrantClient` in C#, connecting to a Qdrant Cloud instance. It requires the `Qdrant.Client` library. The snippet initializes the client with the host address, whether to use HTTPS and API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart-cloud.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\n  host: \"xyz-example.eu-central.aws.cloud.qdrant.io\",\n  https: true,\n  apiKey: \"<your-api-key>\"\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration\nDESCRIPTION: HTTP PUT request to create or update a Qdrant collection. Configures vector dimension size of 768, Cosine distance metric, and sets memmap threshold optimizer to 20000.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-optimizer-config/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\"\n    },\n    \"optimizers_config\": {\n        \"memmap_threshold\": 20000\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Payload Properties from Points in Qdrant Collection using TypeScript\nDESCRIPTION: This code demonstrates how to remove specific payload properties ('color' and 'price') from multiple vector points (with IDs 0, 3, and 100) in a Qdrant collection. The operation uses the client.deletePayload method to target specific points and remove only the designated payload keys.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-payload/by-point-id/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.deletePayload(\"{collection_name}\", {\n  keys: [\"color\", \"price\"],\n  points: [0, 3, 100],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing LangGraph Workflow in TypeScript\nDESCRIPTION: Creates a LangGraph workflow and adds the Qdrant retriever tool as a node in TypeScript.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langgraph.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StateGraph } from \"@langchain/langgraph\";\nimport { ToolNode } from \"@langchain/langgraph/prebuilt\";\n\n// Define the graph\nconst workflow = new StateGraph(SomeGraphState)\n  // Define the nodes which we'll cycle between.\n  .addNode(\"retrieve\", new ToolNode([tool]));\n\nconst graph = workflow.compile();\n```\n\n----------------------------------------\n\nTITLE: Performing Scroll Operation with Qdrant Client in Rust\nDESCRIPTION: This code initializes a Qdrant client and performs a scroll operation on a specified collection. It uses a filter to retrieve points with specific IDs. The client is connected to a local Qdrant instance running on port 6334.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-has-id-filter/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n    \nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\")\n            .filter(Filter::must([Condition::has_id([1, 3, 5, 7, 9, 11])])),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Performing Faceted Search with Filters using Qdrant Rust Client\nDESCRIPTION: This snippet demonstrates how to initialize a Qdrant client and perform a faceted search with filtering. It creates a connection to a Qdrant server, builds a facet query on a specific field with a limit, and applies a filter to match a specific condition.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/facet-counts/simple-with-filter/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, FacetCountsBuilder, Filter};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .facet(\n         FacetCountsBuilder::new(\"{collection_name}\", \"size\")\n             .limit(10)\n             .filter(Filter::must(vec![Condition::matches(\n                 \"color\",\n                 \"red\".to_string(),\n             )])),\n     )\n     .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Sparse Vectors in Rust\nDESCRIPTION: Demonstrates initialization of a Qdrant client and creation of a collection with both sparse and dense vector configurations. The code sets up a sparse vector index with Float32 datatype and a 128-dimensional dense vector using Cosine distance with Float16 datatype.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-float16-sparse-and-dense/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::\n    CreateCollectionBuilder, Datatype, Distance, SparseIndexConfigBuilder, SparseVectorParamsBuilder, SparseVectorsConfigBuilder, VectorParamsBuilder\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet mut sparse_vector_config = SparseVectorsConfigBuilder::default();\nsparse_vector_config.add_named_vector_params(\n    \"text\",\n    SparseVectorParamsBuilder::default()\n        .index(SparseIndexConfigBuilder::default().datatype(Datatype::Float32)),\n);\n\nlet create_collection = CreateCollectionBuilder::new(\"{collection_name}\")\n    .sparse_vectors_config(sparse_vector_config)\n    .vectors_config(\n        VectorParamsBuilder::new(128, Distance::Cosine).datatype(Datatype::Float16),\n    );\n\nclient.create_collection(create_collection).await?;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Aliases from Qdrant Server using cURL\nDESCRIPTION: This command sends a GET request to the Qdrant server running on localhost port 6333 to fetch all configured aliases. Aliases in Qdrant allow referring to collections by alternative names.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/list-all/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET http://localhost:6333/aliases\n```\n\n----------------------------------------\n\nTITLE: Filtering Qdrant data with JSON\nDESCRIPTION: This JSON configuration defines a filter for a Qdrant query. The filter targets the 'color' field and uses a 'match' condition to include documents where the color is either 'black' or 'yellow'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-any/json.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"color\",\n  \"match\": {\n    \"any\": [\"black\", \"yellow\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Arxiv.org Abstracts Dataset Snapshot via Qdrant API\nDESCRIPTION: HTTP request to import the Arxiv.org abstracts dataset snapshot into a Qdrant collection using the API.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/datasets.md#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/snapshots/recover\n{\n  \"location\": \"https://snapshots.qdrant.io/arxiv_abstracts-3083016565637815127-2023-06-02-07-26-29.snapshot\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with Nvidia Embed-QA Model\nDESCRIPTION: Sends text documents to Nvidia's embedding API to generate vector representations using the NV-Embed-QA model with a 1024-dimensional embedding.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/nvidia.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npayload = {\n    \"input\": texts,\n    \"input_type\": \"passage\",\n    \"model\": \"NV-Embed-QA\",\n}\n\nresponse_body = nvidia_session.post(\n    NVIDIA_BASE_URL, headers=headers, json=payload\n).json()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet body = {\n    \"input\": texts,\n    \"input_type\": \"passage\",\n    \"model\": \"NV-Embed-QA\"\n}\n\nlet response = await fetch(NVIDIA_BASE_URL, {\n    method: \"POST\",\n    body: JSON.stringify(body),\n    headers\n});\n\nlet response_body = await response.json()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database in Python\nDESCRIPTION: This snippet demonstrates how to create a QdrantClient instance connected to a local Qdrant server and perform a vector similarity search query. It includes parameters for retrieving vectors and payload data, with pagination controls through limit and offset.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-offset/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    with_vectors=True,\n    with_payload=True,\n    limit=10,\n    offset=100,\n)\n```\n\n----------------------------------------\n\nTITLE: Querying the RAG Function (Out of Context)\nDESCRIPTION: This code snippet calls the `rag` function with the question \"Where is the nearest grocery store?\". Since this question is unlikely to be addressed by the documents in the Qdrant database, the LLM should respond with \"I don't know\". This example demonstrates the pipeline's ability to avoid hallucinating answers.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/rag-deepseek.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n\"rag(\\\"Where is the nearest grocery store?\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Querying Points in Qdrant Collection with Python\nDESCRIPTION: This code demonstrates how to query a Qdrant collection using a dense vector. The query_points method searches for similar vectors in the specified collection using a 4-dimensional vector as the query input.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/simple-dense/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7], # <--- Dense vector\n)\n```\n\n----------------------------------------\n\nTITLE: Exposing a Qdrant Cluster with LoadBalancer\nDESCRIPTION: This YAML snippet defines a Kubernetes LoadBalancer service. It's configured to expose a Qdrant cluster to the outside world, allowing access via HTTP and gRPC ports. The configuration includes metadata such as service name, namespace, and port mappings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/hybrid-cloud-cluster-creation.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: qdrant-9a9f48c7-bb90-4fb2-816f-418a46a74b24-lb\n  namespace: qdrant-namespace\nspec:\n  type: LoadBalancer\n  ports:\n  - name: http\n    port: 6333\n  - name: grpc\n    port: 6334\n  selector:\n    app: qdrant\n    cluster-id: 9a9f48c7-bb90-4fb2-816f-418a46a74b24\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in TypeScript\nDESCRIPTION: This code initializes a Qdrant client and creates a new collection. It specifies the vector size, distance metric, and initializes the collection from an existing one. The client connects to a local Qdrant instance on port 6333.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/init-from/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: { size: 100, distance: \"Cosine\" },\n  init_from: { collection: \"{from_collection_name}\" },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Date Range Filter Object - TypeScript\nDESCRIPTION: This TypeScript snippet initializes a date range filter object that specifies boundaries for querying data. It includes parameters for greater than (gt) and less than or equal (lte) dates, allowing for flexible date-based queries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/datetime-range/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    key: 'date',\n    range: {\n        gt: '2023-02-08T10:49:00Z',\n        gte: null,\n        lt: null,\n        lte: '2024-01-31T10:14:31Z'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant with Helm in Kubernetes\nDESCRIPTION: Commands to add the Qdrant Helm repository and install Qdrant in a Kubernetes cluster. This provides a basic Kubernetes deployment without the advanced features of Qdrant Cloud.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add qdrant https://qdrant.to/helm\nhelm install qdrant qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Executing Random Sampling Query with Qdrant in Go\nDESCRIPTION: Performs a query operation on a Qdrant collection using the QueryGroups method with a random sampling approach. The query requires a collection name and uses the context package for operation management.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/random-sample/go.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.QueryGroups(context.Background(), &qdrant.QueryPointGroups{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuerySample(qdrant.Sample_Random),\n})\n```\n\n----------------------------------------\n\nTITLE: JWT Token Expiration Configuration\nDESCRIPTION: Example of configuring JWT token expiration using Unix timestamp in seconds.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 1640995200\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dataset Snapshot to Qdrant\nDESCRIPTION: HTTP request to recover and import the Wolt dataset snapshot into a Qdrant collection using the snapshot URL.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/datasets.md#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/snapshots/recover\n{\n  \"location\": \"https://snapshots.qdrant.io/wolt-clip-ViT-B-32-2446808438011867-2023-12-14-15-55-26.snapshot\"\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Dataset from Hugging Face\nDESCRIPTION: This snippet loads a dataset of arXiv titles and instructorxl embeddings from the Hugging Face hub in streaming mode. It uses the `datasets` library to access the dataset specified by its name.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/retrieval-quality.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datasets import load_dataset\n\ndataset = load_dataset(\n    \"Qdrant/arxiv-titles-instructorxl-embeddings\", split=\"train\", streaming=True\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Credentials in DLT\nDESCRIPTION: TOML configuration for setting up Qdrant connection details in the DLT secrets file. This defines the location and API key for connecting to a Qdrant instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/dlt.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[destination.qdrant.credentials]\nlocation = \"https://your-qdrant-url\"\napi_key = \"your-qdrant-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Upserting Multi-Vector Points in Qdrant with TypeScript\nDESCRIPTION: Demonstrates how to upsert multiple data points with both image and text vectors into a Qdrant collection. Each point contains a unique ID and two separate vector spaces - one for image embeddings (4-dimensional) and one for text embeddings (8-dimensional).\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-multiple-vectors/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.upsert(\"{collection_name}\", {\n  points: [\n    {\n      id: 1,\n      vector: {\n        image: [0.9, 0.1, 0.1, 0.2],\n        text: [0.4, 0.7, 0.1, 0.8, 0.1, 0.1, 0.9, 0.2],\n      },\n    },\n    {\n      id: 2,\n      vector: {\n        image: [0.2, 0.1, 0.3, 0.9],\n        text: [0.5, 0.2, 0.7, 0.4, 0.7, 0.2, 0.3, 0.9],\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Vector vs BTreeSet Iteration in Rust\nDESCRIPTION: This code snippet demonstrates the performance difference between iterating over a plain vector (array) and a BTreeSet in Rust. It generates a large set of random numbers, stores them in both data structures, and measures the time taken to iterate over all elements.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/immutable-data-structures.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse std::collections::BTreeSet;\nuse rand::Rng;\n\nfn main() {\n    // Benchmark plain vector VS btree in a task of iteration over all elements\n    let mut rand = rand::thread_rng();\n    let vector: Vec<_> = (0..1000000).map(|_| rand.gen::<u64>()).collect();\n    let btree: BTreeSet<_> = vector.iter().copied().collect();\n\n    {\n        let mut sum = 0;\n        for el in vector {\n            sum += el;\n        }\n    } // Elapsed: 850.924µs\n\n    {\n        let mut sum = 0;\n        for el in btree {\n            sum += el;\n        }\n    } // Elapsed: 5.213025ms, ~6x slower\n\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming User Ratings into Sparse Vectors (Python)\nDESCRIPTION: Python code to transform user ratings into sparse vectors for indexing in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/recommendation-system-ovhcloud.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import defaultdict\n\nuser_sparse_vectors = defaultdict(lambda: {\"values\": [], \"indices\": []})\n\nfor row in ratings.itertuples():\n    user_sparse_vectors[row.user_id][\"values\"].append(row.rating)\n    user_sparse_vectors[row.user_id][\"indices\"].append(row.movie_id)\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Strict Mode in TypeScript\nDESCRIPTION: TypeScript code for creating a new Qdrant collection with strict mode enabled and unindexed filtering retrieve restriction using the Qdrant JavaScript client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  strict_mode_config: {\n    enabled: true,\n    unindexed_filtering_retrieve: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Points with Quantization in Qdrant\nDESCRIPTION: HTTP POST request to search for similar vectors in a Qdrant collection. The request includes a query vector, quantization parameters to control rescoring, and a limit for the number of results to return. The endpoint is parameterized with the collection name.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/disable-quantization-rescoring/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"params\": {\n        \"quantization\": {\n            \"rescore\": false\n        }\n    },\n    \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing S3 URL for Document Retrieval - Python\nDESCRIPTION: This helper function takes a S3 URL as input and splits it into bucket name and object key. This is crucial for accessing files stored in Amazon S3.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-ingestion-beginners.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef parse_s3_url(s3_url):\n    parts = s3_url.replace(\"s3://\", \"\").split(\"/\", 1)\n    bucket_name = parts[0]\n    object_key = parts[1]\n    return bucket_name, object_key\n```\n\n----------------------------------------\n\nTITLE: Initializing Auto Prompt Optimization Task\nDESCRIPTION: Code for setting up an optimization task in Relari using the CORRECTNESS metric to evaluate prompt effectiveness for a GitLab Legal Policy RAG system.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-relari.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntask_id = client.prompts.optimize(\n    name=\"GitLab Legal Policy RAG Prompt\",\n    project_id=proj[\"id\"],\n    dataset_id=dataset_info[\"id\"],\n    prompt=base_prompt,\n    llm=\"gpt-4o-mini\",\n    task_description=\"Answer the question using the provided context.\",\n    metric=client.prompts.Metrics.CORRECTNESS,\n)\nprint(f\"Optimization task submitted with ID: {task_id}\")\n```\n\n----------------------------------------\n\nTITLE: Converting Upstage Model Outputs to Qdrant Points in TypeScript\nDESCRIPTION: Transforms the embedding results from Upstage into Qdrant point structures in TypeScript, including the embedding vector and original text as payload.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/upstage.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet points = response_body.data.map((data, i) => {\n    return {\n        id: i,\n        vector: data.embedding,\n        payload: {\n            text: texts[i]\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting a Collection Alias in Qdrant using HTTP POST\nDESCRIPTION: This HTTP request demonstrates how to delete an alias named 'production_collection' through the Qdrant API. The request is sent to the collection aliases endpoint and contains an action array with a delete_alias operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/delete/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/aliases\n{\n    \"actions\": [\n        {\n            \"delete_alias\": {\n                \"alias_name\": \"production_collection\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Patch Calculation for ColQwen Model in Python\nDESCRIPTION: This snippet extends patch calculation for the ColQwen model by incorporating spatial merge size, accommodating its dynamic approach to determining patch dimensions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/pdf-retrieval-at-scale.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmodel_processor.get_n_patches(\n    image_size, \n    patch_size=model.patch_size,\n    spatial_merge_size=model.spatial_merge_size\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Vector Search with Quantization Parameters\nDESCRIPTION: This code snippet demonstrates how to initialize a Qdrant client connected to a local instance and perform a vector similarity search query with quantization settings. The query includes a 4-dimensional vector and disables rescoring in the quantization search parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-disabled-rescoring/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    search_params=models.SearchParams(\n        quantization=models.QuantizationSearchParams(rescore=False)\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating MatchExcept Filter with Qdrant Go\nDESCRIPTION: This snippet demonstrates how to create a `MatchExcept` filter condition using the Qdrant Go client. It excludes vectors where the \"color\" field matches either \"black\" or \"yellow\". This filter can be used within a larger Qdrant query to refine search results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-except/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewMatchExcept(\"color\", \"black\", \"yellow\")\n```\n\n----------------------------------------\n\nTITLE: Exposing Qdrant Cluster with LoadBalancer in YAML\nDESCRIPTION: This YAML snippet configures a QdrantCluster to be exposed externally using a LoadBalancer service type. It includes necessary annotations for AWS integration. Users must ensure correct load balancer configuration according to their respective cloud providers.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/qdrant-cluster-management.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: qdrant.io/v1\nkind: QdrantCluster\nmetadata:\n  name: qdrant-a7d8d973-0cc5-42de-8d7b-c29d14d24840\n  labels:\n    cluster-id: \"a7d8d973-0cc5-42de-8d7b-c29d14d24840\"\n    customer-id: \"acme-industries\"\nspec:\n  id: \"a7d8d973-0cc5-42de-8d7b-c29d14d24840\"\n  version: \"v1.11.3\"\n  size: 1\n  resources:\n    cpu: 100m\n    memory: \"1Gi\"\n    storage: \"2Gi\"\n  service:\n    type: LoadBalancer\n    annotations:\n      service.beta.kubernetes.io/aws-load-balancer-type: nlb\n```\n\n----------------------------------------\n\nTITLE: Inserting a Document into MongoDB\nDESCRIPTION: This snippet illustrates how to create a document describing a Qdrant vector and insert it into the MongoDB collection. It includes embedding the document description into a vector and defining the payload structure.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/data-streaming-kafka-qdrant.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Step 4: Create a Document to Insert\n\ndescription = \"qdrant is a high available vector search engine\"\nembedding_model = TextEmbedding(model_name=embed_model_name)\nvector = next(embedding_model.embed(documents=description)).tolist()\ndocument = {\n    \"collection_name\": collection_name,\n    \"id\": 1,\n    \"vector\": vector,\n    \"payload\": {\n        \"name\": \"qdrant\",\n        \"description\": description,\n        \"url\": \"https://qdrant.tech/documentation\"\n    }\n}\n\n# Step 5: Insert the Document into the Collection\nresult = collection.insert_one(document)\n\n# Step 6: Print the Inserted Document's ID\nprint(\"Inserted document ID:\", result.inserted_id)\n```\n\n----------------------------------------\n\nTITLE: Disabling Vector Indexing in Qdrant Collection\nDESCRIPTION: Creates a new collection with indexing disabled by setting indexing_threshold to 0. This is useful during initial large dataset uploads to avoid unnecessary indexing operations. Includes vector configuration with size 768 and Cosine distance metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\"\n    },\n    \"optimizers_config\": {\n        \"indexing_threshold\": 0\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n    optimizers_config=models.OptimizersConfigDiff(\n        indexing_threshold=0,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Index with Qdrant TypeScript Client\nDESCRIPTION: This snippet demonstrates how to create a payload index in a Qdrant collection using the TypeScript client. The `createPayloadIndex` method requires a collection name and an object specifying the field name and schema, with options such as `type` and `on_disk`. This setup is crucial for organizing and searching payload data efficiently.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/keyword-on-disk/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"payload_field_name\",\n  field_schema: {\n    type: \"keyword\",\n    on_disk: true\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Datetime Range Filtering in Qdrant\nDESCRIPTION: Demonstrates the use of datetime range conditions for filtering datetime payloads. Supports RFC 3339 formats and automatically converts to UTC.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/filtering.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"must\": [\n    {\n      \"key\": \"datetime_field\",\n      \"range\": {\n        \"gte\": \"2022-01-01T00:00:00Z\",\n        \"lt\": \"2022-12-31T23:59:59Z\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Field Index in Qdrant Collection using Rust\nDESCRIPTION: This Rust snippet demonstrates how to create a field index in a Qdrant collection by using the `qdrant_client` crate. The code involves creating an instance of `CreateFieldIndexCollectionBuilder`, specifying the collection name, field name, and field type, and then using the `create_field_index` method to initiate the indexing process. The method is awaited asynchronously. Dependencies include the `qdrant_client` crate and necessary futures for asynchronous execution.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/simple-keyword/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{CreateFieldIndexCollectionBuilder, FieldType};\n\nclient\n    .create_field_index(\n        CreateFieldIndexCollectionBuilder::new(\n            \"{collection_name}\",\n            \"name_of_the_field_to_index\",\n            FieldType::Keyword,\n        )\n        .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index in Qdrant with Keyword Schema\nDESCRIPTION: Initializes a Qdrant client connection and creates a payload index with keyword schema type and tenant configuration. Configures index parameters for a specific collection and payload field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/keyword-is-tenant/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.PayloadIndexParams;\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\nimport io.qdrant.client.grpc.Collections.KeywordIndexParams;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createPayloadIndexAsync(\n        \"{collection_name}\",\n        \"payload_field_name\",\n        PayloadSchemaType.Keyword,\n        PayloadIndexParams.newBuilder()\n            .setKeywordIndexParams(\n                KeywordIndexParams.newBuilder()\n                    .setIsTenant(true)\n                    .build())\n            .build(),\n        null,\n        null,\n        null)\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant for Semantic Search and Calculating Answer Positions\nDESCRIPTION: This code snippet demonstrates how to use Qdrant to perform semantic search on a 'pubmed_qa' collection. It finds the position of the expected answer for each question, which is used to calculate accuracy@k for different values of k.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qa-with-cohere-and-qdrant.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Finding the position at which Qdrant provided the expected answer for each question. \n# That allows to calculate accuracy@k for different values of k.\nk_max = 10\nanswer_positions = []\nfor embedding, pubid in tqdm(zip(question_response.embeddings, ids)):\n    response = qdrant_client.search(\n        collection_name=\"pubmed_qa\",\n        query_vector=embedding,\n        limit=k_max,\n    )\n\n    answer_ids = [record.id for record in response]\n    if pubid in answer_ids:\n        answer_positions.append(answer_ids.index(pubid))\n    else:\n        answer_positions.append(-1)\n```\n\n----------------------------------------\n\nTITLE: Creating Geo Bounding Box Condition in C#\nDESCRIPTION: This code snippet demonstrates how to create a geo-bounding box condition using the Qdrant C# client library. It filters points based on their location, ensuring they fall within the specified latitude and longitude boundaries. This requires the Qdrant.Client NuGet package.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-bounding-box/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing static Qdrant.Client.Grpc.Conditions;\n\nGeoBoundingBox(\"location\", 52.520711, 13.403683, 52.495862, 13.455868);\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Executing Random Sample Query in Java\nDESCRIPTION: This code demonstrates how to create a Qdrant client connection to a local server and execute a random sampling query on a collection. It uses the QdrantClient and QdrantGrpcClient classes to establish a connection and then performs an asynchronous query operation with the sample method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/random-sample/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.QueryFactory.sample;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.Sample;\n\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\n\nclient\n    .queryAsync(\n        QueryPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setQuery(sample(Sample.Random))\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Loading ColQwen Model and Processor\nDESCRIPTION: Optional setup for initializing ColQwen2 VLLM model and processor with similar hardware configuration options as ColPali.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/pdf-retrieval-at-scale.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom colpali_engine.models import ColQwen2, ColQwen2Processor\n\ncolqwen_model = ColQwen2.from_pretrained(\n        \"vidore/colqwen2-v0.1\",\n        torch_dtype=torch.bfloat16,\n        device_map=\"mps\", # Use \"cuda:0\" for GPU, \"cpu\" for CPU, or \"mps\" for Apple Silicon\n    ).eval()\n\ncolqwen_processor = ColQwen2Processor.from_pretrained(\"vidore/colqwen2-v0.1\")\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with InstructorXL for Arxiv.org Abstracts in Python\nDESCRIPTION: Python code snippet demonstrating how to generate embeddings for Arxiv.org paper abstracts using the InstructorXL model.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/datasets.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom InstructorEmbedding import INSTRUCTOR\n\nmodel = INSTRUCTOR(\"hkunlp/instructor-xl\")\nsentence = \"The dominant sequence transduction models are based on complex recurrent or convolutional neural networks in an encoder-decoder configuration. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train.\"\ninstruction = \"Represent the Research Paper abstract for retrieval; Input:\"\nembeddings = model.encode([[instruction, sentence]])\n```\n\n----------------------------------------\n\nTITLE: Downloading Dataset with Bash\nDESCRIPTION: Uses wget to download a raw dataset of startup descriptions for processing and neural search. Requires internet access and appropriate permissions to write files in the current directory.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nwget https://storage.googleapis.com/generall-shared-data/startups_demo.json\n```\n\n----------------------------------------\n\nTITLE: Define Dataset\nDESCRIPTION: Defines a list of dictionaries, where each dictionary represents a science fiction book. Each book has metadata such as name, description, author, and year. This data will be used to populate the Qdrant vector database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/search-beginners.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"documents = [\\n    {\\n        \\\"name\\\": \\\"The Time Machine\\\",\\n        \\\"description\\\": \\\"A man travels through time and witnesses the evolution of humanity.\\\",\\n        \\\"author\\\": \\\"H.G. Wells\\\",\\n        \\\"year\\\": 1895,\\n    },\\n    {\\n        \\\"name\\\": \\\"Ender's Game\\\",\\n        \\\"description\\\": \\\"A young boy is trained to become a military leader in a war against an alien race.\\\",\\n        \\\"author\\\": \\\"Orson Scott Card\\\",\\n        \\\"year\\\": 1985,\\n    },\\n    {\\n        \\\"name\\\": \\\"Brave New World\\\",\\n        \\\"description\\\": \\\"A dystopian society where people are genetically engineered and conditioned to conform to a strict social hierarchy.\\\",\\n        \\\"author\\\": \\\"Aldous Huxley\\\",\\n        \\\"year\\\": 1932,\\n    },\\n    {\\n        \\\"name\\\": \\\"The Hitchhiker's Guide to the Galaxy\\\",\\n        \\\"description\\\": \\\"A comedic science fiction series following the misadventures of an unwitting human and his alien friend.\\\",\\n        \\\"author\\\": \\\"Douglas Adams\\\",\\n        \\\"year\\\": 1979,\\n    },\\n    {\\n        \\\"name\\\": \\\"Dune\\\",\\n        \\\"description\\\": \\\"A desert planet is the site of political intrigue and power struggles.\\\",\\n        \\\"author\\\": \\\"Frank Herbert\\\",\\n        \\\"year\\\": 1965,\\n    },\\n    {\\n        \\\"name\\\": \\\"Foundation\\\",\\n        \\\"description\\\": \\\"A mathematician develops a science to predict the future of humanity and works to save civilization from collapse.\\\",\\n        \\\"author\\\": \\\"Isaac Asimov\\\",\\n        \\\"year\\\": 1951,\\n    },\\n    {\\n        \\\"name\\\": \\\"Snow Crash\\\",\\n        \\\"description\\\": \\\"A futuristic world where the internet has evolved into a virtual reality metaverse.\\\",\\n        \\\"author\\\": \\\"Neal Stephenson\\\",\\n        \\\"year\\\": 1992,\\n    },\\n    {\\n        \\\"name\\\": \\\"Neuromancer\\\",\\n        \\\"description\\\": \\\"A hacker is hired to pull off a near-impossible hack and gets pulled into a web of intrigue.\\\",\\n        \\\"author\\\": \\\"William Gibson\\\",\\n        \\\"year\\\": 1984,\\n    },\\n    {\\n        \\\"name\\\": \\\"The War of the Worlds\\\",\\n        \\\"description\\\": \\\"A Martian invasion of Earth throws humanity into chaos.\\\",\\n        \\\"author\\\": \\\"H.G. Wells\\\",\\n        \\\"year\\\": 1898,\\n    },\\n    {\\n        \\\"name\\\": \\\"The Hunger Games\\\",\\n        \\\"description\\\": \\\"A dystopian society where teenagers are forced to fight to the death in a televised spectacle.\\\",\\n        \\\"author\\\": \\\"Suzanne Collins\\\",\\n        \\\"year\\\": 2008,\\n    },\\n    {\\n        \\\"name\\\": \\\"The Andromeda Strain\\\",\\n        \\\"description\\\": \\\"A deadly virus from outer space threatens to wipe out humanity.\\\",\\n        \\\"author\\\": \\\"Michael Crichton\\\",\\n        \\\"year\\\": 1969,\\n    },\\n    {\\n        \\\"name\\\": \\\"The Left Hand of Darkness\\\",\\n        \\\"description\\\": \\\"A human ambassador is sent to a planet where the inhabitants are genderless and can change gender at will.\\\",\\n        \\\"author\\\": \\\"Ursula K. Le Guin\\\",\\n        \\\"year\\\": 1969,\\n    },\\n    {\\n        \\\"name\\\": \\\"The Three-Body Problem\\\",\\n        \\\"description\\\": \\\"Humans encounter an alien civilization that lives in a dying system.\\\",\\n        \\\"author\\\": \\\"Liu Cixin\\\",\\n        \\\"year\\\": 2008,\\n    },\\n]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Tenant-Aware Payload Index\nDESCRIPTION: Creates a keyword payload index for the group_id field with tenant awareness enabled. This optimizes storage for tenant-based access patterns.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/multiple-partitions.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"field_name\": \"group_id\",\n  \"field_schema\": \"keyword\",\n  \"is_tenant\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with QdrantClient in Python\nDESCRIPTION: This snippet demonstrates how to create a collection in Qdrant with specific vector parameters such as size and distance function using the QdrantClient library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/batch-vector-search-with-qdrant.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.conversions.common_types import VectorParams\n\nclient = QdrantClient(\"localhost\", 6333)\nif not client.collection_exists('test_collection'):\n    client.create_collection(\n        collection_name=\"test_collection\",\n        vectors_config=VectorParams(size=4, distance=Distance.EUCLID),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring EncoderHead for Quaterion SimilarityModel\nDESCRIPTION: This snippet shows the configuration of the EncoderHead using a SkipConnectionHead, which is lightweight and resistant to overfitting.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/cars-recognition.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    def configure_head(self, input_embedding_size) -> EncoderHead:\n        return SkipConnectionHead(input_embedding_size, dropout=0.1)\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Group-Based HNSW Configuration in Qdrant\nDESCRIPTION: Sets up a Qdrant collection with optimized HNSW configuration for group-based indexing. Disables global indexing by setting m=0 and enables payload-based indexing with payload_m=16.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/multitenancy.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(\"localhost\", port=6333)\n\nclient.create_collection(\n    collection_name=\"{tenant_data}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n    hnsw_config=models.HnswConfigDiff(\n        payload_m=16,\n        m=0,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Scrolling Points in Qdrant with Go\nDESCRIPTION: This snippet shows how to scroll through points in a Qdrant collection using the Go client. It applies a filter to retrieve points with a specific color and limits the results to a single point. A context is required for the request, and the WithPayload is set to true.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-and-params/go.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"color\", \"red\"),\n\t\t},\n\t},\n\tLimit:       qdrant.PtrOf(uint32(1)),\n\tWithPayload: qdrant.NewWithPayload(true),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Document Processing Tasks in YAML\nDESCRIPTION: YAML configuration for tasks that define the extraction and contextualization of document chunks, including detailed descriptions and expected outputs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/webinar-crewai-qdrant-obsidian.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nextract_chunks:\n  description: >\n    Review the document you got and extract the chunks from it. Each \n    chunk should be a separate piece of information that can be easily understood \n    by a human and is semantically meaningful. If there are two or more chunks that \n    are closely related, but not put next to each other, you can merge them into \n    a single chunk. It is important to cover all the important information in the\n    document and make sure that the chunks are logically structured and coherent.\n    \n    <document>{document}</document>\n  expected_output: >\n    A list of semantic chunks with succinct context of information extracted from \n    the document.\n  agent: chunks_extractor\n\ncontextualize_chunks:\n  description: >\n    You have the chunks we want to situate within the whole document.\n    Please give a short succinct context to situate this chunk within the overall \n    document for the purposes of improving search retrieval of the chunk. Answer \n    only with the succinct context and nothing else.\n  expected_output: >\n    A short succinct context to situate the chunk within the overall document, along\n    with the chunk itself.\n  agent: contextualizer\n```\n\n----------------------------------------\n\nTITLE: Implementing LangGraph Workflow in Python\nDESCRIPTION: Creates a LangGraph workflow and adds the Qdrant retriever tool as a node.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langgraph.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom langgraph.graph import StateGraph\nfrom langgraph.prebuilt import ToolNode\n\nworkflow = StateGraph()\n\n# Define other the nodes which we'll cycle between.\nworkflow.add_node(\"retrieve_qdrant\", ToolNode([retriever_tool]))\n\ngraph = workflow.compile()\n```\n\n----------------------------------------\n\nTITLE: Implementing Distribution-Based Score Fusion with Python in Qdrant\nDESCRIPTION: Python client implementation for using Distribution-Based Score Fusion (DBSF) to combine sparse and dense vector query results. The example shows how to construct prefetch queries with the appropriate vectors and fusion method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.11.x.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=[\n        models.Prefetch(\n            query=models.SparseVector(indices=[1, 42], values=[0.22, 0.8]),\n            using=\"sparse\",\n            limit=20,\n        ),\n        models.Prefetch(\n            query=[0.01, 0.45, 0.67, ...],  # <-- dense vector\n            using=\"dense\",\n            limit=20,\n        ),\n    ],\n    query=models.FusionQuery(fusion=models.Fusion.DBSF),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Go\nDESCRIPTION: This snippet initializes a Qdrant client with the specified host and port. The required dependencies include the 'github.com/qdrant/go-client/qdrant' package. It constructs a new client that can be used to communicate with a Qdrant instance running on 'localhost' at port '6334'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-named-vectors/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database with Cross-Collection Lookup in Rust\nDESCRIPTION: Demonstrates establishing a connection to Qdrant vector database and performing a nearest neighbor search query that looks up vectors from another collection. Uses the qdrant_client crate to connect to a local Qdrant instance and execute a vector similarity search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/by-existing-id-with-lookup/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{LookupLocationBuilder, PointId, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(Query::new_nearest(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\"))\n        .using(\"512d-vector\")\n        .lookup_from(\n            LookupLocationBuilder::new(\"another_collection\")\n                .vector_name(\"image-512\")\n        )\n).await?;\n```\n\n----------------------------------------\n\nTITLE: Configuring Reranking Search with Quantization\nDESCRIPTION: Example of setting up reranking with quantization parameters including rescore and oversampling options for vector search\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-quantization.md#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/search\n\n{\n  \"query\": [0.22, -0.01, -0.98, 0.37],\n  \"params\": {\n    \"quantization\": {\n      \"rescore\": true,\n      \"oversampling\": 2\n    }\n  },\n  \"limit\": 4\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points(\n    collection_name=\"my_collection\",\n    query_vector=[0.22, -0.01, -0.98, 0.37],\n    search_params=models.SearchParams(\n        quantization=models.QuantizationSearchParams(\n            rescore=True,   # Enables rescoring with original vectors\n            oversampling=2  # Retrieves extra candidates for rescoring\n        )\n    ),\n    limit=4  # Desired number of final results\n)\n```\n\n----------------------------------------\n\nTITLE: Searching Qdrant Database using QdrantClient Python\nDESCRIPTION: This snippet initializes a QdrantClient to interact with a Qdrant database running locally. It performs a search query on a specified collection using filter conditions. The search function filters documents where the 'color' is 'red'. The output is limited to 2 results sampled from 10. Dependencies include the 'qdrant_client' module with 'QdrantClient' and 'models'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/distance-matrix/basic/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\\\"http://localhost:6333\\\")\n\nclient.search_matrix_pairs(\n    collection_name=\\\"{collection_name}\\\",\n    sample=10,\n    limit=2,\n    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\\\"color\\\", match=models.MatchValue(value=\\\"red\\\")\n            ),\n        ]\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Points in Qdrant via HTTP\nDESCRIPTION: This snippet demonstrates how to delete specific points from a Qdrant collection using an HTTP POST request. It sends a list of point IDs to be removed from the specified collection. The endpoint is `/collections/{collection_name}/points/delete`, and the request body contains a JSON array of point IDs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-points/simple/http.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /collections/{collection_name}/points/delete\n{\n    \"points\": [0, 3, 100]\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Qdrant Client with JWT Token in Python\nDESCRIPTION: This code snippet shows how to use the generated JWT token to authenticate the QdrantClient in Python. It demonstrates setting up the client with the JWT token as the API key for subsequent requests.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/data-privacy.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nqdrant_client = QdrantClient(\n    \"http://localhost:6333\",\n    api_key=\"<JWT>\", # the token goes here\n)\n# Example search vector\nsearch_vector = [0.1, 0.2, 0.3, 0.4]\n```\n\n----------------------------------------\n\nTITLE: Listing Qdrant Database Snapshots using Python Client\nDESCRIPTION: Establishes a connection to a local Qdrant server on port 6333 and retrieves a list of all full database snapshots. This is useful for backup and recovery operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/list-full-snapshots/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(\"localhost\", port=6333)\n\nclient.list_full_snapshots()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database with TypeScript\nDESCRIPTION: This snippet shows how to import and instantiate a Qdrant client, then use it to perform a vector search query against a named collection. The query includes specific vector indices and values, uses the 'text' search method, and limits results to 3 items.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/sparse-vectors/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: {\n        indices: [1, 3, 5, 7],\n        values: [0.1, 0.2, 0.3, 0.4]\n    },\n    using: \"text\",\n    limit: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Settings in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure Qdrant settings in the 'settings.yaml' file for PrivateGPT. The configuration allows users to specify the Qdrant instance's URL and API key, enabling seamless connection to the desired Qdrant service. Essential parameters include 'url' for the Qdrant service endpoint and 'api_key' for authentication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/platforms/privategpt.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nqdrant:\n    url: \"https://xyz-example.eu-central.aws.cloud.qdrant.io:6333\"\n    api_key: \"<your-api-key>\"\n```\n\n----------------------------------------\n\nTITLE: Updating Vectors in Qdrant using C#\nDESCRIPTION: This snippet illustrates establishing a connection to a Qdrant server on 'localhost' at port 6334 using the Qdrant C# Client. It then asynchronously updates vectors in a collection. The 'UpdateVectorsAsync' method requires the collection name and a list of PointVectors, where each vector is characterized by a unique ID and an array of floats representing image or text data. Ensure that the Qdrant server is running locally for seamless communication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-vectors/simple/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpdateVectorsAsync(\n\tcollectionName: \"{collection_name}\",\n\tpoints: new List<PointVectors>\n\t{\n\t\tnew() { Id = 1, Vectors = (\"image\", new float[] { 0.1f, 0.2f, 0.3f, 0.4f }) },\n\t\tnew()\n\t\t{\n\t\t\tId = 2,\n\t\t\tVectors = (\"text\", new float[] { 0.9f, 0.8f, 0.7f, 0.6f, 0.5f, 0.4f, 0.3f, 0.2f })\n\t\t}\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Dataset Combinations for OpenAI Embedding Models in Python\nDESCRIPTION: This code snippet defines a list of dataset combinations for testing different OpenAI embedding models with varying dimensions. It includes configurations for both 'text-embedding-3-large' and 'text-embedding-3-small' models with dimensions ranging from 512 to 3072.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/binary-quantization-openai.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndataset_combinations = [\n    {\n        \"model_name\": \"text-embedding-3-large\",\n        \"dimensions\": 3072,\n    },\n    {\n        \"model_name\": \"text-embedding-3-large\",\n        \"dimensions\": 1024,\n    },\n    {\n        \"model_name\": \"text-embedding-3-large\",\n        \"dimensions\": 1536,\n    },\n    {\n        \"model_name\": \"text-embedding-3-small\",\n        \"dimensions\": 512,\n    },\n    {\n        \"model_name\": \"text-embedding-3-small\",\n        \"dimensions\": 1024,\n    },\n    {\n        \"model_name\": \"text-embedding-3-small\",\n        \"dimensions\": 1536,\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables in Python\nDESCRIPTION: Load environment variables containing sensitive information like API keys using the dotenv library. This step is crucial for securing the API credentials needed for accessing Qdrant and BraveSearch.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nqdrant_key = os.getenv(\"QDRANT_KEY\")\nqdrant_url = os.getenv(\"QDRANT_URL\")\nbrave_key = os.getenv(\"BRAVE_API_KEY\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Collection Asynchronously in Qdrant with Java\nDESCRIPTION: This Java code snippet demonstrates how to asynchronously delete a collection in Qdrant. It uses the Qdrant client to call the `deleteCollectionAsync` method, passing the collection name as a string, and then uses `.get()` to block until the asynchronous operation completes. Requires the Qdrant client library to be imported.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-collection/simple/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclient.deleteCollectionAsync(\"{collection_name}\").get();\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Operations on Qdrant Collection Points\nDESCRIPTION: This HTTP request demonstrates how to perform multiple operations on points in a Qdrant collection within a single batch request. The operations include inserting/updating points, modifying vectors, managing payload data, and deleting points. Each operation is applied sequentially to the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/batch-update-points/basic/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/batch\n{\n    \"operations\": [\n        {\n            \"upsert\": {\n                \"points\": [\n                    {\n                        \"id\": 1,\n                        \"vector\": [1.0, 2.0, 3.0, 4.0],\n                        \"payload\": {}\n                    }\n                ]\n            }\n        },\n        {\n            \"update_vectors\": {\n                \"points\": [\n                    {\n                        \"id\": 1,\n                        \"vector\": [1.0, 2.0, 3.0, 4.0]\n                    }\n                ]\n            }\n        },\n        {\n            \"delete_vectors\": {\n                \"points\": [1],\n                \"vector\": [\"\"]\n            }\n        },\n        {\n            \"overwrite_payload\": {\n                \"payload\": {\n                    \"test_payload\": \"1\"\n                },\n                \"points\": [1]\n            }\n        },\n        {\n            \"set_payload\": {\n                \"payload\": {\n                    \"test_payload_2\": \"2\",\n                    \"test_payload_3\": \"3\"\n                },\n                \"points\": [1]\n            }\n        },\n        {\n            \"delete_payload\": {\n                \"keys\": [\"test_payload_2\"],\n                \"points\": [1]\n            }\n        },\n        {\n            \"clear_payload\": {\n                \"points\": [1]\n            }\n        },\n        {\"delete\": {\"points\": [1]}}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Vectorizing Image Dataset with Aleph Alpha in Python\nDESCRIPTION: Processes images from the COCO dataset, generates embeddings using Aleph Alpha's API, and prepares data for storage in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/aleph-alpha-search.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom aleph_alpha_client import (\n    Prompt,\n    AsyncClient,\n    SemanticEmbeddingRequest,\n    SemanticRepresentation,\n    Image,\n)\n\nfrom glob import glob\n\nids, vectors, payloads = [], [], []\nasync with AsyncClient(token=aa_token) as aa_client:\n    for i, image_path in enumerate(glob(\"./val2017/*.jpg\")):\n        # Convert the JPEG file into the embedding by calling\n        # Aleph Alpha API\n        prompt = Image.from_file(image_path)\n        prompt = Prompt.from_image(prompt)\n        query_params = {\n            \"prompt\": prompt,\n            \"representation\": SemanticRepresentation.Symmetric,\n            \"compress_to_size\": 128,\n        }\n        query_request = SemanticEmbeddingRequest(**query_params)\n        query_response = await aa_client.semantic_embed(request=query_request, model=model)\n\n        # Finally store the id, vector and the payload\n        ids.append(i)\n        vectors.append(query_response.embedding)\n        payloads.append({\"filename\": image_path})\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Listing Collections in C#\nDESCRIPTION: This code initializes a Qdrant client connection to a local server and then asynchronously retrieves a list of collections. It requires the Qdrant.Client NuGet package to be installed in the project.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/list-all-collections/simple/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ListCollectionsAsync();\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant Vector Search Engine with Docker\nDESCRIPTION: Commands to pull the Qdrant Docker image and run the service, exposing port 6333 and mounting a local storage volume.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/neural-search-tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull qdrant/qdrant\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6333:6333 \\\n-v $(pwd)/qdrant_storage:/qdrant/storage \\\nqdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Executing Scroll Query with Filter in Qdrant using TypeScript\nDESCRIPTION: This code performs a scroll query on a Qdrant collection using a filter to search for documents containing 'Osaka Castle' in the nested 'country.cities[].sightseeing' field. It demonstrates how to structure complex queries with nested fields in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-array-match/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    should: [\n      {\n        key: \"country.cities[].sightseeing\",\n        match: { value: \"Osaka Castle\" },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining User Preferences Query\nDESCRIPTION: Sets up a sample user preference profile with movie ratings for recommendation generation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/collaborative-filtering.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmy_ratings = {\n    603: 1,     # Matrix\n    13475: 1,   # Star Trek\n    11: 1,      # Star Wars\n    1091: -1,   # The Thing\n    862: 1,     # Toy Story\n    597: -1,    # Titanic\n    680: -1,    # Pulp Fiction\n    13: 1,      # Forrest Gump\n    120: 1,     # Lord of the Rings\n    87: -1,     # Indiana Jones\n    562: -1     # Die Hard\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Qdrant Client in Go\nDESCRIPTION: Sets up a Qdrant client connection to localhost and performs a scroll operation to retrieve points from a collection. The scroll operation is configured with a limit of 15 points and orders results by a timestamp field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-order-by-simple/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tLimit:          qdrant.PtrOf(uint32(15)),\n\tOrderBy: &qdrant.OrderBy{\n\t\tKey: \"timestamp\",\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Quantized Vector Collection in Qdrant using Rust\nDESCRIPTION: Demonstrates establishing a connection to Qdrant and creating a new collection with specific vector dimensions, distance metric (Cosine), and Int8 scalar quantization settings. The configuration includes 768-dimensional vectors and enables RAM-based storage for quantized data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/scalar-quantization-and-vectors-in-ram/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\\n    CreateCollectionBuilder, Distance, QuantizationType, ScalarQuantizationBuilder,\\n    VectorParamsBuilder,\\n};\\nuse qdrant_client::Qdrant;\\n\\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\\n\\nclient\\n    .create_collection(\\n        CreateCollectionBuilder::new(\"{collection_name}\")\\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine))\\n            .quantization_config(\\n                ScalarQuantizationBuilder::default()\\n                    .r#type(QuantizationType::Int8.into())\\n                    .always_ram(true),\\n            ),\\n    )\\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Updating Vectors for Specific Points in Qdrant\nDESCRIPTION: Performs a targeted vector update operation for existing points in a collection. Requires providing point IDs and corresponding new vector data. Only specified vectors are modified, with other vector properties remaining unchanged.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-vectors/simple/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"points\": [\n    {\n      \"id\": \"point_id_1\",\n      \"vector\": [0.1, 0.2, 0.3]\n    },\n    {\n      \"id\": \"point_id_2\",\n      \"vector\": [0.4, 0.5, 0.6]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Shards Between Nodes in Qdrant\nDESCRIPTION: Demonstrates how to move a shard between nodes in a Qdrant cluster using the HTTP API. This operation is useful for dynamically scaling clusters or for node maintenance without downtime.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/cluster\n{\n    \"move_shard\": {\n        \"shard_id\": 0,\n        \"from_peer_id\": 381894127,\n        \"to_peer_id\": 467122995\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Distance Calculation with Scalar Quantization\nDESCRIPTION: Mathematical representation of distance calculation using scalar quantized values, showing pre-computable terms.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/scalar-quantization.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nf32 × f32' =\n= (α × i8 + offset) × (α × i8' + offset) =\n= α^2 × i8 × i8' + offset × α × i8' + offset × α × i8 + offset^2\n```\n\n----------------------------------------\n\nTITLE: Hybrid Search with TypeScript Client\nDESCRIPTION: Implementation of hybrid search using the Qdrant JavaScript/TypeScript client with REST API\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    prefetch: [\n        {\n            query: {\n                values: [0.22, 0.8],\n                indices: [1, 42],\n            },\n            using: 'sparse',\n            limit: 20,\n        },\n        {\n            query: [0.01, 0.45, 0.67],\n            using: 'dense',\n            limit: 20,\n        },\n    ],\n    query: {\n        fusion: 'rrf',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Vector Search in Qdrant Collection\nDESCRIPTION: Performs a vector search query on a specified collection with named vector search, limited to three results using the 'image' method\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/named-vector/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.search(\n    collection_name='collection_name',\n    query_vector=[0.1, 0.2, 0.3, 0.4],\n    limit=3,\n    search_params={\n        'method': 'image'\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index using Qdrant in C#\nDESCRIPTION: This code snippet connects to a local Qdrant instance and asynchronously creates an index for a field within a specified collection. It requires the Qdrant.Client namespace and establishes a connection to Qdrant using its client library. The 'CreatePayloadIndexAsync' method is used to specify the collection and field name for indexing. Key parameters include 'collectionName' and 'fieldName', which denote the target collection and the specific field to index, respectively.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/simple-keyword/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreatePayloadIndexAsync(\n    collectionName: \"{collection_name}\",\n    fieldName: \"name_of_the_field_to_index\"\n);\n```\n\n----------------------------------------\n\nTITLE: Referencing API Key Secret in QdrantCluster Spec with YAML\nDESCRIPTION: This YAML snippet shows how to reference Kubernetes secrets for API keys within the QdrantCluster spec to enable authentication and authorization. The example demonstrates configuring service API keys and enabling JWT role-based access control.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/qdrant-cluster-management.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: qdrant.io/v1\nkind: QdrantCluster\nmetadata:\n  name: qdrant-a7d8d973-0cc5-42de-8d7b-c29d14d24840\n  labels:\n    cluster-id: \"a7d8d973-0cc5-42de-8d7b-c29d14d24840\"\n    customer-id: \"acme-industries\"\nspec:\n  id: \"a7d8d973-0cc5-42de-8d7b-c29d14d24840\"\n  version: \"v1.11.3\"\n  size: 1\n  resources:\n    cpu: 100m\n    memory: \"1Gi\"\n    storage: \"2Gi\"\n  config:\n    service:\n      api_key:\n        secretKeyRef:\n          name: qdrant-api-key\n          key: api-key\n      read_only_api_key:\n        secretKeyRef:\n          name: qdrant-api-key\n          key: read-only-api-key\n      jwt_rbac: true\n```\n\n----------------------------------------\n\nTITLE: Initializing QuotientAI Client in Python\nDESCRIPTION: This code snippet imports the QuotientAI client, sets up the API key as an environment variable, and initializes the QuotientClient for use in evaluation tasks.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Import QuotientAI client and connect to QuotientAI\nfrom quotientai.client import QuotientClient\nfrom quotientai.utils import show_job_progress\n\n# IMPORTANT: be sure to set your API key as an environment variable called QUOTIENT_API_KEY\n# You will need this set before running the code below. You may also uncomment the following line and insert your API key:\n# os.environ['QUOTIENT_API_KEY'] = \"YOUR_API_KEY\"\n\nquotient = QuotientClient()\n```\n\n----------------------------------------\n\nTITLE: Applying Matches in Qdrant Client - Rust\nDESCRIPTION: This snippet showcases how to use the Qdrant client's match functionality to find items that do not match specific colors. It uses the 'Condition::matches' method to define the conditions for matching values by negating a list of colors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-except/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::r#match::MatchValue;\n\nCondition::matches(\n    \"color\",\n    !MatchValue::from(vec![\"black\".to_string(), \"yellow\".to_string()]),\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Array Filter Implementation in Qdrant\nDESCRIPTION: A JSON filter example showing how to filter results based on separate conditions for nested array elements, which may return unexpected results when conditions need to be applied jointly.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qdrant-1.2.x.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filter\": {\n    \"must\": [\n      {\n        \"key\": \"country.cities[].population\",\n        \"range\": {\n          \"gte\": 2\n        }\n      },\n      {\n        \"key\": \"country.cities[].area\",\n        \"range\": {\n          \"gt\": 500,\n          \"lte\": 1000\n        }\n      }\n    ]\n  },\n  \"limit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling Filtered Points in Qdrant Collection using HTTP POST\nDESCRIPTION: This snippet shows how to construct a POST request to the Qdrant API for scrolling through points in a collection. It applies a filter to match points where the 'diet' array contains an item with 'food' equal to 'meat' and 'likes' equal to true.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-multiple-nested/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must\": [\n            {\n                \"key\": \"diet[].food\",\n                  \"match\": {\n                    \"value\": \"meat\"\n                }\n            },\n            {\n                \"key\": \"diet[].likes\",\n                  \"match\": {\n                    \"value\": true\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Vector Queries with Qdrant in C#\nDESCRIPTION: Demonstrates how to initialize a Qdrant client and perform batch vector similarity searches with filtering. The code shows setting up multiple queries with vector embeddings, applying a keyword filter for 'London', and executing a batch search with a limit of 3 results per query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/batch-search/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nvar filter = MatchKeyword(\"city\", \"London\");\n\nvar queries = new List<QueryPoints>\n{\n    new()\n    {\n        CollectionName = \"{collection_name}\",\n        Query = new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n        Filter = filter,\n        Limit = 3\n    },\n    new()\n    {\n        CollectionName = \"{collection_name}\",\n        Query = new float[] { 0.5f, 0.3f, 0.2f, 0.3f },\n        Filter = filter,\n        Limit = 3\n    }\n};\n\nawait client.QueryBatchAsync(collectionName: \"{collection_name}\", queries: queries);\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Vector Collection\nDESCRIPTION: Initializes a new Qdrant collection with custom vector configuration, specifying vector size, distance metric, and storage method\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-vectors-on-disk/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n    on_disk: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying with Qdrant Client in Go\nDESCRIPTION: This snippet demonstrates how to import the Qdrant Go client, create a new client connection to a local Qdrant server, and perform a vector similarity search query. The query includes specific vector weights and requests payload fields related to locations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-payload-fields/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tWithPayload:    qdrant.NewWithPayloadInclude(\"city\", \"village\", \"town\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Pandas-AI Usage Example\nDESCRIPTION: Demonstrates how to create a simple Pandas-AI agent to query a sales dataset using natural language. Shows DataFrame creation, API key configuration, and basic query execution.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/pandas-ai.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport pandas as pd\nfrom pandasai import Agent\n\n# Sample DataFrame\nsales_by_country = pd.DataFrame(\n    {\n        \"country\": [\n            \"United States\",\n            \"United Kingdom\",\n            \"France\",\n            \"Germany\",\n            \"Italy\",\n            \"Spain\",\n            \"Canada\",\n            \"Australia\",\n            \"Japan\",\n            \"China\",\n        ],\n        \"sales\": [5000, 3200, 2900, 4100, 2300, 2100, 2500, 2600, 4500, 7000],\n    }\n)\n\nos.environ[\"PANDASAI_API_KEY\"] = \"YOUR_API_KEY\"\n\nagent = Agent(sales_by_country)\nagent.chat(\"Which are the top 5 countries by sales?\")\n# OUTPUT: China, United States, Japan, Germany, Australia\n```\n\n----------------------------------------\n\nTITLE: Printing the Metaprompt\nDESCRIPTION: This snippet prints the `metaprompt` variable, which presumably contains a formatted prompt string that guides the LLM's behavior. This step is likely for debugging or inspecting the prompt's content.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/rag-deepseek.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"print(metaprompt)\"\n```\n\n----------------------------------------\n\nTITLE: Initializing QdrantClient and Creating Collection with Sparse Vectors in Python\nDESCRIPTION: This code initializes a QdrantClient connected to a local Qdrant instance and creates a new collection with sparse vector configuration. The collection is set up with an empty vectors_config and a sparse_vectors_config for the 'text' field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config={},\n    sparse_vectors_config={\n        \"text\": models.SparseVectorParams(),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Extracting Confluent Kafka Distribution Files\nDESCRIPTION: This snippet provides commands to extract the Confluent Kafka distribution files after downloading them, essential for setting up the Confluent Kafka platform.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/data-streaming-kafka-qdrant.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntar -xvf confluent-<version>.tar.gz\n```\n\nLANGUAGE: bash\nCODE:\n```\nunzip confluent-<version>.zip\n```\n\n----------------------------------------\n\nTITLE: Deleting Snapshots in Qdrant using C#\nDESCRIPTION: Initializes a Qdrant client connection to localhost and deletes a specified snapshot from a collection. Uses the Qdrant.Client library to manage snapshots asynchronously.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/delete-collection-snapshot/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.DeleteSnapshotAsync(collectionName: \"{collection_name}\", snapshotName: \"{snapshot_name}\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Index Settings with HTTP\nDESCRIPTION: This HTTP PUT request configures the index settings for a specific collection and payload field. The request body specifies the field name and schema, including setting the 'type' to 'keyword' and enabling the 'is_tenant' feature. No specific library dependencies are required, but it assumes an HTTP client is available. Expected input is a valid JSON payload, and the output is a confirmation of the index setup.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/keyword-is-tenant/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/index\n{\n    \"field_name\": \"payload_field_name\",\n    \"field_schema\": {\n        \"type\": \"keyword\",\n        \"is_tenant\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Upserting a Point with Qdrant Client in Rust\nDESCRIPTION: This code creates a Qdrant client and upserts a single point into a specified collection. The point includes a unique ID, a vector, and metadata. The operation waits for completion before returning.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/uuid-one-point-simple/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{PointStruct, UpsertPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .upsert_points(\n        UpsertPointsBuilder::new(\n            \"{collection_name}\",\n            vec![PointStruct::new(\n                \"5c56c793-69f3-4fbf-87e6-c4bf54c28c26\",\n                vec![0.9, 0.1, 0.1],\n                [(\"color\", \"Red\".into())],\n            )],\n        )\n        .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Sending Sparse Vectors to Qdrant via Kafka\nDESCRIPTION: JSON format for sending messages with sparse vectors to Qdrant via the Kafka connector. The sparse vector format uses separate indices and values arrays to represent the vector efficiently.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/confluent.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collection_name\": \"{collection_name}\",\n    \"id\": 1,\n    \"vector\": {\n        \"some-sparse\": {\n            \"indices\": [\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9\n            ],\n            \"values\": [\n                0.1,\n                0.2,\n                0.3,\n                0.4,\n                0.5,\n                0.6,\n                0.7,\n                0.8,\n                0.9,\n                1.0\n            ]\n        }\n    },\n    \"payload\": {\n        \"name\": \"kafka\",\n        \"description\": \"Kafka is a distributed streaming platform\",\n        \"url\": \"https://kafka.apache.org/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Qdrant Collection Configuration with Java Client\nDESCRIPTION: Updates a Qdrant collection's configuration including HNSW parameters, vector parameters, and quantization settings. The code configures HNSW index construction parameters, vector-specific settings for 'my_vector', and scalar quantization parameters using Int8 type with specified quantile and RAM settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/hnsw-and-quantization/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.grpc.Collections.HnswConfigDiff;\nimport io.qdrant.client.grpc.Collections.QuantizationConfigDiff;\nimport io.qdrant.client.grpc.Collections.QuantizationType;\nimport io.qdrant.client.grpc.Collections.ScalarQuantization;\nimport io.qdrant.client.grpc.Collections.UpdateCollection;\nimport io.qdrant.client.grpc.Collections.VectorParamsDiff;\nimport io.qdrant.client.grpc.Collections.VectorParamsDiffMap;\nimport io.qdrant.client.grpc.Collections.VectorsConfigDiff;\n\nclient\n    .updateCollectionAsync(\n        UpdateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setHnswConfig(HnswConfigDiff.newBuilder().setEfConstruct(123).build())\n            .setVectorsConfig(\n                VectorsConfigDiff.newBuilder()\n                    .setParamsMap(\n                        VectorParamsDiffMap.newBuilder()\n                            .putMap(\n                                \"my_vector\",\n                                VectorParamsDiff.newBuilder()\n                                    .setHnswConfig(\n                                        HnswConfigDiff.newBuilder()\n                                            .setM(3)\n                                            .setEfConstruct(123)\n                                            .build())\n                                    .build())))\n            .setQuantizationConfig(\n                QuantizationConfigDiff.newBuilder()\n                    .setScalar(\n                        ScalarQuantization.newBuilder()\n                            .setType(QuantizationType.Int8)\n                            .setQuantile(0.8f)\n                            .setAlwaysRam(true)\n                            .build()))\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Creating Index using Qdrant Client in C#\nDESCRIPTION: This C# snippet initializes a Qdrant client and demonstrates how to create a payload index on a specified field of a collection using Qdrant's gRPC library. Key parameters include the collectionName, fieldName, and indexParams, where IntegerIndexParams configures details like principal status of the index. Requires the Qdrant.Client and Qdrant.Client.Grpc packages. The snippet expects a running Qdrant instance on localhost at port 6334.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/integer-is-principal/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreatePayloadIndexAsync(\n collectionName: \"{collection_name}\",\n fieldName: \"timestamp\",\n schemaType: PayloadSchemaType.Integer,\n indexParams: new PayloadIndexParams\n {\n  IntegerIndexParams = new IntegerIndexParams\n  {\n   IsPrincipal = true\n  }\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Upserting Vector Points with Payloads using Qdrant C# Client\nDESCRIPTION: Demonstrates how to initialize a Qdrant client and upsert multiple vector points with associated metadata. Each point contains a unique ID, a 3-dimensional vector, and a payload with a group_id field. The client connects to a local Qdrant instance on port 6334.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-tenant-group-id/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpsertAsync(\n\tcollectionName: \"{collection_name}\",\n\tpoints: new List<PointStruct>\n\t{\n\t\tnew()\n\t\t{\n\t\t\tId = 1,\n\t\t\tVectors = new[] { 0.9f, 0.1f, 0.1f },\n\t\t\tPayload = { [\"group_id\"] = \"user_1\" }\n\t\t},\n\t\tnew()\n\t\t{\n\t\t\tId = 2,\n\t\t\tVectors = new[] { 0.1f, 0.9f, 0.1f },\n\t\t\tPayload = { [\"group_id\"] = \"user_1\" }\n\t\t},\n\t\tnew()\n\t\t{\n\t\t\tId = 3,\n\t\t\tVectors = new[] { 0.1f, 0.1f, 0.9f },\n\t\t\tPayload = { [\"group_id\"] = \"user_2\" }\n\t\t}\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Uploading LAION-400M Dataset to Qdrant with Python\nDESCRIPTION: Bash commands to set environment variables and run the Python script for uploading the LAION-400M dataset to Qdrant. The script downloads dataset chunks one by one and uploads them without requiring significant disk space on the client side.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/large-scale-search.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport QDRANT_URL=\"https://xxxx-xxxx.xxxx.cloud.qdrant.io\"\nexport QDRANT_API_KEY=\"xxxx-xxxx-xxxx-xxxx\"\n\npython upload.py\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Discord Channels\nDESCRIPTION: This command uses the Unstructured CLI to fetch and structure data from specified Discord channels. It requires channel IDs and a bot token.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-unstructured.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nunstructured-ingest \\\n  discord \\\n  --channels <CHANNEL_IDS> \\\n  --token \"<YOUR_BOT_TOKEN>\" \\\n  --output-dir \"discord-output\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Strict Mode in Bash\nDESCRIPTION: Curl command for creating a new Qdrant collection with strict mode enabled and unindexed filtering retrieve restriction.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"strict_mode_config\": {\n        \"enabled\":\" true,\n        \"unindexed_filtering_retrieve\": true\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Container in Java\nDESCRIPTION: Creates a new Qdrant container instance using the Java Testcontainers API. Uses the official Qdrant Docker image for testing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/testcontainers.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.testcontainers.qdrant.QdrantContainer;\n\nQdrantContainer qdrantContainer = new QdrantContainer(\"qdrant/qdrant\");\n```\n\n----------------------------------------\n\nTITLE: JWT Value Exists Claim Configuration\nDESCRIPTION: Configuration for validating tokens against collection data using the value_exists claim.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value_exists\": {\n    \"collection\": \"my_validation_collection\",\n    \"matches\": [\n      { \"key\": \"my_key\", \"value\": \"value_that_must_exist\" }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Qdrant Client and Creating GeoRadius in Go\nDESCRIPTION: The snippet shows how to import the Qdrant client library and initialize a GeoRadius object in Go. Depending on the `github.com/qdrant/go-client/qdrant` package, the function `NewGeoRadius` is used to create a geographic search query centered at a specified latitude and longitude, with a defined radius (in meters). This is typically used for spatial search queries in a database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-radius/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewGeoRadius(\"location\", 52.520711, 13.403683, 1000.0)\n```\n\n----------------------------------------\n\nTITLE: Creating IsNull Condition with Qdrant Python Client\nDESCRIPTION: This snippet demonstrates how to create an `IsNullCondition` using the Qdrant Python client. It checks if a specific payload field, \"reports\", is null. This condition can be used in Qdrant queries to filter results based on the presence of a value in the specified field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/is-null/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodels.IsNullCondition(\n    is_null=models.PayloadField(key=\"reports\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Sparse Vectors in Rust\nDESCRIPTION: Demonstrates how to initialize a Qdrant client, configure sparse vectors, and create a new collection. The code sets up a collection with a sparse vector named 'text' using uint8 datatype and cosine distance metric for 128-dimensional vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-uint8-sparse-and-dense/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\\n    CreateCollectionBuilder, Datatype, Distance, SparseIndexConfigBuilder,\\n    SparseVectorParamsBuilder, SparseVectorsConfigBuilder, VectorParamsBuilder,\\n};\\n\\nuse qdrant_client::Qdrant;\\n\\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\\n\\nlet mut sparse_vector_config = SparseVectorsConfigBuilder::default();\\n\\nsparse_vector_config.add_named_vector_params(\\n    \"text\",\\n    SparseVectorParamsBuilder::default()\\n        .index(SparseIndexConfigBuilder::default().datatype(Datatype::Uint8)),\\n);\\nlet create_collection = CreateCollectionBuilder::new(\"{collection_name}\")\\n    .sparse_vectors_config(sparse_vector_config)\\n    .vectors_config(\\n        VectorParamsBuilder::new(128, Distance::Cosine)\\n            .datatype(Datatype::Uint8)\\n    );\\n\\nclient.create_collection(create_collection).await?;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector Storage and Quantization\nDESCRIPTION: Configuration for managing vector storage between disk and RAM, including quantization settings\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-quantization.md#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n  \"vectors\": {\n    \"size\": 1536,\n    \"distance\": \"Cosine\",\n    \"on_disk\": true  # Move original vectors to disk\n  },\n  \"quantization_config\": {\n    \"binary\": {\n      \"always_ram\": true  # Store only quantized vectors in RAM\n    }\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nclient.update_collection(\n    collection_name=\"my_collection\",\n    vectors_config=models.VectorParams(\n        size=1536,\n        distance=models.Distance.COSINE,\n        on_disk=True  # Move original vectors to disk\n    ),\n    quantization_config=models.BinaryQuantization(\n        binary=models.BinaryQuantizationConfig(\n            always_ram=True  # Store only quantized vectors in RAM\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Collection Configuration in Qdrant Client - C#\nDESCRIPTION: This snippet demonstrates the instantiation of a QdrantClient and the asynchronous update of a collection's optimizers configuration, specifically setting the indexing threshold. It requires the Qdrant.Client and Qdrant.Client.Grpc libraries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/simple/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpdateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\toptimizersConfig: new OptimizersConfigDiff { IndexingThreshold = 10000 }\n);\n```\n\n----------------------------------------\n\nTITLE: Restoring Qdrant Collection Snapshot using Python Requests\nDESCRIPTION: Python code that iterates through Qdrant nodes and uploads snapshot files to create a new collection named 'test_collection_import'. Uses the requests library to make HTTP POST requests with snapshot files as multipart form data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/create-snapshot.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfor node_url, snapshot_path in zip(QDRANT_NODES, local_snapshot_paths):\n    snapshot_name = os.path.basename(snapshot_path)\n    requests.post(\n        f\"{node_url}/collections/test_collection_import/snapshots/upload?priority=snapshot\",\n        headers={\n            \"api-key\": QDRANT_API_KEY,\n        },\n        files={\"snapshot\": (snapshot_name, open(snapshot_path, \"rb\"))},\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing Apify Client\nDESCRIPTION: This Python snippet initializes the Apify client with your API token. It also sets placeholder values for OpenAI and Qdrant API keys and the Qdrant URL, which need to be replaced with your actual credentials.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/platforms/apify.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom apify_client import ApifyClient\n\nAPIFY_API_TOKEN = \"YOUR-APIFY-TOKEN\"\nOPENAI_API_KEY = \"YOUR-OPENAI-API-KEY\"\n# COHERE_API_KEY = \"YOUR-COHERE-API-KEY\"\n\nQDRANT_URL = \"YOUR-QDRANT-URL\"\nQDRANT_API_KEY = \"YOUR-QDRANT-API-KEY\"\n\nclient = ApifyClient(APIFY_API_TOKEN)\n```\n```\n\n----------------------------------------\n\nTITLE: Delete Collection Alias via Qdrant API\nDESCRIPTION: Makes a POST request to delete an alias named 'production_collection' from a Qdrant instance running on localhost:6333. Uses the /collections/aliases endpoint with a JSON payload specifying the delete_alias action.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/delete/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:6333/collections/aliases \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"actions\": [\n        {\n            \"delete_alias\": {\n                \"alias_name\": \"production_collection\"\n            }\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in TypeScript\nDESCRIPTION: This snippet imports the QdrantClient from the js-client-rest package and initializes it with the local Qdrant settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\\n\\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Strong Ordering in Java\nDESCRIPTION: In this Java snippet, the code uses the Qdrant client to upsert points into a collection with strong ordering. It constructs the upsert request with a collection name, a list of points, and specifies the ordering type.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_40\n\nLANGUAGE: java\nCODE:\n```\nclient\n    .upsertAsync(\n        UpsertPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .addAllPoints(\n                List.of(\n                    PointStruct.newBuilder()\n                        .setId(id(1))\n                        .setVectors(vectors(0.9f, 0.1f, 0.1f))\n                        .putAllPayload(Map.of(\"color\", value(\"red\")))\n                        .build(),\n                    PointStruct.newBuilder()\n                        .setId(id(2))\n                        .setVectors(vectors(0.1f, 0.9f, 0.1f))\n                        .putAllPayload(Map.of(\"color\", value(\"green\")))\n                        .build(),\n                    PointStruct.newBuilder()\n                        .setId(id(3))\n                        .setVectors(vectors(0.1f, 0.1f, 0.94f))\n                        .putAllPayload(Map.of(\"color\", value(\"blue\")))\n                        .build()))\n            .setOrdering(WriteOrdering.newBuilder().setType(WriteOrderingType.Strong).build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Checking Collection Existence with Qdrant C# Client\nDESCRIPTION: This code snippet demonstrates how to asynchronously check if a collection exists in Qdrant using the C# client. The method returns a boolean indicating whether the specified collection exists in the database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/check-collection-exists/simple/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.CollectionExistsAsync(\"{collection_name}\");\n```\n\n----------------------------------------\n\nTITLE: Deleting Records from Qdrant Collection using C# Client\nDESCRIPTION: This snippet demonstrates how to connect to a Qdrant server and delete multiple points by their IDs from a specified collection. It initializes a QdrantClient with the server address and port, then uses the DeleteAsync method to remove points with the IDs 0, 3, and 100.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-points/simple/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.DeleteAsync(collectionName: \"{collection_name}\", ids: [0, 3, 100]);\n```\n\n----------------------------------------\n\nTITLE: Defining Search Query Model with Pydantic\nDESCRIPTION: Creates a Pydantic model class for handling search queries with a required query string parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/cohere-rag-connector.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\n\nclass SearchQuery(BaseModel):\n    query: str\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Shards in TypeScript\nDESCRIPTION: Shows how to create a collection with 6 shards using the Qdrant JavaScript/TypeScript client. The code connects to a Qdrant server and creates a new collection with specified vector parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n    vectors: {\n        size: 300,\n        distance: \"Cosine\",\n    },\n    shard_number: 6,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Instrumentation for Qdrant\nDESCRIPTION: This console command installs the OpenTelemetry instrumentation package specifically for the Qdrant client. This package is required to utilize OpenTelemetry tracing without the full Traceloop SDK.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/observability/openllmetry.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npip install opentelemetry-instrumentation-qdrant\n```\n\n----------------------------------------\n\nTITLE: Setting Payload in Qdrant using Rust\nDESCRIPTION: This Rust code snippet sets payloads for specified points within a Qdrant collection. It utilizes the Qdrant client library and Serde JSON to construct the payloads. The code asynchronously applies the payload to points identified by their IDs in the `PointsIdsList`. Dependencies include the `qdrant_client` and `serde_json` crates. It requires a valid Qdrant client instance and specifies the collection name and payload properties. The code outputs the result of setting the payload and supports specifying if the operation should wait for completion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/set-payload/by-point-id/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse qdrant_client::qdrant::{\n    PointsIdsList, SetPayloadPointsBuilder,\n};\nuse qdrant_client::Payload,;\nuse serde_json::json;\n\nclient\n    .set_payload(\n        SetPayloadPointsBuilder::new(\n            \"{collection_name}\",\n            Payload::try_from(json!({\n                \"property1\": \"string\",\n                \"property2\": \"string\",\n            }))\n            .unwrap(),\n        )\n        .points_selector(PointsIdsList {\n            ids: vec![0.into(), 3.into(), 10.into()],\n        })\n        .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating a Prompt for DeepSeek API Call\nDESCRIPTION: This snippet defines a prompt asking about the tools needed to build a web service using vector embeddings for search. It is essential for initiating queries within the DeepSeek API context, demonstrating how to craft input for subsequent API calls.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/rag-deepseek.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprompt = \"\"\"\nWhat tools should I need to use to build a web service using vector embeddings for search?\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Graph Context Formatting\nDESCRIPTION: Function to format Neo4j subgraph data into a structured format for LLM consumption. Extracts unique nodes and formats relationships as readable edges.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/graphrag-qdrant-neo4j.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef format_graph_context(subgraph):\n    nodes = set()\n    edges = []\n\n    for entry in subgraph:\n        entity = entry[\"entity\"]\n        related = entry[\"related_node\"]\n        relationship = entry[\"relationship\"]\n\n        nodes.add(entity[\"name\"])\n        nodes.add(related[\"name\"])\n\n        edges.append(f\"{entity['name']} {relationship['type']} {related['name']}\")\n\n    return {\"nodes\": list(nodes), \"edges\": edges}\n```\n\n----------------------------------------\n\nTITLE: Experiment with Increased Retrieval Window\nDESCRIPTION: Third experiment using increased number of retrieved documents (5) while maintaining original chunk parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n#collection name from Experiment 1\nCOLLECTION_NAME = f\"experiment_{chunk_size}_{chunk_overlap}_{embedding_model_name.split('/')[1]}\"\n\n#running eval for experiment 3\nexperiment_3 = run_eval(eval_df,\n                        collection_name=COLLECTION_NAME,\n                        recipe_id=recipe_mistral['id'],\n                        num_docs=num_docs,\n                        path=f\"{COLLECTION_NAME}_{num_docs}_mistral.csv\")\n```\n\n----------------------------------------\n\nTITLE: Generating Document Embeddings\nDESCRIPTION: Generate embeddings for the sample documents and check the embedding dimensions\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nembeddings_generator = embedding_model.embed(documents)\nembeddings_list = list(embeddings_generator)\nlen(embeddings_list[0])  \n```\n\n----------------------------------------\n\nTITLE: Deleting Qdrant Collection via Curl\nDESCRIPTION: Sends a DELETE HTTP request to remove a specified collection from a local Qdrant instance. Requires the collection name to be specified in the URL path.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-collection/simple/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE http://localhost:6333/collections/{collection_name}\n```\n\n----------------------------------------\n\nTITLE: Matching Text Conditions Using Qdrant in C#\nDESCRIPTION: This C# code snippet demonstrates how to use Qdrant's GRPC client to match text based on specific criteria. It utilizes the `MatchText` function to evaluate if the 'description' field contains the phrase 'good cheap'. This snippet requires the Qdrant GRPC client library properly set up and imported. It does not handle cases where the field or the text might not exist.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/full-text-match/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing static Qdrant.Client.Grpc.Conditions;\\n\\nMatchText(\\\"description\\\", \\\"good cheap\\\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Strict Mode in Java\nDESCRIPTION: Java code for creating a new Qdrant collection with strict mode enabled and unindexed filtering retrieve restriction using the Qdrant Java client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.StrictModeCOnfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setStrictModeConfig(\n                StrictModeConfig.newBuilder().setEnabled(true).setUnindexedFilteringRetrieve(true).build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database with C# Client\nDESCRIPTION: Demonstrates initializing a Qdrant client connection and performing a vector similarity search query. The example shows how to set up search parameters including quantization options and limit the number of results. The query uses a 4-dimensional vector as input.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/disable-quantization-rescoring/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\tsearchParams: new SearchParams\n\t{\n\t\tQuantization = new QuantizationSearchParams { Rescore = false }\n\t},\n\tlimit: 3\n);\n```\n\n----------------------------------------\n\nTITLE: Loading ArXiv Dataset with Pre-computed Embeddings in Python\nDESCRIPTION: This snippet loads a pre-computed dataset of ArXiv paper titles and their embeddings from Hugging Face Hub using the datasets library in streaming mode.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/create-snapshot.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom datasets import load_dataset\n\ndataset = load_dataset(\n    \"Qdrant/arxiv-titles-instructorxl-embeddings\", split=\"train\", streaming=True\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Functionality\nDESCRIPTION: Implements the search method to convert text queries into vectors and perform similarity search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/neural-search-tutorial.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n    def search(self, text: str):\n        # Convert text query into vector\n        vector = self.model.encode(text).tolist()\n\n        # Use `vector` for search for closest vectors in the collection\n        search_result = self.qdrant_client.search(\n            collection_name=self.collection_name,\n            query_vector=vector,\n            query_filter=None,  # We don't want any filters for now\n            top=5  # 5 the most closest results is enough\n        )\n        # `search_result` contains found vector ids with similarity scores along with the stored payload\n        # In this function we are interested in payload only\n        payloads = [hit.payload for hit in search_result]\n        return payloads\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Qdrant API Keys with Shell\nDESCRIPTION: This shell command uses `kubectl` to create a Kubernetes secret containing API keys for authentication purposes. The secret is named `qdrant-api-key` and is stored in the `qdrant-private-cloud` namespace. The secret can subsequently be referenced in QdrantCluster spec for authorization setup.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/qdrant-cluster-management.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret generic qdrant-api-key --from-literal=api-key=your-secret-api-key --from-literal=read-only-api-key=your-secret-read-only-api-key --namespace qdrant-private-cloud\n```\n\n----------------------------------------\n\nTITLE: Performing Scroll Query with Population Filter in Qdrant using TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client to perform a scroll query on a collection. It applies a filter to search for cities with a population greater than or equal to 9.0. The query uses the 'should' condition, which is equivalent to an OR operation in boolean logic.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-array/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    should: [\n      {\n        key: \"country.cities[].population\",\n        range: {\n          gt: null,\n          gte: 9.0,\n          lt: null,\n          lte: null,\n        },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Search Order Parameters in C#\nDESCRIPTION: Creates an OrderBy configuration object for Qdrant searches that sorts results by timestamp in descending order, starting from a specific offset. Uses the Qdrant gRPC client library for C#.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-order-by-advanced/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client.Grpc;\n\nnew OrderBy\n{\n Key = \"timestamp\",\n Direction = Direction.Desc,\n StartFrom = 123\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Facet Counts in Qdrant using Rust Client\nDESCRIPTION: Creates a facet count query using FacetCountsBuilder to get counts for a specific field in a collection. The query sets a limit on the number of facets returned and uses the exact counting method for precise results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/facet-counts/exact/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::FacetCountsBuilder;\n\nclient\n    .facet(\n         FacetCountsBuilder::new(\"{collection_name}\", \"size\")\n             .limit(10)\n             .exact(true),\n     )\n     .await?;\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Query Execution with Qdrant Client in Java\nDESCRIPTION: This code snippet shows an example of creating and executing an asynchronous query using Qdrant's Java client library. Dependencies include Java, Qdrant client, and gRPC. The snippet demonstrates setting up a client connection and building a query with specific strategies such as nearest and fusion. The key parameters include the collection name, the query strategy, and the query limits. This code assumes that the Qdrant server is running locally on port 6334.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-basic/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport java.util.List;\n\nimport static io.qdrant.client.QueryFactory.fusion;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Fusion;\nimport io.qdrant.client.grpc.Points.PrefetchQuery;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n    QueryPoints.newBuilder()\n    .setCollectionName(\"{collection_name}\")\n    .addPrefetch(PrefetchQuery.newBuilder()\n      .setQuery(nearest(List.of(0.22f, 0.8f), List.of(1, 42)))\n      .setUsing(\"sparse\")\n      .setLimit(20)\n      .build())\n    .addPrefetch(PrefetchQuery.newBuilder()\n      .setQuery(nearest(List.of(0.01f, 0.45f, 0.67f)))\n      .setUsing(\"dense\")\n      .setLimit(20)\n      .build())\n    .setQuery(fusion(Fusion.RRF))\n    .build())\n  .get();\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database Using C# Client\nDESCRIPTION: This snippet demonstrates how to create a Qdrant client connection and perform a vector similarity search with filtering. It connects to a local Qdrant instance, searches for vectors similar to the provided embedding, and filters results by a keyword match on the 'group_id' field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-filter-by-group-id/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.1f, 0.1f, 0.9f },\n\tfilter: MatchKeyword(\"group_id\", \"user_1\"),\n\tlimit: 10\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Object Filters in Qdrant\nDESCRIPTION: Demonstrates how to use nested object filters to query arrays of objects independently. This example filters diet preferences for dinosaurs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/filtering.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filter\": {\n    \"must\": [\n      {\n        \"nested\": {\n          \"key\": \"diet\",\n          \"filter\": {\n            \"must\": [\n              {\"key\": \"food\", \"match\": {\"value\": \"meat\"}},\n              {\"key\": \"likes\", \"match\": {\"value\": true}}\n            ]\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing FastEmbed for Text Embedding in RAG Pipeline\nDESCRIPTION: Code showing how to initialize and configure FastEmbed for text embedding, which is used to convert documents into vector representations. Includes options for using default or custom embedding models.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n## Declaring the intended Embedding Model with Fastembed\nfrom fastembed.embedding import TextEmbedding\n\n## General Fastembed specific operations\n##Initilising embedding model\n## Using Default Model - BAAI/bge-small-en-v1.5\nembedding_model = TextEmbedding()\n\n## For custom model supported by Fastembed\n#embedding_model = TextEmbedding(model_name=\"BAAI/bge-small-en\", max_length=512)\n#embedding_model = TextEmbedding(model_name=\"sentence-transformers/all-MiniLM-L6-v2\", max_length=384)\n\n## Verify the chosen Embedding model\nembedding_model.model_name\n```\n\n----------------------------------------\n\nTITLE: Creating Field Index in Qdrant Database using Rust\nDESCRIPTION: This Rust snippet demonstrates how to use the Qdrant client library to connect to a Qdrant database instance and create a field index on an existing collection. It requires the qdrant_client dependency. The `create_field_index` method is utilized to define index parameters such as field type and principal status. Inputs include the collection name and connection URL, and it outputs the created index's configuration. This setup assumes the Qdrant server is running and accessible at the specified URL.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/integer-is-principal/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\n    CreateFieldIndexCollectionBuilder,\n    IntegerIndexParamsBuilder,\n    FieldType\n};\nuse qdrant_client::{Qdrant, QdrantError};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.create_field_index(\n    CreateFieldIndexCollectionBuilder::new(\n        \"{collection_name}\",\n        \"timestamp\",\n        FieldType::Integer,\n    )\n    .field_index_params(\n        IntegerIndexParamsBuilder::default()\n            .is_principal(true),\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Information with HTTP GET in Qdrant\nDESCRIPTION: This HTTP GET request retrieves information about a specific collection in Qdrant. The collection name is provided as a path parameter. This endpoint returns metadata, configuration, and status information about the requested collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-info/simple/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /collections/{collection_name}\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama and Qdrant Client\nDESCRIPTION: Installs the necessary Python packages: `ollama` for generating embeddings and `qdrant-client` for interacting with the Qdrant vector database. This command uses pip, the Python package installer, to fetch and install the packages from the Python Package Index (PyPI).\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/ollama.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install ollama qdrant-client\"\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshots using Qdrant Go Client\nDESCRIPTION: The Go snippet demonstrates how to initialize a connection to a Qdrant server using the Go client library and create a snapshot for a specified collection. Dependencies include the qdrant Go client package, a running Qdrant server, and context from the standard library. It requires a configured host, port, and the collection name as parameters. The code creates a snapshot asynchronously, with no specific return output, but will signal an error if the process fails.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/create-collection-snapshot/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateSnapshot(context.Background(), \"{collection_name}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in C#\nDESCRIPTION: Creates a new Qdrant client connection to localhost and initializes a collection with 768-dimensional vectors using cosine distance. Configures memory mapping threshold for optimized performance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-optimizer-config/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine },\n\toptimizersConfig: new OptimizersConfigDiff { MemmapThreshold = 20000 }\n);\n```\n\n----------------------------------------\n\nTITLE: Applying the UDF to the Spark DataFrame\nDESCRIPTION: Applies the previously defined UDF to the rows of the Spark DataFrame, creating embeddings for each partition of data. This step is essential for transforming the DataFrame into a suitable format for further analysis.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/databricks.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nembeddings = dataset_df.rdd.mapPartitions(vectorize)\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Disabled Global HNSW Index\nDESCRIPTION: Configuration for creating a collection with disabled global vector indexing and enabled per-group indexing. Sets payload_m to 16 for group-level indexing while disabling global indexing by setting m to 0.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/multiple-partitions.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vectors\": {\n    \"size\": 768,\n    \"distance\": \"Cosine\"\n  },\n  \"hnsw_config\": {\n    \"m\": 0,\n    \"payload_m\": 16\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Field Index in Qdrant with Rust\nDESCRIPTION: This Rust code snippet demonstrates how to create a keyword field index collection using the Qdrant client. It requires the qdrant-client library and establishes a connection to a Qdrant server running locally. The snippet uses builders to configure the field type and index parameters and creates the field index through the `create_field_index` method on the client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/keyword-is-tenant/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\n    CreateFieldIndexCollectionBuilder,\n    KeywordIndexParamsBuilder,\n    FieldType\n};\nuse qdrant_client::{Qdrant, QdrantError};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.create_field_index(\n    CreateFieldIndexCollectionBuilder::new(\n        \"\\\"{collection_name}\\\"\",\n        \"\\\"payload_field_name\\\"\",\n        FieldType::Keyword,\n    )\n    .field_index_params(\n        KeywordIndexParamsBuilder::default()\n            .is_tenant(true),\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with Nested Filters in Rust\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client to scroll through points in a collection with complex filtering conditions. It uses nested conditions to filter based on diet preferences and point ID.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-nested-clause-and-has-id/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, NestedCondition, ScrollPointsBuilder};\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::must([\n            NestedCondition {\n                key: \"diet\".to_string(),\n                filter: Some(Filter::must([\n                    Condition::matches(\"food\", \"meat\".to_string()),\n                    Condition::matches(\"likes\", true),\n                ])),\n            }\n            .into(),\n            Condition::has_id([1]),\n        ])),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Configuring Precise Facet Counting in Qdrant\nDESCRIPTION: This HTTP request demonstrates how to enable precise facet counting using the 'exact' parameter in the Facet API for accurate results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.12.x.md#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/facet\n{\n    \"key\": \"size\",\n    \"exact\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Collection Alias in Qdrant with TypeScript\nDESCRIPTION: This code snippet demonstrates how to delete a collection alias in Qdrant using the TypeScript client. The code calls the updateCollectionAliases method with a delete_alias action, removing the 'production_collection' alias from whatever collection it was pointing to.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/delete/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.updateCollectionAliases({\n  actions: [\n    {\n      delete_alias: {\n        alias_name: \"production_collection\",\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Upserting Multiple Vector Points with Payload\nDESCRIPTION: Inserts or updates multiple vector points into a specified Qdrant collection, each with unique ID, vector coordinates, and associated metadata payload\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-tenant-group-id/go.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.Upsert(context.Background(), &qdrant.UpsertPoints{\n\tCollectionName: \"{collection_name}\",\n\tPoints: []*qdrant.PointStruct{\n\t\t{\n\t\t\tId:      qdrant.NewIDNum(1),\n\t\t\tVectors: qdrant.NewVectors(0.9, 0.1, 0.1),\n\t\t\tPayload: qdrant.NewValueMap(map[string]any{\"group_id\": \"user_1\"}),\n\t\t},\n\t\t{\n\t\t\tId:      qdrant.NewIDNum(2),\n\t\t\tVectors: qdrant.NewVectors(0.1, 0.9, 0.1),\n\t\t\tPayload: qdrant.NewValueMap(map[string]any{\"group_id\": \"user_1\"}),\n\t\t},\n\t\t{\n\t\t\tId:      qdrant.NewIDNum(3),\n\t\t\tVectors: qdrant.NewVectors(0.1, 0.1, 0.9),\n\t\t\tPayload: qdrant.NewValueMap(map[string]any{\"group_id\": \"user_2\"}),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Using Facet API for Metadata Aggregation in Qdrant\nDESCRIPTION: This HTTP request shows how to use the Facet API to count and aggregate values for the 'size' field, filtered by products where the color is red.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.12.x.md#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/facet\n{\n    \"key\": \"size\",\n    \"filter\": {\n      \"must\": {\n        \"key\": \"color\",\n        \"match\": { \"value\": \"red\" }\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in TypeScript\nDESCRIPTION: Creates a new Qdrant client instance configured to connect to a local Qdrant server on port 6333 and demonstrates listing snapshots. Requires @qdrant/js-client-rest package to be installed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/list-full-snapshots/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.listFullSnapshots();\n```\n\n----------------------------------------\n\nTITLE: Alternative Data Upload with Processed Vectors\nDESCRIPTION: Upload pre-processed dense and sparse vectors to Qdrant collection\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nimport json\nimport numpy as np\nfrom qdrant_client import models\n\ndef named_vectors(vectors: List[float], sparse_vectors: List[models.SparseVector]) -> dict:\n    dense_vector_name = client.get_vector_field_name()\n    sparse_vector_name = client.get_sparse_vector_field_name()  \n    for vector, sparse_vector in zip(vectors, sparse_vectors):\n        yield {\n            dense_vector_name: vector,\n            sparse_vector_name: models.SparseVector(**sparse_vector),\n        } \n\nwith open(\"dense_vectors.npy\", \"rb\") as f:\n    vectors = np.load(f)\n    \nwith open(\"sparse_vectors.json\", \"r\") as f:\n    sparse_vectors = json.load(f)\n    \nwith open(\"payload.json\", \"r\",) as f:\n    payload = json.load(f)\n\nclient.upload_collection(\n    \"startups\", vectors=named_vectors(vectors, sparse_vectors), payload=payload\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sparse Vectors for Qdrant Collection\nDESCRIPTION: This HTTP PUT request configures sparse vector settings for a specific collection in Qdrant. It sets up a sparse vector named 'text' with in-memory indexing enabled.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector-index-on-disk/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"sparse_vectors\": {\n        \"text\": {\n            \"index\": {\n                \"on_disk\": false\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Network Disk Performance Results\nDESCRIPTION: FIO benchmark results showing performance metrics for network-mounted disk with low IOPS and bandwidth.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/memory-consumption.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nread: IOPS=6366, BW=24.9MiB/s (26.1MB/s)(8192MiB/329424msec)\n```\n\n----------------------------------------\n\nTITLE: Defining Price Range Query in TypeScript\nDESCRIPTION: This TypeScript snippet creates an object to represent a price range for filtering queries. It specifies the minimum and maximum price limits through explicit greater than or equal to (gte) and less than or equal to (lte) conditions while allowing for null values in the upper and lower bounds. The snippet is intended for use in data querying frameworks that interact with a price metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/range/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    key: 'price',\n    range: {\n        gt: null,\n        gte: 100.0,\n        lt: null,\n        lte: 450.0    \n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Points to Qdrant Collection\nDESCRIPTION: This snippet uploads the training data to the Qdrant collection. It iterates through the `train_dataset`, creating `PointStruct` objects for each item, which includes the id, vector, and payload.  It then waits until the collection status turns GREEN meaning the indexing process is finished.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/retrieval-quality.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient.upload_points(  # upload_points is available as of qdrant-client v1.7.1\n    collection_name=\"arxiv-titles-instructorxl-embeddings\",\n    points=[\n        models.PointStruct(\n            id=item[\"id\"],\n            vector=item[\"vector\"],\n            payload=item,\n        )\n        for item in train_dataset\n    ]\n)\n\nwhile True:\n    collection_info = client.get_collection(collection_name=\"arxiv-titles-instructorxl-embeddings\")\n    if collection_info.status == models.CollectionStatus.GREEN:\n        # Collection status is green, which means the indexing is finished\n        break\n```\n\n----------------------------------------\n\nTITLE: Building Qdrant from Source\nDESCRIPTION: Command to build Qdrant from source code using Cargo, the Rust package manager. Requires Rust toolchain and necessary system libraries to be installed. Produces a binary executable in the target/release directory.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/installation.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release --bin qdrant\n```\n\n----------------------------------------\n\nTITLE: Using QdrantHook to Connect to Qdrant in Apache Airflow\nDESCRIPTION: Demonstrates how to set up a QdrantHook instance to verify connection with Qdrant database in Apache Airflow. This hook provides an abstraction layer for interacting with the Qdrant API.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/airflow.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom airflow.providers.qdrant.hooks.qdrant import QdrantHook\n\nhook = QdrantHook(conn_id=\"qdrant_connection\")\n\nhook.verify_connection()\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Quaterion TrainableModel\nDESCRIPTION: This snippet imports necessary modules and classes from PyTorch, torchvision, and Quaterion for implementing a trainable similarity model.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/cars-recognition.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport torch\nimport torchvision\nfrom quaterion_models.encoders import Encoder\nfrom quaterion_models.heads import EncoderHead, SkipConnectionHead\nfrom torch import nn\nfrom typing import Dict, Union, Optional, List\n\nfrom quaterion import TrainableModel\nfrom quaterion.eval.attached_metric import AttachedMetric\nfrom quaterion.eval.group import RetrievalRPrecision\nfrom quaterion.loss import SimilarityLoss, TripletLoss\nfrom quaterion.train.cache import CacheConfig, CacheType\n\nfrom .encoders import CarsEncoder\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Retrieving Collection Aliases in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a connection to a Qdrant vector database and retrieve aliases for a specific collection. It imports the QdrantClient from the official REST client package, initializes a client with localhost connection parameters, and makes a request to get collection aliases.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/list/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.getCollectionAliases(\"{collection_name}\");\n```\n\n----------------------------------------\n\nTITLE: Scrolling Points in Qdrant Collection with Filter - Java\nDESCRIPTION: This snippet enables the asynchronous scrolling of points from a specified Qdrant collection, applying a filter to retrieve only points that match a specific keyword in their payload. It utilizes the Qdrant client library's functionalities to build a scroll request with custom parameters for collection name, filters, limit, and payload selection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-and-params/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\nimport static io.qdrant.client.WithPayloadSelectorFactory.enable;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(Filter.newBuilder().addMust(matchKeyword(\"color\", \"red\")).build())\n            .setLimit(1)\n            .setWithPayload(enable(true))\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Mounting Main Configuration File in Docker\nDESCRIPTION: Example of mounting a custom config.yaml file to override default Qdrant settings using Docker.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6333:6333 \\\n    -v $(pwd)/config.yaml:/qdrant/config/config.yaml \\\n    qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Kafka Connector\nDESCRIPTION: This JSON configuration defines the settings for the Qdrant Kafka Sink connector, including converter settings and the connector class, ensuring proper message delivery from Kafka to Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/data-streaming-kafka-qdrant.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"QdrantSinkConnectorConnector_0\",\n  \"config\": {\n    \"value.converter.schemas.enable\": \"false\",\n    \"name\": \"QdrantSinkConnectorConnector_0\",\n    \"connector.class\": \"io.qdrant.kafka.QdrantSinkConnector\",\n    \"key.converter\": \"org.apache.kafka.connect.storage.StringConverter\",\n    \"value.converter\": \"org.apache.kafka.connect.json.JsonConverter\",\n    \"topics\": \"topic_62,qdrant_kafka.docs\",\n    \"errors.deadletterqueue.topic.name\": \"dead_queue\",\n    \"errors.deadletterqueue.topic.replication.factor\": \"1\",\n    \"qdrant.grpc.url\": \"http://localhost:6334\",\n    \"qdrant.api.key\": \"************\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing User Queries with Visual Feedback in Python\nDESCRIPTION: This snippet shows how to manage user interactions during query processing in Streamlit by using placeholders for messages and progress bars, along with the ConsoleOutput class for real-time feedback.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nwith st.chat_message(\"assistant\"):\n    message_placeholder = st.empty()\n    progress_bar = st.progress(0)\n    console_placeholder = st.empty()\n    \n    try:\n        console_output = ConsoleOutput(console_placeholder)\n        with contextlib.redirect_stdout(console_output):\n            progress_bar.progress(0.3)\n            full_response = get_crew_response(prompt)\n            progress_bar.progress(1.0)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Aliases with HTTP GET Request\nDESCRIPTION: This HTTP GET request retrieves all aliases associated with a specific collection. The collection name is specified as a path parameter in the URL.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/list/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /collections/{collection_name}/aliases\n```\n\n----------------------------------------\n\nTITLE: Deleting Vectors from a Collection using Qdrant Client in TypeScript\nDESCRIPTION: This code demonstrates how to delete vectors from a Qdrant collection by specifying point IDs and vector types. The operation targets specific point IDs (0, 3, 10) and only removes vectors of types 'text' and 'image' from those points.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-vectors/simple/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.deleteVectors(\"{collection_name}\", {\n  points: [0, 3, 10],\n  vector: [\"text\", \"image\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Collection Alias in Qdrant using Rust\nDESCRIPTION: Creates an alias mapping from 'example_collection' to 'production_collection' using the Qdrant client's CreateAliasBuilder. This allows for transparent collection name remapping which is useful for production deployments and migrations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/create/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::CreateAliasBuilder;\n\nclient\n    .create_alias(CreateAliasBuilder::new(\n        \"example_collection\",\n        \"production_collection\",\n    ))\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Token Weight Analysis Function\nDESCRIPTION: Creates a function to map tokens to their weights and sort by importance\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-splade.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef get_tokens_and_weights(sparse_embedding, tokenizer):\n    token_weight_dict = {}\n    for i in range(len(sparse_embedding.indices)):\n        token = tokenizer.decode([sparse_embedding.indices[i]])\n        weight = sparse_embedding.values[i]\n        token_weight_dict[token] = weight\n\n    # Sort the dictionary by weights\n    token_weight_dict = dict(sorted(token_weight_dict.items(), key=lambda item: item[1], reverse=True))\n    return token_weight_dict\n\n# Test the function with the first SparseEmbedding\nprint(json.dumps(get_tokens_and_weights(sparse_embeddings_list[index], tokenizer), indent=4))\n```\n\n----------------------------------------\n\nTITLE: Defining Query and Document Data for Search Example\nDESCRIPTION: Sets up example data including a search query and multiple document texts related to feature scaling in machine learning. These documents will be used to demonstrate semantic search capabilities.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-semantic-search.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nquery = \"What is the purpose of feature scaling in machine learning?\"\n\ndocuments = [\n    \"In machine learning, feature scaling is the process of normalizing the range of independent variables or features. The goal is to ensure that all features contribute equally to the model, especially in algorithms like SVM or k-nearest neighbors where distance calculations matter.\",\n   \n    \"Feature scaling is commonly used in data preprocessing to ensure that features are on the same scale. This is particularly important for gradient descent-based algorithms where features with larger scales could disproportionately impact the cost function.\",\n   \n    \"In data science, feature extraction is the process of transforming raw data into a set of engineered features that can be used in predictive models. Feature scaling is related but focuses on adjusting the values of these features.\",\n   \n    \"Unsupervised learning algorithms, such as clustering methods, may benefit from feature scaling as it ensures that features with larger numerical ranges don't dominate the learning process.\",\n   \n    \"One common data preprocessing technique in data science is feature selection. Unlike feature scaling, feature selection aims to reduce the number of input variables used in a model to avoid overfitting.\",\n   \n    \"Principal component analysis (PCA) is a dimensionality reduction technique used in data science to reduce the number of variables. PCA works best when data is scaled, as it relies on variance which can be skewed by features on different scales.\",\n   \n    \"Min-max scaling is a common feature scaling technique that usually transforms features to a fixed range [0, 1]. This method is useful when the distribution of data is not Gaussian.\",\n   \n    \"Standardization, or z-score normalization, is another technique that transforms features into a mean of 0 and a standard deviation of 1. This method is effective for data that follows a normal distribution.\",\n   \n    \"Feature scaling is critical when using algorithms that rely on distances, such as k-means clustering, as unscaled features can lead to misleading results.\",\n   \n    \"Scaling can improve the convergence speed of gradient descent algorithms by preventing issues with different feature scales affecting the cost function's landscape.\",\n   \n    \"In deep learning, feature scaling helps in stabilizing the learning process, allowing for better performance and faster convergence during training.\",\n   \n    \"Robust scaling is another method that uses the median and the interquartile range to scale features, making it less sensitive to outliers.\",\n   \n    \"When working with time series data, feature scaling can help in standardizing the input data, improving model performance across different periods.\",\n   \n    \"Normalization is often used in image processing to scale pixel values to a range that enhances model performance in computer vision tasks.\",\n   \n    \"Feature scaling is significant when features have different units of measurement, such as height in centimeters and weight in kilograms.\",\n   \n    \"In recommendation systems, scaling features such as user ratings can improve the model's ability to find similar users or items.\",\n   \n    \"Dimensionality reduction techniques, like t-SNE and UMAP, often require feature scaling to visualize high-dimensional data in lower dimensions effectively.\",\n   \n    \"Outlier detection techniques can also benefit from feature scaling, as they can be influenced by unscaled features that have extreme values.\",\n   \n    \"Data preprocessing steps, including feature scaling, can significantly impact the performance of machine learning models, making it a crucial part of the modeling pipeline.\",\n   \n    \"In ensemble methods, like random forests, feature scaling is not strictly necessary, but it can still enhance interpretability and comparison of feature importance.\",\n   \n    \"Feature scaling should be applied consistently across training and test datasets to avoid data leakage and ensure reliable model evaluation.\",\n   \n    \"In natural language processing (NLP), scaling can be useful when working with numerical features derived from text data, such as word counts or term frequencies.\",\n   \n    \"Log transformation is a technique that can be applied to skewed data to stabilize variance and make the data more suitable for scaling.\",\n   \n    \"Data augmentation techniques in machine learning may also include scaling to ensure consistency across training datasets, especially in computer vision tasks.\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant with Docker Compose\nDESCRIPTION: Docker Compose configuration for running a single node Qdrant cluster. Includes port mappings, volume mounts for persistent storage, and custom configuration settings. Requires Docker Compose v2.23.1 or above and Docker Engine v25.0.0 or Docker Desktop v4.26.0.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/installation.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  qdrant:\n    image: qdrant/qdrant:latest\n    restart: always\n    container_name: qdrant\n    ports:\n      - 6333:6333\n      - 6334:6334\n    expose:\n      - 6333\n      - 6334\n      - 6335\n    configs:\n      - source: qdrant_config\n        target: /qdrant/config/production.yaml\n    volumes:\n      - ./qdrant_data:/qdrant/storage\n\nconfigs:\n  qdrant_config:\n    content: |\n      log_level: INFO\n```\n\n----------------------------------------\n\nTITLE: Defining Email Processing Agents in YAML\nDESCRIPTION: YAML configuration for email processing agents: an email categorizer and a response writer that uses external knowledge base.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/webinar-crewai-qdrant-obsidian.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncategorizer:\n  role: >\n    Email threads categorizer\n  goal: >\n    Automatically categorize email threads based on their content.\n  backstory: >\n    You're a virtual assistant with a knack for organizing information.\n    You're known for your ability to quickly and accurately categorize email\n    threads, so that your clients know which ones are important to answer\n    and which ones are spam, newsletters, or other types of messages that\n    do not require attention.\n    Available categories: QUESTION, NOTIFICATION, NEWSLETTER, SPAM. Do not make\n    up new categories.\n\nresponse_writer:\n  role: >\n    Email response writer\n  goal: >\n    Write clear and concise responses to an email thread. Try to help the\n    sender. Use the external knowledge base to provide relevant information.\n  backstory: >\n    You are a professional writer with a talent for crafting concise and\n    informative responses. You're known for your ability to quickly understand\n    the context of an email thread and provide a helpful and relevant response\n    that addresses the sender's needs. You always rely on your knowledge base\n    to provide accurate and up-to-date information.\n```\n\n----------------------------------------\n\nTITLE: Upserting Named Vectors with Qdrant Java Client\nDESCRIPTION: This code demonstrates how to upsert multiple points with named vectors into a Qdrant collection. It uses the Qdrant Java client to create PointStruct objects with IDs and named vectors, then performs an asynchronous upsert operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/sparse-vectors/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\nimport java.util.Map;\n\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.VectorFactory.vector;\n\nimport io.qdrant.client.grpc.Points.NamedVectors;\nimport io.qdrant.client.grpc.Points.PointStruct;\nimport io.qdrant.client.grpc.Points.Vectors;\n\nclient\n    .upsertAsync(\n        \"{collection_name}\",\n        List.of(\n            PointStruct.newBuilder()\n                .setId(id(1))\n                .setVectors(\n                    Vectors.newBuilder()\n                        .setVectors(\n                            NamedVectors.newBuilder()\n                                .putAllVectors(\n                                    Map.of(\n                                        \"text\", vector(List.of(1.0f, 2.0f), List.of(6, 7))))\n                                .build())\n                        .build())\n                .build(),\n            PointStruct.newBuilder()\n                .setId(id(2))\n                .setVectors(\n                    Vectors.newBuilder()\n                        .setVectors(\n                            NamedVectors.newBuilder()\n                                .putAllVectors(\n                                    Map.of(\n                                        \"text\",\n                                        vector(\n                                            List.of(0.1f, 0.2f, 0.3f, 0.4f, 0.5f),\n                                            List.of(1, 2, 3, 4, 5))))\n                                .build())\n                        .build())\n                .build()))\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode in Qdrant Collection Creation (Rust)\nDESCRIPTION: This Rust code snippet uses the Qdrant client to create a new collection with strict mode enabled, specifically activating the unindexed_filtering_retrieve limit.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.13.x.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{CreateCollectionBuilder, StrictModeConfigBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .strict_config_mode(StrictModeConfigBuilder::default().enabled(true).unindexed_filtering_retrieve(true)),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating AWS VolumeSnapshotClass\nDESCRIPTION: This configuration creates a VolumeSnapshotClass for AWS using the EBS CSI driver. It allows for snapshot operations such as backups and restores within a Kubernetes cluster. The deletion policy is set to 'Delete', ensuring that volumes are removed once the associated snapshots are deleted. Requires the EBS CSI snapshot controller for complete functionality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/platform-deployment-options.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: snapshot.storage.k8s.io/v1\nkind: VolumeSnapshotClass\nmetadata:\n  name: csi-snapclass\ndelectionPolicy: Delete\ndriver: ebs.csi.aws.com\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Haystack Pipeline\nDESCRIPTION: Creates an empty Haystack pipeline for document processing\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom haystack import Pipeline\n\nindexing_pipeline = Pipeline()\n```\n\n----------------------------------------\n\nTITLE: Setting up Qdrant Client and Retriever\nDESCRIPTION: Initialization of Qdrant client and retriever configuration for use with DSPy framework.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-vultr-dspy-ollama.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom dspy.retrieve.qdrant_rm import QdrantRM\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(\n    os.environ.get(\"QDRANT_URL\"),\n    api_key=os.environ.get(\"QDRANT_API_KEY\"),\n)\nqdrant_retriever = QdrantRM(\n    qdrant_collection_name=\"document-parts\",\n    qdrant_client=client,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent with Greeting Function\nDESCRIPTION: Example showing how to create an agent with a custom greeting function that supports multiple languages and uses context variables.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/swarm.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef greet(context_variables, language):\n    user_name = context_variables[\"user_name\"]\n    greeting = \"Hola\" if language.lower() == \"spanish\" else \"Hello\"\n    print(f\"{greeting}, {user_name}!\")\n    return \"Done\"\n\nagent = Agent(\n    name=\"Greeter Agent\",\n    functions=[greet],\n)\n\nclient.run(\n    agent=agent,\n    messages=[{\"role\": \"user\", \"content\": \"Greet me in Spanish.\"}],\n    context_variables={\"user_name\": \"John\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Qdrant Client and Upstage Configuration in TypeScript\nDESCRIPTION: Initializes the Qdrant client and sets up the configuration for Upstage API in TypeScript. It also defines sample texts for embedding.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/upstage.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from '@qdrant/js-client-rest';\n\nconst UPSTAGE_BASE_URL = \"https://api.upstage.ai/v1/solar/embeddings\"\nconst UPSTAGE_API_KEY = \"<YOUR_API_KEY>\"\n\nconst client = new QdrantClient({ url: 'http://localhost:6333' });\n\nconst headers = {\n    \"Authorization\": \"Bearer \" + UPSTAGE_API_KEY,\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\"\n}\n\nconst texts = [\n    \"Qdrant is the best vector search engine!\",\n    \"Loved by Enterprises and everyone building for low latency, high performance, and scale.\",\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Prefetch in Go\nDESCRIPTION: This snippet demonstrates how to perform a query with prefetching using the Qdrant Go client. It sends a query to the specified collection with prefetch configurations for improved performance. It makes use of `context` for managing the request lifecycle and error handling.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-multivector/go.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tPrefetch: []*qdrant.PrefetchQuery{\n\t\t{\n\t\t\tQuery: qdrant.NewQueryDense([]float32{0.01, 0.45, 0.67}),\n\t\t\tLimit: qdrant.PtrOf(uint64(100)),\n\t\t},\n\t},\n\tQuery: qdrant.NewQueryMulti([][]float32{\n\t\t{0.1, 0.2},\n\t\t{0.2, 0.1},\n\t\t{0.8, 0.9},\n\t}),\n\tUsing: qdrant.PtrOf(\"colbert\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Points from Qdrant with Python\nDESCRIPTION: This snippet initializes a Qdrant client and performs a query on a collection using both sparse and dense vector prefetch strategies. Dependencies include the 'qdrant_client' Python package. The main parameters include 'collection_name', 'prefetch' lists for defining the vector queries, and 'query' which specifies the fusion query type. The snippet expects valid collection_name values and properly formatted vector inputs, returning queried point data based on the provided vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-basic/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=[\n        models.Prefetch(\n            query=models.SparseVector(indices=[1, 42], values=[0.22, 0.8]),\n            using=\"sparse\",\n            limit=20,\n        ),\n        models.Prefetch(\n            query=[0.01, 0.45, 0.67],  # <-- dense vector\n            using=\"dense\",\n            limit=20,\n        ),\n    ],\n    query=models.FusionQuery(fusion=models.Fusion.RRF),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Go\nDESCRIPTION: Demonstrates how to initialize a Qdrant client connection and create a new vector collection. The code configures a client with localhost connection settings and creates a collection with 100-dimensional vectors using cosine distance metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/simple/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     100,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Building a New Spark DataFrame with Vectorized Data\nDESCRIPTION: Creates a new Spark DataFrame that includes the vectorized data with an defined schema for further processing in the Qdrant database. This step ensures compatibility and facilitates data upload.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/databricks.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pyspark.sql.types import StructType, StructField, StringType, ArrayType, FloatType, IntegerType\n\n# Define the schema for the new dataframe\nschema = StructType([\n    StructField(\"sentence1\", StringType()),\n    StructField(\"sentence2\", StringType()),\n    StructField(\"dense_vector\", ArrayType(FloatType())),\n    StructField(\"sparse_vector_indices\", ArrayType(IntegerType())),\n    StructField(\"sparse_vector_values\", ArrayType(FloatType()))\n])\n\n# Create the new dataframe with the vectorized data\nembeddings_df = spark.createDataFrame(data=embeddings, schema=schema)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Token Weights\nDESCRIPTION: Function to examine weights of individual tokens in embeddings\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-splade.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(5):\n    print(f\"Token at index {sparse_embeddings_list[0].indices[i]} has weight {sparse_embeddings_list[0].values[i]}\")\n```\n\n----------------------------------------\n\nTITLE: Preparing Sample Documents\nDESCRIPTION: Create a list of sample text documents for embedding generation\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndocuments: List[str] = [\n    \"FastEmbed is lighter than Transformers & Sentence-Transformers.\",\n    \"FastEmbed is supported by and maintained by Qdrant.\",\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Cloud Cluster Resource\nDESCRIPTION: Programmatically create a new Qdrant Cloud cluster with specified configuration across different programming languages\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/cloud-tools/pulumi.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nqdrant_cloud.AccountsCluster(\n    resource_name=\"pl-example-cluster-resource\",\n    name=\"pl-example-cluster\",\n    cloud_provider=\"gcp\",\n    cloud_region=\"us-east4\",\n    configuration=qdrant_cloud.AccountsClusterConfigurationArgs(\n        number_of_nodes=1,\n        node_configuration=qdrant_cloud.AccountsClusterConfigurationNodeConfigurationArgs(\n            package_id=\"3920d1eb-d3eb-4117-9578-b12d89bb1c5d\"\n        ),\n    ),\n    account_id=\"<ACCOUNT_ID>\",\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew qdrantCloud.AccountsCluster(\"pl-example-cluster-resource\", {\n    cloudProvider: \"gcp\",\n    cloudRegion: \"us-east4\",\n    configuration: {\n        numberOfNodes: 1,\n        nodeConfiguration: {\n            packageId: \"3920d1eb-d3eb-4117-9578-b12d89bb1c5d\"\n        }\n    },\n    accountId: \"<ACCOUNT_ID>\"\n})\n```\n\nLANGUAGE: java\nCODE:\n```\nnew AccountsCluster(\"pl-example-cluster-resource\", AccountsClusterArgs.builder()\n        .name(\"pl-example-cluster\")\n        .cloudProvider(\"gcp\")\n        .cloudRegion(\"us-east4\")\n        .configuration(AccountsClusterConfigurationArgs.builder()\n                .numberOfNodes(1.0)\n                .nodeConfiguration(AccountsClusterConfigurationNodeConfigurationArgs.builder()\n                        .packageId(\"3920d1eb-d3eb-4117-9578-b12d89bb1c5d\")\n                        .build())\n                .build())\n        .accountId(\"<ACCOUNT_ID>\")\n        .build());\n```\n\n----------------------------------------\n\nTITLE: Configuring HNSW Parameters in Qdrant Collection\nDESCRIPTION: Updates a collection's vector configuration to set HNSW index parameters 'm' and 'ef_construct'. These parameters control the number of edges per node and the index build range respectively.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-resource-optimization.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.update_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config={\n        \"my_vector\": models.VectorParamsDiff(\n            hnsw_config=models.HnswConfigDiff(\n                m=32,\n                ef_construct=123,\n            ),\n        ),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Loading AutoGen Configuration\nDESCRIPTION: Loads configuration from environment variable or JSON file for AutoGen setup\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/autogen.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport autogen\n\nconfig_list = autogen.config_list_from_json(\"OAI_CONFIG_LIST\")\n```\n\n----------------------------------------\n\nTITLE: Defining Field Condition using Qdrant - Python\nDESCRIPTION: This snippet initializes a FieldCondition to filter items by matching the text 'good cheap' in the 'description' key. It utilizes the MatchText method from Qdrant's models to establish the criteria for selection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/full-text-match/python.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nmodels.FieldCondition(\n    key=\"description\",\n    match=models.MatchText(text=\"good cheap\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in TypeScript\nDESCRIPTION: This snippet initializes a Qdrant client instance, establishing a connection to a Qdrant instance running on localhost at port 6333. The `QdrantClient` constructor takes a configuration object specifying the host and port of the Qdrant instance. This client instance is then used to interact with the database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-with-payload/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n```\n\n----------------------------------------\n\nTITLE: Updating a Collection with Strict Mode in Bash\nDESCRIPTION: Curl command for updating an existing Qdrant collection to enable strict mode with unindexed filtering retrieve restriction.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"strict_mode_config\": {\n        \"enabled\": true,\n        \"unindexed_filtering_retrieve\": true\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Embedding Vector Example\nDESCRIPTION: Sample output showing the numerical values of generated embeddings\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nEmbeddings:\n [[-0.11154681  0.00976555  0.00524559  0.01951888 -0.01934952  0.02943449\n  -0.10519084 -0.00890122  0.01831438  0.01486796 -0.05642502  0.02561352\n  -0.00120165  0.00637456  0.02633459  0.0089221   0.05313658  0.03955453\n  -0.04400245 -0.02929407  0.04691846 -0.02515868  0.00778646 -0.05410657\n...\n  -0.00243012 -0.01820582  0.02938612  0.02108984 -0.02178085  0.02971899\n  -0.00790564  0.03561783  0.0652488  -0.04371546 -0.05550042  0.02651665\n  -0.01116153 -0.01682246 -0.05976734 -0.03143916  0.06522726  0.01801389\n  -0.02611006  0.01627177 -0.0368538   0.03968835  0.027597    0.03305927]]\n```\n\n----------------------------------------\n\nTITLE: Updating Collection Configuration with Qdrant Go\nDESCRIPTION: This snippet showcases how to update a collection's configuration using the Qdrant Go client.  It calls the `UpdateCollection` method, providing a context and an `UpdateCollection` object with the collection name and an `OptimizersConfigDiff`. The collection name should be replaced with an actual collection name.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/trigger-indexing/go.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.UpdateCollection(context.Background(), &qdrant.UpdateCollection{\n\tCollectionName:   \"{collection_name}\",\n\tOptimizersConfig: &qdrant.OptimizersConfigDiff{},\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Match Condition for Color in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an object that specifies a match condition for the color property, setting its value to 'red'. It shows how to structure the match condition object in TypeScript.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-keyword/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    key: 'color', \n    match: {value: 'red'}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database with C# Client\nDESCRIPTION: This snippet demonstrates how to connect to a Qdrant server and perform a vector search query. It initializes a client connection to a local Qdrant instance on port 6334, then sends a vector search query to a specified collection using tuples of float values and IDs with a named vector field and result limit.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/sparse-vectors/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  query: new (float, uint)[] {(0.1f, 1), (0.2f, 3), (0.3f, 5), (0.4f, 7)},\n  usingVector: \"text\",\n  limit: 3\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Strict Mode in Go\nDESCRIPTION: Go code for creating a new Qdrant collection with strict mode enabled and indexing threshold restriction using the Qdrant Go client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"context\"\n\n  \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n  Host: \"localhost\",\n  Port: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n  CollectionName: \"{collection_name}\",\n  StrictModeConfig: &qdrant.StrictModeConfig{\n        Enabled: qdrant.PtrOf(true),\n    IndexingThreshold: qdrant.PtrOf(true),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database in Go\nDESCRIPTION: This code demonstrates how to import the Qdrant client package, establish a connection to a Qdrant server, and perform a vector similarity search. The query includes customized search parameters such as HNSW (Hierarchical Navigable Small World) expansion factor and exact search toggle.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-params/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tParams: &qdrant.SearchParams{\n\t\tHnswEf: qdrant.PtrOf(uint64(128)),\n\t\tExact:  qdrant.PtrOf(false),\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: JSON Message Format for Combined Dense and Sparse Vectors\nDESCRIPTION: Example JSON message format for inserting a point with both dense and sparse vectors into Qdrant. This demonstrates combining different vector types in a single record.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/fluvio.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collection_name\": \"{collection_name}\",\n    \"id\": \"a10435b5-2a58-427a-a3a0-a5d845b147b7\",\n    \"vectors\": {\n        \"some-other-dense\": [\n            0.1,\n            0.2,\n            0.3,\n            0.4,\n            0.5,\n            0.6,\n            0.7,\n            0.8\n        ],\n        \"some-sparse\": {\n            \"indices\": [\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9\n            ],\n            \"values\": [\n                0.1,\n                0.2,\n                0.3,\n                0.4,\n                0.5,\n                0.6,\n                0.7,\n                0.8,\n                0.9,\n                1.0\n            ]\n        }\n    },\n    \"payload\": {\n        \"name\": \"fluvio\",\n        \"description\": \"Solution for distributed stream processing\",\n        \"url\": \"https://www.fluvio.io/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Index Statistics Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of index statistics including dimension, count, and distance metric type.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/mastra.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IndexStats {\n  dimension: number;\n  count: number;\n  metric: \"cosine\" | \"euclidean\" | \"dotproduct\";\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping a Qdrant Table\nDESCRIPTION: SQL statement for dropping a table from a Qdrant database in MindsDB, which removes the collection and all its data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/mindsdb.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n DROP TABLE qdrant_test.test_table;\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Deferred HNSW Indexing in C#\nDESCRIPTION: C# implementation to create a Qdrant collection with disabled HNSW indexing. Setting the M parameter to 0 prevents index construction during uploads, improving ingestion performance for large datasets.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine },\n\thnswConfig: new HnswConfigDiff { M = 0 }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-only API Key in YAML\nDESCRIPTION: YAML configuration example for enabling a read-only API key in Qdrant. This key can only be used for read operations and can be used alongside the regular API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  read_only_api_key: your_secret_read_only_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Grouped Vector Search Query with Qdrant Java Client\nDESCRIPTION: Performs an asynchronous grouped search operation in Qdrant using vector coordinates. Configures the search to group results by document_id field, with a limit of 4 groups and 2 results per group. Uses vector coordinates [0.2, 0.1, 0.9, 0.7] for nearest neighbor search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-groups/basic/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport io.qdrant.client.grpc.Points.SearchPointGroups;\n\nclient.queryGroupsAsync(\n        QueryPointGroups.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setGroupBy(\"document_id\")\n                .setLimit(4)\n                .setGroupSize(2)\n                .build())\n        .get();\n```\n\n----------------------------------------\n\nTITLE: Filtering Qdrant Collection with Nested Conditions in JSON\nDESCRIPTION: This code snippet shows a POST request body for filtering data in a Qdrant collection. It uses nested conditions to check for specific values within array elements and includes an ID filter. The snippet demonstrates how to structure complex queries in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-nested-clause-and-has-id/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"filter\": {\n    \"must\": [\n      {\n        \"nested\": {\n          \"path\": \"data\",\n          \"filter\": {\n            \"must\": [\n              {\n                \"key\": \"food.diet\",\n                \"match\": {\n                  \"value\": \"meat\"\n                }\n              },\n              {\n                \"key\": \"likes\",\n                \"match\": {\n                  \"value\": true\n                }\n              }\n            ]\n          }\n        }\n      },\n      {\n        \"has_id\": [\"1\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Prefetch in C#\nDESCRIPTION: This C# code snippet demonstrates how to query a Qdrant collection using the `QdrantClient` and `QueryAsync` methods with prefetch. It includes specifying the collection name, prefetch queries with filters and limits, ordering the results by a field, and setting the overall limit for the query. The code requires the `Qdrant.Client` NuGet package.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-with-payload/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  prefetch: new List <PrefetchQuery> {\n    new() {\n      Query = new float[] {\n          0.01f, 0.45f, 0.67f\n        },\n        Filter = MatchKeyword(\"color\", \"red\"),\n        Limit = 10\n    },\n    new() {\n      Query = new float[] {\n          0.01f, 0.45f, 0.67f\n        },\n        Filter = MatchKeyword(\"color\", \"green\"),\n        Limit = 10\n    }\n  },\n  query: (OrderBy) \"price\",\n  limit: 10\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Google Generative AI SDK\nDESCRIPTION: Commands to install the Google Generative AI package for accessing Gemini models.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/gemini.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install google-generativeai\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Clients - TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the Twelve Labs and Qdrant clients in TypeScript, requiring your API key for Twelve Labs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from '@qdrant/js-client-rest';\nimport { TwelveLabs, EmbeddingsTask, SegmentEmbedding } from 'twelvelabs-js';\n\n// Get your API keys from:\n// https://playground.twelvelabs.io/dashboard/api-key\nconst TL_API_KEY = \"<YOUR_TWELVE_LABS_API_KEY>\"\n\nconst twelveLabsClient = new TwelveLabs({ apiKey: TL_API_KEY });\nconst qdrantClient = new QdrantClient({ url: 'http://localhost:6333' });\n```\n\n----------------------------------------\n\nTITLE: Listing Snapshots in Qdrant Collection using Python Client\nDESCRIPTION: Demonstrates how to connect to a Qdrant server and retrieve snapshots for a specified collection. Requires qdrant-client Python package and a running Qdrant instance accessible at the specified URL.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/list-collection-snapshots/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.list_snapshots(collection_name=\"{collection_name}\")\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages in Python\nDESCRIPTION: This snippet imports the necessary classes from the PremAI and Qdrant SDKs to handle AI models and Qdrant operations in Python.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom premai import Prem\n\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.models import Distance, VectorParams\n```\n\n----------------------------------------\n\nTITLE: WAL Access Error in Distributed Deployment\nDESCRIPTION: Error message indicating WAL file access issues in distributed deployments, typically due to multiple instances trying to access the same storage location.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/common-errors.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCan't open Collections meta Wal: Os { code: 11, kind: WouldBlock, message: \"Resource temporarily unavailable\" }\n```\n\n----------------------------------------\n\nTITLE: Overwriting Payload Data in Qdrant Collection using Rust Client\nDESCRIPTION: Sets new payload values for multiple points in a Qdrant collection using SetPayloadPointsBuilder. The code specifies point IDs (0, 3, 10) and assigns JSON payload with two string properties, waiting for operation completion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/overwrite-payload/by-point-id/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{PointsIdsList, SetPayloadPointsBuilder};\nuse qdrant_client::Payload;\nuse serde_json::json;\n\nclient\n    .overwrite_payload(\n        SetPayloadPointsBuilder::new(\n            \"{collection_name}\",\n            Payload::try_from(json!({\n                \"property1\": \"string\",\n                \"property2\": \"string\",\n            }))\n            .unwrap(),\n        )\n        .points_selector(PointsIdsList {\n            ids: vec![0.into(), 3.into(), 10.into()],\n        })\n        .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with ScrollAsync in C#\nDESCRIPTION: This snippet uses the `ScrollAsync` method to query the Qdrant database. It retrieves data from the specified `collection_name`, filters for entries where the `color` field matches `red`, limits the result to one entry, and selects the payload.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-and-params/csharp.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nawait client.ScrollAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: MatchKeyword(\"color\", \"red\"),\n\tlimit: 1,\n\tpayloadSelector: true\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Stage Queries for Re-Scoring in JSON\nDESCRIPTION: The snippet shows how to structure a multi-stage query in Qdrant, fetching 1000 results using a shorter MRL byte vector and then re-scoring them with a full vector to extract the top 10 results. It highlights an approach to obtain accurate and resource-efficient search results using Qdrant's Query API.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/hybrid-queries.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\\\"/documentation/headless/snippets/query-points/hybrid-rescoring/\\\" >}}\n```\n\n----------------------------------------\n\nTITLE: Clearing Point Payloads via HTTP POST Request\nDESCRIPTION: HTTP POST request to clear payload data from specific points in a Qdrant collection. The request requires the collection name in the URL path and a JSON body containing an array of point IDs to clear.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/clear-payload/simple/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/payload/clear\n{\n    \"points\": [0, 3, 100]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Filtered Count in C#\nDESCRIPTION: Creates a connection to a Qdrant server running on localhost port 6334 and performs a count operation with a keyword filter. The example uses an exact count with a filter that matches records where the 'color' field equals 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/count-points/with-filter-exact/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CountAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: MatchKeyword(\"color\", \"red\"),\n\texact: true\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing QdrantStorage Class for CrewAI Integration\nDESCRIPTION: Custom implementation of RAGStorage class to enable Qdrant integration with CrewAI for handling embeddings in memory entries. Includes core methods for searching and resetting storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/webinar-crewai-qdrant-obsidian.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nfrom crewai.memory.storage.rag_storage import RAGStorage\n\nclass QdrantStorage(RAGStorage):\n    \"\"\"\n    Extends Storage to handle embeddings for memory entries \n    using Qdrant.\n    \"\"\"\n\n    ...\n\n    def search(self,\n        query: str,\n        limit: int = 3,\n        filter: Optional[dict] = None,\n        score_threshold: float = 0,\n    ) -> list[dict]:\n        ...\n\n    def reset(self) -> None:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Splitting Documents with RecursiveCharacterTextSplitter\nDESCRIPTION: Splits loaded documents into smaller chunks using LangChain's RecursiveCharacterTextSplitter for better indexing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter\n\nsplitter = RecursiveCharacterTextSplitter(chunk_size=300, chunk_overlap=100)\nsplit_documents = splitter.split_documents(documents)\n```\n\n----------------------------------------\n\nTITLE: Starting Qdrant Docker Instance\nDESCRIPTION: Command to start a local Qdrant instance using Docker.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/llama-index-multitenancy.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name qdrant -p 6333:6333 -p 6334:6334 qdrant/qdrant:latest\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant with Memory Limit in Docker\nDESCRIPTION: Docker command to run Qdrant with a specified memory limit, used for testing minimum RAM requirements for serving vector data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/memory-consumption.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm \\\n    --memory 1024mb \\\n    --network=host \\\n    -v \"$(pwd)/data/storage:/qdrant/storage\" \\\n    qdrant/qdrant:latest\n```\n\n----------------------------------------\n\nTITLE: Deleting Payload Fields with Conditions using Qdrant Rust Client\nDESCRIPTION: This code snippet demonstrates how to delete specific payload fields ('color' and 'price') from points in a Qdrant collection where the 'color' matches 'red'. The operation waits for completion before returning a result.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-payload/by-filter/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, DeletePayloadPointsBuilder, Filter};\n\nclient\n    .delete_payload(\n        DeletePayloadPointsBuilder::new(\n            \"{collection_name}\",\n            vec![\"color\".to_string(), \"price\".to_string()],\n        )\n        .points_selector(Filter::must([Condition::matches(\n            \"color\",\n            \"red\".to_string(),\n        )]))\n        .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Analyzing Document Expansion\nDESCRIPTION: Code to retrieve and analyze how SPLADE++ expands a document from the Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nquery_embedding = list(sparse_model.embed(\"A movie about music\"))[0]\n\nresponse = qdrant_client.query_points(\n    collection_name=\"movies\",\n    query=models.SparseVector(indices=query_embedding.indices, values=query_embedding.values),\n    using=\"film_description\",\n    limit=1,\n    with_vectors=True,\n    with_payload=True\n)\n\nprint(get_tokens_and_weights(response.points[0].vector['film_description'], tokenizer))\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with Nested Filters in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client to perform a scroll operation on a collection with nested filters. It filters for records where the 'diet' object contains 'food' matching 'meat' and 'likes' set to true.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-nested-clause/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must: [\n      {\n        nested: {\n          key: \"diet\",\n          filter: {\n            must: [\n              {\n                key: \"food\",\n                match: { value: \"meat\" },\n              },\n              {\n                key: \"likes\",\n                match: { value: true },\n              },\n            ],\n          },\n        },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode in Qdrant Collection Creation (Java)\nDESCRIPTION: This Java code snippet uses the Qdrant client to create a new collection with strict mode enabled, specifically activating the unindexed_filtering_retrieve limit.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.13.x.md#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.StrictModeCOnfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setStrictModeConfig(\n                StrictModeConfig.newBuilder().setEnabled(true).setUnindexedFilteringRetrieve(true).build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Creating Spark Session with Qdrant Support in Java\nDESCRIPTION: Java code to create a Spark session with Qdrant support by specifying the path to the Qdrant-Spark connector JAR file.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/spark.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.spark.sql.SparkSession;\n\npublic class QdrantSparkJavaExample {\n    public static void main(String[] args) {\n        SparkSession spark = SparkSession.builder()\n                .config(\"spark.jars\", \"path/to/file/spark-VERSION.jar\") // Specify the path to the downloaded JAR file\n                .master(\"local[*]\")\n                .appName(\"qdrant\")\n                .getOrCreate(); \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Feast with Qdrant Support\nDESCRIPTION: Command to install Feast Python package with Qdrant integration support using pip.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/feast.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install 'feast[qdrant]'\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables (Python)\nDESCRIPTION: Python code to load environment variables from a .env file using python-dotenv library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/recommendation-system-ovhcloud.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dotenv import load_dotenv\nload_dotenv('./.env')\n```\n\n----------------------------------------\n\nTITLE: Creating Geospatial Bounding Box Filter in Qdrant Go Client\nDESCRIPTION: Constructs a geographic bounding box filter for spatial queries using Qdrant's Go client. Specifies a rectangular area defined by latitude and longitude coordinates for filtering location-based data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-bounding-box/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewGeoBoundingBox(\"location\", 52.520711, 13.403683, 52.495862, 13.455868)\n```\n\n----------------------------------------\n\nTITLE: JSON Message Format for Multi-vector\nDESCRIPTION: Example JSON message format for inserting multiple vectors of the same name into Qdrant. This format demonstrates how to structure data for collections with multi-vector fields containing multiple embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/fluvio.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collection_name\": \"{collection_name}\",\n    \"id\": 1,\n    \"vectors\": {\n        \"some-multi\": [\n            [\n                0.1,\n                0.2,\n                0.3,\n                0.4,\n                0.5,\n                0.6,\n                0.7,\n                0.8,\n                0.9,\n                1.0\n            ],\n            [\n                1.0,\n                0.9,\n                0.8,\n                0.5,\n                0.4,\n                0.8,\n                0.6,\n                0.4,\n                0.2,\n                0.1\n            ]\n        ]\n    },\n    \"payload\": {\n        \"name\": \"fluvio\",\n        \"description\": \"Solution for distributed stream processing\",\n        \"url\": \"https://www.fluvio.io/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Filtered Search in Qdrant (Python)\nDESCRIPTION: This code snippet shows how to perform a filtered search in Qdrant. It demonstrates querying a collection with a specific vector and applying a filter to narrow down the results based on a category.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-resource-optimization.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresults = client.search(\n    collection_name=\"my_collection\",\n    query_vector=[0.1, 0.2, 0.3],\n    query_filter=models.Filter(must=[\n        models.FieldCondition(\n            key=\"category\",\n            match=models.MatchValue(value=\"my-category-name\"),\n        )\n    ]),\n    limit=10, \n)\n```\n\n----------------------------------------\n\nTITLE: Querying Points Using Qdrant Client in Rust\nDESCRIPTION: This snippet demonstrates querying points from a collection in Qdrant using specific input criteria for recommendations. The `qdrant_client` library is used, requiring the `QueryPointsBuilder` and `RecommendInputBuilder` to structure inputs and execute an asynchronous query. Key inputs include positive and negative identifiers, and constraints like limit and usage specifics (e.g., image). The snippet concludes with an async call, returning the query results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-named-vectors/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{QueryPointsBuilder, RecommendInputBuilder};\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(\n                RecommendInputBuilder::default()\n                    .add_positive(100)\n                    .add_positive(231)\n                    .add_negative(718)\n                    .build(),\n            )\n            .limit(10)\n            .using(\"image\"),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Setting Payload Data with Filtering in Qdrant Java Client\nDESCRIPTION: Shows how to asynchronously set payload data for points in a Qdrant collection that match specific filter conditions. Uses the ConditionFactory and ValueFactory for creating match conditions and payload values, with support for property mapping.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/set-payload/by-filter/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.Map;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\nimport static io.qdrant.client.ValueFactory.value;\n\nclient\n    .setPayloadAsync(\n        \"{collection_name}\",\n        Map.of(\"property1\", value(\"string\"), \"property2\", value(\"string\")),\n        Filter.newBuilder().addMust(matchKeyword(\"color\", \"red\")).build(),\n        true,\n        null,\n        null)\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collection Points with Scroll API and Filter\nDESCRIPTION: This HTTP POST request demonstrates how to use the Qdrant Collection Points Scroll API with a filter. It queries points in a collection where the population of any city in the country is greater than or equal to 9.0. The filter uses a 'should' clause, which is equivalent to an OR condition.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-array/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"should\": [\n            {\n                \"key\": \"country.cities[].population\",\n                \"range\": {\n                    \"gte\": 9.0,\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Both Vectors and HNSW Index on Disk in Qdrant\nDESCRIPTION: JSON configuration for creating a Qdrant collection with both vectors and HNSW index stored on disk. This setup helps manage memory usage by keeping both the vector data and the index structure in memmap storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/storage.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/create-collection/with-vectors-and-hnsw-on-disk/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Database in Go\nDESCRIPTION: Sets up a Qdrant client connection to localhost and performs a scroll query with OR conditions filtering for records matching either 'London' city or 'red' color. Uses the official Qdrant Go client library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-should-filter/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tShould: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t\t\tqdrant.NewMatch(\"color\", \"red\"),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing QdrantClient and Listing Aliases in Java\nDESCRIPTION: This snippet shows how to import, initialize a Qdrant client with a local connection, and execute a basic operation to list all aliases. It creates a non-secure connection to a local Qdrant server running on port 6334.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/list-all/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.listAliasesAsync().get();\n```\n\n----------------------------------------\n\nTITLE: TypeScript/JavaScript Client with JWT Authentication\nDESCRIPTION: Example of initializing the Qdrant JavaScript client with JWT authentication. The JWT token is passed as the API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({\n  host: \"xyz-example.eu-central.aws.cloud.qdrant.io\",\n  apiKey: \"<JWT>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Hayhooks Service\nDESCRIPTION: Command to start the Hayhooks service on the default port 1416\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nhayhooks run\n```\n\n----------------------------------------\n\nTITLE: Setting Qdrant Environment Variables in Python\nDESCRIPTION: Python code to set environment variables for Qdrant URL and API key. This allows the application to connect to the Qdrant instance programmatically.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-vultr-dspy-ollama.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nos.environ[\"QDRANT_URL\"] = \"https://qdrant.example.com\"\nos.environ[\"QDRANT_API_KEY\"] = \"your-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshots HTTP Endpoint\nDESCRIPTION: HTTP POST endpoint definition for creating snapshots in Qdrant. This endpoint allows creating collection snapshots for backup and recovery purposes.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/create-full-snapshot/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /snapshots\n```\n\n----------------------------------------\n\nTITLE: Installing DocArray with Qdrant Support\nDESCRIPTION: Command to install DocArray Python package with Qdrant integration support using pip package manager.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/docarray.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"docarray[qdrant]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Index on Text Field in Qdrant\nDESCRIPTION: This HTTP PUT request creates an index on a specified text field within a Qdrant collection. The request defines the field name to index and the schema for the indexed field, including the tokenizer, token length constraints, and case handling.  It specifies the field to be indexed and its schema.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/simple-full-text/http.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPUT /collections/{collection_name}/index\n{\n    \"field_name\": \"name_of_the_field_to_index\",\n    \"field_schema\": {\n        \"type\": \"text\",\n        \"tokenizer\": \"word\",\n        \"min_token_len\": 2,\n        \"max_token_len\": 20,\n        \"lowercase\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling Filtered Points in Qdrant Collection via HTTP POST\nDESCRIPTION: This HTTP POST request scrolls through points in a specified Qdrant collection. It applies a filter to return only points with specific IDs. The ellipsis suggests additional parameters may be included in the request body.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-has-id-filter/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must\": [\n            { \"has_id\": [1,3,5,7,9,11] }\n        ]\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Knowledge Base in Python\nDESCRIPTION: Initializes a QdrantKnowledgeBase object with a specified collection name. This sets up the connection to Qdrant for use with Canopy.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/canopy.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom canopy.knowledge_base import QdrantKnowledgeBase\n\nkb = QdrantKnowledgeBase(collection_name=\"<YOUR_COLLECTION_NAME>\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Named Vectors in Qdrant Connector\nDESCRIPTION: Shows how to configure the Qdrant connector to use named vectors, allowing multiple vectors per point in the Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/lakechain.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst connector = new QdrantStorageConnector.Builder()\n      .withScope(this)\n      .withIdentifier('QdrantStorageConnector')\n      .withCacheStorage(cache)\n      .withSource(source)\n      .withApiKey(qdrantApiKey)\n      .withCollectionName('collection_name')\n      .withVectorName('my-vector-name')\n      .withUrl('https://xyz-example.eu-central.aws.cloud.qdrant.io:6333')\n      .build();\n```\n\n----------------------------------------\n\nTITLE: Setting Read-only API Key via Environment Variable\nDESCRIPTION: Example of setting a read-only API key via environment variable for a Qdrant instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport QDRANT__SERVICE__READ_ONLY_API_KEY=your_secret_read_only_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Vector Search with Qdrant in Java\nDESCRIPTION: Demonstrates how to initialize a Qdrant client, create filters, and execute batch vector similarity searches. The code shows setting up a client connection, creating a filter for London city, and performing multiple nearest neighbor searches with specific vector coordinates.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/batch-search/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nFilter filter = Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")).build();\n\nList<QueryPoints> searches = List.of(\n        QueryPoints.newBuilder()\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setFilter(filter)\n                .setLimit(3)\n                .build(),\n        QueryPoints.newBuilder()\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setFilter(filter)\n                .setLimit(3)\n                .build());\n\nclient.queryBatchAsync(\"{collection_name}\", searches).get();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying with Qdrant C# Client\nDESCRIPTION: This snippet demonstrates how to create a Qdrant client instance that connects to a local Qdrant server on port 6334, and then perform a vector similarity search query. The query uses a 4-dimensional vector as the search input against a specified collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/simple-dense/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n collectionName: \"{collection_name}\",\n query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collection in Java\nDESCRIPTION: This code snippet demonstrates how to query a Qdrant collection using the Java client. It creates a client, builds a query to find nearest points using predefined vectors, and executes the query asynchronously. The `nearest` method from `QueryFactory` is used to prepare the vector for similarity search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/multivector/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n    .setCollectionName(\"{collection_name}\")\n    .setQuery(nearest(new float[][] {\n        {-0.013f, 0.020f, -0.007f, -0.111f}, \n        {-0.030f, -0.055f, 0.001f, 0.072f}, \n        {-0.041f, 0.014f, -0.032f, -0.062f}\n    }))\n    .build()).get();\n```\n\n----------------------------------------\n\nTITLE: Hybrid Search with C# Client\nDESCRIPTION: Implementation of hybrid search using the Qdrant C# client with async/await pattern\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  prefetch: new List < PrefetchQuery > {\n    new() {\n      Query = new(float, uint)[] {\n          (0.22f, 1), (0.8f, 42),\n        },\n        Using = \"sparse\",\n        Limit = 20\n    },\n    new() {\n      Query = new float[] {\n          0.01f, 0.45f, 0.67f\n        },\n        Using = \"dense\",\n        Limit = 20\n    }\n  },\n  query: Fusion.Rrf\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing QdrantClient in Java\nDESCRIPTION: This snippet demonstrates how to initialize a `QdrantClient` in Java, connecting to a Qdrant Cloud instance. It requires the `io.qdrant.client` library. The snippet initializes the client with the host address, port and API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart-cloud.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nQdrantClient client =\n    new QdrantClient(\n        QdrantGrpcClient.newBuilder(\n                \"xyz-example.eu-central.aws.cloud.qdrant.io\",\n                6334,\n                true)\n            .withApiKey(\"<your-api-key>\")\n            .build());\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Vector Store for Kotaemon in Python\nDESCRIPTION: This snippet demonstrates how to configure Kotaemon to use Qdrant as a vector store by setting key parameters in 'flowsettings.py'. Prerequisites include having Kotaemon installed and a valid API key for Qdrant. The key parameters include 'url' for the Qdrant endpoint and 'api_key' for authentication. The configuration requires a restart of Kotaemon to apply changes.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/platforms/kotaemon.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nKH_VECTORSTORE = {\n    \"__type__\": \"kotaemon.storages.QdrantVectorStore\",\n    \"url\": \"https://xyz-example.eu-central.aws.cloud.qdrant.io:6333\",\n    \"api_key\": \"<provide-your-own-key>'\",\n    \"client_kwargs\": {} # Additional options to pass to qdrant_client.QdrantClient\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Data for Qdrant Vector Database\nDESCRIPTION: Python code defining a list of movie data that will be loaded into Qdrant. Each movie entry contains fields that can be vectorized for similarity search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/dlt.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dlt\nfrom dlt.destinations.qdrant import qdrant_adapter\n\nmovies = [\n    {\n        \"title\": \"Blade Runner\",\n        \"year\": 1982,\n        \"description\": \"The film is about a dystopian vision of the future that combines noir elements with sci-fi imagery.\"\n    },\n    {\n        \"title\": \"Ghost in the Shell\",\n        \"year\": 1995,\n        \"description\": \"The film is about a cyborg policewoman and her partner who set out to find the main culprit behind brain hacking, the Puppet Master.\"\n    },\n    {\n        \"title\": \"The Matrix\",\n        \"year\": 1999,\n        \"description\": \"The movie is set in the 22nd century and tells the story of a computer hacker who joins an underground group fighting the powerful computers that rule the earth.\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Backup Management Features in YAML\nDESCRIPTION: This snippet defines the configuration for backup management features including snapshots, scheduled snapshots, and restores. It specifies enable flags, retention policies, and concurrency settings for each feature.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# If disabled, all other properties in this struct are disregarded. Otherwise, the individual features will be inspected.\n# Default is true.\nenable: true\n# Snapshots contains the settings for snapshots as part of backup management.\nsnapshots:\n  # Whether or not the Snapshot feature is enabled.\n  # Default is true.\n  enable: true\n  # The VolumeSnapshotClass used to make VolumeSnapshots.\n  # Default is \"csi-snapclass\".\n  volumeSnapshotClass: \"csi-snapclass\"\n  # The duration a snapshot is retained when the phase becomes Failed or Skipped\n  # Default is 72h (3d).\n  retainUnsuccessful: 72h\n  # MaxConcurrentReconciles is the maximum number of concurrent Reconciles which can be run. Defaults to 1.\n  maxConcurrentReconciles: 1\n# ScheduledSnapshots contains the settings for scheduled snapshot as part of backup management.\nscheduledSnapshots:\n  # Whether or not the ScheduledSnapshot feature is enabled.\n  # Default is true.\n  enable: true\n  # MaxConcurrentReconciles is the maximum number of concurrent Reconciles which can be run. Defaults to 1.\n  maxConcurrentReconciles: 1\n# Restores contains the settings for restoring (a snapshot) as part of backup management.\nrestores:\n  # Whether or not the Restore feature is enabled.\n  # Default is true.\n  enable:  true\n  # MaxConcurrentReconciles is the maximum number of concurrent Reconciles which can be run. Defaults to 1.\n  maxConcurrentReconciles: 1\n```\n\n----------------------------------------\n\nTITLE: Scrolling Filtered Points in Qdrant Collection via HTTP POST\nDESCRIPTION: This code snippet shows an HTTP POST request to scroll through points in a Qdrant collection. It includes a filter to match points where the city is London and the color is red. The ellipsis (...) indicates additional parameters may be included in the request body.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-must-filter/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must\": [\n            { \"key\": \"city\", \"match\": { \"value\": \"London\" } },\n            { \"key\": \"color\", \"match\": { \"value\": \"red\" } }\n        ]\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Embedding Model\nDESCRIPTION: Initialize the default BAAI/bge-small-en-v1.5 embedding model and print confirmation\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nembedding_model = TextEmbedding()\nprint(\"The model BAAI/bge-small-en-v1.5 is ready to use.\")\n```\n\n----------------------------------------\n\nTITLE: Running the FastAPI Service\nDESCRIPTION: Command to start the FastAPI service.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/neural-search-tutorial.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npython service.py\n```\n\n----------------------------------------\n\nTITLE: Loading Data without Vectors (Entire DataFrame as Payload) in Python\nDESCRIPTION: Python code to load data into Qdrant using the Spark connector without specifying any vectors. In this case, the entire DataFrame is stored as payload.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/spark.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", \"<QDRANT_GRPC_URL>\")\n   .option(\"collection_name\", \"<QDRANT_COLLECTION_NAME>\")\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n----------------------------------------\n\nTITLE: Upserting Multi-Vector Points in Qdrant using C#\nDESCRIPTION: This code demonstrates how to upsert a point with multiple vector types into a Qdrant collection using the C# client. It includes dense vectors for 'image' and 'text', and a sparse vector for 'text-sparse'. The UpsertAsync method is used to perform the operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/named-vectors/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nawait client.UpsertAsync(\n    collectionName: \"{collection_name}\",\n    points: new List<PointStruct>\n    {\n        new()\n        {\n            Id = 1,\n            Vectors = new Dictionary<string, Vector>\n            {\n                [\"image\"] = new() {\n                    Data = {0.9f, 0.1f, 0.1f, 0.2f}\n                },\n                [\"text\"] = new() {\n                    Data = {0.4f, 0.7f, 0.1f, 0.8f, 0.1f}\n                },\n                [\"text-sparse\"] = ([0.1f, 0.2f, 0.3f, 0.4f], [1, 3, 5, 7]),\n            }\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring QdrantStorage in CamelAI\nDESCRIPTION: Example of initializing the QdrantStorage class with connection parameters, collection settings, and vector configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/camel.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom camel.storages import QdrantStorage, VectorDBQuery, VectorRecord\nfrom camel.types import VectorDistance\n\nqdrant_storage = QdrantStorage(\n    url_and_api_key=(\n        \"https://xyz-example.eu-central.aws.cloud.qdrant.io:6333\",\n        \"<provide-your-own-key>\",\n    ),\n    collection_name=\"{collection_name}\",\n    distance=VectorDistance.COSINE,\n    vector_dim=384,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Container in Python\nDESCRIPTION: Starts a new Qdrant container using the Python Testcontainers implementation with the specified Docker image.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/testcontainers.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom testcontainers.qdrant import QdrantContainer\n\nqdrant_container = QdrantContainer(\"qdrant/qdrant\").start()\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Overwriting Payload in Go\nDESCRIPTION: This snippet demonstrates how to create a new Qdrant client connection and use it to overwrite the payload for specific points in a collection. It imports the necessary packages, establishes a connection to a local Qdrant instance, and then uses the OverwritePayload method to update the payload for points with IDs 0 and 3.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/overwrite-payload/by-point-id/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.OverwritePayload(context.Background(), &qdrant.SetPayloadPoints{\n    CollectionName: \"{collection_name}\",\n    Payload: qdrant.NewValueMap(\n        map[string]any{\"property1\": \"string\", \"property2\": \"string\"}),\n    PointsSelector: qdrant.NewPointsSelector(\n        qdrant.NewIDNum(0),\n        qdrant.NewIDNum(3)),\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Info in Qdrant using Go\nDESCRIPTION: Demonstrates how to retrieve information about a collection using the Qdrant client. The code uses context.Background() for handling the request context and requires the collection name as a parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-info/simple/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"context\"\n\nclient.GetCollectionInfo(context.Background(), \"{collection_name}\")\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Filter Conditions in C#\nDESCRIPTION: Establishes connection to a Qdrant server and performs a scroll query with negative match conditions. The query filters out records where city is 'London' AND color is 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-nested-clauses-filter/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: new Filter { MustNot = { MatchKeyword(\"city\", \"London\") & MatchKeyword(\"color\", \"red\") } }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Qdrant Collection in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client to retrieve a collection by its name. The getCollection method is called on the client object, passing the collection name as a string parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-info/simple/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.getCollection(\"{collection_name}\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Filtered Scroll Query in Go\nDESCRIPTION: This snippet demonstrates how to create a new Qdrant client, configure it with host and port, and then perform a scroll operation on a collection with a filter. The filter excludes points where the city is 'London' or the color is 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-must-not-filter/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMustNot: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t\t\tqdrant.NewMatch(\"color\", \"red\"),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Loading MovieLens Dataset into Pandas DataFrames (Python)\nDESCRIPTION: Python code to load users, movies, and ratings data from the MovieLens dataset into pandas DataFrames.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/recommendation-system-ovhcloud.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nusers = pd.read_csv(\n    'data/ml-1m/users.dat', \n    sep='::', \n    names=['user_id', 'gender', 'age', 'occupation', 'zip'],\n    engine='python'\n)\nusers.head()\n\nmovies = pd.read_csv(\n    'data/ml-1m/movies.dat',\n    sep='::', \n    names=['movie_id', 'title', 'genres'], \n    engine='python', \n    encoding='latin-1'\n)\nmovies.head()\n\nratings = pd.read_csv( \n    'data/ml-1m/ratings.dat', \n    sep='::', \n    names=['user_id', 'movie_id', 'rating', 'timestamp'], \n    engine='python'\n)\nratings.head()\n```\n\n----------------------------------------\n\nTITLE: Deleting Qdrant Records by ID\nDESCRIPTION: SQL statement for deleting records from a Qdrant collection by their ID. This example removes the record with ID 2.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/mindsdb.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM qtest.test_table_6\nWHERE id = 2\n```\n\n----------------------------------------\n\nTITLE: Deleting Points Asynchronously in Qdrant with Java\nDESCRIPTION: This snippet demonstrates how to use the Qdrant client to delete points asynchronously from a specified collection. It requires the Qdrant client library and a valid collection name. The method takes a list of point IDs, which are to be deleted from the collection. It employs static imports to utilize the PointIdFactory for creating point identifiers. The operation is executed asynchronously.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-points/simple/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.PointIdFactory.id;\n\nclient.deleteAsync(\"{collection_name}\", List.of(id(0), id(3), id(100)));\n```\n\n----------------------------------------\n\nTITLE: Loading Web Content using LangChain WebBaseLoader\nDESCRIPTION: Uses LangChain's WebBaseLoader to load and parse content from Oracle Cloud Free Tier FAQ page.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.document_loaders.web_base import WebBaseLoader\n\nloader = WebBaseLoader(\"https://www.oracle.com/cloud/free/faq/\")\ndocuments = loader.load()\n```\n\n----------------------------------------\n\nTITLE: Indexing Result Output\nDESCRIPTION: Shows the output of the indexing process indicating the number of documents successfully written to the database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n{'writer': {'documents_written': 381}}\n```\n\n----------------------------------------\n\nTITLE: Creating Match Query in Qdrant Using Go\nDESCRIPTION: This snippet imports the Qdrant client library and creates a new match query for the specified field 'color' with the value 'red'. It requires the Qdrant Go client installed in the project to function correctly. The code will execute a query against Qdrant to find entries matching the color red.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-keyword/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewMatch(\"color\", \"red\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Strict Mode in Rust\nDESCRIPTION: Rust code for updating an existing Qdrant collection to disable strict mode using the Qdrant Rust client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{StrictModeConfigBuilder, UpdateCollectionBuilder};\n\nclient\n    .update_collection(\n        UpdateCollectionBuilder::new(\"{collection_name}\").strict_mode_config(\n            StrictModeConfigBuilder::default().enabled(false),\n        ),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Converting the Model Outputs to Qdrant Points - Python\nDESCRIPTION: This snippet demonstrates how to convert the model outputs into a list of PointStruct for insertion into Qdrant after embedding a video.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import PointStruct\n\npoints = [\n    PointStruct(\n        id=idx,\n        vector=v.embeddings_float,\n        payload={\n            \"start_offset_sec\": v.start_offset_sec,\n            \"end_offset_sec\": v.end_offset_sec,\n            \"embedding_scope\": v.embedding_scope,\n        },\n    )\n    for idx, v in enumerate(task_result.video_embedding.segments)\n]\n```\n\n----------------------------------------\n\nTITLE: Installing CrewAI and Qdrant Client Packages\nDESCRIPTION: Command to install the required packages for CrewAI and Qdrant integration using pip.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/crewai.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install 'crewai[tools]' 'qdrant-client[fastembed]'\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration Options Example\nDESCRIPTION: Example YAML showing basic logging configuration options available in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/configuration.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nlog_level: INFO\n\n# Logging configuration\n# Qdrant logs to stdout. You may configure to also write logs to a file on disk.\n# Be aware that this file may grow indefinitely.\n# logger:\n#   # Logging format, supports `text` and `json`\n#   format: text\n#   on_disk:\n#     enabled: true\n#     log_file: path/to/log/file.log\n#     log_level: INFO\n#     # Logging format, supports `text` and `json`\n```\n\n----------------------------------------\n\nTITLE: Configuring OrderBy Parameters in Qdrant Python Client\nDESCRIPTION: Creates an OrderBy model instance to specify result ordering parameters including the sort key, direction, and start position. The configuration sorts results by timestamp in descending order, starting from a specific timestamp value of 123.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-order-by-advanced/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\norder_by=models.OrderBy(\n    key=\"timestamp\",\n    direction=\"desc\",  # default is \"asc\"\n    start_from=123,  # start from this value\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Cluster Manager Deployment in YAML\nDESCRIPTION: This snippet defines the Kubernetes deployment configuration for Qdrant Cluster Manager. It includes settings for replica count, image details, service account, security contexts, network policies, and resource allocation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nqdrant-cluster-manager:\n  replicaCount: 1\n\n  image:\n    repository: registry.cloud.qdrant.io/qdrant/cluster-manager\n    pullPolicy: IfNotPresent\n    # Overrides the image tag whose default is the chart appVersion.\n    tag: \"\"\n\n  imagePullSecrets:\n    - name: qdrant-registry-creds\n  nameOverride: \"\"\n  fullnameOverride: \"qdrant-cluster-manager\"\n\n  serviceAccount:\n    # Specifies whether a service account should be created\n    create: true\n    # Automatically mount a ServiceAccount's API credentials?\n    automount: true\n    # Annotations to add to the service account\n    annotations: {}\n    # The name of the service account to use.\n    # If not set and create is true, a name is generated using the fullname template\n    name: \"\"\n\n  podAnnotations: {}\n  podLabels: {}\n\n  podSecurityContext:\n    runAsNonRoot: true\n    runAsUser: 10001\n    runAsGroup: 20001\n    fsGroup: 30001\n\n  securityContext:\n    capabilities:\n      drop:\n        - ALL\n    readOnlyRootFilesystem: true\n    runAsNonRoot: true\n    runAsUser: 10001\n    runAsGroup: 20001\n    allowPrivilegeEscalation: false\n    seccompProfile:\n      type: RuntimeDefault\n\n  service:\n    type: ClusterIP\n\n  networkPolicy:\n    create: true\n\n  resources: {}\n    # We usually recommend not to specify default resources and to leave this as a conscious\n    # choice for the user. This also increases chances charts run on environments with little\n    # resources, such as Minikube. If you do want to specify resources, uncomment the following\n    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.\n    # limits:\n    #   cpu: 100m\n    #   memory: 128Mi\n    # requests:\n    #   cpu: 100m\n    #   memory: 128Mi\n\n  nodeSelector: {}\n\n  tolerations: []\n\n  affinity: {}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database with TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a Qdrant client with a local connection and perform a vector similarity search query. The query includes parameters for vector data, result limits, and specifying what data to return with the results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-offset/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  query: [0.2, 0.1, 0.9, 0.7],\n  with_vector: true,\n  with_payload: true,\n  limit: 10,\n  offset: 100,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing QdrantClient and Executing Filtered Scroll Query in C#\nDESCRIPTION: This snippet demonstrates how to create a QdrantClient instance and perform a filtered scroll query on a Qdrant vector database. It uses the MatchKeyword condition to filter results based on city and color attributes.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-multiple-clauses-combination/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: MatchKeyword(\"city\", \"London\") & !MatchKeyword(\"color\", \"red\")\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector Encryption with VectaX\nDESCRIPTION: Demonstrates how to encrypt vector embeddings, store them in Qdrant, and perform secure vector search operations using encrypted queries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/mirror-security.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import PointStruct\nfrom mirror_sdk.core.models import VectorData\n\n# Generate or retrieve vector embeddings\n# embedding = generate_document_embedding()\n\nvector_data = VectorData(vector=embedding, id=\"doc1\")\nencrypted = mirror_sdk.vectax.encrypt(vector_data)\n\npoint = PointStruct(\n    id=0,\n    vector=encrypted.ciphertext,\n    payload={\n        \"content\": \"Document content\",\n        \"iv\": encrypted.iv,\n        \"auth_hash\": encrypted.auth_hash\n    }\n)\nqdrant.upsert(collection_name=\"vectax\", points=[point])\n\n# Encrypt a query vector for secure search\n# query_embedding = generate_query_embedding(...)\n\nencrypted_query = mirror_sdk.vectax.encrypt(\n    VectorData(vector=query_embedding, id=\"query\")\n)\n\nresults = qdrant.query_points(\n    collection_name=\"vectax\",\n    query=encrypted_query.ciphertext,\n    limit=5\n).points\n```\n\n----------------------------------------\n\nTITLE: Configuring LlamaIndex Service Context\nDESCRIPTION: Setting up the ServiceContext with a local embedding model and custom node parser for document chunking.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/llama-index-multitenancy.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.core import ServiceContext\nfrom llama_index.core.node_parser import SimpleNodeParser\n\nnode_parser = SimpleNodeParser.from_defaults(chunk_size=512, chunk_overlap=32)\n\nservice_context = ServiceContext.from_defaults(\n    embed_model=\"local:BAAI/bge-large-en-v1.5\",\n    node_parser=node_parser,\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Named Vectors in Qdrant using Java\nDESCRIPTION: This code demonstrates how to upsert multiple points with named vectors into a Qdrant collection asynchronously. It creates two points, each with 'image' and 'text' vector representations, and uses the client's upsertAsync method to add them to the specified collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-multiple-vectors/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\nimport java.util.Map;\n\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.VectorFactory.vector;\nimport static io.qdrant.client.VectorsFactory.namedVectors;\n\nimport io.qdrant.client.grpc.Points.PointStruct;\n\nclient\n    .upsertAsync(\n        \"{collection_name}\",\n        List.of(\n            PointStruct.newBuilder()\n                .setId(id(1))\n                .setVectors(\n                    namedVectors(\n                        Map.of(\n                            \"image\",\n                            vector(List.of(0.9f, 0.1f, 0.1f, 0.2f)),\n                            \"text\",\n                            vector(List.of(0.4f, 0.7f, 0.1f, 0.8f, 0.1f, 0.1f, 0.9f, 0.2f)))))\n                .build(),\n            PointStruct.newBuilder()\n                .setId(id(2))\n                .setVectors(\n                    namedVectors(\n                        Map.of(\n                            \"image\",\n                            List.of(0.2f, 0.1f, 0.3f, 0.9f),\n                            \"text\",\n                            List.of(0.5f, 0.2f, 0.7f, 0.4f, 0.7f, 0.2f, 0.3f, 0.9f))))\n                .build()))\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration in Java\nDESCRIPTION: This code initializes a Qdrant client and creates a new collection with custom vector parameters. It sets up a collection with 100-dimensional vectors using cosine distance, and initializes it from an existing collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/init-from/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(100)\n                            .setDistance(Distance.Cosine)\n                            .build()))\n            .setInitFromCollection(\"{from_collection_name}\")\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index in Qdrant Client\nDESCRIPTION: Establishes a connection to a Qdrant server and creates a payload index with specified configuration. Configures integer indexing with range search capabilities on a specific collection field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/integer-with-params/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreatePayloadIndexAsync(\n    collectionName: \"{collection_name}\",\n    fieldName: \"name_of_the_field_to_index\",\n    schemaType: PayloadSchemaType.Integer,\n    indexParams: new PayloadIndexParams\n    {\n\t    IntegerIndexParams = new()\n\t    {\n\t\t    Lookup = false,\n\t\t    Range = true\n\t    }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Listing Collection Aliases in Rust\nDESCRIPTION: This code demonstrates how to create a Qdrant client by connecting to a local Qdrant server and then listing all aliases for a specific collection. It requires the qdrant_client crate and handles asynchronous operations with error propagation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/list/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.list_collection_aliases(\"{collection_name}\").await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Sparse Vector Configuration in Java\nDESCRIPTION: This code initializes a Qdrant client and creates a new collection with a sparse vector configuration. It sets up the client to connect to a local Qdrant instance and configures the collection with an IDF modifier for text sparse vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector-idf/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Modifier;\nimport io.qdrant.client.grpc.Collections.SparseVectorConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorParams;\n\nQdrantClient client =\n  new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n  .createCollectionAsync(\n    CreateCollection.newBuilder()\n    .setCollectionName(\"{collection_name}\")\n    .setSparseVectorsConfig(\n      SparseVectorConfig.newBuilder()\n      .putMap(\"text\", SparseVectorParams.newBuilder().setModifier(Modifier.Idf).build()))\n    .build())\n  .get();\n```\n\n----------------------------------------\n\nTITLE: Deleting Points in Qdrant Collection with Rust\nDESCRIPTION: This snippet demonstrates how to delete specific points from a Qdrant collection using the `qdrant_client` library in Rust. It builds a delete request with specified point IDs and waits for the operation to complete. Prerequisites include having a client instance already set up and connected to a Qdrant server. Key parameter includes a `collection_name` which specifies the target collection. The input consists of a list of point IDs to be deleted, and the output is the result of the deletion operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-points/simple/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{DeletePointsBuilder, PointsIdsList};\n\nclient\n    .delete_points(\n        DeletePointsBuilder::new(\"{collection_name}\")\n            .points(PointsIdsList {\n                ids: vec![0.into(), 3.into(), 100.into()],\n            })\n            .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Spark Session with Qdrant Support in Python\nDESCRIPTION: Python code to create a Spark session with Qdrant support by specifying the path to the Qdrant-Spark connector JAR file.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/spark.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.config(\n        \"spark.jars\",\n        \"path/to/file/spark-VERSION.jar\",  # Specify the path to the downloaded JAR file\n    )\n    .master(\"local[*]\")\n    .appName(\"qdrant\")\n    .getOrCreate()\n```\n\n----------------------------------------\n\nTITLE: Initializing Cohere Client Connection\nDESCRIPTION: Creates a connection to Cohere services using their SDK, configured to point to an AWS instance\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-customer-support-cohere-airbyte-aws.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport cohere\n\n# Create a Cohere client pointing to the AWS instance\ncohere_client = cohere.Client(...)\n```\n\n----------------------------------------\n\nTITLE: Generating Document Embeddings with Snowflake Model\nDESCRIPTION: Create vector embeddings for text documents using Snowflake's Arctic Embed model with 384-dimensional vectors\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/snowflake.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nembeddings = embedding_model.embed(texts)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst embeddings = await extractor(texts, { normalize: true, pooling: 'cls' });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Information Asynchronously in Qdrant using Java\nDESCRIPTION: This code snippet demonstrates how to asynchronously fetch information about a specific collection in Qdrant using the Java client. It uses the getCollectionInfoAsync method and retrieves the result using the get() method of the returned CompletableFuture.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-info/simple/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclient.getCollectionInfoAsync(\"{collection_name}\").get();\n```\n\n----------------------------------------\n\nTITLE: Active Vectors Memory Calculation\nDESCRIPTION: Formula for calculating memory requirements for active vectors in subgroup-oriented configurations\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/capacity-planning.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmemory_size = number_of_active_vectors * vector_dimension * 4 bytes * 1.5\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Private Cloud Using Helm - Bash\nDESCRIPTION: This snippet provides the commands necessary to create a namespace, configure credentials, and install the Qdrant Private Cloud solution using Helm.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/private-cloud-setup.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nkubectl create namespace qdrant-private-cloud\nkubectl create secret docker-registry qdrant-registry-creds --docker-server=registry.cloud.qdrant.io --docker-username='your-username' --docker-password='your-password' --namespace qdrant-private-cloud\nhelm registry login 'registry.cloud.qdrant.io' --username 'your-username' --password 'your-password'\nhelm upgrade --install qdrant-private-cloud-crds oci://registry.cloud.qdrant.io/qdrant-charts/qdrant-kubernetes-api --namespace qdrant-private-cloud --version v1.15.0 --wait\nhelm upgrade --install qdrant-private-cloud oci://registry.cloud.qdrant.io/qdrant-charts/qdrant-private-cloud --namespace qdrant-private-cloud --version 1.6.3\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Qdrant Collection with Nested Conditions Using POST Request\nDESCRIPTION: This code demonstrates how to create a complex filter for a Qdrant collection using nested conditions. The filter excludes points where the city is \"London\" and the color is \"red\". This example illustrates how to structure more intricate queries for precise data retrieval.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-nested-clauses-filter/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"filter\": {\n    \"must_not\": [\n      {\n        \"key\": \"city\",\n        \"match\": {\n          \"value\": \"London\"\n        }\n      },\n      {\n        \"key\": \"color\",\n        \"match\": {\n          \"value\": \"red\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DSPy with Qdrant Support\nDESCRIPTION: Command to install DSPy framework with Qdrant integration support using pip.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/dspy.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install dspy-ai[qdrant]\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration\nDESCRIPTION: HTTP PUT request to create a new collection with specified vector parameters. Defines vector dimension size of 1024, Cosine similarity distance metric, and uint8 datatype for vector storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-uint8/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 1024,\n      \"distance\": \"Cosine\",\n      \"datatype\": \"uint8\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Training Loop Setup with Quaterion in Python\nDESCRIPTION: This snippet sets up a training loop for a similarity model using the Quaterion library along with PyTorch Lightning. It defines hyperparameters, initializes the model and data loaders, sets up early stopping, and runs the training using Quaterion's `fit` method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/cars-recognition.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef train(\n    lr: float,\n    mining: str,\n    batch_size: int,\n    epochs: int,\n    input_size: int,\n    shuffle: bool,\n    save_dir: str,\n):\n    model = Model(\n        lr=lr,\n        mining=mining,\n    )\n    \n    train_dataloader, val_dataloader = get_dataloaders(\n        batch_size=batch_size, input_size=input_size, shuffle=shuffle\n    )\n\n    early_stopping = EarlyStopping(\n        monitor=\"validation_loss\",\n        patience=50,\n    )\n\n    trainer = pl.Trainer(\n        gpus=1 if torch.cuda.is_available() else 0,\n        max_epochs=epochs,\n        callbacks=[early_stopping, ModelSummary(max_depth=3)],\n        enable_checkpointing=False,\n        log_every_n_steps=1,\n    )\n\n    Quaterion.fit(\n        trainable_model=model,\n        trainer=trainer,\n        train_dataloader=train_dataloader,\n        val_dataloader=val_dataloader,\n    )\n\n    model.save_servable(save_dir)\n```\n\n----------------------------------------\n\nTITLE: Filtering with ValuesCount in Go\nDESCRIPTION: This snippet demonstrates how to create a `ValuesCount` filter condition using the Qdrant Go client. The filter is configured to select points where the \"comments\" field has a count greater than 2. This filter can be integrated into a larger search or query to filter results based on the specified condition.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/values-count/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewValuesCount(\"comments\", &qdrant.ValuesCount{\n\tGt: qdrant.PtrOf(uint64(2)),\n})\n```\n\n----------------------------------------\n\nTITLE: Generating RBAC Access Keys\nDESCRIPTION: Creates secret keys for specific role combinations to enable secure access to vector data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/mirror-security.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Generate a secret key for use by the 'admin' role holders.\nadmin_key = mirror_sdk.rbac.generate_user_secret_key(\n    {\"roles\": [\"admin\"], \"groups\": [\"team_a\"], \"departments\": [\"research\"]}\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Snapshots with Qdrant Python Client\nDESCRIPTION: Connects to a local Qdrant server and deletes a full snapshot by name. Requires a running Qdrant instance on localhost:6333 and the qdrant_client Python package installed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/delete-full-snapshot/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.delete_full_snapshot(snapshot_name=\"{snapshot_name}\")\n```\n\n----------------------------------------\n\nTITLE: Updating Vector Storage to Disk for Default Vector in Qdrant\nDESCRIPTION: This snippet shows how to update a collection to store vectors on disk when the collection does not have named vectors. An empty string is used as the vector name in this case.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/collections.md#2025-04-21_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PATCH 'http://localhost:6333/collections/my_collection' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"vectors\": {\n      \"name\": \"\",\n      \"storage_type\": \"Disk\"\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Recovering Collection Snapshot via HTTP PUT\nDESCRIPTION: HTTP request to recover a Qdrant collection snapshot from a specified location URL. The endpoint accepts a JSON body containing the snapshot location URL and restores the collection state from that snapshot.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/recover-collection-snapshot-from-url/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/snapshots/recover\n{\n  \"location\": \"http://qdrant-node-1:6333/collections/{collection_name}/snapshots/snapshot-2022-10-10.shapshot\"\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing OpenAI Embedding Model Performance with Pandas in Python\nDESCRIPTION: This code processes results from various OpenAI embedding model configurations, calculating average accuracies across different search limits, oversampling rates, and rescoring options. It uses pandas to load JSON results, filter data, compute averages, and create pivot tables for easy comparison.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/binary-quantization-openai.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\nfor combination in dataset_combinations:\n    model_name = combination[\"model_name\"]\n    dimensions = combination[\"dimensions\"]\n    print(f\"Model: {model_name}, dimensions: {dimensions}\")\n    results = pd.read_json(f\"../results/results-{model_name}-{dimensions}.json\", lines=True)\n    average_accuracy = results[results[\"limit\"] != 1]\n    average_accuracy = average_accuracy[average_accuracy[\"limit\"] != 5]\n    average_accuracy = average_accuracy.groupby([\"oversampling\", \"rescore\", \"limit\"])[\n        \"accuracy\"\n    ].mean()\n    average_accuracy = average_accuracy.reset_index()\n    acc = average_accuracy.pivot(\n        index=\"limit\", columns=[\"oversampling\", \"rescore\"], values=\"accuracy\"\n    )\n    print(acc)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Executing Scroll Query in Java\nDESCRIPTION: This code initializes a Qdrant client and performs a scrolling search operation on a collection. It applies filters to match specific keyword values for 'city' and 'color' fields.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-must-filter/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addAllMust(\n                        List.of(matchKeyword(\"city\", \"London\"), matchKeyword(\"color\", \"red\")))\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Searching with Qdrant Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize a QdrantClient, then perform a searchMatrixOffsets operation with filtering. The client connects to a local Qdrant server and searches a collection with a filter for items where the 'color' is 'red', taking a sample of 10 items and limiting results to 2.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/distance-matrix/offsets-format/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.searchMatrixOffsets(\"{collection_name}\", {\n    filter: {\n        must: [\n            {\n                key: \"color\",\n                match: {\n                    value: \"red\",\n                },\n            },\n        ],\n    },\n    sample: 10,\n    limit: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: TLS Client Certificate Validation Configuration\nDESCRIPTION: YAML configuration for enabling client certificate validation against a local CA.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  verify_https_client_certificate: false\n\ntls:\n  ca_cert: ./tls/cacert.pem\n```\n\n----------------------------------------\n\nTITLE: Adding Documents to Collection\nDESCRIPTION: Code to add documents, metadata, and IDs to a Qdrant collection using the add method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/fastembed.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclient.add(\n    collection_name=\"demo_collection\",\n    documents=docs,\n    metadata=metadata,\n    ids=ids\n)\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for Shard Transfer Configuration in Qdrant\nDESCRIPTION: Example of how to configure a shard transfer between nodes using the snapshot method via Qdrant's REST API. The request specifies the collection name, shard ID, source and target peer IDs, and transfer method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/cluster\n{\n    \"move_shard\": {\n        \"shard_id\": 0,\n        \"from_peer_id\": 381894127,\n        \"to_peer_id\": 467122995,\n        \"method\": \"snapshot\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Clearing Payload in Go\nDESCRIPTION: Demonstrates how to create a new Qdrant client connection and clear payload data for specific points in a collection. The client connects to a local Qdrant instance on port 6334 and performs a payload clearing operation on points with IDs 0 and 3.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/clear-payload/simple/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.ClearPayload(context.Background(), &qdrant.ClearPayloadPoints{\n    CollectionName: \"{collection_name}\",\n    Points: qdrant.NewPointsSelector(\n        qdrant.NewIDNum(0),\n        qdrant.NewIDNum(3)),\n})\n```\n\n----------------------------------------\n\nTITLE: Embedding Shape Output\nDESCRIPTION: Shows the output dimensions of the generated embedding matrix (48 vectors of length 128).\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-colbert.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n(48, 128)\n```\n\n----------------------------------------\n\nTITLE: Qdrant Discovery Search POST Request\nDESCRIPTION: This snippet outlines the structure of a POST request to a Qdrant endpoint for conducting a discovery search. The search leverages a target vector, alongside positive and negative examples to refine the query. A limit parameter constrains the number of returned results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/discovery-basic/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /collections/{collection_name}/points/discover HTTP/1.1\nContent-Type: application/json\n\n{\n  \"target\": [0.05, 0.61, 0.76, 0.74, 0.12],\n  \"positive\": [\n    1,\n    2\n  ],\n  \"negative\": [\n    3,\n    4\n  ],\n  \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Qdrant Collection in TypeScript\nDESCRIPTION: This snippet demonstrates the creation of a collection in Qdrant using TypeScript, specifying vector parameters including size and distance metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait qdrantClient.createCollection(COLLECTION_NAME, {\n    vectors: {\n        size: 3072,\n        distance: 'Cosine'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Extracting and Mapping Sparse Vectors in Python\nDESCRIPTION: This function extracts non-zero elements from a given vector and maps them to human-readable tokens using a tokenizer. It creates a sorted dictionary of tokens and their weights, useful for understanding token significance in NLP tasks.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/sparse-vectors.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef extract_and_map_sparse_vector(vector, tokenizer):\n    \"\"\"\n    Extracts non-zero elements from a given vector and maps these elements to their human-readable tokens using a tokenizer. The function creates and returns a sorted dictionary where keys are the tokens corresponding to non-zero elements in the vector, and values are the weights of these elements, sorted in descending order of weights.\n\n    This function is useful in NLP tasks where you need to understand the significance of different tokens based on a model's output vector. It first identifies non-zero values in the vector, maps them to tokens, and sorts them by weight for better interpretability.\n\n    Args:\n    vector (torch.Tensor): A PyTorch tensor from which to extract non-zero elements.\n    tokenizer: The tokenizer used for tokenization in the model, providing the mapping from tokens to indices.\n\n    Returns:\n    dict: A sorted dictionary mapping human-readable tokens to their corresponding non-zero weights.\n    \"\"\"\n\n    # Extract indices and values of non-zero elements in the vector\n    cols = vector.nonzero().squeeze().cpu().tolist()\n    weights = vector[cols].cpu().tolist()\n\n    # Map indices to tokens and create a dictionary\n    idx2token = {idx: token for token, idx in tokenizer.get_vocab().items()}\n    token_weight_dict = {\n        idx2token[idx]: round(weight, 2) for idx, weight in zip(cols, weights)\n    }\n\n    # Sort the dictionary by weights in descending order\n    sorted_token_weight_dict = {\n        k: v\n        for k, v in sorted(\n            token_weight_dict.items(), key=lambda item: item[1], reverse=True\n        )\n    }\n\n    return sorted_token_weight_dict\n\n\n# Usage example\nsorted_tokens = extract_and_map_sparse_vector(vec, tokenizer)\nsorted_tokens\n```\n\n----------------------------------------\n\nTITLE: Defining a Calculator Tool in Python\nDESCRIPTION: This snippet defines a 'CalculatorTool' class for performing basic mathematical calculations such as addition and multiplication. Dependencies include the 'BaseTool' class that it extends, providing structure for tool functionality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass CalculatorTool(BaseTool):\n    name: str = \"calculator\"\n    description: str = \"Perform basic mathematical calculations\"\n    \n    def _run(self, a: int, b: int) -> dict:\n        return {\n            \"addition\": a + b,\n            \"multiplication\": a * b\n        }\n```\n\n----------------------------------------\n\nTITLE: Connecting to MongoDB and Creating Qdrant Collection\nDESCRIPTION: This Python snippet demonstrates connecting to a MongoDB database and creating a collection in Qdrant. It utilizes a utility function to ensure that the collection exists before data is inserted.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/data-streaming-kafka-qdrant.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom pymongo import MongoClient\nfrom utils.app_utils import create_qdrant_collection\nfrom fastembed import TextEmbedding\n\ncollection_name: str = 'test'\nembed_model_name: str = 'snowflake/snowflake-arctic-embed-s'\n\n# Step 0: create qdrant_collection\ncreate_qdrant_collection(collection_name=collection_name, embed_model=embed_model_name)\n\n# Step 1: Connect to MongoDB\nclient = MongoClient('mongodb://127.0.0.1:27017/?replicaSet=rs0&directConnection=true')\n\n# Step 2: Select Database\ndb = client['qdrant_kafka']\n\n# Step 3: Select Collection\ncollection = db['docs']\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with InstructorXL for Arxiv.org Titles in Python\nDESCRIPTION: Python code snippet demonstrating how to generate embeddings for Arxiv.org paper titles using the InstructorXL model.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/datasets.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom InstructorEmbedding import INSTRUCTOR\n\nmodel = INSTRUCTOR(\"hkunlp/instructor-xl\")\nsentence = \"3D ActionSLAM: wearable person tracking in multi-floor environments\"\ninstruction = \"Represent the Research Paper title for retrieval; Input:\"\nembeddings = model.encode([[instruction, sentence]])\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Client in Go\nDESCRIPTION: Demonstrates setting up a Qdrant client connection and performing a grouped similarity search with cross-collection lookup. The query includes grouping by document_id field, limiting group size, and retrieving specific payload fields from a linked collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-groups/with-lookup/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.QueryGroups(context.Background(), &qdrant.QueryPointGroups{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tGroupBy:        \"document_id\",\n\tGroupSize:      qdrant.PtrOf(uint64(2)),\n\tWithLookup: &qdrant.WithLookup{\n\t\tCollection:  \"documents\",\n\t\tWithPayload: qdrant.NewWithPayloadInclude(\"title\", \"text\"),\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Using Connector with Cohere Chat\nDESCRIPTION: Example of using the created connector with Cohere's chat API to query the knowledge base.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/cohere-rag-connector.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresponse = cohere_client.chat(\n    message=(\n        \"Is there anything I have to do regarding the project infrastructure? \"\n        \"Please mention the tasks briefly.\"\n    ),\n    connectors=[\n        cohere.ChatConnector(id=connector_response.connector.id)\n    ],\n    model=\"command-r\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Sparse Vectors\nDESCRIPTION: Creates a collection named 'movies' configured to store sparse vector embeddings for film descriptions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nqdrant_client.create_collection(\n    collection_name=\"movies\",\n    vectors_config={},\n    sparse_vectors_config={\n        \"film_description\": models.SparseVectorParams(),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Asynchronously with Qdrant Java Client\nDESCRIPTION: This snippet demonstrates the use of Qdrant's Java client for retrieving data asynchronously from a collection. It requires the io.qdrant.client package and uses the retrieveAsync method to fetch data by specifying a list of point IDs. The method requires parameters such as the collection name, a list of point IDs, and other boolean flags. It returns a future containing the retrieved data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/retrieve-points/simple/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.PointIdFactory.id;\n\nclient\n    .retrieveAsync(\"{collection_name}\", List.of(id(0), id(30), id(100)), false, false, null)\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Collection with Qdrant Client in Rust\nDESCRIPTION: This code snippet demonstrates how to delete a collection using the Qdrant client with async/await functionality. It calls the delete_collection method on the client instance, passing the collection name as a parameter, and properly handles errors with the ? operator.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-collection/simple/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nclient.delete_collection(\"{collection_name}\").await?;\n```\n\n----------------------------------------\n\nTITLE: Scrolling through Qdrant Collection with Image Vector Filter in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client's scroll method to search for documents in a collection. It applies a filter to only return documents that have an 'image' vector. This is useful for paginating through results or retrieving large datasets that match specific criteria.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-has-vector/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must: [\n      {\n        has_vector: \"image\",\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Cohere Python SDK\nDESCRIPTION: Command to install the Cohere Python SDK using pip, which is required to generate embeddings using Cohere's models.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/cohere.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install cohere\n```\n\n----------------------------------------\n\nTITLE: Environment Variables YAML Configuration\nDESCRIPTION: YAML representation of the configuration resulting from the environment variables example.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlog_level: INFO\nservice:\n  enable_tls: true\n  api_key: <MY_SECRET_KEY>\ntls:\n  cert: ./tls/cert.pem\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vectors from Qdrant in C#\nDESCRIPTION: This snippet retrieves vectors from a Qdrant collection. It uses the `RetrieveAsync` method of the `QdrantClient` to fetch vectors with specific IDs from the given collection, disabling payload and vector data retrieval to optimize performance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/retrieve-points/simple/csharp.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.RetrieveAsync(\n\tcollectionName: \"{collection_name}\",\n\tids: [0, 30, 100],\n\twithPayload: false,\n\twithVectors: false\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Null Check with Qdrant Go Client\nDESCRIPTION: Creates a new null check condition for the 'reports' field using the Qdrant Go client. This method is typically used to filter or validate database entries based on null status.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/is-null/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewIsNull(\"reports\")\n```\n\n----------------------------------------\n\nTITLE: Referencing TLS Secret in QdrantCluster Spec with YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure TLS by referencing Kubernetes secrets in the QdrantCluster spec. It enables TLS for secure database access, specifying secret references for the certificate and key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/qdrant-cluster-management.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: qdrant.io/v1\nkind: QdrantCluster\nmetadata:\n  name: test-cluster\nspec:\n  id: \"a7d8d973-0cc5-42de-8d7b-c29d14d24840\"\n  version: \"v1.11.3\"\n  size: 1\n  resources:\n    cpu: 100m\n    memory: \"1Gi\"\n    storage: \"2Gi\"\n  config:\n    service:\n      enable_tls: true\n    tls:\n      cert:\n        secretKeyRef:\n          name: qdrant-tls\n          key: tls.crt\n      key:\n        secretKeyRef:\n          name: qdrant-tls\n          key: tls.key\n```\n\n----------------------------------------\n\nTITLE: Integrating Qdrant with Sentence Transformers for Music Recommendations\nDESCRIPTION: Code that reads text descriptions from a column, encodes them using sentence transformers, and stores the vectors in Qdrant collections. Includes batch processing and payload functionality for additional metadata like genres.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/when-music-just-doesnt-match-our-vibe-can-ai-help-filip-makraduli-vector-space-talks-003.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Note: This is inferred code structure based on the discussion\n# Read text from column and encode with sentence transformer\ntext = df['description_column']\nembeddings = model.encode(text)\n\n# Create Qdrant collection and insert vectors with payload\ncollection.upsert(\n    vectors=embeddings,\n    payload={\"genre\": genres},\n    batch_size=100\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Go\nDESCRIPTION: This snippet initializes a Qdrant client with the specified host and port, setting up the necessary configuration for further operations. It requires the 'qdrant/go-client/qdrant' package as a dependency to interact with the Qdrant server.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-has-vector/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Image Embeddings with CLIP Model\nDESCRIPTION: Python code demonstrating how to generate embeddings from food images using the clip-ViT-B-32 model with SentenceTransformer library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/datasets.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom PIL import Image\nfrom sentence_transformers import SentenceTransformer\n\nimage_path = \"5dbfd216-5cce-11eb-8122-de94874ad1c8_ns_takeaway_seelachs_ei_baguette.jpeg\"\n\nmodel = SentenceTransformer(\"clip-ViT-B-32\")\nembedding = model.encode(Image.open(image_path))\n```\n\n----------------------------------------\n\nTITLE: Scrolling Points with Filter in Qdrant using Rust\nDESCRIPTION: This code initializes a Qdrant client and performs a scroll operation on a specified collection. It uses a filter to only include points that have an 'image' vector. The operation is asynchronous and returns a Result type.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-has-vector/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n    \nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\")\n            .filter(Filter::must([Condition::has_vector(\"image\")])),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Upserting Data Points with Qdrant Client in TypeScript\nDESCRIPTION: This code uses the QdrantClient from the '@qdrant/js-client-rest' library to upsert data points into a collection on a Qdrant server running at 'localhost' on port 6333. Each point consists of an 'id', a 'vector', and a 'payload' containing additional information like 'city' and 'price'. The 'collection_name' must be specified to identify the target collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-payload/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.upsert(\"{collection_name}\", {\n  points: [\n    {\n      id: 1,\n      vector: [0.05, 0.61, 0.76, 0.74],\n      payload: {\n        city: \"Berlin\",\n        price: 1.99,\n      },\n    },\n    {\n      id: 2,\n      vector: [0.19, 0.81, 0.75, 0.11],\n      payload: {\n        city: [\"Berlin\", \"London\"],\n        price: 1.99,\n      },\n    },\n    {\n      id: 3,\n      vector: [0.36, 0.55, 0.47, 0.94],\n      payload: {\n        city: [\"Berlin\", \"Moscow\"],\n        price: [1.99, 2.99],\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Logs with kubectl Command\nDESCRIPTION: This bash snippet demonstrates how to access logs from the Qdrant application using kubectl. It specifies a namespace and filters logs based on application labels and cluster IDs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/networking-logging-monitoring.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n qdrant-namespace logs -l app=qdrant,cluster-id=9a9f48c7-bb90-4fb2-816f-418a46a74b24\n```\n\n----------------------------------------\n\nTITLE: Scrolling Points with Filter in Qdrant\nDESCRIPTION: This snippet demonstrates how to scroll through points in a Qdrant collection using a filter. The filter is configured to only return points that have a vector named \"image\". This operation is performed via an HTTP POST request.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-has-vector/http.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must\": [\n            { \"has_vector\": \"image\" }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Cluster Write Consistency Factor - C#\nDESCRIPTION: This C# snippet utilizes Qdrant's client library to configure a collection's `write_consistency_factor`. This factor determines how write operations are treated under various network conditions. The outcome is a collection with adjustments made for consistency requirements.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\tshardNumber: 6,\n\treplicationFactor: 2,\n\twriteConsistencyFactor: 2\n);\n```\n\n----------------------------------------\n\nTITLE: Defining AWS StorageClass\nDESCRIPTION: This snippet defines a StorageClass for Amazon EKS with the AWS EBS CSI driver. It supports a volume expansion policy and is set as the default class. The snippet is necessary for handling persistent storage in AWS-based Kubernetes deployments. Ensure that the EBS CSI driver is installed on the EKS cluster to utilize this configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/platform-deployment-options.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  annotations:\n    storageclass.kubernetes.io/is-default-class: \"true\"\n  name: ebs-sc\nprovisioner: ebs.csi.aws.com\nreclaimPolicy: Delete\nvolumeBindingMode: WaitForFirstConsumer\nallowVolumeExpansion: true\n\n```\n\n----------------------------------------\n\nTITLE: Creating a New Relari Project\nDESCRIPTION: Creates a new project in Relari for the GitLab Employee Assistant evaluation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-relari.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nproj = client.projects.create(name=\"Gitlab Employee Assistant\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Console Output Handler in Python\nDESCRIPTION: This snippet defines a 'ConsoleOutput' class which manages output buffering and periodic display updates. It enhances the user experience during data processing by providing real-time feedback.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass ConsoleOutput:\n    def __init__(self, placeholder):\n        self.placeholder = placeholder\n        self.buffer = []\n        self.update_interval = 0.5  # seconds\n        self.last_update = time.time()\n\n    def write(self, text):\n        self.buffer.append(text)\n        if time.time() - self.last_update > self.update_interval:\n            self._update_display()\n```\n\n----------------------------------------\n\nTITLE: Batch-All Triplet Loss Implementation in PyTorch\nDESCRIPTION: PyTorch module implementing Triplet Loss using batch-all strategy. Computes loss using all valid triplets in a batch through efficient matrix operations and broadcasting.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/triplet-loss.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass BatchAllTtripletLoss(nn.Module):\n  \"\"\"Uses all valid triplets to compute Triplet loss\n\n  Args:\n    margin: Margin value in the Triplet Loss equation\n  \"\"\"\n  def __init__(self, margin=1.):\n    super().__init__()\n    self.margin = margin\n    \n  def forward(self, embeddings, labels):\n    \"\"\"computes loss value.\n\n    Args:\n      embeddings: Batch of embeddings, e.g., output of the encoder. shape: (batch_size, embedding_dim)\n      labels: Batch of integer labels associated with embeddings. shape: (batch_size,)\n\n    Returns:\n      Scalar loss value.\n    \"\"\"\n    # step 1 - get distance matrix\n    # shape: (batch_size, batch_size)\n    distance_matrix = euclidean_distance_matrix(embeddings)\n\n    # step 2 - compute loss values for all triplets by applying broadcasting to distance matrix\n\n    # shape: (batch_size, batch_size, 1)\n    anchor_positive_dists = distance_matrix.unsqueeze(2)\n    # shape: (batch_size, 1, batch_size)\n    anchor_negative_dists = distance_matrix.unsqueeze(1)\n    # get loss values for all possible n^3 triplets\n    # shape: (batch_size, batch_size, batch_size)\n    triplet_loss = anchor_positive_dists - anchor_negative_dists + self.margin\n\n    # step 3 - filter out invalid or easy triplets by setting their loss values to 0\n\n    # shape: (batch_size, batch_size, batch_size)\n    mask = get_triplet_mask(labels)\n    triplet_loss *= mask\n    # easy triplets have negative loss values\n    triplet_loss = F.relu(triplet_loss)\n\n    # step 4 - compute scalar loss value by averaging positive losses\n    num_positive_losses = (triplet_loss > eps).float().sum()\n    triplet_loss = triplet_loss.sum() / (num_positive_losses + eps)\n\n    return triplet_loss\n```\n\n----------------------------------------\n\nTITLE: Sample Mighty Embedding Output in JSON\nDESCRIPTION: Demonstrates the JSON output format of a Mighty embedding request, showing the vector representation of the input text.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/mighty.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"outputs\": [\n        [\n            -0.05019686743617058,\n            0.051746174693107605,\n            0.048117730766534805,\n            ... (381 values skipped)\n        ]\n    ],\n    \"shape\": [\n        1,\n        384\n    ],\n    \"texts\": [\n        \"Hello mighty\"\n    ],\n    \"took\": 77\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DLT with Qdrant Extension\nDESCRIPTION: Command to install DLT Python library with Qdrant integration support. This installs the necessary dependencies for using Qdrant as a destination in DLT pipelines.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/dlt.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"dlt[qdrant]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Snippets Display Order in YAML\nDESCRIPTION: YAML configuration that defines the preferred display order for code snippets across different programming languages on the Qdrant landing page. The order begins with data formats (JSON) and protocols (HTTP), followed by script languages, and then compiled languages.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsnippetsOrder:\n- json\n- http\n- bash\n- python\n- typescript\n- rust\n- java\n- csharp\n- go\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database in Go\nDESCRIPTION: Creates a new Qdrant client connection to localhost and executes a vector similarity search query with quantization parameters. The query includes score threshold values and enables rescoring for quantized search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/disable-quantization-rescoring/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tParams: &qdrant.SearchParams{\n\t\tQuantization: &qdrant.QuantizationSearchParams{\n\t\t\tRescore: qdrant.PtrOf(true),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Asynchronously in C#\nDESCRIPTION: This code establishes a connection to a Qdrant instance and executes an asynchronous query, including both sparse and dense prefetch configurations. It demonstrates how to prepare and send a query request with necessary parameters such as collection name and query specifications.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-basic/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  prefetch: new List < PrefetchQuery > {\n    new() {\n      Query = new(float, uint)[] {\n          (0.22f, 1), (0.8f, 42),\n        },\n      Using = \"sparse\",\n      Limit = 20\n    },\n    new() {\n      Query = new float[] {\n          0.01f, 0.45f, 0.67f\n        },\n      Using = \"dense\",\n      Limit = 20\n    }\n  },\n  query: Fusion.Rrf\n);\n```\n\n----------------------------------------\n\nTITLE: Overwriting Payload for Multiple Points in Qdrant Collection using Python\nDESCRIPTION: This code uses the Qdrant client to overwrite the payload for specific points in a collection. It sets two string properties ('property1' and 'property2') for the points with IDs 0, 3, and 10.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/overwrite-payload/by-point-id/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.overwrite_payload(\n    collection_name=\"{collection_name}\",\n    payload={\n        \"property1\": \"string\",\n        \"property2\": \"string\",\n    },\n    points=[0, 3, 10],\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Async IO in Qdrant via Environment Variable\nDESCRIPTION: Command to enable asynchronous IO operations in Qdrant using environment variable configuration for improved disk read performance during large-scale rescoring.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/large-scale-search.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nQDRANT__STORAGE__PERFORMANCE__ASYNC_SCORER=true\n```\n\n----------------------------------------\n\nTITLE: Performing Asynchronous Queries using Qdrant Java Client\nDESCRIPTION: The code snippet demonstrates the setup and execution of asynchronous queries using the Qdrant client library in Java. Dependencies include Qdrant's Java client and gRPC client. The main operations involve querying specific collections with filtered conditions such as matching keywords for attributes and ordering results by specified fields. Inputs include collection names and query parameters like filters and limits, and the output is a query result retrieved asynchronously.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-with-payload/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\\nimport static io.qdrant.client.QueryFactory.nearest;\\nimport static io.qdrant.client.QueryFactory.orderBy;\\n\\nimport io.qdrant.client.QdrantClient;\\nimport io.qdrant.client.QdrantGrpcClient;\\nimport io.qdrant.client.grpc.Points.Filter;\\nimport io.qdrant.client.grpc.Points.PrefetchQuery;\\nimport io.qdrant.client.grpc.Points.QueryPoints;\\n\\nQdrantClient client =\\n    new QdrantClient(QdrantGrpcClient.newBuilder(\\\"localhost\\\", 6334, false).build());\\n\\nclient\\n    .queryAsync(\\n        QueryPoints.newBuilder()\\n            .setCollectionName(\\\"{collection_name}\\\")\\n            .addPrefetch(\\n                PrefetchQuery.newBuilder()\\n                    .setQuery(nearest(0.01f, 0.45f, 0.67f))\\n                    .setFilter(\\n                        Filter.newBuilder().addMust(matchKeyword(\\\"color\\\", \\\"red\\\")).build())\\n                    .setLimit(10)\\n                    .build())\\n            .addPrefetch(\\n                PrefetchQuery.newBuilder()\\n                    .setQuery(nearest(0.01f, 0.45f, 0.67f))\\n                    .setFilter(\\n                        Filter.newBuilder().addMust(matchKeyword(\\\"color\\\", \\\"green\\\")).build())\\n                    .setLimit(10)\\n                    .build())\\n            .setQuery(orderBy(\\\"price\\\"))\\n            .build())\\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Defining Geo-Polygon Structure in JSON\nDESCRIPTION: This JSON snippet specifies a geographic polygon. It has an exterior defined by points that create the boundary, and potentially enclosed areas defined by interior points. The structure is designed for applications in geospatial analysis and location-based services.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-poligon/json.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"location\",\n  \"geo_polygon\": {\n    \"exterior\": {\n      \"points\": [\n        { \"lon\": -70.0, \"lat\": -70.0 },\n        { \"lon\": 60.0, \"lat\": -70.0 },\n        { \"lon\": 60.0, \"lat\": 60.0 },\n        { \"lon\": -70.0, \"lat\": 60.0 },\n        { \"lon\": -70.0, \"lat\": -70.0 }\n      ]\n    },\n    \"interiors\": [\n      {\n        \"points\": [\n          { \"lon\": -65.0, \"lat\": -65.0 },\n          { \"lon\": 0.0, \"lat\": -65.0 },\n          { \"lon\": 0.0, \"lat\": 0.0 },\n          { \"lon\": -65.0, \"lat\": 0.0 },\n          { \"lon\": -65.0, \"lat\": -65.0 }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Community Landing Page Structure in YAML\nDESCRIPTION: YAML configuration that defines the structure and content of a landing page for Qdrant's community programs. It includes sections for community resources like Qdrant Stars, Discord, Blog, and Vector Space Talks, as well as features like documentation, contributor guides, partners, and news updates. Each section contains metadata for titles, descriptions, links, and associated images.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/community/community-features.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Discover our Programs\nresources:\n- id: 0\n  title: Qdrant Stars\n  description: Qdrant Stars are our top contributors, organizers, and evangelists. Learn more about how you can become a Star.\n  link:\n    text: Learn More\n    url: /stars/\n  image:\n    src: /img/community-features/qdrant-stars.svg\n    alt: Avatar\n- id: 1\n  title: Discord\n  description: Chat in real-time with the Qdrant team and community members.\n  link:\n    text: Join our Discord\n    url: https://discord.gg/qdrant\n  image:\n    src: /img/community-features/discord.svg\n    alt: Avatar\n- id: 2\n  title: Community Blog\n  description: Learn all the latest tips and tricks in the AI space through our community blog.\n  link:\n    text: Visit our Blog\n    url: /blog/\n  image:\n    src: /img/community-features/community-blog.svg\n    alt: Avatar\n- id: 3\n  title: Vector Space Talks\n  description: Weekly tech talks with Qdrant users and industry experts.\n  link:\n    text: Learn More\n    url: https://www.youtube.com/watch?v=4aUq5VnR_VI&list=PL9IXkWSmb36_eANzd_sKeQ3tXbFiEGEWn&pp=iAQB\n  image:\n    src: /img/community-features/vector-space-talks.svg\n    alt: Avatar\nfeatures:\n- id: 0\n  icon:\n    src: /icons/outline/documentation-blue.svg\n    alt: Documentation\n  title: Documentation\n  description: Docs carefully crafted to support developers and decision-makers learning about Qdrant features.\n  link:\n    text: Read More\n    url: /documentation/\n- id: 1\n  icon:\n    src: /icons/outline/guide-blue.svg\n    alt: Guide\n  title: Contributors Guide\n  description: Whatever your strengths are, we got you covered. Learn more about how to contribute to Qdrant.\n  link:\n    text: Learn More\n    url: https://github.com/qdrant/qdrant/blob/master/docs/CONTRIBUTING.md \n- id: 2\n  icon:\n    src: /icons/outline/handshake-blue.svg\n    alt: Partners\n  title: Partners\n  description: Technology partners and applications that support Qdrant.\n  link:\n    text: Learn More\n    url: /partners/\n- id: 3\n  icon:\n    src: /icons/outline/mail-blue.svg\n    alt: News & Updates\n  title: News & Updates\n  description: Stay up to date on product news, technical articles, and more. \n  link:\n    text: Learn More\n    url: /subscribe/\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Java Client with API Key Authentication\nDESCRIPTION: Example of initializing the Qdrant Java client with API key authentication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nQdrantClient client =\n    new QdrantClient(\n        QdrantGrpcClient.newBuilder(\n                \"xyz-example.eu-central.aws.cloud.qdrant.io\",\n                6334,\n                true)\n            .withApiKey(\"<paste-your-api-key-here>\")\n            .build());\n```\n\n----------------------------------------\n\nTITLE: Configuring the Qdrant Fluvio Connector\nDESCRIPTION: YAML configuration for the Qdrant sink connector, specifying connection parameters, topic name, and referencing an API key stored in secrets.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/fluvio.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 0.1.0\nmeta:\n  version: 0.1.0\n  name: my-qdrant-connector\n  type: qdrant-sink\n  topic: topic-name\n  secrets:\n    - name: QDRANT_API_KEY\n\nqdrant:\n  url: https://xyz-example.eu-central.aws.cloud.qdrant.io:6334\n  api_key: \"${{ secrets.QDRANT_API_KEY }}\"\n```\n\n----------------------------------------\n\nTITLE: Install Qdrant Client\nDESCRIPTION: Installs the Qdrant client library using pip. The Qdrant client is used to interact with the Qdrant vector database. The `-U` flag upgrades the package if it's already installed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/search-beginners.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install -U qdrant-client\"\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index with Qdrant in CSharp\nDESCRIPTION: Initializes a Qdrant client and creates a payload index. Requires Qdrant.Client and Qdrant.Client.Grpc. The 'CreatePayloadIndexAsync' method is used with collection name, field name, and schema type specified. Supports configuring index params with keyword indexing on disk. Expected input includes collection details and index parameters. Outputs a task operation related to index creation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/keyword-on-disk/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreatePayloadIndexAsync(\n collectionName: \"{collection_name}\",\n fieldName: \"payload_field_name\",\n schemaType: PayloadSchemaType.Keyword,\n indexParams: new PayloadIndexParams\n {\n  KeywordIndexParams = new KeywordIndexParams\n  {\n   OnDisk   = true\n  }\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Collection Info in Qdrant using C#\nDESCRIPTION: Asynchronously retrieves information about a specific collection from a Qdrant database using the C# client. The method requires a collection name parameter and returns collection metadata.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-info/simple/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.GetCollectionInfoAsync(\"{collection_name}\");\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Storage for Qdrant Snapshots\nDESCRIPTION: YAML configuration example demonstrating how to set up Qdrant to store snapshots in an S3-compatible storage service. The configuration includes bucket name, region, access credentials, and endpoint URL settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/snapshots.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  snapshots_config:\n    # Use 's3' to store snapshots on S3\n    snapshots_storage: s3\n\n    s3_config:\n      # Bucket name\n      bucket: your_bucket_here\n\n      # Bucket region (e.g. eu-central-1)\n      region: your_bucket_region_here\n\n      # Storage access key\n      # Can be specified either here or in the `QDRANT__STORAGE__SNAPSHOTS_CONFIG__S3_CONFIG__ACCESS_KEY` environment variable.\n      access_key: your_access_key_here\n\n      # Storage secret key\n      # Can be specified either here or in the `QDRANT__STORAGE__SNAPSHOTS_CONFIG__S3_CONFIG__SECRET_KEY` environment variable.\n      secret_key: your_secret_key_here\n\n      # S3-Compatible Storage URL\n      # Can be specified either here or in the `QDRANT__STORAGE__SNAPSHOTS_CONFIG__S3_CONFIG__ENDPOINT_URL` environment variable.\n      endpoint_url: your_url_here\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Section Delimiter for User Manual in YAML\nDESCRIPTION: YAML configuration that defines a section delimiter for the User Manual in a documentation structure. It sets the title, type, weight for ordering, sitemap exclusion, and build parameters to control rendering behavior.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/dl-user-manual.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#Delimiter files are used to separate the list of documentation pages into sections.\ntitle: \"User Manual\"\ntype: delimiter\nweight: 7 # Change this weight to change order of sections\nsitemapExclude: True\n_build:\n  publishResources: false\n  render: never\npartition: qdrant\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pairwise Distance Matrix with Filtering in Qdrant\nDESCRIPTION: This request retrieves a distance matrix in pairwise format between points filtered by the color 'red'. The response will include point ID pairs and their corresponding similarity scores, limited to a specific number of samples that satisfy the filter condition.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/distance-matrix/basic/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"collection_name\": \"example_collection\",\n  \"matrix\": {\n    \"pairs\": {\n      \"filter\": {\n        \"must\": [\n          {\n            \"key\": \"color\",\n            \"match\": {\n              \"value\": \"red\"\n            }\n          }\n        ]\n      },\n      \"sample_limit\": 100\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Go\nDESCRIPTION: Establishes a connection to a Qdrant database and creates a new collection with configured vector parameters. The collection is set up with 768-dimensional vectors using cosine distance for similarity calculations and 16 default segments for optimization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-high-number-of-segments/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tOptimizersConfig: &qdrant.OptimizersConfigDiff{\n\t\tDefaultSegmentNumber: qdrant.PtrOf(uint64(16)),\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing Payload Data from Qdrant Collection using C#\nDESCRIPTION: Initializes a Qdrant client connection and clears payload data from specific points using their IDs. Uses the Qdrant.Client package to connect to a local Qdrant instance on port 6334 and removes payload from points with IDs 0, 3, and 100.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/clear-payload/simple/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ClearPayloadAsync(collectionName: \"{collection_name}\", ids: new ulong[] { 0, 3, 100 });\n```\n\n----------------------------------------\n\nTITLE: Handling Operation Response in Go\nDESCRIPTION: This Go snippet shows the expected format of the operation response after an upsert call.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_24\n\nLANGUAGE: go\nCODE:\n```\noperation_id:0  status:Acknowledged\n```\n\n----------------------------------------\n\nTITLE: Initializing QdrantClient and Executing ScrollAsync Query in C#\nDESCRIPTION: This snippet demonstrates how to create a QdrantClient instance and perform a ScrollAsync query on a Qdrant database. It uses a range filter to query documents where the population of cities in a country is greater than or equal to 9.0.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-array/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: Range(\"country.cities[].population\", new Qdrant.Client.Grpc.Range { Gte = 9.0 })\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Text Embeddings\nDESCRIPTION: Creating embeddings for movie descriptions using the dense embedding model\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-rerankers.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndescriptions_embeddings = list(\n    dense_embedding_model.embed(descriptions)\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Listing Collection Aliases in C#\nDESCRIPTION: This snippet shows how to create a Qdrant client connection to a local instance and list collection aliases. It creates a connection to Qdrant running on localhost:6334 and queries for aliases associated with a specific collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/list/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ListCollectionAliasesAsync(\"{collection_name}\");\n```\n\n----------------------------------------\n\nTITLE: Defining an Ingress for Qdrant Cluster\nDESCRIPTION: This YAML snippet configures an Ingress resource to expose a Qdrant cluster, mapping a hostname to its backend service. It uses path rules to route traffic to the Qdrant service within the Kubernetes namespace.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/hybrid-cloud-cluster-creation.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: qdrant-9a9f48c7-bb90-4fb2-816f-418a46a74b24\n  namespace: qdrant-namespace\nspec:\n  rules:\n  - host: qdrant-9a9f48c7-bb90-4fb2-816f-418a46a74b24.your-domain.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: qdrant-9a9f48c7-bb90-4fb2-816f-418a46a74b24\n            port:\n              number: 6333\n```\n\n----------------------------------------\n\nTITLE: Defining Example Documents for Vector Database\nDESCRIPTION: Sample dataset containing technical event descriptions with details like event name, location, and dates that will be indexed in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-vultr-dspy-ollama.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndocuments = [\n    \"Taking place in San Francisco, USA, from the 10th to the 12th of June, 2024, the Global Developers Conference is the annual gathering spot for developers worldwide, offering insights into software engineering, web development, and mobile applications.\",\n    \"The AI Innovations Summit, scheduled for 15-17 September 2024 in London, UK, aims at professionals and researchers advancing artificial intelligence and machine learning.\",\n    # ... more documents ...\n    \"The International Space Exploration Symposium, scheduled in Houston, USA from 2024-08-05 to 2024-08-07, invites discussions on space exploration technologies and missions.\"\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Point by ID in Qdrant with Python\nDESCRIPTION: This code snippet demonstrates how to retrieve a single point from a collection by utilizing the point ID. It supports optional parameters `with_vectors` and `with_payload` to optimize which parts of the point to include in the response, thereby reducing the amount of unnecessary data transmitted.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/retrieve-points/single/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef retrieve_point(collection_name, point_id, with_vectors=False, with_payload=False):\n    \"\"\"\n    Retrieve a single point from a collection using the specified point ID.\n    :param collection_name: Name of the collection to query.\n    :param point_id: ID of the point to retrieve.\n    :param with_vectors: Include the vectors in the response if True.\n    :param with_payload: Include payload data in the response if True.\n    :return: The retrieved point, with included parameters as specified.\n    \"\"\"\n    # Placeholder for retrieving the point logic\n    pass\n```\n\n----------------------------------------\n\nTITLE: Deploying Application to Fly.io\nDESCRIPTION: Command to build and deploy the application to Fly.io using the Dockerfile in the project. This finalizes the deployment process.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/chatgpt-plugin.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nflyctl deploy\n```\n\n----------------------------------------\n\nTITLE: Updating Collection Asynchronously in Qdrant - Java\nDESCRIPTION: This code snippet uses the Qdrant Java client to update a collection asynchronously. It requires the collection name and an optimizer configuration. The 'updateCollectionAsync' method is used to initiate the update process. Dependencies include the Qdrant Java client library and specific gRPC classes for collections. The expected input parameters are the collection name and optimizer configuration. The output is the completion of the update process without blocking the current thread.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/trigger-indexing/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\\nimport io.qdrant.client.grpc.Collections.UpdateCollection;\\n\\nclient.updateCollectionAsync(\\n    UpdateCollection.newBuilder()\\n        .setCollectionName(\\\"{collection_name}\\\")\\n        .setOptimizersConfig(\\n            OptimizersConfigDiff.getDefaultInstance())\\n        .build());\n```\n\n----------------------------------------\n\nTITLE: Calculating Top-k Accuracy for Semantic Search Results\nDESCRIPTION: This code calculates the accuracy@k metric for different values of k using the previously computed answer positions. It demonstrates how to evaluate the performance of the semantic search system for various levels of precision.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qa-with-cohere-and-qdrant.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Prepared answer positions are being used to calculate different values of accuracy@k\nfor k in range(1, k_max + 1):\n    correct_answers = len(\n        list(\n            filter(lambda x: 0 <= x < k, answer_positions)\n        )\n    )\n    print(f\"accuracy@{k} =\", correct_answers / len(dataset[\"train\"]))\n```\n\n----------------------------------------\n\nTITLE: Performance Benchmark Data Table in Markdown\nDESCRIPTION: Markdown table showing performance comparison between defragmented and non-defragmented storage across different tenant sizes and hot subset percentages. The data demonstrates significant RPS improvements with defragmentation, especially for small tenant sizes.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/immutable-data-structures.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| % of hot subset | Tenant Size (vectors) | RPS, Non-defragmented | RPS, Defragmented |\n|-----------------|-----------------------|-----------------------|-------------------|\n| 2.5%            | 50k                   |  1.5                  |  304              |\n| 12.5%           | 50k                   |  0.47                 |  279              |\n| 25%             | 50k                   |  0.4                  |  63               |\n| 50%             | 50k                   |  0.3                  |  8                |\n| 2.5%            | 5k                    |  56                   |  490              |\n| 12.5%           | 5k                    |  5.8                  |  488              |\n| 25%             | 5k                    |  3.3                  |  490              |\n| 50%             | 5k                    |  3.1                  |  480              |\n| 75%             | 5k                    |  2.9                  |  130              |\n| 100%            | 5k                    |  2.7                  |  95               |\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collection Points with Prefetch and Filtering\nDESCRIPTION: HTTP POST request to query points in a Qdrant collection using dense vector search, multiple prefetch conditions, and ordering by price\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-with-payload/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": [\n        {\n            \"query\": [0.01, 0.45, 0.67, ...], // <-- dense vector\n            \"filter\": {\n                \"must\": {\n                    \"key\": \"color\",\n                    \"match\": {\n                        \"value\": \"red\"\n                    }\n                }\n            },\n            \"limit\": 10\n        },\n        {\n            \"query\": [0.01, 0.45, 0.67, ...], // <-- dense vector\n            \"filter\": {\n                \"must\": {\n                    \"key\": \"color\",\n                    \"match\": {\n                        \"value\": \"green\"\n                    }\n                }\n            },\n            \"limit\": 10\n        }\n    ],\n    \"query\": { \"order_by\": \"price\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index Asynchronously with QdrantClient in Java\nDESCRIPTION: This snippet initiates a Qdrant client connection and creates a keyword payload index for a specified collection asynchronously. It uses the `QdrantClient` and necessary protobuf types. Key parameters include the collection name, payload field name, and index parameters defining the index type and disk usage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/keyword-on-disk/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.PayloadIndexParams;\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\nimport io.qdrant.client.grpc.Collections.KeywordIndexParams;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createPayloadIndexAsync(\n        \"{collection_name}\",\n        \"payload_field_name\",\n        PayloadSchemaType.Keyword,\n        PayloadIndexParams.newBuilder()\n            .setKeywordIndexParams(\n                KeywordIndexParams.newBuilder()\n                    .setOnDisk(true)\n                    .build())\n            .build(),\n        null,\n        null,\n        null)\n    .get();\n```\n\n----------------------------------------\n\nTITLE: HasId Filtering in Qdrant\nDESCRIPTION: Demonstrates how to use the HasId condition to filter points based on their IDs, useful for excluding specific results or searching among specified points.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/filtering.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filter\": {\n    \"should\": [\n      {\n        \"key\": \"city\",\n        \"match\": {\n          \"value\": \"London\"\n        }\n      },\n      {\n        \"key\": \"color\",\n        \"match\": {\n          \"value\": \"green\"\n        }\n      }\n    ],\n    \"must\": [\n      {\n        \"has_id\": [1, 3, 5]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Midjourney Styles Dataset into Qdrant\nDESCRIPTION: This HTTP request imports the Midjourney Styles dataset into Qdrant using a snapshot. It's used to set up the data for exploration examples.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/distance-based-exploration.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/midlib/snapshots/recover\n{\n  \"location\": \"http://snapshots.qdrant.io/midlib.snapshot\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Docker\nDESCRIPTION: Example of configuring Qdrant using environment variables in Docker, which take highest priority.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6333:6333 \\\n    -e QDRANT__LOG_LEVEL=INFO \\\n    -e QDRANT__SERVICE__API_KEY=<MY_SECRET_KEY> \\\n    -e QDRANT__SERVICE__ENABLE_TLS=1 \\\n    -e QDRANT__TLS__CERT=./tls/cert.pem \\\n    qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Deleting Qdrant Records by Metadata Filter\nDESCRIPTION: SQL statement for deleting records from a Qdrant collection based on metadata filters. This example removes all records where the 'source' field equals 'bbc'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/mindsdb.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nDELETE * FROM qdrant_test.test_table\nWHERE `metadata.source` = 'bbc';\n```\n\n----------------------------------------\n\nTITLE: Configuring Indexing Optimizer Parameters\nDESCRIPTION: This YAML configuration sets parameters for the Indexing Optimizer, which determines when to enable indexing and memmap storage based on the number of records.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/optimizer.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  optimizers:\n    # Maximum size (in kilobytes) of vectors to store in-memory per segment.\n    # Segments larger than this threshold will be stored as read-only memmaped file.\n    # Memmap storage is disabled by default, to enable it, set this threshold to a reasonable value.\n    # To disable memmap storage, set this to `0`.\n    # Note: 1Kb = 1 vector of size 256\n    memmap_threshold: 200000\n\n    # Maximum size (in kilobytes) of vectors allowed for plain index, exceeding this threshold will enable vector indexing\n    # Default value is 20,000, based on <https://github.com/google-research/google-research/blob/master/scann/docs/algorithms.md>.\n    # To disable vector indexing, set to `0`.\n    # Note: 1kB = 1 vector of size 256.\n    indexing_threshold_kb: 20000\n```\n\n----------------------------------------\n\nTITLE: Disable Quantization Rescoring\nDESCRIPTION: Optional configuration to disable rescoring for faster search operations at the cost of slightly reduced precision.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/optimize.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"params\": {\n    \"quantization\": {\n        \"rescore\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling Points with Filter in Qdrant Collection (HTTP)\nDESCRIPTION: This HTTP POST request demonstrates how to scroll through points in a Qdrant collection using a filter. The filter searches for points where the 'country.cities[].sightseeing' key matches the value 'Osaka Castle'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-array-match/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"should\": [\n            {\n                \"key\": \"country.cities[].sightseeing\",\n                \"match\": {\n                    \"value\": \"Osaka Castle\"\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries\nDESCRIPTION: Installs the necessary Python libraries including LangChain, OCI SDK, and Qdrant client using pip.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install langchain oci qdrant-client langchainhub\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Float16 Vectors in HTTP\nDESCRIPTION: This snippet demonstrates how to create a Qdrant collection using the HTTP API, specifying float16 as the vector datatype for improved memory efficiency.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 1024,\n      \"distance\": \"Cosine\",\n      \"datatype\": \"float16\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sparse Vectors in Qdrant Collection\nDESCRIPTION: HTTP PUT request to configure sparse vector settings for a collection. Sets up a sparse vector named 'text' with an IDF (Inverse Document Frequency) modifier for improved text search relevance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector-idf/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"sparse_vectors\": {\n        \"text\": {\n            \"modifier\": \"idf\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the DeepSeek Completion API\nDESCRIPTION: This code imports the required modules (requests and json) to call the DeepSeek API for generating a response based on the previously defined prompt. It requires an API key from the DeepSeek platform to authenticate the call, representing the final step in the RAG pipeline.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/rag-deepseek.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\n# Provide your own Deepseek API key\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Searching Matrix Pairs in C#\nDESCRIPTION: This code establishes a connection to a Qdrant server running on localhost port 6334 and performs a search for matrix pairs with a filter condition. The search is limited to 2 results from a sample of 10 pairs that match the condition where the 'color' field equals 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/distance-matrix/basic/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.SearchMatrixPairsAsync(\n    collectionName: \"{collection_name}\",\n    filter: MatchKeyword(\"color\", \"red\"),\n    sample: 10,\n    limit: 2\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Range Condition in Qdrant with C#\nDESCRIPTION: This code snippet demonstrates how to create a range condition for filtering data in Qdrant using the C# client. It uses the `Range` method from the `Conditions` class to specify a price range between 100.0 and 450.0. The snippet requires the `Qdrant.Client.Grpc` namespace and the `Conditions` class.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/range/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing static Qdrant.Client.Grpc.Conditions;\n\nRange(\"price\", new Qdrant.Client.Grpc.Range { Gte = 100.0, Lte = 450 });\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Client and Collection in TypeScript\nDESCRIPTION: Initializes a Qdrant client connection to localhost and creates a new collection with 768-dimensional vectors using Cosine distance. Includes scalar quantization configuration for optimized storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-scalar-quantization-params/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n  },\n  quantization_config: {\n    scalar: {\n      type: \"int8\",\n      quantile: 0.99,\n      always_ram: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Payload Structure for Arxiv.org Abstracts Dataset in JSON\nDESCRIPTION: Example of the payload structure for each vector in the Arxiv.org abstracts dataset. It includes the paper abstract and DOI.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/datasets.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"abstract\": \"Recently Cole and Gkatzelis gave the first constant factor approximation\\nalgorithm for the problem of allocating indivisible items to agents, under\\nadditive valuations, so as to maximize the Nash Social Welfare. We give\\nconstant factor algorithms for a substantial generalization of their problem --\\nto the case of separable, piecewise-linear concave utility functions. We give\\ntwo such algorithms, the first using market equilibria and the second using the\\ntheory of stable polynomials.\\n  In AGT, there is a paucity of methods for the design of mechanisms for the\\nallocation of indivisible goods and the result of Cole and Gkatzelis seemed to\\nbe taking a major step towards filling this gap. Our result can be seen as\\nanother step in this direction.\\n\",\n    \"DOI\": \"1612.05191\"\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Matrix Pairs in Qdrant Collection with Filtering\nDESCRIPTION: This HTTP POST request searches for pairs within a matrix in a Qdrant collection. It samples 10 points, limits results to 2 pairs per point, and filters for points where the 'color' field equals 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/distance-matrix/basic/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/search/matrix/pairs\n{\n    \"sample\": 10,\n    \"limit\": 2,\n    \"filter\": {\n        \"must\": {\n            \"key\": \"color\",\n            \"match\": { \"value\": \"red\" }\n        }\n    }  \n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Re-scoring in Qdrant Search Query\nDESCRIPTION: This code shows how to set the 'rescore' parameter to false in a Qdrant query to disable re-scoring. Disabling re-scoring enhances search speed, particularly in systems with high disk latency, by reducing necessary disk reads.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-disabled-rescoring/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"rescore\": false\n```\n\n----------------------------------------\n\nTITLE: Querying Distance Matrix API using Offsets format in Qdrant\nDESCRIPTION: This example shows how to use the Distance Matrix API with the 'offsets' endpoint to retrieve distances between points in a compact representation using row and column offsets.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.12.x.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/search/matrix/offsets\n{\n    \"sample\": 10,\n    \"limit\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Database in MindsDB\nDESCRIPTION: SQL statement for creating a Qdrant database in MindsDB with in-memory storage and Cosine distance metric. The collection is configured with vector size 386.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/mindsdb.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE qdrant_test\nWITH ENGINE = \"qdrant\",\nPARAMETERS = {\n    \"location\": \":memory:\",\n    \"collection_config\": {\n        \"size\": 386,\n        \"distance\": \"Cosine\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with Nested Field Filter in Rust\nDESCRIPTION: This code uses the Qdrant client to perform a scroll query on a specified collection. It applies a filter to match a specific string within a nested array field 'country.cities[].sightseeing'. The query is executed asynchronously and returns a result that needs to be handled for potential errors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-array-match/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::should([\n            Condition::matches(\"country.cities[].sightseeing\", \"Osaka Castle\".to_string()),\n        ])),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Adding Qdrant Provider to requirements.txt\nDESCRIPTION: This snippet specifies how to include the Qdrant provider in your Airflow project's dependencies by adding it to the requirements.txt file, allowing the use of Qdrant features within Airflow.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/qdrant-airflow-astronomer.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\napache-airflow-providers-qdrant\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Qdrant Client in Rust\nDESCRIPTION: This code uses the Qdrant client to upsert three points into a collection. Each point has an ID, a vector, and a payload. The upsert operation is configured to wait for completion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/list-of-points-simple/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{PointStruct, UpsertPointsBuilder};\n\nclient\n    .upsert_points(\n        UpsertPointsBuilder::new(\n            \"{collection_name}\",\n            vec![\n                PointStruct::new(1, vec![0.9, 0.1, 0.1], [(\"city\", \"red\".into())]),\n                PointStruct::new(2, vec![0.1, 0.9, 0.1], [(\"city\", \"green\".into())]),\n                PointStruct::new(3, vec![0.1, 0.1, 0.9], [(\"city\", \"blue\".into())]),\n            ],\n        )\n        .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents into the Collection in TypeScript\nDESCRIPTION: This TypeScript snippet performs the upsert operation to add points into a specified Qdrant collection, ensuring the process is awaited.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait qdrantClient.upsert(COLLECTION_NAME, {\n        wait: true,\n        points\n    });\n```\n\n----------------------------------------\n\nTITLE: Final Application URL\nDESCRIPTION: The resulting URL where the application will be accessible after deployment, which needs to be used when registering the plugin with ChatGPT.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/chatgpt-plugin.md#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nhttps://your-application-name.fly.dev\n```\n\n----------------------------------------\n\nTITLE: Setting Aleph Alpha API Key in Python\nDESCRIPTION: Sets the Aleph Alpha API key as an environment variable in Python.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-contract-management-stackit-aleph-alpha.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nos.environ[\"ALEPH_ALPHA_API_KEY\"] = \"<your-token>\"\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for RAG Application\nDESCRIPTION: Imports necessary libraries from LangChain and Relari for building and evaluating the RAG application.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-relari.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.document_loaders.directory import DirectoryLoader\nfrom langchain_qdrant import Qdrant\nfrom langchain_community.embeddings.fastembed import FastEmbedEmbeddings\nfrom relari.core.types import DatasetDatum\n```\n\n----------------------------------------\n\nTITLE: Adding Vectors in Java\nDESCRIPTION: This Java snippet shows how to add multiple points to the Qdrant collection with associated payload data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\\nimport java.util.Map;\\n\\nimport static io.qdrant.client.PointIdFactory.id;\\nimport static io.qdrant.client.ValueFactory.value;\\nimport static io.qdrant.client.VectorsFactory.vectors;\\n\\nimport io.qdrant.client.grpc.Points.PointStruct;\\nimport io.qdrant.client.grpc.Points.UpdateResult;\\n\\nUpdateResult operationInfo =\\n    client\\n        .upsertAsync(\\n            \"test_collection\",\\n            List.of(\\n                PointStruct.newBuilder()\\n                    .setId(id(1))\\n                    .setVectors(vectors(0.05f, 0.61f, 0.76f, 0.74f))\\n                    .putAllPayload(Map.of(\"city\", value(\"Berlin\")))\\n                    .build(),\\n                PointStruct.newBuilder()\\n                    .setId(id(2))\\n                    .setVectors(vectors(0.19f, 0.81f, 0.75f, 0.11f))\\n                    .putAllPayload(Map.of(\"city\", value(\"London\")))\\n                    .build(),\\n                PointStruct.newBuilder()\\n                    .setId(id(3))\\n                    .setVectors(vectors(0.36f, 0.55f, 0.47f, 0.94f))\\n                    .putAllPayload(Map.of(\"city\", value(\"Moscow\")))\\n                    .build()))\\n                // Truncated\\n            .get();\\n\\nSystem.out.println(operationInfo);\n```\n\n----------------------------------------\n\nTITLE: Listing All Collections in Qdrant\nDESCRIPTION: This snippet demonstrates how to retrieve a list of all collections in the Qdrant database, useful for getting an overview of all available vector collections.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/collections.md#2025-04-21_snippet_10\n\nLANGUAGE: curl\nCODE:\n```\ncurl 'http://localhost:6333/collections'\n```\n\n----------------------------------------\n\nTITLE: Performing Scroll Operation with Complex Filtering in Qdrant Java Client\nDESCRIPTION: This code demonstrates how to use the Qdrant Java client to perform a scroll operation on a collection with a complex filter. The filter combines nested conditions for diet preferences, keyword matching for food type, and point ID filtering. It uses static imports from ConditionFactory and PointIdFactory for creating filter conditions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-nested-clause-and-has-id/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.hasId;\nimport static io.qdrant.client.ConditionFactory.match;\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\nimport static io.qdrant.client.ConditionFactory.nested;\nimport static io.qdrant.client.PointIdFactory.id;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addMust(\n                        nested(\n                            \"diet\",\n                            Filter.newBuilder()\n                                .addAllMust(\n                                    List.of(\n                                        matchKeyword(\"food\", \"meat\"), match(\"likes\", true)))\n                                .build()))\n                    .addMust(hasId(id(1)))\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Using Custom Shortcode in Markdown\nDESCRIPTION: This example demonstrates how to use a custom shortcode in a markdown file. Shortcodes are enclosed in double curly braces and can accept parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n{{< shortcode-name param1=\"value1\" param2=\"value2\" >}}\n```\n\n----------------------------------------\n\nTITLE: Network Access Restriction Examples\nDESCRIPTION: Examples showing how to restrict external network access for Qdrant containers using Docker and Docker Compose configurations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create --internal <name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network <name>\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Filtered Vector Search\nDESCRIPTION: Establishes a connection to a Qdrant server running on localhost, creates a search matrix points query with a color filter, sample size, and result limit\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/distance-matrix/basic/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.SearchMatrixPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .searchMatrixPairsAsync(\n        Points.SearchMatrixPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(Filter.newBuilder().addMust(matchKeyword(\"color\", \"red\")).build())\n            .setSample(10)\n            .setLimit(2)\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Deleting Snapshot Using Qdrant C# Client\nDESCRIPTION: Demonstrates how to connect to a Qdrant server and delete a named snapshot. The code initializes a QdrantClient with localhost connection parameters and port 6334, then uses the DeleteFullSnapshotAsync method to remove a specified snapshot.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/delete-full-snapshot/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.DeleteFullSnapshotAsync(\"{snapshot_name}\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Layer Recycling with Quaterion in Python\nDESCRIPTION: This code snippet demonstrates how to implement layer recycling using Quaterion by composing a TrainableModel with a frozen Encoder and an unfrozen EncoderHead. It modifies the ResNet34 model to allow fine-tuning of specific layers while caching others for improved efficiency.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/embedding-recycler.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Model(TrainableModel):\n    # ...\n\n\n    def configure_encoders(self) -> Union[Encoder, Dict[str, Encoder]]:\n        pre_trained_encoder = torchvision.models.resnet34(pretrained=True)\n        self.avgpool = copy.deepcopy(pre_trained_encoder.avgpool)\n        self.finetuned_block = copy.deepcopy(pre_trained_encoder.layer4)\n        modules = []\n\n        for name, child in pre_trained_encoder.named_children():\n            modules.append(child)\n            if name == \"layer3\":\n                break\n\n        pre_trained_encoder = nn.Sequential(*modules)\n        \n        return CarsEncoder(pre_trained_encoder)\n\n    def configure_head(self, input_embedding_size) -> EncoderHead:\n        return SequentialHead(self.finetuned_block,\n        self.avgpool,\n        nn.Flatten(),\n        SkipConnectionHead(512, dropout=0.3, skip_dropout=0.2),\n        output_size=512)\n\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant with Random Sampling in TypeScript\nDESCRIPTION: This code demonstrates how to initialize a Qdrant client connection to a local server and perform a random sampling query on a collection. It imports the QdrantClient from the @qdrant/js-client-rest package, connects to a local Qdrant instance, and executes a query with the 'sample: random' parameter to retrieve random documents.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/random-sample/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nconst sampled = await client.query(\"{collection_name}\", {\n  query: {\n    sample: \"random\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Dense and Sparse Vectors\nDESCRIPTION: Demonstrates setting up a Qdrant client and creating a collection with multiple vector configurations. Configures both dense vectors (text and image) with different distance metrics and sparse vectors for text processing. Uses the Qdrant client library to establish connection and apply configurations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/named-vectors/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\\n    CreateCollectionBuilder, Distance, SparseVectorParamsBuilder, SparseVectorsConfigBuilder,\\n    VectorParamsBuilder, VectorsConfigBuilder,\\n};\\nuse qdrant_client::Qdrant;\\n\\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\\n\\nlet mut vector_config = VectorsConfigBuilder::default();\\nvector_config.add_named_vector_params(\"text\", VectorParamsBuilder::new(5, Distance::Dot));\\nvector_config.add_named_vector_params(\"image\", VectorParamsBuilder::new(4, Distance::Cosine));\\n\\nlet mut sparse_vectors_config = SparseVectorsConfigBuilder::default();\\nsparse_vectors_config\\n    .add_named_vector_params(\"text-sparse\", SparseVectorParamsBuilder::default());\\n\\nclient\\n    .create_collection(\\n        CreateCollectionBuilder::new(\"{collection_name}\")\\n            .vectors_config(vector_config)\\n            .sparse_vectors_config(sparse_vectors_config),\\n    )\\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Strong Ordering in Go\nDESCRIPTION: This Go snippet shows how to create a Qdrant client and upsert points into a collection with strong ordering. The points are structured with IDs, vectors, and payloads defined using the Qdrant Go client library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_42\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Upsert(context.Background(), &qdrant.UpsertPoints{\n\tCollectionName: \"{collection_name}\",\n\tPoints: []*qdrant.PointStruct{\n\t\t{\n\t\t\tId:      qdrant.NewIDNum(1),\n\t\t\tVectors: qdrant.NewVectors(0.9, 0.1, 0.1),\n\t\t\tPayload: qdrant.NewValueMap(map[string]any{\"color\": \"red\"}),\n\t\t},\n\t\t{\n\t\t\tId:      qdrant.NewIDNum(2),\n\t\t\tVectors: qdrant.NewVectors(0.1, 0.9, 0.1),\n\t\t\tPayload: qdrant.NewValueMap(map[string]any{\"color\": \"green\"}),\n\t\t},\n\t\t{\n\t\t\tId:      qdrant.NewIDNum(3),\n\t\t\tVectors: qdrant.NewVectors(0.1, 0.1, 0.9),\n\t\t\tPayload: qdrant.NewValueMap(map[string]any{\"color\": \"blue\"}),\n\t\t},\n\t},\n\tOrdering: &qdrant.WriteOrdering{\n\t\tType: qdrant.WriteOrderingType_Strong,\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Payloads in Qdrant using C#\nDESCRIPTION: This snippet demonstrates how to set payloads for specific points in a Qdrant collection using the C# client. It requires the Qdrant.Client and Qdrant.Client.Grpc NuGet packages. The code initializes a Qdrant client and then uses the SetPayloadAsync method to update the payloads for points with IDs 0, 3, and 10 in the specified collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/set-payload/by-point-id/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.SetPayloadAsync(\n    collectionName: \"{collection_name}\",\n    payload: new Dictionary<string, Value> { { \"property1\", \"string\" }, { \"property2\", \"string\" } },\n    ids: new ulong[] { 0, 3, 10 }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Querying Collections in TypeScript\nDESCRIPTION: This snippet shows how to import the QdrantClient from the @qdrant/js-client-rest package, create a new client instance connected to a local Qdrant server, and then call the getCollections method to retrieve all collections.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/list-all-collections/simple/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.getCollections();\n```\n\n----------------------------------------\n\nTITLE: Connecting to and Querying Qdrant Vector Database in C#\nDESCRIPTION: This snippet demonstrates how to establish a connection to a Qdrant server running on localhost port 6334 and execute a query against a collection. It uses the Qdrant.Client library to interact with the Qdrant vector database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/random-sample/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(collectionName: \"{collection_name}\", query: Sample.Random);\n```\n\n----------------------------------------\n\nTITLE: Executing Asynchronous Queries with Qdrant Java Client\nDESCRIPTION: This snippet shows how to initialize a QdrantClient using the QdrantGrpcClient, and conduct asynchronous queries with multi-vector and dense vector searching capabilities. It requires the Qdrant Java client library, and the primary parameters include collection name, vector specifications, and query limits. The inputs are vectors and their respective distances, while the output is a set of queried data points. There are no specific limitations noted in the context.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-multivector/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PrefetchQuery;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .queryAsync(\n        QueryPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .addPrefetch(\n                PrefetchQuery.newBuilder()\n                    .setQuery(nearest(0.01f, 0.45f, 0.67f)) // <-- dense vector\n                    .setLimit(100)\n                    .build())\n            .setQuery(\n                nearest(\n                    new float[][] {\n                      {0.1f, 0.2f}, // <─┐\n                      {0.2f, 0.1f}, // < ├─ multi-vector\n                      {0.8f, 0.9f}  // < ┘\n                    }))\n            .setUsing(\"colbert\")\n            .setLimit(10)\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Java Client\nDESCRIPTION: This code initializes a Qdrant client and creates a new collection asynchronously. It specifies vector parameters such as size, distance metric, and data type.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-uint8/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.grpc.Collections.Datatype;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\n\nQdrantClient client = new QdrantClient(\n    QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\"{collection_name}\",\n        VectorParams.newBuilder()\n            .setSize(1024)\n            .setDistance(Distance.Cosine)\n            .setDatatype(Datatype.Uint8)\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Qdrant with Embeddings\nDESCRIPTION: SQL statement for creating a new table in Qdrant with vector embeddings and metadata. This example pulls embeddings from a MySQL database and adds metadata in JSON format.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/mindsdb.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE qdrant_test.test_table (\n   SELECT embeddings,'{\\'source\\': \\'bbc\\'}' as metadata FROM mysql_demo_db.test_embeddings\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Custom Sharding - Python\nDESCRIPTION: Creates a new collection with custom sharding using Python client. Initializes QdrantClient and sets up collection with custom sharding method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    shard_number=1,\n    sharding_method=models.ShardingMethod.CUSTOM,\n    # ... other collection parameters\n)\nclient.create_shard_key(\"{collection_name}\", \"{shard_key}\")\n```\n\n----------------------------------------\n\nTITLE: Deleting Points with Filter Conditions in Qdrant using Rust\nDESCRIPTION: This snippet demonstrates how to delete points from a Qdrant collection based on a specific condition. It uses the DeletePointsBuilder to construct a delete operation that removes all points where the 'color' field matches 'red', and waits for the operation to complete.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-points/by-filter/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, DeletePointsBuilder, Filter};\n\nclient\n    .delete_points(\n        DeletePointsBuilder::new(\"{collection_name}\")\n            .points(Filter::must([Condition::matches(\n                \"color\",\n                \"red\".to_string(),\n            )]))\n            .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Listing Snapshots in Java\nDESCRIPTION: Sets up a connection to a Qdrant server running on localhost:6334 without TLS and retrieves a list of full snapshots. The code uses the Qdrant Java client library and performs an asynchronous operation to list snapshots.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/list-full-snapshots/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.listFullSnapshotAsync().get();\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Comparisons for Dataset Indexing\nDESCRIPTION: This snippet calculates the total number of comparisons needed to build an index for a large dataset of PDF pages using ColPali. It demonstrates the computational challenge of scaling the system.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/colpali-optimization.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n$$\n1,000 \\cdot 1,000 \\cdot 20,000 \\cdot 128 = 2.56 \\times 10^{12} \\text{ comparisons!}\n$$\n```\n\n----------------------------------------\n\nTITLE: Updating Qdrant Collection Configuration in Python\nDESCRIPTION: This snippet demonstrates the adjustment of the indexing threshold for a specified Qdrant collection using the Qdrant client in Python. It requires the Qdrant client and the 'models' module, which should define the OptimizersConfigDiff class. The main purpose is to configure optimizers for better data management by setting the indexing threshold at 10000. The input specifies the collection name and configuration differences, and there are no direct outputs from this operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/simple/python.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclient.update_collection(\\n    collection_name=\\\"{collection_name}\\\",\\n    optimizers_config=models.OptimizersConfigDiff(indexing_threshold=10000),\\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Collection Asynchronously in C#\nDESCRIPTION: This C# code snippet demonstrates how to delete a collection asynchronously using the client object. The collection specified by the placeholder {collection_name} will be deleted if it exists. The code snippet requires an initialized client object with access to the server where the collection is stored. The primary parameter is the collection name as a string, and there are no outputs as this operation is a void call. Care should be taken to ensure that {collection_name} is correctly specified to prevent errors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-collection/simple/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.DeleteCollectionAsync(\"{collection_name}\");\n```\n\n----------------------------------------\n\nTITLE: Disabling Strict Mode in Bash\nDESCRIPTION: Curl command for updating an existing Qdrant collection to disable strict mode.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"strict_mode_config\": {\n        \"enabled\": false,\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Filtering Query by IDs in Qdrant using Python\nDESCRIPTION: This code snippet demonstrates how to create a filter condition in Qdrant to include only specific IDs in the query results. It uses the 'must' condition with an 'id' filter, allowing for precise control over which data points are returned.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-has-id-filter/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfilter_condition = models.Filter(\n    must=[\n        models.FieldCondition(\n            key=\"id\",\n            match=models.MatchAny(any=[\"id1\", \"id2\", \"id3\"])\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Collection Configuration in Qdrant - Rust\nDESCRIPTION: This snippet updates the configuration settings for a collection in Qdrant, including HNSW parameters and quantization settings. It utilizes the Qdrant client library's builders to specify configurations such as ef_construct for HNSW and scalar quantization parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/hnsw-and-quantization/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse std::collections::HashMap;\n\nuse qdrant_client::qdrant::{\n    quantization_config_diff::Quantization, vectors_config_diff::Config, HnswConfigDiffBuilder,\n    QuantizationType, ScalarQuantizationBuilder, UpdateCollectionBuilder, VectorParamsDiffBuilder,\n    VectorParamsDiffMap,\n};\n\nclient\n    .update_collection(\n        UpdateCollectionBuilder::new(\"{collection_name}\")\n            .hnsw_config(HnswConfigDiffBuilder::default().ef_construct(123))\n            .vectors_config(Config::ParamsMap(VectorParamsDiffMap {\n                map: HashMap::from([(\n                    (\"my_vector\".into()),\n                    VectorParamsDiffBuilder::default()\n                        .hnsw_config(HnswConfigDiffBuilder::default().m(32).ef_construct(123))\n                        .build(),\n                )]),\n            }))\n            .quantization_config(Quantization::Scalar(\n                ScalarQuantizationBuilder::default()\n                    .r#type(QuantizationType::Int8.into())\n                    .quantile(0.8)\n                    .always_ram(true)\n                    .build(),\n            )),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collection with Context-Based Search in HTTP\nDESCRIPTION: This HTTP POST request performs a context-based vector search in a Qdrant collection. The query includes multiple context pairs with positive and negative vector IDs to influence the search results, along with a limit parameter to restrict the number of returned results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/context-basic/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"context\": [\n      {\n        \"positive\": 100,\n        \"negative\": 718\n      },\n      {\n        \"positive\": 200,\n        \"negative\": 300\n      }\n    ]\n  },\n  \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling HNSW Graph Construction in Qdrant Collection\nDESCRIPTION: This snippet demonstrates how to enable HNSW graph construction after uploading vectors to a Qdrant collection. This step is necessary for efficient similarity search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/binary-quantization.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient.update_collection(\n    collection_name=f\"{collection_name}\",\n    hnsw_config=models.HnswConfigDiff(\n        m=16,\n    ,\n)\n```\n\n----------------------------------------\n\nTITLE: YAML Definition for Kubernetes Secret\nDESCRIPTION: This YAML snippet outlines the structure of a Kubernetes secret object for a generic secret type. It includes metadata such as the secret's name and namespace, and the generic data indicating an API key used for Qdrant cluster authentication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/hybrid-cloud-cluster-creation.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  api-key: ...\nkind: Secret\nmetadata:\n  name: qdrant-api-key\n  namespace: the-qdrant-namespace\ntype: kubernetes.io/generic\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Aliases with Qdrant Client in Python\nDESCRIPTION: This snippet demonstrates how to initialize a Qdrant client connected to a local Qdrant server and retrieve collection aliases for a specific collection. It requires the qdrant_client Python package and a running Qdrant server instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/list/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.get_collection_aliases(collection_name=\"{collection_name}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Sparse Vectors\nDESCRIPTION: Demonstrates how to initialize a Qdrant client and create a new collection with IDF-modified sparse vectors. The code connects to a local Qdrant instance and configures a collection with text-based sparse vector settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector-idf/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient, Schemas } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  sparse_vectors: {\n    \"text\": {\n      modifier: \"idf\"\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Payload Structure for Food Item in JSON\nDESCRIPTION: Illustrates the structure of a single food item payload in the Wolt dataset, including restaurant details, dish information, and image URL.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/food-discovery-demo.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"cafe\": {\n        \"address\": \"VGX7+6R2 Vecchia Napoli, Valletta\",\n        \"categories\": [\"italian\", \"pasta\", \"pizza\", \"burgers\", \"mediterranean\"],\n        \"location\": {\"lat\": 35.8980154, \"lon\": 14.5145106},\n        \"menu_id\": \"610936a4ee8ea7a56f4a372a\",\n        \"name\": \"Vecchia Napoli Is-Suq Tal-Belt\",\n        \"rating\": 9,\n        \"slug\": \"vecchia-napoli-skyparks-suq-tal-belt\"\n    },\n    \"description\": \"Tomato sauce, mozzarella fior di latte, crispy guanciale, Pecorino Romano cheese and a hint of chilli\",\n    \"image\": \"https://wolt-menu-images-cdn.wolt.com/menu-images/610936a4ee8ea7a56f4a372a/005dfeb2-e734-11ec-b667-ced7a78a5abd_l_amatriciana_pizza_joel_gueller1.jpeg\",\n    \"name\": \"L'Amatriciana\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in Rust\nDESCRIPTION: This snippet creates a collection named 'test_collection' in Qdrant using Rust with specified vector parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{CreateCollectionBuilder, VectorParamsBuilder};\\n\\nclient\\n    .create_collection(\\n        CreateCollectionBuilder::new(\"test_collection\")\\n            .vectors_config(VectorParamsBuilder::new(4, Distance::Dot)),\\n    )\\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Restoring Qdrant Collection Snapshot using curl Commands\nDESCRIPTION: Bash curl commands for uploading snapshot files to multiple Qdrant nodes. Demonstrates the HTTP API approach for snapshot restoration with proper headers and multipart form data configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/create-snapshot.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://node-0.my-cluster.com:6333/collections/test_collection_import/snapshots/upload?priority=snapshot' \\\n    -H 'api-key: ${QDRANT_API_KEY}' \\\n    -H 'Content-Type:multipart/form-data' \\\n    -F 'snapshot=@node-0-shapshot.snapshot'\n\ncurl -X POST 'https://node-1.my-cluster.com:6333/collections/test_collection_import/snapshots/upload?priority=snapshot' \\\n    -H 'api-key: ${QDRANT_API_KEY}' \\\n    -H 'Content-Type:multipart/form-data' \\\n    -F 'snapshot=@node-1-shapshot.snapshot'\n\ncurl -X POST 'https://node-2.my-cluster.com:6333/collections/test_collection_import/snapshots/upload?priority=snapshot' \\\n    -H 'api-key: ${QDRANT_API_KEY}' \\\n    -H 'Content-Type:multipart/form-data' \\\n    -F 'snapshot=@node-2-shapshot.snapshot'\n```\n\n----------------------------------------\n\nTITLE: Executing Asynchronous Vector Similarity Query\nDESCRIPTION: Performs an asynchronous vector similarity search in a specified collection using nearest neighbor search with 4 vector dimensions, limiting results to 3 matches and using 'image' as the vector field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/named-vector/java.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n        .setUsing(\"image\")\n        .setLimit(3)\n        .build()).get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Gemma Model in DSPy\nDESCRIPTION: Python code to initialize the Gemma model configuration in DSPy framework with Ollama integration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-vultr-dspy-ollama.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport dspy\n\ngemma_model = dspy.OllamaLocal(\n    model=\"gemma:2b\",\n    base_url=os.environ.get(\"OLLAMA_URL\"),\n    max_tokens=500,\n)\n```\n\n----------------------------------------\n\nTITLE: Example Vector Memory Calculation\nDESCRIPTION: Practical example calculating memory requirements for 1 million vectors with 1024 dimensions\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/capacity-planning.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmemory_size = 1,000,000 * 1024 * 4 bytes * 1.5\n```\n\n----------------------------------------\n\nTITLE: Submitting Top-K Evaluation Results to Relari\nDESCRIPTION: Code for submitting retrieval results to Relari for evaluation using precision/recall and rank-aware metrics. This helps benchmark RAG system performance with different K values.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-relari.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom relari import Metric\n\nfor k in k_values:\n    eval_name = f\"Semantic Retriever Evaluation k={k}\"\n    eval_data = semantic_logs[f\"k_{k}\"]\n\n    eval_info = client.evaluations.submit(\n        project_id=proj[\"id\"],\n        dataset=dataset_info[\"id\"],\n        name=eval_name,\n        pipeline=[Metric.PrecisionRecallF1, Metric.RankedRetrievalMetrics],\n        data=eval_data,\n    )\n    print(f\"{eval_name} submitted!\")\n```\n\n----------------------------------------\n\nTITLE: Installing Mixpeek and Qdrant Client Libraries\nDESCRIPTION: Command to install the required Python packages for working with Mixpeek's API and Qdrant vector database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/mixpeek.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install mixpeek qdrant-client\n```\n\n----------------------------------------\n\nTITLE: Installing AutoGen with Qdrant Support\nDESCRIPTION: Installation command for AutoGen with Qdrant retrieve chat functionality\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/autogen.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"autogen-agentchat[retrievechat-qdrant]\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Filter for Queries (Python)\nDESCRIPTION: This snippet creates a filter to be applied to Qdrant queries, specifically filtering by the `city` field and matching the value `London`.  This ensures that only points with the specified city are considered during the query execution.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-batch/python.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfilter_ = models.Filter(\n    must=[\n        models.FieldCondition(\n            key=\"city\",\n            match=models.MatchValue(\n                value=\"London\",\n            ),\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Batch Inserting Points to Qdrant Collection\nDESCRIPTION: HTTP PUT request to insert multiple points with unique IDs, vector embeddings, and payload data. Supports simultaneous insertion of multiple data points with corresponding metadata and vector representations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/batch-simple/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/points\n{\n    \"batch\": {\n        \"ids\": [1, 2, 3],\n        \"payloads\": [\n            {\"color\": \"red\"},\n            {\"color\": \"green\"},\n            {\"color\": \"blue\"}\n        ],\n        \"vectors\": [\n            [0.9, 0.1, 0.1],\n            [0.1, 0.9, 0.1],\n            [0.1, 0.1, 0.9]\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up TripletLoss for Similarity Learning\nDESCRIPTION: This snippet configures the loss function for the model using TripletLoss, which is suitable for datasets with grouped samples.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/cars-recognition.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n    def configure_loss(self) -> SimilarityLoss:\n        return TripletLoss(mining=self._mining, margin=0.5)\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Data File\nDESCRIPTION: This snippet shows how to create a text file containing sample book data that will be used in the Airflow DAG to generate embeddings and perform searches. The data includes titles, genres, and descriptions of various books.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/qdrant-airflow-astronomer.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n1 | To Kill a Mockingbird (1960) | fiction | Harper Lee's Pulitzer Prize-winning novel explores racial injustice and moral growth through the eyes of young Scout Finch in the Deep South.\n2 | Harry Potter and the Sorcerer's Stone (1997) | fantasy | J.K. Rowling's magical tale follows Harry Potter as he discovers his wizarding heritage and attends Hogwarts School of Witchcraft and Wizardry.\n3 | The Great Gatsby (1925) | fiction | F. Scott Fitzgerald's classic novel delves into the glitz, glamour, and moral decay of the Jazz Age through the eyes of narrator Nick Carraway and his enigmatic neighbour, Jay Gatsby.\n4 | 1984 (1949) | dystopian | George Orwell's dystopian masterpiece paints a chilling picture of a totalitarian society where individuality is suppressed and the truth is manipulated by a powerful regime.\n5 | The Catcher in the Rye (1951) | fiction | J.D. Salinger's iconic novel follows disillusioned teenager Holden Caulfield as he navigates the complexities of adulthood and society's expectations in post-World War II America.\n6 | Pride and Prejudice (1813) | romance | Jane Austen's beloved novel revolves around the lively and independent Elizabeth Bennet as she navigates love, class, and societal expectations in Regency-era England.\n7 | The Hobbit (1937) | fantasy | J.R.R. Tolkien's adventure follows Bilbo Baggins, a hobbit who embarks on a quest with a group of dwarves to reclaim their homeland from the dragon Smaug.\n8 | The Lord of the Rings (1954-1955) | fantasy | J.R.R. Tolkien's epic fantasy trilogy follows the journey of Frodo Baggins to destroy the One Ring and defeat the Dark Lord Sauron in the land of Middle-earth.\n9 | The Alchemist (1988) | fiction | Paulo Coelho's philosophical novel follows Santiago, an Andalusian shepherd boy, on a journey of self-discovery and spiritual awakening as he searches for a hidden treasure.\n10 | The Da Vinci Code (2003) | mystery/thriller | Dan Brown's gripping thriller follows symbologist Robert Langdon as he unravels clues hidden in art and history while trying to solve a murder mystery with far-reaching implications.\n```\n\n----------------------------------------\n\nTITLE: Deleting Payload Properties from Multiple Points with Qdrant Java Client\nDESCRIPTION: This snippet demonstrates how to delete specific payload keys (\"color\" and \"price\") from multiple points in a Qdrant collection. The code uses the deletePayloadAsync method, specifying the collection name, a list of payload keys to remove, the point IDs to target, and a wait flag set to true to ensure the operation completes before continuing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-payload/by-point-id/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.PointIdFactory.id;\n\nclient\n    .deletePayloadAsync(\n        \"{collection_name}\",\n        List.of(\"color\", \"price\"),\n        List.of(id(0), id(3), id(100)),\n        true,\n        null,\n        null)\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic-Router with Qdrant Support\nDESCRIPTION: Command to install Semantic-Router with Qdrant integration via pip\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/semantic-router.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install semantic-router[qdrant]\n```\n\n----------------------------------------\n\nTITLE: Displaying Term Importance Formula with Color Highlighting\nDESCRIPTION: This LaTeX code visualizes the term importance component of the BM25 formula with color highlighting to distinguish the frequency component (red), constants (blue), and other elements of the equation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/bm42.md#2025-04-21_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\text{Term importance in document }(q_i) =  \\color{red}\\frac{f(q_i, D)\\color{gray} \\cdot \\color{blue}(k_1 + 1) \\color{gray} }{\\color{red}f(q_i, D)\\color{gray} + \\color{blue}k_1\\color{gray} \\cdot \\left(1 - \\color{blue}b\\color{gray} + \\color{blue}b\\color{gray} \\cdot \\frac{|D|}{\\text{avgdl}}\\right)}\n```\n\n----------------------------------------\n\nTITLE: Payload Size Calculation Formula\nDESCRIPTION: Formula for calculating total payload storage requirements including 50% overhead for indexing processes\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/capacity-planning.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntotal_payload_size = number_of_points * payload_size * 1.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Front Matter for Qdrant Documentation Delimiter\nDESCRIPTION: This YAML snippet defines the front matter for a Hugo delimiter page. It sets the page title dynamically, specifies the type as 'delimiter', sets the weight to 0 (which can be adjusted to change section order), and excludes the page from the sitemap.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/themes/qdrant/archetypes/delimiter.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n#Delimiter files are used to separate the list of documentation pages into sections.\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ntype: delimiter\nweight: 0 # Change this weight to change order of sections\nsitemapExclude: True\n---\n```\n\n----------------------------------------\n\nTITLE: Listing All Aliases in Qdrant\nDESCRIPTION: This snippet shows how to retrieve a list of all aliases across all collections in the Qdrant database, providing a complete overview of all alias configurations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/collections.md#2025-04-21_snippet_9\n\nLANGUAGE: curl\nCODE:\n```\ncurl 'http://localhost:6333/aliases'\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Payload Fields in Qdrant using Java Client\nDESCRIPTION: This code snippet demonstrates how to delete specific payload fields from documents in a Qdrant collection. It uses a filter to target only documents where the 'color' field matches 'red', and then removes both 'color' and 'price' fields from those documents. The operation is executed asynchronously with the wait parameter set to true.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-payload/by-filter/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nclient\n    .deletePayloadAsync(\n        \"{collection_name}\",\n        List.of(\"color\", \"price\"),\n        Filter.newBuilder().addMust(matchKeyword(\"color\", \"red\")).build(),\n        true,\n        null,\n        null)\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Creating an External Link in Documentation Sidebar using Hugo\nDESCRIPTION: This command creates an external link file in the documentation sidebar. The external_link parameter should be set to the desired URL in the created file.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd qdrant-landing\nhugo new --kind external-link documentation/<link-title>.md\n```\n\n----------------------------------------\n\nTITLE: Listing Collection Snapshots in Qdrant\nDESCRIPTION: REST API call to retrieve a list of all snapshots for a specific collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/snapshots.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://{qdrant-url}:6333/collections/{collection_name}/snapshots'\n    -H 'api-key: ********'\n```\n\n----------------------------------------\n\nTITLE: Checking Available Models\nDESCRIPTION: Lists all supported sparse embedding models in FastEmbed\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-splade.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSparseTextEmbedding.list_supported_models()\n```\n\n----------------------------------------\n\nTITLE: Upserting a Point into Qdrant Collection using Python Client\nDESCRIPTION: This code snippet demonstrates how to upsert a single point into a Qdrant collection. It includes setting the point's ID, payload with a color attribute, and a 3-dimensional vector. The upsert operation is performed using the client's upsert method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/int-one-point-simple/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n    collection_name=\"{collection_name}\",\n    points=[\n        models.PointStruct(\n            id=1,\n            payload={\n                \"color\": \"red\",\n            },\n            vector=[0.9, 0.1, 0.1],\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Scalar Quantization Parameter Calculation for Unsigned Int8\nDESCRIPTION: System of equations for calculating the alpha and offset parameters for scalar quantization using unsigned int8.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/scalar-quantization.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-2 = α × 0 + offset\n5 = α × 255 + offset\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Airflow Project\nDESCRIPTION: This snippet demonstrates how to initialize an Airflow project using the Astronomer CLI, which sets up the necessary project structure for developing Airflow DAGs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/qdrant-airflow-astronomer.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmkdir qdrant-airflow-tutorial && cd qdrant-airflow-tutorial\nastro dev init\n```\n\n----------------------------------------\n\nTITLE: Adding Laptop Data to Qdrant Collection in Python\nDESCRIPTION: This snippet demonstrates how to add five laptop entries to a Qdrant collection. Each entry includes an ID, a four-dimensional vector representing features, and a payload with price and category information.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-filtering.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlaptops = [\n    (1, [0.1, 0.2, 0.3, 0.4], {\"price\": 899.99, \"category\": \"laptop\"}),\n    (2, [0.2, 0.3, 0.4, 0.5], {\"price\": 1299.99, \"category\": \"laptop\"}),\n    (3, [0.3, 0.4, 0.5, 0.6], {\"price\": 799.99, \"category\": \"laptop\"}),\n    (4, [0.4, 0.5, 0.6, 0.7], {\"price\": 1099.99, \"category\": \"laptop\"}),\n    (5, [0.5, 0.6, 0.7, 0.8], {\"price\": 949.99, \"category\": \"laptop\"})\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in TypeScript\nDESCRIPTION: This snippet shows how to create a new collection in a Qdrant database using the Qdrant JavaScript REST client. It initializes the client with specified host and port, and then calls createCollection, specifying the collection name, vector size, distance metric, and optimizer configuration. Ensure the Qdrant server is running and accessible at the specified host and port.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-high-number-of-segments/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n  },\n  optimizers_config: {\n    default_segment_number: 16,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Collection Existence in Qdrant via HTTP GET\nDESCRIPTION: This HTTP request checks if a collection with the specified name exists in a Qdrant database. The request is sent to the Qdrant server running on localhost port 6333, and the collection name is provided as a path parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/check-collection-exists/simple/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:6333/collections/{collection_name}/exists\n```\n\n----------------------------------------\n\nTITLE: Downloading and Unzipping MovieLens Dataset (Shell)\nDESCRIPTION: Shell commands to create a data directory, download the MovieLens dataset, and unzip it into the data folder.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/recommendation-system-ovhcloud.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p data\nwget https://files.grouplens.org/datasets/movielens/ml-1m.zip\nunzip ml-1m.zip -d data\n```\n\n----------------------------------------\n\nTITLE: Executing Scroll Query with Filter in Qdrant using Java\nDESCRIPTION: This code snippet demonstrates how to perform a scroll query on a Qdrant collection using the Java client. It sets up a filter to match documents where the 'country.name' field equals 'Germany'. The query is executed asynchronously and the result is retrieved using the get() method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-fields/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addShould(matchKeyword(\"country.name\", \"Germany\"))\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Installing OpenLIT Using pip in Bash\nDESCRIPTION: This snippet demonstrates how to install OpenLIT via the Python package manager pip. Ensure you have Python and pip installed before running this command. The command expects you to have a terminal or command line access. It installs the OpenLIT package, which is necessary for observing LLM applications.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/observability/openlit.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openlit\n```\n\n----------------------------------------\n\nTITLE: Setting up VectorDBQA Chain with LangChain\nDESCRIPTION: Implementation of the VectorDBQA chain that connects Qdrant with OpenAI's LLM. This chain first retrieves relevant documents from Qdrant and then feeds them into the language model to generate answers.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/langchain-integration.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n![](/articles_data/langchain-integration/code-vectordbqa.png)\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Secret for Qdrant\nDESCRIPTION: This shell command creates a Docker registry secret in the specified Kubernetes namespace, which is required for authenticating access to a private container registry storing the Qdrant images.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/hybrid-cloud-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace the-qdrant-namespace create secret docker-registry my-creds --docker-server='your-registry.example.com' --docker-username='your-username' --docker-password='your-password'\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Point via REST API\nDESCRIPTION: This snippet shows how to retrieve a single point's data through the Qdrant REST API, allowing the fetching of specific information.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/points.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/retrieve-points/single/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Upserting Vector Data with Qdrant Client in C#\nDESCRIPTION: This code initializes a Qdrant client and upserts multiple points with vector data into a specified collection. It demonstrates how to create points with multiple vector fields (image and text) and assign them unique IDs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-multiple-vectors/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpsertAsync(\n\tcollectionName: \"{collection_name}\",\n\tpoints: new List<PointStruct>\n\t{\n\t\tnew()\n\t\t{\n\t\t\tId = 1,\n\t\t\tVectors = new Dictionary<string, float[]>\n\t\t\t{\n\t\t\t\t[\"image\"] = [0.9f, 0.1f, 0.1f, 0.2f],\n\t\t\t\t[\"text\"] = [0.4f, 0.7f, 0.1f, 0.8f, 0.1f, 0.1f, 0.9f, 0.2f]\n\t\t\t}\n\t\t},\n\t\tnew()\n\t\t{\n\t\t\tId = 2,\n\t\t\tVectors = new Dictionary<string, float[]>\n\t\t\t{\n\t\t\t\t[\"image\"] = [0.2f, 0.1f, 0.3f, 0.9f],\n\t\t\t\t[\"text\"] = [0.5f, 0.2f, 0.7f, 0.4f, 0.7f, 0.2f, 0.3f, 0.9f]\n\t\t\t}\n\t\t}\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Collection with Qdrant Python Client\nDESCRIPTION: This code snippet demonstrates how to retrieve an existing collection from a Qdrant vector database using the client object. The method requires specifying the collection name as a parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-info/simple/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.get_collection(collection_name=\"{collection_name}\")\n```\n\n----------------------------------------\n\nTITLE: Testing Embedding Function with Tokio\nDESCRIPTION: This test function verifies that the embedding functionality works correctly by calling the Cohere API with a test phrase and checking if the returned embedding has the expected dimension of 1024. It only runs if the API_KEY environment variable is set.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/serverless.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::test]\nasync fn check_embedding() {\n    // ignore this test if API_KEY isn't set\n    let Ok(api_key) = &std::env::var(\"API_KEY\") else { return; };\n    let embedding = crate::embed(\"What is semantic search?\", api_key).unwrap()[0];\n    // Cohere's `small` model has 1024 output dimensions.\n    assert_eq!(1024, embedding.len());\n}\n```\n\n----------------------------------------\n\nTITLE: IsNull Condition Filtering in Qdrant\nDESCRIPTION: Shows how to use the IsNull condition to match records where a specific field exists and has a NULL value.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/filtering.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"must\": [\n    {\n      \"is_null\": {\n        \"key\": \"reports\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Keywords with matchKeyword in Java\nDESCRIPTION: This snippet demonstrates the use of the matchKeyword function for querying based on specified keyword parameters. It requires the use of the matchKeyword method, which seems to filter or find items based on the keyword 'color' and the value 'red'. The expected input is the keyword and value pair, and the output is likely a set of results matching the criteria. This snippet assumes a Java environment with the relevant search or filtering context in place.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-keyword/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nmatchKeyword(\"color\", \"red\");\n```\n\n----------------------------------------\n\nTITLE: Scrolling Points in Qdrant Collection with Rust Client\nDESCRIPTION: Demonstrates how to scroll through points in a Qdrant collection using the client library. The code uses ScrollPointsBuilder to configure the scroll operation with a limit of 15 points and orders results by timestamp field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-order-by-simple/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{OrderByBuilder, ScrollPointsBuilder};\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\")\n            .limit(15)\n            .order_by(OrderByBuilder::new(\"timestamp\")),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Updating Collection Properties with HTTP API\nDESCRIPTION: This snippet demonstrates how to use the HTTP PATCH method to update properties of a vector collection. The example shows how to enable on-disk storage for a specific vector within a collection. It requires the collection name as a path parameter and the vector configuration in JSON format as the request body. This method modifies the storage settings of specified vectors within collections.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/vectors-to-disk-named/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPATCH /collections/{collection_name}\n{\n    \"vectors\": {\n        \"my_vector\": {\n            \"on_disk\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection for MovieLens Data (Python)\nDESCRIPTION: Python code to connect to Qdrant and create a collection called 'movielens' with sparse vector configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/recommendation-system-ovhcloud.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclient = QdrantClient(\n    url = os.getenv(\"QDRANT_HOST\"),\n    api_key = os.getenv(\"QDRANT_API_KEY\")\n)\n\nclient.create_collection(\n    \"movielens\",\n    vectors_config={},\n    sparse_vectors_config={\n        \"ratings\": models.SparseVectorParams()\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Existing Qdrant Collection\nDESCRIPTION: Connects to an existing Qdrant collection without loading new documents.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langchain.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndoc_store = QdrantVectorStore.from_existing_collection(\n    embeddings=embeddings,\n    collection_name=\"my_documents\",\n    url=\"<qdrant-url>\",\n    api_key=\"<qdrant-api-key>\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Float16 Vectors in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates the creation of a Qdrant collection using the JavaScript client, specifying float16 vectors for optimized storage and performance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n    vectors: {\n        size: 1024,\n        distance: \"Cosine\",\n        datatype: \"float16\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting File Limits for Qdrant System User\nDESCRIPTION: Command to increase file descriptor limits for the current user session when running Qdrant directly on the system.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/common-errors.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nulimit -n 10000\n```\n\n----------------------------------------\n\nTITLE: Updating Qdrant Collection Aliases with cURL\nDESCRIPTION: This code sends a POST request to the Qdrant API to manage collection aliases. It performs two atomic operations: deleting an existing alias called 'production_collection' and creating a new alias with the same name that points to 'example_collection'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/switch/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:6333/collections/aliases \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"actions\": [\n        {\n            \"delete_alias\": {\n                \"alias_name\": \"production_collection\"\n            }\n        },\n        {\n            \"create_alias\": {\n                \"collection_name\": \"example_collection\",\n                \"alias_name\": \"production_collection\"\n            }\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Client with pip\nDESCRIPTION: Installs the qdrant-client Python library using pip, which is required for interacting with the Qdrant vector database server.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/code-search.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npip install qdrant-client\n```\n\n----------------------------------------\n\nTITLE: Creating Function to Generate Image Embeddings with CLIP\nDESCRIPTION: A function that processes images using the CLIP model to generate vector embeddings. It takes an image as input, processes it with the CLIP processor, and extracts image features as numerical vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-ingestion-beginners.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\ndef embed_image_with_clip(image):\n    inputs = clip_processor(images=image, return_tensors=\"pt\")\n    with torch.no_grad():\n        image_features = clip_model.get_image_features(**inputs)\n    return image_features.cpu().numpy()\n```\n\n----------------------------------------\n\nTITLE: Setting Superduper Config Environment Variable\nDESCRIPTION: Bash command to set the SUPERDUPER_CONFIG environment variable pointing to the settings file\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/superduper.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport SUPERDUPER_CONFIG=path/to/settings.yaml\n```\n\n----------------------------------------\n\nTITLE: Ingesting Discord Data into Qdrant\nDESCRIPTION: This command uses the Unstructured CLI to ingest the structured Discord data into Qdrant. It specifies the input path, embedding provider, collection name, API key, and Qdrant URL.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-unstructured.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nunstructured-ingest \\\n  local \\\n  --input-path \"discord-output\" \\\n  --embedding-provider \"langchain-huggingface\" \\\n  qdrant \\\n  --collection-name \"<COLLECTION_NAME>\" \\\n  --api-key \"<QDRANT_API_KEY>\" \\\n  --location \"<QDRANT_URL>\"\n```\n\n----------------------------------------\n\nTITLE: Defining SimilarityPairSample Class for Quaterion\nDESCRIPTION: This snippet shows the structure of the SimilarityPairSample class used to represent pairs of similar objects in Quaterion. It includes fields for two objects, a similarity score, and a subgroup identifier.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/faq-question-answering.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass SimilarityPairSample:\n    obj_a: Any\n    obj_b: Any\n    score: float = 1.0\n    subgroup: int = 0\n```\n\n----------------------------------------\n\nTITLE: Example EventExtractor Output\nDESCRIPTION: Shows the structured output format returned by the EventExtractor, containing extracted event information including names, locations, and dates.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-vultr-dspy-ollama.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n[\n    Prediction(\n        event_name='Event Name: Blockchain Expo Global',\n        location='Dubai, UAE',\n        start_date='2024-05-20',\n        end_date='2024-05-22'\n    ), \n    Prediction(\n        event_name='Event Name: Blockchain for Business Summit',\n        location='Singapore',\n        start_date='2024-05-02',\n        end_date='2024-05-04'\n    ), \n    Prediction(\n        event_name='Event Name: Open Source Summit',\n        location='Helsinki, Finland',\n        start_date='2024-08-11',\n        end_date='2024-08-13'\n    )\n]\n```\n\n----------------------------------------\n\nTITLE: JSON Message Format for Sparse Vectors\nDESCRIPTION: Example JSON message format for inserting a point with sparse vectors into Qdrant. Sparse vectors are represented with separate indices and values arrays to optimize storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/fluvio.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collection_name\": \"{collection_name}\",\n    \"id\": 1,\n    \"vectors\": {\n        \"some-sparse\": {\n            \"indices\": [\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9\n            ],\n            \"values\": [\n                0.1,\n                0.2,\n                0.3,\n                0.4,\n                0.5,\n                0.6,\n                0.7,\n                0.8,\n                0.9,\n                1.0\n            ]\n        }\n    },\n    \"payload\": {\n        \"name\": \"fluvio\",\n        \"description\": \"Solution for distributed stream processing\",\n        \"url\": \"https://www.fluvio.io/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Vector Store with Langchain Go\nDESCRIPTION: Example code showing how to initialize and configure Qdrant as a vector store in Langchain Go. Demonstrates setting up OpenAI LLM, embeddings, and Qdrant connection with custom URL and collection name.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langchain-go.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"log\"\n    \"net/url\"\n\n    \"github.com/tmc/langchaingo/embeddings\"\n    \"github.com/tmc/langchaingo/llms/openai\"\n    \"github.com/tmc/langchaingo/vectorstores/qdrant\"\n)\n\nfunc main() {\n    llm, err: = openai.New()\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    e, err: = embeddings.NewEmbedder(llm)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    url, err: = url.Parse(\"YOUR_QDRANT_REST_URL\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    store, err: = qdrant.New(\n        qdrant.WithURL(*url),\n        qdrant.WithCollectionName(\"YOUR_COLLECTION_NAME\"),\n        qdrant.WithEmbedder(e),\n    )\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant with Docker\nDESCRIPTION: Command to pull the latest Qdrant Docker image from DockerHub for testing or development use.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Setting Qdrant Environment Variables in Shell\nDESCRIPTION: Shell commands to set environment variables for Qdrant URL and API key. These variables are used to configure the connection to the Qdrant instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-vultr-dspy-ollama.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport QDRANT_URL=\"https://qdrant.example.com\"\nexport QDRANT_API_KEY=\"your-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index with Qdrant Python Client\nDESCRIPTION: This snippet demonstrates how to create a payload index in Qdrant using the Python client. It specifies the collection name, field name ('group_id'), and index parameters, including setting `is_tenant` to `True` for tenant-specific indexing. The snippet relies on the `qdrant_client` library and the `models` module for defining index parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/with-group-id-as-tenant/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"group_id\",\n    field_schema=models.KeywordIndexParams(\n        type=\"keyword\",\n        is_tenant=True,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Qdrant Client and List Snapshots in Rust\nDESCRIPTION: Creates a Qdrant client instance using a local connection URL and retrieves a list of full snapshots from the database. The code demonstrates basic client setup and snapshot management functionality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/list-full-snapshots/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.list_full_snapshots().await?;\n```\n\n----------------------------------------\n\nTITLE: Importing Qdrant Components\nDESCRIPTION: Import statements for retriever and indexer references from the Qdrant Genkit plugin\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/genkit.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { qdrantIndexerRef, qdrantRetrieverRef } from 'genkitx-qdrant';\nimport { Document, index, retrieve } from '@genkit-ai/ai/retriever';\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Collection in C#\nDESCRIPTION: This code snippet demonstrates how to initialize a new Qdrant collection using the Qdrant.Client library in C#. The client connects to a local Qdrant server, and a collection is created with specified vector and HNSW configuration parameters. Required dependencies include the Qdrant.Client and Qdrant.Client.Grpc libraries. Key parameters include collectionName for naming the collection, vectorsConfig for vector properties, and hnswConfig for the HNSW algorithm settings. The snippet expects to connect to a Qdrant server running on localhost at port 6334.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-vectors-and-hnsw-on-disk/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine, OnDisk = true },\n\thnswConfig: new HnswConfigDiff { OnDisk = true }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Qdrant Landing Page\nDESCRIPTION: This YAML configuration sets up the metadata and build parameters for the Qdrant landing page. It specifies the title, description, and build settings for the page and its child pages.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/advanced-search/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Advanced Search Solutions: High-Performance Vector Search\"\ndescription: Explore how Qdrant's advanced search solutions enhance accuracy and user interaction depth across various industries, from e-commerce to healthcare.\nbuild:\n  render: always\ncascade:\n- build:\n    list: local\n    publishResources: false\n    render: never\n```\n\n----------------------------------------\n\nTITLE: Implementing the Airflow DAG for Book Recommendation\nDESCRIPTION: This code snippet implements an Airflow DAG that ingests book data, generates vector embeddings for book descriptions using HuggingFace, and performs a semantic search in Qdrant based on user preferences. It demonstrates how to define tasks and manage dependencies within the DAG for seamless execution.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/qdrant-airflow-astronomer.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport requests\n\nfrom airflow.decorators import dag, task\nfrom airflow.models.baseoperator import chain\nfrom airflow.models.param import Param\nfrom airflow.providers.qdrant.hooks.qdrant import QdrantHook\nfrom airflow.providers.qdrant.operators.qdrant import QdrantIngestOperator\nfrom pendulum import datetime\nfrom qdrant_client import models\n\n\nQDRANT_CONNECTION_ID = \"qdrant_default\"\nDATA_FILE_PATH = \"include/books.txt\"\nCOLLECTION_NAME = \"airflow_tutorial_collection\"\n\nEMBEDDING_MODEL_ID = \"sentence-transformers/all-MiniLM-L6-v2\"\nEMBEDDING_DIMENSION = 384\nSIMILARITY_METRIC = models.Distance.COSINE\n\n\ndef embed(text: str) -> list:\n    HUGGINFACE_URL = f\"https://api-inference.huggingface.co/pipeline/feature-extraction/{EMBEDDING_MODEL_ID}\"\n    response = requests.post(\n        HUGGINFACE_URL,\n        headers={\"Authorization\": f\"Bearer {os.getenv('HUGGINGFACE_TOKEN')}\"},\n        json={\"inputs\": [text], \"options\": {\"wait_for_model\": True}},\n    )\n    return response.json()[0]\n\n\n@dag(\n    dag_id=\"books_recommend\",\n    start_date=datetime(2023, 10, 18),\n    schedule=None,\n    catchup=False,\n    params={\"preference\": Param(\"Something suspenseful and thrilling.\", type=\"string\")},\n)\ndef recommend_book():\n    @task\n    def import_books(text_file_path: str) -> list:\n        data = []\n        with open(text_file_path, \"r\") as f:\n            for line in f:\n                _, title, genre, description = line.split(\"|\")\n                data.append(\n                    {\n                        \"title\": title.strip(),\n                        \"genre\": genre.strip(),\n                        \"description\": description.strip(),\n                    }\n                )\n\n        return data\n\n    @task\n    def init_collection():\n        hook = QdrantHook(conn_id=QDRANT_CONNECTION_ID)\n        if not  hook.conn.collection_exists(COLLECTION_NAME):\n            hook.conn.create_collection(\n                COLLECTION_NAME,\n                vectors_config=models.VectorParams(\n                    size=EMBEDDING_DIMENSION, distance=SIMILARITY_METRIC\n                ),\n            )\n\n    @task\n    def embed_description(data: dict) -> list:\n        return embed(data[\"description\"])\n\n    books = import_books(text_file_path=DATA_FILE_PATH)\n    embeddings = embed_description.expand(data=books)\n\n    qdrant_vector_ingest = QdrantIngestOperator(\n        conn_id=QDRANT_CONNECTION_ID,\n        task_id=\"qdrant_vector_ingest\",\n        collection_name=COLLECTION_NAME,\n        payload=books,\n        vectors=embeddings,\n    )\n\n    @task\n    def embed_preference(**context) -> list:\n        user_mood = context[\"params\"][\"preference\"]\n        response = embed(text=user_mood)\n\n        return response\n\n    @task\n    def search_qdrant(\n        preference_embedding: list,\n    ) -> None:\n        hook = QdrantHook(conn_id=QDRANT_CONNECTION_ID)\n\n        result = hook.conn.query_points(\n            collection_name=COLLECTION_NAME,\n            query=preference_embedding,\n            limit=1,\n            with_payload=True,\n        ).points\n\n        print(\"Book recommendation: \" + result[0].payload[\"title\"])\n        print(\"Description: \" + result[0].payload[\"description\"])\n\n    chain(\n        init_collection(),\n        qdrant_vector_ingest,\n        search_qdrant(embed_preference()),\n    )\n\n\nrecommend_book()\n```\n\n----------------------------------------\n\nTITLE: Embedding Documents with Gemini\nDESCRIPTION: Code that demonstrates how to use Google's Gemini model to create embeddings for documents with the retrieval_document task type. It configures the client with API keys and processes a list of text examples.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/gemini.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport google.generativeai as gemini_client\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.models import Distance, PointStruct, VectorParams\n\ncollection_name = \"example_collection\"\n\nGEMINI_API_KEY = \"YOUR GEMINI API KEY\"  # add your key here\n\nclient = QdrantClient(url=\"http://localhost:6333\")\ngemini_client.configure(api_key=GEMINI_API_KEY)\ntexts = [\n    \"Qdrant is a vector database that is compatible with Gemini.\",\n    \"Gemini is a new family of Google PaLM models, released in December 2023.\",\n]\n\nresults = [\n    gemini_client.embed_content(\n        model=\"models/embedding-001\",\n        content=sentence,\n        task_type=\"retrieval_document\",\n        title=\"Qdrant x Gemini\",\n    )\n    for sentence in texts\n]\n```\n\n----------------------------------------\n\nTITLE: Searching with Ignored Quantization in Qdrant\nDESCRIPTION: This snippet demonstrates how to perform a search while ignoring quantized vectors. This is useful for comparing search results with and without quantization to assess its impact on search quality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/quantization.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vector\": [0.2, 0.1, 0.9, 0.7],\n  \"top\": 10,\n  \"with_vectors\": true,\n  \"quantization\": {\n    \"ignore\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling Filtered Points in Qdrant Collection using Rust\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client to scroll through points in a collection with a filter condition. It filters for cities with a population greater than or equal to 9.0 using a range condition.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-array/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, Range, ScrollPointsBuilder};\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::should([\n            Condition::range(\n                \"country.cities[].population\",\n                Range {\n                    gte: Some(9.0),\n                    ..Default::default()\n                },\n            ),\n        ])),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating New Customer Logo Content File\nDESCRIPTION: Command to generate a new markdown file for adding a customer logo to the homepage marquee. Uses Hugo's content creation with a predefined template.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd qdrant-landing\nhugo new --kind customer-logo stack/customer-name.md\n```\n\n----------------------------------------\n\nTITLE: Setting Qdrant as Vector Store in DocsGPT\nDESCRIPTION: This snippet shows how to configure DocsGPT to use Qdrant as the vector store by adding an entry to the .env file. The command appends the required environment variable to specify Qdrant as the vector store.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/platforms/docsgpt.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"VECTOR_STORE=qdrant\" >> .env\n```\n\n----------------------------------------\n\nTITLE: Embedding Videos - Python\nDESCRIPTION: This snippet shows how to create an embedding task for a video using the Twelve Labs client in Python. It waits for the task to complete and retrieves the result.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntask = twelvelabs_client.embed.task.create(\n    model_name=\"Marengo-retrieval-2.7\",\n    video_url=\"https://sample-videos.com/video321/mp4/720/big_buck_bunny_720p_2mb.mp4\"\n)\n\ntask.wait_for_done(sleep_interval=3)\n\ntask_result = twelvelabs_client.embed.task.retrieve(task.id)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Secrets for Fly.io Application\nDESCRIPTION: Command to set required environment variables as secrets for the Fly.io application, including Qdrant and OpenAI credentials and a JWT bearer token for authentication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/chatgpt-plugin.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflyctl secrets set DATASTORE=qdrant \\\n    OPENAI_API_KEY=<your-openai-api-key> \\\n    QDRANT_URL=https://<your-qdrant-instance>.aws.cloud.qdrant.io \\\n    QDRANT_API_KEY=<your-qdrant-api-key> \\\n    BEARER_TOKEN=eyJhbGciOiJIUzI1NiJ9.e30.ZRrHA1JJJW8opsbCGfG_HACGpVUMN_a9IV7pAx_Zmeo\n```\n\n----------------------------------------\n\nTITLE: Configuring Geospatial Radius Search in Qdrant\nDESCRIPTION: Defines a geographic search configuration with longitude and latitude coordinates and a search radius in meters. Used for spatial filtering and proximity-based queries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-radius/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    key: 'location',\n    geo_radius: {\n        center: {\n            lon: 13.403683,\n            lat: 52.520711\n        },\n        radius: 1000.0\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Qdrant Records by Metadata\nDESCRIPTION: SQL query demonstrating how to filter Qdrant records using metadata fields. This example retrieves records where the 'source' field in the metadata equals 'bbc'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/mindsdb.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM qdrant_test.test_table\nWHERE `metadata.source` = 'bbc';\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client Connection\nDESCRIPTION: Establishes connection to a Qdrant cluster using cluster URL and API key. Compatible with free-tier Qdrant clusters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/pdf-retrieval-at-scale.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = QdrantClient(\n    url=<YOUR CLUSTER URL>,\n    api_key=<YOUR API KEY>\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Prefetch in TypeScript\nDESCRIPTION: This snippet demonstrates querying a Qdrant collection with prefetch options. It prefetches data based on color (red and green) using dense vectors and a filter, limiting results to 10 per color. The main query orders the results by 'price'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-with-payload/typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclient.query(\"{collection_name}\", {\n    prefetch: [\n        {\n            query: [0.01, 0.45, 0.67], // <-- dense vector\n            filter: {\n                must: {\n                    key: 'color',\n                    match: {\n                        value: 'red',\n                    },\n                }\n            },\n            limit: 10,\n        },\n        {\n            query: [0.01, 0.45, 0.67], // <-- dense vector\n            filter: {\n                must: {\n                    key: 'color',\n                    match: {\n                        value: 'green',\n                    },\n                }\n            },\n            limit: 10,\n        },\n    ],\n    query: {\n        order_by: 'price',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: File Limit Error Message in Qdrant\nDESCRIPTION: Example error message when Qdrant encounters too many open files, indicating system resource limits have been reached.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/common-errors.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nError: Too many files open (OS error 24)\n```\n\n----------------------------------------\n\nTITLE: Counting Documents with Filtering in Qdrant using TypeScript\nDESCRIPTION: This code demonstrates how to count documents in a specified Qdrant collection that match a given filter condition. The query counts documents where the 'color' field equals 'red' and uses the 'exact' parameter to ensure precise counting.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/count-points/with-filter-exact/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.count(\"{collection_name}\", {\n  filter: {\n    must: [\n      {\n        key: \"color\",\n        match: {\n          value: \"red\",\n        },\n      },\n    ],\n  },\n  exact: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Resuming Qdrant Collection Optimizations\nDESCRIPTION: This snippet describes triggering an update process for a Qdrant collection, named \"{collection_name}\", in order to resume paused optimizations. This is done by sending a PATCH request with an empty \"optimizers_config\" object.  This will initiate the update operation, allowing the ongoing optimizations to begin again.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/trigger-indexing/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis code snippet triggers the update process for a specific collection named \"{collection_name}\" to resume paused optimizations indicated by the grey status or \"optimizations pending, awaiting update operation\" message. By sending a PATCH request with an empty \"optimizers_config\" object, the update operation is initiated, allowing the ongoing optimizations to start again.\n```\n\n----------------------------------------\n\nTITLE: Performing Scroll Query with Nested Conditions using Qdrant Client in Python\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client to perform a scroll query with nested filtering conditions. It filters records based on nested 'diet' information, specifically looking for entries where 'food' is 'meat' and 'likes' is True.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-nested-clause/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must=[\n            models.NestedCondition(\n                nested=models.Nested(\n                    key=\"diet\",\n                    filter=models.Filter(\n                        must=[\n                            models.FieldCondition(\n                                key=\"food\", match=models.MatchValue(value=\"meat\")\n                            ),\n                            models.FieldCondition(\n                                key=\"likes\", match=models.MatchValue(value=True)\n                            ),\n                        ]\n                    ),\n                )\n            )\n        ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Requirements in Python\nDESCRIPTION: This snippet specifies the Python package dependencies needed for the application, including fastembed for embedding, pymongo for database access, and qdrant_client for interacting with Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/data-streaming-kafka-qdrant.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nfastembed==0.3.1\npymongo==4.8.0\nqdrant_client==1.10.1\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Authentication in Qdrant (YAML)\nDESCRIPTION: This YAML configuration snippet shows how to set up API key authentication for a Qdrant instance. It includes enabling TLS to protect the API key from exposure.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-a-vector-database.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  api_key: your_secret_api_key_here\n  enable_tls: true  # Make sure to enable TLS to protect the API key from being exposed\n```\n\n----------------------------------------\n\nTITLE: Processing Vectors with Pipelines\nDESCRIPTION: Transforming data using the defined pipelines and adding vectors to DataFrame\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/storing-multiple-vectors-per-object-in-qdrant.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsample_df = dataset_df.sample(n=2000, random_state=643)\nimage_vectors = image_pipeline.transform(sample_df)\ntext_vectors = text_pipeline.transform(sample_df)\nsample_df[\"image_vector\"] = image_vectors.tolist()\nsample_df[\"text_vector\"] = text_vectors.tolist()\n```\n\n----------------------------------------\n\nTITLE: Deleting Payload Keys from Points in Qdrant Collection via HTTP API\nDESCRIPTION: HTTP POST request to remove specific payload keys ('color' and 'price') from multiple points identified by their IDs (0, 3, 100) in a Qdrant collection. The endpoint requires the collection name as a path parameter and a JSON body specifying which keys to delete and from which points.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-payload/by-point-id/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/payload/delete\n{\n    \"keys\": [\"color\", \"price\"],\n    \"points\": [0, 3, 100]\n}\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Vectors and Payload using Qdrant Java Client\nDESCRIPTION: This code creates a Qdrant client and upserts three points into a specified collection. Each point contains an ID, vector data, and a payload with attributes like city and price. The client is configured to connect to a local Qdrant instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-payload/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\nimport java.util.Map;\n\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.ValueFactory.value;\nimport static io.qdrant.client.VectorsFactory.vectors;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PointStruct;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .upsertAsync(\n        \"{collection_name}\",\n        List.of(\n            PointStruct.newBuilder()\n                .setId(id(1))\n                .setVectors(vectors(0.05f, 0.61f, 0.76f, 0.74f))\n                .putAllPayload(Map.of(\"city\", value(\"Berlin\"), \"price\", value(1.99)))\n                .build(),\n            PointStruct.newBuilder()\n                .setId(id(2))\n                .setVectors(vectors(0.19f, 0.81f, 0.75f, 0.11f))\n                .putAllPayload(\n                    Map.of(\"city\", list(List.of(value(\"Berlin\"), value(\"London\")))))\n                .build(),\n            PointStruct.newBuilder()\n                .setId(id(3))\n                .setVectors(vectors(0.36f, 0.55f, 0.47f, 0.94f))\n                .putAllPayload(\n                    Map.of(\n                        \"city\",\n                        list(List.of(value(\"Berlin\"), value(\"London\"))),\n                        \"price\",\n                        list(List.of(value(1.99), value(2.99)))))\n                .build()))\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Using Full-text Filters in Qdrant Queries\nDESCRIPTION: Illustration of how to use full-text filters in Qdrant queries, showing the syntax for searching specific terms in payload fields.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/full-text-filter-and-index-are-already-available.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![](/blog/from_cms/1_pbtd2tzqtjqqlbi61r8czg.webp \"There are also some additional parameters you can provide, such as  min_token_len — minimal length of the token max_token_len — maximal length of the token lowercase — if set to true, then the index will be case-insensitive, as Qdrant will convert all the texts to lowercase Using text filters in practice\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Streamlit Page Configuration in Python\nDESCRIPTION: This snippet configures the Streamlit page title, icon, and layout for the meeting assistant interface. It is essential for establishing the user interface's initial presentation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nst.set_page_config(\n    page_title=\"Meeting Assistant\",\n    page_icon=\"🤖\",\n    layout=\"wide\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Scroll Query in Go\nDESCRIPTION: This snippet demonstrates how to initialize a Qdrant client and perform a scroll query with nested filters. It uses the Qdrant Go client library to connect to a local Qdrant instance and execute a query with multiple conditions, including a nested filter and ID matching.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-nested-clause-and-has-id/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewNestedFilter(\"diet\", &qdrant.Filter{\n\t\t\t\tMust: []*qdrant.Condition{\n\t\t\t\t\tqdrant.NewMatch(\"food\", \"meat\"),\n\t\t\t\t\tqdrant.NewMatchBool(\"likes\", true),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tqdrant.NewHasID(qdrant.NewIDNum(1)),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Range Based Filtering for Float Numbers in JSON\nDESCRIPTION: This snippet demonstrates how to use a range-based filter for accurate querying of float numbers. Instead of exact matches, it retrieves all values within a given range, accommodating minor variations in float representations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-filtering.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n \"key\": \"price\",\n \"range\": {\n   \"gt\": null,\n   \"gte\": 11.99,\n   \"lt\": null,\n   \"lte\": 11.99\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IDF in Qdrant Collection - TypeScript\nDESCRIPTION: TypeScript code using the Qdrant JS client to create a collection with IDF modifier for sparse vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n    sparse_vectors: {\n        \"text\": {\n            modifier: \"idf\"\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Points via REST API\nDESCRIPTION: This code snippet shows how to delete points in Qdrant using its REST API. It also links to the specific schema for point deletion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/points.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/delete-points/simple/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client Connection in Java\nDESCRIPTION: Creates a new Qdrant client connection to a local Qdrant server on port 6334 without TLS encryption and executes a basic collection listing operation. The code demonstrates client initialization and a simple async query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/list-all-collections/simple/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.listCollectionsAsync().get();\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index in Qdrant with TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a payload index in a Qdrant collection using the Qdrant JavaScript client. It requires the `@qdrant/js-client-rest` package to be installed. The snippet initializes a Qdrant client and then calls the `createPayloadIndex` method, specifying the collection name and the configuration for the index, including the field name, type, tokenizer, token length constraints, and lowercase conversion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/simple-full-text/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"name_of_the_field_to_index\",\n  field_schema: {\n    type: \"text\",\n    tokenizer: \"word\",\n    min_token_len: 2,\n    max_token_len: 15,\n    lowercase: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in C#\nDESCRIPTION: This code initializes a Qdrant client connection to localhost on port 6334. It then creates a new collection with a specified name, vector configuration (size 1536 and cosine distance), and binary quantization settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-binary-quantization/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n collectionName: \"{collection_name}\",\n vectorsConfig: new VectorParams { Size = 1536, Distance = Distance.Cosine },\n quantizationConfig: new QuantizationConfig\n {\n  Binary = new BinaryQuantization { AlwaysRam = true }\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant in Docker\nDESCRIPTION: Pulls and runs the Qdrant Docker image to manage vector data. Qdrant will be accessible on localhost, port 6333. Requires Docker to be installed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\ndocker pull qdrant/qdrant\ndocker run -p 6333:6333 \\\n    -v $(pwd)/qdrant_storage:/qdrant/storage \\\n    qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Synchronous Batch Update Response in Qdrant API\nDESCRIPTION: This snippet shows the response format for a batch update operation when the 'wait' parameter is set to true, indicating that the operation has been completed before the response is sent.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/points.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": {\n    \"operation_id\": 0,\n    \"status\": \"completed\"\n  },\n  \"status\": \"ok\",\n  \"time\": 0.000206061\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration\nDESCRIPTION: Demonstrates establishing a connection to Qdrant server and creating a new collection with specified vector dimensions, distance metric, and optimizer configurations. The collection is configured with 768-dimensional vectors using cosine similarity and custom segment optimization parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-large-segments/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(768)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setOptimizersConfig(\n                OptimizersConfigDiff.newBuilder()\n                    .setDefaultSegmentNumber(2)\n                    .setMaxSegmentSize(5000000)\n                    .build()\n            )\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Querying Grouped Points with Lookup in Qdrant using Rust\nDESCRIPTION: Performs a group query operation on a Qdrant collection with specific payload lookups. The query includes vector similarity search, result limiting, and selective payload retrieval for 'title' and 'text' fields while excluding vector data from the results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-groups/with-lookup/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{with_payload_selector::SelectorOptions, QueryPointGroupsBuilder, WithLookupBuilder};\n\nclient\n    .query_groups(\n        QueryPointGroupsBuilder::new(\"{collection_name}\", \"document_id\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(2u64)\n            .limit(2u64)\n            .with_lookup(\n                WithLookupBuilder::new(\"documents\")\n                    .with_payload(SelectorOptions::Include(\n                        vec![\"title\".to_string(), \"text\".to_string()].into(),\n                    ))\n                    .with_vectors(false),\n            ),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index with Tenant Support using Qdrant Client in C#\nDESCRIPTION: This code snippet demonstrates how to create a payload index with tenant support using the Qdrant C# client. It initializes a QdrantClient and then uses it to create a payload index named \"group_id\" with the `PayloadSchemaType.Keyword` schema. The `IsTenant` parameter is set to true in the `KeywordIndexParams`, enabling tenant isolation for the index.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/with-group-id-as-tenant/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreatePayloadIndexAsync(\n\tcollectionName: \"{collection_name}\",\n\tfieldName: \"group_id\",\n\tschemaType: PayloadSchemaType.Keyword,\n\tindexParams: new PayloadIndexParams\n\t{\n\t\tKeywordIndexParams = new KeywordIndexParams\n\t\t{\n\t\t\tIsTenant = true\n\t\t}\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshots on Multiple Qdrant Nodes using HTTP API\nDESCRIPTION: This HTTP request demonstrates how to create snapshots on each node of the Qdrant cluster using the REST API. It needs to be repeated for each node URL.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/create-snapshot.md#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\n// for `https://node-0.my-cluster.com:6333`\nPOST /collections/test_collection/snapshots\n\n// for `https://node-1.my-cluster.com:6333`\nPOST /collections/test_collection/snapshots\n\n// for `https://node-2.my-cluster.com:6333`\nPOST /collections/test_collection/snapshots\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshot with QdrantClient in Python\nDESCRIPTION: This snippet initializes a QdrantClient and uses it to create a snapshot of a specified collection by providing the collection name as a parameter. The client connects to a locally running instance of Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/create-collection-snapshot/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_snapshot(collection_name=\"{collection_name}\")\n```\n\n----------------------------------------\n\nTITLE: Float32 to Int8 Conversion Equations for Scalar Quantization\nDESCRIPTION: Mathematical equations representing the conversion between float32 and int8 values in the scalar quantization process.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/scalar-quantization.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nf32 = α × i8 + offset\n\ni8 = (f32 - offset) / α\n```\n\n----------------------------------------\n\nTITLE: Implementing TrainableModel for FAQ Similarity Learning in Python\nDESCRIPTION: This snippet shows the basic structure of a TrainableModel subclass for FAQ similarity learning. It includes configurations for the optimizer, loss function, and model head, with a placeholder for encoder configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/faq-question-answering.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union, Dict, Optional\n\nfrom torch.optim import Adam\n\nfrom quaterion import TrainableModel\nfrom quaterion.loss import MultipleNegativesRankingLoss, SimilarityLoss\nfrom quaterion_models.encoders import Encoder\nfrom quaterion_models.heads import EncoderHead\nfrom quaterion_models.heads.skip_connection_head import SkipConnectionHead\n\n\nclass FAQModel(TrainableModel):\n    def __init__(self, lr=10e-5, *args, **kwargs):\n        self.lr = lr\n        super().__init__(*args, **kwargs)\n        \n    def configure_optimizers(self):\n        return Adam(self.model.parameters(), lr=self.lr)\n    \n    def configure_loss(self) -> SimilarityLoss:\n        return MultipleNegativesRankingLoss(symmetric=True)\n    \n    def configure_encoders(self) -> Union[Encoder, Dict[str, Encoder]]:\n        ... # ToDo\n        \n    def configure_head(self, input_embedding_size: int) -> EncoderHead:\n        return SkipConnectionHead(input_embedding_size)\n```\n\n----------------------------------------\n\nTITLE: Adding Vectors in C#\nDESCRIPTION: This snippet demonstrates how to upsert multiple vectors into a Qdrant collection, including associated payloads using C#.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client.Grpc;\\n\\nvar operationInfo = await client.UpsertAsync(collectionName: \"test_collection\", points: new List<PointStruct>\\n{\\n    new()\\n    {\\n        Id = 1,\\n            Vectors = new float[]\\n            {\\n                0.05f, 0.61f, 0.76f, 0.74f\\n            },\\n            Payload = {\\n                [\"city\"] = \"Berlin\"\\n            }\\n    },\\n    new()\\n    {\\n        Id = 2,\\n            Vectors = new float[]\\n            {\\n                0.19f, 0.81f, 0.75f, 0.11f\\n            },\\n            Payload = {\\n                [\"city\"] = \"London\"\\n            }\\n    },\\n    new()\\n    {\\n        Id = 3,\\n            Vectors = new float[]\\n            {\\n                0.36f, 0.55f, 0.47f, 0.94f\\n            },\\n            Payload = {\\n                [\"city\"] = \"Moscow\"\\n            }\\n    },\\n    // Truncated\\n});\\n\\nConsole.WriteLine(operationInfo);\n```\n\n----------------------------------------\n\nTITLE: Installing FastEmbed Package\nDESCRIPTION: Installs the FastEmbed package required for working with late interaction models.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-colbert.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install fastembed\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Case Studies in YAML\nDESCRIPTION: YAML configuration that defines an array of customer case studies with company information, visuals, and story links. Each case study includes a logo, main image, title, and link to the full story.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/case-studies-2.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncases:\n- id: 0\n  logo:\n    src: /img/customers-case-studies/visua.svg\n    alt:  Visua Logo\n  image:\n    src: /img/customers-case-studies/case-visua.png\n    alt: The hands of a person in a medical gown holding a tablet against the background of a pharmacy shop\n  title: VISUA improves quality control process for computer vision with anomaly detection by 10x.\n  link:\n    text: Read Story\n    url: /blog/case-study-visua/\n- id: 1\n  logo:\n    src: /img/customers-case-studies/dust.svg\n    alt: Dust Logo\n  image:\n    src: /img/customers-case-studies/case-dust.png\n    alt: A man in a jeans shirt is holding a smartphone, only his hands are visible. In the foreground, there is an image of a robot surrounded by chat and sound waves.\n  title: Dust uses Qdrant for RAG, achieving millisecond retrieval, reducing costs by 50%, and boosting scalability.\n  link:\n    text: Read Story\n    url: /blog/dust-and-qdrant/\n- id: 2\n  logo:\n    src: /img/customers-case-studies/iris-agent.svg\n    alt: Logo\n  image:\n    src: /img/customers-case-studies/case-iris-agent.png\n    alt: Hands holding a smartphone, styled smartphone interface visualisation in the foreground. First-person view\n  title: IrisAgent uses Qdrant for RAG to automate support, and improve resolution times, transforming customer service.\n  link:\n    text: Read Story\n    url: /blog/iris-agent-qdrant/\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Creating Keyword Payload Index for Group ID in Qdrant\nDESCRIPTION: Creates a keyword payload index for the group_id field to enable efficient filtering and group-based searches in the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/multitenancy.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient.create_payload_index(\n    collection_name=\"{tenant_data}\",\n    field_name=\"group_id\",\n    field_schema=models.PayloadSchemaType.KEYWORD,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant in Rust\nDESCRIPTION: This snippet demonstrates how to initialize a `Qdrant` client in Rust, connecting to a Qdrant Cloud instance. It requires the `qdrant_client` crate. The snippet initializes the client with the host address and API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart-cloud.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"https://xyz-example.eu-central.aws.cloud.qdrant.io:6334\")\n    .api_key(\"<your-api-key>\")\n    .build()?;\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index Asynchronously in Qdrant\nDESCRIPTION: This snippet creates a payload index asynchronously in Qdrant using the Java client. It requires the `io.qdrant.client.grpc.Collections.PayloadSchemaType` import. The parameters include the collection name, the field to index, the payload schema type (Keyword in this case), and other optional settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/simple-keyword/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\n\nclient.createPayloadIndexAsync(\n    \"{collection_name}\",\n    \"name_of_the_field_to_index\",\n    PayloadSchemaType.Keyword,\n    null,\n    true,\n    null,\n    null);\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Listing Snapshots in Java\nDESCRIPTION: Creates a Qdrant client connection to localhost on port 6334 without SSL and performs an asynchronous snapshot listing operation for a specified collection. Uses the Qdrant gRPC client builder for connection setup.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/list-collection-snapshots/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.listSnapshotAsync(\"{collection_name}\").get();\n```\n\n----------------------------------------\n\nTITLE: Installing Rig-rs with Qdrant Dependencies\nDESCRIPTION: Command to install the required Rust crates for using Rig with Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/rig-rs.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncargo add rig-core rig-qdrant qdrant-client\n```\n\n----------------------------------------\n\nTITLE: Upserting Points in Qdrant using Rust\nDESCRIPTION: This code demonstrates how to connect to a Qdrant instance and upsert a point with a vector and payload into a specified collection. It uses the Qdrant Rust client library to perform these operations asynchronously.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/int-one-point-simple/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{PointStruct, UpsertPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .upsert_points(\n        UpsertPointsBuilder::new(\n            \"{collection_name}\",\n            vec![PointStruct::new(\n                1,\n                vec![0.9, 0.1, 0.1],\n                [(\"color\", \"Red\".into())],\n            )],\n        )\n        .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Configuring OCI CSI VolumeSnapshotClass for Kubernetes\nDESCRIPTION: YAML configuration for creating a VolumeSnapshotClass in Oracle Cloud Infrastructure Container Engine for Kubernetes (OKE). This setup enables volume snapshots for backups and restores in Qdrant deployments on OCI.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/platform-deployment-options.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: snapshot.storage.k8s.io/v1\nkind: VolumeSnapshotClass\nmetadata:\n  name: csi-snapclass\ndeletionPolicy: Delete\ndriver: blockvolume.csi.oraclecloud.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Flipkart Landing Page Metadata\nDESCRIPTION: YAML front matter defining landing page settings including draft status, logo image, name, and sitemap exclusion\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/stack/flipkart.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndraft: false\nimage: \"content/images/logos/flipkart-logo-mono\"\nname: \"Flipkart\"\nsitemapExclude: True\n```\n\n----------------------------------------\n\nTITLE: Generating Sparse Embeddings from Movie Descriptions using SPLADE++\nDESCRIPTION: Code to create sparse embeddings from the movie descriptions dataset using the previously loaded SPLADE++ model.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsparse_descriptions = list(sparse_model.embed(descriptions))\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshot with Qdrant in Rust\nDESCRIPTION: This code snippet demonstrates how to create a snapshot of a specific collection using the Qdrant client library in Rust. It requires the Qdrant library for Rust, and it initializes a client connection to a local Qdrant instance at a specified URL. A snapshot for the specified collection name is created asynchronously. Dependencies include the 'qdrant_client' crate, and the main parameter is the collection name to be snapshotted. The code expects a valid collection name and outputs an operation to create a snapshot.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/create-collection-snapshot/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.create_snapshot(\"{collection_name}\").await?;\n```\n\n----------------------------------------\n\nTITLE: Updating Marquee Configuration in SCSS\nDESCRIPTION: SCSS code snippet for configuring the customer logo marquee on the homepage. The parameters control the appearance and animation of the sliding logo display.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@include marquee.base(80px, 200px, 13, 6, 20px, false, 50s);\n```\n\n----------------------------------------\n\nTITLE: Defining Function to Log Retriever Results\nDESCRIPTION: Creates a function to run different RAG pipelines over the dataset and log the results for evaluation in Relari format.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-relari.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef log_retriever_results(retriever, dataset):\n  log = list()\n  for datum in dataset.data:\n      # First compute the result\n      retrieved_docs = retriever.invoke(datum[\"question\"])\n      # Now log the result in Relari format\n      result = DatasetDatum(\n          label=datum[\"uid\"],\n          data={\"retrieved_context\": [doc.page_content for doc in retrieved_docs]},\n      )\n      log.append(result)\n  return log\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshot with Qdrant Java Client\nDESCRIPTION: Establishes a connection to a local Qdrant instance and creates a snapshot of a specified collection. Uses gRPC client on port 6334 without SSL encryption.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/create-collection-snapshot/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nQdrantClient client =\n      new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.createSnapshotAsync(\"{collection_name}\").get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Distribution-Based Score Fusion with TypeScript in Qdrant\nDESCRIPTION: TypeScript client example for using DBSF to combine query results from sparse and dense vectors. The code demonstrates how to structure the query with prefetch operations and specify the fusion method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.11.x.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    prefetch: [\n        {\n            query: {\n                values: [0.22, 0.8],\n                indices: [1, 42],\n            },\n            using: 'sparse',\n            limit: 20,\n        },\n        {\n            query: [0.01, 0.45, 0.67],\n            using: 'dense',\n            limit: 20,\n        },\n    ],\n    query: {\n        fusion: 'dbsf',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Points in Collection - HTTP\nDESCRIPTION: This snippet demonstrates an HTTP POST request to query points in a specified Qdrant collection. It includes parameters to prefetch and limit the returned results. Required parameters include 'collection_name', 'query', and 'limit'. The expected input is a JSON object formatted according to the specified structure, while the output is the queried points from the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": {\n        \"query\": [1, 23, 45, 67], // <------------- small byte vector\n        \"using\": \"mrl_byte\"\n        \"limit\": 1000\n    },\n    \"query\": [0.01, 0.299, 0.45, 0.67, ...], // <-- full vector\n    \"using\": \"full\",\n    \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Deleting Payload Fields in Go\nDESCRIPTION: This code initializes a connection to a Qdrant server and performs a DeletePayload operation to remove specific payload fields from points matching a filter. The example removes the 'color' and 'price' fields from all points where the color is 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-payload/by-filter/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.DeletePayload(context.Background(), &qdrant.DeletePayloadPoints{\n    CollectionName: \"{collection_name}\",\n    Keys:           []string{\"color\", \"price\"},\n    PointsSelector: qdrant.NewPointsSelectorFilter(\n        &qdrant.Filter{\n            Must: []*qdrant.Condition{qdrant.NewMatch(\"color\", \"red\")},\n        },\n    ),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Field Index in Qdrant Client - Rust\nDESCRIPTION: This snippet showcases the creation of a field index for a specified collection in Qdrant. It initializes the Qdrant client, specifies the collection name and payload field, and configures the field index parameters for a keyword type, enabling on-disk storage. The expected input involves the collection name and field specifications, with output reflecting the successful creation of the field index.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/keyword-on-disk/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\n    CreateFieldIndexCollectionBuilder,\n    KeywordIndexParamsBuilder,\n    FieldType\n};\nuse qdrant_client::{Qdrant, QdrantError};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.create_field_index(\n    CreateFieldIndexCollectionBuilder::new(\n        \"{collection_name}\",\n        \"payload_field_name\",\n        FieldType::Keyword,\n    )\n    .field_index_params(\n        KeywordIndexParamsBuilder::default()\n            .on_disk(true),\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Converting Voyage AI Embeddings to Qdrant Points in TypeScript\nDESCRIPTION: Transforms the Voyage AI embedding response into an array of points suitable for Qdrant. Each point includes an ID, the embedding vector, and a payload containing the original text.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/voyage.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet points = response_body.data.map((data, i) => {\n    return {\n        id: i,\n        vector: data.embedding,\n        payload: {\n            text: texts[i]\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Collection in Qdrant using TypeScript Client\nDESCRIPTION: This code snippet demonstrates how to delete a collection from Qdrant vector database using the JavaScript/TypeScript client. The deleteCollection method requires the collection name as a parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-collection/simple/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.deleteCollection(\"{collection_name}\");\n```\n\n----------------------------------------\n\nTITLE: Indexing OpenShift Course URLs with Python\nDESCRIPTION: Demonstrates running the indexing pipeline on a list of OpenShift course URLs to store content in Qdrant vector database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncourse_urls = [\n    \"https://developers.redhat.com/learn/openshift/foundations-openshift\",\n    \"https://developers.redhat.com/learning/learn:openshift:foundations-openshift/resource/resources:openshift-and-developer-sandbox\",\n    \"https://developers.redhat.com/learning/learn:openshift:foundations-openshift/resource/resources:overview-web-console\",\n    \"https://developers.redhat.com/learning/learn:openshift:foundations-openshift/resource/resources:use-terminal-window-within-red-hat-openshift-web-console\",\n    \"https://developers.redhat.com/learning/learn:openshift:foundations-openshift/resource/resources:install-application-source-code-github-repository-using-openshift-web-console\",\n    \"https://developers.redhat.com/learning/learn:openshift:foundations-openshift/resource/resources:install-application-linux-container-image-repository-using-openshift-web-console\",\n    \"https://developers.redhat.com/learning/learn:openshift:foundations-openshift/resource/resources:install-application-linux-container-image-using-oc-cli-tool\",\n    \"https://developers.redhat.com/learning/learn:openshift:foundations-openshift/resource/resources:install-application-source-code-using-oc-cli-tool\",\n    \"https://developers.redhat.com/learning/learn:openshift:foundations-openshift/resource/resources:scale-applications-using-openshift-web-console\",\n    \"https://developers.redhat.com/learning/learn:openshift:foundations-openshift/resource/resources:scale-applications-using-oc-cli-tool\",\n    \"https://developers.redhat.com/learning/learn:openshift:foundations-openshift/resource/resources:work-databases-openshift-using-oc-cli-tool\",\n    \"https://developers.redhat.com/learning/learn:openshift:foundations-openshift/resource/resources:work-databases-openshift-web-console\",\n    \"https://developers.redhat.com/learning/learn:openshift:foundations-openshift/resource/resources:view-performance-information-using-openshift-web-console\",\n]\n\nindexing_pipeline.run(data={\n    \"fetcher\": {\n        \"urls\": course_urls,\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: JWT Configuration for Role-Based User Access\nDESCRIPTION: JWT payload configuration combining expiration time and value_exists claims to validate user roles.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/data-privacy.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\":  1690995200, \n  \"value_exists\": {\n    \"collection\": \"users\",\n    \"matches\": [\n      { \"key\": \"username\", \"value\": \"john\" },\n      { \"key\": \"role\", \"value\": \"developer\" }\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing FastEmbed Module\nDESCRIPTION: Import the TextEmbedding class from FastEmbed library\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastembed import TextEmbedding\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Blog Landing Page in YAML\nDESCRIPTION: This YAML configuration sets up the main elements of the Qdrant blog landing page. It defines the page title, subtitle, description, and placeholders for email subscription and search functionality. Additionally, it includes an extensive list of URL aliases for various tags and categories.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Qdrant Blog\nsubtitle: Check out our latest posts\ndescription: A place to learn how to become an expert traveler through vector space. Subscribe and we will update you on features and news.\nemail_placeholder: Enter your email\nsubscribe_button: Subscribe\nfeatures_title: Features and News\nsearch_placeholder: What are you Looking for?\naliases: # There is no need to add aliases for future new tags and categories!\n  - /tags\n  - /tags/case-study\n  - /tags/dailymotion\n  - /tags/recommender-system\n  - /tags/binary-quantization\n  - /tags/embeddings\n  - /tags/openai\n  - /tags/gsoc24\n  - /tags/open-source\n  - /tags/summer-of-code\n  - /tags/vector-database\n  - /tags/artificial-intelligence\n  - /tags/machine-learning\n  - /tags/vector-search\n  - /tags/case_study\n  - /tags/dust\n  - /tags/announcement\n  - /tags/funding\n  - /tags/series-a\n  - /tags/azure\n  - /tags/cloud\n  - /tags/data-science\n  - /tags/information-retrieval\n  - /tags/benchmarks\n  - /tags/performance\n  - /tags/qdrant\n  - /tags/blog\n  - /tags/large-language-models\n  - /tags/podcast\n  - /tags/retrieval-augmented-generation\n  - /tags/search\n  - /tags/vector-search-engine\n  - /tags/vector-image-search\n  - /tags/vector-space-talks\n  - /tags/retriever-ranker-architecture\n  - /tags/semantic-search\n  - /tags/llm\n  - /tags/entity-matching-solution\n  - /tags/real-time-processing\n  - /tags/vector-space-talk\n  - /tags/fastembed\n  - /tags/quantized-emdedding-models\n  - /tags/llm-recommendation-system\n  - /tags/integrations\n  - /tags/unstructured\n  - /tags/integration\n  - /tags/n8n\n  - /tags/news\n  - /tags/webinar\n  - /tags/cohere\n  - /tags/embedding-model\n  - /tags/database\n  - /tags/vector-search-database\n  - /tags/neural-networks\n  - /tags/similarity-search\n  - /tags/embedding\n  - /tags/corporate-news\n  - /tags/nvidia\n  - /tags/docarray\n  - /tags/jina-integration\n  - /categories\n  - /categories/news\n  - /categories/vector-search\n  - /categories/webinar\n  - /categories/vector-space-talk\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Sparse Text Embedding Models\nDESCRIPTION: Method to display all sparse text embedding models currently supported by FastEmbed, showing their specifications, sizes, and requirements.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSparseTextEmbedding.list_supported_models()\n```\n\n----------------------------------------\n\nTITLE: Configuring Async IO in Qdrant YAML Config\nDESCRIPTION: YAML configuration snippet for enabling asynchronous IO operations in Qdrant through the config file.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/large-scale-search.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  performance:\n    async_scorer: true\n```\n\n----------------------------------------\n\nTITLE: Crawling Website Content with Apify Actor\nDESCRIPTION: This Python code uses the Apify client to call the 'apify/website-content-crawler' actor to crawl the Qdrant documentation. It extracts text content from the specified website and stores it in a dataset.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/platforms/apify.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python\nactor_call = client.actor(\"apify/website-content-crawler\").call(\n    run_input={\"startUrls\": [{\"url\": \"https://qdrant.tech/documentation/\"}]}\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Downloading a Full Storage Snapshot in Qdrant\nDESCRIPTION: REST API call to download a specified full storage snapshot file.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/snapshots.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://{qdrant-url}:6333/snapshots/{snapshot_name}'\n    -H 'api-key: ********' --output snapshot_name.snapshot\n```\n\n----------------------------------------\n\nTITLE: Generating Random Operations for Model Testing in Rust\nDESCRIPTION: This Rust code defines an Operation enum and implements a method to generate random operations for model testing Gridstore. It creates Put, Delete, and Update operations with random point offsets and payloads.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/gridstore-key-value-storage.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nenum Operation {\n    Put(PointOffset, Payload),\n    Delete(PointOffset),\n    Update(PointOffset, Payload),\n}\n\nimpl Operation {\n    fn random(rng: &mut impl Rng, max_point_offset: u32) -> Self {\n        let point_offset = rng.random_range(0..=max_point_offset);\n        let operation = rng.gen_range(0..3);\n        match operation {\n            0 => {\n                let size_factor = rng.random_range(1..10);\n                let payload = random_payload(rng, size_factor);\n                Operation::Put(point_offset, payload)\n            }\n            1 => Operation::Delete(point_offset),\n            2 => {\n                let size_factor = rng.random_range(1..10);\n                let payload = random_payload(rng, size_factor);\n                Operation::Update(point_offset, payload)\n            }\n            _ => unreachable!(),\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Processing Pipelines\nDESCRIPTION: Setting up image and text processing pipelines using pretrained models\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/storing-multiple-vectors-per-object-in-qdrant.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.pipeline import make_pipeline\nfrom embetter.grab import ColumnGrabber\nfrom embetter.vision import ImageLoader, TimmEncoder\nfrom embetter.text import SentenceEncoder\n\noutput_directory = Path(\"./images\")\n\nimage_pipeline = make_pipeline(\n   ColumnGrabber(\"URL\"),\n   DownloadFile(output_directory),\n   ImageLoader(),\n   TimmEncoder(\"vit_base_patch16_224\"),\n)\n\ntext_pipeline = make_pipeline(\n   ColumnGrabber(\"TEXT\"),\n   SentenceEncoder(\"all-MiniLM-L6-v2\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Points with Quantization in Qdrant Collection via POST Request\nDESCRIPTION: This code demonstrates a POST request payload for querying points from a Qdrant collection. The query contains vector values with quantization enabled (oversampling set to 2.0) and limits the results to 10 entries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-quantization-oversampling/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vector\": [0.2, 0.1, 0.9, 0.7],\n  \"quantization\": {\n    \"oversampling\": 2.0,\n    \"ignore\": false\n  },\n  \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Price Range Query Condition with Qdrant Client\nDESCRIPTION: Creates a range condition for filtering vector points with price between 100.0 and 450.0 using Qdrant's ConditionFactory\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/range/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.range;\n\nimport io.qdrant.client.grpc.Points.Range;\n\nrange(\"price\", Range.newBuilder().setGte(100.0).setLte(450).build());\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database in TypeScript\nDESCRIPTION: This code demonstrates how to initialize a Qdrant client connection and perform a recommendation query. The query uses positive and negative examples for recommendations, applies a filter for records in London, and limits results to 3 items.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/basic-recommend/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: {\n        recommend: {\n            positive: [100, 231],\n            negative: [718, [0.2, 0.3, 0.4, 0.5]],\n            strategy: \"average_vector\"\n        }\n    },\n    filter: {\n        must: [\n            {\n                key: \"city\",\n                match: {\n                    value: \"London\",\n                },\n            },\n        ],\n    },\n    limit: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Multiple Vector Types in Qdrant using Go\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant Go client to upsert points with multiple vector types into a collection. It includes dense vectors for 'image' and 'text', and a sparse vector for 'text-sparse'. The snippet uses the UpsertPoints method of the Qdrant client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/named-vectors/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient.Upsert(context.Background(), &qdrant.UpsertPoints{\n\tCollectionName: \"{collection_name}\",\n\tPoints: []*qdrant.PointStruct{\n\t\t{\n\t\t\tId: qdrant.NewIDNum(1),\n\t\t\tVectors: qdrant.NewVectorsMap(map[string]*qdrant.Vector{\n\t\t\t\t\"image\": qdrant.NewVector(0.9, 0.1, 0.1, 0.2),\n\t\t\t\t\"text\":  qdrant.NewVector(0.4, 0.7, 0.1, 0.8, 0.1),\n\t\t\t\t\"text-sparse\": qdrant.NewVectorSparse(\n\t\t\t\t\t[]uint32{1, 3, 5, 7},\n\t\t\t\t\t[]float32{0.1, 0.2, 0.3, 0.4}),\n\t\t\t}),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Float16 Vectors in Java\nDESCRIPTION: This Java code demonstrates how to create a Qdrant collection using the Java client, configuring float16 vectors for improved memory efficiency and potential performance gains.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Datatype;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n  .createCollectionAsync(\n    CreateCollection.newBuilder()\n    .setCollectionName(\"{collection_name}\")\n    .setVectorsConfig(VectorsConfig.newBuilder()\n      .setParams(VectorParams.newBuilder()\n        .setSize(1024)\n        .setDistance(Distance.Cosine)\n        .setDatatype(Datatype.Float16)\n        .build())\n      .build())\n    .build())\n  .get();\n```\n\n----------------------------------------\n\nTITLE: Installing LlamaIndex and Qdrant Integration Packages\nDESCRIPTION: Commands to install the required Python packages for using LlamaIndex with Qdrant vector store integration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/llama-index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install llama-index llama-index-vector-stores-qdrant\n```\n\n----------------------------------------\n\nTITLE: Inserting Points with Group ID in Qdrant (Python)\nDESCRIPTION: This Python code demonstrates inserting points into a Qdrant collection. Each point includes an ID, a payload containing a `group_id` for partitioning vectors by user, and a vector representing the data. This structure allows for easy filtering and access control based on user affiliation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-tenant-group-id/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"Example of inserting points with a group_id into a Qdrant collection.\nEach point has an ID, a payload with the group_id, and a vector.\nThis allows partitioning vectors by user to ensure each user can only access their own vectors.\n\"\"\"\n\n# Assuming you have a Qdrant client instance\n# client = QdrantClient(...)\n\n# Example data\npoint_id = 123\ngroup_id = \"user123\"\nvector = [0.1, 0.2, 0.3]\n\n# Insert the point\n# client.upsert(\n#     collection_name=\"my_collection\",\n#     points=[PointStruct(\n#         id=point_id,\n#         payload={\"group_id\": group_id},\n#         vector=vector\n#     )]\n# )\n\n# The key 'group_id' in the payload can be named according to your data structure needs.\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection with Sparse Vectors\nDESCRIPTION: Creates a Qdrant client connection to localhost:6334 and sets up a new collection with sparse vector configuration. The collection uses an in-memory sparse index for the 'splade-model-name' vector.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector-index-on-disk/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tSparseVectorsConfig: qdrant.NewSparseVectorsConfig(\n\t\tmap[string]*qdrant.SparseVectorParams{\n\t\t\t\"splade-model-name\": {\n\t\t\t\tIndex: &qdrant.SparseIndexConfig{\n\t\t\t\t\tOnDisk: qdrant.PtrOf(false),\n\t\t\t\t}},\n\t\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating MatchInt Instance in Go\nDESCRIPTION: This snippet imports the Qdrant client library in Go and creates a new MatchInt instance with a count of 0. It is used for setting up matching criteria in queries against the Qdrant vector database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-integer/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewMatchInt(\"count\", 0)\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video iFrame\nDESCRIPTION: HTML iframe code for embedding a YouTube video player with specific dimensions and attributes\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/production-scale-rag-for-real-time-news-distillation-robert-caulk-vector-space-talks.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0ORi9QJlud0?si=rpSOnS2kxTFXiVBq\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Upserting Points in Go\nDESCRIPTION: This snippet demonstrates how to create a Qdrant client and upsert multiple points with multi-vector data into a specified collection. It uses the Qdrant Go client library to establish a connection and perform the upsert operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-multiple-vectors/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Upsert(context.Background(), &qdrant.UpsertPoints{\n\tCollectionName: \"{collection_name}\",\n\tPoints: []*qdrant.PointStruct{\n\t\t{\n\t\t\tId: qdrant.NewIDNum(1),\n\t\t\tVectors: qdrant.NewVectorsMap(map[string]*qdrant.Vector{\n\t\t\t\t\"image\": qdrant.NewVector(0.9, 0.1, 0.1, 0.2),\n\t\t\t\t\"text\":  qdrant.NewVector(0.4, 0.7, 0.1, 0.8, 0.1, 0.1, 0.9, 0.2),\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tId: qdrant.NewIDNum(2),\n\t\t\tVectors: qdrant.NewVectorsMap(map[string]*qdrant.Vector{\n\t\t\t\t\"image\": qdrant.NewVector(0.2, 0.1, 0.3, 0.9),\n\t\t\t\t\"text\":  qdrant.NewVector(0.5, 0.2, 0.7, 0.4, 0.7, 0.2, 0.3, 0.9),\n\t\t\t}),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing QdrantDocumentRetriever Node\nDESCRIPTION: Example of setting up and using a QdrantDocumentRetriever node for retrieving documents from Qdrant using vector similarity search. The node can be configured with parameters like index name, maximum results, and additional filters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/dynamiq.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dynamiq.nodes.retrievers import QdrantDocumentRetriever\nfrom dynamiq import Workflow\n\n# Define a retriever node to fetch most relevant documents\nretriever_node = QdrantDocumentRetriever(\n    index_name=\"default\",\n    top_k=5,  # Optional: Maximum number of documents to retrieve\n    filters={...}  # Optional: Additional filtering conditions\n)\n\n# Create a workflow and add the retriever node\nwf = Workflow()\nwf.flow.add_nodes(retriever_node)\n\n# Execute retrieval\nresult = wf.run(input_data={\n  'embedding': query_embedding  # Provide an embedded query for similarity search\n})\n```\n\n----------------------------------------\n\nTITLE: Qdrant Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration for setting up Qdrant vector database locally. The configuration is mentioned as being copied from Qdrant's documentation to provide a simple way to run the database with a nice interface.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/talk-with-youtube-without-paying-a-cent-francesco-saverio-zuppichini-vector-space-talks.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Configuration mentioned but not explicitly shown in the content\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in TypeScript\nDESCRIPTION: Sets up a Qdrant client connection to localhost and creates a new collection with specified vector configurations. Configures both dense vectors (128-dimensional, Cosine distance) and sparse vectors for text data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-uint8-sparse-and-dense/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 128,\n    distance: \"Cosine\",\n    datatype: \"uint8\"\n  },\n  sparse_vectors: {\n    text: {\n      index: {\n        datatype: \"uint8\"\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Scalar Quantization with In-Memory Storage\nDESCRIPTION: Configuration for high precision and high-speed search using scalar quantization with in-memory storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/optimize.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"vectors\": {\n    \"size\": 768,\n    \"distance\": \"Cosine\"\n},\n\"quantization_config\": {\n    \"scalar\": {\n        \"type\": \"int8\",\n        \"always_ram\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Strong Ordering in C#\nDESCRIPTION: This C# snippet demonstrates how to use the Qdrant client to asynchronously upsert points into a specific collection with strong ordering. A list of point structures is created alongside their vectors and payloads.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpsertAsync(\n\tcollectionName: \"{collection_name}\",\n\tpoints: new List<PointStruct>\n\t{\n\t\tnew()\n\t\t{\n\t\t\tId = 1,\n\t\t\tVectors = new[] { 0.9f, 0.1f, 0.1f },\n\t\t\tPayload = { [\"color\"] = \"red\" }\n\t\t},\n\t\tnew()\n\t\t{\n\t\t\tId = 2,\n\t\t\tVectors = new[] { 0.1f, 0.9f, 0.1f },\n\t\t\tPayload = { [\"color\"] = \"green\" }\n\t\t},\n\t\tnew()\n\t\t{\n\t\t\tId = 3,\n\t\t\tVectors = new[] { 0.1f, 0.1f, 0.9f },\n\t\t\tPayload = { [\"color\"] = \"blue\" }\n\t\t}\n\t},\n\tordering: WriteOrderingType.Strong\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Collection Snapshot in Qdrant with TypeScript\nDESCRIPTION: Initializes a Qdrant client and creates a snapshot of a specified collection. The client connects to a local Qdrant instance running on port 6333. The snapshot creation is performed using the createSnapshot method which takes a collection name as parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/create-collection-snapshot/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createSnapshot(\"{collection_name}\");\n```\n\n----------------------------------------\n\nTITLE: Configure QdrantStorage\nDESCRIPTION: This Python snippet configures the `QdrantStorage` instance to connect to the Qdrant client. It initializes the storage instance with the specified vector dimension, Qdrant Cloud URL, API key, and collection name.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-camelai-discord.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"from camel.retrievers import VectorRetriever\n\n# Define collection name\ncollection_name = \\\"qdrant-agent\\\"\n\nstorage_instance = QdrantStorage(\n    vector_dim=embedding_instance.get_output_dim(),\n    url_and_api_key=(\n        qdrant_cloud_url,\n        qdrant_api_key,\n    ),\n    collection_name=collection_name,\n)\"\n```\n\n----------------------------------------\n\nTITLE: Java Qdrant Query Implementation\nDESCRIPTION: Java client implementation for querying Qdrant with majority consistency, using the official gRPC client library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_33\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.ReadConsistency;\nimport io.qdrant.client.grpc.Points.ReadConsistencyType;\nimport io.qdrant.client.grpc.Points.SearchParams;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setFilter(Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")).build())\n                .setQuery(nearest(.2f, 0.1f, 0.9f, 0.7f))\n                .setParams(SearchParams.newBuilder().setHnswEf(128).setExact(false).build())\n                .setLimit(3)\n                .setReadConsistency(\n                        ReadConsistency.newBuilder().setType(ReadConsistencyType.Majority).build())\n                .build())\n        .get();\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection with Multiple Vectors\nDESCRIPTION: Establishes connection to a Qdrant server and creates a collection with two vector configurations - one for image vectors (size 4, dot product distance) and one for text vectors (size 8, cosine distance). The client connects to localhost on port 6334.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/multiple-vectors/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfigMap(\n\t\tmap[string]*qdrant.VectorParams{\n\t\t\t\"image\": {\n\t\t\t\tSize:     4,\n\t\t\t\tDistance: qdrant.Distance_Dot,\n\t\t\t},\n\t\t\t\"text\": {\n\t\t\t\tSize:     8,\n\t\t\t\tDistance: qdrant.Distance_Cosine,\n\t\t\t},\n\t\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Preview Images for Documentation Pages in Bash\nDESCRIPTION: This command generates branded preview images for documentation pages, automatically inserting the section name and page title. It uses custom backgrounds if available, or defaults to random backgrounds.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbash -x automation/generate-all-docs-preview.sh\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Vector Logo for Qdrant\nDESCRIPTION: This SVG markup defines the Qdrant logo with a width of 120px and height of 64px. It includes path elements with masks and fill properties that create the vector graphic. The paths define the shapes that make up the stylized logo.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_4\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><mask id=\"path-1-inside-1_1622_6710\" fill=\"white\"><path d=\"M55.2148 42.0419C55.2723 42.0498 55.2848 42.0521 55.3408 42.0594C56.2775 42.1867 57.1978 42.3555 57.9023 42.6704C58.5553 42.9587 58.938 43.3235 59.2874 43.9738C59.8187 44.96 59.8534 46.3415 59.3732 47.3871C59.0145 48.1651 58.2271 48.8175 57.5083 49.1633C56.7618 49.5252 56.0263 49.6976 55.1827 49.7939C53.7074 49.9563 52.114 49.6507 50.7865 49.0086C50.0011 48.625 49.042 47.9645 48.5582 47.1136C48.2024 46.4902 48.2137 45.6791 48.6466 45.0866C49.3365 44.1423 50.8142 43.9344 51.9272 43.9738C52.7758 44.0067 54.3036 44.269 55.1093 44.5556C55.3326 44.6363 56.1562 44.9571 56.2999 45.1043C56.4011 45.2066 56.4667 45.3554 56.4213 45.4929C56.2372 46.0559 54.869 46.3527 54.4739 46.4123C53.4162 46.5743 52.8674 46.174 51.665 45.6993C51.3665 45.5824 50.9687 45.4527 50.6648 45.4246C50.1189 45.3726 49.4595 45.5255 49.3553 46.1214C49.3035 46.4285 49.6637 46.7158 49.9384 46.8365C50.5834 47.1136 51.1077 47.2132 51.7425 47.2217C53.6179 47.2526 55.7254 46.9439 57.2593 45.8571C57.4693 45.7072 57.6755 45.4879 57.6777 45.2113C57.6844 44.6529 56.7054 44.3115 56.7054 44.3115C55.6722 43.8807 53.763 43.6711 52.7795 43.5901C51.7474 43.5007 50.1235 43.3671 49.7336 43.3097C49.3321 43.2524 48.8961 43.1714 48.5484 43.0156C48.1992 42.8578 47.8575 42.5047 47.7561 42.1141C47.5763 41.4099 47.8057 40.5459 48.1968 39.9834C49.2217 38.5099 51.6225 37.9503 53.4161 37.728C55.1521 37.512 57.9585 37.5142 59.6636 38.4202C59.9268 38.5614 60.0613 38.6926 60.0063 38.974C59.8952 39.5024 59.4981 39.8429 59.0168 39.9921C58.5119 40.1528 57.4674 40.2154 57.0087 40.2443C54.953 40.3595 52.4689 40.2991 50.5109 40.833C50.3575 40.8768 50.0925 40.9483 50.0064 41.0445C49.6999 41.3772 50.5752 41.4722 50.7628 41.5103C50.8185 41.5236 50.8293 41.5255 50.8875 41.5318L55.2148 42.0419ZM42.9856 32.8757C42.9856 32.8757 43.3199 32.3742 43.6001 31.9938C44.1102 31.3009 45.0334 30.3401 45.7287 29.7452C45.9413 29.5635 46.1921 29.3577 46.1921 29.3577C46.1921 29.3577 45.7999 29.3982 45.5776 29.4437C45.0502 29.5463 44.2767 30.0604 43.8902 30.3926C43.2525 30.9385 42.5513 31.8259 42.8686 32.6144C42.9146 32.7258 42.9856 32.8757 42.9856 32.8757ZM46.5307 33.8244C47.5381 33.7549 48.4818 33.4649 49.3604 32.9775C50.2221 32.4954 51.4894 31.5552 51.358 30.45C51.318 30.0922 51.0838 29.8221 50.7881 29.6961C50.4039 29.5296 50.2034 29.5564 49.7126 29.7023C49.356 29.8067 49.1953 29.87 48.8585 30.0627C47.8702 30.6369 46.4689 31.8657 45.7082 32.8465C45.5326 33.0778 45.3548 33.3364 45.2156 33.5137C45.1278 33.623 45.0596 33.7234 45.0681 33.7501C45.0985 33.8613 46.1373 33.8511 46.5307 33.8244ZM43.9656 35.7084C43.8618 35.8184 43.7518 36.0834 43.6378 36.2752C43.5769 36.3779 43.4641 36.5101 43.3894 36.5631C43.1272 36.7559 42.9051 36.7649 42.6519 36.5421C42.297 36.2281 42.0917 35.7425 42.0771 35.2702C42.0695 35.0641 42.1049 34.836 42.0659 34.6622C42.0013 34.3688 41.7077 34.0666 41.5494 33.7861C41.3636 33.4557 41.2132 32.8795 41.1945 32.5075C41.1307 31.3476 41.7421 30.2791 42.5364 29.4364C43.3362 28.5842 44.3827 27.876 45.5208 27.3939C46.5965 26.9407 48.173 26.6318 49.3543 27.041C49.7389 27.1728 50.2747 27.5 50.5439 27.8429C50.6011 27.9141 50.6477 27.991 50.7064 28.0287C50.7589 28.0622 50.8963 28.0754 51.0056 28.0954C51.3824 28.1608 51.9249 28.446 52.1465 28.636C52.5917 29.0201 52.8356 29.3872 52.9484 29.92C53.1747 30.992 52.5574 32.1682 51.8542 32.884C50.6502 34.116 49.4612 34.9822 47.921 35.5852C47.2444 35.8495 46.1908 36.0964 45.4233 36.0273C45.1849 36.0075 44.9401 35.9447 44.708 35.9293C44.5895 35.9191 44.1565 35.8074 44.1102 35.7759C44.0528 35.7318 43.9786 35.6935 43.9656 35.7084ZM45.3413 38.0852C45.3882 38.0932 45.4604 38.1142 45.5226 38.1381C46.0626 38.3435 46.2847 38.8432 46.4178 39.3921C46.726 40.6667 46.8576 43.4866 46.9088 44.5903C46.9465 45.4188 46.9672 46.2339 47.0019 47.0527C47.0314 47.7462 47.0867 48.6682 46.9421 49.3179C46.8896 49.5516 46.7333 49.8233 46.5095 49.9625C46.2531 50.1266 45.6696 50.139 45.3488 50.0729C44.5582 49.9094 44.3014 49.4011 44.1885 48.6192C43.9203 46.7535 44.0495 43.092 44.2078 41.547C44.2604 41.0367 44.4526 39.4016 44.719 38.716C44.81 38.4848 45.0038 38.0192 45.3413 38.0852ZM21.2899 41.1893C21.2899 41.1893 20.1132 41.2726 19.3034 41.3625C18.273 41.4735 16.3371 41.8077 15.2196 42.2068C14.8844 42.3268 14.2035 42.6117 14.1443 42.9564C14.0822 43.3136 14.3039 43.593 14.5505 43.882C14.693 44.0499 15.5001 44.8262 15.7264 45.0149C16.675 45.8068 18.5984 47.0282 20.0151 47.6213C20.5018 47.8227 21.307 48.1109 21.307 48.1109C21.307 48.1109 21.2472 45.8184 21.2579 43.5601C21.2642 42.3688 21.2899 41.1893 21.2899 41.1893ZM42.865 42.1017C42.9324 42.7176 42.7741 43.8821 42.7467 44.0357C42.6965 44.3897 42.4296 45.2063 42.3853 45.306C42.1698 45.8023 41.9573 46.2089 41.7321 46.6145C41.3463 47.3089 40.4288 48.4097 39.8842 48.8809C37.8588 50.6315 34.7234 51.6282 32.0335 51.9566C30.2084 52.177 28.1111 52.1447 26.1771 51.7868C25.5115 51.6658 24.521 51.4375 24.521 51.4375C24.521 51.4375 24.5242 51.8335 24.4925 52.112C24.4771 52.2391 24.3815 52.5736 24.3278 52.6819C24.1872 52.9724 23.9563 53.1223 23.6206 53.1868C23.2154 53.262 22.7857 53.287 22.4113 53.127C21.7965 52.8683 21.5759 52.2932 21.4687 51.6299C21.3821 51.0994 21.2914 50.1772 21.2914 50.1772C21.2914 50.1772 20.8315 49.9594 20.4481 49.7681C19.2703 49.1878 18.1517 48.4846 17.173 47.7615C16.9019 47.5591 15.7371 46.5836 15.48 46.3414C14.7591 45.657 14.1105 44.9761 13.6172 44.1024C13.2336 43.4198 13.1232 42.814 13.4149 42.0908C13.8172 41.0827 15.2624 40.3237 16.2516 39.8912C16.9776 39.5707 19.2351 38.8335 20.1729 38.6969C20.6158 38.6335 21.3029 38.5105 21.3451 38.4831C21.3623 38.4698 21.3743 38.4586 21.3868 38.4444C21.4084 38.4139 21.4449 37.416 21.4378 37.051C21.4287 36.6921 21.7035 34.3348 21.7918 33.8363C21.8378 33.5668 22.042 32.5291 22.2504 32.2567C22.3867 32.0726 22.6278 32.0875 22.8244 32.2083C23.8999 32.8771 24.2267 35.1967 24.3067 36.3768C24.3545 37.0959 24.3783 38.1775 24.3783 38.1775C24.3783 38.1775 25.6122 38.141 26.3712 38.1625C27.1087 38.1797 27.9217 38.2961 28.6873 38.4181C29.6673 38.5752 31.5777 38.9919 32.6734 39.5474C33.5756 40.0048 34.42 40.7754 34.6937 41.591C34.9478 42.3386 34.9098 42.856 34.5226 43.5308C34.0872 44.2927 33.2638 44.859 32.4289 44.9063C32.1804 44.9206 31.2452 44.7964 30.9575 44.5736C30.8446 44.4848 30.8504 44.3245 30.9319 44.2158C30.9628 44.1777 31.3999 43.9452 31.6579 43.8096C31.7798 43.7445 31.8931 43.6645 31.9953 43.5715C32.2096 43.3827 32.4025 43.1749 32.381 42.9313C32.3514 42.6152 32.0168 42.4202 31.6979 42.2948C30.2018 41.7004 27.2146 41.207 25.7711 41.1216C25.2061 41.0885 24.4024 41.0601 24.4024 41.0601L24.5723 49.0312C24.5723 49.0312 25.2367 49.1578 25.7604 49.2427C26.0608 49.2882 27.3339 49.4028 27.6722 49.4112C30.2481 49.4792 33.1231 49.2485 35.487 48.133C36.5248 47.6446 37.4769 47.0365 38.1977 46.2134C39.1478 45.1242 39.6453 43.6335 39.5136 42.0766C39.3693 40.3762 38.1726 38.3576 37.2169 37.1286C34.6919 33.8814 30.3637 31.2102 26.5559 29.6442C22.6684 28.0465 18.8262 27.1273 14.7004 26.9734C13.6368 26.934 11.3177 26.9876 10.1455 27.3119C9.97801 27.3591 9.80922 27.4155 9.65374 27.4504C9.53092 27.4805 9.33737 27.5618 9.28423 27.6048C9.26339 27.6223 9.24383 27.6413 9.22568 27.6615C9.22568 27.6615 9.29796 27.7015 9.36701 27.7307C9.49119 27.7849 10.0139 27.8173 10.2844 27.8668C10.5264 27.9124 10.7784 28.0395 10.8781 28.2168C10.9729 28.3854 10.9847 28.5183 10.8715 28.6589C10.6059 28.9819 9.60611 28.9274 9.16588 28.8578C8.70838 28.7849 8.13878 28.6449 8.03415 28.2465C7.91278 27.7774 8.13566 27.3175 8.37641 26.8924C8.86012 26.0418 9.55296 25.5993 10.5676 25.3223C12.0087 24.9257 13.8284 24.6485 15.1892 24.5965C18.2693 24.4801 21.1844 25.0187 24.1687 25.9248C25.8767 26.4412 28.1128 27.3078 29.7498 28.0961C30.9245 28.6624 32.7753 29.704 33.815 30.3847C34.1429 30.6011 36.0618 32.011 36.3598 32.2589C36.9816 32.7672 37.7949 33.4979 38.3839 34.0823C39.5233 35.2114 40.9405 36.9422 41.629 38.3159C41.7947 38.6449 41.923 38.9685 42.1367 39.3498C42.2102 39.4804 42.5247 40.2617 42.577 40.4873C42.6288 40.7106 42.7048 41.0388 42.7155 41.0518C42.7307 41.1718 42.8765 41.843 42.865 42.1017ZM81.5865 40.3392C80.1441 40.6718 76.3512 40.8565 76.3512 40.8565L75.8729 42.3548C75.8729 42.3548 77.7684 42.1929 79.1473 42.337C79.1473 42.337 79.5941 42.2851 79.6466 42.8442C79.6644 43.3656 79.6023 43.9252 79.6023 43.9252C79.6023 43.9252 79.5737 44.2637 79.094 44.3498C78.5741 44.4364 75.0084 44.5743 75.0084 44.5743L74.431 46.5272C74.431 46.5272 74.2165 46.9787 74.6974 46.8498C75.1441 46.7302 78.8802 46.0292 79.3669 46.1301C79.8883 46.2595 80.4654 46.9548 80.2986 47.5883C80.0997 48.3736 76.3708 50.7518 74.1 50.5858C74.1 50.5858 72.9067 50.6628 71.8981 49.0524C70.9588 47.5177 72.2541 44.612 72.2541 44.612C72.2541 44.612 71.6604 43.2555 72.0906 42.7957C72.0906 42.7957 72.3467 42.5634 73.0931 42.5109L74.007 40.62C74.007 40.62 72.966 40.6917 72.3467 39.9258C71.7698 39.1993 71.7214 38.8654 72.1637 38.6647C72.6367 38.4312 76.9721 37.6399 79.9553 37.7403C79.9553 37.7403 80.9921 37.6385 81.8912 39.4368C81.8914 39.4369 82.327 40.1642 81.5865 40.3392ZM70.3659 47.6095C69.9836 48.5087 68.9736 49.4685 67.719 48.8719C66.4805 48.2741 64.5077 44.2364 64.5077 44.2364C64.5077 44.2364 63.7588 42.7308 63.6147 42.7696C63.6147 42.7696 63.4529 42.4756 63.3537 44.1209C63.2505 45.7592 63.3736 48.9538 62.72 49.4566C62.1009 49.9608 61.3513 49.7601 60.9625 49.171C60.6091 48.5907 60.4621 47.2118 60.6549 44.7899C60.8815 42.3634 61.4452 39.7817 62.1654 38.9778C62.8846 38.1793 63.462 38.759 63.687 38.9692C63.687 38.9692 64.649 39.8412 66.2354 42.4016L66.5154 42.8752C66.5154 42.8752 67.957 45.2941 68.1076 45.2885C68.1076 45.2885 68.2255 45.3997 68.3305 45.3198C68.4818 45.2765 68.4208 44.5009 68.4208 44.5009C68.4208 44.5009 68.1217 41.8647 66.8065 37.4027C66.8065 37.4027 66.6076 36.8463 66.7421 36.3249C66.8757 35.7981 67.4038 36.0454 67.4038 36.0454C67.4038 36.0454 69.4422 37.0703 70.4316 40.3891C71.4145 43.7088\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Dependencies for Databricks\nDESCRIPTION: Installs necessary Python libraries required for the vectorization process. This snippet ensures the 'fastembed' and 'datasets' libraries are available in the Databricks environment.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/databricks.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install fastembed datasets\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedding Model and Qdrant Settings - YAML\nDESCRIPTION: YAML configuration for setting up the embedding model parameters and Qdrant connection details including host, port, and SSL settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/solon.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.ai.embed:\n  bgem3:\n    apiUrl: \"http://127.0.0.1:11434/api/embed\"\n    provider: \"ollama\"\n    model: \"bge-m3:latest\"\n    \nsolon.ai.repo:\n  qdrant:\n    host: \"localhost\"\n    port: 6334\n    useSsl: false\n```\n\n----------------------------------------\n\nTITLE: Creating a field index in a Qdrant collection using Go\nDESCRIPTION: This code snippet demonstrates how to create a field index in a Qdrant collection using the Qdrant Go client. It initializes the client, sets the collection name and field name, and uses `CreateFieldIndex` with appropriate parameters for a keyword field. It requires the Qdrant Go client library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/keyword-is-tenant/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateFieldIndex(context.Background(), &qdrant.CreateFieldIndexCollection{\n\tCollectionName: \"{collection_name}\",\n\tFieldName:      \"name_of_the_field_to_index\",\n\tFieldType:      qdrant.FieldType_FieldTypeKeyword.Enum(),\n\tFieldIndexParams: qdrant.NewPayloadIndexParamsKeyword(\n\t\t&qdrant.KeywordIndexParams{\n\t\t\tIsTenant: qdrant.PtrOf(true),\n\t\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting to Qdrant and Performing a Filtered Vector Search in Java\nDESCRIPTION: This snippet demonstrates how to create a Qdrant client connection to a local server and execute a vector similarity search with filtering. It establishes a connection to a Qdrant server, then performs a nearest vector search in a specified collection with a filter to match only vectors belonging to 'user_1'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-filter-by-group-id/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setFilter(\n                        Filter.newBuilder().addMust(matchKeyword(\"group_id\", \"user_1\")).build())\n                .setQuery(nearest(0.1f, 0.1f, 0.9f))\n                .setLimit(10)\n                .build())\n        .get();\n```\n\n----------------------------------------\n\nTITLE: Perform a Search by Audio - TypeScript\nDESCRIPTION: This snippet demonstrates how to submit a search query using audio by generating an embedding for the audio input and querying points in Qdrant using TypeScript.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst audioSegment = (await twelveLabsClient.embed.create({\n    modelName: \"Marengo-retrieval-2.7\",\n    audioUrl: \"https://codeskulptor-demos.commondatastorage.googleapis.com/descent/background%20music.mp3\"\n})).audioEmbedding.segments[0]\n\nawait qdrantClient.query(COLLECTION_NAME, {\n    query: audioSegment.embeddingsFloat,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for RAG Evaluation\nDESCRIPTION: Installs necessary Python packages including Relari, LangChain, and other utilities for RAG evaluation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-relari.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install relari langchain_community langchain_qdrant \n!pip install unstructured rank_bm25\n!pip install --upgrade nltk\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Installs necessary Python packages including haystack-ai, qdrant-client, qdrant-haystack, and fastembed-haystack\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npip install haystack-ai \\\n    qdrant-client \\\n    qdrant-haystack \\\n    fastembed-haystack\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Confluent Kafka\nDESCRIPTION: Commands for setting up the required environment variables to specify the installation directory for Confluent Kafka and update the system PATH, necessary for running Kafka services.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/data-streaming-kafka-qdrant.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set CONFLUENT_HOME to the installation directory:\nexport CONFLUENT_HOME=/path/to/confluent-<version>\n\n# Add Confluent binaries to your PATH\nexport PATH=$CONFLUENT_HOME/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Checking Collection Existence with Qdrant Java Client\nDESCRIPTION: Asynchronous method call to verify if a named collection exists in the Qdrant database. Returns a CompletableFuture<Boolean> that resolves to true if the collection exists.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/check-collection-exists/simple/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclient.collectionExistsAsync(\"{collection_name}\").get();\n```\n\n----------------------------------------\n\nTITLE: Starting First Qdrant Node with URI Specification\nDESCRIPTION: Command to start the first node in a Qdrant cluster with the '--uri' flag that specifies how other nodes can reach it.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./qdrant --uri 'http://qdrant_node_1:6335'\n```\n\n----------------------------------------\n\nTITLE: Installing Spring AI Qdrant Dependencies with Maven\nDESCRIPTION: Maven dependency configuration for adding the Spring AI Qdrant store starter package to your project.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/spring-ai.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n <groupId>org.springframework.ai</groupId>\n <artifactId>spring-ai-qdrant-store-spring-boot-starter</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Loading SPLADE++ Model for Sparse Text Embeddings\nDESCRIPTION: Code to initialize the SPLADE++ sparse text embedding model. The model files will be automatically downloaded with progress indicators shown.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsparse_model_name = \"prithivida/Splade_PP_en_v1\"\nsparse_model = SparseTextEmbedding(model_name=sparse_model_name)\n```\n\n----------------------------------------\n\nTITLE: Listing Qdrant Collection Snapshots in C#\nDESCRIPTION: Establishes a connection to a Qdrant server running on localhost:6334 and retrieves a list of snapshots for a specified collection. Uses the Qdrant.Client NuGet package for C# integration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/list-collection-snapshots/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ListSnapshotsAsync(\"{collection_name}\");\n```\n\n----------------------------------------\n\nTITLE: Creating Geospatial Radius Condition in Qdrant\nDESCRIPTION: Generates a geographic radius condition for filtering points based on location coordinates and maximum distance. Uses the GeoRadius method from Qdrant's static Conditions class to define a spatial search parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-radius/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing static Qdrant.Client.Grpc.Conditions;\n\nGeoRadius(\"location\", 52.520711, 13.403683, 1000.0f);\n```\n\n----------------------------------------\n\nTITLE: Evaluate Tuned Encoder in Python\nDESCRIPTION: This snippet evaluates the performance of a tuned similarity model using the `Evaluator` class. It loads the tuned model, sets it to evaluation mode, and runs the evaluation using specified metrics and a sampler.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/cars-recognition.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef eval_tuned_encoder(dataset, device):\n    print(\"Evaluating tuned encoder...\")\n    tuned_cars_model = SimilarityModel.load(\n        os.path.join(os.path.dirname(__file__), \"cars_encoders\")\n    ).to(device)\n    tuned_cars_model.eval()\n\n    result = Quaterion.evaluate(\n        evaluator=Evaluator(\n            metrics=RetrievalRPrecision(),\n            sampler=GroupSampler(sample_size=1000, device=device, log_progress=True),\n        ),\n        model=tuned_cars_model,\n        dataset=dataset,\n    )\n\n    print(result)\n```\n\n----------------------------------------\n\nTITLE: Scrolling Points with Filter in Qdrant Rust\nDESCRIPTION: This code snippet uses the Qdrant client to scroll through points in a specified collection, applying a filter to match points based on their color. It builds a scroll request with a limit, including payloads but excluding vectors in the response. The collection name and the filter criteria are customizable parameters, and this operation is asynchronous.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-and-params/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\")\n            .filter(Filter::must([Condition::matches(\n                \"color\",\n                \"red\".to_string(),\n            )]))\n            .limit(1)\n            .with_payload(true)\n            .with_vectors(false),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Installing HuggingFace Tokenizers\nDESCRIPTION: Installation command for the tokenizers library required for SPLADE++ token analysis.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\npip install tokenizers\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Authentication in YAML for Qdrant\nDESCRIPTION: YAML configuration example for enabling API key authentication in a Qdrant instance. This sets a static API key that must be included in all client requests as a header.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  # Set an api-key.\n  # If set, all requests must include a header with the api-key.\n  # example header: `api-key: <API-KEY>`\n  #\n  # If you enable this you should also enable TLS.\n  # (Either above or via an external service like nginx.)\n  # Sending an api-key over an unencrypted channel is insecure.\n  api_key: your_secret_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Snapshot with Rust\nDESCRIPTION: This code snippet demonstrates how to create a full snapshot of a Qdrant vector database using the `qdrant_client` crate. It initializes a Qdrant client, connects to the specified URL, and then asynchronously calls the `create_full_snapshot` method to initiate the snapshot process. This operation creates a complete backup of the Qdrant data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/create-full-snapshot/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.create_full_snapshot().await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Spark Session with Qdrant Support in Scala\nDESCRIPTION: Scala code to create a Spark session with Qdrant support by specifying the path to the Qdrant-Spark connector JAR file.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/spark.md#2025-04-21_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\nimport org.apache.spark.sql.SparkSession\n\nval spark = SparkSession.builder\n  .config(\"spark.jars\", \"path/to/file/spark-VERSION.jar\") // Specify the path to the downloaded JAR file\n  .master(\"local[*]\")\n  .appName(\"qdrant\")\n  .getOrCreate()\n```\n\n----------------------------------------\n\nTITLE: Loading Hugging Face Dataset in Python\nDESCRIPTION: Shows how to load the arxiv-titles-instructorxl-embeddings dataset using the datasets library from Hugging Face.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/huggingface-datasets.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"Qdrant/arxiv-titles-instructorxl-embeddings\")\n```\n\n----------------------------------------\n\nTITLE: Installing Unstructured CLI with Discord and Qdrant support\nDESCRIPTION: This command installs the Unstructured CLI with necessary extras for Discord integration, local inference, and Qdrant support.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-unstructured.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install unstructured[discord,local-inference,qdrant]\n```\n\n----------------------------------------\n\nTITLE: Clearing Payload for Specific Points in Qdrant Collection using TypeScript\nDESCRIPTION: This code uses the Qdrant client to clear the payload for specific points in a named collection. It targets points with IDs 0, 3, and 100. This operation removes all payload data associated with these points without affecting their vector data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/clear-payload/simple/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.clearPayload(\"{collection_name}\", {\n  points: [0, 3, 100],\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Movie Recommendations with Scores using Collaborative Filtering in Qdrant\nDESCRIPTION: Output showing top movie recommendations generated through a collaborative filtering approach implemented with Qdrant and sparse vectors. Each movie is displayed with its title and corresponding recommendation score.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/collaborative-filtering.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nToy Story, Score: 131.2033799 \nMonty Python and the Holy Grail, Score: 131.2033799 \nStar Wars: Episode V - The Empire Strikes Back, Score: 131.2033799  \nStar Wars: Episode VI - Return of the Jedi, Score: 131.2033799 \nMen in Black, Score: 131.2033799\n```\n\n----------------------------------------\n\nTITLE: Custom File Downloader Class\nDESCRIPTION: Implementation of a custom class for downloading files from URLs, compatible with embetter library\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/storing-multiple-vectors-per-object-in-qdrant.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom urllib.request import urlretrieve\nfrom embetter.base import EmbetterBase\n\nclass DownloadFile(EmbetterBase):\n\n   def __init__(self, out_dir: Path):\n       self.out_dir = out_dir\n\n   def transform(self, X, y=None):\n       output_paths = []\n       for x in X:\n           output_file = self.out_dir / Path(x).name\n           urlretrieve(x, output_file)\n           output_paths.append(str(output_file))\n       return output_paths\n```\n\n----------------------------------------\n\nTITLE: Movie Descriptions Dataset\nDESCRIPTION: Sample dataset containing movie descriptions for embedding generation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-colbert.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndescriptions = [\"In 1431, Jeanne d'Arc is placed on trial on charges of heresy. The ecclesiastical jurists attempt to force Jeanne to recant her claims of holy visions.\",\n \"A film projectionist longs to be a detective, and puts his meagre skills to work when he is framed by a rival for stealing his girlfriend's father's pocketwatch.\",\n # ... (truncated for brevity)\n]\n```\n\n----------------------------------------\n\nTITLE: Counting Points with Filter in Qdrant Collection using HTTP POST\nDESCRIPTION: HTTP POST request to count points in a specified Qdrant collection that match the given filter criteria. The example filters for points where the 'color' field matches 'red' and uses the 'exact' parameter to ensure precise counting.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/count-points/with-filter-exact/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/count\n{\n    \"filter\": {\n        \"must\": [\n            {\n                \"key\": \"color\",\n                \"match\": {\n                    \"value\": \"red\"\n                }\n            }\n        ]\n    },\n    \"exact\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Scroll Operation in Go\nDESCRIPTION: This snippet shows how to create a new Qdrant client, configure it to connect to a local Qdrant server, and perform a scroll operation on a collection with specific filters. It demonstrates client initialization and advanced querying capabilities.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-must-filter/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t\t\tqdrant.NewMatch(\"color\", \"red\"),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Field Index in Qdrant with Go\nDESCRIPTION: This snippet creates a field index on a Qdrant collection using the Go client. It specifies the collection name, field name, and field type. It also configures index parameters, setting the `IsTenant` parameter to true.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/with-group-id-as-tenant/go.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.CreateFieldIndex(context.Background(), &qdrant.CreateFieldIndexCollection{\n\tCollectionName: \"{collection_name}\",\n\tFieldName:      \"group_id\",\n\tFieldType:      qdrant.FieldType_FieldTypeKeyword.Enum(),\n\tFieldIndexParams: qdrant.NewPayloadIndexParams(\n\t\t&qdrant.KeywordIndexParams{\n\t\t\tIsTenant: qdrant.PtrOf(true),\n\t\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Snapshot Storage in YAML\nDESCRIPTION: This YAML configuration snippet shows how to set up S3 storage for Qdrant snapshots, enabling low-cost, scalable backup storage using AWS S3 or S3-compatible services.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  snapshots_config:\n    # Use 's3' to store snapshots on S3\n    snapshots_storage: s3\n\n    s3_config:\n      # Bucket name\n      bucket: your_bucket_here\n\n      # Bucket region (e.g. eu-central-1)\n      region: your_bucket_region_here\n\n      # Storage access key\n      # Can be specified either here or in the `AWS_ACCESS_KEY_ID` environment variable.\n      access_key: your_access_key_here\n\n      # Storage secret key\n      # Can be specified either here or in the `AWS_SECRET_ACCESS_KEY` environment variable.\n      secret_key: your_secret_key_here\n```\n\n----------------------------------------\n\nTITLE: Defining Color Match Configuration\nDESCRIPTION: Creates a configuration object that matches colors while excluding specific color values\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-except/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    key: 'color',\n    match: {except: ['black', 'yellow']}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database in Rust\nDESCRIPTION: Performs a vector similarity search in Qdrant with a 4-dimensional vector query. Includes filtering for points where city matches 'London' and configures HNSW search parameters with ef=128. Returns top 3 results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/basic-with-filter-and-params/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, QueryPointsBuilder, SearchParamsBuilder};\nuse qdrant_client::Qdrant;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .filter(Filter::must([Condition::matches(\n                \"city\",\n                \"London\".to_string(),\n            )]))\n            .params(SearchParamsBuilder::default().hnsw_ef(128).exact(false)),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Installing Dagster and Qdrant Integration\nDESCRIPTION: Command to install Dagster core and Qdrant integration packages using pip package manager.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/dagster.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install dagster dagster-qdrant\n```\n\n----------------------------------------\n\nTITLE: Updating Points Payload in Qdrant Collection\nDESCRIPTION: Sends a payload update request to a specific Qdrant collection, targeting multiple points with new property values. Allows setting custom properties for specified point IDs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/set-payload/by-point-id/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/payload\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"payload\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n    },\n    \"points\": [\n        0, 3, 100\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Disk-Based Payload Index in Qdrant\nDESCRIPTION: Configures a payload index for a specific collection field with keyword type, enabling efficient disk storage and retrieval of payload values during search operations. Useful for large payload indexes that are infrequently accessed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/keyword-on-disk/_description.md#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Querying Qdrant with TypeScript\nDESCRIPTION: This snippet initializes a Qdrant client and performs a query against a specified collection. It demonstrates the structure for setting query parameters, including a small byte vector and a full vector for different use cases. The snippet requires the Qdrant JS client library to be installed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  prefetch: {\n    query: [1, 23, 45, 67], // <------------- small byte vector\n    using: 'mrl_byte',\n    limit: 1000,\n  },\n  query: [0.01, 0.299, 0.45, 0.67], // <-- full vector,\n  using: 'full',\n  limit: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying a Rust Lambda Function with AWS CLI\nDESCRIPTION: This bash script demonstrates the process of building a Rust Lambda function and deploying it to AWS, including creating the function, setting permissions, and configuring the function URL.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/serverless.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ export LAMBDA_FUNCTION_NAME=hello\n$ export LAMBDA_ROLE=<role name from lambda web ui>\n$ export LAMBDA_REGION=us-east-1\n$ cargo lambda build --release --arm --bin helloworld --output-format zip\n  Downloaded libc v0.2.137\n# [..] output omitted for brevity\n    Finished release [optimized] target(s) in 1m 27s\n$ # Delete the old empty definition\n$ aws lambda delete-function-url-config --region $LAMBDA_REGION --function-name $LAMBDA_FUNCTION_NAME\n$ aws lambda delete-function --region $LAMBDA_REGION --function-name $LAMBDA_FUNCTION_NAME\n$ # Upload the function\n$ aws lambda create-function --function-name $LAMBDA_FUNCTION_NAME \\\n    --handler bootstrap \\\n    --architectures arm64 \\\n    --zip-file fileb://./target/lambda/helloworld/bootstrap.zip \\\n    --runtime provided.al2 \\\n    --region $LAMBDA_REGION \\\n    --role $LAMBDA_ROLE \\\n    --tracing-config Mode=Active\n$ # Add the function URL\n$ aws lambda add-permission \\\n    --function-name $LAMBDA_FUNCTION_NAME \\\n    --action lambda:InvokeFunctionUrl \\\n    --principal \"*\" \\\n    --function-url-auth-type \"NONE\" \\\n    --region $LAMBDA_REGION \\\n    --statement-id url\n$ # Here for simplicity unauthenticated URL access. Beware!\n$ aws lambda create-function-url-config \\\n    --function-name $LAMBDA_FUNCTION_NAME \\\n    --region $LAMBDA_REGION \\\n    --cors \"AllowOrigins=*,AllowMethods=*,AllowHeaders=*\" \\\n    --auth-type NONE\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Strict Mode in Python\nDESCRIPTION: Python code for creating a new Qdrant collection with strict mode enabled and unindexed filtering retrieve restriction using the Qdrant client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    strict_mode_config=models.StrictModeConfig(enabled=True, unindexed_filtering_retrieve=True),\n)\n```\n\n----------------------------------------\n\nTITLE: Downloading a Dataset from Hugging Face Using Datasets Library\nDESCRIPTION: Loads a dataset from the Hugging Face repository and filters it to retain only the first 100 entries while excluding unused columns. This step prepares the dataset for further processing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/databricks.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datasets import load_dataset\n\ndataset_name = \"tasksource/med\"\ndataset = load_dataset(dataset_name, split=\"train\")\n# We'll use the first 100 entries from this dataset and exclude some unused columns.\ndataset = dataset.select(range(100)).remove_columns([\"gold_label\", \"genre\"])\n```\n\n----------------------------------------\n\nTITLE: Recovering Qdrant Collection Snapshot via HTTP PUT\nDESCRIPTION: HTTP request to recover a collection snapshot from a specified URL location. The endpoint accepts a JSON body with the snapshot location and priority parameters. The priority parameter 'snapshot' indicates this operation takes precedence over other operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/recover-snapshot-with-priority/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/snapshots/recover\n{\n  \"location\": \"http://qdrant-node-1:6333/collections/{collection_name}/snapshots/snapshot-2022-10-10.shapshot\",\n  \"priority\": \"snapshot\"\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Spotify Podcast with HTML iframe\nDESCRIPTION: HTML iframe element for embedding a Spotify podcast player for the Indexify episode\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/indexify-unveiled-diptanu-gon-choudhury-vector-space-talk-009.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://podcasters.spotify.com/pod/show/qdrant-vector-space-talk/embed/episodes/Indexify-Unveiled-A-Scalable-and-Near-Real-time-Content-Extraction-Engine-for-Multimodal-Unstructured-Data---Diptanu-Gon-Choudhury--Vector-Space-Talk-009-e2el8qc/a-aas4nil\" height=\"102px\" width=\"400px\" frameborder=\"0\" scrolling=\"no\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Set Qdrant Cloud URL and API Key in .env file\nDESCRIPTION: This bash snippet sets the Qdrant Cloud URL and API Key in a `.env` file. These variables are required to authenticate and connect to the Qdrant Cloud instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-camelai-discord.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"QDRANT_CLOUD_URL=<your-qdrant-cloud-url>\nQDRANT_CLOUD_API_KEY=<your-api-key>\"\n```\n\n----------------------------------------\n\nTITLE: Processing Query with Cohere Chat\nDESCRIPTION: Sends the customer query to Cohere's command-r model using the registered connector and retrieves the generated response\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-customer-support-cohere-airbyte-aws.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresponse = cohere_client.chat(\n    message=query,\n    connectors=[\n        cohere.ChatConnector(id=connector_id),\n    ],\n    model=\"command-r\",\n)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying a Qdrant Vector Database with Go Client\nDESCRIPTION: This code initializes a connection to a Qdrant server and performs a vector search query. The query includes vector similarity parameters and a metadata filter condition to match a specific group_id.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-filter-by-group-id/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.1, 0.1, 0.9),\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"group_id\", \"user_1\"),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Developing a Discord Bot Using Discord.py in Python\nDESCRIPTION: This Python script creates a Discord bot using discord.py, integrating Qdrant for vector search and CAMEL-AI for AI-driven conversation handling. It listens for messages in the Discord server, performs relevance checks using vector retrieval, and generates responses using CAMEL-AI. It requires dependencies like discord.py and nest_asyncio to handle async operations smoothly. Input messages are processed to provide contextual answers with a maximum length constraint of 2000 characters for responses.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-camelai-discord.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom camel.bots import DiscordApp\nimport nest_asyncio\nimport discord\n\nnest_asyncio.apply()\ndiscord_q_bot = DiscordApp(token=os.getenv(\"DISCORD_BOT_TOKEN\"))\n\n@discord_q_bot.client.event # triggers when a message is sent in the channel\nasync def on_message(message: discord.Message):\n    if message.author == discord_q_bot.client.user:\n        return\n\n    if message.type != discord.MessageType.default:\n        return\n\n    if message.author.bot:\n        return\n    user_input = message.content\n\n    retrieved_info = vector_retriever.query(\n        query=user_input, top_k=10, similarity_threshold=0.6\n    )\n\n    user_msg = str(retrieved_info)\n    assistant_response = qdrant_agent.step(user_msg)\n    response_content = assistant_response.msgs[0].content\n\n    if len(response_content) > 2000: # discord message length limit\n        for chunk in [response_content[i:i+2000] for i in range(0, len(response_content), 2000)]:\n            await message.channel.send(chunk)\n    else:\n        await message.channel.send(response_content)\n\ndiscord_q_bot.run()\n```\n\n----------------------------------------\n\nTITLE: Creating GeoBoundingBox Condition in Rust\nDESCRIPTION: This code snippet demonstrates how to create a geo-bounding box condition using the `qdrant_client` crate in Rust. It defines the bounding box using top-left and bottom-right `GeoPoint` structures, and then constructs a `Condition` to filter points within this box. The condition targets a field named \"location\".\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-bounding-box/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, GeoBoundingBox, GeoPoint};\n\nCondition::geo_bounding_box(\n    \"location\",\n    GeoBoundingBox {\n        bottom_right: Some(GeoPoint {\n            lon: 13.455868,\n            lat: 52.495862,\n        }),\n        top_left: Some(GeoPoint {\n            lon: 13.403683,\n            lat: 52.520711,\n        }),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Aleph Alpha API Token and Model in Python\nDESCRIPTION: Initializes variables for the Aleph Alpha API token and specifies the AI model to be used for generating embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/aleph-alpha-search.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\naa_token = \"<< your_token >>\"\nmodel = \"luminous-base\"\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database with Random Sampling in Rust\nDESCRIPTION: This snippet demonstrates how to establish a connection to a Qdrant server and perform a random sampling query on a specified collection. It imports necessary dependencies, creates a client connection to a local Qdrant instance, and executes a query to retrieve random samples from a collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/random-sample/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{Query, QueryPointsBuilder};\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet sampled = client\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(Query::new_sample(Sample::Random))\n    )\n    .await?;\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Field Condition for Qdrant\nDESCRIPTION: This snippet demonstrates how to create a field condition for filtering Qdrant vector search results. It uses the `FieldCondition` and `MatchValue` classes from the `qdrant_client.models` module to filter based on the 'color' field having the value 'red'. This assumes the `qdrant_client` library is installed and properly configured.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-keyword/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodels.FieldCondition(\n    key=\"color\",\n    match=models.MatchValue(value=\"red\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Caching Configuration for Quaterion\nDESCRIPTION: This snippet configures caching for the model, which can improve performance by avoiding recalculation of frozen encoder outputs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/cars-recognition.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n    def configure_caches(self) -> Optional[CacheConfig]:\n        return CacheConfig(\n            cache_type=CacheType.AUTO, save_dir=\"./cache_dir\", batch_size=32\n        )\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video in a Markdown document using an iframe. It sets the video dimensions, source URL, and various attributes for playback control.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/hybrid-cloud.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<p align=\"center\"><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/gWH2uhWgTvM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe></p>\n```\n\n----------------------------------------\n\nTITLE: Analyzing Query Expansion\nDESCRIPTION: Code to analyze how SPLADE++ expands a query by examining token weights.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nquery_embedding = list(sparse_model.embed(\"A movie about music\"))[0]\nprint(get_tokens_and_weights(query_embedding, tokenizer))\n```\n\n----------------------------------------\n\nTITLE: Creating a DLT Pipeline for Qdrant\nDESCRIPTION: Python code defining a DLT pipeline configuration that uses Qdrant as the destination. This sets up the basic structure for data loading into a Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/dlt.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npipeline = dlt.pipeline(\n    pipeline_name=\"movies\",\n    destination=\"qdrant\",\n    dataset_name=\"movies_dataset\",\n)\n```\n\n----------------------------------------\n\nTITLE: Saving Encoded Vectors to Numpy File\nDESCRIPTION: Saves the created embedding vectors into a .npy file to be used later for uploading to Qdrant. Ensures all encoded data is efficiently stored in a binary format.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nnp.save(\"startup_vectors.npy\", vectors, allow_pickle=False)\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Search Query with Quantization Parameters using Qdrant Client in Rust\nDESCRIPTION: This code demonstrates how to connect to a Qdrant vector database instance and perform a vector similarity search with specified quantization parameters. It creates a client connection to a local Qdrant server, then builds a query with a vector input, setting limit and specialized quantization parameters like oversampling, rescoring, and ignore flags.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-quantization-oversampling/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::\n    QuantizationSearchParamsBuilder, QueryPointsBuilder, SearchParamsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n    \nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(10)\n            .params(\n                SearchParamsBuilder::default().quantization(\n                    QuantizationSearchParamsBuilder::default()\n                        .ignore(false)\n                        .rescore(true)\n                        .oversampling(2.0),\n                ),\n            ),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Single Vector Collection\nDESCRIPTION: Example of creating a Qdrant collection for single vector storage\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/storing-multiple-vectors-per-object-in-qdrant.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n   collection_name=\"single_vector\",\n   vectors_config=VectorParams(\n       size=100,\n       distance=Distance.COSINE,\n   )\n)\n```\n\n----------------------------------------\n\nTITLE: Storing Vector Embeddings in Qdrant\nDESCRIPTION: Uploads vector embeddings with metadata to Qdrant using typed records. Includes encoding of chunks and metadata handling.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/talk-with-youtube-without-paying-a-cent-francesco-saverio-zuppichini-vector-space-talks.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef upload_records(client, embeddings, chunks):\n    records = [\n        models.Record(\n            vector=embedding,\n            payload={\"metadata\": chunk.metadata}\n        ) for embedding, chunk in zip(embeddings, chunks)\n    ]\n    client.upload_records(\"embeddings\", records)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Deleting Snapshot in Go\nDESCRIPTION: Creates a new Qdrant client connection to a local instance and demonstrates how to delete a full snapshot. The client is configured to connect to localhost on port 6334, which are typical default settings for Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/delete-full-snapshot/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.DeleteFullSnapshot(context.Background(), \"{snapshot_name}\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Vector Storage Size in Memory\nDESCRIPTION: Calculation of memory requirements for storing 400 million 512-dimensional binary quantized vectors in RAM. This formula is used to estimate the memory footprint for planning hardware requirements.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/large-scale-search.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n400_000_000 * 512d / 8 bits / 1024 (Kb) / 1024 (Mb) / 1024 (Gb) = 23.84Gb\n```\n\n----------------------------------------\n\nTITLE: Logging in and Syncing Container Images with Skopeo - Bash\nDESCRIPTION: This snippet demonstrates how to log in to a source registry and sync container images to your own registry using Skopeo.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/private-cloud-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```shell\nskopeo login registry.cloud.qdrant.io\n```\n\n```shell\nskopeo login your-registry.example.com\n```\n\n```shell\nskopeo sync --all --src docker --dest docker registry.cloud.qdrant.io/qdrant/qdrant your-registry.example.com/qdrant/qdrant\nskopeo sync --all --src docker --dest docker registry.cloud.qdrant.io/qdrant/cluster-manager your-registry.example.com/qdrant/cluster-manager\nskopeo sync --all --src docker --dest docker registry.cloud.qdrant.io/qdrant/operator your-registry.example.com/qdrant/operator\n```\n\n```shell\nskopeo sync --all --src docker --dest docker registry.cloud.qdrant.io/qdrant-charts/qdrant-private-cloud your-registry.example.com/qdrant-charts/qdrant-private-cloud\nskopeo sync --all --src docker --dest docker registry.cloud.qdrant.io/qdrant-charts/qdrant-kubernetes-api your-registry.example.com/qdrant-charts/qdrant-kubernetes-api\n```\n```\n\n----------------------------------------\n\nTITLE: Removing Quantization Configuration\nDESCRIPTION: Examples showing how to disable quantization and revert to using only original vectors\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-quantization.md#2025-04-21_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/my_collection\n{\n  \"vectors\": {\n    \"size\": 1536,\n    \"distance\": \"Cosine\"\n  },\n  \"quantization_config\": null  # Remove quantization and use original vectors only\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nclient.update_collection(\n    collection_name=\"my_collection\",\n    quantization_config=None  # Remove quantization and rely on original vectors only\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Qdrant Server and Listing Collection Aliases with Java Client\nDESCRIPTION: This code initializes a Qdrant client connection to a local Qdrant server and fetches collection aliases. It creates a client connection on localhost port 6334 without TLS, then makes an asynchronous request to list all aliases for a specific collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/list/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.listCollectionAliasesAsync(\"{collection_name}\").get();\n```\n\n----------------------------------------\n\nTITLE: YAML Logo and Sitemap Configuration\nDESCRIPTION: YAML configuration that specifies a list of customer logo image paths and a sitemap exclusion flag. The configuration includes logo paths for Gitbook, Deloitte, and Disney, with a boolean flag to exclude the page from sitemap generation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/logo-cards-4.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogos:\n  -  /img/customers-logo/gitbook.svg\n  -  /img/customers-logo/deloitte.svg\n  -  /img/customers-logo/disney.svg\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Deleting Qdrant Collection via REST API\nDESCRIPTION: Sends a DELETE request to remove a specified collection from the Qdrant vector database running on localhost. Requires the collection name as a path parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-collection/simple/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nDELETE http://localhost:6333/collections/{collection_name}\n```\n\n----------------------------------------\n\nTITLE: JSON Message Format for Named Multiple Vectors\nDESCRIPTION: Example JSON message format for inserting a point with multiple named dense vectors into Qdrant. This format demonstrates how to structure data for collections with multiple vector fields.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/fluvio.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collection_name\": \"{collection_name}\",\n    \"id\": 1,\n    \"vectors\": {\n        \"some-dense\": [\n            0.1,\n            0.2,\n            0.3,\n            0.4,\n            0.5,\n            0.6,\n            0.7,\n            0.8\n        ],\n        \"some-other-dense\": [\n            0.1,\n            0.2,\n            0.3,\n            0.4,\n            0.5,\n            0.6,\n            0.7,\n            0.8\n        ]\n    },\n    \"payload\": {\n        \"name\": \"fluvio\",\n        \"description\": \"Solution for distributed stream processing\",\n        \"url\": \"https://www.fluvio.io/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java Client with JWT Authentication\nDESCRIPTION: Example of initializing the Qdrant Java client with JWT authentication. The JWT token is passed as the API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nQdrantClient client =\n    new QdrantClient(\n        QdrantGrpcClient.newBuilder(\n                \"xyz-example.eu-central.aws.cloud.qdrant.io\",\n                6334,\n                true)\n            .withApiKey(\"<JWT>\")\n            .build());\n```\n\n----------------------------------------\n\nTITLE: Setting Oracle Cloud Compartment OCID Environment Variable\nDESCRIPTION: Sets the Oracle Cloud Infrastructure compartment OCID as an environment variable for use in the application.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport COMPARTMENT_OCID=\"<your-compartment-ocid>\"\n```\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nos.environ[\"COMPARTMENT_OCID\"] = \"<your-compartment-ocid>\"\n```\n\n----------------------------------------\n\nTITLE: Creating FAQ Dataset Class for Quaterion\nDESCRIPTION: This code defines a custom FAQDataset class that inherits from torch.utils.data.Dataset. It reads FAQ data from a JSONL file and creates SimilarityPairSample objects for each question-answer pair, assigning unique subgroups to questions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/faq-question-answering.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom typing import List, Dict\n\nfrom torch.utils.data import Dataset\nfrom quaterion.dataset.similarity_samples import SimilarityPairSample\n\n\nclass FAQDataset(Dataset):\n    \"\"\"Dataset class to process .jsonl files with FAQ from popular cloud providers.\"\"\"\n    \n    def __init__(self, dataset_path):\n        self.dataset: List[Dict[str, str]] = self.read_dataset(dataset_path)\n          \n    def __getitem__(self, index) -> SimilarityPairSample:\n        line = self.dataset[index]\n        question = line[\"question\"]\n        # All questions have a unique subgroup\n        # Meaning that all other answers are considered negative pairs\n        subgroup = hash(question)\n        return SimilarityPairSample(\n            obj_a=question,\n            obj_b=line[\"answer\"], \n            score=1, \n            subgroup=subgroup\n        )\n      \n    def __len__(self):\n        return len(self.dataset)\n      \n    @staticmethod\n    def read_dataset(dataset_path) -> List[Dict[str, str]]:\n        \"\"\"Read jsonl-file into a memory.\"\"\"\n        with open(dataset_path, \"r\") as fd:\n            return [json.loads(json_line) for json_line in fd]\n```\n\n----------------------------------------\n\nTITLE: Implementing Efficient Euclidean Distance Matrix Calculation in PyTorch\nDESCRIPTION: A function that efficiently computes the Euclidean distance matrix between all pairs of embeddings in a batch, using matrix operations and handling numerical stability issues. This implementation follows the Euclidean Distance Matrix Trick.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/triplet-loss.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef euclidean_distance_matrix(x):\n  \"\"\"Efficient computation of Euclidean distance matrix\n\n  Args:\n    x: Input tensor of shape (batch_size, embedding_dim)\n    \n  Returns:\n    Distance matrix of shape (batch_size, batch_size)\n  \"\"\"\n  # step 1 - compute the dot product\n\n  # shape: (batch_size, batch_size)\n  dot_product = torch.mm(x, x.t())\n\n  # step 2 - extract the squared Euclidean norm from the diagonal\n\n  # shape: (batch_size,)\n  squared_norm = torch.diag(dot_product)\n\n  # step 3 - compute squared Euclidean distances\n\n  # shape: (batch_size, batch_size)\n  distance_matrix = squared_norm.unsqueeze(0) - 2 * dot_product + squared_norm.unsqueeze(1)\n\n  # get rid of negative distances due to numerical instabilities\n  distance_matrix = F.relu(distance_matrix)\n\n  # step 4 - compute the non-squared distances\n  \n  # handle numerical stability\n  # derivative of the square root operation applied to 0 is infinite\n  # we need to handle by setting any 0 to eps\n  mask = (distance_matrix == 0.0).float()\n\n  # use this mask to set indices with a value of 0 to eps\n  distance_matrix += mask * eps\n\n  # now it is safe to get the square root\n  distance_matrix = torch.sqrt(distance_matrix)\n\n  # undo the trick for numerical stability\n  distance_matrix *= (1.0 - mask)\n\n  return distance_matrix\n```\n\n----------------------------------------\n\nTITLE: Creating Keyword Matching Condition in Qdrant\nDESCRIPTION: Imports and uses ConditionFactory to create a keyword match condition for a specific field with multiple potential values\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-any/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.matchKeywords;\n\nmatchKeywords(\"color\", List.of(\"black\", \"yellow\"));\n```\n\n----------------------------------------\n\nTITLE: Range Filtering in Qdrant\nDESCRIPTION: Shows how to use range conditions for filtering numeric values. Supports greater than, less than, and equal to comparisons for float and integer payloads.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/filtering.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"must\": [\n    {\n      \"key\": \"number_field\",\n      \"range\": {\n        \"gte\": 0,\n        \"lt\": 10\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Grouped Vectors with Collection Lookup in Qdrant\nDESCRIPTION: Executes a grouped vector similarity search with collection lookup functionality. The query groups results by document_id, limits to 2 groups with 2 results each, and performs a lookup to fetch title and text payload fields from a documents collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-groups/with-lookup/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.queryGroups(\"{collection_name}\", {\n    query: [1.1],\n    group_by: \"document_id\",\n    limit: 2,\n    group_size: 2,\n    with_lookup: {\n        collection: \"documents\",\n        with_payload: [\"title\", \"text\"],\n        with_vectors: false,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Aleph Alpha Embeddings and Qdrant Client\nDESCRIPTION: Sets up the embedding model using Aleph Alpha and initializes the Qdrant client for vector storage. Configures the collection name and normalizes embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-contract-management-stackit-aleph-alpha.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nembeddings = AlephAlphaAsymmetricSemanticEmbedding(\n    model=\"luminous-base\",\n    aleph_alpha_api_key=os.environ[\"ALEPH_ALPHA_API_KEY\"],\n    normalize=True,\n)\n\nqdrant = Qdrant(\n    client=client,\n    collection_name=\"contracts\",\n    embeddings=embeddings,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Meeting Data in Python\nDESCRIPTION: This Python code initializes the `MeetingData` class, loading meeting data and initializing the Qdrant client and embedding model.  It sets up the data directory, loads the meetings, and establishes a connection to the Qdrant vector database using environment variables.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass MeetingData:\n    def _initialize(self):\n        self.data_dir = Path(__file__).parent.parent / 'data'\n        self.meetings = self._load_meetings()\n        \n        self.qdrant_client = QdrantClient(\n            url=os.getenv('qdrant_url'),\n            api_key=os.getenv('qdrant_api_key')\n        )\n        self.embedding_model = SentenceTransformer('all-MiniLM-L6-v2')\n```\n\n----------------------------------------\n\nTITLE: Defining Qdrant Logo with SVG Paths\nDESCRIPTION: An SVG implementation of the Qdrant logo using path elements and masks. The SVG contains multiple detailed path definitions that create the visual identity with precise coordinates and styling.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_3\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><mask id=\"path-1-inside-1_1622_6710\" fill=\"white\"><path d=\"M55.2148 42.0419C55.2723 42.0498 55.2848 42.0521 55.3408 42.0594C56.2775 42.1867 57.1978 42.3555 57.9023 42.6704C58.5553 42.9587 58.938 43.3235 59.2874 43.9738C59.8187 44.96 59.8534 46.3415 59.3732 47.3871C59.0145 48.1651 58.2271 48.8175 57.5083 49.1633C56.7618 49.5252 56.0263 49.6976 55.1827 49.7939C53.7074 49.9563 52.114 49.6507 50.7865 49.0086C50.0011 48.625 49.042 47.9645 48.5582 47.1136C48.2024 46.4902 48.2137 45.6791 48.6466 45.0866C49.3365 44.1423 50.8142 43.9344 51.9272 43.9738C52.7758 44.0067 54.3036 44.269 55.1093 44.5556C55.3326 44.6363 56.1562 44.9571 56.2999 45.1043C56.4011 45.2066 56.4667 45.3554 56.4213 45.4929C56.2372 46.0559 54.869 46.3527 54.4739 46.4123C53.4162 46.5743 52.8674 46.174 51.665 45.6993C51.3665 45.5824 50.9687 45.4527 50.6648 45.4246C50.1189 45.3726 49.4595 45.5255 49.3553 46.1214C49.3035 46.4285 49.6637 46.7158 49.9384 46.8365C50.5834 47.1136 51.1077 47.2132 51.7425 47.2217C53.6179 47.2526 55.7254 46.9439 57.2593 45.8571C57.4693 45.7072 57.6755 45.4879 57.6777 45.2113C57.6844 44.6529 56.7054 44.3115 56.7054 44.3115C55.6722 43.8807 53.763 43.6711 52.7795 43.5901C51.7474 43.5007 50.1235 43.3671 49.7336 43.3097C49.3321 43.2524 48.8961 43.1714 48.5484 43.0156C48.1992 42.8578 47.8575 42.5047 47.7561 42.1141C47.5763 41.4099 47.8057 40.5459 48.1968 39.9834C49.2217 38.5099 51.6225 37.9503 53.4161 37.728C55.1521 37.512 57.9585 37.5142 59.6636 38.4202C59.9268 38.5614 60.0613 38.6926 60.0063 38.974C59.8952 39.5024 59.4981 39.8429 59.0168 39.9921C58.5119 40.1528 57.4674 40.2154 57.0087 40.2443C54.953 40.3595 52.4689 40.2991 50.5109 40.833C50.3575 40.8768 50.0925 40.9483 50.0064 41.0445C49.6999 41.3772 50.5752 41.4722 50.7628 41.5103C50.8185 41.5236 50.8293 41.5255 50.8875 41.5318L55.2148 42.0419ZM42.9856 32.8757C42.9856 32.8757 43.3199 32.3742 43.6001 31.9938C44.1102 31.3009 45.0334 30.3401 45.7287 29.7452C45.9413 29.5635 46.1921 29.3577 46.1921 29.3577C46.1921 29.3577 45.7999 29.3982 45.5776 29.4437C45.0502 29.5463 44.2767 30.0604 43.8902 30.3926C43.2525 30.9385 42.5513 31.8259 42.8686 32.6144C42.9146 32.7258 42.9856 32.8757 42.9856 32.8757ZM46.5307 33.8244C47.5381 33.7549 48.4818 33.4649 49.3604 32.9775C50.2221 32.4954 51.4894 31.5552 51.358 30.45C51.318 30.0922 51.0838 29.8221 50.7881 29.6961C50.4039 29.5296 50.2034 29.5564 49.7126 29.7023C49.356 29.8067 49.1953 29.87 48.8585 30.0627C47.8702 30.6369 46.4689 31.8657 45.7082 32.8465C45.5326 33.0778 45.3548 33.3364 45.2156 33.5137C45.1278 33.623 45.0596 33.7234 45.0681 33.7501C45.0985 33.8613 46.1373 33.8511 46.5307 33.8244ZM43.9656 35.7084C43.8618 35.8184 43.7518 36.0834 43.6378 36.2752C43.5769 36.3779 43.4641 36.5101 43.3894 36.5631C43.1272 36.7559 42.9051 36.7649 42.6519 36.5421C42.297 36.2281 42.0917 35.7425 42.0771 35.2702C42.0695 35.0641 42.1049 34.836 42.0659 34.6622C42.0013 34.3688 41.7077 34.0666 41.5494 33.7861C41.3636 33.4557 41.2132 32.8795 41.1945 32.5075C41.1307 31.3476 41.7421 30.2791 42.5364 29.4364C43.3362 28.5842 44.3827 27.876 45.5208 27.3939C46.5965 26.9407 48.173 26.6318 49.3543 27.041C49.7389 27.1728 50.2747 27.5 50.5439 27.8429C50.6011 27.9141 50.6477 27.991 50.7064 28.0287C50.7589 28.0622 50.8963 28.0754 51.0056 28.0954C51.3824 28.1608 51.9249 28.446 52.1465 28.636C52.5917 29.0201 52.8356 29.3872 52.9484 29.92C53.1747 30.992 52.5574 32.1682 51.8542 32.884C50.6502 34.116 49.4612 34.9822 47.921 35.5852C47.2444 35.8495 46.1908 36.0964 45.4233 36.0273C45.1849 36.0075 44.9401 35.9447 44.708 35.9293C44.5895 35.9191 44.1565 35.8074 44.1102 35.7759C44.0528 35.7318 43.9786 35.6935 43.9656 35.7084ZM45.3413 38.0852C45.3882 38.0932 45.4604 38.1142 45.5226 38.1381C46.0626 38.3435 46.2847 38.8432 46.4178 39.3921C46.726 40.6667 46.8576 43.4866 46.9088 44.5903C46.9465 45.4188 46.9672 46.2339 47.0019 47.0527C47.0314 47.7462 47.0867 48.6682 46.9421 49.3179C46.8896 49.5516 46.7333 49.8233 46.5095 49.9625C46.2531 50.1266 45.6696 50.139 45.3488 50.0729C44.5582 49.9094 44.3014 49.4011 44.1885 48.6192C43.9203 46.7535 44.0495 43.092 44.2078 41.547C44.2604 41.0367 44.4526 39.4016 44.719 38.716C44.81 38.4848 45.0038 38.0192 45.3413 38.0852ZM21.2899 41.1893C21.2899 41.1893 20.1132 41.2726 19.3034 41.3625C18.273 41.4735 16.3371 41.8077 15.2196 42.2068C14.8844 42.3268 14.2035 42.6117 14.1443 42.9564C14.0822 43.3136 14.3039 43.593 14.5505 43.882C14.693 44.0499 15.5001 44.8262 15.7264 45.0149C16.675 45.8068 18.5984 47.0282 20.0151 47.6213C20.5018 47.8227 21.307 48.1109 21.307 48.1109C21.307 48.1109 21.2472 45.8184 21.2579 43.5601C21.2642 42.3688 21.2899 41.1893 21.2899 41.1893ZM42.865 42.1017C42.9324 42.7176 42.7741 43.8821 42.7467 44.0357C42.6965 44.3897 42.4296 45.2063 42.3853 45.306C42.1698 45.8023 41.9573 46.2089 41.7321 46.6145C41.3463 47.3089 40.4288 48.4097 39.8842 48.8809C37.8588 50.6315 34.7234 51.6282 32.0335 51.9566C30.2084 52.177 28.1111 52.1447 26.1771 51.7868C25.5115 51.6658 24.521 51.4375 24.521 51.4375C24.521 51.4375 24.5242 51.8335 24.4925 52.112C24.4771 52.2391 24.3815 52.5736 24.3278 52.6819C24.1872 52.9724 23.9563 53.1223 23.6206 53.1868C23.2154 53.262 22.7857 53.287 22.4113 53.127C21.7965 52.8683 21.5759 52.2932 21.4687 51.6299C21.3821 51.0994 21.2914 50.1772 21.2914 50.1772C21.2914 50.1772 20.8315 49.9594 20.4481 49.7681C19.2703 49.1878 18.1517 48.4846 17.173 47.7615C16.9019 47.5591 15.7371 46.5836 15.48 46.3414C14.7591 45.657 14.1105 44.9761 13.6172 44.1024C13.2336 43.4198 13.1232 42.814 13.4149 42.0908C13.8172 41.0827 15.2624 40.3237 16.2516 39.8912C16.9776 39.5707 19.2351 38.8335 20.1729 38.6969C20.6158 38.6335 21.3029 38.5105 21.3451 38.4831C21.3623 38.4698 21.3743 38.4586 21.3868 38.4444C21.4084 38.4139 21.4449 37.416 21.4378 37.051C21.4287 36.6921 21.7035 34.3348 21.7918 33.8363C21.8378 33.5668 22.042 32.5291 22.2504 32.2567C22.3867 32.0726 22.6278 32.0875 22.8244 32.2083C23.8999 32.8771 24.2267 35.1967 24.3067 36.3768C24.3545 37.0959 24.3783 38.1775 24.3783 38.1775C24.3783 38.1775 25.6122 38.141 26.3712 38.1625C27.1087 38.1797 27.9217 38.2961 28.6873 38.4181C29.6673 38.5752 31.5777 38.9919 32.6734 39.5474C33.5756 40.0048 34.42 40.7754 34.6937 41.591C34.9478 42.3386 34.9098 42.856 34.5226 43.5308C34.0872 44.2927 33.2638 44.859 32.4289 44.9063C32.1804 44.9206 31.2452 44.7964 30.9575 44.5736C30.8446 44.4848 30.8504 44.3245 30.9319 44.2158C30.9628 44.1777 31.3999 43.9452 31.6579 43.8096C31.7798 43.7445 31.8931 43.6645 31.9953 43.5715C32.2096 43.3827 32.4025 43.1749 32.381 42.9313C32.3514 42.6152 32.0168 42.4202 31.6979 42.2948C30.2018 41.7004 27.2146 41.207 25.7711 41.1216C25.2061 41.0885 24.4024 41.0601 24.4024 41.0601L24.5723 49.0312C24.5723 49.0312 25.2367 49.1578 25.7604 49.2427C26.0608 49.2882 27.3339 49.4028 27.6722 49.4112C30.2481 49.4792 33.1231 49.2485 35.487 48.133C36.5248 47.6446 37.4769 47.0365 38.1977 46.2134C39.1478 45.1242 39.6453 43.6335 39.5136 42.0766C39.3693 40.3762 38.1726 38.3576 37.2169 37.1286C34.6919 33.8814 30.3637 31.2102 26.5559 29.6442C22.6684 28.0465 18.8262 27.1273 14.7004 26.9734C13.6368 26.934 11.3177 26.9876 10.1455 27.3119C9.97801 27.3591 9.80922 27.4155 9.65374 27.4504C9.53092 27.4805 9.33737 27.5618 9.28423 27.6048C9.26339 27.6223 9.24383 27.6413 9.22568 27.6615C9.22568 27.6615 9.29796 27.7015 9.36701 27.7307C9.49119 27.7849 10.0139 27.8173 10.2844 27.8668C10.5264 27.9124 10.7784 28.0395 10.8781 28.2168C10.9729 28.3854 10.9847 28.5183 10.8715 28.6589C10.6059 28.9819 9.60611 28.9274 9.16588 28.8578C8.70838 28.7849 8.13878 28.6449 8.03415 28.2465C7.91278 27.7774 8.13566 27.3175 8.37641 26.8924C8.86012 26.0418 9.55296 25.5993 10.5676 25.3223C12.0087 24.9257 13.8284 24.6485 15.1892 24.5965C18.2693 24.4801 21.1844 25.0187 24.1687 25.9248C25.8767 26.4412 28.1128 27.3078 29.7498 28.0961C30.9245 28.6624 32.7753 29.704 33.815 30.3847C34.1429 30.6011 36.0618 32.011 36.3598 32.2589C36.9816 32.7672 37.7949 33.4979 38.3839 34.0823C39.5233 35.2114 40.9405 36.9422 41.629 38.3159C41.7947 38.6449 41.923 38.9685 42.1367 39.3498C42.2102 39.4804 42.5247 40.2617 42.577 40.4873C42.6288 40.7106 42.7048 41.0388 42.7155 41.0518C42.7307 41.1718 42.8765 41.843 42.865 42.1017ZM81.5865 40.3392C80.1441 40.6718 76.3512 40.8565 76.3512 40.8565L75.8729 42.3548C75.8729 42.3548 77.7684 42.1929 79.1473 42.337C79.1473 42.337 79.5941 42.2851 79.6466 42.8442C79.6644 43.3656 79.6023 43.9252 79.6023 43.9252C79.6023 43.9252 79.5737 44.2637 79.094 44.3498C78.5741 44.4364 75.0084 44.5743 75.0084 44.5743L74.431 46.5272C74.431 46.5272 74.2165 46.9787 74.6974 46.8498C75.1441 46.7302 78.8802 46.0292 79.3669 46.1301C79.8883 46.2595 80.4654 46.9548 80.2986 47.5883C80.0997 48.3736 76.3708 50.7518 74.1 50.5858C74.1 50.5858 72.9067 50.6628 71.8981 49.0524C70.9588 47.5177 72.2541 44.612 72.2541 44.612C72.2541 44.612 71.6604 43.2555 72.0906 42.7957C72.0906 42.7957 72.3467 42.5634 73.0931 42.5109L74.007 40.62C74.007 40.62 72.966 40.6917 72.3467 39.9258C71.7698 39.1993 71.7214 38.8654 72.1637 38.6647C72.6367 38.4312 76.9721 37.6399 79.9553 37.7403C79.9553 37.7403 80.9921 37.6385 81.8912 39.4368C81.8914 39.4369 82.327 40.1642 81.5865 40.3392ZM70.3659 47.6095C69.9836 48.5087 68.9736 49.4685 67.719 48.8719C66.4805 48.2741 64.5077 44.2364 64.5077 44.2364C64.5077 44.2364 63.7588 42.7308 63.6147 42.7696C63.6147 42.7696 63.4529 42.4756 63.3537 44.1209C63.2505 45.7592 63.3736 48.9538 62.72 49.4566C62.1009 49.9608 61.3513 49.7601 60.9625 49.171C60.6091 48.5907 60.4621 47.2118 60.6549 44.7899C60.8815 42.3634 61.4452 39.7817 62.1654 38.9778C62.8846 38.1793 63.462 38.759 63.687 38.9692C63.687 38.9692 64.649 39.8412 66.2354 42.4016L66.5154 42.8752C66.5154 42.8752 67.957 45.2941 68.1076 45.2885C68.1076 45.2885 68.2255 45.3997 68.3305 45.3198C68.4818 45.2765 68.4208 44.5009 68.4208 44.5009C68.4208 44.5009 68.1217 41.8647 66.8065 37.4027C66.8065 37.4027 66.6076 36.8463 66.7421 36.3249C66.8757 35.7981 67.4038 36.0454 67.4038 36.0454C67.4038 36.0454 69.4422 37.0703 70.4316 40.3891C71.4145 43.7088 70\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages in TypeScript\nDESCRIPTION: This snippet imports the necessary classes from the PremAI and Qdrant SDKs for AI model handling and Qdrant operations in TypeScript.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Prem from '@premai/prem-sdk';\nimport { QdrantClient } from '@qdrant/js-client-rest';\n```\n\n----------------------------------------\n\nTITLE: Configuring Sort Order in Qdrant Query\nDESCRIPTION: TypeScript configuration object that specifies sorting parameters for Qdrant queries. Includes sort key, direction (ascending/descending), and a starting point for pagination.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-order-by-advanced/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\norder_by: {\n    key: \"timestamp\",\n    direction: \"desc\", // default is \"asc\"\n    start_from: 123, // start from this value\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML iframe\nDESCRIPTION: HTML code for embedding a YouTube video about metadata automation with standard iframe attributes and security parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/metadata-deasy-labs.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/R-G2i63mmPw?si=lRtbuGmrrjqU8aZ5\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Upserting Point with Sparse Vector in Go\nDESCRIPTION: This code initializes a Qdrant client and upserts a point with a sparse vector into a specified collection. It demonstrates client creation, point structure definition, and the upsert operation using the Qdrant Go client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/sparse-vectors-single/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Upsert(context.Background(), &qdrant.UpsertPoints{\n\tCollectionName: \"{collection_name}\",\n\tPoints: []*qdrant.PointStruct{\n\t\t{\n\t\t\tId: qdrant.NewIDNum(1),\n\t\t\tVectors: qdrant.NewVectorsMap(\n\t\t\t\tmap[string]*qdrant.Vector{\n\t\t\t\t\t\"text\": qdrant.NewVectorSparse(\n\t\t\t\t\t\t[]uint32{1, 3, 5, 7},\n\t\t\t\t\t\t[]float32{0.1, 0.2, 0.3, 0.4}),\n\t\t\t\t}),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading EventExtractor\nDESCRIPTION: Shows how to persist and reload the EventExtractor module, which is particularly useful for preserving optimized versions of the pipeline.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-vultr-dspy-ollama.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nextractor.save(\"event_extractor\")\n\nsecond_extractor = EventExtractor()\nsecond_extractor.load(\"event_extractor\")\n```\n\n----------------------------------------\n\nTITLE: Deleting Specified Vectors from Points via REST API\nDESCRIPTION: This code snippet provides a way to delete specific vectors from points in Qdrant using the REST API. Other vectors in the points remain intact.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/points.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/delete-vectors/simple/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection Points with Nested Filters (HTTP)\nDESCRIPTION: This HTTP POST request demonstrates how to scroll through points in a Qdrant collection using nested filters. It searches for points where the nested 'diet' object contains 'food' matching 'meat' and 'likes' being true.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-nested-clause/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must\": [{\n            \"nested\": {\n                \"key\": \"diet\",\n                \"filter\":{\n                    \"must\": [\n                        {\n                            \"key\": \"food\",\n                            \"match\": {\n                                \"value\": \"meat\"\n                            }\n                        },\n                        {\n                            \"key\": \"likes\",\n                            \"match\": {\n                                \"value\": true\n                            }\n                        }\n                    ]\n                }\n            }\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Server Settings using YAML\nDESCRIPTION: Complete YAML configuration for a Qdrant server instance, including CORS, TLS, API keys, clustering, consensus, and telemetry settings. The configuration controls security features like HTTPS, client certificate verification, JWT RBAC, and defines cluster communication parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/configuration.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# If enabled, browsers would be allowed to query REST endpoints regardless of query origin.\n# More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n# Default: true\nenable_cors: true\n\n# Enable HTTPS for the REST and gRPC API\nenable_tls: false\n\n# Check user HTTPS client certificate against CA file specified in tls config\nverify_https_client_certificate: false\n\n# Set an api-key.\n# If set, all requests must include a header with the api-key.\n# example header: `api-key: <API-KEY>`\n#\n# If you enable this you should also enable TLS.\n# (Either above or via an external service like nginx.)\n# Sending an api-key over an unencrypted channel is insecure.\n#\n# Uncomment to enable.\n# api_key: your_secret_api_key_here\n\n# Set an api-key for read-only operations.\n# If set, all requests must include a header with the api-key.\n# example header: `api-key: <API-KEY>`\n#\n# If you enable this you should also enable TLS.\n# (Either above or via an external service like nginx.)\n# Sending an api-key over an unencrypted channel is insecure.\n#\n# Uncomment to enable.\n# read_only_api_key: your_secret_read_only_api_key_here\n\n# Uncomment to enable JWT Role Based Access Control (RBAC).\n# If enabled, you can generate JWT tokens with fine-grained rules for access control.\n# Use generated token instead of API key.\n#\n# jwt_rbac: true\n\n# Hardware reporting adds information to the API responses with a\n# hint on how many resources were used to execute the request.\n#\n# Uncomment to enable.\n# hardware_reporting: true\n\ncluster:\n  # Use `enabled: true` to run Qdrant in distributed deployment mode\n  enabled: false\n\n  # Configuration of the inter-cluster communication\n  p2p:\n    # Port for internal communication between peers\n    port: 6335\n\n    # Use TLS for communication between peers\n    enable_tls: false\n\n  # Configuration related to distributed consensus algorithm\n  consensus:\n    # How frequently peers should ping each other.\n    # Setting this parameter to lower value will allow consensus\n    # to detect disconnected nodes earlier, but too frequent\n    # tick period may create significant network and CPU overhead.\n    # We encourage you NOT to change this parameter unless you know what you are doing.\n    tick_period_ms: 100\n\n# Set to true to prevent service from sending usage statistics to the developers.\n# Read more: https://qdrant.tech/documentation/guides/telemetry\ntelemetry_disabled: false\n\n# TLS configuration.\n# Required if either service.enable_tls or cluster.p2p.enable_tls is true.\ntls:\n  # Server certificate chain file\n  cert: ./tls/cert.pem\n\n  # Server private key file\n  key: ./tls/key.pem\n\n  # Certificate authority certificate file.\n  # This certificate will be used to validate the certificates\n  # presented by other nodes during inter-cluster communication.\n  #\n  # If verify_https_client_certificate is true, it will verify\n  # HTTPS client certificate\n  #\n  # Required if cluster.p2p.enable_tls is true.\n  ca_cert: ./tls/cacert.pem\n\n  # TTL in seconds to reload certificate from disk, useful for certificate rotations.\n  # Only works for HTTPS endpoints. Does not support gRPC (and intra-cluster communication).\n  # If `null` - TTL is disabled.\n  cert_ttl: 3600\n```\n\n----------------------------------------\n\nTITLE: Inserting Points into Qdrant Collection using HTTP\nDESCRIPTION: This HTTP PUT request is used to insert multiple points into a designated collection within Qdrant. Each point includes an ID, a payload containing a user group ID, and a vector representing the point's coordinates. The expected input is a structured JSON object representing these points.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-tenant-group-id/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/points\n{\n    \"points\": [\n        {\n            \"id\": 1,\n            \"payload\": {\"group_id\": \"user_1\"},\n            \"vector\": [0.9, 0.1, 0.1]\n        },\n        {\n            \"id\": 2,\n            \"payload\": {\"group_id\": \"user_1\"},\n            \"vector\": [0.1, 0.9, 0.1]\n        },\n        {\n            \"id\": 3,\n            \"payload\": {\"group_id\": \"user_2\"},\n            \"vector\": [0.1, 0.1, 0.9]\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Collection Configuration Asynchronously with Qdrant Java Client\nDESCRIPTION: This code snippet demonstrates how to asynchronously update a collection's configuration in a Qdrant database. It specifically sets an indexing threshold using the OptimizersConfigDiff class. The required dependencies include the Qdrant Java client library, which must be properly imported. The main parameters used are the collection name and the indexing threshold value, with the expected output being an updated collection configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/simple/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\nimport io.qdrant.client.grpc.Collections.UpdateCollection;\n\nclient.updateCollectionAsync(\n    UpdateCollection.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setOptimizersConfig(\n            OptimizersConfigDiff.newBuilder().setIndexingThreshold(10000).build())\n        .build());\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with FastEmbed\nDESCRIPTION: Code showing how to generate embeddings using FastEmbed's dot embed generator function, which handles passage and query mapping for question-answer contexts with a 512 token limit for BGE base model.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/fastembed-fast-lightweight-embedding-generation-nirant-kasliwal-vector-space-talks-004.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndot_embed = generator()\nembeddings_list = list(dot_embed)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Go Client\nDESCRIPTION: Establishes a connection to a Qdrant vector database running on localhost:6334 and executes a vector similarity search query. The query includes vector parameters and excludes the 'city' field from the payload results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/exclude-fields/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tWithPayload:    qdrant.NewWithPayloadExclude(\"city\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Mistral AI Client\nDESCRIPTION: Installs the official Mistral AI Python SDK via pip for interacting with Mistral's embedding models.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/mistral.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install mistralai\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Search Tool\nDESCRIPTION: This Python code defines a web search tool using Brave Search. The `search_tool` function takes a query as input and uses the BraveSearch API (with the `brave_key` API key) to retrieve the top 3 search results. The `@tool` decorator indicates that this function can be used as a tool by the agent.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@tool(\"web_search_tool\")\ndef search_tool(query):\n    search = BraveSearch.from_api_key(api_key=brave_key, search_kwargs={\"count\": 3})\n    return search.run(query)\n```\n\n----------------------------------------\n\nTITLE: Creating Collection Snapshot - HTTP POST Endpoint\nDESCRIPTION: HTTP POST endpoint for creating a snapshot of a specified Qdrant collection. The collection name is provided as a URL parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/create-collection-snapshot/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/snapshots\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Go\nDESCRIPTION: This snippet demonstrates the initialization of a Qdrant client using the specified host and port settings. It requires the Qdrant Go client library to be imported to handle the client configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-lookup-from/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing Page Cache Before Benchmarks in Bash\nDESCRIPTION: Command to clear the page cache between benchmark runs, ensuring accurate memory measurements by preventing the use of cached data from previous runs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/memory-consumption.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo bash -c 'sync; echo 1 > /proc/sys/vm/drop_caches'\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: This creates a `.env.local` file to store API keys and Qdrant URL. This ensures that sensitive information like API keys are not hardcoded in the script.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenai_api_key=your_openai_key_here\nanthropic_api_key=your_anthropic_key_here\nqdrant_url=your_qdrant_url_here\nqdrant_api_key=your_qdrant_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Importing Sparse Text Embedding Models from FastEmbed\nDESCRIPTION: Code to import the SparseTextEmbedding class from the FastEmbed library, which provides access to sparse text embedding models.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastembed import SparseTextEmbedding\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Collection with MMAP for Vectors and HNSW Graph\nDESCRIPTION: HTTP request to create a Qdrant collection with memory-mapped file storage for both vectors and the HNSW graph, maximizing memory efficiency at the cost of search speed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/memory-consumption.md#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/benchmark \n{\n  \"vectors\": {\n    ...\n    \"on_disk\": true\n  },\n  \"hnsw_config\": {\n    \"on_disk\": true\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed - Vector Space Talk\nDESCRIPTION: HTML iframe code for embedding a YouTube video of the interview with Stanislas Polu.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-x-dust-how-vector-search-helps-make-work-work-better-stan-polu-vector-space-talk-010.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/toIgkJuysQ4?si=uzlzQtOiSL5Kcpk5\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Updating a Collection with Strict Mode in TypeScript\nDESCRIPTION: TypeScript code for updating an existing Qdrant collection to enable strict mode with unindexed filtering retrieve restriction using the Qdrant JavaScript client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.updateCollection(\"{collection_name}\", {\n  strict_mode_config: {\n    enabled: true,\n    unindexed_filtering_retrieve: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Reqwest Dependency in Cargo.toml\nDESCRIPTION: Specifies the Reqwest crate dependency in Cargo.toml for making HTTP requests to the Mighty API.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/mighty.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nreqwest =  { version = \"0.11.18\", default-features = false, features = [\"json\", \"rustls-tls\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing LlamaIndex and Qdrant Dependencies\nDESCRIPTION: Command to install the required Python packages for LlamaIndex and Qdrant integration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/llama-index-multitenancy.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install llama-index llama-index-vector-stores-qdrant\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenLIT in Python Application\nDESCRIPTION: This snippet shows how to initialize OpenLIT in a Python application. It requires the OpenLIT library, which can be installed using pip. The code initializes OpenLIT to automatically direct trace data to the console. It allows customization to forward telemetry data to an HTTP OTLP endpoint or use custom authentication with OpenTelemetry backends.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/observability/openlit.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport openlit\n\nopenlit.init()\n```\n\n----------------------------------------\n\nTITLE: Installing Canopy SDK with Qdrant Support\nDESCRIPTION: Command to install the Canopy SDK with Qdrant integration using pip. This step is necessary to use Qdrant as a knowledge base in Canopy.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/canopy.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install canopy-sdk[qdrant]\n```\n\n----------------------------------------\n\nTITLE: Deleting Snapshots in Qdrant using Rust Client\nDESCRIPTION: Demonstrates how to connect to a Qdrant instance and delete a specific snapshot from a collection. Uses the DeleteSnapshotRequestBuilder to construct the deletion request with collection and snapshot name parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/delete-collection-snapshot/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::DeleteSnapshotRequestBuilder;\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .delete_snapshot(DeleteSnapshotRequestBuilder::new(\n        \"{collection_name}\",\n        \"{snapshot_name}\",\n    ))\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Styling to Streamlit Interface in Python\nDESCRIPTION: This snippet implements custom CSS styling for the Streamlit interface, enhancing the aesthetics and readability of the output container. It allows for better user engagement through a pleasing interface.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nst.markdown(\"\"\"\n    <style>\n    .stApp {\n        max-width: 1200px;\n        margin: 0 auto;\n    }\n    .output-container {\n        background-color: #f0f2f6;\n        padding: 20px;\n        border-radius: 10px;\n        margin: 10px 0;\n    }\n    </style>\n\"\"\", unsafe_allow_html=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration\nDESCRIPTION: Initializes a Qdrant client and creates a new collection with 768-dimensional vectors using Cosine distance and Int8 scalar quantization. The configuration includes vector parameters setup and quantization settings with RAM storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/scalar-quantization-and-vectors-in-ram/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\nimport io.qdrant.client.grpc.Collections.QuantizationConfig;\nimport io.qdrant.client.grpc.Collections.QuantizationType;\nimport io.qdrant.client.grpc.Collections.ScalarQuantization;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(768)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setQuantizationConfig(\n                QuantizationConfig.newBuilder()\n                    .setScalar(\n                        ScalarQuantization.newBuilder()\n                            .setType(QuantizationType.Int8)\n                            .setAlwaysRam(true)\n                            .build())\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for Embedding Functionality\nDESCRIPTION: This snippet shows the additional Cargo.toml dependencies needed for implementing text embedding functionality, including reqwest for HTTP requests and serde for JSON deserialization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/serverless.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\nanyhow = \"1.0\"\nreqwest =  { version = \"0.11.18\", default-features = false, features = [\"json\", \"rustls-tls\"] }\nserde = \"1.0\"\n```\n\n----------------------------------------\n\nTITLE: Using Discovery Search with Query API in HTTP\nDESCRIPTION: Example of how to use the new Query API endpoint to perform Discovery search with target and context vectors\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"discover\": {\n      \"target\": <vector_input>,\n      \"context\": [\n        {\n          \"positive\": <vector_input>,\n          \"negative\": <vector_input>\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Embedding Process in Python\nDESCRIPTION: This snippet defines constants such as project ID, embedding model, collection name, server URL, and sample documents for use in Python.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nPROJECT_ID = 123\nEMBEDDING_MODEL = \"text-embedding-3-large\"\nCOLLECTION_NAME = \"prem-collection-py\"\nQDRANT_SERVER_URL = \"http://localhost:6333\"\nDOCUMENTS = [\n    \"This is a sample python document\",\n    \"We will be using qdrant and premai python sdk\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant with Genkit\nDESCRIPTION: Configuration setup for the Qdrant plugin in Genkit, including client parameters, collection name, and embedding model settings\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/genkit.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { qdrant } from 'genkitx-qdrant';\nimport { textEmbeddingGecko } from '@genkit-ai/vertexai';\n\nexport default configureGenkit({\n  plugins: [\n    qdrant([\n      {\n        clientParams: {\n          host: 'localhost',\n          port: 6333,\n        },\n        collectionName: 'some-collection',\n        embedder: textEmbeddingGecko,\n      },\n    ]),\n  ],\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Private Cloud Configuration in YAML\nDESCRIPTION: Defines the configuration for Qdrant's Private Cloud deployment option with custom pricing and maximum infrastructure control\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/pricing/qdrant-pricing-doors-b.md#2025-04-21_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n- id: 2\n  popular: false\n  title: Private Cloud\n  price: Custom\n  description: Price on request.\n```\n\n----------------------------------------\n\nTITLE: Defining a Vector Search Point with Payload in Qdrant\nDESCRIPTION: This snippet shows the structure of a point in Qdrant consisting of an id, vector, and payload. The payload contains metadata like price and category that can be used for filtering during search operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-filtering.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1, \n  \"vector\": [0.1, 0.2, 0.3, 0.4],\n  \"payload\": {\n    \"price\": 899.99,\n    \"category\": \"laptop\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Qdrant Query Implementation\nDESCRIPTION: TypeScript client implementation for querying Qdrant with majority consistency, using the official client library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nclient.query(\"{collection_name}\", {\n    query: [0.2, 0.1, 0.9, 0.7],\n    filter: {\n        must: [{ key: \"city\", match: { value: \"London\" } }],\n    },\n    params: {\n        hnsw_ef: 128,\n        exact: false,\n    },\n    limit: 3,\n    consistency: \"majority\",\n});\n```\n\n----------------------------------------\n\nTITLE: Batch Processing Data in Python\nDESCRIPTION: This Python code demonstrates how to batch process the data before upserting it into the Qdrant vector database. This increases the efficiency of writing to the database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbatch_size = 100\nfor i in range(0, len(points), batch_size):\n    batch = points[i:i + batch_size]\n    self.qdrant_client.upsert(\n        collection_name='zoom_recordings',\n        points=batch\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Scroll Query in C#\nDESCRIPTION: This code initializes a Qdrant client connected to a local instance and performs a scroll query on a specified collection. The query uses a filter to retrieve points with specific IDs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-has-id-filter/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(collectionName: \"{collection_name}\", filter: HasId([1, 3, 5, 7, 9, 11]));\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Scalar Quantization in Qdrant\nDESCRIPTION: This code demonstrates how to create a Qdrant collection with scalar quantization parameters in the configuration. It specifies int8 type quantization with a quantile of 0.99 and enables always keeping quantized vectors in RAM.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/quantization.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"quantization_config\": {\n    \"scalar\": {\n      \"type\": \"int8\",\n      \"quantile\": 0.99,\n      \"always_ram\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Collection with Recommendations - TypeScript\nDESCRIPTION: This code snippet demonstrates how to perform a query on a specified collection using the Qdrant client in TypeScript. It utilizes recommendation filtering through positive and negative sets of identifiers and specifies a limit on the number of results. The snippet expects a preconfigured Qdrant client and an existing collection to query from. The output is a subset of data organized by recommendation strength.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-named-vectors/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.query(\"{collection_name}\", {\n    query: {\n        recommend: {\n            positive: [100, 231],\n            negative: [718],\n        }\n    },\n    using: \"image\",\n    limit: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Example Payload Size Calculation\nDESCRIPTION: Example showing payload size calculation for 1 million points with 5KB JSON payloads\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/capacity-planning.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ntotal_payload_size = 1,000,000 * 5KB * 1.5\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Data with SVG Logos in YAML format\nDESCRIPTION: YAML configuration defining Qdrant customers with their IDs, names, and SVG logo representations. The SVG logos are embedded directly in the YAML as strings, preserving their vector format for display on the landing page.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncustomers:\n  - id: 0\n    name: Alphasense\n    logo: <svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M19.0737 40.3015H0V41.9809H19.0737V40.3015Z\" fill=\"#B4BACC\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M60.979 34.9029L62.2981 33.9427C63.178 35.302 64.5374 36.4618 66.4163 36.4618C68.1761 36.4618 69.4149 35.5015 69.4149 33.9829C69.4149 32.6235 68.4158 32.0637 66.9359 31.3833L65.2565 30.5838C63.6976 29.8245 61.8977 28.824 61.8977 26.625C61.8977 24.3054 63.9776 22.7867 66.3761 22.7867C68.4158 22.7867 70.0953 23.8259 71.014 25.3058L69.735 26.2661C68.9355 25.0661 67.6953 24.3871 66.336 24.3871C64.9766 24.3871 63.6963 25.0675 63.6963 26.546C63.6963 27.9053 64.7355 28.3848 66.0561 29.025L67.6953 29.8245C69.8542 30.8637 71.1345 31.9432 71.1345 33.9427C71.1345 36.4216 69.0948 38.0609 66.336 38.0609C64.0579 38.1024 62.0986 36.8623 60.979 34.9029ZM75.534 31.3847H82.4512C82.4111 29.345 80.9312 28.2254 79.2129 28.2254C77.3728 28.2656 75.9345 29.5044 75.534 31.3847ZM84.1307 32.9034H75.4938C75.7335 35.0623 77.3728 36.502 79.4928 36.502C80.8522 36.502 81.9316 35.902 82.8517 35.0221L83.8508 36.1819C82.7713 37.3417 81.2513 38.101 79.4928 38.101C76.2144 38.101 73.6952 35.6221 73.6952 32.3824C73.6952 29.1829 76.134 26.6638 79.2933 26.6638C82.0924 26.6638 84.2914 28.7035 84.2914 31.5815C84.2512 32.1843 84.1709 32.7039 84.1307 32.9034ZM96.3273 30.9843V37.8613H94.6077V31.1838C94.6077 29.4642 93.5684 28.2642 91.889 28.2642C90.2096 28.2642 89.0096 29.4642 89.0096 31.1838V37.8613H87.29V26.9451H88.889V28.1049C89.6886 27.225 90.8484 26.7054 92.2479 26.7054C94.8474 26.6652 96.3273 28.4651 96.3273 30.9843ZM98.9656 35.9824L100.045 34.8226C100.925 35.7828 101.845 36.502 103.204 36.502C104.364 36.502 105.284 35.9422 105.284 34.9431C105.284 33.9829 104.485 33.624 103.365 33.1833L102.326 32.7441C100.646 32.0637 99.6072 31.2642 99.6072 29.7053C99.6072 27.746 101.287 26.6666 103.286 26.6666C104.845 26.6666 106.085 27.3469 106.925 28.3862L105.886 29.4656C105.166 28.7062 104.206 28.2656 103.207 28.2656C102.168 28.2656 101.407 28.745 101.407 29.6249C101.407 30.3843 101.967 30.7044 103.167 31.224L104.166 31.6633C106.125 32.503 107.045 33.3427 107.045 34.9015C107.045 37.0202 105.245 38.101 103.207 38.101C101.285 38.1024 99.8455 37.1422 98.9656 35.9824ZM111.241 31.3847H118.158C118.118 29.345 116.638 28.2254 114.92 28.2254C113.081 28.2656 111.642 29.5044 111.241 31.3847ZM119.839 32.9034H111.202C111.442 35.0623 113.081 36.502 115.201 36.502C116.561 36.502 117.64 35.902 118.56 35.0221L119.559 36.1819C118.48 37.3417 116.96 38.101 115.201 38.101C111.923 38.101 109.404 35.6221 109.404 32.3824C109.404 29.1829 111.843 26.6638 115.002 26.6638C117.801 26.6638 120 28.7035 120 31.5815C119.958 32.1843 119.878 32.7039 119.839 32.9034ZM6.63734 22.7867L0 37.8613H3.2383L4.07801 35.9422H10.1555L10.9953 37.8613H14.2336L7.6364 22.7867H6.63734ZM7.11816 28.425L9.07749 33.423H5.11865L7.11816 28.425ZM30.7493 32.3034C30.7493 30.4245 29.4703 29.2245 27.8699 29.2245C26.4704 29.2245 25.0708 30.1446 25.0708 32.2632C25.0708 34.3819 26.4704 35.3422 27.8699 35.3422C29.4301 35.3824 30.7493 34.1838 30.7493 32.3034ZM28.4297 38.1412C27.0704 38.1412 25.9106 37.6618 25.111 36.7819V41.9795H22.0723V26.7455H24.8713V28.1451C25.6306 27.1058 26.911 26.5058 28.4297 26.5058C31.589 26.5058 33.8282 28.9446 33.8282 32.3034C33.8282 35.6623 31.589 38.1412 28.4297 38.1412ZM55.6206 33.7029V33.5824H53.2608C52.2617 33.5824 51.7019 33.9829 51.7019 34.702C51.7019 35.4614 52.3421 35.902 53.301 35.902C54.5412 35.902 55.6206 35.0235 55.6206 33.7029ZM58.6192 31.2642V37.8613H55.8201V36.7819C55.0206 37.6216 53.8608 38.1412 52.4211 38.1412C49.9823 38.1412 48.5828 36.7015 48.5828 34.8226C48.5828 32.7829 50.222 31.5843 52.7814 31.5843H55.5804V31.1048C55.5804 29.9048 54.9001 29.1455 53.5005 29.1455C52.3005 29.1455 51.4608 29.7053 50.5421 30.6656L48.9833 28.7866C50.3024 27.2277 51.8627 26.5072 53.822 26.5072C56.7 26.5058 58.6192 28.1049 58.6192 31.2642ZM16.0349 37.8613H19.0737V22.7867H16.0349V37.8613ZM42.2656 26.5058C41.0254 26.5058 39.946 26.9451 39.2268 27.7058V22.7881H36.188V37.8627H39.2268V31.3847C39.2268 30.1058 40.1067 29.2259 41.3455 29.2259C42.5843 29.2259 43.4254 30.0656 43.4254 31.3847V37.8627H46.4239V30.9843C46.4239 28.3058 44.8249 26.5058 42.2656 26.5058Z\" fill=\"#B4BACC\"/></svg>\n  - id: 1\n    name: Deutsche Telekom\n    logo: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"144\" height=\"64\" viewBox=\"0 0 144 64\" fill=\"none\"><g clip-path=\"url(#clip0_7999_27972)\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M0 30.5318H6.39461V36.9272H0V30.5318ZM19.18 30.5318H25.5746V36.9272H19.18V30.5318ZM38.3599 30.5318H44.7538V36.9272H38.3599V30.5318Z\" fill=\"#8F98B3\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M53.7531 40.8088C53.7531 45.0577 54.484 45.7424 59.051 45.7886V47.57H43.5215V45.7886C48.0901 45.7424 48.8195 45.0577 48.8195 40.8088V17.4692C43.567 17.5608 40.5064 21.0319 40.0497 27.3803L38.36 27.1077L38.6803 15.9628H63.893L64.2126 27.1077L62.5221 27.3803C62.0661 21.0327 58.9601 17.5608 53.7531 17.4692V40.8088Z\" fill=\"#8F98B3\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M57.7681 30.5318H64.1627V36.9272H57.7681V30.5318ZM76.7763 18.5574C76.7763 17.5423 76.7162 17.1719 76.4828 16.937C76.3065 16.7606 75.8975 16.6451 75.4493 16.6451H75.1952V16.0197H79.8192C81.9656 16.0197 83.4682 16.6451 84.6203 18.0299C85.6146 19.2205 86.1429 20.7423 86.1429 22.4983C86.1429 24.5092 85.4783 26.2451 84.2491 27.4365C83.157 28.5286 81.713 29.0354 79.8192 29.0354H75.1952V28.4116H75.4493C75.8975 28.4116 76.3065 28.2937 76.4828 28.1189C76.7162 27.8832 76.7763 27.5136 76.7763 26.4985V18.5574ZM78.5715 26.577C78.5715 28.0604 78.8064 28.3345 80.1704 28.3345C82.9814 28.3345 84.0558 26.7342 84.0558 22.4983C84.0558 18.381 82.9429 16.7029 80.2112 16.7029C79.488 16.7029 79.0405 16.8392 78.8064 17.0926C78.6108 17.3267 78.5715 17.5608 78.5715 18.381V26.577ZM89.2436 24.4884C89.2613 27.338 89.9267 28.5494 91.467 28.5494C92.5214 28.5494 93.2045 27.9826 93.8861 26.5385L94.4729 26.8505C93.635 28.5494 92.6184 29.3103 91.1559 29.3103C88.8924 29.3103 87.4283 27.4365 87.4283 24.4884C87.4283 21.7574 88.9116 19.7866 90.9587 19.7866C93.0874 19.7866 94.4922 21.6003 94.59 24.4884H89.2436ZM92.774 23.806C92.7932 21.7189 92.1494 20.4697 91.0573 20.4697C89.9652 20.4697 89.2821 21.7582 89.2613 23.806H92.774ZM102.022 27.0268C101.36 28.5502 100.462 29.2318 99.194 29.2318C98.3353 29.2318 97.6714 28.9006 97.3002 28.2752C96.929 27.6514 96.8127 27.0461 96.8127 25.582V22.2264C96.8127 20.938 96.6363 20.6653 95.8169 20.6653H95.6035V20.06L98.4523 19.9237V26.0895C98.4523 26.9298 98.5109 27.3187 98.6872 27.6907C98.842 28.0812 99.2333 28.3353 99.6622 28.3353C100.324 28.3353 100.95 27.9056 101.36 27.1239C101.73 26.4615 101.867 25.7591 101.867 24.6463V22.2264C101.867 20.938 101.691 20.6653 100.873 20.6653H100.578V20.06L103.507 19.9237V26.8512C103.507 28.1382 103.682 28.4324 104.503 28.4324H104.716V29.0369L102.022 29.174V27.0268ZM108.266 26.1288C108.266 26.9298 108.305 27.2802 108.404 27.6522C108.54 28.1204 108.911 28.4131 109.358 28.4131C110.099 28.4131 110.549 27.6137 110.549 26.2259V25.954H111.193V26.3237C111.193 28.236 110.411 29.231 108.87 29.231C108.129 29.231 107.524 28.9961 107.174 28.5671C106.745 28.0604 106.628 27.4943 106.628 26.128V20.7231H105.221V20.1763C106.919 19.7666 107.485 18.9856 107.72 16.6828H108.266V20.0584H110.901V20.7223H108.266V26.1288ZM117.575 22.8903H116.988C116.657 21.2314 115.916 20.4312 114.705 20.4312C113.865 20.4312 113.243 21.0165 113.243 21.7967C113.243 22.5376 113.633 22.8903 114.864 23.2808C116.11 23.6897 116.639 23.9239 117.069 24.2566C117.769 24.8026 118.102 25.4857 118.102 26.3629C118.102 28.0411 116.893 29.2318 115.173 29.2318C114.394 29.2318 113.944 29.0747 112.989 28.5094C112.925 28.4667 112.852 28.44 112.776 28.4316C112.637 28.4316 112.522 28.5671 112.443 28.8213L112.384 29.0362H111.838V25.7391H112.384C112.637 26.6548 112.833 27.1446 113.144 27.5528C113.633 28.2167 114.373 28.6064 115.173 28.6064C116.071 28.6064 116.736 27.924 116.736 27.0268C116.736 26.4615 116.442 25.954 115.936 25.6405C115.505 25.3679 115.486 25.3679 114.219 24.9382C112.656 24.4306 111.934 23.5927 111.934 22.3227C111.934 20.8787 113.007 19.8644 114.569 19.8644C115.194 19.8644 115.856 20.0592 116.403 20.3912C116.52 20.4497 116.616 20.4897 116.697 20.4897C116.814 20.4897 116.93 20.3326 116.988 20.06H117.575V22.8903ZM126.139 26.7534C125.436 28.5094 124.442 29.3103 122.939 29.3103C120.695 29.3103 119.153 27.3595 119.153 24.5099C119.153 21.7382 120.793 19.7873 123.134 19.7873C124.754 19.7873 126.022 20.8995 126.022 22.3058C126.022 23.0266 125.553 23.5349 124.91 23.5349C124.345 23.5349 123.916 23.0844 123.916 22.4798C123.916 21.9345 124.306 21.4848 124.832 21.4848C124.91 21.4848 124.949 21.4848 125.027 21.5425C124.735 20.8594 124.092 20.4689 123.31 20.4689C121.807 20.4689 121.046 21.8152 121.046 24.5092C121.046 27.2602 121.77 28.5671 123.251 28.5671C124.228 28.5671 124.969 27.9056 125.515 26.4993L126.139 26.7534ZM133.144 23.2207C133.144 22.0901 133.087 21.6396 132.852 21.2892C132.637 20.8995 132.287 20.7038 131.876 20.7038C131.232 20.7038 130.627 21.1336 130.257 21.8752C129.905 22.5977 129.768 23.3578 129.768 24.7033V26.8505C129.768 28.1589 129.944 28.4316 130.763 28.4316H131.075V29.0362H126.821V28.4316H127.134C127.953 28.4316 128.128 28.1382 128.128 26.8505V18.1862C128.128 16.8985 127.953 16.6259 127.134 16.6259H126.919V16.0197L129.768 15.8834V21.6781C130.392 20.4104 131.153 19.8644 132.286 19.8644C133.106 19.8644 133.769 20.157 134.161 20.7031C134.647 21.3854 134.784 22.0108 134.784 23.7082V26.8505C134.784 28.1589 134.96 28.4316 135.779 28.4316H135.993V29.0362H133.144V23.2207ZM138.74 24.4884C138.761 27.338 139.423 28.5494 140.966 28.5494C142.019 28.5494 142.702 27.9826 143.387 26.5385L143.971 26.8505C143.133 28.5494 142.118 29.3103 140.654 29.3103C138.39 29.3103 136.926 27.4365 136.926 24.4884C136.926 21.7574 138.41 19.7866 140.46 19.7866C142.587 19.7866 143.992 21.6003 144.088 24.4884H138.74ZM142.273 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Storage in Qdrant Connector\nDESCRIPTION: Demonstrates how to configure the Qdrant connector to store document text content in the Qdrant payload with custom text key specification.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/lakechain.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst connector = new QdrantStorageConnector.Builder()\n  .withScope(this)\n  .withIdentifier('QdrantStorageConnector')\n  .withCacheStorage(cache)\n  .withSource(source)\n  .withApiKey(qdrantApiKey)\n  .withCollectionName('{collection_name}')\n  .withStoreText(true)\n  .withTextKey('my-content')\n  .withUrl('https://xyz-example.eu-central.aws.cloud.qdrant.io:6333')\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Sample Data Structure for Dinosaur Diet\nDESCRIPTION: JSON structure showing two dinosaur records with their diet preferences stored as arrays of objects\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-filtering.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 1,\n    \"dinosaur\": \"t-rex\",\n    \"diet\": [\n      { \"food\": \"leaves\", \"likes\": false},\n      { \"food\": \"meat\", \"likes\": true}\n    ]\n  },\n  {\n    \"id\": 2,\n    \"dinosaur\": \"diplodocus\",\n    \"diet\": [\n      { \"food\": \"leaves\", \"likes\": true},\n      { \"food\": \"meat\", \"likes\": false}\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: JWT Payload Structure for Qdrant Authentication\nDESCRIPTION: Example of the JSON Web Token payload structure for Qdrant authentication, showing key parameters like expiration time, value existence check, and access level restriction.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 1640995200, // Expiration time\n  \"value_exists\": ..., // Validate this token by looking for a point with a payload value\n  \"access\": \"r\", // Define the access level.\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Payload Fields from Specific Points in Qdrant using Rust\nDESCRIPTION: This code demonstrates how to delete specific payload fields ('color' and 'price') from a list of points in a Qdrant collection. The code uses DeletePayloadPointsBuilder to specify the collection and fields to delete, and PointsIdsList to select the specific point IDs (0, 3, and 10) for deletion. The operation is set to wait for completion with the wait(true) parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-payload/by-point-id/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{DeletePayloadPointsBuilder, PointsIdsList};\n\nclient\n    .delete_payload(\n        DeletePayloadPointsBuilder::new(\n            \"{collection_name}\",\n            vec![\"color\".to_string(), \"price\".to_string()],\n        )\n        .points_selector(PointsIdsList {\n            ids: vec![0.into(), 3.into(), 10.into()],\n        })\n        .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Disabling Quantization for Performance Comparison\nDESCRIPTION: Examples showing how to temporarily disable quantization to compare search results with non-quantized data\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-quantization.md#2025-04-21_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.22, -0.01, -0.98, 0.37],\n    \"params\": {\n        \"quantization\": {\n            \"ignore\": true,\n        }\n    },\n    \"limit\": 4\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.22, -0.01, -0.98, 0.37],\n    search_params=models.SearchParams(\n        quantization=models.QuantizationSearchParams(\n            ignore=True\n        )\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Clustering Data with KMeans Algorithm\nDESCRIPTION: This code applies the KMeans clustering algorithm to the distance matrix, grouping the data into 10 clusters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/distance-based-exploration.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.cluster import KMeans\n\n# Initialize KMeans with 10 clusters\nkmeans = KMeans(n_clusters=10)\n\n# Generate index of the cluster each sample belongs to\ncluster_labels = kmeans.fit_predict(matrix)\n```\n\n----------------------------------------\n\nTITLE: Initializing Match Criteria for UUID\nDESCRIPTION: This snippet defines a match criterion using a UUID as the key to filter data. It specifies the key as 'uuid' and matches the associated UUID value. No external dependencies are indicated.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-uuid/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    key: 'uuid',\n    match: {value: 'f47ac10b-58cc-4372-a567-0e02b2c3d479'}    \n}\n```\n\n----------------------------------------\n\nTITLE: JWT Payload Restriction Configuration\nDESCRIPTION: Configuration for restricting access to specific payload subsets within a collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access\": [\n    {\n      \"collection\": \"my_collection\",\n      \"access\": \"r\",\n      \"payload\": {\n        \"user_id\": \"user_123456\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Keyword Condition in Qdrant with C#\nDESCRIPTION: This C# snippet demonstrates creating a match condition for a Qdrant query using a keyword. It uses the static method `MatchKeyword` from the `Qdrant.Client.Grpc.Conditions` class to specify that the \"color\" field should match the keyword \"red\".  This condition is used to filter vectors based on the specified criteria during a search operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-keyword/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing static Qdrant.Client.Grpc.Conditions;\n\nMatchKeyword(\"color\", \"red\");\n```\n\n----------------------------------------\n\nTITLE: Deleting a Collection with Qdrant Python Client\nDESCRIPTION: This snippet demonstrates how to delete a collection using the Qdrant Python client. It calls the delete_collection method with the collection name as a parameter. The collection name should be provided as a string value.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-collection/simple/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.delete_collection(collection_name=\"{collection_name}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Qdrant Connection Details in Python\nDESCRIPTION: Sets the Qdrant URL and API key as environment variables in Python.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-contract-management-stackit-aleph-alpha.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nos.environ[\"QDRANT_URL\"] = \"https://qdrant.example.com\"\nos.environ[\"QDRANT_API_KEY\"] = \"your-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Sending Unnamed/Default Vector Messages to Qdrant via Kafka\nDESCRIPTION: JSON format for sending messages with an unnamed/default vector to Qdrant via the Kafka connector. Includes a collection name, numeric ID, vector array, and payload with metadata fields.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/confluent.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collection_name\": \"{collection_name}\",\n    \"id\": 1,\n    \"vector\": [\n        0.1,\n        0.2,\n        0.3,\n        0.4,\n        0.5,\n        0.6,\n        0.7,\n        0.8\n    ],\n    \"payload\": {\n        \"name\": \"kafka\",\n        \"description\": \"Kafka is a distributed streaming platform\",\n        \"url\": \"https://kafka.apache.org/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DSPy Retriever with Qdrant\nDESCRIPTION: Demonstrates how to use the configured retriever to fetch top-k passages matching a query from Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/dspy.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nretrieve = dspy.Retrieve(k=3)\nquestion = \"Some question about my data\"\ntopK_passages = retrieve(question).passages\n\nprint(f\"Top {retrieve.k} passages for question: {question} \\n\", \"\\n\")\n\nfor idx, passage in enumerate(topK_passages):\n    print(f\"{idx+1}]\", passage, \"\\n\")\n```\n\n----------------------------------------\n\nTITLE: Matching Text Condition in Qdrant Client - Rust\nDESCRIPTION: This snippet utilizes the 'matches_text' method from the Qdrant client to create a condition that matches text fields containing certain keywords. It specificies the field name 'description' and the keywords 'good cheap'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/full-text-match/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::Condition;\n\nCondition::matches_text(\"description\", \"good cheap\")\n```\n\n----------------------------------------\n\nTITLE: Add Qdrant Connector Dependency in Mulesoft\nDESCRIPTION: This XML snippet configures the mule-maven-plugin to include additional dependencies required by the Qdrant connector. Specifically, it adds the langchain4j-qdrant dependency.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/platforms/mulesoft.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"...\" >\n \n...\n \n<build>\n <plugins>\n  ...\n  <plugin>\n   <groupId>org.mule.tools.maven</groupId>\n   <artifactId>mule-maven-plugin</artifactId>\n   <version>4.3.0</version>\n   <extensions>true</extensions>\n   <configuration>\n    <additionalPluginDependencies>\n     <plugin>\n      <groupId>io.github.mulesoft-ai-chain-project</groupId>\n      <artifactId>mule4-vectors-connector</artifactId>\n      <additionalDependencies>\n       <!-- QDRANT CONNECTOR DEPENDENCY -->\n       <dependency>\n        <groupId>dev.langchain4j</groupId>\n        <artifactId>langchain4j-qdrant</artifactId>\n        <version>0.35.0</version>\n       </dependency>\n       <!-- QDRANT CONNECTOR DEPENDENCY -->\n      </additionalDependencies>\n     </plugin>\n    </additionalPluginDependencies>\n   </configuration>\n  </plugin>\n </plugins>\n</build>\n...\n</project>\n```\n\n----------------------------------------\n\nTITLE: Defining Qdrant Company Logo as SVG\nDESCRIPTION: SVG markup for the Qdrant company logo, featuring the full 'QDRANT BLINQSIGHT' lettering with clip paths and specific styling. The logo uses a viewBox of 120x64 and includes paths with the #B4BACC fill color.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_6\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_1622_6719)\"><path d=\"M35.205 34.1349C34.2078 36.502 31.7129 37.9984 29.2198 37.9984C25.4792 37.9984 22.4448 34.8423 22.4448 31.1863C22.4448 27.5303 25.3958 24.5 29.1789 24.5C31.3402 24.5 34.0426 25.6206 35.2884 28.4451H32.5451C31.6312 27.3653 30.508 26.7429 29.053 26.7429C26.9326 26.7429 24.8138 28.6526 24.8138 31.2288C24.8138 33.8049 26.8508 35.7554 29.1364 35.7554C30.8824 35.7554 31.8388 34.759 32.4192 34.1349H35.2034H35.205Z\" fill=\"#B4BACC\"/><path d=\"M36.9513 24.7485H39.5279C40.983 24.7485 42.3955 24.7485 43.5186 25.745C44.184 26.3265 44.6402 27.2822 44.6402 28.1545C44.6402 29.7751 43.6004 30.3975 43.1851 30.6458C44.0582 30.9774 45.4298 31.6847 45.4298 33.8852C45.4298 35.4632 44.5993 36.4189 43.808 36.958C42.8107 37.6228 41.3148 37.747 40.4418 37.747H36.9497V24.7485H36.9513ZM39.3203 29.8159H40.1099C40.6919 29.8159 42.1879 29.8159 42.1879 28.4045C42.1879 27.6154 41.6892 26.9914 40.3176 26.9914H39.3203V29.8159ZM39.3203 35.5057H40.5252C40.983 35.5057 42.9366 35.5057 42.9366 33.8035C42.9366 33.2644 42.6881 32.0588 40.5677 32.0588H39.3203V35.5057Z\" fill=\"#B4BACC\"/><path d=\"M48.6735 24.7501H47.3853V37.7503H48.6735V24.7501Z\" fill=\"#B4BACC\"/><path d=\"M51.5005 24.7501H53.2465L60.4776 35.5057H60.5201V24.7501H61.8084V37.7486H60.561L52.8721 26.3282H52.8296V37.7486H51.5414V24.7501H51.5005Z\" fill=\"#B4BACC\"/><path d=\"M65.05 34.0941C65.1334 35.7146 66.1715 36.7944 67.7508 36.7944C69.1225 36.7944 70.3699 35.7555 70.3699 34.2199C70.3699 32.2269 68.3328 31.7287 67.4598 31.4379C66.2958 31.1046 64.0936 30.6064 64.0936 28.0319C64.0936 25.9964 65.6729 24.5425 67.7508 24.5425C69.8287 24.5425 71.3672 26.163 71.3672 28.0727H70.0789C70.0789 26.7446 68.9982 25.7056 67.7933 25.7056C66.2974 25.7056 65.4244 26.8263 65.4244 27.9485C65.4244 29.5266 66.796 29.9007 68.5012 30.3989C71.6598 31.2288 71.6598 33.7217 71.6598 34.1366C71.6598 36.1296 70.038 37.9576 67.7525 37.9576C66.0489 37.9576 63.8042 36.9611 63.7617 34.0941H65.05Z\" fill=\"#B4BACC\"/><path d=\"M74.9021 24.7501H73.6138V37.7503H74.9021V24.7501Z\" fill=\"#B4BACC\"/><path d=\"M90.9449 31.7678C90.6539 35.6313 87.2877 37.9559 84.0866 37.9559C80.2217 37.9559 77.104 34.7998 77.104 31.2271C77.104 27.8636 79.8882 24.4984 84.0457 24.4984C87.4953 24.4984 89.6991 26.8654 90.1977 28.1952H88.7018C87.9531 26.9079 86.2495 25.704 84.0882 25.704C80.8054 25.704 78.4348 28.3618 78.4348 31.2696C78.4348 34.1774 80.8037 36.7944 84.1716 36.7944C86.9149 36.7944 88.952 34.7589 89.4081 32.9734H82.1754V31.7695H90.9465L90.9449 31.7678Z\" fill=\"#B4BACC\"/><path d=\"M93.2319 24.7501H94.5202V30.4808H101.254V24.7501H102.543V37.7486H101.254V31.6439H94.5202V37.7486H93.2319V24.7501Z\" fill=\"#B4BACC\"/><path d=\"M107.156 25.9541H104.163V24.7501H111.395V25.9541H108.444V37.7486H107.156V25.9541Z\" fill=\"#B4BACC\"/><path d=\"M113.392 34.0941C113.475 35.7146 114.513 36.7944 116.094 36.7944C117.466 36.7944 118.713 35.7555 118.713 34.2199C118.713 32.2269 116.676 31.7287 115.803 31.4379C114.639 31.1046 112.437 30.6064 112.437 28.0319C112.437 25.9964 114.016 24.5425 116.094 24.5425C118.172 24.5425 119.71 26.163 119.71 28.0727H118.422C118.422 26.7446 117.341 25.7056 116.137 25.7056C114.641 25.7056 113.768 26.8263 113.768 27.9485C113.768 29.5266 115.139 29.9007 116.844 30.3989C120.003 31.2288 120.003 33.7217 120.003 34.1366C120.003 36.1296 118.381 37.9576 116.096 37.9576C114.392 37.9576 112.147 36.9611 112.105 34.0941H113.393H113.392Z\" fill=\"#B4BACC\"/><path d=\"M18.7048 30.3566H12.8862V24.7076H16.3358C17.6666 24.7076 18.7473 25.7874 18.7473 27.1172V30.3566H18.7064H18.7048Z\" fill=\"#B4BACC\"/><path d=\"M16.2933 37.7909H12.8438V31.7695H18.6623V35.383C18.7032 36.7127 17.6225 37.7925 16.2933 37.7925\" fill=\"#B4BACC\"/><path d=\"M6.06866 31.768V30.3141H11.7629V24.7076H2.36894C1.03978 24.7076 0 25.7874 0 27.1172V35.424C0 36.7537 1.08065 37.8335 2.41144 37.8335H11.8054V31.7696H6.0703L6.06866 31.768Z\" fill=\"#B4BACC\"/></g><defs><clipPath id=\"clip0_1622_6719\"><rect width=\"120\" height=\"64\" fill=\"white\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Representing Multivectors in JSON\nDESCRIPTION: This example shows the format of multivectors in Qdrant, which allow storing a variable number of same-shaped dense vectors in a single point. This is useful for multiple representations of the same object or late interaction embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/vectors.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// A multivector of size 4\n\"vector\": [\n    [-0.013,  0.020, -0.007, -0.111],\n    [-0.030, -0.055,  0.001,  0.072],\n    [-0.041,  0.014, -0.032, -0.062],\n    ....\n]\n```\n\n----------------------------------------\n\nTITLE: Listing Full Storage Snapshots in Qdrant\nDESCRIPTION: REST API call to retrieve a list of all full storage snapshots.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/snapshots.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://{qdrant-url}:6333/snapshots'\n    -H 'api-key: ********'\n```\n\n----------------------------------------\n\nTITLE: Initializing Search Pipeline with Python\nDESCRIPTION: Creates the basic search pipeline structure for querying indexed documents.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsearch_pipeline = Pipeline()\n```\n\n----------------------------------------\n\nTITLE: Datetime and UUID Payload Types in Qdrant\nDESCRIPTION: Illustrates storage of datetime and UUID values in Qdrant, showing various format and storage options\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/payload.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"created_at\": \"2023-02-08T10:49:00Z\",\n    \"updated_at\": [\n        \"2023-02-08T13:52:00Z\",\n        \"2023-02-21T21:23:00Z\"\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uuid\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"uuids\": [\n        \"550e8400-e29b-41d4-a716-446655440000\",\n        \"550e8400-e29b-41d4-a716-446655440001\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Indexed Fields for LLM Context\nDESCRIPTION: Code to format the collection's indexed fields into a human-readable string that can be included in prompts to the LLM.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/automate-filtering-with-llms.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nformatted_indexes = \"\\n\".join([\n    f\"- {index_name} - {index.data_type.name}\"\n    for index_name, index in indexes.items()\n])\nprint(formatted_indexes)\n```\n\n----------------------------------------\n\nTITLE: Running Confluent Kafka Locally\nDESCRIPTION: Commands to start and stop the Confluent Platform services locally, crucial for managing the Kafka environment during development and testing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/data-streaming-kafka-qdrant.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Start the Confluent Platform services:\nconfluent local start\n# Stop the Confluent Platform services:\nconfluent local stop\n```\n\n----------------------------------------\n\nTITLE: Loading Vectors into Qdrant Collection\nDESCRIPTION: This snippet shows how to upload vector data to a Qdrant collection. It creates a list of sample vectors and uses the upload_collection method to store them in the database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/batch-vector-search-with-qdrant.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvectors = [\n    [.1, .0, .0, .0],\n    [.0, .1, .0, .0],\n    [.0, .0, .1, .0],\n    [.0, .0, .0, .1],\n    [.1, .0, .1, .0],\n    [.0, .1, .0, .1],\n    [.1, .1, .0, .0],\n    [.0, .0, .1, .1],\n    [.1, .1, .1, .1],\n]\n\nclient.upload_collection(\n    collection_name=\"test_collection\",\n    vectors=vectors,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cohere Embeddings with OCI Generative AI\nDESCRIPTION: Sets up the Cohere embedding model 'cohere.embed-english-v3.0' using OCI Generative AI service for document vectorization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.embeddings.oci_generative_ai import OCIGenAIEmbeddings\n\nembeddings = OCIGenAIEmbeddings(\n    model_id=\"cohere.embed-english-v3.0\",\n    service_endpoint=\"https://inference.generativeai.us-chicago-1.oci.oraclecloud.com\",\n    compartment_id=os.environ.get(\"COMPARTMENT_OCID\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Embedding Function with Cohere API in Rust\nDESCRIPTION: This code implements a function to get text embeddings from Cohere's API. It sends a POST request with the text to embed and returns the embedding vectors. It uses the 'small' model which produces 1024-dimensional vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/serverless.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse anyhow::Result;\nuse serde::Deserialize;\nuse reqwest::Client;\n\n#[derive(Deserialize)]\nstruct CohereResponse { outputs: Vec<Vec<f32>> }\n\npub async fn embed(client: &Client, text: &str, api_key: &str) -> Result<Vec<Vec<f32>>> {\n    let CohereResponse { outputs } = client\n        .post(\"https://api.cohere.ai/embed\")\n        .header(\"Authorization\", &format!(\"Bearer {api_key}\"))\n        .header(\"Content-Type\", \"application/json\")\n        .header(\"Cohere-Version\", \"2021-11-08\")\n        .body(format!(\"{{\\\"text\\\":[\\\"{text}\\\"],\\\"model\\\":\\\"small\\\"}}\")\n        .send()\n        .await?\n        .json()\n        .await?;\n    Ok(outputs)\n}\n```\n\n----------------------------------------\n\nTITLE: Group Lookup with Python Client\nDESCRIPTION: Python implementation of the group lookup feature using Qdrant client with custom grouping and lookup parameters\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qdrant-1.3.x.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient.search_groups(\n    collection_name=\"chunks\",\n    query_vector=[1.1],\n    group_by=\"document_id\",\n    limit=2,\n    group_size=2,\n    with_lookup=models.WithLookup(\n        collection_name=\"documents\",\n        with_payload=[\"title\", \"text\"]\n        with_vectors=False, \n    )\n)\n```\n\n----------------------------------------\n\nTITLE: NVIDIA GPU Initialization Log Example\nDESCRIPTION: Sample log output showing successful NVIDIA GPU initialization in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/running-with-GPU.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n2025-01-13T11:58:29.124087Z  INFO gpu::instance: Found GPU device: NVIDIA GeForce RTX 3090    \n2025-01-13T11:58:29.124118Z  INFO gpu::instance: Found GPU device: llvmpipe (LLVM 15.0.7, 256 bits)    \n2025-01-13T11:58:29.124138Z  INFO gpu::device: Create GPU device NVIDIA GeForce RTX 3090    \n```\n\n----------------------------------------\n\nTITLE: Deleting Collection Snapshots in Qdrant API\nDESCRIPTION: HTTP DELETE endpoint for removing a specific snapshot from a collection. Requires the collection name and snapshot name as path parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/delete-collection-snapshot/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nDELETE /collections/{collection_name}/snapshots/{snapshot_name}\n```\n\n----------------------------------------\n\nTITLE: Movie Metadata Sample - Python\nDESCRIPTION: Sample movie metadata including movie names, watch times, and descriptions used for collection population.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-colbert.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmetadata = [{\"movie_name\": \"The Passion of Joan of Arc\", \"movie_watch_time_min\": 114, \"movie_description\": \"In 1431, Jeanne d'Arc is placed on trial on charges of heresy. The ecclesiastical jurists attempt to force Jeanne to recant her claims of holy visions.\"}, ...]\n```\n\n----------------------------------------\n\nTITLE: Setting Payload in Qdrant Client - Python\nDESCRIPTION: This snippet sets a payload in a Qdrant client for a specified collection. It requires the collection name and a dictionary for the payload alongside a list of points. The input includes collection name as a string, a payload dictionary, and a list of point identifiers. The expected output is the configuration of the payload in the Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/set-payload/by-point-id/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.set_payload(\n    collection_name=\"{collection_name}\",\n    payload={\n        \"property1\": \"string\",\n        \"property2\": \"string\",\n    },\n    points=[0, 3, 10],\n)\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant Docker with AMD GPU Support\nDESCRIPTION: Docker command to run Qdrant with AMD GPU support, including required device flags and environment variables.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/running-with-GPU.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n\t--rm \\\n\t--device /dev/kfd --device /dev/dri \\\n\t-p 6333:6333 \\\n\t-p 6334:6334 \\\n\t-e QDRANT__LOG_LEVEL=debug \\\n\t-e QDRANT__GPU__INDEXING=1 \\\n\tqdrant/qdrant:gpu-amd-latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Movie Poster Retrieval\nDESCRIPTION: Defines a function to fetch movie posters using the OMDB API based on IMDB IDs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/collaborative-filtering.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_movie_poster(imdb_id, api_key):\n    url = f\"https://www.omdbapi.com/?i={imdb_id}&apikey={api_key}\"\n    data = requests.get(url).json()\n    return data.get('Poster'), data\n```\n\n----------------------------------------\n\nTITLE: Scalar Quantization Parameter Calculation for Signed Int8\nDESCRIPTION: System of equations for calculating the alpha and offset parameters for scalar quantization using signed int8.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/scalar-quantization.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n-2 = α × (-128) + offset\n5 = α × 127 + offset\n```\n\n----------------------------------------\n\nTITLE: Defining Qdrant Cluster Configuration in Python\nDESCRIPTION: This snippet sets up constants for the Qdrant cluster configuration, including the main URL, node URLs, and API key. These will be used to establish connections to the Qdrant cluster.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/create-snapshot.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nQDRANT_MAIN_URL = \"https://my-cluster.com:6333\"\nQDRANT_NODES = (\n    \"https://node-0.my-cluster.com:6333\",\n    \"https://node-1.my-cluster.com:6333\",\n    \"https://node-2.my-cluster.com:6333\",\n)\nQDRANT_API_KEY = \"my-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Qdrant Collection Status with cURL\nDESCRIPTION: HTTP GET request to retrieve information about a specific collection from a Qdrant instance running on port 6333. The collection name should be specified in the URL path parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-info/simple/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET http://localhost:6333/collections/{collection_name}\n```\n\n----------------------------------------\n\nTITLE: Example Output\nDESCRIPTION: Console output showing the result of the semantic routing example\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/semantic-router.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n[Out]: 'chitchat'\n```\n\n----------------------------------------\n\nTITLE: Response from Lambda Function\nDESCRIPTION: This text snippet shows the expected output when accessing the Lambda function URL after successful deployment.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/serverless.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nHello, Lambda!\n```\n\n----------------------------------------\n\nTITLE: YAML Structure for TLS Secret\nDESCRIPTION: This YAML configuration defines a Kubernetes TLS secret. It holds the data for TLS certificates and keys, including metadata like name and namespace, crucial for configuring secure access to Qdrant databases.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/hybrid-cloud-cluster-creation.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  tls.crt: ...\n  tls.key: ...\nkind: Secret\nmetadata:\n  name: qdrant-tls\n  namespace: the-qdrant-namespace\ntype: kubernetes.io/tls\n```\n\n----------------------------------------\n\nTITLE: Checking GPU Detection in Qdrant Logs - Shell\nDESCRIPTION: This shell command retrieves the logs of a specific Qdrant pod to check if the GPU is detected during the initialization process. It provides insights into the GPU devices found by the Qdrant instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/qdrant-cluster-management.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl logs qdrant-a7d8d973-0cc5-42de-8d7b-c29d14d24840-0\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Clients - Python\nDESCRIPTION: This snippet demonstrates how to set up the Twelve Labs and Qdrant clients in Python, requiring your API key for Twelve Labs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom twelvelabs import TwelveLabs\nfrom qdrant_client import QdrantClient\n\n# Get your API keys from:\n# https://playground.twelvelabs.io/dashboard/api-key\nTL_API_KEY = \"<YOUR_TWELVE_LABS_API_KEY>\"\n\ntwelvelabs_client = TwelveLabs(api_key=TL_API_KEY)\nqdrant_client = QdrantClient(url=\"http://localhost:6333/\")\n```\n\n----------------------------------------\n\nTITLE: Updating a Collection with Strict Mode in C#\nDESCRIPTION: C# code for updating an existing Qdrant collection to enable strict mode with unindexed filtering retrieve restriction using the Qdrant C# client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpdateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  strictModeConfig: new StrictModeConfig { Enabled = true, UnindexedFilteringRetrieve = true }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Dense Vector Collection with Payload Filters\nDESCRIPTION: Performs a vector similarity search with complex payload-based filtering, allowing selective retrieval of points based on vector similarity and additional metadata constraints\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-with-payload/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.search(\n    collection_name='products',\n    query_vector=query_embedding,\n    query_filter={\n        'must': [\n            {'key': 'color', 'match': {'value': 'red'}},\n            {'key': 'price', 'range': {'lt': 100}}\n        ]\n    },\n    limit=10,\n    search_params={'exact': False},\n    with_payload=True,\n    order_by={'key': 'price', 'direction': 'ascending'}\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Points with Recommendations in Rust\nDESCRIPTION: This snippet constructs a query to the Qdrant client using `QueryPointsBuilder` and `RecommendInputBuilder` to fetch recommended points based on specified positive and negative examples. The snippet uses async-await pattern for execution and specifies various parameters such as collection and vector names.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-lookup-from/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{LookupLocationBuilder, QueryPointsBuilder, RecommendInputBuilder};\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(\n                RecommendInputBuilder::default()\n                    .add_positive(100)\n                    .add_positive(231)\n                    .add_negative(718)\n                    .build(),\n            )\n            .limit(10)\n            .using(\"image\")\n            .lookup_from(\n                LookupLocationBuilder::new(\"{external_collection_name}\")\n                    .vector_name(\"{external_vector_name}\"),\n            ),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Client in TypeScript\nDESCRIPTION: Demonstrates setting up a Qdrant client connection and performing a cross-collection vector search query. The code shows how to reference vectors from another collection during the search operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/by-existing-id-with-lookup/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: '43cf51e2-8777-4f52-bc74-c2cbde0c8b04', // <--- point id\n    using: '512d-vector',\n    lookup_from: {\n        collection: 'another_collection', // <--- other collection name\n        vector: 'image-512', // <--- vector name in the other collection\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Key-Value Matches in JSON\nDESCRIPTION: This snippet defines a JSON object that specifies a key for description matching with a specific text. It is used to filter or search through larger data structures based on the provided criteria.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/full-text-match/json.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"description\",\n  \"match\": {\n    \"text\": \"good cheap\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Solon-AI Qdrant Repository Dependency - XML\nDESCRIPTION: Maven dependency configuration for adding the Solon-AI Qdrant repository component to a project.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/solon.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.noear</groupId>\n    <artifactId>solon-ai-repo-qdrant</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Checking Collection Existence in Qdrant using Rust\nDESCRIPTION: This code checks if a collection with the specified name exists in the Qdrant vector database. The function returns a boolean result and is an asynchronous operation that needs to be awaited.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/check-collection-exists/simple/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nclient.collection_exists(\"{collection_name}\").await?;\n```\n\n----------------------------------------\n\nTITLE: Defining Null Check Configuration\nDESCRIPTION: This snippet defines a null check configuration in TypeScript where a key named 'reports' is specified. The configuration can be used in various checks to determine the state of 'reports'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/is-null/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  is_null: {\n    key: \"reports\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Full Storage Snapshot in Qdrant\nDESCRIPTION: REST API call to delete a specific full storage snapshot, providing the snapshot name as a parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/snapshots.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE 'http://{qdrant-url}:6333/snapshots/{snapshot_name}'\n    -H 'api-key: ********'\n```\n\n----------------------------------------\n\nTITLE: JWT Configuration for Collection Subset Access\nDESCRIPTION: JWT payload configuration for read-write access to specific subsets of a collection using payload filtering.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/data-privacy.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 1690995200,\n  \"access\": [\n    {\n      \"collection\": \"demo_collection\",\n      \"access\": \"r\",\n      \"payload\": {\n        \"user_id\": \"user_123456\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in C#\nDESCRIPTION: This code initializes a Qdrant client and creates a new collection with specified vector parameters and quantization configuration. It sets up a connection to a local Qdrant server and configures a collection with 768-dimensional vectors using cosine distance and on-disk storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/quantization-on-disk/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n collectionName: \"{collection_name}\",\n vectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine, OnDisk = true},\n quantizationConfig: new QuantizationConfig\n {\n  Scalar = new ScalarQuantization { Type = QuantizationType.Int8, AlwaysRam = false }\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Order By Parameters in Qdrant HTTP Query\nDESCRIPTION: Demonstrates how to structure the order_by object in a Qdrant query to sort results. Includes options for specifying sort key, direction, and pagination start point.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-order-by-advanced/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\n\"order_by\": {\n    \"key\": \"timestamp\",\n    \"direction\": \"desc\" // default is \"asc\"\n    \"start_from\": 123, // start from this value\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Qdrant Collection Aliases in C#\nDESCRIPTION: Demonstrates how to delete an existing alias and create a new alias pointing to a collection. Uses asynchronous operations to first remove the 'production_collection' alias and then create it again pointing to 'example_collection'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/switch/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.DeleteAliasAsync(\"production_collection\");\nawait client.CreateAliasAsync(aliasName: \"production_collection\", collectionName: \"example_collection\");\n```\n\n----------------------------------------\n\nTITLE: Displaying Quora Dataset Example in Text Format\nDESCRIPTION: This snippet shows a typical example of the Quora dataset used for benchmarking. Each line represents a document with an ID and a question text.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/bm42.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n{\"_id\": \"109\", \"text\": \"How GST affects the CAs and tax officers?\"}\n{\"_id\": \"110\", \"text\": \"Why can't I do my homework?\"}\n{\"_id\": \"111\", \"text\": \"How difficult is it get into RSI?\"}\n```\n\n----------------------------------------\n\nTITLE: Installing Gemma Model in Ollama\nDESCRIPTION: Shell command to install and run the Gemma 2B model in Ollama environment.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-vultr-dspy-ollama.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nollama run gemma:2b\n```\n\n----------------------------------------\n\nTITLE: Loading Dataset from HuggingFace\nDESCRIPTION: Code to load the MS COCO dataset using HuggingFace datasets library\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/storing-multiple-vectors-per-object-in-qdrant.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"ChristophSchuhmann/MS_COCO_2017_URL_TEXT\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode in Qdrant Collection Creation (Python)\nDESCRIPTION: This Python code snippet uses the Qdrant client to create a new collection with strict mode enabled, specifically activating the unindexed_filtering_retrieve limit.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.13.x.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    strict_mode_config=models.SparseVectorParams{ enabled=True, unindexed_filtering_retrieve=True },\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Operation Response in C#\nDESCRIPTION: This C# snippet demonstrates how the operation information is formatted after an upsert in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\n{ \"operationId\": \"0\", \"status\": \"Completed\" }\n```\n\n----------------------------------------\n\nTITLE: SVG Icon for Ease of Use & Simple Deployment Feature\nDESCRIPTION: SVG vector graphics depicting an icon for the 'Ease of Use & Simple Deployment' feature card. The icon uses linear gradients and stroke elements to create a visual representation of the feature.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/core-features.md#2025-04-21_snippet_0\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M46.9984 2.05668C47.0145 1.77301 46.9092 1.49588 46.7087 1.29452C46.5083 1.09315 46.2317 0.986558 45.9479 1.00136C37.0707 1.46444 30.0935 4.25608 24.7137 7.83694C18.4933 5.42823 10.8057 7.26505 5.21369 14.3822C4.90098 14.7802 4.93495 15.3491 5.2928 15.707L11.4716 21.8876C11.2831 22.2041 11.1066 22.5094 10.9418 22.802C10.298 23.9455 9.83217 24.8976 9.52567 25.568C9.37238 25.9032 9.25884 26.1683 9.18275 26.3518C9.14469 26.4436 9.11599 26.515 9.09635 26.5647L9.07365 26.6228L9.06733 26.6392L9.06541 26.6443L9.06477 26.646C9.06453 26.6466 9.06432 26.6472 10 27L9.06432 26.6472C8.92573 27.0147 9.01515 27.4294 9.2929 27.7071L20.2929 38.7071C20.5722 38.9864 20.9898 39.0751 21.3585 38.9335L21 38C21.3585 38.9335 21.359 38.9333 21.3597 38.9331L21.3614 38.9324L21.3664 38.9305L21.3827 38.9241L21.4405 38.9011C21.4899 38.8812 21.561 38.8522 21.6523 38.8137C21.8349 38.7367 22.0986 38.622 22.4323 38.4672C23.0994 38.1576 24.0471 37.6876 25.1857 37.0392C25.4758 36.8739 25.7785 36.697 26.0923 36.5082L32.2932 42.7072C32.6511 43.0651 33.22 43.099 33.618 42.7863C40.7668 37.1694 42.5882 29.4384 40.1309 23.2035C43.7022 17.8303 46.4977 10.8779 46.9984 2.05668ZM38.6994 25.2233C37.0693 27.3836 35.3298 29.2523 33.606 30.8533C31.5913 32.7243 29.5977 34.2303 27.8238 35.4111L33.0676 40.6534C38.5284 36.0064 40.0518 30.1286 38.6994 25.2233ZM13.5743 22.2786C13.5812 22.2679 13.5878 22.2572 13.5942 22.2464C14.7933 20.3155 16.4295 18.0251 18.5697 15.7089C20.435 13.6903 22.6823 11.6522 25.3582 9.81488C25.3843 9.7987 25.4098 9.78128 25.4344 9.76268C26.7141 8.88849 28.0914 8.0604 29.5712 7.30229L40.6485 18.3787C38.2791 22.9865 35.2389 26.6073 32.245 29.3878C29.2837 32.1379 26.3683 34.0641 24.196 35.3012C23.1105 35.9194 22.2127 36.3642 21.5905 36.6529C21.4577 36.7146 21.3375 36.769 21.2308 36.8166L11.1804 26.7662C11.2279 26.6576 11.2826 26.5351 11.3446 26.3996C11.6303 25.7746 12.0711 24.8729 12.6846 23.7832C12.9489 23.3138 13.245 22.8099 13.5743 22.2786ZM41.5655 16.4673C43.2718 12.6445 44.5064 8.20268 44.9238 3.07129C39.7698 3.46669 35.3149 4.68846 31.4854 6.38806L41.5655 16.4673ZM22.6874 9.27655C20.543 10.8999 18.6889 12.6328 17.1008 14.3516C15.2354 16.3704 13.7363 18.3697 12.5621 20.1496L7.34658 14.9326C11.9655 9.50489 17.8002 7.96701 22.6874 9.27655Z\" fill=\"url(#paint0_linear_1651_6118)\"/><path d=\"M27 25C29.2091 25 31 23.2091 31 21C31 18.7909 29.2091 17 27 17C24.7909 17 23 18.7909 23 21C23 23.2091 24.7909 25 27 25Z\" stroke=\"#DC244C\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M4.464 36.464C5.40181 35.5262 6.67374 34.9993 8 34.9993C9.32626 34.9993 10.5982 35.5262 11.536 36.464C12.4738 37.4018 13.0007 38.6737 13.0007 40C13.0007 41.3262 12.4738 42.5982 11.536 43.536C9.583 45.488 2 46 2 46C2 46 2.512 38.417 4.464 36.464Z\" stroke=\"#DC244C\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><defs><linearGradient id=\"paint0_linear_1651_6118\" x1=\"26\" y1=\"1\" x2=\"26\" y2=\"43\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#717C99\"/><stop offset=\"1\" stop-color=\"#161E33\"/></linearGradient></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Downloading the Qdrant Fluvio Connector\nDESCRIPTION: Command to download the Qdrant sink connector for Fluvio. This must be run after setting up Fluvio as per the quickstart guide.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/fluvio.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncdk hub download qdrant/qdrant-sink@0.1.0\n```\n\n----------------------------------------\n\nTITLE: Scroll Query with Qdrant Client in C#\nDESCRIPTION: Demonstrates how to perform a scroll query operation using the Qdrant client library. The scroll operation retrieves paginated results ordered by timestamp with a specified limit of 15 records.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-order-by-simple/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.ScrollAsync(\"{collection_name}\", limit: 15, orderBy: \"timestamp\");\n```\n\n----------------------------------------\n\nTITLE: Installing DSPy with Qdrant Integration\nDESCRIPTION: Command to install the DSPy package with Qdrant integration using pip. This installs the necessary dependencies for the information extraction system.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-vultr-dspy-ollama.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install dspy-ai[qdrant]\n```\n\n----------------------------------------\n\nTITLE: Nested Payload Key Modification Example\nDESCRIPTION: Demonstrates how to modify a specific nested key in a payload using Qdrant's set payload functionality\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/payload.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"property1\": {\n        \"nested_property\": \"foo\",\n    },\n    \"property2\": {\n        \"nested_property\": \"bar\",\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"property1\": {\n        \"nested_property\": \"qux\",\n    },\n    \"property2\": {\n        \"nested_property\": \"bar\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Qdrant Environment Variables - Shell\nDESCRIPTION: Configures Qdrant connection details including URL and API key as environment variables in shell\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport QDRANT_URL=\"https://qdrant.example.com\"\nexport QDRANT_API_KEY=\"your-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Defining CrewAI Agents for Document Processing in YAML\nDESCRIPTION: YAML configuration defining two agents: a chunks extractor for semantic parsing of Markdown files and a contextualizer for adding context to extracted chunks.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/webinar-crewai-qdrant-obsidian.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nchunks_extractor:\n  role: >\n    Semantic chunks extractor\n  goal: >\n    Parse Markdown to extract digestible pieces of information which are\n    semantically meaningful and can be easily understood by a human.\n  backstory: >\n    You are a search expert building a search engine for Markdown files.\n    Once you receive a Markdown file, you divide it into meaningful semantic\n    chunks, so each chunk is about a certain topic or concept. You're known \n    for your ability to extract relevant information from large documents and \n    present it in a structured and easy-to-understand format, that increases\n    the searchability of the content and results quality.\n\ncontextualizer:\n  role: >\n    Bringing context to the extracted chunks\n  goal: >\n    Add context to the extracted chunks to make them more meaningful and\n    understandable. This context should help the reader understand the\n    significance of the information and how it relates to the broader topic.\n  backstory: >\n    You are a knowledge curator who specializes in making information more\n    accessible and understandable. You take the extracted chunks and provide\n    additional context to make them more meaningful by bringing in relevant\n    information about the whole document or the topic at hand.\n```\n\n----------------------------------------\n\nTITLE: Installing Hayhooks via pip\nDESCRIPTION: Command to install the Hayhooks package using pip package manager\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\npip install hayhooks\n```\n\n----------------------------------------\n\nTITLE: Setting RAG Connector URL Environment Variable in Shell\nDESCRIPTION: Sets the environment variable for the RAG connector URL in a shell environment.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-customer-support-cohere-airbyte-aws.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport RAG_CONNECTOR_URL=\"https://rag-connector.example.com/search\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Environment for Data Exploration\nDESCRIPTION: This snippet installs necessary Python packages for data exploration and visualization, including UMAP, Seaborn, Matplotlib, and the Qdrant client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/distance-based-exploration.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install umap-learn seaborn matplotlib qdrant-client\n```\n\n----------------------------------------\n\nTITLE: Creating Tenant Index in Qdrant using HTTP\nDESCRIPTION: The snippet shows how to define a metadata field 'user_id' as a tenant in Qdrant by marking it with 'is_tenant: true' during index creation. This is useful for multitenant applications, reducing resource usage by organizing data within a shared collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-filtering.md#2025-04-21_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/index\n{\n   \"field_name\": \"user_id\",\n   \"field_schema\": {\n       \"type\": \"keyword\",\n       \"is_tenant\": true\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection Alias using Python Client\nDESCRIPTION: Creates an alias mapping between collections using the Qdrant Python client. This operation sets up 'production_collection' as an alias for 'example_collection', allowing for transparent collection name mapping.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/create/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.update_collection_aliases(\n    change_aliases_operations=[\n        models.CreateAliasOperation(\n            create_alias=models.CreateAlias(\n                collection_name=\"example_collection\", alias_name=\"production_collection\"\n            )\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring On-Disk Storage for Dense Vectors and HNSW Index\nDESCRIPTION: Complete configuration for enabling on-disk storage for both vector data and HNSW index to optimize memory usage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/indexing-optimization.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nPATCH /collections/your_collection\n{\n    \"vectors\": {\n        \"on_disk\": true\n    },\n    \"hnsw_config\": {\n        \"on_disk\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Qdrant Collection Configuration using PATCH\nDESCRIPTION: This snippet demonstrates how to update the configuration of a Qdrant collection using a PATCH request. It modifies the `indexing_threshold` within the `optimizers_config`. Requires `collection_name` to be replaced with the actual collection name.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/simple/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"optimizers_config\": {\n        \"indexing_threshold\": 10000\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Deleting Snapshots in Qdrant using TypeScript\nDESCRIPTION: Initializes a Qdrant client connection and deletes a specific snapshot from a collection. Requires the @qdrant/js-client-rest package and a running Qdrant instance on localhost:6333.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/delete-collection-snapshot/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.deleteSnapshot(\"{collection_name}\", \"{snapshot_name}\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Encoder for BERT Model in Python\nDESCRIPTION: This snippet defines a custom Encoder class that wraps a pre-trained BERT model from sentence-transformers. It includes methods for forward pass, collate function, and model saving/loading.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/faq-question-answering.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom torch import Tensor, nn\nfrom sentence_transformers.models import Transformer, Pooling\n\nfrom quaterion_models.encoders import Encoder\nfrom quaterion_models.types import TensorInterchange, CollateFnType\n\n\nclass FAQEncoder(Encoder):\n    def __init__(self, transformer, pooling):\n        super().__init__()\n        self.transformer = transformer\n        self.pooling = pooling\n        self.encoder = nn.Sequential(self.transformer, self.pooling)\n        \n    @property\n    def trainable(self) -> bool:\n        # Defines if we want to train encoder itself, or head layer only\n        return False\n    \n    @property    \n    def embedding_size(self) -> int:\n        return self.transformer.get_word_embedding_dimension()\n    \n    def forward(self, batch: TensorInterchange) -> Tensor:\n        return self.encoder(batch)[\"sentence_embedding\"]\n    \n    def get_collate_fn(self) -> CollateFnType:\n        return self.transformer.tokenize\n    \n    @staticmethod\n    def _transformer_path(path: str):\n        return os.path.join(path, \"transformer\")\n    \n    @staticmethod\n    def _pooling_path(path: str):\n        return os.path.join(path, \"pooling\")\n    \n    def save(self, output_path: str):\n        transformer_path = self._transformer_path(output_path)\n        os.makedirs(transformer_path, exist_ok=True)\n        pooling_path = self._pooling_path(output_path)\n        os.makedirs(pooling_path, exist_ok=True)\n        self.transformer.save(transformer_path)\n        self.pooling.save(pooling_path)\n        \n    @classmethod\n    def load(cls, input_path: str) -> Encoder:\n        transformer = Transformer.load(cls._transformer_path(input_path))\n        pooling = Pooling.load(cls._pooling_path(input_path))\n        return cls(transformer=transformer, pooling=pooling)\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Policies in YAML\nDESCRIPTION: This YAML snippet defines the network policies for ingress and egress traffic in a Qdrant database cluster. It specifies allowed IP blocks and pod selectors for incoming connections on specific TCP ports.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/networking-logging-monitoring.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nqdrant:\n  networkPolicies:\n    ingress:\n    - from:\n      - ipBlock:\n          cidr: 192.168.0.0/22\n      - podSelector:\n          matchLabels:\n            app: client-app\n        namespaceSelector:\n          matchLabels:\n            kubernetes.io/metadata.name: client-namespace\n      - podSelector:\n          matchLabels:\n            app: traefik\n        namespaceSelector:\n          matchLabels:\n            kubernetes.io/metadata.name: kube-system\n      ports:\n      - port: 6333\n        protocol: TCP\n      - port: 6334\n        protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant as a Docker Container\nDESCRIPTION: Commands to pull the Qdrant image from Docker Hub and run it, providing easy local access to the Qdrant service for integration with Kafka.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/data-streaming-kafka-qdrant.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull qdrant/qdrant\ndocker run -p 6334:6334 -p 6333:6333 qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Connecting to Qdrant Cloud in Python\nDESCRIPTION: This code snippet shows how to connect to a Qdrant Cloud instance using the qdrant-client library. It requires providing the host and API key for authentication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qa-with-cohere-and-qdrant.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Connecting to Qdrant Cloud with qdrant-client requires providing the api_key.\n# If you use an on-premise instance, it has to be skipped.\nqdrant_client = QdrantClient(\n    host=\"xyz-example.eu-central.aws.cloud.qdrant.io\", \n    prefer_grpc=True,\n    api_key=QDRANT_API_KEY,\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode in Qdrant Collection Creation (Go)\nDESCRIPTION: This Go code snippet uses the Qdrant client to create a new collection with strict mode enabled, specifically activating the unindexed_filtering_retrieve limit.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.13.x.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tStrictModeConfig: &qdrant.StrictModeConfig{\n        Enabled: qdrant.PtrOf(true),\n\t\tIndexingThreshold: qdrant.PtrOf(true),\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Qdrant Landing Page\nDESCRIPTION: YAML configuration that defines the structure and content of the Qdrant documentation landing page, including banner sections, feature cards, and navigation elements.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Home\nweight: 2\nhideTOC: true\nbreadcrumb: false\ncontent:\n  - partial: \"documentation/banners/banner-a\"\n    title: Qdrant Documentation\n    description: Qdrant is an AI-native vector database and a semantic search engine. You can use it to extract meaningful information from unstructured data.\n    linkDescription: <a href=\"https://github.com/qdrant/qdrant_demo/\" target=\"_blank\">Clone this repo now</a> and build a search engine in five minutes.\n    cloudButton:\n      text: Cloud Quickstart\n      url: /documentation/quickstart-cloud/\n    localButton:\n      text: Local Quickstart\n      url: /documentation/quickstart/\n      contained: true\n  - partial: documentation/banners/banner-d\n    developingTitle: Ready to start developing?\n    developingDescription: Qdrant is open-source and can be self-hosted. However, the quickest way to get started is with our <a href=\"https://qdrant.to/cloud\" target=\"_blank\">free tier</a> on Qdrant Cloud. It scales easily and provides a UI where you can interact with data.\n    developingBlock:\n      title: Create your first Qdrant Cloud cluster today\n      button:\n        text: Get Started\n        url: https://qdrant.to/cloud\n      image:\n        src: /img/rocket.svg\n        alt: Rocket\n  - partial: documentation/sections/cards-section\n    title: Optimize Qdrant's performance\n    description: Boost search speed, reduce latency, and improve the accuracy and memory usage of your Qdrant deployment.\n    button:\n      text: Learn More\n      url: /documentation/guides/optimize/\n    cardsPartial: documentation/cards/docs-cards\n    cards:\n      - id: 1\n        tag: Documents\n        icon:\n          src: /icons/outline/documentation-blue.svg\n          alt: Documents\n        title: Distributed Deployment\n        description: Scale Qdrant beyond a single node and optimize for high availability, fault tolerance, and billion-scale performance.\n        link:\n          url: /documentation/guides/distributed_deployment/\n          text: Read More\n      - id: 2\n        tag: Documents\n        icon:\n          src: /icons/outline/documentation-blue.svg\n          alt: Documents\n        title: Multitenancy\n        description: Build vector search apps that serve millions of users. Learn about data isolation, security, and performance tuning.\n        link:\n          url: /documentation/guides/multiple-partitions/\n          text: Read More\n      - id: 3\n        tag: Blog\n        tagColor: violet\n        icon:\n          src: /icons/outline/blog-purple.svg\n          alt: Blog\n        title: Vector Quantization\n        description: Learn about cutting-edge techniques for vector quantization and how they can be used to improve search performance.\n        link:\n          url: /articles/what-is-vector-quantization/\n          text: Read More\npartition: qdrant\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Vector Database Client in Go\nDESCRIPTION: Creates a new Qdrant client connection to localhost on port 6334, configuring basic connection parameters for vector database interaction\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-vectors-and-hnsw-on-disk/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode in Qdrant Collection Creation (HTTP)\nDESCRIPTION: This HTTP PUT request creates a new Qdrant collection with strict mode enabled, specifically activating the unindexed_filtering_retrieve limit.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.13.x.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"strict_mode_config\": {\n        \"enabled\": true,\n        \"unindexed_filtering_retrieve\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DeepEval and Qdrant Client\nDESCRIPTION: Commands to install the required packages and login to DeepEval\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/deepeval.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install deepeval qdrant-client\n\n$ deepeval login\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Scroll Operation in Go\nDESCRIPTION: This snippet demonstrates how to create a new Qdrant client and perform a scroll operation on a collection with a filter. It uses the qdrant package to establish a connection to a local Qdrant server and then executes a scroll query to retrieve points with specific IDs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-has-id-filter/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewHasID(\n\t\t\t\tqdrant.NewIDNum(1),\n\t\t\t\tqdrant.NewIDNum(3),\n\t\t\t\tqdrant.NewIDNum(5),\n\t\t\t\tqdrant.NewIDNum(7),\n\t\t\t\tqdrant.NewIDNum(9),\n\t\t\t\tqdrant.NewIDNum(11),\n\t\t\t),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: JWT Global Access Configuration\nDESCRIPTION: Configuration for setting global read-only access using the access claim.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access\": \"r\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode in Qdrant Collection Creation (C#)\nDESCRIPTION: This C# code snippet uses the Qdrant client to create a new collection with strict mode enabled, specifically activating the unindexed_filtering_retrieve limit.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.13.x.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tstrictModeConfig: new StrictModeConfig { enabled = true, unindexed_filtering_retrieve = true }\n);\n```\n\n----------------------------------------\n\nTITLE: Loading SPLADE Model\nDESCRIPTION: Initializes the SPLADE model with specified configuration\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-splade.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmodel_name = \"prithvida/Splade_PP_en_v1\"\n# This triggers the model download\nmodel = SparseTextEmbedding(model_name=model_name)\n```\n\n----------------------------------------\n\nTITLE: Updating Vectors in Qdrant using Go\nDESCRIPTION: This code updates vectors in a Qdrant collection using the `UpdateVectors` method. It creates a request with the collection name and a list of points to update. Each point includes an ID and a map of vectors, where the keys represent vector names.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-vectors/simple/go.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.UpdateVectors(context.Background(), &qdrant.UpdatePointVectors{\n\tCollectionName: \"{collection_name}\",\n\tPoints: []*qdrant.PointVectors{\n\t\t{\n\t\t\tId: qdrant.NewIDNum(1),\n\t\t\tVectors: qdrant.NewVectorsMap(map[string]*qdrant.Vector{\n\t\t\t\t\"image\": qdrant.NewVector(0.1, 0.2, 0.3, 0.4),\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tId: qdrant.NewIDNum(2),\n\t\t\tVectors: qdrant.NewVectorsMap(map[string]*qdrant.Vector{\n\t\t\t\t\"text\": qdrant.NewVector(0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2),\n\t\t\t}),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Aborting Ongoing Resharding in Qdrant Cluster\nDESCRIPTION: This snippet shows how to abort an ongoing resharding operation by sending a POST request to the Qdrant API. This action might be necessary if resharding needs to be stopped prematurely.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/cloud/cluster-scaling.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/cluster\n{\n    \"abort_resharding\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Qdrant Collection Aliases with Java Client\nDESCRIPTION: This snippet demonstrates how to delete an existing alias and create a new one in Qdrant. It first removes the 'production_collection' alias and then creates a new alias 'production_collection' pointing to 'example_collection'. This pattern enables zero-downtime collection swapping in production environments.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/switch/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclient.deleteAliasAsync(\"production_collection\").get();\nclient.createAliasAsync(\"production_collection\", \"example_collection\").get();\n```\n\n----------------------------------------\n\nTITLE: Docker Compose for MongoDB ReplicaSet\nDESCRIPTION: A docker-compose YAML file to spin up a single-node MongoDB instance in replicaSet mode, necessary for Kafka to connect and stream data from MongoDB source.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/data-streaming-kafka-qdrant.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.8\"\n\nservices:\n  mongo1:\n    image: mongo:7.0\n    command: [\"--replSet\", \"rs0\", \"--bind_ip_all\", \"--port\", \"27017\"]\n    ports:\n      - 27017:27017\n    healthcheck:\n      test: echo \"try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }\" | mongosh --port 27017 --quiet\n      interval: 5s\n      timeout: 30s\n      start_period: 0s\n      start_interval: 1s\n      retries: 30\n    volumes:\n      - \"mongo1_data:/data/db\"\n      - \"mongo1_config:/data/configdb\"\n\nvolumes:\n  mongo1_data:\n  mongo1_config:\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache for FAQ Similarity Model\nDESCRIPTION: This code snippet demonstrates how to configure caching for the FAQ similarity model. It overrides the configure_caches method to return a CacheConfig object with automatic cache type selection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/faq-question-answering.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom quaterion.train.cache import CacheConfig, CacheType\n\nclass FAQModel(TrainableModel):\n    ...\n    def configure_caches(self) -> Optional[CacheConfig]:\n        return CacheConfig(CacheType.AUTO)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with Cohere API in Python\nDESCRIPTION: This snippet demonstrates how to use the Cohere client library to generate embeddings for a test sentence. It also prints the size of the resulting embedding vector.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qa-with-cohere-and-qdrant.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport cohere\n\ncohere_client = cohere.Client(COHERE_API_KEY)\n\n# Generating the embeddings with Cohere client library\nembeddings = cohere_client.embed(\n    texts=[\"A test sentence\"],\n    model=\"large\",\n)\nvector_size = len(embeddings.embeddings[0])\nprint(vector_size) # output: 4096\n```\n\n----------------------------------------\n\nTITLE: Updating a Collection with Strict Mode in HTTP\nDESCRIPTION: HTTP request for updating an existing Qdrant collection to enable strict mode with unindexed filtering retrieve restriction.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPATCH /collections/{collection_name}\n{\n    \"strict_mode_config\": {\n        \"enabled\": true,\n        \"unindexed_filtering_retrieve\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment-Specific Configuration in Docker\nDESCRIPTION: Example of setting a custom environment mode and mounting the corresponding configuration file in Docker.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6333:6333 \\\n    -v $(pwd)/dev.yaml:/qdrant/config/dev.yaml \\\n    -e RUN_MODE=dev \\\n    qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Qdrant Query with Prefetch\nDESCRIPTION: This code snippet demonstrates a Qdrant query API call that utilizes the prefetch functionality. It prefetches points based on a sparse vector query and a dense vector query, then performs a query with reciprocal rank fusion, limiting the final results to 10.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-basic/http.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": [\n        {\n            \"query\": { \n                \"indices\": [1, 42],    // <┐\n                \"values\": [0.22, 0.8]  // <┴─sparse vector\n             },\n            \"using\": \"sparse\",\n            \"limit\": 20\n        },\n        {\n            \"query\": [0.01, 0.45, 0.67, ...], // <-- dense vector\n            \"using\": \"dense\",\n            \"limit\": 20\n        }\n    ],\n    \"query\": { \"fusion\": \"rrf\" }, // <--- reciprocal rank fusion\n    \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Qdrant Collection Alias using C#\nDESCRIPTION: Removes an existing alias 'production_collection' from a Qdrant vector database using the async client API. This operation helps in managing collection references and maintaining database organization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/delete/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.DeleteAliasAsync(\"production_collection\");\n```\n\n----------------------------------------\n\nTITLE: Listing Available Models\nDESCRIPTION: Shows available late interaction models in FastEmbed with their specifications.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-colbert.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nLateInteractionTextEmbedding.list_supported_models()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Qdrant Collections using curl (Bash)\nDESCRIPTION: This command sends a GET request to the Qdrant API endpoint to fetch a list of all collections. It targets the local Qdrant instance running on port 6333.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/list-all-collections/simple/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET http://localhost:6333/collections\n```\n\n----------------------------------------\n\nTITLE: Setting Aleph Alpha API Key in Shell\nDESCRIPTION: Sets the Aleph Alpha API key as an environment variable in the shell.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-contract-management-stackit-aleph-alpha.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport ALEPH_ALPHA_API_KEY=\"<your-token>\"\n```\n\n----------------------------------------\n\nTITLE: Downloading COCO Dataset for Semantic Search in Terminal\nDESCRIPTION: Command to download the 2017 validation split of the COCO dataset, containing 5000 images for use in the semantic search tutorial.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/aleph-alpha-search.md#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nwget http://images.cocodataset.org/zips/train2017.zip\n```\n\n----------------------------------------\n\nTITLE: Creating TLS Secret for Qdrant Database Access with Shell\nDESCRIPTION: This shell command uses `kubectl` to create a Kubernetes secret named `qdrant-tls` containing TLS certificates for encrypting Qdrant database access. The secret is stored in a specified namespace and references a certificate and key file.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/qdrant-cluster-management.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret tls qdrant-tls --cert=mydomain.com.crt --key=mydomain.com.key --namespace the-qdrant-namespace\n```\n\n----------------------------------------\n\nTITLE: Filtering Points by Named Vector Presence - Multiple Languages\nDESCRIPTION: Examples of filtering points based on the presence of specific named vectors across different programming languages and clients.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.13.x.md#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must\": [\n            { \"has_vector\": \"image\" }\n        ]\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must=[\n            models.HasVectorCondition(has_vector=\"image\"),\n        ],\n    ),\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"{collection_name}\", {\n      filter: {\n    must: [\n      {\n        has_vector: \"image\",\n      },\n    ],\n  },\n});\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\")\n            .filter(Filter::must([Condition::has_vector(\"image\")])),\n    )\n    .await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.hasVector;\nimport static io.qdrant.client.PointIdFactory.id;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addMust(hasVector(\"image\"))\n                    .build())\n            .build())\n    .get();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(collectionName: \"{collection_name}\", filter: HasVector(\"image\"));\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewHasVector(\n        \"image\",\n\t\t\t),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: SVG Icon for Cost Efficiency with Storage Options Feature\nDESCRIPTION: SVG vector graphics depicting an icon for the 'Cost Efficiency with Storage Options' feature card. The icon uses linear gradients and stroke elements to represent storage and cost efficiency concepts.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/core-features.md#2025-04-21_snippet_1\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M38 46V42L45.123 33.1C45.6908 32.3905 46.0001 31.5088 46 30.6V19C46 18.2044 45.6839 17.4413 45.1213 16.8787C44.5587 16.3161 43.7956 16 43 16C42.2044 16 41.4413 16.3161 40.8787 16.8787C40.3161 17.4413 40 18.2044 40 19V26\" stroke=\"url(#paint0_linear_1651_6734)\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M28 46V35.657C28 35.1316 28.1035 34.6113 28.3046 34.1259C28.5057 33.6405 28.8004 33.1995 29.172 32.828L36 26C36.2626 25.7373 36.5744 25.5289 36.9176 25.3867C37.2607 25.2446 37.6285 25.1714 38 25.1714C38.3715 25.1714 38.7393 25.2446 39.0824 25.3867C39.4256 25.5289 39.7374 25.7373 40 26C40.2627 26.2626 40.4711 26.5744 40.6133 26.9176C40.7554 27.2607 40.8286 27.6285 40.8286 28C40.8286 28.3714 40.7554 28.7393 40.6133 29.0824C40.4711 29.4256 40.2627 29.7374 40 30L34 36\" stroke=\"url(#paint1_linear_1651_6734)\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M10 46V42L2.877 33.1C2.30917 32.3905 1.99986 31.5088 2 30.6V19C2 18.2044 2.31607 17.4413 2.87868 16.8787C3.44129 16.3161 4.20435 16 5 16C5.79565 16 6.55871 16.3161 7.12132 16.8787C7.68393 17.4413 8 18.2044 8 19V26\" stroke=\"url(#paint2_linear_1651_6734)\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M20 46V35.657C20 35.1316 19.8965 34.6113 19.6954 34.1259C19.4943 33.6405 19.1996 33.1995 18.828 32.828L12 26C11.7374 25.7373 11.4256 25.5289 11.0824 25.3867C10.7393 25.2446 10.3714 25.1714 9.99999 25.1714C9.62854 25.1714 9.26073 25.2446 8.91756 25.3867C8.5744 25.5289 8.26261 25.7373 7.99999 26C7.7373 26.2626 7.52891 26.5744 7.38674 26.9176C7.24456 27.2607 7.17139 27.6285 7.17139 28C7.17139 28.3714 7.24456 28.7393 7.38674 29.0824C7.52891 29.4256 7.7373 29.7374 7.99999 30L14 36\" stroke=\"url(#paint3_linear_1651_6734)\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M13 13H35\" stroke=\"#DC244C\" stroke-width=\"2\" stroke-miterlimit=\"10\"/><path d=\"M24 24C30.0751 24 35 19.0751 35 13C35 6.92487 30.0751 2 24 2C17.9249 2 13 6.92487 13 13C13 19.0751 17.9249 24 24 24Z\" stroke=\"#DC244C\" stroke-width=\"2\" stroke-miterlimit=\"10\" stroke-linecap=\"square\"/><path d=\"M24.0001 24C26.6036 24 28.7141 19.0751 28.7141 13C28.7141 6.92487 26.6036 2 24.0001 2C21.3967 2 19.2861 6.92487 19.2861 13C19.2861 19.0751 21.3967 24 24.0001 24Z\" stroke=\"#DC244C\" stroke-width=\"2\" stroke-miterlimit=\"10\" stroke-linecap=\"square\"/><defs><linearGradient id=\"paint0_linear_1651_6734\" x1=\"42\" y1=\"16\" x2=\"42\" y2=\"46\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#717C99\"/><stop offset=\"1\" stop-color=\"#161E33\"/></linearGradient><linearGradient id=\"paint1_linear_1651_6734\" x1=\"34.4143\" y1=\"25.1714\" x2=\"34.4143\" y2=\"46\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#717C99\"/><stop offset=\"1\" stop-color=\"#161E33\"/></linearGradient><linearGradient id=\"paint2_linear_1651_6734\" x1=\"6\" y1=\"16\" x2=\"6\" y2=\"46\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#717C99\"/><stop offset=\"1\" stop-color=\"#161E33\"/></linearGradient><linearGradient id=\"paint3_linear_1651_6734\" x1=\"13.5857\" y1=\"25.1714\" x2=\"13.5857\" y2=\"46\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#717C99\"/><stop offset=\"1\" stop-color=\"#161E33\"/></linearGradient></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Checking if a field is empty using Qdrant Java client\nDESCRIPTION: This snippet demonstrates how to use the Qdrant Java client to check if a specific field in a vector record is empty.  It utilizes the `isEmpty` method from the `ConditionFactory` to create a condition that verifies whether the \"reports\" field is empty. The isEmpty method is a static factory method that returns a Condition object.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/is-empty/java.md#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.isEmpty;\n\nisEmpty(\"reports\");\n```\n\n----------------------------------------\n\nTITLE: Calculating Vector Memory Size Formula\nDESCRIPTION: Formula for estimating required memory size for vector storage, including 50% overhead for metadata and temporary segments\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/capacity-planning.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmemory_size = number_of_vectors * vector_dimension * 4 bytes * 1.5\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Database with go-client in Go\nDESCRIPTION: The snippet illustrates how to set up a client connection to a Qdrant database using the go-client library and execute a query with specific parameters. Key dependencies include 'github.com/qdrant/go-client/qdrant'. The snippet requires the Qdrant server to be running locally on the specified host and port. It allows for querying a collection by specifying query vectors, prefetch strategies, and limits on the number of result points retrieved.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-multistage/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tPrefetch: []*qdrant.PrefetchQuery{\n\t\t{\n\t\t\tPrefetch: []*qdrant.PrefetchQuery{\n\t\t\t\t{\n\t\t\t\t\tQuery: qdrant.NewQueryDense([]float32{1, 23, 45, 67}),\n\t\t\t\t\tUsing: qdrant.PtrOf(\"mrl_byte\"),\n\t\t\t\t\tLimit: qdrant.PtrOf(uint64(1000)),\n\t\t\t\t},\n\t\t\t},\n\t\t\tQuery: qdrant.NewQueryDense([]float32{0.01, 0.45, 0.67}),\n\t\t\tLimit: qdrant.PtrOf(uint64(100)),\n\t\t\tUsing: qdrant.PtrOf(\"full\"),\n\t\t},\n\t},\n\tQuery: qdrant.NewQueryMulti([][]float32{\n\t\t{0.1, 0.2},\n\t\t{0.2, 0.1},\n\t\t{0.8, 0.9},\n\t}),\n\tUsing: qdrant.PtrOf(\"colbert\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Starting the FastAPI Server\nDESCRIPTION: Command to launch the FastAPI application using uvicorn server for local development.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/cohere-rag-connector.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn main:app\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Strong Ordering via HTTP\nDESCRIPTION: This snippet demonstrates how to send a PUT request to upsert points into a specified collection in Qdrant using strong ordering. The request includes a collection name and a batch of points with IDs, payloads, and vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_36\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/points?ordering=strong\n{\n    \"batch\": {\n        \"ids\": [1, 2, 3],\n        \"payloads\": [\n            {\"color\": \"red\"},\n            {\"color\": \"green\"},\n            {\"color\": \"blue\"}\n        ],\n        \"vectors\": [\n            [0.9, 0.1, 0.1],\n            [0.1, 0.9, 0.1],\n            [0.1, 0.1, 0.9]\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Search Pipeline to YAML\nDESCRIPTION: Python code to export the search pipeline configuration to a YAML file\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"search-pipeline.yaml\", \"w\") as fp:\n    search_pipeline.dump(fp)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in C#\nDESCRIPTION: This snippet initializes a new Qdrant client, establishing a connection to a Qdrant instance running on localhost at port 6334.  The client object is then used for subsequent operations on the Qdrant database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-and-params/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Pipeline Structure\nDESCRIPTION: Generates a visual representation of the indexing pipeline structure\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nindexing_pipeline.draw(\"indexing_pipeline.png\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Go\nDESCRIPTION: This snippet initializes a new Qdrant client with the specified host and port configuration. It returns a client instance that can be used for operations on a Qdrant database. Dependencies include the 'qdrant' Go client library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Docker Image\nDESCRIPTION: Docker commands to pull and run the Qdrant vector search engine container with persistent storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/neural-search-tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull qdrant/qdrant\n\ndocker run -p 6333:6333 \\\n    -v $(pwd)/qdrant_storage:/qdrant/storage \\\n    qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Strong Ordering in Rust\nDESCRIPTION: This Rust snippet demonstrates the process of upserting points with strong ordering by utilizing the Qdrant client. It creates a client instance and prepares a batch of points with IDs, vectors, and payloads, while specifying the ordering type.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_39\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\n    PointStruct, UpsertPointsBuilder, WriteOrdering, WriteOrderingType\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .upsert_points(\n        UpsertPointsBuilder::new(\n            \"{collection_name}\",\n            vec![\n                PointStruct::new(1, vec![0.9, 0.1, 0.1], [(\"color\", \"red\".into())]),\n                PointStruct::new(2, vec![0.1, 0.9, 0.1], [(\"color\", \"green\".into())]),\n                PointStruct::new(3, vec![0.1, 0.1, 0.9], [(\"color\", \"blue\".into())]),\n            ],\n        )\n        .ordering(WriteOrdering {\n            r#type: WriteOrderingType::Strong.into(),\n        }),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Defining Color Matching Exceptions in JSON\nDESCRIPTION: This JSON snippet outlines a rule for matching colors, specifying exceptions for 'black' and 'yellow'. It is likely used for filtering or customizing color-related features in the system. No additional dependencies are required, and the input is a simple JSON object with 'key' and 'match' fields. The expected output is the processing of color matching according to the defined rules.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-except/json.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"key\\\": \\\"color\\\",\\n  \\\"match\\\": {\\n    \\\"except\\\": [\\\"black\\\", \\\"yellow\\\"]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Read-only Filesystem Configuration Examples\nDESCRIPTION: Examples demonstrating how to configure read-only root filesystem for Qdrant containers across different deployment platforms.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --read-only\n```\n\nLANGUAGE: yaml\nCODE:\n```\nread_only: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nreadOnlyRootFilesystem: true\n```\n\n----------------------------------------\n\nTITLE: Installing FastEmbed Library for Sparse Embeddings\nDESCRIPTION: Command to install the FastEmbed library which is required for generating sparse text embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install fastembed\n```\n\n----------------------------------------\n\nTITLE: Defining Date Range for Query in JSON\nDESCRIPTION: This JSON snippet sets up a date range filter with specific parameters to be used in a query. It includes a key for the date and specifies the lower and upper bounds for the filtering criteria, with 'greater than' and 'less than or equal to' options.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/datetime-range/json.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"date\",\n  \"range\": {\n    \"gt\": \"2023-02-08T10:49:00Z\",\n    \"gte\": null,\n    \"lt\": null,\n    \"lte\": \"2024-01-31 10:14:31Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant with Specified Custom Configuration Path\nDESCRIPTION: Command to run Qdrant with an explicitly specified custom configuration file path, which allows for more flexible configuration management.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6333:6333 \\\n    -v $(pwd)/path/to/data:/qdrant/storage \\\n    -v $(pwd)/path/to/custom_config.yaml:/qdrant/config/custom_config.yaml \\\n    qdrant/qdrant \\\n    ./qdrant --config-path config/custom_config.yaml\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for KNN Classification Workflow\nDESCRIPTION: Documentation outlining the setup and workflow for implementing KNN classification using Qdrant and n8n. Includes steps for dataset preparation, embedding model selection, and the classification process using K-Nearest Neighbors algorithm.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-n8n-2.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n#### Classification Tool\n\nThe anomaly detection tool can also be used for classification, but there's a simpler approach: K-Nearest Neighbors (KNN) classification.\n\n> \"Show me your friends, and I will tell you who you are.\"\n\n**Setup**  \n1. **Dataset**: We'll use the [Land-Use Scene Classification dataset]. Satellite imagery analysis has applications in ecology, rescue operations, and map updates.\n2. **Embedding Model**: As for anomaly detection, we'll use the [Voyage AI multimodal embedding model].\n\n**Workflow:**\n\n1. **Embed Image**: Embeds the candidate for classification using Voyage.\n2. **Fetch neighbors**: Retrieves the K closest labeled neighbors from Qdrant.\n3. **Majority Voting**: Determines the prevailing class in the neighborhood by simple majority voting.\n4. **Optional: Ties Resolving**: In case of ties, expands the neighborhood radius.\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Container in Go\nDESCRIPTION: Instantiates a Qdrant container using Go Testcontainers module with context and image configuration options.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/testcontainers.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/testcontainers/testcontainers-go\"\n    \"github.com/testcontainers/testcontainers-go/modules/qdrant\"\n)\n\nqdrantContainer, err := qdrant.RunContainer(ctx, testcontainers.WithImage(\"qdrant/qdrant\"))\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Go\nDESCRIPTION: This snippet initializes a new Qdrant client using the Go client library. It configures the client with the host and port of the Qdrant instance, setting up the connection for subsequent operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/simple-full-text/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client\nDESCRIPTION: Code to initialize the Qdrant Client either in-memory or with a specified database path.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/fastembed.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n# Initialize the client\nclient = QdrantClient(\":memory:\")  # or QdrantClient(path=\"path/to/db\")\n```\n\n----------------------------------------\n\nTITLE: Defining Email Processing Tasks in YAML\nDESCRIPTION: YAML configuration for email processing tasks: categorization and response writing, with detailed descriptions of expected behaviors and outputs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/webinar-crewai-qdrant-obsidian.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncategorization_task:\n  description: >\n    Review the content of the following email thread and categorize it \n    into the appropriate category. There might be multiple categories that\n    apply to the email thread.\n    \n    <messages>{messages}</messages>\n  expected_output: >\n    A list of all the categories that the email threads can be classified into.\n  agent: categorizer\n\nresponse_writing_task:\n  description: >\n    Write a response to the following email thread. The response should be\n    clear, concise, and helpful to the sender. Always rely on the Qdrant search\n    tool, so you can get the most relevant information to craft your response.\n    Please try to include the source URLs of the information you provide.\n    \n    Only focus on the real question asked by the sender and do not try to \n    address any other issues that are not directly related to the sender's needs.\n    Do not try to provide a response if the context is not clear enough.\n    \n    <messages>{messages}</messages>\n  expected_output: >\n    A well-crafted response to the email thread that addresses the sender's needs.\n    Please use simple HTML formatting to make the response more readable.\n    Do not include greetings or signatures in your response, but provide the footnotes\n    with the source URLs of the information you used, if possible.\n    \n    If the provided context does not give you enough information to write a response,\n    you must admit that you cannot provide a response and write \"I cannot provide a response.\".\n  agent: response_writer\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Landing Page Navigation in YAML\nDESCRIPTION: This YAML configuration defines the navigation structure for the Qdrant landing page. It includes login/signup links, a logo link, and a menu with five main navigation items pointing to documentation, cloud services, build information, learning resources, and API reference.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/docs-header.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogIn:\n  text: Log in\n  url: https://cloud.qdrant.io/login\nstartFree:\n  text: Start Free\n  url: https://cloud.qdrant.io/signup\nlogoLink: /\nmenuItems:\n  - id: menu-0\n    name: Qdrant\n    url: /documentation/\n    icon: menu-documentation-white.svg\n  - id: menu-1\n    name: Cloud\n    url: /documentation/cloud-intro/\n    icon: cloud-white.svg\n  - id: menu-2\n    name: Build\n    url: /documentation/build/\n    icon: blog-white.svg\n  - id: menu-3\n    name: Learn\n    url: /articles/\n    icon: rocket-white.svg\n  - id: menu-4\n    name: API Reference\n    url: https://api.qdrant.tech/api-reference\n    external: true\n    icon: roadmap-white.svg\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant Vector Search Engine with Docker\nDESCRIPTION: Command to launch the Qdrant vector search engine using Docker. This exposes port 6333 and uses the official Qdrant Docker image, providing a simple way to start using the vector search engine for storing and querying embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/metric-learning-tips.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6333:6333 qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Installing Mastra Core Package\nDESCRIPTION: Command to install the Mastra core package using npm package manager.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/mastra.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mastra/core\n```\n\n----------------------------------------\n\nTITLE: Examining the Structure of SPLADE++ Sparse Embeddings\nDESCRIPTION: Code to display the first sparse embedding vector to understand its structure. The output shows the format used by Qdrant to store sparse vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsparse_descriptions[0]\n```\n\n----------------------------------------\n\nTITLE: Basic Filter Generation with Anthropic Claude\nDESCRIPTION: Demonstrates basic filter generation for a simple calorie-based query using Anthropic Claude. Shows how the model attempts to interpret numerical values from the query and match them to available fields.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/automate-filtering-with-llms.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nqdrant_filter = anthropic_client.messages.create(\n    model=\"claude-3-5-sonnet-latest\",\n    response_model=models.Filter,\n    max_tokens=1024,\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": (\n                \"<query>fruit salad with no more than 100 calories</query>\"\n                f\"<indexes>\\n{formatted_indexes}\\n</indexes>\"\n            )\n        }\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoRetriever with Qdrant\nDESCRIPTION: Configuration and usage of CamelAI's AutoRetriever for automated vector storage and retrieval using Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/camel.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom camel.retrievers import AutoRetriever\nfrom camel.types import StorageType\n\nar = AutoRetriever(\n    url_and_api_key=(\n        \"https://xyz-example.eu-central.aws.cloud.qdrant.io:6333\",\n        \"<provide-your-own-key>\",\n    ),\n    storage_type=StorageType.QDRANT,\n)\n\nretrieved_info = ar.run_vector_retriever(\n    contents=[\"<URL-TO-SOME-RESOURCE>\"],\n    query=\"\"<SOME_USER_QUERY>\"\",\n    return_detailed_info=True, \n)\n\nprint(retrieved_info)\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Query with Qdrant Client\nDESCRIPTION: Initializes a Qdrant client connection to localhost and executes a vector similarity search with a specific vector embedding, requesting the top 3 most similar results\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/named-vector/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\tusingVector: \"image\",\n\tlimit: 3\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Collection Segment Size\nDESCRIPTION: HTTP request to modify the maximum segment size for a collection to accommodate GPU memory limitations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/running-with-GPU.md#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPATCH collections/{collection_name}\n{\n  \"optimizers_config\": {\n    \"max_segment_size\": 1000000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running RAG Evaluation with GPT-3.5 and Context Template\nDESCRIPTION: This code snippet shows the configuration for running an evaluation using GPT-3.5 with a specific prompt template that includes context for question answering. The configuration includes model settings, template format, and endpoint information.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nexperiment_5 = run_eval(eval_df,\n                        collection_name=COLLECTION_NAME,\n                        recipe_id=recipe_gpt['id'],\n                        num_docs=num_docs,\n                        path=f\"{COLLECTION_NAME}_{num_docs}_gpt.csv\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Spanning Tree Graph Exploration in Qdrant\nDESCRIPTION: This JSON configuration extends the previous one by adding the 'tree' parameter. It instructs Qdrant's Graph Exploration Tool to construct a spanning tree, which focuses on the most important similarities in the data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/distance-based-exploration.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"limit\": 5,\n  \"sample\": 100,\n  \"tree\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Sparse Vector Points into Qdrant Collection via HTTP PUT\nDESCRIPTION: This code snippet shows how to insert multiple points with sparse vectors into a Qdrant collection using an HTTP PUT request. It demonstrates the structure for specifying point IDs and their corresponding sparse vector representations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/sparse-vectors/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/points\n{\n    \"points\": [\n        {\n            \"id\": 1,\n            \"vector\": {\n                \"text\": {\n                    \"indices\": [6, 7],\n                    \"values\": [1.0, 2.0]\n                }\n            }\n        },\n        {\n            \"id\": 2,\n            \"vector\": {\n                \"text\": {\n                    \"indices\": [1, 1, 2, 3, 4, 5],\n                    \"values\": [0.1, 0.2, 0.3, 0.4, 0.5]\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Values Count Filtering in Qdrant\nDESCRIPTION: Shows how to filter based on the number of values in an array field. This example filters for items with more than two comments.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/filtering.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"must\": [\n    {\n      \"key\": \"comments\",\n      \"values_count\": {\n        \"gt\": 2\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Collection Alias in Qdrant using C#\nDESCRIPTION: Creates an alias named 'production_collection' pointing to an existing collection 'example_collection' using the Qdrant client's async API. Collection aliases enable transparent collection swapping and versioning.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/create/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.CreateAliasAsync(aliasName: \"production_collection\", collectionName: \"example_collection\");\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for API Keys\nDESCRIPTION: Sets up environment variables for Relari and OpenAI API keys using Google Colab's userdata feature.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-relari.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom google.colab import userdata\nimport os\n\nos.environ['RELARI_API_KEY'] = userdata.get('RELARI_API_KEY')\nos.environ['OPENAI_API_KEY'] = userdata.get('OPENAI_API_KEY')\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Go\nDESCRIPTION: Establishes connection to a Qdrant database and creates a new collection with 768-dimensional vectors using cosine distance. Configures vector storage on disk and int8 scalar quantization in RAM.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/scalar-quantization-in-ram/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t\tOnDisk:   qdrant.PtrOf(true),\n\t}),\n\tQuantizationConfig: qdrant.NewQuantizationScalar(&qdrant.ScalarQuantization{\n\t\tType:      qdrant.QuantizationType_Int8,\n\t\tAlwaysRam: qdrant.PtrOf(true),\n\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Qdrant Metrics Endpoint\nDESCRIPTION: Example URL endpoint for accessing Qdrant metrics in Prometheus/OpenMetrics format on a local instance. This endpoint provides system metrics that can be scraped by Prometheus for monitoring.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-resource-optimization.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nhttp://localhost:6333/metrics\n```\n\n----------------------------------------\n\nTITLE: Deleting a Collection Alias in Qdrant using Go\nDESCRIPTION: This code snippet demonstrates how to delete an alias from a Qdrant collection using the Go client. It imports the context package and calls the DeleteAlias method with a background context and the alias name to be deleted.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/delete/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"context\"\n\nclient.DeleteAlias(context.Background(), \"production_collection\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Components with Python\nDESCRIPTION: Sets up the embedding and retrieval components for the search pipeline using FastEmbed and Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom haystack_integrations.components.embedders.fastembed import FastembedTextEmbedder\nfrom haystack_integrations.components.retrievers.qdrant import QdrantEmbeddingRetriever\n\nquery_embedder = FastembedTextEmbedder(model=\"BAAI/bge-base-en-v1.5\")\nquery_embedder.warm_up()\n\nretriever = QdrantEmbeddingRetriever(\n    document_store=document_store,  # The same document store as the one used for indexing\n    top_k=3,  # Number of documents to return\n)\n\nsearch_pipeline.add_component(\"query_embedder\", query_embedder)\nsearch_pipeline.add_component(\"retriever\", retriever)\n\nsearch_pipeline.connect(\"query_embedder.embedding\", \"retriever.query_embedding\")\n```\n\n----------------------------------------\n\nTITLE: Managing Qdrant Clusters with the Operator - YAML\nDESCRIPTION: This YAML snippet shows configuration options for the Qdrant Operator, including namespace watching settings and RBAC limitations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/private-cloud-setup.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\noperator:\n  watch:\n    onlyReleaseNamespace: false\n    namespaces:\n      - qdrant-private-cloud\n      - some-other-namespase\n  limitRBAC: true\n```\n\n```yaml\noperator:\n  watch:\n    onlyReleaseNamespace: false\n    namespaces: []\n  limitRBAC: false\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Cohere Connector\nDESCRIPTION: Python code to create a Cohere connector that links to the deployed search service.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/cohere-rag-connector.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nconnector_response = cohere_client.connectors.create(\n    name=\"personal-notes\",\n    url=\"https:/this-is-my-domain.app/search\",\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Points with UUID Payload in Qdrant\nDESCRIPTION: Example showing how to add points to a Qdrant collection with UUID values in the payload, demonstrating the memory-efficient UUID storage feature.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.11.x.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/points\n{\n    \"points\": [\n        {\n            \"id\": 1,\n            \"vector\": [0.05, 0.61, 0.76, 0.74],\n            \"payload\": {\"id\": 550e8400-e29b-41d4-a716-446655440000}\n        },\n        {\n            \"id\": 2,\n            \"vector\": [0.19, 0.81, 0.75, 0.11],\n            \"payload\": {\"id\": 550e8400-e29b-41d4-a716-446655440000}\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Fly.io Application without Deployment\nDESCRIPTION: Creates a new Fly.io application with port forwarding configuration but doesn't deploy it yet. This assigns a hostname needed for further configuration steps.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/chatgpt-plugin.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflyctl launch --no-deploy --internal-port 8080\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading CarsEncoder in Python\nDESCRIPTION: This snippet includes the `save` and `load` methods for the `CarsEncoder` class. The `save` method saves the encoder model to a specified path, while the `load` class method facilitates loading the model back from the saved path.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/cars-recognition.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n    def save(self, output_path: str):\n        os.makedirs(output_path, exist_ok=True)\n        torch.save(self._encoder, os.path.join(output_path, \"encoder.pth\"))\n\n    @classmethod\n    def load(cls, input_path):\n        encoder_model = torch.load(os.path.join(input_path, \"encoder.pth\"))\n        return CarsEncoder(encoder_model)\n```\n\n----------------------------------------\n\nTITLE: Checking Collection Existence in Qdrant using Go\nDESCRIPTION: Demonstrates how to check if a collection exists in Qdrant using the client.CollectionExists() method. This operation requires a context object and the collection name as parameters. Returns a boolean indicating whether the collection exists.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/check-collection-exists/simple/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"context\"\n\nclient.CollectionExists(context.Background(), \"my_collection\")\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings in Python\nDESCRIPTION: This Python snippet defines a helper function to generate document embeddings using the PremAI SDK, handling both single text and list inputs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union, List\n\ndef get_embeddings(\n    project_id: int, \n    embedding_model: str, \n    documents: Union[str, List[str]]\n) -> List[List[float]]:\n    \"\"\"\n    Helper function to get the embeddings from premai sdk \n    Args\n        project_id (int): The project id from prem saas platform.\n        embedding_model (str): The embedding model alias to choose\n        documents (Union[str, List[str]]): Single texts or list of texts to embed\n    Returns:\n        List[List[int]]: A list of list of integers that represents different\n            embeddings\n    \"\"\"\n    embeddings = []\n    documents = [documents] if isinstance(documents, str) else documents \n    for embedding in prem_client.embeddings.create(\n        project_id=project_id,\n        model=embedding_model, \n        input=documents\n    ).data:\n        embeddings.append(embedding.embedding)\n    \n    return embeddings\n```\n\n----------------------------------------\n\nTITLE: Installing Unstructured with Qdrant Integration\nDESCRIPTION: Command to install the Unstructured library with the Qdrant extra dependency, enabling integration between the two tools.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/unstructured.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"unstructured[qdrant]\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Vector Optimization in Qdrant\nDESCRIPTION: Configuration to disable vector optimization by setting indexing_threshold to 0, maximizing ingestion speed at the cost of higher RAM usage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/indexing-optimization.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nPATCH /collections/your_collection\n{\n  \"optimizer_config\": {\n    \"indexing_threshold\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Top Sorted Tokens with Weights in Python\nDESCRIPTION: This code snippet demonstrates how to display the top sorted tokens with their corresponding weights after processing a sparse vector. It shows tokens with weights greater than 1, illustrating the term expansion result.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/sparse-vectors.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"ashe\": 2.95,\n    \"arthur\": 2.61,\n    \"tennis\": 2.22,\n    \"robert\": 1.74,\n    \"jr\": 1.55,\n    \"he\": 1.39,\n    \"founder\": 1.36,\n    \"doubles\": 1.24,\n    \"won\": 1.22,\n    \"slam\": 1.22,\n    \"died\": 1.19,\n    \"singles\": 1.1,\n    \"was\": 1.07,\n    \"player\": 1.06,\n    \"titles\": 0.99, \n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Vectors for Benchmark in Python\nDESCRIPTION: Python command to perform vector search benchmarks using the vector-db-benchmark project, skipping the upload phase to focus on search performance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/memory-consumption.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython run.py --engines qdrant-all-in-ram --datasets glove-100-angular --skip-upload\n```\n\n----------------------------------------\n\nTITLE: Executing SmolAgents Query\nDESCRIPTION: Example code showing how to run the configured agent with a user query for movie recommendations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/smolagents.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagent_output = agent.run(\"Movie about people taking a strong action for justice\")\nprint(agent_output)\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Testimonials in YAML\nDESCRIPTION: YAML configuration that defines a collection of customer testimonials for Qdrant. Each testimonial includes user details (name, nickname, avatar) and testimonial text. The structure is used to populate a testimonials section on the landing page.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/community/community-testimonials.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Love from our community\ntestimonials:\n- id: 0\n  name: Owen Colegrove\n  nickname: \"@ocolegro\"\n  avatar:\n    src: /img/customers/owen-colegrove.svg\n    alt: Avatar\n  text: qdrant has been amazing!\n- id: 1\n  name: Darren\n  nickname: \"@darrenangle\"\n  avatar:\n    src: /img/customers/darren.svg\n    alt: Avatar\n  text: qdrant is so fast I'm using Rust for all future projects goodnight everyone\n- id: 2\n  name: Greg Schoeninger\n  nickname: \"@gregschoeninger\"\n  avatar:\n    src: /img/customers/greg-schoeninger.svg\n    alt: Avatar\n  text: Indexing millions of embeddings into <span>@qdrant_engine</span> has been the smoothest experience I've had so far with a vector db. Team Rustacian all the way &#129408;\n- id: 3\n  name: Ifioravanti\n  nickname: \"@ivanfioravanti\"\n  avatar:\n    src: /img/customers/ifioravanti.svg\n    alt: Avatar\n  text: <span>@qdrant_engine</span> is ultra super powerful! Combine it to <span>@LangChainAI</span> and you have a super productivity boost for your AI projects &#9193;&#9193;&#9193;\n- id: 4\n  name: sengpt\n  nickname: \"@sengpt\"\n  avatar:\n    src: /img/customers/sengpt.svg\n    alt: Avatar\n  text: Thank you, Qdrant is awesome\n- id: 4\n  name: Owen Colegrove\n  nickname: \"@ocolegro\"\n  avatar:\n    src: /img/customers/owen-colegrove.svg\n    alt: Avatar\n  text: that sounds good to me, big fan of qdrant.\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Updating Collections in Qdrant using C#\nDESCRIPTION: This snippet initializes a Qdrant client and updates a collection using the UpdateCollectionAsync method. Dependencies include the Qdrant.Client and Qdrant.Client.Grpc libraries. The main parameter is the collection name that specifies which collection to update. The code uses an empty OptimizersConfigDiff, meaning no changes to the optimization strategy are applied. No output is expected as the operation is asynchronous.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/trigger-indexing/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpdateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\toptimizersConfig: new OptimizersConfigDiff { }\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting a Point with ID, Payload, and Vector into Qdrant Collection (Python)\nDESCRIPTION: This code snippet demonstrates how to insert a point into a Qdrant collection. It sets a UUID as the point's ID, defines a payload with color information, and specifies a vector representation. This method allows for precise control over point insertion in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/uuid-one-point-simple/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n    collection_name=\"example_collection\",\n    points=[\n        PointStruct(\n            id=\"1d1e0566-2ecd-421e-bea4-abcdef123456\",  # UUID\n            payload={\"color\": \"red\"},\n            vector=[0.1, 0.2, 0.3]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting LLM Environment Variables - Python\nDESCRIPTION: Sets up environment variable for the Mistral LLM inference endpoint URL in Python\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nos.environ[\"INFERENCE_ENDPOINT_URL\"] = \"http://mistral-service.default.svc.cluster.local\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Scroll Operation in Go\nDESCRIPTION: This snippet demonstrates how to create a new Qdrant client and perform a scroll operation with nested filters. It initializes the client with a local host and port, then executes a scroll request on a specified collection with complex filtering conditions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-nested-clause/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewNestedFilter(\"diet\", &qdrant.Filter{\n\t\t\t\tMust: []*qdrant.Condition{\n\t\t\t\t\tqdrant.NewMatch(\"food\", \"meat\"),\n\t\t\t\t\tqdrant.NewMatchBool(\"likes\", true),\n\t\t\t\t},\n\t\t\t}),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Matching UUID Values in Qdrant\nDESCRIPTION: This code snippet demonstrates a field condition where the key is \"uuid\" and the value is set to a specific UUID value \"f47ac10b-58cc-4372-a567-0e02b2c3d479\" for matching purposes. It highlights the functionality of matching UUID values efficiently. The exact code is not provided, but the description implies filtering based on a UUID field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-uuid/_description.md#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector and Sparse Vector Configuration in C#\nDESCRIPTION: Establishes connection to a Qdrant server and creates a new collection with specified vector parameters and sparse vector configuration. Sets up a 128-dimensional vector space using cosine distance metric and uint8 datatype, along with sparse vector indexing for text data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-uint8-sparse-and-dense/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  vectorsConfig: new VectorParams {\n    Size = 128,\n      Distance = Distance.Cosine,\n      Datatype = Datatype.Uint8\n  },\n  sparseVectorsConfig: (\n    \"text\",\n    new SparseVectorParams {\n      Index = new SparseIndexConfig {\n        Datatype = Datatype.Uint8\n      }\n    }\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Qdrant AI Framework Integrations in YAML\nDESCRIPTION: This YAML snippet defines the structure for Qdrant's integrations with AI Agent frameworks. It includes metadata like title and integrations, where each integration has an ID, icon, title, description, and documentation URL.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/ai-agents/ai-agents-integrations.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Qdrant integrates with the leading AI Agent frameworks\nintegrations:\n- id: 0\n  icon:\n    src: /img/integrations/integration-lang-graph.svg\n    alt: LangGraph logo\n  title: LangGraph\n  description: Framework for managing multi-LLM workflows with structured graphs for AI agents.\n  url: /documentation/frameworks/langgraph/\n- id: 1\n  icon:\n    src: /img/integrations/integration-open-ai.svg\n    alt: Open AI logo\n  title: Swarm\n  description: Decentralized platform enabling collaboration among AI agents for task completion.\n  url: /documentation/frameworks/swarm/\n- id: 2\n  icon:\n    src: /img/integrations/integration-crew-ai.svg\n    alt: Crew AI logo\n  title: CrewAI\n  description: Team-based AI agent collaboration system orchestrating multi-agent workflows efficiently.\n  url: /documentation/frameworks/crewai/\n- id: 3\n  icon:\n    src: /img/integrations/integration-auto-gen.svg\n    alt: AutoGen logo\n  title: AutoGen\n  description: Automation tool for generating AI agent workflows and automating complex tasks.\n  url: /documentation/frameworks/autogen/\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collection with Nested Filtering in C#\nDESCRIPTION: This code initializes a Qdrant client and performs a scroll query on a collection. It demonstrates the use of nested filtering conditions, combining keyword matching, boolean matching, and ID filtering.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-nested-clause-and-has-id/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: Nested(\"diet\", MatchKeyword(\"food\", \"meat\") & Match(\"likes\", true)) & HasId(1)\n);\n```\n\n----------------------------------------\n\nTITLE: Add Maven Dependency for Mulesoft Vectors Connector\nDESCRIPTION: This XML snippet adds the MuleSoft Vectors connector as a Maven dependency to your Mule application's pom.xml file. This allows you to use the connector's features within your Mulesoft project.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/platforms/mulesoft.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.github.mulesoft-ai-chain-project</groupId>\n    <artifactId>mule4-vectors-connector</artifactId>\n    <version>0.3.0</version>\n    <classifier>mule-plugin</classifier>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using Llama3 Model with LangChain and Ollama\nDESCRIPTION: Shows how to integrate LangChain with Llama3-8B model using Ollama as the deployment tool. Requires Ollama to be installed and the Llama3 model to be available.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/dspy-vs-langchain.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.llms import Ollama\n\nllm = Ollama(model=\"llama3\")\n\nllm.invoke(\"Where is Berlin?\")\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Secret\nDESCRIPTION: This shell snippet shows how to create a Kubernetes secret for storing an API key using kubectl. This is essential for securing access to Qdrant clusters in a Hybrid Cloud setup. The command requires the namespace and the API key value.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/hybrid-cloud-cluster-creation.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret generic qdrant-api-key --from-literal=api-key=your-secret-api-key --namespace the-qdrant-namespace\n```\n\n----------------------------------------\n\nTITLE: Retrieving from Qdrant Collection - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to retrieve specific data entries from a Qdrant collection by their IDs using a client interface. The collection name is specified as a parameter, and an array of IDs is provided to fetch the corresponding entries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/retrieve-points/simple/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.retrieve(\"{collection_name}\", {\n  ids: [0, 3, 100],\n});\n```\n\n----------------------------------------\n\nTITLE: Loading a UFO Dataset in Python\nDESCRIPTION: This snippet demonstrates loading the UFO Dataset from Hugging Face using the `load_dataset` function, which is prepared for training splits. It's part of setting up the data environment for processing PDF pages.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/pdf-retrieval-at-scale.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom datasets import load_dataset\nufo_dataset = \"davanstrien/ufo-ColPali\"\ndataset = load_dataset(ufo_dataset, split=\"train\")\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Logo for Dust\nDESCRIPTION: SVG vector graphic for Dust company logo with geometric pattern design.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_12\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M90 32H80V42H90V32Z\" fill=\"#B4BACC\"/><path d=\"M30 42C32.6522 42 35.1957 40.9464 37.0711 39.0711C38.9464 37.1957 40 34.6522 40 32C40 29.3478 38.9464 26.8043 37.0711 24.9289C35.1957 23.0536 32.6522 22 30 22C27.3478 22 24.8043 23.0536 22.9289 24.9289C21.0536 26.8043 20 29.3478 20 32C20 34.6522 21.0536 37.1957 22.9289 39.0711C24.8043 40.9464 27.3478 42 30 42Z\" fill=\"#B4BACC\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Displaying Baseline Model Performance Metrics\nDESCRIPTION: Table showing the baseline performance metrics (precision@1 and reciprocal_rank) for the Q&A system using the all-MiniLM-L6-v2 model without fine-tuning.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/faq-question-answering.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| precision@1 | reciprocal_rank |\n|-------------|------------------|\n| 0.564       | 0.663           |\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB Kafka Connector\nDESCRIPTION: Command to install the MongoDB Kafka connector, allowing integration of MongoDB as a source for Kafka streaming.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/data-streaming-kafka-qdrant.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nconfluent-hub install mongodb/kafka-connect-mongodb:latest\n```\n\n----------------------------------------\n\nTITLE: Deleting Snapshots in Qdrant using Python Client\nDESCRIPTION: Demonstrates how to initialize a Qdrant client and delete a snapshot from a specified collection. Requires the qdrant_client Python package and a running Qdrant instance accessible at the specified URL.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/delete-collection-snapshot/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.delete_snapshot(\n    collection_name=\"{collection_name}\", snapshot_name=\"{snapshot_name}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up PremAI and Qdrant Clients in TypeScript\nDESCRIPTION: This snippet shows how to create instances of the Prem and Qdrant clients with configurations like API keys and server URLs in TypeScript.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst premaiClient = new Prem({\n    apiKey: \"xxxx-xxx-xxx\"\n})\nconst qdrantClient = new QdrantClient({ url: SERVER_URL });\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Scrolling Collection in Python\nDESCRIPTION: This code snippet demonstrates how to initialize a Qdrant client and perform a scroll operation on a collection. It uses a filter to retrieve only records that have an 'image' vector. The client connects to a local Qdrant instance running on port 6333.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-has-vector/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must=[\n            models.HasVectorCondition(has_vector=\"image\"),\n        ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Aleph Alpha LLM\nDESCRIPTION: Sets up the Aleph Alpha language model with extended token limit for processing longer responses.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-contract-management-stackit-aleph-alpha.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.llms.aleph_alpha import AlephAlpha\n\nllm = AlephAlpha(\n    model=\"luminous-extended-control\",\n    aleph_alpha_api_key=os.environ[\"ALEPH_ALPHA_API_KEY\"],\n    maximum_tokens=200,\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Points in Qdrant Collection using HTTP\nDESCRIPTION: This HTTP POST request queries a specified collection in Qdrant for points based on a multi-vector input. It is intended to retrieve a limited number of points that are similar to the given vectors, using prefetching for improved performance. The expected input includes a collection name, a set of query vectors, and an optional limit for the number of results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-multivector/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": {\n        \"query\": [0.01, 0.45, 0.67, ...], // <-- dense vector\n        \"limit\": 100\n    },\n    \"query\": [           // <─┐\n        [0.1, 0.2, ...], // < │\n        [0.2, 0.1, ...], // < ├─ multi-vector\n        [0.8, 0.9, ...]  // < │\n    ],                   // <─┘       \n    \"using\": \"colbert\",\n    \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a GeoPolygon with Qdrant in C#\nDESCRIPTION: This code snippet creates a geographical polygon using the Qdrant gRPC client in C#. It defines an exterior boundary as well as one interior boundary using latitude and longitude coordinates. The snippet assumes that the necessary Qdrant gRPC packages are installed and that the code is executed within a compatible .NET environment. Parameters include the field name for the geographical data and the lists of points for both the exterior and interior boundaries. There are no input parameters for this snippet; it directly initializes the geometrical shapes.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-poligon/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nGeoPolygon(\n\tfield: \"location\",\n\texterior: new GeoLineString\n\t{\n\t\tPoints =\n\t\t{\n\t\t\tnew GeoPoint { Lat = -70.0, Lon = -70.0 },\n\t\t\tnew GeoPoint { Lat = 60.0, Lon = -70.0 },\n\t\t\tnew GeoPoint { Lat = 60.0, Lon = 60.0 },\n\t\t\tnew GeoPoint { Lat = -70.0, Lon = 60.0 },\n\t\t\tnew GeoPoint { Lat = -70.0, Lon = -70.0 }\n\t\t}\n\t},\n\tinteriors: [\n\t\tnew()\n\t\t{\n\t\t\tPoints =\n\t\t\t{\n\t\t\t\tnew GeoPoint { Lat = -65.0, Lon = -65.0 },\n\t\t\t\tnew GeoPoint { Lat = 0.0, Lon = -65.0 },\n\t\t\t\tnew GeoPoint { Lat = 0.0, Lon = 0.0 },\n\t\t\t\tnew GeoPoint { Lat = -65.0, Lon = 0.0 },\n\t\t\t\tnew GeoPoint { Lat = -65.0, Lon = -65.0 }\n\t\t\t}\n\t\t}\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sparse Vectors in Qdrant Collection\nDESCRIPTION: This HTTP PUT request creates or updates a Qdrant collection with sparse vector configuration. It specifies an empty configuration for a sparse vector named 'text', allowing Qdrant to use default settings for sparse vector indexing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"sparse_vectors\": {\n        \"text\": { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Qdrant Repository Operations - Java Service\nDESCRIPTION: Service class demonstrating basic document operations with QdrantRepository including insertion and search functionality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/solon.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class DemoService {\n    @Inject\n    private QdrantRepository repository;\n    \n    // Add documents to the repository\n    public void addDocument(List<Document> docs) {\n        repository.insert(docs);\n    }\n    \n    // Search for documents based on a query\n    public List<Document> findDocument(String query) {\n        return repository.search(query);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dailymotion Case Study Content Structure in YAML\nDESCRIPTION: YAML configuration that defines the structure and content for a case study landing page. Includes specifications for logo image, title, HTML-formatted description, call-to-action link, and preview image. Also sets a sitemapExclude flag.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/case-study-dailymotion.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncaseStudy:\n  logo:\n    src: /img/customers-case-studies/customer-logo4.svg\n    alt: Logo Dailymotion\n  title: Recommendation Engine with Qdrant Vector Database\n  description: Dailymotion leverages Qdrant to optimize its <b>video recommendation engine</b>, managing over 420 million videos and processing 13 million recommendations daily. With this, Dailymotion was able to <b>reduced content processing times from hours to minutes</b> and <b>increased user interactions and click-through rates by more than 3x.</b>\n  link:\n    text: Read Case Study\n    url: /blog/case-study-dailymotion/\n  image:\n    src: /img/customers-case-studies/case-study4.png\n    alt: Preview\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Scrolling Points with Filters in Go\nDESCRIPTION: This snippet demonstrates how to initialize a Qdrant client and perform a scroll operation on a collection with specific filters. It sets up the client with a local host and port, then uses the Scroll method to query points in a collection, applying 'must' and 'must not' conditions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-multiple-clauses-combination/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t\t},\n\t\tMustNot: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"color\", \"red\"),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Records from Qdrant\nDESCRIPTION: SQL query to retrieve all records from a Qdrant collection. By default, this query returns 10 records with an offset of 0.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/mindsdb.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM qdrant_test.test_table\n```\n\n----------------------------------------\n\nTITLE: Creating On-Disk Payload Index - Multi-Language Implementation\nDESCRIPTION: Demonstrates how to create a payload index with both tenant optimization and on-disk storage enabled. This allows for efficient management of cold data by storing it on disk rather than in RAM.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.11.x.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/index\n{\n    \"field_name\": \"group_id\",\n    \"field_schema\": {\n        \"type\": \"keyword\",\n        \"is_tenant\": true,\n        \"on_disk\": true\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"group_id\",\n    field_schema=models.KeywordIndexParams(\n        type=\"keyword\",\n        is_tenant=True,\n        on_disk=True,\n    ),\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"group_id\",\n  field_schema: {\n    type: \"keyword\",\n    is_tenant: true,\n    on_disk: true\n  },\n});\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\n    CreateFieldIndexCollectionBuilder,\n    KeywordIndexParamsBuilder,\n    FieldType\n};\nuse qdrant_client::{Qdrant, QdrantError};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.create_field_index(\n    CreateFieldIndexCollectionBuilder::new(\n        \"{collection_name}\",\n        \"group_id\",\n        FieldType::Keyword,\n    )\n    .field_index_params(\n        KeywordIndexParamsBuilder::default()\n            .is_tenant(true)\n            .on_disk(true),\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Snapshots using Qdrant Java Client\nDESCRIPTION: Sets up a Qdrant client connection to a local instance and performs an asynchronous snapshot deletion operation. The code establishes an unencrypted connection to localhost on port 6334 and deletes a specified snapshot from a collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/delete-collection-snapshot/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.deleteSnapshotAsync(\"{collection_name}\", \"{snapshot_name}\").get();\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Go\nDESCRIPTION: This snippet shows how to create a Qdrant client and set up a new collection with multiple vector configurations. It defines dense vectors for image and text data, as well as a sparse vector for text. The collection is created with specified vector sizes and distance metrics.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/named-vectors/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfigMap(\n\t\tmap[string]*qdrant.VectorParams{\n\t\t\t\"image\": {\n\t\t\t\tSize:     4,\n\t\t\t\tDistance: qdrant.Distance_Dot,\n\t\t\t},\n\t\t\t\"text\": {\n\t\t\t\tSize:     5,\n\t\t\t\tDistance: qdrant.Distance_Cosine,\n\t\t\t},\n\t\t}),\n\tSparseVectorsConfig: qdrant.NewSparseVectorsConfig(\n\t\tmap[string]*qdrant.SparseVectorParams{\n\t\t\t\"text-sparse\": {},\n\t\t},\n\t),\n})\n```\n\n----------------------------------------\n\nTITLE: GET Snapshot Endpoint\nDESCRIPTION: HTTP GET endpoint for retrieving a specific snapshot by name. The snapshot_name parameter in the URL path identifies which snapshot to retrieve.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/download-full-snapshot/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /snapshots/{snapshot_name}\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Payload Example for arXiv Titles Dataset\nDESCRIPTION: Demonstrates the structure of the payload for each vector in the arxiv-titles-instructorxl-embeddings dataset, containing the paper title and DOI.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/huggingface-datasets.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"title\": \"Nash Social Welfare for Indivisible Items under Separable, Piecewise-Linear Concave Utilities\",\n    \"DOI\": \"1612.05191\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Payload Fields with Qdrant Python Client\nDESCRIPTION: This code demonstrates how to delete specific payload fields ('color' and 'price') from points in a Qdrant collection that match a filter condition. The filter is set to target points where the 'color' field equals 'red'. This operation is useful for selectively removing metadata from vector entries while preserving the vectors themselves.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-payload/by-filter/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.delete_payload(\n    collection_name=\"{collection_name}\",\n    keys=[\"color\", \"price\"],\n    points=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"color\",\n                match=models.MatchValue(value=\"red\"),\n            ),\n        ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Running the FastAPI Service in Bash\nDESCRIPTION: Command to start the FastAPI service using Python. This launches the service on port 8000, making it available for search queries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npython service.py\n```\n\n----------------------------------------\n\nTITLE: Creating Tenant-Optimized Index - Multi-Language Implementation\nDESCRIPTION: Shows how to create a payload index with tenant optimization enabled across different programming languages. The is_tenant flag enables storage optimization based on tenant access patterns.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.11.x.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/index\n{\n    \"field_name\": \"group_id\",\n    \"field_schema\": {\n        \"type\": \"keyword\",\n        \"is_tenant\": true\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"group_id\",\n    field_schema=models.KeywordIndexParams(\n        type=\"keyword\",\n        is_tenant=True,\n    ),\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"group_id\",\n  field_schema: {\n    type: \"keyword\",\n    is_tenant: true,\n  },\n});\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\n    CreateFieldIndexCollectionBuilder,\n    KeywordIndexParamsBuilder,\n    FieldType\n};\nuse qdrant_client::{Qdrant, QdrantError};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.create_field_index(\n        CreateFieldIndexCollectionBuilder::new(\n            \"{collection_name}\",\n            \"group_id\",\n            FieldType::Keyword,\n        ).field_index_params(\n            KeywordIndexParamsBuilder::default()\n                .is_tenant(true)\n        )\n    ).await?;\n```\n\n----------------------------------------\n\nTITLE: Displaying Simplified IDF Formula with LaTeX\nDESCRIPTION: This LaTeX code presents a simplified formula for Inverse Document Frequency (IDF), showing how term rarity is calculated as the ratio of total documents to documents containing a specific term.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/bm42.md#2025-04-21_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\text{IDF}(q_i) = \\frac{\\text{Number of documents}}{\\text{Number of documents with } q_i}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Snapshot via HTTP GET\nDESCRIPTION: HTTP GET endpoint for retrieving a specific snapshot from a named collection in Qdrant. The endpoint requires both the collection name and snapshot name as path parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/download-collection-snapshot/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /collections/{collection_name}/snapshots/{snapshot_name}\n```\n\n----------------------------------------\n\nTITLE: Configuring QdrantDocumentStore with Scalar Quantization\nDESCRIPTION: Example of creating a QdrantDocumentStore instance with custom configuration including Scalar Quantization settings. Shows how to initialize an in-memory document store with specific embedding dimensions and quantization parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/haystack.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_haystack.document_stores import QdrantDocumentStore\nfrom qdrant_client import models\n\ndocument_store = QdrantDocumentStore(\n    \":memory:\",\n    index=\"Document\",\n    embedding_dim=512,\n    recreate_index=True,\n    quantization_config=models.ScalarQuantization(\n        scalar=models.ScalarQuantizationConfig(\n            type=models.ScalarType.INT8,\n            quantile=0.99,\n            always_ram=True,\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Langchain Go Dependency\nDESCRIPTION: Command to install the Langchain Go project dependency using go get.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langchain-go.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/tmc/langchaingo\n```\n\n----------------------------------------\n\nTITLE: Updating Payload for Multiple Points in Qdrant Collection\nDESCRIPTION: This HTTP PUT request updates the payload for specific points in a Qdrant collection. It sets properties 'property1' and 'property2' for the points with IDs 0, 3, and 100.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/overwrite-payload/by-point-id/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/points/payload\n{\n    \"payload\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n    },\n    \"points\": [\n        0, 3, 100\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Matrix Offsets with Filtering in Qdrant using Rust\nDESCRIPTION: This code snippet demonstrates how to perform a matrix offset search in a Qdrant collection with a filter condition. It creates a search query that filters for items where the 'color' field matches 'red', samples 10 points, and limits the results to 2 items.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/distance-matrix/offsets-format/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, SearchMatrixPointsBuilder};\nuse qdrant_client::Qdrant;\n\nclient\n    .search_matrix_offsets(\n        SearchMatrixPointsBuilder::new(\"collection_name\")\n           .filter(Filter::must(vec![Condition::matches(\n               \"color\",\n               \"red\".to_string(),\n           )]))\n           .sample(10)\n           .limit(2),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Defining Qdrant Operator Configuration Options in YAML\nDESCRIPTION: This YAML snippet specifies various configuration options for the Qdrant operator, including replicas, image repository, service account, security context, and metrics settings. Key parameters include 'replicaCount' for the number of operator replicas, 'image' details for the operator, 'service' settings for metrics exposure, and resource controls. The expected inputs are key-value pairs defining these configurations, while the outputs are the Kubernetes resources created based on this configuration. Constraints include a requirement for specific privileges and access controls.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noperator:\n  # Amount of replicas for the Qdrant operator (v2)\n  replicaCount: 1\n\n  image:\n    # Image repository for the qdrant operator\n    repository: registry.cloud.qdrant.io/qdrant/operator\n    # Image pullPolicy\n    pullPolicy: IfNotPresent\n    # Overrides the image tag whose default is the chart appVersion.\n    tag: \"\"\n\n  # Optional image pull secrets\n  imagePullSecrets:\n    - name: qdrant-registry-creds\n\n  nameOverride: \"\"\n  fullnameOverride: \"operator\"\n\n  # Service account configuration\n  serviceAccount:\n    create: true\n    annotations: {}\n\n  # Additional pod annotations\n  podAnnotations: {}\n\n  # pod security context\n  podSecurityContext:\n    runAsNonRoot: true\n    runAsUser: 10001\n    runAsGroup: 20001\n    fsGroup: 30001\n\n  # container security context\n  securityContext:\n    capabilities:\n      drop:\n      - ALL\n    readOnlyRootFilesystem: true\n    runAsNonRoot: true\n    runAsUser: 10001\n    runAsGroup: 20001\n    allowPrivilegeEscalation: false\n    seccompProfile:\n      type: RuntimeDefault\n\n  # Configuration for the Qdrant operator service to expose metrics\n  service:\n    enabled: true\n    type: ClusterIP\n    metricsPort: 9290\n\n  # Configuration for the Qdrant operator service monitor to scrape metrics\n  serviceMonitor:\n    enabled: false\n\n  # Resource requests and limits for the Qdrant operator\n  resources: {}\n\n  # Node selector for the Qdrant operator\n  nodeSelector: {}\n\n  # Tolerations for the Qdrant operator\n  tolerations: []\n\n  # Affinity configuration for the Qdrant operator\n  affinity: {}\n\n  watch:\n    # If true, watches only the namespace where the Qdrant operator is deployed, otherwise watches the namespaces in watch.namespaces\n    onlyReleaseNamespace: true\n    # an empty list watches all namespaces.\n    namespaces: []\n\n  limitRBAC: true\n\n  # Configuration for the Qdrant operator (v2)\n  settings:\n    # Does the operator run inside of a Kubernetes cluster (kubernetes) or outside (local)\n    appEnvironment: kubernetes\n    # The log level for the operator\n    # Available options: DEBUG | INFO | WARN | ERROR\n    logLevel: INFO\n    # Metrics contains the operator config related the metrics\n    metrics:\n      # The port used for metrics\n      port: 9290\n    # Health contains the operator config related the health probe\n    healthz:\n      # The port used for the health probe\n      port: 8285\n    # Controller related settings\n    controller:\n      # The period a forced recync is done by the controller (if watches are missed / nothing happened)\n      forceResyncPeriod: 10h\n      # QPS indicates the maximum QPS to the master from this client.\n      # Default is 200\n      qps: 200\n      # Maximum burst for throttle.\n      # Default is 500.\n      burst: 500\n    # Features contains the settings for enabling / disabling the individual features of the operator\n    features:\n      # ClusterManagement contains the settings for qdrant (database) cluster management\n      clusterManagement:\n        # Whether or not the Qdrant cluster features are enabled.\n        # If disabled, all other properties in this struct are disregarded. Otherwise, the individual features will be inspected.\n        # Default is true.\n        enable: true\n        # The StorageClass used to make database and snapshot PVCs.\n        # Default is nil, meaning the default storage class of Kubernetes.\n        storageClass:\n          # The StorageClass used to make database PVCs.\n          # Default is nil, meaning the default storage class of Kubernetes.\n          #database:\n          # The StorageClass used to make snapshot PVCs.\n          # Default is nil, meaning the default storage class of Kubernetes.\n          #snapshot:\n        # Qdrant config contains settings specific for the database\n        qdrant:\n          # The config where to find the image for qdrant\n          image:\n            # The repository where to find the image for qdrant\n            # Default is \"qdrant/qdrant\"\n            repository: registry.cloud.qdrant.io/qdrant/qdrant\n            # Docker image pull policy\n            # Default \"IfNotPresent\", unless the tag is dev, master or latest. Then \"Always\"\n            #pullPolicy:\n            # Docker image pull secret name\n            # This secret should be available in the namespace where the cluster is running\n            # Default not set\n            #pullSecretName: qdrant-registry-creds\n          # storage contains the settings for the storage of the Qdrant cluster\n          storage:\n            performance:\n              # CPU budget, how many CPUs (threads) to allocate for an optimization job.\n              # If 0 - auto selection, keep 1 or more CPUs unallocated depending on CPU size\n              # If negative - subtract this number of CPUs from the available CPUs.\n              # If positive - use this exact number of CPUs.\n              optimizerCpuBudget: 0\n              # Enable async scorer which uses io_uring when rescoring.\n              # Only supported on Linux, must be enabled in your kernel.\n              # See: <https://qdrant.tech/articles/io_uring/#and-what-about-qdrant>\n              asyncScorer: false\n          # Qdrant DB log level\n          # Available options: DEBUG | INFO | WARN | ERROR\n          # Default is \"INFO\"\n          logLevel: INFO\n          # Default Qdrant security context configuration\n          securityContext:\n            # Enable default security context\n            # Default is false\n            enabled: false\n            # Default user for qdrant container\n            # Default not set\n            #user: 1000\n            # Default fsGroup for qdrant container\n            # Default not set\n            #fsUser: 2000\n            # Default group for qdrant container\n            # Default not set\n            #group: 3000\n          # Network policies configuration for the Qdrant databases\n          networkPolicies:\n            # Whether or not NetworkPolicy management is enabled.\n            # If set to false, no NetworkPolicies will be created.\n            # Default is true.\n            enable: true\n            ingress:\n              - ports:\n                  - protocol: TCP\n                    port: 6333\n                  - protocol: TCP\n                    port: 6334\n            # Allow DNS resolution from qdrant pods at Kubernetes internal DNS server\n            egress:\n              - ports:\n                  - protocol: UDP\n                    port: 53\n        # Scheduling config contains the settings specific for scheduling\n        scheduling:\n          # Default topology spread constraints (list from type corev1.TopologySpreadConstraint)\n          # Default is an empty list\n          topologySpreadConstraints: []\n          # Default pod disruption budget (object from type policyv1.PodDisruptionBudgetSpec)\n          # Default is not set\n          podDisruptionBudget:  {}\n        # ClusterManager config contains the settings specific for cluster manager\n        clusterManager:\n          # Whether or not the cluster manager (on operator level).\n          # If disabled, all other properties in this struct are disregarded. Otherwise, the individual features will be inspected.\n          # Default is false.\n          enable: true\n          # The endpoint address where the cluster manager can be reached\n          endpointAddress: \"http://qdrant-cluster-manager\"\n          # InvocationInterval is the interval between calls (started after the previous call is retured)\n          # Default is 10 seconds\n          invocationInterval: 10s\n          # Timeout is the duration a single call to the cluster manager is allowed to take.\n          # Default is 30 seconds\n          timeout: 30s\n          # Specifies overrides for the manage rules\n          manageRulesOverrides:\n            #dry_run:\n            #max_transfers:\n            #max_transfers_per_collection:\n            #rebalance:\n            #replicate:\n        # Ingress config contains the settings specific for ingress\n        ingress:\n          # Whether or not the Ingress feature is enabled.\n          # Default is true.\n          enable: false\n          # Which specific ingress provider should be used\n          # Default is KubernetesIngress\n          provider: KubernetesIngress\n          # The specific settings when the Provider is QdrantCloudTraefik\n          qdrantCloudTraefik:\n            # Enable tls\n            # Default is false\n            tls: false\n            # Secret with TLS certificate\n            # Default is None\n            secretName: \"\"\n            # List of Traefik middlewares to apply\n            # Default is an empty list\n            middlewares: []\n            # IP Allowlist Strategy for Traefik\n            # Default is None\n            ipAllowlistStrategy:\n            # Enable body validator plugin and matching ingressroute rules\n            # Default is false\n            enableBodyValidatorPlugin: false\n          # The specific settings when the Provider is KubernetesIngress\n          kubernetesIngress:\n            # Name of the ingress class\n            # Default is None\n            #ingressClassName:\n        # TelemetryTimeout is the duration a single call to the cluster telemetry endpoint is allowed to take.\n        # Default is 3 seconds\n        telemetryTimeout: 3s\n        # MaxConcurrentReconciles is the maximum number of concurrent Reconciles which can be run. Defaults to 20.\n        maxConcurrentReconciles: 20\n        # VolumeExpansionMode specifies the expansion mode, which can be online or offline (e.g. in case of Azure).\n        # Available options: Online, Offline\n        # Default is Online\n        volumeExpansionMode: Online\n      # BackupManagementConfig contains the settings for backup management\n      backupManagement:\n        # Whether or not the backup features are enabled.\n```\n\n----------------------------------------\n\nTITLE: Defining Cloud Provider Compatibility Data in YAML\nDESCRIPTION: This YAML configuration defines a list of cloud providers and infrastructure platforms compatible with Qdrant. The data includes two sections (partnersFirstPart and partnersSecondPart), each containing entries with provider names and logo information. Each provider entry has a unique ID, name, and logo details including source path and alt text.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/hybrid-cloud/hybrid-cloud-partners.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Seamlessly connect Qdrant with a wide array of cloud providers and infrastructure platforms, including but not limited to these options:\"\npartnersFirstPart:\n  - id: 0\n    name: AWS\n    logo:\n      src: /img/cloud-provider-logos/aws-logo.svg\n      alt: AWS logo\n  - id: 1\n    name: Google Cloud\n    logo:\n      src: /img/cloud-provider-logos/google-cloud-logo.svg\n      alt: Google Cloud logo\n  - id: 2\n    name: Digital Ocean\n    logo:\n      src: /img/cloud-provider-logos/digital-ocean-logo.svg\n      alt: Digital Ocean logo\n  - id: 3\n    name: Oracle Cloud\n    logo:\n      src: /img/cloud-provider-logos/oracle-cloud-logo.svg\n      alt: Oracle Cloud logo\n  - id: 4\n    name: Linode\n    logo:\n      src: /img/cloud-provider-logos/linode-logo.svg\n      alt: Linode logo\n  - id: 5\n    name: AWS\n    logo:\n      src: /img/cloud-provider-logos/aws-logo.svg\n      alt: AWS logo\n  - id: 6\n    name: Google Cloud\n    logo:\n      src: /img/cloud-provider-logos/google-cloud-logo.svg\n      alt: Google Cloud logo\n  - id: 7\n    name: Digital Ocean\n    logo:\n      src: /img/cloud-provider-logos/digital-ocean-logo.svg\n      alt: Digital Ocean logo\n  - id: 8\n    name: Oracle Cloud\n    logo:\n      src: /img/cloud-provider-logos/oracle-cloud-logo.svg\n      alt: Oracle Cloud logo\n  - id: 9\n    name: Linode\n    logo:\n      src: /img/cloud-provider-logos/linode-logo.svg\n      alt: Linode logo\npartnersSecondPart:\n  - id: 0\n    name: Rancher\n    logo:\n      src: /img/cloud-provider-logos/rancher-logo.svg\n      alt: Rancher logo\n  - id: 1\n    name: Azure\n    logo:\n      src: /img/cloud-provider-logos/azure-logo.svg\n      alt: Azure logo\n  - id: 2\n    name: VMWare Tanzu\n    logo:\n      src: /img/cloud-provider-logos/vmware-tanzu-logo.svg\n      alt: VMWare Tanzu logo\n  - id: 3\n    name: Openshift\n    logo:\n      src: /img/cloud-provider-logos/openshift-logo.svg\n      alt: Openshift logo\n  - id: 4\n    name: Scaleway\n    logo:\n      src: /img/cloud-provider-logos/scaleway-logo.svg\n      alt: Scaleway logo\n  - id: 5\n    name: Rancher\n    logo:\n      src: /img/cloud-provider-logos/rancher-logo.svg\n      alt: Rancher logo\n  - id: 6\n    name: Azure\n    logo:\n      src: /img/cloud-provider-logos/azure-logo.svg\n      alt: Azure logo\n  - id: 7\n    name: VMWare Tanzu\n    logo:\n      src: /img/cloud-provider-logos/vmware-tanzu-logo.svg\n      alt: VMWare Tanzu logo\n  - id: 8\n    name: Openshift\n    logo:\n      src: /img/cloud-provider-logos/openshift-logo.svg\n      alt: Openshift logo\n  - id: 9\n    name: Scaleway\n    logo:\n      src: /img/cloud-provider-logos/scaleway-logo.svg\n      alt: Scaleway logo\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Movie Metadata Definition\nDESCRIPTION: Defines a list of movie metadata including names, watch times, and descriptions for 20 different films.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmetadata = [{\"movie_name\": \"The Passion of Joan of Arc\", \"movie_watch_time_min\": 114, \"movie_description\": \"In 1431, Jeanne d'Arc is placed on trial on charges of heresy. The ecclesiastical jurists attempt to force Jeanne to recant her claims of holy visions.\"}, ... ]\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Vectors and Payloads in Qdrant using Python\nDESCRIPTION: This code demonstrates how to upsert multiple points into a Qdrant collection. Each point has an ID, a payload containing a color attribute, and a 3-dimensional vector. The upsert operation will insert new points or update existing ones if the IDs already exist in the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/list-of-points-simple/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n    collection_name=\"{collection_name}\",\n    points=[\n        models.PointStruct(\n            id=1,\n            payload={\n                \"color\": \"red\",\n            },\n            vector=[0.9, 0.1, 0.1],\n        ),\n        models.PointStruct(\n            id=2,\n            payload={\n                \"color\": \"green\",\n            },\n            vector=[0.1, 0.9, 0.1],\n        ),\n        models.PointStruct(\n            id=3,\n            payload={\n                \"color\": \"blue\",\n            },\n            vector=[0.1, 0.1, 0.9],\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Source Connector\nDESCRIPTION: This JSON contains the configuration settings for the MongoDB source connector, defining how the connector retrieves data from the MongoDB instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/data-streaming-kafka-qdrant.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"MongoSourceConnectorConnector_0\",\n  \"config\": {\n    \"connector.class\": \"com.mongodb.kafka.connect.MongoSourceConnector\",\n    \"key.converter\": \"org.apache.kafka.connect.storage.StringConverter\",\n    \"value.converter\": \"org.apache.kafka.connect.storage.StringConverter\",\n    \"connection.uri\": \"mongodb://127.0.0.1:27017/?replicaSet=rs0&directConnection=true\",\n    \"database\": \"qdrant_kafka\",\n    \"collection\": \"docs\",\n    \"publish.full.document.only\": \"true\",\n    \"topic.namespace.map\": \"{\\\"*\\\":\\\"qdrant_kafka.docs\\\"}\",\n    \"copy.existing\": \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Matching a Condition for Color in Rust\nDESCRIPTION: This snippet utilizes the Condition struct to determine if a given attribute matches the expected value. It checks if the 'color' field equals 'red', returning true if it does. The required dependency is the implementation of the Condition struct that provides the matches function. The output is a boolean indicating the result of the match operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-keyword/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nCondition::matches(\"color\", \"red\".to_string())\n```\n\n----------------------------------------\n\nTITLE: Previewing Document Content from Qdrant Documentation Dataset\nDESCRIPTION: Simple code to preview a sample document from the loaded dataset, allowing examination of the text content that will be used in the RAG pipeline.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n## Here's an example of what a document in our dataset looks like\nprint(dataset[100]['text'])\n```\n\n----------------------------------------\n\nTITLE: Initializing Uptrend API for LLM Evaluation\nDESCRIPTION: Demonstrates initializing Uptrend's API to perform evaluations on LLM responses. The API allows configuring various checks like context relevance, response completeness, jailbreak detection, safety, and user satisfaction scoring.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/vector-search-for-content-based-video-recommendation-gladys-and-sam-vector-space-talk-012.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nuptrend.log_and_evaluate({\n  \"data\": {/* question, response, context */},\n  \"checks\": [\"context_relevance\", \"response_completeness\", \"jailbreak\", \"safety\", \"satisfaction\"]\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Collection Existence in Qdrant using cURL\nDESCRIPTION: This command makes a GET request to the Qdrant API to check if a specific collection exists. Replace {collection_name} with the actual name of the collection you want to check.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/check-collection-exists/simple/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET http://localhost:6333/collections/{collection_name}/exists\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant Landing Page Locally with Hugo\nDESCRIPTION: Commands to serve the Qdrant landing page locally using Hugo. This allows developers to preview changes before deployment.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd qdrant-landing\nhugo serve\n```\n\n----------------------------------------\n\nTITLE: Deploying Food Discovery Demo with Docker\nDESCRIPTION: Commands for setting up and running the Food Discovery Demo locally using Docker. Includes steps for cloning the repository and starting the application with docker-compose.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/food-discovery-demo.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:qdrant/demo-food-discovery.git\ncd demo-food-discovery\n# Create .env file based on .env.example\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant with Custom Configuration\nDESCRIPTION: Command to run Qdrant with a custom configuration file that overwrites the default production configuration, allowing for customized settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6333:6333 \\\n    -v $(pwd)/path/to/data:/qdrant/storage \\\n    -v $(pwd)/path/to/custom_config.yaml:/qdrant/config/production.yaml \\\n    qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Deleting Payload Fields from Qdrant Vector Records Using C# Client\nDESCRIPTION: This code initializes a Qdrant client connection to a local server and deletes the 'color' and 'price' payload fields from multiple vector records with specific IDs. The client connects to a Qdrant server running on localhost port 6334.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-payload/by-point-id/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.DeletePayloadAsync(\n    collectionName: \"{collection_name}\",\n    keys: [\"color\", \"price\"],\n    ids: new ulong[] { 0, 3, 100 }\n);\n```\n\n----------------------------------------\n\nTITLE: Alternative Embedding Model Implementation\nDESCRIPTION: Fourth experiment using MiniLM embedding model while maintaining optimized chunk parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n#experiment-4\nchunk_size=512\nchunk_overlap=64\nembedding_model_name=\"sentence-transformers/all-MiniLM-L6-v2\"\nnum_docs=5\n\nCOLLECTION_NAME = f\"experiment_{chunk_size}_{chunk_overlap}_{embedding_model_name.split('/')[1]}\"\n\nadd_documents(client,\n              collection_name=COLLECTION_NAME,\n              chunk_size=chunk_size,\n              chunk_overlap=chunk_overlap,\n              embedding_model_name=embedding_model_name)\n\n#Outputs\n#processed: 4504\n#content:   4504\n#metadata:  4504\n```\n\n----------------------------------------\n\nTITLE: Creating a New Blog Post using Hugo\nDESCRIPTION: This command creates a new blog post file with the necessary front matter. The created file should be edited to add content and metadata.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd qdrant-landing\nhugo new --kind blog-post blog/<post-title>.md\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for LangGraph and Qdrant\nDESCRIPTION: Commands for installing required packages in Python and Node.js environments.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langgraph.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n$ pip install langgraph langchain_community langchain_qdrant fastembed\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$ npm install @langchain/langgraph langchain @langchain/qdrant @langchain/openai\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI Dependencies\nDESCRIPTION: Installs FastAPI and uvicorn for creating the web service.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/neural-search-tutorial.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip install fastapi uvicorn\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Snapshot in Go\nDESCRIPTION: Demonstrates how to initialize a Qdrant client connection and create a full database snapshot. The client connects to a local Qdrant instance on port 6334 and uses the context package for operation management.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/create-full-snapshot/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateFullSnapshot(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Preparing Documents with Metadata\nDESCRIPTION: Example of preparing documents with associated metadata and IDs for insertion into Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/fastembed.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndocs = [\n    \"Qdrant has Langchain integrations\",\n    \"Qdrant also has Llama Index integrations\"\n]\nmetadata = [\n    {\"source\": \"Langchain-docs\"},\n    {\"source\": \"LlamaIndex-docs\"},\n]\nids = [42, 2]\n```\n\n----------------------------------------\n\nTITLE: Querying Documents with Tenant-Specific Constraints\nDESCRIPTION: Demonstrating how to create retrievers with metadata filters to implement tenant-specific search constraints.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/llama-index-multitenancy.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.core.vector_stores.types import MetadataFilters, ExactMatchFilter\n\nqdrant_retriever = index.as_retriever(\n    filters=MetadataFilters(\n        filters=[\n            ExactMatchFilter(\n                key=\"library\",\n                value=\"qdrant\",\n            )\n        ]\n    )\n)\n\nnodes_with_scores = qdrant_retriever.retrieve(\"large language models\")\nfor node in nodes_with_scores:\n    print(node.text, node.score)\n\nllama_index_retriever = index.as_retriever(\n    filters=MetadataFilters(\n        filters=[\n            ExactMatchFilter(\n                key=\"library\",\n                value=\"llama-index\",\n            )\n        ]\n    )\n)\n\nnodes_with_scores = llama_index_retriever.retrieve(\"large language models\")\nfor node in nodes_with_scores:\n    print(node.text, node.score)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database in Java\nDESCRIPTION: This snippet shows how to initialize a Qdrant client and perform a vector similarity search with quantization parameters. It demonstrates connecting to a local Qdrant server, constructing a nearest neighbor query with a 4-dimensional vector, and configuring quantization search parameters including oversampling and rescoring.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-quantization-oversampling/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QuantizationSearchParams;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.SearchParams;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setParams(\n                        SearchParams.newBuilder()\n                                .setQuantization(\n                                        QuantizationSearchParams.newBuilder()\n                                                .setIgnore(false)\n                                                .setRescore(true)\n                                                .setOversampling(2.0)\n                                                .build())\n                                .build())\n                .setLimit(10)\n                .build())\n        .get();\n```\n\n----------------------------------------\n\nTITLE: Uploading User Ratings to Qdrant Collection (Python)\nDESCRIPTION: Python code to upload user ratings as sparse vectors to the 'movielens' collection in Qdrant, along with user metadata.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/recommendation-system-ovhcloud.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef data_generator():\n    for user in users.itertuples():\n        yield models.PointStruct(\n            id=user.user_id,\n            vector={\n                \"ratings\": user_sparse_vectors[user.user_id]\n            },\n            payload=user._asdict()\n        )\n\nclient.upload_points(\n    \"movielens\",\n    data_generator()\n)\n```\n\n----------------------------------------\n\nTITLE: Hybrid Search with Java Client\nDESCRIPTION: Implementation of hybrid search using the Qdrant Java client with gRPC connection\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport java.util.List;\n\nimport static io.qdrant.client.QueryFactory.fusion;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Fusion;\nimport io.qdrant.client.grpc.Points.PrefetchQuery;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n    QueryPoints.newBuilder()\n    .setCollectionName(\"{collection_name}\")\n    .addPrefetch(PrefetchQuery.newBuilder()\n      .setQuery(nearest(List.of(0.22f, 0.8f), List.of(1, 42)))\n      .setUsing(\"sparse\")\n      .setLimit(20)\n      .build())\n    .addPrefetch(PrefetchQuery.newBuilder()\n      .setQuery(nearest(List.of(0.01f, 0.45f, 0.67f)))\n      .setUsing(\"dense\")\n      .setLimit(20)\n      .build())\n    .setQuery(fusion(Fusion.RRF))\n    .build())\n  .get();\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration with UUID Match\nDESCRIPTION: This JSON snippet configures a filter or query criterion based on a UUID. The \"key\" field specifies the attribute to match, which is \"uuid\" in this case. The \"match\" field contains the value to match against, which is a specific UUID.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-uuid/json.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"uuid\",\n  \"match\": {\n    \"value\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Go\nDESCRIPTION: This snippet initializes a Qdrant client using provided host and port configurations, and then creates a new collection with specified vector configurations such as size and distance metrics. It utilizes the Go programming language and requires the 'github.com/qdrant/go-client/qdrant' package as a dependency.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-large-segments/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tOptimizersConfig: &qdrant.OptimizersConfigDiff{\n\t\tDefaultSegmentNumber: qdrant.PtrOf(uint64(2)),\n\t\tMaxSegmentSize:       qdrant.PtrOf(uint64(5000000)),\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying BM25 Formula with LaTeX\nDESCRIPTION: This LaTeX code renders the mathematical formula for BM25, which calculates a relevance score between a document and a query by summing the product of inverse document frequency and term importance across all query terms.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/bm42.md#2025-04-21_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\text{score}(D,Q) = \\sum_{i=1}^{N} \\text{IDF}(q_i) \\times \\frac{f(q_i, D) \\cdot (k_1 + 1)}{f(q_i, D) + k_1 \\cdot \\left(1 - b + b \\cdot \\frac{|D|}{\\text{avgdl}}\\right)}\n```\n\n----------------------------------------\n\nTITLE: Curl Request with API Key Authentication\nDESCRIPTION: Example of making an authenticated REST API request to Qdrant using curl with the API key in the header.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -X GET https://localhost:6333 \\\n  --header 'api-key: your_secret_api_key_here'\n```\n\n----------------------------------------\n\nTITLE: Disabling HNSW Indexing Configuration in Qdrant\nDESCRIPTION: API request to disable HNSW indexing by setting m=0, reducing memory and CPU usage during bulk ingestion of dense vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/indexing-optimization.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nPATCH /collections/your_collection\n{\n  \"hnsw_config\": {\n    \"m\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Field Condition\nDESCRIPTION: This code snippet defines a field condition used for filtering data. The condition specifies that the key is \"count\" and the matching value for the field is set to 0. This can be used in a query to only retrieve results where the \"count\" field is exactly 0.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-integer/_description.md#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Creating Qdrant Retriever Tool in TypeScript\nDESCRIPTION: Initializes a Qdrant vector store using OpenAI embeddings and creates a retriever tool for use in LangGraph.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langgraph.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantVectorStore } from \"@langchain/qdrant\";\nimport { OpenAIEmbeddings } from \"@langchain/openai\";\nimport { createRetrieverTool } from \"langchain/tools/retriever\";\n\nconst vectorStore = await QdrantVectorStore.fromTexts(\n    [\"<SOME_KNOWLEDGE_TEXT>\", \"<SOME_OTHER_TEXT>\"],\n    [{ id: 2 }, { id: 1 }],\n    new OpenAIEmbeddings(),\n    {\n        url: \"http://localhost:6333/\",\n        collectionName: \"goldel_escher_bach\",\n    }\n);\n\nconst retriever = vectorStore.asRetriever();\n\nconst tool = createRetrieverTool(\n  retriever,\n  {\n    name: \"retrieve_my_texts\",\n    description:\n      \"Retrieve texts stored in the Qdrant collection\",\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Float16 Vectors in C#\nDESCRIPTION: This C# snippet demonstrates how to create a Qdrant collection using the C# client, configuring float16 vectors for reduced memory usage and potentially faster operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  vectorsConfig: new VectorParams {\n    Size = 1024,\n    Distance = Distance.Cosine,\n    Datatype = Datatype.Float16\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Testimonials Wall in YAML\nDESCRIPTION: YAML structure defining a testimonials display section with title, submission link, and an array of customer testimonials. Each testimonial includes customer details, avatar image configuration, and testimonial text.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/customers-vector-space-wall.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Vector Space Wall\nlink:\n  url: https://testimonial.to/qdrant/all\n  text: Submit Your Testimonial\ntestimonials:\n- id: 0\n  name: Jonathan Eisenzopf\n  position: Chief Strategy and Research Officer at Talkmap\n  avatar:\n    src: /img/customers/jonathan-eisenzopf.svg\n    alt: Avatar\n  text: \"With Qdrant, we found the missing piece to develop our own provider independent multimodal generative AI platform on enterprise scale.\"\n# Additional testimonials follow same structure...\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Vector Store Integration\nDESCRIPTION: Shows how to configure Qdrant as a vector store for Pandas-AI, including setting up the connection and training the model with custom information and code snippets.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/pandas-ai.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pandasai.ee.vectorstores.qdrant import Qdrant\n\nqdrant = Qdrant(\n    collection_name=\"<SOME_COLLECTION>\",\n    embedding_model=\"sentence-transformers/all-MiniLM-L6-v2\",\n    url=\"http://localhost:6333\",\n    grpc_port=6334,\n    prefer_grpc=True\n)\n\nagent = Agent(df, vector_store=qdrant)\n\n# Train with custom information\nagent.train(docs=\"The fiscal year starts in April\")\n\n# Train the q/a pairs of code snippets\nquery = \"What are the total sales for the current fiscal year?\"\nresponse = \"\"\"\nimport pandas as pd\n\ndf = dfs[0]\n\n# Calculate the total sales for the current fiscal year\ntotal_sales = df[df['date'] >= pd.to_datetime('today').replace(month=4, day=1)]['sales'].sum()\nresult = { \"type\": \"number\", \"value\": total_sales }\n\"\"\"\nagent.train(queries=[query], codes=[response])\n```\n\n----------------------------------------\n\nTITLE: Local SSD Performance Results\nDESCRIPTION: FIO benchmark results showing best performance metrics achieved with local SSD, featuring highest IOPS and bandwidth.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/memory-consumption.md#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nread: IOPS=183k, BW=716MiB/s (751MB/s)(8192MiB/11438msec)\n```\n\n----------------------------------------\n\nTITLE: JWT Configuration for Read-Only Collection Access\nDESCRIPTION: JWT payload configuration example with 1-hour expiry time and read-only access to a specific collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/data-privacy.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 1690995200,\n  \"access\": [\n    {\n      \"collection\": \"demo_collection\",\n      \"access\": \"r\"  // Read-only access\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Launching the Streamlit Interface\nDESCRIPTION: This command launches the Streamlit application, allowing users to interact with the Agentic RAG system through a chat-like interface.  The application is located in the `vector` folder.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run vector/streamlit_app.py\n```\n\n----------------------------------------\n\nTITLE: Updating Qdrant Collection Configuration\nDESCRIPTION: Modifying the HNSW graph configuration for optimized performance in a multitenant setup.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/llama-index-multitenancy.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclient.update_collection(\n    collection_name=\"my_collection\",\n    hnsw_config=models.HnswConfigDiff(payload_m=16, m=0),\n)\n```\n\n----------------------------------------\n\nTITLE: Spotify Podcast Embed HTML\nDESCRIPTION: HTML iframe code for embedding the Spotify podcast player for the interview episode.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/fastembed-fast-lightweight-embedding-generation-nirant-kasliwal-vector-space-talks-004.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://podcasters.spotify.com/pod/show/qdrant-vector-space-talk/embed/episodes/FastEmbed-Fast--Lightweight-Embedding-Generation---Nirant-Kasliwal--Vector-Space-Talks-004-e2c8s3b/a-aal40k6\" height=\"102px\" width=\"400px\" frameborder=\"0\" scrolling=\"no\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Creating Civo VolumeSnapshotClass\nDESCRIPTION: Defines a VolumeSnapshotClass for use in Civo Kubernetes environments with a CSI driver. This is necessary for enabling backup and restore capabilities of volumes in the Kubernetes cluster. Ensure the Civo CSI driver is installed and configured for this snapshot class to function correctly.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/platform-deployment-options.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: snapshot.storage.k8s.io/v1\nkind: VolumeSnapshotClass\nmetadata:\n  name: csi-snapclass\ndelectionPolicy: Delete\ndriver: csi.civo.com\n\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Hub Authentication Secret\nDESCRIPTION: Create a Kubernetes secret for Docker Hub credentials to handle rate limits\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/hybrid-cloud-setup.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret docker-registry dockerhub-registry-secret --namespace the-qdrant-namespace --docker-server=https://index.docker.io/v1/ --docker-username=<your-name> --docker-password=<your-pword> --docker-email=<your-email>\n```\n\n----------------------------------------\n\nTITLE: Loading and Preprocessing Startup Data\nDESCRIPTION: Read startup data from JSON file, extracting descriptions and metadata\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\npayload_path = \"startups_demo.json\"\nmetadata = []\ndocuments = []\n\nwith open(payload_path) as fd:\n    for line in fd:\n        obj = json.loads(line)\n        documents.append(obj.pop(\"description\"))\n        metadata.append(obj)\n```\n\n----------------------------------------\n\nTITLE: Configuring Call-to-Action Buttons\nDESCRIPTION: Sets up text and URLs for the call-to-action buttons on the landing page. This configuration is essential for guiding users towards signing up and contacting sales, improving engagement and user experience.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/qdrant-vector-database/qdrant-vector-database-hero.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstartFree:\n  text: Get Started\n  url: https://cloud.qdrant.io/signup\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncontactUs:\n  text: Talk to Sales\n  url: /contact-us/\n\n```\n\n----------------------------------------\n\nTITLE: Creating a TLS Secret with kubectl\nDESCRIPTION: This shell snippet shows how to create a Kubernetes TLS secret using kubectl. It is used to store TLS certificates and keys for securing Qdrant databases. The snippet requires specifying the certificate and key files, and the namespace.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/hybrid-cloud-cluster-creation.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret tls qdrant-tls --cert=mydomain.com.crt --key=mydomain.com.key --namespace the-qdrant-namespace\n```\n\n----------------------------------------\n\nTITLE: Installing Core Utilities on macOS for Image Processing\nDESCRIPTION: Command to install coreutils on macOS, which is required for the image processing scripts to work correctly on this platform.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbrew install coreutils\n```\n\n----------------------------------------\n\nTITLE: C# Client with JWT Authentication\nDESCRIPTION: Example of initializing the Qdrant .NET client with JWT authentication. The JWT token is passed as the API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\n  host: \"xyz-example.eu-central.aws.cloud.qdrant.io\",\n  https: true,\n  apiKey: \"<JWT>\"\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Qdrant Connection Details in Shell\nDESCRIPTION: Sets the Qdrant URL and API key as environment variables in the shell.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-contract-management-stackit-aleph-alpha.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport QDRANT_URL=\"https://qdrant.example.com\"\nexport QDRANT_API_KEY=\"your-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Configuring IDF in Qdrant Collection - HTTP API\nDESCRIPTION: HTTP API request to enable IDF modifier in a Qdrant collection's sparse vectors configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"sparse_vectors\": {\n        \"text\": {\n            \"modifier\": \"idf\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mistral and Qdrant Clients\nDESCRIPTION: Initializes both Mistral and Qdrant clients and prepares sample text data for embedding. Requires a Mistral API key for authentication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/mistral.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom mistralai.client import MistralClient\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.models import PointStruct, VectorParams, Distance\n\ncollection_name = \"example_collection\"\n\nMISTRAL_API_KEY = \"your_mistral_api_key\"\nclient = QdrantClient(\":memory:\")\nmistral_client = MistralClient(api_key=MISTRAL_API_KEY)\ntexts = [\n    \"Qdrant is the best vector search engine!\",\n    \"Loved by Enterprises and everyone building for low latency, high performance, and scale.\",\n]\n```\n\n----------------------------------------\n\nTITLE: Executing Scroll Query with Negation Filter in Qdrant using TypeScript\nDESCRIPTION: This code snippet shows how to use the Qdrant client to perform a scroll query on a collection. It applies a complex filter that excludes points matching both 'London' for the 'city' field and 'red' for the 'color' field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-nested-clauses-filter/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must_not: [\n      {\n        must: [\n          {\n            key: \"city\",\n            match: { value: \"London\" },\n          },\n          {\n            key: \"color\",\n            match: { value: \"red\" },\n          },\n        ],\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Splitter\nDESCRIPTION: Initializes a recursive character text splitter with specified chunk size and overlap parameters for document processing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-contract-management-stackit-aleph-alpha.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter\n\ntext_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=500,\n    chunk_overlap=100,\n)\n```\n\n----------------------------------------\n\nTITLE: Printing LLM Responses with Python\nDESCRIPTION: Outputs the generated answers from the LLM component.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfor reply in response[\"llm\"][\"replies\"]:\n    print(reply.strip())\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Parameterized Integer Index in Qdrant\nDESCRIPTION: This snippet demonstrates how to create a parameterized integer index which allows for fine-tuning of indexing and search performance. It differentiates between regular and parameterized configurations based on lookup and range filter support.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/indexing.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/create-payload-index/integer-with-params/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection in C#\nDESCRIPTION: This C# code snippet demonstrates how to create a collection in Qdrant. It uses the Qdrant.Client library to connect to a Qdrant instance and then calls the CreateCollectionAsync method to create a collection with a specified name and vector parameters, including size, distance metric, and on-disk storage setting.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-vectors-on-disk/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\t\"{collection_name}\",\n\tnew VectorParams\n\t{\n\t\tSize = 768,\n\t\tDistance = Distance.Cosine,\n\t\tOnDisk = true\n\t}\n);\n\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: This command installs the required Python packages listed in the `requirements.txt` file.  These dependencies are necessary for the Agentic RAG system to function correctly.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: RAG Evaluation Metrics Table\nDESCRIPTION: Table showing different methods for measuring LLM response quality including Perplexity, BLEU, ROUGE, and other evaluation frameworks.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/rag-evaluation-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Column header** | **Column header** |\n| --- | --- |\n| [Perplexity](https://huggingface.co/spaces/evaluate-metric/perplexity) | Measure how well the model predicts text. |\n| Human Evaluation | Rate responses based on relevance, coherence and quality. |\n| [BLEU](https://en.wikipedia.org/wiki/BLEU) | Used in translation tasks to compare generated output with reference translations. Higher scores (0-1) indicate better performance. |\n| [ROUGE](https://en.wikipedia.org/wiki/ROUGE_(metric)) | Evaluates summary quality by comparing generated summaries with reference summaries, calculating precision, recall and F1-score. |\n| [EleutherAI](https://github.com/EleutherAI/lm-evaluation-harness) | A framework to test LLMs on different evaluation tasks. |\n| [HELM](https://github.com/stanford-crfm/helm) | A framework to evaluate LLMs, focusing on 12 different aspects that are important in real-world model deployments. |\n| Diversity | Assesses the variety and uniqueness of responses, with higher scores indicating more diverse outputs. |\n```\n\n----------------------------------------\n\nTITLE: Configuring On-Disk Geo Indexing in Qdrant\nDESCRIPTION: This HTTP request demonstrates how to enable on-disk geo indexing for a field named 'location', allowing efficient handling of large geographic datasets without exhausting system memory.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.12.x.md#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/index\n{\n    \"field_name\": \"location\",\n    \"field_schema\": {\n        \"type\": \"geo\",\n        \"on_disk\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Name for Qdrant Vector Database in Python\nDESCRIPTION: Simple code defining the collection name to be used for storing document vectors in Qdrant. Different collection names can be used for different experiments.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nCOLLECTION_NAME = \"qdrant-docs-quotient\"\n```\n\n----------------------------------------\n\nTITLE: Example of Article Preview Image Generation Command\nDESCRIPTION: Example shell command showing how to use the article preview image generation script with specific parameters. This creates optimized images for a specific article.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbash -x automation/process-article-img.sh ~/Pictures/my_preview.jpg filtrable-hnsw\n```\n\n----------------------------------------\n\nTITLE: Starting Airflow Development Server\nDESCRIPTION: This command initializes a local Airflow environment for development. It sets up the necessary services allowing users to access the Airflow UI and execute tasks.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/qdrant-airflow-astronomer.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nastro dev start\n```\n\n----------------------------------------\n\nTITLE: Initializing Relari Client\nDESCRIPTION: Creates a Relari client instance for interacting with the Relari API.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-relari.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom relari import RelariClient\nclient = RelariClient()\n```\n\n----------------------------------------\n\nTITLE: Adding SEO Schema JSON Files in YAML Front Matter\nDESCRIPTION: This YAML snippet shows how to reference external JSON files for SEO schema using the seo_schema_json parameter in the front matter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nseo_schema_json:\n  - schema/schema-organization.json\n  - schema/product-schema.json\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant client in Go\nDESCRIPTION: This snippet initializes a new Qdrant client instance using the `qdrant-go-client` library. It configures the client to connect to a Qdrant instance running on localhost at port 6334.  Error handling is included to check for initialization failures.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-vectors/simple/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Computing Distance Matrix using Qdrant's API\nDESCRIPTION: This code computes the distance matrix for a sample of 1000 points from the Midjourney Styles dataset using Qdrant's search_matrix_offsets API.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/distance-based-exploration.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresult = client.search_matrix_offsets(\n  collection_name=\"midlib\",\n  sample=1000, # Select a subset of the data, as the whole dataset might be too large\n  limit=20, # For performance reasons, limit the number of closest neighbors to consider\n)\n\nmatrix = csr_matrix(\n    (result.scores, (result.offsets_row, result.offsets_col))\n)\n\nmatrix = matrix + matrix.T\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Collection for Large-Scale Vector Search\nDESCRIPTION: Python code showing the collection configuration for the LAION-400M dataset. It uses FLOAT16 datatype to reduce storage requirements, binary quantization with always_ram=True for efficient searching, and customized HNSW parameters for lower memory usage while maintaining reasonable search accuracy.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/large-scale-search.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n        QDRANT_COLLECTION_NAME,\n        vectors_config=models.VectorParams(\n            size=512, # CLIP model output size\n            distance=models.Distance.COSINE, # CLIP model uses cosine distance\n            datatype=models.Datatype.FLOAT16, # We only need 16 bits for float, otherwise disk usage would be 800Gb instead of 400Gb\n            on_disk=True # We don't need original vectors in RAM\n        ),\n        # Even though CLIP vectors don't work well with binary quantization, out of the box,\n        # we can rely on query-time oversampling to get more accurate results\n        quantization_config=models.BinaryQuantization(\n            binary=models.BinaryQuantizationConfig(\n                always_ram=True,\n            )\n        ),\n        optimizers_config=models.OptimizersConfigDiff(\n            # Bigger size of segments are desired for faster search\n            # However it might be slower for indexing\n            max_segment_size=5_000_000, \n        ),\n        # Having larger M value is desirable for higher accuracy,\n        # but in our case we care more about memory usage\n        # We could still achieve reasonable accuracy even with M=6 + oversampling\n        hnsw_config=models.HnswConfigDiff(\n            m=6, # decrease M for lower memory usage\n            on_disk=False\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Recovering Qdrant Collection Snapshot using TypeScript Client\nDESCRIPTION: Demonstrates how to initialize a Qdrant client and recover a collection snapshot from a specified location. The code establishes a connection to a local Qdrant instance and initiates snapshot recovery with specified priority settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/recover-snapshot-with-priority/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.recoverSnapshot(\"{collection_name}\", {\n  location: \"http://qdrant-node-1:6333/collections/{collection_name}/snapshots/snapshot-2022-10-10.shapshot\",\n  priority: \"snapshot\"\n});\n```\n\n----------------------------------------\n\nTITLE: UUID Matching in Qdrant\nDESCRIPTION: Shows how to match UUID values, which works similarly to regular string matching but is more memory efficient with the uuid index.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/filtering.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"must\": [\n    {\n      \"key\": \"uuid_field\",\n      \"match\": {\n        \"value\": \"d5623c62-796b-4e2c-953c-f70a4da3cda6\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Upserting Points in Java\nDESCRIPTION: This snippet demonstrates how to create a Qdrant client connection and upsert multiple points with vectors and payload into a specified collection. It uses the QdrantClient and QdrantGrpcClient classes to establish a connection and perform the upsert operation asynchronously.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-tenant-group-id/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\nimport java.util.Map;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PointStruct;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .upsertAsync(\n        \"{collection_name}\",\n        List.of(\n            PointStruct.newBuilder()\n                .setId(id(1))\n                .setVectors(vectors(0.9f, 0.1f, 0.1f))\n                .putAllPayload(Map.of(\"group_id\", value(\"user_1\")))\n                .build(),\n            PointStruct.newBuilder()\n                .setId(id(2))\n                .setVectors(vectors(0.1f, 0.9f, 0.1f))\n                .putAllPayload(Map.of(\"group_id\", value(\"user_1\")))\n                .build(),\n            PointStruct.newBuilder()\n                .setId(id(3))\n                .setVectors(vectors(0.1f, 0.1f, 0.9f))\n                .putAllPayload(Map.of(\"group_id\", value(\"user_2\")))\n                .build()))\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Example Code Structure in JSON\nDESCRIPTION: Sample JSON structure showing how code metadata and content is stored for processing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/code-search.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\":\"await_ready_for_timeout\",\n   \"signature\":\"fn await_ready_for_timeout (& self , timeout : Duration) -> bool\",\n   \"code_type\":\"Function\",\n   \"docstring\":\"= \\\" Return `true` if ready, `false` if timed out.\\\"\",\n   \"line\":44,\n   \"line_from\":43,\n   \"line_to\":51,\n   \"context\":{\n      \"module\":\"common\",\n      \"file_path\":\"lib/collection/src/common/is_ready.rs\",\n      \"file_name\":\"is_ready.rs\",\n      \"struct_name\":\"IsReady\",\n      \"snippet\":\"    /// Return `true` if ready, `false` if timed out.\\n    pub fn await_ready_for_timeout(&self, timeout: Duration) -> bool {\\n        let mut is_ready = self.value.lock();\\n        if !*is_ready {\\n            !self.condvar.wait_for(&mut is_ready, timeout).timed_out()\\n        } else {\\n            true\\n        }\\n    }\\n\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Keywords Except Specific Values using Java\nDESCRIPTION: This code snippet imports the matchExceptKeywords method from the Qdrant client library and uses it to filter out 'black' and 'yellow' from a search query for the 'color' field. This operation is used to refine search results by excluding unwanted values in the context of database or query filtering.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-except/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.matchExceptKeywords;\n\nmatchExceptKeywords(\"color\", List.of(\"black\", \"yellow\"));\n```\n\n----------------------------------------\n\nTITLE: Testing Hallucination Prevention\nDESCRIPTION: Demonstrates how to test the model's response to questions not directly answered in the source documents to verify it doesn't hallucinate information.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nresponse = retrieval_qa.invoke({\n    \"input\": \"Is Oracle Generative AI Service included in the free tier?\"\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Custom Sharding - HTTP\nDESCRIPTION: Creates a new collection with custom sharding method using HTTP API. Sets shard_number to 1 and sharding_method to custom.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"shard_number\": 1,\n    \"sharding_method\": \"custom\"\n    // ... other collection parameters\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in TypeScript\nDESCRIPTION: This snippet initializes a Qdrant client and connects to a Qdrant instance running on localhost at port 6333.  It requires the `@qdrant/js-client-rest` package.  The `QdrantClient` constructor takes an object with `host` and `port` properties.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/facet-counts/simple-with-filter/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment\nDESCRIPTION: These commands create and activate a Python virtual environment, isolating the project's dependencies. This ensures that the project's dependencies don't conflict with other Python projects on your system.  Python 3.10 is used for compatibility.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3.10 -m venv venv\nsource venv/bin/activate  # Windows: venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Executing Filtered Scroll Query with Qdrant Client in Rust\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client to perform a scroll query on a collection with specific filter conditions. It filters points in London but excludes those with the color red.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-multiple-clauses-combination/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter {\n            must: vec![Condition::matches(\"city\", \"London\".to_string())],\n            must_not: vec![Condition::matches(\"color\", \"red\".to_string())],\n            ..Default::default()\n        }),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Client with FastEmbed\nDESCRIPTION: Installation command for qdrant-client with fastembed support\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-rerankers.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install \"qdrant-client[fastembed]\"\n```\n\n----------------------------------------\n\nTITLE: Partner Testimonials in Markdown Format\nDESCRIPTION: Structured markdown document containing partner quotes and testimonials about Qdrant Hybrid Cloud, including links to partner blog posts and additional resources.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/hybrid-cloud.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Launch Partners\n\nWe launched Qdrant Hybrid Cloud with assistance and support of our trusted partners. Learn what they have to say about our latest offering:\n\n#### Oracle Cloud Infrastructure: \n> *\"We are excited to partner with Qdrant to bring their powerful vector search capabilities to Oracle Cloud Infrastructure...\"*\n```\n\n----------------------------------------\n\nTITLE: Posting Query for Points in Collection using HTTP\nDESCRIPTION: This snippet demonstrates the structure of an HTTP POST request that is used to query points from a specific collection in Qdrant. The request body includes an array of query points defined by their coordinates. The primary function of this snippet is to facilitate complex queries on embedded data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/multivector/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST collections/{collection_name}/points/query\n{\n  \"query\": [\n    [-0.013,  0.020, -0.007, -0.111, ...],\n    [-0.030, -0.055,  0.001,  0.072, ...],\n    [-0.041,  0.014, -0.032, -0.062, ...]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtered Search Results in Qdrant JSON Format\nDESCRIPTION: This JSON snippet shows the results of a vector search with a price filter applied. It returns three laptop entries that match the criteria, including their IDs, similarity scores, and payload information.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-filtering.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 3,\n    \"score\": 0.9978443564622781,\n    \"payload\": {\n      \"price\": 799.99,\n      \"category\": \"laptop\"\n    }\n  },\n  {\n    \"id\": 1,\n    \"score\": 0.9938079894227599,\n    \"payload\": {\n      \"price\": 899.99,\n      \"category\": \"laptop\"\n    }\n  },\n  {\n    \"id\": 5,\n    \"score\": 0.9903751498208603,\n    \"payload\": {\n      \"price\": 949.99,\n      \"category\": \"laptop\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting LLM Environment Variables - Shell\nDESCRIPTION: Sets up environment variable for the Mistral LLM inference endpoint URL in shell\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport INFERENCE_ENDPOINT_URL=\"http://mistral-service.default.svc.cluster.local\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Payload with Filtering in Qdrant using C#\nDESCRIPTION: This code initializes a Qdrant client connected to localhost on port 6334, then deletes specific payload keys ('color' and 'price') from documents that match a filter condition where the 'color' field equals 'red'. It demonstrates both client setup and conditional payload deletion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-payload/by-filter/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.DeletePayloadAsync(\n    collectionName: \"{collection_name}\",\n    keys: [\"color\", \"price\"],\n    filter: MatchKeyword(\"color\", \"red\")\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Query\nDESCRIPTION: Defines a sample customer query to be processed by the model\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-customer-support-cohere-airbyte-aws.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nquery = \"Why Qdrant does not return my vectors?\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DSPy with Qdrant Retriever\nDESCRIPTION: Sets up DSPy with OpenAI and Qdrant retriever model configuration. Initializes QdrantClient and configures global DSPy settings for language and retrieval models.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/dspy.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dspy\nfrom dspy.retrieve.qdrant_rm import QdrantRM\n\nfrom qdrant_client import QdrantClient\n\nturbo = dspy.OpenAI(model=\"gpt-3.5-turbo\")\nqdrant_client = QdrantClient()  # Defaults to a local instance at http://localhost:6333/\nqdrant_retriever_model = QdrantRM(\"collection-name\", qdrant_client, k=3)\n\ndspy.settings.configure(lm=turbo, rm=qdrant_retriever_model)\n```\n\n----------------------------------------\n\nTITLE: Pooling Image Embeddings for ColPali Model in Python\nDESCRIPTION: This snippet showcases processing image batches to extract and pool image embeddings using the ColPali model. It demonstrates masking for image tokens and applies mean pooling by rows and columns, with optional concatenation of special tokens.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/pdf-retrieval-at-scale.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprocessed_images = model_processor.process_images(image_batch) \n# Image embeddings of shape (batch_size, 1030, 128)\nimage_embeddings = model(**processed_images)\n\n# (1030, 128)\nimage_embedding = image_embeddings[0] # take the first element of the batch\n\n# Now we need to identify vectors that correspond to the image tokens\n# It can be done by selecting tokens corresponding to special `image_token_id`\n\n# (1030, ) - boolean mask (for the first element in the batch), True for image tokens \nmask = processed_images.input_ids[0] == model_processor.image_token_id\n\n# For convenience, we now select only image tokens \n#   and reshape them to (x_patches, y_patches, dim)\n\n# (x_patches, y_patches, 128)\nimage_patch_embeddings = image_embedding[mask].view(x_patches, y_patches, model.dim)\n\n# Now we can apply mean pooling by rows and columns\n\n# (x_patches, 128)\npooled_by_rows = image_patch_embeddings.mean(dim=0)\n\n# (y_patches, 128)\npooled_by_columns = image_patch_embeddings.mean(dim=1)\n\n# [Optionally] we can also concatenate special tokens to the pooled representations, \n# For ColPali, it's only postfix\n\n# (x_patches + 6, 128)\npooled_by_rows = torch.cat([pooled_by_rows, image_embedding[~mask]])\n\n# (y_patches + 6, 128)\npooled_by_columns = torch.cat([pooled_by_columns, image_embedding[~mask]])\n```\n\n----------------------------------------\n\nTITLE: Cross-Encoder Test Implementation in Python\nDESCRIPTION: Test function that validates the output of ONNX cross-encoder models against canonical score values from PyTorch models. Includes CI environment handling and model size checks.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/cross-encoder-integration-gsoc.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef test_rerank():\n    is_ci = os.getenv(\"CI\")\n\n    for model_desc in TextCrossEncoder.list_supported_models():\n        if not is_ci and model_desc[\"size_in_GB\"] > 1:\n            continue\n\n        model_name = model_desc[\"model\"]\n        model = TextCrossEncoder(model_name=model_name)\n\n        query = \"What is the capital of France?\"\n        documents = [\"Paris is the capital of France.\", \"Berlin is the capital of Germany.\"]\n        scores = np.array(model.rerank(query, documents))\n\n        canonical_scores = CANONICAL_SCORE_VALUES[model_name]\n        assert np.allclose(\n            scores, canonical_scores, atol=1e-3\n        ), f\"Model: {model_name}, Scores: {scores}, Expected: {canonical_scores}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Client Library\nDESCRIPTION: Installs the Qdrant client library via pip to facilitate interaction with the Qdrant service. Requires Python environment setup.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\npip install qdrant-client\n```\n\n----------------------------------------\n\nTITLE: Importing Required Dependencies\nDESCRIPTION: Import necessary Python libraries including typing for type hints and NumPy for array operations\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed Code\nDESCRIPTION: HTML iframe code for embedding the interview video from YouTube\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/open-source-vector-search-engine-and-vector-database.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/bU38Ovdh3NY?si=GiRluTu_c-4jESMj\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries with Bash\nDESCRIPTION: Installs the necessary libraries for the project: `qdrant-client` and `llama-index-embeddings-huggingface`. Ensure these libraries are installed to enable the functionalities of the tutorial.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/multimodal-search.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npip install qdrant-client llama-index-embeddings-huggingface\n```\n```\n\n----------------------------------------\n\nTITLE: Logo SVG Path Definition\nDESCRIPTION: SVG vector graphics markup defining a logo with specific dimensions, viewBox, and complex path definitions using fill-rule evenodd.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M19.2195 21C21.3565 21.3615 23.4368 22.0016 25.4074 22.9038C28.8021 27.8673 30.4889 33.4654 29.8661 39.9246C27.5723 41.6207 25.0034 42.9087 22.2722 43.7322C21.6572 42.907 21.1134 42.031 20.6468 41.1136C21.5357 40.7814 22.3938 40.3717 23.2111 39.8893C22.9988 39.7454 22.7888 39.5849 22.5836 39.4174C20.2101 40.5336 17.6196 41.1124 14.9967 41.1124C12.3739 41.1124 9.78337 40.5336 7.40989 39.4174C7.20701 39.5731 6.99705 39.7336 6.78237 39.8893C7.59806 40.3709 8.45458 40.7798 9.34199 41.1113C8.87477 42.029 8.33104 42.9058 7.71657 43.7322C4.98766 42.9054 2.42073 41.6167 0.127368 39.9223C-0.403428 34.3525 0.658164 28.7024 4.57426 22.9085C6.54685 22.0062 8.62856 21.3646 10.7669 21C11.0592 21.5228 11.3238 22.0606 11.5595 22.6113C13.8358 22.2683 16.1506 22.2683 18.4269 22.6113C18.6625 22.0606 18.9271 21.5227 19.2195 21ZM7.31317 33.5032C7.31317 35.1546 8.53518 36.4969 10.0143 36.4969C11.5218 36.4969 12.6872 35.1546 12.7131 33.5032C12.7391 31.8518 11.5265 30.4977 10.0096 30.4977C8.49271 30.4977 7.31317 31.8518 7.31317 33.5032ZM17.2803 33.5032C17.2803 35.1546 18.4976 36.4969 19.9791 36.4969C21.4866 36.4969 22.6496 35.1546 22.6756 33.5032C22.7015 31.8518 21.4984 30.4977 19.9791 30.4977C18.4599 30.4977 17.2803 31.8518 17.2803 33.5032ZM120 25.4351V37.3249H115.954V35.1545C115.649 35.9272 115.101 36.5797 114.392 37.0135C113.61 37.4591 112.721 37.6811 111.821 37.6552C110.974 37.6749 110.141 37.4425 109.426 36.9875C108.735 36.5382 108.184 35.9029 107.836 35.1545C107.458 34.3285 107.269 33.428 107.284 32.5194C107.258 31.5774 107.458 30.6428 107.869 29.7947C108.247 29.0179 108.837 28.3637 109.57 27.9074C110.324 27.4506 111.192 27.2159 112.073 27.2303C113.998 27.2303 115.292 28.067 115.954 29.7404V25.4351H120Z\" fill=\"#8F98B3\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Qdrant Hybrid Cloud Workflow Structure in YAML\nDESCRIPTION: This YAML configuration defines the structure of the 'How it Works' page for Qdrant Hybrid Cloud, outlining a three-step process covering integration, management, and security aspects. It includes metadata for the page title and an image reference for the workflow diagram.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/hybrid-cloud/hybrid-cloud-how-it-works.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: How it Works\nsteps:\n- id: 0\n  number: 1\n  title: Integration\n  description: Qdrant Hybrid Cloud allows you to deploy managed Qdrant clusters on any cloud platform or on-premise infrastructure, ensuring your data stays private by separating the data and control layers.\n- id: 1\n  number: 2\n  title: Management\n  description: A straightforward Kubernetes operator installation allows for hands-off cluster management, including scaling operations, zero-downtime upgrades and disaster recovery.\n- id: 2\n  number: 3\n  title: Privacy and Security\n  description: The architecture guarantees database isolation. The Qdrant Cloud only receives telemetry through an outgoing connection. No access to databases or your Kubernetes API is necessary to maintain the highest level of data security and privacy.\nimage:\n  src: /img/how-it-works-scheme.svg\n  alt: How it works scheme\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index in Qdrant with Python Client\nDESCRIPTION: This code snippet creates a payload index in a Qdrant collection named \"{collection_name}\" on the field \"payload_field_name\". It uses the KeywordIndexParams to specify the index type as KEYWORD and sets the `is_tenant` parameter to True, enabling tenant-specific indexing. Requires the qdrant-client library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/keyword-is-tenant/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"payload_field_name\",\n    field_schema=models.KeywordIndexParams(\n        type=models.KeywordIndexType.KEYWORD,\n        is_tenant=True,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration in Java\nDESCRIPTION: Demonstrates how to establish a connection to Qdrant server and create a new collection with specified vector parameters. The code configures both dense vectors (size 128, cosine distance) and sparse vectors with custom indexing settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-uint8-sparse-and-dense/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Datatype;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.SparseIndexConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorParams;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n  .createCollectionAsync(\n    CreateCollection.newBuilder()\n    .setCollectionName(\"{collection_name}\")\n    .setVectorsConfig(VectorsConfig.newBuilder()\n      .setParams(VectorParams.newBuilder()\n        .setSize(128)\n        .setDistance(Distance.Cosine)\n        .setDatatype(Datatype.Uint8)\n        .build())\n      .build())\n    .setSparseVectorsConfig(\n      SparseVectorConfig.newBuilder()\n      .putMap(\"text\", SparseVectorParams.newBuilder()\n        .setIndex(SparseIndexConfig.newBuilder()\n          .setDatatype(Datatype.Uint8)\n          .build())\n        .build()))\n    .build())\n  .get();\n```\n\n----------------------------------------\n\nTITLE: Training FAQ Similarity Model with Quaterion\nDESCRIPTION: This snippet shows the main training script for the FAQ similarity model. It sets up the PyTorch Lightning Trainer, creates data loaders, and uses Quaterion.fit to train the model. It also includes code to save the trained model as a servable.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/faq-question-answering.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport torch\nimport pytorch_lightning as pl\n\nfrom quaterion import Quaterion\nfrom quaterion.dataset import PairsSimilarityDataLoader\n\nfrom faq.dataset import FAQDataset\n\n\ndef train(model, train_dataset_path, val_dataset_path, params):\n    use_gpu = params.get(\"cuda\", torch.cuda.is_available())\n    \n    trainer = pl.Trainer(\n        min_epochs=params.get(\"min_epochs\", 1),\n        max_epochs=params.get(\"max_epochs\", 500),\n        auto_select_gpus=use_gpu,\n        log_every_n_steps=params.get(\"log_every_n_steps\", 1),\n        gpus=int(use_gpu),\n    )\n    train_dataset = FAQDataset(train_dataset_path)\n    val_dataset = FAQDataset(val_dataset_path)\n    train_dataloader = PairsSimilarityDataLoader(\n        train_dataset, batch_size=1024\n    )\n    val_dataloader = PairsSimilarityDataLoader(\n        val_dataset, batch_size=1024\n    )\n    \n    Quaterion.fit(model, trainer, train_dataloader, val_dataloader)\n    \nif __name__ == \"__main__\":\n    import os\n    from pytorch_lightning import seed_everything\n    from faq.model import FAQModel\n    from faq.config import DATA_DIR, ROOT_DIR\n    seed_everything(42, workers=True)\n    faq_model = FAQModel()\n    train_path = os.path.join(\n        DATA_DIR, \n        \"train_cloud_faq_dataset.jsonl\"\n    )\n    val_path = os.path.join(\n        DATA_DIR,\n        \"val_cloud_faq_dataset.jsonl\"\n    )\n    train(faq_model, train_path, val_path, {})\n    faq_model.save_servable(os.path.join(ROOT_DIR, \"servable\"))\n```\n\n----------------------------------------\n\nTITLE: Query Response Example - Bash\nDESCRIPTION: Example response from a Qdrant query showing matched movie with similarity score and metadata.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-colbert.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nQueryResponse(points=[ScoredPoint(id=4, version=0, score=12.063469,\npayload={'movie_name': 'Kubo and the Two Strings', 'movie_watch_time_min': 101, \n'movie_description': 'A young boy named Kubo must locate a magical suit of armour worn by his late father in order to defeat a vengeful spirit from the past.'},\nvector=None, shard_key=None, order_value=None)])\n```\n\n----------------------------------------\n\nTITLE: Defining Implementation Steps Table for Cluster Methods\nDESCRIPTION: Markdown table detailing the specific implementation steps for both Medoids and Perfect Representative methods of cluster analysis.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-n8n-2.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| **Method**            | **Steps**                                                                                                                                                                                                                                                                                                                                                     |\n|------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\\n| **Medoids**           | 1. Sample labeled cluster points from Qdrant. <br> 2. Compute a **pairwise distance matrix** for the cluster using Qdrant's [Distance Matrix API](https://qdrant.tech/documentation/concepts/explore/?q=distance+#distance-matrix). This API helps with scalable cluster analysis and data points relationship exploration. Learn more in [this article](https://qdrant.tech/articles/distance-based-exploration/). <br> 3. For each point, calculate the sum of its distances to all other points. The point with the smallest total distance (or highest similarity for COSINE distance metric) is the medoid. <br> 4. Mark this point as the cluster representative. |\n| **Perfect Representative** | 1. Define textual descriptions for each cluster (e.g., AI-generated). <br> 2. Embed these descriptions using Voyage. <br> 3. Find the image embedding closest to the description one. <br> 4. Mark this image as the cluster representative.                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML iframe\nDESCRIPTION: HTML iframe element for embedding a YouTube video about Indexify with standard YouTube player parameters\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/indexify-unveiled-diptanu-gon-choudhury-vector-space-talk-009.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RoOgTxHkViA?si=r0EjWlssjFDVrzo6\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Set OpenAI API Key in .env file\nDESCRIPTION: This bash snippet sets the OpenAI API key in a `.env` file. This file will be used to securely store the API key and access it from the Python code.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-camelai-discord.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"OPENAI_API_KEY=<your_openai_api_key>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Sidebar Settings in Streamlit in Python\nDESCRIPTION: This snippet provides sidebar functionality in Streamlit to allow users to adjust settings, such as the number of search results and analysis depth, enhancing the user interface for personalized experiences.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nwith st.sidebar:\n    st.header(\"Settings\")\n    search_limit = st.slider(\"Number of results\", 1, 10, 5)\n    \n    analysis_depth = st.select_slider(\n        \"Analysis Depth\",\n        options=[\"Basic\", \"Standard\", \"Detailed\"],\n        value=\"Standard\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Installing Instructor Library with Anthropic Support\nDESCRIPTION: Terminal command to install the Instructor library with support for Anthropic's LLM API, which will be used to generate structured Qdrant filters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/automate-filtering-with-llms.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install \"instructor[anthropic]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Float16 Vectors in Rust\nDESCRIPTION: This Rust code shows how to create a Qdrant collection using the new Rust client, specifying float16 vectors for optimized storage and potential performance improvements.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{CreateCollectionBuilder, Datatype, Distance, VectorParamsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\").vectors_config(\n            VectorParamsBuilder::new(1024, Distance::Cosine).datatype(Datatype::Float16),\n        ),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Scrolling Filtered Points with Qdrant Java Client\nDESCRIPTION: This code performs an asynchronous scroll operation on a Qdrant collection. It uses a filter to select specific points by their IDs. The scroll operation allows for efficient pagination through large result sets.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-has-id-filter/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.hasId;\nimport static io.qdrant.client.PointIdFactory.id;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addMust(hasId(List.of(id(1), id(3), id(5), id(7), id(9), id(11))))\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown Syntax for Blog Posts\nDESCRIPTION: Showcases various markdown elements that can be used in blog post content, including headers, asides for notes and warnings, blockquotes, tables, and lists.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/archetypes/blog-post.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nHere is your blog post content. You can use markdown syntax here.\n\n# Header 1\n## Header 2\n### Header 3\n#### Header 4\n##### Header 5\n###### Header 6\n\n<aside role=\"alert\">\n  You can add a note to your page using this aside block.\n</aside>\n\n<aside role=\"status\">\n  This is a warning message.\n</aside>\n\n> This is a blockquote following a header.\n\nTable:\n\n| Header 1 | Header 2 | Header 3 | Header 4 |\n| -------- | -------- | -------- | -------- |\n| Cell 1   | Cell 2   | Cell 3   | Cell 4   |\n| Cell 3   | Cell 4   | Cell 5   | Cell 6   |\n\n- List item 1\n    - Nested list item 1\n    - Nested list item 2\n- List item 2\n- List item 3\n\n1. Numbered list item 1\n    1. Nested numbered list item 1\n    2. Nested numbered list item 2\n2. Numbered list item 2\n3. Numbered list item 3\n```\n\n----------------------------------------\n\nTITLE: Deploying Search Pipeline\nDESCRIPTION: Command to deploy the saved search pipeline configuration\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nhayhooks deploy search-pipeline.yaml\n```\n\n----------------------------------------\n\nTITLE: Brand Resources YAML Configuration\nDESCRIPTION: YAML configuration file defining Qdrant's brand assets and guidelines including logo variations, color palette, typography specifications and trademark information.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/brand-resources/brand-resources-content.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlogo:\n  title: Our Logo\n  description: \"The Qdrant logo represents a paramount expression of our core brand identity. With consistent placement, sizing, clear space, and color usage, our logo affirms its recognition across all platforms.\"\n  logoCards:\n  - id: 0\n    logo:\n      src: /img/brand-resources-logos/logo.svg\n      alt: Logo Full Color\n    title: Logo Full Color\n    link:\n      url: /img/brand-resources-logos/logo.svg\n      text: Download\n  - id: 1\n    logo:\n      src: /img/brand-resources-logos/logo-black.svg\n      alt: Logo Black\n    title: Logo Black\n    link:\n      url:  /img/brand-resources-logos/logo-black.svg\n      text: Download\n  - id: 2\n    logo:\n      src: /img/brand-resources-logos/logo-white.svg\n      alt: Logo White\n    title: Logo White\n    link:\n      url: /img/brand-resources-logos/logo-white.svg\n      text: Download \n  logomarkTitle: Logomark\n  logomarkCards:\n  - id: 0\n    logo:\n      src: /img/brand-resources-logos/logomark.svg\n      alt: Logomark Full Color\n    title: Logomark Full Color\n    link:\n      url: /img/brand-resources-logos/logomark.svg\n      text: Download\n  - id: 1\n    logo:\n      src: /img/brand-resources-logos/logomark-black.svg\n      alt: Logomark Black\n    title: Logomark Black\n    link:\n      url: /img/brand-resources-logos/logomark-black.svg\n      text: Download\n  - id: 2\n    logo:\n      src: /img/brand-resources-logos/logomark-white.svg\n      alt: Logomark White\n    title: Logomark White\n    link:\n      url: /img/brand-resources-logos/logomark-white.svg\n      text: Download \ncolors:\n  title: Colors\n  description: Our brand colors play a crucial role in maintaining a cohesive visual identity. The careful balance of these colors ensures a consistent and impactful representation of Qdrant, reinforcing our commitment to excellence and precision in every aspect of our work.\n  cards:\n  - id: 0\n    name: Amaranth\n    type: HEX\n    code: \"DC244C\"\n  - id: 1\n    name: Blue\n    type: HEX\n    code: \"2F6FF0\"\n  - id: 2\n    name: Violet\n    type: HEX\n    code: \"8547FF\"\n  - id: 3\n    name: Teal\n    type: HEX\n    code: \"038585\"\n  - id: 4\n    name: Black\n    type: HEX\n    code: \"090E1A\"\n  - id: 5\n    name: White\n    type: HEX\n    code: \"FFFFFF\"\ntypography:\n  title: Typography\n  description: Main typography is Satoshi, this is employed for both UI and marketing purposes. Headlines are set in Bold (600), while text is rendered in Medium (500).\n  example: AaBb\n  specimen: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ<br>abcdefghijklmnopqrstuvwxyz<br>0123456789 !@#$%^&*()\"\n  link:\n    url: https://api.fontshare.com/v2/fonts/download/satoshi\n    text: Download \ntrademarks:\n  title: Trademarks\n  description: All features associated with the Qdrant brand are safeguarded by relevant trademark, copyright, and intellectual property regulations. Utilization of the Qdrant trademark must adhere to the specified Qdrant Trademark Standards for Use.<br><br>Should you require clarification or seek permission to utilize these resources, feel free to reach out to us at\n  link: \n    url: \"mailto:info@qdrant.com\"\n    text: info@qdrant.com.\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph Exploration in Qdrant\nDESCRIPTION: This JSON configuration sets parameters for Qdrant's Graph Exploration Tool. It specifies the number of node neighbors to consider (limit) and the number of nodes to sample from the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/distance-based-exploration.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"limit\": 5, # node neighbors to consider\n  \"sample\": 100 # nodes\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Movie Description Dataset for Embedding\nDESCRIPTION: A sample dataset containing movie descriptions that will be used to demonstrate text embedding. The dataset includes 20 diverse movie summaries.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndescriptions = [\"In 1431, Jeanne d'Arc is placed on trial on charges of heresy. The ecclesiastical jurists attempt to force Jeanne to recant her claims of holy visions.\",\n \"A film projectionist longs to be a detective, and puts his meagre skills to work when he is framed by a rival for stealing his girlfriend's father's pocketwatch.\",\n \"A group of high-end professional thieves start to feel the heat from the LAPD when they unknowingly leave a clue at their latest heist.\",\n \"A petty thief with an utter resemblance to a samurai warlord is hired as the lord's double. When the warlord later dies the thief is forced to take up arms in his place.\",\n \"A young boy named Kubo must locate a magical suit of armour worn by his late father in order to defeat a vengeful spirit from the past.\",\n \"A biopic detailing the 2 decades that Punjabi Sikh revolutionary Udham Singh spent planning the assassination of the man responsible for the Jallianwala Bagh massacre.\",\n \"When a machine that allows therapists to enter their patients' dreams is stolen, all hell breaks loose. Only a young female therapist, Paprika, can stop it.\",\n \"An ordinary word processor has the worst night of his life after he agrees to visit a girl in Soho whom he met that evening at a coffee shop.\",\n \"A story that revolves around drug abuse in the affluent north Indian State of Punjab and how the youth there have succumbed to it en-masse resulting in a socio-economic decline.\",\n \"A world-weary political journalist picks up the story of a woman's search for her son, who was taken away from her decades ago after she became pregnant and was forced to live in a convent.\",\n \"Concurrent theatrical ending of the TV series Neon Genesis Evangelion (1995).\",\n \"During World War II, a rebellious U.S. Army Major is assigned a dozen convicted murderers to train and lead them into a mass assassination mission of German officers.\",\n \"The toys are mistakenly delivered to a day-care center instead of the attic right before Andy leaves for college, and it's up to Woody to convince the other toys that they weren't abandoned and to return home.\",\n \"A soldier fighting aliens gets to relive the same day over and over again, the day restarting every time he dies.\",\n \"After two male musicians witness a mob hit, they flee the state in an all-female band disguised as women, but further complications set in.\",\n \"Exiled into the dangerous forest by her wicked stepmother, a princess is rescued by seven dwarf miners who make her part of their household.\",\n \"A renegade reporter trailing a young runaway heiress for a big story joins her on a bus heading from Florida to New York, and they end up stuck with each other when the bus leaves them behind at one of the stops.\",\n \"Story of 40-man Turkish task force who must defend a relay station.\",\n \"Spinal Tap, one of England's loudest bands, is chronicled by film director Marty DiBergi on what proves to be a fateful tour.\",\n \"Oskar, an overlooked and bullied boy, finds love and revenge through Eli, a beautiful but peculiar girl.\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Neural Search Class\nDESCRIPTION: Creates a NeuralSearcher class that handles vector conversion and search operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/neural-search-tutorial.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\nfrom sentence_transformers import SentenceTransformer\n\n\nclass NeuralSearcher:\n\n    def __init__(self, collection_name):\n        self.collection_name = collection_name\n        # Initialize encoder model\n        self.model = SentenceTransformer('all-MiniLM-L6-v2', device='cpu')\n        # initialize Qdrant client\n        self.qdrant_client = QdrantClient(host='localhost', port=6333)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client with Payload Index\nDESCRIPTION: Establishes a connection to a Qdrant server and creates a payload index for a specified collection with integer timestamp indexing\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/integer-is-principal/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.PayloadIndexParams;\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\nimport io.qdrant.client.grpc.Collections.IntegerIndexParams;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createPayloadIndexAsync(\n        \"{collection_name}\",\n        \"timestamp\",\n        PayloadSchemaType.Integer,\n        PayloadIndexParams.newBuilder()\n            .setIntegerIndexParams(\n                KeywordIndexParams.newBuilder()\n                    .setIsPrincipa(true)\n                    .build())\n            .build(),\n        null,\n        null,\n        null)\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client\nDESCRIPTION: Create a Qdrant client connection to the locally running Docker instance\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n```\n\n----------------------------------------\n\nTITLE: Defining IsNullCondition to Check for NULL Values in Python\nDESCRIPTION: This snippet defines the IsNullCondition class, which allows the user to check if a specific field ('reports') in a dataset has NULL values. This is a more efficient alternative to the match condition for NULL checks. The IsNullCondition can be utilized in various dataset validation workflows.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/is-null/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass IsNullCondition:\n    def __init__(self, field):\n        self.field = field\n\n    def check(self, dataset):\n        return [record for record in dataset if record[self.field] is None]\n```\n\n----------------------------------------\n\nTITLE: Importing Necessary Libraries for Qdrant and Cohere in Python\nDESCRIPTION: This code snippet imports the necessary classes and functions from the qdrant-client package and the cohere library, which are vital for connecting to the Qdrant database and performing reranking operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-semantic-search.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nfrom qdrant_client import QdrantClient\\nfrom qdrant_client.models import Distance, VectorParams, PointStruct\\nimport cohere\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Qdrant Community Page\nDESCRIPTION: YAML configuration block defining the metadata and content structure for the Qdrant community landing page. Includes title, description, image assets, button configuration, and sitemap settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/community/community-hero.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Welcome to the Qdrant Community\ndescription: Connect with over 30,000 community members, get access to educational resources, and stay up to date on all news and discussions about Qdrant and the vector database space.\nimage:\n  src: /img/community-hero.svg\n  srcMobile: /img/mobile/community-hero.svg\n  alt: Community\nbutton:\n  text: Join our Discord\n  url: https://discord.gg/qdrant\nabout: Get access to educational resources, and stay up to date on all news and discussions about Qdrant and the vector database space.\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Defining Logo Assets and Sitemap Settings in YAML\nDESCRIPTION: YAML configuration that specifies a list of customer logo SVG file paths and sets a sitemap exclusion flag. The logos are located in the /img/customers-logo/ directory and include Mozilla, Voiceflow, and Bosch Digital brands.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/logo-cards-2.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogos:\n  -  /img/customers-logo/mozilla.svg\n  -  /img/customers-logo/voiceflow.svg\n  -  /img/customers-logo/bosch-digital.svg\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Modified Chunking Parameters Implementation\nDESCRIPTION: Second experiment with increased chunk size (1024) and overlap (128) to test impact on performance metrics.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n## for iteration 2 - lets modify chunk configuration\n## We will start with creating seperate collection to store vectors\n\nchunk_size = 1024\nchunk_overlap = 128\nembedding_model_name = \"BAAI/bge-small-en\"\nnum_docs = 3\n\nCOLLECTION_NAME = f\"experiment_{chunk_size}_{chunk_overlap}_{embedding_model_name.split('/')[1]}\"\n\nadd_documents(client,\n              collection_name=COLLECTION_NAME,\n              chunk_size=chunk_size,\n              chunk_overlap=chunk_overlap,\n              embedding_model_name=embedding_model_name)\n              \n#Outputs\n#processed: 2152\n#content:   2152\n#metadata:  2152\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Vector Search\nDESCRIPTION: Connects to a local Qdrant instance and executes a vector similarity search with custom search parameters. Queries a specific collection using a vector embedding and retrieves top 3 results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-params/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\tsearchParams: new SearchParams { HnswEf = 128, Exact = false },\n\tlimit: 3\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Twelve Labs and Qdrant SDKs - Python\nDESCRIPTION: This snippet provides the command to install the Twelve Labs and Qdrant client libraries needed for embedding and operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n$ pip install twelvelabs qdrant-client\n```\n\n----------------------------------------\n\nTITLE: Markdown Content Structure with YAML Frontmatter\nDESCRIPTION: Blog post markdown structure with YAML frontmatter containing metadata about the post including title, description, tags, and image paths\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/are-you-vendor-locked.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Are You Vendor Locked?\"\ndraft: false\nslug: are-you-vendor-locked\nshort_description: \"Redefining freedom in the age of Generative AI.\"\ndescription: \"Redefining freedom in the age of Generative AI. We believe that vendor-dependency comes from hardware, not software. \" \npreview_image: /blog/are-you-vendor-locked/are-you-vendor-locked.png\nsocial_preview_image: /blog/are-you-vendor-locked/are-you-vendor-locked.png\ndate: 2024-05-05T00:00:00-08:00\nauthor: David Myriel\nfeatured: false \ntags:\n  - vector search\n  - vendor lock\n  - hybrid cloud\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring io_uring Storage Optimization\nDESCRIPTION: YAML configuration for enabling io_uring async storage optimization for improved disk I/O performance\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-quantization.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  async_scorer: true  # Enable io_uring for async storage\n```\n\n----------------------------------------\n\nTITLE: Registering RAG Connector\nDESCRIPTION: Sets up and registers a connector for customer support, storing the connector ID for future use. Requires RAG_CONNECTOR_URL environment variable to be set.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-customer-support-cohere-airbyte-aws.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nconnector_response = cohere_client.connectors.create(\n    name=\"customer-support\",\n    url=os.environ[\"RAG_CONNECTOR_URL\"],\n)\n\n# The id returned by the API should be stored for future use\nconnector_id = connector_response.connector.id\n```\n\n----------------------------------------\n\nTITLE: WordPiece Tokenization Example\nDESCRIPTION: Shows how WordPiece tokenization splits words into subwords using the ## prefix notation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/bm42.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"unbelievable\" -> [\"un\", \"##believ\", \"##able\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Genkit Plugin\nDESCRIPTION: Command to install the Qdrant Genkit plugin via npm package manager\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/genkit.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i genkitx-qdrant\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant Docker Container with Volume Mounting\nDESCRIPTION: Command to run a Qdrant container with a mapped local storage volume. This setup allows Qdrant to store data persistently in a specified directory.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6333:6333 \\\n    -v $(pwd)/path/to/data:/qdrant/storage \\\n    qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Deleting Snapshot via HTTP API in Qdrant\nDESCRIPTION: HTTP DELETE endpoint for removing a specific snapshot by name from the Qdrant vector database. The snapshot name is provided as a URL parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/delete-full-snapshot/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nDELETE /snapshots/{snapshot_name}\n```\n\n----------------------------------------\n\nTITLE: JSON Message Format for Default Vector\nDESCRIPTION: Example JSON message format for inserting a point with an unnamed/default vector into Qdrant. This format includes the collection name, ID, vector values, and payload data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/fluvio.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collection_name\": \"{collection_name}\",\n    \"id\": 1,\n    \"vectors\": [\n        0.1,\n        0.2,\n        0.3,\n        0.4,\n        0.5,\n        0.6,\n        0.7,\n        0.8\n    ],\n    \"payload\": {\n        \"name\": \"fluvio\",\n        \"description\": \"Solution for distributed stream processing\",\n        \"url\": \"https://www.fluvio.io/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Client\nDESCRIPTION: Installs the Qdrant client Python package using pip.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npip install qdrant-client\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI Swarm via pip\nDESCRIPTION: Command to install the OpenAI Swarm framework from GitHub repository.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/swarm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/openai/swarm.git\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video iframe\nDESCRIPTION: HTML iframe code for embedding a YouTube video player showing the interview with Filip Makraduli\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/when-music-just-doesnt-match-our-vibe-can-ai-help-filip-makraduli-vector-space-talks-003.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/WIBtZa7mcCs?si=szfeeuIAZ5LEgVI3\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Qdrant CLI Usage Options for Distributed Deployment\nDESCRIPTION: Command-line interface options for Qdrant when setting up distributed deployment, including bootstrap and URI parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE:\n    qdrant [OPTIONS]\n\nOPTIONS:\n        --bootstrap <URI>\n            Uri of the peer to bootstrap from in case of multi-peer deployment. If not specified -\n            this peer will be considered as a first in a new deployment\n\n        --uri <URI>\n            Uri of this peer. Other peers should be able to reach it by this uri.\n\n            This value has to be supplied if this is the first peer in a new deployment.\n\n            In case this is not the first peer and it bootstraps the value is optional. If not\n            supplied then qdrant will take internal grpc port from config and derive the IP address\n            of this peer on bootstrap peer (receiving side)\n```\n\n----------------------------------------\n\nTITLE: Rendering Complex Path for Logo or Graphic Element in SVG\nDESCRIPTION: This SVG code defines a complex path using the 'd' attribute to create a logo or graphical element. It uses various SVG path commands to draw curves and lines.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_2\n\nLANGUAGE: SVG\nCODE:\n```\n<path d=\"M3.806C142.29 21.7189 141.648 20.4697 140.555 20.4697C139.462 20.4697 138.778 21.7582 138.761 23.806H142.273ZM80.7957 45.0739C80.7957 46.1074 80.8543 46.4602 81.0891 46.6928C81.2832 46.8691 81.6745 46.9854 82.1212 46.9854H82.5725V47.61H77.2268V46.9854H77.6735C78.1233 46.9854 78.5114 46.8691 78.7101 46.6928C78.942 46.4602 79.002 46.1074 79.002 45.0739V35.219H78.5915C77.4409 35.219 76.5036 35.8428 76.0554 36.9164C75.8013 37.5017 75.6842 38.0878 75.5864 39.1414L75.0211 39.1021L75.1189 34.5936H84.7397L84.8167 39.1021L84.2329 39.1414C83.8617 36.2918 82.983 35.219 81.0907 35.219H80.7973V45.0739H80.7957ZM87.5438 43.0646C87.5615 45.9126 88.227 47.1225 89.7673 47.1225C90.8216 47.1225 91.5048 46.5572 92.1879 45.1139L92.7732 45.4243C91.9337 47.1225 90.9187 47.8834 89.4561 47.8834C87.1926 47.8834 85.727 46.0089 85.727 43.0646C85.727 40.3313 87.2104 38.362 89.259 38.362C91.3861 38.362 92.7909 40.1757 92.8903 43.0646H87.5438ZM91.0758 42.3807C91.0935 40.2928 90.4489 39.0428 89.3568 39.0428C88.2647 39.0428 87.5816 40.3313 87.5623 42.3807H91.0758ZM96.7903 45.4235C96.7903 46.7313 96.9667 47.0054 97.7861 47.0054H98.0988V47.6092H93.8437V47.0054H94.1564C94.9743 47.0054 95.1507 46.732 95.1507 45.4235V36.7608C95.1507 35.4731 94.9743 35.2005 94.1564 35.2005H93.9431V34.5944L96.7903 34.4573V45.4235ZM100.829 43.0646C100.848 45.9126 101.512 47.1225 103.052 47.1225C104.107 47.1225 104.791 46.5572 105.475 45.1139L106.06 45.4243C105.22 47.1225 104.205 47.8834 102.741 47.8834C100.478 47.8834 99.0153 46.0089 99.0153 43.0646C99.0153 40.3313 100.499 38.362 102.546 38.362C104.673 38.362 106.079 40.1757 106.175 43.0646H100.829ZM104.361 42.3807C104.38 40.2928 103.736 39.0428 102.644 39.0428C101.551 39.0428 100.867 40.3313 100.849 42.3807H104.361ZM113.668 47.6092L110.858 43.0823L110.077 43.7662V45.4235C110.077 46.7313 110.252 47.0054 111.071 47.0054H111.443V47.6092H107.13V47.0054H107.442C108.262 47.0054 108.437 46.7136 108.437 45.4235V36.7608C108.437 35.4731 108.262 35.2005 107.442 35.2005H107.227V34.5944L110.076 34.4573V42.8289L112.712 40.5662C113.062 40.2543 113.277 39.9215 113.277 39.6682C113.277 39.3755 113.023 39.2384 112.436 39.2384H112.144V38.6338H115.989V39.2384H115.793C115.228 39.2384 114.974 39.3755 114.173 40.0971L112.028 42.0094L114.386 45.7763C114.973 46.7136 115.344 47.0054 115.969 47.0054H116.124V47.6092H113.668ZM124.866 43.1215C124.866 45.9704 123.285 47.8834 120.904 47.8834C118.544 47.8834 116.963 45.9711 116.963 43.1423C116.963 40.2342 118.544 38.362 120.962 38.362C123.285 38.3612 124.866 40.2928 124.866 43.1215ZM119.304 40.1549C118.992 40.8573 118.855 41.7753 118.855 43.0823C118.855 45.8926 119.518 47.2588 120.904 47.2588C122.289 47.2588 122.973 45.8933 122.973 43.1215C122.973 41.7761 122.835 40.8388 122.524 40.1549C122.192 39.414 121.587 38.9835 120.886 38.9835C120.241 38.9843 119.615 39.4533 119.304 40.1549ZM136.435 42.1273C136.435 40.8781 136.356 40.2335 136.182 39.8823C135.967 39.4926 135.617 39.2785 135.186 39.2785C134.64 39.2785 134.151 39.6289 133.821 40.2543C133.488 40.8789 133.41 41.3656 133.41 42.986V45.4243C133.41 46.732 133.587 47.0062 134.405 47.0062H134.68V47.61H131.771V42.4207C131.771 40.7626 131.732 40.3713 131.498 39.9223C131.285 39.5118 130.933 39.2792 130.483 39.2792C129.936 39.2792 129.45 39.6297 129.137 40.255C128.824 40.8981 128.747 41.4634 128.747 42.9868V45.4251C128.747 46.7536 128.904 47.007 129.741 47.007H130.015V47.6108H125.8V47.007H126.111C126.911 47.007 127.107 46.6943 127.107 45.4251V40.8018C127.107 39.5526 126.911 39.24 126.111 39.24H125.898V38.6354L128.628 38.4983V40.0987C128.999 39.1036 129.917 38.4405 130.913 38.4405C132.007 38.4405 132.707 38.9858 133.196 40.2173C133.76 39.0066 134.543 38.4405 135.617 38.4405C136.455 38.4405 137.197 38.8295 137.586 39.4741C137.958 40.0409 138.075 40.6855 138.075 41.9147V45.4259C138.075 46.7159 138.252 47.0078 139.071 47.0078H139.283V47.6116H136.436V42.1273H136.435Z\" fill=\"#8F98B3\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for RAG Chatbot\nDESCRIPTION: Installs necessary Python packages for building the RAG-based chatbot, including LlamaIndex, LlamaParse, and various integrations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/hybrid-search-llamaindex-jinaai.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -U  \\\n    llama-index  \\\n    llama-parse \\\n    python-dotenv \\\n    llama-index-embeddings-jinaai  \\\n    llama-index-llms-huggingface  \\\n    llama-index-vector-stores-qdrant  \\\n    \"huggingface_hub[inference]\"  \\\n    datasets\n```\n\n----------------------------------------\n\nTITLE: Defining Price Range Filter in JSON\nDESCRIPTION: This JSON snippet represents a filter for price ranges, specifying limits for greater than, greater than or equal to, less than, and less than or equal to criteria. It is intended to be used within query parameters for pricing data, enforcing restrictions between defined values. 'gt' and 'lt' are set to null, indicating that they are not applicable in this context.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/range/json.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"price\",\n  \"range\": {\n    \"gt\": null,\n    \"gte\": 100.0,\n    \"lt\": null,\n    \"lte\": 450.0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Go Client\nDESCRIPTION: This snippet demonstrates how to initialize a new Qdrant client in Go. It configures the client with the host and port of the Qdrant instance. The client variable will be used to interact with the database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/with-group-id-as-tenant/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Searching Matrix Point Pairs with Filtering in Qdrant using Rust\nDESCRIPTION: This code demonstrates how to search for matrix point pairs in a Qdrant collection with filtering. It applies a filter condition to match records where the 'color' field equals 'red', samples 10 points, and limits the results to 2 pairs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/distance-matrix/basic/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, SearchMatrixPointsBuilder};\nuse qdrant_client::Qdrant;\n\nclient\n    .search_matrix_pairs(\n        SearchMatrixPointsBuilder::new(\"collection_name\")\n           .filter(Filter::must(vec![Condition::matches(\n               \"color\",\n               \"red\".to_string(),\n           )]))\n           .sample(10)\n           .limit(2),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Building Qdrant-Spark Connector from Source using Maven\nDESCRIPTION: Command to build the Qdrant-Spark connector JAR file from source using Maven. This requires JDK@8 and Maven to be installed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/spark.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn package -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Displaying Benchmark Results Table in Markdown\nDESCRIPTION: A markdown table showing average latency comparisons between different infrastructure modes for vector search, ranging from traditional data centers to experimental satellite systems.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/satellite-vector-broadcasting.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Infrastructure Mode** | **Avg. Latency (ms)** |\n| --- | --- |\n| Earth Data Center | 34.00000 |\n| Cloud Provider (Multi-region) | 22.00000 |\n| LEO Satellite Mesh | 12.00000 |\n| Geo-Sync Satellite Array | 8.00000 |\n| CubeSat Swarm (Experimental) | 4.00000 |\n| Quantum Uplink (Theoretical) | 0.00001 ✨ |\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown\nDESCRIPTION: This code snippet embeds a YouTube video into the markdown document, providing a visual demonstration of the ColPali optimization walkthrough.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/colpali-optimization.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/_h6SN1WwnLs?si=HqJTcwDbdk4j_L0Y&amp;start=922\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Sample Embedding Output\nDESCRIPTION: Example output showing document vectors with 384 dimensions\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nDocument: This is built to be faster and lighter than other embedding libraries e.g. Transformers, Sentence-Transformers, etc.\nVector of type: <class 'numpy.ndarray'> with shape: (384,)\nDocument: fastembed is supported by and maintained by Qdrant.\nVector of type: <class 'numpy.ndarray'> with shape: (384,)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Fly.io CLI\nDESCRIPTION: Command to log into Fly.io CLI which opens a browser for authentication. Required before deploying any applications to Fly.io.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/chatgpt-plugin.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflyctl auth login\n```\n\n----------------------------------------\n\nTITLE: Setting File Limits in Docker for Qdrant\nDESCRIPTION: Docker run command to increase the file descriptor limits for Qdrant container, setting both soft and hard limits to 10000.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/common-errors.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --ulimit nofile=10000:10000 qdrant/qdrant:latest\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables in Python\nDESCRIPTION: Loads environment variables from the .env file into the Python environment for use in the script.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/hybrid-search-llamaindex-jinaai.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dotenv import load_dotenv\nload_dotenv('./.env')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Registry Credentials\nDESCRIPTION: Fetch Docker registry credentials from Kubernetes secrets using kubectl and base64 decoding\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/hybrid-cloud-setup.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secrets qdrant-registry-creds --namespace the-qdrant-namespace -o jsonpath='{.data\\.dockerconfigjson}' | base64 --decode | jq -r '.'\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Front Matter for External Links in Markdown\nDESCRIPTION: This snippet shows the front matter configuration for creating external link pages in Hugo. It includes title formatting, page type specification, the external URL destination, and a setting to exclude the page from sitemap.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/archetypes/external-link.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# External link template\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ntype: external-link\nexternal_url: https://github.com/qdrant/qdrant # Change this link to your external link\nsitemapExclude: True\n---\n```\n\n----------------------------------------\n\nTITLE: Fly.io Hostname Output\nDESCRIPTION: Sample output showing the assigned hostname for the Fly.io application which will be needed for configuration files.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/chatgpt-plugin.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n...\nHostname: your-application-name.fly.dev\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Partners List in YAML\nDESCRIPTION: YAML definition for partner companies with their IDs and names. This snippet includes entries for Vivendi and Gitbook, with each partner having an ID and name attribute.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\n- id: 6\n  name: Vivendi\n  logo: <svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_1622_6734)\"><path d=\"M15.5 29.5L10.32 40.4L4.95999 29.5H0L7.61998 44.3H13L20.42 29.5H15.5Z\" fill=\"#B4BACC\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M22.3002 23.4H26.7002V27.44H22.3002V23.4ZM22.2803 29.5H26.6803V44.3H22.2803V29.5Z\" fill=\"#B4BACC\"/><path d=\"M44.1806 29.5L39.0006 40.4L33.6407 29.5H28.6807L36.3006 44.3H41.6806L49.1006 29.5H44.1806Z\" fill=\"#B4BACC\"/><path d=\"M56.9604 40.44C56.5004 40.36 55.6004 40.14 54.8404 39.54L69.1203 36.72C69.1003 36.06 68.9803 35.4 68.8003 34.76C68.5403 33.78 66.8203 28.86 58.9004 29.06C55.9004 29.14 53.4404 30.12 51.8004 31.64C50.2804 33.06 49.3804 34.9 49.3804 37.04C49.3804 39.14 50.4204 41.08 52.3004 42.46C54.0804 43.76 56.4404 44.3 59.6403 44.3H67.8803V40.66H59.9603C58.7604 40.66 57.7404 40.56 56.9604 40.44ZM59.3803 32.46C61.9803 32.46 63.4403 33.42 63.9803 34.5L53.5804 36.48C53.6604 35.68 54.0204 34.88 54.5604 34.32C55.6404 33.18 57.2404 32.46 59.3803 32.46Z\" fill=\"#B4BACC\"/><path d=\"M81.0801 32.74C83.8601 32.74 85.8201 33.96 85.7601 36.5V44.28H90.1601V36.28C90.2001 34.48 89.6601 33.08 88.4801 31.78C86.9001 30.02 84.4001 29.04 81.0801 29.04C77.7401 29.04 75.2601 30.02 73.6801 31.78C72.5001 33.08 71.9601 34.48 72.0001 36.28V44.28H76.4001V36.5C76.3401 33.96 78.3001 32.74 81.0801 32.74Z\" fill=\"#B4BACC\"/><path d=\"M107.78 19.5V29.2L103 29.18C101.44 29.18 97.5604 29.44 95.0204 31.88C93.6404 33.2 92.9404 34.94 92.9404 37.06C92.9404 38.88 93.6004 40.54 94.8604 41.86C96.6604 43.74 99.2604 44.74 102.36 44.74C105.6 44.74 108.24 43.9 109.96 42.22C111.5 40.72 112.2 38.64 112.2 36.2V19.52H107.78V19.5ZM107.78 36.26C107.74 38.56 106.68 40.88 102.44 40.88C100.64 40.88 99.1804 40.44 98.2004 39.32C97.6604 38.7 97.3804 38.02 97.3604 37.28C97.3204 36.04 97.8204 35 98.6404 34.28C99.6804 33.36 101.26 32.86 103 32.86H107.78V36.26Z\" fill=\"#B4BACC\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M115.601 23.4H120.001V27.44H115.601V23.4ZM115.601 29.5H120.001V44.3H115.601V29.5Z\" fill=\"#B4BACC\"/></g><defs><clipPath id=\"clip0_1622_6734\"><rect width=\"120\" height=\"64\" fill=\"white\"/></clipPath></defs></svg>\n- id: 7\n  name: Gitbook\n```\n\n----------------------------------------\n\nTITLE: Upload Snapshot to Qdrant Collection via cURL\nDESCRIPTION: A cURL command to upload a snapshot file to a Qdrant collection. The request includes authentication via API key and uses multipart form data to send the snapshot file. The endpoint accepts a priority parameter for snapshot processing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/recover-snapshot-with-priority/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'http://qdrant-node-1:6333/collections/{collection_name}/snapshots/upload?priority=snapshot' \\\n    -H 'api-key: ********' \\\n    -H 'Content-Type:multipart/form-data' \\\n    -F 'snapshot=@/path/to/snapshot-2022-10-10.shapshot'\n```\n\n----------------------------------------\n\nTITLE: Nested JSON Payload Example in Qdrant\nDESCRIPTION: An example of a JSON payload with nested structures representing country and city data, used to demonstrate Qdrant's filtering capabilities for nested objects.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qdrant-1.2.x.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"country\": \"Japan\",\n  \"cities\": [\n    {\n      \"name\": \"Tokyo\",\n      \"population\": 9.3,\n      \"area\": 2194\n    },\n    {\n      \"name\": \"Osaka\",\n      \"population\": 2.7,\n      \"area\": 223\n    },\n    {\n      \"name\": \"Kyoto\",\n      \"population\": 1.5,\n      \"area\": 827.8\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection Alias in Qdrant\nDESCRIPTION: This snippet shows how to create an alias for an existing collection, allowing for seamless switching between different versions of vectors in production environments.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/collections.md#2025-04-21_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST 'http://localhost:6333/aliases' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"actions\": [\n      {\n        \"create_alias\": {\n          \"collection_name\": \"my_collection\",\n          \"alias_name\": \"my_production_collection\"\n        }\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Deleting Qdrant Snapshots with Java Client\nDESCRIPTION: Initializes a Qdrant client connection to localhost:6334 and performs an asynchronous deletion of a full snapshot. The code demonstrates proper client initialization and snapshot management using the Qdrant Java client library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/delete-full-snapshot/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.deleteFullSnapshotAsync(\"{snapshot_name}\").get();\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collection with Recommendations and Lookup (TypeScript)\nDESCRIPTION: This snippet shows how to query a Qdrant collection using the `query` method. It utilizes recommendation based on positive and negative examples and also includes a lookup from an external collection to retrieve vectors. The query is limited to 10 results, and the `using` parameter specifies the vector field to be used for the query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-lookup-from/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.query(\"{collection_name}\", {\n    query: {\n        recommend: {\n            positive: [100, 231],\n            negative: [718],\n        }\n    },\n    using: \"image\",\n    limit: 10,\n    lookup_from: {\n        collection: \"{external_collection_name}\",\n        vector: \"{external_vector_name}\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Available Reranker Models\nDESCRIPTION: Command to display supported cross-encoder reranker models in FastEmbed\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-rerankers.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTextCrossEncoder.list_supported_models()\n```\n\n----------------------------------------\n\nTITLE: Configuring Images for Landing Page\nDESCRIPTION: Specifies image sources and alternative text for the landing page, ensuring suitable visuals are displayed for both desktop and mobile devices, contributing to a responsive design.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/qdrant-vector-database/qdrant-vector-database-hero.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  src: /img/qdrant-vector-database-hero.svg\n  srcMobile: /img/mobile/qdrant-vector-database-hero.svg\n  alt: Qdrant Vector Database\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Secret\nDESCRIPTION: Configure Qdrant operator to use Docker Hub authentication secret for image pulls\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/hybrid-cloud-setup.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nqdrant:\n  image:\n    pull_secret: \"dockerhub-registry-secret\"\n```\n\n----------------------------------------\n\nTITLE: Adding Vectors in Rust\nDESCRIPTION: This Rust snippet shows how to upsert multiple vectors into the Qdrant collection, including their IDs and payload.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{PointStruct, UpsertPointsBuilder};\\n\\nlet points = vec![\\n    PointStruct::new(1, vec![0.05, 0.61, 0.76, 0.74], [(\"city\", \"Berlin\".into())]),\\n    PointStruct::new(2, vec![0.19, 0.81, 0.75, 0.11], [(\"city\", \"London\".into())]),\\n    PointStruct::new(3, vec![0.36, 0.55, 0.47, 0.94], [(\"city\", \"Moscow\".into())]),\\n    // ..truncated\\n];\\n\\nlet response = client\\n    .upsert_points(UpsertPointsBuilder::new(\"test_collection\", points).wait(true))\\n    .await?;\\n\\ndbg!(response);\n```\n\n----------------------------------------\n\nTITLE: Defining Color Match in JSON\nDESCRIPTION: This snippet creates a JSON object that specifies a 'key' for color and a 'match' condition for the value red. It is used in applications requiring property-based filtering or selection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-keyword/json.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"color\",\n  \"match\": {\n    \"value\": \"red\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Payload from Specific Points in Qdrant Collection using Rust\nDESCRIPTION: This code uses the Qdrant client to remove payload data from specific points in a collection. It creates a ClearPayloadPointsBuilder with the collection name, specifies the point IDs to clear (0, 3, and 10), and sets the wait flag to true to make the operation synchronous.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/clear-payload/simple/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{ClearPayloadPointsBuilder, PointsIdsList};\n\nclient\n    .clear_payload(\n        ClearPayloadPointsBuilder::new(\"{collection_name}\")\n            .points(PointsIdsList {\n                ids: vec![0.into(), 3.into(), 10.into()],\n            })\n            .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Displaying Retrieval Performance Metrics Table in Markdown\nDESCRIPTION: This markdown table presents the performance metrics (NDCG@20 and Recall@20) for different pooling types in the ColPali optimization experiment.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/colpali-optimization.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Pooling Type | NDCG@20 | Recall@20 |\n|--------------|---------|-----------|\n| **Mean**     | 0.952   | 0.917     |\n| **Max**      | 0.759   | 0.656     |\n```\n\n----------------------------------------\n\nTITLE: Defining Leadership Team Structure in YAML for Qdrant Website\nDESCRIPTION: YAML configuration that defines the leadership team members for the Qdrant website. Each team member entry includes an ID, name, position, and path to their avatar image. The file also includes a sitemapExclude flag to prevent this page from being included in the sitemap.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/leadership.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Leadership\nteamMembers:\n  - id: 0\n    name: André Zayarni\n    position: CEO & Co-Founder\n    avatar: '/img/leadership/andre-zayarni.png'\n  - id: 1\n    name: Andrey Vasnetsov\n    position: CTO & Co-Founder\n    avatar: '/img/leadership/andrey-vasnetsov.png'\n  - id: 2\n    name: Fabrizio Schmidt\n    position: Product & Engineering\n    avatar: '/img/leadership/fabrizio-schmidt.png'\n  - id: 3\n    name: Bastian Hofmann\n    position: Enterprise Solutions\n    avatar: '/img/leadership/bastian-hofmann.png'\n  - id: 4\n    name: Dominik Alberts\n    position: Finance\n    avatar: '/img/leadership/dominik-alberts.png'\n  - id: 5\n    name: David Myriel\n    position: Developer Relations\n    avatar: '/img/leadership/david-myriel.png'\n  - id: 6\n    name: Manuel Meyer\n    position: Growth\n    avatar: '/img/leadership/manuel-meyer.png'\n  - id: 7\n    name: Randy Petkoff\n    position: Sales\n    avatar: '/img/leadership/randy-petkoff.png'    \nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Qdrant Demo Landing Page Structure in YAML/Markdown\nDESCRIPTION: YAML/Markdown configuration for a landing page that describes various Qdrant vector search demonstrations. The structure includes title, description, and cards with demo details including titles, descriptions, and links.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/demo/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Qdrant Demos and Tutorials\ndescription: Experience firsthand how Qdrant powers intelligent search, anomaly detection, and personalized recommendations, showcasing the full capabilities of vector search to revolutionize data exploration and insights.\ncards:\n  - id: 0\n    title: Semantic Search Demo - Startup Search\n    paragraphs:\n      - id: 0\n        content: This demo leverages a pre-trained SentenceTransformer model to perform semantic searches on startup descriptions, transforming them into vectors for the Qdrant engine.\n      - id: 1\n        content: Enter a query to see how neural search compares to traditional full-text search, with the option to toggle neural search on and off for direct comparison.\n    link:\n      text: View Demo\n      url: https://qdrant.to/semantic-search-demo\n  - id: 1\n    title: Semantic Search and Recommendations Demo - Food Discovery\n    paragraphs:\n      - id: 0\n        content: Explore personalized meal recommendations with our demo, using Delivery Service data. Like or dislike dish photos to refine suggestions based on visual appeal.\n      - id: 1\n        content: Filter options allow for restaurant selections within your delivery area, tailoring your dining experience to your preferences.\n    link:\n      text: View Demo\n      url: https://food-discovery.qdrant.tech/\n  - id: 2\n    title: Categorization Demo -<br> E-Commerce Products\n    paragraphs:\n      - id: 0\n        content: Discover the power of vector databases in e-commerce through our demo. Simply input a product name and watch as our multi-language model intelligently categorizes it. The dots you see represent product clusters, highlighting our system's efficient categorization.\n    link:\n      text: View Demo\n      url: https://qdrant.to/extreme-classification-demo\n  - id: 3\n    title: Code Search Demo -<br> Explore Qdrant's Codebase\n    paragraphs:\n      - id: 0\n        content: Semantic search isn't just for natural language. By combining results from two models, qdrant is able to locate relevant code snippets down to the exact line.\n    link:\n      text: View Demo\n      url: https://code-search.qdrant.tech/\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for FAQ Page in Qdrant Project\nDESCRIPTION: This YAML front matter defines metadata for a FAQ page in the Qdrant project. It sets the title, weight for ordering, partition, and indicates that the page is currently empty.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/faq/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: FAQ\nweight: 31\npartition: qdrant\nis_empty: true\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Google Cloud VolumeSnapshotClass\nDESCRIPTION: This snippet sets up a VolumeSnapshotClass in Google Kubernetes Engine (GKE) with the CSI driver. It supports backup and restore operations by defining necessary snapshot configurations. This snippet requires the GKE-specific CSI driver and snapshot controller for execution.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/platform-deployment-options.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: snapshot.storage.k8s.io/v1\nkind: VolumeSnapshotClass\nmetadata:\n  name: csi-snapclass\ndelectionPolicy: Delete\ndriver: pd.csi.storage.gke.io\n\n```\n\n----------------------------------------\n\nTITLE: Installing FiftyOne via pip\nDESCRIPTION: Command to install the FiftyOne Python package using pip package manager.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/fifty-one.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install fiftyone\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database in C#\nDESCRIPTION: Demonstrates initializing a Qdrant client connection and performing a vector similarity search with payload exclusion. The query uses a 4-dimensional vector and excludes the 'city' field from the returned payload, limiting results to 3 items.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/exclude-fields/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\tpayloadSelector: new WithPayloadSelector\n\t{\n\t\tExclude = new PayloadExcludeSelector { Fields = { new string[] { \"city\" } } }\n\t},\n\tlimit: 3\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation Structure in YAML for Qdrant Website\nDESCRIPTION: This YAML configuration defines the complete navigation structure for the Qdrant website. It includes login and sign-up links, main menu categories (Products, Use Cases, Developers, Resources, Company, Pricing), and detailed submenu items with icons and URLs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/menu.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nlogIn:\n  text: Log in\n  url: https://cloud.qdrant.io/login\nstartFree:\n  text: Get Started\n  url: https://cloud.qdrant.io/signup\nmenuItems:\n  - id: menu-0\n    name: Products\n    subMenuItems:\n      - id: subMenu-0-0\n        name: Qdrant Vector Database\n        icon: qdrant-vector-database.svg\n        url: /qdrant-vector-database/\n      - id: subMenu-0-1\n        name: Qdrant Cloud\n        icon: qdrant-cloud.svg\n        url: /cloud/\n      - id: subMenu-0-2\n        name: Qdrant Hybrid Cloud\n        icon: hybrid-cloud.svg\n        url: /hybrid-cloud/\n      - id: subMenu-0-3\n        name: Qdrant Enterprise Solutions\n        icon: qdrant-enterprise-solutions.svg\n        url: /enterprise-solutions/\n#      - id: subMenu-0-4\n#        name: Private Cloud\n#        icon: private-cloud.svg\n#        url: /private-cloud/\n  - id: menu-1\n    name: Use Cases\n    url: /use-cases/\n    subMenuItems:\n      - id: subMenu-1-0\n        name: RAG\n        icon: rag.svg\n        url: /rag/\n      - id: subMenu-1-1\n        name: Recommendation Systems\n        icon: recommendation-systems.svg\n        url: /recommendations/\n      - id: subMenu-1-2\n        name: Advanced Search\n        icon: advanced-search.svg\n        url: /advanced-search/\n      - id: subMenu-1-3\n        name: Data Analysis & Anomaly Detection\n        icon: data-analysis-anomaly-detection.svg\n        url: /data-analysis-anomaly-detection/\n      - id: subMenu-1-4\n        name: AI Agents\n        icon: ai-agents.svg\n        url: /ai-agents/\n#      - id: subMenu-1-4\n#        name: Qdrant for Startups\n#        icon: qdrant-for-startups.svg\n#        url: /qdrant-for-startups/\n  - id: menu-2\n    name: Developers\n    subMenuItems:\n      - id: subMenu-2-0\n        name: Documentation\n        icon: documentation.svg\n        url: /documentation/\n      - id: subMenu-2-1\n        name: Community\n        icon: community.svg\n        url: /community/\n      - id: subMenu-2-2\n        name: GitHub\n        icon: github.svg\n        url: https://github.com/qdrant/qdrant\n      - id: subMenu-2-3\n        name: Roadmap\n        icon: roadmap.svg\n        url: https://qdrant.to/roadmap\n      - id: subMenu-2-4\n        name: Change Log\n        icon: changelog.svg\n        url: https://github.com/qdrant/qdrant/releases\n  - id: menu-3\n    name: Resources\n    subMenuItems:\n      - id: subMenu-3-0\n        name: Benchmarks\n        icon: benchmarks.svg\n        url: /benchmarks/\n      - id: subMenu-3-1\n        name: Blog\n        icon: blog.svg\n        url: /blog/\n      - id: subMenu-3-2\n        name: Articles\n        icon: articles.svg\n        url: /articles/\n      - id: subMenu-3-3\n        name: Demos\n        icon: demos.svg\n        url: /demo/\n      - id: subMenu-3-4\n        name: Events\n        icon: partners.svg\n        url: https://try.qdrant.tech/events\n      - id: subMenu-3-5\n        name: Startup Program\n        icon: qdrant-for-startups.svg\n        url: /qdrant-for-startups/\n      - id: subMenu-3-6\n        name: Bug Bounty Program\n        icon: bug-bounty-program.svg\n        url: /security/bug-bounty-program/\n  - id: menu-4\n    name: Company\n    subMenuItems:\n      - id: subMenu-4-0\n        name: About us\n        icon: about-us.svg\n        url: /about-us/\n      - id: subMenu-4-1\n        name: Customers\n        icon: customers.svg\n        url: /customers/\n      - id: subMenu-4-2\n        name: Partners\n        icon: partners.svg\n        url: /partners/\n      - id: subMenu-4-3\n        name: Careers\n        icon: careers.svg\n        url: https://qdrant.join.com/\n      - id: subMenu-4-4\n        name: Contact us\n        icon: contact-us.svg\n        url: /contact-us/\n  - id: menu-5\n    name: Pricing\n    url: /pricing/\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Defining Document Access Control\nDESCRIPTION: Creates a mapping of document paths to their associated access roles for implementing document-level access control.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-contract-management-stackit-aleph-alpha.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndocuments = {\n    \"data/Data-Processing-Agreement_STACKIT_Cloud_version-1.2.pdf\": [\"stackit\"],\n    \"data/langchain-terms-of-service.pdf\": [\"langchain\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Snapshot in Java\nDESCRIPTION: Demonstrates how to initialize a Qdrant client connection to a local instance and create a full database snapshot. The client connects to localhost on port 6334 without SSL encryption.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/create-full-snapshot/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.createFullSnapshotAsync().get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Guides Section Front Matter in YAML\nDESCRIPTION: YAML front matter block defining configuration for a Guides documentation section. Sets the title, weight for ordering, empty status flag, and partition name.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Guides\nweight: 9\n# If the index.md file is empty, the link to the section will be hidden from the sidebar\nis_empty: true\npartition: qdrant\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant-txtai Integration Package\nDESCRIPTION: Command to install the required dependency package that enables Qdrant to work as a backend for txtai semantic applications.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/txtai.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install qdrant-txtai\n```\n\n----------------------------------------\n\nTITLE: Implementing Bootstrap Typography in HTML\nDESCRIPTION: Shows various Bootstrap typography elements including headings (h1-h6), display headings, lead paragraphs, text decorations, and blockquotes with proper semantic markup.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/debug.skip/bootstrap.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>h1. Bootstrap heading</h1>\n<p class=\"lead\">This is a lead paragraph.</p>\n<blockquote class=\"blockquote\">\n  <p>A well-known quote, contained in a blockquote element.</p>\n</blockquote>\n<ul class=\"list-unstyled\">\n  <li>This is a list.</li>\n  <li>It appears completely unstyled.</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Levels in QdrantCluster Specification\nDESCRIPTION: YAML configuration for setting log levels and resource specifications for a Qdrant cluster in Kubernetes\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/logging-monitoring.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: qdrant.io/v1\nkind: QdrantCluster\nmetadata:\n  name: qdrant-a7d8d973-0cc5-42de-8d7b-c29d14d24840\n  labels:\n    cluster-id: \"a7d8d973-0cc5-42de-8d7b-c29d14d24840\"\n    customer-id: \"acme-industries\"\nspec:\n  id: \"a7d8d973-0cc5-42de-8d7b-c29d14d24840\"\n  version: \"v1.11.3\"\n  size: 1\n  resources:\n    cpu: 100m\n    memory: \"1Gi\"\n    storage: \"2Gi\"\n  config:\n    log_level: \"DEBUG\"\n```\n\n----------------------------------------\n\nTITLE: Star Icon SVG Implementation for GitHub Stars Display\nDESCRIPTION: SVG code for the star icon used alongside GitHub stars count. The icon uses a red fill color (#DC244C) to draw attention to the star count metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/hero.md#2025-04-21_snippet_1\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"14\" height=\"15\" viewBox=\"0 0 14 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_1825_5127)\"><path d=\"M13.2508 5.25913L9.47345 4.70963L7.78732 1.2875C7.7072 1.14966 7.5923 1.03526 7.4541 0.955747C7.31591 0.876231 7.15926 0.834381 6.99983 0.834381C6.84039 0.834381 6.68374 0.876231 6.54555 0.955747C6.40735 1.03526 6.29245 1.14966 6.21232 1.2875L4.5262 4.7105L0.748825 5.25913C0.587068 5.28233 0.435041 5.35036 0.309962 5.45552C0.184882 5.56068 0.0917505 5.69876 0.0411146 5.85413C-0.0095213 6.0095 -0.0156375 6.17594 0.0234587 6.33461C0.0625549 6.49328 0.145301 6.63782 0.262325 6.75188L2.99495 9.41625L2.35007 13.1788C2.3225 13.3397 2.3405 13.5051 2.40203 13.6563C2.46356 13.8075 2.56617 13.9385 2.69826 14.0345C2.83035 14.1304 2.98665 14.1875 3.14948 14.1993C3.31232 14.211 3.4752 14.177 3.6197 14.101L6.99983 12.3239L10.3782 14.0993C10.5227 14.1752 10.6856 14.2093 10.8484 14.1975C11.0113 14.1857 11.1675 14.1287 11.2996 14.0327C11.4317 13.9368 11.5343 13.8058 11.5959 13.6546C11.6574 13.5033 11.6754 13.3379 11.6478 13.177L11.0029 9.4145L13.7373 6.75188C13.8541 6.6379 13.9366 6.49356 13.9756 6.33515C14.0147 6.17674 14.0086 6.01057 13.9582 5.85541C13.9078 5.70025 13.815 5.56227 13.6903 5.45706C13.5656 5.35185 13.414 5.2836 13.2526 5.26L13.2508 5.25913Z\" fill=\"#DC244C\"/></g><defs><clipPath id=\"clip0_1825_5127\"><rect width=\"14\" height=\"14\" fill=\"white\" transform=\"translate(0 0.5)\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI and Uvicorn in Bash\nDESCRIPTION: Command to install FastAPI and Uvicorn packages using pip. These packages are required for building and running the search API service.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npip install fastapi uvicorn\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Specification for ChatGPT Plugin\nDESCRIPTION: YAML configuration snippet for the OpenAPI specification that defines the plugin's API endpoints. The server URL needs to be updated with the Fly.io application hostname.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/chatgpt-plugin.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: 3.0.0\ninfo:\n  title: Qdrant Plugin API\n  version: 1.0.0\n  description: Plugin for searching through the Qdrant doc…\nservers:\n  - url: https://your-application-name.fly.dev\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Filtered Payload in Qdrant Collection - TypeScript\nDESCRIPTION: Shows how to update payload properties for vectors in a Qdrant collection that match specific filter criteria. The example demonstrates setting two string properties while filtering for vectors where the 'color' property equals 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/set-payload/by-filter/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.setPayload(\"{collection_name}\", {\n  payload: {\n    property1: \"string\",\n    property2: \"string\",\n  },\n  filter: {\n    must: [\n      {\n        key: \"color\",\n        match: {\n          value: \"red\",\n        },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video iframe HTML\nDESCRIPTION: HTML iframe code for embedding a YouTube video player showing the podcast episode.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/insight-generation-platform-for-lifescience-corporation-hooman-sedghamiz-vector-space-talks-014.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/yfzLaH5SFX0?si=I8dw5QddKbPzPVOB\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Documentation Page Metadata Configuration in YAML\nDESCRIPTION: YAML frontmatter example for configuring documentation page metadata. Includes parameters for controlling page order, canonical URLs, and sidebar visibility.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Here goes the title of the page #required\nweight: 10 # This is the order of the page in the sidebar. The lower the number, the higher the page will be in the sidebar.\ncanonicalUrl: https://qdrant.io/documentation/ # Optional. This is the canonical URL of the page.\nhideInSidebar: true # Optional. If true, the page will not be shown in the sidebar. It can be used in regular documentation pages and in documentation section pages (_index.md).\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Recommendation Query in Go\nDESCRIPTION: This code demonstrates connecting to a Qdrant vector database and executing a recommendation query. It initializes a client with host and port configuration, then performs a query that includes positive and negative vector examples for recommendation along with a filter to limit results to items matching a specific city value.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/basic-recommend/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n    CollectionName: \"{collection_name}\",\n    Query: qdrant.NewQueryRecommend(&qdrant.RecommendInput{\n        Positive: []*qdrant.VectorInput{\n            qdrant.NewVectorInputID(qdrant.NewIDNum(100)),\n            qdrant.NewVectorInputID(qdrant.NewIDNum(231)),\n        },\n        Negative: []*qdrant.VectorInput{\n            qdrant.NewVectorInputID(qdrant.NewIDNum(718)),\n        },\n    }),\n    Filter: &qdrant.Filter{\n        Must: []*qdrant.Condition{\n            qdrant.NewMatch(\"city\", \"London\"),\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Posting Points to Qdrant Collection using HTTP\nDESCRIPTION: This snippet demonstrates how to post a set of points to a specific collection in Qdrant using an HTTP POST request. The request identifies the collection via a placeholder {collection_name} in the URL path. The request body contains an 'ids' array with the point IDs to be added. This operation requires HTTP client capability and permission to modify collections in Qdrant. The input is a JSON object, and no specific output is returned, although a successful operation typically results in a confirmation response from the server.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/retrieve-points/simple/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points\n{\n    \"ids\": [0, 3, 100]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Embedding Process in TypeScript\nDESCRIPTION: This snippet defines constants like project ID, embedding model, collection name, server URL, and sample documents to be used in TypeScript.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = 123;\nconst EMBEDDING_MODEL = \"text-embedding-3-large\";\nconst COLLECTION_NAME = \"prem-collection-js\";\nconst SERVER_URL = \"http://localhost:6333\";\nconst DOCUMENTS = [\n    \"This is a sample javascript document\",\n    \"We will be using qdrant and premai javascript sdk\"\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Landing Page Cards Configuration in YAML\nDESCRIPTION: YAML configuration defining a set of cards for the Qdrant landing page. Each card has an ID, icon information, title, and description highlighting benefits such as deployment flexibility, cost advantages, latency, data privacy, and control features.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/hybrid-cloud/hybrid-cloud-cases.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncards:\n- id: 0\n  icon:\n    src: /icons/outline/separate-blue.svg\n    alt: Separate\n  title: Deployment Flexibility\n  description: Use your existing infrastructure, whether it be on cloud platforms, on-premise setups, or even at edge locations.\n- id: 1\n  icon:\n    src: /icons/outline/money-growth-blue.svg\n    alt: Money growth\n  title: Unmatched Cost Advantage\n  description: Maximum deployment flexibility to leverage the best available resources, in the cloud or on-premise.\n- id: 2\n  icon:\n    src: /icons/outline/speedometer-blue.svg\n    alt: Speedometer\n  title: Ultra-Low Latency\n  description: On-premise deployment for lightning-fast, low-latency access.\n- id: 3\n  icon:\n    src: /icons/outline/cloud-system-blue.svg\n    alt: Cloud system\n  title: Data Privacy & Sovereignty\n  description: Keep your sensitive data with your secure premises, while enjoying the benefits of a managed cloud.\n- id: 4\n  icon:\n    src: /icons/outline/switches-blue.svg\n    alt: Switches\n  title: Transparent Control\n  description: Fully managed experience for your Qdrant clusters, while your data remains exclusively yours.\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Landing Page YAML Front Matter for Qdrant Cloud Signup\nDESCRIPTION: YAML front matter that defines a landing page configuration for Qdrant Cloud signup. It includes a title, a call-to-action button with text and URL, an image with source path and alt text, and a sitemap exclusion directive.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/get-started-blogs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Get Started with Qdrant Free\nbutton:\n  text: Get Started\n  url: https://cloud.qdrant.io/signup\nimage:\n  src: /img/rocket.svg\n  alt: Rocket\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Share Buttons in YAML with SVG Icons\nDESCRIPTION: YAML configuration that defines social sharing buttons for X and LinkedIn platforms. Each button includes metadata (id, title, subtitle), a URL template with variables for sharing content, and an inline SVG icon.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/share-buttons.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Social Share Buttons\nnavTitle: \"On this page:\"\nbuttons:\n  - id: x\n    title: x\n    subtitle: Share on X\n    url: https://twitter.com/intent/tweet?url={{ $link }}&text={{ $title }}\n    icon: <svg width=\"33\" height=\"33\" viewBox=\"0 0 33 33\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M14.959 20.7369L6.378 30.5349H1.625L12.739 17.8389L14.959 20.7369Z\" fill=\"#161E33\"/> <path d=\"M17.5508 11.5229L25.4078 2.53491H30.1578L19.7508 14.4369L17.5508 11.5229Z\" fill=\"#161E33\"/> <path d=\"M31.9877 30.5349H22.4287L1.01172 2.53491H10.8127L31.9877 30.5349ZM23.7397 27.6919H26.3717L9.38272 5.22891H6.55872L23.7397 27.6919Z\" fill=\"#161E33\"/></svg>\n  - id: linkedin\n    title: LinkedIn\n    subtitle: Share on LinkedIn\n    url: https://www.linkedin.com/sharing/share-offsite/?url={{ $link }}\n    icon: <svg width=\"32\" height=\"33\" viewBox=\"0 0 32 33\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <g clip-path=\"url(#clip0_1811_16094)\"> <path d=\"M30.6667 0.4375H1.33333C0.533333 0.4375 0 0.970833 0 1.77083V31.1042C0 31.9042 0.533333 32.4375 1.33333 32.4375H30.6667C31.4667 32.4375 32 31.9042 32 31.1042V1.77083C32 0.970833 31.4667 0.4375 30.6667 0.4375ZM9.46667 27.7708H4.8V12.4375H9.6V27.7708H9.46667ZM7.06667 10.3042C5.6 10.3042 4.26667 9.10417 4.26667 7.50417C4.26667 6.0375 5.46667 4.70417 7.06667 4.70417C8.53333 4.70417 9.86667 5.90417 9.86667 7.50417C9.86667 9.10417 8.66667 10.3042 7.06667 10.3042ZM27.3333 27.7708H22.5333V20.3042C22.5333 18.5708 22.5333 16.3042 20.1333 16.3042C17.6 16.3042 17.3333 18.1708 17.3333 20.1708V27.7708H12.5333V12.4375H17.0667V14.5708C17.7333 13.3708 19.2 12.1708 21.6 12.1708C26.4 12.1708 27.3333 15.3708 27.3333 19.5042V27.7708Z\" fill=\"#161E33\" /> </g> <defs> <clipPath id=\"clip0_1811_16094\"> <rect width=\"32\" height=\"32\" fill=\"white\" transform=\"translate(0 0.4375)\" /> </clipPath> </defs></svg>\n---\n```\n\n----------------------------------------\n\nTITLE: Deleting a Collection Snapshot in Qdrant\nDESCRIPTION: REST API call to delete a specific snapshot from a collection, providing the snapshot name as a parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/snapshots.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE 'http://{qdrant-url}:6333/collections/{collection_name}/snapshots/{snapshot_name}'\n    -H 'api-key: ********'\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in Go\nDESCRIPTION: This snippet demonstrates how to create a new Qdrant client instance and use it to create a collection. It sets up the client with a local host and port, then creates a collection with specified vector size, distance metric, and binary quantization configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-binary-quantization/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     1536,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tQuantizationConfig: qdrant.NewQuantizationBinary(\n\t\t&qdrant.BinaryQuantization{\n\t\t\tAlwaysRam: qdrant.PtrOf(true),\n\t\t},\n\t),\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Arrays with Qdrant Client in TypeScript\nDESCRIPTION: Shows how to perform a scroll query on a Qdrant collection with filtering on nested array properties. The query filters for documents where the diet array contains elements with food='meat' and likes=true.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-multiple-nested/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must: [\n      {\n        key: \"diet[].food\",\n        match: { value: \"meat\" },\n      },\n      {\n        key: \"diet[].likes\",\n        match: { value: true },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Vectors Asynchronously in Qdrant using Java Client\nDESCRIPTION: This code snippet demonstrates how to delete multiple vectors from a Qdrant collection by their IDs using the asynchronous Java client API. It deletes vectors with IDs 0, 3, and 10 from the 'text' and 'image' named vectors in the specified collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-vectors/simple/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.PointIdFactory.id;\n\nclient\n    .deleteVectorsAsync(\n        \"{collection_name}\", List.of(\"text\", \"image\"), List.of(id(0), id(3), id(10)))\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Downloading Qdrant Collection Snapshot using cURL\nDESCRIPTION: Makes an HTTP request to download a specific collection snapshot from a Qdrant server. Uses authentication via API key and saves the snapshot to a local file. The snapshot is identified by collection name and timestamp.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/download-collection-snapshot/shell.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'http://{qdrant-url}:6333/collections/{collection_name}/snapshots/snapshot-2022-10-10.snapshot' \\\n    -H 'api-key: ********' \\\n    --output 'filename.snapshot'\n```\n\n----------------------------------------\n\nTITLE: Hybrid Cloud Environment Cleanup Script Execution\nDESCRIPTION: Run cleanup script to remove all Qdrant related resources from Kubernetes cluster\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/hybrid-cloud-setup.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./hybrid-cloud-cleanup.sh your-qdrant-namespace\n```\n\n----------------------------------------\n\nTITLE: Overwriting Payload for Points in Qdrant Collection using TypeScript\nDESCRIPTION: This code snippet shows how to use the Qdrant client to overwrite the payload for specific points in a collection. It sets two string properties and targets three point IDs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/overwrite-payload/by-point-id/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.overwritePayload(\"{collection_name}\", {\n  payload: {\n    property1: \"string\",\n    property2: \"string\",\n  },\n  points: [0, 3, 10],\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Database with gRPC in C#\nDESCRIPTION: This C# snippet initializes a QdrantClient and performs an asynchronous query using gRPC. It queries a Qdrant database specifying positive and negative input vectors, a vector type, and lookup location details. Dependencies include Qdrant.Client and Qdrant.Client.Grpc libraries. Key parameters include the collection name, positive and negative sample IDs, vector name, and output limit.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-lookup-from/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new RecommendInput {\n        Positive = { 100, 231 },\n        Negative = { 718 }\n    },\n    usingVector: \"image\",\n    limit: 10,\n    lookupFrom: new LookupLocation\n    {\n        CollectionName = \"{external_collection_name}\",\n        VectorName = \"{external_vector_name}\",\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Shards using HTTP API\nDESCRIPTION: Creates a new collection with 6 shards using the Qdrant HTTP API. This demonstrates how to specify the shard_number parameter when setting up a new collection with 300-dimensional vectors using Cosine distance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 300,\n      \"distance\": \"Cosine\"\n    },\n    \"shard_number\": 6\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Partial Styles Location in Markdown\nDESCRIPTION: This snippet explains the purpose and location of styles for partials in the Qdrant landing page project. It specifies that the styles in this directory correspond to specific partials in the '../../layouts/partial' directory.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/themes/qdrant-2024/assets/css/partials/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## What to put in partials?\\nThis directory contains styles related to specific partial in `../../layouts/partial` directory.\n```\n\n----------------------------------------\n\nTITLE: Configuring LangSmith Environment Variables\nDESCRIPTION: Sets environment variables for LangSmith configuration, including tracing and API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-contract-management-stackit-aleph-alpha.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport LANGCHAIN_TRACING_V2=true\nexport LANGCHAIN_API_KEY=\"your-api-key\"\nexport LANGCHAIN_PROJECT=\"your-project\"  # if not specified, defaults to \"default\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Secrets for Qdrant API Key\nDESCRIPTION: Example secrets file format for storing the Qdrant API key that will be used by the connector for authentication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/fluvio.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nQDRANT_API_KEY=<SOME_API_KEY>\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Landing Page Metadata and Build Settings\nDESCRIPTION: Defines page title, description, and build rendering configurations for the Qdrant vector database landing page\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/qdrant-vector-database/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ntitle: Qdrant Vector Database, High-Performance Vector Search Engine\ndescription: Experience unmatched performance and efficiency with the most advanced vector database. Learn how Qdrant can enhance your data management workflows today.\nbuild:\n  render: always\ncascade:\n- build:\n    list: local\n    publishResources: false\n    render: never\n```\n\n----------------------------------------\n\nTITLE: Install CAMEL-AI Dependencies\nDESCRIPTION: This code snippet installs the CAMEL-AI library along with all its necessary dependencies using pip. The specified version is 0.2.17.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-camelai-discord.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"!pip install camel-ai[all]==0.2.17\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HubSpot Form Options for Qdrant Email Subscription\nDESCRIPTION: JSON configuration for a HubSpot email subscription form. It specifies the region, portal ID, form ID, CSS classes for styling, and custom submit button text.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/newsletter.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"region\": \"eu1\",\n    \"portalId\": \"139603372\",\n    \"formId\": \"049d96c6-ef65-4e41-ba69-a3335b9334cf\",\n    \"cssClass\": \"subscribe-form\",\n    \"submitButtonClass\": \"button button_contained button_lg\",\n    \"submitText\": \"Subscribe\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Pandas-AI with Qdrant Support\nDESCRIPTION: Command to install Pandas-AI library with Qdrant integration using pip package manager.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/pandas-ai.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install pandasai[qdrant]\n```\n\n----------------------------------------\n\nTITLE: Configuring Case Study Landing Page Structure in YAML\nDESCRIPTION: YAML configuration that defines the structure and content of a case study landing page, including logo placement, title, description, call-to-action link, and featured image. Includes metadata for sitemap exclusion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/case-study-nyris.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncaseStudy:\n  logo:\n    src: /img/customers-case-studies/customer-logo3.svg\n    alt: Logo Nyris\n  title: \"Nyris & Qdrant: How Vectors are the Future of Visual Search\"\n  description: Nyris offers visual search solutions for various industries, using vector-based technology to quickly identify products. They selected Qdrant for its speed, accuracy, and scalability, advancing their vision of transforming product search with unified vector representations.\n  link:\n    text: Read Case Study\n    url: /blog/case-study-nyris/\n  image:\n    src: /img/customers-case-studies/case-study3.png\n    alt: Preview\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Landing Page YAML Frontmatter for Qdrant\nDESCRIPTION: YAML frontmatter configuration for the Qdrant landing page that defines page title, build settings, and sitemap exclusion. It also includes cascade settings to apply build configuration to child pages.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/features/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Make the most of your Unstructured Data\"\nicon: \nsitemapExclude: True\n_build:\n  render: never\n  list: never\n  publishResources: false\ncascade:\n  _build:\n    render: never\n    list: never\n    publishResources: false\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Shards in C#\nDESCRIPTION: Demonstrates how to create a Qdrant collection with 6 shards using the C# client. The code connects to a Qdrant server and creates a new collection asynchronously with the specified vector parameters and shard count.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\tshardNumber: 6\n);\n```\n\n----------------------------------------\n\nTITLE: Upserting Points into Qdrant with Rust Client\nDESCRIPTION: This snippet demonstrates upserting points into a Qdrant collection using the Rust client. It creates PointStruct objects, each containing an ID, vector embedding, and a payload (metadata). The points are then upserted into the specified collection using the `upsert_points` method of the `Qdrant` client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-payload/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse qdrant_client::qdrant::{PointStruct, UpsertPointsBuilder};\nuse qdrant_client::{Payload, Qdrant, QdrantError};\nuse serde_json::json;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet points = vec![\n    PointStruct::new(\n        1,\n        vec![0.05, 0.61, 0.76, 0.74],\n        Payload::try_from(json!({\"city\": \"Berlin\", \"price\": 1.99})).unwrap(),\n    ),\n    PointStruct::new(\n        2,\n        vec![0.19, 0.81, 0.75, 0.11],\n        Payload::try_from(json!({\"city\": [\"Berlin\", \"London\"]})).unwrap(),\n    ),\n    PointStruct::new(\n        3,\n        vec![0.36, 0.55, 0.47, 0.94],\n        Payload::try_from(json!({\"city\": [\"Berlin\", \"Moscow\"], \"price\": [1.99, 2.99]}))\n            .unwrap(),\n    ),\n];\n\nclient\n    .upsert_points(UpsertPointsBuilder::new(\"{collection_name}\", points).wait(true))\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Downloading Qdrant Snapshots using wget\nDESCRIPTION: This shell script demonstrates how to download snapshots from each node of the Qdrant cluster using the wget command. It includes the API key in the request headers and saves each snapshot with a unique name.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/create-snapshot.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nwget https://node-0.my-cluster.com:6333/collections/test_collection/snapshots/test_collection-559032209313046-2024-01-03-13-20-11.snapshot \\\n    --header=\"api-key: ${QDRANT_API_KEY}\" \\\n    -O node-0-shapshot.snapshot\n\nwget https://node-1.my-cluster.com:6333/collections/test_collection/snapshots/test_collection-559032209313047-2024-01-03-13-20-12.snapshot \\\n    --header=\"api-key: ${QDRANT_API_KEY}\" \\\n    -O node-1-shapshot.snapshot\n\nwget https://node-2.my-cluster.com:6333/collections/test_collection/snapshots/test_collection-559032209313048-2024-01-03-13-20-13.snapshot \\\n    --header=\"api-key: ${QDRANT_API_KEY}\" \\\n    -O node-2-shapshot.snapshot\n```\n\n----------------------------------------\n\nTITLE: Maintaining Chat History in Streamlit in Python\nDESCRIPTION: This snippet manages a session state in Streamlit for storing chat messages, enabling persistent context throughout the user's interaction with the AI assistant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nif \"messages\" not in st.session_state:\n    st.session_state.messages = []\n\nfor message in st.session_state.messages:\n    with st.chat_message(message[\"role\"):\n        st.markdown(message[\"content\"])\n```\n\n----------------------------------------\n\nTITLE: Importing Qdrant Go client and using NewIsEmpty\nDESCRIPTION: This snippet imports the Qdrant Go client library and utilizes the `NewIsEmpty` function. The `NewIsEmpty` function appears to be used to create a condition that checks if the field \"reports\" is empty in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/is-empty/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewIsEmpty(\"reports\")\n```\n\n----------------------------------------\n\nTITLE: Hybrid Search with Rust Client\nDESCRIPTION: Implementation of hybrid search using the Qdrant Rust client with query builder pattern\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{Fusion, PrefetchQueryBuilder, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .query(Query::new_nearest([(1, 0.22), (42, 0.8)].as_slice()))\n            .using(\"sparse\")\n            .limit(20u64)\n        )\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .query(Query::new_nearest(vec![0.01, 0.45, 0.67]))\n            .using(\"dense\")\n            .limit(20u64)\n        )\n        .query(Query::new_fusion(Fusion::Rrf))\n).await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Collection Snapshot in Distributed Environment\nDESCRIPTION: Demonstrates how to create a snapshot for a specific collection in Qdrant, with a note that snapshots are node-specific in distributed setups. Each node requires individual snapshot creation to capture its local data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/create-collection-snapshot/_description.md#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for API Keys\nDESCRIPTION: Creates a .env file to store secret API keys for various services used in the chatbot implementation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/hybrid-search-llamaindex-jinaai.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nJINAAI_API_KEY\nHF_INFERENCE_API_KEY\nLLAMA_CLOUD_API_KEY\nQDRANT_HOST\nQDRANT_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant Landing Page with Draft Content Enabled\nDESCRIPTION: Commands to serve the Qdrant landing page locally with draft content visible. Useful when working with content marked as drafts.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd qdrant-landing\nhugo serve -D\n```\n\n----------------------------------------\n\nTITLE: Defining Qdrant Brand Resources Page Structure in YAML\nDESCRIPTION: This YAML snippet defines the structure of the Qdrant Brand Resources page. It includes the page title, navigation buttons for different sections, and a sitemap exclusion flag.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/brand-resources/brand-resources-hero.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Qdrant Brand Resources\nbuttons:\n- id: 0\n  url: \"#logo\"\n  text: Logo\n- id: 1\n  url: \"#colors\"\n  text: Colors\n- id: 2\n  url: \"#typography\"\n  text: Typography\n- id: 3\n  url: \"#trademarks\"\n  text: Trademarks\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Scrolling Filtered Points in Qdrant Collection using Java\nDESCRIPTION: This code demonstrates how to use the Qdrant client to scroll through points in a collection with specific filters. It uses matchKeyword conditions to include and exclude points based on their properties.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-multiple-clauses-combination/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addMust(matchKeyword(\"city\", \"London\"))\n                    .addMustNot(matchKeyword(\"color\", \"red\"))\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Setting Ollama URL Environment Variable\nDESCRIPTION: Commands to set the Ollama URL as an environment variable for both shell and Python environments.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-vultr-dspy-ollama.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport OLLAMA_URL=\"https://ollama.example.com\"\n```\n\nLANGUAGE: python\nCODE:\n```\nos.environ[\"OLLAMA_URL\"] = \"https://ollama.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Meesho Logo as SVG\nDESCRIPTION: An SVG representation of the Meesho company logo. The logo uses path elements with fill color #B4BACC (muted blue-gray) and is sized at 120x65 pixels with a defined viewBox for proper scaling.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_24\n\nLANGUAGE: svg\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"65\" viewBox=\"0 0 120 65\" fill=\"none\"><g clip-path=\"url(#clip0_4574_4862)\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M93.2173 26.5028C94.5942 26.5028 95.7296 26.7609 96.618 27.2737C97.5088 27.79 98.1734 28.5678 98.6211 29.6106C99.065 30.65 99.288 31.9647 99.288 33.5547V42.0418C99.288 42.768 99.1027 43.3221 98.7273 43.7076C98.3527 44.093 97.8157 44.2858 97.1134 44.2858C96.4111 44.2858 95.8673 44.093 95.4819 43.7076C95.0965 43.3221 94.9034 42.768 94.9034 42.0418V33.7647C94.9034 32.4327 94.6526 31.4622 94.1503 30.853C93.6473 30.2439 92.8696 29.941 91.8165 29.941C90.5296 29.941 89.5073 30.3471 88.7465 31.1525C87.9857 31.9578 87.6073 33.0282 87.6073 34.36V42.0418C87.6073 43.539 86.8711 44.2858 85.398 44.2858C84.6957 44.2858 84.1588 44.093 83.7834 43.7076C83.4088 43.3221 83.2227 42.768 83.2227 42.0418V21.2095C83.2227 20.4834 83.4088 19.9361 83.7834 19.561C84.1588 19.1859 84.6957 19 85.398 19C86.1003 19 86.6442 19.1859 87.0296 19.561C87.415 19.9361 87.6073 20.4834 87.6073 21.2095V29.3456C88.0927 28.5643 88.7296 27.9345 89.5173 27.4664C90.605 26.8229 91.8373 26.5028 93.2173 26.5028ZM75.3793 34.2536L71.8723 33.5859C71.1943 33.4689 70.6917 33.2486 70.3648 32.9182C70.0378 32.5913 69.8727 32.1817 69.8727 31.6895C69.8727 31.0357 70.148 30.509 70.6952 30.1098C71.2459 29.714 72.0925 29.5144 73.2386 29.5144C73.8477 29.5144 74.4844 29.597 75.1487 29.7587C75.8164 29.924 76.5116 30.1924 77.2346 30.5641C77.63 30.75 77.9884 30.8153 78.3046 30.7568C78.6215 30.6983 78.883 30.5469 79.093 30.2991C79.303 30.0547 79.4438 29.7725 79.513 29.4559C79.5815 29.1393 79.5538 28.8295 79.4269 28.5267C79.2992 28.2238 79.0584 27.976 78.7077 27.7901C77.8677 27.3221 76.993 26.9779 76.0951 26.7542C75.1934 26.5305 74.2297 26.4203 73.2007 26.4203C71.7759 26.4203 70.5128 26.644 69.4115 27.088C68.3136 27.532 67.4532 28.1653 66.8337 28.981C66.2142 29.8 65.9044 30.7706 65.9044 31.8926C65.9044 33.1316 66.283 34.1434 67.0436 34.9247C67.8042 35.7093 68.909 36.2394 70.3579 36.5216L73.865 37.1893C74.5877 37.3304 75.1315 37.5472 75.4963 37.8363C75.8577 38.1289 76.04 38.5453 76.04 39.0822C76.04 39.712 75.7647 40.2213 75.2175 40.6068C74.6669 40.9923 73.834 41.185 72.7086 41.185C71.9135 41.185 71.1082 41.099 70.2891 40.9235C69.47 40.748 68.5924 40.4382 67.6597 39.9942C67.2845 39.8083 66.9404 39.7499 66.6237 39.8187C66.3071 39.8875 66.049 40.0424 65.8528 40.273C65.6532 40.507 65.5362 40.7823 65.5017 41.099C65.4674 41.4157 65.5258 41.7288 65.6773 42.0454C65.8287 42.3621 66.0937 42.6374 66.4654 42.868C67.3534 43.3843 68.3584 43.7457 69.4803 43.9556C70.6023 44.1655 71.6657 44.2722 72.6707 44.2722C74.8906 44.2722 76.6699 43.7869 78.0015 42.8163C79.3338 41.8458 80.0015 40.507 80.0015 38.8C80.0015 37.5369 79.6092 36.532 78.8277 35.7851C78.05 35.0486 76.897 34.5358 75.3793 34.2536ZM43.7501 35.0621C43.7501 35.482 43.6056 35.8021 43.313 36.0257C43.0205 36.2461 42.6075 36.3562 42.0637 36.3562H31.4634C31.6114 37.7157 32.0382 38.7791 32.7506 39.5294C33.6523 40.4793 34.9773 40.9507 36.7326 40.9507C37.3383 40.9507 38.0233 40.8751 38.7838 40.7237C39.5444 40.5722 40.2637 40.3107 40.9417 39.9355C41.4339 39.6533 41.8641 39.5328 42.2393 39.5672C42.6144 39.6017 42.9103 39.7359 43.1341 39.9699C43.3543 40.204 43.4886 40.4931 43.5367 40.8304C43.585 41.1711 43.5196 41.5152 43.344 41.8663C43.1685 42.2173 42.869 42.5202 42.4492 42.7783C41.6301 43.2911 40.6905 43.6731 39.627 43.9175C38.5636 44.1618 37.5758 44.2857 36.6638 44.2857C34.7227 44.2857 33.0535 43.9244 31.6493 43.1982C30.2451 42.472 29.1644 41.443 28.4038 40.1111C27.6432 38.7757 27.2646 37.1994 27.2646 35.3753C27.2646 33.5994 27.6329 32.0438 28.3694 30.7119C29.1093 29.38 30.1246 28.3337 31.4222 27.5731C32.7197 26.8125 34.1996 26.4339 35.8584 26.4339C37.0733 26.4339 38.1678 26.6335 39.1383 27.0293C40.1054 27.4251 40.9383 27.9999 41.6266 28.7467C42.3184 29.497 42.845 30.4021 43.2063 31.4656C43.5677 32.5325 43.7501 33.7302 43.7501 35.0621ZM36.0374 29.4144C35.0531 29.4144 34.2168 29.6415 33.5284 30.0993C32.8401 30.5536 32.3136 31.1971 31.9487 32.0266C31.7181 32.5601 31.5667 33.1692 31.4841 33.8334H40.0848C40.04 32.9903 39.892 32.2606 39.6305 31.6584C39.3173 30.9356 38.8596 30.3781 38.2641 29.9926C37.6687 29.6071 36.9253 29.4144 36.0374 29.4144ZM62.8449 35.0621C62.8449 35.482 62.7004 35.8021 62.4078 36.0257C62.1153 36.2461 61.6988 36.3562 61.1585 36.3562H50.5582C50.7062 37.7157 51.1295 38.7791 51.8454 39.5294C52.7471 40.4793 54.0721 40.9507 55.8274 40.9507C56.4331 40.9507 57.118 40.8751 57.8786 40.7237C58.6392 40.5722 59.3585 40.3107 60.0365 39.9355C60.5287 39.6533 60.9589 39.5328 61.334 39.5672C61.7091 39.6017 62.0051 39.7359 62.2288 39.9699C62.4491 40.204 62.5833 40.4931 62.6315 40.8304C62.6797 41.1711 62.6143 41.5152 62.4388 41.8663C62.2633 42.2173 61.9638 42.5202 61.544 42.7783C60.7248 43.2911 59.7853 43.6731 58.7218 43.9175C57.6583 44.1618 56.6706 44.2857 55.7585 44.2857C53.8175 44.2857 52.1483 43.9244 50.7441 43.1982C49.3399 42.472 48.2592 41.443 47.4986 40.1111C46.738 38.7757 46.3594 37.1994 46.3594 35.3753C46.3594 33.5994 46.7277 32.0438 47.4641 30.7119C48.2041 29.38 49.2195 28.3337 50.5169 27.5731C51.8145 26.8125 53.2943 26.4339 54.9532 26.4339C56.1681 26.4339 57.2625 26.6335 58.2331 27.0293C59.2002 27.4251 60.0331 27.9999 60.7214 28.7467C61.4131 29.497 61.9398 30.4021 62.3011 31.4656C62.6625 32.5325 62.8449 33.7302 62.8449 35.0621ZM55.1321 29.4144C54.1478 29.4144 53.3115 29.6415 52.6232 30.0993C51.9314 30.5536 51.4048 31.1971 51.0435 32.0266C50.8129 32.5601 50.6614 33.1692 50.5788 33.8334H59.1795C59.1348 32.9903 58.9868 32.2606 58.7252 31.6584C58.4121 30.9356 57.9543 30.3781 57.3589 29.9926C56.7635 29.6071 56.0201 29.4144 55.1321 29.4144ZM115.86 27.5214C114.553 26.7953 113.007 26.4339 111.231 26.4339C109.9 26.4339 108.695 26.6404 107.617 27.0465C106.543 27.4561 105.618 28.0515 104.847 28.8362C104.076 29.6209 103.484 30.5536 103.074 31.6411C102.665 32.7287 102.462 33.9608 102.462 35.3409C102.462 37.165 102.823 38.7481 103.55 40.0938C104.272 41.4395 105.291 42.472 106.602 43.1982C107.91 43.9244 109.455 44.2857 111.231 44.2857C112.563 44.2857 113.767 44.0792 114.845 43.6731C115.919 43.2636 116.844 42.6681 117.616 41.8834C118.387 41.0987 118.978 40.1592 119.388 39.0613C119.797 37.9634 120 36.7244 120 35.3444C120 33.5203 119.639 31.944 118.913 30.6087C118.187 29.2733 117.171 28.2442 115.86 27.5214ZM115.037 38.4453C114.677 39.2747 114.167 39.9011 113.513 40.321C112.859 40.7408 112.099 40.9507 111.235 40.9507C109.927 40.9507 108.873 40.4793 108.079 39.5294C107.283 38.5829 106.888 37.1856 106.888 35.3374C106.888 34.0984 107.07 33.0625 107.432 32.2331C107.793 31.4037 108.303 30.7841 108.957 30.3746C109.61 29.9651 110.371 29.762 111.235 29.762C112.543 29.762 113.596 30.2231 114.39 31.1455C115.186 32.0679 115.581 33.4652 115.581 35.3374C115.581 36.5799 115.399 37.6158 115.037 38.4453ZM9.967 42.317C9.967 43.3839 10.8653 44.2821 11.9322 44.2821C12.9991 44.2821 13.8974 43.3839 13.9042 42.317V33.3205C13.8974 31.6582 15.2809 30.309 16.9225 30.3366C18.5642 30.309 19.9512 31.6547 19.9409 33.3205V42.317C19.9409 43.401 20.822 44.2821 21.9061 44.2821C22.9627 44.2821 23.8712 43.3701 23.8712 42.317V33.3515C23.8712 31.4345 23.0935 29.6964 21.8338 28.4368C20.5776 27.1772 18.843 26.3994 16.9225 26.3994C14.9643 26.3994 13.1953 27.2081 11.9356 28.509C10.6725 27.2081 8.90354 26.3994 6.94868 26.3994C5.03168 26.3994 3.2971 27.1772 2.03745 28.4368C0.777808 29.693 0 31.431 0 33.3515V42.317C0 43.3701 0.908592 44.2821 1.96518 44.2821C3.0493 44.2821 3.93036 43.401 3.93036 42.317V33.3205C3.92348 31.6582 5.30702 30.309 6.94868 30.3366C8.59038 30.309 9.97731 31.6547 9.967 33.3205V42.317Z\" fill=\"#B4BACC\"/></g><defs><clipPath id=\"clip0_4574_4862\"><rect width=\"120\" height=\"64\" fill=\"white\" transform=\"translate(0 0.116028)\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Qdrant Blog Post Frontmatter Template\nDESCRIPTION: YAML frontmatter template for configuring Qdrant blog post metadata including title, descriptions, preview images, author info, and tags.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/templates/release-post-template.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Qdrant x.y.0 - <include headline> #required; update version and headline\"\ndraft: true # Change to false to publish the article at /articles/\nslug: qdrant-x.y.z # required; subtitute version number\nshort_description: \"Headline-like description.\"\ndescription: \"Headline with more detail. Suggested limit: 140 characters. \" \nweight: 10\nauthor: <name>\nauthor_link: https://medium.com/@yusufsarigoz\ndate: 2022-06-28T13:00:00+03:00\ntags:\n  - vector databases comparative benchmark\n  - benchmark\n  - performance\n  - latency\n---\n```\n\n----------------------------------------\n\nTITLE: Non-root User Configuration Examples\nDESCRIPTION: Examples showing how to configure Qdrant to run as a non-root user across different deployment platforms including Docker, Docker Compose, and Kubernetes.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --user=1000:2000\n```\n\nLANGUAGE: yaml\nCODE:\n```\nuser: 1000\n```\n\nLANGUAGE: yaml\nCODE:\n```\nrunAsUser: 1000\n```\n\n----------------------------------------\n\nTITLE: Loading and Converting Dataset to Langchain Documents for RAG Pipeline\nDESCRIPTION: Code showing how to load a pre-defined Qdrant documentation dataset from Hugging Face and convert it to Langchain documents format for processing in the RAG pipeline.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain.docstore.document import Document as LangchainDocument\n\n## Load the dataset with qdrant documentation\ndataset = load_dataset(\"atitaarora/qdrant_doc\", split=\"train\")\n\n## Dataset to langchain document\nlangchain_docs = [\n    LangchainDocument(page_content=doc[\"text\"], metadata={\"source\": doc[\"source\"]})\n    for doc in dataset\n]\n\nlen(langchain_docs)\n\n#Outputs\n#240\n```\n\n----------------------------------------\n\nTITLE: Matching UUIDs with Condition in Rust\nDESCRIPTION: This code snippet demonstrates how to use the Condition::matches function to compare a given key with a UUID string in Rust. The functionality requires the Condition struct, and it verifies if a specific UUID matches the criteria defined in the implementation of the matches function. It accepts a key and a UUID as a string, returning a boolean value to indicate a match.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-uuid/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nCondition::matches(\"uuid\", \"f47ac10b-58cc-4372-a567-0e02b2c3d479\".to_string())\n```\n\n----------------------------------------\n\nTITLE: Inserting Vector Data into Qdrant Collections via HTTP\nDESCRIPTION: This HTTP code snippet demonstrates how to add vectors to a collection in a Qdrant database. The request uses a PUT method to specify the collection and include vector data points. Each vector is associated with an identifier and can store image or text data. The required dependencies include a Qdrant server running and reachable over HTTP. The input includes collection name and vector data, and there is no output other than HTTP response status for success or failure.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-vectors/simple/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/points/vectors\n{\n    \"points\": [\n        {\n            \"id\": 1,\n            \"vector\": {\n                \"image\": [0.1, 0.2, 0.3, 0.4]\n            }\n        },\n        {\n            \"id\": 2,\n            \"vector\": {\n                \"text\": [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Field Index with Qdrant Client in Go\nDESCRIPTION: This snippet initializes a Qdrant client and creates a field index for a specified collection. It requires the Qdrant Go client library and context package. The parameters include the collection name, field name, field type, and index parameters, allowing for the indexing of integer types with specific options.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/integer-with-params/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateFieldIndex(context.Background(), &qdrant.CreateFieldIndexCollection{\n\tCollectionName: \"{collection_name}\",\n\tFieldName:      \"name_of_the_field_to_index\",\n\tFieldType:      qdrant.FieldType_FieldTypeInteger.Enum(),\n\tFieldIndexParams: qdrant.NewPayloadIndexParamsInt(\n\t\t&qdrant.IntegerIndexParams{\n\t\t\tLookup: false,\n\t\t\tRange:  true,\n\t\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Vector Database Client in C#\nDESCRIPTION: Creates a Qdrant client connection to a local instance running on default port 6334. Establishes connection for performing vector database operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-has-vector/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n```\n\n----------------------------------------\n\nTITLE: Configuring Examples Section Delimiter in YAML\nDESCRIPTION: YAML configuration that defines a delimiter file for the 'Examples' section in the Qdrant documentation. It sets the section title, type, weight for ordering, partition, and build parameters to control how it's processed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/dl-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#Delimiter files are used to separate the list of documentation pages into sections.\ntitle: \"Examples\"\ntype: delimiter\nweight: 24 # Change this weight to change order of sections\npartition: build\nsitemapExclude: True\n_build:\n  publishResources: false\n  render: never\n```\n\n----------------------------------------\n\nTITLE: Configuring Merge Optimizer Parameters\nDESCRIPTION: This YAML configuration contains parameters for the Merge Optimizer, which monitors and merges segments to maintain an optimal number of segments for efficient search performance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/optimizer.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  optimizers:\n    # Target amount of segments optimizer will try to keep.\n    # Real amount of segments may vary depending on multiple parameters:\n    #  - Amount of stored points\n    #  - Current write RPS\n    #\n    # It is recommended to select default number of segments as a factor of the number of search threads,\n    # so that each segment would be handled evenly by one of the threads.\n    # If `default_segment_number = 0`, will be automatically selected by the number of available CPUs\n    default_segment_number: 0\n\n    # Do not create segments larger this size (in KiloBytes).\n    # Large segments might require disproportionately long indexation times,\n    # therefore it makes sense to limit the size of segments.\n    #\n    # If indexation speed have more priority for your - make this parameter lower.\n    # If search speed is more important - make this parameter higher.\n    # Note: 1Kb = 1 vector of size 256\n    # If not set, will be automatically selected considering the number of available CPUs.\n    max_segment_size_kb: null\n```\n\n----------------------------------------\n\nTITLE: Listing Clusters in Qdrant Cloud using curl\nDESCRIPTION: This snippet demonstrates how to send a GET request to the Qdrant Cloud API to list all clusters associated with a specific account. The request requires the API key for authentication and returns the list of clusters in JSON format.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/qdrant-cloud-api.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'GET' \\\n  'https://cloud.qdrant.io/pa/v1/accounts/<YOUR_ACCOUNT_ID>/clusters' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: apikey <YOUR_API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Listing Snapshots in Go\nDESCRIPTION: Demonstrates how to create a new Qdrant client connection and list snapshots for a specified collection. The client connects to a local Qdrant instance on port 6334 and uses the context package for request management.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/list-collection-snapshots/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.ListSnapshots(context.Background(), \"{collection_name}\")\n```\n\n----------------------------------------\n\nTITLE: Downloading GitLab Legal Policies Dataset\nDESCRIPTION: Downloads and extracts the GitLab legal policies dataset for use in the evaluation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-relari.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n!wget https://ceevaldata.blob.core.windows.net/examples/gitlab/gitlab_legal_policies.zip\n!unzip gitlab_legal_policies.zip -d gitlab_legal_policies\n```\n\n----------------------------------------\n\nTITLE: Contained Button Variants - HTML\nDESCRIPTION: Contained button variants showing different sizes (small, medium, large) and disabled state.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/debug.skip/components.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"#\" class=\"button button_contained button_sm\">Try Free</a>\n<a href=\"#\" class=\"button button_contained button_md\">Try Free</a>\n<a href=\"#\" class=\"button button_contained button_lg\">Try Free</a>\n<a href=\"#\" class=\"button button_contained button_disabled\">Try Free</a>\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Executing Grouped Query in Go\nDESCRIPTION: Sets up a Qdrant client connection to localhost:6334 and performs a grouped vector similarity search. The query groups results by document_id field with a group size of 2 and uses specific similarity thresholds (0.2, 0.1, 0.9, 0.7) for vector matching.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-groups/basic/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.QueryGroups(context.Background(), &qdrant.QueryPointGroups{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tGroupBy:        \"document_id\",\n\tGroupSize:      qdrant.PtrOf(uint64(2)),\n})\n```\n\n----------------------------------------\n\nTITLE: Example Response Structure from Retrieval Chain\nDESCRIPTION: Shows the structure of the response returned by the retrieval chain, including the input query, context documents used, and generated answer.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n{\n    'input': 'What is the Oracle Cloud Free Tier?',\n    'context': [\n        Document(\n            page_content='* Free Tier is generally available in regions where commercial Oracle Cloud Infrastructure service is available. See the data regions page for detailed service availability (the exact regions available for Free Tier may differ during the sign-up process). The US$300 cloud credit is available in',\n            metadata={\n                'language': 'en-US',\n                'source': 'https://www.oracle.com/cloud/free/faq/',\n                'title': \"FAQ on Oracle's Cloud Free Tier\",\n                '_id': 'c8cf98e0-4b88-4750-be42-4157495fed2c',\n                '_collection_name': 'oracle-cloud-website'\n            }\n        ),\n        # Additional documents omitted for brevity\n    ],\n    'answer': ' Oracle Cloud Free Tier is a subscription that gives you access to Always Free services and a Free Trial with $300 of credit that can be used on all eligible Oracle Cloud Infrastructure services for up to 30 days.'\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Null Condition in Qdrant Client\nDESCRIPTION: Utilizes the Qdrant client gRPC library to create a null condition check for the 'reports' field. This method is typically used in querying or filtering vector database operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/is-null/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nIsNull(\"reports\");\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Frontmatter in YAML\nDESCRIPTION: This snippet defines the frontmatter for a Hugo page using YAML syntax. It includes a dynamically generated title, the current date, and sets the draft status to true.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/archetypes/default.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ndate: {{ .Date }}\ndraft: true\n---\n```\n\n----------------------------------------\n\nTITLE: Rust Qdrant Query Implementation\nDESCRIPTION: Rust client implementation for querying Qdrant with majority consistency, using the official client library and builder pattern.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_32\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::\n    read_consistency::Value, Condition, Filter, QueryPointsBuilder, ReadConsistencyType,\n    SearchParamsBuilder,\n};\nuse qdrant_client::{Qdrant, QdrantError};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .filter(Filter::must([Condition::matches(\n                \"city\",\n                \"London\".to_string(),\n            )]))\n            .params(SearchParamsBuilder::default().hnsw_ef(128).exact(false))\n            .read_consistency(Value::Type(ReadConsistencyType::Majority.into())),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Scrolling Through Filtered Results in Qdrant HTTP Request\nDESCRIPTION: This HTTP POST request demonstrates how to use Qdrant's scroll API to retrieve a list of top 10 laptops ordered by price. It includes filtering by category, limiting results, and specifying the order of results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-filtering.md#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/online_store/points/scroll\n{\n    \"filter\": {\n        \"must\": [\n            {\n                \"key\": \"category\",\n                \"match\": {\n                    \"value\": \"laptop\"\n                }\n            }\n        ]\n    },\n    \"limit\": 10,\n    \"with_payload\": true,\n    \"with_vector\": false,\n    \"order_by\": [\n        {\n            \"key\": \"price\",\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sitemap Exclusion\nDESCRIPTION: Indicates whether the Qdrant landing page should be excluded from the sitemap, which can impact SEO and visibility in search engines by controlling indexed content.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/qdrant-vector-database/qdrant-vector-database-hero.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsitemapExclude: true\n\n```\n\n----------------------------------------\n\nTITLE: Installing Traceloop SDK via pip\nDESCRIPTION: This console command installs the Traceloop SDK, which is required for setting up OpenLLMetry with the Traceloop. The tool is essential for enabling tracing capabilities in the Qdrant client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/observability/openllmetry.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install traceloop-sdk\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Qdrant Hybrid Cloud Landing Page\nDESCRIPTION: YAML configuration for a Qdrant Hybrid Cloud landing page, defining the page title, key features with associated icons, page description, call-to-action buttons, and image resources. This frontmatter controls the page's content and structure.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/hybrid-cloud/hybrid-cloud-hero.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Qdrant Hybrid Cloud\nfeatures: \n- id: 0\n  content: Privacy and Data Sovereignty\n  icon:\n    src: /icons/fill/cloud-system-purple.svg\n    alt: Privacy and Data Sovereignty\n- id: 1\n  content: Flexible Deployment\n  icon:\n    src: /icons/fill/separate-blue.svg\n    alt: Flexible Deployment\n- id: 2\n  content: Minimum Cost\n  icon:\n    src: /icons/fill/money-growth-green.svg\n    alt: Minimum Cost\ndescription: Seamlessly deploy and manage the vector database across diverse environments, ensuring performance, security, and cost efficiency for AI-driven applications.\nstartFree:\n  text: Get Started\n  url: https://cloud.qdrant.io/signup\ncontactUs:\n  text: Talk to sales\n  url: /contact-us/\nimage:\n  src: /img/hybrid-cloud-graphic.svg\n  alt: Enterprise-solutions\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Vanna with Qdrant Support\nDESCRIPTION: Command to install Vanna Python package with Qdrant integration\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/vanna-ai.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install 'vanna[qdrant]'\n```\n\n----------------------------------------\n\nTITLE: Creating Datetime Range with Qdrant Go Client\nDESCRIPTION: This snippet initializes a datetime range for querying data in Qdrant. It defines start and end datetime limits using the Qdrant client for Go. Required dependencies include the Qdrant Go client and Google Protobuf for handling datetime representations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/datetime-range/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"time\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n\t\"google.golang.org/protobuf/types/known/timestamppb\"\n)\n\nqdrant.NewDatetimeRange(\"date\", &qdrant.DatetimeRange{\n\tGt:  timestamppb.New(time.Date(2023, 2, 8, 10, 49, 0, 0, time.UTC)),\n\tLte: timestamppb.New(time.Date(2024, 1, 31, 10, 14, 31, 0, time.UTC)),\n})\n```\n\n----------------------------------------\n\nTITLE: Landing Page Metadata Definition\nDESCRIPTION: This YAML snippet defines metadata for the HRS landing page. It includes settings such as draft status (false), the image path, the organization name (HRS), and whether the page should be excluded from the sitemap (True).\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/stack/hrs.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\ndraft: false\nimage: \"content/images/logos/hrs-logo-mono\"\nname: \"HRS\"\nsitemapExclude: True\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring DSPy with Model and Retriever\nDESCRIPTION: Final configuration step combining the LLM model and Qdrant retriever in DSPy framework.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-vultr-dspy-ollama.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndspy.configure(lm=gemma_model, rm=qdrant_retriever)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client with TypeScript\nDESCRIPTION: This snippet initializes a QdrantClient using the `@qdrant/js-client-rest` library and establishes a connection to a local Qdrant instance running on localhost at port 6333. The QdrantClient is the main entry point for interacting with the Qdrant database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-basic/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n```\n\n----------------------------------------\n\nTITLE: Querying Distance Matrix API using Pairs format in Qdrant\nDESCRIPTION: This snippet demonstrates how to use the Distance Matrix API with the 'pairs' endpoint to compare 10 random point pairs from a dataset, limiting to 2 semantic connections between points.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.12.x.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/search/matrix/pairs\n{\n    \"sample\": 10,\n    \"limit\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Vanna to Postgres Database\nDESCRIPTION: Example of connecting the Vanna agent to a PostgreSQL database with connection parameters\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/vanna-ai.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvn.connect_to_postgres(host='my-host', dbname='my-dbname', user='my-user', password='my-password', port='my-port')\n```\n\n----------------------------------------\n\nTITLE: Executing Asynchronous Vector Recommendation Query in Qdrant\nDESCRIPTION: Performs an advanced vector similarity search using recommendation input with positive and negative reference vectors, specifying an external collection for lookup and limiting results\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-lookup-from/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(recommend(RecommendInput.newBuilder()\n                .addAllPositive(List.of(vectorInput(100), vectorInput(231)))\n                .addAllNegative(List.of(vectorInput(718)))\n                .build()))\n        .setUsing(\"image\")\n        .setLimit(10)\n        .setLookupFrom(\n                LookupLocation.newBuilder()\n                        .setCollectionName(\"{external_collection_name}\")\n                        .setVectorName(\"{external_vector_name}\")\n                        .build())\n        .build()).get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Frontmatter for External Links\nDESCRIPTION: This YAML frontmatter snippet defines the configuration for an external link page in Hugo. It sets the title dynamically, specifies the content type as 'external-link', provides the external URL, and excludes the page from the sitemap.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/themes/qdrant/archetypes/external-link.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# External link template\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ntype: external-link\nexternal_url: https://github.com/qdrant/qdrant # Change this link to your external link\nsitemapExclude: True\n---\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with Nested Filters in Python\nDESCRIPTION: This code uses the Qdrant Python client to scroll through a collection with advanced filtering. It applies nested conditions to filter on nested fields 'diet.food' and 'diet.likes', combined with a document ID filter. This query is useful for retrieving specific documents that match complex criteria within nested structures.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-nested-clause-and-has-id/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must=[\n            models.NestedCondition(\n                nested=models.Nested(\n                    key=\"diet\",\n                    filter=models.Filter(\n                        must=[\n                            models.FieldCondition(\n                                key=\"food\", match=models.MatchValue(value=\"meat\")\n                            ),\n                            models.FieldCondition(\n                                key=\"likes\", match=models.MatchValue(value=True)\n                            ),\n                        ]\n                    ),\n                )\n            ),\n            models.HasIdCondition(has_id=[1]),\n        ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Delimiter in Documentation Sidebar using Hugo\nDESCRIPTION: This command creates a delimiter file in the documentation sidebar. The weight parameter can be set to control the position of the delimiter in the sidebar.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd qdrant-landing\nhugo new --kind delimiter documentation/<delimiter-title>.md\n```\n\n----------------------------------------\n\nTITLE: Qdrant Logo SVG Component\nDESCRIPTION: SVG vector graphic logo using path elements to render the Qdrant brand logo in a grey color (#B4BACC). The logo is designed for a 120x64 viewport.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_20\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M38.4991 16.2263H2.56821V9.56821H38.4991V16.2263ZM41.0625 7H0V18.7945H41.0625V7Z\" fill=\"#B4BACC\"/><path d=\"M2.56821 38.2843H0V26.4897H2.56821V31.1509H7.15257V26.4897H9.72078V38.2843H7.15257V33.3975H2.56821V38.2843ZM13.6091 33.1143H16.6669C16.6093 32.2454 16.2541 31.6406 15.2508 31.6406C14.4924 31.6406 13.8347 31.9622 13.6091 33.1143ZM15.5484 38.4715C12.9418 38.4715 11.1705 36.8298 11.1705 34.132C11.1705 31.5061 12.9082 29.6964 15.2076 29.6964C17.7182 29.6964 18.9615 31.3765 18.9615 33.8871V34.8328H13.6091C13.9115 36.1337 14.9292 36.4745 15.9517 36.4745C16.8397 36.4745 17.4782 36.2873 18.2703 35.7929H18.3663V37.737C17.6846 38.2267 16.7197 38.4715 15.5484 38.4715ZM25.6677 33.3399L24.3475 38.2843H22.101L19.5328 29.9796V29.8836H21.9858L23.3827 34.8472L24.7028 29.8836H26.7045L28.0438 34.8472L29.46 29.8836H31.8169V29.9796L29.2487 38.2843H27.0022L25.6677 33.3399Z\" fill=\"#B4BACC\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring IDF in Qdrant Collection - Java\nDESCRIPTION: Java code using the Qdrant gRPC client to create a collection with IDF modifier for sparse vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Modifier;\nimport io.qdrant.client.grpc.Collections.SparseVectorConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorParams;\n\nQdrantClient client =\n  new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n  .createCollectionAsync(\n    CreateCollection.newBuilder()\n    .setCollectionName(\"{collection_name}\")\n    .setSparseVectorsConfig(\n      SparseVectorConfig.newBuilder()\n      .putMap(\"text\", SparseVectorParams.newBuilder().setModifier(Modifier.Idf).build()))\n    .build())\n  .get();\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed HTML\nDESCRIPTION: HTML iframe code for embedding the YouTube video of the interview with Nirant Kasliwal.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/fastembed-fast-lightweight-embedding-generation-nirant-kasliwal-vector-space-talks-004.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/e67jLAx_F2A?si=533LvUwRKIt_qWWu\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Front Matter for Qdrant Community Page\nDESCRIPTION: This YAML snippet defines the Hugo front matter for the Qdrant community landing page. It specifies the page title, description, build settings, and cascade configuration for child pages.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/community/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Community\ndescription: Apply to be a Qdrant Star, access the Community, watch Vector Space Talks, subscribe to product updates, and more. \nbuild:\n  render: always\ncascade:\n- build:\n    list: local\n    publishResources: false\n    render: never\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options in YAML\nDESCRIPTION: This YAML configuration defines build parameters including options for listing child pages, publishing resources, and rendering settings. It includes conditions that prevent child pages from being processed unless specific comments are removed or edited. There are prerequisites for having a template to render the section properly.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/marketing/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\n_build:\n  list: never\n  publishResources: false\n  render: never\n# child pages won't be rendered if lines below are not removed\n# currently we don't have a template for this section\n# remove or comment out the lines below to render the section\n# only if you have a template for it!\ncascade:\n  _build:\n      list: never\n      publishResources: false\n      render: never\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Apify Python SDK\nDESCRIPTION: This command installs the Apify Python SDK, which is required to programmatically access Apify integrations.  It allows you to interact with Apify actors and services from a Python script.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/platforms/apify.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```sh\npip install apify-client\n```\n```\n\n----------------------------------------\n\nTITLE: Customer Logo Configuration in YAML\nDESCRIPTION: YAML configuration that defines an array of logo image paths and a sitemap exclusion flag. The configuration specifies SVG logo files for three customers and sets sitemapExclude to true.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/logo-cards-1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogos:\n  -  /img/customers-logo/discord.svg\n  - /img/customers-logo/johnson-and-johnson.svg\n  -  /img/customers-logo/perplexity.svg\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Qdrant Service Startup Output\nDESCRIPTION: Example output when starting the Qdrant service, showing worker initialization and service binding to port 6333.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/neural-search-tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n...\n[...] Starting 12 workers\n[...] Starting \"actix-web-service-0.0.0.0:6333\" service on 0.0.0.0:6333\n```\n\n----------------------------------------\n\nTITLE: Configuring IDF in Qdrant Collection - C#\nDESCRIPTION: C# implementation using the Qdrant client to create a collection with IDF modifier for sparse vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  sparseVectorsConfig: (\"text\", new SparseVectorParams {\n    Modifier = Modifier.Idf,\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Pulumi Project for Qdrant Cloud\nDESCRIPTION: Initialize a new Pulumi project for managing Qdrant Cloud infrastructure across different programming languages\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/cloud-tools/pulumi.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir qdrant-pulumi && cd qdrant-pulumi\npulumi new \"<LANGUAGE>\" -y\n```\n\n----------------------------------------\n\nTITLE: Updating Collection Configuration with Qdrant Python SDK\nDESCRIPTION: This snippet demonstrates how to update configurations of a collection in Qdrant using the Python SDK. The function updates vector parameters, HNSW configurations, and quantization settings for efficient vector storage and retrieval. It requires a pre-existing collection in the Qdrant database and depends on the models from the SDK such as VectorParamsDiff, HnswConfigDiff, and different quantization configurations. The expected input is the collection name and configuration parameters, and the purpose is to apply the changes to the specified collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/hnsw-and-quantization/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.update_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config={\n        \"my_vector\": models.VectorParamsDiff(\n            hnsw_config=models.HnswConfigDiff(\n                m=32,\n                ef_construct=123,\n            ),\n            quantization_config=models.ProductQuantization(\n                product=models.ProductQuantizationConfig(\n                    compression=models.CompressionRatio.X32,\n                    always_ram=True,\n                ),\n            ),\n            on_disk=True,\n        ),\n    },\n    hnsw_config=models.HnswConfigDiff(\n        ef_construct=123,\n    ),\n    quantization_config=models.ScalarQuantization(\n        scalar=models.ScalarQuantizationConfig(\n            type=models.ScalarType.INT8,\n            quantile=0.8,\n            always_ram=False,\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Go\nDESCRIPTION: This snippet initializes a new Qdrant client in Go. It sets the host and port for the Qdrant instance. The client is then used to interact with the Qdrant service.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/integer-is-principal/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Qdrant Collection Configuration\nDESCRIPTION: This snippet demonstrates how to update the `indexing_threshold` for a Qdrant collection using a PATCH request. The request should be sent to the `/collections/{collection_name}` endpoint, replacing `{collection_name}` with the actual name of the collection you want to modify.  The request body includes the `optimizers_config` with the desired `indexing_threshold` value.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/simple/http.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPATCH /collections/{collection_name}\n{\n    \"optimizers_config\": {\n        \"indexing_threshold\": 10000\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading a Collection Snapshot in Qdrant\nDESCRIPTION: REST API call to download a specified snapshot file from a collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/snapshots.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://{qdrant-url}:6333/collections/{collection_name}/snapshots/{snapshot_name}'\n    -H 'api-key: ********' --output snapshot_name.snapshot\n```\n\n----------------------------------------\n\nTITLE: Scrolling Points in Qdrant using Go\nDESCRIPTION: This snippet demonstrates how to use the Qdrant client's scroll functionality to retrieve points from a collection with a specific filter based on vector presence. It utilizes a context for managing the operation and requires the Qdrant client initialized in the previous snippet.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-has-vector/go.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewHasVector(\n\t\t\t\t\"image\",\n\t\t\t),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a QdrantClusterSnapshot\nDESCRIPTION: This snippet demonstrates how to create a one-time backup of a Qdrant cluster using the `QdrantClusterSnapshot` resource. The `cluster-id` and `customer-id` labels must match the corresponding `QdrantCluster` resource.  The `retention` parameter specifies how long the snapshot will be retained.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/backups.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: qdrant.io/v1\nkind: QdrantClusterSnapshot\nmetadata:\n  name: \"qdrant-a7d8d973-0cc5-42de-8d7b-c29d14d24840-snapshot-timestamp\"\n  labels:\n    cluster-id: \"a7d8d973-0cc5-42de-8d7b-c29d14d24840\"\n    customer-id: \"acme-industries\"  \nspec:\n  cluster-id: \"a7d8d973-0cc5-42de-8d7b-c29d14d24840\"\n  retention: 1h\n```\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Testimonial\nDESCRIPTION: YAML configuration block defining a customer testimonial including the review text, reviewer details, avatar image, and company logo. Also includes metadata for sitemap exclusion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/customers-testimonial-3.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreview: \"Vector stores are definitely here to stay, the objects in the world around us from image, sound, video and text become easily universal and searchable thanks to the embedding models and vector stores. I personally recommend Qdrant. We have been using it for a while and couldn't be happier.\"\nnames: Hooman Sedghamiz\npositions: Director AI/ML, Bayer\navatar:\n  src: /img/customers/hooman-sedghamiz.svg\n  alt: Hooman Sedghamiz Avatar\nlogo:\n  src: /img/brands/bayer.svg\n  alt: Logo\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Ecosystem Section Delimiter in YAML\nDESCRIPTION: This YAML configuration defines a delimiter file that separates documentation pages into sections. It establishes the 'Ecosystem' section with a weight of 10 to position it before Integrations (weight 17), and includes build settings to prevent direct rendering.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/dl-ecosystem.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#Delimiter files are used to separate the list of documentation pages into sections.\ntitle: \"Ecosystem\"\ntype: delimiter\nweight: 10 # Position before Integrations (weight 17)\nsitemapExclude: True\n_build:\n  publishResources: false\n  render: never\npartition: build\n```\n\n----------------------------------------\n\nTITLE: Popper Library License Information\nDESCRIPTION: Detailed copyright notice and MIT license information for a popper library used for creating and placing poppers near reference elements.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/themes/qdrant/static/js/vendor.min.js.LICENSE.txt#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.16.1\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Documentation Section Delimiter\nDESCRIPTION: YAML front matter configuration for a documentation section delimiter file. It defines a section titled 'Essentials' with weight 1 for ordering, excludes it from the sitemap, and specifies build settings to prevent rendering.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/dl-essentials.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#Delimiter files are used to separate the list of documentation pages into sections.\ntitle: \"Essentials\"\ntype: delimiter\nweight: 1 # Change this weight to change order of sections\nsitemapExclude: True\n_build:\n  publishResources: false\n  render: never\npartition: build\n```\n\n----------------------------------------\n\nTITLE: Link Component Implementation - HTML\nDESCRIPTION: Basic link component implementation with default styling.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/debug.skip/components.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"#\" class=\"link\">Text</a>\n```\n\n----------------------------------------\n\nTITLE: Removing Collection Alias in System\nDESCRIPTION: This code removes a collection alias named 'production_collection'. The snippet demonstrates the syntax for alias removal operations, which is likely part of a collection management system.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/delete/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: unknown\nCODE:\n```\n{\n  \"delete_alias\": {\n    \"alias_name\": \"production_collection\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Integrations Page with Frontmatter in Markdown\nDESCRIPTION: This snippet contains frontmatter metadata for a web page about Qdrant integrations. It defines the page title, navigation links to documentation sections, and sitemap exclusion setting.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/integrations.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Integrations\nlink:\n  text: See Integrations\n  url: /documentation/frameworks/\nembedLink:\n  text: embeddings\n  url: /documentation/embeddings/\nframeworkLink:\n  text: frameworks\n  url: /documentation/frameworks/\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection to Insert the Vectors - TypeScript\nDESCRIPTION: This snippet shows how to create a collection in Qdrant and upsert the vectors converted from the model outputs in TypeScript.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst COLLECTION_NAME = \"twelve_labs_collection\"\n\nawait qdrantClient.createCollection(COLLECTION_NAME, {\n    vectors: {\n        size: 1024,\n        distance: 'Cosine',\n    }\n});\n\nawait qdrantClient.upsert(COLLECTION_NAME, {\n    wait: true,\n    points\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Qdrant Environment Variables - Python\nDESCRIPTION: Configures Qdrant connection details including URL and API key as environment variables in Python\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nos.environ[\"QDRANT_URL\"] = \"https://qdrant.example.com\"\nos.environ[\"QDRANT_API_KEY\"] = \"your-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Splide.js License Information\nDESCRIPTION: Copyright notice and license information for Splide.js v4.1.4, licensed under MIT.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/themes/qdrant/static/js/vendor.min.js.LICENSE.txt#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*!\n * Splide.js\n * Version  : 4.1.4\n * License  : MIT\n * Copyright: 2022 Naotoshi Fujita\n */\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode in Qdrant Collection Creation (TypeScript)\nDESCRIPTION: This TypeScript code snippet uses the Qdrant client to create a new collection with strict mode enabled, specifically activating the unindexed_filtering_retrieve limit.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.13.x.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  strict_mode_config: {\n    enabled: true,\n    unindexed_filtering_retrieve: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Contact Us Page\nDESCRIPTION: YAML frontmatter that configures a landing page with a contact us message and link. The configuration includes a content message, a contact link with text and URL, and a sitemap exclusion flag.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/get-contacted-with-question.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncontent: Do you have further questions? We are happy to assist you.\ncontactUs:\n  text: Contact us\n  url: /contact-us/\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Local Disk Performance Results\nDESCRIPTION: FIO benchmark results showing improved performance metrics for local disk with higher IOPS and bandwidth.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/memory-consumption.md#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nread: IOPS=63.2k, BW=247MiB/s (259MB/s)(8192MiB/33207msec)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Delimiter File for Documentation Sections\nDESCRIPTION: This YAML configuration defines a delimiter file used to separate documentation pages into sections. It includes section title formatting, weight for controlling section order, sitemap exclusion, and build settings to control the rendering behavior.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/archetypes/delimiter.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#Delimiter files are used to separate the list of documentation pages into sections.\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ntype: delimiter\nweight: 0 # Change this weight to change order of sections\nsitemapExclude: True\n_build:\n  list: never\n  publishResources: false\n  render: never\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Collection Points with Nested Filter using HTTP POST\nDESCRIPTION: This snippet demonstrates an HTTP POST request to the Qdrant Collection Points Scroll API. It uses a complex filter with nested conditions to query points in a collection. The filter combines nested object matching and ID filtering.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-nested-clause-and-has-id/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/scroll\n{\n   \"filter\":{\n      \"must\":[\n         {\n            \"nested\":{\n               \"key\":\"diet\",\n               \"filter\":{\n                  \"must\":[\n                     {\n                        \"key\":\"food\",\n                        \"match\":{\n                           \"value\":\"meat\"\n                        }\n                     },\n                     {\n                        \"key\":\"likes\",\n                        \"match\":{\n                           \"value\":true\n                        }\n                     }\n                  ]\n               }\n            }\n         },\n         {\n            \"has_id\":[\n               1\n            ]\n         }\n      ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a RAG Ingestion Pipeline with Fondant and Qdrant in Python\nDESCRIPTION: This code demonstrates how to create a complete RAG (Retrieval Augmented Generation) data ingestion pipeline using Fondant. The pipeline reads text data from a custom source, chunks the text, generates embeddings using Hugging Face's all-MiniLM-L6-v2 model, and indexes them in a Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/fondant.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pyarrow as pa\nfrom fondant.pipeline import Pipeline\n\nindexing_pipeline = Pipeline(\n    name=\"ingestion-pipeline\",\n    description=\"Pipeline to prepare and process data for building a RAG solution\",\n    base_path=\"./fondant-artifacts\",\n)\n\n# An custom implemenation of a read component. \ntext = indexing_pipeline.read(\n    \"path/to/data-source-component\",\n    arguments={\n        # your custom arguments \n    }\n)\n\nchunks = text.apply(\n    \"chunk_text\",\n    arguments={\n        \"chunk_size\": 512,\n        \"chunk_overlap\": 32,\n    },\n)\n\nembeddings = chunks.apply(\n    \"embed_text\",\n    arguments={\n        \"model_provider\": \"huggingface\",\n        \"model\": \"all-MiniLM-L6-v2\",\n    },\n)\n\nembeddings.write(\n    \"index_qdrant\",\n    arguments={\n        \"url\": \"http:localhost:6333\",\n        \"collection_name\": \"some-collection-name\",\n    },\n    cache=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Geo Polygon Filter with Exterior and Interior Boundaries\nDESCRIPTION: Creates a geospatial filter using longitude and latitude coordinates to define a complex polygon area. Supports specifying both exterior and optional interior boundaries for precise location filtering.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-poligon/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"must\": [\n    {\n      \"geo_polygon\": {\n        \"location\": {\n          \"exterior\": [\n            {\"lon\": 10.0, \"lat\": 20.0},\n            {\"lon\": 11.0, \"lat\": 21.0},\n            {\"lon\": 12.0, \"lat\": 22.0}\n          ],\n          \"interior\": [\n            {\"lon\": 10.5, \"lat\": 20.5},\n            {\"lon\": 11.5, \"lat\": 21.5}\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Logo for GLG\nDESCRIPTION: SVG vector graphic for GLG company logo with text-based design.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_13\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 32.0341C28 24.7783 32.6047 19.2124 40.2015 19.2124C46.6357 19.2124 50.6822 22.5457 51.4729 28.0186H44.5271C44.155 26.4372 42.6667 25.1349 40.4651 25.1349C37.0233 25.1349 35.2713 28.0341 35.2713 32.0496C35.2713 36.0651 37.2713 39.0729 40.7442 39.0729C43.3643 39.0729 44.6357 37.662 45.0698 36.0186H40.4651V30.9178H51.9535V44.2512H47.1783L46.6202 41.6465H46.5581C45.0078 43.8791 42.4961 44.8403 39.5194 44.8403C36.2171 44.8403 33.3953 43.7085 31.4109 41.5845C29.1473 39.1504 28 35.8481 28 32.0341Z\" fill=\"#B4BACC\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in C#\nDESCRIPTION: Shows how to instantiate a Qdrant client connected to localhost and create a new collection with specified vector parameters. The collection is configured with 100-dimensional vectors using cosine distance metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/simple/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 100, Distance = Distance.Cosine }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Mem0 Package\nDESCRIPTION: Command to install the Mem0 package via pip package manager\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/mem0.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install mem0ai\n```\n\n----------------------------------------\n\nTITLE: Recovering Qdrant Collection Snapshot using Python Client\nDESCRIPTION: Demonstrates how to initialize a Qdrant client and recover a collection snapshot from another node. The script connects to a Qdrant instance and recovers a snapshot using specified priority settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/recover-snapshot-with-priority/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://qdrant-node-2:6333\")\n\nclient.recover_snapshot(\n    \"{collection_name}\",\n    \"http://qdrant-node-1:6333/collections/{collection_name}/snapshots/snapshot-2022-10-10.shapshot\",\n    priority=models.SnapshotPriority.SNAPSHOT,\n)\n```\n\n----------------------------------------\n\nTITLE: SVG Logo Implementation - Vivendi\nDESCRIPTION: SVG vector graphics implementation of the Vivendi logo with specific paths and shapes using grayscale colors\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_8\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_1622_6734)\"><path d=\"M15.5 29.5L10.32 40.4L4.95999 29.5H0L7.61998 44.3H13L20.42 29.5H15.5Z\" fill=\"#B4BACC\"/>[...]</g><defs><clipPath id=\"clip0_1622_6734\"><rect width=\"120\" height=\"64\" fill=\"white\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring DISCORD_BOT_TOKEN Environment Variable in Bash\nDESCRIPTION: This snippet sets an environment variable for the Discord bot token. This token is required to authenticate and run the bot using Discord's API. Ensure you replace '<your-discord-bot-token>' with your actual bot token. This variable is essential for the bot's operation and should be kept secure.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-camelai-discord.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nDISCORD_BOT_TOKEN=<your-discord-bot-token>\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Webinar Landing Page\nDESCRIPTION: Frontend configuration in YAML format defining the webinar landing page structure, including metadata, links, images and tags.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/ai-agents/ai-agents-webinar.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntag:\n  title: On-demand Webinar\n  icon:\n    src: /icons/outline/training-purple.svg\n    alt: Training\ntitle: Building Agents with LlamaIndex & Qdrant\ndescription: Ready to build more advanced AI agents? Watch this webinar to learn how to use LlamaIndex and Qdrant to create intelligent agents capable of handling complex, multi-modal queries in RAG-enabled systems.\nlink:\n  text: Watch Now\n  url: https://www.youtube.com/watch?v=3mWIFsooibQ\nimage:\n  src: /img/ai-agents-webinar.svg\n  alt: AI agents webinar\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Headers for Qdrant Metrics Collection\nDESCRIPTION: YAML configuration to include API key authentication headers when collecting metrics from a secured Qdrant instance\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/observability/datadog.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nextra_headers:\n   api-key: <QDRANT_API_KEY>\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with cURL\nDESCRIPTION: This cURL command sends a PUT request to create or modify a Qdrant collection. It specifies the vector size, distance metric, and allows initialization from another collection. The command is customizable with collection names and vector parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/init-from/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"vectors\": {\n      \"size\": 300,\n      \"distance\": \"Cosine\"\n    },\n    \"init_from\": {\n       \"collection\": {from_collection_name}\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Applying UMAP for Dimensionality Reduction\nDESCRIPTION: This snippet applies the UMAP algorithm to the distance matrix to reduce the dimensionality of the data to 2D for visualization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/distance-based-exploration.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\numap = UMAP(\n    metric=\"precomputed\", # We provide ready-made distance matrix\n    n_components=2, # output dimension\n    n_neighbors=20, # Same as the limit in the search_matrix_offsets\n)\n\nvectors_2d = umap.fit_transform(matrix)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Information with Qdrant Client in Rust\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client to asynchronously fetch information about a specific collection. It uses the collection_info method, which takes the collection name as a parameter and returns a result that needs to be awaited.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-info/simple/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nclient.collection_info(\"{collection_name}\").await?;\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with OR Conditions in C#\nDESCRIPTION: Creates a Qdrant client connection and executes a scroll query with multiple conditions combined using OR operator. The query filters records matching either 'London' as city or 'red' as color.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-should-filter/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\n// | operator combines two conditions in an OR disjunction(should)\nawait client.ScrollAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: MatchKeyword(\"city\", \"London\") | MatchKeyword(\"color\", \"red\")\n);\n```\n\n----------------------------------------\n\nTITLE: Managed Cloud Configuration in YAML\nDESCRIPTION: Defines the configuration for Qdrant's Managed Cloud offering with free tier, features, and pricing details\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/pricing/qdrant-pricing-doors-b.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncards:\n- id: 0\n  popular: true\n  title: Managed Cloud\n  price: Starting at $0\n  description: Starts with 1GB free cluster, no credit card required.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Points by IDs in Qdrant API\nDESCRIPTION: An API endpoint method that allows retrieval of specific points from a collection using an array of point identifiers. The request targets a specific collection and returns the matching points based on the provided ids.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/retrieve-points/simple/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /collections/{collection_name}/points\n```\n\n----------------------------------------\n\nTITLE: Disabling Strict Mode in HTTP\nDESCRIPTION: HTTP request for updating an existing Qdrant collection to disable strict mode.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPATCH /collections/{collection_name}\n{\n    \"strict_mode_config\": {\n        \"enabled\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Cohere Command LLM with Oracle Cloud\nDESCRIPTION: Sets up connection to Cohere Command language model hosted on Oracle Cloud Infrastructure using OCIGenAI client. Requires OCI credentials and compartment ID configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.llms.oci_generative_ai import OCIGenAI\n\nllm = OCIGenAI(\n    model_id=\"cohere.command\",\n    service_endpoint=\"https://inference.generativeai.us-chicago-1.oci.oraclecloud.com\",\n    compartment_id=os.environ.get(\"COMPARTMENT_OCID\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Hide in Sidebar Parameter in YAML Front Matter\nDESCRIPTION: This YAML snippet shows how to add a parameter to hide a page from the sidebar in the documentation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nhideInSidebar: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Enterprise Deployment Options in YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration for a landing page that describes different deployment options for Qdrant's enterprise solutions. It defines the page metadata and three deployment options with their respective descriptions, images, and links.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/enterprise-solutions/enterprise-solutions-use-cases.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: Our enterprise solutions not only address performance and scalability, but also adapt to your unique infrastructure and compliance needs.\ndescriptionImage:\n  src: /img/connecting-lines.svg\n  alt: Connecting lines\ntitle: Deploy the Way you Need\nitems:\n- id: 0\n  image:\n    src: /img/enterprise-solutions-use-cases/managed-cloud.png\n    alt: Managed Cloud\n  title: Managed Cloud\n  description: Qdrant Cloud provides optimal flexibility and offers a suite of features focused on efficient and scalable vector search - fully managed. Available on AWS, Google Cloud, and Azure.\n  link:\n    text: Learn More\n    url: /cloud/\n  odd: true\n- id: 1\n  image:\n    src: /img/enterprise-solutions-use-cases/hybrid-cloud.svg\n    alt: Hybrid Cloud\n  title: Hybrid Cloud\n  description: Bring your own Kubernetes clusters from any cloud provider, on-premise infrastructure, or edge locations and connect them to the managed cloud.\n  link:\n    text: Learn More\n    url: /hybrid-cloud/\n  odd: false\n- id: 2\n  image:\n    src: /img/enterprise-solutions-use-cases/private-cloud.svg\n    alt: Private Cloud\n  title: Private Cloud\n  description: Experience maximum control and security by deploying Qdrant in your own infrastructure or edge locations.\n  link:\n    text: Learn More\n    url: /private-cloud/\n  odd: true\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Qdrant Logo with SVG Path Elements\nDESCRIPTION: Complete SVG markup defining the Qdrant logo using path elements with clip-path and styling attributes. The SVG is sized at 120x64 pixels and contains multiple path elements that form the logo with fill colors in the B4BACC hex color.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_17\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_1629_8479)\"><path d=\"M26.5256 33.7923C27.5879 35.3003 28.638 36.7961 29.7186 38.3346C29.5599 38.3469 29.4622 38.3652 29.3706 38.3652C28.4548 38.3652 27.539 38.3591 26.6232 38.3713C26.3729 38.3713 26.2325 38.2919 26.0982 38.0843C25.274 36.7961 24.4376 35.5262 23.6133 34.238C23.4668 34.006 23.3081 33.9145 23.0272 33.9145C22.0626 33.9328 21.0919 33.9328 20.1272 33.9145C19.7792 33.9083 19.6632 34.006 19.6694 34.3601C19.6877 35.5445 19.6632 36.729 19.6877 37.9073C19.6938 38.2858 19.5717 38.3835 19.2115 38.3713C18.4483 38.3469 17.6851 38.353 16.922 38.3713C16.635 38.3713 16.519 38.3041 16.519 37.9927C16.5251 33.9755 16.5251 29.9522 16.519 25.9349C16.519 25.6663 16.5862 25.5503 16.8854 25.5564C19.6816 25.5686 22.4839 25.5564 25.2801 25.593C25.9394 25.6052 26.6171 25.7579 27.2582 25.9471C28.4365 26.289 29.1569 27.0888 29.3828 28.3037C29.5843 29.3905 29.5965 30.4833 29.2607 31.5456C28.8944 32.7239 28.1312 33.481 26.8736 33.6763C26.7881 33.6886 26.7026 33.7069 26.611 33.7313C26.5988 33.7313 26.5927 33.7435 26.5256 33.7985V33.7923ZM24.8955 31.6677C25.8845 31.6494 26.2997 31.277 26.4523 30.3002C26.7087 28.6823 26.1287 27.9435 24.5047 27.9191C23.015 27.8947 21.5315 27.9191 20.0418 27.9069C19.7426 27.9069 19.6755 28.0351 19.6816 28.2976C19.6877 29.305 19.6938 30.3063 19.6816 31.3136C19.6816 31.625 19.8037 31.6982 20.0906 31.6921C20.8904 31.6799 21.4955 31.6921 22.3014 31.6921C23.1668 31.6921 24.0297 31.6809 24.8955 31.6677Z\" fill=\"#B4BACC\"/><path d=\"M13.9664 25.5564V38.3652C13.2337 38.3652 12.5255 38.3652 11.8173 38.3652C11.1498 38.3652 10.8161 38.0375 10.8161 37.3823C10.8161 36.1612 10.81 34.9402 10.8161 33.7191C10.8161 33.4077 10.7245 33.304 10.407 33.304C8.12975 33.3162 5.85249 33.3162 3.57523 33.304C3.22723 33.304 3.14786 33.42 3.15397 33.7435C3.17228 35.1172 3.16007 36.4909 3.16007 37.8646C3.16007 38.0111 3.16007 38.1637 3.16007 38.3408H0.0219727V25.593H3.16007C3.16007 25.7518 3.16007 25.8983 3.16007 26.0448C3.16007 27.4673 3.16618 28.896 3.16007 30.3185C3.16007 30.6299 3.25165 30.7398 3.56913 30.7336C5.84638 30.7214 8.12364 30.7214 10.4009 30.7336C10.755 30.7336 10.8283 30.5993 10.8222 30.2819C10.81 28.8349 10.8222 27.3819 10.81 25.9349C10.81 25.6419 10.8893 25.5381 11.1946 25.5442C12.1104 25.5625 13.0201 25.5503 13.9664 25.5503V25.5564Z\" fill=\"#B4BACC\"/><path d=\"M31.1949 37.8707C31.4147 37.0403 31.6222 36.2345 31.8298 35.4469C32.8616 35.63 33.8385 35.8437 34.8336 35.9658C36.5675 36.1795 38.3075 36.1612 40.0475 36.0086C40.1635 35.9964 40.2734 35.9719 40.3833 35.9475C41.2136 35.7705 41.4944 35.3797 41.409 34.5372C41.3479 33.9511 41.1464 33.7069 40.5664 33.6275C39.5957 33.4993 38.6189 33.426 37.6481 33.3039C36.2989 33.133 34.9496 32.9559 33.6126 32.7362C32.3305 32.5286 31.5673 31.7288 31.2865 30.4711C31.0728 29.5309 31.0606 28.5785 31.2865 27.6383C31.5185 26.692 32.074 25.9838 33.0142 25.7212C33.9239 25.4709 34.8702 25.2756 35.8104 25.2145C38.1427 25.0619 40.4626 25.2023 42.7277 25.8494C42.8498 25.8861 42.9658 25.9227 43.1368 25.9777C42.9475 26.753 42.7704 27.5162 42.569 28.2671C42.5506 28.3343 42.3248 28.4075 42.2149 28.3831C40.4138 27.9374 38.5822 27.7909 36.7323 27.8337C36.0119 27.852 35.2854 27.9008 34.565 27.9741C33.5942 28.0718 33.3622 28.6273 33.5698 29.5492C33.6553 29.9339 33.9728 30.0926 34.333 30.1353C35.3892 30.2635 36.4515 30.3856 37.5138 30.5139C38.8264 30.6726 40.1391 30.8252 41.4456 30.9901C42.5995 31.1366 43.3077 31.8021 43.5702 32.9315C43.8083 33.9511 43.8144 34.9768 43.5824 35.9964C43.2894 37.2785 42.4591 38.0294 41.1953 38.3469C39.5591 38.7559 37.8984 38.762 36.2317 38.7193C34.6505 38.6766 33.0936 38.469 31.5734 37.9989C31.4574 37.9622 31.3414 37.9195 31.1949 37.8646V37.8707Z\" fill=\"#B4BACC\"/><path d=\"M81.8382 38.341C79.9883 37.8953 78.755 36.717 78.1506 34.9159C77.5401 33.0966 77.5218 31.2406 78.0285 29.3968C78.639 27.1867 80.1104 25.8741 82.3571 25.4284C83.9628 25.1109 85.5624 25.1109 87.162 25.5017C89.3843 26.045 90.7397 27.4492 91.2342 29.6715C91.6127 31.3749 91.5883 33.0844 91.1304 34.7694C90.5443 36.9307 89.0546 38.109 86.8995 38.4997C86.1668 38.634 85.7468 38.7866 84.5123 38.7866C83.5537 38.7866 82.7149 38.5558 81.8382 38.341ZM84.5917 26.4846C84.1216 26.5273 83.6515 26.5395 83.1875 26.6128C81.2765 26.8936 79.9334 27.8644 79.4327 29.7997C79.0481 31.2955 79.0603 32.7974 79.5182 34.281C79.9639 35.7157 80.898 36.6987 82.3633 37.1138C83.9201 37.5534 85.483 37.5412 87.0277 37.0772C88.3952 36.662 89.2927 35.7523 89.6712 34.3665C90.1169 32.7486 90.1047 31.1185 89.6468 29.5067C89.2683 28.1757 88.4136 27.2539 87.0704 26.8875C86.7684 26.8045 85.196 26.4297 84.5917 26.4846Z\" fill=\"#B4BACC\"/><path d=\"M72.2049 33.1821C73.4015 34.9282 74.5432 36.601 75.7337 38.341C75.1659 38.341 74.6775 38.3593 74.1891 38.3288C74.0731 38.3227 73.9449 38.164 73.8655 38.048C72.8703 36.5705 71.8813 35.093 70.9044 33.6033C70.7396 33.353 70.5626 33.2431 70.2573 33.2492C68.9752 33.2676 67.687 33.2553 66.4049 33.2553C66.067 33.2553 65.8961 33.4202 65.892 33.7499C65.892 35.1235 65.892 36.4972 65.892 37.8709C65.892 38.0113 65.892 38.1456 65.892 38.341C65.428 38.341 65.0007 38.3471 64.5794 38.3349C64.5122 38.3349 64.4268 38.2311 64.3962 38.1517C64.3657 38.0602 64.384 37.9503 64.384 37.8465C64.384 33.9147 64.384 29.989 64.3779 26.0573C64.3779 25.691 64.4451 25.5566 64.8541 25.5566C67.1314 25.5811 69.4087 25.5566 71.6859 25.575C72.2537 25.575 72.8276 25.6543 73.3832 25.7886C74.3661 26.0267 75.0499 26.6617 75.3491 27.6324C75.7276 28.8657 75.7337 30.1173 75.3124 31.3444C74.9461 32.4189 74.2135 33.06 73.0291 33.0905C72.791 33.0966 72.5529 33.1393 72.211 33.176L72.2049 33.1821ZM72.0767 32.0404C73.2611 32.0038 73.8472 31.5215 74.067 30.4408C74.2074 29.757 74.2074 29.0794 74.0303 28.4017C73.7922 27.4798 73.2367 26.9425 72.2903 26.9181C70.2573 26.8632 68.2242 26.8754 66.1912 26.8571C65.9531 26.8571 65.892 26.967 65.892 27.1867C65.892 28.7008 65.8981 30.2088 65.892 31.7229C65.892 31.9916 65.9775 32.077 66.2461 32.0709C67.223 32.0587 67.3811 32.0709 68.358 32.0709C69.5972 32.0524 70.838 32.0716 72.0767 32.0404Z\" fill=\"#B4BACC\"/><path d=\"M108.763 31.9425C108.763 29.9583 108.769 27.9741 108.757 25.9899C108.757 25.648 108.86 25.5625 109.19 25.5625C111.516 25.5747 113.842 25.5625 116.168 25.5808C116.657 25.5808 117.157 25.648 117.64 25.7579C118.763 26.0143 119.508 26.7103 119.801 27.8336C120.112 29.0181 120.106 30.2025 119.709 31.3625C119.374 32.3515 118.696 32.962 117.64 33.0903C117.048 33.1635 116.455 33.2368 115.857 33.2429C114.154 33.2612 112.45 33.2551 110.747 33.2429C110.405 33.2429 110.289 33.3284 110.289 33.6886C110.307 35.1111 110.289 36.5336 110.307 37.9622C110.307 38.2736 110.21 38.3713 109.917 38.3469C109.691 38.3286 109.459 38.3224 109.233 38.3469C108.873 38.3896 108.75 38.2675 108.757 37.889C108.775 35.9048 108.763 33.9206 108.763 31.9364V31.9425ZM116.016 32.0646C116.168 32.0646 116.321 32.0585 116.474 32.0524C117.554 32.0035 118.153 31.5945 118.403 30.7031C118.623 29.9155 118.635 29.1219 118.409 28.3343C118.159 27.4551 117.603 26.9423 116.687 26.924C114.654 26.869 112.621 26.8812 110.594 26.8629C110.35 26.8629 110.301 26.9789 110.301 27.1926C110.301 28.7067 110.313 30.2147 110.301 31.7288C110.301 32.0341 110.423 32.0829 110.686 32.0829C111.65 32.0707 112.221 32.0829 113.186 32.0829C114.151 32.0829 115.073 32.0646 116.016 32.0646Z\" fill=\"#B4BACC\"/><path d=\"M61.0812 26.1792C60.9468 26.5761 60.8125 26.9668 60.6843 27.3209C59.7869 27.0889 58.9382 26.8264 58.0713 26.6555C56.8624 26.4235 55.6475 26.4418 54.4386 26.7226C52.6071 27.1561 51.4898 28.2917 51.1113 30.1354C50.8549 31.3687 50.861 32.6142 51.1968 33.8352C51.734 35.8011 53.0955 36.8695 55.0492 37.2297C56.5755 37.5106 58.0591 37.3274 59.506 36.784C59.7685 36.6864 59.8479 36.5459 59.8418 36.2773C59.8296 34.9403 59.8418 33.6093 59.8296 32.2723C59.8296 31.9609 59.9151 31.8327 60.2386 31.8571C60.5195 31.8815 60.8003 31.8693 61.0751 31.8571C61.2948 31.851 61.3925 31.9243 61.3864 32.1624C61.3803 33.8413 61.3864 35.5203 61.3681 37.1992C61.3681 37.3396 61.2094 37.535 61.0751 37.6082C60.0066 38.176 58.8589 38.4874 57.6622 38.6278C56.3252 38.7866 54.9942 38.7255 53.6999 38.3226C51.5203 37.6388 50.1894 36.1491 49.6949 33.9329C49.3774 32.4982 49.3774 31.0512 49.701 29.6226C50.2627 27.15 51.8805 25.7824 54.3165 25.3611C56.5694 24.9704 58.7734 25.2635 60.9041 26.0877C60.9468 26.106 60.9896 26.1365 61.069 26.1731L61.0812 26.1792Z\" fill=\"#B4BACC\"/><path d=\"M95.5268 25.5747C95.5268 25.8006 95.5268 25.9655 95.5268 26.1242C95.5268 28.5907 95.5268 31.0573 95.5268 33.5238C95.5268 34.8608 95.9358 35.9842 97.163 36.6619C97.5904 36.9 98.0666 37.0709 98.5428 37.1869C99.5868 37.4311 100.637 37.4006 101.669 37.0953C103.378 36.5886 104.251 35.4225 104.257 33.6398C104.263 31.1244 104.257 28.6029 104.257 26.0876C104.257 25.7457 104.43 25.5747 104.776 25.5747C105.436 25.5747 105.765 25.9085 105.765 26.576C105.765 29.0303 105.765 31.4846 105.765 33.9389C105.765 34.3174 105.735 34.7021 105.692 35.0806C105.57 36.1795 104.99 36.9915 104.092 37.6021C103.219 38.1943 102.249 38.4995 101.211 38.6277C99.7272 38.8109 98.2681 38.7254 96.8577 38.1943C96.5952 38.0966 96.3449 37.9684 96.1007 37.8341C94.7636 37.1136 94.0615 35.972 94.0432 34.464C94.0127 31.6006 94.031 28.7434 94.0249 25.88C94.0249 25.6541 94.0921 25.5625 94.3302 25.5686C94.7087 25.5809 95.0872 25.5686 95.5329 25.5686L95.5268 25.5747Z\" fill=\"#B4BACC\"/></g><defs><clipPath id=\"clip0_1629_8479\"><rect width=\"120\" height=\"64\" fill=\"white\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Creating Index on Payload Field\nDESCRIPTION: Configures an index for a specific field in a Qdrant collection with keyword type and on-disk storage option\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/keyword-on-disk/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/index\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"field_name\": \"payload_field_name\",\n    \"field_schema\": {\n        \"type\": \"keyword\",\n        \"on_disk\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing IsEmptyCondition in Python\nDESCRIPTION: This snippet creates an IsEmptyCondition that checks if the specified PayloadField with the key 'reports' is empty. It is part of the Qdrant model framework for handling data queries related to payload fields. The key parameter is essential for targeting the appropriate data field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/is-empty/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodels.IsEmptyCondition(\n    is_empty=models.PayloadField(key=\"reports\"),\n)\n```\n\n----------------------------------------\n\nTITLE: TLS Configuration for Cluster Mode\nDESCRIPTION: YAML configuration for enabling TLS in cluster peer-to-peer communication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\ncluster:\n  p2p:\n    enable_tls: true\n```\n\n----------------------------------------\n\nTITLE: Installing Twelve Labs and Qdrant SDKs - TypeScript\nDESCRIPTION: This snippet provides the command to install the Twelve Labs and Qdrant client libraries for JavaScript/TypeScript environments.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n$ npm install twelvelabs-js @qdrant/js-client-rest\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Similarity Search with Qdrant in Rust\nDESCRIPTION: This snippet demonstrates how to connect to a Qdrant server and execute a vector similarity search query. It initializes a client using a local server URL, then constructs a query with vector coordinates, result limit, and search vector name parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/sparse-vectors/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::QueryPointsBuilder;\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![(1, 0.2), (3, 0.1), (5, 0.9), (7, 0.7)])\n            .limit(10)\n            .using(\"text\"),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Installing Langchain4J Qdrant Dependencies using Maven\nDESCRIPTION: Maven dependency configuration required to add langchain4j-qdrant module to a Java project. The VERSION placeholder should be replaced with the desired version number.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langchain4j.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>dev.langchain4j</groupId>\n    <artifactId>langchain4j-qdrant</artifactId>\n    <version>VERSION</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Example Question Answering Outputs from the Chain\nDESCRIPTION: Sample outputs from the question answering system for various queries, showing how the system responds to different types of questions, including those it can answer based on its knowledge base and those it cannot.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/langchain-integration.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n> what kind of music is scott joplin most famous for\n Scott Joplin is most famous for composing ragtime music.\n\n> who died from the band faith no more\n Chuck Mosley\n\n> when does maggie come on grey's anatomy\n Maggie first appears in season 10, episode 1, which aired on September 26, 2013.\n\n> can't take my eyes off you lyrics meaning\n I don't know.\n\n> who lasted the longest on alone season 2\n David McIntyre lasted the longest on Alone season 2, with a total of 66 days.\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Libraries (Shell)\nDESCRIPTION: pip command to install necessary Python libraries including pandas, qdrant-client, and python-dotenv.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/recommendation-system-ovhcloud.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n!pip install -U  \\\n    pandas  \\\n    qdrant-client \\\n    python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Configuring STACKIT CSI VolumeSnapshotClass for Kubernetes\nDESCRIPTION: YAML configuration for creating a VolumeSnapshotClass in STACKIT Kubernetes Engine (SKE). This setup is required to enable backups and restores for Qdrant deployments on STACKIT, using the OpenStack Cinder CSI driver.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/platform-deployment-options.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: snapshot.storage.k8s.io/v1\nkind: VolumeSnapshotClass\nmetadata:\n  name: csi-snapclass\ndeletionPolicy: Delete\ndriver: cinder.csi.openstack.org\n```\n\n----------------------------------------\n\nTITLE: Contact Page YAML Configuration\nDESCRIPTION: Defines the structure and content of a contact page including support options and form configuration. Contains support cards with contact channels and a HubSpot form integration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/contact-us/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Contact Qdrant\ndescription: Let us know how we can help by filling out the form. We will respond within 48 business hours.\ncards:\n- id: 0\n  icon: /icons/outline/comments-violet.svg\n  title: Qdrant Cloud Support\n  description: For questions or issues with Qdrant Cloud, contact\n  mailLink: \n    text: support@qdrant.io\n    href: support@qdrant.io\n- id: 1\n  icon: /icons/outline/discord-blue.svg\n  title: Developer Support\n  description: For developer questions about Qdrant usage, join our\n  link: \n    text: Discord Server\n    href: https://qdrant.to/discord\nform:\n  id: contact-us-form\n  title: Talk to our Team\n  hubspotFormOptions: '{\n    \"region\": \"eu1\",\n    \"portalId\": \"139603372\",\n    \"formId\": \"814b303f-2f24-460a-8a81-367146d98786\",\n    \"submitButtonClass\": \"button button_contained\",\n  }'\naliases:\n  - /contact-sales/\n  - /contact-hybrid-cloud/\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft as Project Partner in YAML\nDESCRIPTION: YAML configuration for a project partner, defining Microsoft with ID 8. This configuration entry is likely part of a list of partners or sponsors for the Qdrant project.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- id: 8\n  name: Microsoft\n```\n\n----------------------------------------\n\nTITLE: Bootstrap License Information\nDESCRIPTION: Copyright notice and license information for Bootstrap v4.6.2, licensed under MIT.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/themes/qdrant/static/js/vendor.min.js.LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*!\n  * Bootstrap v4.6.2 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n```\n\n----------------------------------------\n\nTITLE: Subscribe Page Configuration in YAML\nDESCRIPTION: Defines the structure and content for a newsletter subscription page, including form details, metadata, and footer links\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/subscribe/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Subscribe\nsection_title: Subscribe\nsubtitle: Subscribe \ndescription: Subscribe \nimage: \n  src: /img/subscribe.webp\n  srcMobile: /img/mobile/subscribe.webp\n  # always add png image to the same folder as webp image for compatibility with older browsers\n  alt: Astronaut\nform:\n  title: Sign up for Qdrant Updates\n  description: Stay up to date on product news, technical articles, and upcoming educational webinars.\n  label: Email\n  placeholder: info@qdrant.com\n  button: Subscribe\nfooter:\n  rights: \"&copy; 2025 Qdrant. All Rights Reserved\"\n  termsLink:\n    url: /legal/terms_and_conditions/\n    text: Terms\n  policyLink:\n    url: /legal/privacy-policy/\n    text: Privacy Policy\n  impressumLink:\n    url: /legal/impressum/\n    text: Impressum\n---\n```\n\n----------------------------------------\n\nTITLE: Payload Structure for Arxiv.org Titles Dataset in JSON\nDESCRIPTION: Example of the payload structure for each vector in the Arxiv.org titles dataset. It includes the paper title and DOI.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/datasets.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"title\": \"Nash Social Welfare for Indivisible Items under Separable, Piecewise-Linear Concave Utilities\",\n    \"DOI\": \"1612.05191\"\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Logo SVG Implementation for Qdrant Landing Page\nDESCRIPTION: SVG code that renders the GitHub logo used in the landing page's GitHub stars section. The SVG uses clip paths and specific styling for brand representation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/hero.md#2025-04-21_snippet_0\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"24\" height=\"25\" viewBox=\"0 0 24 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_1825_5122)\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 0.800003C5.4 0.800003 0 6.2 0 12.8C0 18.1 3.4 22.6 8.2 24.2C8.8 24.3 9 23.9 9 23.6C9 23.3 9 22.6 9 21.6C5.7 22.3 5 20 5 20C4.5 18.6 3.7 18.2 3.7 18.2C2.5 17.5 3.7 17.5 3.7 17.5C4.9 17.6 5.5 18.7 5.5 18.7C6.6 20.5 8.3 20 9 19.7C9.1 18.9 9.4 18.4 9.8 18.1C7.1 17.8 4.3 16.8 4.3 12.2C4.3 10.9 4.8 9.8 5.5 9C5.5 8.6 5 7.4 5.7 5.8C5.7 5.8 6.7 5.5 9 7C10 6.7 11 6.6 12 6.6C13 6.6 14 6.7 15 7C17.3 5.4 18.3 5.8 18.3 5.8C19 7.5 18.5 8.7 18.4 9C19.2 9.8 19.6 10.9 19.6 12.2C19.6 16.8 16.8 17.8 14.1 18.1C14.5 18.5 14.9 19.2 14.9 20.3C14.9 21.9 14.9 23.2 14.9 23.6C14.9 23.9 15.1 24.3 15.7 24.2C20.5 22.6 23.9 18.1 23.9 12.8C24 6.2 18.6 0.800003 12 0.800003Z\" fill=\"#E1E5F0\"/></g><defs><clipPath id=\"clip0_1825_5122\"><rect width=\"24\" height=\"24\" fill=\"white\" transform=\"translate(0 0.5)\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration metadata for the blog post, including title, description, author details, and tags.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-n8n.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Chat with a codebase using Qdrant and N8N\"\ndraft: false\nslug: qdrant-n8n\nshort_description: Integration demo\ndescription: Building a RAG-based chatbot using Qdrant and N8N to chat with a codebase on GitHub\npreview_image: /blog/qdrant-n8n/preview.jpg\ndate: 2024-01-06T04:09:05+05:30\nauthor: Anush Shetty\nfeatured: false\ntags:\n  - integration\n  - n8n\n  - blog\n```\n\n----------------------------------------\n\nTITLE: Disabling Strict Mode in Java\nDESCRIPTION: Java code for updating an existing Qdrant collection to disable strict mode using the Qdrant Java client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.grpc.Collections.StrictModeConfigBuilder;\nimport io.qdrant.client.grpc.Collections.UpdateCollection;\n\nclient.updateCollectionAsync(\n    UpdateCollection.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setStrictModeConfig(\n            StrictModeConfig.newBuilder().setEnabled(false).build())\n        .build());\n```\n\n----------------------------------------\n\nTITLE: Performing Semantic Search with Qdrant in Rust\nDESCRIPTION: This Rust function performs a semantic search using Qdrant. It takes a query text, embeds it, and searches for similar vectors in the specified collection. The function returns a list of scored points, which can be further processed as needed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/serverless.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse anyhow::Result;\nuse qdrant_client::prelude::*;\npub async fn search(\n    text: &str,\n    collection_name: String,\n    client: &Client,\n    api_key: &str,\n    qdrant: &QdrantClient,\n) -> Result<Vec<ScoredPoint>> {\n    Ok(qdrant.search_points(&SearchPoints {\n        collection_name,\n        limit: 5, // use what fits your use case here\n        with_payload: Some(true.into()),\n        vector: embed(client, text, api_key)?,\n        ..Default::default()\n    }).await?.result)\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Filtered Documents in Qdrant Collection using Java Client\nDESCRIPTION: This code demonstrates how to count documents in a Qdrant collection that match a specific keyword filter. It uses the Qdrant Java client to count points where the 'color' field equals 'red', with exact count enabled.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/count-points/with-filter-exact/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.grpc.Points.Filter;\n\nclient\n    .countAsync(\n        \"{collection_name}\",\n        Filter.newBuilder().addMust(matchKeyword(\"color\", \"red\")).build(),\n        true)\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Vector Store with LlamaIndex\nDESCRIPTION: Python code to initialize a QdrantVectorStore using LlamaIndex, connecting to a local Qdrant instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/llama-index-multitenancy.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\nfrom llama_index.vector_stores.qdrant import QdrantVectorStore\n\n\nclient = QdrantClient(\"http://localhost:6333\")\n\nvector_store = QdrantVectorStore(\n    collection_name=\"my_collection\",\n    client=client,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Community Statistics in YAML for Qdrant Project\nDESCRIPTION: This YAML configuration snippet defines community statistics for the Qdrant project landing page. It structures data about GitHub stars, Discord members, and Twitter followers with their respective numerical values.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/stats.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nstats:\n  githubStars: 23.1k\n  discordMembers: 7.9k\n  twitterFollowers: 7.5k\n---\n```\n\n----------------------------------------\n\nTITLE: Querying Points with Recommendations - HTTP\nDESCRIPTION: This snippet illustrates the structure of a POST request to the Qdrant API for querying points within a collection, leveraging a recommendation system. The request includes parameters to specify which positive and negative examples to consider and limits the number of responses. It requires a valid collection name and external collection/vector names to function correctly.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-lookup-from/http.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"recommend\": {\n      \"positive\": [100, 231],\n      \"negative\": [718]\n    }\n  },\n  \"limit\": 10,\n  \"lookup_from\": {\n    \"collection\": \"{external_collection_name}\",\n    \"vector\": \"{external_vector_name}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings in YAML for Qdrant Landing Page\nDESCRIPTION: Defines build configuration parameters for a landing page, setting list, publishResources, and render flags to false/never. Includes cascading configuration that applies the same settings to child elements.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  list: never\n  publishResources: false\n  render: never\ncascade:\n- build:\n    list: never\n    publishResources: false\n    render: never\n```\n\n----------------------------------------\n\nTITLE: Spotify Podcast Embed - Vector Space Talk\nDESCRIPTION: HTML iframe code for embedding a Spotify podcast player for the interview episode.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-x-dust-how-vector-search-helps-make-work-work-better-stan-polu-vector-space-talk-010.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe src=\"https://podcasters.spotify.com/pod/show/qdrant-vector-space-talk/embed/episodes/Qdrant-x-Dust-How-Vector-Search-Helps-Make-Work-Work-Better---Stan-Polu--Vector-Space-Talk-010-e2ep9u8/a-aasgqb8\" height=\"102px\" width=\"400px\" frameborder=\"0\" scrolling=\"no\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Query Result Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of query results returned by Qdrant, including ID, similarity score, and metadata.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/mastra.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface QueryResult {\n  id: string;\n  score: number;\n  metadata: Record<string, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in TypeScript\nDESCRIPTION: Sets up a Qdrant client connection to localhost and creates a new collection with specific vector configurations. The collection is configured with 128-dimensional vectors using Cosine distance and float16 datatype, plus sparse vector support for text data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-float16-sparse-and-dense/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 128,\n    distance: \"Cosine\",\n    datatype: \"float16\"\n  },\n  sparse_vectors: {\n    text: {\n      index: {\n        datatype: \"float16\"\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing FastEmbed Package\nDESCRIPTION: Installs the FastEmbed package using pip for SPLADE implementation\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-splade.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install -q fastembed\n```\n\n----------------------------------------\n\nTITLE: Connecting to Qdrant and Performing Faceted Search in C#\nDESCRIPTION: This snippet demonstrates how to establish a connection to a Qdrant server and perform a faceted search operation with filtering. It initializes a client connection to localhost:6334, then performs a facet search on a collection with the 'size' field while filtering for items where the 'color' field equals 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/facet-counts/simple-with-filter/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.FacetAsync(\n    \"{collection_name}\",\n    key: \"size\",\n    filter: MatchKeyword(\"color\", \"red\")\n);\n```\n\n----------------------------------------\n\nTITLE: Searching Data Using Nomic SDK - Python\nDESCRIPTION: This snippet illustrates how to query a collection in Qdrant using the Nomic SDK. By setting the 'task_type' to 'search_query', it embeds a query text and retrieves the corresponding vector. This vector is then used to perform a search against the Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/nomic.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\noutput = embed.text(\n    texts=[\"What is the best vector database?\"],\n    model=\"nomic-embed-text-v1\",\n    task_type=\"search_query\",\n)\n\nclient.search(\n    collection_name=\"my-collection\",\n    query_vector=output[\"embeddings\"][0],\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Nested Filter Implementation in Qdrant 1.2\nDESCRIPTION: A JSON filter using the new nested filter feature in Qdrant 1.2, allowing for complex conditions to be applied jointly to elements within nested arrays rather than independently.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qdrant-1.2.x.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filter\": {\n    \"must\": [\n      {\n        \"nested\": {\n          \"key\": \"country.cities\",\n          \"filter\": {\n            \"must\": [\n              {\n                \"key\": \"population\",\n                \"range\": {\n                  \"gte\": 2\n                }\n              },\n              {\n                \"key\": \"area\",\n                \"range\": {\n                  \"gt\": 500,\n                  \"lte\": 1000\n                }\n              }\n            ]\n          }\n        }\n      }\n    ]\n  },\n  \"limit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with TypeScript\nDESCRIPTION: Demonstrates how to initialize a Qdrant client and create a new collection with specified vector dimensions, distance metric, and memory mapping configuration. The collection is configured with 768-dimensional vectors using Cosine similarity and a memmap threshold of 20000.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-optimizer-config/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n  },\n  optimizers_config: {\n    memmap_threshold: 20000,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Field Index in Qdrant Collection (Go)\nDESCRIPTION: This snippet creates a field index in a specified Qdrant collection.  It uses `CreateFieldIndex` to define the index parameters, including the field name, field type (text), and tokenizer settings. The example showcases how to configure text indexing with whitespace tokenization, token length limits, and lowercasing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/simple-full-text/go.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nclient.CreateFieldIndex(context.Background(), &qdrant.CreateFieldIndexCollection{\n\tCollectionName: \"{collection_name}\",\n\tFieldName:      \"name_of_the_field_to_index\",\n\tFieldType:      qdrant.FieldType_FieldTypeText.Enum(),\n\tFieldIndexParams: qdrant.NewPayloadIndexParamsText(\n\t\t&qdrant.TextIndexParams{\n\t\t\tTokenizer:   qdrant.TokenizerType_Whitespace,\n\t\t\tMinTokenLen: qdrant.PtrOf(uint64(2)),\n\t\t\tMaxTokenLen: qdrant.PtrOf(uint64(10)),\n\t\t\tLowercase:   qdrant.PtrOf(true),\n\t\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Qdrant Logo in SVG\nDESCRIPTION: SVG code for displaying the Qdrant logo with specific path data and styling.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_1\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"144\" height=\"64\" viewBox=\"0 0 144 64\" fill=\"none\"><g clip-path=\"url(#clip0_7999_27972)\"><path d=\"M29 21.7189 141.648 20.4697 140.555 20.4697C139.462 20.4697 138.778 21.7582 138.761 23.806H142.273ZM80.7957 45.0739C80.7957 46.1074 80.8543 46.4602 81.0891 46.6928C81.2832 46.8691 81.6745 46.9854 82.1212 46.9854H82.5725V47.61H77.2268V46.9854H77.6735C78.1233 46.9854 78.5114 46.8691 78.7101 46.6928C78.942 46.4602 79.002 46.1074 79.002 45.0739V35.219H78.5915C77.4409 35.219 76.5036 35.8428 76.0554 36.9164C75.8013 37.5017 75.6842 38.0878 75.5864 39.1414L75.0211 39.1021L75.1189 34.5936H84.7397L84.8167 39.1021L84.2329 39.1414C83.8617 36.2918 82.983 35.219 81.0907 35.219H80.7973V45.0739H80.7957ZM87.5438 43.0646C87.5615 45.9126 88.227 47.1225 89.7673 47.1225C90.8216 47.1225 91.5048 46.5572 92.1879 45.1139L92.7732 45.4243C91.9337 47.1225 90.9187 47.8834 89.4561 47.8834C87.1926 47.8834 85.727 46.0089 85.727 43.0646C85.727 40.3313 87.2104 38.362 89.259 38.362C91.3861 38.362 92.7909 40.1757 92.8903 43.0646H87.5438ZM91.0758 42.3807C91.0935 40.2928 90.4489 39.0428 89.3568 39.0428C88.2647 39.0428 87.5816 40.3313 87.5623 42.3807H91.0758ZM96.7903 45.4235C96.7903 46.7313 96.9667 47.0054 97.7861 47.0054H98.0988V47.6092H93.8437V47.0054H94.1564C94.9743 47.0054 95.1507 46.732 95.1507 45.4235V36.7608C95.1507 35.4731 94.9743 35.2005 94.1564 35.2005H93.9431V34.5944L96.7903 34.4573V45.4235ZM100.829 43.0646C100.848 45.9126 101.512 47.1225 103.052 47.1225C104.107 47.1225 104.791 46.5572 105.475 45.1139L106.06 45.4243C105.22 47.1225 104.205 47.8834 102.741 47.8834C100.478 47.8834 99.0153 46.0089 99.0153 43.0646C99.0153 40.3313 100.499 38.362 102.546 38.362C104.673 38.362 106.079 40.1757 106.175 43.0646H100.829ZM104.361 42.3807C104.38 40.2928 103.736 39.0428 102.644 39.0428C101.551 39.0428 100.867 40.3313 100.849 42.3807H104.361ZM113.668 47.6092L110.858 43.0823L110.077 43.7662V45.4235C110.077 46.7313 110.252 47.0054 111.071 47.0054H111.443V47.6092H107.13V47.0054H107.442C108.262 47.0054 108.437 46.7136 108.437 45.4235V36.7608C108.437 35.4731 108.262 35.2005 107.442 35.2005H107.227V34.5944L110.076 34.4573V42.8289L112.712 40.5662C113.062 40.2543 113.277 39.9215 113.277 39.6682C113.277 39.3755 113.023 39.2384 112.436 39.2384H112.144V38.6338H115.989V39.2384H115.793C115.228 39.2384 114.974 39.3755 114.173 40.0971L112.028 42.0094L114.386 45.7763C114.973 46.7136 115.344 47.0054 115.969 47.0054H116.124V47.6092H113.668ZM124.866 43.1215C124.866 45.9704 123.285 47.8834 120.904 47.8834C118.544 47.8834 116.963 45.9711 116.963 43.1423C116.963 40.2342 118.544 38.362 120.962 38.362C123.285 38.3612 124.866 40.2928 124.866 43.1215ZM119.304 40.1549C118.992 40.8573 118.855 41.7753 118.855 43.0823C118.855 45.8926 119.518 47.2588 120.904 47.2588C122.289 47.2588 122.973 45.8933 122.973 43.1215C122.973 41.7761 122.835 40.8388 122.524 40.1549C122.192 39.414 121.587 38.9835 120.886 38.9835C120.241 38.9843 119.615 39.4533 119.304 40.1549ZM136.435 42.1273C136.435 40.8781 136.356 40.2335 136.182 39.8823C135.967 39.4926 135.617 39.2785 135.186 39.2785C134.64 39.2785 134.151 39.6289 133.821 40.2543C133.488 40.8789 133.41 41.3656 133.41 42.986V45.4243C133.41 46.732 133.587 47.0062 134.405 47.0062H134.68V47.61H131.771V42.4207C131.771 40.7626 131.732 40.3713 131.498 39.9223C131.285 39.5118 130.933 39.2792 130.483 39.2792C129.936 39.2792 129.45 39.6297 129.137 40.255C128.824 40.8981 128.747 41.4634 128.747 42.9868V45.4251C128.747 46.7536 128.904 47.007 129.741 47.007H130.015V47.6108H125.8V47.007H126.111C126.911 47.007 127.107 46.6943 127.107 45.4251V40.8018C127.107 39.5526 126.911 39.24 126.111 39.24H125.898V38.6354L128.628 38.4983V40.0987C128.999 39.1036 129.917 38.4405 130.913 38.4405C132.007 38.4405 132.707 38.9858 133.196 40.2173C133.76 39.0066 134.543 38.4405 135.617 38.4405C136.455 38.4405 137.197 38.8295 137.586 39.4741C137.958 40.0409 138.075 40.6855 138.075 41.9147V45.4259C138.075 46.7159 138.252 47.0078 139.071 47.0078H139.283V47.6116H136.436V42.1273H136.435Z\" fill=\"#8F98B3\"/></g><defs><clipPath id=\"clip0_7999_27972\"><rect width=\"144\" height=\"64\" fill=\"white\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Performing Re-Ranking with Payload Values in JSON\nDESCRIPTION: The snippet illustrates how to retrieve and re-rank points based on payload values, such as applying filters and ordering results by payload fields. It includes an example of obtaining points with specific attribute values and ordering them by another attribute.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/hybrid-queries.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\\\"/documentation/headless/snippets/query-points/hybrid-rescoring-with-payload/\\\" >}}\n```\n\n----------------------------------------\n\nTITLE: Adding Qdrant Cloud Terraform Provider to Pulumi\nDESCRIPTION: Generate Pulumi SDK for Qdrant Cloud by adding the Terraform provider and configuring API key\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/cloud-tools/pulumi.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npulumi package add terraform-provider registry.terraform.io/qdrant/qdrant-cloud\npulumi config set qdrant-cloud:apiKey \"<QDRANT_CLOUD_API_KEY>\" --secret\n```\n\n----------------------------------------\n\nTITLE: Configuration Validation Error Example\nDESCRIPTION: Example of an error message shown when invalid configuration is provided.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nError: invalid type: 64-bit integer `-1`, expected an unsigned 64-bit or smaller integer for key `storage.hnsw_index.max_indexing_threads` in config/production.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Benchmark Data for Qdrant and Elasticsearch in JSON\nDESCRIPTION: This JSON snippet defines an array of benchmark data comparing Qdrant and Elasticsearch across various index sizes. It includes metrics such as MAP (Mean Average Precision), P95 Time, Mean Time, QPS (Queries Per Second), and Upload Time for each system and index size.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/case-study-sprinklr.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ndata = [\n\n{'system': 'Qdrant', 'index_size': '1,000', 'MAP': 0.98, 'P95 Time': 0.22, 'Mean Time': 0.1, 'QPS': 280,\n\n'Upload Time': 1},\n\n{'system': 'Qdrant', 'index_size': '10,000', 'MAP': 0.99, 'P95 Time': 0.16, 'Mean Time': 0.09, 'QPS': 330,\n\n'Upload Time': 5},\n\n{'system': 'Qdrant', 'index_size': '100,000', 'MAP': 0.98, 'P95 Time': 0.3, 'Mean Time': 0.23, 'QPS': 145,\n\n'Upload Time': 100},\n\n{'system': 'Qdrant', 'index_size': '1,000,000', 'MAP': 0.99, 'P95 Time': 0.171, 'Mean Time': 0.162, 'QPS': 596,\n\n'Upload Time': 220},\n\n{'system': 'ElasticSearch', 'index_size': '1,000', 'MAP': 0.99, 'P95 Time': 0.42, 'Mean Time': 0.32, 'QPS': 95,\n\n'Upload Time': 10},\n\n{'system': 'ElasticSearch', 'index_size': '10,000', 'MAP': 0.98, 'P95 Time': 0.3, 'Mean Time': 0.24, 'QPS': 120,\n\n'Upload Time': 50},\n\n{'system': 'ElasticSearch', 'index_size': '100,000', 'MAP': 0.99, 'P95 Time': 0.48, 'Mean Time': 0.42, 'QPS': 80,\n\n'Upload Time': 1100},\n\n{'system': 'ElasticSearch', 'index_size': '1,000,000', 'MAP': 0.99, 'P95 Time': 0.37, 'Mean Time': 0.236,\n\n'QPS': 348, 'Upload Time': 1150}\n\n]\n```\n\n----------------------------------------\n\nTITLE: Condition Check in Qdrant Rust Client\nDESCRIPTION: This snippet demonstrates how to use the Qdrant client library in Rust to check if the 'reports' field is null. It uses the 'Condition::is_null' method from the library, which allows setting conditions on fields to determine their state as 'null'. This operation is commonly used in filtering and querying processes to ensure certain fields meet specified conditions before processing. The only dependency is the 'qdrant_client' crate, particularly using the 'Condition' module.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/is-null/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::Condition;\n\nCondition::is_null(\"reports\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Qdrant Logo SVG Path\nDESCRIPTION: Vector path definition for the Qdrant logo using SVG. The path uses fill-rule and clip-rule attributes with a light gray fill color (#B4BACC).\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_16\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M97.4794 30.0167L93.7279 30.0204L93.7522 39.6867L97.4831 39.6836L97.4788 34.6223C97.4719 33.244 97.9961 32.3848 99.4056 32.4048C100.794 32.4297 101.071 33.3573 101.072 34.6397L101.076 39.6799L104.845 39.6768L104.829 33.7196C104.837 30.8683 103.368 29.6774 100.692 29.6799C99.2979 29.6811 98.3653 30.0161 97.4813 31.2356L97.4794 30.0167ZM78.6604 24.0346L74.9083 24.0377L74.9226 39.6986L78.6747 39.6948L78.6604 24.0346ZM71.747 32.8704L74.3436 32.8679L74.3411 30.0378L71.7339 30.0397L71.7432 28.4236C71.7576 26.6854 73.1041 26.4401 74.3442 27.2127L74.3418 24.1921C71.0018 22.769 68.0465 25.1303 68.0341 28.7766L68.0347 30.0428L66.7311 30.0441L66.7336 32.8742L68.0378 32.8729L68.0441 39.7048L71.7432 39.701L71.747 32.8704ZM54.7589 30.0559L54.7477 35.8643C54.767 39.1762 57.3487 40.0434 60.3855 40.0565C63.5337 40.0378 66.0457 39.7228 65.9996 35.8593L65.994 30.0459L62.1996 30.049L62.2045 35.2218C62.2058 36.6474 61.8248 37.321 60.383 37.3223C58.9094 37.3179 58.506 36.5976 58.5047 35.2249L58.4998 30.0528L54.7589 30.0559ZM30.9271 31.0526L30.9215 24.9049L26.756 24.9087L26.7691 39.7477L30.9825 39.744V33.3473L36.4099 39.7396L41.7837 39.7347L34.8385 31.9765L41.2925 24.8956L36.0824 24.9006L30.9271 31.0526ZM85.9019 32.6936C87.2217 32.6924 88.3037 33.6611 88.3043 34.8589C88.3055 36.051 87.2254 37.0272 85.9056 37.0284C84.5808 37.0297 83.5038 36.056 83.5026 34.8626C83.5026 33.6654 84.5771 32.6943 85.9019 32.6936ZM91.9045 30.0223L88.2053 30.0254L88.2065 31.0588C87.3045 30.2165 86.1914 29.7197 84.9195 29.6892C82.0097 29.5809 79.6589 31.9042 79.6353 34.862C79.6434 37.755 81.9829 40.021 84.696 40.0185C86.3439 40.0173 87.5622 39.2846 88.2134 38.6166L88.2146 39.6867L91.9138 39.6836L91.9045 30.0223ZM112.242 32.6694C113.562 32.6681 114.643 33.6374 114.644 34.8352C114.646 36.0274 113.565 37.0035 112.246 37.0048C110.926 37.006 109.844 36.0317 109.843 34.8389C109.842 33.6418 110.922 32.6706 112.242 32.6694ZM118.207 23.9985L114.524 24.0022L114.545 31.0345C113.649 30.1929 112.531 29.6954 111.264 29.6649C108.349 29.556 105.998 31.88 105.975 34.8371C105.983 37.7307 108.327 39.9968 111.035 39.9943C112.683 39.9924 113.902 39.2603 114.553 38.5917L114.553 39.6624L118.221 39.6643L118.207 23.9985ZM47.0075 32.7291C48.3273 32.7279 49.4093 33.6966 49.4105 34.8943C49.4112 36.0871 48.331 37.0627 47.0112 37.0639C45.6865 37.0652 44.6094 36.0915 44.6088 34.8981C44.6076 33.7003 45.6827 32.7297 47.0075 32.7291ZM53.0095 30.0578L49.3103 30.0609L49.3109 31.0943C48.4095 30.2526 47.2908 29.7552 46.0239 29.7247C43.1141 29.6158 40.7584 31.9391 40.7341 34.8968C40.7472 37.7898 43.0867 40.0559 45.7998 40.0534C47.4476 40.0522 48.666 39.3194 49.3172 38.6514L49.3184 39.7216L53.0176 39.7185L53.0095 30.0578ZM26.7709 41.9422L118.196 41.8594L118.198 44.0527L26.7728 44.1361L26.7709 41.9422ZM3.60902 21.7554L12.1572 21.7474L12.1666 31.5892L3.61835 31.5967L3.60902 21.7554ZM13.3021 21.7461L23.4671 21.7368L13.3108 31.588L13.3021 21.7461ZM13.3121 32.5629L23.4858 42.4427L13.3208 42.4527L13.3121 32.5629ZM3.61898 32.6195L12.1672 32.6121L12.1765 42.4533L3.62832 42.4614L3.61898 32.6195ZM2.23505 20.3734L24.536 20.3528L24.5572 43.6455L2.25622 43.6654L2.23505 20.3734ZM1.75195 19.8971L25.0122 19.876L25.0347 44.1224L1.77436 44.1429L1.75195 19.8971Z\" fill=\"#B4BACC\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in Qdrant - TypeScript\nDESCRIPTION: This code snippet initializes a Qdrant client and uses it to create a collection with vectors configuration. Required dependencies include the '@qdrant/js-client-rest' library. The createCollection method requires the collection name as a string and an object defining vector specifications, including size and distance metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-disabled-global-hnsw/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n  },\n  hnsw_config: {\n    payload_m: 16,\n    m: 0,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Scrolling Points with Qdrant Java Client\nDESCRIPTION: Demonstrates how to scroll through points in a Qdrant collection using the Java client. The code configures pagination with a limit of 15 points and orders results by a 'timestamp' field. Uses asynchronous execution with get() to retrieve results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-order-by-simple/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.grpc.Points.OrderBy;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient.scrollAsync(ScrollPoints.newBuilder()\n  .setCollectionName(\"{collection_name}\")\n  .setLimit(15)\n  .setOrderBy(OrderBy.newBuilder().setKey(\"timestamp\").build())\n  .build()).get();\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed HTML\nDESCRIPTION: HTML iframe code for embedding a YouTube video about LLM evaluation discussion\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/vector-search-for-content-based-video-recommendation-gladys-and-sam-vector-space-talk-012.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/vBJF2sy1Pyw?si=H-HwmPHtFSfiQXjn\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Multivector Search using HTTP API\nDESCRIPTION: Demonstrates how to use Qdrant's HTTP API to execute a complex multivector query that implements a multi-stage reranking process. The example prefetches 1000 entries with a byte vector, reranks to 100 with a full vector, and finally reranks to 10 with ColBERT multivectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": {\n        \"prefetch\": {\n            \"query\": [1, 23, 45, 67], // <------ small byte vector\n            \"using\": \"mrl_byte\",\n            \"limit\": 1000\n        },\n        \"query\": [0.01, 0.45, 0.67, ...], // <-- full dense vector\n        \"using\": \"full\",\n        \"limit\": 100\n    },\n    \"query\": [           // <─┐\n        [0.1, 0.2, ...], // < │\n        [0.2, 0.1, ...], // < ├─ multi-vector\n        [0.8, 0.9, ...]  // < │\n    ],                   // <─┘       \n    \"using\": \"colbert\",\n    \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Deloitte Logo in SVG\nDESCRIPTION: SVG markup for the Deloitte company logo. The logo uses path elements with specific coordinates and fill properties to create the Deloitte brand image with a consistent visual style matching the other logos.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_19\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M110.064 39.5021C110.064 37.8633 111.394 36.5337 113.032 36.5337C114.671 36.5337 116 37.8633 116 39.5021C116 41.141 114.671 42.4698 113.032 42.4698C111.394 42.4698 110.064 41.141 110.064 39.5021Z\" fill=\"#B4BACC\"/><path d=\"M15.3931 31.6406C15.3931 29.7605 15.0298 28.3655 14.303 27.4568C13.5755 26.5488 12.4735 26.0952 10.9918 26.0952H9.41563V37.593H10.6216C12.2674 37.593 13.4733 37.1053 14.2412 36.126C15.0083 35.1487 15.3931 33.6532 15.3931 31.6406ZM21.014 31.4447C21.014 34.8703 20.0931 37.5099 18.2516 39.3625C16.4101 41.2161 13.8212 42.1428 10.4841 42.1428H4V21.6169H10.9368C14.1544 21.6169 16.6385 22.4596 18.3889 24.144C20.1388 25.8292 21.014 28.2616 21.014 31.4447ZM38.9751 42.1426H44.1348V21.5308H38.9751V42.1426ZM51.3831 34.4543C51.3831 35.7685 51.5549 36.7708 51.8977 37.4597C52.2412 38.1495 52.8166 38.4939 53.6258 38.4939C54.4263 38.4939 54.9925 38.1495 55.3222 37.4597C55.6521 36.7708 55.8161 35.7685 55.8161 34.4543C55.8161 33.1469 55.6494 32.1609 55.3154 31.4952C54.9803 30.8279 54.4092 30.4937 53.5993 30.4937C52.8073 30.4937 52.2413 30.8262 51.8977 31.4875C51.5549 32.1497 51.3831 33.1383 51.3831 34.4543ZM61.0677 34.4543C61.0677 36.9581 60.4115 38.9113 59.0955 40.3114C57.7806 41.7123 55.9397 42.4133 53.5735 42.4133C51.3041 42.4133 49.4977 41.6969 48.1569 40.2641C46.8145 38.8315 46.1436 36.8954 46.1436 34.4543C46.1436 31.9582 46.8007 30.0187 48.1166 28.6357C49.4324 27.2529 51.2775 26.5614 53.6532 26.5614C55.1212 26.5614 56.4199 26.8818 57.5452 27.5218C58.6712 28.1616 59.5405 29.0782 60.1512 30.272C60.7627 31.4643 61.0677 32.8592 61.0677 34.4543ZM63.1167 42.1427H68.2773V26.8321H63.1167V42.1427ZM63.1166 24.9802H68.2771V21.5298H63.1166V24.9802ZM78.7322 38.2376C79.4288 38.2376 80.2586 38.0606 81.2266 37.7094V41.5616C80.5308 41.8675 79.8695 42.0864 79.2407 42.2162C78.6119 42.3477 77.874 42.4129 77.0298 42.4129C75.2973 42.4129 74.0485 41.9775 73.2814 41.1081C72.5177 40.2388 72.1346 38.9041 72.1346 37.1029V30.7914H70.3275V26.8334H72.1347V22.9235L77.3348 22.0191V26.8334H80.6271V30.7914H77.3347V36.7507C77.3347 37.742 77.8012 38.2376 78.7322 38.2376ZM90.6755 38.2376C91.3722 38.2376 92.2019 38.0606 93.1699 37.7094V41.5616C92.4751 41.8675 91.8128 42.0864 91.1841 42.2162C90.5544 42.3477 89.8192 42.4129 88.9731 42.4129C87.2407 42.4129 85.9917 41.9775 85.2264 41.1081C84.4611 40.2388 84.078 38.9041 84.078 37.1029V30.7914H82.27V26.8334H84.078V22.8642L89.2772 22.0191V26.8334H92.5713V30.7914H89.2772V36.7507C89.2772 37.742 89.7437 38.2376 90.6755 38.2376ZM99.6813 32.5891C99.7517 31.7508 99.9913 31.1366 100.4 30.744C100.811 30.3523 101.318 30.1566 101.924 30.1566C102.585 30.1566 103.111 30.3765 103.501 30.8196C103.894 31.2603 104.098 31.8503 104.114 32.5891H99.6813ZM106.958 28.3665C105.732 27.164 103.991 26.5619 101.74 26.5619C99.3737 26.5619 97.5528 27.2534 96.2764 28.6362C95.0008 30.0192 94.3627 32.0032 94.3627 34.5888C94.3627 37.0925 95.0525 39.0234 96.4285 40.3788C97.8054 41.7342 99.7387 42.4128 102.229 42.4128C103.425 42.4128 104.454 42.3312 105.316 42.1688C106.173 42.0082 107.003 41.7179 107.808 41.2987L107.015 37.8483C106.43 38.0872 105.873 38.271 105.348 38.392C104.588 38.5681 103.755 38.6566 102.848 38.6566C101.854 38.6566 101.068 38.4136 100.493 37.9273C99.9175 37.4403 99.6108 36.7687 99.5756 35.9132H108.799V33.5623C108.799 31.3007 108.186 29.5682 106.958 28.3665ZM27.8622 32.5891C27.9327 31.7508 28.1723 31.1366 28.5811 30.744C28.9908 30.3523 29.4984 30.1566 30.1057 30.1566C30.7655 30.1566 31.291 30.3765 31.682 30.8196C32.0744 31.2603 32.278 31.8503 32.2961 32.5891H27.8622ZM35.1399 28.3665C33.9126 27.164 32.1732 26.5619 29.9211 26.5619C27.5537 26.5619 25.7337 27.2534 24.4582 28.6362C23.1827 30.0192 22.5436 32.0032 22.5436 34.5888C22.5436 37.0925 23.2325 39.0234 24.6102 40.3788C25.9863 41.7342 27.9198 42.4128 30.4098 42.4128C31.6055 42.4128 32.6344 42.3312 33.4968 42.1688C34.3541 42.0082 35.1837 41.7179 35.9895 41.2987L35.1959 37.8483C34.6109 38.0872 34.0542 38.271 33.5295 38.392C32.7684 38.5681 31.9361 38.6566 31.0291 38.6566C30.0353 38.6566 29.2494 38.4136 28.6739 37.9273C28.0975 37.4403 27.7918 36.7687 27.7565 35.9132H36.9799V33.5623C36.9799 31.3007 36.3666 29.5682 35.14 28.3665\" fill=\"#B4BACC\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Updating Collection Configuration with Curl in Bash\nDESCRIPTION: This Bash snippet demonstrates how to update the vector storage configuration for a specified collection in Qdrant using a HTTP PATCH request. It sends a request to 'http://localhost:6333/collections/{collection_name}' with a JSON payload to modify collection settings. Required dependencies include Curl and access to the Qdrant server endpoint. The input is the collection name and JSON configuration, and on success, it updates the collection's configuration. Ensure that Qdrant is running and accessible on 'localhost:6333'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/vectors-to-disk-named/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X PATCH http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"vectors\": {\n        \"my_vector\": { \n           \"on_disk\": true \n      }\n    }\n  }'\n\n```\n\n----------------------------------------\n\nTITLE: LangChain integration with DSPy\nDESCRIPTION: LangChain has released an integration with DSPy to simplify the use of both frameworks together. This integration allows users to utilize LangChain's utility functions, such as text splitting, directory loaders, or integrations with other data sources, while leveraging DSPy for LM interactions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/dspy-vs-langchain.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"from langchain.llms import OpenAI\nfrom dspy.teleprompt.bootstrap import BootstrapFewShot\n\n# Example code showcasing integration (not executable without full context)\n# llm = OpenAI(model_name='gpt-3.5-turbo')\n# bootstrap = BootstrapFewShot(metric=some_metric, llm=llm)\n# trainset = bootstrap.compile(trainset=train, predictor=some_predictor)\"\n```\n\n----------------------------------------\n\nTITLE: Contained Button Implementation - HTML\nDESCRIPTION: Basic contained button implementation showing default, outlined, and disabled states.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/debug.skip/components.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"#\" class=\"button button_contained\">Text</a>\n<button class=\"button button_outlined\">Text</button>\n<button class=\"button button_contained\" disabled>Text</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Optimizer for TrainableModel\nDESCRIPTION: This snippet sets up the Adam optimizer for the model parameters, using the learning rate specified during initialization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/cars-recognition.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n    def configure_optimizers(self):\n        optimizer = torch.optim.Adam(self.model.parameters(), self._lr)\n        return optimizer\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Points Using Qdrant Rust Client\nDESCRIPTION: Creates a Qdrant client connection to a local server and performs a vector similarity search query. The query searches for the 3 most similar vectors to the provided embedding, retrieving both payload data and vector values in the results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-payload-and-vectors/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::QueryPointsBuilder;\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .with_payload(true)\n            .with_vectors(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Front Matter for Qdrant Enterprise Solutions Page\nDESCRIPTION: YAML configuration for a Hugo website page about Qdrant's Enterprise Search Solutions. It defines the page title, meta description, URL slug, and build parameters including cascading settings for child pages.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/enterprise-solutions/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Enterprise Search Solutions for Your Business | Qdrant\ndescription: Unlock the power of custom vector search with Qdrant's Enterprise Search Solutions. Tailored to your business needs to grow AI capabilities and data management.\nurl: enterprise-solutions\nbuild:\n  render: always\ncascade:\n- build:\n    list: local\n    publishResources: false\n    render: never\n---\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant with Multivector Search using C# Client\nDESCRIPTION: Shows how to implement a complex multivector query in Qdrant using the C# client. The example demonstrates a three-stage search pipeline with prefetching and progressive reranking using different vector types, ending with ColBERT multivector ranking.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  prefetch: new List <PrefetchQuery> {\n    new() {\n      Prefetch = {\n          new List <PrefetchQuery> {\n            new() {\n              Query = new float[] { 1, 23, 45, 67 }, // <------------- small byte vector\n                Using = \"mrl_byte\",\n                Limit = 1000\n            },\n          }\n        },\n        Query = new float[] {0.01f, 0.45f, 0.67f}, // <-- dense vector\n        Using = \"full\",\n        Limit = 100\n    }\n  },\n  query: new float[][] {\n    [0.1f, 0.2f], // <─┐\n    [0.2f, 0.1f], // < ├─ multi-vector\n    [0.8f, 0.9f]  // < ┘\n  },\n  usingVector: \"colbert\",\n  limit: 10\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License Text for Write-Good Project\nDESCRIPTION: This code snippet contains the full text of the MIT License applied to the Write-Good project. It outlines the permissions granted to users of the software, including rights to use, modify, and distribute, as well as the conditions and disclaimers associated with its use.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/styles/write-good/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) 2014 Brian Ford\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Handling Operation Response in TypeScript\nDESCRIPTION: This snippet shows the expected JavaScript object output from the operation response after an upsert operation in TypeScript.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n{ operation_id: 0, status: 'completed' }\n```\n\n----------------------------------------\n\nTITLE: Defining Vivendi Partner Logo as SVG\nDESCRIPTION: SVG markup for the Vivendi partner logo, which includes the stylized 'VIVENDI' lettering. The SVG uses a viewBox of 120x64 and includes paths with the #B4BACC fill color and various path rules.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_7\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_1622_6734)\"><path d=\"M15.5 29.5L10.32 40.4L4.95999 29.5H0L7.61998 44.3H13L20.42 29.5H15.5Z\" fill=\"#B4BACC\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M22.3002 23.4H26.7002V27.44H22.3002V23.4ZM22.2803 29.5H26.6803V44.3H22.2803V29.5Z\" fill=\"#B4BACC\"/><path d=\"M44.1806 29.5L39.0006 40.4L33.6407 29.5H28.6807L36.3006 44.3H41.6806L49.1006 29.5H44.1806Z\" fill=\"#B4BACC\"/><path d=\"M56.9604 40.44C56.5004 40.36 55.6004 40.14 54.8404 39.54L69.1203 36.72C69.1003 36.06 68.9803 35.4 68.8003 34.76C68.5403 33.78 66.8203 28.86 58.9004 29.06C55.9004 29.14 53.4404 30.12 51.8004 31.64C50.2804 33.06 49.3804 34.9 49.3804 37.04C49.3804 39.14 50.4204 41.08 52.3004 42.46C54.0804 43.76 56.4404 44.3 59.6403 44.3H67.8803V40.66H59.9603C58.7604 40.66 57.7404 40.56 56.9604 40.44ZM59.3803 32.46C61.9803 32.46 63.4403 33.42 63.9803 34.5L53.5804 36.48C53.6604 35.68 54.0204 34.88 54.5604 34.32C55.6404 33.18 57.2404 32.46 59.3803 32.46Z\" fill=\"#B4BACC\"/><path d=\"M81.0801 32.74C83.8601 32.74 85.8201 33.96 85.7601 36.5V44.28H90.1601V36.28C90.2001 34.48 89.6601 33.08 88.4801 31.78C86.9001 30.02 84.4001 29.04 81.0801 29.04C77.7401 29.04 75.2601 30.02 73.6801 31.78C72.5001 33.08 71.9601 34.48 72.0001 36.28V44.28H76.4001V36.5C76.3401 33.96 78.3001 32.74 81.0801 32.74Z\" fill=\"#B4BACC\"/><path d=\"M107.78 19.5V29.2L103 29.18C101.44 29.18 97.5604 29.44 95.0204 31.88C93.6404 33.2 92.9404 34.94 92.9404 37.06C92.9404 38.88 93.6004 40.54 94.8604 41.86C96.6604 43.74 99.2604 44.74 102.36 44.74C105.6 44.74 108.24 43.9 109.96 42.22C111.5 40.72 112.2 38.64 112.2 36.2V19.52H107.78V19.5ZM107.78 36.26C107.74 38.56 106.68 40.88 102.44 40.88C100.64 40.88 99.1804 40.44 98.2004 39.32C97.6604 38.7 97.3804 38.02 97.3604 37.28C97.3204 36.04 97.8204 35 98.6404 34.28C99.6804 33.36 101.26 32.86 103 32.86H107.78V36.26Z\" fill=\"#B4BACC\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M115.601 23.4H120.001V27.44H115.601V23.4ZM115.601 29.5H120.001V44.3H115.601V29.5Z\" fill=\"#B4BACC\"/></g><defs><clipPath id=\"clip0_1622_6734\"><rect width=\"120\" height=\"64\" fill=\"white\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Logo Path Definition\nDESCRIPTION: SVG vector path definitions defining logo shapes and styling using fill rules and clip paths\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_14\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M119.901 15H0V49.2857H119.901V15ZM113.889 39.7119C114.086 39.7119 114.284 39.6759 114.518 39.6099L114.542 41.8693C113.745 42.3073 112.78 42.5709 111.85 42.5709C109.854 42.5709 108.757 41.4077 108.559 39.5794C107.695 41.1081 106.167 42.5709 103.739 42.5709C101.575 42.5709 99.1168 41.4017 99.1168 38.2783C99.1168 34.5853 102.678 33.7221 106.101 33.7221C106.934 33.7221 107.798 33.7521 108.565 33.8537V33.3566C108.565 31.8279 108.529 29.9991 106.101 29.9991C105.202 29.9991 104.506 30.0651 103.805 30.4307L103.319 32.1214L99.8963 31.7559L100.483 28.3024C103.116 27.2417 104.44 26.9417 106.904 26.9417C110.13 26.9417 112.858 28.6084 112.858 32.0314V38.5487C112.858 39.4119 113.187 39.7119 113.889 39.7119Z\" fill=\"#B4BACC\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Social Media Icon SVG for X (Twitter) in HTML\nDESCRIPTION: SVG code for the X (formerly Twitter) social media icon used in the Qdrant landing page. The icon is styled with the F0F3FA color fill.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/footer.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.8423 15.1515L4.40655 22.5H0.841797L9.1773 12.978L10.8423 15.1515Z\" fill=\"#F0F3FA\"/><path d=\"M12.7881 8.241L18.6808 1.5H22.2433L14.4381 10.4265L12.7881 8.241Z\" fill=\"#F0F3FA\"/><path d=\"M23.6158 22.5H16.4465L0.383789 1.5H7.73454L23.6158 22.5ZM17.4298 20.3678H19.4038L6.66204 3.5205H4.54404L17.4298 20.3678Z\" fill=\"#F0F3FA\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Community Engagement Cards in YAML\nDESCRIPTION: This YAML snippet defines a collection of cards illustrating engagement statistics from various platforms. Each card includes an ID, icon details, title, stats to be displayed, description, and a link for users to engage with the community.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/stars/stars-marketplaces.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ntitle: Join our growing community\ncards:\n- id: 0\n  icon:\n    src: /img/stars-marketplaces/github.svg\n    alt: Github icon\n  title: Stars\n  statsToUse: githubStars\n  description: Join our GitHub community and contribute to the future of vector databases.\n  link:\n    text: Start Contributing\n    url: https://github.com/qdrant/qdrant\n- id: 1\n  icon:\n    src: /img/stars-marketplaces/discord.svg\n    alt: Discord icon\n  title: Members\n  statsToUse: discordMembers\n  description: Discover and chat on a vibrant community of developers working on the future of AI.\n  link:\n    text: Join our Conversations\n    url: https://qdrant.to/discord\n- id: 2\n  icon:\n    src: /img/stars-marketplaces/twitter.svg\n    alt: Twitter icon\n  title: Followers\n  statsToUse: twitterFollowers\n  description: Join us on X, participate and find out about our updates and releases before anyone else.\n  link:\n    text: Spread the Word\n    url: https://qdrant.to/twitter\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML configuration block defining metadata for the advanced tutorials documentation page, including title, weight, visibility settings, aliases and partition information.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Advanced Retrieval\nweight: 17\n# If the index.md file is empty, the link to the section will be hidden from the sidebar\nis_empty: false\naliases:\n  - how-to\n  - tutorials\npartition: qdrant\n---\n```\n\n----------------------------------------\n\nTITLE: Spotify Podcast Embed HTML\nDESCRIPTION: HTML iframe code for embedding a Spotify podcast episode about LLM evaluation\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/vector-search-for-content-based-video-recommendation-gladys-and-sam-vector-space-talk-012.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://podcasters.spotify.com/pod/show/qdrant-vector-space-talk/embed/episodes/The-challenges-with-using-LLM-as-a-Judge---Sourabh-Agrawal--Vector-Space-Talks-013-e2fj7g8/a-aaurgd0\" height=\"102px\" width=\"400px\" frameborder=\"0\" scrolling=\"no\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Build Settings for Brand Resources\nDESCRIPTION: YAML configuration that specifies build parameters for a brand resources page. Sets global render settings to 'always' and creates cascade rules to handle local list building and resource publishing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/brand-resources/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: brand-resources\ndescription: brand-resources\nbuild:\n  render: always\ncascade:\n- build:\n    list: local\n    publishResources: false\n    render: never\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Deferred HNSW Indexing in Python\nDESCRIPTION: Python code to create a Qdrant collection with HNSW indexing disabled (m=0) for faster bulk uploads. This approach allows vectors to be stored without indexing, which can be enabled after upload completion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n    hnsw_config=models.HnswConfigDiff(\n        m=0,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Replicated Collection\nDESCRIPTION: Creates a Qdrant collection with 6 logical shards and replication factor of 2, resulting in 12 physical shards. Configuration includes vector size of 300 and Cosine distance metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n        \"size\": 300,\n        \"distance\": \"Cosine\"\n    },\n    \"shard_number\": 6,\n    \"replication_factor\": 2\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),\n    shard_number=6,\n    replication_factor=2,\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 300,\n    distance: \"Cosine\",\n  },\n  shard_number: 6,\n  replication_factor: 2,\n});\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{CreateCollectionBuilder, Distance, VectorParamsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(300, Distance::Cosine))\n            .shard_number(6)\n            .replication_factor(2),\n    )\n    .await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(300)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setShardNumber(6)\n            .setReplicationFactor(2)\n            .build())\n    .get();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\tshardNumber: 6,\n\treplicationFactor: 2\n);\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     300,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tShardNumber:       qdrant.PtrOf(uint32(6)),\n\tReplicationFactor: qdrant.PtrOf(uint32(2)),\n})\n```\n\n----------------------------------------\n\nTITLE: Geo Bounding Box Filtering in Qdrant\nDESCRIPTION: Demonstrates how to use geo bounding box filters to match locations within a rectangular area defined by top-left and bottom-right coordinates.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/filtering.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"must\": [\n    {\n      \"key\": \"location\",\n      \"geo_bounding_box\": {\n        \"top_left\": {\n          \"lon\": -74.1,\n          \"lat\": 40.73\n        },\n        \"bottom_right\": {\n          \"lon\": -73.9,\n          \"lat\": 40.71\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Structure for Cluster Methods Description\nDESCRIPTION: Markdown table showing different methods for defining cluster representatives, including Medoids and Perfect Representative approaches with their implementation steps.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-n8n-2.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Method               | Description                                                                 |\n|----------------------|-----------------------------------------------------------------------------|\n| **Medoids**          | A point within the cluster that has the smallest total distance to all other cluster points. This approach needs labeled data for each cluster. |\n| **Perfect Representative** | A representative defined by a textual description of the ideal cluster member—the multimodality of Voyage AI embeddings allows for this trick. For example, for cherries: *\"Small, glossy red fruits on a medium-sized tree with slender branches and serrated leaves.\"* The closest image to this description in the vector space is selected as the representative. This method requires experimentation to align descriptions with real data. |\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Upserting Vector Data in C#\nDESCRIPTION: This code initializes a Qdrant client connected to a local instance and upserts a point with multiple vectors into a specified collection. It demonstrates client creation, point structure, and the upsert operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-multivector/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpsertAsync(\n  collectionName: \"{collection_name}\",\n  points: new List <PointStruct> {\n    new() {\n      Id = 1,\n        Vectors = new float[][] {\n          [-0.013f, 0.020f, -0.007f, -0.111f],\n          [-0.030f, -0.05f, 0.001f, 0.072f],\n          [-0.041f, 0.014f, -0.032f, -0.062f ],\n        },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Quantized Vector Collection in Qdrant using Rust\nDESCRIPTION: Creates a new Qdrant collection with 768-dimensional vectors using cosine distance and Int8 scalar quantization. The configuration includes setting quantile to 0.99 and enabling always-in-RAM storage for the quantized vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-scalar-quantization-params/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, QuantizationType, ScalarQuantizationBuilder,\n    VectorParamsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine))\n            .quantization_config(\n                ScalarQuantizationBuilder::default()\n                    .r#type(QuantizationType::Int8.into())\n                    .quantile(0.99)\n                    .always_ram(true),\n            ),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Importing Python Modules\nDESCRIPTION: Imports necessary Python libraries for neural search implementation, including SentenceTransformer, pandas, and numpy.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom sentence_transformers import SentenceTransformer\nimport numpy as np\nimport json\nimport pandas as pd\nfrom tqdm.notebook import tqdm\n```\n\n----------------------------------------\n\nTITLE: Running Cheshire Cat Docker Container\nDESCRIPTION: This command runs the Cheshire Cat Docker container, mapping port 1865 to the container's port 80 and using the latest image from the GitHub Container Registry.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/cheshire-cat.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it -p 1865:80 ghcr.io/cheshire-cat-ai/core:latest\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown Syntax for Hugo Blog Posts\nDESCRIPTION: This snippet showcases various Markdown formatting options available for writing Hugo blog posts. It includes examples of headers, asides for notes and warnings, blockquotes, tables, and both unordered and ordered lists with nesting.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/themes/qdrant/archetypes/blog-post.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nHere is your blog post content. You can use markdown syntax here.\n\n# Header 1\n## Header 2\n### Header 3\n#### Header 4\n##### Header 5\n###### Header 6\n\n<aside role=\"alert\">\n  You can add a note to your page using this aside block.\n</aside>\n\n<aside role=\"status\">\n  This is a warning message.\n</aside>\n\n> This is a blockquote following a header.\n\nTable:\n\n| Header 1 | Header 2 | Header 3 | Header 4 |\n| -------- | -------- | -------- | -------- |\n| Cell 1   | Cell 2   | Cell 3   | Cell 4   |\n| Cell 3   | Cell 4   | Cell 5   | Cell 6   |\n\n- List item 1\n    - Nested list item 1\n    - Nested list item 2\n- List item 2\n- List item 3\n\n1. Numbered list item 1\n    1. Nested numbered list item 1\n    2. Nested numbered list item 2\n2. Numbered list item 2\n3. Numbered list item 3\n```\n\n----------------------------------------\n\nTITLE: Loading SentenceTransformer Model in Python\nDESCRIPTION: This code loads the 'all-MiniLM-L6-v2' model using the SentenceTransformer library. This model is used for generating both dense vectors and output token embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/late-interaction-models.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sentence_transformers import SentenceTransformer\n\nmodel = SentenceTransformer(\"all-MiniLM-L6-v2\")\n```\n\n----------------------------------------\n\nTITLE: Importing Late Interaction Model\nDESCRIPTION: Imports the LateInteractionTextEmbedding class from FastEmbed for text embedding.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-colbert.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastembed import LateInteractionTextEmbedding\n```\n\n----------------------------------------\n\nTITLE: POST Request for Vector Search in Qdrant\nDESCRIPTION: Example of a POST request to Qdrant's search endpoint, providing an embedding vector to find semantically similar content with a specified result limit.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/search-as-you-type.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nPOST collections/site/points/search\n{\n  \"vector\": [-0.06716014,-0.056464013, ...(382 values omitted)],\n  \"limit\": 5,\n  \"with_payload\": true,\n}\n```\n\n----------------------------------------\n\nTITLE: Startup Program Form Configuration (YAML)\nDESCRIPTION: This YAML snippet configures the startup program application form.  It defines labels for form fields such as first name, last name, email, company details, and funding information. It also configures HubSpot integration including the region, portal ID, and form ID.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/qdrant-for-startups/qdrant-for-startups-form.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\ntitle: Apply Now\nform:\n  id: startup-program-form\n  title: Join our Startup Program\n  firstNameLabel: First Name\n  lastNameLabel: Last Name\n  businessEmailLabel: Business Email\n  companyNameLabel: Company Name\n  companyUrlLabel: Company URL\n  cloudProviderLabel: Cloud Provider\n  productDescriptionLabel: Product Description\n  latestFundingRoundLabel: Latest Funding Round\n  numberOfEmployeesLabel: Number of Employees\n  info: By submitting, I confirm that I have read and understood the\n  link: \n    url: /\n    text: Terms and Conditions.\n  button: Send Message\n  hubspotFormOptions: '{\n    \"region\": \"eu1\",\n    \"portalId\": \"139603372\",\n    \"formId\": \"59eb058b-0145-4ab0-b49a-c37708d20a60\",\n    \"submitButtonClass\": \"button button_contained\",\n  }'\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Kafka Connector\nDESCRIPTION: Command to install the Qdrant Kafka connector from Confluent Hub, ensuring that required dependencies are handled for a smooth integration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/data-streaming-kafka-qdrant.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nconfluent-hub install qdrant/qdrant-kafka:1.1.0\n```\n\n----------------------------------------\n\nTITLE: Initializing VectorStoreIndex\nDESCRIPTION: Creating a VectorStoreIndex using the previously configured vector store and service context.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/llama-index-multitenancy.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.core import VectorStoreIndex\n\nindex = VectorStoreIndex.from_vector_store(\n    vector_store=vector_store, service_context=service_context\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Settings in YAML\nDESCRIPTION: YAML configuration file settings for connecting Superduper to Qdrant vector search layer, including URL and API key parameters\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/superduper.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncluster:\n  vector_search:\n    type: qdrant\n\nvector_search_kwargs:\n  url: \"http://localhost:6333\"\n  api_key: \"<YOUR_API_KEY>\n  # Supports all parameters of qdrant_client.QdrantClient\"\n```\n\n----------------------------------------\n\nTITLE: Using Card Shortcode Variant 2 in Markdown\nDESCRIPTION: This example demonstrates the usage of card shortcode (variant 2) in a markdown file. It creates a card with a title, link, image, and content.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n{{< card\ntitle=\"Qdrant Quickstart\"  \nlink=\"/documentation\"  \nimage=\"/img/brand-resources-hero.svg\"  \ncol=\"6\" >}}\n  This guide will help you get started with Qdrant locally.  \n{{< /card >}}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Base Prompt for Auto Prompt Optimization\nDESCRIPTION: Implementation of base prompt setup for Auto Prompt Optimization in a GitLab legal policy Q&A bot. Defines system and user prompts with variables for question and context.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-relari.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom relari.core.types import Prompt, UserPrompt\n\nbase_prompt = Prompt(\n    system=\"You are a GitLab legal policy Q&A bot. Answer the following question given the context.\",\n    user=UserPrompt(\n        prompt=\"Question: $question\\n\\nContext:\\n$ground_truth_context\",\n        description=\"Question and context to answer the question.\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Installing MixedBread Package\nDESCRIPTION: Command to install the MixedBread package using pip, which is required for generating embeddings to use with Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/mixedbread.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install mixedbread\n```\n\n----------------------------------------\n\nTITLE: Collection Configuration Example - JSON\nDESCRIPTION: Example JSON configuration showing shard number, sharding method and replication factor settings for custom sharding.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"shard_number\": 1,\n    \"sharding_method\": \"custom\",\n    \"replication_factor\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: POST Request for Scrolling Collection Points in Qdrant\nDESCRIPTION: HTTP POST request to scroll through points in a Qdrant collection. Uses the collection_name path parameter and accepts limit and order_by parameters in the request body. The order_by parameter allows sorting by timestamp field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-order-by-simple/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/scroll\n{\n    \"limit\": 15,\n    \"order_by\": \"timestamp\", // <-- this!\n}\n```\n\n----------------------------------------\n\nTITLE: Landing Page YAML Configuration\nDESCRIPTION: YAML configuration for a case study landing page, defining logo assets, title, description, link details, and image paths. The configuration includes sitemapExclude flag and structures content for a customer success story.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/case-study-telekom.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncaseStudy:\n  logo:\n    src: /img/customers-case-studies/customer-logo0.svg\n    alt: Logo Deutsche Telekom\n  title: How Deutsche Telekom Built a Multi-Agent Enterprise Platform Leveraging Qdrant\n  description: Deutsche Telekom leveraged Qdrant to build an AI Agent Platform powering their multi-agent PaaS (LMOS), enabling scalable AI deployment across 10 European subsidiaries, supporting over 2 million conversations, and reducing agent development time from 15 days to just 2.\n  link:\n    text: Read Case Study\n    url: /blog/case-study-deutsche-telekom/\n  image:\n    src: /img/customers-case-studies/case-study0.png\n    alt: Preview\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Go\nDESCRIPTION: This snippet initializes a new Qdrant client with the specified host and port. It utilizes the `qdrant.NewClient` function from the `github.com/qdrant/go-client/qdrant` package, handling potential errors during the client creation process. The client configuration includes the host and port where the Qdrant service is running.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/int-one-point-simple/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Points in Qdrant Collection via HTTP\nDESCRIPTION: This HTTP request demonstrates how to delete points from a Qdrant collection based on a filter. The filter specifies that only points with the \"color\" field matching \"red\" should be deleted. The request is sent to the `/collections/{collection_name}/points/delete` endpoint.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-points/by-filter/http.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /collections/{collection_name}/points/delete\n{\n    \"filter\": {\n        \"must\": [\n            {\n                \"key\": \"color\",\n                \"match\": {\n                    \"value\": \"red\"\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Evaluation Recipe with Mistral-7B\nDESCRIPTION: Sets up an evaluation recipe using Mistral-7B-Instruct model with a question answering prompt template that includes context from retrieved documents.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Create a recipe for the generator model and prompt template\nrecipe_mistral = quotient.create_recipe(\n    model_id=10,\n    prompt_template_id=1,\n    name='mistral-7b-instruct-qa-with-rag',\n    description='Mistral-7b-instruct using a prompt template that includes context.'\n)\nrecipe_mistral\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Post Front Matter in YAML\nDESCRIPTION: Sets up the metadata and configuration options for a blog post using YAML front matter. Includes fields for title, draft status, slug, descriptions, images, date, author, tags, and weight.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/archetypes/blog-post.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ndraft: false\nslug: {{ .Name }} # Change this slug to your page slug if needed\nshort_description:  This is a blog post # Change this\ndescription: This is a blog post # Change this\npreview_image: /blog/Article-Image.png # Change this\n\n# social_preview_image: /blog/Article-Image.png # Optional image used for link previews\n# title_preview_image: /blog/Article-Image.png # Optional image used for blog post title\n# small_preview_image: /blog/Article-Image.png # Optional image used for small preview in the list of blog posts\n\ndate: {{ .Date }}\nauthor: John Doe # Change this\nfeatured: false # if true, this post will be featured on the blog page\ntags: # Change this, related by tags posts will be shown on the blog page\n  - news\n  - blog\nweight: 0 # Change this weight to change order of posts\n# For more guidance, see https://github.com/qdrant/landing_page?tab=readme-ov-file#blog\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling Strict Mode in TypeScript\nDESCRIPTION: TypeScript code for updating an existing Qdrant collection to disable strict mode using the Qdrant JavaScript client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.updateCollection(\"{collection_name}\", {\n  strict_mode_config: {\n    enabled: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client - Python\nDESCRIPTION: Create a Qdrant client instance in memory mode for local experimentation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-colbert.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nqdrant_client = QdrantClient(\":memory:\") # Qdrant is running from RAM.\n```\n\n----------------------------------------\n\nTITLE: Filtering Items by Comment Count\nDESCRIPTION: Defines a filter condition to select items with more than two comments in a search query or database operation. This allows for filtering content based on engagement or interaction metrics.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/values-count/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filter\": {\n    \"must\": [\n      {\n        \"field\": \"comments\",\n        \"range\": {\n          \"gt\": 2\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Social Media Icon SVG for Discord in HTML\nDESCRIPTION: SVG code for the Discord social media icon used in the Qdrant landing page. The icon is styled with the F0F3FA color fill.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/footer.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M5 1C2.79086 1 1 2.79086 1 5V19C1 21.2091 2.79086 23 5 23H19C21.2091 23 23 21.2091 23 19V5C23 2.79086 21.2091 1 19 1H5ZM16.3683 18.5964C16.3683 18.5964 15.8027 17.9208 15.3314 17.3238C16.4701 17.0557 17.4774 16.3935 18.1749 15.4543C17.6098 15.8317 17.0037 16.1438 16.3683 16.3846C15.6374 16.6966 14.873 16.9233 14.0903 17.0602C12.7448 17.3079 11.3649 17.3026 10.0213 17.0445C9.23256 16.8901 8.45954 16.664 7.71193 16.3689C7.08195 16.1284 6.48116 15.8174 5.92097 15.442C6.59328 16.3616 7.56575 17.0173 8.67025 17.2958C8.19895 17.8928 7.61767 18.5998 7.61767 18.5998C4.14571 18.4898 2.82605 16.2091 2.82605 16.2091C2.87704 13.0242 3.65058 9.89242 5.08832 7.05004C6.35356 6.05636 7.89607 5.47998 9.5029 5.40046L9.66 5.58899C8.14826 5.96312 6.73755 6.66579 5.52821 7.64703C5.52821 7.64703 5.87383 7.4585 6.45511 7.19143C7.58438 6.67595 8.78793 6.34193 10.0213 6.20168C10.1093 6.18348 10.1986 6.17297 10.2884 6.17026C11.3412 6.0331 12.4066 6.02255 13.4619 6.13884C15.1214 6.32817 16.7278 6.84028 18.1907 7.64634C17.0426 6.71186 15.7093 6.0318 14.2788 5.65114L14.4988 5.39978C16.1056 5.4793 17.6481 6.05568 18.9133 7.04935C20.3511 9.89174 21.1246 13.0235 21.1756 16.2084C21.1756 16.2084 19.8402 18.4864 16.3683 18.5964ZM9.06284 11.2616C8.62563 11.2983 8.21817 11.498 7.9212 11.821C7.62423 12.1439 7.45941 12.5667 7.45941 13.0054C7.45941 13.4442 7.62423 13.8669 7.9212 14.1899C8.21817 14.5129 8.62563 14.7125 9.06284 14.7493C9.50005 14.7125 9.90751 14.5129 10.2045 14.1899C10.5015 13.8669 10.6663 13.4442 10.6663 13.0054C10.6663 12.5667 10.5015 12.1439 10.2045 11.821C9.90751 11.498 9.50005 11.2983 9.06284 11.2616ZM14.8005 11.2616C14.4493 11.2319 14.0974 11.3089 13.7907 11.4825C13.4841 11.6561 13.237 11.9183 13.0818 12.2347C12.9266 12.5511 12.8706 12.907 12.921 13.2557C12.9714 13.6045 13.1259 13.93 13.3644 14.1894C13.6028 14.4489 13.9141 14.6304 14.2573 14.71C14.6006 14.7897 14.96 14.7639 15.2883 14.6359C15.6167 14.508 15.8987 14.2839 16.0976 13.993C16.2965 13.702 16.4029 13.3578 16.4029 13.0054C16.4124 12.7854 16.3783 12.5657 16.3026 12.3588C16.2269 12.152 16.1112 11.9622 15.962 11.8002C15.8128 11.6381 15.6331 11.5072 15.4332 11.4148C15.2333 11.3223 15.0171 11.2703 14.7971 11.2616H14.8005Z\" fill=\"#F0F3FA\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Re-enabling HNSW Indexing After Upload in Java\nDESCRIPTION: Java code to update a Qdrant collection by enabling HNSW indexing after bulk upload completion. Sets the m parameter to 16 to activate the construction of the HNSW graph for efficient vector search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.grpc.Collections.UpdateCollection;\nimport io.qdrant.client.grpc.Collections.HnswConfigDiff;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.updateCollectionAsync(\n    UpdateCollection.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setHnswConfig(HnswConfigDiff.newBuilder().setM(16).build())\n        .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Qdrant Vector Database with dsRAG\nDESCRIPTION: Example showing how to initialize a Qdrant vector database connection, add document vectors with metadata, and perform filtered vector search using dsRAG. The code demonstrates working with document chunks, vector embeddings, and metadata filtering.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/dsrag.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dsrag.database.vector import QdrantVectorDB\nimport numpy as np\nfrom qdrant_clien import models\n\ndb = QdrantVectorDB(kb_id=self.kb_id, url=\"http://localhost:6334\", prefer_grpc=True)\nvectors = [np.array([1, 0]), np.array([0, 1])]\n\n# You can use any document loaders available with dsRAG\n# We'll use literals for demonstration\ndocuments = [\n    {\n        \"doc_id\": \"1\",\n        \"chunk_index\": 0,\n        \"chunk_header\": \"Header1\",\n        \"chunk_text\": \"Text1\",\n    },\n    {\n        \"doc_id\": \"2\",\n        \"chunk_index\": 1,\n        \"chunk_header\": \"Header2\",\n        \"chunk_text\": \"Text2\",\n    },\n]\n\ndb.add_vectors(vectors, documents)\n\nmetadata_filter = models.Filter(\n    must=[models.FieldCondition(key=\"doc_id\", match=models.MatchValue(value=\"1\"))]\n)\n\ndb.search(query_vector, top_k=4, metadata_filter=metadata_filter)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Database in Go\nDESCRIPTION: Demonstrates how to create a Qdrant client connection and execute a count query with a filter condition. The code initializes a client with localhost configuration and counts points in a collection matching a specific color filter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/count-points/with-filter-exact/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Count(context.Background(), &qdrant.CountPoints{\n\tCollectionName: \"midlib\",\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"color\", \"red\"),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Landing Page Get Started Section in Markdown Frontmatter\nDESCRIPTION: YAML frontmatter defining the structure and content for a 'Get Started' section on the Qdrant landing page. Includes title, subtitle, button configuration with text and URL, and a sitemapExclude flag.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/hybrid-cloud/hybrid-cloud-get-started.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Get started today\nsubtitle: Turn embeddings or neural network encoders into full-fledged applications for matching, searching, recommending, and more.\nbutton:\n  text: Get Started\n  url: https://cloud.qdrant.io/signup\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Field Index in Qdrant\nDESCRIPTION: This snippet initializes a Qdrant client and uses it to create a field index for a specified collection. The created index uses text-specific parameters, such as tokenization settings and token length constraints. It assumes that the Qdrant server is running locally and the Rust environment is correctly set up with necessary dependencies.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/simple-full-text/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse qdrant_client::qdrant::{\n    payload_index_params::IndexParams, CreateFieldIndexCollectionBuilder, FieldType,\n    PayloadIndexParams, TextIndexParams, TokenizerType,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_field_index(\n        CreateFieldIndexCollectionBuilder::new(\n            \"{collection_name}\",\n            \"name_of_the_field_to_index\",\n            FieldType::Text,\n        )\n        .field_index_params(PayloadIndexParams {\n            index_params: Some(IndexParams::TextIndexParams(TextIndexParams {\n                tokenizer: TokenizerType::Word as i32,\n                min_token_len: Some(2),\n                max_token_len: Some(10),\n                lowercase: Some(true),\n            })),\n        }),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Configuring CPU Resource Management in Qdrant 1.8.0\nDESCRIPTION: This YAML configuration snippet demonstrates how to set the optimizer_cpu_budget parameter in config.yaml to control the number of CPUs allocated for indexing operations in Qdrant. When set to 0 (default), Qdrant keeps some CPUs unallocated; positive values specify exact CPU counts, and negative values subtract from available CPUs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qdrant-1.8.x.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# CPU budget, how many CPUs (threads) to allocate for an optimization job.\noptimizer_cpu_budget: 0\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Processing Components\nDESCRIPTION: Sets up document splitting and embedding components using DocumentSplitter and FastembedDocumentEmbedder\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom haystack.components.preprocessors import DocumentSplitter\nfrom haystack_integrations.components.embedders.fastembed import FastembedDocumentEmbedder\n\nsplitter = DocumentSplitter(split_by=\"sentence\", split_length=5, split_overlap=2)\nembedder = FastembedDocumentEmbedder(model=\"BAAI/bge-base-en-v1.5\")\nembedder.warm_up()\n\nindexing_pipeline.add_component(\"splitter\", splitter)\nindexing_pipeline.add_component(\"embedder\", embedder)\n\nindexing_pipeline.connect(\"converter.documents\", \"splitter.documents\")\nindexing_pipeline.connect(\"splitter.documents\", \"embedder.documents\")\n```\n\n----------------------------------------\n\nTITLE: Removing a Peer from a Qdrant Cluster\nDESCRIPTION: Shows how to remove a peer from a Qdrant cluster using the HTTP API. This operation is typically performed after moving all shards away from a node when downscaling a cluster.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nDELETE /cluster/peer/{peer_id}\n```\n\n----------------------------------------\n\nTITLE: Datetime Range Condition in C# with Qdrant\nDESCRIPTION: This code snippet demonstrates how to create a datetime range condition using the Qdrant C# client. It uses the `Conditions.DatetimeRange` method to define a filter based on a date field, specifying a greater than (gt) and less than or equal to (lte) range. The DateTime objects are created with DateTimeKind.Utc to ensure consistency.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/datetime-range/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Qdrant.Client.Grpc;\n\nConditions.DatetimeRange(\n    field: \"date\",\n    gt: new DateTime(2023, 2, 8, 10, 49, 0, DateTimeKind.Utc),\n    lte: new DateTime(2024, 1, 31, 10, 14, 31, DateTimeKind.Utc)\n);\n```\n\n----------------------------------------\n\nTITLE: Random Sampling in Qdrant Query API\nDESCRIPTION: Examples of implementing random sampling in queries across different programming languages to retrieve a random subset of data points.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.11.x.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\n# Random sampling (as of 1.11.0)\nsampled = client.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.SampleQuery(sample=models.Sample.Random)\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nlet sampled = client.query(\"{collection_name}\", {\n  query: { sample: \"random\" },\n});\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{Query, QueryPointsBuilder, Sample};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet sampled = client\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\").query(Query::new_sample(Sample::Random)),\n    )\n    .await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.QueryFactory.sample;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Sample;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .queryAsync(\n        QueryPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setQuery(sample(Sample.Random))\n            .build())\n    .get();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: Sample.Random\n);\n```\n\n----------------------------------------\n\nTITLE: Preparing Iterator for Data and Vectors\nDESCRIPTION: Prepares iterators for startup data and vectors to streamline data uploading to Qdrant. Efficient memory usage through iterators is highlighted.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfd = open(\"./startups_demo.json\")\n\n# payload is now an iterator over startup data\npayload = map(json.loads, fd)\n\n# Load all vectors into memory, numpy array works as iterable for itself.\n# Other option would be to use Mmap, if you don't want to load all data into RAM\nvectors = np.load(\"./startup_vectors.npy\")\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installs the necessary Python packages for neural search implementation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/neural-search-tutorial.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install sentence-transformers numpy\n```\n\n----------------------------------------\n\nTITLE: Define JSON Structure for Empty Check\nDESCRIPTION: This JSON object is used to specify the structure and key identification for checking empty data related to 'reports'. No additional dependencies are required. The key 'is_empty' is used to map the 'key' to check, suggesting its use in logic to determine if 'reports' are present or empty. The JSON input expects a 'key' with its corresponding value.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/is-empty/json.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"is_empty\\\": {\\n    \\\"key\\\": \\\"reports\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Documents\nDESCRIPTION: Creates a list of document strings for embedding generation\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-splade.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndocuments: List[str] = [\n    \"Chandrayaan-3 is India's third lunar mission\",\n    \"It aimed to land a rover on the Moon's surface - joining the US, China and Russia\",\n    \"The mission is a follow-up to Chandrayaan-2, which had partial success\",\n    \"Chandrayaan-3 will be launched by the Indian Space Research Organisation (ISRO)\",\n    \"The estimated cost of the mission is around $35 million\",\n    \"It will carry instruments to study the lunar surface and atmosphere\",\n    \"Chandrayaan-3 landed on the Moon's surface on 23rd August 2023\",\n    \"It consists of a lander named Vikram and a rover named Pragyan similar to Chandrayaan-2. Its propulsion module would act like an orbiter.\",\n    \"The propulsion module carries the lander and rover configuration until the spacecraft is in a 100-kilometre (62 mi) lunar orbit\",\n    \"The mission used GSLV Mk III rocket for its launch\",\n    \"Chandrayaan-3 was launched from the Satish Dhawan Space Centre in Sriharikota\",\n    \"Chandrayaan-3 was launched earlier in the year 2023\",\n]\n```\n\n----------------------------------------\n\nTITLE: Executing Asynchronous Query with QdrantClient in Java\nDESCRIPTION: This snippet initializes a QdrantClient and queries a specific collection asynchronously using given query and search parameters. It allows for flexible searching within the collection by defining the nearest vectors and search parameters. Dependencies include the Qdrant client library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-disabled-rescoring/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QuantizationSearchParams;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.SearchParams;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setParams(\n                        SearchParams.newBuilder()\n                                .setQuantization(\n                                        QuantizationSearchParams.newBuilder().setRescore(false).build())\n                                .build())\n                .setLimit(3)\n                .build())\n        .get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Scalar Quantization with In-RAM Storage in Qdrant\nDESCRIPTION: This snippet shows how to configure a collection with scalar quantization where quantized vectors are kept in RAM while original vectors use mmap storage. This provides a balance between memory usage and search speed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/quantization.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vectors\": {\n    \"size\": 768,\n    \"distance\": \"Cosine\",\n    \"storage_type\": \"Mmap\"\n  },\n  \"quantization_config\": {\n    \"scalar\": {\n      \"type\": \"scalar\",\n      \"quantile\": 0.99,\n      \"always_ram\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Personal Movie Ratings and Converting to Sparse Vector (Python)\nDESCRIPTION: Python code to define personal movie ratings and convert them into a sparse vector representation for querying Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/recommendation-system-ovhcloud.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmy_ratings = { \n    2571: 1,  # Matrix\n    329: 1,   # Star Trek\n    260: 1,   # Star Wars\n    2288: -1, # The Thing\n    1: 1,     # Toy Story\n    1721: -1, # Titanic\n    296: -1,  # Pulp Fiction\n    356: 1,   # Forrest Gump\n    2116: 1,  # Lord of the Rings\n    1291: -1, # Indiana Jones\n    1036: -1  # Die Hard\n}\n\ninverse_ratings = {k: -v for k, v in my_ratings.items()}\n\ndef to_vector(ratings):\n    vector = models.SparseVector(\n        values=[],\n        indices=[]\n    )\n    for movie_id, rating in ratings.items():\n        vector.values.append(rating)\n        vector.indices.append(movie_id)\n    return vector\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Database in C#\nDESCRIPTION: This C# snippet establishes a connection to a Qdrant database using the Qdrant.Client library and performs an asynchronous query. It requires the Qdrant.Client and Qdrant.Client.Grpc namespaces. The query targets specified vector inputs and uses context pairs to refine search results, with a limit constraint on the number of results returned.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/discovery-basic/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new DiscoverInput {\n        Target = new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n        Context = new ContextInput {\n            Pairs = {\n                new ContextInputPair {\n                    Positive = 100,\n                    Negative = 718\n                },\n                new ContextInputPair {\n                    Positive = 200,\n                    Negative = 300\n                },\n            }   \n        },\n    },\n    limit: 10\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Output in Redpanda Connect YAML\nDESCRIPTION: This YAML configuration snippet shows how to set up the Qdrant output in a Redpanda Connect pipeline. It includes settings for the GRPC host, API token, TLS, collection name, and mappings for vector and payload data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/redpanda.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n  label: \"qdrant-output\"\n  qdrant:\n    max_in_flight: 64\n    batching:\n      count: 8\n    grpc_host: xyz-example.eu-central.aws.cloud.qdrant.io:6334\n    api_token: \"<provide-your-own-key>\"\n    tls:\n      enabled: true\n    #   skip_cert_verify: false\n    #   enable_renegotiation: false\n    #   root_cas: \"\"\n    #   root_cas_file: \"\"\n    #   client_certs: []\n    collection_name: \"<collection_name>\"\n    id: root = uuid_v4()\n    vector_mapping: 'root = {\"some_dense\": this.vector, \"some_sparse\": {\"indices\": [23,325,532],\"values\": [0.352,0.532,0.532]}}'\n    payload_mapping: 'root = {\"field\": this.value, \"field_2\": 987}'\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database in Java\nDESCRIPTION: Creates a Qdrant client connection and performs a vector similarity search with quantization parameters. The query searches for the 3 nearest neighbors to a given vector [0.2, 0.1, 0.9, 0.7] with quantization rescoring disabled.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/disable-quantization-rescoring/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QuantizationSearchParams;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.SearchParams;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setParams(\n                        SearchParams.newBuilder()\n                                .setQuantization(\n                                        QuantizationSearchParams.newBuilder().setRescore(false).build())\n                                .build())\n                .setLimit(3)\n                .build())\n        .get();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Token Analysis\nDESCRIPTION: Imports and initializes tokenizer for analyzing embedding results\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-splade.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom tokenizers import Tokenizer\n\ntokenizer = Tokenizer.from_pretrained(SparseTextEmbedding.list_supported_models()[0][\"sources\"][\"hf\"])\n```\n\n----------------------------------------\n\nTITLE: Disabling Strict Mode in Python\nDESCRIPTION: Python code for updating an existing Qdrant collection to disable strict mode using the Qdrant client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.update_collection(\n    collection_name=\"{collection_name}\",\n    strict_mode_config=models.StrictModeConfig(enabled=False),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Go\nDESCRIPTION: This snippet demonstrates how to initialize a new Qdrant client in Go.  It sets the host and port for the connection. The initialized client is then used in subsequent operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-and-params/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Search Pipeline with Python\nDESCRIPTION: Generates a visual representation of the search pipeline structure.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nsearch_pipeline.draw(\"search_pipeline.png\")\n```\n\n----------------------------------------\n\nTITLE: Performing Facet Query with Qdrant Client in TypeScript\nDESCRIPTION: This code demonstrates how to use the facet method of the Qdrant client to perform a faceted search on a collection. The query retrieves facet counts for the 'size' field with exact matching enabled.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/facet-counts/exact/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.facet(\"{collection_name}\", {\n    key: \"size\",\n    exact: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Retrieving Points in Go\nDESCRIPTION: This snippet initializes a Qdrant client with the given host and port configuration, and retrieves specific points from a collection. It demonstrates the use of the Qdrant Go client library to connect and interact with a Qdrant instance. Key parameters include 'Host' and 'Port' for the client configuration, and 'CollectionName' and 'Ids' for the points retrieval operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/retrieve-points/simple/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Get(context.Background(), &qdrant.GetPoints{\n\tCollectionName: \"{collection_name}\",\n\tIds: []*qdrant.PointId{\n\t\tqdrant.NewIDNum(0), qdrant.NewIDNum(3), qdrant.NewIDNum(100),\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Points by IDs via REST API\nDESCRIPTION: This snippet describes a method for retrieving points by their IDs through Qdrant's REST API. It includes parameters for selecting parts of the point data to return.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/points.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/retrieve-points/simple/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Importing FastEmbed Components\nDESCRIPTION: Imports required FastEmbed modules for text embeddings and cross-encoder reranking\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-rerankers.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastembed import TextEmbedding\nfrom fastembed.rerank.cross_encoder import TextCrossEncoder\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Database with Qdrant Client in Rust\nDESCRIPTION: This code snippet demonstrates how to connect to a Qdrant vector database server and perform a vector similarity search query. It initializes a client, builds a query with a vector, and configures the search with parameters like payload inclusion, vector inclusion, limit, and offset.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-offset/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::QueryPointsBuilder;\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .with_payload(true)\n            .with_vectors(true)\n            .limit(10)\n            .offset(100),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Context Queries with Qdrant Client in Python\nDESCRIPTION: This code initializes a Qdrant client connection to a local instance and performs batch queries using context pairs. Each context pair contains positive and negative vector IDs that define the search context. The batch query is executed against a specified collection with a limit of 10 results per query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/context-basic/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\ndiscover_queries = [\n    models.QueryRequest(\n        query=models.ContextQuery(\n            context=[\n                models.ContextPair(\n                    positive=100,\n                    negative=718,\n                ),\n                models.ContextPair(\n                    positive=200,\n                    negative=300,\n                ),\n            ],\n        ),\n        limit=10,\n    ),\n]\n\nclient.query_batch_points(\n    collection_name=\"{collection_name}\", requests=discover_queries\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Neural Search Class\nDESCRIPTION: Creates a NeuralSearcher class that handles vector encoding and similarity search using the sentence-transformers model and Qdrant client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/neural-search-tutorial.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# File: neural_searcher.py\n\nfrom qdrant_client import QdrantClient\nfrom sentence_transformers import SentenceTransformer\n\n\nclass NeuralSearcher:\n\n    def __init__(self, collection_name):\n        self.collection_name = collection_name\n        # Initialize encoder model\n        self.model = SentenceTransformer('distilbert-base-nli-stsb-mean-tokens', device='cpu')\n        # initialize Qdrant client\n        self.qdrant_client = QdrantClient(host='localhost', port=6333)\n\n    # The search function looks as simple as possible:\n\n    def search(self, text: str):\n        # Convert text query into vector\n        vector = self.model.encode(text).tolist()\n\n        # Use `vector` for search for closest vectors in the collection\n        search_result = self.qdrant_client.search(\n            collection_name=self.collection_name,\n            query_vector=vector,\n            query_filter=None,  # We don't want any filters for now\n            top=5  # 5 the most closest results is enough\n        )\n\n        # `search_result` contains found vector ids with similarity scores along with the stored payload\n        # In this function we are interested in payload only\n        payloads = [hit.payload for hit in search_result]\n        return payloads\n```\n\n----------------------------------------\n\nTITLE: Querying Collection - Python\nDESCRIPTION: Perform semantic search query using embedded text to find similar movies in the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-colbert.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nqdrant_client.query_points(\n    collection_name=\"movies\",\n    query=list(embedding_model.query_embed(\"A movie for kids with fantasy elements and wonders\"))[0], #converting generator object into numpy.ndarray\n    limit=1, #How many closest to the query movies we would like to get\n    #with_vectors=True, #If this option is used, vectors will also be returned\n    with_payload=True #So metadata is provided in the output\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Deferred HNSW Indexing in Java\nDESCRIPTION: Java code for creating a Qdrant collection with disabled HNSW indexing (m=0). This configuration is useful for bulk uploads as it reduces resource usage during data ingestion by postponing index construction.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.HnswConfigDiff;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(768)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setHnswConfig(HnswConfigDiff.newBuilder().setM(0).build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Qdrant Logo in SVG\nDESCRIPTION: SVG markup for the Qdrant vector database logo. The logo consists of various path elements with specific fill rules and coordinates to create the Qdrant brand image.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_18\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M97.4794 30.0167L93.7279 30.0204L93.7522 39.6867L97.4831 39.6836L97.4788 34.6223C97.4719 33.244 97.9961 32.3848 99.4056 32.4048C100.794 32.4297 101.071 33.3573 101.072 34.6397L101.076 39.6799L104.845 39.6768L104.829 33.7196C104.837 30.8683 103.368 29.6774 100.692 29.6799C99.2979 29.6811 98.3653 30.0161 97.4813 31.2356L97.4794 30.0167ZM78.6604 24.0346L74.9083 24.0377L74.9226 39.6986L78.6747 39.6948L78.6604 24.0346ZM71.747 32.8704L74.3436 32.8679L74.3411 30.0378L71.7339 30.0397L71.7432 28.4236C71.7576 26.6854 73.1041 26.4401 74.3442 27.2127L74.3418 24.1921C71.0018 22.769 68.0465 25.1303 68.0341 28.7766L68.0347 30.0428L66.7311 30.0441L66.7336 32.8742L68.0378 32.8729L68.0441 39.7048L71.7432 39.701L71.747 32.8704ZM54.7589 30.0559L54.7477 35.8643C54.767 39.1762 57.3487 40.0434 60.3855 40.0565C63.5337 40.0378 66.0457 39.7228 65.9996 35.8593L65.994 30.0459L62.1996 30.049L62.2045 35.2218C62.2058 36.6474 61.8248 37.321 60.383 37.3223C58.9094 37.3179 58.506 36.5976 58.5047 35.2249L58.4998 30.0528L54.7589 30.0559ZM30.9271 31.0526L30.9215 24.9049L26.756 24.9087L26.7691 39.7477L30.9825 39.744V33.3473L36.4099 39.7396L41.7837 39.7347L34.8385 31.9765L41.2925 24.8956L36.0824 24.9006L30.9271 31.0526ZM85.9019 32.6936C87.2217 32.6924 88.3037 33.6611 88.3043 34.8589C88.3055 36.051 87.2254 37.0272 85.9056 37.0284C84.5808 37.0297 83.5038 36.056 83.5026 34.8626C83.5026 33.6654 84.5771 32.6943 85.9019 32.6936ZM91.9045 30.0223L88.2053 30.0254L88.2065 31.0588C87.3045 30.2165 86.1914 29.7197 84.9195 29.6892C82.0097 29.5809 79.6589 31.9042 79.6353 34.862C79.6434 37.755 81.9829 40.021 84.696 40.0185C86.3439 40.0173 87.5622 39.2846 88.2134 38.6166L88.2146 39.6867L91.9138 39.6836L91.9045 30.0223ZM112.242 32.6694C113.562 32.6681 114.643 33.6374 114.644 34.8352C114.646 36.0274 113.565 37.0035 112.246 37.0048C110.926 37.006 109.844 36.0317 109.843 34.8389C109.842 33.6418 110.922 32.6706 112.242 32.6694ZM118.207 23.9985L114.524 24.0022L114.545 31.0345C113.649 30.1929 112.531 29.6954 111.264 29.6649C108.349 29.556 105.998 31.88 105.975 34.8371C105.983 37.7307 108.327 39.9968 111.035 39.9943C112.683 39.9924 113.902 39.2603 114.553 38.5917L114.553 39.6624L118.221 39.6643L118.207 23.9985ZM47.0075 32.7291C48.3273 32.7279 49.4093 33.6966 49.4105 34.8943C49.4112 36.0871 48.331 37.0627 47.0112 37.0639C45.6865 37.0652 44.6094 36.0915 44.6088 34.8981C44.6076 33.7003 45.6827 32.7297 47.0075 32.7291ZM53.0095 30.0578L49.3103 30.0609L49.3109 31.0943C48.4095 30.2526 47.2908 29.7552 46.0239 29.7247C43.1141 29.6158 40.7584 31.9391 40.7341 34.8968C40.7472 37.7898 43.0867 40.0559 45.7998 40.0534C47.4476 40.0522 48.666 39.3194 49.3172 38.6514L49.3184 39.7216L53.0176 39.7185L53.0095 30.0578ZM26.7709 41.9422L118.196 41.8594L118.198 44.0527L26.7728 44.1361L26.7709 41.9422ZM3.60902 21.7554L12.1572 21.7474L12.1666 31.5892L3.61835 31.5967L3.60902 21.7554ZM13.3021 21.7461L23.4671 21.7368L13.3108 31.588L13.3021 21.7461ZM13.3121 32.5629L23.4858 42.4427L13.3208 42.4527L13.3121 32.5629ZM3.61898 32.6195L12.1672 32.6121L12.1765 42.4533L3.62832 42.4614L3.61898 32.6195ZM2.23505 20.3734L24.536 20.3528L24.5572 43.6455L2.25622 43.6654L2.23505 20.3734ZM1.75195 19.8971L25.0122 19.876L25.0347 44.1224L1.77436 44.1429L1.75195 19.8971Z\" fill=\"#B4BACC\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Qdrant API in Rust\nDESCRIPTION: This snippet demonstrates how to use the Qdrant client to create a new collection by specifying its name, vector configuration (768 dimensions with Cosine distance), and HNSW settings. The code requires the 'qdrant_client' crate to be included in your Rust project.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-vectors-and-hnsw-on-disk/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, HnswConfigDiffBuilder,\n    VectorParamsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine).on_disk(true))\n            .hnsw_config(HnswConfigDiffBuilder::default().on_disk(true)),\n    )\n    .await?;\n\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with MultiVector Config\nDESCRIPTION: Initializes a Qdrant client and creates a new collection with cosine distance similarity, 128-dimensional vectors, and MAX_SIM multi-vector comparison configuration. The code connects to a local Qdrant instance and sets up the vector storage parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-multivector/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(\n        size=128,\n        distance=models.Distance.COSINE,\n        multivector_config=models.MultiVectorConfig(\n            comparator=models.MultiVectorComparator.MAX_SIM\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Hybrid Cloud Configuration in YAML\nDESCRIPTION: Defines the configuration for Qdrant's Hybrid Cloud deployment option, allowing connection to existing infrastructure with flexible management\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/pricing/qdrant-pricing-doors-b.md#2025-04-21_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n- id: 1\n  popular: false\n  title: Hybrid Cloud\n  price: $0.014\n  description: Starting price per hour.\n```\n\n----------------------------------------\n\nTITLE: Inserting Points Payload - HTTP\nDESCRIPTION: This snippet demonstrates how to send a POST request to the Qdrant API to insert points along with their associated payloads into a specific collection. The request requires a valid collection name and includes a key for the payload and an array of point identifiers. The expected output is the success response from the server indicating that the points have been inserted.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/set-payload/by-nested-key/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/payload\n{\n    \"payload\": {\n        \"nested_property\": \"qux\",\n    },\n    \"key\": \"property1\",\n    \"points\": [1]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Payload with Filter Conditions in Qdrant using Rust\nDESCRIPTION: Sets a payload containing two string properties for points in a Qdrant collection that match a specific filter condition. The code uses the Qdrant client to update points where the 'color' field matches 'red', waiting for the operation to complete before proceeding.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/set-payload/by-filter/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, SetPayloadPointsBuilder};\nuse qdrant_client::Payload;\nuse serde_json::json;\n\nclient\n    .set_payload(\n        SetPayloadPointsBuilder::new(\n            \"{collection_name}\",\n            Payload::try_from(json!({\n                \"property1\": \"string\",\n                \"property2\": \"string\",\n            }))\n            .unwrap(),\n        )\n        .points_selector(Filter::must([Condition::matches(\n            \"color\",\n            \"red\".to_string(),\n        )]))\n        .wait(true),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for AWS Lambda Configuration\nDESCRIPTION: This Bash script sets environment variables for the Qdrant URI, API keys, and collection name. It then uses the AWS CLI to update the Lambda function configuration with these environment variables, ensuring secure access to necessary resources.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/serverless.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ export QDRANT_URI=<qour Qdrant instance URI including port>\n$ export QDRANT_API_KEY=<your Qdrant API key>\n$ export COHERE_API_KEY=<your Cohere API key>\n$ export COLLECTION_NAME=site-cohere\n$ aws lambda update-function-configuration \\\n    --function-name $LAMBDA_FUNCTION_NAME \\\n    --environment \"Variables={QDRANT_URI=$QDRANT_URI,\\\n        QDRANT_API_KEY=$QDRANT_API_KEY,COHERE_API_KEY=${COHERE_API_KEY},\\\n        COLLECTION_NAME=${COLLECTION_NAME}}\"\n```\n\n----------------------------------------\n\nTITLE: Querying Collection Facets in Qdrant API using HTTP POST\nDESCRIPTION: This HTTP request demonstrates how to query facet data from a Qdrant collection. The request targets a specific collection by name and specifies 'size' as the facet key with exact matching enabled.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/facet-counts/exact/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/facet\n{\n    \"key\": \"size\",\n    \"exact\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Loading PubMed QA Dataset in Python\nDESCRIPTION: This code loads the pubmed_qa dataset from the HuggingFace hub. It specifically uses the pqa_labeled subset, which contains 1,000 examples of questions and answers labelled by domain experts.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qa-with-cohere-and-qdrant.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datasets import load_dataset\n\n# Loading the dataset from HuggingFace hub. It consists of several columns: pubid, \n# question, context, long_answer and final_decision. For the purposes of our system, \n# we'll use question and long_answer.\ndataset = load_dataset(\"pubmed_qa\", \"pqa_labeled\")\n```\n\n----------------------------------------\n\nTITLE: Updating Collection Aliases in Qdrant using TypeScript\nDESCRIPTION: Shows how to update collection aliases by atomically deleting an existing alias 'production_collection' and creating a new alias pointing to 'example_collection'. This is commonly used for zero-downtime collection updates.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/switch/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.updateCollectionAliases({\n  actions: [\n    {\n      delete_alias: {\n        alias_name: \"production_collection\",\n      },\n    },\n    {\n      create_alias: {\n        collection_name: \"example_collection\",\n        alias_name: \"production_collection\",\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Data with Multi-vectors in Python\nDESCRIPTION: Python code to load data into Qdrant using the Spark connector with multi-vectors. This example demonstrates how to specify multi-vector fields and names.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/spark.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", \"<QDRANT_GRPC_URL>\")\n   .option(\"collection_name\", \"<QDRANT_COLLECTION_NAME>\")\n   .option(\"multi_vector_fields\", \"<COLUMN_NAME>\")\n   .option(\"multi_vector_names\", \"<MULTI_VECTOR_NAME>\")\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n----------------------------------------\n\nTITLE: Creating Geo-Radius Condition with Qdrant Java Client\nDESCRIPTION: This snippet shows how to create a geo-radius condition using the `geoRadius` method from the `ConditionFactory` class in the Qdrant Java client.  This condition can be used to filter points within a specified radius of a given geo-location. The parameters include the field name (`location`), latitude (52.520711), longitude (13.403683), and radius (1000.0f).\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-radius/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.geoRadius;\n\ngeoRadius(\"location\", 52.520711, 13.403683, 1000.0f);\n```\n\n----------------------------------------\n\nTITLE: Checking Null Condition with Qdrant Client\nDESCRIPTION: Uses ConditionFactory to create a null condition check for a specific field named 'reports'. This is typically used in query filtering or validation scenarios within the Qdrant vector database client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/is-null/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.isNull;\n\nisNull(\"reports\");\n```\n\n----------------------------------------\n\nTITLE: Loading Dataset into Qdrant\nDESCRIPTION: Creates iterators over startup data and vectors, preparing them for upload to Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/neural-search-tutorial.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport json\n\nfd = open('./startups.json')\n\n# payload is now an iterator over startup data\npayload = map(json.loads, fd)\n\n# Here we load all vectors into memory, numpy array works as iterable for itself.\n# Other option would be to use Mmap, if we don't want to load all data into RAM\nvectors = np.load('./startup_vectors.npy')\n```\n\n----------------------------------------\n\nTITLE: Importing Qdrant Cloud SDK in Different Languages\nDESCRIPTION: Demonstrate how to import the Qdrant Cloud Pulumi SDK across Python, TypeScript, and Java\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/cloud-tools/pulumi.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pulumi_qdrant_cloud as qdrant_cloud\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as qdrantCloud from \"qdrant-cloud\";\n```\n\nLANGUAGE: java\nCODE:\n```\nimport com.pulumi.qdrantcloud.*;\n```\n\n----------------------------------------\n\nTITLE: GET Request for Collection Aliases\nDESCRIPTION: HTTP GET request to fetch collection aliases from the /aliases endpoint. This endpoint returns all configured alias mappings in the Qdrant database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/list-all/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /aliases\n```\n\n----------------------------------------\n\nTITLE: Configuring Benchmark Tool for Qdrant Performance Testing\nDESCRIPTION: This JSON configuration for the 'bfb' benchmarking tool sets up a workload to test Qdrant's performance. It defines parameters for generating points with sparse vectors, various payload types, and update operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/gridstore-key-value-storage.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nbfb -n 2000000 --max-id 1000000 \\\n    --sparse-vectors 0.02 \\\n    --set-payload \\\n    --on-disk-payload \\\n    --dim 1 \\\n    --sparse-dim 5000 \\\n    --bool-payloads \\\n    --keywords 100 \\\n    --float-payloads true \\\n    --int-payloads 100000 \\\n    --text-payloads \\\n    --text-payload-length 512 \\\n    --skip-field-indices \\\n    --jsonl-updates ./rps.jsonl\n```\n\n----------------------------------------\n\nTITLE: Creating Field Index in Qdrant\nDESCRIPTION: This snippet initializes a Qdrant client and demonstrates the process of creating a field index for a specified collection. The index is configured with parameters for integer types, including lookup and range options. It requires the `qdrant_client` crate to be included as a dependency.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/integer-with-params/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\n    payload_index_params::IndexParams, CreateFieldIndexCollectionBuilder, FieldType,\n    IntegerIndexParams, PayloadIndexParams,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_field_index(\n        CreateFieldIndexCollectionBuilder::new(\n            \"{collection_name}\",\n            \"name_of_the_field_to_index\",\n            FieldType::Integer,\n        )\n        .field_index_params(PayloadIndexParams {\n            index_params: Some(IndexParams::IntegerIndexParams(IntegerIndexParams {\n                lookup: false,\n                range: true,\n            })),\n        }),\n    )\n    .await?;\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Qdrant Storage Connector in TypeScript\nDESCRIPTION: Shows how to set up a basic Qdrant storage connector in a CDK stack with essential configuration including API key authentication via AWS Secrets Manager and collection settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/lakechain.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantStorageConnector } from '@project-lakechain/qdrant-storage-connector';\nimport { CacheStorage } from '@project-lakechain/core';\n\nclass Stack extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    const cache = new CacheStorage(this, 'Cache');\n\n    const qdrantApiKey = secrets.Secret.fromSecretNameV2(\n      this,\n      'QdrantApiKey',\n      process.env.QDRANT_API_KEY_SECRET_NAME as string\n    );\n\n    const connector = new QdrantStorageConnector.Builder()\n      .withScope(this)\n      .withIdentifier('QdrantStorageConnector')\n      .withCacheStorage(cache)\n      .withSource(source) // 👈 Specify a data source\n      .withApiKey(qdrantApiKey)\n      .withCollectionName('{collection_name}')\n      .withUrl('https://xyz-example.eu-central.aws.cloud.qdrant.io:6333')\n      .build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Section Delimiter in YAML\nDESCRIPTION: YAML configuration that defines a 'Getting Started' section delimiter for documentation pages. It includes settings for title, type, weight (for ordering sections), sitemap exclusion, and build parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/dl-getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#Delimiter files are used to separate the list of documentation pages into sections.\ntitle: \"Getting Started\"\ntype: delimiter\nweight: 1 # Change this weight to change order of sections\nsitemapExclude: True\n_build:\n  publishResources: false\n  render: never\npartition: qdrant\n```\n\n----------------------------------------\n\nTITLE: Creating Geo Bounding Box Condition in Qdrant with Java\nDESCRIPTION: This code snippet demonstrates how to create a `geoBoundingBox` condition using the Qdrant Java client.  It filters points within a specified geographical area defined by its coordinates. The snippet depends on the `io.qdrant.client.ConditionFactory` class and the `geoBoundingBox` method, using latitude and longitude for the bounding box.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-bounding-box/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.geoBoundingBox;\n\ngeoBoundingBox(\"location\", 52.520711, 13.403683, 52.495862, 13.455868);\n```\n\n----------------------------------------\n\nTITLE: Initializing QdrantClient and Executing Facet Query in Java\nDESCRIPTION: This code demonstrates how to create a Qdrant client connection to a local server and execute a facet count query with filtering. It establishes a gRPC connection to Qdrant on localhost port 6334, then performs a facet count on the 'size' field while filtering for items with color 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/facet-counts/simple-with-filter/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\nimport io.qdrant.client.grpc.Points;\nimport io.qdrant.client.grpc.Filter;\n\nQdrantClient client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .facetAsync(\n        Points.FacetCounts.newBuilder()\n            .setCollectionName(collection_name)\n            .setKey(\"size\")\n            .setFilter(Filter.newBuilder().addMust(matchKeyword(\"color\", \"red\")).build())\n            .build())\n        .get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant in n8n AI Starter Kit Docker Compose\nDESCRIPTION: YAML configuration for setting up a local Qdrant instance in the n8n Self-hosted AI Starter Kit. Includes volume mounting and optional API key configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-n8n-2.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nqdrant:\n  image: qdrant/qdrant\n  hostname: qdrant\n  container_name: qdrant\n  networks: ['demo']\n  restart: unless-stopped\n  ports:\n    - 6333:6333\n  volumes:\n    - qdrant_storage:/qdrant/storage\n```\n\nLANGUAGE: yaml\nCODE:\n```\nqdrant:\n  ...\n  volumes:\n    - qdrant_storage:/qdrant/storage\n  environment:\n    - QDRANT_API_KEY=test\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant with Go Client\nDESCRIPTION: Demonstrates setting up a Qdrant client connection and executing a scroll query with negation filters. The code shows how to construct complex nested filters with MustNot and Must conditions to exclude points matching specific criteria.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-nested-clauses-filter/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMustNot: []*qdrant.Condition{\n\t\t\tqdrant.NewFilterAsCondition(&qdrant.Filter{\n\t\t\t\tMust: []*qdrant.Condition{\n\t\t\t\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t\t\t\t\tqdrant.NewMatch(\"color\", \"red\"),\n\t\t\t\t},\n\t\t\t}),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Qdrant Logo SVG Implementation\nDESCRIPTION: SVG code for the Qdrant logo using path elements to create the logo design with a monochromatic style using the color #B4BACC. The SVG has dimensions of 120×64 pixels.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_18\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M38.4991 16.2263H2.56821V9.56821H38.4991V16.2263ZM41.0625 7H0V18.7945H41.0625V7Z\" fill=\"#B4BACC\"/><path d=\"M2.56821 38.2843H0V26.4897H2.56821V31.1509H7.15257V26.4897H9.72078V38.2843H7.15257V33.3975H2.56821V38.2843ZM13.6091 33.1143H16.6669C16.6093 32.2454 16.2541 31.6406 15.2508 31.6406C14.4924 31.6406 13.8347 31.9622 13.6091 33.1143ZM15.5484 38.4715C12.9418 38.4715 11.1705 36.8298 11.1705 34.132C11.1705 31.5061 12.9082 29.6964 15.2076 29.6964C17.7182 29.6964 18.9615 31.3765 18.9615 33.8871V34.8328H13.6091C13.9115 36.1337 14.9292 36.4745 15.9517 36.4745C16.8397 36.4745 17.4782 36.2873 18.2703 35.7929H18.3663V37.737C17.6846 38.2267 16.7197 38.4715 15.5484 38.4715ZM25.6677 33.3399L24.3475 38.2843H22.101L19.5328 29.9796V29.8836H21.9858L23.3827 34.8472L24.7028 29.8836H26.7045L28.0438 34.8472L29.46 29.8836H31.8169V29.9796L29.2487 38.2843H27.0022L25.6677 33.3399ZM35.9885 38.4715C33.9483 38.4715 33.1179 37.6602 33.1179 35.7545V26.4897H35.6092V35.5817C35.6092 36.1673 35.8349 36.3737 36.3245 36.3737C36.4925 36.3737 36.7421 36.3161 36.891 36.2585H36.9294V38.3131C36.7229 38.3947 36.3677 38.4715 35.9885 38.4715ZM40.064 33.1143H43.1218C43.0642 32.2454 42.709 31.6406 41.7057 31.6406C40.9521 31.6406 40.2896 31.9622 40.064 33.1143ZM42.0082 38.4715C39.4016 38.4715 37.6302 36.8298 37.6302 34.132C37.6302 31.5061 39.368 29.6964 41.6673 29.6964C44.1779 29.6964 45.4212 31.3765 45.4212 33.8871V34.8328H40.064C40.3664 36.1337 41.3841 36.4745 42.4018 36.4745C43.2899 36.4745 43.9283 36.2873 44.7252 35.7929H44.8212V37.737C44.1443 38.2267 43.1795 38.4715 42.0082 38.4715ZM55.6509 29.8884H57.499V31.8902H55.6509V35.3033C55.6509 36.0377 55.9341 36.3785 56.6877 36.3785C56.8942 36.3785 57.1582 36.3593 57.4414 36.2633H57.499V38.2267C57.1774 38.3419 56.6877 38.4715 55.9725 38.4715C53.9515 38.4715 53.1595 37.545 53.1595 35.4137V31.8854H49.972V35.2985C49.972 36.0329 50.2552 36.3737 51.0089 36.3737C51.2153 36.3737 51.4793 36.3545 51.7625 36.2585H51.8201V38.2219C51.4985 38.3371 51.0089 38.4667 50.2936 38.4667C48.2727 38.4667 47.4806 37.5402 47.4806 35.4089V31.8806H46.1989V29.8788H47.4806V27.5794H49.972V29.8788H53.1595V27.5794H55.6509V29.8884ZM65.8949 32.2838C67.1958 32.2838 67.8198 31.5494 67.8198 30.4933C67.8198 29.3988 67.2006 28.6643 65.8949 28.6643H64.2723V32.2886L65.8949 32.2838ZM70.4264 30.4933C70.4264 33.0615 68.7079 34.4536 66.1061 34.4536H64.2771V38.2843H61.7137V26.4897H66.1109C68.7079 26.4897 70.4264 27.8867 70.4264 30.4933ZM75.8989 35.6441V34.9288C75.5196 34.7224 75.03 34.6456 74.5212 34.6456C73.7099 34.6456 73.2203 34.948 73.2203 35.6249C73.2203 36.3257 73.7099 36.6234 74.4444 36.6234C75.1452 36.6234 75.6733 36.2633 75.8989 35.6441ZM75.9757 37.4538C75.4284 38.1163 74.6172 38.4331 73.7483 38.4331C72.1066 38.4331 70.7673 37.4346 70.7673 35.6585C70.7673 34.0167 72.1066 32.9223 74.0315 32.9223C74.6364 32.9223 75.2604 33.0183 75.8989 33.2055V33.0567C75.8989 32.1494 75.39 31.7558 74.0507 31.7558C73.2011 31.7558 72.3898 32.0006 71.6889 32.399H71.5977V30.3973C72.241 30.0228 73.3739 29.7012 74.4828 29.7012C77.0126 29.7012 78.3903 30.9109 78.3903 33.0231V38.2891H75.9757V37.4538ZM79.6528 34.0936C79.6528 31.3957 81.5585 29.6964 84.0499 29.6964C84.938 29.6964 85.7685 29.8836 86.3877 30.3397V32.471H86.2917C85.7445 32.0582 85.1012 31.8086 84.3668 31.8086C83.1235 31.8086 82.1778 32.6582 82.1778 34.0936C82.1778 35.5289 83.1235 36.3593 84.3668 36.3593C85.1012 36.3593 85.7445 36.1145 86.2917 35.6969H86.3877V37.8283C85.7637 38.2795 84.9332 38.4715 84.0499 38.4715C81.5585 38.4715 79.6528 36.7962 79.6528 34.0936ZM90.4488 34.4728V38.2843H87.9574V26.4897H90.4488V33.2055L92.9594 29.8836H95.7917V29.9796L92.7722 33.7911L95.7917 38.1883V38.2843H92.9402L90.4488 34.4728ZM101.375 35.6441V34.9288C101 34.7224 100.506 34.6456 99.9968 34.6456C99.1855 34.6456 98.6959 34.948 98.6959 35.6249C98.6959 36.3257 99.1855 36.6234 99.92 36.6234C100.621 36.6234 101.149 36.2633 101.375 35.6441ZM101.451 37.4538C100.904 38.1163 100.093 38.4331 99.2239 38.4331C97.5822 38.4331 96.2429 37.4346 96.2429 35.6585C96.2429 34.0167 97.5822 32.9223 99.5072 32.9223C100.112 32.9223 100.731 33.0183 101.375 33.2055V33.0567C101.375 32.1494 100.866 31.7558 99.5264 31.7558C98.6767 31.7558 97.8654 32.0006 97.1646 32.399H97.0686V30.3973C97.7118 30.0228 98.8447 29.7012 99.9536 29.7012C102.483 29.7012 103.861 30.9109 103.861 33.0231V38.2891H101.447L101.451 37.4538ZM108.057 31.2469C108.508 30.3205 109.17 29.7924 110.097 29.7924C110.438 29.7924 110.774 29.8692 110.908 29.946V32.3222H110.817C110.534 32.207 110.193 32.135 109.722 32.135C108.95 32.135 108.345 32.5862 108.138 33.4551V38.2843H105.647V29.8884H108.061L108.057 31.2469ZM117.509 35.4329V32.735C117.096 32.1302 116.549 31.8662 115.924 31.8662C114.83 31.8662 114.096 32.6582 114.096 34.0936C114.096 35.5289 114.83 36.3017 115.924 36.3017C116.549 36.3017 117.096 36.0377 117.509 35.4329ZM117.585 37.4154C117.057 38.0971 116.227 38.4715 115.094 38.4715C112.943 38.4715 111.566 36.5082 111.566 34.0936C111.566 31.679 112.943 29.6964 115.094 29.6964C116.189 29.6964 116.981 30.0372 117.509 30.6565V26.4897H120V38.2795H117.585V37.4154ZM0 42.1342H7.28698V43.5695H1.64173V47.1746H6.75414V48.5715H1.64173V52.4982H7.28218V53.9335H0L0 42.1342ZM13.3067 45.4561C15.174 45.4561 16.2109 46.685 16.2109 48.7011V53.9287H14.646V48.7395C14.646 47.6642 14.0987 46.8914 12.9082 46.8914C11.929 46.8914 11.0985 47.5154 10.8153 48.3987V53.9287H9.25034V45.6241H10.8153V46.8338C11.3049 46.0609 12.1354 45.4561 13.3067 45.4561ZM20.4208 45.6241H22.5522V46.9634H20.4208V51.4325C20.4208 52.3734 20.9105 52.695 21.7985 52.695C22.0434 52.695 22.3074 52.6566 22.4946 52.5798H22.5522V53.9191C22.3266 54.0152 22.005 54.0872 21.5729 54.0872C19.6288 54.0872 18.8559 53.1991 18.8559 51.5766V46.9538H17.4206V45.6145H18.8559V43.4063H20.4208V45.6241ZM25.1732 48.9651H29.3063C29.2487 47.7411 28.6439 46.7954 27.3622 46.7954C26.1765 46.7954 25.4036 47.6834 25.1732 48.9651ZM27.6454 54.0968C25.2116 54.0968 23.5507 52.4742 23.5507 49.8724C23.5507 47.2658 25.0964 45.4561 27.343 45.4561C29.628 45.4561 30.8137 47.0978 30.8137 49.5316V50.2469H25.1204C25.2884 51.927 26.3685 52.7382 27.8566 52.7382C28.7831 52.7382 29.4408 52.5318 30.18 51.9846H30.2376V53.3623C29.556 53.8903 28.6679 54.0968 27.6454 54.0968ZM34.2315 46.9106C34.5916 46.0225 35.3836 45.4945 36.2861 45.4945C36.6461 45.4945 36.9678 45.5521 37.0974 45.6241V47.1698H37.0398C36.8141 47.0594 36.4349 47.0018 36.0557 47.0018C35.206 47.0018 34.4908 47.5682 34.2267 48.5091V53.9239H32.6618V45.6241H34.2267L34.2315 46.9106ZM42.157 52.6806C43.7027 52.6806 44.61 51.4565 44.61 49.7764C44.61 48.1155 43.7027 46.8722 42.157 46.8722C41.3073 46.8722 40.5152 47.381 40.1024 48.1923V51.3845C40.5152 52.191 41.3121 52.6806 42.157 52.6806ZM42.4258 45.4561C44.898 45.4561 46.2181 47.477 46.2181 49.7764C46.2181 52.0806 44.898 54.0968 42.4258 54.0968C41.4081 54.0968 40.5392 53.5687 40.1024 53.0023V57.1162H38.5375V45.6241H40.1024V46.565C40.5344 45.9841 41.4033 45.4561 42.4258 45.4561ZM49.6312 46.9106C49.9912 46.0225 50.7833 45.4945 51.6857 45.4945C52.0458 45.4945 52.3674 45.5521 52.497 45.6241V47.1698H52.4394C52.2138 47.0594 51.8345 47.0018 51.4601 47.0018C50.6104 47.0018 49.8952 47.5682 49.6312 48.5091V53.9239H48.0662V45.6241H49.6312V46.9106ZM54.7676 42.2686C55.3148 42.2686 55.7661 42.7006 55.7661 43.2479C55.7661 43.7951 55.3148 44.2272 54.7676 44.2272C54.2395 44.2272 53.7691 43.7951 53.7691 43.2479C53.7643 42.7006 54.2395 42.2686 54.7676 42.2686ZM53.9899 53.9287H55.5548V45.6241H53.9899V53.9287ZM61.1425 49.0804C62.333 49.4548 63.6531 49.9492 63.6531 51.5334C63.6531 53.2327 62.2562 54.1016 60.4656 54.1016C59.3711 54.1016 58.2767 53.8375 57.6526 53.3479V51.8598H57.7294C58.4303 52.503 59.4672 52.7863 60.4464 52.7863C61.3345 52.7863 62.1266 52.4454 62.1266 51.7302C62.1266 50.9957 61.4689 50.8229 60.1632 50.3909C58.9919 50.0116 57.691 49.5796 57.691 48.0147C57.691 46.4113 59.0111 45.4657 60.6913 45.4657C61.6705 45.4657 62.5394 45.6721 63.2403 46.1473V47.6594H63.1827C62.5058 47.1122 61.7089 46.7906 60.7297 46.7906C59.7504 46.7906 59.2031 47.2226 59.2031 47.8083C59.1983 48.4563 59.8032 48.6435 61.1425 49.0804ZM66.6341 48.9651H70.7673C70.7097 47.7411 70.1096 46.7954 68.8231 46.7954C67.6374 46.7954 66.8645 47.6834 66.6341 48.9651ZM69.1063 54.0968C66.6725 54.0968 65.0116 52.4742 65.0116 49.8724C65.0116 47.2658 66.5573 45.4561 68.8039 45.4561C71.0889 45.4561 72.2746 47.0978 72.2746 49.5316V50.2469H66.5813C66.7493 51.927 67.8246 52.7382 69.3175 52.7382C70.244 52.7382 70.9017 52.5318 71.6409 51.9846H71.6985V53.3623C71.0169 53.8903 70.1288 54.0968 69.1063 54.0968Z\" fill=\"#B4BACC\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Filtering with DatetimeRange in Qdrant\nDESCRIPTION: This snippet demonstrates how to create a `FieldCondition` with a `DatetimeRange` to filter data in Qdrant based on datetime values. It filters records where the 'date' field falls within the specified range (greater than '2023-02-08T10:49:00Z' and less than or equal to '2024-01-31T10:14:31Z').\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/datetime-range/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodels.FieldCondition(\n    key=\"date\",\n    range=models.DatetimeRange(\n        gt=\"2023-02-08T10:49:00Z\",\n        gte=None,\n        lt=None,\n        lte=\"2024-01-31T10:14:31Z\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Mixpeek Client with API Key\nDESCRIPTION: Code to initialize the Mixpeek client with an API key for accessing Mixpeek's services.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/mixpeek.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom mixpeek import Mixpeek\n\nmixpeek = Mixpeek('your_api_key_here')\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Deferred HNSW Indexing in Rust\nDESCRIPTION: Rust implementation for creating a Qdrant collection with HNSW indexing disabled. Uses the recommended rust-client library which offers the best performance for bulk uploads to Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::\n    CreateCollectionBuilder, Distance, HnswConfigDiffBuilder, VectorParamsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine))\n            .hnsw_config(HnswConfigDiffBuilder::default().m(0)),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Recovering a Collection from Snapshot URL in Qdrant\nDESCRIPTION: REST API call to restore a collection from a snapshot located at a URL or local file path. If the target collection doesn't exist, it will be created.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/snapshots.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT 'http://{qdrant-url}:6333/collections/{collection_name}/snapshots/recover'\n    -H 'api-key: ********' \n    -H 'Content-Type: application/json' \n    -d '{\"location\":\"http://example.com/path/to/snapshot.snapshot\"}'\n```\n\n----------------------------------------\n\nTITLE: Manual Passage and Query Specification\nDESCRIPTION: Example showing how to manually specify passage and query parameters when creating embeddings without using the automatic Qdrant integration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/fastembed-fast-lightweight-embedding-generation-nirant-kasliwal-vector-space-talks-004.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nadd(passage=passage, query=query)\n```\n\n----------------------------------------\n\nTITLE: Creating a Range Filter with Qdrant Go Client\nDESCRIPTION: This snippet demonstrates how to create a range filter for numeric data using the Qdrant Go client library. It defines a filter for the 'price' field, specifying a lower bound (Gte) of 100.0 and an upper bound (Lte) of 450.0.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/range/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewRange(\"price\", &qdrant.Range{\n\tGte: qdrant.PtrOf(100.0),\n\tLte: qdrant.PtrOf(450.0),\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Qdrant Collection Optimizer Configuration\nDESCRIPTION: Sends a PATCH request to modify the optimizer settings for a specified Qdrant collection. The request targets the local Qdrant instance on port 6333 and allows updating optimizer configuration parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/trigger-indexing/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"optimizers_config\": {}\n  }'\n```\n\n----------------------------------------\n\nTITLE: Sample Qdrant Server Output\nDESCRIPTION: Example console output showing successful launch of Qdrant server with workers on port 6333.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/neural-search-tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n...\n[2021-02-05T00:08:51Z INFO  actix_server::builder] Starting 12 workers\n[2021-02-05T00:08:51Z INFO  actix_server::builder] Starting \"actix-web-service-0.0.0.0:6333\" service on 0.0.0.0:6333\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Rust Lambda Function for Semantic Search\nDESCRIPTION: This Bash script builds a Rust Lambda function for semantic search and deploys it to AWS. It uses cargo-lambda to build an ARM-compatible release version, creates a zip file, and updates the Lambda function code using the AWS CLI.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/serverless.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ export LAMBDA_FUNCTION_NAME=search\n$ export LAMBDA_REGION=us-east-1\n$ cargo lambda build --release --arm --output-format zip\n  Downloaded libc v0.2.137\n# [..] output omitted for brevity\n    Finished release [optimized] target(s) in 1m 27s\n$ # Update the function\n$ aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME \\\n     --zip-file fileb://./target/lambda/page-search/bootstrap.zip \\\n     --region $LAMBDA_REGION\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Vector Database Client in Go\nDESCRIPTION: Creates a new Qdrant client connection to localhost on port 6334, setting up the connection for vector database operations\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-tenant-group-id/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Dart Sass Installation for Hugo Project\nDESCRIPTION: These commands check the Dart Sass version used by Hugo and the system-wide Dart Sass version. They help ensure that the correct version of Dart Sass is installed and accessible for the project.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/themes/qdrant-2024/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhugo env | grep \"dart-sass\"\n\nsass --embedded --version\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Service in Qdrant - YAML\nDESCRIPTION: This YAML snippet configures the gRPC service port for Qdrant. The service must be exposed on the specified port to enable gRPC connections.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/interfaces.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  grpc_port: 6334\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from Qdrant Cluster Status API\nDESCRIPTION: Sample JSON response from the cluster status API showing enabled status, peer information, and Raft consensus details including term, commit, and leader.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": {\n    \"status\": \"enabled\",\n    \"peer_id\": 11532566549086892000,\n    \"peers\": {\n      \"9834046559507417430\": {\n        \"uri\": \"http://172.18.0.3:6335/\"\n      },\n      \"11532566549086892528\": {\n        \"uri\": \"http://qdrant_node_1:6335/\"\n      }\n    },\n    \"raft_info\": {\n      \"term\": 1,\n      \"commit\": 4,\n      \"pending_operations\": 1,\n      \"leader\": 11532566549086892000,\n      \"role\": \"Leader\"\n    }\n  },\n  \"status\": \"ok\",\n  \"time\": 5.731e-06\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules\nDESCRIPTION: Imports necessary modules for sparse embeddings and type hints\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-splade.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastembed import SparseTextEmbedding, SparseEmbedding\nfrom typing import List\n```\n\n----------------------------------------\n\nTITLE: Configuring HNSW Parameters for Qdrant Vector Index\nDESCRIPTION: This snippet shows the configuration settings for Qdrant's HNSW (Hierarchical Navigable Small World) vector index. It specifies the 'm' parameter (max connections per layer), 'ef_construct' (size of the dynamic candidate list during construction), and enables on-disk storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/tutorials.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hnsw_config\": {\n    \"m\": 64,\n    \"ef_construct\": 512,\n    \"on_disk\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Points Across Collections in Qdrant\nDESCRIPTION: Initializes a Qdrant client and performs a cross-collection query using vectors from another collection. Uses point ID to lookup vectors and query across collections. Demonstrates the usage of LookupLocation for referencing vectors in different collections.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/by-existing-id-with-lookup/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\",  # <--- point id\n    using=\"512d-vector\",\n    lookup_from=models.LookupLocation(\n        collection=\"another_collection\",  # <--- other collection name\n        vector=\"image-512\",  # <--- vector name in the other collection\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Starting the Qdrant Fluvio Connector\nDESCRIPTION: Command to deploy and start the Qdrant sink connector with the specified configuration and secrets files.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/fluvio.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncdk deploy start --ipkg qdrant-qdrant-sink-0.1.0.ipkg -c config.yaml --secrets secrets.txt\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database in C#\nDESCRIPTION: Creates a Qdrant client connection to localhost and performs a vector similarity search with payload filtering. The query searches for vectors similar to the provided embedding, returning only specific payload fields (city, village, town) from the top 3 results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-payload-fields/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n    payloadSelector: new WithPayloadSelector\n    {\n        Include = new PayloadIncludeSelector\n        {\n            Fields = { new string[] { \"city\", \"village\", \"town\" } }\n        }\n    },\n    limit: 3\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring HNSW Parameters in Qdrant Collection\nDESCRIPTION: API call to modify HNSW (Hierarchical Navigable Small World) configuration by setting the 'm' parameter to 16, which controls the number of connections per element in the graph. This setting is typically adjusted after the initial data ingestion phase.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/indexing-optimization.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nPATCH /collections/your_collection\n{\n  \"hnsw_config\": {\n    \"m\": 16\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index in Qdrant using Typescript\nDESCRIPTION: This snippet demonstrates how to create a payload index in Qdrant using the JavaScript client. It specifies the collection name, the field to index (`field_name`), and the schema of the field, including its data type, lookup settings, and range option. The payload index is used to improve query performance based on payload values.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/integer-with-params/typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"name_of_the_field_to_index\",\n  field_schema: {\n    type: \"integer\",\n    lookup: false,\n    range: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing CamelAI with Vector Database Support\nDESCRIPTION: Instructions for installing CamelAI with vector database dependencies using pip.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/camel.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"camel[vector-databases]\"\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant Docker Container\nDESCRIPTION: Command to start a Qdrant instance with HTTP API exposed on port 6333\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/storing-multiple-vectors-per-object-in-qdrant.md#2025-04-21_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker run -p 6333:6333 qdrant/qdrant:v0.10.1\n```\n\n----------------------------------------\n\nTITLE: Applying Matching Condition with Qdrant gRPC in C#\nDESCRIPTION: This code snippet demonstrates the use of Qdrant's gRPC client in C# to set a condition for matching where the count is equal to zero. Dependencies include the Qdrant.Client.Grpc assembly. The `Match` function requires a field name and a value as parameters. It is important for scenarios where specific filtering conditions are required in a Qdrant query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-integer/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing static Qdrant.Client.Grpc.Conditions;\\n\\nMatch(\\\"count\\\", 0);\n```\n\n----------------------------------------\n\nTITLE: Deleting Snapshots with Qdrant Rust Client\nDESCRIPTION: Demonstrates how to create a Qdrant client connection and delete a full snapshot. The code initializes a client with a local Qdrant instance running on port 6334 and performs a snapshot deletion operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/delete-full-snapshot/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.delete_full_snapshot(\"{snapshot_name}\").await?;\n```\n\n----------------------------------------\n\nTITLE: Querying Qdrant Vector Database with Filters in Rust\nDESCRIPTION: Demonstrates connecting to a Qdrant instance and performing a scroll query with OR conditions on 'city' and 'color' fields. Uses the ScrollPointsBuilder to construct the query and applies filter conditions using should() which creates an OR logical operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-should-filter/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::should([\n            Condition::matches(\"city\", \"london\".to_string()),\n            Condition::matches(\"color\", \"red\".to_string()),\n        ])),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection with Quantization\nDESCRIPTION: Creates a new Qdrant client connection and initializes a collection with specific vector parameters and quantization configuration. The collection is configured with 768-dimensional vectors using cosine similarity and Int8 scalar quantization for optimized storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-scalar-quantization-params/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n collectionName: \"{collection_name}\",\n vectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine },\n quantizationConfig: new QuantizationConfig\n {\n  Scalar = new ScalarQuantization\n  {\n   Type = QuantizationType.Int8,\n   Quantile = 0.99f,\n   AlwaysRam = true\n  }\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Collection Vectors and Optimizers with HTTP\nDESCRIPTION: This HTTP PUT request configures a collection in Qdrant by specifying the vector size and distance function, as well as setting the optimizer's default segment number. Required dependencies include access to a Qdrant server. Key parameters: 'collection_name' (path parameter) indicates the collection, 'size' indicates vector dimensionality, 'distance' specifies the metric for calculating vector distances, and 'default_segment_number' sets the default number of segments for optimizers. The configuration supports vector-based querying with specified optimization constraints.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-high-number-of-segments/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\"\n    },\n    \"optimizers_config\": {\n        \"default_segment_number\": 16\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Vector Configuration in Java\nDESCRIPTION: Demonstrates how to initialize a QdrantClient and create a new collection with cosine distance metrics and HNSW index configuration. The collection is configured with 768-dimensional vectors and custom HNSW parameters including payload_m=16.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-disabled-global-hnsw/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.HnswConfigDiff;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(768)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setHnswConfig(HnswConfigDiff.newBuilder().setPayloadM(16).setM(0).build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Using Banner Shortcode in Markdown\nDESCRIPTION: This example demonstrates how to use the banner shortcode in a markdown file. It creates a banner with a link and custom content.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n{{< banner link=\"/documentation\" >}}  \n  This guide will help you get started with Qdrant locally.  \n{{< /banner >}}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Qdrant Client in Go\nDESCRIPTION: The snippet illustrates the process of importing the Qdrant Go client and utilizing it to generate a new match instance with a specified UUID. It requires importing the `qdrant` package from the Qdrant GitHub repository. The snippet initializes a match with a predefined UUID, which is essential for identifying and managing data using Qdrant's functionality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-uuid/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewMatch(\"uuid\", \"f47ac10b-58cc-4372-a567-0e02b2c3d479\")\n```\n\n----------------------------------------\n\nTITLE: Defining Case Study Landing Page Content in YAML\nDESCRIPTION: YAML configuration block that defines the structure and content of a case study landing page, including logo assets, title, description, link details and preview image properties.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/case-study-voiceflow.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncaseStudy:\n  logo:\n    src: /img/customers-case-studies/customer-logo2.svg\n    alt: Logo Voiceflow\n  title: \"Voiceflow & Qdrant: Powering No-Code AI Agent Creation with Scalable Vector Search\"\n  description: Voiceflow enables enterprises to create AI agents in a no-code environment by designing workflows. Qdrant's features and infrastructure provided Voiceflow with a stable, scalable, and efficient solution for their data processing and retrieval needs.\n  link:\n    text: Read Case Study\n    url: /blog/case-study-voiceflow/\n  image:\n    src: /img/customers-case-studies/case-study2.png\n    alt: Preview\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Updating Qdrant Collection Optimizers Configuration\nDESCRIPTION: Modifies the optimization settings for a specified Qdrant collection using the UpdateCollectionBuilder and OptimizersConfigDiffBuilder. Allows runtime configuration of collection-level optimizer parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/trigger-indexing/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{OptimizersConfigDiffBuilder, UpdateCollectionBuilder};\n\nclient\n    .update_collection(\n        UpdateCollectionBuilder::new(\"{collection_name}\")\n            .optimizers_config(OptimizersConfigDiffBuilder::default()),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Collection with Dense and Sparse Vectors\nDESCRIPTION: This HTTP PUT request creates or updates a Qdrant collection with specific vector configurations. It sets up dense vectors with a size of 128, Cosine distance, and uint8 datatype. Additionally, it configures sparse vectors for text data, also using uint8 datatype.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-uint8-sparse-and-dense/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n  \"vectors\": {\n    \"size\": 128,\n    \"distance\": \"Cosine\",\n    \"datatype\": \"uint8\" // <-- For dense vectors\n  },\n  \"sparse_vectors\": {\n    \"text\": {\n      \"index\": {\n        \"datatype\": \"uint8\" // <-- For sparse vectors \n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Embedding Models in Python\nDESCRIPTION: This snippet shows how to load specific embedding models for dense, sparse, and late interaction embeddings, which are crucial for converting documents into their respective embeddings for the hybrid search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/search-precision/reranking-hybrid-search.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndense_embedding_model = TextEmbedding(\"sentence-transformers/all-MiniLM-L6-v2\")\nbm25_embedding_model = SparseTextEmbedding(\"Qdrant/bm25\")\nlate_interaction_embedding_model = LateInteractionTextEmbedding(\"colbert-ir/colbertv2.0\")\n```\n\n----------------------------------------\n\nTITLE: Searching for documents with Qdrant\nDESCRIPTION: This snippet demonstrates how to search for documents in Qdrant using OpenAI embeddings. It embeds a query text using the same OpenAI model used for indexing, then uses the resulting vector to search the `example_collection`.  The search returns the most relevant documents based on cosine similarity.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/openai.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"client.search(\n    collection_name=collection_name,\n    query_vector=openai_client.embeddings.create(\n        input=[\\\"What is the best to use for vector search scaling?\\\"],\n        model=embedding_model,\n    )\n    .data[0]\n    .embedding,\n)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Personal Notes Data\nDESCRIPTION: Creates a list of sample personal notes, each represented as a JSON object with 'title' and 'text' fields. This data will be used to populate the Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/cohere-rag-connector.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnotes = [\n    {\n        \"title\": \"Project Alpha Review\",\n        \"text\": \"Review the current progress of Project Alpha, focusing on the integration of the new API. Check for any compatibility issues with the existing system and document the steps needed to resolve them. Schedule a meeting with the development team to discuss the timeline and any potential roadblocks.\"\n    },\n    {\n        \"title\": \"Learning Path Update\",\n        \"text\": \"Update the learning path document with the latest courses on React and Node.js from Pluralsight. Schedule at least 2 hours weekly to dedicate to these courses. Aim to complete the React course by the end of the month and the Node.js course by mid-next month.\"\n    },\n    {\n        \"title\": \"Weekly Team Meeting Agenda\",\n        \"text\": \"Prepare the agenda for the weekly team meeting. Include the following topics: project updates, review of the sprint backlog, discussion on the new feature requests, and a brainstorming session for improving remote work practices. Send out the agenda and the Zoom link by Thursday afternoon.\"\n    },\n    {\n        \"title\": \"Code Review Process Improvement\",\n        \"text\": \"Analyze the current code review process to identify inefficiencies. Consider adopting a new tool that integrates with our version control system. Explore options such as GitHub Actions for automating parts of the process. Draft a proposal with recommendations and share it with the team for feedback.\"\n    },\n    {\n        \"title\": \"Cloud Migration Strategy\",\n        \"text\": \"Draft a plan for migrating our current on-premise infrastructure to the cloud. The plan should cover the selection of a cloud provider, cost analysis, and a phased migration approach. Identify critical applications for the first phase and any potential risks or challenges. Schedule a meeting with the IT department to discuss the plan.\"\n    },\n    {\n        \"title\": \"Quarterly Goals Review\",\n        \"text\": \"Review the progress towards the quarterly goals. Update the documentation to reflect any completed objectives and outline steps for any remaining goals. Schedule individual meetings with team members to discuss their contributions and any support they might need to achieve their targets.\"\n    },\n    {\n        \"title\": \"Personal Development Plan\",\n        \"text\": \"Reflect on the past quarter's achievements and areas for improvement. Update the personal development plan to include new technical skills to learn, certifications to pursue, and networking events to attend. Set realistic timelines and check-in points to monitor progress.\"\n    },\n    {\n        \"title\": \"End-of-Year Performance Reviews\",\n        \"text\": \"Start preparing for the end-of-year performance reviews. Collect feedback from peers and managers, review project contributions, and document achievements. Consider areas for improvement and set goals for the next year. Schedule preliminary discussions with each team member to gather their self-assessments.\"\n    },\n    {\n        \"title\": \"Technology Stack Evaluation\",\n        \"text\": \"Conduct an evaluation of our current technology stack to identify any outdated technologies or tools that could be replaced for better performance and productivity. Research emerging technologies that might benefit our projects. Prepare a report with findings and recommendations to present to the management team.\"\n    },\n    {\n        \"title\": \"Team Building Event Planning\",\n        \"text\": \"Plan a team-building event for the next quarter. Consider activities that can be done remotely, such as virtual escape rooms or online game nights. Survey the team for their preferences and availability. Draft a budget proposal for the event and submit it for approval.\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenAI and Qdrant clients\nDESCRIPTION: This snippet initializes the OpenAI and Qdrant clients.  It requires an OpenAI API key and establishes a connection to a Qdrant instance (in this case, an in-memory instance).  It also defines a list of texts to be embedded.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/openai.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"import openai\nimport qdrant_client\n\nopenai_client = openai.Client(\n    api_key=\\\"<YOUR_API_KEY>\\\"\n)\n\nclient = qdrant_client.QdrantClient(\\\":memory:\\\")\n\ntexts = [\n    \\\"Qdrant is the best vector search engine!\\\",\n    \\\"Loved by Enterprises and everyone building for low latency, high performance, and scale.\\\",\n]\"\n```\n\n----------------------------------------\n\nTITLE: Converting the Model Outputs to Qdrant Points - TypeScript\nDESCRIPTION: This snippet demonstrates how to convert the model outputs into a list of objects for insertion into Qdrant after embedding a video in TypeScript.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet points = taskResult.videoEmbedding.segments.map((data, i) => {\n    return {\n        id: i,\n        vector: data.embeddingsFloat,\n        payload: {\n            startOffsetSec: data.startOffsetSec,\n            endOffsetSec: data.endOffsetSec,\n            embeddingScope: data.embeddingScope\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Payload Data in Qdrant using C# Client\nDESCRIPTION: Demonstrates how to establish a connection to Qdrant server and set payload for vectors matching a specific condition. Uses the Qdrant.Client library to connect to a local Qdrant instance and update payload data with key-value pairs while filtering by a keyword match condition.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/set-payload/by-filter/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.SetPayloadAsync(\n    collectionName: \"{collection_name}\",\n    payload: new Dictionary<string, Value> { { \"property1\", \"string\" }, { \"property2\", \"string\" } },\n    filter: MatchKeyword(\"color\", \"red\")\n);\n```\n\n----------------------------------------\n\nTITLE: Matching Conditions in Rust\nDESCRIPTION: This code snippet demonstrates the use of the Condition struct to match certain cases, such as checking if the count is equal to zero. There may be dependencies on specific traits or modules for successful execution.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-integer/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nCondition::matches(\"count\", 0)\n```\n\n----------------------------------------\n\nTITLE: Creating TLS Secret for Inter-cluster Communication with Shell\nDESCRIPTION: This shell command uses `kubectl` to generate a Kubernetes secret designed for enabling TLS in inter-cluster communication. It includes a certificate, key, and CA certificate, forming the `qdrant-p2p-tls` secret in a specified namespace.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/qdrant-cluster-management.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret generic qdrant-p2p-tls \\\n        --from-file=tls.crt=qdrant-nodes.crt \\\n        --from-file=tls.key=qdrant-nodes.key \\\n        --from-file=ca.crt=root-ca.crt\n        --namespace the-qdrant-namespace\n```\n\n----------------------------------------\n\nTITLE: Deleting Payload Keys with Filtering in Qdrant Collection\nDESCRIPTION: HTTP POST request to delete specific payload keys ('color' and 'price') from points in a Qdrant collection, with filtering to only affect points where color matches 'red'. The endpoint targets a specific collection identified by the collection_name parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-payload/by-filter/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/payload/delete\n{\n    \"keys\": [\"color\", \"price\"],\n    \"filter\": {\n        \"must\": [\n            {\n                \"key\": \"color\",\n                \"match\": {\n                    \"value\": \"red\"\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Mem0 Configuration with Qdrant\nDESCRIPTION: Example showing how to configure and initialize Mem0 with Qdrant vector store, set OpenAI API key, and add a memory entry. Demonstrates basic setup and memory addition for a specific user.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/mem0.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom mem0 import Memory\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-xx\"\n\nconfig = {\n    \"vector_store\": {\n        \"provider\": \"qdrant\",\n        \"config\": {\n            \"collection_name\": \"test\",\n            \"host\": \"localhost\",\n            \"port\": 6333,\n        }\n    }\n}\n\nm = Memory.from_config(config)\nm.add(\"Likes to play cricket on weekends\", user_id=\"alice\", metadata={\"category\": \"hobbies\"})\n```\n\n----------------------------------------\n\nTITLE: Inserting Sparse Vectors into Qdrant Collection\nDESCRIPTION: This code snippet shows how to insert a sparse vector into a Qdrant collection. It uses the upsert method to add a point with a sparse vector, demonstrating the structure required for sparse vector data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/sparse-vectors.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclient.upsert(\n    collection_name=COLLECTION_NAME,\n    points=[\n        models.PointStruct(\n            id=point_id,\n            payload={},  # Add any additional payload if necessary\n            vector={\n                \"text\": models.SparseVector(\n                    indices=indices.tolist(), values=values.tolist()\n                )\n            },\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Vectors with Filters in Qdrant using TypeScript\nDESCRIPTION: This code demonstrates how to delete vectors from a Qdrant collection using a filter condition. The example shows deletion of vectors where the 'color' field matches the value 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-points/by-filter/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.delete(\"{collection_name}\", {\n  filter: {\n    must: [\n      {\n        key: \"color\",\n        match: {\n          value: \"red\",\n        },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with Deferred HNSW Indexing in HTTP\nDESCRIPTION: HTTP request to create a collection with HNSW indexing disabled (m=0) to optimize for bulk uploads. This configuration stores vectors without building the index immediately, which speeds up ingestion and reduces memory usage during upload.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\"\n    },\n    \"hnsw_config\": {\n        \"m\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Outlined Button Variants - HTML\nDESCRIPTION: Outlined button variants showing different sizes (small, medium, large) and disabled state.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/debug.skip/components.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"#\" class=\"button button_outlined button_sm\">Try Free</a>\n<a href=\"#\" class=\"button button_outlined button_md\">Try Free</a>\n<a href=\"#\" class=\"button button_outlined button_lg\">Try Free</a>\n<a href=\"#\" class=\"button button_outlined button_disabled\">Try Free</a>\n```\n\n----------------------------------------\n\nTITLE: Defining Investors Configuration in YAML for Qdrant Landing Page\nDESCRIPTION: This YAML configuration defines the investors section for the Qdrant landing page. It includes a title, an array of investor objects with IDs and logo file paths, and a sitemap exclusion flag. Each investor entry contains a numeric ID and a path to their SVG logo in the project's image directory.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/investors.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n  title: Our Investors\n  investors:\n    - id: 0\n      logo: '/img/investors/spark-capital.svg'\n    - id: 1\n      logo: '/img/investors/unusual-ventures.svg'\n    - id: 2\n      logo: '/img/investors/42cap.svg'\n    - id: 3\n      logo: '/img/investors/ibb-ventures.svg'\n  sitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for 'Managed Services' Documentation Delimiter\nDESCRIPTION: A YAML frontmatter block that defines a delimiter page for the 'Managed Services' section in the documentation. It sets the title, type, weight for ordering, sitemap exclusion, build parameters, and partition for the cloud platform.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/dl-managed-services.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Managed Services\"\ntype: delimiter\nweight:  11 # Change this weight to change order of sections\nsitemapExclude: True\n_build:\n  publishResources: false\n  render: never\npartition: cloud\n```\n\n----------------------------------------\n\nTITLE: Matching Keyword with UUID in Java\nDESCRIPTION: This code snippet demonstrates the usage of a `matchKeyword` function in Java. It appears to be used for matching a specific keyword (\"uuid\") with a given UUID value (\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"). The function likely performs a search or filtering operation based on this matching criteria.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-uuid/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n\"matchKeyword(\\\"uuid\\\", \\\"f47ac10b-58cc-4372-a567-0e02b2c3d479\\\");\"\n```\n\n----------------------------------------\n\nTITLE: Defining Qdrant Logo SVG for Landing Page\nDESCRIPTION: SVG code defining the Qdrant logo, including paths for text and graphical elements. The logo is designed for a 120x64 viewport.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_10\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_1629_8448)\"><path d=\"M49.9057 24.1184V39.4738H47.2398V27.4241H47.2043L42.4412 39.4738H40.664L35.7943 27.4241H35.7588V39.4738H33.3062V24.1184H37.145L41.5526 35.4928H41.6237L46.2801 24.1184H49.9057ZM52.1095 25.2914C52.1095 24.8648 52.2516 24.5094 52.5716 24.225C52.8915 23.9407 53.2469 23.7985 53.6735 23.7985C54.1355 23.7985 54.5265 23.9407 54.8109 24.225C55.0953 24.5094 55.273 24.8648 55.273 25.2914C55.273 25.7179 55.1308 26.0734 54.8109 26.3577C54.491 26.6421 54.1355 26.7843 53.6735 26.7843C53.2114 26.7843 52.8559 26.6421 52.5716 26.3577C52.2872 26.0378 52.1095 25.6824 52.1095 25.2914ZM54.9886 28.4549V39.4738H52.3938V28.4549H54.9886ZM62.8441 37.59C63.2351 37.59 63.6616 37.5189 64.1237 37.3056C64.5858 37.1279 65.0123 36.8791 65.4033 36.5947V39.0118C64.9768 39.2606 64.5147 39.4383 63.9815 39.5449C63.4483 39.6516 62.8796 39.7227 62.2398 39.7227C60.6047 39.7227 59.2896 39.225 58.2943 38.1942C57.2635 37.1634 56.7659 35.8483 56.7659 34.2843C56.7659 32.507 57.299 31.0497 58.3299 29.9122C59.3607 28.7748 60.818 28.2061 62.7374 28.2061C63.2351 28.2061 63.7327 28.2772 64.1948 28.3838C64.6924 28.4904 65.0834 28.6682 65.3678 28.8103V31.2985C64.9768 31.0141 64.5502 30.7653 64.1592 30.6231C63.7327 30.481 63.3061 30.3743 62.8796 30.3743C61.8488 30.3743 61.0313 30.6942 60.3915 31.3696C59.7516 32.0449 59.4673 32.9336 59.4673 34.071C59.4673 35.1729 59.7872 36.0615 60.3915 36.6658C60.9957 37.2701 61.8133 37.59 62.8441 37.59ZM72.7611 28.2772C72.9744 28.2772 73.1521 28.2772 73.3298 28.3127C73.5076 28.3483 73.6498 28.3838 73.7564 28.4193V31.0497C73.6142 30.943 73.4365 30.8364 73.1521 30.7653C72.8678 30.6942 72.5834 30.6231 72.1924 30.6231C71.5526 30.6231 71.0194 30.9075 70.5929 31.4407C70.1663 31.9738 69.9175 32.7914 69.9175 33.9288V39.4738H67.3227V28.4549H69.9175V30.1966H69.9531C70.2019 29.5923 70.5573 29.1302 71.0194 28.7748C71.5171 28.4549 72.0858 28.2772 72.7611 28.2772ZM73.8986 34.1421C73.8986 32.3293 74.4317 30.872 75.427 29.8056C76.4578 28.7392 77.8796 28.2061 79.6924 28.2061C81.3986 28.2061 82.7493 28.7037 83.709 29.7345C84.6687 30.7653 85.1663 32.1516 85.1663 33.8933C85.1663 35.6705 84.6332 37.0923 83.6379 38.1587C82.6071 39.225 81.2208 39.7582 79.4436 39.7582C77.7374 39.7582 76.3867 39.2606 75.3915 38.2653C74.3962 37.2345 73.8986 35.8483 73.8986 34.1421ZM76.6 34.0355C76.6 35.1729 76.8488 36.0615 77.382 36.6658C77.9152 37.2701 78.6616 37.59 79.6213 37.59C80.5455 37.59 81.2919 37.3056 81.7896 36.6658C82.2872 36.0615 82.536 35.1729 82.536 33.9644C82.536 32.7914 82.2872 31.9028 81.7896 31.2629C81.2919 30.6587 80.5455 30.3388 79.6569 30.3388C78.6971 30.3388 77.9862 30.6587 77.4531 31.2985C76.8488 31.9738 76.6 32.8625 76.6 34.0355ZM89.0407 31.3696C89.0407 31.725 89.1474 32.0449 89.3962 32.2582C89.645 32.4715 90.1426 32.7203 90.9602 33.0402C91.991 33.4667 92.7374 33.9288 93.1284 34.4265C93.555 34.9596 93.7682 35.5639 93.7682 36.3103C93.7682 37.3411 93.3772 38.1587 92.5597 38.7985C91.7777 39.4383 90.6758 39.7227 89.3251 39.7227C88.863 39.7227 88.3654 39.6516 87.7967 39.5449C87.228 39.4383 86.7659 39.2961 86.3749 39.1184V36.5592C86.837 36.8791 87.3701 37.1634 87.9033 37.3411C88.4365 37.5189 88.9341 37.6255 89.3962 37.6255C89.9649 37.6255 90.427 37.5544 90.6758 37.3767C90.9602 37.199 91.1024 36.9501 91.1024 36.5592C91.1024 36.2037 90.9602 35.9193 90.6758 35.635C90.3915 35.3862 89.8227 35.1018 89.0407 34.7819C88.081 34.3909 87.4057 33.9288 87.0147 33.4312C86.6237 32.9336 86.4104 32.2938 86.4104 31.5118C86.4104 30.5165 86.8014 29.699 87.5834 29.0592C88.3654 28.4193 89.3962 28.0994 90.6403 28.0994C91.0313 28.0994 91.4578 28.135 91.9199 28.2416C92.382 28.3483 92.8085 28.4549 93.1284 28.5615V31.0852C92.773 30.8719 92.382 30.6587 91.9199 30.481C91.4578 30.3032 90.9957 30.2321 90.5692 30.2321C90.0716 30.2321 89.6806 30.3388 89.4317 30.5165C89.1829 30.7653 89.0407 31.0141 89.0407 31.3696ZM94.8701 34.1421C94.8701 32.3293 95.4033 30.872 96.3986 29.8056C97.4294 28.7392 98.8512 28.2061 100.664 28.2061C102.37 28.2061 103.721 28.7037 104.681 29.7345C105.64 30.7653 106.138 32.1516 106.138 33.8933C106.138 35.6705 105.605 37.0923 104.609 38.1587C103.579 39.225 102.192 39.7582 100.415 39.7582C98.709 39.7582 97.3583 39.2606 96.363 38.2653C95.4033 37.2345 94.8701 35.8483 94.8701 34.1421ZM97.5716 34.0355C97.5716 35.1729 97.8204 36.0615 98.3535 36.6658C98.8867 37.2701 99.6332 37.59 100.593 37.59C101.517 37.59 102.263 37.3056 102.761 36.6658C103.259 36.0615 103.508 35.1729 103.508 33.9644C103.508 32.7914 103.259 31.9028 102.761 31.2629C102.263 30.6587 101.517 30.3388 100.628 30.3388C99.6687 30.3388 98.9578 30.6587 98.4246 31.2985C97.8559 31.9738 97.5716 32.8625 97.5716 34.0355ZM114.775 30.5876H110.901V39.4738H108.271V30.5876H106.422V28.4549H108.271V26.9265C108.271 25.789 108.662 24.8293 109.408 24.0829C110.154 23.3364 111.114 22.981 112.287 22.981C112.607 22.981 112.891 23.0165 113.14 23.0165C113.389 23.0165 113.602 23.0876 113.78 23.1587V25.398C113.709 25.3625 113.531 25.2914 113.318 25.2203C113.105 25.1492 112.856 25.1137 112.572 25.1137C112.038 25.1137 111.612 25.2914 111.327 25.6113C111.043 25.9312 110.901 26.4644 110.901 27.1042V28.4193H114.775V25.9312L117.37 25.1492V28.4193H120V30.552H117.37V35.7061C117.37 36.3814 117.512 36.8435 117.726 37.1279C117.974 37.4122 118.365 37.5544 118.899 37.5544C119.041 37.5544 119.218 37.5189 119.432 37.4478C119.645 37.3767 119.823 37.3056 119.965 37.199V39.3317C119.787 39.4383 119.538 39.5094 119.147 39.5805C118.756 39.6516 118.401 39.6871 118.01 39.6871C116.908 39.6871 116.091 39.4028 115.557 38.834C115.024 38.2653 114.74 37.3767 114.74 36.2037L114.775 30.5876Z\" fill=\"#B4BACC\"/><path d=\"M12.1564 19H0V31.1564H12.1564V19Z\" fill=\"#B4BACC\"/><path d=\"M25.5924 19H13.436V31.1564H25.5924V19Z\" fill=\"#B4BACC\"/><path d=\"M12.1564 32.436H0V44.5924H12.1564V32.436Z\" fill=\"#B4BACC\"/><path d=\"M25.5924 32.436H13.436V44.5924H25.5924V32.436Z\" fill=\"#B4BACC\"/></g><defs><clipPath id=\"clip0_1629_8448\"><rect width=\"120\" height=\"64\" fill=\"white\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Deutsche Telekom AI Discussion\nDESCRIPTION: This HTML snippet embeds a YouTube video featuring a discussion between Thierry from Qdrant and Arun from Deutsche Telekom about scaling enterprise AI agents and the LMOS platform.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/case-study-deutsche-telekom.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/l_4EDFqx1qk?si=Lk71qTMWWCM2oQ_k\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Upserting a Point with Vector and Payload using Qdrant Client in C#\nDESCRIPTION: This code initializes a Qdrant client, connects to a local Qdrant instance, and upserts a single point into a specified collection. The point includes an ID, a 4-dimensional vector, and a payload with a color attribute.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/uuid-one-point-simple/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpsertAsync(\n\tcollectionName: \"{collection_name}\",\n\tpoints: new List<PointStruct>\n\t{\n\t\tnew()\n\t\t{\n\t\t\tId = Guid.Parse(\"5c56c793-69f3-4fbf-87e6-c4bf54c28c26\"),\n\t\t\tVectors = new[] { 0.05f, 0.61f, 0.76f, 0.74f },\n\t\t\tPayload = { [\"color\"] = \"Red\" }\n\t\t}\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Upserting Vector Data with Qdrant Client in C#\nDESCRIPTION: This code snippet demonstrates how to create a Qdrant client, connect to a local Qdrant server, and upsert a point with vector data into a specified collection. It uses the Qdrant.Client library and performs an asynchronous upsert operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/sparse-vectors-single/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpsertAsync(\n  collectionName: \"{collection_name}\",\n  points: new List < PointStruct > {\n    new() {\n      Id = 1,\n        Vectors = new Dictionary <string, Vector> {\n          [\"text\"] = ([0.1f, 0.2f, 0.3f, 0.4f], [1, 3, 5, 7])\n        }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring External Service Integrations\nDESCRIPTION: YAML configuration for external service integrations, including Dust and Discord. Each service is defined with an ID and name.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\n- id: 9\n  name: Dust\n- id: 10\n  name: Discord\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic AWS Lambda Function in Rust\nDESCRIPTION: This code shows a minimal implementation of an AWS Lambda function in Rust that responds with a simple text message. It demonstrates the handler function pattern and async runtime initialization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/serverless.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse lambda_http::{run, service_fn, Body, Error, Request, RequestExt, Response};\n\n/// This is your callback function for responding to requests at your URL\nasync fn function_handler(_req: Request) -> Result<Response<Body>, Error> {\n    Response::from_text(\"Hello, Lambda!\")\n}\n\n#[tokio::main]\nasync fn main() {\n    run(service_fn(function_handler)).await\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Resharding Qdrant Cluster via HTTP API\nDESCRIPTION: This snippet demonstrates how to start the resharding process for a Qdrant collection by sending a POST request to the Qdrant API. It requires specifying the direction of resharding, either 'up' for increasing shards or 'down' for reducing them.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/cloud/cluster-scaling.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/cluster\n{\n    \"start_resharding\": {\n        \"direction\": \"up\",\n        \"shard_key\": null\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Grid Row Shortcode with Multiple Cards in Markdown\nDESCRIPTION: This example shows how to use the grid row shortcode to create a row with multiple cards. Each card takes up half of the row width.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n{{< grid-row >}}\n  {{< card\n    title=\"Title one\"  \n    link=\"/some-link\"  \n    image=\"some-image.svg\"  \n    col=\"6\" >}}\n      This is a first card.  \n  {{< /card >}}\n  {{< card  \n    title=\"Title two\"  \n    link=\"/another-link\"  \n    image=\"another-image.svg\"  \n    col=\"6\" >}}\n      This is a second card.\n  {{< /card >}}\n{{< /grid-row >}}\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with Keyword Filter in Java\nDESCRIPTION: This code performs an asynchronous scroll operation on a Qdrant collection. It uses a filter to match the keyword 'Germany' in the 'country.cities[].sightseeing' field. The query is built using the ScrollPoints and Filter builders.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-on-nested-array-match/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addShould(matchKeyword(\"country.cities[].sightseeing\", \"Germany\"))\n                    .build())\n            .build())\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Executing Scroll Query with Filters in Qdrant using Python\nDESCRIPTION: This code snippet demonstrates how to perform a scroll query on a Qdrant collection using the Python client. It applies filter conditions to match documents from London city while excluding those with the color red.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-multiple-clauses-combination/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must=[\n            models.FieldCondition(key=\"city\", match=models.MatchValue(value=\"London\")),\n        ],\n        must_not=[\n            models.FieldCondition(key=\"color\", match=models.MatchValue(value=\"red\")),\n        ],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Field Index in Qdrant with Go\nDESCRIPTION: This snippet demonstrates how to create a field index in a Qdrant collection using the Go client. It specifies the collection name, field name, and field type for the index. It also configures integer indexing parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/integer-is-principal/go.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nclient.CreateFieldIndex(context.Background(), &qdrant.CreateFieldIndexCollection{\n\tCollectionName: \"{collection_name}\",\n\tFieldName:      \"name_of_the_field_to_index\",\n\tFieldType:      qdrant.FieldType_FieldTypeInteger.Enum(),\n\tFieldIndexParams: qdrant.NewPayloadIndexParamsInt(\n\t\t&qdrant.IntegerIndexParams{\n\t\t\tIsPrincipal: qdrant.PtrOf(true),\n\t\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Payload Index with QdrantClient in Python\nDESCRIPTION: This snippet connects to a Qdrant instance and creates a new payload index in the specified collection. It uses the QdrantClient to define the index's configuration, including field schemas and parameters for text indexing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/simple-full-text/python.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"name_of_the_field_to_index\",\n    field_schema=models.TextIndexParams(\n        type=\"text\",\n        tokenizer=models.TokenizerType.WORD,\n        min_token_len=2,\n        max_token_len=15,\n        lowercase=True,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Shards in Go\nDESCRIPTION: Shows how to create a Qdrant collection with 6 shards using the Go client. The code establishes a connection to Qdrant and creates a new collection with specified vector parameters and shard count.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     300,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tShardNumber: qdrant.PtrOf(uint32(6)),\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Embeddings\nDESCRIPTION: Print the generated embeddings array\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Embeddings:\\n\", embeddings_list)\n```\n\n----------------------------------------\n\nTITLE: Uploading Data to Qdrant Collection\nDESCRIPTION: Uploads the prepared vectors and payload data to the Qdrant collection in batches.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/neural-search-tutorial.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nqdrant_client.upload_collection(\n    collection_name='startups',\n    vectors=vectors,\n    payload=payload,\n    ids=None,  # Vector ids will be assigned automatically\n    batch_size=256  # How many vectors will be uploaded in a single request?\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in Java\nDESCRIPTION: This snippet shows how to create a collection in Qdrant using Java, defining vector parameters and distance metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.grpc.Collections.Distance;\\nimport io.qdrant.client.grpc.Collections.VectorParams;\\n\\nclient.createCollectionAsync(\"test_collection\",\\n        VectorParams.newBuilder().setDistance(Distance.Dot).setSize(4).build()).get();\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Delimiter for 'Getting Started' Section\nDESCRIPTION: This YAML configuration sets up a delimiter file for the 'Getting Started' section in a documentation structure. It defines the title, type, weight for ordering, sitemap exclusion, build settings, and partition.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/dl-cloud-getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#Delimiter files are used to separate the list of documentation pages into sections.\ntitle: \"Getting Started\"\ntype: delimiter\nweight: 1 # Change this weight to change order of sections\nsitemapExclude: True\n_build:\n  publishResources: false\n  render: never\npartition: cloud\n```\n\n----------------------------------------\n\nTITLE: Evaluating RAG Performance with Different Top-K Values\nDESCRIPTION: Experiments with different Top-K values (3, 5, 7, and 9) to evaluate retrieval performance and logs results for each configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-relari.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nk_values = [3, 5, 7, 9]  # Define the different values of top k to experiment\n\nsemantic_retrievers = {}\nsemantic_logs = {}\n\n# Run the retrievers on the dataset and log retrieved chunks\nfor k in k_values:\n    retriever = db.as_retriever(search_type=\"similarity\", search_kwargs={\"k\": k})\n    log = log_retriever_results(retriever, dataset)\n\n    semantic_retrievers[f\"k_{k}\"] = retriever\n    semantic_logs[f\"k_{k}\"] = log\n    print(f\"Results on {dataset.name} by Semantic Retriever with k={k} saved!\")\n```\n\n----------------------------------------\n\nTITLE: Matching Colors in Qdrant Client\nDESCRIPTION: Performs a color match condition using the Qdrant client with a static method, filtering for specific color values\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-any/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing static Qdrant.Client.Grpc.Conditions;\n\nMatch(\"color\", [\"black\", \"yellow\"]);\n```\n\n----------------------------------------\n\nTITLE: Using Unstructured CLI to Ingest Documents into Qdrant\nDESCRIPTION: Command-line interface example for processing a document and storing it in Qdrant. This command chunks the text, applies embeddings, and sends the data to a Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/unstructured.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nEMBEDDING_PROVIDER=${EMBEDDING_PROVIDER:-\"langchain-huggingface\"}\n\nunstructured-ingest \\\n  local \\\n  --input-path example-docs/book-war-and-peace-1225p.txt \\\n  --output-dir local-output-to-qdrant \\\n  --strategy fast \\\n  --chunk-elements \\\n  --embedding-provider \"$EMBEDDING_PROVIDER\" \\\n  --num-processes 2 \\\n  --verbose \\\n  qdrant \\\n  --collection-name \"test\" \\\n  --url \"http://localhost:6333\" \\\n  --batch-size 80\n```\n\n----------------------------------------\n\nTITLE: Upserting Vectors to Qdrant Collection in C#\nDESCRIPTION: This C# code snippet demonstrates how to upsert vectors into a Qdrant collection. It initializes a Qdrant client, creates a list of `PointStruct` objects with specified IDs, vectors, and payload, and then uses the `UpsertAsync` method to insert these points into the designated collection. The code requires the `Qdrant.Client` and `Qdrant.Client.Grpc` NuGet packages.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/int-one-point-simple/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpsertAsync(\n\tcollectionName: \"{collection_name}\",\n\tpoints: new List<PointStruct>\n\t{\n\t\tnew()\n\t\t{\n\t\t\tId = 1,\n\t\t\tVectors = new[] { 0.05f, 0.61f, 0.76f, 0.74f },\n\t\t\tPayload = { [\"color\"] = \"Red\" }\n\t\t}\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Initialize Qdrant Client and Create Collection\nDESCRIPTION: Establishes a connection to a Qdrant server and creates a new collection with specified vector parameters including size, distance metric, and datatype. The client connects to a local Qdrant instance running on port 6333.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-uint8/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(\n        size=1024,\n        distance=models.Distance.COSINE,\n        datatype=models.Datatype.UINT8,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection in C#\nDESCRIPTION: Creates a Qdrant client connection and initializes a new collection with 768-dimensional vectors using cosine distance. Configures product quantization with 16x compression ratio and RAM storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-product-quantization/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n collectionName: \"{collection_name}\",\n vectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine },\n quantizationConfig: new QuantizationConfig\n {\n  Product = new ProductQuantization { Compression = CompressionRatio.X16, AlwaysRam = true }\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Geo-Bounding Box Condition in Qdrant\nDESCRIPTION: Creates a geospatial field condition that defines a rectangular area using longitude and latitude coordinates. Specifies a bottom-right and top-left geographic point to create a bounding box for location-based querying.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-bounding-box/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodels.FieldCondition(\n    key=\"location\",\n    geo_bounding_box=models.GeoBoundingBox(\n        bottom_right=models.GeoPoint(\n            lon=13.455868,\n            lat=52.495862,\n        ),\n        top_left=models.GeoPoint(\n            lon=13.403683,\n            lat=52.520711,\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection via REST API\nDESCRIPTION: This curl command creates a new collection in Qdrant with specified vector size and distance metric. It requires the Qdrant URL, collection name, and API key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-unstructured.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  <QDRANT_URL>/collections/<COLLECTION_NAME> \\\n  -H 'Content-Type: application/json' \\\n  -H 'api-key: <QDRANT_API_KEY>' \\\n  -d '{\n    \"vectors\": {\n      \"size\": 384,\n      \"distance\": \"Cosine\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Feedback Component in YAML\nDESCRIPTION: YAML configuration for a page feedback component with positive and negative response options. The configuration includes button text, associated icons, and feedback messages shown based on user selection, with the negative feedback providing links to edit the page or create an issue on GitHub.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/docs-feedback.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Was this page useful?\npositiveButton: \n  text: \"Yes\"\n  icon:\n    src: /icons/outline/thumb-up.svg\n    alt: Thumb up icon\nnegativeButton:\n  text: \"No\"\n  icon:\n    src: /icons/outline/thumb-down.svg\n    alt: Thumb down icon\npositiveFeedback: Thank you for your feedback! 🙏\nnegativeFeedback: We are sorry to hear that. 😔 You can <a class=\"text-brand-p\" href=\"#edit\" target=\"_blank\">edit</a> this page on GitHub, or <a class=\"text-brand-p\" href=\"#issue\" target=\"_blank\">create</a> a GitHub issue.\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Re-enabling HNSW Indexing After Upload in HTTP\nDESCRIPTION: HTTP request to update a collection by enabling HNSW indexing after bulk upload completion. This changes the m parameter from 0 to 16, triggering the construction of the HNSW graph for fast vector search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/bulk-upload.md#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPATCH /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\"\n    },\n    \"hnsw_config\": {\n        \"m\": 16\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Container in TypeScript\nDESCRIPTION: Creates and starts a Qdrant container instance using the TypeScript Testcontainers module with async/await pattern.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/testcontainers.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantContainer } from \"@testcontainers/qdrant\";\n\nconst qdrantContainer = await new QdrantContainer(\"qdrant/qdrant\").start();\n```\n\n----------------------------------------\n\nTITLE: SVG Path Definition Data for UI Elements\nDESCRIPTION: This code contains SVG path data that defines shapes using coordinate instructions. The data represents vector graphics that are likely used for icons, logos, or UI elements on the Qdrant landing page.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_4\n\nLANGUAGE: SVG\nCODE:\n```\n.754 46.7034 70.3659 47.6095ZM92.3041 45.6218C91.3762 47.2408 88.7567 50.6308 85.2754 49.8304C84.1258 52.6182 83.16 55.4384 82.6078 59.6583C82.6078 59.6583 82.4864 60.4783 81.8049 60.1934C81.1295 59.9571 80.0171 58.8342 79.792 57.2807C79.5499 55.2401 80.4583 51.7906 82.315 47.8351C81.7735 46.9548 81.4043 45.697 81.7204 43.906C81.7204 43.906 82.1867 40.5802 85.5269 37.5826C85.5269 37.5826 85.9273 37.2368 86.1594 37.3433C86.4151 37.4505 86.2967 38.5328 86.0938 39.059C85.883 39.5822 84.396 42.1565 84.396 42.1565C84.396 42.1565 83.4684 43.8957 83.7294 45.2675C85.4812 42.5742 89.4634 37.1431 91.9316 38.8558C92.7607 39.449 93.1429 40.7393 93.1429 42.1297C93.1434 43.351 92.8489 44.649 92.3041 45.6218ZM91.5838 41.3564C91.5838 41.3564 91.4464 40.2856 90.3996 41.4652C89.4991 42.4607 87.8751 44.3259 86.5677 46.8592C87.9394 46.7052 89.2625 45.961 89.6626 45.5819C90.313 45.0048 91.8282 43.4391 91.5838 41.3564ZM111.482 41.1126H105.102C104.974 38.9441 104.713 36.8317 104.301 34.6563C104.281 34.5473 104.223 34.4489 104.138 34.378C104.053 34.307 103.946 34.2681 103.835 34.2678H102.364C102.3 34.268 102.238 34.2822 102.18 34.3095C102.123 34.3368 102.072 34.3765 102.032 34.4257C101.991 34.4751 101.962 34.5329 101.946 34.5949C101.93 34.657 101.928 34.7218 101.941 34.7846C102.358 36.8898 102.623 38.9618 102.754 41.1147H96.6156C96.3296 41.1147 96.0973 41.3463 96.0973 41.6311V42.9578C96.0975 43.0952 96.1521 43.227 96.2493 43.3242C96.3464 43.4215 96.4782 43.4762 96.6156 43.4765H102.842C102.846 43.8039 102.849 44.0971 102.849 44.3722C102.849 46.2841 102.766 47.8591 102.574 49.6364C102.566 49.7041 102.573 49.7725 102.594 49.8372C102.616 49.9019 102.65 49.9613 102.696 50.0113C102.741 50.0615 102.796 50.1016 102.857 50.1291C102.918 50.1566 102.985 50.1708 103.052 50.1709H104.416C104.544 50.1711 104.668 50.1235 104.763 50.0375C104.858 49.9514 104.917 49.833 104.93 49.7055C105.116 47.916 105.196 46.3215 105.196 44.372C105.196 44.098 105.193 43.8038 105.189 43.4764H111.482C111.767 43.4764 112 43.2431 112 42.9576V41.631C112 41.4936 111.945 41.3619 111.848 41.2647C111.751 41.1675 111.619 41.1128 111.482 41.1126Z\"/></mask><path d=\"M55.2148 42.0419C55.2723 42.0498 55.2848 42.0521 55.3408 42.0594C56.2775 42.1867 57.1978 42.3555 57.9023 42.6704C58.5553 42.9587 58.938 43.3235 59.2874 43.9738C59.8187 44.96 59.8534 46.3415 59.3732 47.3871C59.0145 48.1651 58.2271 48.8175 57.5083 49.1633C56.7618 49.5252 56.0263 49.6976 55.1827 49.7939C53.7074 49.9563 52.114 49.6507 50.7865 49.0086C50.0011 48.625 49.042 47.9645 48.5582 47.1136C48.2024 46.4902 48.2137 45.6791 48.6466 45.0866C49.3365 44.1423 50.8142 43.9344 51.9272 43.9738C52.7758 44.0067 54.3036 44.269 55.1093 44.5556C55.3326 44.6363 56.1562 44.9571 56.2999 45.1043C56.4011 45.2066 56.4667 45.3554 56.4213 45.4929C56.2372 46.0559 54.869 46.3527 54.4739 46.4123C53.4162 46.5743 52.8674 46.174 51.665 45.6993C51.3665 45.5824 50.9687 45.4527 50.6648 45.4246C50.1189 45.3726 49.4595 45.5255 49.3553 46.1214C49.3035 46.4285 49.6637 46.7158 49.9384 46.8365C50.5834 47.1136 51.1077 47.2132 51.7425 47.2217C53.6179 47.2526 55.7254 46.9439 57.2593 45.8571C57.4693 45.7072 57.6755 45.4879 57.6777 45.2113C57.6844 44.6529 56.7054 44.3115 56.7054 44.3115C55.6722 43.8807 53.763 43.6711 52.7795 43.5901C51.7474 43.5007 50.1235 43.3671 49.7336 43.3097C49.3321 43.2524 48.8961 43.1714 48.5484 43.0156C48.1992 42.8578 47.8575 42.5047 47.7561 42.1141C47.5763 41.4099 47.8057 40.5459 48.1968 39.9834C49.2217 38.5099 51.6225 37.9503 53.4161 37.728C55.1521 37.512 57.9585 37.5142 59.6636 38.4202C59.9268 38.5614 60.0613 38.6926 60.0063 38.974C59.8952 39.5024 59.4981 39.8429 59.0168 39.9921C58.5119 40.1528 57.4674 40.2154 57.0087 40.2443C54.953 40.3595 52.4689 40.2991 50.5109 40.833C50.3575 40.8768 50.0925 40.9483 50.0064 41.0445C49.6999 41.3772 50.5752 41.4722 50.7628 41.5103C50.8185 41.5236 50.8293 41.5255 50.8875 41.5318L55.2148 42.0419ZM42.9856 32.8757C42.9856 32.8757 43.3199 32.3742 43.6001 31.9938C44.1102 31.3009 45.0334 30.3401 45.7287 29.7452C45.9413 29.5635 46.1921 29.3577 46.1921 29.3577C46.1921 29.3577 45.7999 29.3982 45.5776 29.4437C45.0502 29.5463 44.2767 30.0604 43.8902 30.3926C43.2525 30.9385 42.5513 31.8259 42.8686 32.6144C42.9146 32.7258 42.9856 32.8757 42.9856 32.8757ZM46.5307 33.8244C47.5381 33.7549 48.4818 33.4649 49.3604 32.9775C50.2221 32.4954 51.4894 31.5552 51.358 30.45C51.318 30.0922 51.0838 29.8221 50.7881 29.6961C50.4039 29.5296 50.2034 29.5564 49.7126 29.7023C49.356 29.8067 49.1953 29.87 48.8585 30.0627C47.8702 30.6369 46.4689 31.8657 45.7082 32.8465C45.5326 33.0778 45.3548 33.3364 45.2156 33.5137C45.1278 33.623 45.0596 33.7234 45.0681 33.7501C45.0985 33.8613 46.1373 33.8511 46.5307 33.8244ZM43.9656 35.7084C43.8618 35.8184 43.7518 36.0834 43.6378 36.2752C43.5769 36.3779 43.4641 36.5101 43.3894 36.5631C43.1272 36.7559 42.9051 36.7649 42.6519 36.5421C42.297 36.2281 42.0917 35.7425 42.0771 35.2702C42.0695 35.0641 42.1049 34.836 42.0659 34.6622C42.0013 34.3688 41.7077 34.0666 41.5494 33.7861C41.3636 33.4557 41.2132 32.8795 41.1945 32.5075C41.1307 31.3476 41.7421 30.2791 42.5364 29.4364C43.3362 28.5842 44.3827 27.876 45.5208 27.3939C46.5965 26.9407 48.173 26.6318 49.3543 27.041C49.7389 27.1728 50.2747 27.5 50.5439 27.8429C50.6011 27.9141 50.6477 27.991 50.7064 28.0287C50.7589 28.0622 50.8963 28.0754 51.0056 28.0954C51.3824 28.1608 51.9249 28.446 52.1465 28.636C52.5917 29.0201 52.8356 29.3872 52.9484 29.92C53.1747 30.992 52.5574 32.1682 51.8542 32.884C50.6502 34.116 49.4612 34.9822 47.921 35.5852C47.2444 35.8495 46.1908 36.0964 45.4233 36.0273C45.1849 36.0075 44.9401 35.9447 44.708 35.9293C44.5895 35.9191 44.1565 35.8074 44.1102 35.7759C44.0528 35.7318 43.9786 35.6935 43.9656 35.7084ZM45.3413 38.0852C45.3882 38.0932 45.4604 38.1142 45.5226 38.1381C46.0626 38.3435 46.2847 38.8432 46.4178 39.3921C46.726 40.6667 46.8576 43.4866 46.9088 44.5903C46.9465 45.4188 46.9672 46.2339 47.0019 47.0527C47.0314 47.7462 47.0867 48.6682 46.9421 49.3179C46.8896 49.5516 46.7333 49.8233 46.5095 49.9625C46.2531 50.1266 45.6696 50.139 45.3488 50.0729C44.5582 49.9094 44.3014 49.4011 44.1885 48.6192C43.9203 46.7535 44.0495 43.092 44.2078 41.547C44.2604 41.0367 44.4526 39.4016 44.719 38.716C44.81 38.4848 45.0038 38.0192 45.3413 38.0852ZM21.2899 41.1893C21.2899 41.1893 20.1132 41.2726 19.3034 41.3625C18.273 41.4735 16.3371 41.8077 15.2196 42.2068C14.8844 42.3268 14.2035 42.6117 14.1443 42.9564C14.0822 43.3136 14.3039 43.593 14.5505 43.882C14.693 44.0499 15.5001 44.8262 15.7264 45.0149C16.675 45.8068 18.5984 47.0282 20.0151 47.6213C20.5018 47.8227 21.307 48.1109 21.307 48.1109C21.307 48.1109 21.2472 45.8184 21.2579 43.5601C21.2642 42.3688 21.2899 41.1893 21.2899 41.1893ZM42.865 42.1017C42.9324 42.7176 42.7741 43.8821 42.7467 44.0357C42.6965 44.3897 42.4296 45.2063 42.3853 45.306C42.1698 45.8023 41.9573 46.2089 41.7321 46.6145C41.3463 47.3089 40.4288 48.4097 39.8842 48.8809C37.8588 50.6315 34.7234 51.6282 32.0335 51.9566C30.2084 52.177 28.1111 52.1447 26.1771 51.7868C25.5115 51.6658 24.521 51.4375 24.521 51.4375C24.521 51.4375 24.5242 51.8335 24.4925 52.112C24.4771 52.2391 24.3815 52.5736 24.3278 52.6819C24.1872 52.9724 23.9563 53.1223 23.6206 53.1868C23.2154 53.262 22.7857 53.287 22.4113 53.127C21.7965 52.8683 21.5759 52.2932 21.4687 51.6299C21.3821 51.0994 21.2914 50.1772 21.2914 50.1772C21.2914 50.1772 20.8315 49.9594 20.4481 49.7681C19.2703 49.1878 18.1517 48.4846 17.173 47.7615C16.9019 47.5591 15.7371 46.5836 15.48 46.3414C14.7591 45.657 14.1105 44.9761 13.6172 44.1024C13.2336 43.4198 13.1232 42.814 13.4149 42.0908C13.8172 41.0827 15.2624 40.3237 16.2516 39.8912C16.9776 39.5707 19.2351 38.8335 20.1729 38.6969C20.6158 38.6335 21.3029 38.5105 21.3451 38.4831C21.3623 38.4698 21.3743 38.4586 21.3868 38.4444C21.4084 38.4139 21.4449 37.416 21.4378 37.051C21.4287 36.6921 21.7035 34.3348 21.7918 33.8363C21.8378 33.5668 22.042 32.5291 22.2504 32.2567C22.3867 32.0726 22.6278 32.0875 22.8244 32.2083C23.8999 32.8771 24.2267 35.1967 24.3067 36.3768C24.3545 37.0959 24.3783 38.1775 24.3783 38.1775C24.3783 38.1775 25.6122 38.141 26.3712 38.1625C27.1087 38.1797 27.9217 38.2961 28.6873 38.4181C29.6673 38.5752 31.5777 38.9919 32.6734 39.5474C33.5756 40.0048 34.42 40.7754 34.6937 41.591C34.9478 42.3386 34.9098 42.856 34.5226 43.5308C34.0872 44.2927 33.2638 44.859 32.4289 44.9063C32.1804 44.9206 31.2452 44.7964 30.9575 44.5736C30.8446 44.4848 30.8504 44.3245 30.9319 44.2158C30.9628 44.1777 31.3999 43.9452 31.6579 43.8096C31.7798 43.7445 31.8931 43.6645 31.9953 43.5715C32.2096 43.3827 32.4025 43.1749 32.381 42.9313C32.3514 42.6152 32.0168 42.4202 31.6979 42.2948C30.2018 41.7004 27.2146 41.207 25.7711 41.1216C25.2061 41.0885 24.4024 41.0601 24.4024 41.0601L24.5723 49.0312C24.5723 49.0312 25.2367 49.1578 25.7604 49.2427C26.0608 49.2882 27.3339 49.4028 27.6722 49.4112C30.2481 49.4792 33.1231 49.2485 35.487 48.133C36.5248 47.6446 37.4769 47.0365 38.1977 46.2134C39.1478 45.1242 39.6453 43.6335 39.5136 42.0766C39.3693 40.3762 38.1726 38.3576 37.2169 37.1286C34.6919 33.8814 30.3637 31.2102 26.5559 29.6442C22.6684 28.0465 18.8262 27.1273 14.7004 26.9734C13.6368 26.934 11.3177 26.9876 10.1455 27.3119C9.97801 27.3591 9.80922 27.4155 9.65374 27.4504C9.53092 27.4805 9.33737 27.5618 9.28423 27.6048C9.26339 27.6223 9.24383 27.6413 9.22568 27.6615C9.22568 27.6615 9.29796 27.7015 9.36701 27.7307C9.49119 27.7849 10.0139 27.8173 10.2844 27.8668C10.5264 27.9124 10.7784 28.0395 10.8781 28.2168C10.9729 28.3854 10.9847 28.5183 10.8715 28.6589C10.6059 28.9819 9.60611 28.9274 9.16588 28.8578C8.70838 28.7849 8.13878 28.6449 8.03415 28.2465C7.91278 27.7774 8.13566 27.3175 8.37641 26.8924C8.86012 26.0418 9.55296 25.5993 10.5676 25.3223C12.0087 24.9257 13.8284 24.6485 15.1892 24.5965C18.2693 24.4801 21.1844 25.0187 24.1687 25.9248C25.8767 26.4412 28.1128 27.3078 29.7498 28.0961C30.9245 28.6624 32.7753 29.704 33.815 30.3847C34.1429 30.6011 36.0618 32.011 36.3598 32.2589C36.9816 32.7672 37.7949 33.4979 38.3839 34.0823C39.5233 35.2114 40.9405 36.9422 41.629 38.3159C41.7947 38.6449 41.923 38.9685\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Logo for Qdrant\nDESCRIPTION: SVG vector graphic for Qdrant company logo with text and geometric shapes pattern.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_11\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_1629_8448)\"><path d=\"M49.9057 24.1184V39.4738H47.2398V27.4241H47.2043L42.4412 39.4738H40.664L35.7943 27.4241H35.7588V39.4738H33.3062V24.1184H37.145L41.5526 35.4928H41.6237L46.2801 24.1184H49.9057Z\" fill=\"#B4BACC\"/></g></svg>\n```\n\n----------------------------------------\n\nTITLE: Query Response Format\nDESCRIPTION: Shows the structure of the response returned by Qdrant after performing a search query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/modern-sparse-neural-retrieval.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npoints=[ScoredPoint(\n  id=18, \n  version=0, \n  score=9.6779785, \n  payload={\n    'movie_name': 'This Is Spinal Tap', \n    'movie_watch_time_min': 82, \n    'movie_description': \"Spinal Tap, one of England's loudest bands, \n    is chronicled by film director Marty DiBergi on what proves to be a fateful tour.\"\n  }, \n  vector={\n    'film_description': SparseVector(\n      indices=[1010, 2001, ..., 25316, 25517], \n      values=[0.49717945, 0.19760133, ..., 1.2124698, 0.58689135])\n  }, \n  shard_key=None, \n  order_value=None\n)]\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Go\nDESCRIPTION: This snippet shows how to initialize a Qdrant client in Go, connecting to a Qdrant Cloud instance. It requires the `github.com/qdrant/go-client/qdrant` library. The configuration includes the host, port, API key, and TLS setting.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart-cloud.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost:   \"xyz-example.eu-central.aws.cloud.qdrant.io\",\n\tPort:   6334,\n\tAPIKey: \"<your-api-key>\",\n\tUseTLS: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video Player for Qdrant Hybrid Cloud Demo in HTML\nDESCRIPTION: An HTML iframe embedding a YouTube video that demonstrates the Qdrant Hybrid Cloud capabilities. The video is embedded with specific security attributes including frameborder settings, allowed features, and referrer policy configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/hybrid-cloud/hybrid-cloud-video.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://www.youtube.com/embed/BF02jULGCfo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Vector Collection with Float16 Datatypes\nDESCRIPTION: This YAML configuration sets up a Qdrant collection with 128-dimensional vectors using cosine distance. It specifies Float16 as the datatype for both dense and sparse text vectors to optimize memory usage without significantly impacting search quality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/datatype-float16-sparse-and-dense/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvectors:\n  size: 128\n  distance: Cosine\n  datatype: Float16\nsparse_vectors:\n  text:\n    datatype: Float16\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Creating Collection with Sparse Vectors in Python\nDESCRIPTION: This snippet establishes a connection to a Qdrant server and creates a new collection with sparse vector configuration. It specifies the collection name and sets up sparse vector parameters with in-memory indexing.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/sparse-vector-index-on-disk/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config={},\n    sparse_vectors_config={\n        \"text\": models.SparseVectorParams(\n            index=models.SparseIndexParams(on_disk=False),\n        )\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Vectors from a Qdrant Collection\nDESCRIPTION: This code shows how to delete vectors from a Qdrant collection. It specifies the collection name and a list of point IDs to be removed from the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-a-vector-database.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient.delete(\n    collection_name='data_collection',\n    points_selector=[point_id_1, point_id_2]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Deleting Points with Filter in Go\nDESCRIPTION: This code sets up a connection to a Qdrant server and deletes points from a collection that match a specific filter. It initializes the client with connection parameters (localhost:6334) and then performs a deletion operation targeting points where the 'color' field is 'red'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-points/by-filter/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Delete(context.Background(), &qdrant.DeletePoints{\n\tCollectionName: \"{collection_name}\",\n\tPoints: qdrant.NewPointsSelectorFilter(\n\t\t&qdrant.Filter{\n\t\t\tMust: []*qdrant.Condition{\n\t\t\t\tqdrant.NewMatch(\"color\", \"red\"),\n\t\t\t},\n\t\t},\n\t),\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying with Qdrant Go Client\nDESCRIPTION: This snippet demonstrates how to initialize a Qdrant client and perform a vector similarity search query. It shows connecting to a Qdrant server running on localhost:6334 and executing a query with specific vector values and quantization parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-ignored-quantization/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tParams: &qdrant.SearchParams{\n\t\tQuantization: &qdrant.QuantizationSearchParams{\n\t\t\tIgnore: qdrant.PtrOf(false),\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Batch Update Response in Qdrant API\nDESCRIPTION: This snippet illustrates the response format for a batch update operation when the 'wait' parameter is set to false or not specified. It acknowledges the receipt of the update request.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/points.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": {\n    \"operation_id\": 123,\n    \"status\": \"acknowledged\"\n  },\n  \"status\": \"ok\",\n  \"time\": 0.000206061\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Section Delimiter in YAML\nDESCRIPTION: YAML front matter that defines a 'Support' section delimiter for documentation pages. It sets the title, type, weight for ordering, and build configurations to exclude this file from sitemaps and prevent rendering.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/dl-support.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#Delimiter files are used to separate the list of documentation pages into sections.\ntitle: \"Support\"\ntype: delimiter\nweight: 30 # Change this weight to change order of sections\nsitemapExclude: True\n_build:\n  publishResources: false\n  render: never\npartition: qdrant\n```\n\n----------------------------------------\n\nTITLE: Producing Messages to Fluvio Topic\nDESCRIPTION: Command to start producing messages to the Fluvio topic that will be streamed to Qdrant collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/fluvio.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nfluvio produce topic-name\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Collection in C#\nDESCRIPTION: Creates a new Qdrant client connection and configures a collection with 768-dimensional vectors using cosine distance. Sets up HNSW index configuration with payload M=16 for similarity search optimization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/with-disabled-global-hnsw/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine },\n\thnswConfig: new HnswConfigDiff { PayloadM = 16, M = 0 }\n);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Qdrant and Performing Vector Similarity Search in Java\nDESCRIPTION: This code initializes a connection to a Qdrant vector database running on localhost and performs a vector similarity search query. The query searches for vectors nearest to the specified coordinates [0.2, 0.1, 0.9, 0.7], retrieves both payload and vector data, and limits the results to 10 items with an offset of 100.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-offset/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.WithVectorsSelectorFactory;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.WithPayloadSelectorFactory.enable;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setWithPayload(enable(true))\n                .setWithVectors(WithVectorsSelectorFactory.enable(true))\n                .setLimit(10)\n                .setOffset(100)\n                .build())\n        .get();\n```\n\n----------------------------------------\n\nTITLE: Basic Distance Matrix Calculation with Pairwise Format\nDESCRIPTION: Example of using the distance matrix API with sample=100 and limit=10 to calculate distances between points. Returns results in pairwise format as a list of point id pairs with their scores.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/explore.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/distance-matrix/basic/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Kubernetes Secret\nDESCRIPTION: This shell snippet retrieves the value of a Kubernetes secret using kubectl, and decodes it from base64. It's useful for accessing sensitive information like API keys stored in a Kubernetes cluster.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/hybrid-cloud-cluster-creation.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secret qdrant-api-key -o jsonpath=\"{.data.api-key}\" --namespace the-qdrant-namespace | base64 --decode\n```\n\n----------------------------------------\n\nTITLE: Example API Response\nDESCRIPTION: Sample JSON response from the search pipeline API endpoint\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"llm\": {\n    \"replies\": [\n      \"\\n\\nAnswer: You can remove an application running in OpenShift by right-clicking on the circular graphic representing the application in Topology view and selecting the Delete Application text from the dialog that appears when you click the graphic's outer ring. Alternatively, you can use the oc CLI tool to delete an installed application using the oc delete all command.\"\n    ],\n    \"meta\": [\n      {\n        \"model\": \"mistralai/Mistral-7B-Instruct-v0.1\",\n        \"index\": 0,\n        \"finish_reason\": \"eos_token\",\n        \"usage\": {\n          \"completion_tokens\": 75,\n          \"prompt_tokens\": 642,\n          \"total_tokens\": 717\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lambda Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows the necessary dependencies in Cargo.toml for interfacing with AWS Lambda, including tokio for async runtime and lambda_http for handling HTTP requests.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/serverless.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntokio = { version = \"1\", features = [\"macros\"] }\nlambda_http = { version = \"0.8\", default-features = false, features = [\"apigw_http\"] }\nlambda_runtime = \"0.8\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Parameters with Oversampling and Rescoring in Qdrant (Python)\nDESCRIPTION: This snippet demonstrates how to set up search parameters in Qdrant using the Python client. It enables oversampling and rescoring for improved search accuracy with binary quantization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/binary-quantization.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient.search(\n    collection_name=\"{collection_name}\",\n    query_vector=[0.2, 0.1, 0.9, 0.7, ...],\n    search_params=models.SearchParams(\n        quantization=models.QuantizationSearchParams(\n            ignore=False,\n            rescore=True,\n            oversampling=2.0,\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Loading ColPali Model and Processor\nDESCRIPTION: Initializes ColPali VLLM model and processor with configurable backend options for different hardware setups (GPU, CPU, or Apple Silicon).\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/pdf-retrieval-at-scale.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncolpali_model = ColPali.from_pretrained(\n        \"vidore/colpali-v1.3\",\n        torch_dtype=torch.bfloat16,\n        device_map=\"mps\",  # Use \"cuda:0\" for GPU, \"cpu\" for CPU, or \"mps\" for Apple Silicon\n    ).eval()\n\ncolpali_processor = ColPaliProcessor.from_pretrained(\"vidore/colpali-v1.3\")\n```\n\n----------------------------------------\n\nTITLE: Converting Embeddings to Qdrant Points in TypeScript\nDESCRIPTION: This TypeScript snippet defines a function to convert embeddings into Qdrant points, associating each embedding with its respective text document.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction convertToQdrantPoints(embeddings, texts) {\n    return embeddings.data.map((data, i) => {\n        return {\n            id: i,\n            vector: data.embedding,\n            payload: {\n                text: texts[i]\n            }\n        };\n    });\n}\n\nconst embeddings = await getEmbeddings(PROJECT_ID, EMBEDDING_MODEL, DOCUMENTS);\nconst points = convertToQdrantPoints(embeddings, DOCUMENTS);\n```\n\n----------------------------------------\n\nTITLE: Displaying Mighty Model Information in JSON\nDESCRIPTION: Shows the JSON output when accessing the Mighty docker container, providing information about the loaded sentence transformer model.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/mighty.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"sentence-transformers/all-MiniLM-L6-v2\",\n  \"architectures\": [\n    \"BertModel\"\n  ],\n  \"model_type\": \"bert\",\n  \"max_position_embeddings\": 512,\n  \"labels\": null,\n  \"named_entities\": null,\n  \"image_size\": null,\n  \"source\": \"https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Perform a Search by Text - Python\nDESCRIPTION: This snippet demonstrates how to submit a search query using text by generating an embedding for the text input and querying points in Qdrant.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntext_segment = twelvelabs_client.embed.create(\n    model_name=\"Marengo-retrieval-2.7\",\n    text=\"<YOUR_QUERY_TEXT>\",\n).text_embedding.segments[0]\n\nqdrant_client.query_points(\n    collection_name=collection_name,\n    query=text_segment.embeddings_float,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing WebP Conversion Tool for Article Preview Images\nDESCRIPTION: Shell command to install the cwebp tool, which is required for generating WebP format images used in article previews. Uses a script from the node-webp project.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s https://raw.githubusercontent.com/Intervox/node-webp/latest/bin/install_webp | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Configuring 404 Error Page with YAML\nDESCRIPTION: YAML configuration for a 404 error page that displays an error message, a galaxy-themed image with mobile version support, and two navigation buttons directing users to the home page or Discord support.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/not-found.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: Oops! We can't find the page you were looking for.\nimage:\n  src: /img/404-galaxy.svg\n  mobileSrc: /img/404-galaxy-mobile.svg\n  alt: Galaxy\nhomeButton:\n  link: /\n  text: Go to Home\nsupportButton:\n  link: https://discord.gg/qdrant\n  text: Get Support\nsitemapExclude: True\n---\n```\n\n----------------------------------------\n\nTITLE: Article Metadata Configuration in YAML\nDESCRIPTION: YAML frontmatter example for configuring article metadata. Includes required and optional parameters for controlling how the article appears on the site and in social media previews.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Here goes the title of the article #required\nshort_description: Short description of the article\ndescription: This is a longer description of the article, you can get a little bit more wordly here. Try to keep it under 140 characters. #required\nsocial_preview_image: /articles_data/cars-recognition/social_preview.jpg # This image will be used in social media previews, should be 1200x630px. Required.\nsmall_preview_image: /articles_data/cars-recognition/icon.svg # This image will be used in the list of articles at the footer, should be 40x40px\npreview_dir: /articles_data/cars-recognition/preview # This directory contains images that will be used in the article preview. They can be generated from one image. Read more below. Required.\nweight: 10 # This is the order of the article in the list of articles at the footer. The lower the number, the higher the article will be in the list.\nauthor: Yusuf Sarıgöz # Author of the article. Required.\nauthor_link: https://medium.com/@yusufsarigoz # Link to the author's page. Required.\ndate: 2022-06-28T13:00:00+03:00 # Date of the article. Required.\ndraft: false # If true, the article will not be published\nkeywords: # Keywords for SEO\n  - vector databases comparative benchmark\n  - benchmark\n  - performance\n  - latency\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Landing Page Build Settings in YAML\nDESCRIPTION: YAML configuration block that defines the page metadata and build parameters for a Hugo website landing page about data analysis. Specifies the page title, description, URL slug and cascading build settings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/data-analysis/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Advanced Data Analysis with Anomaly Detection & Entity Matching\ndescription: Qdrant revolutionizes data analysis and anomaly detection with advanced entity matching techniques. Learn more today.\nurl: data-analysis-anomaly-detection\nbuild:\n  render: always\ncascade:\n- build:\n    list: local\n    publishResources: false\n    render: never\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with Timestamp Ordering in Python\nDESCRIPTION: Example showing how to scroll through a Qdrant collection with pagination using timestamp-based ordering. The scroll method retrieves 15 records at a time sorted by the timestamp field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-order-by-simple/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    limit=15,\n    order_by=\"timestamp\", # <-- this!\n)\n```\n\n----------------------------------------\n\nTITLE: Qdrant Index Creation via HTTP PUT\nDESCRIPTION: This snippet demonstrates how to create an index for a specific field within a Qdrant collection using the HTTP PUT method. The request body is a JSON object that specifies the field name to index and its schema (in this case, \"keyword\").\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/simple-keyword/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/index\n{\n    \"field_name\": \"name_of_the_field_to_index\",\n    \"field_schema\": \"keyword\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Points from Qdrant Collection using HTTP POST\nDESCRIPTION: This HTTP request demonstrates how to query vector points from a named collection in Qdrant. The query includes specific vector indices (1, 3, 5, 7) and their corresponding values (0.1, 0.2, 0.3, 0.4), using the \"text\" search method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/sparse-vectors/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": {\n        \"indices\": [1, 3, 5, 7],\n        \"values\": [0.1, 0.2, 0.3, 0.4]\n    },\n    \"using\": \"text\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Qdrant Client in Rust\nDESCRIPTION: This snippet shows how to import the Qdrant client, create a connection to a local Qdrant server, and list available aliases. The client is configured with the server URL and built before making an asynchronous API call.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/list-all/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.list_aliases().await?;\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Build Settings with Cascade for Qdrant Landing Page in YAML\nDESCRIPTION: This YAML configuration sets up the build behavior for the Qdrant landing page in Hugo. It disables listing, rendering, and resource publishing for both the current page and all child pages through the cascade property.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  list: never\n  publishResources: false\n  render: never\ncascade:\n- build:\n    list: never\n    publishResources: false\n    render: never\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: This YAML snippet defines metadata for a landing page. It includes settings to mark the page as not a draft, specify the image path, set the name to \"Hewlett Packard Enterprise\", and exclude it from the sitemap.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/stack/hp-enterprise.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndraft: false\nimage: \"content/images/logos/hp-enterprise-logo-mono\"\nname: \"Hewlett Packard Enterprise\"\nsitemapExclude: True\n---\n```\n\n----------------------------------------\n\nTITLE: Executing Negated Scroll Query with Qdrant Client in C#\nDESCRIPTION: This snippet initializes a Qdrant client and performs a scroll query with a negated condition. It demonstrates how to use the MatchKeyword function and combine conditions with logical operators.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-must-not-filter/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\n// The ! operator negates the condition(must not)\nawait client.ScrollAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: !(MatchKeyword(\"city\", \"London\") & MatchKeyword(\"color\", \"red\"))\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Listing Collections in Rust\nDESCRIPTION: Creates a connection to a local Qdrant server and queries existing collections. Uses the qdrant_client crate to establish connection on the default port 6334 and performs an asynchronous operation to list all collections.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/list-all-collections/simple/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.list_collections().await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Listing Snapshots in Go\nDESCRIPTION: Initializes a Qdrant client with local connection settings and performs a snapshot listing operation. The client connects to a Qdrant instance running on localhost:6334 and retrieves a list of full snapshots.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/list-full-snapshots/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.ListFullSnapshots(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Deleting Snapshot\nDESCRIPTION: Demonstrates how to create a new Qdrant client connection and delete a snapshot from a specified collection. The code establishes a connection to a local Qdrant instance on port 6334 and performs a snapshot deletion operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/delete-collection-snapshot/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.DeleteSnapshot(context.Background(), \"{collection_name}\", \"{snapshot_name}\")\n```\n\n----------------------------------------\n\nTITLE: Using Qdrant Client with gRPC in C#\nDESCRIPTION: This C# code snippet demonstrates how to use the Qdrant client with gRPC to interact with the Qdrant vector database. It includes necessary `using` statements and showcases the usage of `ValuesCount` method for creating a condition object to query for vectors having more than 2 comments.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/values-count/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nValuesCount(\"comments\", new ValuesCount { Gt = 2 });\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in C#\nDESCRIPTION: This code snippet demonstrates how to initialize a Qdrant client in C#. It creates a new instance of the QdrantClient, specifying the host and port of the Qdrant instance. This client can then be used to interact with the Qdrant database.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-offset/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Client - Python\nDESCRIPTION: Install the Qdrant client Python package using pip.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-colbert.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npip install qdrant-client\n```\n\n----------------------------------------\n\nTITLE: Streaming Hugging Face Dataset in Python\nDESCRIPTION: Demonstrates how to stream the dataset without downloading it entirely, using the streaming option in the load_dataset function.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/huggingface-datasets.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datasets import load_dataset\n\ndataset = load_dataset(\n    \"Qdrant/arxiv-titles-instructorxl-embeddings\", split=\"train\", streaming=True\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Payload Data in Qdrant using Go Client\nDESCRIPTION: Demonstrates how to establish a connection to a Qdrant database and set payload data for specific points filtered by conditions. The code initializes a client with local connection parameters and updates point metadata using a filter to match specific color values.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/set-payload/by-filter/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.SetPayload(context.Background(), &qdrant.SetPayloadPoints{\n    CollectionName: \"{collection_name}\",\n    Payload: qdrant.NewValueMap(\n        map[string]any{\"property1\": \"string\", \"property2\": \"string\"}),\n    PointsSelector: qdrant.NewPointsSelectorFilter(&qdrant.Filter{\n        Must: []*qdrant.Condition{\n            qdrant.NewMatch(\"color\", \"red\"),\n        },\n    }),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG Logo for Qdrant with Paths\nDESCRIPTION: SVG implementation of the Qdrant logo using path elements to create the stylized text. The logo dimensions are 120x64 pixels with paths defined using SVG's path commands and fill attributes with color #B4BACC.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_15\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_1629_8479)\"><path d=\"M26.5256 33.7923C27.5879 35.3003 28.638 36.7961 29.7186 38.3346C29.5599 38.3469 29.4622 38.3652 29.3706 38.3652C28.4548 38.3652 27.539 38.3591 26.6232 38.3713C26.3729 38.3713 26.2325 38.2919 26.0982 38.0843C25.274 36.7961 24.4376 35.5262 23.6133 34.238C23.4668 34.006 23.3081 33.9145 23.0272 33.9145C22.0626 33.9328 21.0919 33.9328 20.1272 33.9145C19.7792 33.9083 19.6632 34.006 19.6694 34.3601C19.6877 35.5445 19.6632 36.729 19.6877 37.9073C19.6938 38.2858 19.5717 38.3835 19.2115 38.3713C18.4483 38.3469 17.6851 38.353 16.922 38.3713C16.635 38.3713 16.519 38.3041 16.519 37.9927C16.5251 33.9755 16.5251 29.9522 16.519 25.9349C16.519 25.6663 16.5862 25.5503 16.8854 25.5564C19.6816 25.5686 22.4839 25.5564 25.2801 25.593C25.9394 25.6052 26.6171 25.7579 27.2582 25.9471C28.4365 26.289 29.1569 27.0888 29.3828 28.3037C29.5843 29.3905 29.5965 30.4833 29.2607 31.5456C28.8944 32.7239 28.1312 33.481 26.8736 33.6763C26.7881 33.6886 26.7026 33.7069 26.611 33.7313C26.5988 33.7313 26.5927 33.7435 26.5256 33.7985V33.7923ZM24.8955 31.6677C25.8845 31.6494 26.2997 31.277 26.4523 30.3002C26.7087 28.6823 26.1287 27.9435 24.5047 27.9191C23.015 27.8947 21.5315 27.9191 20.0418 27.9069C19.7426 27.9069 19.6755 28.0351 19.6816 28.2976C19.6877 29.305 19.6938 30.3063 19.6816 31.3136C19.6816 31.625 19.8037 31.6982 20.0906 31.6921C20.8904 31.6799 21.4955 31.6921 22.3014 31.6921C23.1668 31.6921 24.0297 31.6809 24.8955 31.6677Z\" fill=\"#B4BACC\"/><path d=\"M13.9664 25.5564V38.3652C13.2337 38.3652 12.5255 38.3652 11.8173 38.3652C11.1498 38.3652 10.8161 38.0375 10.8161 37.3823C10.8161 36.1612 10.81 34.9402 10.8161 33.7191C10.8161 33.4077 10.7245 33.304 10.407 33.304C8.12975 33.3162 5.85249 33.3162 3.57523 33.304C3.22723 33.304 3.14786 33.42 3.15397 33.7435C3.17228 35.1172 3.16007 36.4909 3.16007 37.8646C3.16007 38.0111 3.16007 38.1637 3.16007 38.3408H0.0219727V25.593H3.16007C3.16007 25.7518 3.16007 25.8983 3.16007 26.0448C3.16007 27.4673 3.16618 28.896 3.16007 30.3185C3.16007 30.6299 3.25165 30.7398 3.56913 30.7336C5.84638 30.7214 8.12364 30.7214 10.4009 30.7336C10.755 30.7336 10.8283 30.5993 10.8222 30.2819C10.81 28.8349 10.8222 27.3819 10.81 25.9349C10.81 25.6419 10.8893 25.5381 11.1946 25.5442C12.1104 25.5625 13.0201 25.5503 13.9664 25.5503V25.5564Z\" fill=\"#B4BACC\"/><path d=\"M31.1949 37.8707C31.4147 37.0403 31.6222 36.2345 31.8298 35.4469C32.8616 35.63 33.8385 35.8437 34.8336 35.9658C36.5675 36.1795 38.3075 36.1612 40.0475 36.0086C40.1635 35.9964 40.2734 35.9719 40.3833 35.9475C41.2136 35.7705 41.4944 35.3797 41.409 34.5372C41.3479 33.9511 41.1464 33.7069 40.5664 33.6275C39.5957 33.4993 38.6189 33.426 37.6481 33.3039C36.2989 33.133 34.9496 32.9559 33.6126 32.7362C32.3305 32.5286 31.5673 31.7288 31.2865 30.4711C31.0728 29.5309 31.0606 28.5785 31.2865 27.6383C31.5185 26.692 32.074 25.9838 33.0142 25.7212C33.9239 25.4709 34.8702 25.2756 35.8104 25.2145C38.1427 25.0619 40.4626 25.2023 42.7277 25.8494C42.8498 25.8861 42.9658 25.9227 43.1368 25.9777C42.9475 26.753 42.7704 27.5162 42.569 28.2671C42.5506 28.3343 42.3248 28.4075 42.2149 28.3831C40.4138 27.9374 38.5822 27.7909 36.7323 27.8337C36.0119 27.852 35.2854 27.9008 34.565 27.9741C33.5942 28.0718 33.3622 28.6273 33.5698 29.5492C33.6553 29.9339 33.9728 30.0926 34.333 30.1353C35.3892 30.2635 36.4515 30.3856 37.5138 30.5139C38.8264 30.6726 40.1391 30.8252 41.4456 30.9901C42.5995 31.1366 43.3077 31.8021 43.5702 32.9315C43.8083 33.9511 43.8144 34.9768 43.5824 35.9964C43.2894 37.2785 42.4591 38.0294 41.1953 38.3469C39.5591 38.7559 37.8984 38.762 36.2317 38.7193C34.6505 38.6766 33.0936 38.469 31.5734 37.9989C31.4574 37.9622 31.3414 37.9195 31.1949 37.8646V37.8707Z\" fill=\"#B4BACC\"/><path d=\"M81.8382 38.341C79.9883 37.8953 78.755 36.717 78.1506 34.9159C77.5401 33.0966 77.5218 31.2406 78.0285 29.3968C78.639 27.1867 80.1104 25.8741 82.3571 25.4284C83.9628 25.1109 85.5624 25.1109 87.162 25.5017C89.3843 26.045 90.7397 27.4492 91.2342 29.6715C91.6127 31.3749 91.5883 33.0844 91.1304 34.7694C90.5443 36.9307 89.0546 38.109 86.8995 38.4997C86.1668 38.634 85.7468 38.7866 84.5123 38.7866C83.5537 38.7866 82.7149 38.5558 81.8382 38.341ZM84.5917 26.4846C84.1216 26.5273 83.6515 26.5395 83.1875 26.6128C81.2765 26.8936 79.9334 27.8644 79.4327 29.7997C79.0481 31.2955 79.0603 32.7974 79.5182 34.281C79.9639 35.7157 80.898 36.6987 82.3633 37.1138C83.9201 37.5534 85.483 37.5412 87.0277 37.0772C88.3952 36.662 89.2927 35.7523 89.6712 34.3665C90.1169 32.7486 90.1047 31.1185 89.6468 29.5067C89.2683 28.1757 88.4136 27.2539 87.0704 26.8875C86.7684 26.8045 85.196 26.4297 84.5917 26.4846Z\" fill=\"#B4BACC\"/><path d=\"M72.2049 33.1821C73.4015 34.9282 74.5432 36.601 75.7337 38.341C75.1659 38.341 74.6775 38.3593 74.1891 38.3288C74.0731 38.3227 73.9449 38.164 73.8655 38.048C72.8703 36.5705 71.8813 35.093 70.9044 33.6033C70.7396 33.353 70.5626 33.2431 70.2573 33.2492C68.9752 33.2676 67.687 33.2553 66.4049 33.2553C66.067 33.2553 65.8961 33.4202 65.892 33.7499C65.892 35.1235 65.892 36.4972 65.892 37.8709C65.892 38.0113 65.892 38.1456 65.892 38.341C65.428 38.341 65.0007 38.3471 64.5794 38.3349C64.5122 38.3349 64.4268 38.2311 64.3962 38.1517C64.3657 38.0602 64.384 37.9503 64.384 37.8465C64.384 33.9147 64.384 29.989 64.3779 26.0573C64.3779 25.691 64.4451 25.5566 64.8541 25.5566C67.1314 25.5811 69.4087 25.5566 71.6859 25.575C72.2537 25.575 72.8276 25.6543 73.3832 25.7886C74.3661 26.0267 75.0499 26.6617 75.3491 27.6324C75.7276 28.8657 75.7337 30.1173 75.3124 31.3444C74.9461 32.4189 74.2135 33.06 73.0291 33.0905C72.791 33.0966 72.5529 33.1393 72.211 33.176L72.2049 33.1821ZM72.0767 32.0404C73.2611 32.0038 73.8472 31.5215 74.067 30.4408C74.2074 29.757 74.2074 29.0794 74.0303 28.4017C73.7922 27.4798 73.2367 26.9425 72.2903 26.9181C70.2573 26.8632 68.2242 26.8754 66.1912 26.8571C65.9531 26.8571 65.892 26.967 65.892 27.1867C65.892 28.7008 65.8981 30.2088 65.892 31.7229C65.892 31.9916 65.9775 32.077 66.2461 32.0709C67.223 32.0587 67.3811 32.0709 68.358 32.0709C69.5972 32.0524 70.838 32.0716 72.0767 32.0404Z\" fill=\"#B4BACC\"/><path d=\"M108.763 31.9425C108.763 29.9583 108.769 27.9741 108.757 25.9899C108.757 25.648 108.86 25.5625 109.19 25.5625C111.516 25.5747 113.842 25.5625 116.168 25.5808C116.657 25.5808 117.157 25.648 117.64 25.7579C118.763 26.0143 119.508 26.7103 119.801 27.8336C120.112 29.0181 120.106 30.2025 119.709 31.3625C119.374 32.3515 118.696 32.962 117.64 33.0903C117.048 33.1635 116.455 33.2368 115.857 33.2429C114.154 33.2612 112.45 33.2551 110.747 33.2429C110.405 33.2429 110.289 33.3284 110.289 33.6886C110.307 35.1111 110.289 36.5336 110.307 37.9622C110.307 38.2736 110.21 38.3713 109.917 38.3469C109.691 38.3286 109.459 38.3224 109.233 38.3469C108.873 38.3896 108.75 38.2675 108.757 37.889C108.775 35.9048 108.763 33.9206 108.763 31.9364V31.9425ZM116.016 32.0646C116.168 32.0646 116.321 32.0585 116.474 32.0524C117.554 32.0035 118.153 31.5945 118.403 30.7031C118.623 29.9155 118.635 29.1219 118.409 28.3343C118.159 27.4551 117.603 26.9423 116.687 26.924C114.654 26.869 112.621 26.8812 110.594 26.8629C110.35 26.8629 110.301 26.9789 110.301 27.1926C110.301 28.7067 110.313 30.2147 110.301 31.7288C110.301 32.0341 110.423 32.0829 110.686 32.0829C111.65 32.0707 112.221 32.0829 113.186 32.0829C114.151 32.0829 115.073 32.0646 116.016 32.0646Z\" fill=\"#B4BACC\"/><path d=\"M61.0812 26.1792C60.9468 26.5761 60.8125 26.9668 60.6843 27.3209C59.7869 27.0889 58.9382 26.8264 58.0713 26.6555C56.8624 26.4235 55.6475 26.4418 54.4386 26.7226C52.6071 27.1561 51.4898 28.2917 51.1113 30.1354C50.8549 31.3687 50.861 32.6142 51.1968 33.8352C51.734 35.8011 53.0955 36.8695 55.0492 37.2297C56.5755 37.5106 58.0591 37.3274 59.506 36.784C59.7685 36.6864 59.8479 36.5459 59.8418 36.2773C59.8296 34.9403 59.8418 33.6093 59.8296 32.2723C59.8296 31.9609 59.9151 31.8327 60.2386 31.8571C60.5195 31.8815 60.8003 31.8693 61.0751 31.8571C61.2948 31.851 61.3925 31.9243 61.3864 32.1624C61.3803 33.8413 61.3864 35.5203 61.3681 37.1992C61.3681 37.3396 61.2094 37.535 61.0751 37.6082C60.0066 38.176 58.8589 38.4874 57.6622 38.6278C56.3252 38.7866 54.9942 38.7255 53.6999 38.3226C51.5203 37.6388 50.1894 36.1491 49.6949 33.9329C49.3774 32.4982 49.3774 31.0512 49.701 29.6226C50.2627 27.15 51.8805 25.7824 54.3165 25.3611C56.5694 24.9704 58.7734 25.2635 60.9041 26.0877C60.9468 26.106 60.9896 26.1365 61.069 26.1731L61.0812 26.1792Z\" fill=\"#B4BACC\"/><path d=\"M95.5268 25.5747C95.5268 25.8006 95.5268 25.9655 95.5268 26.1242C95.5268 28.5907 95.5268 31.0573 95.5268 33.5238C95.5268 34.8608 95.9358 35.9842 97.163 36.6619C97.5904 36.9 98.0666 37.0709 98.5428 37.1869C99.5868 37.4311 100.637 37.4006 101.669 37.0953C103.378 36.5886 104.251 35.4225 104.257 33.6398C104.263 31.1244 104.257 28.6029 104.257 26.0876C104.257 25.7457 104.43 25.5747 104.776 25.5747C105.436 25.5747 105.765 25.9085 105.765 26.576C105.765 29.0303 105.765 31.4846 105.765 33.9389C105.765 34.3174 105.735 34.7021 105.692 35.0806C105.57 36.1795 104.99 36.9915 104.092 37.6021C103.219 38.1943 102.249 38.4995 101.211 38.6277C99.7272 38.8109 98.2681 38.7254 96.8577 38.1943C96.5952 38.0966 96.3449 37.9684 96.1007 37.8341C94.7636 37.1136 94.0615 35.972 94.0432 34.464C94.0127 31.6006 94.031 28.7434 94.0249 25.88C94.0249 25.6541 94.0921 25.5625 94.3302 25.5686C94.7087 25.5809 95.0872 25.5686 95.5329 25.5686L95.5268 25.5747Z\" fill=\"#B4BACC\"/></g><defs><clipPath id=\"clip0_1629_8479\"><rect width=\"120\" height=\"64\" fill=\"white\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Adding SEO Schema Directly in YAML Front Matter\nDESCRIPTION: This YAML snippet demonstrates how to add SEO schema directly to a page using the seo_schema parameter in the front matter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nseo_schema: {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Organization\",\n    \"name\": \"Qdrant\",\n    \"url\": \"https://qdrant.io\",\n    \"logo\": \"https://qdrant.io/images/logo.png\",\n    \"sameAs\": [\n      \"https://www.linkedin.com/company/qdrant\",\n      \"https://twitter.com/qdrant\"\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Query Points by ID in Qdrant Collection\nDESCRIPTION: HTTP POST endpoint for retrieving points from a Qdrant collection using a point ID. The request is made to the /collections/{collection_name}/points/query endpoint with a JSON body containing the point ID to query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/by-existing-id/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": \"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\" // <--- point id\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Collection with Qdrant Client in Go\nDESCRIPTION: This snippet shows how to delete a collection using the Qdrant client in Go. It requires the 'context' package to provide the context in which the operation is executed. The 'DeleteCollection' function is called with a background context and a placeholder for the collection name. The operation assumes that the client is properly configured and connected to the Qdrant server.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/delete-collection/simple/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"context\"\n\nclient.DeleteCollection(context.Background(), \"{collection_name}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Collection for Hybrid Search using HTTP\nDESCRIPTION: HTTP request example showing how to set up a Qdrant collection with both dense (jina.ai) and sparse (BM42) vector configurations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/bm42.md#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPUT collections/my-hybrid-collection\n{\n  \"vectors\": {\n    \"jina\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\"\n    }\n  },\n  \"sparse_vectors\": {\n    \"bm42\": {\n      \"modifier\": \"idf\" // <--- This parameter enables the IDF calculation\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Geospatial Polygon Condition in Rust\nDESCRIPTION: Constructs a geospatial polygon condition with an exterior boundary and an interior exclusion zone, defining a specific geographical region for filtering vector search results\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-poligon/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, GeoLineString, GeoPoint, GeoPolygon};\n\nCondition::geo_polygon(\n    \"location\",\n    GeoPolygon {\n        exterior: Some(GeoLineString {\n            points: vec![\n                GeoPoint {\n                    lon: -70.0,\n                    lat: -70.0,\n                },\n                GeoPoint {\n                    lon: 60.0,\n                    lat: -70.0,\n                },\n                GeoPoint {\n                    lon: 60.0,\n                    lat: 60.0,\n                },\n                GeoPoint {\n                    lon: -70.0,\n                    lat: 60.0,\n                },\n                GeoPoint {\n                    lon: -70.0,\n                    lat: -70.0,\n                },\n            ],\n        }),\n        interiors: vec![GeoLineString {\n            points: vec![\n                GeoPoint {\n                    lon: -65.0,\n                    lat: -65.0,\n                },\n                GeoPoint {\n                    lon: 0.0,\n                    lat: -65.0,\n                },\n                GeoPoint { lon: 0.0, lat: 0.0 },\n                GeoPoint {\n                    lon: -65.0,\n                    lat: 0.0,\n                },\n                GeoPoint {\n                    lon: -65.0,\n                    lat: -65.0,\n                },\n            ],\n        }],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: C# Qdrant Query Implementation\nDESCRIPTION: C# client implementation for querying Qdrant with majority consistency, using the official client library.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\tfilter: MatchKeyword(\"city\", \"London\"),\n\tsearchParams: new SearchParams { HnswEf = 128, Exact = false },\n\tlimit: 3,\n\treadConsistency: new ReadConsistency { Type = ReadConsistencyType.Majority }\n);\n```\n\n----------------------------------------\n\nTITLE: Making API Request to Search Pipeline\nDESCRIPTION: cURL command to query the deployed search pipeline with custom parameters\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-chatbot-red-hat-openshift-haystack.md#2025-04-21_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X 'POST' \\\n  'http://localhost:1416/search-pipeline' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"llm\": {\n  },\n  \"prompt_builder\": {\n    \"query\": \"How can I remove an application?\"\n  },\n  \"query_embedder\": {\n    \"text\": \"How can I remove an application?\"\n  },\n  \"retriever\": {\n    \"top_k\": 5\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Adding Filtered Search Capability\nDESCRIPTION: Demonstrates how to add filtering conditions to the vector search query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/neural-search-tutorial.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import Filter\n\n    ...\n\n    city_of_interest = \"Berlin\"\n\n    # Define a filter for cities\n    city_filter = Filter(**{\n        \"must\": [{\n            \"key\": \"city\", # We store city information in a field of the same name \n            \"match\": { # This condition checks if payload field have requested value\n                \"keyword\": city_of_interest\n            }\n        }]\n    })\n\n    search_result = self.qdrant_client.search(\n        collection_name=self.collection_name,\n        query_vector=vector,\n        query_filter=city_filter,\n        top=5\n    )\n    ...\n```\n\n----------------------------------------\n\nTITLE: Fetching Resharding Status via HTTP API\nDESCRIPTION: This snippet fetches the current status of resharding for a specific collection by sending a GET request to the Qdrant API. It helps to monitor the ongoing resharding operation and assess its progress.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/cloud/cluster-scaling.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /collections/{collection_name}/cluster\n```\n\n----------------------------------------\n\nTITLE: Updating Collection in Qdrant - TypeScript\nDESCRIPTION: This snippet demonstrates how to update a collection's configuration in Qdrant. It utilizes the Qdrant client to send an update request with an empty optimizers configuration for a specified collection. The collection name must be provided dynamically in place of '{collection_name}'.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/trigger-indexing/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.updateCollection(\"{collection_name}\", {\n  optimizers_config: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Consensus Checkpoint in Qdrant\nDESCRIPTION: This HTTP snippet illustrates how to create a consensus checkpoint by sending a POST request to the /cluster/recover endpoint. This API call can help maintain a consistent state across nodes in a Qdrant cluster.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_43\n\nLANGUAGE: http\nCODE:\n```\nPOST /cluster/recover\n```\n\n----------------------------------------\n\nTITLE: Overwriting Payload Data in Qdrant Collection using Java Client\nDESCRIPTION: Asynchronously overwrites payload properties for multiple points in a Qdrant collection. Sets two string properties ('property1' and 'property2') for points with IDs 0, 3, and 10. Uses the wait parameter to ensure operation completion.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/overwrite-payload/by-point-id/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.ValueFactory.value;\n\nclient\n    .overwritePayloadAsync(\n        \"{collection_name}\",\n        Map.of(\"property1\", value(\"string\"), \"property2\", value(\"string\")),\n        List.of(id(0), id(3), id(10)),\n        true,\n        null,\n        null)\n    .get();\n```\n\n----------------------------------------\n\nTITLE: Executing Scroll Query with Nested Filters in Qdrant using TypeScript\nDESCRIPTION: This code performs a scroll query on a Qdrant collection using complex nested filters. It filters for points that have a nested 'diet' object where 'food' is 'meat' and 'likes' is true, and also have an ID of 1.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-nested-clause-and-has-id/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must: [\n      {\n        nested: {\n          key: \"diet\",\n          filter: {\n            must: [\n              {\n                key: \"food\",\n                match: { value: \"meat\" },\n              },\n              {\n                key: \"likes\",\n                match: { value: true },\n              },\n            ],\n          },\n        },\n      },\n      {\n        has_id: [1],\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Points in Qdrant Collection using HTTP POST\nDESCRIPTION: HTTP POST request to query points in a specific Qdrant collection. The request includes a path parameter for the collection name and a JSON body containing the query parameters. The query object specifies the search criteria to match points in the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/random-sample/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": {\n        \"sample\": \"random\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Principal Index for Integer Values in Qdrant\nDESCRIPTION: Code snippet demonstrating how to create a principal index for integer values. This optimization is useful for time-related data where search requests are filtered primarily by a timestamp or other principal integer field.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/indexing.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/create-payload-index/integer-is-principal/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Delimiter for Integrations Section\nDESCRIPTION: YAML configuration that sets up a delimiter file used to mark the 'Integrations' section in documentation. The file specifies the title, type, weight for ordering, and various build parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/dl-integrations.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#Delimiter files are used to separate the list of documentation pages into sections.\ntitle: \"Integrations\"\ntype: delimiter\nweight: 17 # Change this weight to change order of sections\nsitemapExclude: True\n_build:\n  publishResources: false\n  render: never\npartition: build\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Go Client\nDESCRIPTION: Demonstrates how to create a new Qdrant client instance with basic configuration and list collections. The client is configured to connect to a local Qdrant server running on port 6334.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/list-all-collections/simple/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.ListCollections(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Converting Float32 Vectors to Qbit Vectors using Quantum Quantization in Text\nDESCRIPTION: This snippet demonstrates the formula for converting traditional float32 vectors into qbit vectors using a quantum quantization function Q. This conversion enables quantum entanglement between qbits, which is crucial for efficient vector search algorithms.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/quantum-quantization.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nqbit_vector = Q( float32_vector )\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Data Structure with SVG Logos in YAML\nDESCRIPTION: This code snippet defines a YAML structure for Qdrant's customer section, containing customer IDs, names, and SVG logo definitions. The logos are embedded directly as SVG markup within the YAML structure.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncustomers:\n- id: 0\n  name: Alphasense\n  logo: <svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M19.0737 40.3015H0V41.9809H19.0737V40.3015Z\" fill=\"#B4BACC\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M60.979 34.9029L62.2981 33.9427C63.178 35.302 64.5374 36.4618 66.4163 36.4618C68.1761 36.4618 69.4149 35.5015 69.4149 33.9829C69.4149 32.6235 68.4158 32.0637 66.9359 31.3833L65.2565 30.5838C63.6976 29.8245 61.8977 28.824 61.8977 26.625C61.8977 24.3054 63.9776 22.7867 66.3761 22.7867C68.4158 22.7867 70.0953 23.8259 71.014 25.3058L69.735 26.2661C68.9355 25.0661 67.6953 24.3871 66.336 24.3871C64.9766 24.3871 63.6963 25.0675 63.6963 26.546C63.6963 27.9053 64.7355 28.3848 66.0561 29.025L67.6953 29.8245C69.8542 30.8637 71.1345 31.9432 71.1345 33.9427C71.1345 36.4216 69.0948 38.0609 66.336 38.0609C64.0579 38.1024 62.0986 36.8623 60.979 34.9029ZM75.534 31.3847H82.4512C82.4111 29.345 80.9312 28.2254 79.2129 28.2254C77.3728 28.2656 75.9345 29.5044 75.534 31.3847ZM84.1307 32.9034H75.4938C75.7335 35.0623 77.3728 36.502 79.4928 36.502C80.8522 36.502 81.9316 35.902 82.8517 35.0221L83.8508 36.1819C82.7713 37.3417 81.2513 38.101 79.4928 38.101C76.2144 38.101 73.6952 35.6221 73.6952 32.3824C73.6952 29.1829 76.134 26.6638 79.2933 26.6638C82.0924 26.6638 84.2914 28.7035 84.2914 31.5815C84.2512 32.1843 84.1709 32.7039 84.1307 32.9034ZM96.3273 30.9843V37.8613H94.6077V31.1838C94.6077 29.4642 93.5684 28.2642 91.889 28.2642C90.2096 28.2642 89.0096 29.4642 89.0096 31.1838V37.8613H87.29V26.9451H88.889V28.1049C89.6886 27.225 90.8484 26.7054 92.2479 26.7054C94.8474 26.6652 96.3273 28.4651 96.3273 30.9843ZM98.9656 35.9824L100.045 34.8226C100.925 35.7828 101.845 36.502 103.204 36.502C104.364 36.502 105.284 35.9422 105.284 34.9431C105.284 33.9829 104.485 33.624 103.365 33.1833L102.326 32.7441C100.646 32.0637 99.6072 31.2642 99.6072 29.7053C99.6072 27.746 101.287 26.6666 103.286 26.6666C104.845 26.6666 106.085 27.3469 106.925 28.3862L105.886 29.4656C105.166 28.7062 104.206 28.2656 103.207 28.2656C102.168 28.2656 101.407 28.745 101.407 29.6249C101.407 30.3843 101.967 30.7044 103.167 31.224L104.166 31.6633C106.125 32.503 107.045 33.3427 107.045 34.9015C107.045 37.0202 105.245 38.101 103.207 38.101C101.285 38.1024 99.8455 37.1422 98.9656 35.9824ZM111.241 31.3847H118.158C118.118 29.345 116.638 28.2254 114.92 28.2254C113.081 28.2656 111.642 29.5044 111.241 31.3847ZM119.839 32.9034H111.202C111.442 35.0623 113.081 36.502 115.201 36.502C116.561 36.502 117.64 35.902 118.56 35.0221L119.559 36.1819C118.48 37.3417 116.96 38.101 115.201 38.101C111.923 38.101 109.404 35.6221 109.404 32.3824C109.404 29.1829 111.843 26.6638 115.002 26.6638C117.801 26.6638 120 28.7035 120 31.5815C119.958 32.1843 119.878 32.7039 119.839 32.9034ZM6.63734 22.7867L0 37.8613H3.2383L4.07801 35.9422H10.1555L10.9953 37.8613H14.2336L7.6364 22.7867H6.63734ZM7.11816 28.425L9.07749 33.423H5.11865L7.11816 28.425ZM30.7493 32.3034C30.7493 30.4245 29.4703 29.2245 27.8699 29.2245C26.4704 29.2245 25.0708 30.1446 25.0708 32.2632C25.0708 34.3819 26.4704 35.3422 27.8699 35.3422C29.4301 35.3824 30.7493 34.1838 30.7493 32.3034ZM28.4297 38.1412C27.0704 38.1412 25.9106 37.6618 25.111 36.7819V41.9795H22.0723V26.7455H24.8713V28.1451C25.6306 27.1058 26.911 26.5058 28.4297 26.5058C31.589 26.5058 33.8282 28.9446 33.8282 32.3034C33.8282 35.6623 31.589 38.1412 28.4297 38.1412ZM55.6206 33.7029V33.5824H53.2608C52.2617 33.5824 51.7019 33.9829 51.7019 34.702C51.7019 35.4614 52.3421 35.902 53.301 35.902C54.5412 35.902 55.6206 35.0235 55.6206 33.7029ZM58.6192 31.2642V37.8613H55.8201V36.7819C55.0206 37.6216 53.8608 38.1412 52.4211 38.1412C49.9823 38.1412 48.5828 36.7015 48.5828 34.8226C48.5828 32.7829 50.222 31.5843 52.7814 31.5843H55.5804V31.1048C55.5804 29.9048 54.9001 29.1455 53.5005 29.1455C52.3005 29.1455 51.4608 29.7053 50.5421 30.6656L48.9833 28.7866C50.3024 27.2277 51.8627 26.5072 53.822 26.5072C56.7 26.5058 58.6192 28.1049 58.6192 31.2642ZM16.0349 37.8613H19.0737V22.7867H16.0349V37.8613ZM42.2656 26.5058C41.0254 26.5058 39.946 26.9451 39.2268 27.7058V22.7881H36.188V37.8627H39.2268V31.3847C39.2268 30.1058 40.1067 29.2259 41.3455 29.2259C42.5843 29.2259 43.4254 30.0656 43.4254 31.3847V37.8627H46.4239V30.9843C46.4239 28.3058 44.8249 26.5058 42.2656 26.5058Z\" fill=\"#B4BACC\"/></svg>\n- id: 1\n  name: Deutsche Telekom\n  logo: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"144\" height=\"64\" viewBox=\"0 0 144 64\" fill=\"none\"><g clip-path=\"url(#clip0_7999_27972)\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M0 30.5318H6.39461V36.9272H0V30.5318ZM19.18 30.5318H25.5746V36.9272H19.18V30.5318ZM38.3599 30.5318H44.7538V36.9272H38.3599V30.5318Z\" fill=\"#8F98B3\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M53.7531 40.8088C53.7531 45.0577 54.484 45.7424 59.051 45.7886V47.57H43.5215V45.7886C48.0901 45.7424 48.8195 45.0577 48.8195 40.8088V17.4692C43.567 17.5608 40.5064 21.0319 40.0497 27.3803L38.36 27.1077L38.6803 15.9628H63.893L64.2126 27.1077L62.5221 27.3803C62.0661 21.0327 58.9601 17.5608 53.7531 17.4692V40.8088Z\" fill=\"#8F98B3\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M57.7681 30.5318H64.1627V36.9272H57.7681V30.5318ZM76.7763 18.5574C76.7763 17.5423 76.7162 17.1719 76.4828 16.937C76.3065 16.7606 75.8975 16.6451 75.4493 16.6451H75.1952V16.0197H79.8192C81.9656 16.0197 83.4682 16.6451 84.6203 18.0299C85.6146 19.2205 86.1429 20.7423 86.1429 22.4983C86.1429 24.5092 85.4783 26.2451 84.2491 27.4365C83.157 28.5286 81.713 29.0354 79.8192 29.0354H75.1952V28.4116H75.4493C75.8975 28.4116 76.3065 28.2937 76.4828 28.1189C76.7162 27.8832 76.7763 27.5136 76.7763 26.4985V18.5574ZM78.5715 26.577C78.5715 28.0604 78.8064 28.3345 80.1704 28.3345C82.9814 28.3345 84.0558 26.7342 84.0558 22.4983C84.0558 18.381 82.9429 16.7029 80.2112 16.7029C79.488 16.7029 79.0405 16.8392 78.8064 17.0926C78.6108 17.3267 78.5715 17.5608 78.5715 18.381V26.577ZM89.2436 24.4884C89.2613 27.338 89.9267 28.5494 91.467 28.5494C92.5214 28.5494 93.2045 27.9826 93.8861 26.5385L94.4729 26.8505C93.635 28.5494 92.6184 29.3103 91.1559 29.3103C88.8924 29.3103 87.4283 27.4365 87.4283 24.4884C87.4283 21.7574 88.9116 19.7866 90.9587 19.7866C93.0874 19.7866 94.4922 21.6003 94.59 24.4884H89.2436ZM92.774 23.806C92.7932 21.7189 92.1494 20.4697 91.0573 20.4697C89.9652 20.4697 89.2821 21.7582 89.2613 23.806H92.774ZM102.022 27.0268C101.36 28.5502 100.462 29.2318 99.194 29.2318C98.3353 29.2318 97.6714 28.9006 97.3002 28.2752C96.929 27.6514 96.8127 27.0461 96.8127 25.582V22.2264C96.8127 20.938 96.6363 20.6653 95.8169 20.6653H95.6035V20.06L98.4523 19.9237V26.0895C98.4523 26.9298 98.5109 27.3187 98.6872 27.6907C98.842 28.0812 99.2333 28.3353 99.6622 28.3353C100.324 28.3353 100.95 27.9056 101.36 27.1239C101.73 26.4615 101.867 25.7591 101.867 24.6463V22.2264C101.867 20.938 101.691 20.6653 100.873 20.6653H100.578V20.06L103.507 19.9237V26.8512C103.507 28.1382 103.682 28.4324 104.503 28.4324H104.716V29.0369L102.022 29.174V27.0268ZM108.266 26.1288C108.266 26.9298 108.305 27.2802 108.404 27.6522C108.54 28.1204 108.911 28.4131 109.358 28.4131C110.099 28.4131 110.549 27.6137 110.549 26.2259V25.954H111.193V26.3237C111.193 28.236 110.411 29.231 108.87 29.231C108.129 29.231 107.524 28.9961 107.174 28.5671C106.745 28.0604 106.628 27.4943 106.628 26.128V20.7231H105.221V20.1763C106.919 19.7666 107.485 18.9856 107.72 16.6828H108.266V20.0584H110.901V20.7223H108.266V26.1288ZM117.575 22.8903H116.988C116.657 21.2314 115.916 20.4312 114.705 20.4312C113.865 20.4312 113.243 21.0165 113.243 21.7967C113.243 22.5376 113.633 22.8903 114.864 23.2808C116.11 23.6897 116.639 23.9239 117.069 24.2566C117.769 24.8026 118.102 25.4857 118.102 26.3629C118.102 28.0411 116.893 29.2318 115.173 29.2318C114.394 29.2318 113.944 29.0747 112.989 28.5094C112.925 28.4667 112.852 28.44 112.776 28.4316C112.637 28.4316 112.522 28.5671 112.443 28.8213L112.384 29.0362H111.838V25.7391H112.384C112.637 26.6548 112.833 27.1446 113.144 27.5528C113.633 28.2167 114.373 28.6064 115.173 28.6064C116.071 28.6064 116.736 27.924 116.736 27.0268C116.736 26.4615 116.442 25.954 115.936 25.6405C115.505 25.3679 115.486 25.3679 114.219 24.9382C112.656 24.4306 111.934 23.5927 111.934 22.3227C111.934 20.8787 113.007 19.8644 114.569 19.8644C115.194 19.8644 115.856 20.0592 116.403 20.3912C116.52 20.4497 116.616 20.4897 116.697 20.4897C116.814 20.4897 116.93 20.3326 116.988 20.06H117.575V22.8903ZM126.139 26.7534C125.436 28.5094 124.442 29.3103 122.939 29.3103C120.695 29.3103 119.153 27.3595 119.153 24.5099C119.153 21.7382 120.793 19.7873 123.134 19.7873C124.754 19.7873 126.022 20.8995 126.022 22.3058C126.022 23.0266 125.553 23.5349 124.91 23.5349C124.345 23.5349 123.916 23.0844 123.916 22.4798C123.916 21.9345 124.306 21.4848 124.832 21.4848C124.91 21.4848 124.949 21.4848 125.027 21.5425C124.735 20.8594 124.092 20.4689 123.31 20.4689C121.807 20.4689 121.046 21.8152 121.046 24.5092C121.046 27.2602 121.77 28.5671 123.251 28.5671C124.228 28.5671 124.969 27.9056 125.515 26.4993L126.139 26.7534ZM133.144 23.2207C133.144 22.0901 133.087 21.6396 132.852 21.2892C132.637 20.8995 132.287 20.7038 131.876 20.7038C131.232 20.7038 130.627 21.1336 130.257 21.8752C129.905 22.5977 129.768 23.3578 129.768 24.7033V26.8505C129.768 28.1589 129.944 28.4316 130.763 28.4316H131.075V29.0362H126.821V28.4316H127.134C127.953 28.4316 128.128 28.1382 128.128 26.8505V18.1862C128.128 16.8985 127.953 16.6259 127.134 16.6259H126.919V16.0197L129.768 15.8834V21.6781C130.392 20.4104 131.153 19.8644 132.286 19.8644C133.106 19.8644 133.769 20.157 134.161 20.7031C134.647 21.3854 134.784 22.0108 134.784 23.7082V26.8505C134.784 28.1589 134.96 28.4316 135.779 28.4316H135.993V29.0362H133.144V23.2207ZM138.74 24.4884C138.761 27.338 139.423 28.5494 140.966 28.5494C142.019 28.5494 142.702 27.9826 143.387 26.5385L143.971 26.8505C143.133 28.5494 142.118 29.3103 140.654 29.3103C138.39 29.3103 136.926 27.4365 136.926 24.4884C136.926 21.7574 138.41 19.7866 140.46 19.7866C142.587 19.7866 143.992 21.6003 144.088 24.4884H138.74ZM142.273 23.806C142.\n```\n\n----------------------------------------\n\nTITLE: Creating Collection Alias in Qdrant with Java Client\nDESCRIPTION: Creates an alias 'production_collection' pointing to 'example_collection' using Qdrant's asynchronous Java client. The operation is executed asynchronously and the result is awaited using .get()\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/create/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclient.createAliasAsync(\"production_collection\", \"example_collection\").get();\n```\n\n----------------------------------------\n\nTITLE: Total Vector Size with Metadata\nDESCRIPTION: Formula for estimating total vector size including 50% overhead for indexes and auxiliary data\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/capacity-planning.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ntotal_vector_size = number_of_dimensions * 4 bytes * 1.5\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with ID Filter in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Qdrant client to scroll through a collection with a filter that selects specific IDs. It uses the 'must' clause to ensure only points with the specified IDs are returned.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-has-id-filter/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must: [\n      {\n        has_id: [1, 3, 5, 7, 9, 11],\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Full Snapshot with Qdrant Client in Python\nDESCRIPTION: Initializes a Qdrant client with a local connection and creates a full snapshot of the database. The client connects to the default Qdrant port 6333 on localhost.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/create-full-snapshot/python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_full_snapshot()\n```\n\n----------------------------------------\n\nTITLE: Binary Configuration in Cargo.toml\nDESCRIPTION: This snippet shows how to configure a binary in Cargo.toml for the Lambda function, specifying the name and path to the source file.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/serverless.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[[bin]]\nname = \"helloworld\"\npath = \"src/helloworld.rs\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Evaluation Metrics for Quaterion Model\nDESCRIPTION: This snippet sets up the evaluation metric for the model using RetrievalRPrecision, which will be calculated at the end of each epoch.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/cars-recognition.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n    def configure_metrics(self) -> Union[AttachedMetric, List[AttachedMetric]]:\n        return AttachedMetric(\n            \"rrp\",\n            metric=RetrievalRPrecision(),\n            prog_bar=True,\n            on_epoch=True,\n            on_step=False,\n        )\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Qdrant Vector Database in TypeScript\nDESCRIPTION: This snippet creates a connection to a Qdrant vector database server running on localhost port 6333, then performs a vector similarity search on a collection with a specific query vector. The query includes parameters to ignore quantization during the search process.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-ignored-quantization/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: [0.2, 0.1, 0.9, 0.7],\n    params: {\n        quantization: {\n            ignore: true,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection for Vectors\nDESCRIPTION: Demonstrates how to create a new collection for storing startup vectors with specific vector parameters including size and distance metric.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/neural-search-tutorial.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif not qdrant_client.collection_exists('startups'):\n    qdrant_client.create_collection(\n    collection_name='startups',\n    vectors_config=models.VectorParams(size=768, distance=\"Cosine\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Using Code Snippets Widget Shortcode in Markdown\nDESCRIPTION: This example shows how to use the code snippets widget shortcode. It renders code snippets from a specified directory with a custom display order.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/points-id/\" order=\"python http go\" >}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Landing Page Title and Description\nDESCRIPTION: Defines the main title and description for the Qdrant vector database landing page. It provides a high-level overview of the product and its advantages, which is critical for first impressions on users.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/qdrant-vector-database/qdrant-vector-database-hero.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Qdrant. Efficient, Scalable, Fast.\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: Qdrant is the most advanced vector database with highest RPS, minimal latency, fast indexing, high control with accuracy, and so much more.\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Mode in Qdrant YAML Configuration\nDESCRIPTION: YAML configuration for enabling distributed deployment mode in Qdrant. Sets the cluster mode to enabled and configures peer-to-peer communication port and consensus parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncluster:\n  # Use `enabled: true` to run Qdrant in distributed deployment mode\n  enabled: true\n  # Configuration of the inter-cluster communication\n  p2p:\n    # Port for internal communication between peers\n    port: 6335\n\n  # Configuration related to distributed consensus algorithm\n  consensus:\n    # How frequently peers should ping each other.\n    # Setting this parameter to lower value will allow consensus\n    # to detect disconnected node earlier, but too frequent\n    # tick period may create significant network and CPU overhead.\n    # We encourage you NOT to change this parameter unless you know what you are doing.\n    tick_period_ms: 100\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request for Collection Points\nDESCRIPTION: This HTTP request retrieves a specific data point from a collection identified by its name and point ID. It requires the collection name and the point ID to be specified in the URL path parameters. This endpoint returns the details of the requested point. It assumes that the collection and point ID are valid and exist within the system.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/retrieve-points/single/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /collections/{collection_name}/points/{point_id}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Listing Snapshots in Rust\nDESCRIPTION: Shows how to create a Qdrant client connection and list snapshots for a specified collection. The client is initialized with a local connection URL and uses async/await for snapshot operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/list-collection-snapshots/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.list_snapshots(\"{collection_name}\").await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Vector Database Client in Go\nDESCRIPTION: Creates a new Qdrant client connection to localhost on port 6334 with error handling. Establishes the initial database connection for vector operations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points-explore/recommend-batch/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Running Vale Linter from Command Line\nDESCRIPTION: Shows how to run the Vale grammar linter against a Markdown file from the command line. The command must be run from the qdrant-landing/ directory to access the configured style rules.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/GrammarLinter.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvale /path/to/your/filename.md\n```\n\n----------------------------------------\n\nTITLE: Embedding Spotify Podcast iFrame\nDESCRIPTION: HTML iframe code for embedding a Spotify podcast player with specific dimensions and attributes\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/production-scale-rag-for-real-time-news-distillation-robert-caulk-vector-space-talks.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://podcasters.spotify.com/pod/show/qdrant-vector-space-talk/embed/episodes/Production-scale-RAG-for-Real-Time-News-Distillation---Robert-Caulk--Vector-Space-Talks-015-e2g6464/a-ab0c1sq\" height=\"102px\" width=\"400px\" frameborder=\"0\" scrolling=\"no\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Storing Documents in Qdrant Vector Database\nDESCRIPTION: Uploads document chunks to a Qdrant Cloud vector database collection using FastEmbed embeddings.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-relari.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndb = Qdrant.from_documents(\n    documents,\n    embedding=embeddings,\n    url=os.environ['QDRANT_URL'],  # Qdrant Cloud URL\n    api_key=os.environ['QDRANT_API_KEY'],  # Qdrant Cloud API Key\n    collection_name=\"gitlab_legal_policies\",\n)\nprint(f\"{len(documents)} chunks loaded into Qdrant Cloud vector database.\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Text Match Condition in Qdrant Java Client\nDESCRIPTION: Creates a text match condition for searching vector database entries based on a specific field and text value. Uses static import of ConditionFactory to simplify condition creation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/full-text-match/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.qdrant.client.ConditionFactory.matchText;\n\nmatchText(\"description\", \"good cheap\");\n```\n\n----------------------------------------\n\nTITLE: Reading JSON Data into Pandas DataFrame\nDESCRIPTION: Reads the raw JSON data file containing startup descriptions into a pandas DataFrame for processing. The file should be accessible in the current directory.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndf = pd.read_json(\"./startups_demo.json\", lines=True)\n```\n\n----------------------------------------\n\nTITLE: Embedding Spotify Podcast iframe\nDESCRIPTION: HTML iframe code for embedding a Spotify podcast player for the interview episode\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/when-music-just-doesnt-match-our-vibe-can-ai-help-filip-makraduli-vector-space-talks-003.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://podcasters.spotify.com/pod/show/qdrant-vector-space-talk/embed/episodes/When-music-just-doesnt-match-our-vibe--can-AI-help----Filip-Makraduli--Vector-Space-Talks-003-e2bskcq/a-aajslv4\" height=\"102px\" width=\"400px\" frameborder=\"0\" scrolling=\"no\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Setting Qdrant Connection Environment Variables\nDESCRIPTION: Sets environment variables for Qdrant URL and API key to establish connection with Qdrant Hybrid Cloud.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport QDRANT_URL=\"https://qdrant.example.com\"\nexport QDRANT_API_KEY=\"your-api-key\"\n```\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nos.environ[\"QDRANT_URL\"] = \"https://qdrant.example.com\"\nos.environ[\"QDRANT_API_KEY\"] = \"your-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Testimonial Page Frontmatter Configuration in Markdown\nDESCRIPTION: YAML frontmatter configuration for a testimonial page, including customer review text, biographical information, and image assets for both avatar and company logo.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/customers-testimonial-1.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nreview: \"We looked at all the big options out there right now for vector databases, with our focus on ease of use, performance, pricing, and communication. <strong>Qdrant came out on top in each category...</strong> ultimately, it wasn't much of a contest.\"\nnames: Alex Webb\npositions: Director of Engineering, CB Insights\navatar:\n  src: /img/customers/alex-webb.svg\n  alt: Alex Webb Avatar\nlogo:\n  src: /img/brands/cb-insights.svg\n  alt: Logo\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing QdrantClient and Querying with Combined Filters in C#\nDESCRIPTION: This snippet demonstrates how to create a QdrantClient instance and use it to perform a scroll query with combined filter conditions. It uses the & operator to combine two MatchKeyword conditions in an AND conjunction.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-must-filter/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\n// & operator combines two conditions in an AND conjunction(must)\nawait client.ScrollAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: MatchKeyword(\"city\", \"London\") & MatchKeyword(\"color\", \"red\")\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Operation Response in Rust\nDESCRIPTION: This Rust snippet demonstrates the structure of the operation response expected after an upsert operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\nPointsOperationResponse {\\n    result: Some(\\n        UpdateResult {\\n            operation_id: Some(\\n                0,\\n            ),\\n            status: Completed,\\n        },\\n    ),\\n    time: 0.00094027,\\n}\n```\n\n----------------------------------------\n\nTITLE: Qdrant Landing Page YAML Configuration\nDESCRIPTION: This YAML snippet defines the configuration for cards on the Qdrant landing page. It specifies details such as the card's title, price, description, button text and URL, feature descriptions, and a list of features. The snippet includes settings for Qdrant Cloud and Private Cloud options.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/pricing/qdrant-pricing-doors-a.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\ncards: \n- id: 0\n  popular: true\n  title: Qdrant Cloud\n  price: $0\n  description: Starts with 1GB free cluster, no credit card required.\n  button:\n    text: Start Free\n    url: https://cloud.qdrant.io/signup\n    contained: true\n  featureDescription: Scale your production solutions without deployment and upkeep. \n  featureLink:\n    text: Calculate your usage.\n    url: https://cloud.qdrant.io/calculator\n  features:\n  - id: 0\n    content: 1GB free forever cluster. No credit card required.\n  - id: 1\n    content: Fully managed with central cluster management\n  - id: 2\n    content: Multiple cloud providers and regions (AWS, GCP, Azure)\n  - id: 3\n    content: Horizontal & vertical scaling\n  - id: 4\n    content: Central monitoring, log management and alerting\n  - id: 5\n    content: High availability, auto-healing\n  - id: 6\n    content: Backup & disaster recovery\n  - id: 7\n    content: Zero-downtime upgrades\n  - id: 8\n    content: Unlimited users\n  - id: 9\n    content: Standard support plan\n- id: 1\n  popular: false\n  title: Private Cloud\n  price: Custom\n  description: Price on request.\n  button:\n    text: Contact Sales\n    url: /contact-us/\n    contained: false\n  featureDescription: Deploy Qdrant fully on premise for maximum control and data sovereignty.\n  features:\n  - id: 0\n    content: All the benefits of Hybrid Cloud\n  - id: 1\n    content: Connect your own enterprise authentication\n  - id: 2\n    content: Use the Managed Cloud Central Cluster Management or run the Central Cluster Management Interface in your own infrastructure, in the cloud, on-premise at the edge, even fully air-gapped\n  - id: 3\n    content: Premium Support Plan\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Executing Vector Search\nDESCRIPTION: Establishes a connection to a Qdrant server running on localhost and performs an asynchronous vector similarity search with custom search parameters and quantization settings\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/with-ignored-quantization/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QuantizationSearchParams;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.SearchParams;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setParams(\n                        SearchParams.newBuilder()\n                                .setQuantization(\n                                        QuantizationSearchParams.newBuilder().setIgnore(true).build())\n                                .build())\n                .setLimit(10)\n                .build())\n        .get();\n```\n\n----------------------------------------\n\nTITLE: Importing PyTorch and Setting Constants for Triplet Loss Implementation\nDESCRIPTION: Imports the necessary PyTorch libraries and sets a small epsilon value for numerical stability in distance calculations.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/triplet-loss.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\neps = 1e-8 # an arbitrary small value to be used for numerical stability tricks\n```\n\n----------------------------------------\n\nTITLE: Encoding Text into Vectors\nDESCRIPTION: Encodes startup descriptions into embedding vectors using the pre-trained model, processing data in batches for efficiency.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/neural-search.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nvectors = model.encode(\n    [row.alt + \". \" + row.description for row in df.itertuples()],\n    show_progress_bar=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Oversampling Configuration with Python Client\nDESCRIPTION: Python implementation using Qdrant client to configure quantization search parameters with oversampling\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qdrant-1.3.x.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.http import models\n\nclient = QdrantClient(\"localhost\", port=6333)\n\nclient.search(\n    collection_name=\"{collection_name}\",\n    query_vector=[0.2, 0.1, 0.9, 0.7],\n    search_params=models.SearchParams(\n        quantization=models.QuantizationSearchParams(\n            ignore=False,\n            rescore=True,\n            oversampling=2.4\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Go\nDESCRIPTION: This snippet initializes a new Qdrant client in Go. It requires the `github.com/qdrant/go-client/qdrant` package. The client is configured with the host and port of the Qdrant instance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-multivector/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Complex SVG Path for Landing Page Graphic\nDESCRIPTION: This SVG path data defines a complex shape with multiple curves and lines. It likely represents a custom icon or illustration used on the landing page.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_5\n\nLANGUAGE: SVG\nCODE:\n```\nM55.2148 42.0419C55.2723 42.0498 55.2848 42.0521 55.3408 42.0594C56.2775 42.1867 57.1978 42.3555 57.9023 42.6704C58.5553 42.9587 58.938 43.3235 59.2874 43.9738C59.8187 44.96 59.8534 46.3415 59.3732 47.3871C59.0145 48.1651 58.2271 48.8175 57.5083 49.1633C56.7618 49.5252 56.0263 49.6976 55.1827 49.7939C53.7074 49.9563 52.114 49.6507 50.7865 49.0086C50.0011 48.625 49.042 47.9645 48.5582 47.1136C48.2024 46.4902 48.2137 45.6791 48.6466 45.0866C49.3365 44.1423 50.8142 43.9344 51.9272 43.9738C52.7758 44.0067 54.3036 44.269 55.1093 44.5556C55.3326 44.6363 56.1562 44.9571 56.2999 45.1043C56.4011 45.2066 56.4667 45.3554 56.4213 45.4929C56.2372 46.0559 54.869 46.3527 54.4739 46.4123C53.4162 46.5743 52.8674 46.174 51.665 45.6993C51.3665 45.5824 50.9687 45.4527 50.6648 45.4246C50.1189 45.3726 49.4595 45.5255 49.3553 46.1214C49.3035 46.4285 49.6637 46.7158 49.9384 46.8365C50.5834 47.1136 51.1077 47.2132 51.7425 47.2217C53.6179 47.2526 55.7254 46.9439 57.2593 45.8571C57.4693 45.7072 57.6755 45.4879 57.6777 45.2113C57.6844 44.6529 56.7054 44.3115 56.7054 44.3115C55.6722 43.8807 53.763 43.6711 52.7795 43.5901C51.7474 43.5007 50.1235 43.3671 49.7336 43.3097C49.3321 43.2524 48.8961 43.1714 48.5484 43.0156C48.1992 42.8578 47.8575 42.5047 47.7561 42.1141C47.5763 41.4099 47.8057 40.5459 48.1968 39.9834C49.2217 38.5099 51.6225 37.9503 53.4161 37.728C55.1521 37.512 57.9585 37.5142 59.6636 38.4202C59.9268 38.5614 60.0613 38.6926 60.0063 38.974C59.8952 39.5024 59.4981 39.8429 59.0168 39.9921C58.5119 40.1528 57.4674 40.2154 57.0087 40.2443C54.953 40.3595 52.4689 40.2991 50.5109 40.833C50.3575 40.8768 50.0925 40.9483 50.0064 41.0445C49.6999 41.3772 50.5752 41.4722 50.7628 41.5103C50.8185 41.5236 50.8293 41.5255 50.8875 41.5318L55.2148 42.0419Z\n```\n\n----------------------------------------\n\nTITLE: Rendering Deloitte Logo SVG Path\nDESCRIPTION: Vector path definition for the Deloitte logo using SVG. The path includes the distinctive Deloitte wordmark with a filled circle element, all rendered in light gray (#B4BACC).\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_17\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M110.064 39.5021C110.064 37.8633 111.394 36.5337 113.032 36.5337C114.671 36.5337 116 37.8633 116 39.5021C116 41.141 114.671 42.4698 113.032 42.4698C111.394 42.4698 110.064 41.141 110.064 39.5021Z\" fill=\"#B4BACC\"/><path d=\"M15.3931 31.6406C15.3931 29.7605 15.0298 28.3655 14.303 27.4568C13.5755 26.5488 12.4735 26.0952 10.9918 26.0952H9.41563V37.593H10.6216C12.2674 37.593 13.4733 37.1053 14.2412 36.126C15.0083 35.1487 15.3931 33.6532 15.3931 31.6406ZM21.014 31.4447C21.014 34.8703 20.0931 37.5099 18.2516 39.3625C16.4101 41.2161 13.8212 42.1428 10.4841 42.1428H4V21.6169H10.9368C14.1544 21.6169 16.6385 22.4596 18.3889 24.144C20.1388 25.8292 21.014 28.2616 21.014 31.4447ZM38.9751 42.1426H44.1348V21.5308H38.9751V42.1426ZM51.3831 34.4543C51.3831 35.7685 51.5549 36.7708 51.8977 37.4597C52.2412 38.1495 52.8166 38.4939 53.6258 38.4939C54.4263 38.4939 54.9925 38.1495 55.3222 37.4597C55.6521 36.7708 55.8161 35.7685 55.8161 34.4543C55.8161 33.1469 55.6494 32.1609 55.3154 31.4952C54.9803 30.8279 54.4092 30.4937 53.5993 30.4937C52.8073 30.4937 52.2413 30.8262 51.8977 31.4875C51.5549 32.1497 51.3831 33.1383 51.3831 34.4543ZM61.0677 34.4543C61.0677 36.9581 60.4115 38.9113 59.0955 40.3114C57.7806 41.7123 55.9397 42.4133 53.5735 42.4133C51.3041 42.4133 49.4977 41.6969 48.1569 40.2641C46.8145 38.8315 46.1436 36.8954 46.1436 34.4543C46.1436 31.9582 46.8007 30.0187 48.1166 28.6357C49.4324 27.2529 51.2775 26.5614 53.6532 26.5614C55.1212 26.5614 56.4199 26.8818 57.5452 27.5218C58.6712 28.1616 59.5405 29.0782 60.1512 30.272C60.7627 31.4643 61.0677 32.8592 61.0677 34.4543ZM63.1167 42.1427H68.2773V26.8321H63.1167V42.1427ZM63.1166 24.9802H68.2771V21.5298H63.1166V24.9802ZM78.7322 38.2376C79.4288 38.2376 80.2586 38.0606 81.2266 37.7094V41.5616C80.5308 41.8675 79.8695 42.0864 79.2407 42.2162C78.6119 42.3477 77.874 42.4129 77.0298 42.4129C75.2973 42.4129 74.0485 41.9775 73.2814 41.1081C72.5177 40.2388 72.1346 38.9041 72.1346 37.1029V30.7914H70.3275V26.8334H72.1347V22.9235L77.3348 22.0191V26.8334H80.6271V30.7914H77.3347V36.7507C77.3347 37.742 77.8012 38.2376 78.7322 38.2376ZM90.6755 38.2376C91.3722 38.2376 92.2019 38.0606 93.1699 37.7094V41.5616C92.4751 41.8675 91.8128 42.0864 91.1841 42.2162C90.5544 42.3477 89.8192 42.4129 88.9731 42.4129C87.2407 42.4129 85.9917 41.9775 85.2264 41.1081C84.4611 40.2388 84.078 38.9041 84.078 37.1029V30.7914H82.27V26.8334H84.078V22.8642L89.2772 22.0191V26.8334H92.5713V30.7914H89.2772V36.7507C89.2772 37.742 89.7437 38.2376 90.6755 38.2376ZM99.6813 32.5891C99.7517 31.7508 99.9913 31.1366 100.4 30.744C100.811 30.3523 101.318 30.1566 101.924 30.1566C102.585 30.1566 103.111 30.3765 103.501 30.8196C103.894 31.2603 104.098 31.8503 104.114 32.5891H99.6813ZM106.958 28.3665C105.732 27.164 103.991 26.5619 101.74 26.5619C99.3737 26.5619 97.5528 27.2534 96.2764 28.6362C95.0008 30.0192 94.3627 32.0032 94.3627 34.5888C94.3627 37.0925 95.0525 39.0234 96.4285 40.3788C97.8054 41.7342 99.7387 42.4128 102.229 42.4128C103.425 42.4128 104.454 42.3312 105.316 42.1688C106.173 42.0082 107.003 41.7179 107.808 41.2987L107.015 37.8483C106.43 38.0872 105.873 38.271 105.348 38.392C104.588 38.5681 103.755 38.6566 102.848 38.6566C101.854 38.6566 101.068 38.4136 100.493 37.9273C99.9175 37.4403 99.6108 36.7687 99.5756 35.9132H108.799V33.5623C108.799 31.3007 108.186 29.5682 106.958 28.3665ZM27.8622 32.5891C27.9327 31.7508 28.1723 31.1366 28.5811 30.744C28.9908 30.3523 29.4984 30.1566 30.1057 30.1566C30.7655 30.1566 31.291 30.3765 31.682 30.8196C32.0744 31.2603 32.278 31.8503 32.2961 32.5891H27.8622ZM35.1399 28.3665C33.9126 27.164 32.1732 26.5619 29.9211 26.5619C27.5537 26.5619 25.7337 27.2534 24.4582 28.6362C23.1827 30.0192 22.5436 32.0032 22.5436 34.5888C22.5436 37.0925 23.2325 39.0234 24.6102 40.3788C25.9863 41.7342 27.9198 42.4128 30.4098 42.4128C31.6055 42.4128 32.6344 42.3312 33.4968 42.1688C34.3541 42.0082 35.1837 41.7179 35.9895 41.2987L35.1959 37.8483C34.6109 38.0872 34.0542 38.271 33.5295 38.392C32.7684 38.5681 31.9361 38.6566 31.0291 38.6566C30.0353 38.6566 29.2494 38.4136 28.6739 37.9273C28.0975 37.4403 27.7918 36.7687 27.7565 35.9132H36.9799V33.5623C36.9799 31.3007 36.3666 29.5682 35.14 28.3665\" fill=\"#B4BACC\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Rendering Voiceflow Logo with SVG Path Data\nDESCRIPTION: SVG definition for the Voiceflow company logo. The SVG uses path elements with fill color #B4BACC to create the logo design with various curved paths representing the logo's visual elements.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_22\n\nLANGUAGE: svg\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\"><path d=\"M60.3297 31.5881C60.0727 32.0891 59.9477 32.6361 59.9477 33.2261C59.9477 33.816 60.076 34.3632 60.3297 34.8641C60.5835 35.3651 60.9396 35.7572 61.3976 36.0473C61.8523 36.3373 62.373 36.4824 62.9499 36.4824C63.5268 36.4824 64.0178 36.3637 64.4295 36.1231C64.8385 35.8825 65.1418 35.5595 65.3394 35.1509H67.8771C67.653 35.7836 67.3266 36.3671 66.905 36.8944C66.48 37.4216 65.9295 37.8468 65.2536 38.1731C64.5749 38.4994 63.7872 38.6609 62.8839 38.6609C61.8985 38.6609 60.9958 38.4203 60.1783 37.9325C59.3576 37.4447 58.718 36.7889 58.2534 35.955C57.7855 35.1245 57.5549 34.2149 57.5549 33.2261C57.5549 32.2374 57.7888 31.3311 58.2534 30.4972C58.718 29.6666 59.3609 29.0075 60.1783 28.5197C60.9958 28.0353 61.8952 27.7913 62.8839 27.7913C63.7872 27.7913 64.5749 27.9528 65.2536 28.2791C65.9323 28.6021 66.4833 29.0305 66.905 29.5579C67.3266 30.0852 67.6497 30.6685 67.8771 31.3014H65.3394C65.1418 30.8927 64.8385 30.5696 64.4295 30.3291C64.0211 30.0886 63.5268 29.9699 62.9499 29.9699C62.373 29.9699 61.8556 30.1182 61.3976 30.4049C60.9396 30.6949 60.5835 31.0871 60.3297 31.5881ZM70.6591 31.7827C70.8402 31.2125 71.1732 30.7379 71.6543 30.3655C72.1321 29.9931 72.7817 29.8053 73.5991 29.8053C74.1099 29.8053 74.5679 29.9041 74.9862 30.1018C75.4018 30.2995 75.7415 30.5698 76.0117 30.9159C76.2782 31.2587 76.4631 31.6508 76.5583 32.0892H70.5699C70.5963 31.9869 70.6261 31.8848 70.6591 31.7827ZM78.5031 35.7179C78.5719 35.5465 78.638 35.3751 78.6941 35.2005H76.3706C76.298 35.3389 76.2121 35.4674 76.1169 35.5926C75.8466 35.9387 75.507 36.2089 75.0919 36.4067C74.6763 36.6045 74.258 36.6571 73.7505 36.6571C73.1736 36.6571 72.6297 36.522 72.1222 36.255C71.6114 35.9848 71.2062 35.6256 70.893 35.1642C70.6261 34.7719 70.4681 34.3369 70.4218 33.8657H78.9083C78.9644 32.7385 78.7932 31.7101 78.4007 30.7873H78.3974C78.0022 29.8645 77.3956 29.1361 76.5782 28.5989C75.7607 28.0618 74.782 27.7948 73.6415 27.7948C72.6132 27.7948 71.6774 28.0386 70.8402 28.5232C70.0029 29.0109 69.344 29.6668 68.8629 30.4907C68.3818 31.318 68.1446 32.2243 68.1446 33.2098C68.1446 33.4339 68.1572 33.6514 68.1837 33.8657C68.2629 34.6171 68.487 35.3158 68.853 35.9683C69.3242 36.8088 69.987 37.4745 70.8402 37.9689C71.6939 38.46 72.6628 38.7105 73.7472 38.7105C74.8877 38.7105 75.8664 38.4434 76.6839 37.9063C77.5013 37.3691 78.1079 36.6407 78.5031 35.7179ZM50.1025 34.8773C49.8125 35.3849 49.4269 35.787 48.9391 36.0835H48.9457C48.4579 36.3801 47.9208 36.5253 47.3274 36.5253C46.7342 36.5253 46.197 36.3801 45.7092 36.0835C45.2214 35.787 44.8357 35.3849 44.5458 34.8773C44.2558 34.3697 44.1108 33.8556 44.1108 33.2491C44.1108 32.6428 44.2525 32.0923 44.5326 31.5914C44.8128 31.0905 45.2017 30.6981 45.696 30.4082C46.1904 30.1182 46.731 29.9731 47.3241 29.9731C47.9174 29.9731 48.4612 30.1214 48.9523 30.4082C49.4466 30.6981 49.8355 31.0905 50.1157 31.5914C50.3958 32.0923 50.5375 32.6692 50.5375 33.2491C50.5375 33.8292 50.3926 34.3697 50.1025 34.8773ZM50.1652 28.5263C49.3115 28.0352 48.3656 27.788 47.3209 27.788C46.2761 27.788 45.3302 28.0352 44.4766 28.5263C43.623 29.0239 42.9572 29.6897 42.4694 30.5268C41.9849 31.3673 41.7412 32.2703 41.7412 33.2459C41.7412 34.2214 41.9783 35.1277 42.4497 35.9648C42.921 36.8053 43.5835 37.4745 44.4369 37.9655H44.4337C45.2874 38.4565 46.2531 38.7037 47.3209 38.7037C48.3887 38.7037 49.3511 38.4533 50.2048 37.9523C51.0583 37.4514 51.7207 36.7855 52.1921 35.9518C52.6634 35.1211 52.9007 34.2214 52.9007 33.2459C52.9007 32.2703 52.6601 31.3639 52.1724 30.5268C51.688 29.6865 51.0187 29.0173 50.1652 28.5263ZM54.0514 27.9826H56.3747V38.5127H54.0514V27.9826ZM85.8787 23.2892H86.5806V25.2767H86.0367C85.516 25.2767 85.1009 25.4216 84.7943 25.7117C84.4877 26.0017 84.2802 26.4467 84.1778 27.0531L84.0154 27.9826H86.5806V29.9898H83.6637L82.1708 38.5126H82.1664L82.0002 39.4618C81.7993 40.5889 81.3479 41.4359 80.6455 41.9963H80.6488C79.9437 42.5599 79.0833 42.8433 78.0683 42.8433C77.307 42.8433 76.7796 42.8366 76.4829 42.8234L76.8325 40.8362H77.9103C78.431 40.8362 78.8461 40.6911 79.1527 40.4011C79.4593 40.1111 79.6668 39.6661 79.7692 39.0596L81.3578 29.9898H79.6365V27.9826H81.709L81.9468 26.6511C82.1444 25.5239 82.5958 24.6768 83.3015 24.1165L83.2976 24.1133C84 23.5496 84.8637 23.2892 85.8787 23.2892ZM43.8575 23.2892L37.556 38.5126H35.0183L28.7166 23.2892H31.3599L36.3399 35.6257L41.3197 23.2892H43.8575ZM120 27.9826L116.111 38.5127H113.788L111.24 31.0615L108.692 38.5127H106.368L102.479 27.9826H104.899L107.585 35.6388L110.166 27.9826H112.43L114.99 35.6388L117.696 27.9826H120ZM88.1262 23.2892H90.4503V38.5126H88.1262V23.2892ZM100.045 34.8773C99.7547 35.3849 99.3694 35.787 98.8811 36.0835H98.8877C98.4 36.3801 97.8628 36.5253 97.2694 36.5253C96.6765 36.5253 96.1393 36.3801 95.6516 36.0835C95.1639 35.787 94.778 35.3849 94.4879 34.8773C94.1978 34.3697 94.053 33.8556 94.053 33.2491C94.053 32.6428 94.1945 32.0923 94.4747 31.5914C94.7549 31.0905 95.1468 30.6981 95.6384 30.4082C96.1327 30.1182 96.6732 29.9731 97.2666 29.9731C97.8595 29.9731 98.4033 30.1214 98.8943 30.4082C99.3886 30.6981 99.7778 31.0905 100.058 31.5914C100.338 32.0923 100.48 32.6692 100.48 33.2491C100.48 33.8292 100.335 34.3697 100.045 34.8773ZM100.107 28.5263C99.2538 28.0352 98.3075 27.788 97.2633 27.788C96.2185 27.788 95.2723 28.0352 94.4185 28.5263C93.5681 29.0239 92.8993 29.6897 92.4116 30.5268C91.9272 31.3673 91.6833 32.2703 91.6833 33.2459C91.6833 34.2214 91.9206 35.1277 92.3917 35.9648C92.8629 36.8053 93.5257 37.4745 94.3789 37.9655H94.3761C95.2294 38.4565 96.1921 38.7037 97.2633 38.7037C98.334 38.7037 99.2967 38.4533 100.15 37.9523C101.004 37.4514 101.666 36.7855 102.138 35.9518C102.609 35.1211 102.846 34.2214 102.846 33.2459C102.846 32.2703 102.602 31.3639 102.114 30.5268C101.63 29.6865 100.961 29.0173 100.107 28.5263ZM54.0514 23.2892H56.3747V25.6128H54.0514V23.2892ZM21.8305 34.168C22.0048 33.1348 22.0899 32.0246 22.0899 30.9185C22.0899 29.8125 22.0048 28.7022 21.8305 27.669C23.5039 27.9162 24.7924 29.2776 24.7924 30.9185C24.7924 32.5595 23.5039 33.9209 21.8305 34.168ZM20.2382 33.9937C19.1565 33.7264 14.728 31.1211 14.5254 31.0076V30.8293C14.728 30.7159 19.1565 28.1107 20.2382 27.8432C20.3881 28.7266 20.4854 29.7516 20.4854 30.9185C20.4854 32.0854 20.3881 33.1105 20.2382 33.9937ZM18.7269 37.62C18.6135 37.6971 18.4758 37.6808 18.3501 37.6159C17.6816 37.2553 15.2466 33.4508 15.2466 33.3211L15.3641 33.1956C16.0934 33.702 17.9451 34.9621 19.8696 35.5536C19.5171 36.676 19.0835 37.3809 18.7269 37.62ZM18.3501 24.221C18.4758 24.1562 18.6135 24.14 18.7269 24.217C19.0835 24.456 19.5171 25.161 19.8696 26.2834C17.9451 26.8749 16.0934 28.1349 15.3641 28.6415L15.2466 28.5159C15.2466 28.3862 17.6816 24.5816 18.3501 24.221ZM11.8755 31.0076C11.673 31.1211 7.24453 33.7264 6.16272 33.9937C6.01272 33.1105 5.9155 32.0854 5.9155 30.9185C5.9155 29.7516 6.01272 28.7266 6.16272 27.8432C7.24453 28.1107 11.673 30.7159 11.8755 30.8293V31.0076ZM8.05079 37.6159C7.92517 37.6808 7.78739 37.6971 7.674 37.62C7.31736 37.3809 6.88393 36.676 6.53136 35.5536C8.45593 34.9621 10.3075 33.702 11.0369 33.1956L11.1544 33.3211C11.1544 33.4508 8.71932 37.2553 8.05079 37.6159ZM7.674 24.217C7.78739 24.14 7.92517 24.1562 8.05079 24.221C8.71932 24.5816 11.1544 28.3862 11.1544 28.5159L11.0369 28.6415C10.3075 28.1349 8.45593 26.8749 6.53136 26.2834C6.88393 25.161 7.31736 24.456 7.674 24.217ZM4.57032 34.168C2.89704 33.9209 1.6086 32.5595 1.6086 30.9185C1.6086 29.2776 2.89704 27.9162 4.57032 27.669C4.39608 28.7022 4.311 29.8125 4.311 30.9185C4.311 32.0246 4.39608 33.1348 4.57032 34.168ZM21.466 26.0281C20.8703 23.9779 19.8696 22.5152 18.4758 22.5152C16.616 22.5152 14.0675 27.7379 14.0675 27.7379L13.9014 27.7014L13.946 27.114C13.9535 27.0014 13.9609 26.7707 13.9685 26.4799C14.0048 25.074 13.9892 23.6674 13.9259 22.2625L13.8708 21.0386C13.8697 21.017 13.852 21 13.8302 21H12.5706C12.549 21 12.5311 21.017 12.5301 21.0386L12.4751 22.2625C12.4117 23.6674 12.3961 25.074 12.4325 26.4799C12.4399 26.7707 12.4475 27.0014 12.4549 27.114L12.4995 27.7014L12.3334 27.7379C12.3334 27.7379 9.7849 22.5152 7.92517 22.5152C6.53136 22.5152 5.53057 23.9779 4.935 26.0281C2.20008 26.1173 0 28.2727 0 30.9185C0 33.5642 2.20008 35.7198 4.935 35.8089C5.53057 37.8591 6.53136 39.3217 7.92517 39.3217C9.7849 39.3217 12.3334 34.0991 12.3334 34.0991L12.4995 34.1355L12.4549 34.7231C12.4475 34.8356 12.4399 35.0663 12.4325 35.3572C12.3961 36.7629 12.4117 38.1697 12.4751 39.5746L12.5301 40.7983C12.5311 40.82 12.549 40.8371 12.5706 40.8371H13.8302C13.852 40.8371 13.8697 40.82 13.8708 40.7983L13.9259 39.5746C13.9892 38.1697 14.0048 36.7629 13.9685 35.3572C13.9609 35.0663 13.9535 34.8356 13.946 34.7231L13.9014 34.1355L14.0675 34.0991C14.0675 34.0991 16.616 39.3217 18.4758 39.3217C19.8696 39.3217 20.8703 37.8591 21.466 35.8089C24.2009 35.7198 26.4008 33.5642 26.4008 30.9185C26.4008 28.2727 24.2009 26.1173 21.466 26.0281Z\" fill=\"#B4BACC\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Nested Object Filtering\nDESCRIPTION: Advanced filtering using nested conditions to ensure matches occur within the same array element\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-filtering.md#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/dinosaurs/points/scroll\n{\n    \"filter\": {\n        \"must\": [{\n            \"nested\": {\n                \"key\": \"diet\",\n                \"filter\":{\n                    \"must\": [\n                        {\n                            \"key\": \"food\",\n                            \"match\": {\n                                \"value\": \"meat\"\n                            }\n                        },\n                        {\n                            \"key\": \"likes\",\n                            \"match\": {\n                                \"value\": true\n                            }\n                        }\n                    ]\n                }\n            }\n        }]\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nclient.scroll(\n    collection_name=\"dinosaurs\",\n    scroll_filter=models.Filter(\n        must=[\n            models.NestedCondition(\n                nested=models.Nested(\n                    key=\"diet\",\n                    filter=models.Filter(\n                        must=[\n                            models.FieldCondition(\n                                key=\"food\", match=models.MatchValue(value=\"meat\")\n                            ),\n                            models.FieldCondition(\n                                key=\"likes\", match=models.MatchValue(value=True)\n                            ),\n                        ]\n                    ),\n                )\n            )\n        ],\n    ),\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.scroll(\"dinosaurs\", {\n  filter: {\n    must: [\n      {\n        nested: {\n          key: \"diet\",\n          filter: {\n            must: [\n              {\n                key: \"food\",\n                match: { value: \"meat\" },\n              },\n              {\n                key: \"likes\",\n                match: { value: true },\n              },\n            ],\n          },\n        },\n      },\n    ],\n  },\n});\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, NestedCondition, ScrollPointsBuilder};\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"dinosaurs\").filter(Filter::must([NestedCondition {\n            key: \"diet\".to_string(),\n            filter: Some(Filter::must([\n                Condition::matches(\"food\", \"meat\".to_string()),\n                Condition::matches(\"likes\", true),\n            ])),\n        }\n        .into()])),\n    )\n    .await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.match;\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\nimport static io.qdrant.client.ConditionFactory.nested;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"dinosaurs\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addMust(\n                        nested(\n                            \"diet\",\n                            Filter.newBuilder()\n                                .addAllMust(\n                                    List.of(\n                                        matchKeyword(\"food\", \"meat\"), match(\"likes\", true)))\n                                .build()))\n                    .build())\n            .build())\n    .get();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(\n\tcollectionName: \"dinosaurs\",\n\tfilter: Nested(\"diet\", MatchKeyword(\"food\", \"meat\") & Match(\"likes\", true))\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring OrderBy Parameters in Qdrant Java Client\nDESCRIPTION: Creates an OrderBy configuration for Qdrant search results. Sets descending order by timestamp field and specifies a custom start position of 123. Uses the Qdrant Java gRPC client's builder pattern.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-order-by-advanced/java.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.qdrant.client.grpc.Points.Direction;\nimport io.qdrant.client.grpc.Points.OrderBy;\nimport io.qdrant.client.grpc.Points.StartFrom;\n\nOrderBy.newBuilder()\n  .setKey(\"timestamp\")\n  .setDirection(Direction.Desc)\n  .setStartFrom(StartFrom.newBuilder()\n    .setInteger(123)\n    .build())\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Listing Snapshots in C#\nDESCRIPTION: Creates a new Qdrant client connection to a local instance on port 6334 and retrieves a list of full snapshots. Demonstrates basic client setup and snapshot management functionality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/list-full-snapshots/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ListFullSnapshotsAsync();\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Qdrant Private Cloud - Bash\nDESCRIPTION: This snippet provides commands to uninstall the Qdrant Private Cloud solution, including the Helm charts and the associated Kubernetes namespace.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/private-cloud-setup.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nhelm uninstall qdrant-private-cloud --namespace qdrant-private-cloud\nhelm uninstall qdrant-private-cloud-crds --namespace qdrant-private-cloud\nkubectl delete namespace qdrant-private-cloud\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant and Snowflake Embedding Model\nDESCRIPTION: Set up Qdrant client and Snowflake text embedding model with sample texts for vector embedding\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/snowflake.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\nfrom fastembed import TextEmbedding\n\nqclient = QdrantClient(\":memory:\")\nembedding_model = TextEmbedding(\"snowflake/snowflake-arctic-embed-s\")\n\ntexts = [\n    \"Qdrant is the best vector search engine!\",\n    \"Loved by Enterprises and everyone building for low latency, high performance, and scale.\",\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {QdrantClient} from '@qdrant/js-client-rest';\nimport { pipeline } from '@xenova/transformers';\n\nconst client = new QdrantClient({ url: 'http://localhost:6333' });\n\nconst extractor = await pipeline('feature-extraction', 'Snowflake/snowflake-arctic-embed-s');\n\nconst texts = [\n    \"Qdrant is the best vector search engine!\",\n    \"Loved by Enterprises and everyone building for low latency, high performance, and scale.\",\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Strict Mode in Go\nDESCRIPTION: Go code for updating an existing Qdrant collection to disable strict mode using the Qdrant Go client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/administration.md#2025-04-21_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"context\"\n\n  \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n  Host: \"localhost\",\n  Port: 6334,\n})\n\nclient.UpdateCollection(context.Background(), &qdrant.UpdateCollection{\n  CollectionName: \"{collection_name}\",\n  StrictModeConfig: &qdrant.StrictModeConfig{\n        Enabled: qdrant.PtrOf(false),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Evaluation Job\nDESCRIPTION: Executes the evaluation process using specified collection, recipe and number of documents to retrieve.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Kick off an evaluation job\nexperiment_1 = run_eval(eval_df,\n                        collection_name=COLLECTION_NAME,\n                        recipe_id=recipe_mistral['id'],\n                        num_docs=num_docs,\n                        path=f\"{COLLECTION_NAME}_{num_docs}_mistral.csv\")\n```\n\n----------------------------------------\n\nTITLE: Cloning the ChatGPT Retrieval Plugin Repository\nDESCRIPTION: Command to clone the official ChatGPT retrieval plugin repository from GitHub, which is the starting point for setting up a knowledge base with Qdrant integration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/chatgpt-plugin.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:openai/chatgpt-retrieval-plugin.git\n```\n\n----------------------------------------\n\nTITLE: Advanced Mem0 Operations\nDESCRIPTION: Examples of advanced Mem0 operations including searching memories, updating existing memories, and retrieving memory history\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/mem0.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Search memories\nrelated_memories = m.search(query=\"What are Alice's hobbies?\", user_id=\"alice\")\n\n# Update existing memory\nresult = m.update(memory_id=\"m1\", data=\"Likes to play tennis on weekends\")\n\n# Get memory history\nhistory = m.history(memory_id=\"m1\")\n```\n\n----------------------------------------\n\nTITLE: Embedding Spotify Podcast IFrame\nDESCRIPTION: HTML iframe code for embedding the Spotify podcast episode featuring Iveta Lohovska.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/gen-ai-and-vector-search-iveta-lohovska-vector-space-talks.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://podcasters.spotify.com/pod/show/qdrant-vector-space-talk/embed/episodes/Gen-AI-and-Vector-Search---Iveta-Lohovska--Vector-Space-Talks-020-e2hnie2/a-ab48uha\" height=\"102px\" width=\"400px\" frameborder=\"0\" scrolling=\"no\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Qdrant and Dataset Handling in Python\nDESCRIPTION: This command installs the Qdrant client and datasets library using pip, which are necessary for interacting with Qdrant and handling datasets.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/create-snapshot.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install qdrant-client datasets\n```\n\n----------------------------------------\n\nTITLE: Connecting to Qdrant Client in Python\nDESCRIPTION: Initializes a QdrantClient object to connect to a local Qdrant instance running on the default port.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/hybrid-search.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(\"http://localhost:6333\")\n```\n\n----------------------------------------\n\nTITLE: Deleting Snapshots in Qdrant using TypeScript\nDESCRIPTION: Sets up a Qdrant client connection and deletes a specified snapshot. Requires the @qdrant/js-client-rest package and a running Qdrant instance on localhost:6333.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/delete-full-snapshot/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.deleteFullSnapshot(\"{snapshot_name}\");\n```\n\n----------------------------------------\n\nTITLE: Executing Multi-Vector Similarity Search with Qdrant\nDESCRIPTION: Performs a vector similarity search using Qdrant client with multiple query vectors, prefetch, and specific vector field configuration\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring-multivector/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  prefetch: new List <PrefetchQuery> {\n    new() {\n      Query = new float[] { 0.01f, 0.45f, 0.67f\t},\t// <-- dense vector****\n        Limit = 100\n    }\n  },\n  query: new float[][] {\n    [0.1f, 0.2f], // <─┐\n    [0.2f, 0.1f], // < ├─ multi-vector\n    [0.8f, 0.9f]  // < ┘\n  },\n  usingVector: \"colbert\",\n  limit: 10\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Bootstrap Color Classes in HTML\nDESCRIPTION: Demonstrates the usage of Bootstrap's color utility classes for text colors, background colors, and colored links. Shows various combinations of text-bg classes for contrasting colors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/debug.skip/bootstrap.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p class=\"text-primary\">.text-primary</p>\n<p class=\"text-secondary\">.text-secondary</p>\n<div class=\"text-bg-primary p-3\">Primary with contrasting color</div>\n<div class=\"p-3 mb-2 bg-primary text-white\">.bg-primary</div>\n<a href=\"#\" class=\"link-primary\">Primary link</a>\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Recovering Snapshot\nDESCRIPTION: Establishes a connection to a Qdrant vector database instance and recovers a collection snapshot from a specified location. The client connects to a local Qdrant instance on port 6333 and performs snapshot recovery for a named collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/recover-collection-snapshot-from-url/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.recoverSnapshot(\"{collection_name}\", {\n  location: \"http://qdrant-node-1:6333/collections/{collection_name}/snapshots/snapshot-2022-10-10.shapshot\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing SDKs using Package Managers\nDESCRIPTION: This snippet shows how to install the PremAI and Qdrant SDKs via pip for Python and npm for JavaScript.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/premai.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install premai qdrant-client\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @premai/prem-sdk @qdrant/js-client-rest\n```\n\n----------------------------------------\n\nTITLE: Creating Payload Index for Access Control\nDESCRIPTION: Creates a payload index on the 'metadata.roles' field in the 'contracts' collection to enable role-based access control for documents.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-contract-management-stackit-aleph-alpha.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclient.create_payload_index(\n    collection_name=\"contracts\",\n    field_name=\"metadata.roles\",\n    field_schema=models.PayloadSchemaType.KEYWORD,\n)\n```\n\n----------------------------------------\n\nTITLE: Loading and Chunking Documents\nDESCRIPTION: Loads documents from the GitLab legal policies directory and splits them into chunks using LangChain.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-relari.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nloader = DirectoryLoader(\"gitlab_legal_policies/\")\ndocuments = loader.load_and_split()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Python Libraries (Python)\nDESCRIPTION: Python code to import necessary libraries including QdrantClient, models from qdrant_client, and pandas.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/recommendation-system-ovhcloud.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient, models\nimport pandas as pd\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Section Delimiter in YAML\nDESCRIPTION: Defines metadata and rendering settings for a documentation section delimiter file, controlling page organization and site generation behavior\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/dl-tutorials.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Tutorials\"\ntype: delimiter\nweight: 15\nsitemapExclude: True\n_build:\n  publishResources: false\n  render: never\npartition: qdrant\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Qdrant\nDESCRIPTION: This snippet outlines how to configure environment variables for Airflow, specifically for Qdrant and HuggingFace credentials, which are necessary to authenticate and make requests to the respective services.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/send-data/qdrant-airflow-astronomer.md#2025-04-21_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nHUGGINGFACE_TOKEN=\"<YOUR_HUGGINGFACE_ACCESS_TOKEN>\"\nAIRFLOW_CONN_QDRANT_DEFAULT='{\\n    \"conn_type\": \"qdrant\",\\n    \"host\": \"xyz-example.eu-central.aws.cloud.qdrant.io:6333\",\\n    \"password\": \"<YOUR_QDRANT_API_KEY>\"\\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Qdrant Collection with Multiple Vector Fields using cURL\nDESCRIPTION: This cURL command sends a PUT request to create or update a Qdrant collection. It configures two vector fields: 'image' with size 4 and Dot product distance, and 'text' with size 8 and Cosine distance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-collection/multiple-vectors/bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"vectors\": {\n        \"image\": {\n            \"size\": 4,\n            \"distance\": \"Dot\"\n        },\n        \"text\": {\n            \"size\": 8,\n            \"distance\": \"Cosine\"\n        }\n      }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Configuring IDF in Qdrant Collection - Rust\nDESCRIPTION: Rust implementation using the Qdrant client to create a collection with IDF modifier for sparse vectors.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.10.x.md#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{CreateCollectionBuilder, sparse_vectors_config::SparseVectorsConfigBuilder, Modifier, SparseVectorParamsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet mut config = SparseVectorsConfigBuilder::default();\nconfig.add_named_vector_params(\n    \"text\",\n    SparseVectorParamsBuilder::default().modifier(Modifier::Idf),\n);\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .sparse_vectors_config(config),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Contact Page\nDESCRIPTION: YAML configuration block that defines page content, contact link information, and sitemap exclusion settings for a contact assistance page.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/hybrid-cloud/get-contacted-with-question.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncontent: Do you have further questions? We are happy to assist you.\ncontactUs:\n  text: Contact us\n  url: /contact-us/\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Skopeo Container Image Synchronization\nDESCRIPTION: Sync multiple Qdrant container images from source registry to destination registry using Skopeo\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/hybrid-cloud/hybrid-cloud-setup.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nskopeo sync --all --src docker --dest docker registry.cloud.qdrant.io/qdrant/operator your-registry.example.com/qdrant/operator\n```\n\n----------------------------------------\n\nTITLE: Uploading Vectors to Qdrant\nDESCRIPTION: Uploading movie descriptions and their embeddings to the Qdrant collection\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/fastembed/fastembed-rerankers.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nqdrant_client.upload_points(\n    collection_name=\"movies\",\n    points=[\n        models.PointStruct(\n            id=idx,\n            payload={\n                \"description\": description\n            },\n            vector={\n                \"embedding\": vector\n            }\n        )\n        for idx, (description, vector) in enumerate(zip(descriptions, \n                                                        descriptions_embeddings))\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Go\nDESCRIPTION: This snippet demonstrates how to initialize a new Qdrant client in Go.  It uses the `qdrant.NewClient` function and configures the client with the host and port of the Qdrant instance.  An error is returned if client creation fails.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/update-collection/trigger-indexing/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Johnson & Johnson Logo in SVG\nDESCRIPTION: SVG definition for the Johnson & Johnson logo. The code specifies the vector paths with precise coordinate data and styling parameters to create the company's distinctive ampersand symbol.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_15\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1.79304 40.97C1.79304 41.9492 2.40477 42.0727 2.89384 41.8276C3.50557 41.4609 4.11704 40.4828 4.3621 39.2567C4.85224 35.8319 4.4845 33.7508 4.3621 33.6292C4.2397 33.6303 1.54797 36.8119 1.79304 40.97ZM4.2397 32.6511C3.99464 31.3052 3.87304 30.4495 3.87304 28.9812C3.75064 27.5129 3.62904 25.9231 4.1181 24.2095C4.48557 22.9852 5.21997 21.7628 5.46397 21.2727C4.2397 22.0079 2.89384 22.7409 1.91571 25.5561C1.42557 26.7785 1.42557 31.4287 3.38397 33.7535C3.62904 33.5076 3.75064 33.386 3.87304 33.2644C3.99464 33.0185 4.1181 32.8959 4.2397 32.6511ZM5.95303 31.6727C6.3205 33.0185 6.1981 36.6884 5.46397 38.6479C4.85224 40.3593 4.1181 41.9492 2.77224 42.9276C1.18237 43.9068 0.203176 42.1953 0.570642 40.2377C1.18237 37.1785 3.0173 34.242 3.1397 34.242C-0.286157 31.9188 -0.652823 27.5129 0.814642 24.5772C2.03784 22.1305 4.72957 20.7847 6.19783 20.7847C6.31943 20.7847 6.4429 20.7847 6.4429 20.9063C5.4637 23.2313 5.4637 25.3113 5.5853 26.5337C5.5853 28.2471 5.95277 30.8161 6.07543 30.9388C6.4429 30.5721 7.17623 29.9596 7.91036 29.3479C9.86689 28.1247 11.2128 27.8804 11.2128 27.8804C11.0912 27.8804 9.7453 29.1036 9.7453 31.3044C9.7453 34.2412 12.437 33.9961 13.2936 32.7737C13.6602 32.1612 13.6602 31.0604 13.6602 30.9388C13.5378 30.9388 11.8253 31.1839 11.0912 30.0823C10.4794 29.2265 11.0912 27.5132 12.9261 28.1247C14.0277 28.3697 14.272 30.2047 14.272 30.2047C14.6394 30.0823 14.8837 29.9596 15.2504 29.8372C15.6178 29.7145 15.8629 29.4697 16.2296 29.3481C16.2296 29.2265 16.2296 26.6575 16.2296 25.6783C16.3512 24.6999 16.8413 22.2524 18.5546 21.3959C19.777 20.6625 20.8778 21.886 20.2671 24.0876C19.5319 26.4127 17.8205 28.4927 17.8205 28.4927V32.53C17.8205 32.53 19.6554 29.1052 19.9005 28.7375C20.8789 27.5143 22.3471 27.7583 22.3471 29.3492C22.3471 30.9401 21.9797 31.7967 21.9797 33.1417C21.9797 33.6308 22.3471 33.6308 22.4698 33.5084C23.449 32.1625 24.1831 30.5727 25.2839 28.8601C26.2623 27.2692 27.6079 27.7585 27.4863 29.2276C27.4863 30.3284 27.4863 31.0617 27.4863 32.1625C27.4863 32.4076 27.7314 32.2849 27.7314 32.1625C28.2205 31.3057 29.1989 29.7159 29.8114 28.6151C30.5447 27.3919 32.013 27.8817 32.013 29.4708C32.013 30.8167 31.8906 31.6743 31.7679 33.1417C31.7679 33.5084 32.013 33.5084 32.1354 33.2641C33.3586 31.6732 33.8487 30.5724 34.8261 28.8591C35.0711 28.4916 35.317 28.0023 35.4378 28.0023C35.5613 27.7572 35.8045 27.8807 35.8045 28.0023C35.8045 28.0023 35.9279 28.3689 36.0503 28.614C36.2954 29.4697 36.5394 29.9599 36.9069 30.694C37.0303 30.694 38.4967 29.5913 39.5986 29.1041C40.577 28.4924 40.821 28.3689 42.5335 28.0023C41.9229 28.2473 40.9437 29.9588 40.9437 31.1831C40.9437 33.9964 43.1453 34.3639 44.2479 33.5071C45.2279 32.7729 45.2279 31.0604 45.1047 30.6937C45.1047 30.6937 43.1463 31.4279 42.2906 29.9585C41.6789 28.9801 42.6573 27.7569 44.1266 28.1236C44.9834 28.3687 45.5948 29.7135 45.5948 29.7135C45.5948 29.7135 47.1847 28.7353 47.9199 28.246C49.2658 27.6343 49.754 28.246 49.754 29.4684C49.6324 30.6927 49.51 32.5276 49.51 32.5276C49.51 32.5276 50.9783 29.9575 51.7116 28.9801C53.1799 27.0217 54.0367 28.7351 54.0367 29.5919C54.0367 30.6945 53.67 31.6719 53.7908 33.5068C53.7908 33.7519 54.1594 33.8743 54.281 33.7519C54.6484 33.6303 54.8927 33.2636 54.8927 33.2636C55.0151 33.1412 55.3818 33.1412 55.2594 33.3852C55.1386 33.8743 54.526 34.73 53.7911 35.222C53.1804 35.5887 52.0786 35.4652 52.0786 34.242C52.0786 33.8745 52.201 30.8161 52.3244 30.0831C52.3244 29.838 52.0786 29.594 51.8343 29.838C50.4895 31.674 49.7543 33.754 49.1444 34.8537C48.777 35.4644 47.6751 35.4644 47.6751 34.6087C47.6751 32.7729 47.7986 31.6719 47.7986 29.8369C47.9212 29.3479 47.6751 29.2263 47.3084 29.3479C46.4527 29.9596 45.8402 30.3271 45.8402 30.3271C45.8402 30.5721 46.086 33.1412 44.6178 34.4871C43.1484 35.8329 40.5794 35.4663 39.7245 33.6303C38.9893 32.0393 39.6021 29.9593 40.0919 29.4703C39.4794 29.5927 39.1127 29.8377 38.6226 30.2055C38.0127 30.4505 37.6434 30.8172 37.1543 31.3063C37.2778 31.3063 38.257 33.9969 36.9103 34.978C35.4421 35.8337 34.3402 34.978 34.3402 33.9988C34.3402 33.0204 35.4418 31.9196 35.5645 31.9196C35.5645 31.7972 35.3205 31.306 35.197 30.9404C35.0746 30.6953 34.9519 30.4513 34.8295 30.2063C34.8295 30.3287 32.6279 33.7545 32.3829 34.2436C31.1597 35.9569 30.0578 35.1004 30.0578 34.122C29.9362 32.8988 30.3029 31.0628 30.1802 30.0847C30.1802 29.7172 30.0578 29.7172 29.8135 29.962C28.7109 31.6753 28.4677 32.6537 27.1218 34.7345C26.7543 35.2236 25.6535 35.5903 25.6535 34.3671C25.7762 32.6537 25.7762 31.6753 25.7762 29.962C25.7762 29.8404 25.6535 29.5953 25.5311 29.8404C24.3079 31.3079 23.4511 33.6329 22.4719 34.6121C21.3711 35.7137 20.3919 35.1012 20.5143 34.1239C20.5143 32.4105 20.5143 31.4321 20.6359 29.8415C20.6359 29.474 20.3909 29.3524 20.1477 29.7191C19.045 31.4324 18.801 32.1657 17.6992 34.7356C17.3325 35.5913 16.1093 35.3463 16.1093 34.2455C16.232 32.4095 16.232 29.9631 16.232 29.9631C15.8653 30.2081 15.6202 30.3305 15.2528 30.4532C15.0077 30.5756 14.7637 30.6983 14.397 30.8199C14.397 30.9425 14.6421 33.878 12.4394 34.8572C10.7261 35.5913 8.7685 35.1023 8.15783 32.6548C7.79116 31.7991 8.15783 30.4532 8.4029 29.9631C7.91383 30.2081 7.66877 30.3305 7.1797 30.6983C6.68637 31.0601 6.44317 31.3041 5.95303 31.6727ZM12.6821 28.6135C11.948 28.3684 11.3362 29.226 11.8264 29.8367C12.3146 30.4484 13.5389 30.3257 13.5389 30.3257C13.6605 30.2044 13.5378 28.8585 12.6821 28.6135ZM43.7575 28.6135C43.0223 28.4919 42.5333 29.4692 43.145 29.9593C43.881 30.5719 44.9818 30.082 44.9818 30.082C44.9818 30.082 44.6132 28.8585 43.7575 28.6135ZM19.4111 23.1087C19.4111 22.2519 18.9221 21.2727 18.3096 22.4961C17.697 23.7193 17.8205 27.5119 17.8205 27.5119C17.8205 27.5119 19.2879 26.0444 19.4111 23.1087ZM35.0711 33.9959C34.9485 34.9759 35.8045 34.8535 36.0493 34.2417C36.2943 33.7535 35.8034 32.5292 35.8034 32.5292C35.8034 32.5292 35.0711 33.0185 35.0711 33.9959Z\" fill=\"#B4BACC\"/><path d=\"M66.1465 40.97C66.27 41.9492 66.759 42.0727 67.2492 41.8276C67.859 41.461 68.4716 40.4828 68.7156 39.2567C69.3273 35.8319 68.8382 33.7508 68.7156 33.6292C68.5932 33.6303 65.9025 36.8119 66.1465 40.97ZM68.5932 32.6511C68.3481 31.3052 68.2257 30.4495 68.2257 28.9812C68.1041 27.513 67.9817 25.9231 68.5932 24.2095C68.8372 22.9852 69.5716 21.7628 69.938 21.2727C68.5932 22.0068 67.367 22.741 66.267 25.5551C65.9004 26.7775 65.7788 31.4276 67.8569 33.7516C67.9812 33.5066 68.1038 33.385 68.2244 33.2634C68.3492 33.0186 68.4697 32.8959 68.5932 32.6511ZM77.0348 28.6135C76.3006 28.3684 75.69 29.226 76.179 29.8367C76.6673 30.4484 77.8916 30.3258 77.8916 30.3258C78.0148 30.2044 77.8916 28.8586 77.0348 28.6135ZM108.109 28.6135C107.375 28.4919 106.887 29.4692 107.498 29.9594C108.231 30.5719 109.334 30.082 109.334 30.082C109.334 30.082 108.966 28.8586 108.109 28.6135ZM83.763 23.1087C83.763 22.2519 83.274 21.2727 82.6604 22.4962C82.0497 23.7194 82.1721 27.5119 82.1721 27.5119C82.1721 27.5119 83.6404 26.0444 83.763 23.1087ZM99.4227 33.9959C99.3001 34.9759 100.279 34.8535 100.525 34.2418C100.769 33.7535 100.158 32.5292 100.158 32.5292C100.158 32.5292 99.4227 33.0186 99.4227 33.9959ZM61.4966 32.7735C61.4966 32.7735 60.7633 31.6727 59.6617 31.3042C58.6833 31.0602 58.1943 32.161 59.1735 32.65C60.5193 33.2636 61.4966 32.7735 61.4966 32.7735ZM69.939 26.5335C70.0606 28.2468 70.4281 30.8159 70.4281 30.9386C70.7956 30.5719 71.5289 29.9594 72.263 29.3476C74.2196 28.1244 75.5673 27.8802\" fill=\"#B4BACC\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Converting Dataset to DataFrame\nDESCRIPTION: Converting HuggingFace dataset to pandas DataFrame for easier processing\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/storing-multiple-vectors-per-object-in-qdrant.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndataset_df = pd.DataFrame(dataset[\"train\"])\n```\n\n----------------------------------------\n\nTITLE: Upserting Points with Sparse Vectors in Qdrant using TypeScript\nDESCRIPTION: This code snippet demonstrates how to upsert multiple points with sparse vectors into a Qdrant collection. It uses the client.upsert method to insert or update points, each with a unique ID and a sparse vector representation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/sparse-vectors/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient.upsert(\"{collection_name}\", {\n  points: [\n    {\n      id: 1,\n      vector: {\n        text: {\n          indices: [6, 7],\n          values: [1.0, 2.0],\n        },\n      },\n    },\n    {\n      id: 2,\n      vector: {\n        text: {\n          indices: [1, 2, 3, 4, 5],\n          values: [0.1, 0.2, 0.3, 0.4, 0.5],\n        },\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Rust\nDESCRIPTION: This snippet demonstrates creating a Qdrant client using the gRPC interface provided by the Rust client.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\\n\\n// The Rust client uses Qdrant's gRPC interface\\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n```\n\n----------------------------------------\n\nTITLE: Defining Geo-bounding Box using JSON\nDESCRIPTION: This JSON snippet defines a rectangular area on a map using latitude and longitude coordinates of the top-left and bottom-right corners. This structure is commonly used in geospatial queries to filter data points within a specific geographic area. It requires a JSON-compliant environment to parse and utilize the coordinates defined.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-bounding-box/json.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"location\",\n  \"geo_bounding_box\": {\n    \"bottom_right\": {\n      \"lon\": 13.455868,\n      \"lat\": 52.495862\n    },\n    \"top_left\": {\n      \"lon\": 13.403683,\n      \"lat\": 52.520711\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript/JavaScript Client with API Key Authentication\nDESCRIPTION: Example of initializing the Qdrant JavaScript client with API key authentication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/security.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({\n  url: \"http://localhost\",\n  port: 6333,\n  apiKey: \"your_secret_api_key_here\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Neo4j, Qdrant, and OpenAI Integration in Python\nDESCRIPTION: This snippet imports necessary libraries for working with Neo4j, Qdrant, OpenAI, and other utility functions. It includes imports for database connections, vector operations, environment variable management, and data modeling.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/graphrag-qdrant-neo4j.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom neo4j import GraphDatabase\nfrom qdrant_client import QdrantClient, models\nfrom dotenv import load_dotenv\nfrom pydantic import BaseModel\nfrom openai import OpenAI\nfrom collections import defaultdict\nfrom neo4j_graphrag.retrievers import QdrantNeo4jRetriever\nimport uuid\nimport os\n```\n\n----------------------------------------\n\nTITLE: Listing Available Recipes\nDESCRIPTION: Simple command to list all existing evaluation recipes in the system.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nquotient.list_recipes()\n```\n\n----------------------------------------\n\nTITLE: Update Point Payload in Qdrant Collection with Filter\nDESCRIPTION: HTTP POST request to update payload properties for points in a Qdrant collection that match the specified filter criteria. The request filters for points where the 'color' property matches 'red' and updates property1 and property2 values.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/set-payload/by-filter/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/payload\n{\n    \"payload\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n    },\n    \"filter\": {\n        \"must\": [\n            {\n                \"key\": \"color\",\n                \"match\": {\n                    \"value\": \"red\"\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Booking Packages Data Source in Pulumi\nDESCRIPTION: Fetch available Qdrant Cloud booking packages for a specific cloud provider and region\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/cloud-tools/pulumi.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nqdrant_cloud.get_booking_packages(cloud_provider=\"aws\", cloud_region=\"us-west-2\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nqdrantCloud.getBookingPackages({\n    cloudProvider: \"aws\",\n    cloudRegion: \"us-west-2\"\n})\n```\n\nLANGUAGE: java\nCODE:\n```\nQdrantcloudFunctions.getBookingPackages(GetBookingPackagesArgs.builder()\n        .cloudProvider(\"aws\")\n        .cloudRegion(\"us-west-2\")\n        .build());\n```\n\n----------------------------------------\n\nTITLE: Setting RAG Connector URL Environment Variable in Python\nDESCRIPTION: Sets the environment variable for the RAG connector URL using Python's os module.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-customer-support-cohere-airbyte-aws.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nos.environ[\"RAG_CONNECTOR_URL\"] = \"https://rag-connector.example.com/search\"\n```\n\n----------------------------------------\n\nTITLE: Defining Qdrant Logo with SVG in a Configuration File\nDESCRIPTION: SVG markup defining the Qdrant logo with vector paths and styling. The logo includes the Qdrant name and a distinctive graphic element, using a color palette with #B4BACC as the primary color.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_9\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_1629_8447)\"><path d=\"M15.2632 39.1475C15.8638 39.1475 16.2241 39.6279 16.2241 40.1084C16.2241 40.7089 15.7437 41.0693 15.2632 41.0693C14.6627 41.0693 14.3024 40.5888 14.3024 40.1084C14.3024 39.6279 14.6627 39.1475 15.2632 39.1475ZM30.9979 33.0218C30.3973 33.0218 30.037 32.5414 30.037 32.0609C30.037 31.5805 30.5174 31.1 30.9979 31.1C31.5984 31.1 31.9588 31.5805 31.9588 32.0609C31.9588 32.5414 31.4783 33.0218 30.9979 33.0218ZM30.9979 28.938C29.3163 28.938 27.875 30.3794 27.875 32.0609C27.875 32.4213 27.875 32.7816 27.9951 33.0218L17.7856 38.4268C17.185 37.5861 16.2241 37.1056 15.2632 37.1056C14.0621 37.1056 12.9811 37.8263 12.5007 38.7872L3.37221 33.9827C2.41131 33.5023 1.69065 31.8207 1.81076 30.3794C1.81076 29.6587 2.17109 29.0582 2.53143 28.8179C2.77165 28.6978 3.13198 28.6978 3.37221 28.8179H3.49232C5.89455 30.1392 13.942 34.2229 14.1822 34.4632C14.6627 34.7034 15.023 34.8235 15.8638 34.343L32.3191 25.8152C32.5593 25.695 32.7995 25.4548 32.7995 25.0945C32.7995 24.614 32.3191 24.3738 32.3191 24.3738C31.3582 23.8934 29.9169 23.2928 28.5956 22.5721C25.5928 21.1308 22.2297 19.5694 20.6683 18.8487C19.347 18.128 18.3861 18.7286 18.1459 18.8487L17.7856 18.9688C11.0593 22.3319 2.05098 26.776 1.57053 27.0163C0.609642 27.6168 0.129196 28.6978 0.00908488 30.019C-0.111027 32.181 0.969977 34.4632 2.65154 35.3039L12.3806 40.3486C12.6208 41.9101 13.942 42.9911 15.3834 42.9911C17.0649 42.9911 18.5063 41.6698 18.5063 39.9883L29.1962 34.2229C29.7967 34.7034 30.3973 34.8235 31.118 34.8235C32.7995 34.8235 34.2409 33.3822 34.2409 31.7006C34.0006 30.2593 32.6794 28.938 30.9979 28.938Z\" fill=\"#B4BACC\"/><path d=\"M54.4193 37.1058C53.8188 37.7063 52.978 38.3069 51.897 38.6672C50.816 39.0275 49.6148 39.2678 48.2936 39.2678C46.2517 39.2678 44.5702 38.6672 43.3691 37.346C42.1679 36.1449 41.4473 34.3432 41.4473 32.1812V30.86C41.4473 29.2985 41.6875 27.9773 42.288 26.8963C42.8886 25.6952 43.6093 24.8544 44.5702 24.2539C45.5311 23.6533 46.7322 23.293 48.0534 23.293C49.9752 23.293 51.5366 23.7734 52.6176 24.6142C53.6986 25.455 54.2992 26.7762 54.5394 28.5779H50.9361C50.816 27.7371 50.5757 27.1365 50.0953 26.7762C49.6148 26.4159 49.0143 26.1756 48.2936 26.1756C47.3327 26.1756 46.6121 26.536 46.1316 27.3768C45.6512 28.2175 45.4109 29.2985 45.2908 30.7399V31.7008C45.2908 33.2622 45.5311 34.4633 46.1316 35.184C46.6121 35.9046 47.4528 36.3851 48.654 36.3851C49.6148 36.3851 50.3355 36.1449 50.816 35.7845V33.3823H48.1735V30.86H54.5394V37.1058H54.4193Z\" fill=\"#B4BACC\"/><path d=\"M56.5815 39.0275H60.1849V27.4968H56.5815V39.0275ZM56.4614 24.4941C56.4614 24.0136 56.7016 23.5332 57.062 23.1728C57.4223 22.8125 57.9028 22.6924 58.5033 22.6924C59.1039 22.6924 59.5843 22.8125 59.9447 23.1728C60.305 23.5332 60.5452 23.8935 60.5452 24.4941C60.5452 24.9745 60.305 25.4549 59.9447 25.8153C59.5843 26.1756 59.1039 26.2957 58.5033 26.2957C57.9028 26.2957 57.4223 26.1756 57.062 25.8153C56.5815 25.4549 56.4614 25.0946 56.4614 24.4941Z\" fill=\"#B4BACC\"/><path d=\"M66.6711 24.6143V27.4969H68.5929V30.0193H66.6711V35.3042C66.6711 35.7846 66.7913 36.0248 66.9114 36.265C67.0315 36.3852 67.3918 36.5053 67.8723 36.5053C68.2326 36.5053 68.4728 36.5053 68.713 36.3852V38.9075C68.1125 39.1477 67.3918 39.2678 66.6711 39.2678C65.47 39.2678 64.5091 39.0276 63.9086 38.427C63.308 37.8265 63.0678 36.9857 63.0678 35.7846V30.0193H61.6265V27.4969H63.0678V24.6143H66.6711Z\" fill=\"#B4BACC\"/><path d=\"M73.8778 32.4214V36.1449H76.28C77.0007 36.1449 77.4811 36.0248 77.8414 35.6644C78.2018 35.3041 78.442 34.9438 78.442 34.3432C78.442 33.022 77.8414 32.4214 76.5202 32.4214H73.8778ZM73.8778 30.0192H75.7995C76.6403 30.0192 77.2409 29.8991 77.6012 29.5388C77.9615 29.2985 78.0817 28.8181 78.0817 28.2175C78.0817 27.617 77.8414 27.1365 77.4811 26.7762C77.1208 26.536 76.5202 26.2958 75.6794 26.2958H73.8778V30.0192ZM70.1543 39.0276V23.5332H75.7995C77.8414 23.5332 79.2828 23.8935 80.3638 24.6142C81.4448 25.3349 81.9252 26.4159 81.9252 27.8572C81.9252 28.698 81.685 29.2985 81.3247 29.8991C80.9643 30.4997 80.3638 30.86 79.6431 31.1002C80.4839 31.3404 81.0844 31.7008 81.5649 32.3013C82.0453 32.9019 82.1654 33.6226 82.1654 34.4633C82.1654 36.0248 81.685 37.1058 80.7241 37.9466C79.7632 38.6672 78.3219 39.1477 76.4001 39.1477L70.1543 39.0276Z\" fill=\"#B4BACC\"/><path d=\"M87.2098 33.382C87.2098 34.463 87.3299 35.1837 87.6902 35.7842C88.0506 36.2647 88.531 36.5049 89.1316 36.5049C90.4528 36.5049 91.0534 35.544 91.0534 33.5021V33.1418C91.0534 31.0999 90.3327 30.0189 89.0115 30.0189C87.8103 30.0189 87.2098 30.8597 87.0897 32.6614L87.2098 33.382ZM83.6064 33.1418C83.6064 31.9407 83.8467 30.9798 84.3271 30.0189C84.8076 29.1781 85.4081 28.4575 86.2489 27.977C87.0897 27.4966 88.0506 27.2563 89.2517 27.2563C90.9333 27.2563 92.3746 27.7368 93.3355 28.8178C94.2964 29.8988 94.7768 31.3401 94.7768 33.1418V33.382C94.7768 35.1837 94.2964 36.625 93.2154 37.706C92.2545 38.787 90.8131 39.2675 89.1316 39.2675C87.45 39.2675 86.1288 38.787 85.1679 37.8261C84.207 36.8652 83.6064 35.544 83.6064 33.8625V33.1418Z\" fill=\"#B4BACC\"/><path d=\"M99.5819 33.382C99.5819 34.463 99.702 35.1837 100.062 35.7842C100.423 36.2647 100.903 36.5049 101.504 36.5049C102.825 36.5049 103.425 35.544 103.425 33.5021V33.1418C103.425 31.0999 102.705 30.0189 101.384 30.0189C100.182 30.0189 99.5819 30.8597 99.4618 32.6614L99.5819 33.382ZM95.9785 33.1418C95.9785 31.9407 96.2187 30.9798 96.6992 30.0189C97.1796 29.1781 97.7802 28.4575 98.621 27.977C99.4617 27.4966 100.423 27.2563 101.624 27.2563C103.305 27.2563 104.747 27.7368 105.708 28.8178C106.668 29.8988 107.149 31.3401 107.149 33.1418V33.382C107.149 35.1837 106.668 36.625 105.587 37.706C104.627 38.787 103.185 39.2675 101.504 39.2675C99.8221 39.2675 98.5009 38.787 97.54 37.8261C96.5791 36.8652 95.9785 35.544 95.9785 33.8625V33.1418Z\" fill=\"#B4BACC\"/><path d=\"M113.394 34.8236L112.313 35.7845V39.0275H108.71V22.6924H112.313V31.3404L112.674 30.8599L115.436 27.4968H119.76L115.676 32.3013L120 39.0275H115.917L113.394 34.8236Z\" fill=\"#B4BACC\"/></g><defs><clipPath id=\"clip0_1629_8447\"><rect width=\"120\" height=\"64\" fill=\"white\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for SmolAgents and Qdrant\nDESCRIPTION: Command to install the necessary Python packages including smolagents, qdrant-client, and fastembed.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/smolagents.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install smolagents qdrant-client fastembed\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Go Client and Listing Aliases\nDESCRIPTION: This snippet shows how to import the Qdrant Go client, create a new client instance with connection details, and perform a basic ListAliases operation. The client connects to a Qdrant server running on localhost at port 6334.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/list-all/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.ListAliases(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Sparse Vector Query in Go\nDESCRIPTION: This code creates a new Qdrant client with local connection parameters and performs a sparse vector query on a specified collection. The query uses specific vector indices and corresponding weights, and targets the 'text' field in the collection.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/sparse-vectors/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery: qdrant.NewQuerySparse(\n\t\t[]uint32{1, 3, 5, 7},\n\t\t[]float32{0.1, 0.2, 0.3, 0.4}),\n\tUsing: qdrant.PtrOf(\"text\"),\n})\n```\n\n----------------------------------------\n\nTITLE: BCGX Logo SVG Definition\nDESCRIPTION: SVG markup defining the BCGX company logo with paths and mask definitions. Includes multiple path elements with detailed polygon coordinates for rendering the logo.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_6\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M75.0736 30.1286H64.837L63.2827 32.569L61.7248 35.0095H69.6124C69.173 36.5582 68.2698 37.9352 67.0243 38.955C65.7343 39.979 64.1312 40.5278 62.4844 40.5094C61.4256 40.5082 60.378 40.2929 59.4044 39.8765C58.4309 39.4602 57.5515 38.8514 56.8193 38.0865C55.3231 36.5328 54.4885 34.4589 54.4913 32.3017C54.4931 30.1637 55.3385 28.1127 56.8439 26.5944C57.5902 25.8385 58.4794 25.2386 59.4599 24.8299C60.4405 24.4212 61.4924 24.2117 62.5547 24.2137C63.4761 24.2081 64.3922 24.3542 65.266 24.6463C66.0832 24.9237 66.852 25.3271 67.5447 25.8419L68.9197 23.6511L70.2911 21.4462C69.219 20.6894 68.0315 20.1111 66.7745 19.7336C65.4194 19.3279 64.0115 19.1252 62.5969 19.1323C60.7634 19.1148 58.9443 19.4602 57.2448 20.1486C55.6863 20.7887 54.2718 21.7345 53.0847 22.9302C50.2714 25.7434 49.4943 28.5567 48.9317 31.1659C48.369 33.7752 48.0385 36.1489 46.1396 38.0478C45.3869 38.8162 44.4925 39.4312 43.5056 39.8589C42.5225 40.2704 41.4664 40.4796 40.4005 40.4742C39.3114 40.4739 38.2331 40.2587 37.2272 39.8411C36.2213 39.4236 35.3076 38.8117 34.5384 38.0408C33.7742 37.2919 33.1654 36.3994 32.7472 35.4145C32.3289 34.4296 32.1094 33.3717 32.1014 32.3017C32.11 31.2418 32.3281 30.194 32.7434 29.2187C33.1585 28.2434 33.7627 27.3599 34.5209 26.619C36.0776 25.0632 38.1821 24.1795 40.383 24.1575C41.2913 24.17 42.193 24.3157 43.059 24.59C43.8676 24.846 44.6264 25.2385 45.3026 25.7505L46.7092 23.5632L48.1159 21.3724C47.0444 20.6227 45.8561 20.0558 44.5993 19.695C43.2332 19.3104 41.8196 19.121 40.4005 19.1323C38.2238 19.125 36.0776 19.6438 34.1446 20.6444C32.3073 21.5932 30.7168 22.9574 29.4992 24.6287C29.0093 23.1618 28.0345 21.9054 26.7352 21.0664C25.2746 20.1238 23.5679 19.6344 21.8297 19.6598H10V44.979H23.0569C24.5672 45.0012 26.0583 44.6381 27.3893 43.924C28.5775 43.2761 29.5679 42.3186 30.2552 41.1529C31.4791 42.5075 32.9697 43.5945 34.6334 44.346C36.5265 45.182 38.5826 45.5842 40.6513 45.5235C42.72 45.4625 44.7489 44.9402 46.5897 43.9942C48.4548 43.0092 50.0555 41.5896 51.2561 39.8553C52.4347 41.592 54.0244 43.0103 55.8839 43.9837C57.8738 45.0156 60.0847 45.5478 62.3261 45.5345C64.0389 45.542 65.7353 45.2032 67.3137 44.5385C68.8922 43.8737 70.3199 42.8967 71.5114 41.6664C73.92 39.1598 75.2572 35.8132 75.2389 32.337C75.2389 31.9571 75.2214 31.5879 75.1897 31.2222C75.1581 30.8565 75.1264 30.4872 75.0736 30.1286ZM15.4964 27.143V24.3755H21.7628C22.5078 24.3634 23.2281 24.6421 23.7708 25.1526C24.0318 25.4097 24.2377 25.7171 24.3762 26.0563C24.5146 26.3954 24.5826 26.7592 24.576 27.1254C24.5806 27.4947 24.5112 27.861 24.3716 28.2029C24.2321 28.5448 24.0254 28.8552 23.7638 29.1158C23.2267 29.6326 22.5082 29.918 21.7628 29.9105H15.4964V27.143ZM25.1106 39.451C24.5408 39.9904 23.7854 40.2902 23.0007 40.2878H15.4964V34.5419H22.9831C23.7643 34.537 24.5183 34.8286 25.093 35.3577C25.3737 35.6181 25.5976 35.9337 25.7506 36.2846C25.9038 36.6356 25.9827 37.0144 25.9827 37.3973C25.9855 37.7815 25.9096 38.1623 25.7596 38.5161C25.6096 38.8699 25.3888 39.1892 25.1106 39.4544V39.451Z\" fill=\"#B4BACC\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Downloading Dataset with Wget\nDESCRIPTION: Download the startup dataset JSON file from a remote storage location\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://storage.googleapis.com/generall-shared-data/startups_demo.json\n```\n\n----------------------------------------\n\nTITLE: Scrolling Filtered Points in Qdrant Collection via HTTP POST\nDESCRIPTION: This HTTP POST request scrolls through points in a specified Qdrant collection. It uses a filter to include points where the city is London and exclude points where the color is red. The filter demonstrates the use of 'must' and 'must_not' conditions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-multiple-clauses-combination/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must\": [\n            { \"key\": \"city\", \"match\": { \"value\": \"London\" } }\n        ],\n        \"must_not\": [\n            { \"key\": \"color\", \"match\": { \"value\": \"red\" } }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Re-scoring Results Using Vectors in Python\nDESCRIPTION: This code snippet demonstrates re-scoring examples where initially 1000 results are fetched using a small byte vector and then re-scored based on a full vector to retrieve the top 10 results. The snippet highlights the transition from initial vector-based fetching to a more precise scoring mechanism.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-points/hybrid-rescoring/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ninitial_results = fetch_results_with_byte_vector(1000)\nre_score_results = re_score_with_full_vector(initial_results)\ntop_results = get_top_results(re_score_results, 10)\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedding Models for Hybrid Search\nDESCRIPTION: Set dense and sparse embedding models for hybrid vector search\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient.set_model(\"sentence-transformers/all-MiniLM-L6-v2\")\n# comment this line to use dense vectors only\nclient.set_sparse_model(\"prithivida/Splade_PP_en_v1\")\n```\n\n----------------------------------------\n\nTITLE: On-Disk Local Qdrant Storage Configuration\nDESCRIPTION: Sets up a local Qdrant vector store with persistent disk storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/langchain.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nqdrant = Qdrant.from_documents(\n    docs,\n    embeddings,\n    path=\"/tmp/local_qdrant\",\n    collection_name=\"my_documents\",\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Qdrant Client Connection\nDESCRIPTION: Code to initialize the Qdrant client with connection parameters to the Qdrant server.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/mixpeek.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(\"localhost\", port=6333)\n```\n\n----------------------------------------\n\nTITLE: GET Collection Snapshots Endpoint\nDESCRIPTION: HTTP GET endpoint that returns snapshots for a specified collection. The collection name is provided as a path parameter.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/list-collection-snapshots/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /collections/{collection_name}/snapshots\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variables File for API Keys\nDESCRIPTION: A sample .env file structure showing how to store AWS credentials, OpenAI API key, and Qdrant API key securely for use in the application.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-ingestion-beginners.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nACCESS_KEY = \"\"\nSECRET_ACCESS_KEY = \"\"\nOPENAI_API_KEY = \"\"\nQDRANT_KEY = \"\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Tenant Index in Qdrant\nDESCRIPTION: This snippet exemplifies the configuration for enabling tenant indexing in Qdrant, which is crucial for optimizing multitenant scenarios by structuring data storage for effective search performance tailored to specific tenants.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/indexing.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/create-payload-index/keyword-is-tenant/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Rendering HubSpot Logo in SVG\nDESCRIPTION: SVG code for displaying the HubSpot logo with specific path data and styling.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_2\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\"><path d=\"M18.48 21.858V30.333H10.694V21.858H7V42.089H10.695V33.889H18.479V42.089H22.175V21.858H18.48ZM34.002 35.55C34.002 36.3609 33.6799 37.1386 33.1065 37.7119C32.5331 38.2853 31.7554 38.6075 30.9445 38.6075C30.1336 38.6075 29.3559 38.2853 28.7825 37.7119C28.2091 37.1386 27.887 36.3609 27.887 35.55V26.884H24.382V35.55C24.382 37.2887 25.0727 38.9563 26.3022 40.1858C27.5317 41.4153 29.1992 42.106 30.938 42.106C32.6768 42.106 34.3443 41.4153 35.5738 40.1858C36.8033 38.9563 37.494 37.2887 37.494 35.55V26.884H34.002V35.55ZM59.973 27.777C59.973 26 61.148 25.437 62.435 25.437C63.473 25.437 64.843 26.227 65.74 27.185L68.035 24.479C66.889 22.929 64.565 21.858 62.662 21.858C58.859 21.858 56.109 24.085 56.109 27.777C56.109 34.627 64.481 32.453 64.481 36.287C64.481 37.469 63.333 38.513 62.019 38.513C59.946 38.513 59.274 37.5 58.322 36.428L55.774 39.077C57.404 41.077 59.414 42.093 61.821 42.093C65.434 42.093 68.34 39.839 68.34 36.315C68.34 28.711 59.967 31.074 59.967 27.777M111.767 38.857C109.696 38.857 109.107 37.961 109.107 36.589V30.514H112.327V27.436H109.107V23.375L105.553 24.97V37.344C105.553 40.509 107.737 42.104 110.731 42.104C111.201 42.112 111.671 42.074 112.133 41.992L113 38.8C112.609 38.827 112.16 38.854 111.767 38.854M47.344 26.985C45.608 26.985 44.396 27.489 43.224 28.638V21.979H39.714V34.322C39.714 38.942 43.054 42.108 46.808 42.108C50.972 42.108 54.635 38.886 54.635 34.548C54.635 30.264 51.264 26.988 47.344 26.988M47.322 38.575C46.7989 38.575 46.2809 38.4719 45.7976 38.2717C45.3143 38.0716 44.8751 37.7781 44.5052 37.4082C44.1353 37.0383 43.8419 36.5992 43.6417 36.1159C43.4415 35.6326 43.3385 35.1146 43.3385 34.5915C43.3385 34.0684 43.4415 33.5504 43.6417 33.0671C43.8419 32.5838 44.1353 32.1446 44.5052 31.7747C44.8751 31.4048 45.3143 31.1114 45.7976 30.9112C46.2809 30.711 46.7989 30.608 47.322 30.608C48.3785 30.608 49.3917 31.0277 50.1388 31.7747C50.8858 32.5218 51.3055 33.535 51.3055 34.5915C51.3055 35.648 50.8858 36.6612 50.1388 37.4082C49.3917 38.1553 48.3785 38.575 47.322 38.575ZM85.464 34.364C85.464 30.018 81.809 26.804 77.637 26.804C73.884 26.804 70.543 29.969 70.543 34.59V46.94H74.053V40.272C75.223 41.419 76.437 41.925 78.171 41.925C82.091 41.925 85.464 38.649 85.464 34.364ZM82.14 34.32C82.14 35.3765 81.7203 36.3897 80.9733 37.1367C80.2262 37.8838 79.213 38.3035 78.1565 38.3035C77.1 38.3035 76.0868 37.8838 75.3397 37.1367C74.5927 36.3897 74.173 35.3765 74.173 34.32C74.173 33.2635 74.5927 32.2503 75.3397 31.5032C76.0868 30.7562 77.1 30.3365 78.1565 30.3365C79.213 30.3365 80.2262 30.7562 80.9733 31.5032C81.7203 32.2503 82.14 33.2635 82.14 34.32Z\" fill=\"#8F98B3\"/><path d=\"M96.8079 26.634V23.107C97.274 22.8891 97.6686 22.5434 97.9459 22.11C98.2231 21.6766 98.3716 21.1734 98.3739 20.659V20.578C98.3739 19.078 97.1579 17.862 95.6579 17.862H95.5769C94.8566 17.862 94.1658 18.1481 93.6564 18.6575C93.1471 19.1668 92.8609 19.8576 92.8609 20.578V20.659C92.8633 21.1734 93.0118 21.6766 93.289 22.11C93.5662 22.5434 93.9609 22.8891 94.4269 23.107V26.634C93.0874 26.8391 91.8258 27.3945 90.7699 28.244L81.0969 20.71C81.1659 20.461 81.2019 20.205 81.2059 19.948C81.2071 19.3427 81.0288 18.7506 80.6934 18.2467C80.3581 17.7428 79.8808 17.3496 79.322 17.117C78.7632 16.8844 78.148 16.8227 77.5541 16.9397C76.9602 17.0568 76.4144 17.3474 75.9857 17.7747C75.557 18.202 75.2647 18.7468 75.1457 19.3403C75.0267 19.9338 75.0863 20.5492 75.3172 21.1088C75.548 21.6684 75.9395 22.1469 76.4424 22.4839C76.9452 22.8209 77.5366 23.0012 78.1419 23.002C78.6715 22.9995 79.1911 22.8581 79.6489 22.592L89.1739 30.004C88.3183 31.2966 87.8719 32.8171 87.8929 34.3672C87.914 35.9172 88.4015 37.425 89.2919 38.694L86.3949 41.592C86.1608 41.5171 85.9168 41.4773 85.6709 41.474C85.1741 41.4744 84.6885 41.622 84.2755 41.8983C83.8626 42.1746 83.5408 42.5671 83.3508 43.0262C83.1609 43.4853 83.1113 43.9904 83.2083 44.4777C83.3053 44.965 83.5446 45.4126 83.896 45.7639C84.2473 46.1152 84.6949 46.3545 85.1822 46.4516C85.6695 46.5486 86.1746 46.499 86.6337 46.309C87.0928 46.1191 87.4853 45.7973 87.7616 45.3844C88.0379 44.9714 88.1855 44.4858 88.1859 43.989C88.1827 43.7431 88.1429 43.4991 88.0679 43.265L90.9339 40.398C91.8685 41.1175 92.9554 41.6135 94.1113 41.8481C95.2672 42.0826 96.4615 42.0495 97.6026 41.7512C98.7437 41.453 99.8014 40.8975 100.695 40.1273C101.588 39.3571 102.293 38.3926 102.756 37.3078C103.219 36.223 103.427 35.0466 103.366 33.8688C103.304 32.6909 102.973 31.5429 102.399 30.5126C101.825 29.4823 101.022 28.5971 100.053 27.9248C99.0842 27.2525 97.974 26.811 96.8079 26.634ZM95.6199 38.234C95.0903 38.2485 94.563 38.1568 94.0694 37.9642C93.5758 37.7715 93.1258 37.4819 92.746 37.1124C92.3662 36.7429 92.0644 36.3011 91.8582 35.813C91.6521 35.3248 91.5459 34.8003 91.5459 34.2705C91.5459 33.7406 91.6521 33.2161 91.8582 32.728C92.0644 32.2398 92.3662 31.798 92.746 31.4285C93.1258 31.059 93.5758 30.7694 94.0694 30.5768C94.563 30.3841 95.0903 30.2924 95.6199 30.307C96.6465 30.3429 97.6191 30.7759 98.3328 31.5146C99.0465 32.2534 99.4457 33.2403 99.4462 34.2675C99.4467 35.2947 99.0485 36.2821 98.3356 37.0215C97.6226 37.761 96.6505 38.195 95.6239 38.232\" fill=\"#8F98B3\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Mounting Local Configuration in Docker\nDESCRIPTION: Example of mounting a local.yaml file for machine-specific settings in Docker.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6333:6333 \\\n    -v $(pwd)/local.yaml:/qdrant/config/local.yaml \\\n    qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Generating Article Preview Images with ImageMagick and WebP\nDESCRIPTION: Shell command to generate a set of preview images for articles. This script processes a single source image into various sizes and formats needed for different display contexts.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbash -x automation/process-article-img.sh <path-to-image> <alias-for-the-article>\n```\n\n----------------------------------------\n\nTITLE: Deploying Qdrant Cluster in Kubernetes\nDESCRIPTION: Deployment configuration using Helm charts for setting up a 3-node Qdrant cluster with sharding and replication in Kubernetes. The setup includes custom configurations and additional components managed through GitOps approach with Argo CD.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/superpower-your-semantic-search-using-vector-database-nicolas-mauti-vector-space-talk-007.md#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Listing Collection Aliases in Go\nDESCRIPTION: Demonstrates how to create a new Qdrant client instance with connection configuration and list collection aliases. The client connects to a Qdrant server running on localhost:6334 and provides methods to interact with collections.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/collection-aliases/list/go.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.ListCollectionAliases(context.Background(), \"{collection_name}\")\n```\n\n----------------------------------------\n\nTITLE: Scrolling Filtered Points in Qdrant using Rust Client\nDESCRIPTION: Demonstrates how to scroll through points in a Qdrant collection using filter conditions. The query filters for records where the diet array contains 'meat' as food and 'true' for likes, using array matching syntax.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-filter-with-multiple-nested/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::must([\n            Condition::matches(\"diet[].food\", \"meat\".to_string()),\n            Condition::matches(\"diet[].likes\", true),\n        ])),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Evaluating Model Performance Using Evaluator in Quaterion with Python\nDESCRIPTION: This snippet demonstrates how to perform dataset-wise evaluation by integrating `Evaluator` into a training function. It utilizes the `Quaterion` library to calculate the metrics such as `RetrievalReciprocalRank` and `RetrievalPrecision` on a validation dataset, leveraging a sampler to optimize memory usage. Dependencies include `quaterion.eval.evaluator`, `quaterion.eval.pair`, and `quaterion.eval.samplers.pair_sampler`. Key outputs are evaluation results printed to the console.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/faq-question-answering.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n...\nfrom quaterion.eval.evaluator import Evaluator\nfrom quaterion.eval.pair import RetrievalReciprocalRank, RetrievalPrecision\nfrom quaterion.eval.samplers.pair_sampler import PairSampler\n...\n\ndef train(model, train_dataset_path, val_dataset_path, params):\n    ...\n\n    metrics = {\n        \"rrk\": RetrievalReciprocalRank(),\n        \"rp@1\": RetrievalPrecision(k=1)\n    }\n    sampler = PairSampler()\n    evaluator = Evaluator(metrics, sampler)\n    results = Quaterion.evaluate(evaluator, val_dataset, model.model)\n    print(f\"results: {results}\")\n```\n\n----------------------------------------\n\nTITLE: Embedding Spotify Podcast iframe HTML\nDESCRIPTION: HTML iframe code for embedding a Spotify podcast player for the episode.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/insight-generation-platform-for-lifescience-corporation-hooman-sedghamiz-vector-space-talks-014.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://podcasters.spotify.com/pod/show/qdrant-vector-space-talk/embed/episodes/Charting-New-Frontiers-Creating-a-Pioneering-Insight-Generation-Platform-for-a-Major-Life-Science-Corporation---Hooman-Sedghamiz--Vector-Space-Talks-014-e2fqnnc/a-aavffjd\" height=\"102px\" width=\"400px\" frameborder=\"0\" scrolling=\"no\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Building Qdrant with GPU Support\nDESCRIPTION: Command to build Qdrant from source with GPU support enabled using Cargo.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/running-with-GPU.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release --features gpu\n```\n\n----------------------------------------\n\nTITLE: Establishing Connection to Qdrant\nDESCRIPTION: This snippet creates a connection to the Qdrant server running on localhost.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/distance-based-exploration.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient = QdrantClient(\"http://localhost:6333\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Listing Snapshots\nDESCRIPTION: Creates a new Qdrant client instance configured to connect to a local Qdrant server on port 6333, then demonstrates how to list snapshots for a specified collection. The client initialization requires @qdrant/js-client-rest package.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/list-collection-snapshots/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.listSnapshots(\"{collection_name}\");\n```\n\n----------------------------------------\n\nTITLE: Initializing FastEmbed for Document Embedding\nDESCRIPTION: Sets up FastEmbed embeddings using the BAAI/bge-small-en-v1.5 model for document vectorization.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-relari.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nembeddings = FastEmbedEmbeddings(\n    model_name=\"BAAI/bge-small-en-v1.5\",  # specify the model\n)\n```\n\n----------------------------------------\n\nTITLE: GPT-3.5 Model Recipe Creation\nDESCRIPTION: Final experiment creating a new recipe using GPT-3.5-turbo as the LLM while maintaining previously optimized parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n#collection name from Experiment 3\nCOLLECTION_NAME = f\"experiment_{chunk_size}_{chunk_overlap}_{embedding_model_name.split('/')[1]}\"\n\n# We have to create a recipe using the same prompt template and GPT-3.5-turbo\nrecipe_gpt = quotient.create_recipe(\n    model_id=5,\n    prompt_template_id=1,\n    name='gpt3.5-qa-with-rag-recipe-v1',\n    description='GPT-3.5 using a prompt template that includes context.'\n)\n\nrecipe_gpt\n```\n\n----------------------------------------\n\nTITLE: Configuring Case Study Component in YAML\nDESCRIPTION: YAML configuration block defining the structure and content of a case study component for Sprinklr. Includes asset paths for logo and images, title text, description with HTML formatting, and link configuration.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/case-study-sprinklr.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncaseStudy:\n  logo:\n    src: /img/customers-case-studies/customer-logo1.svg\n    alt: Logo Sprinklr\n  title: How Sprinklr Leverages Qdrant to Enhance AI-Driven Customer Experience Solutions\n  description: Sprinklr uses Qdrant to enhance its AI-driven customer experience management platform, improving data retrieval speed, efficiency, and <b>reducing costs by 30%</b>. This integration has also boosted developer productivity and ensured superior search performance across their AI applications.\n  link:\n    text: Read Case Study\n    url: /blog/case-study-sprinklr/\n  image:\n    src: /img/customers-case-studies/case-study1.png\n    alt: Preview\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Superduper Framework via pip\nDESCRIPTION: Command to install the Superduper framework using pip package manager\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/superduper.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install superduper-framework\n```\n\n----------------------------------------\n\nTITLE: Analyzing Poor Performance Examples\nDESCRIPTION: Displays examples with low faithfulness scores to analyze performance issues.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/rapid-rag-optimization-with-qdrant-and-quotient.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nwith pd.option_context('display.max_colwidth', 0):\n    display(experiment_1[['content.input_text', 'content.answer','content.documents','Chunk Relevance','Context Relevance','Faithfulness']]\n                .sort_values(by='Faithfulness').head(2))\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter for Qdrant Hybrid Cloud Landing Page in Markdown\nDESCRIPTION: This snippet contains the frontmatter metadata for a landing page about Qdrant Hybrid Cloud. It includes the title, description, and keywords for SEO, as well as build configuration for page rendering.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/hybrid-cloud/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'Qdrant Hybrid Cloud: Flexible Deployment, Data Privacy, and Cost Efficiency'\ndescription: Qdrant's new Hybrid Cloud was created for seamless deployment and management of vector databases. Ensure privacy, data sovereignty, and cost efficiency for AI-driven applications. Learn more and get started today.\nkeywords: hybrid cloud vector database, hybrid cloud management, kubernetes integration, hybrid cloud deployment\nbuild:\n  render: always\ncascade:\n- build:\n    list: local\n    publishResources: false\n    render: never\n---\n```\n\n----------------------------------------\n\nTITLE: Simple Document Preparation\nDESCRIPTION: Basic example of preparing documents without metadata or IDs.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/fastembed.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndocs = [\n    \"Qdrant has Langchain integrations\",\n    \"Qdrant also has Llama Index integrations\"\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering Qdrant Logo in SVG\nDESCRIPTION: SVG definition for the Qdrant logo. The code defines a vector graphic using path elements with fill rules and specific viewBox dimensions for proper scaling.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_14\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M119.901 15H0V49.2857H119.901V15ZM113.889 39.7119C114.086 39.7119 114.284 39.6759 114.518 39.6099L114.542 41.8693C113.745 42.3073 112.78 42.5709 111.85 42.5709C109.854 42.5709 108.757 41.4077 108.559 39.5794C107.695 41.1081 106.167 42.5709 103.739 42.5709C101.575 42.5709 99.1168 41.4017 99.1168 38.2783C99.1168 34.5853 102.678 33.7221 106.101 33.7221C106.934 33.7221 107.798 33.7521 108.565 33.8537V33.3566C108.565 31.8279 108.529 29.9991 106.101 29.9991C105.202 29.9991 104.506 30.0651 103.805 30.4307L103.319 32.1214L99.8963 31.7559L100.483 28.3024C103.116 27.2417 104.44 26.9417 106.904 26.9417C110.13 26.9417 112.858 28.6084 112.858 32.0314V38.5487C112.858 39.4119 113.187 39.7119 113.889 39.7119ZM103.547 37.7811C103.547 38.7467 104.014 39.5139 105.31 39.5139C106.838 39.5139 108.469 38.4167 108.571 35.9169C107.869 35.8209 107.102 35.7189 106.407 35.7189C104.878 35.7189 103.547 36.1504 103.547 37.7811ZM93.0615 42.2417L99.5483 19.3586H95.3218L88.8354 42.2417H93.0615ZM84.3508 42.2417L90.8376 19.3586H86.6171L80.1302 42.2417H84.3508ZM77.3188 27.2421H72.8282V32.6254H77.3188V27.2421ZM77.3188 36.852H72.8282V42.2417H77.3188V36.852ZM69.6868 36.984L66.2938 36.654L65.5982 38.9803H60.7421L69.0636 29.496L68.7276 27.2361H55.5563L55.0228 32.4934L58.1166 32.8294L58.7818 30.5031H63.4699L55.2208 39.9814L55.6523 42.2417H68.7576L69.6868 36.984ZM36.7502 34.9577C36.7502 30.5691 39.4116 26.9426 44.8014 26.9426C50.1851 26.9426 52.8169 30.5631 52.8169 34.7541C52.8169 39.5439 49.3575 42.5713 44.5674 42.5713C39.9452 42.5713 36.7502 39.7479 36.7502 34.9577ZM41.1744 34.6877C41.1744 37.2836 42.3735 39.2799 44.6994 39.2799C46.9296 39.2799 48.3924 37.4816 48.3924 34.6221C48.3924 31.5943 46.7616 30.2336 44.7358 30.2336C42.5351 30.2336 41.1744 31.8583 41.1744 34.6877ZM34.8855 38.9803H32.8952V32.1219C32.8952 28.5669 30.4309 26.9361 27.7395 26.9361C25.3772 26.9361 23.6809 28.1653 22.8474 30.1616C22.1102 27.9673 20.1199 26.9361 17.9556 26.9361C15.8634 26.9361 14.2986 27.9017 13.3991 29.496V27.2357H7.11621V30.4971H9.11293V38.9803H7.11621V42.2417H16.2589V38.9803H13.3991V33.7646C13.3991 31.6663 14.2326 30.2031 16.2949 30.2031C17.9912 30.2031 18.8548 31.1987 18.8548 33.7946V42.2417H25.1376V38.9803H23.1414V33.7646C23.1414 31.6663 23.9745 30.2031 26.0368 30.2031C27.7335 30.2031 28.5966 31.1987 28.5966 33.7946V42.2417H34.8855V38.9803Z\" fill=\"#B4BACC\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Batch Search API Request\nDESCRIPTION: Perform multiple search requests efficiently in a single API call\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/search.md#2025-04-21_snippet_6\n\nLANGUAGE: rest\nCODE:\n```\nPOST /collections/{collection_name}/points/query/batch\n```\n\n----------------------------------------\n\nTITLE: Referencing Inter-cluster TLS Secret in QdrantCluster Spec with YAML\nDESCRIPTION: This YAML snippet provides an example of referencing inter-cluster TLS secrets within the QdrantCluster spec. It ensures encrypted communication between nodes by specifying references to the secret containing the CA certificate and node keys.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/private-cloud/qdrant-cluster-management.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: qdrant.io/v1\nkind: QdrantCluster\nmetadata:\n  name: test-cluster\n  labels:\n    cluster-id: \"my-cluster\"\n    customer-id: \"acme-industries\"\nspec:\n  id: \"my-cluster\"\n  version: \"v1.13.3\"\n  size: 2\n  resources:\n    cpu: 100m\n    memory: \"1Gi\"\n    storage: \"2Gi\"\n  config:\n    service:\n      enable_tls: true\n    tls:\n      caCert:\n        secretKeyRef:\n          name: qdrant-p2p-tls\n          key: ca.crt\n      cert:\n        secretKeyRef:\n          name: qdrant-p2p-tls\n          key: tls.crt\n      key:\n        secretKeyRef:\n          name: qdrant-p2p-tls\n          key: tls.key\n```\n\n----------------------------------------\n\nTITLE: Rendering Qdrant Logo as SVG\nDESCRIPTION: An SVG representation of the Qdrant logo with various path elements that make up the logo design. The SVG includes styling for the logo with a muted blue-gray color (#B4BACC) and is sized at 120x65 pixels.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_23\n\nLANGUAGE: svg\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"65\" viewBox=\"0 0 120 65\" fill=\"none\"><g clip-path=\"url(#clip0_4574_4848)\"><path d=\"M56.9287 23.7567H62.3549V41.2691H58.334V29.4925L53.1901 41.2691L47.7763 29.4777V41.2691H44.0244V23.7567H49.3875L53.254 32.8209L56.9287 23.7567Z\" fill=\"#B4BACC\"/><path d=\"M64.3545 23.7567V41.2691H74.4591V38.3002H68.2717V33.8448H74.2033V30.8479H68.2717V26.83H74.4591V23.7567H64.3545Z\" fill=\"#B4BACC\"/><path d=\"M89.5293 32.516C89.5293 39.0348 96.3328 44.2512 103.501 40.7621V37.0103C97.9853 40.8744 93.1837 37.0014 93.2625 32.6657C93.3162 29.7841 95.2526 27.0437 98.9983 26.83C100.84 26.7255 102.088 27.1833 103.501 28.5363V24.6348C98.3214 21.5652 89.5293 24.9436 89.5293 32.516Z\" fill=\"#B4BACC\"/><path d=\"M105.155 41.269H108.88V23.925H105.155V41.269Z\" fill=\"#B4BACC\"/><path d=\"M113.554 31.878L119.182 23.9633H114.832L109.256 31.8632L115.729 41.269H120.001L113.554 31.878Z\" fill=\"#B4BACC\"/><path d=\"M76.2002 23.7565V41.2689H80.1311V31.8604L86.6288 41.2689H90.819L85.675 33.9155C88.059 33.014 88.8325 31.015 88.8325 29.0171C88.8325 27.0206 87.1566 23.7565 83.0967 23.7565H76.2002ZM80.1311 26.6706H81.8469C84.7479 26.6706 84.9027 28.5671 84.9027 29.2752C84.9027 30.6283 83.7547 31.7804 82.273 31.7804H80.1311V26.6706Z\" fill=\"#B4BACC\"/><path d=\"M8.75621 23.757C8.75621 18.9203 12.6773 15 17.5132 15C22.3506 15 26.2702 18.9203 26.2702 23.757H8.75621ZM8.75621 41.2702C8.75621 36.4343 12.6773 32.5132 17.5132 32.5132C12.6773 32.5132 8.75621 28.5936 8.75621 23.757C3.92033 23.757 0 27.6773 0 32.5132C0 37.3506 3.92033 41.2702 8.75621 41.2702ZM8.75621 41.2702C8.75621 46.1076 12.6773 50.0272 17.5132 50.0272C22.3506 50.0272 26.2702 46.1076 26.2702 41.2702H8.75621ZM17.5132 32.5132C22.3506 32.5132 26.2702 36.4343 26.2702 41.2702C31.1069 41.2702 35.028 37.3506 35.028 32.5132C35.028 27.6773 31.1069 23.757 26.2702 23.757C26.2702 28.5936 22.3506 32.5132 17.5132 32.5132Z\" fill=\"#B4BACC\"/></g><defs><clipPath id=\"clip0_4574_4848\"><rect width=\"120\" height=\"64\" fill=\"white\" transform=\"translate(0 0.116028)\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Social Media Icon SVG for LinkedIn in HTML\nDESCRIPTION: SVG code for the LinkedIn social media icon used in the Qdrant landing page. The icon is styled with the F0F3FA color fill.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/footer.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_1841_961)\"><path d=\"M21.75 0.75H2.25C1.85218 0.75 1.47064 0.908035 1.18934 1.18934C0.908035 1.47064 0.75 1.85218 0.75 2.25V21.75C0.75 22.1478 0.908035 22.5294 1.18934 22.8107C1.47064 23.092 1.85218 23.25 2.25 23.25H21.75C22.1478 23.25 22.5294 23.092 22.8107 22.8107C23.092 22.5294 23.25 22.1478 23.25 21.75V2.25C23.25 1.85218 23.092 1.47064 22.8107 1.18934C22.5294 0.908035 22.1478 0.75 21.75 0.75ZM7.41525 19.9455H4.0305V9.1875H7.41525V19.9455ZM5.7225 7.71075C5.33338 7.70956 4.95333 7.59309 4.63036 7.37604C4.30739 7.15899 4.05599 6.8511 3.9079 6.49126C3.75981 6.13141 3.72167 5.73575 3.79831 5.35425C3.87495 4.97275 4.06293 4.62251 4.3385 4.34778C4.61408 4.07304 4.96488 3.88613 5.34662 3.81065C5.72835 3.73517 6.1239 3.77451 6.48329 3.92369C6.84268 4.07288 7.1498 4.32522 7.36587 4.64885C7.58193 4.97248 7.69725 5.35287 7.69725 5.742C7.69735 6.00107 7.6463 6.25762 7.54702 6.49691C7.44774 6.73621 7.30219 6.95355 7.11872 7.13646C6.93525 7.31938 6.71746 7.46426 6.47787 7.56282C6.23827 7.66137 5.98157 7.71164 5.7225 7.71075ZM19.9657 19.9455H16.65V14.742C16.65 13.4768 16.65 11.9295 14.8875 11.9295C13.125 11.9295 12.9127 13.266 12.9127 14.6715V20.016H9.6V9.1875H12.702V10.6642H12.7725C13.0924 10.1111 13.5567 9.65537 14.1156 9.34571C14.6746 9.03606 15.3072 8.88415 15.9457 8.90625C19.3305 8.90625 19.965 11.1562 19.965 14.0392L19.9657 19.9455Z\" fill=\"#F0F3FA\"/></g><defs><clipPath id=\"clip0_1841_961\"><rect width=\"24\" height=\"24\" fill=\"white\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Initializing VectaX and Qdrant Clients\nDESCRIPTION: Sets up the initial connection to both VectaX through Mirror SDK and Qdrant client. Requires Mirror Security API key and encryption secret.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/mirror-security.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom mirror_sdk.core.mirror_core import MirrorSDK, MirrorConfig\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.models import Distance, VectorParams\n\n# Get your API key from\n# https://platform.mirrorsecurity.io\nconfig = MirrorConfig(\n    api_key=\"<your_api_key>\",\n    server_url=\"https://mirrorapi.azure-api.net/v1\",\n    secret=\"<your_encrypt_secret>\",\n)\nmirror_sdk = MirrorSDK(config)\n\n# Connects to http://localhost:6333/ by default\nqdrant = QdrantClient()\n```\n\n----------------------------------------\n\nTITLE: Sending Named Multiple Vectors to Qdrant via Kafka\nDESCRIPTION: JSON format for sending messages with named multiple vectors to Qdrant via the Kafka connector. The vector field contains named dense vector arrays rather than a single array.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/data-management/confluent.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collection_name\": \"{collection_name}\",\n    \"id\": 1,\n    \"vector\": {\n        \"some-dense\": [\n            0.1,\n            0.2,\n            0.3,\n            0.4,\n            0.5,\n            0.6,\n            0.7,\n            0.8\n        ],\n        \"some-other-dense\": [\n            0.1,\n            0.2,\n            0.3,\n            0.4,\n            0.5,\n            0.6,\n            0.7,\n            0.8\n        ]\n    },\n    \"payload\": {\n        \"name\": \"kafka\",\n        \"description\": \"Kafka is a distributed streaming platform\",\n        \"url\": \"https://kafka.apache.org/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Framework Integrations Table in Markdown\nDESCRIPTION: This markdown snippet creates a table listing various framework integrations for Qdrant. It includes the framework name (with a link) and a brief description of each framework's functionality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Framework                                                     | Description                                                                                                          |\n| ------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |\n| [AutoGen](/documentation/frameworks/autogen/)                 | Framework from Microsoft building LLM applications using multiple conversational agents.                             |\n| [Camel](/documentation/frameworks/camel/)                     | Framework to build and use LLM-based agents for real-world task solving                                              |\n| [Canopy](/documentation/frameworks/canopy/)                   | Framework from Pinecone for building RAG applications using LLMs and knowledge bases.                                |\n| [Cheshire Cat](/documentation/frameworks/cheshire-cat/)       | Framework to create personalized AI assistants using custom data.                                                    |\n| [CrewAI](/documentation/frameworks/crewai/)                   | CrewAI is a framework to build automated workflows using multiple AI agents that perform complex tasks.              |\n| [Dagster](/documentation/frameworks/dagster/)                 | Python framework for data orchestration with integrated lineage, observability.                                      |\n| [DeepEval](/documentation/frameworks/deepeval/)               | Python framework for testing large language model systems.                                                           |\n| [DocArray](/documentation/frameworks/docarray/)               | Python library for managing data in multi-modal AI applications.                                                     |\n| [DSPy](/documentation/frameworks/dspy/)                       | Framework for algorithmically optimizing LM prompts and weights.                                                     |\n| [dsRAG](/documentation/frameworks/dsrag/)                     | High-performance Python retrieval engine for unstructured data.                                                      |\n| [Dynamiq](/documentation/frameworks/dynamiq/)                 | Dynamiq is all-in-one Gen AI framework, designed to streamline the development of AI-powered applications.           |\n| [Feast](/documentation/frameworks/feast/)                     | Open-source feature store to operate production ML systems at scale as a set of features.                            |\n| [Fifty-One](/documentation/frameworks/fifty-one/)             | Toolkit for building high-quality datasets and computer vision models.                                               |\n| [Genkit](/documentation/frameworks/genkit/)                   | Framework to build, deploy, and monitor production-ready AI-powered apps.                                            |\n| [Haystack](/documentation/frameworks/haystack/)               | LLM orchestration framework to build customizable, production-ready LLM applications.                                |\n| [Lakechain](/documentation/frameworks/lakechain/)             | Python framework for deploying document processing pipelines on AWS using infrastructure-as-code.                    |\n| [Langchain](/documentation/frameworks/langchain/)             | Python framework for building context-aware, reasoning applications using LLMs.                                      |\n| [Langchain-Go](/documentation/frameworks/langchain-go/)       | Go framework for building context-aware, reasoning applications using LLMs.                                          |\n| [Langchain4j](/documentation/frameworks/langchain4j/)         | Java framework for building context-aware, reasoning applications using LLMs.                                        |\n| [LangGraph](/documentation/frameworks/langgraph/)             | Python, Javascript libraries for building stateful, multi-actor applications.                                        |\n| [LlamaIndex](/documentation/frameworks/llama-index/)          | A data framework for building LLM applications with modular integrations.                                            |\n| [Mastra](/documentation/frameworks/mastra/)                   | Typescript framework to build AI applications and features quickly.                                                  |\n| [Mirror Security](/documentation/frameworks/mirror-security/) | Python framework for vector encryption and access control.                                                           |\n| [Mem0](/documentation/frameworks/mem0/)                       | Self-improving memory layer for LLM applications, enabling personalized AI experiences.                              |\n| [Neo4j GraphRAG](/documentation/frameworks/neo4j-graphrag/)   | Package to build graph retrieval augmented generation (GraphRAG) applications using Neo4j and Python.                |\n| [Pandas-AI](/documentation/frameworks/pandas-ai/)             | Python library to query/visualize your data (CSV, XLSX, PostgreSQL, etc.) in natural language                        |\n| [Ragbits](/documentation/frameworks/ragbits/)                 | Python package that offers essential \"bits\" for building powerful Retrieval-Augmented Generation (RAG) applications. |\n| [Rig-rs](/documentation/frameworks/rig-rs/)                   | Rust library for building scalable, modular, and ergonomic LLM-powered applications.                                 |\n| [Semantic Router](/documentation/frameworks/semantic-router/) | Python library to build a decision-making layer for AI applications using vector search.                             |\n| [SmolAgents](/documentation/frameworks/smolagents/)           | Barebones library for agents. Agents write python code to call tools and orchestrate other agent.                    |\n| [Solon](/documentation/frameworks/solon/)                     | A lightweight, high-performance Java enterprise framework                                                            |\n| [Spring AI](/documentation/frameworks/spring-ai/)             | Java AI framework for building with Spring design principles such as portability and modular design.                 |\n| [Superduper](/documentation/frameworks/superduper/)           | Framework for building flexible, compositional AI apps which may be applied directly to databases.                   |\n| [Swarm](/documentation/frameworks/swarm/)                     | Python framework for managing multiple AI agents that can work together.                                             |\n| [Sycamore](/documentation/frameworks/sycamore/)               | Document processing engine for ETL, RAG, LLM-based applications, and analytics on unstructured data.                 |\n| [Testcontainers](/documentation/frameworks/testcontainers/)   | Framework for providing throwaway, lightweight instances of systems for testing                                      |\n| [txtai](/documentation/frameworks/txtai/)                     | Python library for semantic search, LLM orchestration and language model workflows.                                  |\n| [Vanna AI](/documentation/frameworks/vanna-ai/)               | Python RAG framework for SQL generation and querying.                                                                |\n```\n\n----------------------------------------\n\nTITLE: Importing Arxiv.org Titles Dataset Snapshot via Qdrant API\nDESCRIPTION: HTTP request to import the Arxiv.org titles dataset snapshot into a Qdrant collection using the API.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/datasets.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}/snapshots/recover\n{\n  \"location\": \"https://snapshots.qdrant.io/arxiv_titles-3083016565637815127-2023-05-29-13-56-22.snapshot\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Keyword Payload Index for Group ID\nDESCRIPTION: Create a keyword payload index for group_id with optional tenant marking, with version-specific handling for Qdrant indexing configurations\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/create-payload-index/with-group-id-as-tenant/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Keyword payload index generation for group_id\n# Supports version 1.11.0+ with tenant marking\ncollection_config = {\n    \"group_id\": {\n        \"type\": \"keyword\",\n        \"is_tenant\": True  # Optional tenant marking\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query Parameters for Comment Count in TypeScript\nDESCRIPTION: This snippet sets up the key and value requirements for querying comment data, specifying that only comments with a count greater than two should be considered. It is intended for use in a TypeScript environment managing Qdrant data retrieval.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/values-count/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n    key: 'comments',\n    values_count: {gt: 2}    \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Customer Case Studies in YAML\nDESCRIPTION: YAML configuration that defines three customer case studies with their associated logos, images, titles and links. Each case study includes a unique ID, company logo, feature image, title and a link to the full story.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/case-studies-1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncases:\n- id: 0\n  logo:\n    src: /img/customers-case-studies/qa-tech.svg\n    alt:  QA.Tech Logo\n  image:\n    src: /img/customers-case-studies/case-study-image1.png\n    alt: Hands typing text on a laptop\n  title: Empowering QA.tech's Testing Agents with Real-Time Precision and Scale\n  link:\n    text: Read Story\n    url: /blog/case-study-qatech/\n- id: 1\n  logo:\n    src: /img/customers-case-studies/kairos.svg\n    alt: Kairos Logo\n  image:\n    src: /img/customers-case-studies/case-study-image2.png\n    alt: Hand holding a smartphone\n  title: \"Kairoswealth & Qdrant: Transforming Wealth Management with AI-Driven Insights and Scalable Vector Search\"\n  link:\n    text: Read Story\n    url: /blog/case-study-kairoswealth/\n- id: 2\n  logo:\n    src: /img/customers-case-studies/kern-ai.svg\n    alt: Kern AI Logo\n  image:\n    src: /img/customers-case-studies/case-study-image3.png\n    alt: A man looks at a laptop screen\n  title: \"Kern AI & Qdrant: Precision AI Solutions for Finance and Insurance\"\n  link:\n    text: Read Story\n    url: /blog/case-study-kern/\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Rendering HubSpot Logo in SVG\nDESCRIPTION: This SVG code defines the HubSpot logo using path elements. It creates the logo shape with specific fill color and dimensions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_3\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\"><path d=\"M18.48 21.858V30.333H10.694V21.858H7V42.089H10.695V33.889H18.479V42.089H22.175V21.858H18.48ZM34.002 35.55C34.002 36.3609 33.6799 37.1386 33.1065 37.7119C32.5331 38.2853 31.7554 38.6075 30.9445 38.6075C30.1336 38.6075 29.3559 38.2853 28.7825 37.7119C28.2091 37.1386 27.887 36.3609 27.887 35.55V26.884H24.382V35.55C24.382 37.2887 25.0727 38.9563 26.3022 40.1858C27.5317 41.4153 29.1992 42.106 30.938 42.106C32.6768 42.106 34.3443 41.4153 35.5738 40.1858C36.8033 38.9563 37.494 37.2887 37.494 35.55V26.884H34.002V35.55ZM59.973 27.777C59.973 26 61.148 25.437 62.435 25.437C63.473 25.437 64.843 26.227 65.74 27.185L68.035 24.479C66.889 22.929 64.565 21.858 62.662 21.858C58.859 21.858 56.109 24.085 56.109 27.777C56.109 34.627 64.481 32.453 64.481 36.287C64.481 37.469 63.333 38.513 62.019 38.513C59.946 38.513 59.274 37.5 58.322 36.428L55.774 39.077C57.404 41.077 59.414 42.093 61.821 42.093C65.434 42.093 68.34 39.839 68.34 36.315C68.34 28.711 59.967 31.074 59.967 27.777M111.767 38.857C109.696 38.857 109.107 37.961 109.107 36.589V30.514H112.327V27.436H109.107V23.375L105.553 24.97V37.344C105.553 40.509 107.737 42.104 110.731 42.104C111.201 42.112 111.671 42.074 112.133 41.992L113 38.8C112.609 38.827 112.16 38.854 111.767 38.854M47.344 26.985C45.608 26.985 44.396 27.489 43.224 28.638V21.979H39.714V34.322C39.714 38.942 43.054 42.108 46.808 42.108C50.972 42.108 54.635 38.886 54.635 34.548C54.635 30.264 51.264 26.988 47.344 26.988M47.322 38.575C46.7989 38.575 46.2809 38.4719 45.7976 38.2717C45.3143 38.0716 44.8751 37.7781 44.5052 37.4082C44.1353 37.0383 43.8419 36.5992 43.6417 36.1159C43.4415 35.6326 43.3385 35.1146 43.3385 34.5915C43.3385 34.0684 43.4415 33.5504 43.6417 33.0671C43.8419 32.5838 44.1353 32.1446 44.5052 31.7747C44.8751 31.4048 45.3143 31.1114 45.7976 30.9112C46.2809 30.711 46.7989 30.608 47.322 30.608C48.3785 30.608 49.3917 31.0277 50.1388 31.7747C50.8858 32.5218 51.3055 33.535 51.3055 34.5915C51.3055 35.648 50.8858 36.6612 50.1388 37.4082C49.3917 38.1553 48.3785 38.575 47.322 38.575ZM85.464 34.364C85.464 30.018 81.809 26.804 77.637 26.804C73.884 26.804 70.543 29.969 70.543 34.59V46.94H74.053V40.272C75.223 41.419 76.437 41.925 78.171 41.925C82.091 41.925 85.464 38.649 85.464 34.364ZM82.14 34.32C82.14 35.3765 81.7203 36.3897 80.9733 37.1367C80.2262 37.8838 79.213 38.3035 78.1565 38.3035C77.1 38.3035 76.0868 37.8838 75.3397 37.1367C74.5927 36.3897 74.173 35.3765 74.173 34.32C74.173 33.2635 74.5927 32.2503 75.3397 31.5032C76.0868 30.7562 77.1 30.3365 78.1565 30.3365C79.213 30.3365 80.2262 30.7562 80.9733 31.5032C81.7203 32.2503 82.14 33.2635 82.14 34.32Z\" fill=\"#8F98B3\"/><path d=\"M96.8079 26.634V23.107C97.274 22.8891 97.6686 22.5434 97.9459 22.11C98.2231 21.6766 98.3716 21.1734 98.3739 20.659V20.578C98.3739 19.078 97.1579 17.862 95.6579 17.862H95.5769C94.8566 17.862 94.1658 18.1481 93.6564 18.6575C93.1471 19.1668 92.8609 19.8576 92.8609 20.578V20.659C92.8633 21.1734 93.0118 21.6766 93.289 22.11C93.5662 22.5434 93.9609 22.8891 94.4269 23.107V26.634C93.0874 26.8391 91.8258 27.3945 90.7699 28.244L81.0969 20.71C81.1659 20.461 81.2019 20.205 81.2059 19.948C81.2071 19.3427 81.0288 18.7506 80.6934 18.2467C80.3581 17.7428 79.8808 17.3496 79.322 17.117C78.7632 16.8844 78.148 16.8227 77.5541 16.9397C76.9602 17.0568 76.4144 17.3474 75.9857 17.7747C75.557 18.202 75.2647 18.7468 75.1457 19.3403C75.0267 19.9338 75.0863 20.5492 75.3172 21.1088C75.548 21.6684 75.9395 22.1469 76.4424 22.4839C76.9452 22.8209 77.5366 23.0012 78.1419 23.002C78.6715 22.9995 79.1911 22.8581 79.6489 22.592L89.1739 30.004C88.3183 31.2966 87.8719 32.8171 87.8929 34.3672C87.914 35.9172 88.4015 37.425 89.2919 38.694L86.3949 41.592C86.1608 41.5171 85.9168 41.4773 85.6709 41.474C85.1741 41.4744 84.6885 41.622 84.2755 41.8983C83.8626 42.1746 83.5408 42.5671 83.3508 43.0262C83.1609 43.4853 83.1113 43.9904 83.2083 44.4777C83.3053 44.965 83.5446 45.4126 83.896 45.7639C84.2473 46.1152 84.6949 46.3545 85.1822 46.4516C85.6695 46.5486 86.1746 46.499 86.6337 46.309C87.0928 46.1191 87.4853 45.7973 87.7616 45.3844C88.0379 44.9714 88.1855 44.4858 88.1859 43.989C88.1827 43.7431 88.1429 43.4991 88.0679 43.265L90.9339 40.398C91.8685 41.1175 92.9554 41.6135 94.1113 41.8481C95.2672 42.0826 96.4615 42.0495 97.6026 41.7512C98.7437 41.453 99.8014 40.8975 100.695 40.1273C101.588 39.3571 102.293 38.3926 102.756 37.3078C103.219 36.223 103.427 35.0466 103.366 33.8688C103.304 32.6909 102.973 31.5429 102.399 30.5126C101.825 29.4823 101.022 28.5971 100.053 27.9248C99.0842 27.2525 97.974 26.811 96.8079 26.634ZM95.6199 38.234C95.0903 38.2485 94.563 38.1568 94.0694 37.9642C93.5758 37.7715 93.1258 37.4819 92.746 37.1124C92.3662 36.7429 92.0644 36.3011 91.8582 35.813C91.6521 35.3248 91.5459 34.8003 91.5459 34.2705C91.5459 33.7406 91.6521 33.2161 91.8582 32.728C92.0644 32.2398 92.3662 31.798 92.746 31.4285C93.1258 31.059 93.5758 30.7694 94.0694 30.5768C94.563 30.3841 95.0903 30.2924 95.6199 30.307C96.6465 30.3429 97.6191 30.7759 98.3328 31.5146C99.0465 32.2534 99.4457 33.2403 99.4462 34.2675C99.4467 35.2947 99.0485 36.2821 98.3356 37.0215C97.6226 37.761 96.6505 38.195 95.6239 38.232\" fill=\"#8F98B3\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Handling Operation Response in Java\nDESCRIPTION: This Java snippet demonstrates the expected format of the operation result after performing an upsert operation.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/quickstart.md#2025-04-21_snippet_22\n\nLANGUAGE: java\nCODE:\n```\noperation_id: 0\\nstatus: Completed\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Bubble Plugin\nDESCRIPTION: Step-by-step process for installing the Qdrant plugin in a Bubble.io workflow, enabling vector database interactions without manual coding\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/platforms/bubble.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Install Qdrant Plugin\n1. Navigate to app workflows\n2. Select \"Install more plugins actions\"\n3. Search for Qdrant plugin\n4. Ensure all categories are selected\n5. Install plugin and enter Qdrant API key\n```\n\n----------------------------------------\n\nTITLE: Snapshot Recovery Priority Options\nDESCRIPTION: Shows the three available priority settings for handling conflicts during snapshot recovery. The `replica` option prioritizes existing cluster data, `snapshot` prioritizes data from the snapshot, and `no_sync` performs recovery without synchronization for manual shard management.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/snapshots/recover-snapshot-with-priority/_description.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nreplica    # Default priority - keeps existing data over snapshot data\nshapshot   # Prioritizes snapshot data over existing data\nno_sync    # Restores without synchronization for manual shard management\n```\n\n----------------------------------------\n\nTITLE: Configuring Scalar Quantization in Qdrant using HTTP API\nDESCRIPTION: This HTTP request shows how to set up Scalar Quantization when creating or updating a collection in Qdrant. It specifies a quantization configuration that uses int8 type with a quantile of 0.99 to compress 128-dimensional vectors using Cosine distance.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-quantization.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 128,\n      \"distance\": \"Cosine\"\n    },\n    \"quantization_config\": {\n        \"scalar\": {\n            \"type\": \"int8\",\n            \"quantile\": 0.99,\n            \"always_ram\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant to Use io_uring in YAML\nDESCRIPTION: This YAML configuration snippet enables the async scorer in Qdrant, which utilizes io_uring for improved IO performance on Linux systems.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/io_uring.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# within the storage config\nstorage:\n\t# enable the async scorer which uses io_uring\n\tasync_scorer: true\n```\n\n----------------------------------------\n\nTITLE: Checking Empty Field with Qdrant Condition\nDESCRIPTION: Creates a condition to check if a 'reports' field is empty using the Qdrant client library's Condition struct\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/is-empty/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::Condition;\n\nCondition::is_empty(\"reports\")\n```\n\n----------------------------------------\n\nTITLE: Installing and Importing Required Libraries\nDESCRIPTION: Setup code for importing ColPali engine and Qdrant client libraries. Requires colpali_engine>=0.3.1 and qdrant-client>=1.12.0.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/advanced-tutorials/pdf-retrieval-at-scale.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# pip install colpali_engine>=0.3.1\nfrom colpali_engine.models import ColPali, ColPaliProcessor\n# pip install qdrant-client>=1.12.0\nfrom qdrant_client import QdrantClient, models\n```\n\n----------------------------------------\n\nTITLE: Configuring Case Study Content Structure in YAML\nDESCRIPTION: YAML structure defining the content layout for a case study page, including logo assets, title, description, links and preview image. The configuration includes metadata for site organization and SEO purposes.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/case-study-hubspot.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncaseStudy:\n  logo:\n    src: /img/customers-case-studies/hubspot-logo.svg\n    alt: Logo\n  title: \"HubSpot & Qdrant: Scaling an Intelligent AI Assistant\"\n  description: HubSpot selected Qdrant because it significantly outperformed alternatives, ensuring that Breeze AI could quickly retrieve and rank relevant data. This was crucial for recommendation systems and contextual content retrieval, where speed and accuracy directly impact user engagement and satisfaction.\n  link:\n    text: Read Case Study\n    url: /blog/case-study-hubspot/\n  image:\n    src: /img/customers-case-studies/case-study-hubspot.png\n    alt: Preview\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Structuring Qdrant Stars Profile in HTML\nDESCRIPTION: HTML structure for displaying Qdrant Stars profiles, including name, image, description, and quote. The code uses flexbox for layout and includes LinkedIn profile links.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-stars-announcement copy.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div style=\"display: flex; flex-direction: column;\">\n<div class=\"qdrant-stars\">\n<div style=\"display: flex; align-items: center;\">\n  <h5>Robert Caulk</h5>\n  <a href=\"https://www.linkedin.com/in/rcaulk/\" target=\"_blank\"><img src=\"/blog/qdrant-stars-announcement/In-Blue-40.png\" alt=\"Robert LinkedIn\" style=\"margin-left:10px; width: 20px; height: 20px;\"></a>\n  </div>\n  <div style=\"display: flex; align-items: center; margin-bottom: 20px;\">\n    <img src=\"/blog/qdrant-stars-announcement/robert-caulk-profile.jpeg\" alt=\"Robert Caulk\" style=\"width: 200px; height: 200px; object-fit: cover; object-position: center; margin-right: 20px; margin-top: 20px;\">\n    <div>\n      <p>Robert is working with a team on <a href=\"https://asknews.app\">AskNews</a> to adaptively enrich, index, and report on over 1 million news articles per day. His team maintains an open-source tool geared toward cluster orchestration <a href=\"https://flowdapt.ai\">Flowdapt</a>, which moves data around highly parallelized production environments. This is why Robert and his team rely on Qdrant for low-latency, scalable, hybrid search across dense and sparse vectors in asynchronous environments.</p>\n    </div>\n  </div>\n  <blockquote>\n  I am interested in brainstorming innovative ways to interact with Qdrant vector databases and building presentations that show the power of coupling Flowdapt with Qdrant for large-scale production GenAI applications. I look forward to networking with Qdrant experts and users so that I can learn from their experience.\n  </blockquote>\n```\n\n----------------------------------------\n\nTITLE: Defining Dust Logo SVG for Landing Page\nDESCRIPTION: SVG code defining the Dust logo, consisting of geometric shapes forming a stylized 'D'. The logo is designed for a 120x64 viewport.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_11\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M90 32H80V42H90V32Z\" fill=\"#B4BACC\"/><path d=\"M30 42C32.6522 42 35.1957 40.9464 37.0711 39.0711C38.9464 37.1957 40 34.6522 40 32C40 29.3478 38.9464 26.8043 37.0711 24.9289C35.1957 23.0536 32.6522 22 30 22C27.3478 22 24.8043 23.0536 22.9289 24.9289C21.0536 26.8043 20 29.3478 20 32C20 34.6522 21.0536 37.1957 22.9289 39.0711C24.8043 40.9464 27.3478 42 30 42Z\" fill=\"#B4BACC\"/><path d=\"M50 42C52.6522 42 55.1957 40.9464 57.0711 39.0711C58.9464 37.1957 60 34.6522 60 32C60 29.3478 58.9464 26.8043 57.0711 24.9289C55.1957 23.0536 52.6522 22 50 22C47.3478 22 44.8043 23.0536 42.9289 24.9289C41.0536 26.8043 40 29.3478 40 32C40 34.6522 41.0536 37.1957 42.9289 39.0711C44.8043 40.9464 47.3478 42 50 42Z\" fill=\"#B4BACC\"/><path d=\"M30 22H20V42H30V22Z\" fill=\"#B4BACC\"/><path d=\"M60 22H40V32H60V22Z\" fill=\"#B4BACC\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M70 32C68.6739 32 67.4021 31.4732 66.4645 30.5355C65.5268 29.5979 65 28.3261 65 27C65 25.6739 65.5268 24.4021 66.4645 23.4645C67.4021 22.5268 68.6739 22 70 22H100V32H70Z\" fill=\"#B4BACC\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M60 42V32H70C71.3261 32 72.5979 32.5268 73.5355 33.4645C74.4732 34.4021 75 35.6739 75 37C75 38.3261 74.4732 39.5979 73.5355 40.5355C72.5979 41.4732 71.3261 42 70 42H60Z\" fill=\"#B4BACC\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Launching MCP Server with Qdrant Configuration\nDESCRIPTION: Command to start the MCP server with Qdrant-specific configuration including the server URL, collection name, and tool descriptions for code search and storage functionality.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/webinar-vibe-coding-rag.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nclaude mcp add qdrant-code-search \\\n  -e QDRANT_URL=\"http://localhost:6333\" \\\n  -e COLLECTION_NAME=\"mcp-server-qdrant-knowledge-base\" \\\n  -e TOOL_FIND_DESCRIPTION=\"$TOOL_FIND_DESCRIPTION\" \\\n  -e TOOL_STORE_DESCRIPTION=\"$TOOL_STORE_DESCRIPTION\" \\\n  -- uvx mcp-server-qdrant\n```\n\n----------------------------------------\n\nTITLE: Querying Grouped Points in Qdrant Collection\nDESCRIPTION: HTTP POST request for querying points with grouping functionality in a Qdrant collection. Allows grouping results by a specified field while performing vector similarity search. Supports limiting both the number of groups and points per group.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/query-groups/basic/http.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/query/groups\n{\n    // Same as in the regular query API\n    \"query\": [1.1],\n    // Grouping parameters\n    \"group_by\": \"document_id\",  // Path of the field to group by\n    \"limit\": 4,                 // Max amount of groups\n    \"group_size\": 2            // Max amount of points per group\n}\n```\n\n----------------------------------------\n\nTITLE: Complex SVG Path Definition\nDESCRIPTION: This code snippet contains SVG path data that defines a complex shape using a series of path commands including curves, lines, and movements. The path uses absolute coordinates and appears to be part of a graphic element in the landing page.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_16\n\nLANGUAGE: SVG\nCODE:\n```\n75.5673 27.8802C75.4449 27.8802 74.099 29.1034 74.099 31.3042C74.2214 34.241 76.7897 33.9959 77.6454 32.7735C78.0129 32.161 78.0129 31.0602 78.0129 30.9386C77.8902 30.9386 76.178 31.1836 75.4428 30.082C74.8321 29.2263 75.4428 27.513 77.2788 28.1244C78.3814 28.3695 78.747 30.2044 78.747 30.2044C78.9902 30.082 79.2361 29.9594 79.6046 29.837C79.9713 29.7143 80.2153 29.4695 80.582 29.3479C80.582 29.2263 80.582 26.6572 80.582 25.678C80.7062 24.6996 81.1945 22.2522 82.9078 21.3956C84.1292 20.6623 85.3534 21.8858 84.6204 24.0874C83.887 26.4124 82.1729 28.4924 82.1729 28.4924V32.5298C82.1729 32.5298 84.0089 29.105 84.2529 28.7372C85.2329 27.514 86.6996 27.758 86.6996 29.349C86.6996 30.9399 86.3321 31.7964 86.3321 33.1415C86.3321 33.6306 86.6996 33.6306 86.8212 33.5082C87.8004 32.1623 88.5345 30.5724 89.6353 28.8599C90.6145 27.269 91.9593 27.7583 91.8369 29.2274C91.8369 30.3282 91.8369 31.0615 91.8369 32.1623C91.8369 32.4074 92.0809 32.2847 92.0809 32.1623C92.5691 31.3055 93.5491 29.7156 94.1617 28.6148C94.895 27.3916 96.3633 27.8815 96.3633 29.4706C96.3633 30.8164 96.2398 31.674 96.1182 33.1415C96.1182 33.5082 96.3633 33.5082 96.4857 33.2639C97.7081 31.673 98.1982 30.5722 99.1763 28.8588C99.4203 28.4914 99.6627 28.002 99.787 28.002C99.9086 27.757 100.154 27.8804 100.154 28.002C100.154 28.002 100.277 28.3687 100.4 28.6138C100.645 29.4695 100.89 29.9596 101.256 30.6938C101.38 30.6938 102.846 29.5911 103.947 29.1039C105.05 28.4922 105.293 28.3687 106.884 28.002C106.396 28.2471 105.416 29.9586 105.416 31.1828C105.293 33.9962 107.496 34.3636 108.597 33.5068C109.576 32.7727 109.699 31.0602 109.454 30.6935C109.454 30.6935 107.496 31.4276 106.641 29.9583C106.152 28.9799 107.007 27.7567 108.477 28.1234C109.333 28.3684 109.945 29.7132 109.945 29.7132C109.945 29.7132 111.535 28.7351 112.39 28.2458C113.614 27.634 114.105 28.2458 114.105 29.4682C113.983 30.6924 113.86 32.5274 113.86 32.5274C113.86 32.5274 115.328 29.9572 116.061 28.9799C117.53 27.0215 118.386 28.7348 118.386 29.5916C118.386 30.6943 118.02 31.6716 118.141 33.5066C118.141 33.7516 118.509 33.874 118.752 33.7516C119.12 33.5066 119.486 32.8959 119.486 32.8959C119.732 32.6508 120.099 32.7735 119.976 33.0186C119.854 33.5076 118.874 34.7319 118.139 35.222C117.528 35.5887 116.425 35.4652 116.425 34.242C116.425 33.8746 116.549 30.8162 116.672 30.0831C116.672 29.838 116.425 29.594 116.183 29.838C114.838 31.674 114.102 33.754 113.492 34.8538C113.125 35.4644 112.023 35.4644 112.023 34.6087C112.148 32.773 112.148 31.6719 112.268 29.837C112.268 29.3479 112.023 29.2263 111.658 29.3479C110.802 29.9596 110.189 30.3271 110.189 30.3271C110.189 30.5722 110.436 33.1412 108.968 34.4871C107.5 35.833 104.93 35.4663 104.075 33.6303C103.34 32.0394 103.951 29.9594 104.442 29.4703C103.83 29.5927 103.463 29.8378 102.974 30.2055C102.362 30.4506 101.995 30.8172 101.628 31.3063C101.628 31.3063 102.608 33.997 101.261 34.978C99.7923 35.8338 98.6915 34.978 98.6915 33.9988C98.6915 33.0204 99.7923 31.9196 99.9129 31.9196C99.9129 31.7972 99.667 31.306 99.5462 30.9404C99.4227 30.6954 99.2993 30.4514 99.1795 30.2063C99.1795 30.3287 97.0969 33.7546 96.7302 34.2436C95.5086 35.957 94.4051 35.1004 94.4051 34.122C94.2817 32.8988 94.651 31.0628 94.651 30.0847C94.651 29.7172 94.4051 29.7172 94.1627 29.962C93.0601 31.6754 92.8169 32.6538 91.4721 34.7346C91.1046 35.2236 90.0038 35.5903 90.0038 34.3671C90.1273 32.6538 90.1273 31.6754 90.1273 29.962C90.1273 29.8404 90.0038 29.5954 89.8803 29.8404C88.6571 31.3079 87.8014 33.633 86.8222 34.6122C85.7214 35.7138 84.7433 35.1012 84.8646 34.1239C84.8646 32.4106 84.8646 31.4322 84.9881 29.8415C84.9881 29.474 84.743 29.3524 84.499 29.7191C83.3982 31.4324 83.1532 32.1658 82.174 34.7356C81.8065 35.5914 80.4614 35.3463 80.4614 34.2455C80.583 32.4095 80.583 29.9631 80.583 29.9631C80.2164 30.2082 79.9724 30.3306 79.6057 30.4532C79.3598 30.5756 79.1148 30.6983 78.7481 30.8199C78.7481 30.9426 79.1148 33.878 76.7905 34.8572C75.0772 35.5914 73.1196 35.1023 72.51 32.6548C72.2641 31.7991 72.51 30.4532 72.754 29.9631C72.2649 30.2082 72.0217 30.3306 71.5326 30.6983C71.0425 31.065 70.7985 31.309 70.431 31.6775C70.675 33.0234 70.5534 36.694 69.8193 38.6524C69.2068 40.365 68.4745 41.9548 67.1276 42.9311C65.5377 43.9111 64.5585 42.1988 64.927 40.2423C65.5377 37.1831 67.3726 34.2466 67.4961 34.2466C67.3726 34.125 66.5161 32.9007 65.171 32.9007C63.7017 32.778 62.6009 33.2682 62.6009 33.3898C62.6009 33.3898 62.4774 34.2455 62.2334 34.7356C62.2334 34.9807 61.8649 35.2247 61.8649 34.7356C61.8649 34.2455 61.7452 33.5114 61.8649 33.5114C61.8649 33.5114 58.8084 34.1239 57.5852 32.7772C56.7295 31.9215 57.5852 30.6972 59.2985 30.8196C60.4012 30.9423 61.6236 31.9223 61.6236 32.0428C61.6236 31.9212 61.3777 31.1871 61.2561 30.5754C61.1326 30.3303 61.0092 29.9628 60.767 29.7178L61.8668 29.1071C62.1137 29.7178 62.3558 30.0855 62.4793 30.697C62.6009 31.4311 62.6009 31.9212 62.6009 32.6535C63.2134 32.5319 63.582 32.4084 64.071 32.4084C65.0484 32.2868 65.1718 32.4084 65.7836 32.4084C63.9476 29.9618 63.7028 27.3927 65.1718 24.5794C66.5121 22.2516 69.0812 20.7842 70.5513 20.7842C70.6729 20.7842 70.7964 20.7842 70.6729 20.9058C69.8174 23.3538 69.939 25.3111 69.939 26.5335Z\n```\n\n----------------------------------------\n\nTITLE: Configuring Encoder for FAQ Similarity Model in Python\nDESCRIPTION: This snippet shows how to configure the encoder for the FAQ similarity model using the custom FAQEncoder class. It loads a pre-trained BERT model and wraps it in the custom encoder.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/faq-question-answering.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sentence_transformers import SentenceTransformer\nfrom sentence_transformers.models import Transformer, Pooling\nfrom faq.encoder import FAQEncoder\n\nclass FAQModel(TrainableModel):\n    ...\n    def configure_encoders(self) -> Union[Encoder, Dict[str, Encoder]]:\n        pre_trained_model = SentenceTransformer(\"all-MiniLM-L6-v2\")\n        transformer: Transformer = pre_trained_model[0]\n        pooling: Pooling = pre_trained_model[1]\n        encoder = FAQEncoder(transformer, pooling)\n        return encoder\n```\n\n----------------------------------------\n\nTITLE: Installing Ragbits Package\nDESCRIPTION: Command to install the Ragbits Python package with Qdrant integration using pip.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/frameworks/ragbits.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ragbits\n```\n\n----------------------------------------\n\nTITLE: Social Media Icon SVG for YouTube in HTML\nDESCRIPTION: SVG code for the YouTube social media icon used in the Qdrant landing page. The icon is styled with the F0F3FA color fill.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/footer.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.775 7.1999C23.775 7.1999 23.55 5.5499 22.8 4.7999C21.9 3.8249 20.85 3.8249 20.4 3.7499C17.025 3.5249 12 3.5249 12 3.5249C12 3.5249 6.975 3.5249 3.6 3.7499C3.15 3.8249 2.1 3.8249 1.2 4.7999C0.45 5.5499 0.225 7.1999 0.225 7.1999C0.225 7.1999 0 9.1499 0 11.0999V12.8999C0 14.8499 0.225 16.7999 0.225 16.7999C0.225 16.7999 0.45 18.4499 1.2 19.1999C2.1 20.1749 3.3 20.0999 3.825 20.2499C5.775 20.3999 12 20.4749 12 20.4749C12 20.4749 17.025 20.4749 20.4 20.2499C20.85 20.1749 21.9 20.1749 22.8 19.1999C23.55 18.4499 23.775 16.7999 23.775 16.7999C23.775 16.7999 24 14.8499 24 12.8999V11.0999C24 9.1499 23.775 7.1999 23.775 7.1999ZM9.525 15.1499V8.3999L15.975 11.7749L9.525 15.1499Z\" fill=\"#F0F3FA\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Using Card Shortcode Variant 1 in Markdown\nDESCRIPTION: This example shows how to use the card shortcode (variant 1) in a markdown file. It creates a card with a title, link, type, icon, and content.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/README.md#2025-04-21_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n{{< card\ntitle=\"Qdrant Quickstart\"  \nlink=\"/documentation\"  \ntype=\"Info\"  // optional\nicon=\"/icons/outline/documentation-blue.svg\" \ncol=\"6\" >}}\n  This guide will help you get started with Qdrant locally.  \n{{< /card >}}\n```\n\n----------------------------------------\n\nTITLE: SVG Logo Implementation - Client 1\nDESCRIPTION: SVG vector graphics implementation of a logo containing text paths and shapes with grayscale colors\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_7\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_1622_6719)\"><path d=\"M35.205 34.1349C34.2078 36.502 31.7129 37.9984 29.2198 37.9984C25.4792 37.9984 22.4448 34.8423 22.4448 31.1863C22.4448 27.5303 25.3958 24.5 29.1789 24.5C31.3402 24.5 34.0426 25.6206 35.2884 28.4451H32.5451C31.6312 27.3653 30.508 26.7429 29.053 26.7429C26.9326 26.7429 24.8138 28.6526 24.8138 31.2288C24.8138 33.8049 26.8508 35.7554 29.1364 35.7554C30.8824 35.7554 31.8388 34.759 32.4192 34.1349H35.2034H35.205Z\" fill=\"#B4BACC\"/>[...]</g><defs><clipPath id=\"clip0_1622_6719\"><rect width=\"120\" height=\"64\" fill=\"white\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Setting Qdrant Environment Variables in Shell\nDESCRIPTION: Sets environment variables for Qdrant URL and API key in a shell environment.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/examples/rag-customer-support-cohere-airbyte-aws.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport QDRANT_URL=\"https://qdrant.example.com\"\nexport QDRANT_API_KEY=\"your-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Point Structure in JSON\nDESCRIPTION: This JSON snippet defines a simple point in Qdrant with an ID, a vector, and an optional payload. It illustrates how points are structured in the Qdrant service.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/points.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 129,\n    \"vector\": [0.1, 0.2, 0.3, 0.4],\n    \"payload\": {\"color\": \"red\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Nvidia Session with API Configuration\nDESCRIPTION: Sets up the Qdrant client, Nvidia API session, and configures authentication headers for embedding generation and vector search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/embeddings/nvidia.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom qdrant_client import QdrantClient\n\nNVIDIA_BASE_URL = \"https://ai.api.nvidia.com/v1/retrieval/nvidia/embeddings\"\n\nNVIDIA_API_KEY = \"<YOUR_API_KEY>\"\n\nnvidia_session = requests.Session()\n\nclient = QdrantClient(\":memory:\")\n\nheaders = {\n    \"Authorization\": f\"Bearer {NVIDIA_API_KEY}\",\n    \"Accept\": \"application/json\",\n}\n\ntexts = [\n    \"Qdrant is the best vector search engine!\",\n    \"Loved by Enterprises and everyone building for low latency, high performance, and scale.\",\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QdrantClient } from '@qdrant/js-client-rest';\n\nconst NVIDIA_BASE_URL = \"https://ai.api.nvidia.com/v1/retrieval/nvidia/embeddings\"\nconst NVIDIA_API_KEY = \"<YOUR_API_KEY>\"\n\nconst client = new QdrantClient({ url: 'http://localhost:6333' });\n\nconst headers = {\n    \"Authorization\": \"Bearer \" + NVIDIA_API_KEY,\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\"\n}\n\nconst texts = [\n    \"Qdrant is the best vector search engine!\",\n    \"Loved by Enterprises and everyone building for low latency, high performance, and scale.\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring SCSS Marquee Settings for Customer Logos in Qdrant Landing Page\nDESCRIPTION: SCSS mixin call used to configure the marquee animation for customer logos on the Qdrant landing page. The mixin takes parameters for sizing, number of logos, colors, animation duration, and display type. This needs to be updated when adding more customer logos to the page.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@include marquee.base(64px, 224px, <NUMBER-OF-LOGOS>, <NUMBER-OF-LOGOS>, 52px, $neutral-10, false, 50s, block);\n```\n\n----------------------------------------\n\nTITLE: Release Notes Page Configuration\nDESCRIPTION: Defines metadata for a release notes page with external link redirection to GitHub releases\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/release-notes.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Release Notes\nweight: 32\npartition: qdrant\ntype: external-link\nexternal_url: https://github.com/qdrant/qdrant/releases\nsitemapExclude: True\n```\n\n----------------------------------------\n\nTITLE: Defining Geographic Bounding Box in TypeScript\nDESCRIPTION: Configures a geographic boundary using bottom right and top left coordinates, typically used for spatial filtering or location-based queries\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/geo-bounding-box/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    key: 'location',\n    geo_bounding_box: {\n        bottom_right: {\n            lon: 13.455868,\n            lat: 52.495862\n        },\n        top_left: {\n            lon: 13.403683,\n            lat: 52.520711\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Model with LangChain\nDESCRIPTION: Demonstrates how to initialize and use an OpenAI model through LangChain's interface. Requires an OpenAI API key for authentication.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/dspy-vs-langchain.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_openai import OpenAI\n\nllm = OpenAI(api_key=\"...\")\n\nllm.invoke(\"Where is Paris?\")\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Front Matter for Qdrant Landing Page\nDESCRIPTION: This snippet defines the front matter for a Hugo template used in Qdrant landing pages. It sets the draft status, specifies the path for the logo image, defines the page name, and excludes the page from the sitemap.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/themes/qdrant/archetypes/customer-logo.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndraft: false\nimage: \"content/images/logos/{{ replace .Name \"-\" \" \" }}-logo\" #logo image should be in pdf format, do not include extension here\nname: \"{{ replace .Name \"-\" \" \" | title }}\"\nsitemapExclude: True\n---\n```\n\n----------------------------------------\n\nTITLE: X (Twitter) Logo SVG Implementation\nDESCRIPTION: SVG code for the X (formerly Twitter) logo using path elements with a monochromatic style in the color #B4BACC. The SVG has dimensions of 36×64 pixels.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_19\n\nLANGUAGE: svg\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"36\" height=\"64\" viewBox=\"0 0 36 64\" fill=\"none\"><path d=\"M28.4425 15.4182H33.9607L21.8447 29.2136L36 47.9273H24.8917L16.1946 36.5551L6.23792 47.9273H0.71976L13.5555 33.1723L0 15.4182H11.3842L19.2416 25.8067L28.4425 15.4182ZM26.5112 44.6884H29.5701L9.77674 18.5371H6.48984L26.5112 44.6884Z\" fill=\"#B4BACC\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request for Retrieving Qdrant Cluster Status\nDESCRIPTION: HTTP request to get the current status of a Qdrant cluster, which shows peer information and Raft consensus details.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/guides/distributed_deployment.md#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /cluster\n```\n\n----------------------------------------\n\nTITLE: Sample Food Item Data Structure in JSON\nDESCRIPTION: Example of the JSON payload structure for each food item in the dataset, containing restaurant details, dish information, and image URL.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/datasets.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"cafe\": {\n        \"address\": \"VGX7+6R2 Vecchia Napoli, Valletta\",\n        \"categories\": [\"italian\", \"pasta\", \"pizza\", \"burgers\", \"mediterranean\"],\n        \"location\": {\"lat\": 35.8980154, \"lon\": 14.5145106},\n        \"menu_id\": \"610936a4ee8ea7a56f4a372a\",\n        \"name\": \"Vecchia Napoli Is-Suq Tal-Belt\",\n        \"rating\": 9,\n        \"slug\": \"vecchia-napoli-skyparks-suq-tal-belt\"\n    },\n    \"description\": \"Tomato sauce, mozzarella fior di latte, crispy guanciale, Pecorino Romano cheese and a hint of chilli\",\n    \"image\": \"https://wolt-menu-images-cdn.wolt.com/menu-images/610936a4ee8ea7a56f4a372a/005dfeb2-e734-11ec-b667-ced7a78a5abd_l_amatriciana_pizza_joel_gueller1.jpeg\",\n    \"name\": \"L'Amatriciana\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode in Qdrant Collection Creation (cURL)\nDESCRIPTION: This cURL command creates a new Qdrant collection with strict mode enabled, specifically activating the unindexed_filtering_retrieve limit.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/qdrant-1.13.x.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"strict_mode_config\": {\n        \"enabled\":\" true,\n        \"unindexed_filtering_retrieve\": true\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Blog Post Frontmatter in YAML\nDESCRIPTION: This YAML frontmatter section defines metadata for a Hugo blog post, including title, draft status, slug, descriptions, images, date, author, tags, and weight. It provides a structure for consistently organizing blog post information.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/themes/qdrant/archetypes/blog-post.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ndraft: false\nslug: {{ .Name }} # Change this slug to your page slug if needed\nshort_description:  This is a blog post # Change this\ndescription: This is a blog post # Change this\npreview_image: /blog/Article-Image.png # Change this\n\n# social_preview_image: /blog/Article-Image.png # Optional image used for link previews\n# title_preview_image: /blog/Article-Image.png # Optional image used for blog post title\n# small_preview_image: /blog/Article-Image.png # Optional image used for small preview in the list of blog posts\n\ndate: {{ .Date }}\nauthor: John Doe # Change this\nfeatured: false # if true, this post will be featured on the blog page\ntags: # Change this, related by tags posts will be shown on the blog page\n  - news\n  - blog\nweight: 0 # Change this weight to change order of posts\n# For more guidance, see https://github.com/qdrant/landing_page?tab=readme-ov-file#blog\n---\n```\n\n----------------------------------------\n\nTITLE: Searching with Shard Key in Qdrant HTTP API\nDESCRIPTION: Example of using the Qdrant HTTP API to perform a vector search with a specified shard key. This demonstrates the new user-defined sharding feature in Qdrant 1.7.0.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qdrant-1.7.x.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/my_collection/points/search\n{\n    \"vector\": [0.29, 0.81, 0.75, 0.11],\n    \"shard_key\": [\"cats\", \"dogs\"],\n    \"limit\": 10,\n    \"with_payload\": true,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Search Parameters for Vector Queries\nDESCRIPTION: Configures search parameters for vector queries, specifically the 'ef' parameter which determines how many neighbors are evaluated during search.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/vector-search-resource-optimization.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient.query_points(\n   collection_name=\"{collection_name}\",\n   query=[...]\n   search_params=models.SearchParams(hnsw_ef=128, exact=False),\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Qdrant Logo using SVG\nDESCRIPTION: SVG vector markup for rendering the Qdrant logo with vector paths. The logo includes various path elements that form the complete Qdrant branding image.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_9\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_1629_8447)\"><path d=\"M15.2632 39.1475C15.8638 39.1475 16.2241 39.6279 16.2241 40.1084C16.2241 40.7089 15.7437 41.0693 15.2632 41.0693C14.6627 41.0693 14.3024 40.5888 14.3024 40.1084C14.3024 39.6279 14.6627 39.1475 15.2632 39.1475ZM30.9979 33.0218C30.3973 33.0218 30.037 32.5414 30.037 32.0609C30.037 31.5805 30.5174 31.1 30.9979 31.1C31.5984 31.1 31.9588 31.5805 31.9588 32.0609C31.9588 32.5414 31.4783 33.0218 30.9979 33.0218ZM30.9979 28.938C29.3163 28.938 27.875 30.3794 27.875 32.0609C27.875 32.4213 27.875 32.7816 27.9951 33.0218L17.7856 38.4268C17.185 37.5861 16.2241 37.1056 15.2632 37.1056C14.0621 37.1056 12.9811 37.8263 12.5007 38.7872L3.37221 33.9827C2.41131 33.5023 1.69065 31.8207 1.81076 30.3794C1.81076 29.6587 2.17109 29.0582 2.53143 28.8179C2.77165 28.6978 3.13198 28.6978 3.37221 28.8179H3.49232C5.89455 30.1392 13.942 34.2229 14.1822 34.4632C14.6627 34.7034 15.023 34.8235 15.8638 34.343L32.3191 25.8152C32.5593 25.695 32.7995 25.4548 32.7995 25.0945C32.7995 24.614 32.3191 24.3738 32.3191 24.3738C31.3582 23.8934 29.9169 23.2928 28.5956 22.5721C25.5928 21.1308 22.2297 19.5694 20.6683 18.8487C19.347 18.128 18.3861 18.7286 18.1459 18.8487L17.7856 18.9688C11.0593 22.3319 2.05098 26.776 1.57053 27.0163C0.609642 27.6168 0.129196 28.6978 0.00908488 30.019C-0.111027 32.181 0.969977 34.4632 2.65154 35.3039L12.3806 40.3486C12.6208 41.9101 13.942 42.9911 15.3834 42.9911C17.0649 42.9911 18.5063 41.6698 18.5063 39.9883L29.1962 34.2229C29.7967 34.7034 30.3973 34.8235 31.118 34.8235C32.7995 34.8235 34.2409 33.3822 34.2409 31.7006C34.0006 30.2593 32.6794 28.938 30.9979 28.938Z\" fill=\"#B4BACC\"/><path d=\"M54.4193 37.1058C53.8188 37.7063 52.978 38.3069 51.897 38.6672C50.816 39.0275 49.6148 39.2678 48.2936 39.2678C46.2517 39.2678 44.5702 38.6672 43.3691 37.346C42.1679 36.1449 41.4473 34.3432 41.4473 32.1812V30.86C41.4473 29.2985 41.6875 27.9773 42.288 26.8963C42.8886 25.6952 43.6093 24.8544 44.5702 24.2539C45.5311 23.6533 46.7322 23.293 48.0534 23.293C49.9752 23.293 51.5366 23.7734 52.6176 24.6142C53.6986 25.455 54.2992 26.7762 54.5394 28.5779H50.9361C50.816 27.7371 50.5757 27.1365 50.0953 26.7762C49.6148 26.4159 49.0143 26.1756 48.2936 26.1756C47.3327 26.1756 46.6121 26.536 46.1316 27.3768C45.6512 28.2175 45.4109 29.2985 45.2908 30.7399V31.7008C45.2908 33.2622 45.5311 34.4633 46.1316 35.184C46.6121 35.9046 47.4528 36.3851 48.654 36.3851C49.6148 36.3851 50.3355 36.1449 50.816 35.7845V33.3823H48.1735V30.86H54.5394V37.1058H54.4193Z\" fill=\"#B4BACC\"/><path d=\"M56.5815 39.0275H60.1849V27.4968H56.5815V39.0275ZM56.4614 24.4941C56.4614 24.0136 56.7016 23.5332 57.062 23.1728C57.4223 22.8125 57.9028 22.6924 58.5033 22.6924C59.1039 22.6924 59.5843 22.8125 59.9447 23.1728C60.305 23.5332 60.5452 23.8935 60.5452 24.4941C60.5452 24.9745 60.305 25.4549 59.9447 25.8153C59.5843 26.1756 59.1039 26.2957 58.5033 26.2957C57.9028 26.2957 57.4223 26.1756 57.062 25.8153C56.5815 25.4549 56.4614 25.0946 56.4614 24.4941Z\" fill=\"#B4BACC\"/><path d=\"M66.6711 24.6143V27.4969H68.5929V30.0193H66.6711V35.3042C66.6711 35.7846 66.7913 36.0248 66.9114 36.265C67.0315 36.3852 67.3918 36.5053 67.8723 36.5053C68.2326 36.5053 68.4728 36.5053 68.713 36.3852V38.9075C68.1125 39.1477 67.3918 39.2678 66.6711 39.2678C65.47 39.2678 64.5091 39.0276 63.9086 38.427C63.308 37.8265 63.0678 36.9857 63.0678 35.7846V30.0193H61.6265V27.4969H63.0678V24.6143H66.6711Z\" fill=\"#B4BACC\"/><path d=\"M73.8778 32.4214V36.1449H76.28C77.0007 36.1449 77.4811 36.0248 77.8414 35.6644C78.2018 35.3041 78.442 34.9438 78.442 34.3432C78.442 33.022 77.8414 32.4214 76.5202 32.4214H73.8778ZM73.8778 30.0192H75.7995C76.6403 30.0192 77.2409 29.8991 77.6012 29.5388C77.9615 29.2985 78.0817 28.8181 78.0817 28.2175C78.0817 27.617 77.8414 27.1365 77.4811 26.7762C77.1208 26.536 76.5202 26.2958 75.6794 26.2958H73.8778V30.0192ZM70.1543 39.0276V23.5332H75.7995C77.8414 23.5332 79.2828 23.8935 80.3638 24.6142C81.4448 25.3349 81.9252 26.4159 81.9252 27.8572C81.9252 28.698 81.685 29.2985 81.3247 29.8991C80.9643 30.4997 80.3638 30.86 79.6431 31.1002C80.4839 31.3404 81.0844 31.7008 81.5649 32.3013C82.0453 32.9019 82.1654 33.6226 82.1654 34.4633C82.1654 36.0248 81.685 37.1058 80.7241 37.9466C79.7632 38.6672 78.3219 39.1477 76.4001 39.1477L70.1543 39.0276Z\" fill=\"#B4BACC\"/><path d=\"M87.2098 33.382C87.2098 34.463 87.3299 35.1837 87.6902 35.7842C88.0506 36.2647 88.531 36.5049 89.1316 36.5049C90.4528 36.5049 91.0534 35.544 91.0534 33.5021V33.1418C91.0534 31.0999 90.3327 30.0189 89.0115 30.0189C87.8103 30.0189 87.2098 30.8597 87.0897 32.6614L87.2098 33.382ZM83.6064 33.1418C83.6064 31.9407 83.8467 30.9798 84.3271 30.0189C84.8076 29.1781 85.4081 28.4575 86.2489 27.977C87.0897 27.4966 88.0506 27.2563 89.2517 27.2563C90.9333 27.2563 92.3746 27.7368 93.3355 28.8178C94.2964 29.8988 94.7768 31.3401 94.7768 33.1418V33.382C94.7768 35.1837 94.2964 36.625 93.2154 37.706C92.2545 38.787 90.8131 39.2675 89.1316 39.2675C87.45 39.2675 86.1288 38.787 85.1679 37.8261C84.207 36.8652 83.6064 35.544 83.6064 33.8625V33.1418Z\" fill=\"#B4BACC\"/><path d=\"M99.5819 33.382C99.5819 34.463 99.702 35.1837 100.062 35.7842C100.423 36.2647 100.903 36.5049 101.504 36.5049C102.825 36.5049 103.425 35.544 103.425 33.5021V33.1418C103.425 31.0999 102.705 30.0189 101.384 30.0189C100.182 30.0189 99.5819 30.8597 99.4618 32.6614L99.5819 33.382ZM95.9785 33.1418C95.9785 31.9407 96.2187 30.9798 96.6992 30.0189C97.1796 29.1781 97.7802 28.4575 98.621 27.977C99.4617 27.4966 100.423 27.2563 101.624 27.2563C103.305 27.2563 104.747 27.7368 105.708 28.8178C106.668 29.8988 107.149 31.3401 107.149 33.1418V33.382C107.149 35.1837 106.668 36.625 105.587 37.706C104.627 38.787 103.185 39.2675 101.504 39.2675C99.8221 39.2675 98.5009 38.787 97.54 37.8261C96.5791 36.8652 95.9785 35.544 95.9785 33.8625V33.1418Z\" fill=\"#B4BACC\"/><path d=\"M113.394 34.8236L112.313 35.7845V39.0275H108.71V22.6924H112.313V31.3404L112.674 30.8599L115.436 27.4968H119.76L115.676 32.3013L120 39.0275H115.917L113.394 34.8236Z\" fill=\"#B4BACC\"/></g><defs><clipPath id=\"clip0_1629_8447\"><rect width=\"120\" height=\"64\" fill=\"white\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Testimonial Frontend Metadata Configuration\nDESCRIPTION: YAML frontmatter configuration for a customer testimonial page, including reviewer details, avatars, and company logo paths\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/customers-testimonial-2.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nreview: \"We LOVE Qdrant! The exceptional engineering, strong business value, and outstanding team behind the product drove our choice. Thank you for your great contribution to the technology community!\"\nnames: Kyle Tobin\npositions: Principal, Cognizant\navatar:\n  src: /img/customers/kyle-tobin.png\n  alt: Kyle Tobin Avatar\nlogo:\n  src:  /img/brands/cognizant.svg\n  alt: Cognizant Logo\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG Logo with Custom Path and Clipping\nDESCRIPTION: Defines an SVG logo with a specific viewBox, custom path commands and clipping mask settings\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_20\n\nLANGUAGE: svg\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"104\" height=\"64\" viewBox=\"0 0 104 64\" fill=\"none\"><g clip-path=\"url(#clip0_1773_1078)\"><path d=\"M14.8141 39.8508C13.8168 37.8879 12.6468 35.9051 10.3646 35.9051C9.92829 35.9051 9.49253 35.9774 9.09266 36.1599L8.31735 34.6083C9.26218 33.7976 10.7889 33.1549 12.7513 33.1549C15.8042 33.1549 17.3709 34.6254 18.6148 36.5026C19.3531 34.9 19.7041 32.7358 19.7041 30.0531C19.7041 23.3541 17.6091 19.9143 12.7154 19.9143C7.89304 19.9143 5.80943 23.3541 5.80943 30.0531C5.80943 36.7168 7.89304 40.1212 12.7154 40.1212C13.4819 40.1212 14.1761 40.037 14.8141 39.8508ZM16.0096 42.1887C14.9525 42.4721 13.8293 42.6286 12.7154 42.6286C6.29406 42.6286 0.00683594 37.5046 0.00683594 30.0531C0.00683594 22.5309 6.29406 17.4059 12.7154 17.4059C19.2445 17.4059 25.4714 22.494 25.4714 30.0531C25.4714 34.2578 23.5094 37.6747 20.6578 39.8831C21.5792 41.2636 22.5277 42.1804 23.8485 42.1804C25.2899 42.1804 25.8712 41.0666 25.9685 40.193H27.8457C27.9554 41.3562 27.3735 46.1906 22.1273 46.1906C18.9496 46.1906 17.2695 44.3488 16.0096 42.1887Z\" fill=\"#B4BACC\"/></g><defs><clipPath id=\"clip0_1773_1078\"><rect width=\"104\" height=\"64\" fill=\"white\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Filtering Comments with Qdrant JSON\nDESCRIPTION: This JSON snippet configures a filter to select data where the 'values_count' field within the 'comments' section is greater than 2. It's used to retrieve data with a minimum number of values associated with the 'comments' key.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/values-count/json.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"key\": \"comments\",\n  \"values_count\": {\n    \"gt\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Vectors for Benchmark in Python\nDESCRIPTION: Python command to upload vectors for benchmarking using the vector-db-benchmark project, specifically for the glove-100-angular dataset with all data stored in RAM.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/memory-consumption.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython run.py --engines qdrant-all-in-ram --datasets glove-100-angular\n```\n\n----------------------------------------\n\nTITLE: Qdrant Vector Database Setup\nDESCRIPTION: This configuration sets up Qdrant Cloud as a vector database for storing document embeddings. Users must create a Qdrant account, set up a cluster, and secure cluster details like the URL and API key. Append these details to a .env file for secure storage.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Hugo Page Configuration for Qdrant Stars\nDESCRIPTION: Defines page metadata and build settings for the Qdrant Stars Ambassador Program landing page using Hugo static site generator configuration\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/stars/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Qdrant Stars\ndescription: Qdrant Stars - Our Ambassador Program\nbuild:\n  render: always\ncascade:\n- build:\n    list: local\n    publishResources: false\n    render: never\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Upserting Points in Go\nDESCRIPTION: This snippet demonstrates how to create a Qdrant client, connect to a local Qdrant server, and upsert multiple points with vectors and payload data into a collection. It showcases the structure of point data including IDs, vectors, and various payload types.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/insert-points/with-payload/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.Upsert(context.Background(), &qdrant.UpsertPoints{\n    CollectionName: \"{collection_name}\",\n    Points: []*qdrant.PointStruct{\n        {\n            Id:      qdrant.NewIDNum(1),\n            Vectors: qdrant.NewVectors(0.05, 0.61, 0.76, 0.74),\n            Payload: qdrant.NewValueMap(map[string]any{\n                \"city\": \"Berlin\", \"price\": 1.99}),\n        },\n        {\n            Id:      qdrant.NewIDNum(2),\n            Vectors: qdrant.NewVectors(0.19, 0.81, 0.75, 0.11),\n            Payload: qdrant.NewValueMap(map[string]any{\n                \"city\": []any{\"Berlin\", \"London\"}}),\n        },\n        {\n            Id:      qdrant.NewIDNum(3),\n            Vectors: qdrant.NewVectors(0.36, 0.55, 0.47, 0.94),\n            Payload: qdrant.NewValueMap(map[string]any{\n                \"city\":  []any{\"Berlin\", \"London\"},\n                \"price\": []any{1.99, 2.99}}),\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Configuration for AI Agents Landing Page\nDESCRIPTION: This YAML snippet defines the content and structure for a landing page about AI Agents using Qdrant's vector search capabilities. It includes metadata, descriptive text, call-to-action buttons, and an image reference.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/ai-agents/ai-agents-hero.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: AI Agents\ndescription: Unlock the full potential of your AI agents with Qdrant's powerful vector search and scalable infrastructure, allowing them to handle complex tasks, adapt in real time, and drive smarter, data-driven outcomes across any environment.\nstartFree:\n  text: Get Started\n  url: https://cloud.qdrant.io/signup\nlearnMore:\n  text: Learn More\n  url: \"#ai-agents\"\nimage:\n  src: /img/vectors/vector-4.svg\n  alt: AI agents chat\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Social Media Icon SVG for GitHub in HTML\nDESCRIPTION: SVG code for the GitHub social media icon used in the Qdrant landing page. The icon is styled with the F0F3FA color fill.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/footer.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_1841_958)\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 0.299805C5.35 0.299805 0 5.6498 0 12.2998C0 17.5998 3.45 22.0998 8.2 23.6998C8.8 23.7998 9 23.4498 9 23.0998C9 22.7998 9 22.0498 9 21.0498C5.65 21.7998 4.95 19.4498 4.95 19.4498C4.4 18.0498 3.6 17.6998 3.6 17.6998C2.5 16.9498 3.7 16.9498 3.7 16.9498C4.9 17.0498 5.55 18.1998 5.55 18.1998C6.6 20.0498 8.35 19.4998 9.05 19.1998C9.15 18.3998 9.45 17.8998 9.8 17.5998C7.15 17.2998 4.35 16.2498 4.35 11.6498C4.35 10.3498 4.8 9.2498 5.6 8.4498C5.5 8.1498 5.05 6.9498 5.7 5.2498C5.7 5.2498 6.7 4.9498 9 6.4998C9.95 6.2498 11 6.0998 12 6.0998C13 6.0998 14.05 6.2498 15 6.4998C17.3 4.9498 18.3 5.2498 18.3 5.2498C18.95 6.8998 18.55 8.0998 18.4 8.4498C19.15 9.2998 19.65 10.3498 19.65 11.6498C19.65 16.2498 16.85 17.2498 14.15 17.5498C14.6 17.8998 14.95 18.6498 14.95 19.7498C14.95 21.3498 14.95 22.6498 14.95 23.0498C14.95 23.3498 15.15 23.7498 15.8 23.6498C20.55 22.0998 24 17.5998 24 12.2998C24 5.6498 18.65 0.299805 12 0.299805Z\" fill=\"#F0F3FA\"/></g><defs><clipPath id=\"clip0_1841_958\"><rect width=\"24\" height=\"24\" fill=\"white\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Match Condition in JSON\nDESCRIPTION: This JSON snippet defines a matching condition, where it specifies a key 'count' with a match value of 0. It is used to filter results in a query.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/match-integer/json.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"count\",\n  \"match\": {\n    \"value\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running FIO Benchmark Tool\nDESCRIPTION: Commands to install FIO tool and run random read performance test with 4k block size, 64 IO depth, and 8GB test file size.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/memory-consumption.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install fio\n\nfio --randrepeat=1 \\\n    --ioengine=libaio \\\n    --direct=1 \\\n    --gtod_reduce=1 \\\n    --name=fiotest \\\n    --filename=testfio \\\n    --bs=4k \\\n    --iodepth=64 \\\n    --size=8G \\\n    --readwrite=randread\n```\n\n----------------------------------------\n\nTITLE: Matching Text with Qdrant in Go\nDESCRIPTION: This Go code snippet initializes a text match operation using the Qdrant Go client library. It imports the Qdrant package and calls `NewMatchText`, specifying a field ('description') and a query string ('good cheap'). This function is typically used to search for specific text within a given field in a Qdrant database. This snippet requires the Qdrant Go client to be installed as a prerequisite. Inputs include a field name and a query string, and the output is a match object.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/filter-condition/full-text-match/go.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewMatchText(\"description\", \"good cheap\")\n```\n\n----------------------------------------\n\nTITLE: Scrolling Qdrant Collection with Negated Filter Conditions in Rust\nDESCRIPTION: This code uses the Qdrant client to perform a scroll operation on a collection. It applies a filter that excludes points where both 'city' is 'London' and 'color' is 'red'. The query is asynchronous and returns a Result type.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/scroll-points/with-nested-clauses-filter/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::must_not([Filter::must(\n            [\n                Condition::matches(\"city\", \"London\".to_string()),\n                Condition::matches(\"color\", \"red\".to_string()),\n            ],\n        )\n        .into()])),\n    )\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Configuring Photo Cards and Sitemap Settings in YAML\nDESCRIPTION: This YAML configuration defines four photo cards with sequential IDs from 0 to 3 and excludes the page from the sitemap with a boolean flag.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/carousel.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nphotoCards:\n  - id: 0\n  - id: 1\n  - id: 2\n  - id: 3\nsitemapExclude: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Async I/O Interface in YAML\nDESCRIPTION: Configuration settings to enable the experimental io_uring async scorer feature for Linux-based systems with kernel version > 5.4\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/qdrant-1.3.x.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n\t# enable the async scorer which uses io_uring\n\tasync_scorer: true\n```\n\n----------------------------------------\n\nTITLE: Setting up SQLite Database for Video Metadata\nDESCRIPTION: Creates SQLite database schema and helper functions to store video metadata and check for existing videos.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/talk-with-youtube-without-paying-a-cent-francesco-saverio-zuppichini-vector-space-talks.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef setup_db():\n    conn = sqlite3.connect('videos.db')\n    c = conn.cursor()\n    c.execute('''CREATE TABLE IF NOT EXISTS videos\n                 (id text PRIMARY KEY, title text)''')\n    conn.commit()\n    return conn\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client and Performing Search in C#\nDESCRIPTION: This snippet demonstrates how to create a connection to a Qdrant server and execute a filtered search operation using matrix offsets. It establishes a connection to a local Qdrant instance and performs a search with a keyword filter, specifying sample and limit parameters.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/headless/snippets/distance-matrix/offsets-format/csharp.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.SearchMatrixOffsetsAsync(\n    collectionName: \"{collection_name}\",\n    filter: MatchKeyword(\"color\", \"red\"),\n    sample: 10,\n    limit: 2\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Landing Page Logos and Sitemap Settings in YAML\nDESCRIPTION: YAML configuration that defines an array of customer logo image paths and sets sitemap exclusion flag. Used to display customer logos on the landing page while controlling sitemap behavior.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/customers/logo-cards-3.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogos:\n  -  /img/customers-logo/flipkart.svg\n  -  /img/customers-logo/x.svg\n  -  /img/customers-logo/quora.svg\nsitemapExclude: true\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Search Queries\nDESCRIPTION: Example of performing a search query on the stored documents using the query method.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/fastembed.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsearch_result = client.query(\n    collection_name=\"demo_collection\",\n    query_text=\"This is a query document\"\n)\nprint(search_result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex SVG Logo with Custom Paths\nDESCRIPTION: Defines an SVG logo with detailed path rules and multiple path components\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_21\n\nLANGUAGE: svg\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.4873 18V25.7738L4.55877 18.8395L3.8727 18.1528V19.1235V26.3579H1.00046H0.598633V26.7598V37.6653V38.0671H1.00046H3.8735V45.3474V46.318L4.55958 45.6314L11.4873 38.6978V46.9314H12.2909V38.6625L19.2532 45.6314L19.9392 46.3181V45.3474V38.0671H22.8115H23.2133V37.6653V26.7598V26.3579H22.8115H19.9392V21.2146V19.1235V18.1528L19.2532 18.8395L12.2909 25.8083V18H11.4873Z\" fill=\"none\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Scalar Quantization Performance Comparison Table\nDESCRIPTION: HTML table showing performance metrics comparing non-quantized vs scalar quantized vectors across different ef values (128, 256, 512), including upload time, search precision, and search time.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/scalar-quantization.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<table>\n   <thead>\n      <tr>\n         <th colspan=\"2\"></th>\n         <th colspan=\"2\">ef = 128</th>\n         <th colspan=\"2\">ef = 256</th>\n         <th colspan=\"2\">ef = 512</th>\n      </tr>\n      <tr>\n         <th></th>\n         <th><small>Upload and indexing time</small></th>\n         <th><small>Mean search precision</small></th>\n         <th><small>Mean search time</small></th>\n         <th><small>Mean search precision</small></th>\n         <th><small>Mean search time</small></th>\n         <th><small>Mean search precision</small></th>\n         <th><small>Mean search time</small></th>\n      </tr>\n   </thead>\n   <tbody>\n      <tr>\n         <th>Non-quantized vectors</th>\n         <td>452</td>\n         <td>0.802</td>\n         <td>0.077</td>\n         <td>0.887</td>\n         <td>0.135</td>\n         <td>0.941</td>\n         <td>0.231</td>\n      </tr>\n      <tr>\n         <th>Scalar Quantization</th>\n         <td>312</td>\n         <td>0.802</td>\n         <td>0.043</td>\n         <td>0.888</td>\n         <td>0.077</td>\n         <td>0.941</td>\n         <td>0.135</td>\n      </tr>\n      <tr>\n         <td>Difference</td>\n         <td><span style=\"color: green;\">-30.79%</span></td>\n         <td>0%</td>\n         <td><span style=\"color: green;\">-44,16%</span></td>\n         <td><span style=\"color: green;\">+0.11%</span></td>\n         <td><span style=\"color: green;\">-42.96%</span></td>\n         <td>0%</td>\n         <td><span style=\"color: green;\">-41,56%</span></td>\n      </tr>\n   </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Running Vector Search Evaluation Script\nDESCRIPTION: Bash command to execute the evaluation script with configured rescore limit for measuring search performance against ground truth data.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/database-tutorials/large-scale-search.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython eval.py --rescore_limit 1000\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in Qdrant Search API\nDESCRIPTION: Demonstrates how to use pagination in Qdrant's search API by specifying an offset. This example retrieves the 11th page with 10 records per page, equivalent to skipping the first 100 results.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/search.md#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /collections/{collection_name}/points/search\n{\n  \"vector\": [0.2, 0.1, 0.9, 0.7],\n  \"limit\": 10,\n  \"offset\": 100\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Qdrant Ecosystem Page Metadata in Markdown\nDESCRIPTION: This snippet defines the metadata for the Qdrant ecosystem documentation page using YAML front matter in Markdown. It specifies the title, description, category, URL, and other properties of the page.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/ecosystem/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Ecosystem\ndescription: Tools, libraries and integrations around Qdrant vector search engine.\ncategory: ecosystem\nurl: /articles/ecosystem/\nisCategoryPage: true\nweight: \n---\n```\n\n----------------------------------------\n\nTITLE: SVG Path Drawing Commands\nDESCRIPTION: SVG path commands defining curves and shapes with precise coordinate points, including fill color and clipping path definitions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/customers.md#2025-04-21_snippet_25\n\nLANGUAGE: svg\nCODE:\n```\n.2077 35.9616 14.285 36.2749 14.4627 36.532ZM100.703 29.0234C98.5338 29.0234 97.703 31.0223 97.703 31.0223H97.6678V29.2758H95.2139V38.6689H97.794V34.7414C97.794 32.4518 98.2402 31.4303 100.192 31.4303C100.544 31.4253 100.891 31.508 101.202 31.671L102.309 29.4989C101.832 29.1859 101.273 29.0205 100.703 29.0234ZM81.0186 35.6396L82.7476 29.2787H85.4011L82.4393 38.6777H79.7828L78.1097 32.3667H78.0745L76.4747 38.6777H73.8035L71.8662 32.5751L73.5482 29.2787L75.2742 35.6601H75.3094L76.8739 29.2787H79.3836L80.9834 35.6396H81.0186Z\" fill=\"#B4BACC\"/></g><defs><clipPath id=\"clip0_4574_4896\"><rect width=\"120\" height=\"64\" fill=\"white\" transform=\"translate(0 0.116028)\"/></clipPath></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Updating Quantization Configuration\nDESCRIPTION: Examples demonstrating how to switch between different quantization methods and update compression parameters\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/articles/what-is-quantization.md#2025-04-21_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPUT /collections/{collection_name}\n{\n  \"vectors\": {\n    \"size\": 1536,\n    \"distance\": \"Cosine\"\n  },\n  \"quantization_config\": {\n    \"binary\": {\n      \"always_ram\": true,\n      \"compression_rate\": 0.8  # Set the new compression rate\n    }\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nclient.update_collection(\n    collection_name=\"my_collection\",\n    quantization_config=models.BinaryQuantization(\n        binary=models.BinaryQuantizationConfig(\n            always_ram=True,  # Store only quantized vectors in RAM\n            compression_rate=0.8  # Set the new compression rate\n        )\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling IDF Modifier for Sparse Vector Search in Qdrant\nDESCRIPTION: Configuration to enable Inverse Document Frequency (IDF) modifier for sparse vector queries. This automatically adjusts the importance of vector elements based on their rarity in the collection, improving relevance ranking.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/documentation/concepts/indexing.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{{< code-snippet path=\"/documentation/headless/snippets/create-collection/sparse-vector-idf/\" >}}\n```\n\n----------------------------------------\n\nTITLE: SVG Icon for Rust-Powered Reliability & Performance Feature\nDESCRIPTION: SVG vector graphics depicting an icon for the 'Rust-Powered Reliability & Performance' feature card. The icon uses linear gradients and stroke elements to represent performance metrics and reliability.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/main/core-features.md#2025-04-21_snippet_2\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 28H20V46H28V28Z\" stroke=\"url(#paint0_linear_1651_8186)\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M10 38H2V46H10V38Z\" stroke=\"url(#paint1_linear_1651_8186)\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M46 18H38V46H46V18Z\" stroke=\"url(#paint2_linear_1651_8186)\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M6 18L16 8L24 16L38 2\" stroke=\"#DC244C\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M29 2H38V11\" stroke=\"#DC244C\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><defs><linearGradient id=\"paint0_linear_1651_8186\" x1=\"24\" y1=\"28\" x2=\"24\" y2=\"46\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#717C99\"/><stop offset=\"1\" stop-color=\"#161E33\"/></linearGradient><linearGradient id=\"paint1_linear_1651_8186\" x1=\"6\" y1=\"38\" x2=\"6\" y2=\"46\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#717C99\"/><stop offset=\"1\" stop-color=\"#161E33\"/></linearGradient><linearGradient id=\"paint2_linear_1651_8186\" x1=\"42\" y1=\"18\" x2=\"42\" y2=\"46\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#717C99\"/><stop offset=\"1\" stop-color=\"#161E33\"/></linearGradient></defs></svg>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video IFrame\nDESCRIPTION: HTML iframe code for embedding a YouTube video of the interview with Iveta Lohovska.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/blog/gen-ai-and-vector-search-iveta-lohovska-vector-space-talks.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RsRAUO-fNaA?si=s3k_-DP1U0rkPlEV\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: SVG Path Logo Definition\nDESCRIPTION: SVG path data defining vector graphics for what appears to be logo artwork, including fill colors, stroke properties and mask definitions.\nSOURCE: https://github.com/qdrant/landing_page/blob/master/qdrant-landing/content/headless/customer-list.md#2025-04-21_snippet_5\n\nLANGUAGE: svg\nCODE:\n```\n<svg width=\"120\" height=\"64\" viewBox=\"0 0 120 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M75.0736 30.1286H64.837L63.2827 32.569L61.7248 35.0095H69.6124C69.173 36.5582 68.2698 37.9352 67.0243 38.955C65.7343 39.979 64.1312 40.5278 62.4844 40.5094C61.4256 40.5082 60.378 40.2929 59.4044 39.8765C58.4309 39.4602 57.5515 38.8514 56.8193 38.0865C55.3231 36.5328 54.4885 34.4589 54.4913 32.3017C54.4931 30.1637 55.3385 28.1127 56.8439 26.5944C57.5902 25.8385 58.4794 25.2386 59.4599 24.8299C60.4405 24.4212 61.4924 24.2117 62.5547 24.2137C63.4761 24.2081 64.3922 24.3542 65.266 24.6463C66.0832 24.9237 66.852 25.3271 67.5447 25.8419L68.9197 23.6511L70.2911 21.4462C69.219 20.6894 68.0315 20.1111 66.7745 19.7336C65.4194 19.3279 64.0115 19.1252 62.5969 19.1323C60.7634 19.1148 58.9443 19.4602 57.2448 20.1486C55.6863 20.7887 54.2718 21.7345 53.0847 22.9302C50.2714 25.7434 49.4943 28.5567 48.9317 31.1659C48.369 33.7752 48.0385 36.1489 46.1396 38.0478C45.3869 38.8162 44.4925 39.4312 43.5056 39.8589C42.5225 40.2704 41.4664 40.4796 40.4005 40.4742C39.3114 40.4739 38.2331 40.2587 37.2272 39.8411C36.2213 39.4236 35.3076 38.8117 34.5384 38.0408C33.7742 37.2919 33.1654 36.3994 32.7472 35.4145C32.3289 34.4296 32.1094 33.3717 32.1014 32.3017C32.11 31.2418 32.3281 30.194 32.7434 29.2187C33.1585 28.2434 33.7627 27.3599 34.5209 26.619C36.0776 25.0632 38.1821 24.1795 40.383 24.1575C41.2913 24.17 42.193 24.3157 43.059 24.59C43.8676 24.846 44.6264 25.2385 45.3026 25.7505L46.7092 23.5632L48.1159 21.3724C47.0444 20.6227 45.8561 20.0558 44.5993 19.695C43.2332 19.3104 41.8196 19.121 40.4005 19.1323C38.2238 19.125 36.0776 19.6438 34.1446 20.6444C32.3073 21.5932 30.7168 22.9574 29.4992 24.6287C29.0093 23.1618 28.0345 21.9054 26.7352 21.0664C25.2746 20.1238 23.5679 19.6344 21.8297 19.6598H10V44.979H23.0569C24.5672 45.0012 26.0583 44.6381 27.3893 43.924C28.5775 43.2761 29.5679 42.3186 30.2552 41.1529C31.4791 42.5075 32.9697 43.5945 34.6334 44.346C36.5265 45.182 38.5826 45.5842 40.6513 45.5235C42.72 45.4625 44.7489 44.9402 46.5897 43.9942C48.4548 43.0092 50.0555 41.5896 51.2561 39.8553C52.4347 41.592 54.0244 43.0103 55.8839 43.9837C57.8738 45.0156 60.0847 45.5478 62.3261 45.5345C64.0389 45.542 65.7353 45.2032 67.3137 44.5385C68.8922 43.8737 70.3199 42.8967 71.5114 41.6664C73.92 39.1598 75.2572 35.8132 75.2389 32.337C75.2389 31.9571 75.2214 31.5879 75.1897 31.2222C75.1581 30.8565 75.1264 30.4872 75.0736 30.1286Z\" fill=\"#B4BACC\"/></svg>\n```"
  }
]