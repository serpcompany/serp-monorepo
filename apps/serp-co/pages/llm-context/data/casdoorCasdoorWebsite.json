[
  {
    "owner": "casdoor",
    "repo": "casdoor-website",
    "content": "TITLE: Applying Kubernetes Deployment\nDESCRIPTION: This command deploys Casdoor to a Kubernetes cluster using the configuration defined in the `k8s.yaml` file. It applies the deployment and service definitions to create and manage the Casdoor instance.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/k8s.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"kubectl apply -f k8s.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Casdoor SDK Configuration in Go Backend\nDESCRIPTION: This snippet demonstrates how to initialize the Casdoor SDK configuration in a Go application. It sets up essential parameters including endpoint URL, client credentials, JWT public key, and organization details required for authentication with Casdoor.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/sdk.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar CasdoorEndpoint = \"https://door.casdoor.com\"\nvar ClientId = \"541738959670d221d59d\"\nvar ClientSecret = \"66863369a64a5863827cf949bab70ed560ba24bf\"\nvar CasdoorOrganization = \"casbin\"\nvar CasdoorApplication = \"app-casnode\"\n\n//go:embed token_jwt_key.pem\nvar JwtPublicKey string\n\nfunc init() {\n    auth.InitConfig(CasdoorEndpoint, ClientId, ClientSecret, JwtPublicKey, CasdoorOrganization, CasdoorApplication)\n}\n```\n\n----------------------------------------\n\nTITLE: Access Token Request for Resource Owner Password Credentials Grant - OAuth 2.0 - JSON\nDESCRIPTION: This code snippet illustrates the JSON format required to request an access token using the Resource Owner Password Credentials grant type, including grant_type, client_id, client_secret, username, and password.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/oauth.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"grant_type\": \"password\",\n    \"client_id\": ClientId,\n    \"client_secret\": ClientSecret,\n    \"username\": Username,\n    \"password\": Password,\n}\n```\n\n----------------------------------------\n\nTITLE: Handling User Sign-in with Casdoor\nDESCRIPTION: This Java code snippet defines a `Controller` endpoint `/api/signin` to handle the user sign-in process with Casdoor. It receives the `code` and `state` parameters from the Casdoor redirect, uses the `CasdoorAuthService` to verify the user's identity and obtain a JWT token. It then returns the token in the response. Requires `CasdoorAuthService` and logging setup.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-security/spring-security-filter.md#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n\"@RestController\npublic class UserController {\n\n    private static final Logger logger = LoggerFactory.getLogger(UserController.class);\n\n    private final CasdoorAuthService casdoorAuthService;\n        \n    // ...\n    \n    @PostMapping(\\\"/api/signin\\\")\n    public Result signin(@RequestParam(\\\"code\\\") String code, @RequestParam(\\\"state\\\") String state) {\n        try {\n            String token = casdoorAuthService.getOAuthToken(code, state);\n            return Result.success(token);\n        } catch (CasdoorAuthException exception) {\n            logger.error(\\\"casdoor auth exception\\\", exception);\n            return Result.failure(exception.getMessage());\n        }\n    }\n        \n    // ...\n}\"\n```\n\n----------------------------------------\n\nTITLE: Access Token Request for Client Credentials Grant - OAuth 2.0 - JSON\nDESCRIPTION: This snippet shows how to request an access token using the Client Credentials grant type, suitable for applications without a frontend. It includes the necessary parameters.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/oauth.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"grant_type\": \"client_credentials\",\n    \"client_id\": ClientId,\n    \"client_secret\": ClientSecret,\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Users for Authorization Code Grant - OAuth 2.0 - URL\nDESCRIPTION: This snippet shows how to redirect users to the Casdoor authorization endpoint to obtain an authorization code. It includes the necessary parameters such as client_id, redirect_uri, response_type, and scope.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/oauth.md#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://<CASDOOR_HOST>/login/oauth/authorize?\nclient_id=CLIENT_ID&\nredirect_uri=REDIRECT_URI&\nresponse_type=code&\nscope=openid&\nstate=STATE\n```\n\n----------------------------------------\n\nTITLE: Building and Running Casdoor Backend in Production Mode\nDESCRIPTION: These commands guide the user in building the Casdoor backend code into an executable and starting the backend service in a production environment.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/server-installation.mdx#2025-04-21_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\ngo build\n./casdoor\n```\n\nLANGUAGE: Bash\nCODE:\n```\ngo build\ncasdoor.exe\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Callback in Java (Spring Boot)\nDESCRIPTION: This Java method submits an OAuth callback that receives code and state from Casdoor. It uses the casdoor-SpringBoot-sdk to get an OAuth token and parse the token to extract user information. If the user does not exist in the system, it registers them. Dependencies include Casdoor SDK and relevant backend services. Inputs include an object with code and state properties, and the output is an HTTP response containing a generated token.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/RuoYi.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@PostMapping(\\\"login\\\")\\npublic R<?> callback(@RequestBody CodeBody code) {\\n    String token = casdoorAuthService.getOAuthToken(code.getCode(), code.getState());\\n    CasdoorUser casdoorUser = casdoorAuthService.parseJwtToken(token);\\n    if (casdoorUser.getName() != null) {\\n        String casdoorUserName = casdoorUser.getName();\\n        if (sysLoginService.getUserByCasdoorName(casdoorUserName) == null) {\\n            sysLoginService.casdoorRegister(casdoorUserName); // Add this user to the database if they don\\'t exist\\n        }\\n    }\\n    LoginUser userInfo = sysLoginService.casdoorLogin(casdoorUser.getName()); // Get the user\\'s information from the database\\n    return R.ok(tokenService.createToken(userInfo));\\n}\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Grant - OAuth 2.0 - POST Request\nDESCRIPTION: The code snippet demonstrates how to make a POST request to the Casdoor API for exchanging the authorization code for an access token. It specifies the required parameters including grant_type, client_id, client_secret, and code.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/oauth.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"grant_type\": \"authorization_code\",\n    \"client_id\": ClientId,\n    \"client_secret\": ClientSecret,\n    \"code\": Code,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Security for JWT Handling\nDESCRIPTION: This Java code snippet configures Spring Security to handle JWT tokens. It enables CORS, disables CSRF, sets session management to stateless, defines endpoint permissions, sets an authentication entry point for unauthorized requests, and adds a JWT token filter before the UsernamePasswordAuthenticationFilter. It requires a `JwtTokenFilter` to be defined.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-security/spring-security-filter.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n\"@EnableWebSecurity\npublic class SecurityConfig {\n\n    private final JwtTokenFilter jwtTokenFilter;\n\n    public SecurityConfig(JwtTokenFilter jwtTokenFilter) {\n        this.jwtTokenFilter = jwtTokenFilter;\n    }\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        // enable CORS and disable CSRF\n        http = http.cors(corsConfig -> corsConfig\n                .configurationSource(configurationSource())\n        ).csrf().disable();\n\n        // set session management to stateless\n        http = http\n                .sessionManagement()\n                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and();\n\n        // set permissions on endpoints\n        http.authorizeHttpRequests(authorize -> authorize\n                .mvcMatchers(\\\"/api/redirect-url\\\", \\\"/api/signin\\\").permitAll()\n                .mvcMatchers(\\\"/api/**\\\").authenticated()\n        );\n\n        // set unauthorized requests exception handler\n        http = http\n                .exceptionHandling()\n                .authenticationEntryPoint(\n                        (request, response, ex) -> ResponseUtils.fail(response, \\\"unauthorized\\\")\n                )\n                .and();\n\n        // add JWT token filter\n        http.addFilterBefore(\n                jwtTokenFilter,\n                UsernamePasswordAuthenticationFilter.class\n        );\n        return http.build();\n    }\n\n    // ...\n\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Token Filter\nDESCRIPTION: This Java code snippet implements a JWT token filter that intercepts requests and validates the JWT token from the `Authorization` header. It retrieves the token, parses it using `CasdoorAuthService`, creates a `UsernamePasswordAuthenticationToken`, and sets it in the Spring Security context. This allows the application to authenticate users based on the JWT token provided by Casdoor.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-security/spring-security-filter.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n\"@Component\npublic class JwtTokenFilter extends OncePerRequestFilter {\n\n    private final CasdoorAuthService casdoorAuthService;\n\n    public JwtTokenFilter(CasdoorAuthService casdoorAuthService) {\n        this.casdoorAuthService = casdoorAuthService;\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n                                    HttpServletResponse response,\n                                    FilterChain chain)\n            throws ServletException, IOException {\n        // get authorization header and validate\n        final String header = request.getHeader(HttpHeaders.AUTHORIZATION);\n        if (!StringUtils.hasText(header) || !header.startsWith(\\\"Bearer \\\")) {\n            chain.doFilter(request, response);\n            return;\n        }\n\n        // get jwt token and validate\n        final String token = header.split(\\\" \\\")[1].trim();\n\n        // get user identity and set it on the spring security context\n        UserDetails userDetails = null;\n        try {\n            CasdoorUser casdoorUser = casdoorAuthService.parseJwtToken(token);\n            userDetails = new CustomUserDetails(casdoorUser);\n        } catch (CasdoorAuthException exception) {\n            logger.error(\\\"casdoor auth exception\\\", exception);\n            chain.doFilter(request, response);\n            return;\n        }\n\n        UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(\n                userDetails,\n                null,\n                AuthorityUtils.createAuthorityList(\\\"ROLE_casdoor\\\")\n        );\n\n        authentication.setDetails(\n                new WebAuthenticationDetailsSource().buildDetails(request)\n        );\n\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n        chain.doFilter(request, response);\n    }\n\n}\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating API Requests with Access Token\nDESCRIPTION: These shell commands demonstrate how to authenticate API requests using an access token. Two methods are shown: using a GET parameter and using an HTTP Bearer token.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/public-api.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/page?access_token=<The access token>\n```\n\nLANGUAGE: shell\nCODE:\n```\nAuthorization: Bearer <The access token>\n```\n\n----------------------------------------\n\nTITLE: Logging in WeChat MiniProgram and Getting Access Token in Javascript\nDESCRIPTION: This code snippet demonstrates how to use the `wx.login` API in a WeChat MiniProgram to obtain a code, and then send this code to Casdoor to retrieve an access token. It makes a POST request to the Casdoor `/api/login/oauth/access_token` endpoint, including the code, client ID, and user information.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/javascript/wechat_miniprogram.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Login in mini program\nwx.login({\n  success: res => {\n    // This is the login code that needs to be sent to Casdoor\n    console.log(res.code)\n    \n    wx.request({\n      url: `${CASDOOR_HOSTNAME}/api/login/oauth/access_token`,\n      method: \"POST\",\n      data: {\n        \"tag\": \"wechat_miniprogram\", // Required\n        \"client_id\": \"6825f4f0af45554c8952\",\n        \"code\": res.code,\n        \"username\": this.data.userInfo.nickName, // Update user profile when you log in.\n        \"avatar\": this.data.userInfo.avatarUrl,\n      },\n      header:{\n        \"content-type\": \"application/x-www-form-urlencoded\",\n      },\n      success: res => {\n        console.log(res)\n        this.globalData.accessToken = res.data.access_token // Get Casdoor's access token\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Configuration for Casdoor\nDESCRIPTION: This snippet initializes the configuration necessary for connecting to the Casdoor server. It includes parameters such as endpoint, client ID, and client secret, which are essential for authentication.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-boot.mdx#2025-04-21_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ncasdoor.endpoint = http://localhost:8000\ncasdoor.clientId = <client-id>\ncasdoor.clientSecret = <client-secret>\ncasdoor.certificate = <certificate>\ncasdoor.organizationName = built-in\ncasdoor.applicationName = app-built-in\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Callback Component in React\nDESCRIPTION: A React component that handles the authentication callback, processes the login, and displays appropriate messages or errors.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/sdk.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport {Button, Result, Spin} from \"antd\";\nimport {withRouter} from \"react-router-dom\";\nimport * as Setting from \"./Setting\";\n\nclass AuthCallback extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      classes: props,\n      msg: null,\n    };\n  }\n\n  componentWillMount() {\n    this.login();\n  }\n\n  login() {\n    Setting.signin().then((res) => {\n      if (res.status === \"ok\") {\n        Setting.showMessage(\"success\", `Logged in successfully`);\n        Setting.goToLink(\"/\");\n      } else {\n        this.setState({\n          msg: res.msg,\n        });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div style={{textAlign: \"center\"}}>\n        {this.state.msg === null ? (\n          <Spin\n            size=\"large\"\n            tip=\"Signing in...\"\n            style={{paddingTop: \"10%\"}}\n          />\n        ) : (\n          <div style={{display: \"inline\"}}>\n            <Result\n              status=\"error\"\n              title=\"Login Error\"\n              subTitle={this.state.msg}\n              extra={[\n                <Button type=\"primary\" key=\"details\">\n                  Details\n                </Button>,\n                <Button key=\"help\">Help</Button>,\n              ]}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(AuthCallback);\n```\n\n----------------------------------------\n\nTITLE: Obtaining OAuth Token in Go using Casdoor SDK\nDESCRIPTION: This Go code snippet demonstrates how to obtain an OAuth token using the Casdoor SDK. It handles the signin process, retrieves the token, parses it, and sets session claims.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/public-api.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *ApiController) Signin() {\n    code := c.Input().Get(\"code\")\n    state := c.Input().Get(\"state\")\n\n    token, err := casdoorsdk.GetOAuthToken(code, state)\n    if err != nil {\n        c.ResponseError(err.Error())\n        return\n    }\n\n    claims, err := casdoorsdk.ParseJwtToken(token.AccessToken)\n    if err != nil {\n        c.ResponseError(err.Error())\n        return\n    }\n\n    if !claims.IsAdmin {\n        claims.Type = \"chat-user\"\n    }\n\n    err = c.addInitialChat(&claims.User)\n    if err != nil {\n        c.ResponseError(err.Error())\n        return\n    }\n\n    claims.AccessToken = token.AccessToken\n    c.SetSessionClaims(claims)\n\n    c.ResponseOk(claims)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Casdoor SDK APIs for Authentication\nDESCRIPTION: This code demonstrates how to use the Casdoor React Native SDK APIs for authentication. It outlines the functions to get the sign-in URL, retrieve the access token after redirection, and decode the JWT token to obtain user information, allowing for a simplified authentication process.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/mobile-sdks/react-native-app.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"\n// get the signin url\ngetSigninUrl()\n\n// get Access Token\ngetAccessToken(redirectUrl); // http://localhost:5000/callback?code=b75bc5c5ac65ffa516e5&state=gjmfdgqf498\n\n// decode jwt token to get user info\nJwtDecode(jwtToken) \n\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Casdoor React Native SDK with Configuration\nDESCRIPTION: This code snippet initializes the Casdoor React Native SDK with the necessary configuration parameters. It imports the SDK and creates an instance with the provided server URL, client ID, application name, organization name, redirect path, and sign-in path. The configuration is then used to create a new instance of the SDK.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/mobile-sdks/react-native-app.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"import SDK from 'casdoor-react-native-sdk'\n\nconst sdkConfig = {\n  serverUrl: 'https://door.casdoor.com',\n  clientId: 'b800a86702dd4d29ec4d',\n  appName: 'app-example',\n  organizationName: 'casbin',\n  redirectPath: 'http://localhost:5000/callback',\n  signinPath: '/api/signin',\n};\nconst sdk = new SDK(sdkConfig)\"\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Pod Status\nDESCRIPTION: This command retrieves the status of the pods in the Kubernetes cluster, allowing verification of the Casdoor deployment. It provides information about the running state and any potential issues with the deployed pods.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/k8s.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"kubectl get pods\"\n```\n\n----------------------------------------\n\nTITLE: Using Access Token to Access APIs - Overview\nDESCRIPTION: This section describes two methods to use the access token for API calls: passing the access token as a query parameter or as a Bearer token in the Authorization header.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/oauth.md#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nType 1: Query parameter\n\n`https://<CASDOOR_HOST>/api/userinfo?accessToken=<your_access_token>`\n\nType 2: HTTP Bearer token\n\n`https://<CASDOOR_HOST>/api/userinfo` with the header: \"Authorization: Bearer <your_access_token>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Authentication in Nginx\nDESCRIPTION: This Nginx configuration snippet sets up reverse proxy rules for user authentication using OAuth2 through Casdoor. It requires the `ngx_http_auth_request_module` module and includes specific proxy headers for user credentials and session management. Key parameters include backend services' IP and Casdoor parameters, ensuring secure cookie handling and request forwarding.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/C++/NginxCommunityVersion.md#2025-04-21_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 443 ssl http2;\n\n    include /path/to/ssl.conf;\n\n    # Add the following content\n    location ^~ /oauth2/ {\n        proxy_pass       http://127.0.0.1:65534; # Change this to the \"--http-address\" configured in step II.6\n\n        proxy_set_header Host                    $host;\n        proxy_set_header X-Real-IP               $remote_addr;\n        proxy_set_header X-Scheme                $scheme;\n\n        proxy_set_header X-Auth-Request-Redirect $request_uri;\n        # or, if you are handling multiple domains:\n        # proxy_set_header X-Auth-Request-Redirect $scheme://$host$request_uri;\n    }\n    location = /oauth2/auth {\n        proxy_pass       http://127.0.0.1:65534; # Change this to the \"--http-address\" configured in step II.6\n\n        proxy_set_header Host             $host;\n        proxy_set_header X-Real-IP        $remote_addr;\n        proxy_set_header X-Scheme         $scheme;\n        proxy_set_header Content-Length   \"\";\n        proxy_pass_request_body           off;\n    }\n    location ^~ / {\n        auth_request /oauth2/auth;\n        error_page 401 = /oauth2/sign_in;\n\n        auth_request_set $user   $upstream_http_x_auth_request_user; \n        auth_request_set $email  $upstream_http_x_auth_request_email; \n        proxy_set_header X-User  $user; # Pass the username of the user logged in to your backend service\n        proxy_set_header X-Email $email; # Pass the email of the user logged in to your backend service\n\n        auth_request_set $token  $upstream_http_x_auth_request_access_token;\n        proxy_set_header X-Access-Token $token; # Pass the user's login token to your backend service\n\n        # The following configurations are related to cookie validation for user login\n        auth_request_set $auth_cookie $upstream_http_set_cookie;\n        add_header Set-Cookie $auth_cookie;\n\n        auth_request_set $auth_cookie_name_upstream_1 $upstream_cookie_auth_cookie_name_1;\n\n        if ($auth_cookie ~* \"(; .*)\") {\n            set $auth_cookie_name_0 $auth_cookie;\n            set $auth_cookie_name_1 \"auth_cookie_name_1=$auth_cookie_name_upstream_1$1\";\n        }   \n\n        if ($auth_cookie_name_upstream_1) {\n            add_header Set-Cookie $auth_cookie_name_0;\n            add_header Set-Cookie $auth_cookie_name_1;\n        }\n        proxy_no_cache $cookie_session;\n\n        # Provide the web page to the user after successful validation\n\n        proxy_pass http://127.0.0.1:8080; # The address where your backend service runs\n        # Note: This is not the Casdoor deployment address or the Oauth2-Proxy running address, but the address where your backend service that needs login protection runs.\n\n        # Then add configurations to pass user IP, Connection request headers, etc., to your backend service, for example:\n        proxy_set_header X-Forwarded-For $remote_addr;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection upgrade;\n        proxy_set_header Accept-Encoding gzip;\n    }\n    access_log /path/to/access_log.log;\n    error_log /path/to/error_log.log;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure Web Security in Spring Boot with OIDC\nDESCRIPTION: This Java code snippet configures web security in a Spring Boot application using Spring Security and OIDC. It extends `WebSecurityConfigurerAdapter` and overrides the `configure(HttpSecurity http)` method to define authorization rules.  Specifically, it permits access to `/` and `/login**` without authentication, while requiring authentication for all other requests, and configures OAuth2 login.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-security/spring-security-oauth.mdx#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n @EnableWebSecurity\n    public class UiSecurityConfig extends WebSecurityConfigurerAdapter {\n\n        @Override\n        protected void configure(HttpSecurity http) throws Exception {\n            http.authorizeRequests()\n                .antMatchers(\"/\", \"/login**\")\n                .permitAll()\n                .anyRequest()\n                .authenticated()\n                .and()\n                .oauth2Login();\n\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Token and User Info Authentication Flow\nDESCRIPTION: Implementation of token request and user info retrieval using the auth code. Includes methods for exchanging the authorization code for an access token and using that token to fetch user information.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/desktop-sdks/dotnet-app.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<string?> RequestToken(string clientId, string clientSecret, string code)\n{\n    var body = new\n    {\n        grant_type = \"authorization_code\",\n        client_id = clientId,\n        client_secret = clientSecret,\n        code\n    };\n\n    var req = new RestRequest(_requestTokenUrl).AddJsonBody(body);\n    var token = await _client.PostAsync<TokenDto>(req);\n\n    return token?.AccessToken;\n}\n\npublic async Task<UserDto?> GetUserInfo(string token)\n{\n    var req = new RestRequest(_getUserInfoUrl).AddQueryParameter(\"accessToken\", token);\n\n    return await _client.GetAsync<UserDto>(req);\n}\n\n...\n\nvar token = await _casdoorApi.RequestToken(\n    CasdoorVariables.ClientId,\n    CasdoorVariables.ClientSecret,\n    authCode\n);\n\nvar user = await _casdoorApi.GetUserInfo(token);\n```\n\n----------------------------------------\n\nTITLE: Initializing Casdoor SDK in Vue 3\nDESCRIPTION: Configuration and initialization of the Casdoor SDK in a Vue 3 application. The code sets up the connection to the Casdoor server with required parameters like server URL, client ID, organization name, and application name.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/vue-sdk.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// in main.js\nimport Casdoor from 'casdoor-vue-sdk'\n\nconst config = {\n  serverUrl: \"http://localhost:8000\",\n  clientId: \"4262bea2b293539fe45e\",\n  organizationName: \"casbin\",\n  appName: \"app-casnode\",\n  redirectPath: \"/callback\",\n};\n\nconst app = createApp(App)\napp.use(Casdoor, config)\n```\n\n----------------------------------------\n\nTITLE: Defining Provider Structure in Go for Casdoor\nDESCRIPTION: Go struct definition for the Provider type in Casdoor, which represents third-party connectors for authentication, communication, and storage services. Fields include properties for OAuth, SAML, email, SMS, and storage configurations.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/core-concepts.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Provider struct {\n    Owner       string `xorm:\"varchar(100) notnull pk\" json:\"owner\"`\n    Name        string `xorm:\"varchar(100) notnull pk\" json:\"name\"`\n    CreatedTime string `xorm:\"varchar(100)\" json:\"createdTime\"`\n\n    DisplayName   string `xorm:\"varchar(100)\" json:\"displayName\"`\n    Category      string `xorm:\"varchar(100)\" json:\"category\"`\n    Type          string `xorm:\"varchar(100)\" json:\"type\"`\n    Method        string `xorm:\"varchar(100)\" json:\"method\"`\n    ClientId      string `xorm:\"varchar(100)\" json:\"clientId\"`\n    ClientSecret  string `xorm:\"varchar(100)\" json:\"clientSecret\"`\n    ClientId2     string `xorm:\"varchar(100)\" json:\"clientId2\"`\n    ClientSecret2 string `xorm:\"varchar(100)\" json:\"clientSecret2\"`\n\n    Host    string `xorm:\"varchar(100)\" json:\"host\"`\n    Port    int    `json:\"port\"`\n    Title   string `xorm:\"varchar(100)\" json:\"title\"`\n    Content string `xorm:\"varchar(1000)\" json:\"content\"`\n\n    RegionId     string `xorm:\"varchar(100)\" json:\"regionId\"`\n    SignName     string `xorm:\"varchar(100)\" json:\"signName\"`\n    TemplateCode string `xorm:\"varchar(100)\" json:\"templateCode\"`\n    AppId        string `xorm:\"varchar(100)\" json:\"appId\"`\n\n    Endpoint         string `xorm:\"varchar(1000)\" json:\"endpoint\"`\n    IntranetEndpoint string `xorm:\"varchar(100)\" json:\"intranetEndpoint\"`\n    Domain           string `xorm:\"varchar(100)\" json:\"domain\"`\n    Bucket           string `xorm:\"varchar(100)\" json:\"bucket\"`\n\n    Metadata               string `xorm:\"mediumtext\" json:\"metadata\"`\n    IdP                    string `xorm:\"mediumtext\" json:\"idP\"`\n    IssuerUrl              string `xorm:\"varchar(100)\" json:\"issuerUrl\"`\n    EnableSignAuthnRequest bool   `json:\"enableSignAuthnRequest\"`\n\n    ProviderUrl string `xorm:\"varchar(200)\" json:\"providerUrl\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Spring Security OAuth2 Client in YAML\nDESCRIPTION: This snippet demonstrates how to configure the Spring Security OAuth2 client in `application.yml` to connect to Casdoor.  It requires replacing placeholders such as `<Client ID>`, `<Client Secret>`, `<Scope>`, `<Redirect URL>`, and `CASDOOR_HOSTNAME` with your actual Casdoor application settings. The configuration includes client registration details and provider details for Casdoor.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-security/spring-security-oauth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nspring:\n  security:\n    oauth2:\n      client:\n        registration:\n          casdoor:\n            client-id: <Client ID>\n            client-secret: <Client Secret>\n            scope: <Scope>\n            authorization-grant-type: authorization_code\n            redirect-uri: <Redirect URL>\n        provider:\n          casdoor:\n            authorization-uri: http://CASDOOR_HOSTNAME:7001/login/oauth/authorize\n            token-uri: http://CASDOOR_HOSTNAME:8000/api/login/oauth/access_token\n            user-info-uri: http://CASDOOR_HOSTNAME:8000/api/get-account\n            user-name-attribute: name\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected Route Authentication\nDESCRIPTION: Middleware authentication function to verify user authentication status and protect specific routes.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/nextjs.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//protected route\nconst protectedRoutes = [\"/profile\"];\nconst casdoorUserCookie = req.cookies.get(\"casdoorUser\");\nconst isAuthenticated = casdoorUserCookie ? true : false;\n\n//Authentication Function\nif (!isAuthenticated && protectedRoutes.includes(req.nextUrl.pathname)) {\n  return NextResponse.redirect(new URL(\"/login\", req.url));\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Spring Security OAuth2 Client in Properties\nDESCRIPTION: This snippet demonstrates how to configure the Spring Security OAuth2 client in `application.properties` to connect to Casdoor. It requires replacing placeholders such as `<Client ID>`, `<Client Secret>`, `<Scope>`, `<Redirect URL>`, and `CASDOOR_HOSTNAME` with your actual Casdoor application settings. The configuration includes client registration details and provider details for Casdoor.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-security/spring-security-oauth.mdx#2025-04-21_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nspring.security.oauth2.client.registration.casdoor.client-id=<Client ID>\nspring.security.oauth2.client.registration.casdoor.client-secret=<Client Secret>\nspring.security.oauth2.client.registration.casdoor.scope=<Scope>\nspring.security.oauth2.client.registration.casdoor.authorization-grant-type=authorization_code\nspring.security.oauth2.client.registration.casdoor.redirect-uri=<Redirect URL>\n\nspring.security.oauth2.client.provider.casdoor.authorization-uri=http://CASDOOR_HOSTNAME:7001/login/oauth/authorize\nspring.security.oauth2.client.provider.casdoor.token-uri=http://CASDOOR_HOSTNAME:8000/api/login/oauth/access_token\nspring.security.oauth2.client.provider.casdoor.user-info-uri=http://CASDOOR_HOSTNAME:8000/api/get-account\nspring.security.oauth2.client.provider.casdoor.user-name-attribute=name\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes ConfigMap\nDESCRIPTION: Kubernetes ConfigMap definition for storing Casdoor initialization data.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/data-initialization.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: casdoor-init-data\ndata:\n  init_data.json:\n```\n\n----------------------------------------\n\nTITLE: Implementing Login and Signup in Vue Component\nDESCRIPTION: Example Vue component that implements login and signup functionality using the Casdoor SDK. The component provides methods to redirect users to the Casdoor signin and signup pages.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/vue-sdk.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n// in app.vue\n<script>\nexport default {\n  name: 'App',\n  methods: {\n    login() {\n      window.location.href = this.getSigninUrl();\n    },\n    signup() {\n      window.location.href = this.getSignupUrl();\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Casdoor SDK in Vue 2\nDESCRIPTION: Configuration and initialization of the Casdoor SDK in a Vue 2 application. This requires the Vue Composition API and includes the necessary setup code with configuration parameters for connecting to the Casdoor server.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/vue-sdk.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// in main.js\nimport Casdoor from 'casdoor-vue-sdk'\nimport VueCompositionAPI from '@vue/composition-api'\n\nconst config = {\n  serverUrl: \"http://localhost:8000\",\n  clientId: \"4262bea2b293539fe45e\",\n  organizationName: \"casbin\",\n  appName: \"app-casnode\",\n  redirectPath: \"/callback\",\n};\n\nVue.use(VueCompositionAPI)\nVue.use(Casdoor, config)\n\nnew Vue({\n  render: h => h(App),\n}).$mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Function in Java\nDESCRIPTION: This Java code defines a callback function to handle the Casdoor authentication process. It retrieves the OAuth token, parses the JWT token to get the Casdoor user information, and then either registers the user in the RuoYi-Cloud database if they don't exist or logs them in. The user's information is retrieved and a token is created.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/RuoYi.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n    @PostMapping(\"login\")\n    public R<?> callback(@RequestBody CodeBody code) {\n        // Define a CodeBody entity with code and state\n        String token = casdoorAuthService.getOAuthToken(code.getCode(), code.getState());\n        CasdoorUser casdoorUser = casdoorAuthService.parseJwtToken(token);\n        if (casdoorUser.getName() != null) {\n            String casdoorUserName = casdoorUser.getName();\n            if (sysLoginService.getUserByCasdoorName(casdoorUserName) == null) {\n                // If the user is not in the RuoYi-Cloud database but exists in Casdoor, create the user in the database\n                sysLoginService.casdoorRegister(casdoorUserName);\n            }\n        }\n        LoginUser userInfo = sysLoginService.casdoorLogin(casdoorUser.getName());\n        // Get the user's information from the database\n        return R.ok(tokenService.createToken(userInfo));\n    }\n```\n\n----------------------------------------\n\nTITLE: Response from Access Token Endpoint - OAuth 2.0 - JSON\nDESCRIPTION: This snippet outlines the expected JSON response after a successful token exchange, containing the access_token, id_token, refresh_token, and token type.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/oauth.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"access_token\": \"eyJhb...\",\n    \"id_token\": \"eyJhb...\",\n    \"refresh_token\": \"eyJhb...\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 10080,\n    \"scope\": \"openid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring APISIX Route with Casdoor Plugin\nDESCRIPTION: This code snippet demonstrates how to configure an APISIX route with the `authz-casdoor` plugin. The plugin enforces authentication for requests to the specified route, using Casdoor as the authentication provider. The configuration includes setting the Casdoor endpoint, callback URL, client ID, and client secret.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/lua/apisix.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"http://127.0.0.1:9180/apisix/admin/routes/1\" -H \"X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\" -X PUT -d '\n{\n  \"methods\": [\"GET\"],\n  \"uri\": \"/anything/*\",\n  \"plugins\": {\n    \"authz-casdoor\": {\n        \"endpoint_addr\":\"http://localhost:8000\",\n        \"callback_url\":\"http://localhost:9080/anything/callback\",\n        \"client_id\":\"7ceb9b7fda4a9061ec1c\",\n        \"client_secret\":\"3416238e1edf915eac08b8fe345b2b95cdba7e04\"\n    }\n  },\n  \"upstream\": {\n    \"type\": \"roundrobin\",\n    \"nodes\": {\n      \"httpbin.org:80\": 1\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Verifying Access Token in Go\nDESCRIPTION: Go code snippet demonstrating how to exchange the authorization code for an access token and verify it using Casdoor's backend SDK.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/sdk.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// get code and state from the GET parameters of the redirected URL\ncode := c.Input().Get(\"code\")\nstate := c.Input().Get(\"state\")\n\n// exchange the access token with code and state\ntoken, err := auth.GetOAuthToken(code, state)\nif err != nil {\n    panic(err)\n}\n\n// verify the access token\nclaims, err := auth.ParseJwtToken(token.AccessToken)\nif err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding casdoorLogin Method to SysLoginService\nDESCRIPTION: This Java code adds the `casdoorLogin` method to the `SysLoginService`. This method retrieves the user's information from the database using the provided username and performs checks for user status (deleted or disabled) before logging the user in.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/RuoYi.md#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n    public LoginUser casdoorLogin(String username) {\n        R<LoginUser> userResult = remoteUserService.getUserInfo(username, SecurityConstants.INNER);\n        // Execute the user\n        if (R.FAIL == userResult.getCode()) {\n            throw new ServiceException(userResult.getMsg());\n        }\n\n        if (StringUtils.isNull(userResult) || StringUtils.isNull(userResult.getData())) {\n            recordLogService.recordLogininfor(username, Constants.LOGIN_FAIL, \"This user does not exist\");\n            throw new ServiceException(\"User \" + username + \" does not exist\");\n        }\n        LoginUser userInfo = userResult.getData();\n        SysUser user = userResult.getData().getSysUser();\n        if (UserStatus.DELETED.getCode().equals(user.getDelFlag())) {\n            recordLogService.recordLogininfor(username, Constants.LOGIN_FAIL, \"Sorry, your account has been deleted\");\n            throw new ServiceException(\"Sorry, your account \" + username + \" has been deleted\");\n        }\n        if (UserStatus.DISABLE.getCode().equals(user.getStatus())) {\n            recordLogService.recordLogininfor(username, Constants.LOGIN_FAIL, \"Your account is disabled. Please contact the administrator\");\n            throw new ServiceException(\"Sorry, your account \" + username + \" is disabled\");\n        }\n        recordLogService.recordLogininfor(username, Constants.LOGIN_SUCCESS, \"Login successful\");\n        return userInfo;\n    }\n```\n\n----------------------------------------\n\nTITLE: Using CasdoorAuthService for Login Redirection\nDESCRIPTION: This Java snippet shows how to use the CasdoorAuthService to redirect users to the Casdoor login page, utilizing the target URL for Redirection after authentication.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-cloud-gateway.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@RequestMapping(\"login\")\npublic Mono<String> login() {\n    return Mono.just(\"redirect:\" + casdoorAuthService.getSigninUrl(\"http://localhost:9090/callback\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Callback and Token Parsing\nDESCRIPTION: This Java snippet demonstrates how to handle the OAuth callback, retrieve the authorization code, exchange it for an access token, and store the user's information in the session after successful authentication.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-cloud-gateway.md#2025-04-21_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@RequestMapping(\"callback\")\npublic Mono<String> callback(String code, String state, ServerWebExchange exchange) {\n    String token = \"\";\n    CasdoorUser user = null;\n    try {\n        token = casdoorAuthService.getOAuthToken(code, state);\n        user = casdoorAuthService.parseJwtToken(token);\n    } catch(CasdoorAuthException e) {\n        e.printStackTrace();\n    }\n    CasdoorUser finalUser = user;\n    return exchange.getSession().flatMap(session -> {\n        session.getAttributes().put(\"casdoorUser\", finalUser);\n        return Mono.just(\"redirect:/\");\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Update User Profile in Javascript\nDESCRIPTION: This code snippet shows how to retrieve user profile information using `wx.getUserProfile` in a WeChat MiniProgram and update the user's information in Casdoor after obtaining the access token. It makes a POST request to the Casdoor `/api/update-user` endpoint, including the user's display name and avatar URI. It requires the Casdoor access token for authorization.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/javascript/wechat_miniprogram.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwx.getUserProfile({\n  desc: 'share your info to Casdoor', \n  success: (res) => {\n    this.setData({\n      userInfo: res.userInfo,\n      hasUserInfo: true\n    })\n    console.log(app.globalData.accessToken)\n    wx.request({\n      url: `${CASDOOR_HOSTNAME}/api/update-user`, // Casdoor URL\n      method: \"POST\",\n      data: {\n        \"owner\": \"test\",\n        \"name\": \"wechat-oGk3T5tIiMFo3SazCO75f0HEiE7Q\",\n        \"displayName\": this.data.userInfo.nickName,\n        \"avatar\": this.data.userInfo.avatarUrl\n      },\n      header: {\n        \"Authorization\": \"Bearer \" + app.globalData.accessToken, // Bearer token\n        \"content-type\": \"application/json\"\n      },\n      success: (res) => {\n        console.log(res)\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO OpenID Connect Settings\nDESCRIPTION: Command to configure OpenID Connect settings in MinIO to integrate with Casdoor, including config URL, client credentials, and claim name.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/go/minio.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmc admin config set myminio identity_openid config_url=\"http://CASDOOR_HOSTNAME/.well-known/openid-configuration\" client_id=<client id> client_secret=<client secret> claim_name=\"tag\"\n```\n\n----------------------------------------\n\nTITLE: Refresh Access Token Request - OAuth 2.0 - JSON\nDESCRIPTION: This snippet demonstrates how to use a refresh token to obtain a new access token. It outlines the required parameters, including grant_type, refresh_token, and client credentials.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/oauth.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"grant_type\": \"refresh_token\",\n    \"refresh_token\": REFRESH_TOKEN,\n    \"scope\": SCOPE,\n    \"client_id\": ClientId,\n    \"client_secret\": ClientSecret,\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Casdoor Authentication Token\nDESCRIPTION: Code to exchange authentication token and store user information in cookies after successful authentication.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/nextjs.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCasdoorSDK.exchangeForAccessToken()\n  .then((res) => {\n    if (res && res.access_token) {\n      //Get Token\n      return CasdoorSDK.getUserInfo(res.access_token);\n    }\n  })\n  .then((res) => {\n    // Storage Token\n    Cookies.set(\"casdoorUser\", JSON.stringify(res));\n  });\n```\n\n----------------------------------------\n\nTITLE: Opening Casdoor Login Window in dotNET\nDESCRIPTION: Code to initialize and display the Casdoor login window. Sets up an event handler for receiving the authentication code after successful login.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/desktop-sdks/dotnet-app.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar login = new Login();\n// Triggered when login succeeds, you will receive an auth code in the event handler\nlogin.CodeReceived += Login_CodeReceived;\nlogin.ShowDialog();\n```\n\n----------------------------------------\n\nTITLE: Enforce Permission Check via Casdoor API (curl)\nDESCRIPTION: This snippet demonstrates how to use the `/api/enforce` endpoint to check if a user has permission to perform an action on a resource. It requires the application client ID and secret for Basic Authentication and sends a JSON payload with the subject, object, and action.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/permission/exposed-casbin-apis.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location --request POST 'http://localhost:8000/api/enforce?permissionId=example-org/example-permission' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Basic <Your_Application_ClientId> <Your_Application_ClientSecret>' \\\n--data-raw '[\"example-org/example-user\", \"example-resource\", \"example-action\"]'\n```\n\n----------------------------------------\n\nTITLE: Getting Token and Parsing JWT\nDESCRIPTION: This Java code snippet retrieves the OAuth token after a successful login and parses the JWT token to get user information. It shows how to handle exceptions and manage user sessions.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-boot.mdx#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@RequestMapping(\"login\")\npublic String login(String code, String state, HttpServletRequest request) {\n    String token = \"\";\n    CasdoorUser user = null;\n    try {\n        token = casdoorAuthService.getOAuthToken(code, state);\n        user = casdoorAuthService.parseJwtToken(token);\n    } catch (CasdoorAuthException e) {\n        e.printStackTrace();\n    }\n    HttpSession session = request.getSession();\n    session.setAttribute(\"casdoorUser\", user);\n    return \"redirect:/\";\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Casdoor SDK in JavaScript\nDESCRIPTION: This snippet details the initialization of the Casdoor SDK with necessary configuration parameters including server URL and application credentials. It's essential for establishing the connection between the application and the Casdoor backend.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/nuxt.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sdkConfig = {\n  serverUrl: \"https://door.casdoor.com\",\n  clientId: \"294b09fbc17f95daf2fe\",\n  clientSecret: \"dd8982f7046ccba1bbd7851d5c1ece4e52bf039d\",\n  organizationName: \"casbin\",\n  appName: \"app-vue-python-example\",\n  redirectPath: \"/callback\",\n};\n\n```\n\n----------------------------------------\n\nTITLE: Processing OAuth Token and User Info in Qt Desktop App\nDESCRIPTION: This snippet shows how to obtain and parse the OAuth token from Casdoor using the authorization code. It uses the Casdoor SDK to get the token and parse it with a JWT library.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/desktop-sdks/qt-app.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// Get the token and parse it with the JWT library\nstd::string token = m_casdoor->GetOAuthToken(code.toStdString());\nauto decoded = m_casdoor->ParseJwtToken(token);\n```\n\n----------------------------------------\n\nTITLE: Handling Casdoor Authentication in Vue (JavaScript)\nDESCRIPTION: This JavaScript function retrieves OAuth code and state from the URL after Casdoor authentication and processes them for login. It requires a front-end SDK like Vue-SDK. It checks for non-null values of code and state, then calls the login handler function. This setup assumes the Casdoor configuration redirects back to the app with appropriate query parameters.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/RuoYi.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreated() {\\n    let url = window.document.location.href; // get URL\\n    let u = new URL(url);\\n    this.loginForm.code = u.searchParams.get('code'); // get code and state\\n    this.loginForm.state = u.searchParams.get('state');\\n    if (this.loginForm.code != null && this.loginForm.state != null) { // if code and state are not null, execute handleLogin\\n      this.handleLogin();\\n    }  \\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Security with Casdoor OIDC settings\nDESCRIPTION: This YAML snippet configures Spring Security to integrate with Casdoor using OIDC. It defines the Casdoor endpoint, client ID, client secret, certificate, organization name, application name, and redirect URL.  Replace the placeholder values with your actual Casdoor instance settings.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-security/spring-security-filter.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"server:\n  port: 8080\ncasdoor:\n  endpoint: http://CASDOOR_HOSTNAME:8000\n  client-id: <Client ID>\n  client-secret: <Client Secret>\n  certificate: <Certificate>\n  organization-name: <Organization Name>\n  application-name: <Application Name>\n  redirect-url: http://FRONTEND_HOSTNAME/callback\"\n```\n\n----------------------------------------\n\nTITLE: Defining Casdoor Utility Functions in JavaScript\nDESCRIPTION: A set of utility functions for interacting with the Casdoor SDK, including initialization, URL generation, and sign-in functionality.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/sdk.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Sdk from \"casdoor-js-sdk\";\n\nexport function initCasdoorSdk(config) {\n  CasdoorSdk = new Sdk(config);\n}\n\nexport function getSignupUrl() {\n  return CasdoorSdk.getSignupUrl();\n}\n\nexport function getSigninUrl() {\n  return CasdoorSdk.getSigninUrl();\n}\n\nexport function getUserProfileUrl(userName, account) {\n  return CasdoorSdk.getUserProfileUrl(userName, account);\n}\n\nexport function getMyProfileUrl(account) {\n  return CasdoorSdk.getMyProfileUrl(account);\n}\n\nexport function getMyResourcesUrl(account) {\n  return CasdoorSdk.getMyProfileUrl(account).replace(\"/account?\", \"/resources?\");\n}\n\nexport function signin() {\n  return CasdoorSdk.signin(ServerUrl);\n}\n\nexport function showMessage(type, text) {\n  if (type === \"\") {\n    return;\n  } else if (type === \"success\") {\n    message.success(text);\n  } else if (type === \"error\") {\n    message.error(text);\n  }\n}\n\nexport function goToLink(link) {\n  window.location.href = link;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware Authentication Function in Nuxt.js\nDESCRIPTION: This middleware function checks if the user is authenticated by verifying the presence of a cookie. If the user is not authenticated, they are redirected to the login page when trying to access protected routes.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/nuxt.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Cookies from \"js-cookie\";\n\nconst protectedRoutes = [\"/profile\"];\n\nexport default function ({route, redirect}) {\n  const casdoorUserCookie = Cookies.get('casdoorUser');\n  const isAuthenticated = !!casdoorUserCookie;\n\n  if (!isAuthenticated && protectedRoutes.includes(route.path)) {\n    redirect('/login');\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Authenticating API Requests with Client ID and Secret\nDESCRIPTION: These shell commands show how to authenticate API requests using a client ID and secret. Two methods are demonstrated: using GET parameters and using HTTP Basic Authentication.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/public-api.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n/page?clientId=<The client ID>&clientSecret=<the client secret>\n```\n\nLANGUAGE: shell\nCODE:\n```\nAuthorization: Basic <The Base64 encoding of client ID and client secret joined by a single colon \":\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana OAuth with Casdoor\nDESCRIPTION: Configuration for OAuth authentication in Grafana's defaults.ini file, enabling login via Casdoor with client credentials and authentication endpoints\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/go/grafana.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[auth.generic_oauth]\nname = Casdoor\nicon = signin\nenabled = true\nallow_sign_up = true\nclient_id = <client ID from previous step>\nclient_secret = <client secret from previous step>\nauth_url = <Casdoor endpoint>/login/oauth/authorize\ntoken_url = <Casdoor endpoint>/api/login/oauth/access_token\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Protocol in Electron App\nDESCRIPTION: This snippet sets a custom protocol for the Electron app which allows it to handle specific URL schemes. It checks whether the application is the default and sets the protocol client accordingly. This is essential for receiving login information from the browser.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/desktop-sdks/electron-app.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst protocol = \"casdoor\";\n\nif (process.defaultApp) {\n  if (process.argv.length >= 2) {\n    app.setAsDefaultProtocolClient(protocol, process.execPath, [\n      path.resolve(process.argv[1]),\n    ]);\n  }\n} else {\n  app.setAsDefaultProtocolClient(protocol);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Payload Structure in JSON\nDESCRIPTION: Sample JSON payload structure that Casdoor sends to configured webhook endpoints when a user login event occurs. Contains event type, timestamp, and user details.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/webhooks/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"login\",\n  \"timestamp\": 1709452800,\n  \"user\": {\n    \"id\": \"12345\",\n    \"username\": \"johndoe\",\n    \"email\": \"johndoe@example.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CAS 1.0 Validation Filter\nDESCRIPTION: XML configuration for setting up CAS 1.0 validation filter in web.xml using the Cas10TicketValidationFilter class.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/cas.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<filter-name>CAS Validation Filter</filter-name>\n<filter-class>org.jasig.cas.client.validation.Cas10TicketValidationFilter</filter-class>\n```\n\n----------------------------------------\n\nTITLE: Initializing Casdoor SDK in JavaScript\nDESCRIPTION: Configuration and initialization of the Casdoor SDK in the main entry point of a frontend application.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/sdk.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  serverUrl: \"https://door.casdoor.com\",\n  clientId: \"014ae4bd048734ca2dea\",\n  organizationName: \"casbin\",\n  appName: \"app-casnode\",\n  redirectPath: \"/callback\",\n};\n\nxxx.initCasdoorSdk(config);\n```\n\n----------------------------------------\n\nTITLE: Redirecting to the Login Page\nDESCRIPTION: This Java snippet handles the user redirection to the Casdoor login page. It utilizes the CasdoorAuthService to retrieve the sign-in URL dynamically based on the application's callback URL.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-boot.mdx#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Resource\nprivate CasdoorAuthService casdoorAuthService;\n\n@RequestMapping(\"toLogin\")\npublic String toLogin() {\n    return \"redirect:\" + casdoorAuthService.getSigninUrl(\"http://localhost:8080/login\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Secret in Hasura Docker Compose\nDESCRIPTION: YAML configuration for setting up the JWT secret in Hasura to work with Casdoor. This configuration maps JWT claims to Hasura roles and specifies the JWK URL from Casdoor.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/Haskell/Hasura.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nHASURA_GRAPHQL_JWT_SECRET: '{\"claims_map\": {\n      \"x-hasura-allowed-roles\": {\"path\": \"$.roles\"},\n      \"x-hasura-default-role\": {\"path\": \"$.roles[0]\"},\n      \"x-hasura-user-id\": {\"path\": \"$.id\"}\n    },\"jwk_url\":\"<Casdoor endpoint>/.well-known/jwks\"}'\n```\n\n----------------------------------------\n\nTITLE: Configure GitLab OIDC Provider (Ruby)\nDESCRIPTION: Configures GitLab to use Casdoor as an OpenID Connect provider. It defines the provider settings including the issuer URL, client ID, client secret, and scopes, all of which are essential for authentication.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/ruby/gitlab.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngitlab_rails['omniauth_providers'] = [\n    {\n        name: \"openid_connect\",\n        label: \"Casdoor\", # optional label for the login button, defaults to \"Openid Connect\"\n        args: {\n            name: \"openid_connect\",\n            scope: [\"openid\", \"profile\", \"email\"],\n            response_type: \"code\",\n            issuer:  \"<CASDOOR_HOSTNAME>\",\n            client_auth_method: \"query\",\n            discovery: true,\n            uid_field: \"preferred_username\",\n            client_options: {\n                identifier: \"<YOUR CLIENT ID>\",\n                secret: \"<YOUR CLIENT SECRET>\",\n                redirect_uri: \"<GITLAB_HOSTNAME>/users/auth/openid_connect/callback\"\n            }\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Listening to Open Application Event\nDESCRIPTION: This snippet listens for application events after a user logs in. It checks if the application is already open and, if so, brings it to the front. It processes the incoming URL for authorization codes to facilitate the login process.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/desktop-sdks/electron-app.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst gotTheLock = app.requestSingleInstanceLock();\nconst ProtocolRegExp = new RegExp(`^${protocol}://`);\n\nif (!gotTheLock) {\n  app.quit();\n} else {\n  app.on(\"second-instance\", (event, commandLine, workingDirectory) => {\n    if (mainWindow) {\n      if (mainWindow.isMinimized()) mainWindow.restore();\n      mainWindow.focus();\n      commandLine.forEach((str) => {\n        if (ProtocolRegExp.test(str)) {\n          const params = url.parse(str, true).query;\n          if (params && params.code) {\n            store.set(\"casdoor_code\", params.code);\n            mainWindow.webContents.send(\"receiveCode\", params.code);\n          }\n        }\n      });\n    }\n  });\n  app.whenReady().then(createWindow);\n\n  app.on(\"open-url\", (event, openUrl) => {\n    const isProtocol = ProtocolRegExp.test(openUrl);\n    if (isProtocol) {\n      const params = url.parse(openUrl, true).query;\n      if (params && params.code) {\n        store.set(\"casdoor_code\", params.code);\n        mainWindow.webContents.send(\"receiveCode\", params.code);\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Token Introspection Request - OAuth 2.0 - HTTP\nDESCRIPTION: This snippet details how to perform a token introspection request to validate an access token. It shows the necessary HTTP headers and request body format.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/oauth.md#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/login/oauth/introspect HTTP/1.1\nHost: CASDOOR_HOST\nAccept: application/json\nContent-Type: application/x-www-form-urlencoded\nAuthorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=\n\ntoken=ACCESS_TOKEN&token_type_hint=access_token\n```\n\n----------------------------------------\n\nTITLE: Starting Casdoor Backend in Development Mode\nDESCRIPTION: This snippet provides the command to run the backend of the Casdoor application in development mode, defaulting to port 8000.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/server-installation.mdx#2025-04-21_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Configuring Casdoor Parameters in YAML File\nDESCRIPTION: This snippet provides a YAML configuration for setting up Casdoor parameters, allowing for a structured definition of necessary values such as endpoint, client credentials, and application name.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-cloud-gateway.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncasdoor:\n  endpoint: http://localhost:8000\n  client-id: <client-id>\n  client-secret: <client-secret>\n  certificate: <certificate>\n  organization-name: built-in\n  application-name: app-built-in\n```\n\n----------------------------------------\n\nTITLE: Configuring Casdoor Client in .NET MAUI App\nDESCRIPTION: Adds the CasdoorClient as a singleton in the services, configuring it with the necessary parameters for authentication.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/desktop-sdks/maui-app.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddSingleton(new CasdoorClient(new()\n{\n    Domain = \"<your domain>\",\n    ClientId = \"<your client>\",\n    Scope = \"openid profile email\",\n\n#if WINDOWS\n    RedirectUri = \"http://localhost/callback\"\n#else\n    RedirectUri = \"casdoor://callback\"\n#endif\n}));\n```\n\n----------------------------------------\n\nTITLE: Controller for Protected Resource\nDESCRIPTION: This Java code snippet defines a controller `FooClientController` that handles requests to the `/foos` endpoint.  It creates a list of `FooModel` objects and adds them to the model, which is then rendered by the `foos` Thymeleaf template.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-security/spring-security-oauth.mdx#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n @Controller\n    public class FooClientController {\n        @GetMapping(\"/foos\")\n        public String getFoos(Model model) {\n            List<FooModel> foos = new ArrayList<>();\n            foos.add(new FooModel(1L, \"a\"));\n            foos.add(new FooModel(2L, \"b\"));\n            foos.add(new FooModel(3L, \"c\"));\n            model.addAttribute(\"foos\", foos);\n            return \"foos\";\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: API Comment Structure with @Tag Label in Go\nDESCRIPTION: Example of how to properly format API comments with the @Tag label for swagger generation. Shows required fields including Title, Tag, Description, Parameters, Success response, and router definition.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/developer-guide/swagger.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// @Title Login\n// @Tag Login API\n// @Description login\n// @Param   oAuthParams     query    string  true        \"oAuth parameters\"\n// @Param   body    body   RequestForm  true        \"Login information\"\n// @Success 200 {object} controllers.api_controller.Response The Response object\n// @router /login [post]\nfunc (c *ApiController) Login() {\n```\n\n----------------------------------------\n\nTITLE: Parsing Code and Fetching User Info\nDESCRIPTION: This function sends a POST request to get an access token using an authorization code, and then retrieves user information using that token. It integrates with the IPC for communication between main and renderer processes.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/desktop-sdks/electron-app.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getUserInfo(clientId, clientSecret, code) {\n  const { data } = await axios({\n    method: \"post\",\n    url: authCodeUrl,\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    data: JSON.stringify({\n      grant_type: \"authorization_code\",\n      client_id: clientId,\n      client_secret: clientSecret,\n      code: code,\n    }),\n  });\n  const resp = await axios({\n    method: \"get\",\n    url: `${getUserInfoUrl}?accessToken=${data.access_token}`,\n  });\n  return resp.data;\n}\n\nipcMain.handle(\"getUserInfo\", async (event, clientId, clientSecret) => {\n  const code = store.get(\"casdoor_code\");\n  const userInfo = await getUserInfo(clientId, clientSecret, code);\n  store.set(\"userInfo\", userInfo);\n  return userInfo;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Authentication Middleware\nDESCRIPTION: Basic middleware implementation to protect specific routes by redirecting unauthenticated users to the login page.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/nextjs.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//define which paths Middleware will run on\nconst protectedRoutes = [\"/profile\"];\n\nexport default function middleware(req) {\n  if (protectedRoutes.includes(req.nextUrl.pathname)) {\n    //redirect the incoming request to a different URL\n    return NextResponse.redirect(new URL(\"/login\", req.url));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Casdoor Parameters in Properties File\nDESCRIPTION: This snippet shows how to set Casdoor configuration parameters such as endpoint, clientId, and clientSecret in a Java properties file for initializing the OAuth2 plugin in Spring Cloud Gateway.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-cloud-gateway.md#2025-04-21_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ncasdoor.endpoint=http://localhost:8000\ncasdoor.clientId=<client-id>\ncasdoor.clientSecret=<client-secret>\ncasdoor.certificate=<certificate>\ncasdoor.organizationName=built-in\ncasdoor.applicationName=app-built-in\n```\n\n----------------------------------------\n\nTITLE: Importing casdoor-spring-boot-starter - Maven\nDESCRIPTION: This Maven dependency imports the Casdoor Spring Boot starter, which is necessary for using Casdoor in a Spring Boot application. It allows the application to leverage Casdoor's authentication features.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-boot.mdx#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- https://mvnrepository.com/artifact/org.casbin/casdoor-spring-boot-starter -->\n<dependency>\n    <groupId>org.casbin</groupId>\n    <artifactId>casdoor-spring-boot-starter</artifactId>\n    <version>1.x.y</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Importing casdoor-spring-boot-starter - Gradle\nDESCRIPTION: This Gradle dependency allows the integration of the Casdoor Spring Boot starter in a Gradle-managed project for authentication purposes.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-boot.mdx#2025-04-21_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n// https://mvnrepository.com/artifact/org.casbin/casdoor-spring-boot-starter\nimplementation group: 'org.casbin', name: 'casdoor-spring-boot-starter', version: '1.x.y'\n```\n\n----------------------------------------\n\nTITLE: Run Casdoor backend with Go\nDESCRIPTION: This code snippet demonstrates how to run the Casdoor backend program using Go. The first command directly executes the `main.go` file. The second command builds an executable and then runs it.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/nginx.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Configuring DolphinScheduler SSO with Casdoor\nDESCRIPTION: YAML configuration for enabling Casdoor authentication in DolphinScheduler's application settings. Includes essential parameters like authentication type, Casdoor server endpoint, client credentials, and redirect URL.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/dolphinscheduler.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity:\n  authentication:\n    # Authentication types (supported types: PASSWORD, LDAP, CASDOOR_SSO)\n    type: CASDOOR_SSO\ncasdoor:\n  # The URL of your Casdoor server\n  endpoint:\n  client-id:\n  client-secret:\n  # The certificate may be multi-line; you can use `|-` for ease\n  certificate: \n  # The organization name you added in Casdoor\n  organization-name:\n  # The application name you added in Casdoor\n  application-name:\n  # The DolphinScheduler login URL\n  redirect-url: http://localhost:5173/login\n```\n\n----------------------------------------\n\nTITLE: Setting Up TCP Server for Callback Listening in Qt Desktop App\nDESCRIPTION: This code initializes a QTcpServer to listen for the callback from Casdoor after authentication. It sets up the server on localhost:8080 and connects the newConnection signal to a slot.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/desktop-sdks/qt-app.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// Initialize the TcpServer object and listen on port 8080\nm_tcpserver = new QTcpServer(this);\nif (!m_tcpserver->listen(QHostAddress::LocalHost, 8080)) {\n    qDebug() << m_tcpserver->errorString();\n    close();\n}\nconnect(m_tcpserver, SIGNAL(newConnection()), this, SLOT(on_tcp_connected()));\n```\n\n----------------------------------------\n\nTITLE: Batch Enforce Permission Check via Casdoor API (curl)\nDESCRIPTION: This snippet shows how to use the `/api/batch-enforce` endpoint to check multiple permission requests at once. It requires the application client ID and secret for Basic Authentication and sends a JSON array of subject, object, and action tuples.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/permission/exposed-casbin-apis.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location --request POST 'http://localhost:8000/api/batch-enforce?permissionId=example-org/example-permission' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Basic <Your_Application_ClientId> <Your_Application_ClientSecret>' \\\n--data-raw '[[\"example-org/example-user\", \"example-resource\", \"example-action\"], [\"example-org/example-user2\", \"example-resource\", \"example-action\"], [\"example-org/example-user3\", \"example-resource\", \"example-action\"]]'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Casdoor OIDC Discovery URL\nDESCRIPTION: The URL format for accessing Casdoor's OIDC discovery endpoint. This endpoint provides essential information for OIDC clients to interact with Casdoor.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/oidc-client.md#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\n<your-casdoor-backend-host>/.well-known/openid-configuration\n```\n\n----------------------------------------\n\nTITLE: Installing Casdoor Helm Chart\nDESCRIPTION: Helm command to install the Casdoor chart from Docker registry, enabling easy deployment on Kubernetes clusters\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/try-with-helm.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm install casdoor oci://registry-1.docker.io/casbin/casdoor-helm-charts --version v1.702.0\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment Configuration\nDESCRIPTION: This YAML file provides an example Kubernetes deployment configuration for Casdoor, including service and deployment definitions. It sets up a service to expose Casdoor and a deployment to manage the Casdoor pods. It is essential to modify this configuration to suit your specific deployment environment.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/k8s.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"# this is only an EXAMPLE of deploying casddor in kubernetes\n# please modify this file according to your requirements\napiVersion: v1\nkind: Service\nmetadata:\n  #EDIT IT: if you don't want to run casdoor in default namespace, please modify this field\n  #namespace: casdoor\n  name: casdoor-svc\n  labels:\n    app: casdoor\nspec:\n  #EDIT IT: if you don't want to run casdoor in default namespace, please modify this filed\n  type: NodePort\n  ports:\n    - port: 8000\n  selector:\n    app: casdoor\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  #EDIT IT: if you don't want to run casdoor in default namespace, please modify this field\n  #namespace: casdoor\n  name: casdoor-deployment\n  labels:\n    app: casdoor\nspec:\n  #EDIT IT: if you don't use redis, casdoor should not have multiple replicas\n  replicas: 1\n  selector:\n    matchLabels:\n      app: casdoor\n  template:\n    metadata:\n      labels:\n        app: casdoor\n    spec:\n      containers:\n        - name: casdoor-container\n          image: casbin/casdoor:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8000\n          volumeMounts:\n            # the mounted directory path in THE CONTAINER\n            - mountPath: /conf\n              name: conf\n          env:       \n            - name: RUNNING_IN_DOCKER\n              value: \\\"true\\\"\n      #if you want to deploy this in real prod env, consider the config map\n      volumes:\n        - name: conf\n          hostPath:\n            #EDIT IT: the mounted directory path in THE HOST\n            path: /conf\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring APISIX Route with OIDC Plugin\nDESCRIPTION: This code snippet shows how to configure an APISIX route to use the OIDC plugin for authentication, leveraging Casdoor as the OIDC provider.  It sets the necessary parameters such as client ID, client secret, discovery URL, redirect URI, and other OIDC-related settings to enable authentication through Casdoor. The upstream service is set to httpbin.org.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/lua/apisix.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Use your own X-Api-Key\n$ curl -X POST APISIX_HOSTNAME/apisix/admin/routes -H \"X-Api-Key: edd1c9f034335f136f87ad84b625c8f1\" -d '{\n  \"uri\": \"/get\",\n  \"name\": \"apisix_casdoor_test\",\n  \"plugins\": {\n    \"openid-connect\": {\n      \"client_id\": \"Client ID\",\n      \"client_secret\": \"Client Secret\",\n      \"discovery\": \"http://CASDOOR_HOSTNAME/.well-known/openid-configuration\",\n      \"introspection_endpoint_auth_method\": \"client_secret_basic\",\n      \"logout_path\": \"/logout\",\n      \"realm\": \"master\",\n      \"redirect_uri\": \"http://APISIX_HOSTNAME/REDIRECTWHATYOUWANT\",\n      \"bearer_only\": false,\n      \"set_id_token_header\": false,\n      \"access_token_in_authorization_header\": true,\n      \"set_access_token_header\": true,\n      \"set_userinfo_header\": false,\n      \"realm\": \"master\"\n    }\n  },\n  \"upstream\": {\n    \"type\": \"roundrobin\",\n    \"nodes\": {\n      \"httpbin.org:80\": 1\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Casdoor Authentication Filter\nDESCRIPTION: This Java snippet defines a custom global filter, CasdoorAuthFilter, for Spring Cloud Gateway that checks authentication status and returns a 401 response if the user is not authenticated.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-cloud-gateway.md#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class CasdoorAuthFilter implements GlobalFilter, Ordered {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CasdoorAuthFilter.class);\n\n    @Override public int getOrder() {\n        return 0;\n    }\n\n    @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        return exchange.getSession().flatMap(webSession -> {\n            CasdoorUser user = webSession.getAttribute(\"casdoorUser\");\n            if (user != null) {\n                return chain.filter(exchange);\n            }\n            ServerHttpResponse response = exchange.getResponse();\n            response.setStatusCode(HttpStatus.UNAUTHORIZED);\n            response.getHeaders().add(\"Content-Type\", \"application/json\");\n            return response.setComplete();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Login to OIDC Module\nDESCRIPTION: Modify login redirection to bypass Zentao login screen and use Casdoor OIDC login\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/php/zentao.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n//return print(js::locate(helper::createLink('user', 'login', \"referer=$referer\")));\nreturn print(js::locate(helper::createLink('oidc', 'index', \"referer=$referer\")));\n```\n\n----------------------------------------\n\nTITLE: Importing User with Bcrypt Password in Casdoor\nDESCRIPTION: This JSON snippet demonstrates how to add a user to Casdoor with a pre-encrypted bcrypt password. It uses the '/api/add-user' API route and includes essential user properties like owner, signupApplication, email, name, displayName, password, and passwordType.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/user/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"owner\": \"organization\",\n    \"signupApplication\": \"first-app\",\n    \"email\":\"dev@dev.com\",\n    \"name\": \"dev\",\n    \"displayName\": \"developper\",\n    \"password\": \"$2a$10$.o/iVyDE9Xk8ioywHDnQRu72RviOi6FPa1ujhusbSCZeg7VOa6MY6\",\n    \"passwordType\":\"bcrypt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing OAuth Authorization Request in Cloud Foundry Integration\nDESCRIPTION: This curl command sends a GET request to the OAuth authorization endpoint, specifying the response type, client ID, scope, and redirect URI. It's used to initiate the OAuth flow for integrating Casdoor with Cloud Foundry.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/CloudFoundry.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl '<http://localhost/oauth/authorize?response_type=token&client_id=app&scope=openid&redirect_uri=http%3A%2F%2Flocalhost%3A8080%2Fapp%2F>' -i -X GET \\\n  -H 'Accept: application/x-www-form-urlencoded'\n```\n\n----------------------------------------\n\nTITLE: Initializing Configuration for Casdoor - YAML\nDESCRIPTION: This YAML configuration initializes the required parameters for connecting to the Casdoor service, similar to the properties configuration. It is used in applications that prefer YAML over properties files.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-boot.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncasdoor:\n  endpoint: http://localhost:8000\n  client-id: <client-id>\n  client-secret: <client-secret>\n  certificate: <certificate>\n  organization-name: built-in\n  application-name: app-built-in\n```\n\n----------------------------------------\n\nTITLE: PKCE Parameters for Authorization Code Grant - OAuth 2.0 - URL\nDESCRIPTION: This snippet describes the additional parameters used for enabling PKCE while obtaining the authorization code. It shows how to include code_challenge_method and code_challenge in the URL.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/oauth.md#2025-04-21_snippet_3\n\nLANGUAGE: url\nCODE:\n```\n&code_challenge_method=S256&code_challenge=YOUR_CHANNELLENGE\n```\n\n----------------------------------------\n\nTITLE: Kubernetes OIDC Configuration YAML\nDESCRIPTION: YAML configuration for kubectl showing how to set up OIDC authentication with Casdoor in the kubeconfig file.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/go/kubernetes.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n- name: minikube\n  user:\n    auth-provider:\n      config:\n        client-id: Kubernetes\n        client-secret: 72c65c3912aec24a9f3ec41b65a7577114ed2bae\n        id-token: $(id_token)\n        idp-issuer-url: https://demo.casdoor.com\n        refresh-token: $(refresh_token)\n      name: oidc\n\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Settings for BookStack-Casdoor Integration\nDESCRIPTION: Example configuration for the oauth.conf file in BookStack to enable Casdoor authentication. This configuration specifies the Casdoor organization, application name, endpoint URL, client credentials, and redirect URL.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/go/bookstack.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[oauth]\ncasdoorOrganization = \"<Organization>\"\ncasdoorApplication = \"bookstack\"\ncasdoorEndpoint = http://localhost:8000\nclientId = <client ID>\nclientSecret = <client Secret>\nredirectUrl = http://localhost:8181/login/callback\n```\n\n----------------------------------------\n\nTITLE: Installing Casdoor React Native SDK\nDESCRIPTION: These commands install the casdoor-react-native-sdk as a dependency to your React Native project using NPM or Yarn. This SDK facilitates integration with Casdoor for authentication and authorization.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/mobile-sdks/react-native-app.md#2025-04-21_snippet_4\n\nLANGUAGE: shell script\nCODE:\n```\n\"\n# NPM\nnpm i casdoor-react-native-sdk\n\n# Yarn\nyarn add casdoor-react-native-sdk\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ELK-Casdoor Authentication Proxy\nDESCRIPTION: Configuration file (app.conf) settings for the reverse proxy that handles authentication between Casdoor and ELK stack. Includes essential parameters like ports, endpoints, and Casdoor credentials.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/go/elk.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nappname = .\n# port on which the reverse proxy shall be run\nhttpport = 8080\nrunmode = dev\n# EDIT IT IF NECESSARY. The URL of this reverse proxy.\npluginEndpoint = \"http://localhost:8080\"\n# EDIT IT IF NECESSARY. The URL of the Kibana.\ntargetEndpoint = \"http://localhost:5601\"\n# EDIT IT. The URL of Casdoor.\ncasdoorEndpoint = \"http://localhost:8000\"\n# EDIT IT. The clientID of your reverse proxy in Casdoor.\nclientID = ceb6eb261ab20174548d\n# EDIT IT. The clientSecret of your reverse proxy in Casdoor.\nclientSecret = af928f0ef1abc1b1195ca58e0e609e9001e134f4\n# EDIT IT. The application name of your reverse proxy in Casdoor.\nappName = ELKProxy\n# EDIT IT. The organization to which your reverse proxy belongs in Casdoor.\norganization = built-in\n```\n\n----------------------------------------\n\nTITLE: Implicit Grant Authorization URL - OAuth 2.0 - URL\nDESCRIPTION: This snippet provides the authorization URL for the Implicit Grant type, which does not require a backend application to exchange the token. It includes necessary parameters for redirection.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/oauth.md#2025-04-21_snippet_4\n\nLANGUAGE: url\nCODE:\n```\nhttps://<CASDOOR_HOST>/login/oauth/authorize?client_id=CLIENT_ID&redirect_uri=REDIRECT_URI&response_type=token&scope=openid&state=STATE\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware for Protected Routes in Nuxt.js\nDESCRIPTION: This middleware checks if a user is attempting to access protected routes and redirects to the login page if not authenticated. It is contextualized within a Nuxt.js project, specifically referencing the creation and configuration of middleware in the nuxt.config.js file.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/nuxt.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//define which paths Middleware will run on\nconst protectedRoutes = [\"/profile\"];\n\nexport default function ({route, redirect}) {\n  if (protectedRoutes.includes(route.path)) {\n    //redirect the incoming request to a different URL\n    redirect('/login');\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing SAML 2.0 Service Provider with Go\nDESCRIPTION: This Go code snippet sets up a SAML 2.0 Service Provider to handle SAML responses from Casdoor. It fetches the SAML metadata, parses it, sets up a certificate store, and defines an HTTP handler to process SAML assertions after authentication. The code requires the 'github.com/russellhaering/gosaml2' and 'github.com/russellhaering/goxmldsig' packages for SAML handling and XML digital signatures.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/saml/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"crypto/x509\"\n    \"fmt\"\n    \"net/http\"\n\n    \"io/ioutil\"\n\n    \"encoding/base64\"\n    \"encoding/xml\"\n\n    saml2 \"github.com/russellhaering/gosaml2\"\n    \"github.com/russellhaering/gosaml2/types\"\n    dsig \"github.com/russellhaering/goxmldsig\"\n)\n\nfunc main() {\n    res, err := http.Get(\"http://localhost:7001/api/saml/metadata?application=admin/app-built-in\")\n    if err != nil {\n        panic(err)\n    }\n\n    rawMetadata, err := ioutil.ReadAll(res.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    metadata := &types.EntityDescriptor{}\n    err = xml.Unmarshal(rawMetadata, metadata)\n    if err != nil {\n        panic(err)\n    }\n\n    certStore := dsig.MemoryX509CertificateStore{\n        Roots: []*x509.Certificate{},\n    }\n\n    for _, kd := range metadata.IDPSSODescriptor.KeyDescriptors {\n        for idx, xcert := range kd.KeyInfo.X509Data.X509Certificates {\n            if xcert.Data == \"\" {\n                panic(fmt.Errorf(\"metadata certificate(%d) must not be empty\", idx))\n            }\n            certData, err := base64.StdEncoding.DecodeString(xcert.Data)\n            if err != nil {\n                panic(err)\n            }\n\n            idpCert, err := x509.ParseCertificate(certData)\n            if err != nil {\n                panic(err)\n            }\n\n            certStore.Roots = append(certStore.Roots, idpCert)\n        }\n    }\n\n    randomKeyStore := dsig.RandomKeyStoreForTest()\n\n    sp := &saml2.SAMLServiceProvider{\n        IdentityProviderSSOURL:      metadata.IDPSSODescriptor.SingleSignOnServices[0].Location,\n        IdentityProviderIssuer:      metadata.EntityID,\n        ServiceProviderIssuer:       \"http://localhost:6900/acs/example\",\n        AssertionConsumerServiceURL: \"http://localhost:6900/v1/_saml_callback\",\n        SignAuthnRequests:           true,\n        AudienceURI:                 \"http://localhost:6900/saml/acs/example\",\n        IDPCertificateStore:         &certStore,\n        SPKeyStore:                  randomKeyStore,\n    }\n\n    http.HandleFunc(\"/v1/_saml_callback\", func(rw http.ResponseWriter, req *http.Request) {\n        err := req.ParseForm()\n        if err != nil {\n            rw.WriteHeader(http.StatusBadRequest)\n            return\n        }\n        samlReponse := req.URL.Query().Get(\"SAMLResponse\")\n        assertionInfo, err := sp.RetrieveAssertionInfo(samlReponse)\n        if err != nil {\n            fmt.Println(err)\n            rw.WriteHeader(http.StatusForbidden)\n            return\n        }\n        fmt.Println(assertionInfo)\n        if assertionInfo.WarningInfo.InvalidTime {\n            fmt.Println(\"here12:\", assertionInfo.WarningInfo.InvalidTime)\n            rw.WriteHeader(http.StatusForbidden)\n            return\n        }\n\n        if assertionInfo.WarningInfo.NotInAudience {\n            fmt.Println(assertionInfo)\n            fmt.Println(\"here13:\", assertionInfo.WarningInfo.NotInAudience)\n            rw.WriteHeader(http.StatusForbidden)\n            return\n        }\n\n        fmt.Fprintf(rw, \"NameID: %s\\n\", assertionInfo.NameID)\n\n        fmt.Fprintf(rw, \"Assertions:\\n\")\n\n        for key, val := range assertionInfo.Values {\n            fmt.Fprintf(rw, \"  %s: %+v\\n\", key, val)\n        }\n        fmt.Println(assertionInfo.Values.Get(\"FirstName\"))\n        fmt.Fprintf(rw, \"\\n\")\n\n        fmt.Fprintf(rw, \"Warnings:\\n\")\n        fmt.Fprintf(rw, \"%+v\\n\", assertionInfo.WarningInfo)\n    })\n\n    println(\"Visit this URL To Authenticate:\")\n    authURL, err := sp.BuildAuthURL(\"\")\n    if err != nil {\n        panic(err)\n    }\n\n    println(authURL)\n\n    println(\"Supply:\")\n    fmt.Printf(\"  SP ACS URL      : %s\\n\", sp.AssertionConsumerServiceURL)\n\n    err = http.ListenAndServe(\":6900\", nil)\n    if err != nil {\n        panic(err)\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: User Information Field Mapping\nDESCRIPTION: Configuration for mapping user information fields from OIDC provider to Jenkins user profile\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/jenkins-oidc.md#2025-04-21_snippet_2\n\nLANGUAGE: jenkins-configuration\nCODE:\n```\n# User Information Field Mapping\nUser Name Field: name\nFull Name Field: displayName\nEmail Field: email\n```\n\n----------------------------------------\n\nTITLE: Configure OAuth2 Paths in ShowDoc (INI)\nDESCRIPTION: This code snippet shows the required paths for Authorize, AccessToken, and User info in ShowDoc when using Casdoor as an OAuth2 provider. These paths are essential for ShowDoc to communicate with Casdoor's OAuth2 endpoints during the authentication process.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/php/showdoc.md#2025-04-21_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n\"Authorize path:   /login/oauth/authorize\nAccessToken path:   /api/login/oauth/access_token\nUser info path:   /api/get-account\"\n```\n\n----------------------------------------\n\nTITLE: Enforce Permission Check Response (JSON)\nDESCRIPTION: This JSON snippet represents the expected response from the `/api/enforce` endpoint. The `data` field indicates the result of the permission check, where `true` signifies that the user has the requested permission.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/permission/exposed-casbin-apis.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"ok\",\n    \"msg\": \"\",\n    \"sub\": \"\",\n    \"name\": \"\",\n    \"data\": [\n        true\n    ],\n    \"data2\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Styles and Components - JavaScript\nDESCRIPTION: This snippet imports a CSS module and a React component from the specified paths to style and render the Casdoor card.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport styles from './styles.module.css';\nimport CasdoorCard from \"@site/src/components/CasdoorCard\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Casdoor Authentication Logic in C#\nDESCRIPTION: C# code for the MainPage, handling login and logout functionality, and displaying user information after successful authentication.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/desktop-sdks/maui-app.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Casdoor.MauiOidcClient.Example\n{\n    public partial class MainPage : ContentPage\n    {\n        int count = 0;\n        private readonly CasdoorClient client;\n        private string accessToken;\n        public MainPage(CasdoorClient client)\n        {\n            InitializeComponent();\n            this.client = client;\n\n#if WINDOWS\n    client.Browser = new WebViewBrowserAuthenticator(WebViewInstance);\n#endif\n        }\n\n        private void OnCounterClicked(object sender, EventArgs e)\n        {\n            count++;\n\n            if (count == 1)\n                CounterBtn.Text = $\"Clicked {count} time\";\n            else\n                CounterBtn.Text = $\"Clicked {count} times\";\n\n            SemanticScreenReader.Announce(CounterBtn.Text);\n        }\n\n        private async void OnLoginClicked(object sender, EventArgs e)\n        {\n            var loginResult = await client.LoginAsync();\n            accessToken = loginResult.AccessToken;\n            if (!loginResult.IsError)\n            {\n                NameLabel.Text = loginResult.User.Identity.Name;\n                EmailLabel.Text = loginResult.User.Claims.FirstOrDefault(c => c.Type == \"email\")?.Value;            \n\n                LoginView.IsVisible = false;\n                HomeView.IsVisible = true;\n            }\n            else\n            {\n                await DisplayAlert(\"Error\", loginResult.ErrorDescription, \"OK\");\n            }\n        }\n\n        private async void OnLogoutClicked(object sender, EventArgs e)\n        {\n            var logoutResult = await client.LogoutAsync(accessToken);\n\n\n            if (!logoutResult.IsError)\n            {\n                HomeView.IsVisible = false;\n                LoginView.IsVisible = true;\n                this.Focus();\n            }\n            else\n            {\n                await DisplayAlert(\"Error\", logoutResult.ErrorDescription, \"OK\");\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CAS 3.0 Validation Filter\nDESCRIPTION: XML configuration for setting up CAS 3.0 validation filter in web.xml using the Cas30ProxyReceivingTicketValidationFilter class.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/cas.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<filter-name>CAS Validation Filter</filter-name>\n<filter-class>org.jasig.cas.client.validation.Cas30ProxyReceivingTicketValidationFilter</filter-class>\n```\n\n----------------------------------------\n\nTITLE: Configuring Casdoor JS SDK\nDESCRIPTION: This JavaScript snippet configures the `casdoor-js-sdk` with the necessary parameters to connect to the Casdoor server. It imports the SDK and defines configuration settings such as the server URL, client ID, application name, organization name, and redirect path. Make sure to replace the placeholder values with your actual Casdoor application details.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-security/spring-security-filter.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"import Sdk from \\\"casdoor-js-sdk\\\";\n    \n// Serverurl is the URL where spring security is deployed\nexport const ServerUrl = \\\"http://BACKEND_HOSTNAME:8080\\\";\n    \nconst sdkConfig = {\n  serverUrl: \\\"http://CASDOOR_HOSTNAME:8000\\\",\n  clientId: \\\"<your client id>\\\",\n  appName: \\\"<your application name>\\\",\n  organizationName: \\\"<your organization name>\\\",\n  redirectPath: \\\"/callback\\\",\n};\n    \nexport const CasdoorSDK = new Sdk(sdkConfig);\"\n```\n\n----------------------------------------\n\nTITLE: Manual OIDC Configuration for Local Casdoor Deployment\nDESCRIPTION: Manual configuration parameters for OIDC authentication when using a local Casdoor deployment, including specific server URLs and authentication scopes\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/jenkins-oidc.md#2025-04-21_snippet_1\n\nLANGUAGE: jenkins-configuration\nCODE:\n```\n# Manual OIDC Configuration\nToken Server URL: http://[CASDOOR_HOSTNAME]/api/login/oauth/access_token\nAuthorization Server URL: http://[CASDOOR_HOSTNAME]/login/oauth/authorize\nUserInfo Server URL: http://[CASDOOR_HOSTNAME]/api/get-account\nScopes: address phone openid profile offline_access email\n```\n\n----------------------------------------\n\nTITLE: Configure Nginx server block for Casdoor\nDESCRIPTION: This code snippet configures a server block in Nginx to reverse proxy requests to the Casdoor backend.  It listens on port 80, sets proxy headers, and forwards requests to `http://127.0.0.1:8000`.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/nginx.mdx#2025-04-21_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    server_name YOUR_DOMAIN_NAME;\n    location / {\n        proxy_set_header    Host            $http_host;\n        proxy_set_header    X-Real-IP       $remote_addr;\n        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_redirect      off;\n        proxy_pass http://127.0.0.1:8000;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting to the Login Page with Casdoor SDK\nDESCRIPTION: This code snippet demonstrates how to direct users to the Casdoor login page, ensuring that authentication is properly handled when accessing the app. It uses the Casdoor SDK to manage user sessions effectively.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/nuxt.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst CasdoorSDK = new Sdk(sdkConfig);\nCasdoorSDK.signin_redirect();\n\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube with OIDC Configuration\nDESCRIPTION: Command to start minikube with OIDC issuer URL and client ID configuration for the API server.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/go/kubernetes.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nminikube start --extra-config=apiserver.oidc-issuer-url=https://demo.casdoor.com --extra-config=apiserver.oidc-client-id=294b09fbc17f95daf2fe\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus to Monitor Casdoor\nDESCRIPTION: This YAML configuration sets up Prometheus to scrape metrics from the Casdoor application and includes settings for global scrape intervals and specific job configurations for the application and Prometheus itself. Dependencies include a running instance of Prometheus and access to the Casdoor application endpoints.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/monitoring/Prometheus.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nglobal:\n  scrape_interval: 10s # The time interval for fetching metrics\n\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n  - job_name: 'casdoor' # Name of the application to be monitored \n    static_configs:\n      - targets: ['localhost:8000'] # Back-end address of Casdoor deployment\n    metrics_path: '/api/metrics' # Path for collecting indicators\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Global Security for OIDC\nDESCRIPTION: Configuration steps for setting up OpenID Connect authentication in Jenkins global security settings, including client ID, client secret, and authentication endpoints\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/jenkins-oidc.md#2025-04-21_snippet_0\n\nLANGUAGE: jenkins-configuration\nCODE:\n```\n# Security Realm Configuration\nSecurity Realm: Login with Openid Connect\nClient ID: [YOUR_CLIENT_ID]\nClient Secret: [YOUR_CLIENT_SECRET]\n\n# Configuration Mode\nMode: Automatic configuration\nWell-known Configuration Endpoint: http://[CASDOOR_HOSTNAME]/.well-known/openid-configuration\n```\n\n----------------------------------------\n\nTITLE: OAuth Authorization URL Format\nDESCRIPTION: The URL format that Casdoor uses to redirect users to the custom provider's authorization endpoint.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/oauth/CustomProvider.md#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://door.casdoor.com/login/oauth/authorize?client_id={ClientID}&redirect_uri=https://{your-casdoor-hostname}/callback&state={State_generated_by_Casdoor}&response_type=code&scope={Scope}\n```\n\n----------------------------------------\n\nTITLE: Response from /api/userinfo - OAuth 2.0 - JSON\nDESCRIPTION: This snippet illustrates the expected JSON response from the /api/userinfo endpoint, which contains user information corresponding to the provided access token.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/oauth.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"sub\": \"7a6b4a8a-b731-48da-bc44-36ae27338817\",\n    \"iss\": \"http://localhost:8000\",\n    \"aud\": \"c58c...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OpenID Connect Configuration from Casdoor\nDESCRIPTION: Curl command to retrieve the OpenID Connect configuration from Casdoor server, including authorization endpoint, token endpoint, and JWK URI. The output is piped to Python for formatting.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/C++/Nginx.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://<casdoor-server-address>/.well-known/openid-configuration | python -m json.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Casdoor via INI File\nDESCRIPTION: The configuration of various parameters in the Casdoor application including application name, HTTP port, database configurations, and session settings through an INI file.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/server-installation.mdx#2025-04-21_snippet_5\n\nLANGUAGE: INI\nCODE:\n```\nappname = casdoor\nhttpport = 8000\nrunmode = dev\nSessionOn = true\ncopyrequestbody = true\ndriverName = mysql\ndataSourceName = root:123456@tcp(localhost:3306)/\ndbName = casdoor\ntableNamePrefix =\nshowSql = false\nredisEndpoint =\ndefaultStorageProvider =\nisCloudIntranet = false\nauthState = \"casdoor\"\nsocks5Proxy = \"127.0.0.1:10808\"\nverificationCodeTimeout = 10\ninitScore = 2000\nlogPostOnly = true\norigin = \"https://door.casdoor.com\"\nstaticBaseUrl = \"https://cdn.casbin.org\"\nenableGzip = true\ninactiveTimeoutMinutes =\n```\n\n----------------------------------------\n\nTITLE: Configuring Role Mapping in Grafana OAuth\nDESCRIPTION: JMESPath configuration for mapping user roles from Casdoor to Grafana roles, supporting Admin, Editor, and Viewer roles based on role attributes\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/go/grafana.md#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[auth.generic_oauth]\nrole_attribute_path = contains(roles[*].name, 'admin') && 'Admin' || contains(roles[*].name, 'editor') && 'Editor' || 'Viewer'\nrole_attribute_strict = true\nallow_assign_grafana_admin = true\n```\n\n----------------------------------------\n\nTITLE: Defining Application Structure in Go for Casdoor\nDESCRIPTION: Go struct definition for the Application type in Casdoor, which represents a web service protected by Casdoor. The struct includes fields for authentication configuration, user interface customization, and OAuth properties.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/core-concepts.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Application struct {\n    Owner               string          `xorm:\"varchar(100) notnull pk\" json:\"owner\"`\n    Name                string          `xorm:\"varchar(100) notnull pk\" json:\"name\"`\n    CreatedTime         string          `xorm:\"varchar(100)\" json:\"createdTime\"`\n    DisplayName         string          `xorm:\"varchar(100)\" json:\"displayName\"`\n    Logo                string          `xorm:\"varchar(100)\" json:\"logo\"`\n    HomepageUrl         string          `xorm:\"varchar(100)\" json:\"homepageUrl\"`\n    Description         string          `xorm:\"varchar(100)\" json:\"description\"`\n    Organization        string          `xorm:\"varchar(100)\" json:\"organization\"`\n    Cert                string          `xorm:\"varchar(100)\" json:\"cert\"`\n    EnablePassword      bool            `json:\"enablePassword\"`\n    EnableSignUp        bool            `json:\"enableSignUp\"`\n    EnableSigninSession bool            `json:\"enableSigninSession\"`\n    EnableCodeSignin    bool            `json:\"enableCodeSignin\"`\n    Providers           []*ProviderItem `xorm:\"mediumtext\" json:\"providers\"`\n    SignupItems         []*SignupItem   `xorm:\"varchar(1000)\" json:\"signupItems\"`\n    OrganizationObj     *Organization   `xorm:\"-\" json:\"organizationObj\"`\n    ClientId             string         `xorm:\"varchar(100)\" json:\"clientId\"`\n    ClientSecret         string         `xorm:\"varchar(100)\" json:\"clientSecret\"`\n    RedirectUris         []string       `xorm:\"varchar(1000)\" json:\"redirectUris\"`\n    TokenFormat          string         `xorm:\"varchar(100)\" json:\"tokenFormat\"`\n    ExpireInHours        int            `json:\"expireInHours\"`\n    RefreshExpireInHours int            `json:\"refreshExpireInHours\"`\n    SignupUrl            string         `xorm:\"varchar(200)\" json:\"signupUrl\"`\n    SigninUrl            string         `xorm:\"varchar(200)\" json:\"signinUrl\"`\n    ForgetUrl            string         `xorm:\"varchar(200)\" json:\"forgetUrl\"`\n    AffiliationUrl       string         `xorm:\"varchar(100)\" json:\"affiliationUrl\"`\n    TermsOfUse           string         `xorm:\"varchar(100)\" json:\"termsOfUse\"`\n    SignupHtml           string         `xorm:\"mediumtext\" json:\"signupHtml\"`\n    SigninHtml           string         `xorm:\"mediumtext\" json:\"signinHtml\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Pull Requests in Git\nDESCRIPTION: Provides commands to amend a Git commit and push the updates to a remote repository. This is useful for modifying existing pull requests without having to create a new one.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/contributing.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --amend\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit push --force\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy YAML for Casdoor Integration\nDESCRIPTION: Modify the envoy.yaml file to include the token_endpoint, authorization_endpoint, and client_id from Casdoor. This configuration sets up the OAuth2 endpoints for authentication.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/C++/Envoy.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntoken_endpoint: \"https://your-casdoor-server/api/login/oauth/access_token\"\nauthorization_endpoint: \"https://your-casdoor-server/login/oauth/authorize\"\nclient_id: \"your-client-id-from-casdoor\"\n```\n\n----------------------------------------\n\nTITLE: Azure Blob Storage Configuration Fields\nDESCRIPTION: Table showing the mapping between Casdoor configuration fields and Azure Blob Storage concepts. Includes required and optional parameters for setting up the storage provider.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/storage/azure.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field Name    | Azure Name    | Required |\n| ------------- | ------------- | -------- |\n| Client ID     | AccountName   | Required |\n| Client secret | AccountKey    | Required |\n| Endpoint      | ContainerUrl  | Required |\n| Endpoint (intranet) | PrivateEndpoint | |\n| Bucket        | ContainerName | Required |\n| Path prefix   |               | |\n| Domain        | DomainName    | |\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database for Casdoor\nDESCRIPTION: This snippet displays the required configuration for connecting to a PostgreSQL database with appropriate parameters for usage in the Casdoor application.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/server-installation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: INI\nCODE:\n```\ndriverName = postgres\ndataSourceName = user=postgres password=postgres host=localhost port=5432 sslmode=disable dbname=casdoor\ndbName = casdoor\n```\n\n----------------------------------------\n\nTITLE: Example OIDC Discovery Response from Casdoor\nDESCRIPTION: A sample JSON response from Casdoor's OIDC discovery endpoint. It includes information about endpoints, supported response types, grant types, scopes, and claims.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/oidc-client.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"issuer\": \"https://door.casdoor.com\",\n  \"authorization_endpoint\": \"https://door.casdoor.com/login/oauth/authorize\",\n  \"token_endpoint\": \"https://door.casdoor.com/api/login/oauth/access_token\",\n  \"userinfo_endpoint\": \"https://door.casdoor.com/api/userinfo\",\n  \"jwks_uri\": \"https://door.casdoor.com/.well-known/jwks\",\n  \"introspection_endpoint\": \"https://door.casdoor.com/api/login/oauth/introspect\",\n  \"response_types_supported\": [\n    \"code\",\n    \"token\",\n    \"id_token\",\n    \"code token\",\n    \"code id_token\",\n    \"token id_token\",\n    \"code token id_token\",\n    \"none\"\n  ],\n  \"response_modes_supported\": [\n    \"login\",\n    \"code\",\n    \"link\"\n  ],\n  \"grant_types_supported\": [\n    \"password\",\n    \"authorization_code\"\n  ],\n  \"subject_types_supported\": [\n    \"public\"\n  ],\n  \"id_token_signing_alg_values_supported\": [\n    \"RS256\"\n  ],\n  \"scopes_supported\": [\n    \"openid\",\n    \"email\",\n    \"profile\",\n    \"address\",\n    \"phone\",\n    \"offline_access\"\n  ],\n  \"claims_supported\": [\n    \"iss\",\n    \"ver\",\n    \"sub\",\n    \"aud\",\n    \"iat\",\n    \"exp\",\n    \"id\",\n    \"type\",\n    \"displayName\",\n    \"avatar\",\n    \"permanentAvatar\",\n    \"email\",\n    \"phone\",\n    \"location\",\n    \"affiliation\",\n    \"title\",\n    \"homepage\",\n    \"bio\",\n    \"tag\",\n    \"region\",\n    \"language\",\n    \"score\",\n    \"ranking\",\n    \"isOnline\",\n    \"isAdmin\",\n    \"isGlobalAdmin\",\n    \"isForbidden\",\n    \"signupApplication\",\n    \"ldap\"\n  ],\n  \"request_parameter_supported\": true,\n  \"request_object_signing_alg_values_supported\": [\n    \"HS256\",\n    \"HS384\",\n    \"HS512\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebAuthn Origin in Casdoor\nDESCRIPTION: Configuration setting in app.conf that defines the origin URL for WebAuthn authentication. This must exactly match your website URL and should use HTTPS (except for localhost).\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/webauthn.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\norigin = \"http://localhost:8000\"\n```\n\n----------------------------------------\n\nTITLE: Running OAuth2-Proxy with Command-Line Parameters\nDESCRIPTION: This command runs OAuth2-Proxy with required and optional parameters, configured for specific deployment needs, including provider settings and cookie management.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/C++/NginxCommunityVersion.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\noauth2-proxy \\ \n--provider=oidc \\ #[required] Do not change\n--client-id=abc123456def \\ #[required] \"Client ID\" obtained in step I.4 above\n--client-secret=abc123456def \\ #[required] \"Client Secret\" obtained in step I.4 above\n--oidc-issuer-url=https://auth.yourdomain.com \\ #[required] Your Casdoor URL (domain name or public IP)\n--redirect-url=https://project.yourdomain.com/oauth2/callback \\ #[required] https://domain-of-the-project-to-protect/oauth2/callback \n--scope=email+profile+groups+openid \\ #[required] Obtained from Casdoor: user email, user profile, groups, and login authentication\n--cookie-domain=project.yourdomain.com \\ #[required] Domain name of the project you want to protect\n--whitelist-domain=project.yourdomain.com \\ #[required] Domain name of the project you want to protect\n--cookie-secret=abc123456def \\ #[required] Please generate a random string of numbers and letters and fill it in here\n--email-domain=* \\ #[required] List of acceptable user email domains (* means accept all domains). If the user's email suffix is not in this list, a 403 error will be returned even if the login is successful.\n--insecure-oidc-allow-unverified-email=true \\ #[required] Whether to accept users with unverified email addresses\n--http-address=http://127.0.0.1:65534 \\ #[required] Address that oauth2-proxy listens on. The port number here can be set arbitrarily. Please record the value you set, as it will be needed for configuring Nginx later.\n--cookie-expire=24h0m0s \\ #[optional] Cookie expiration time. After this period, users will need to log in again.\n--custom-sign-in-logo=https://cdn.yourdomain.com/pic/proj.png \\ #[optional] Icon displayed on the login page. It is recommended to use a rectangular image rather than a square one.\n--session-store-type=redis \\ #[optional] Use Redis cache. If you don't need Redis, you can delete this item.\n--redis-connection-url=redis://127.0.0.1:6379/0 \\ #[optional] Redis URL. If you don't need Redis, you can delete this item.\n--redis-password=123456 #[optional] Redis connection password. If you don't need Redis or Redis has no password, you can delete this item.\n```\n\n----------------------------------------\n\nTITLE: Expected Token Response Format\nDESCRIPTION: JSON response format that the custom provider must return when requesting an access token.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/oauth/CustomProvider.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ixxxxxxxxxxxxxx\",\n  \"refresh_token\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6xxxxxxxxxxxxxx\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 10080,\n  \"scope\": \"openid profile email\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database for Casdoor\nDESCRIPTION: This snippet illustrates the configuration parameters for connecting to a MySQL database intended for use with the Casdoor application, including the driver name and data source details.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/server-installation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: INI\nCODE:\n```\ndriverName = mysql\ndataSourceName = root:123456@tcp(localhost:3306)/\ndbName = casdoor\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX JavaScript Module on RHEL-based Systems\nDESCRIPTION: Command for installing the NGINX JavaScript module on CentOS, RHEL, and Oracle Linux systems, which is required for handling the interaction between NGINX Plus and the identity provider.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/C++/Nginx.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install nginx-plus-module-njs\n```\n\n----------------------------------------\n\nTITLE: Configuring RADIUS Server Settings in Casdoor\nDESCRIPTION: Configuration settings in app.conf file to set up RADIUS server port and secret key for Casdoor RADIUS implementation.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/radius/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nradiusServerPort = 1812\nradiusSecret = \"secret\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook Handler in Node.js\nDESCRIPTION: Example Node.js/Express server implementation for handling incoming webhook requests from Casdoor. Sets up an endpoint that logs received webhook data and sends a confirmation response.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/webhooks/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst app = express();\n\napp.use(express.json());\n\napp.post('/webhook', (req, res) => {\n  console.log('Received webhook:', req.body);\n  res.status(200).send('Webhook received');\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite3 Database for Casdoor\nDESCRIPTION: This snippet shows how to configure SQLite3 as the database for Casdoor using appropriate parameters in the configuration file.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/server-installation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: INI\nCODE:\n```\ndriverName = sqlite\ndataSourceName = file:casdoor.db?cache=shared\ndbName = casdoor\n```\n\n----------------------------------------\n\nTITLE: Storing Access Token After Authentication\nDESCRIPTION: In this snippet, after user authentication via Casdoor, the access token is retrieved and stored using cookies. This is crucial for maintaining user sessions securely within the application.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/nuxt.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCasdoorSDK.exchangeForAccessToken()\n  .then((res) => {\n    if (res && res.access_token) {\n      //Get Token\n      return CasdoorSDK.getUserInfo(res.access_token);\n    }\n  })\n  .then((res) => {\n    // Storage Token\n    Cookies.set(\"casdoorUser\", JSON.stringify(res));\n  });\n\n```\n\n----------------------------------------\n\nTITLE: Adding casdoorRegister Method to SysLoginService\nDESCRIPTION: This Java code adds the `casdoorRegister` method to the `SysLoginService`. This method registers a new user in the RuoYi-Cloud database using the provided Casdoor username.  It creates a new `SysUser` object and uses the `remoteUserService` to register the user.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/RuoYi.md#2025-04-21_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n    public void casdoorRegister(String username) {\n        if (StringUtils.isAnyBlank(username)) {\n            throw new ServiceException(\"User must provide a username\");\n        }\n        SysUser sysUser = new SysUser();\n        sysUser.setUserName(username);\n        sysUser.setNickName(username);\n        R<?> registerResult = remoteUserService.registerUserInfo(sysUser, SecurityConstants.INNER);\n        System.out.println(registerResult);\n        if (R.FAIL == registerResult.getCode()) {\n            throw new ServiceException(registerResult.getMsg());\n        }\n        recordLogService.recordLogininfor(username, Constants.REGISTER, \"Registration successful\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Including Casdoor Dependency for Gradle\nDESCRIPTION: This snippet illustrates how to add the Casdoor Spring Boot starter dependency in a Gradle project, necessary for integrating Casdoor with Spring Cloud Gateway.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-cloud-gateway.md#2025-04-21_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation group: 'org.casbin', name: 'casdoor-spring-boot-starter', version: '1.x.y'\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Base URL in Casdoor\nDESCRIPTION: Configuration setting in app.conf file to specify the base URL for static resources. This needs to be modified to point to your locally deployed static resources server.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/deploy-intranet.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nstaticBaseUrl = \"https://cdn.casbin.org\"\n```\n\n----------------------------------------\n\nTITLE: Adding Casdoor Dependency to pom.xml\nDESCRIPTION: This XML snippet adds the Casdoor Spring Boot Starter dependency to the pom.xml file. This dependency is required for integrating Casdoor authentication into the RuoYi-Cloud back-end application.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/RuoYi.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n    <dependency>\n        <groupId>org.casbin</groupId>\n        <artifactId>casdoor-spring-boot-starter</artifactId>\n        <version>1.2.0</version>\n    </dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding getUserByCasdoorName Method to SysLoginService\nDESCRIPTION: This Java code adds the `getUserByCasdoorName` method to the `SysLoginService`. This method retrieves a user from the RuoYi-Cloud database by their Casdoor username.  It returns the username if found, and null if not.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/RuoYi.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n    public String getUserByCasdoorName(String casdoorUsername) {\n        R<LoginUser> userResult = remoteUserService.getUserInfo(casdoorUsername, SecurityConstants.INNER);\n        if (StringUtils.isNull(userResult) || StringUtils.isNull(userResult.getData())) {\n            // If the user is not in the RuoYi-Cloud database but exists in Casdoor, create the user in the database\n            return null;\n        }\n        String username = userResult.getData().getSysUser().getUserName();\n        return username;\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Casdoor Docker Container with Environment Variables\nDESCRIPTION: Example of running the Casdoor Docker container using environment variables for configuration. This method is useful when mounting configuration files is not convenient.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/try-with-docker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -e driverName=mysql \\\n  -e dataSourceName='user:password@tcp(x.x.x.x:3306)/' \\\n  -p 8000:8000 \\\n  casbin/casdoor:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt.js Router with Middleware\nDESCRIPTION: This code snippet showcases the configuration of the Nuxt.js router to implement custom middleware. The middleware name is referenced within the router configuration to ensure it executes on the specified routes.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/nuxt.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    // other configuations\n\n    // what to add\n    router: {\n    middleware: ['myMiddleware'] // replace to your middleware name\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Opening Login Window in Qt Desktop App for Casdoor\nDESCRIPTION: This snippet demonstrates how to load and display the Casdoor login page in a Qt WebView widget. It uses the m_signin_url to load the login page and shows the WebView.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/desktop-sdks/qt-app.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// Load and display the login page of Casdoor\nm_webview->page()->load(*m_signin_url);\nm_webview->show();\n```\n\n----------------------------------------\n\nTITLE: Downloading OAuth2-Proxy Binary for Linux\nDESCRIPTION: This snippet demonstrates how to download the appropriate binary package for OAuth2-Proxy on a Linux AMD64 machine from the GitHub Releases page.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/C++/NginxCommunityVersion.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -O oauth2-proxy-linux.tar.gz https://github.com/oauth2-proxy/oauth2-proxy/releases/download/v7.5.1/oauth2-proxy-v7.5.1.linux-amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Authenticating API Requests with Access Key and Secret\nDESCRIPTION: This shell command demonstrates how to authenticate API requests using an access key and secret as GET parameters.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/public-api.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n/page?accessKey=<The user's access key>&accessSecret=<the user's access secret>\n```\n\n----------------------------------------\n\nTITLE: Running Casdoor All-in-One Docker Container\nDESCRIPTION: Command to run the Casdoor all-in-one Docker container, which includes both Casdoor and a MySQL database. This is suitable for testing purposes.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/try-with-docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8000:8000 casbin/casdoor-all-in-one\n```\n\n----------------------------------------\n\nTITLE: Configuring Casdoor Backend Properties in Apache IoTDB\nDESCRIPTION: Configuration file for setting up Casdoor authentication parameters in the application properties file. Includes endpoint, client credentials, organization, and application details.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/iotdb.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ncasdoor.endpoint = http://localhost:8000\ncasdoor.clientId = <client id from previous step>\ncasdoor.clientSecret = <client secret from previous step>\ncasdoor.certificate=<client certificate from previous step>\ncasdoor.organizationName=IoTDB\ncasdoor.applicationName=app-IoTDB\n```\n\n----------------------------------------\n\nTITLE: Setting User Session in Go\nDESCRIPTION: Example of setting a user session after successful authentication using the Beego web framework in Go.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/sdk.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntoken, err := auth.GetOAuthToken(code, state)\nif err != nil {\n    panic(err)\n}\n\nclaims, err := auth.ParseJwtToken(token.AccessToken)\nif err != nil {\n    panic(err)\n}\n\nclaims.AccessToken = token.AccessToken\nc.SetSessionUser(claims) // set session\n```\n\n----------------------------------------\n\nTITLE: Upgrading Casdoor Helm Deployment\nDESCRIPTION: Helm command to upgrade an existing Casdoor deployment to the latest version or specified configuration\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/try-with-helm.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade casdoor casdoor/casdoor-helm-charts\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway Routing with YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the routing for Spring Cloud Gateway, setting the application name and defining the API route that directs traffic to the relevant URI.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-cloud-gateway.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  application:\n    name: casdoor-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: api-route\n          uri: http://localhost:9091\n          predicates:\n            - Path=/api/**\n```\n\n----------------------------------------\n\nTITLE: Configuring CAS 2.0 Validation Filter\nDESCRIPTION: XML configuration for setting up CAS 2.0 validation filter in web.xml using the Cas20ProxyReceivingTicketValidationFilter class.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/cas.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<filter-name>CAS Validation Filter</filter-name>\n<filter-class>org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter</filter-class>\n```\n\n----------------------------------------\n\nTITLE: Configuring Casdoor in Pulsar Manager - INI File\nDESCRIPTION: This snippet sets up the Casdoor connection in the Pulsar Manager back-end by configuring the `application.properties` file. You must specify the Casdoor endpoint, client ID, client secret, certificate, organization name, and application name. The values for client ID, secret, and certificate should be obtained from your Casdoor setup. The application and organization names should match your Casdoor configuration.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/Pulsar-manager.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ncasdoor.endpoint = http://localhost:8000\ncasdoor.clientId = <client id from previous step>\ncasdoor.clientSecret = <client secret from previous step>\ncasdoor.certificate = <client certificate from previous step>\ncasdoor.organizationName = pulsar\ncasdoor.applicationName = app-pulsar\n```\n\n----------------------------------------\n\nTITLE: Edit GitLab Configuration File (Bash)\nDESCRIPTION: Opens the GitLab configuration file using the 'editor' command with sudo privileges. This allows for making necessary changes to integrate with Casdoor.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/ruby/gitlab.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo editor /etc/gitlab/gitlab.rb\n```\n\n----------------------------------------\n\nTITLE: Generating SAML Authentication URL in Go\nDESCRIPTION: Go code that generates a SAML authentication URL by parsing metadata from Casdoor, setting up certificate stores, and configuring SAML service provider parameters. The code handles XML parsing, certificate management, and builds the authentication URL for redirecting users to Casdoor login.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/saml/tencent-cloud.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    res, err := http.Get(\"your casdoor application saml metadata url\")\n    if err != nil {\n        panic(err)\n    }\n\n    rawMetadata, err := ioutil.ReadAll(res.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    metadata := &types.EntityDescriptor{}\n    err = xml.Unmarshal(rawMetadata, metadata)\n    if err != nil {\n        panic(err)\n    }\n\n    certStore := dsig.MemoryX509CertificateStore{\n        Roots: []*x509.Certificate{},\n    }\n\n    for _, kd := range metadata.IDPSSODescriptor.KeyDescriptors {\n        for idx, xcert := range kd.KeyInfo.X509Data.X509Certificates {\n            if xcert.Data == \"\" {\n                panic(fmt.Errorf(\"metadata certificate(%d) must not be empty\", idx))\n            }\n            certData, err := base64.StdEncoding.DecodeString(xcert.Data)\n            if err != nil {\n                panic(err)\n            }\n\n            idpCert, err := x509.ParseCertificate(certData)\n            if err != nil {\n                panic(err)\n            }\n\n            certStore.Roots = append(certStore.Roots, idpCert)\n        }\n    }\n\n    randomKeyStore := dsig.RandomKeyStoreForTest()\n\n    sp := &saml2.SAMLServiceProvider{\n        IdentityProviderSSOURL:      metadata.IDPSSODescriptor.SingleSignOnServices[0].Location,\n        IdentityProviderIssuer:      metadata.EntityID,\n        ServiceProviderIssuer:       \"https://cloud.tencent.com\",\n        AssertionConsumerServiceURL: \"https://cloud.tencent.com/login/saml\",\n        SignAuthnRequests:           true,\n        AudienceURI:                 \"https://cloud.tencent.com\",\n        IDPCertificateStore:         &certStore,\n        SPKeyStore:                  randomKeyStore,\n    }\n\n    println(\"Visit this URL To Authenticate:\")\n    authURL, err := sp.BuildAuthURL(\"\")\n    if err != nil {\n        panic(err)\n    }\n\n    println(authURL)\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Token Introspection Endpoint - OAuth 2.0 - JSON\nDESCRIPTION: This snippet outlines the expected response after performing a token introspection request, indicating whether the token is active and providing client details.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/oauth.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"active\": true,\n    \"client_id\": \"c58c...\",\n    \"username\": \"admin\",\n    \"token_type\": \"Bearer\",\n    \"exp\": 1647138242,\n    \"iat\": 1646533442,\n    \"nbf\": 1646533442,\n    \"sub\": \"7a6b4a8a-b731-48da-bc44-36ae27338817\",\n    \"aud\": [\n        \"c58c...\"\n    ],\n    \"iss\": \"http://localhost:8000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including Casdoor Dependency for Apache Maven\nDESCRIPTION: This snippet demonstrates how to add the Casdoor Spring Boot starter dependency in an Apache Maven project, which is required to utilize Casdoor functionalities within the Spring Cloud Gateway application.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-cloud-gateway.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.casbin</groupId>\n    <artifactId>casdoor-spring-boot-starter</artifactId>\n    <version>1.x.y</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Get All Objects via Casdoor API (curl)\nDESCRIPTION: This snippet demonstrates how to use the `/api/get-all-objects` endpoint to retrieve all objects defined in Casdoor. It requires the application client ID and secret for Basic Authentication.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/permission/exposed-casbin-apis.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location --request GET 'http://localhost:8000/api/get-all-objects' \\\n--header 'Authorization: Basic <Your_Application_ClientId> <Your_Application_ClientSecret>'\n```\n\n----------------------------------------\n\nTITLE: Rendering Casdoor Login Card in MDX\nDESCRIPTION: This code snippet renders a Casdoor login card component within a styled div. It demonstrates how to integrate Casdoor authentication UI into a web page.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/application/config.md#2025-04-21_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<div className={styles.signingradientborder}>\n  <CasdoorCard src=\"https://door.casdoor.com/login/oauth/authorize?client_id=014ae4bd048734ca2dea&response_type=code&redirect_uri=https://forum.casbin.com/callback&scope=read&state=app-casbin-forum\" height= \"680\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Get All Roles via Casdoor API (curl)\nDESCRIPTION: This snippet demonstrates how to use the `/api/get-all-roles` endpoint to retrieve all roles defined in Casdoor. It requires the application client ID and secret for Basic Authentication.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/permission/exposed-casbin-apis.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location --request GET 'http://localhost:8000/api/get-all-roles' \\\n--header 'Authorization: Basic <Your_Application_ClientId> <Your_Application_ClientSecret>'\n```\n\n----------------------------------------\n\nTITLE: WeCom OAuth Configuration Parameters Table\nDESCRIPTION: Markdown table showing the required parameters for configuring a WeCom OAuth provider, including Sub type, Method, Client ID, Client secret, and Agent ID.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/oauth/weCom.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter    | Description                                   |\n|:------------:|:--------------------------------------------:|\n| Sub type     | Internal or Third-party                       |\n| Method       | Silent or Normal                              |\n| Client ID    | The enterprise CorpID                         |\n| Client secret| The enterprise CorpSecret                      |\n| Agent ID     | Application agentid                           |\n```\n\n----------------------------------------\n\nTITLE: Modifying Created Function in JavaScript\nDESCRIPTION: This JavaScript code snippet modifies the `created` function to retrieve the code and state from the URL parameters. It then calls the `handleLogin` function if both code and state are present, handling the authentication process with Casdoor.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/RuoYi.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    created() {\n        let url = window.document.location.href; // Get the URL\n        let u = new URL(url);\n        this.loginForm.code = u.searchParams.get('code'); // Get the code and state\n        this.loginForm.state = u.searchParams.get('state');\n        if (this.loginForm.code != null && this.loginForm.state != null) { // If code and state are not null, execute handleLogin\n            this.handleLogin();\n        }  \n    }\n```\n\n----------------------------------------\n\nTITLE: Get All Objects Response (JSON)\nDESCRIPTION: This JSON snippet represents the expected response from the `/api/get-all-objects` endpoint. It returns an array of strings, where each string represents an object.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/permission/exposed-casbin-apis.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"app-built-in\"\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Casdoor Client Secret in Envoy Token Secret YAML\nDESCRIPTION: Modify the token-secret.yaml file to include the Client Secret obtained from Casdoor. This secret is used for secure communication between Envoy and Casdoor.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/C++/Envoy.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninline_string: \"your-client-secret-from-casdoor\"\n```\n\n----------------------------------------\n\nTITLE: Get All Actions via Casdoor API (curl)\nDESCRIPTION: This snippet shows how to use the `/api/get-all-actions` endpoint to retrieve all actions defined in Casdoor. It requires the application client ID and secret for Basic Authentication.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/permission/exposed-casbin-apis.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location --request GET 'http://localhost:8000/api/get-all-actions' \\\n--header 'Authorization: Basic <Your_Application_ClientId> <Your_Application_ClientSecret>'\n```\n\n----------------------------------------\n\nTITLE: Expected UserInfo Response Format\nDESCRIPTION: JSON response format that the custom provider must return when requesting user information.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/oauth/CustomProvider.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"admin\",\n  \"preferred_username\": \"Admin\",\n  \"email\": \"admin@example.com\",\n  \"picture\": \"https://casbin.org/img/casbin.svg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Login Panel Appearance with CSS in Casdoor\nDESCRIPTION: This CSS snippet refines the styling of the login panel and form within a Casdoor application. It sets the border-radius, background color, and box-shadow for the login panel and adds padding to the login form to improve its appearance. The code snippet should be placed in the `Form CSS` field in the Casdoor application settings.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/application/ui-customization.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n\"<style>\n  .login-panel{\n    border-radius: 10px;\n    background-color: #ffffff;\n    box-shadow: 0 0 30px 20px rgba(0, 0, 0, 0.20);\n  }\n  .login-form {\n    padding: 30px;\n  }\n</style>\"\n```\n\n----------------------------------------\n\nTITLE: Token Request Command\nDESCRIPTION: cURL command used by Casdoor to request an access token from the custom provider using the authorization code.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/oauth/CustomProvider.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -u \"{ClientID}:{ClientSecret}\" --data-binary \"code={code}&grant_type=authorization_code&redirect_uri=https://{your-casdoor-hostname}/callback\" https://door.casdoor.com/api/login/oauth/access_token\n```\n\n----------------------------------------\n\nTITLE: Curl Command for User API with Access Key and Secret\nDESCRIPTION: This curl command shows how to make an API request to the user endpoint using an access key and secret for authentication.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/public-api.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location 'http://door.casdoor.com/api/user?accessKey=b86db9dc-6bd7-4997-935c-af480dd2c796&accessSecret=79911517-fc36-4093-b115-65a9741f6b14'\n```\n\n----------------------------------------\n\nTITLE: Twitter Configuration Field Mapping\nDESCRIPTION: A table showing the mapping between Casdoor provider fields and corresponding Twitter credentials.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/notification/twitter.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name            | Name in Twitter     |\n|-----------------|---------------------|\n| Client ID       | API Key             |\n| Client secret   | API Secret          |\n| Client ID 2     | Access Token        |\n| Client secret 2 | Access Token Secret |\n| Chat ID         | Twitter ID          |\n```\n\n----------------------------------------\n\nTITLE: SAML Provider Configuration Table\nDESCRIPTION: Documentation table showing the required fields for configuring a SAML Custom Provider in Casdoor. Includes Category, Type, Favicon URL, and Metadata fields with their descriptions.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/saml/custom.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field | Description |\n| ---- | ---- |\n| Category | Choose `SAML` |\n| Type | Choose `Custom` |\n| Favicon.URL | The URL of the IDP logo |\n| Metadata | The metadata of IDP |\n```\n\n----------------------------------------\n\nTITLE: Cloning NGINX OpenID Connect Repository\nDESCRIPTION: Command to clone the nginx-openid-connect GitHub repository, which contains the necessary configuration files for setting up OpenID Connect with NGINX Plus.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/C++/Nginx.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nginxinc/nginx-openid-connect\n```\n\n----------------------------------------\n\nTITLE: MetaMask Configuration Table\nDESCRIPTION: Configuration parameters table showing required settings for MetaMask Web3 provider setup in Casdoor.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/web3/metamask.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|    Name       |   Description          |\n|      ----     |   ----                 |  \n|Category       |   Choose `Web3`        |\n|Type           |   Choose `MetaMask`    |\n```\n\n----------------------------------------\n\nTITLE: Configuring HMAC Secret for Envoy\nDESCRIPTION: Modify the hmac-secret.yaml file with a unique, long, and secure phrase. This secret is used for generating and validating HMAC signatures in Envoy.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/C++/Envoy.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninline_bytes: \"your-unique-long-and-secure-phrase\"\n```\n\n----------------------------------------\n\nTITLE: Installing Casdoor JS SDK\nDESCRIPTION: This shell command installs the `casdoor-js-sdk` package using either npm or yarn. This SDK is used in the frontend to handle the interaction with the Casdoor server. Choose the appropriate command based on your project's package manager.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-security/spring-security-filter.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"npm i casdoor-js-sdk \n# or\nyarn add casdoor-js-sdk\"\n```\n\n----------------------------------------\n\nTITLE: Listing JWT Token Generation Options in Casdoor\nDESCRIPTION: This snippet lists the four options available for generating JWT tokens in Casdoor after logging into the application. Each option generates a token with different levels of user information.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/token/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `JWT`\n- `JWT-Empty`\n- `JWT-Custom`\n- `JWT-Standard`\n```\n\n----------------------------------------\n\nTITLE: Exporting Casdoor Configuration\nDESCRIPTION: Command to run the Go test that exports all Casdoor configuration data to a file.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/data-initialization.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./object -v -run TestDumpToFile\n```\n\n----------------------------------------\n\nTITLE: SAML Configuration URLs Table\nDESCRIPTION: Configuration table showing the required Redirect URLs and SAML Reply URLs for both Administrator and User Authentication in Appgate integration.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/saml/appgate.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Administrator Authentication                                     | User Authentication                                          |\n|:-----------------------------------------------------------------|--------------------------------------------------------------|\n| Redirect URL = \"AppGate\"                                         | Redirect URL = \"AppGate Client\"                              |\n| SAML Reply URL = https://mycontroller.your-site-url.com/admin/saml | SAML Reply URL = https://redirectserver.your-site-url.com/saml |\n```\n\n----------------------------------------\n\nTITLE: Setting CAS Server Login URL\nDESCRIPTION: XML configuration for defining the CAS server login URL parameter in web.xml.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/cas.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<param-name>casServerLoginUrl</param-name>\n<param-value>http://door.casdoor.com/cas/casbin/cas-java-app/login</param-value>\n```\n\n----------------------------------------\n\nTITLE: Administrator Authentication Configuration Table\nDESCRIPTION: Configuration table detailing the required fields and values for setting up Administrator Authentication in Appgate.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/saml/appgate.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                    | Administrator Authentication                              |\n|:------------------:|-----------------------------------------------------------|\n|        Name        | Enter a unique name, e.g. \"Casdoor SAML Admin\"            |\n| Single Sign-on URL | See below                                                 |\n|       Issuer       | See below                                                 |\n|      Audience      | Type in the **Redirect URL** from the Casdoor application |\n| Public Certificate | See below                                                 |\n```\n\n----------------------------------------\n\nTITLE: UserInfo Request Command\nDESCRIPTION: cURL command used by Casdoor to request user information using the access token.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/oauth/CustomProvider.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET -H \"Authorization: Bearer {accessToken}\" https://door.casdoor.com/api/userinfo\n```\n\n----------------------------------------\n\nTITLE: Curl Command for API Authentication\nDESCRIPTION: Shell command demonstrating how to authenticate with the Kubernetes API server using a bearer token.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/go/kubernetes.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://www.xxx.com -k -H \"Authorization: Bearer $(id_token)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom DB Migration in Go using xorm\nDESCRIPTION: This code snippet demonstrates how to handle field renaming in a database using xorm's migrate package. It shows the process of filling a new 'ptype' field with data from an old 'p_type' field in the CasbinRule table.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/db-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmigrations := []*migrate.Migration{\n        {\n            ID: \"CasbinRule--fill ptype field with p\",\n            Migrate: func(tx *xorm.Engine) error {\n                _, err := tx.Cols(\"ptype\").Update(&xormadapter.CasbinRule{\n                    Ptype: \"p\",\n                })\n                return err\n            },\n            Rollback: func(tx *xorm.Engine) error {\n                return tx.DropTables(&xormadapter.CasbinRule{})\n            },\n        },\n    }\n    m.Migrate()\n```\n\n----------------------------------------\n\nTITLE: Enabling and Styling Casdoor Side Panel with HTML & CSS\nDESCRIPTION: This HTML snippet, combined with embedded CSS, defines the structure and style of a side panel in a Casdoor application. It creates a visually appealing area to display a logo, brand name (SSO), and an additional image. The code is designed to be placed in the `Side panel HTML` field within Casdoor's application configuration.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/application/ui-customization.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n\"<style>\n  .left-model{\n    text-align: center;\n    padding: 30px;\n    background-color: #8ca0ed;\n    position: absolute;\n    transform: none;\n    width: 100%;\n    height: 100%;\n  }\n  .side-logo{\n    display: flex;\n    align-items: center;\n  }\n  .side-logo span {\n    font-family: Montserrat, sans-serif;\n    font-weight: 900;\n    font-size: 2.4rem;\n    line-height: 1.3;\n    margin-left: 16px;\n    color: #404040;\n  }\n  .img{\n    max-width: none;\n    margin: 41px 0 13px;\n  }\n</style>\n<div class=\"left-model\">\n  <span class=\"side-logo\"> <img src=\"https://cdn.casbin.org/img/casdoor-logo_1185x256.png\" alt=\"Casdoor\" style=\"width: 120px\"> \n    <span>SSO</span> \n  </span>\n  <div class=\"img\">\n    <img src=\"https://cdn.casbin.org/img/casbin.svg\" alt=\"Casdoor\"/>\n  </div>\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zentao OIDC Connection\nDESCRIPTION: Set up Casdoor client credentials and issuer in Zentao OIDC configuration\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/php/zentao.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$config->oidc->clientId = \"<Your ClientId>\";\n$config->oidc->clientSecret = \"<Your ClientSecret>\";\n$config->oidc->issuer = \"http://localhost:8000\";\n```\n\n----------------------------------------\n\nTITLE: Restarting MinIO Service\nDESCRIPTION: Command to restart the MinIO service after configuring OpenID Connect settings.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/go/minio.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmc admin service restart myminio\n```\n\n----------------------------------------\n\nTITLE: Default Admin Login Credentials\nDESCRIPTION: This snippet provides the default credentials to log into the Casdoor dashboard after building the application. It displays the username and password needed for login. Ensure to change these credentials in a production environment for security.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/server-installation.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nadmin\n123\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for Casdoor Authentication\nDESCRIPTION: XML configuration for the AndroidManifest.xml file, adding necessary permissions and intent for Casdoor authentication in the Android platform.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/desktop-sdks/maui-app.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <application android:allowBackup=\"true\" android:icon=\"@mipmap/appicon\" android:roundIcon=\"@mipmap/appicon_round\" android:supportsRtl=\"true\"></application>\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <queries>\n        <intent>\n            <action android:name=\"android.support.customtabs.action.CustomTabsService\" />\n        </intent>\n    </queries>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Styling Login Panel with CSS in Casdoor\nDESCRIPTION: This CSS snippet is used to style the login panel in a Casdoor application. It sets padding, border-radius, background color, and box-shadow to customize the appearance of the login form. This code should be pasted into the `Form CSS` field in the Casdoor application settings.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/application/ui-customization.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\"<style>\n.login-panel{\n    padding: 40px 30px 0 30px;\n    border-radius: 10px;\n    background-color: #ffffff;\n    box-shadow: 0 0 30px 20px rgba(0, 0, 0, 0.20);\n}\n</style>\"\n```\n\n----------------------------------------\n\nTITLE: Listing Token Fields in Casdoor\nDESCRIPTION: This snippet enumerates the available token fields in Casdoor, including owner, name, creation time, application, organization, user, code, access token, expiration, scope, and token type.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/token/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `Owner`\n- `Name`\n- `CreatedTime`\n- `Application`\n- `Organization`\n- `User`\n- `Code`\n- `AccessToken`\n- `ExpireIn` (Tokens will expire in hours)\n- `Scope` (Scope of authorization)\n- `TokenType` (e.g., `Bearer` type)\n```\n\n----------------------------------------\n\nTITLE: OAuth Authorization Request URL for Casdoor\nDESCRIPTION: URL structure for initiating the OAuth flow with Casdoor to obtain an authorization code. This URL includes the client ID, response type, redirect URI, scope, and state parameters.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/Haskell/Hasura.md#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttp://localhost:8000/login/oauth/authorize?client_id=<client ID>&response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A8080%2Flogin&scope=read&state=app-built-in<public certificate>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Native Project\nDESCRIPTION: These commands install the necessary dependencies for the React Native project. `yarn install` installs the JavaScript dependencies, while `pod install` installs the iOS dependencies, essential for running the application on iOS devices or simulators.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/mobile-sdks/react-native-app.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"cd casdoor-react-native-example\nyarn install\ncd ios/\npod install\"\n```\n\n----------------------------------------\n\nTITLE: Setting CAS Server URL Prefix\nDESCRIPTION: XML configuration for defining the CAS server URL prefix parameter in web.xml.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/cas.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<param-name>casServerUrlPrefix</param-name>\n<param-value>http://door.casdoor.com/cas/casbin/cas-java-app</param-value>\n```\n\n----------------------------------------\n\nTITLE: Basic Login Page HTML\nDESCRIPTION: This HTML snippet defines a simple login page for a Spring Boot application that redirects to Casdoor for authentication. It contains a welcome message and a \"Login\" button, which redirects the user to `/foos/` which then triggers the OAuth2 flow.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-security/spring-security-oauth.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <title>Spring OAuth Client Thymeleaf - 1</title>\n    <link rel=\"stylesheet\"\n        href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" />\n    </head>\n    <body>\n        <nav\n            class=\"navbar navbar-expand-lg navbar-light bg-light shadow-sm p-3 mb-5\">\n            <a class=\"navbar-brand\" th:href=\"@{/foos/}\">Spring OAuth Client\n                Thymeleaf - 1</a>\n        </nav>\n        <div class=\"container\">\n            <label>Welcome!</label> <br /> <a th:href=\"@{/foos/}\"\n                class=\"btn btn-primary\">Login</a>\n        </div>\n    </body>\n    </html>\n```\n\n----------------------------------------\n\nTITLE: Deploying Casdoor with Docker Compose\nDESCRIPTION: Command to deploy Casdoor using Docker Compose. This method sets up both Casdoor and a separate database container.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/try-with-docker.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Build and Run Casdoor backend with Go\nDESCRIPTION: This code snippet demonstrates how to build and run the Casdoor backend program using Go. The `go build` compiles the `main.go` file and `./main` executes the compiled binary.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/nginx.mdx#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo build && ./main\n```\n\n----------------------------------------\n\nTITLE: Azure ACS Email Configuration Table\nDESCRIPTION: Mapping table showing the relationship between Casdoor email provider fields and their corresponding Azure ACS values. The From Address must be a verified email domain.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/email/azureACS.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name         | Name in Azure ACS |\n|--------------|-------------------|\n| From Address |                   |\n| Secret key   | Private Key       |\n| Host         | Endpoint          |\n```\n\n----------------------------------------\n\nTITLE: Defining User Class in Go\nDESCRIPTION: This snippet defines the User class, which captures essential details for user management within Casdoor. The class includes attributes such as Owner, Name, CreatedTime, UpdatedTime and multiple social media identifiers. Fields like Id and Type help identify users distinctly, allowing for robust user account management. It integrates both account details and permissions within a single structure through various properties.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/core-concepts.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n    Owner       string `xorm:\"varchar(100) notnull pk\" json:\"owner\"`\n    Name        string `xorm:\"varchar(100) notnull pk\" json:\"name\"`\n    CreatedTime string `xorm:\"varchar(100)\" json:\"createdTime\"`\n    UpdatedTime string `xorm:\"varchar(100)\" json:\"updatedTime\"`\n\n    Id                string   `xorm:\"varchar(100)\" json:\"id\"`\n    Type              string   `xorm:\"varchar(100)\" json:\"type\"`\n    Password          string   `xorm:\"varchar(100)\" json:\"password\"`\n    PasswordSalt      string   `xorm:\"varchar(100)\" json:\"passwordSalt\"`\n    DisplayName       string   `xorm:\"varchar(100)\" json:\"displayName\"`\n    Avatar            string   `xorm:\"varchar(500)\" json:\"avatar\"`\n    PermanentAvatar   string   `xorm:\"varchar(500)\" json:\"permanentAvatar\"`\n    Email             string   `xorm:\"varchar(100) index\" json:\"email\"`\n    Phone             string   `xorm:\"varchar(100) index\" json:\"phone\"`\n    Location          string   `xorm:\"varchar(100)\" json:\"location\"`\n    Address           []string `json:\"address\"`\n    Affiliation       string   `xorm:\"varchar(100)\" json:\"affiliation\"`\n    Title             string   `xorm:\"varchar(100)\" json:\"title\"`\n    IdCardType        string   `xorm:\"varchar(100)\" json:\"idCardType\"`\n    IdCard            string   `xorm:\"varchar(100) index\" json:\"idCard\"`\n    Homepage          string   `xorm:\"varchar(100)\" json:\"homepage\"`\n    Bio               string   `xorm:\"varchar(100)\" json:\"bio\"`\n    Tag               string   `xorm:\"varchar(100)\" json:\"tag\"`\n    Region            string   `xorm:\"varchar(100)\" json:\"region\"`\n    Language          string   `xorm:\"varchar(100)\" json:\"language\"`\n    Gender            string   `xorm:\"varchar(100)\" json:\"gender\"`\n    Birthday          string   `xorm:\"varchar(100)\" json:\"birthday\"`\n    Education         string   `xorm:\"varchar(100)\" json:\"education\"`\n    Score             int      `json:\"score\"`\n    Ranking           int      `json:\"ranking\"`\n    IsDefaultAvatar   bool     `json:\"isDefaultAvatar\"`\n    IsOnline          bool     `json:\"isOnline\"`\n    IsAdmin           bool     `json:\"isAdmin\"`\n    IsGlobalAdmin     bool     `json:\"isGlobalAdmin\"`\n    IsForbidden       bool     `json:\"isForbidden\"`\n    IsDeleted         bool     `json:\"isDeleted\"`\n    SignupApplication string   `xorm:\"varchar(100)\" json:\"signupApplication\"`\n    Hash              string   `xorm:\"varchar(100)\" json:\"hash\"`\n    PreHash           string   `xorm:\"varchar(100)\" json:\"preHash\"`\n\n    CreatedIp      string `xorm:\"varchar(100)\" json:\"createdIp\"`\n    LastSigninTime string `xorm:\"varchar(100)\" json:\"lastSigninTime\"`\n    LastSigninIp   string `xorm:\"varchar(100)\" json:\"lastSigninIp\"`\n\n    Github   string `xorm:\"varchar(100)\" json:\"github\"`\n    Google   string `xorm:\"varchar(100)\" json:\"google\"`\n    QQ       string `xorm:\"qq varchar(100)\" json:\"qq\"`\n    WeChat   string `xorm:\"wechat varchar(100)\" json:\"wechat\"`\n    Facebook string `xorm:\"facebook varchar(100)\" json:\"facebook\"`\n    DingTalk string `xorm:\"dingtalk varchar(100)\" json:\"dingtalk\"`\n    Weibo    string `xorm:\"weibo varchar(100)\" json:\"weibo\"`\n    Gitee    string `xorm:\"gitee varchar(100)\" json:\"gitee\"`\n    LinkedIn string `xorm:\"linkedin varchar(100)\" json:\"linkedin\"`\n    Wecom    string `xorm:\"wecom varchar(100)\" json:\"wecom\"`\n    Lark     string `xorm:\"lark varchar(100)\" json:\"lark\"`\n    Gitlab   string `xorm:\"gitlab varchar(100)\" json:\"gitlab\"`\n    Apple    string `xorm:\"apple varchar(100)\" json:\"apple\"`\n    AzureAD  string `xorm:\"azuread varchar(100)\" json:\"azuread\"`\n    Slack    string `xorm:\"slack varchar(100)\" json:\"slack\"`\n\n    Ldap       string            `xorm:\"ldap varchar(100)\" json:\"ldap\"`\n    Properties map[string]string `json:\"properties\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Casdoor Frontend in Development Mode\nDESCRIPTION: This command sequence illustrates how to navigate to the frontend directory of Casdoor and start the React application using Yarn in development mode on port 7001.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/server-installation.mdx#2025-04-21_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\ncd web\nyarn install\nyarn start\n```\n\n----------------------------------------\n\nTITLE: User Resource Schema JSON Representation for Casdoor SCIM Implementation\nDESCRIPTION: This JSON object represents a User Resource Schema in SCIM format for Casdoor implementation. It includes core user attributes, enterprise extension, and Casdoor-specific mappings. The 'organization' attribute is required and passed in the enterprise extension.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/scim/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"active\": true,\n    \"addresses\": [\n        {\n            \"country\": \"CN\",\n            \"locality\": \"Shanghai\",\n            \"region\": \"CN\"\n        }\n    ],\n    \"displayName\": \"Bob~\",\n    \"emails\": [\n        {\n            \"value\": \"test1@casdoor.com\"\n        }\n    ],\n    \"externalId\": \"1234123543234234\",\n    \"id\": \"ceacbcb6-40d0-48f1-af23-0990232d570a\",\n    \"meta\": {\n        \"resourceType\": \"User\",\n        \"created\": \"2023-10-08T23:51:55+08:00\",\n        \"lastModified\": \"2023-10-12T20:38:49+08:00\",\n        \"location\": \"Users/ceacbcb6-40d0-48f1-af23-0990232d570a\",\n        \"version\": \"2023-10-12T20:38:49+08:00\"\n    },\n    \"name\": {\n        \"familyName\": \"bob\",\n        \"formatted\": \"alice bob\",\n        \"givenName\": \"alice\"\n    },\n    \"nickName\": \"Bob~\",\n    \"phoneNumbers\": [\n        {\n            \"value\": \"18700006475\"\n        }\n    ],\n    \"photos\": [\n        {\n            \"value\": \"https://cdn.casbin.org/img/casbin.svg\"\n        }\n    ],\n    \"profileUrl\": \"https://test.com/profile/built-in/scim_test_user2\",\n    \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:User\",\n        \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\n    ],\n    \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\n        \"organization\": \"built-in\"\n    },\n    \"userName\": \"scim_test_user2\",\n    \"userType\": \"normal-user\"\n}\n```\n\n----------------------------------------\n\nTITLE: UserInfo Server URL for Flarum Configuration\nDESCRIPTION: This snippet indicates the UserInfo server URL for authentication purposes in Flarum.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/php/Flarum.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nUserInfo server URL: \"http://CASDOOR_HOSTNAME/api/get-account\"\n```\n\n----------------------------------------\n\nTITLE: Install dependencies and build frontend with npm\nDESCRIPTION: This code snippet shows how to install dependencies and build the front end static files using npm package manager. It uses `npm install` to install dependencies and `npm run build` to build the frontend.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/nginx.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install && npm run build\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Casdoor from Kubernetes\nDESCRIPTION: Helm command to completely remove the Casdoor deployment from a Kubernetes cluster\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/try-with-helm.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm delete casdoor\n```\n\n----------------------------------------\n\nTITLE: Reload Nginx configuration\nDESCRIPTION: This command reloads the Nginx configuration without downtime.  This ensures that the changes made to the `nginx.conf` file are applied.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/nginx.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnginx -s reload\n```\n\n----------------------------------------\n\nTITLE: OAuth Callback URL Format\nDESCRIPTION: The callback URL format that the custom provider should redirect to after authorization.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/oauth/CustomProvider.md#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttps://{your-casdoor-hostname}/callback?code={code}\n```\n\n----------------------------------------\n\nTITLE: Running Casdoor Docker Container with Mounted Configuration\nDESCRIPTION: Command to run the Casdoor Docker container with a mounted configuration file. This method allows for custom configuration of the Casdoor instance.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/try-with-docker.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run  -p 8000:8000 -v /folder/of/app.conf:/conf casbin/casdoor:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Casdoor Vue SDK via NPM or Yarn\nDESCRIPTION: Commands for installing the Casdoor Vue SDK using either NPM or Yarn package managers. This is the first step required before initializing the SDK in your Vue application.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/vue-sdk.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# NPM\nnpm install casdoor-vue-sdk\n\n# Yarn\nyarn add casdoor-vue-sdk\n```\n\n----------------------------------------\n\nTITLE: Install dependencies and build frontend with Yarn\nDESCRIPTION: This code snippet shows how to install dependencies and build the front end static files using Yarn package manager. It uses `yarn install` to install dependencies and `yarn run build` to build the frontend.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/nginx.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install && yarn run build\n```\n\n----------------------------------------\n\nTITLE: Installing Casdoor SDK via Yarn\nDESCRIPTION: Command to install the Casdoor JavaScript SDK using Yarn package manager.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/nextjs.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add casdoor-js-sdk\n```\n\n----------------------------------------\n\nTITLE: Cloning Zentao OIDC Module\nDESCRIPTION: Clone the zentao-oidc repository to integrate OIDC authentication with Zentao\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/php/zentao.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ngit clone https://github.com/casdoor/zentao-oidc.git\n```\n\n----------------------------------------\n\nTITLE: Fixing Vue-Demi Integration Issues\nDESCRIPTION: Command to resolve redirecting issues when the postinstall hook doesn't trigger or after updating Vue versions. This uses the vue-demi-fix utility to ensure proper compatibility between Vue versions.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/vue-sdk.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx vue-demi-fix\n```\n\n----------------------------------------\n\nTITLE: Google Application Default Credentials JSON Structure\nDESCRIPTION: Example structure of the Google Application credentials JSON required for integrating Google Chat with Casdoor. This JSON contains service account details including project ID, private key, and client information needed for authentication.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/notification/googleChat.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"\",\n  \"private_key_id\": \"\",\n  \"private_key\": \"\",\n  \"client_email\": \"\",\n  \"client_id\": \"\",\n  \"auth_uri\": \"\",\n  \"token_uri\": \"\",\n  \"auth_provider_x509_cert_url\": \"\",\n  \"client_x509_cert_url\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Casdoor SDK via NPM\nDESCRIPTION: Command to install the Casdoor JavaScript SDK using NPM package manager.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/nextjs.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install casdoor-js-sdk\n```\n\n----------------------------------------\n\nTITLE: Token Server URL for Flarum Configuration\nDESCRIPTION: This snippet provides the Token server URL used in the configuration of Flarum to enable OAuth2 authentication.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/php/Flarum.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nToken server URL: \"http://CASDOOR_HOSTNAME/api/login/oauth/access_token\"\n```\n\n----------------------------------------\n\nTITLE: Get All Roles Response (JSON)\nDESCRIPTION: This JSON snippet represents the expected response from the `/api/get-all-roles` endpoint. It returns an array of strings, where each string represents a role.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/permission/exposed-casbin-apis.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"role_kcx66l\"\n]\n```\n\n----------------------------------------\n\nTITLE: Authenticating API Requests with Username and Password\nDESCRIPTION: This shell command demonstrates how to authenticate API requests using a username and password as GET parameters. Note that this method is not recommended for security reasons.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/public-api.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n/page?username=<The user's organization name>/<The user name>&password=<the user's password>\n```\n\n----------------------------------------\n\nTITLE: Configuring PayPal Provider Settings Table\nDESCRIPTION: Configuration table showing the required fields and corresponding values for setting up a PayPal payment provider in Casdoor.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/payment/paypal.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|    Name       |   Name in PayPal |\n|      ----     |   ----          |  \n|Category       |   Choose `Payment`                     |\n|Type           |   Choose `PayPal`                      |\n|Client ID      |   Use the `Client ID` obtained from Step 1      |\n|Client secret  |   Use the `Secret key` obtained from Step 1     |\n```\n\n----------------------------------------\n\nTITLE: Batch Enforce Permission Check Response (JSON)\nDESCRIPTION: This JSON snippet illustrates the response from the `/api/batch-enforce` endpoint. The `data` field contains an array of boolean arrays, where each inner array represents the results of a single permission check. `true` indicates that the user has the specified permission.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/permission/exposed-casbin-apis.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": \"ok\",\n    \"msg\": \"\",\n    \"sub\": \"\",\n    \"name\": \"\",\n    \"data\": [\n        [\n            true,\n            true,\n            false\n        ]\n    ],\n    \"data2\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Casdoor JS SDK via NPM or Yarn\nDESCRIPTION: Commands to install the Casdoor JavaScript SDK using either NPM or Yarn package managers.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/sdk.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install casdoor-js-sdk\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add casdoor-js-sdk\n```\n\n----------------------------------------\n\nTITLE: Authorization Server URL for Flarum Configuration\nDESCRIPTION: This snippet specifies the Authorization server URL used in the Flarum OAuth2 integration.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/php/Flarum.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nAuthorization server URL: \"http://CASDOOR_HOSTNAME/login/oauth/authorize\"\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX JavaScript Module on Debian/Ubuntu\nDESCRIPTION: Command for installing the NGINX JavaScript module on Debian and Ubuntu systems, which is required for handling the interaction between NGINX Plus and the identity provider.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/C++/Nginx.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install nginx-plus-module-njs\n```\n\n----------------------------------------\n\nTITLE: Get All Actions Response (JSON)\nDESCRIPTION: This JSON snippet illustrates the response from the `/api/get-all-actions` endpoint. It returns an array of strings, where each string represents an action.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/permission/exposed-casbin-apis.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"read\",\n    \"write\",\n    \"admin\"\n]\n```\n\n----------------------------------------\n\nTITLE: Testing OAuth2-Proxy Installation\nDESCRIPTION: Run the command to verify if OAuth2-Proxy has been installed correctly and check the version number in the output.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/C++/NginxCommunityVersion.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ~\noauth2-proxy --version\n```\n\n----------------------------------------\n\nTITLE: Running React Native App on iOS\nDESCRIPTION: These commands start the React Native development server and run the application on an iOS simulator or connected device. `react-native start` starts the Metro bundler, and `react-native run-ios` builds and launches the app on iOS.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/mobile-sdks/react-native-app.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"cd casdoor-react-native-example\nreact-native start\nreact-native run-ios\"\n```\n\n----------------------------------------\n\nTITLE: Web Page for Displaying Protected Resources\nDESCRIPTION: This HTML snippet defines a Thymeleaf template for displaying the protected resources (Foos). It displays a table of Foos with their IDs and names.  It also shows the authenticated user's name using Spring Security's `sec:authentication` tag.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-security/spring-security-oauth.mdx#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <title>Spring OAuth Client Thymeleaf - 1</title>\n    <link rel=\"stylesheet\"\n        href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" />\n    </head>\n    <body>\n        <nav\n            class=\"navbar navbar-expand-lg navbar-light bg-light shadow-sm p-3 mb-5\">\n            <a class=\"navbar-brand\" th:href=\"@{/foos/}\">Spring OAuth Client\n                Thymeleaf -1</a>\n            <ul class=\"navbar-nav ml-auto\">\n                <li class=\"navbar-text\">Hi, <span sec:authentication=\"name\">preferred_username</span>&nbsp;&nbsp;&nbsp;</li>\n            </ul>\n        </nav>\n        <div class=\"container\">\n            <h1>All Foos:</h1>\n            <table class=\"table table-bordered table-striped\">\n                <thead>\n                    <tr>\n                        <td>ID</td>\n                        <td>Name</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr th:if=\"${foos.empty}\">\n                        <td colspan=\"4\">No foos</td>\n                    </tr>\n                    <tr th:each=\"foo : ${foos}\">\n                        <td>\n                            <span th:text=\"${foo.id}\">ID</span>\n                        </td>\n                        <td>\n                            <span th:text=\"${foo.name}\">Name</span>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </body>\n    </html>\n```\n\n----------------------------------------\n\nTITLE: Commenting Out Request Unsetting\nDESCRIPTION: Modify router configuration to prevent request unsetting\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/php/zentao.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function setSuperVars()\n//  unset($_REQUEST);\n```\n\n----------------------------------------\n\nTITLE: Modifying Provider ID in Go Test Function\nDESCRIPTION: This Go code snippet shows how to modify the storage provider ID in the test function for deploying static files. The provider ID should be in the format '<owner>/<name>'.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/deploy-cdn.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc TestDeployStaticFiles(t *testing.T) {\n    provider := object.GetProvider(\"admin/provider_storage_aliyun_oss\")\n    deployStaticFiles(provider)\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Binary to Local Bin\nDESCRIPTION: Move the oauth2-proxy binary to /usr/local/bin and provide executable permissions, requiring elevated permissions (sudo) if necessary.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/C++/NginxCommunityVersion.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp ./oauth2-proxy /usr/local/bin\ncd /usr/local/bin\nchmod +x ./oauth2-proxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Deployment\nDESCRIPTION: Kubernetes deployment configuration to mount the initialization data ConfigMap into Casdoor pods.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/data-initialization.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\n...\nspec:\n  template:\n    ...\n    spec:\n      containers:\n      ...\n        volumeMounts:\n        - mountPath: /init_data.json\n          name: casdoor-init-data-volume\n          subPath: init_data.json\n      volumes:\n      - configMap:\n          name: casdoor-init-data\n        name: casdoor-init-data-volume\n```\n\n----------------------------------------\n\nTITLE: Setting OIDC Redirect URL\nDESCRIPTION: Configure the redirect URL for OIDC authentication in Zentao\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/php/zentao.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$oidc->setRedirectURL($path.\"/zentao/oidc-index.html\");\n```\n\n----------------------------------------\n\nTITLE: Running Deployment Script with Bash Commands\nDESCRIPTION: These Bash commands are used to navigate to the deployment directory and run the Go test script for deploying static files to the CDN.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/deploy-cdn.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd deployment\ngo test\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Extracted Directory\nDESCRIPTION: Move into the directory containing the extracted OAuth2-Proxy files to proceed with installation.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/C++/NginxCommunityVersion.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd oauth2-proxy-v7.5.1.linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Configuring Zentao URL Filter Parameters\nDESCRIPTION: Modify Zentao's filter configuration to allow OIDC scope parameters in the URL\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/php/zentao.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$filter->oidc = new stdclass();\n$filter->oidc->index = new stdclass();\n$filter->oidc->index->paramValue['scope'] = 'reg::any';\n```\n\n----------------------------------------\n\nTITLE: Building Casdoor Frontend with Yarn\nDESCRIPTION: This snippet shows the commands necessary to navigate to the web directory, install dependencies, and build the frontend application into static resources such as HTML, JS, and CSS files using Yarn. Prior to running these commands, ensure that Yarn is installed and configured correctly.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/server-installation.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd web\n    yarn install\n    yarn build\n```\n\n----------------------------------------\n\nTITLE: Redirect URL for Casdoor Application\nDESCRIPTION: This snippet shows the redirect URL that should be added to the Casdoor application settings for OAuth2 integration.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/php/Flarum.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<CASDOOR_HOSTNAME>/auth/passport\n```\n\n----------------------------------------\n\nTITLE: Installing Thingsboard Demo Data (Batch)\nDESCRIPTION: This command is used to install Thingsboard and load demo data. It is executed from the Thingsboard folder. The `install.bat` script handles the installation process and the `--loadDemo` flag ensures that demo data is loaded, providing a sample dataset to explore Thingsboard's functionalities immediately after installation.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/Thingsboard.md#2025-04-21_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\n\"install.bat –loadDemo\"\n```\n\n----------------------------------------\n\nTITLE: Running React Native App on Android\nDESCRIPTION: These commands start the React Native development server and run the application on an Android emulator or connected device. `react-native start` starts the Metro bundler, and `react-native run-android` builds and launches the app on Android.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/mobile-sdks/react-native-app.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"cd casdoor-react-native-example\nreact-native start\nreact-native run-android\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Zentao Authentication Method\nDESCRIPTION: Update the isOpenMethod to allow OIDC authentication module access\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/php/zentao.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function isOpenMethod($module, $method)\n{\n    if ($module == 'oidc' and $method == 'index') {\n        return true; \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scopes for Flarum OAuth2 Configuration\nDESCRIPTION: This snippet lists the scopes configured for the OAuth2 integration with Flarum.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/php/Flarum.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nScopes: \"address phone openid profile offline_access email\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Casdoor Repository using Git\nDESCRIPTION: This snippet provides the command to clone the Casdoor source code repository from GitHub, allowing users to obtain both the backend and frontend code for further setup and development.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/server-installation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncd path/to/folder\ngit clone https://github.com/casdoor/casdoor\n```\n\n----------------------------------------\n\nTITLE: Cloning React Native Example Repository using Git\nDESCRIPTION: This command clones the Casdoor React Native example repository from GitHub. It allows users to download the complete source code to their local machine to explore and run the application.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/mobile-sdks/react-native-app.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"git clone git@github.com:casdoor/casdoor-react-native-example.git\"\n```\n\n----------------------------------------\n\nTITLE: Starting MinIO Server with Environment Variables\nDESCRIPTION: Commands to start a MinIO server by setting root credentials through environment variables and specifying the export path.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/go/minio.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport MINIO_ROOT_USER=minio\nexport MINIO_ROOT_PASSWORD=minio123\nminio server /mnt/export\n```\n\n----------------------------------------\n\nTITLE: Mounting Configuration File in Docker\nDESCRIPTION: Command to mount init_data.json configuration file into a Docker container for Casdoor initialization.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/data-initialization.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run ... -v /path/to/init_data.json:/init_data.json\n```\n\n----------------------------------------\n\nTITLE: Python Script for OAuth Token Retrieval\nDESCRIPTION: Python script that sends a POST request to the Casdoor server to obtain authentication tokens including id_token and refresh_token.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/go/kubernetes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nurl = \"https://demo.casdoor.com/api/login/oauth/access_token\"\npayload = json.dumps({\n   \"grant_type\": \"password\",\n   \"client_id\": \"Kubernetes\",\n   \"client_secret\": \"72c65c3912aec24a9f3ec41b65a7577114ed2bae\",\n   \"username\": \"user_3u94sf\",\n   \"password\": \"123456\"\n})\nresponse = requests.request(\"POST\", url, data=payload)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Building Modified Bee Tool\nDESCRIPTION: Shell command for building the modified Bee tool from source code in the root directory of the casbin/bee repository.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/developer-guide/swagger.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo build -o mybee .\n```\n\n----------------------------------------\n\nTITLE: Generating Filtered Swagger Documentation\nDESCRIPTION: Examples of generating swagger documentation for specific tags or APIs using filter commands with the modified Bee tool.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/developer-guide/swagger.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmybee generate docs --tags \"Adapter API\"\nmybee generate docs --tags \"Adapter API,Login API\"\nmybee generate docs --apis \"add-adapter\"\nmybee generate docs --apis \"add-adapter,delete-adapter\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating Custom Path Prefix in Casdoor Storage\nDESCRIPTION: Demonstrates how to use a custom path prefix ('abcd/xxxx') to modify the file storage location in Casdoor.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/storage/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://cdn.casbin.com/abcd/xxxx/casdoor/avatar.png\n```\n\n----------------------------------------\n\nTITLE: Kubectl Authentication Command\nDESCRIPTION: Command line method to authenticate kubectl using an ID token.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/go/kubernetes.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --token=$(id_token) cluster-info\n```\n\n----------------------------------------\n\nTITLE: Setting CASDOOR_HOSTNAME for Deployment\nDESCRIPTION: This snippet sets the CASDOOR_HOSTNAME to the local server address for deploying Casdoor in production mode.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/php/Flarum.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCASDOOR_HOSTNAME = \"http://localhost:8000\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Casdoor Card Component - HTML/JSX\nDESCRIPTION: This snippet renders a div component with a gradient border that includes a CasdoorCard component, which is used for login functionality.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div className={styles.gradientborder}>\n  <CasdoorCard src=\"https://door.casdoor.com/login\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Data Model for Protected Resource\nDESCRIPTION: This Java code snippet defines a simple data model `FooModel` with `id` and `name` properties.  It is used to represent the protected resource data in the demo Spring Boot application.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/spring-security/spring-security-oauth.mdx#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class FooModel {\n        private Long id;\n        private String name;\n\n        public FooModel(Long id, String name) {\n            super();\n            this.id = id;\n            this.name = name;\n        }\n        public Long getId() {\n            return id;\n        }\n        public void setId(Long id) {\n            this.id = id;\n        }\n        public String getName() {\n            return name;\n        }\n        public void setName(String name) {\n            this.name = name;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Starting the Casdoor Frontend on Different Ports\nDESCRIPTION: This snippet informs the user how to modify the configuration file to change the port where the Casdoor frontend runs in both development and production environments. It explains the use of the `conf/app.conf` file to set the desired port and the necessary action to restart the backend.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/server-installation.mdx#2025-04-21_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nTo use another port, please edit ```conf/app.conf``` and modify `httpport`, then restart the Go backend.\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Client Alias\nDESCRIPTION: Command to set up a MinIO client alias for connecting to the MinIO server using the mc tool.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/go/minio.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmc alias set myminio <Your console address> minio minio123\n```\n\n----------------------------------------\n\nTITLE: Updating i18n Data Using Crowdin and i18next\nDESCRIPTION: Describes how to use i18next for adding new strings in the web directory and run i18n/generate_test.go to auto-generate updated data.json files for internationalization. Translators are encouraged to use Crowdin for translating these strings post PR merge.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/contributing.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd i18n && go test\n```\n\n----------------------------------------\n\nTITLE: Importing Styles in MDX for Casdoor Website\nDESCRIPTION: This code snippet imports styles from a module CSS file for use in the MDX document. It's likely used for styling the Casdoor website documentation.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/application/providers.md#2025-04-21_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport styles from '../styles.module.css';\n```\n\n----------------------------------------\n\nTITLE: Starting Thingsboard Service (Batch)\nDESCRIPTION: This command starts the Thingsboard service on a Windows system. The `net start thingsboard` command instructs the operating system to initiate the Thingsboard service, allowing users to access and interact with the Thingsboard application through its web interface or other configured endpoints.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/java/Thingsboard.md#2025-04-21_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n\"net start thingsboard\"\n```\n\n----------------------------------------\n\nTITLE: Designing UI for Casdoor Authentication in XAML\nDESCRIPTION: XAML code for the MainPage, defining the layout and controls for login, logout, and displaying user information.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/desktop-sdks/maui-app.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"Casdoor.MauiOidcClient.Example.MainPage\">\n\n    <ScrollView>\n        <VerticalStackLayout>\n\n            <StackLayout\n                x:Name=\"LoginView\">\n                <Button \n                    x:Name=\"LoginBtn\"\n                    Text=\"Log In\"\n                    SemanticProperties.Hint=\"Click to log in\"\n                    Clicked=\"OnLoginClicked\"\n                    HorizontalOptions=\"Center\" />\n\n                <WebView x:Name=\"WebViewInstance\" />\n            </StackLayout>\n\n            <StackLayout\n                x:Name=\"HomeView\"\n                IsVisible=\"false\">             \n\n                <Label\n                Text=\"Welcome to .NET Multi-platform App UI\"\n                SemanticProperties.HeadingLevel=\"Level2\"\n                SemanticProperties.Description=\"Welcome to dot net Multi-platform App UI\"\n                FontSize=\"18\"\n                HorizontalOptions=\"Center\" />\n\n                <Button\n                x:Name=\"CounterBtn\"\n                Text=\"Click me\"\n                SemanticProperties.Hint=\"Counts the number of times you click\"\n                Clicked=\"OnCounterClicked\"\n                HorizontalOptions=\"Center\" />\n\n                <Label \n                x:Name=\"NameLabel\"\n                Text=\"\"\n                SemanticProperties.HeadingLevel=\"Level2\"\n                SemanticProperties.Description=\"User's name\"\n                FontSize=\"18\"\n                HorizontalOptions=\"Center\" />\n\n                <Label \n                x:Name=\"EmailLabel\"\n                Text=\"\"\n                SemanticProperties.HeadingLevel=\"Level2\"\n                SemanticProperties.Description=\"User's email\"\n                FontSize=\"18\"\n                HorizontalOptions=\"Center\" />           \n\n                <Button \n                x:Name=\"LogoutBtn\"\n                Text=\"Log Out\"\n                SemanticProperties.Hint=\"Click to log out\"\n                Clicked=\"OnLogoutClicked\"\n                HorizontalOptions=\"Center\" />\n\n            </StackLayout>\n        </VerticalStackLayout>\n    </ScrollView>\n\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Including License Header in New Files\nDESCRIPTION: This snippet provides a template for including the Casdoor license header at the top of newly added files. This is a requirement when contributing new files to the Casdoor repository.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n// Copyright 2022 The Casdoor Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Class in Go\nDESCRIPTION: This snippet defines the Organization class, which encapsulates properties defining an organization in Casdoor, such as Owner, Name, CreatedTime, and various configurations related to account management. It utilizes struct tags for ORM mapping and JSON serialization. Key fields include Owner and Name, which are used as primary keys, and various configuration fields relevant to organization management.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/core-concepts.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Organization struct {\n    Owner       string `xorm:\"varchar(100) notnull pk\" json:\"owner\"`\n    Name        string `xorm:\"varchar(100) notnull pk\" json:\"name\"`\n    CreatedTime string `xorm:\"varchar(100)\" json:\"createdTime\"`\n\n    DisplayName        string   `xorm:\"varchar(100)\" json:\"displayName\"`\n    WebsiteUrl         string   `xorm:\"varchar(100)\" json:\"websiteUrl\"`\n    Favicon            string   `xorm:\"varchar(100)\" json:\"favicon\"`\n    PasswordType       string   `xorm:\"varchar(100)\" json:\"passwordType\"`\n    PasswordSalt       string   `xorm:\"varchar(100)\" json:\"passwordSalt\"`\n    PhonePrefix        string   `xorm:\"varchar(10)\"  json:\"phonePrefix\"`\n    DefaultAvatar      string   `xorm:\"varchar(100)\" json:\"defaultAvatar\"`\n    Tags               []string `xorm:\"mediumtext\" json:\"tags\"`\n    MasterPassword     string   `xorm:\"varchar(100)\" json:\"masterPassword\"`\n    EnableSoftDeletion bool     `json:\"enableSoftDeletion\"`\n    IsProfilePublic    bool     `json:\"isProfilePublic\"`\n\n    AccountItems []*AccountItem `xorm:\"varchar(2000)\" json:\"accountItems\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Git Clone Command for Casdoor .NET SDK\nDESCRIPTION: Command to clone the Casdoor .NET SDK repository for Unity integration.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/CSharp/Unity.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit@github.com:casdoor/casdoor-dotnet-sdk.git\n```\n\n----------------------------------------\n\nTITLE: Markdown Linting Command\nDESCRIPTION: Command to run markdownlint-cli for checking and fixing basic markdown errors\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint:md\n```\n\n----------------------------------------\n\nTITLE: Importing Styles and Components in MDX\nDESCRIPTION: This code snippet imports necessary styles and components for the MDX document. It includes a custom styles module and a CasdoorCard component.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/application/config.md#2025-04-21_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport styles from '../styles.module.css';\nimport CasdoorCard from \"@site/src/components/CasdoorCard\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CockroachDB for Casdoor\nDESCRIPTION: This demonstrates how to configure CockroachDB to be compatible with the PostgreSQL driver and the necessary adjustments to the data source string for the Casdoor application.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/basic/server-installation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: INI\nCODE:\n```\ndriverName = postgres\ndataSourceName = user=postgres password=postgres host=localhost port=5432 sslmode=disable dbname=casdoor serial_normalization=virtual_sequence\ndbName = casdoor\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Default File Path in Casdoor Storage\nDESCRIPTION: Shows the default file path structure when the Path prefix is empty in Casdoor storage configuration.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/storage/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://cdn.casbin.com/casdoor/avatar.png\n```\n\n----------------------------------------\n\nTITLE: Extracting OAuth2-Proxy Package\nDESCRIPTION: This command extracts the downloaded OAuth2-Proxy tar.gz package into the current directory.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/C++/NginxCommunityVersion.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntar -zxvf oauth2-proxy-*.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Generating Basic Swagger Documentation\nDESCRIPTION: Basic command for generating swagger documentation using the modified Bee tool.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/developer-guide/swagger.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmybee generate docs\n```\n\n----------------------------------------\n\nTITLE: Opening Login URL in Browser\nDESCRIPTION: This code snippet constructs a login URL using provided parameters and opens it in the default web browser. It allows users to authenticate through Casdoor and is configurable with various parameters for client ID and redirect path.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/desktop-sdks/electron-app.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst serverUrl = \"https://door.casdoor.com\";\nconst appName = \"app-casnode\";\nconst redirectPath = \"/callback\";\nconst clientId = \"014ae4bd048734ca2dea\";\nconst clientSecret = \"f26a4115725867b7bb7b668c81e1f8f7fae1544d\";\n\nconst redirectUrl = \"casdoor://localhost:3000\" + redirectPath;\n\nconst signinUrl = `\\${serverUrl}/login/oauth/authorize?client_id=${clientId}&response_type=code&redirect_uri=${encodeURIComponent(redirectUrl)}&scope=profile&state=${appName}&noRedirect=true`;\n\nshell.openExternal(signinUrl); //Open the login url in the browser\n```\n\n----------------------------------------\n\nTITLE: Using Keywords to Link PRs with Issues\nDESCRIPTION: Illustrates how to link a pull request to an issue in the same repository using a supported keyword. When a pull request is merged, the associated issue is automatically closed.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/contributing.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nFix: #902\n```\n\n----------------------------------------\n\nTITLE: Edit Nginx configuration file\nDESCRIPTION: This command opens the Nginx configuration file using the vim editor. You'll need to replace `/path/to/nginx/nginx.conf` with the actual path to your Nginx configuration file.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/deployment/nginx.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvim /path/to/nginx/nginx.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring Casdoor SDK\nDESCRIPTION: Example configuration for initializing the Casdoor SDK with required parameters including server URL, client credentials, and organization details.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/how-to-connect/nextjs.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sdkConfig = {\n  serverUrl: \"https://door.casdoor.com\",\n  clientId: \"294b09fbc17f95daf2fe\",\n  clientSecret: \"dd8982f7046ccba1bbd7851d5c1ece4e52bf039d\",\n  organizationName: \"casbin\",\n  appName: \"app-vue-python-example\",\n  redirectPath: \"/callback\",\n};\n```\n\n----------------------------------------\n\nTITLE: JSX Component Integration Example\nDESCRIPTION: Shows how to properly integrate JSX components like Tabs in documentation while maintaining compatibility with Crowdin translation\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```mdx-code-block\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n```mdx-code-block\n<Tabs>\n<TabItem value=\"go\" label=\"Go\">\n```\n\ncontent\n\n```mdx-code-block\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n```\n\ncontent\n\n```mdx-code-block\n</TabItem>\n</Tabs>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuration Metadata in Frontmatter\nDESCRIPTION: YAML frontmatter defining the document metadata including title, description, keywords and authors.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/provider/saml/keycloak.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Keycloak\ndescription: Using Keycloak to authenticate users\nkeywords: [Keycloak]\nauthors: [seriouszyx]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Root URL Settings\nDESCRIPTION: Server configuration for setting the public-facing domain and URL for Grafana, which is crucial for correct redirect handling after OAuth authentication\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/docs/integration/go/grafana.md#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[server]\nhttp_port = 3000\ndomain = <your IP here>\nroot_url = %(protocol)s://%(domain)s:%(http_port)s/\n```\n\n----------------------------------------\n\nTITLE: Configuring Google AdSense Publisher ID and Connection\nDESCRIPTION: Configuration line specifying Google AdSense publisher ID, connection type, and verification token for ad serving\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/static/ads.txt#2025-04-21_snippet_0\n\nLANGUAGE: config\nCODE:\n```\ngoogle.com, pub-3509678918753247, DIRECT, f08c47fec0942fa0\n```\n\n----------------------------------------\n\nTITLE: Example Markdown Document Structure\nDESCRIPTION: Shows the standard format for creating documentation pages including frontmatter, headers, and content structure.\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Title\ndescription: description\nkeywords: [keyword1, keyword2]\nauthors: [GitHub username]\n---\n\n## Headers\n\nOnly h2 and h3 will be in the TOC by default, so h1 is not recommended to use.\n\n### h3\n\ncontent\n\n#### h4\n\ncontent\n```\n\n----------------------------------------\n\nTITLE: Admonition Usage Example\nDESCRIPTION: Demonstrates proper formatting for adding admonitions in documentation with required spacing\nSOURCE: https://github.com/casdoor/casdoor-website/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::info Title\n\nTitle is optional\n\n:::\n```"
  }
]