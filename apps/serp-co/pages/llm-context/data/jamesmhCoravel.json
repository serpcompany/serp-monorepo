[
  {
    "owner": "jamesmh",
    "repo": "coravel",
    "content": "TITLE: Installing Coravel Package with NuGet\nDESCRIPTION: Command to add the Coravel package to a .NET Core project using the dotnet CLI. This installs the core Coravel functionality required for all features.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Installation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package coravel\n```\n\n----------------------------------------\n\nTITLE: Configuring Caching in Startup.cs for .NET Core\nDESCRIPTION: This snippet shows how to configure caching in the Startup.cs file of a .NET Core application using Coravel. It adds the caching service to the dependency injection container.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Caching/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddCache();\n```\n\n----------------------------------------\n\nTITLE: Using Coravel Scheduler in .NET Core Startup\nDESCRIPTION: Demonstrates how to use the configured scheduler in the Configure method to schedule a task that runs every minute on weekdays.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar provider = app.ApplicationServices;\nprovider.UseScheduler(scheduler =>\n{\n    scheduler.Schedule(\n        () => Console.WriteLine(\"Every minute during the week.\")\n    )\n    .EveryMinute()\n    .Weekday();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Coravel Scheduler in .NET Core Startup\nDESCRIPTION: Shows how to add the Coravel Scheduler service to your .NET Core application's dependency injection container in the ConfigureServices method.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddScheduler()\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer in Minimal .NET Application\nDESCRIPTION: Shows how to add the mailer service to a minimal .NET application using the builder pattern in Program.cs.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.AddMailer();\n```\n\n----------------------------------------\n\nTITLE: Initializing Queue Service in .NET Core\nDESCRIPTION: Setup code to add Coravel's queue service to the dependency injection container.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Queuing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddQueue();\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Worker Service with Coravel Scheduler in C#\nDESCRIPTION: A quick-start example showing how to create a worker service application that uses Coravel's scheduling functionality. The code configures a simple console application that schedules a task to run every second.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Coravel;\n\nConsole.OutputEncoding = System.Text.Encoding.UTF8;\n\nvar builder = Host.CreateApplicationBuilder(args);\nbuilder.Services.AddScheduler();\n\nvar host = builder.Build();\n\nhost.Services.UseScheduler(s =>\n{\n    s.Schedule(() => Console.WriteLine(\"It's alive! ðŸ§Ÿ\")).EverySecond();\n});\n\nhost.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing Coravel CLI with .NET Core Global Tools\nDESCRIPTION: Command to install Coravel CLI as a global tool using the .NET Core CLI. This makes the Coravel CLI available system-wide for managing Coravel features in any project.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install --global coravel-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Broadcasting in .NET Core Startup\nDESCRIPTION: Sets up Coravel's event broadcasting system in the application's startup class by adding the necessary services and configuring event registration.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Events/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddEvents();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar provider = app.ApplicationServices;\nIEventRegistration registration = provider.ConfigureEvents();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nregistration\n\t.Register<BlogPostCreated>()\n\t.Subscribe<TweetNewPost>()\n  \t.Subscribe<NotifyEmailSubscribersOfNewPost>();\n```\n\n----------------------------------------\n\nTITLE: Scheduling an Invocable in .NET Core with Coravel\nDESCRIPTION: Example of scheduling a daily database reindexing task that runs at 1 AM on weekdays using Coravel's scheduler and Invocable pattern.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Invocables/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n    scheduler.Schedule<ReIndexDatabase>()\n      .DailyAtHour(01)\n      .Weekday();\n```\n\n----------------------------------------\n\nTITLE: Installing Coravel CLI as a Global Tool\nDESCRIPTION: Command to install the Coravel CLI as a global .NET tool. The CLI provides scaffolding capabilities and easier installation options for Coravel.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Installation/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install --global coravel-cli\n```\n\n----------------------------------------\n\nTITLE: Using Remember Method for Caching in Coravel\nDESCRIPTION: This snippet illustrates how to use the Remember method to cache data for a specified duration in Coravel. It includes a local function definition and cache key specification.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Caching/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstring BigDataLocalFunction() \n{\n    return \"Some Big Data\";\n};\n\nthis._cache.Remember(\"BigDataCacheKey\", BigDataLocalFunction, TimeSpan.FromMinutes(10));\n```\n\n----------------------------------------\n\nTITLE: Preventing Overlapping Task Execution\nDESCRIPTION: Demonstrates how to prevent a scheduled task from starting if a previous instance is still running by using the PreventOverlapping method.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nscheduler\n    .Schedule<SomeInvocable>()\n    .EveryMinute()\n    .PreventOverlapping(nameof(SomeInvocable));\n```\n\n----------------------------------------\n\nTITLE: Creating a Razor View Template for Coravel Emails (C#)\nDESCRIPTION: Shows an example of a Razor view template used for Coravel emails. It includes dynamic content, view bag properties for heading and preview, and demonstrates the use of email components and sections.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n@model App.Models.UserModel\n\n@{\n   ViewBag.Heading = \"Welcome New User: \" + Model.Name;\n   ViewBag.Preview = \"Preview message in inbox\";\n}\n\n<p>\n    Hi @Model.Name!\n    @await Component.InvokeAsync(\"EmailLinkButton\", new  { text = \"click me\", url = \"www.google.com\" })\n</p>\n\n@section links\n{\n    <a href=\"https://www.google.com\">Google</a> | <a href=\"https://www.google.com\">Google</a>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Distributed Locking with Coravel Invocable in C#\nDESCRIPTION: An example showing how to implement distributed locking in a Coravel invocable using a third-party distributed locking library. This demonstrates integration of Coravel with other .NET primitives.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestInvocable : IInvocable\n{\n  private ApplicationDbContext _context;\n  private IDistributedLockProvider _distributedlock;\n\n  public TestInvocable(ApplicationDbContext context, IDistributedLockProvider distributedlock)\n  {\n    this._context = context;\n    this._distributedlock = distributedlock;\n  }\n\n  public async Task Invoke()\n  {\n    await using (await this._distributedlock.AcquireAsync())\n    {\n      await this._context.Test.AddAsync(new TestModel() { Name = \"test name\" });\n      await this._context.SaveChangesAsync();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event Listener in Coravel\nDESCRIPTION: Creates a TweetNewPost listener that implements IListener<BlogPostCreated> to respond to BlogPostCreated events by tweeting about new posts.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Events/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TweetNewPost : IListener<BlogPostCreated>\n{\n    private TweetingService _tweeter;\n\n    public TweetNewPost(TweetingService tweeter){\n        this._tweeter = tweeter;\n    }\n\n    public async Task HandleAsync(BlogPostCreated broadcasted)\n    {\n        var post = broadcasted.Post;\n        await this._tweeter.TweetNewPost(post);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using RememberAsync Method for Asynchronous Caching in Coravel\nDESCRIPTION: This code shows how to use the RememberAsync method for asynchronous caching in Coravel. It includes an async local function and demonstrates awaiting the cache operation.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Caching/README.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nasync SomeType BigDataLocalFunctionAsync() \n{\n    // ... Doing some stuff ... \n    return await SomeCostlyDbCall();\n};\n\nawait this._cache.RememberAsync(\"BigDataCacheKey\", BigDataLocalFunctionAsync, TimeSpan.FromMinutes(10));\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Error Handler for Scheduler\nDESCRIPTION: Example of adding global error handling to catch and process exceptions from scheduled tasks.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nprovider.UseScheduler(scheduler =>\n    // Assign your schedules\n)\n.OnError((exception) =>\n    DoSomethingWithException(exception)\n);\n```\n\n----------------------------------------\n\nTITLE: Scheduling an Async Task with Coravel\nDESCRIPTION: Demonstrates how to schedule an asynchronous task using ScheduleAsync method. The async method runs every minute.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nscheduler.ScheduleAsync(async () =>\n{\n    await Task.Delay(500);\n    Console.WriteLine(\"async task\");\n})\n.EveryMinute();\n```\n\n----------------------------------------\n\nTITLE: Sending Emails with Coravel in a Controller (C#)\nDESCRIPTION: Demonstrates how to inject and use the IMailer interface in a controller to send emails asynchronously using Coravel.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly IMailer _mailer;\n\npublic MyController(IMailer mailer)\n{\n    this._mailer = mailer;\n}\n\n// Inside a controller action...\nawait this._mailer.SendAsync(new NewUserViewMailable(user));\n```\n\n----------------------------------------\n\nTITLE: Implementing Invocable with Payload\nDESCRIPTION: Shows how to create an invocable that accepts a payload parameter using IInvocableWithPayload interface.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Queuing/README.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SendWelcomeUserEmailInvocable : IInvocable, IInvocableWithPayload<UserModel>\n{\n  public UserModel Payload { get; set; }\n\n  /* Constructor, etc. */\n\n  public async Task Invoke()\n  {\n    // `this.Payload` will be available to use now.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling an Invocable Task with Coravel\nDESCRIPTION: Shows how to schedule an invocable class that will run every ten minutes. Invocables must be registered with the service provider first.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nscheduler\n    .Schedule<GrabDataFromApiAndPutInDBInvocable>()\n    .EveryTenMinutes();\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Mailable without View Model in Coravel (C#)\nDESCRIPTION: Demonstrates how to create a basic Mailable class in Coravel that doesn't require a view model. It inherits from Mailable<string> and uses the View method to specify the email template.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyMailable : Mailable<string>\n{\n    public override void Build()\n    {\n        this.To(\"some@email.com\")\n            .From(\"from@test.com\")\n            .View(\"~/Views/Mail/HasNoModelEmail.cshtml\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Class in Coravel\nDESCRIPTION: Implements the IEvent interface to create a BlogPostCreated event that carries a reference to the blog post that was created.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Events/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BlogPostCreated : IEvent\n{\n    public BlogPost Post { get; set; }\n\n    public BlogPostCreated(BlogPost post)\n    {\n        this.Post = post;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Synchronous Task with Coravel\nDESCRIPTION: Shows how to schedule a simple synchronous action that will run every minute using the Schedule method.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nscheduler.Schedule(\n    () => Console.WriteLine(\"Scheduled task.\")\n)\n.EveryMinute();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cached Value with GetAsync in Coravel\nDESCRIPTION: This code demonstrates how to use the GetAsync method to retrieve a specific value from the cache in Coravel. It includes type specification for the returned value.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Caching/README.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nstring bigDataValue = await this._cache.GetAsync<string>(\"BigDataCacheKey\");\n```\n\n----------------------------------------\n\nTITLE: Using Forever Method for Indefinite Caching in Coravel\nDESCRIPTION: This snippet demonstrates how to use the Forever method to cache data indefinitely in Coravel. It uses a cache key and a local function to provide the data.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Caching/README.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nthis._cache.Forever(\"BigDataCacheKey\", BigDataLocalFunction);\n```\n\n----------------------------------------\n\nTITLE: Creating a Mailable Class\nDESCRIPTION: Example of creating a Mailable class that encapsulates email logic for a specific type of email notification.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing Coravel.Mailer.Mail;\nusing App.Models;\n\nnamespace App.Mailables\n{\n    public class NewUserViewMailable : Mailable<UserModel>\n    {\n        private UserModel _user;\n\n        public NewUserViewMailable(UserModel user) => this._user = user;\n\n        public override void Build()\n        {\n            this.To(this._user)\n                .From(\"from@test.com\")\n                .View(\"~/Views/Mail/NewUser.cshtml\", this._user);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Mailer Driver\nDESCRIPTION: Shows how to register a custom mailer implementation in the DI container for use with Coravel's mailing system.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddScoped<MyHttpApiCustomMailer>();\nbuilder.AddCustomMailer<MyHttpApiCustomMailer>();\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Events in a Controller\nDESCRIPTION: Demonstrates how to inject the IDispatcher and broadcast a BlogPostCreated event when a new blog post is created.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Events/README.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic BlogController : Controller\n{\n    private IDispatcher _dispatcher;\n\n    public BlogController(IDispatcher dispatcher)\n    {\n        this._dispatcher = dispatcher;\n    }\n\n    public async Task<IActionResult> NewPost(BlogPost newPost)\n    {\n        var postCreated = new BlogPostCreated(newPost);\n        await _dispatcher.Broadcast(postCreated); // All listeners will fire.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Invocable Classes with Coravel CLI\nDESCRIPTION: Command to create a new invocable class in the Invocables directory. Invocables are used for scheduled tasks and other operations in Coravel.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Cli/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncoravel invocable new [nameOfYourInvocable]\n```\n\n----------------------------------------\n\nTITLE: Creating Schedule Workers for Parallel Task Execution\nDESCRIPTION: Shows how to group scheduled tasks into separate workers to allow parallel execution and prevent long-running tasks from blocking other scheduled tasks.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nscheduler.OnWorker(\"EmailTasks\");\nscheduler\n    .Schedule<SendNightlyReportsEmailJob>().Daily();\nscheduler\n    .Schedule<SendPendingNotifications>().EveryMinute();\n\nscheduler.OnWorker(\"CPUIntensiveTasks\");\nscheduler\n    .Schedule<RebuildStaticCachedData>().Hourly();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom HTTP API Mailer\nDESCRIPTION: Example implementation of ICanSendMail interface for creating a custom mailer that uses an HTTP client to send emails via an API.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyHttpApiCustomMailer : ICanSendMail\n{\n    private readonly IHttpClient _httpClient;\n\n    public MyHttpApiCustomMailer(IHttpClientFactory httpFactory)\n    {\n        this._httpClient = httpFactory.CreateHttpClient(\"MailApi\");\n    }\n\n    public async Task SendAsync(MessageBody message, string subject, IEnumerable<MailRecipient> to, MailRecipient from, MailRecipient replyTo, IEnumerable<MailRecipient> cc, IEnumerable<MailRecipient> bcc, IEnumerable<Attachment> attachments = null, MailRecipient sender = null)\n    {\n        // Code that uses the HttpClient to send mail via an HTTP API.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ForeverAsync Method for Asynchronous Indefinite Caching in Coravel\nDESCRIPTION: This code shows how to use the ForeverAsync method for asynchronous indefinite caching in Coravel. It demonstrates awaiting the cache operation with a cache key and async function.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Caching/README.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nawait this._cache.ForeverAsync(\"BigDataCacheKey\", BigDataLocalFunctionAsync);\n```\n\n----------------------------------------\n\nTITLE: Creating Events and Listeners with Coravel CLI\nDESCRIPTION: Command to generate event and listener classes for Coravel's event broadcasting system. This facilitates implementing event-driven architecture in your application.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Cli/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncoravel event new [eventName] [listenerName]\n```\n\n----------------------------------------\n\nTITLE: Implementing Daily Report Email Job\nDESCRIPTION: Complete example of an invocable class that sends daily report emails to users.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SendDailyReportsEmailJob : IInvocable\n{\n    private IMailer _mailer;\n    private IUserRepository _repo;\n\n    // Each param injected from the service container ;)\n    public SendDailyReportsEmailJob(IMailer mailer, IUserRepository repo)\n    {\n        this._mailer = mailer;\n        this._repo = repo;\n    }\n\n    public async Task Invoke()\n    {\n        var users = await this._repo.GetUsersAsync();\n\n        foreach(var user in users)\n        {\n            var mailable = new NightlyReportMailable(user);\n            await this._mailer.SendAsync(mailable);\n        }        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Cache Key Existence with HasAsync in Coravel\nDESCRIPTION: This snippet illustrates how to use the HasAsync method to check if a non-expired key exists in the cache in Coravel. It returns a boolean value.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Caching/README.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbool hasKey = await this._cache.HasAsync(\"BigDataCacheKey\");\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Cache Driver in Coravel\nDESCRIPTION: This snippet demonstrates how to configure the SQL Server cache driver in Coravel. It adds the SQL Server cache service to the dependency injection container with a connection string.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Caching/README.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSQLServerCache(connectionString);\n```\n\n----------------------------------------\n\nTITLE: Task Progress Listener Implementation\nDESCRIPTION: Implementation of a listener that tracks task progress using queue events.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Queuing/README.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TaskStartedListener : IListener<QueueTaskStarted>\n{\n    // Constructor etc.\n\n    public async Task HandleAsync(QueueTaskStarted broadcasted)\n    {\n        await this._uiNotifications.NotifyTaskStarted(broadcasted.Guid);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Cache Driver in Coravel\nDESCRIPTION: This code shows how to configure the PostgreSQL cache driver in Coravel. It adds the PostgreSQL cache service to the dependency injection container with a connection string.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Caching/README.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddPostgreSQLCache(connectionString);\n```\n\n----------------------------------------\n\nTITLE: Clearing Entire Cache with Flush in Coravel\nDESCRIPTION: This snippet shows how to use the Flush method to clear the entire cache in Coravel.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Caching/README.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nthis._cache.Flush();\n```\n\n----------------------------------------\n\nTITLE: Setting Time Zone for Scheduled Tasks\nDESCRIPTION: Shows how to schedule a task to run at a specific time in a particular time zone using the Zoned method.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nscheduler\n    .Schedule<SendWelcomeUserEmail>()\n    .DailyAt(13, 30)\n    .Zoned(TimeZoneInfo.Local);\n```\n\n----------------------------------------\n\nTITLE: Queue Progress Logging Configuration\nDESCRIPTION: Setup code for configuring queue progress logging using ILogger.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Queuing/README.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar provider = app.ApplicationServices;\nprovider\n    .ConfigureQueue()\n    .LogQueuedTaskProgress(provider.GetService<ILogger<IQueue>>());\n```\n\n----------------------------------------\n\nTITLE: Scheduling Invocables with Different Parameters\nDESCRIPTION: Demonstrates scheduling the same invocable type with different parameters to create different task schedules for backing up different database tables.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// In this case, backing up products \n// more often than users is required.\n\nscheduler\n    .ScheduleWithParams<BackupDatabaseTableInvocable>(\"[dbo].[Users]\")\n    .Daily();\n\nscheduler\n    .ScheduleWithParams<BackupDatabaseTableInvocable>(\"[dbo].[Products]\")\n    .EveryHour();\n```\n\n----------------------------------------\n\nTITLE: Using Inline Mailable with HTML and Text Content\nDESCRIPTION: Example of creating and sending an inline mailable with direct HTML and plain text content.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<IActionResult> SendMyEmail()\n{\n    UserModel user = new UserModel()\n    {\n        Email = \"FromUserModel@test.com\",\n        Name = \"Coravel Test Person\"\n    };\n\n    await this._mailer.SendAsync(\n        Mailable.AsInline()\n            .To(user)\n            .From(\"from@test.com\")\n            .Html($\"<html><body><h1>Welcome {user.Name}</h1></body></html>\")\n            .Text($\"Welcome {user.Name}\")\n    );\n\n    return Ok();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Invocable Class with Parameters for Scheduling\nDESCRIPTION: Creates a database backup invocable that accepts a table name parameter which will be injected during scheduling configuration.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nprivate class BackupDatabaseTableInvocable : IInvocable\n{\n    private DbContext _dbContext;\n    private string _tableName;\n\n    public BackupDatabaseTableInvocable(DbContext dbContext, string tableName)\n    {\n        this._dbContext = dbContext; // Injected via DI.\n        this._tableName = tableName; // injected via schedule configuration (see next code block).\n    }\n\n    public Task Invoke()\n    {\n        // Do the logic.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling One-time Job in C#\nDESCRIPTION: Demonstrates how to schedule a job to run only once when it's first due using the Once() method.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nscheduler\n    .Schedule<SpecialJob>()\n    .Hourly()\n    .Once();\n```\n\n----------------------------------------\n\nTITLE: Injecting Queue Service in Controller\nDESCRIPTION: Example of dependency injection for the queue service in a controller constructor.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Queuing/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nIQueue _queue;\n\npublic HomeController(IQueue queue) {\n    this._queue = queue;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global From Address in appsettings.json\nDESCRIPTION: JSON configuration for setting a global email sender address and name for all emails sent via Coravel.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n  \"Coravel\": {\n    \"Mail\": {\n      \"From\":{\n        \"Address\": \"global@from.com\",\n        \"Name\": \"My Company\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Queuing Async Task\nDESCRIPTION: Example of queuing an asynchronous task using QueueAsyncTask method.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Queuing/README.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nthis._queue.QueueAsyncTask(async() => {\n    await Task.Delay(1000);\n    Console.WriteLine(\"This was queued!\");\n });\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Coravel Emails (C#)\nDESCRIPTION: Demonstrates how to attach and embed images in Coravel emails using ContentId. The example shows attaching an image file and referencing it in the HTML body.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nemailMessage\n    .Attach(new Attachment\n    {\n        Name = \"My Image\",\n        Bytes = myBytes,\n        ContentId = \"my-image\"\n    });\n```\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <img src=\"cid:my-image\" />\n</html>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Cache Driver in Coravel\nDESCRIPTION: This snippet illustrates how to register a custom cache driver in Coravel. It shows two methods: directly passing an instance and using a factory function with the service provider.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Caching/README.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddCache(new RedisCache());\n\n// Or, if you need the service provider to create your object:\nservices.AddCache(provider => new RedisCache(provider.GetService<ISomeRegisteredInterface>()));\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Progress Logging\nDESCRIPTION: Shows how to enable logging of scheduled task progress for debugging purposes.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nprovider.UseScheduler(scheduler =>\n{\n    // Assign scheduled tasks...\n})\n.LogScheduledTaskProgress();\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Driver in appsettings.json\nDESCRIPTION: JSON configuration for the SMTP driver with host, port, username and password settings.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"Coravel\": {\n  \"Mail\": {\n    \"Driver\": \"SMTP\",\n    \"Host\": \"smtp.mailtrap.io\",\n    \"Port\": 2525,\n    \"Username\": \"[insert]\",\n    \"Password\": \"[insert]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Razor View Compilation in Shared Library (XML)\nDESCRIPTION: Shows the necessary XML configuration in the .csproj file to ensure proper compilation of Razor views in a shared library for .NET Core 3.1 and above.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk.Razor\">  ðŸ‘ˆ Make sure it's this SDK.\n\n  <PropertyGroup>\n    <AddRazorSupportForMvc>True</AddRazorSupportForMvc> ðŸ‘ˆ Add this too.\n  </PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Using Inline Mailable with View\nDESCRIPTION: Example of creating and sending an inline mailable with a view template in a controller action.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<IActionResult> SendMyEmail()\n{\n    UserModel user = new UserModel()\n    {\n        Email = \"FromUserModel@test.com\",\n        Name = \"Coravel Test Person\"\n    };\n\n    await this._mailer.SendAsync(\n        Mailable.AsInline<UserModel>()\n            .To(user)\n            .From(\"from@test.com\")\n            .View(\"~/Views/Mail/NewUser.cshtml\", user)\n    );\n\n    return Ok();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Task at Application Startup\nDESCRIPTION: Demonstrates how to configure a task to run once at application startup while maintaining its regular schedule.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nscheduler.Schedule<CacheSomeStuff>()\n    .Hourly()\n    .Weekday()\n    .RunOnceAtStart();\n```\n\n----------------------------------------\n\nTITLE: Scheduling Monthly Task Using Cron\nDESCRIPTION: Demonstrates using cron expression to schedule a task for the first day of each month.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nscheduler.Schedule(\n    () => Console.WriteLine(\"First day of the month.\")\n)\n.Cron(\"0 0 1 * *\")\n```\n\n----------------------------------------\n\nTITLE: Scheduling Hourly Monday-Only Task\nDESCRIPTION: Example of scheduling a task to run hourly but only on Mondays.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nscheduler.Schedule(\n    () => Console.WriteLine(\"Hourly on Mondays.\")\n)\n.Hourly()\n.Monday();\n```\n\n----------------------------------------\n\nTITLE: Queue Error Handler Configuration\nDESCRIPTION: Setup code for global error handling in the queue configuration.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Queuing/README.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar provider = app.ApplicationServices;\nprovider\n    .ConfigureQueue()\n    .OnError(e =>\n    {\n        //... handle the error\n    });\n```\n\n----------------------------------------\n\nTITLE: Scheduling Daily Task at Specific Time\nDESCRIPTION: Shows how to schedule a task to run daily at a specific hour (1 PM).\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nscheduler.Schedule(\n    () => Console.WriteLine(\"Daily at 1 pm.\")\n)\n.DailyAtHour(13);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Listeners for an Event with Coravel CLI\nDESCRIPTION: Examples of creating multiple listeners for a single event. This demonstrates how to associate multiple actions with the same event trigger.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Cli/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncoravel event new UserCreatedEvent SendUserCreatedEmailListener\n```\n\nLANGUAGE: bash\nCODE:\n```\ncoravel event new UserCreatedEvent StartBillingUserListener\n```\n\n----------------------------------------\n\nTITLE: Queuing Emails with Coravel (C#)\nDESCRIPTION: Shows how to queue email sending tasks using Coravel's queuing feature in combination with the mailer.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nthis._queue.QueueAsyncTask(async () =>\n    await this._mailer.SendAsync(new MyMailable())\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Boolean Constraint to Scheduled Task\nDESCRIPTION: Shows how to add conditional execution to scheduled tasks using the When method.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nscheduler\n    .Schedule(() => DoSomeStuff())\n    .EveryMinute()\n    .When(SomeMethodThatChecksStuff);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using On-The-Fly Mailables in Coravel (C#)\nDESCRIPTION: Demonstrates how to create and use dynamic Mailables in Coravel for situations where email configuration needs to be done at runtime.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\npublic GenericMailable : Mailable<string>\n{\n    public override void Build() { }\n}\n\n// Usage\nvar mail = new GenericMailable()\n    .To(\"to@test.com\")\n    .From(\"from@test.com\")\n    .Html(\"<html><body><h1>Hi!</h1></body></html>\");\n\nawait this._mailer.SendAsync(mail);\n```\n\n----------------------------------------\n\nTITLE: Configuring Coravel Project Home Page with YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration for the Coravel project home page. It sets up the page structure with an action button linking to the Installation section, a hero image, three key features highlighting the project's benefits, and a copyright footer.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nhome: true\nactionText: Get Started â†’\nactionLink: /Installation/\nheroImage: /img/scheduledailyreport.png\nfeatures:\n- title: Ease Of Use\n  details: Coravel is designed to be intuitive and straight-forward so you can focus on your app.\n- title: Near-Zero Config\n  details: Stop wasting hours on configuring your boilerplate/infrastructural code and focus on delivering value to your customers.\n- title: .NET Native\n  details: Coravel is designed from the ground-up to hook into .NET with zero-fuss.\nfooter: Copyright Â© 2019-present James Hickey\n---\n```\n\n----------------------------------------\n\nTITLE: Using Email Components in Coravel Razor Templates (C#)\nDESCRIPTION: Shows how to use Coravel's built-in email components, specifically the EmailLinkButton, in a Razor template for emails.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n@await Component.InvokeAsync(\"EmailLinkButton\", new  { text = \"click me\", url = \"www.google.com\" })\n\n@await Component.InvokeAsync(\"EmailLinkButton\", new  { text = \"click me\", url = \"www.google.com\", backgroundColor = \"#333\" })\n```\n\n----------------------------------------\n\nTITLE: Queuing Synchronous Task\nDESCRIPTION: Shows how to queue a synchronous task using QueueTask method.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Queuing/README.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic IActionResult QueueTask() {\n    this._queue.QueueTask(() => Console.WriteLine(\"This was queued!\"));\n    return Ok();\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Mailables for Visual Testing in Coravel (C#)\nDESCRIPTION: Demonstrates how to render a Mailable as HTML for visual testing purposes in a controller action using Coravel's RenderAsync method.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<IActionResult> RenderView()\n{\n    string message = await this._mailer.RenderAsync(new PendingOrderMailable());\n    return Content(message, \"text/html\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting View Layout to Plain Template\nDESCRIPTION: Code to set the mail view layout to use Coravel's plain email template.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n@{\n    Layout = \"~/Areas/Coravel/Pages/Mail/PlainTemplate.cshtml\";\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Daily Report Job\nDESCRIPTION: Shows how to schedule the daily report email job to run daily.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nscheduler\n    .Schedule<SendDailyReportsEmailJob>()\n    .Daily();\n```\n\n----------------------------------------\n\nTITLE: Configuring Tick Catch Up Logging\nDESCRIPTION: JSON configuration to enable logging of scheduler tick catch-up events.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Scheduler/README.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n\"Coravel\": {\n    \"Schedule\": {\n        \"LogTickCatchUp\": true\n    }\n}}\n```\n\n----------------------------------------\n\nTITLE: Injecting ICache Interface in .NET Core Controller\nDESCRIPTION: This code demonstrates how to inject the ICache interface into a controller constructor for dependency injection in a .NET Core application using Coravel.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Caching/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate ICache _cache;\n\npublic CacheController(ICache cache)\n{\n    this._cache = cache;\n}\n```\n\n----------------------------------------\n\nTITLE: Queue Consumption Delay Configuration\nDESCRIPTION: JSON configuration for adjusting the queue consumption delay in appsettings.json.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Queuing/README.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\"Coravel\": {\n  \"Queue\": {\n    \"ConsummationDelay\": 1\n  }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer in Traditional .NET Application\nDESCRIPTION: Demonstrates adding the mailer service to the DI container in a non-web project using the Startup.ConfigureServices method.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMailer(this.Configuration); // Instance of IConfiguration.\n```\n\n----------------------------------------\n\nTITLE: Installing Coravel into an Existing .NET Core Project\nDESCRIPTION: Command to install Coravel into an existing .NET Core project. This adds the required Coravel NuGet packages to your project automatically.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncoravel install\n```\n\n----------------------------------------\n\nTITLE: Registering Invocables in ASP.NET Core Dependency Injection\nDESCRIPTION: Code snippet showing how to register custom Invocable classes with the ASP.NET Core dependency injection container in the Startup.cs file.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Invocables/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddTransient<SendDailyStatsReport>();\nservices.AddTransient<SomeOtherInvocable>();\n```\n\n----------------------------------------\n\nTITLE: Configuring File Log Driver in appsettings.json\nDESCRIPTION: JSON configuration for the File Log driver which sends emails to a mail.log file in the project root.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"Coravel\": {\n  \"Mail\": {\n    \"Driver\": \"FileLog\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Mail Views for Coravel Mailer\nDESCRIPTION: Command to set up the mail views and infrastructure for Coravel's mailer feature. This creates the necessary files and folder structure for using mail functionality.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncoravel mail install\n```\n\n----------------------------------------\n\nTITLE: Using Coravel CLI to Install Coravel\nDESCRIPTION: Command to install Coravel into an existing project using the Coravel CLI tool. This provides an alternative to the direct NuGet package installation.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Installation/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncoravel install\n```\n\n----------------------------------------\n\nTITLE: Clearing Specific Cache Entry with Forget in Coravel\nDESCRIPTION: This code illustrates how to use the Forget method to clear a specific cache entry by key in Coravel.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Caching/README.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nthis._cache.Forget(\"BigDataCacheKey\");\n```\n\n----------------------------------------\n\nTITLE: Queuing Invocable Task\nDESCRIPTION: Demonstrates how to queue an invocable task using QueueInvocable method.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Queuing/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nthis._queue.QueueInvocable<GrabDataFromApiAndPutInDBInvocable>();\n```\n\n----------------------------------------\n\nTITLE: Creating New Mailable Classes with Coravel CLI\nDESCRIPTION: Command to generate a new mailable class and associated view. This simplifies the creation of email templates and their corresponding code implementations.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Cli/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncoravel mail new [nameOfYourMailable]\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Template Settings in appsettings.json\nDESCRIPTION: JSON configuration for global email template settings including logo, company details, and styling colors.\nSOURCE: https://github.com/jamesmh/coravel/blob/master/DocsV2/docs/Mailing/README.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"Coravel\": {\n    \"Mail\": {\n        /* Your app's logo that will be shown at the top of your e-mails. */\n        \"LogoSrc\": \"https://www.google.ca/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\",\n\n        /* If set, displayed in the footer. */\n        \"CompanyAddress\": \"1111 My Company's Address\",\n\n        /* If set, displayed in the footer inside the copyright statement. */\n        \"CompanyName\": \"My Company's Name\",\n\n        /* If set, is used to color the header (when using Template.cshtml) */\n        \"PrimaryColor\": \"#539be2\"\n    }\n}\n```"
  }
]