[
  {
    "owner": "googleapis",
    "repo": "google-api-go-client",
    "content": "TITLE: Instantiating a Google API Service - Go\nDESCRIPTION: Shows how to construct a new instance of a Google API service (here urlshortener) by passing an authenticated http.Client. The required dependency is an http.Client configured for Google authentication; this client can be derived via OAuth2, service account, or API key. Returns a pointer to the API-specific Service and an error; use within an initialization function when setting up communication with Google APIs.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/GettingStarted.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n    svc, err := urlshortener.New(httpClient)\n```\n\n----------------------------------------\n\nTITLE: Importing Google API Libraries - Go\nDESCRIPTION: Provides a complete import block for pulling in necessary Go packages to use Google APIs, including context handling, OAuth2 authentication, and the urlshortener/v1 API client. Dependencies are standard Go modules plus golang.org/x/oauth2 and google.golang.org/api packages installed as described. Import path names are correct for modern Go modules, and the import list should be placed at the top of any Go source file utilizing the Google API client.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/GettingStarted.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"golang.org/x/oauth2\"\n    \"golang.org/x/oauth2/google\"\n    \"google.golang.org/api/urlshortener/v1\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining and Using TranslateText with Google Translate Go Client\nDESCRIPTION: This Go function demonstrates how to use the google.golang.org/api/translate/v3 package to translate text to a different language using an instantiated translate.Service. It builds a request including the target language and input text and makes an API call via the client, handling errors and extracting the translated text from the response. The only dependency is a valid translate.Service instance, and the required project ID is retrieved from the environment; the function returns the translated string or an error.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/testing.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"fmt\"\n    \"os\"\n\n    \"google.golang.org/api/translate/v3\"\n)\n\n// TranslateText translates text to the given language using the provided\n// service.\nfunc TranslateText(service *translate.Service, text, language string) (string, error) {\n    parent := fmt.Sprintf(\"projects/%s/locations/global\", os.Getenv(\"GOOGLE_CLOUD_PROJECT\"))\n    req := &translate.TranslateTextRequest{\n        TargetLanguageCode: language,\n        Contents:           []string{text},\n    }\n    resp, err := service.Projects.Locations.TranslateText(parent, req).Do()\n    if err != nil {\n        return \"\", fmt.Errorf(\"unable to translate text: %v\", err)\n    }\n    return resp.Translations[0].TranslatedText, nil\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Google API Go Client with URL Shortener Example\nDESCRIPTION: Shows a basic example of importing and initializing a Google API service (URL Shortener) in a Go application. Creates a service instance using the default context background.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"context\"\n        \"net/http\"\n\n        \"google.golang.org/api/urlshortener/v1\"\n)\n\nfunc main() {\n        ctx := context.Background()\n        svc, err := urlshortener.NewService(ctx)\n        // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Long URL from a Shortened URL via Google API - Go\nDESCRIPTION: Shows how to perform a URL expansion API request via the urlshortener service by invoking svc.Url.Get and handling the returned result. The svc variable must be an initialized urlshortener.Service; shortURL is the input parameter. On success, outputs the expanded long URL; on error, prints an error message. This snippet depends on a working API client setup and demonstrates a common pattern of resource retrieval and error checking.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/GettingStarted.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n    url, err := svc.Url.Get(shortURL).Do()\n    if err != nil {\n        ...\n    }\n    fmt.Printf(\"The URL %s goes to %s\\n\", shortURL, url.LongUrl)\n```\n\n----------------------------------------\n\nTITLE: Using Application Default Credentials with Google Sheets API\nDESCRIPTION: Demonstrates how to use Google Application Default Credentials to authorize API calls with the Google Sheets API. This is the default authentication method that works in many environments without explicit configuration.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// import \"google.golang.org/api/sheets/v4\"\nclient, err := sheets.NewService(ctx)\n```\n\n----------------------------------------\n\nTITLE: Defining an Interface and Highâ€‘Level Facade for Google Translate in Go\nDESCRIPTION: This snippet defines a Go interface TranslateService as a high-level abstraction over the Google Translate service, along with a helper function that uses this interface to perform translation. This structure allows injecting mocks or concrete implementations as needed, facilitating cleaner unit testing and decoupled business logic. No external dependencies except for the interface definition are required; both the interface and the wrapper function are provided.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/testing.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// TranslateService is a facade of a `translate.Service`, specifically used to\n// for translating text.\ntype TranslateService interface {\n    TranslateText(text, language string) (string, error)\n}\n\n// TranslateTextHighLevel translates text to the given language using the\n// provided service.\nfunc TranslateTextHighLevel(service TranslateService, text, language string) (string, error) {\n    return service.TranslateText(text, language)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Config for 3-legged OAuth - Go\nDESCRIPTION: Defines an OAuth2 configuration struct for initiating an authorization flow using Google's 3-legged OAuth (user intermediary) mechanism. Requires the golang.org/x/oauth2 and golang.org/x/oauth2/google libraries, along with a client ID, client secret, OAuth endpoint, and appropriate API scope (e.g., for urlshortener). Placeholders should be replaced with real credential values; the config object forms the basis for redirect URIs and token exchanges. Outputs a usable configuration for further steps in obtaining user tokens.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/GettingStarted.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n    var config = &oauth2.Config{\n        ClientID:     \"\", // from https://console.developers.google.com/project/<your-project-id>/apiui/credential\n        ClientSecret: \"\", // from https://console.developers.google.com/project/<your-project-id>/apiui/credential\n        Endpoint:     google.Endpoint,\n        Scopes:       []string{urlshortener.UrlshortenerScope},\n    }\n```\n\n----------------------------------------\n\nTITLE: Wrapping the Google Translate Service with an Interface in Go\nDESCRIPTION: This Go code creates a concrete implementation of the TranslateService interface by wrapping a google.golang.org/api/translate/v3 translate.Service inside a struct. It includes a constructor that instantiates the wrapped service with the provided context and options, and an implementation of the TranslateText method that formats the project path, constructs the request, and invokes the real API method. Dependencies required include the google.golang.org/api/translate/v3 and related Google Cloud authentication packages. The wrapper simplifies production-to-test swap for translation functionality.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/testing.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"google.golang.org/api/option\"\n    \"google.golang.org/api/translate/v3\"\n)\n\ntype translateService struct {\n    svc *translate.Service\n}\n\n// NewTranslateService creates a TranslateService.\nfunc NewTranslateService(ctx context.Context, opts ...option.ClientOption) TranslateService {\n    svc, err := translate.NewService(ctx, opts...)\n    if err != nil {\n        log.Fatalf(\"unable to create translate service, shutting down: %v\", err)\n    }\n    return &translateService{svc}\n}\n\nfunc (t *translateService) TranslateText(text, language string) (string, error) {\n    parent := fmt.Sprintf(\"projects/%s/locations/global\", os.Getenv(\"GOOGLE_CLOUD_PROJECT\"))\n    resp, err := t.svc.Projects.Locations.TranslateText(parent, &translate.TranslateTextRequest{\n        TargetLanguageCode: language,\n        Contents:           []string{text},\n    }).Do()\n    if err != nil {\n        return \"\", fmt.Errorf(\"unable to translate text: %v\", err)\n    }\n    return resp.Translations[0].TranslatedText, nil\n}\n\n```\n\n----------------------------------------\n\nTITLE: Faking HTTP Services with httptest for Translation Testing in Go\nDESCRIPTION: This Go test function demonstrates how to use the net/http/httptest package to fake HTTP responses for the Google Translate client within tests, allowing code to call the TranslateText method using a local server instead of the real API. It mocks the /TranslateText endpoint to return a hardcoded translation, initializes a translate.Service configured to use this mock server, and verifies the client code's output. The snippet requires httptest, net/http, encoding/json, google.golang.org/api/translate/v3, and proper setup of the TranslateText function.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/testing.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"testing\"\n\n    \"google.golang.org/api/option\"\n    \"google.golang.org/api/translate/v3\"\n)\n\nfunc TestTranslateText(t *testing.T) {\n    ctx := context.Background()\n    ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        resp := &translate.TranslateTextResponse{\n            Translations: []*translate.Translation{\n                {TranslatedText: \"Hello World\"},\n            },\n        }\n        b, err := json.Marshal(resp)\n        if err != nil {\n            http.Error(w, \"unable to marshal request: \"+err.Error(), http.StatusBadRequest)\n            return\n        }\n        w.Write(b)\n    }))\n    defer ts.Close()\n    svc, err := translate.NewService(ctx, option.WithoutAuthentication(), option.WithEndpoint(ts.URL))\n    if err != nil {\n        t.Fatalf(\"unable to create client: %v\", err)\n    }\n    text, err := TranslateText(svc, \"Hola Mundo\", \"en-US\")\n    if err != nil {\n        t.Fatal(err)\n    }\n    if text != \"Hello World\" {\n        t.Fatalf(\"got %q, want Hello World\", text)\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Mocking the TranslateService Interface for Unit Testing in Go\nDESCRIPTION: This Go code provides a mock implementation of the TranslateService interface for use in unit tests. The mockService struct returns a constant translation and is used in a test function to verify that the TranslateTextHighLevel function correctly interacts with the interface. The only dependency is the presence of the TranslateService interface and the wrapper function, making this snippet self-contained for mocking purposes.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/testing.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport \"testing\"\n\n// mockService fulfills the TranslateService interface.\ntype mockService struct{}\n\nfunc (*mockService) TranslateText(text, language string) (string, error) {\n    return \"Hello World\", nil\n}\nfunc TestTranslateTextHighLevel(t *testing.T) {\n    svc := &mockService{}\n    text, err := TranslateTextHighLevel(svc, \"Hola Mundo\", \"en-US\")\n    if err != nil {\n        t.Fatal(err)\n    }\n    if text != \"Hello World\" {\n        t.Fatalf(\"got %q, want Hello World\", text)\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating an API Key Authenticated HTTP Client - Go\nDESCRIPTION: Demonstrates building a context and HTTP client configured to use an API key for authentication with Google APIs. Requires the google.golang.org/api/googleapi/transport and golang.org/x/oauth2 packages, an existing API key, and a valid oauth2.Config and Token. The sample sets up a context with the custom client and then builds the API service client. This pattern enables API calls where API key authentication is acceptable or required and employs standard Google transport wrappers.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/GettingStarted.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n    ctx := context.WithValue(context.Background(), oauth2.HTTPClient, &http.Client{\n        Transport: &transport.APIKey{Key: developerKey},\n    })\n    oauthConfig := &oauth2.Config{ .... }\n    var token *oauth2.Token = .... // via cache, or oauthConfig.Exchange\n    httpClient := oauthConfig.Client(ctx, token)\n    svc, err := urlshortener.New(httpClient)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Authorizing with JSON Key File for Google API Services\nDESCRIPTION: Shows how to authenticate with a service account JSON key file when using Google API services. Uses the option.WithCredentialsFile function to specify the path to the key file.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nclient, err := sheets.NewService(ctx, option.WithCredentialsFile(\"path/to/keyfile.json\"))\n```\n\n----------------------------------------\n\nTITLE: Using Custom OAuth2 Token Source with Google API Services\nDESCRIPTION: Demonstrates how to use a custom OAuth2 token source for more granular control over authorization when accessing Google APIs. Utilizes the golang.org/x/oauth2 package with option.WithTokenSource.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntokenSource := ...\nsvc, err := sheets.NewService(ctx, option.WithTokenSource(tokenSource))\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Google API Do Methods - Go\nDESCRIPTION: Presents a typical error handling flow for API calls made via Do methods, leveraging type assertion to check if the error is of type googleapi.Error and inspecting the HTTP status code. Requires google.golang.org/api/googleapi and net/http libraries. This pattern enables more granular handling of API failures (e.g., HTTP 404 not found), so different HTTP errors can trigger specific logic in client applications. Place it where robust error handling of API results is needed.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/GettingStarted.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n    url, err := svc.Url.Get(shortURL).Do()\n    if err != nil {\n        if e, ok := err.(*googleapi.Error); ok && e.Code == http.StatusNotFound {\n            ...\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Google API Go Client Packages using go get\nDESCRIPTION: Demonstrates how to install various Google API packages for Go using the go get command. Examples include tasks, moderator, and urlshortener APIs.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get google.golang.org/api/tasks/v1\n$ go get google.golang.org/api/moderator/v1\n$ go get google.golang.org/api/urlshortener/v1\n... etc ...\n```\n\n----------------------------------------\n\nTITLE: Installing Google API Go Client with go get - Bash\nDESCRIPTION: Demonstrates the installation of a specific Google API client library (urlshortener/v1) using the Go package manager. Requires Go installed and access to a terminal or command prompt. Run this command to download and install the Go bindings for the chosen API; no code dependencies besides Go tooling. Outputs no value, but makes the library available for import in your projects.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/GettingStarted.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get -u google.golang.org/api/urlshortener/v1\n```\n\n----------------------------------------\n\nTITLE: Generating a Client from a Local Discovery Document - Bash\nDESCRIPTION: This bash snippet builds the google-api-go-generator binary from source and executes it to generate a Go client from a specified local API discovery JSON file. The command requires the Go toolchain installed and expects an existing local discovery document. Flags include -cache (controls use of cached API definitions), -install (installs the generated package), and -api_json_file (path to the local API discovery JSON). Output will be a generated Go client package based on the provided discovery document.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/google-api-go-generator/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo build -o google-api-go-generator && ./google-api-go-generator -cache=true -install -api_json_file=/path/to/file\n```\n\n----------------------------------------\n\nTITLE: Refreshing an Existing Go API Client - Bash\nDESCRIPTION: This bash snippet builds the generator and uses it to refresh an existing Go API client by fetching up-to-date data from the public discovery service for a specified API. Required flags include -cache (set to false to force redownload), -install (installs the refreshed package), -api (specifies the API and version), and -gendir (output directory for generated files). Requires a valid Go environment and API discovery access.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/google-api-go-generator/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo build -o google-api-go-generator && ./google-api-go-generator -cache=false -install -api=sevicename:vsomething -gendir=..\n```\n\n----------------------------------------\n\nTITLE: Running Makefile Command for All API Clients - Bash\nDESCRIPTION: This bash snippet executes the 'make all' command, which initiates the automated process to generate all configured Go API client libraries using the Makefile workflow. It is intended for users who want to replicate the automated client generation locally. Requires GNU Make and a properly configured Makefile in the repository root. No command-line arguments required. The output will include all generated API clients in their respective directories.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/google-api-go-generator/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Listing New Commits Since Last Release - Shell - Bash\nDESCRIPTION: Shows all commits made since the previous release tag by specifying a tag range in the Git log command. Replace $CV with the current version tag to get a changelog since that version. Ensures visibility of new changes before releasing.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/RELEASING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit log $CV..\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Clients via Makefile - Make/Shell\nDESCRIPTION: Invokes the Makefile target 'all' to regenerate all Go API client libraries. Typically run by a cron job as part of the nightly automation to ensure generated clients are always up-to-date with the latest service definitions. Requires Make and all necessary Go dependencies.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/RELEASING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Regenerating the Internal Version Package - Go/Shell - Bash\nDESCRIPTION: Runs code generation within the 'internal/version' directory, using 'go generate' to update generated source code as needed. Assumes a properly configured 'go generate' directive in the directory. Requires Go toolchain installed.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/RELEASING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd internal/version && go generate && cd ../..\n```\n\n----------------------------------------\n\nTITLE: Determining Current Release Version with Git - Shell - Bash\nDESCRIPTION: Lists all tags in the Git repository to determine the current release version. The tag format follows the 'vX.Y.Z' versioning scheme. This is a basic prerequisite step before performing other release actions to identify the last published version.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/RELEASING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -l\n```\n\n----------------------------------------\n\nTITLE: Updating Local Repository and Pushing New Tag - Shell - Bash\nDESCRIPTION: Performs a pull from remote to ensure the branch is up to date, then tags the current commit with the new release version and pushes this tag to the default remote. Replace $NV with the new version tag. Pushes are required for Github releases to recognize the version.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/RELEASING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit pull\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit tag $NV\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin $NV\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository Using Git - Bash\nDESCRIPTION: This snippet demonstrates how to clone the google-api-go-client repository from GitHub using the git clone command. It requires git to be installed on your system, and the resulting local directory will contain the repository files needed for contribution tasks. The expected input is the repository URL, and the output is a local copy of the repository.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/googleapis/google-api-go-client\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Cloned Source - Bash\nDESCRIPTION: This snippet shows how to change the current working directory to the checked-out google-api-go-client source folder after cloning. It requires a successful clone operation and the directory to exist. This prepares the environment for running commands or making changes within the repository context.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd google-api-go-client\n```\n\n----------------------------------------\n\nTITLE: Adding a Fork as a Remote - Bash\nDESCRIPTION: This snippet adds a personal fork of the repository as a new git remote called 'fork'. Replace GITHUB_USERNAME with your actual GitHub username. This step is necessary for pushing changes to your fork and creating pull requests against the main repository.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add fork git@github.com:GITHUB_USERNAME/google-api-go-client.git\n```\n\n----------------------------------------\n\nTITLE: Example Conventional Commit Message - Markdown\nDESCRIPTION: This markdown code block provides an example of a commit message following the Conventional Commit specification, which enforces structured commit message formats. Required for contributions to maintain readable history and facilitate automation in the repository.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nfunctions: add gophers codelab\n```\n\n----------------------------------------\n\nTITLE: Repository Version Update Format\nDESCRIPTION: Standard format for documenting version changes in the repository, showing features and bug fixes with associated pull request links and commit hashes.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/CHANGES.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.226.0](https://github.com/googleapis/google-api-go-client/compare/v0.225.0...v0.226.0) (2025-03-13)\n\n### Features\n\n* **all:** Auto-regenerate discovery clients ([#3059](https://github.com/googleapis/google-api-go-client/issues/3059)) ([36a4396](https://github.com/googleapis/google-api-go-client/commit/36a4396b57da8f0b6f01fb1e4fd0b3a651469b35))\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry v0.194.0\nDESCRIPTION: Changelog entry documenting version 0.194.0 release including auto-regeneration of discovery clients and bug fixes.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/CHANGES.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.194.0](https://github.com/googleapis/google-api-go-client/compare/v0.193.0...v0.194.0) (2024-08-22)\n\n### Features\n\n* **all:** Auto-regenerate discovery clients ([#2746](https://github.com/googleapis/google-api-go-client/issues/2746)) ([5d61f08](https://github.com/googleapis/google-api-go-client/commit/5d61f08943c359fa97c9764f9e7e6592894b251e))\n\n### Bug Fixes\n\n* **gen:** Change HttpBody.Data from string to any for monitoring:v1 ([#2744](https://github.com/googleapis/google-api-go-client/issues/2744)) ([eda6a59](https://github.com/googleapis/google-api-go-client/commit/eda6a594194b59d5089c3bfbe52bd125a542da4e)), refs [#2304](https://github.com/googleapis/google-api-go-client/issues/2304)\n```\n\n----------------------------------------\n\nTITLE: Adding Context Headers in gensupport\nDESCRIPTION: A feature added in version 0.131.0 that allows passing headers via context. This enhancement is likely part of the gensupport package which provides functionality for API client generation.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/CHANGES.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ngensupport: Pass in headers via context\n```\n\n----------------------------------------\n\nTITLE: Adding Configurable Retry in Go\nDESCRIPTION: Adds configurable retry functionality to the internal gensupport package.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/CHANGES.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n**internal/gensupport:** add configurable retry ([#1324](https://www.github.com/googleapis/google-api-go-client/issues/1324)) ([8d2eca8](https://www.github.com/googleapis/google-api-go-client/commit/8d2eca842c7289b0b1d243f564af19645d2d6249))\n```\n\n----------------------------------------\n\nTITLE: Passing Call Credentials for DirectPath in Go\nDESCRIPTION: Updates the transport package to pass call credentials to grpc-go for DirectPath functionality.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/CHANGES.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n**transport:** pass call credentials to grpc-go for DirectPath ([#1297](https://www.github.com/googleapis/google-api-go-client/issues/1297)) ([c06faf5](https://www.github.com/googleapis/google-api-go-client/commit/c06faf5ee58f90117105fd1099e0d52816dede59))\n```\n\n----------------------------------------\n\nTITLE: Adding Google-C2P Dependency for DirectPath in Go\nDESCRIPTION: Adds a dependency on google-c2p to the transport package for DirectPath functionality.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/CHANGES.md#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n**transport:** add google-c2p dependence to DirectPath ([#1260](https://www.github.com/googleapis/google-api-go-client/issues/1260)) ([aa0f0be](https://www.github.com/googleapis/google-api-go-client/commit/aa0f0be70f2d6003c6d25b0852ba754bc12cba34))\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Option for Credential Forcing in Go\nDESCRIPTION: Adds an internal option to force the use of certain credentials.\nSOURCE: https://github.com/googleapis/google-api-go-client/blob/main/CHANGES.md#_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n**option:** add internaloption to force use of certain credential ([#1162](https://www.github.com/googleapis/google-api-go-client/issues/1162)) ([62f4bc9](https://www.github.com/googleapis/google-api-go-client/commit/62f4bc9cc6c081a5e30c360dce098e5d8f55050f))\n```"
  }
]