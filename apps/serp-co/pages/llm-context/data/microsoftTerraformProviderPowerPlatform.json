[
  {
    "owner": "microsoft",
    "repo": "terraform-provider-power-platform",
    "content": "TITLE: Configuring Power Platform Provider in Terraform\nDESCRIPTION: This snippet shows how to configure the Power Platform provider in a Terraform configuration file. It specifies the required provider and its version.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source  = \"microsoft/power-platform\"\n      version = \"~> 3.1\" # Replace with the latest version\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Provider for OIDC Authentication\nDESCRIPTION: This Terraform snippet demonstrates how to configure the Power Platform provider to use OIDC authentication. It sets the tenant_id, client_id, and enables OIDC.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"powerplatform\" {\n  tenant_id = var.tenant_id\n  client_id = var.client_id # The client ID for the Azure resource containing the federated credentials for Azure DevOps. Should be an App Registration or a Managed Identity.\n  use_oidc = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerPlatform Provider and Creating Environment in Terraform\nDESCRIPTION: This snippet demonstrates how to configure the PowerPlatform provider and create a sandbox environment with Dataverse database using Terraform. It specifies the environment's display name, description, location, type, and Dataverse settings.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/environment.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nresource \"powerplatform_environment\" \"development\" {\n  display_name     = \"example_environment\"\n  description      = \"example environment description\"\n  location         = \"europe\"\n  azure_region     = \"northeurope\"\n  environment_type = \"Sandbox\"\n  cadence          = \"Moderate\"\n  dataverse = {\n    language_code     = \"1033\"\n    currency_code     = \"USD\"\n    security_group_id = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Solution with Terraform\nDESCRIPTION: Complete example showing how to set up a Power Platform environment and import a solution with custom settings. Includes provider configuration, environment creation, solution settings file creation, and solution import.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/solution.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n    local = {\n      version = \"2.5.2\"\n      source  = \"hashicorp/local\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nprovider \"local\" {}\n\nresource \"local_file\" \"solution_settings_file\" {\n  filename = \"${path.module}/solution_settings.json\"\n  content  = <<EOF\n{\n  \"EnvironmentVariables\": [\n    {\n      \"SchemaName\": \"cra6e_SolutionVariableDataSource\",\n      \"Value\": \"/sites/Shared%20Documents1\"\n    },\n    {\n      \"SchemaName\": \"cra6e_SolutionVariableJson\",\n      \"Value\": \"{ \\\"value\\\": 1234, \\\"text\\\": \\\"abc\\\" }\"\n    },\n    {\n      \"SchemaName\": \"cra6e_SolutionVariableText\",\n      \"Value\": \"${powerplatform_environment.environment.id}\"\n    }\n  ],\n  \"ConnectionReferences\": [\n    {\n      \"LogicalName\": \"cra6e_ConnectionReferenceSharePoint\",\n      \"ConnectionId\": \"00000000-0000-0000-0000-000000000000\",\n      \"ConnectorId\": \"/providers/Microsoft.PowerApps/apis/shared_sharepointonline\"\n    }\n  ]\n}\nEOF\n}\n\nresource \"powerplatform_environment\" \"environment\" {\n  display_name     = \"Solution Import Test 1\"\n  location         = \"europe\"\n  environment_type = \"Sandbox\"\n  dataverse = {\n    language_code     = \"1033\"\n    currency_code     = \"USD\"\n    security_group_id = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n\nresource \"powerplatform_solution\" \"solution\" {\n  environment_id = powerplatform_environment.environment.id\n  solution_file  = \"${path.module}/TerraformTestSolution_Complex_1_1_0_0.zip\"\n  settings_file  = local_file.solution_settings_file.filename\n}\n```\n\n----------------------------------------\n\nTITLE: Importing PowerPlatform Environment Resources in Terraform\nDESCRIPTION: Example command for importing an existing Power Platform environment into Terraform state. This requires replacing the placeholder GUID with an actual environment ID.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/environment.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Environment resource can be imported using the environment id (replace with a real environment guid)\nterraform import powerplatform_environment.example 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Configuring Pay-As-You-Go Billing Policy in Power Platform with Terraform\nDESCRIPTION: This snippet demonstrates how to create a Power Platform billing policy that's linked to an Azure subscription. It sets up multiple providers, retrieves the current Azure client configuration, creates a resource group with a generated name, and configures a pay-as-you-go billing policy in the Europe region.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/billing_policy.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nprovider \"azurerm\" {\n  features {}\n  use_cli = true\n}\n\nprovider \"azurecaf\" {\n}\n\ndata \"azurerm_client_config\" \"current\" {\n}\n\nresource \"azurecaf_name\" \"rg_example_name\" {\n  name          = \"power-platform-billing\"\n  resource_type = \"azurerm_resource_group\"\n  random_length = 5\n  clean_input   = true\n}\n\nresource \"azurerm_resource_group\" \"rg_example\" {\n  name     = azurecaf_name.rg_example_name.result\n  location = \"westeurope\"\n}\n\nresource \"powerplatform_billing_policy\" \"pay_as_you_go\" {\n  name     = \"payAsYouGoBillingPolicyExample\"\n  location = \"europe\"\n  status   = \"Enabled\"\n  billing_instrument = {\n    resource_group  = azurerm_resource_group.rg_example.name\n    subscription_id = data.azurerm_client_config.current.subscription_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: End-to-End Example of Power Platform Data Record Management with Terraform\nDESCRIPTION: This comprehensive example demonstrates creating an environment, business unit, role, team, and application user in Power Platform using Terraform. It showcases the integration of multiple resources and data sources.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/data_record.md#2025-04-23_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n    azuread = {\n      source = \"hashicorp/azuread\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nprovider \"azuread\" {\n  use_cli = true\n}\n\nresource \"powerplatform_environment\" \"data_record_example_env\" {\n  display_name     = \"powerplatform_data_record_example\"\n  location         = \"europe\"\n  environment_type = \"Sandbox\"\n  dataverse = {\n    language_code     = \"1033\"\n    currency_code     = \"USD\"\n    security_group_id = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n\n# get the root business unit by querying for the business unit without a parent\ndata \"powerplatform_data_records\" \"root_business_unit\" {\n  environment_id    = powerplatform_environment.data_record_example_env.id\n  entity_collection = \"businessunits\"\n  filter            = \"parentbusinessunitid eq null\"\n  select            = [\"name\"]\n}\n\n# Create a new business unit with the root business unit as parent\nmodule \"business_unit\" {\n  source                  = \"./res_business_unit\"\n  environment_id          = powerplatform_environment.data_record_example_env.id\n  name                    = \"Sales\"\n  costcenter              = \"123\"\n  parent_business_unit_id = one(data.powerplatform_data_records.root_business_unit.rows).businessunitid\n}\n\n# Create a new role\nmodule \"custom_role\" {\n  source           = \"./res_role\"\n  environment_id   = powerplatform_environment.data_record_example_env.id\n  role_name        = \"my custom role\"\n  business_unit_id = one(data.powerplatform_data_records.root_business_unit.rows).businessunitid\n}\n\nmodule \"team\" {\n  source           = \"./res_team\"\n  environment_id   = powerplatform_environment.data_record_example_env.id\n  team_name        = \"main team\"\n  team_description = \"main team description\"\n  role_ids         = [module.custom_role.role_id]\n\n}\n\nresource \"azuread_application_registration\" \"data_record_app_user\" {\n  display_name = \"powerplatform_data_record_example\"\n}\n\nresource \"azuread_service_principal\" \"data_record_app_user\" {\n  client_id = azuread_application_registration.data_record_app_user.client_id\n}\n\nmodule \"application_user\" {\n  source           = \"./res_application_user\"\n  environment_id   = powerplatform_environment.data_record_example_env.id\n  application_id   = azuread_application_registration.data_record_app_user.client_id\n  business_unit_id = one(data.powerplatform_data_records.root_business_unit.rows).businessunitid\n  role_ids         = [module.custom_role.role_id]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Environment and Settings with Terraform\nDESCRIPTION: This snippet demonstrates how to create a Power Platform environment and configure its settings using Terraform. It includes setting up the provider, creating an environment, managing it, and configuring various settings such as audit logs, email settings, and security options.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/environment_settings.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nresource \"powerplatform_environment\" \"example_environment_settings\" {\n  display_name     = \"example_environment_settings\"\n  location         = \"europe\"\n  environment_type = \"Sandbox\"\n  dataverse = {\n    language_code     = \"1033\"\n    currency_code     = \"USD\"\n    security_group_id = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n\nresource \"powerplatform_managed_environment\" \"managed_environment\" {\n  environment_id                  = powerplatform_environment.example_environment_settings.id\n  is_usage_insights_disabled      = true\n  is_group_sharing_disabled       = true\n  limit_sharing_mode              = \"ExcludeSharingToSecurityGroups\"\n  max_limit_user_sharing          = 10\n  solution_checker_mode           = \"Warn\"\n  suppress_validation_emails      = true\n  solution_checker_rule_overrides = toset([\"meta-remove-dup-reg\"])\n  maker_onboarding_markdown       = \"this is example markdown\"\n  maker_onboarding_url            = \"https://www.microsoft.com\"\n}\n\nresource \"powerplatform_environment_settings\" \"settings\" {\n  depends_on = [powerplatform_managed_environment.managed_environment]\n\n  environment_id = powerplatform_environment.example_environment_settings.id\n\n  audit_and_logs = {\n    plugin_trace_log_setting = \"Exception\"\n    audit_settings = {\n      is_audit_enabled             = true\n      is_user_access_audit_enabled = true\n      is_read_audit_enabled        = true\n      log_retention_period_in_days = -1 //Forever\n    }\n  }\n  email = {\n    email_settings = {\n      max_upload_file_size_in_bytes = 123456\n    }\n  }\n  product = {\n    behavior_settings = {\n      show_dashboard_cards_in_expanded_state = true\n    }\n    features = {\n      power_apps_component_framework_for_canvas_apps = false\n    }\n    security = {\n      allow_application_user_access               = true\n      allow_microsoft_trusted_service_tags        = true\n      allowed_ip_range_for_firewall               = toset([\"10.10.0.0/16\", \"192.168.0.0/24\"])\n      allowed_service_tags_for_firewall           = toset([\"ApiManagement\", \"AppService\"])\n      enable_ip_based_firewall_rule               = true\n      enable_ip_based_firewall_rule_in_audit_mode = true\n      reverse_proxy_ip_addresses                  = toset([\"10.10.1.1\", \"192.168.1.1\"])\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Loss Prevention Policy in PowerPlatform using Terraform\nDESCRIPTION: Complete Terraform configuration for setting up a DLP policy with business, non-business, and blocked connectors. Includes provider configuration, data source usage, and local variable definitions for connector classifications.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/data_loss_prevention_policy.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\nprovider \"powerplatform\" {\n  use_cli = true\n}\ndata \"powerplatform_connectors\" \"all_connectors\" {}\n\nlocals {\n\n  business_connectors = toset([\n    {\n      action_rules = [\n        {\n          action_id = \"DeleteItem_V2\"\n          behavior  = \"Block\"\n        },\n        {\n          action_id = \"ExecutePassThroughNativeQuery_V2\"\n          behavior  = \"Block\"\n        },\n      ]\n      default_action_rule_behavior = \"Allow\"\n      endpoint_rules = [\n        {\n          behavior = \"Allow\"\n          endpoint = \"contoso.com\"\n          order    = 1\n        },\n        {\n          behavior = \"Deny\"\n          endpoint = \"*\"\n          order    = 2\n        },\n      ]\n      id = \"/providers/Microsoft.PowerApps/apis/shared_sql\"\n    },\n    {\n      action_rules                 = []\n      default_action_rule_behavior = \"\"\n      endpoint_rules               = []\n      id                           = \"/providers/Microsoft.PowerApps/apis/shared_approvals\"\n    },\n    {\n      action_rules                 = []\n      default_action_rule_behavior = \"\"\n      endpoint_rules               = []\n      id                           = \"/providers/Microsoft.PowerApps/apis/shared_cloudappsecurity\"\n    }\n  ])\n\n  non_business_connectors = toset([for conn\n    in data.powerplatform_connectors.all_connectors.connectors :\n    {\n      id                           = conn.id\n      name                         = conn.name\n      default_action_rule_behavior = \"\"\n      action_rules                 = [],\n      endpoint_rules               = []\n    }\n    if conn.unblockable == true && !contains([for bus_conn in local.business_connectors : bus_conn.id], conn.id)\n  ])\n\n  blocked_connectors = toset([for conn\n    in data.powerplatform_connectors.all_connectors.connectors :\n    {\n      id                           = conn.id\n      default_action_rule_behavior = \"\"\n      action_rules                 = [],\n      endpoint_rules               = []\n    }\n  if conn.unblockable == false && !contains([for bus_conn in local.business_connectors : bus_conn.id], conn.id)])\n}\n\nresource \"powerplatform_data_loss_prevention_policy\" \"my_policy\" {\n  display_name                      = \"Block All Policy\"\n  default_connectors_classification = \"Blocked\"\n  environment_type                  = \"AllEnvironments\"\n  environments                      = []\n\n  business_connectors     = local.business_connectors\n  non_business_connectors = local.non_business_connectors\n  blocked_connectors      = local.blocked_connectors\n\n  custom_connectors_patterns = toset([\n    {\n      order            = 1\n      host_url_pattern = \"https://*.contoso.com\"\n      data_group       = \"Blocked\"\n    },\n    {\n      order            = 2\n      host_url_pattern = \"*\"\n      data_group       = \"Ignore\"\n    }\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wave Features in Power Platform Environments with Terraform\nDESCRIPTION: Demonstrates how to configure and deploy a wave feature to a Power Platform environment using Terraform. The example creates a new sandbox environment in Europe and then installs the 'April2025Update' wave feature, with an extended timeout to accommodate the installation process.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/environment_wave.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nresource \"powerplatform_environment\" \"example\" {\n  display_name     = \"wave_feature_example\"\n  location         = \"europe\"\n  environment_type = \"Sandbox\"\n  dataverse = {\n    language_code     = \"1033\"\n    currency_code     = \"USD\"\n    security_group_id = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n\nresource \"powerplatform_environment_wave\" \"example\" {\n  environment_id = powerplatform_environment.example.id\n  feature_name   = \"April2025Update\"\n\n  timeouts {\n    create = \"45m\" # Allow up to 45 minutes for the feature to be installed\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Policy Assignment in Power Platform with Terraform\nDESCRIPTION: A complete Terraform configuration that demonstrates how to set up Power Platform environments with enterprise policies for network injection and encryption. It shows provider configuration, environment creation, managed environment setup, and policy implementation through modules.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/enterprise_policy.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_version = \"> 1.7.0\"\n  required_providers {\n    powerplatform = {\n      source  = \"microsoft/power-platform\"\n      version = \"~>3.0\"\n    }\n    azapi = {\n      source  = \"azure/azapi\"\n      version = \"~>2.0\"\n    }\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~>4.8\"\n    }\n  }\n}\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nprovider \"azurerm\" {\n  use_cli         = true\n  subscription_id = var.subscription_id\n  features {\n    resource_group {\n      prevent_deletion_if_contains_resources = false\n    }\n  }\n}\n\n// getting all locations available for the environment and their azure regions\ndata \"powerplatform_locations\" \"all_locations\" {\n}\n\n// getting european loocation details. Policy has to be in the same azure region as the environment\nlocals {\n  europe_location = [for location in data.powerplatform_locations.all_locations.locations : location if location.name == \"europe\"]\n}\n\n// creating environment that will have the policies applied\nresource \"powerplatform_environment\" \"example_environment\" {\n  display_name     = \"example_environment\"\n  location         = local.europe_location[0].name\n  environment_type = \"Sandbox\"\n  dataverse = {\n    language_code     = \"1033\"\n    currency_code     = \"USD\"\n    security_group_id = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n\n// creating managed environment for the environment as this is required for encryption policy\nresource \"powerplatform_managed_environment\" \"managed_development\" {\n  environment_id             = powerplatform_environment.example_environment.id\n  is_usage_insights_disabled = true\n  is_group_sharing_disabled  = true\n  limit_sharing_mode         = \"ExcludeSharingToSecurityGroups\"\n  max_limit_user_sharing     = 10\n  solution_checker_mode      = \"None\"\n  suppress_validation_emails = true\n  maker_onboarding_markdown  = \"this is example markdown\"\n  maker_onboarding_url       = \"https://www.microsoft.com\"\n}\n\n\n// module that creates all azure resources required for the network injection policy and the policy itself\nmodule \"network_injection\" {\n  source = \"./network_injection\"\n\n  should_register_provider = false\n\n  environment_id = powerplatform_environment.example_environment.id\n\n  resource_group_name        = \"rg_example_network_injection_policy\"\n  resource_group_location    = local.europe_location[0].azure_regions[0]\n  vnet_locations             = local.europe_location[0].azure_regions\n  enterprise_policy_name     = \"ep_example_network_injection_policy\"\n  enterprise_policy_location = local.europe_location[0].name\n}\n\n// module that creates all azure resources required for the encryption policy and the policy itself\nmodule \"encryption\" {\n  source = \"./encryption\"\n\n  should_register_provider = false\n\n  environment_id = powerplatform_environment.example_environment.id\n\n  resource_group_name        = \"rg_example_encryption_policy8\"\n  resource_group_location    = local.europe_location[0].azure_regions[0]\n  enterprise_policy_name     = \"ep_example_encryption_policy8\"\n  enterprise_policy_location = \"europe\"\n  keyvault_name              = \"kv-ep-example8\"\n\n  // let's wait for first policy to be executed\n  depends_on = [powerplatform_enterprise_policy.network_injection]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform User Association in Terraform\nDESCRIPTION: This snippet demonstrates how to configure the Power Platform provider, create Azure AD users, and associate them with Power Platform environments. It includes examples for both Dataverse and non-Dataverse environments.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/user.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n    azuread = {\n      source = \"hashicorp/azuread\"\n    }\n    random = {\n      source = \"hashicorp/random\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nprovider \"azuread\" {\n  use_cli = true\n}\n\ndata \"azuread_domains\" \"aad_domains\" {\n  only_initial = true\n}\n\nlocals {\n  domain_name = data.azuread_domains.aad_domains.domains[0].domain_name\n}\n\nresource \"random_password\" \"passwords\" {\n  min_upper        = 1\n  min_lower        = 1\n  min_numeric      = 1\n  min_special      = 1\n  length           = 16\n  special          = true\n  override_special = \"_%@\"\n}\n\nresource \"azuread_user\" \"test_user\" {\n  user_principal_name = \"user_example@${local.domain_name}\"\n  display_name        = \"user_example\"\n  mail_nickname       = \"user_example\"\n  password            = random_password.passwords.result\n  usage_location      = \"US\"\n}\n\nresource \"powerplatform_environment\" \"dataverse_user_example\" {\n  display_name     = \"dataverse_user_example\"\n  location         = \"europe\"\n  environment_type = \"Sandbox\"\n  dataverse = {\n    language_code     = \"1033\"\n    currency_code     = \"USD\"\n    security_group_id = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n\n//adding new user to the dataverse environment\nresource \"powerplatform_user\" \"new_dataverse_user\" {\n  environment_id = powerplatform_environment.dataverse_user_example.id\n  security_roles = [\n    \"e0d2794e-82f3-e811-a951-000d3a1bcf17\", // bot author\n  ]\n  aad_id         = azuread_user.test_user.id\n  disable_delete = false\n}\n\nresource \"powerplatform_environment\" \"non_dataverse_user_example\" {\n  display_name     = \"non_dataverse_user_example\"\n  location         = \"europe\"\n  environment_type = \"Sandbox\"\n}\n\n//adding new user to the environment that does not have dataverse\nresource \"powerplatform_user\" \"new_non_dataverse_user\" {\n  environment_id = powerplatform_environment.non_dataverse_user_example.id\n  security_roles = [\n    \"Environment Admin\",\n    \"Environment Maker\"\n  ]\n  aad_id         = azuread_user.test_user.id\n  disable_delete = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Power Platform Managed Environment with Terraform\nDESCRIPTION: This snippet demonstrates how to create a managed environment in Power Platform using Terraform. It includes creating an environment resource and enabling management features like usage insights, sharing limitations, solution checker configuration, and maker onboarding content.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/managed_environment.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nresource \"powerplatform_environment\" \"development\" {\n  display_name     = \"example_managed_environment\"\n  location         = \"europe\"\n  environment_type = \"Sandbox\"\n  dataverse = {\n    language_code     = \"1033\"\n    currency_code     = \"USD\"\n    security_group_id = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n\nresource \"powerplatform_managed_environment\" \"managed_development\" {\n  environment_id                  = powerplatform_environment.development.id\n  is_usage_insights_disabled      = true\n  is_group_sharing_disabled       = true\n  limit_sharing_mode              = \"ExcludeSharingToSecurityGroups\"\n  max_limit_user_sharing          = 10\n  solution_checker_mode           = \"Warn\"\n  suppress_validation_emails      = true\n  solution_checker_rule_overrides = toset([\"meta-avoid-reg-no-attribute\", \"meta-avoid-reg-retrieve\", \"app-use-delayoutput-text-input\"])\n  maker_onboarding_markdown       = \"this is example markdown\"\n  maker_onboarding_url            = \"https://www.microsoft.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Billing Policy and Environments with Terraform\nDESCRIPTION: This snippet demonstrates how to set up a Power Platform billing policy and associate environments with it using Terraform. It includes provider configurations, resource group creation, billing policy setup, environment creation, and linking environments to the billing policy.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/billing_policy_environment.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n    azurerm = {\n      source = \"hashicorp/azurerm\"\n    }\n    azurecaf = {\n      source = \"aztfmod/azurecaf\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nprovider \"azurerm\" {\n  features {}\n  use_cli = true\n}\n\nprovider \"azurecaf\" {\n}\n\ndata \"azurerm_client_config\" \"current\" {\n}\n\nresource \"azurecaf_name\" \"rg_example_name\" {\n  name          = \"power-platform-billing\"\n  resource_type = \"azurerm_resource_group\"\n  random_length = 5\n  clean_input   = true\n}\n\nresource \"azurerm_resource_group\" \"rg_example\" {\n  name     = azurecaf_name.rg_example_name.result\n  location = \"westeurope\"\n}\n\nresource \"powerplatform_billing_policy\" \"pay_as_you_go\" {\n  name     = \"payAsYouGoBillingPolicyExample\"\n  location = \"europe\"\n  status   = \"Enabled\"\n  billing_instrument = {\n    resource_group  = azurerm_resource_group.rg_example.name\n    subscription_id = data.azurerm_client_config.current.subscription_id\n  }\n}\n\nresource \"powerplatform_environment\" \"env1\" {\n  display_name     = \"billing_policy_example_environment_1\"\n  location         = \"europe\"\n  azure_region     = \"northeurope\"\n  environment_type = \"Sandbox\"\n}\n\nresource \"powerplatform_environment\" \"env2\" {\n  display_name     = \"billing_policy_example_environment_2\"\n  location         = \"europe\"\n  azure_region     = \"northeurope\"\n  environment_type = \"Sandbox\"\n}\n\nresource \"powerplatform_billing_policy_environment\" \"pay_as_you_go_policy_envs\" {\n  billing_policy_id = powerplatform_billing_policy.pay_as_you_go.id\n  environments      = [powerplatform_environment.env1.id, powerplatform_environment.env2.id]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Tenant Settings with Terraform\nDESCRIPTION: Complete example showing how to configure Power Platform tenant settings including security, licensing, governance, and feature controls. Uses the microsoft/power-platform provider and demonstrates all available configuration options.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/tenant_settings.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nresource \"powerplatform_tenant_settings\" \"settings\" {\n  walk_me_opt_out                                       = true\n  disable_support_tickets_visible_by_all_users          = true\n  disable_trial_environment_creation_by_non_admin_users = true\n  disable_capacity_allocation_by_environment_admins     = true\n  disable_environment_creation_by_non_admin_users       = true\n  disable_portals_creation_by_non_admin_users           = true\n  disable_newsletter_sendout                            = true\n  disable_nps_comments_reachout                         = true\n  disable_survey_feedback                               = true\n\n  power_platform = {\n    search = {\n      disable_docs_search       = true\n      disable_community_search  = true\n      disable_bing_video_search = true\n    }\n    teams_integration = {\n      share_with_colleagues_user_limit = 10001\n    }\n    power_apps = {\n      disable_share_with_everyone              = true\n      enable_guests_to_make                    = true\n      disable_members_indicator                = true\n      disable_maker_match                      = true\n      disable_unused_license_assignment        = true\n      disable_create_from_image                = true\n      disable_create_from_figma                = true\n      disable_connection_sharing_with_everyone = true\n    }\n    power_automate = {\n      disable_copilot           = true\n      disable_copilot_with_bing = true\n    }\n    environments = {\n      disable_preferred_data_location_for_teams_environment = true\n    }\n    governance = {\n      disable_admin_digest                                      = true\n      disable_developer_environment_creation_by_non_admin_users = true\n      enable_default_environment_routing                        = false\n      policy = {\n        enable_desktop_flow_data_policy_management = true\n      }\n    }\n    licensing = {\n      disable_billing_policy_creation_by_non_admin_users    = true\n      enable_tenant_capacity_report_for_environment_admins  = true\n      storage_capacity_consumption_warning_threshold        = 88\n      enable_tenant_licensing_report_for_environment_admins = true\n      disable_use_of_unassigned_ai_builder_credits          = true\n      apply_auto_claim_to_only_managed_environments         = true\n    }\n    power_pages = {}\n    champions = {\n      disable_champions_invitation_reachout    = true\n      disable_skills_match_invitation_reachout = true\n    }\n    intelligence = {\n      disable_copilot                   = true\n      enable_open_ai_bot_publishing     = true\n      disable_copilot_feedback          = true\n      disable_copilot_feedback_metadata = true\n    }\n    model_experimentation = {\n      enable_model_data_sharing = true\n      disable_data_logging      = true\n    }\n    catalog_settings = {\n      power_catalog_audience_setting = \"All\"\n    }\n    user_management_settings = {\n      enable_delete_disabled_user_in_all_environments = true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Provider with Certificate Authentication\nDESCRIPTION: Terraform configuration to set up the Power Platform provider using certificate-based authentication. It requires client_id, tenant_id, certificate file path, and certificate password.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_13\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"powerplatform\" {\n  client_id     = var.client_id\n  tenant_id     = var.tenant_id\n  client_certificate_file_path = \"${path.cwd}/cert.pkcs12\"\n  client_certificate_password  = var.cert_pass\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Tenant Isolation Policy in Terraform\nDESCRIPTION: This example demonstrates how to set up a tenant isolation policy in Power Platform using Terraform. It shows how to configure the provider, disable isolation, and set allowed tenants with specific inbound and outbound permissions. The policy includes examples of allowing different combinations of inbound/outbound access for specific tenant IDs as well as a wildcard tenant.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/tenant_isolation_policy.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_tenant\" \"current\" {}\n\nresource \"powerplatform_tenant_isolation_policy\" \"example\" {\n  is_disabled = false\n  allowed_tenants = [\n    {\n      tenant_id = \"11111111-1111-1111-1111-111111111111\"\n      inbound   = true\n      outbound  = true\n    },\n    {\n      tenant_id = \"22222222-2222-2222-2222-222222222222\"\n      inbound   = true\n      outbound  = false\n    },\n    {\n      tenant_id = \"33333333-3333-3333-3333-333333333333\"\n      inbound   = false\n      outbound  = true\n    },\n    {\n      tenant_id = \"*\"\n      inbound   = true\n      outbound  = false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Environment Group Rule Set in Terraform\nDESCRIPTION: This snippet demonstrates how to configure a Power Platform environment group and apply a ruleset to it using Terraform. It includes provider configuration, environment group creation, and rule set definition with various controls.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/environment_group_rule_set.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nresource \"powerplatform_environment_group\" \"example_group\" {\n  display_name = \"example_environment_group_ruleset\"\n  description  = \"Example environment group\"\n}\n\nresource \"powerplatform_environment_group_rule_set\" \"example_group_rule_set\" {\n  environment_group_id = powerplatform_environment_group.example_group.id\n  rules = {\n    sharing_controls = {\n      share_mode      = \"exclude sharing with security groups\"\n      share_max_limit = 42\n    }\n    usage_insights = {\n      insights_enabled = false\n    }\n    maker_welcome_content = {\n      maker_onboarding_url      = \"https://contoso.com/onboarding\"\n      maker_onboarding_markdown = \"## Welcome to the environment!\\n\\n**This is a markdown description.**\"\n    }\n    solution_checker_enforcement = {\n      solution_checker_mode = \"block\"\n      send_emails_enabled   = true\n    }\n    backup_retention = {\n      period_in_days = 21\n    }\n    ai_generated_descriptions = {\n      ai_description_enabled = false\n    }\n    ai_generative_settings = {\n      move_data_across_regions_enabled = true\n      bing_search_enabled              = false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Power Apps from an Environment using Terraform\nDESCRIPTION: Example configuration that fetches all Power Apps in a Power Platform environment. This snippet configures the required provider, sets up authentication using the Power Platform CLI, and creates a data source to retrieve the list of PowerApps.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/environment_powerapps.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_environment_powerapps\" \"all\" {}\n```\n\n----------------------------------------\n\nTITLE: Creating a PowerPlatform Azure OpenAI Connection with Terraform\nDESCRIPTION: This snippet demonstrates how to create an Azure OpenAI connection in Power Platform using Terraform. It configures the required provider, sets up the connection with authentication parameters for Azure OpenAI and Azure Search, and uses lifecycle management to prevent connection parameter changes from triggering updates.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/connection.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\n\nresource \"powerplatform_connection\" \"azure_openai_connection\" {\n  environment_id = var.environment_id\n  name           = \"shared_azureopenai\"\n  display_name   = \"OpenAI Connection\"\n  connection_parameters = jsonencode({\n    \"azureOpenAIResourceName\" : \"${var.azure_openai_resource_name}\",\n    \"azureOpenAIApiKey\" : \"${var.azure_openai_api_key}\"\n    \"azureSearchEndpointUrl\" : \"${var.azure_search_endpoint_url}\",\n    \"azureSearchApiKey\" : \"${var.azure_search_api_key}\"\n  })\n\n  lifecycle {\n    ignore_changes = [\n      connection_parameters\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Provider and Fetching Connections in Terraform\nDESCRIPTION: This snippet demonstrates how to configure the Power Platform provider and use it to fetch all connections for a specific environment. It first retrieves all environments and then uses the ID of the first environment to fetch its connections.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/connections.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_environments\" \"all_environments\" {}\n\ndata \"powerplatform_connections\" \"all_connections\" {\n  environment_id = data.powerplatform_environments.all_environments.environments[0].id\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Power Platform Provider and Fetching Tenant Capacity\nDESCRIPTION: Example configuration showing how to initialize the Power Platform provider and fetch tenant capacity information using the powerplatform_tenant_capacity data source. This requires the microsoft/power-platform provider and uses CLI authentication.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/tenant_capacity.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_tenant\" \"current\" {}\n\ndata \"powerplatform_tenant_capacity\" \"capacity\" {\n  tenant_id = data.powerplatform_tenant.current.tenant_id\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform REST API Resource with Sample Data Installation\nDESCRIPTION: Example configuration showing how to set up the Power Platform provider and use the powerplatform_rest resource to install and uninstall sample data in a Power Platform environment. Demonstrates provider configuration, environment setup, and REST API operations.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/rest.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nresource \"powerplatform_environment\" \"env\" {\n  display_name     = \"sample_data_environment\"\n  location         = \"europe\"\n  environment_type = \"Sandbox\"\n  dataverse = {\n    language_code     = \"1033\"\n    currency_code     = \"USD\"\n    security_group_id = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n\nresource \"powerplatform_rest\" \"install_sample_data\" {\n  create = {\n    scope                = \"${powerplatform_environment.env.dataverse.url}/.default\"\n    url                  = \"${powerplatform_environment.env.dataverse.url}/api/data/v9.2/InstallSampleData\"\n    method               = \"POST\"\n    expected_http_status = [204]\n  }\n  destroy = {\n    scope                = \"${powerplatform_environment.env.dataverse.url}/.default\"\n    url                  = \"${powerplatform_environment.env.dataverse.url}/api/data/v9.2/UninstallSampleData\"\n    method               = \"POST\"\n    expected_http_status = [204]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Admin Management Application in Terraform\nDESCRIPTION: Example Terraform configuration that registers a service principal as an administrator for Power Platform. It creates an Azure AD application registration, a service principal, and then registers that service principal with Power Platform.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/admin_management_application.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"~>3.0\"\n    }\n    azurecaf = {\n      source = \"aztfmod/azurecaf\"\n      version = \"~>1.2\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nprovider \"azuread\" {\n  use_cli = true\n}\n\nresource \"azuread_application_registration\" \"example_app\" {\n  display_name = \"Power Platform Example Admin Management Application\"\n}\n\nresource \"azuread_service_principal\" \"example_sp\" {\n  client_id = azuread_application_registration.example_app.client_id\n}\n\nresource \"powerplatform_admin_management_application\" \"example_registration\" {\n  id = azuread_application_registration.example_app.client_id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Sharing a Power Platform SQL Connection in Terraform\nDESCRIPTION: This example demonstrates how to create a SQL connection in Power Platform and share it with a user. It configures the provider, creates a connection with OAuth service principal credentials, and then shares the connection with a specified user, granting them edit permissions.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/connection_share.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\n\nresource \"powerplatform_connection\" \"new_sql_connection\" {\n  environment_id = var.environment_id\n  name           = \"shared_sql\"\n  display_name   = \"My SQL Connection\"\n  connection_parameters_set = jsonencode({\n    \"name\" : \"oauthSP\",\n    \"values\" : {\n      \"token\" : {\n        \"value\" : \"https://global.consent.azure-apim.net/redirect/sql\"\n      },\n      \"token:TenantId\" : {\n        \"value\" : \"${var.tenant_id}\"\n      },\n      \"token:clientId\" : {\n        \"value\" : \"${var.client_id}\"\n      },\n      \"token:clientSecret\" : {\n        \"value\" : \"${var.client_secret}\"\n      }\n    }\n  })\n\n  lifecycle {\n    ignore_changes = [\n      connection_parameters_set\n    ]\n  }\n}\n\nresource \"powerplatform_connection_share\" \"share_with_admin\" {\n  environment_id = var.environment_id\n  connector_name = powerplatform_connection.new_sql_connection.name\n  connection_id  = powerplatform_connection.new_sql_connection.id\n  role_name      = \"CanEdit\"\n  principal = {\n    entra_object_id = var.user_object_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Team in Power Platform using Terraform\nDESCRIPTION: This snippet demonstrates how to create a Team in Dataverse using the powerplatform_data_record resource. It includes variables for environment ID, team name, team description, and role IDs.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/data_record.md#2025-04-23_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nvariable \"environment_id\" {\n  description = \"The unique identifier of the environment\"\n  type        = string\n  validation {\n    condition     = length(var.environment_id) > 0\n    error_message = \"The environment id must not be empty\"\n  }\n\n}\n\nvariable \"team_name\" {\n  description = \"The name of the team\"\n  type        = string\n  validation {\n    condition     = length(var.team_name) > 0\n    error_message = \"The team name must not be empty\"\n  }\n}\n\nvariable \"team_description\" {\n  description = \"The description of the team\"\n  type        = string\n}\n\nvariable \"role_ids\" {\n  type        = set(string)\n  description = \"The role ids that are granted to this team\"\n  \n}\n\nresource \"powerplatform_data_record\" \"team\" {\n  environment_id     = var.environment_id\n  table_logical_name = \"team\"\n  columns = {\n    name        = var.team_name\n    description = var.team_description\n\n    teamroles_association = tolist([for rid in var.role_ids : { table_logical_name = \"role\", data_record_id = tostring(rid) }])\n  }\n}\n\noutput \"team_id\" {\n  value = powerplatform_data_record.team.id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Team with Role Association in Dataverse using Terraform\nDESCRIPTION: This snippet shows how to create a new Team in Dataverse and associate it with an existing Security Role using Terraform. It demonstrates the use of many-to-many relationships in the powerplatform_data_record resource.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/guides/dynamic_configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: HCL\nCODE:\n```\ncolumns = {\n  name = \"New Team\"\n  teamroles_association = [\n    {\n      table_logical_name = \"role\"\n      data_record_id     = powerplatform_data_record.role.id  # assuming you've created a role resource\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Power Platform Environments with Terraform\nDESCRIPTION: This example demonstrates how to configure the Power Platform provider and fetch all environments in the tenant. It uses the CLI authentication method and accesses all available environments through the powerplatform_environments data source.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/environments.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_environments\" \"all_environments\" {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Child Business Unit in Dataverse using Terraform\nDESCRIPTION: This snippet demonstrates how to create a new child Business Unit in Dataverse using Terraform. It first retrieves the root Business Unit using a data source, then creates a new Business Unit as a child of the root.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/guides/dynamic_configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\n# Data source to get the root business unit (parentbusinessunitid is null for root)\ndata \"powerplatform_data_records\" \"root_bu\" {\n  environment_id    = var.environment_id\n  entity_collection = \"businessunits\"\n  filter            = \"parentbusinessunitid eq null\"\n  select            = [\"businessunitid\"]\n}\n\n# Create a new Business Unit record in Dataverse\nresource \"powerplatform_data_record\" \"child_bu\" {\n  environment_id     = var.environment_id\n  table_logical_name = \"businessunit\"\n  columns = {\n    name = \"Contoso Sales Unit\"                   # Name of the new Business Unit\n    parentbusinessunitid = {                      # Lookup to the parent Business Unit\n      table_logical_name = \"businessunit\"\n      data_record_id     = data.powerplatform_data_records.root_bu.rows[0].businessunitid\n    }\n    // You can set other fields like \"costcenter\" or address fields if required, using their logical names.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DLP Policies in PowerPlatform Terraform Provider\nDESCRIPTION: Command for importing an existing Data Loss Prevention (DLP) policy from Microsoft Power Platform into Terraform state. This requires replacing the placeholder GUID with a valid DLP policy ID to properly import the resource for management.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/data_loss_prevention_policy.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform import powerplatform_data_loss_prevention_policy.example_dlp 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Using powerplatform_environment_templates Data Source in Terraform\nDESCRIPTION: This example demonstrates how to configure the Terraform provider for Power Platform and use the powerplatform_environment_templates data source to retrieve environment templates for a specific location.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/environment_templates.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_locations\" \"all_locations\" {}\n\ndata \"powerplatform_environment_templates\" \"all_environment_templates_by_location\" {\n  location = data.powerplatform_locations.all_locations.locations[0].name\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Environment Group with Azure AD Integration\nDESCRIPTION: Example configuration showing how to set up a Power Platform environment group with Azure AD integration. Includes provider configuration, security group creation, and environment group settings with routing configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/environment_group.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n    azuread = {\n      source = \"hashicorp/azuread\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nprovider \"azuread\" {\n  use_cli = true\n}\n\nresource \"azuread_group\" \"environment_routing_target_security_group\" {\n  display_name     = \"example_security_group\"\n  description      = \"Example security group\"\n  mail_enabled     = false\n  security_enabled = true\n}\n\nresource \"powerplatform_environment_group\" \"example_group\" {\n  display_name = \"example_environment_group\"\n  description  = \"Example environment group\"\n}\n\nresource \"powerplatform_tenant_settings\" \"environment_routing\" {\n  power_platform = {\n    governance = {\n      enable_default_environment_routing              = false\n      environment_routing_all_makers                  = false\n      environment_routing_target_environment_group_id = powerplatform_environment_group.example_group.id\n      environment_routing_target_security_group_id    = azuread_group.environment_routing_target_security_group.id\n    }\n  }\n\n  walk_me_opt_out = true\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Power Platform Locations with Terraform\nDESCRIPTION: This snippet demonstrates how to configure the powerplatform provider and use the powerplatform_locations data source to retrieve all available Dynamics 365 locations. It requires the microsoft/power-platform provider and configures it to use the Power Platform CLI for authentication.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/locations.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_locations\" \"all_locations\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Provider for Power Platform and Fetching Billing Policy Environments\nDESCRIPTION: This snippet demonstrates how to configure the Power Platform Terraform provider and use the 'powerplatform_billing_policies_environments' data source to retrieve environments associated with a specific billing policy. It sets up the required provider, configures it to use the Power Platform CLI, and fetches environments using a billing policy ID.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/billing_policies_environments.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_billing_policies_environments\" \"all_pay_as_you_go_policy_envs\" {\n  billing_policy_id = \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Business Unit in Power Platform using Terraform\nDESCRIPTION: This snippet demonstrates how to create a Business Unit in Dataverse using the powerplatform_data_record resource. It includes variables for environment ID, name, cost center, and parent business unit ID.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/data_record.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nvariable \"environment_id\" {\n  type = string\n}\n\nvariable \"name\" {\n  type = string\n}\n\nvariable \"costcenter\" {\n  type = string\n}\n\nvariable \"parent_business_unit_id\" {\n  type = string\n}\n\nresource \"powerplatform_data_record\" \"business_unit\" {\n  environment_id     = var.environment_id\n  table_logical_name = \"businessunit\"\n  disable_on_destroy = true\n  columns = {\n    name       = var.name\n    costcenter = var.costcenter\n    parentbusinessunitid = {\n      table_logical_name = \"businessunit\"\n      data_record_id     = var.parent_business_unit_id\n    }\n  }\n}\n\noutput \"resource_id\" {\n  value = powerplatform_data_record.business_unit.id\n}\n\noutput \"resource\" {\n  value = powerplatform_data_record.business_unit\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerPlatform Tenant Data Source in Terraform\nDESCRIPTION: This snippet demonstrates how to configure the PowerPlatform provider and use the powerplatform_tenant data source to fetch information about the current tenant. It sets up the required provider configuration and references the current tenant.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/tenant.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_tenant\" \"current_tenant\" {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Power Platform Environment Settings using Terraform\nDESCRIPTION: This example demonstrates how to configure the Power Platform provider and retrieve environment settings for a specific environment. It includes the required provider configuration and data source definition.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/environment_settings.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_environment_settings\" \"example\" {\n  environment_id = \"00000000-0000-0000-0000-000000000001\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Provider and Fetching Tenant Applications in Terraform\nDESCRIPTION: This snippet demonstrates how to configure the Power Platform provider and use the powerplatform_tenant_application_packages data source to fetch Dynamics 365 tenant level applications. It includes examples of fetching all applications, applications from a specific publisher, and a specific application by name.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/tenant_application_packages.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_tenant_application_packages\" \"all_applications\" {\n}\n\ndata \"powerplatform_tenant_application_packages\" \"all_applications_from_publisher\" {\n  publisher_name = \"Microsoft Dynamics SMB\"\n}\n\ndata \"powerplatform_tenant_application_packages\" \"specific_application\" {\n  name = \"Healthcare Home Health\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Copilot Studio Application Insights\nDESCRIPTION: Example Terraform configuration that sets up Application Insights monitoring for a Power Platform Copilot. Demonstrates provider configuration and resource setup with monitoring options.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/copilot_studio_application_insights.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nresource \"powerplatform_copilot_studio_application_insights\" \"cps_app_insights_config\" {\n  environment_id                         = var.environment_id\n  bot_id                                 = var.bot_id\n  application_insights_connection_string = var.application_insights_connection_string\n  include_activities                     = true\n  include_sensitive_information          = false\n  include_actions                        = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Provider with Service Principal Authentication\nDESCRIPTION: Terraform configuration using variables to set up the Power Platform provider with service principal authentication. This approach uses client_id, client_secret, and tenant_id for authentication.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_17\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"powerplatform\" {\n  # Use a service principal to authenticate with the Power Platform service\n  client_id     = var.client_id\n  client_secret = var.client_secret\n  tenant_id     = var.tenant_id\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Dynamics 365 Currencies with Terraform Provider for Power Platform\nDESCRIPTION: This example demonstrates how to use the powerplatform_currencies data source to retrieve available currencies for a specific location. It configures the Power Platform provider, retrieves all available locations, and then fetches currencies for the first location.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/currencies.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_locations\" \"all_locations\" {}\n\ndata \"powerplatform_currencies\" \"all_currencies_by_location\" {\n  location = data.powerplatform_locations.all_locations.locations[0].name\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerPlatform REST Query with Environment Resource in Terraform\nDESCRIPTION: This example demonstrates how to configure the PowerPlatform provider, create a sandbox environment, and perform a REST query against the Dataverse API. The query retrieves organization information from the newly created environment.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/rest_query.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nresource \"powerplatform_environment\" \"development\" {\n  display_name     = \"example_environment\"\n  location         = \"europe\"\n  azure_region     = \"northeurope\"\n  environment_type = \"Sandbox\"\n  dataverse = {\n    language_code     = \"1033\"\n    currency_code     = \"USD\"\n    security_group_id = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n\ndata \"powerplatform_rest_query\" \"webapi_query\" {\n  scope                = \"${powerplatform_environment.development.dataverse.url}/.default\"\n  url                  = \"${powerplatform_environment.development.dataverse.url}/api/data/v9.2/RetrieveCurrentOrganization(AccessType=@p1)?@p1=Microsoft.Dynamics.CRM.EndpointAccessType'Default'\"\n  method               = \"GET\"\n  expected_http_status = [200]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificate for Power Platform Authentication\nDESCRIPTION: Creates a self-signed certificate for use with Power Platform authentication using OpenSSL. The command generates a 4096-bit RSA key pair with a SHA-256 signature that's valid for 365 days.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -sha256 -days 365\n```\n\n----------------------------------------\n\nTITLE: Querying Power Platform Application Packages in Terraform\nDESCRIPTION: This snippet demonstrates how to use the powerplatform_environment_application_packages data source to query Dynamics 365 applications. It shows three query patterns: fetching all applications in an environment, filtering applications by publisher name, and retrieving a specific application by name and publisher.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/environment_application_packages.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_environments\" \"all_environments\" {}\n\ndata \"powerplatform_environment_application_packages\" \"all_applications\" {\n  environment_id = data.powerplatform_environments.all_environments.environments[0].id\n}\n\ndata \"powerplatform_environment_application_packages\" \"all_applications_from_publisher\" {\n  environment_id = data.powerplatform_environments.all_environments.environments[0].id\n  publisher_name = \"Power Platform Host Service\"\n}\n\ndata \"powerplatform_environment_application_packages\" \"specific_application\" {\n  environment_id = data.powerplatform_environments.all_environments.environments[0].id\n  publisher_name = \"Microsoft Dynamics 365\"\n  name           = \"Virtual connectors in Dataverse\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Power Platform Terraform Provider and Fetching Tenant Settings\nDESCRIPTION: Example of configuring the Power Platform Terraform provider and using the powerplatform_tenant_settings data source to fetch tenant settings. This snippet shows the required provider configuration and basic data source usage with CLI authentication.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/tenant_settings.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_tenant_settings\" \"settings\" {}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using the Power Platform Solutions Data Source in Terraform\nDESCRIPTION: Example showing how to configure the Power Platform provider and use the powerplatform_solutions data source to retrieve all solutions in a specified environment. This requires setting up the provider and specifying the target environment ID.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/solutions.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_solutions\" \"all\" {\n  environment_id = var.environment_id\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure CLI for Sovereign Clouds\nDESCRIPTION: This command sets the Azure CLI to work with specific sovereign clouds like US Government or China. It's a prerequisite for connecting to these isolated instances of Power Platform.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/guides/nonpublic_clouds.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz cloud set --name AzureUSGovernment | AzureChinaCloud\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Solution Checker with Terraform\nDESCRIPTION: Example showing how to set up a Power Platform environment and retrieve solution checker rules. Includes provider configuration, environment creation, and data source usage with proper dependencies.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/solution_checker_rules.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\n# Create an environment to use for solution checker rules\nresource \"powerplatform_environment\" \"example\" {\n  display_name     = \"Solution Checker Example\"\n  location         = \"unitedstates\"\n  environment_type = \"Sandbox\"\n  dataverse = {\n    language_code     = \"1033\"\n    currency_code     = \"USD\"\n    security_group_id = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n\n# Use the created environment's ID for solution checker rules\ndata \"powerplatform_solution_checker_rules\" \"example\" {\n  # Only proceed after both environment ID and Dataverse URL are available\n  depends_on     = [powerplatform_environment.example]\n  environment_id = powerplatform_environment.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerPlatform Data Records Query in Terraform\nDESCRIPTION: This snippet demonstrates how to use the powerplatform_data_records data source to query system users from Dataverse. It shows configuration of the provider, environment creation, and a data query with filtering, selection, sorting, and relationship expansion.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/data_records.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\nresource \"powerplatform_environment\" \"env\" {\n  display_name     = \"powerplatform_data_record_example\"\n  location         = \"europe\"\n  environment_type = \"Sandbox\"\n  dataverse = {\n    language_code     = \"1033\"\n    currency_code     = \"USD\"\n    security_group_id = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n\ndata \"powerplatform_data_records\" \"data_query\" {\n  environment_id    = powerplatform_environment.env.id\n  entity_collection = \"systemusers\"\n  filter            = \"isdisabled eq false\"\n  select            = [\"firstname\", \"lastname\", \"domainname\"]\n  top               = 2\n  order_by          = \"lastname asc\"\n\n  expand = [\n    {\n      navigation_property = \"systemuserroles_association\",\n      select              = [\"name\"],\n    },\n    {\n      navigation_property = \"teammembership_association\",\n      select              = [\"name\"],\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Business Units with powerplatform_data_records in HCL\nDESCRIPTION: This snippet demonstrates how to use the powerplatform_data_records data source to retrieve all business units from a Dataverse environment. It specifies the environment ID, entity collection name, and selects specific fields to return.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/guides/dynamic_configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"powerplatform_data_records\" \"business_units\" {\n  environment_id    = var.environment_id               # GUID of the environment\n  entity_collection = \"businessunits\"                  # Dataverse entity set name\n  select            = [\"businessunitid\", \"name\", \"parentbusinessunitid\"]\n  # filter            = \"parentbusinessunitid eq null\"  # (optional) example filter to get only the root BU\n}\n```\n\n----------------------------------------\n\nTITLE: Using PowerPlatform Languages Data Source in Terraform\nDESCRIPTION: This snippet demonstrates how to configure the PowerPlatform provider and fetch available languages for a specific location. It first retrieves all locations using the powerplatform_locations data source, then gets languages for the first location in the list.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/languages.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_locations\" \"all_locations\" {}\n\ndata \"powerplatform_languages\" \"all_languages_by_location\" {\n  location = data.powerplatform_locations.all_locations.locations[0].name\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Power Platform Provider and DLP Policy Data Source\nDESCRIPTION: Example configuration showing how to set up the Power Platform provider and query Data Loss Prevention policies. Uses CLI authentication and fetches all tenant DLP policies.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/data_loss_prevention_policies.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_data_loss_prevention_policies\" \"tenant_data_loss_prevention_policies\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Provider and Fetching Connectors\nDESCRIPTION: Example configuration showing how to set up the Power Platform provider and fetch all available connectors. This includes provider configuration with CLI authentication and a data source block to retrieve connector information.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/connectors.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_connectors\" \"all_connectors\" {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Power Platform Billing Policies with Terraform\nDESCRIPTION: This snippet demonstrates how to configure the PowerPlatform provider and retrieve all billing policies in a tenant. It uses the command-line interface authentication method and declares the required provider.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/billing_policies.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_billing_policies\" \"all_policies\" {}\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerPlatform Connection Shares Data Source\nDESCRIPTION: Example configuration for setting up the PowerPlatform provider and querying connection shares. Demonstrates how to specify required provider configuration and data source parameters including environment ID, connector name, and connection ID.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/connection_shares.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_connection_shares\" \"all_shares\" {\n  environment_id = var.environment_id\n  connector_name = \"shared_azureopenai\"\n  connection_id  = var.azure_openai_connection_id\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Powerplatform Security Roles Data Source Schema in HCL\nDESCRIPTION: This snippet defines the schema for the powerplatform_security_roles data source. It specifies required and optional parameters, including environment_id and business_unit_id, as well as the structure of the returned security role information.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/security_roles.md#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\n## Schema\n\n### Required\n\n- `environment_id` (String) Id of the Dynamics 365 environment\n\n### Optional\n\n- `business_unit_id` (String) Id of the business unit to filter the security roles\n- `timeouts` (Attributes) (see [below for nested schema](#nestedatt--timeouts))\n\n### Read-Only\n\n- `security_roles` (Attributes List) List of security roles (see [below for nested schema](#nestedatt--security_roles))\n\n<a id=\"nestedatt--timeouts\"></a>\n### Nested Schema for `timeouts`\n\nOptional:\n\n- `read` (String) A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.\n\n\n<a id=\"nestedatt--security_roles\"></a>\n### Nested Schema for `security_roles`\n\nRead-Only:\n\n- `business_unit_id` (String) Id of the business unit\n- `is_managed` (Boolean) Is the security role managed\n- `name` (String) Security role name\n- `role_id` (String) Security role id\n```\n\n----------------------------------------\n\nTITLE: Nested Schema for Power Platform Model Experimentation Configuration in Terraform\nDESCRIPTION: Schema configuration options for Power Platform model experimentation settings. Controls data logging and model data sharing capabilities.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/tenant_settings.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\npower_platform.model_experimentation {\n  disable_data_logging = bool\n  enable_model_data_sharing = bool\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Definition for powerplatform_environment_application_package_install Resource\nDESCRIPTION: Defines the required and optional parameters for the powerplatform_environment_application_package_install resource. Required parameters include environment_id and unique_name, while optional parameters include timeouts configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/environment_application_package_install.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n## Schema\n\n### Required\n\n- `environment_id` (String) Id of the Dynamics 365 environment\n- `unique_name` (String) Unique name of the application\n\n### Optional\n\n- `timeouts` (Attributes) (see [below for nested schema](#nestedatt--timeouts))\n\n### Read-Only\n\n- `id` (String) Unique id (guid)\n\n<a id=\"nestedatt--timeouts\"></a>\n### Nested Schema for `timeouts`\n\nOptional:\n\n- `create` (String) A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n```\n\n----------------------------------------\n\nTITLE: Querying PowerPlatform Analytics Data Exports with Terraform\nDESCRIPTION: Example of how to set up the PowerPlatform provider and query analytics data exports. This snippet configures the Terraform provider and creates a data source that retrieves all analytics data exports.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/analytics_data_exports.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nprovider \"powerplatform\" {\n  use_cli = true\n}\n\ndata \"powerplatform_analytics_data_exports\" \"example\" {}\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Power Platform using Azure CLI\nDESCRIPTION: This snippet demonstrates how to authenticate to Power Platform using the Azure CLI. It includes the login command and the provider configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz login --allow-no-subscriptions --scope api://powerplatform_provider_terraform/.default\n```\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"powerplatform\" {\n  use_cli = true\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Schema for Power Platform Search Configuration in Terraform\nDESCRIPTION: Schema configuration options for Power Platform search settings. Controls which search capabilities are enabled including Bing video search, community search, and documentation search.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/tenant_settings.md#2025-04-23_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\npower_platform.search {\n  disable_bing_video_search = bool\n  disable_community_search = bool\n  disable_docs_search = bool\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Application User in Power Platform using Terraform\nDESCRIPTION: This snippet shows how to create an Application User in Dataverse using the powerplatform_data_record resource. It includes variables for environment ID, application ID, business unit ID, and role IDs.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/data_record.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nvariable \"environment_id\" {\n  description = \"The unique identifier of the environment\"\n  type        = string\n  validation {\n    condition     = length(var.environment_id) > 0\n    error_message = \"The environment id must not be empty\"\n  }\n\n}\n\nvariable \"application_id\" {\n  description = \"EntraId clientid of the application\"\n  type        = string\n  validation {\n    condition     = length(var.application_id) > 0\n    error_message = \"The application id must not be empty\"\n  }\n}\n\nvariable \"business_unit_id\" {\n  description = \"Unique identifier of the business unit\"\n  type        = string\n  validation {\n    condition     = length(var.business_unit_id) > 0\n    error_message = \"The business unit id must not be empty\"\n  }\n}\n\nvariable \"role_ids\" {\n  type        = set(string)\n  description = \"The role ids that are granted to this application user\"\n}\n\n\nresource \"powerplatform_data_record\" \"app_user\" {\n  table_logical_name = \"systemuser\"\n  environment_id     = var.environment_id\n  disable_on_destroy = true # Application Users cannot be deleted without being disabled first\n  columns = {\n    applicationid = var.application_id\n    businessunitid = {\n      table_logical_name = \"businessunit\"\n      data_record_id     = var.business_unit_id\n    }\n    systemuserroles_association =toset([for rid in var.role_ids : { table_logical_name = \"role\", data_record_id = tostring(rid) }])\n  }\n}\n\noutput \"application_user_id\" {\n  value = powerplatform_data_record.app_user.id\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Default Power Platform Environment using Import Block\nDESCRIPTION: This Terraform configuration demonstrates how to use an import block to import an existing default Power Platform environment. It includes the import block and the corresponding resource configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/guides/importing.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nimport {\n  to = powerplatform_environment.default\n  id = \"00000000-0000-0000-0000-000000000001\"\n}\n\nresource \"powerplatform_environment\" \"default\" {\n  display_name     = \"Contoso (default)\"\n  location         = \"unitedstates\"\n  environment_type = \"Default\"\n  dataverse = {\n    currency_code     = \"USD\"\n    language_code     = 1033\n    security_group_id = \"00000000-0000-0000-0000-000000000000\"\n  }\n\n  lifecycle {\n    prevent_destroy = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Role in Power Platform using Terraform\nDESCRIPTION: This snippet illustrates how to create a Role in Dataverse using the powerplatform_data_record resource. It includes variables for environment ID, role name, and business unit ID.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/data_record.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    powerplatform = {\n      source = \"microsoft/power-platform\"\n    }\n  }\n}\n\nvariable \"environment_id\" {\n  description = \"The unique identifier of the environment\"\n  type        = string\n  validation {\n    condition     = length(var.environment_id) > 0\n    error_message = \"The environment id must not be empty\"\n  }\n}\n\nvariable \"role_name\" {\n  description = \"The name of the role\"\n  type        = string\n  validation {\n    condition     = length(var.role_name) > 0\n    error_message = \"The role name must not be empty\"\n  }\n}\n\nvariable \"business_unit_id\" {\n  description = \"The unique identifier of the business unit\"\n  type        = string\n  validation {\n    condition     = length(var.business_unit_id) > 0\n    error_message = \"The business unit id must not be empty\"\n  }\n}\n\nresource \"powerplatform_data_record\" \"role\" {\n  environment_id     = var.environment_id\n  table_logical_name = \"role\"\n\n  columns = {\n    name = var.role_name\n\n    businessunitid = {\n      table_logical_name = \"businessunit\"\n      data_record_id     = var.business_unit_id\n    }\n  }\n}\n\noutput \"role_id\" {\n  value = powerplatform_data_record.role.id\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Power Platform Environment using Terraform CLI\nDESCRIPTION: This command imports an existing Power Platform environment into Terraform state using the 'terraform import' command. It requires the resource type, resource name in Terraform, and the environment ID.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/guides/importing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform import powerplatform_environment.example_env 00000000-0000-0000-0000-000000000001\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Configuration with Import Block\nDESCRIPTION: This command applies the Terraform configuration, including the import block. During the apply stage, Terraform will import the specified resource into its state.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/guides/importing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Provider with System-Managed Identity\nDESCRIPTION: Terraform configuration for using a system-managed identity (MSI) to authenticate with Power Platform. This approach enables keyless authentication when running in Azure services.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_14\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"powerplatform\" {\n  use_msi = true\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Certificate Files in PowerShell\nDESCRIPTION: Combines the public and private parts of the certificate files into a single PEM file using PowerShell commands.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Content .\\cert.pem, .\\key.pem | Set-Content cert+key.pem\n```\n\n----------------------------------------\n\nTITLE: Importing PowerPlatform DLP Policy\nDESCRIPTION: Shell command syntax for importing an existing Data Loss Prevention Policy into Terraform state.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/data_loss_prevention_policy.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Provider with User-Managed Identity\nDESCRIPTION: Terraform configuration for using a user-managed identity to authenticate with Power Platform. This requires setting the client_id from the user-managed identity resource.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_15\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"powerplatform\" {\n  use_msi = true\n  client_id = var.client_id # This should be the Client ID from the user-managed identity resource.\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Power Platform Billing Policy Resources in Terraform\nDESCRIPTION: This snippet shows the command syntax for importing an existing Power Platform billing policy into Terraform state. It requires replacing the placeholder GUID with the actual billing policy ID during import.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/billing_policy.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Billing policies can be imported using the billing policy id (replace with a real billing policy guid)\nterraform import powerplatform_billing_policy.example 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Defining Timeouts Schema for Power Platform Operations\nDESCRIPTION: Schema definition for configuring operation timeouts in Power Platform resources. Includes options for create, delete, read and update operations with duration parsing capabilities.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/managed_environment.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Nested Schema for `timeouts`\n\nOptional:\n\n- `create` (String) A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n- `delete` (String) A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.\n- `read` (String) A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.\n- `update` (String) A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Provider for OIDC Authentication\nDESCRIPTION: This snippet shows how to configure the Power Platform provider to use OIDC authentication in a Terraform configuration file.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"powerplatform\" {\n  use_oidc = true\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Schema for Teams Integration Configuration in Terraform\nDESCRIPTION: Schema configuration options for Teams integration with Power Platform. Currently only includes an option to set a user limit for sharing with colleagues.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/tenant_settings.md#2025-04-23_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\npower_platform.teams_integration {\n  share_with_colleagues_user_limit = number\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Power Platform Provider for Sovereign Clouds\nDESCRIPTION: This Terraform configuration sets up the Power Platform provider for a specific sovereign cloud. The 'cloud' parameter accepts various values including 'china', 'gcc', 'gcchigh', 'dod', 'ex', or 'rx'.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/guides/nonpublic_clouds.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  cloud = \"china\" # public (default) | gcc | gcchigh | dod | china | ex | rx\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Schema for User Management Settings in Terraform\nDESCRIPTION: Schema configuration options for user management in Power Platform. Currently only includes an option to enable deletion of disabled users across all environments.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/tenant_settings.md#2025-04-23_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\npower_platform.user_management_settings {\n  enable_delete_disabled_user_in_all_environments = bool\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Schema for Timeouts Configuration in Terraform\nDESCRIPTION: Schema configuration options for operation timeouts in Power Platform provider. Allows setting custom durations for create, delete, read, and update operations using Go duration format.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/tenant_settings.md#2025-04-23_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\ntimeouts {\n  create = string\n  delete = string\n  read = string\n  update = string\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Schema for Power Automate Configuration in Terraform\nDESCRIPTION: Schema configuration options for Power Automate settings. Currently only includes an option to disable Copilot functionality.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/tenant_settings.md#2025-04-23_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\npower_platform.power_automate {\n  disable_copilot = bool\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline for Terraform with OIDC Authentication\nDESCRIPTION: This YAML pipeline demonstrates how to use OIDC authentication with Azure DevOps for both Azure and Power Platform providers. It sets up environment variables and uses the AzureCLI@2 task to run Terraform commands.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n- main\n\npool: \n  name: \"your-agent-pool-name\"\n  vmImage: ubuntu-latest\n\nvariables:\n- name: POWER_PLATFORM_CLIENT_ID\n  value: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n- name: POWER_PLATFORM_TENANT_ID\n  value: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n- name: SERVICE_CONNECTION_ID\n  value: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n- name: ARM_CLIENT_ID\n  value: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n- name: ARM_SUBSCRIPTION_ID\n  value: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n- name: ARM_TENANT_ID\n  value: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n\nsteps:\n- task: AzureCLI@2\n  displayName: 'Run Terraform Init, Plan, Apply, and Destroy'\n  inputs:\n    azureSubscription: $(SERVICE_CONNECTION_ID)\n    scriptType: bash\n    scriptLocation: \"inlineScript\"\n    inlineScript: |\n      # export TF_VAR variables for Azure authentication this variables should be set in your terraform code\n      export TF_VAR_arm_client_id=$ARM_CLIENT_ID\n      export TF_VAR_arm_subscription_id=$ARM_SUBSCRIPTION_ID\n      export TF_VAR_arm_tenant_id=$ARM_TENANT_ID\n      export ARM_ADO_PIPELINE_SERVICE_CONNECTION_ID=$SERVICE_CONNECTION_ID\n      # export Power Platform variables for authentication\n      export TF_VAR_power_platform_client_id=$POWER_PLATFORM_CLIENT_ID\n      export TF_VAR_power_platform_tenant_id=$POWER_PLATFORM_TENANT_ID\n      export POWER_PLATFORM_AZDO_SERVICE_CONNECTION_ID=$SERVICE_CONNECTION_ID\n\n      # Terraform CLI installation and commands\n\n  env:\n    ARM_OIDC_REQUEST_TOKEN: $(System.AccessToken)\n    SYSTEM_ACCESSTOKEN: $(System.AccessToken)\n    SYSTEM_OIDCREQUESTURI: $(System.OidcRequestUri)\n    POWER_PLATFORM_OIDC_REQUEST_URI: $(System.OidcRequestUri)\n    POWER_PLATFORM_OIDC_TOKEN: $(System.AccessToken)\n```\n\n----------------------------------------\n\nTITLE: Accessing Business Unit Data in HCL\nDESCRIPTION: This snippet shows how to reference the data retrieved by the powerplatform_data_records data source. It demonstrates accessing the name and ID of the first business unit in the returned list.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/guides/dynamic_configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\n${data.powerplatform_data_records.business_units.rows[0].name}\n\n${data.powerplatform_data_records.business_units.rows[0].businessunitid}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Permissions for OIDC\nDESCRIPTION: This YAML snippet demonstrates how to configure the necessary permissions in a GitHub Actions workflow to use OIDC authentication.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n  id-token: write\n  contents: read\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Power Platform Admin Management Applications\nDESCRIPTION: Shell command for importing an already registered admin management application into Terraform state using the client ID of a service principal.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/admin_management_application.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Already registered admin management applications can be imported using the client id of a service principal (replace with a real client id)\nterraform import powerplatform_admin_management_application.example 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Pipeline Environment Variables for OIDC\nDESCRIPTION: This YAML snippet shows how to set up environment variables in an Azure DevOps pipeline for OIDC authentication with the Power Platform provider.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  ARM_OIDC_REQUEST_TOKEN: $(System.AccessToken)\n  SYSTEM_ACCESSTOKEN: $(System.AccessToken)\n  SYSTEM_OIDCREQUESTURI: $(System.OidcRequestUri)\n  POWER_PLATFORM_OIDC_REQUEST_URI: $(System.OidcRequestUri)\n  POWER_PLATFORM_OIDC_TOKEN: $(System.AccessToken)\n```\n\n----------------------------------------\n\nTITLE: Refreshing Power Platform API Visibility in Azure AD\nDESCRIPTION: PowerShell script to install Azure AD module and register the Power Platform API service principal to force visibility refresh in the Azure portal.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/guides/app_registration.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n#Install the Microsoft Entra the module\nInstall-Module AzureAD\n\nConnect-AzureAD\nNew-AzureADServicePrincipal -AppId 8578e004-a5c6-46e7-913e-12f58912df43 -DisplayName \"Power Platform API\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for OIDC Authentication (Bash)\nDESCRIPTION: This Bash script sets the necessary environment variables for OIDC authentication with the Power Platform provider.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nexport POWER_PLATFORM_CLIENT_ID=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\nexport POWER_PLATFORM_TENANT_ID=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\nexport POWER_PLATFORM_USE_OIDC=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Structured Logging with tflog in Go\nDESCRIPTION: Examples of proper logging implementation using HashiCorp's tflog package for structured logging in Terraform providers. Shows both basic info logging and debug logging with additional context data.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/observability_guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntflog.Info(ctx, \"message\")\ntflog.Debug(ctx, \"message\", map[string]interface{}{\"field\": value})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for OIDC Authentication (PowerShell)\nDESCRIPTION: This PowerShell script sets the necessary environment variables for OIDC authentication with the Power Platform provider.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$env:POWER_PLATFORM_CLIENT_ID=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n$env:POWER_PLATFORM_TENANT_ID=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n$env:POWER_PLATFORM_USE_OIDC=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry Opt-out in Terraform Configuration\nDESCRIPTION: Example of the provider configuration setting to opt out of telemetry data collection. When set to true, the provider will not include identifying headers in Power Platform API requests.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/observability_guidelines.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntelemetry_optout = true\n```\n\n----------------------------------------\n\nTITLE: Logging into Azure CLI for Power Platform Provider\nDESCRIPTION: This command logs into the Azure CLI with the necessary scope for the Power Platform Terraform Provider. It's required to authenticate and access the sovereign cloud resources.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/guides/nonpublic_clouds.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz login --scope api://powerplatform_provider_terraform/.default\n```\n\n----------------------------------------\n\nTITLE: Tagging and Pushing a New Release Version in Git\nDESCRIPTION: This bash snippet demonstrates how to create a new Git tag for a release version and push it to the remote repository. It uses Changie to determine the version number and creates a tag with the 'v' prefix required by Terraform conventions.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/release_guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nVERSION=\"v$(changie version)\"\ngit tag -a $VERSION -m \"Release $VERSION\" \ngit push origin $VERSION\n```\n\n----------------------------------------\n\nTITLE: Disabling Azure CLI Telemetry for Power Platform Provider\nDESCRIPTION: Command to disable Azure CLI telemetry when using CLI-based authentication for the Power Platform provider.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\naz config set core.collect_telemetry=false\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for Terraform Provider\nDESCRIPTION: Environment variable setting to enable debug-level logging output from the Terraform provider during execution.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/playbook/resource.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_LOG=DEBUG\n```\n\n----------------------------------------\n\nTITLE: Nested Schema for Power Apps Configuration in Terraform\nDESCRIPTION: Schema configuration options for Power Apps settings. Controls features like connection sharing, creation methods, maker match functionality, sharing permissions, and guest access.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/tenant_settings.md#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\npower_platform.power_apps {\n  disable_connection_sharing_with_everyone = bool\n  disable_create_from_figma = bool\n  disable_create_from_image = bool\n  disable_maker_match = bool\n  disable_share_with_everyone = bool\n  disable_unused_license_assignment = bool\n  enable_guests_to_make = bool\n}\n```\n\n----------------------------------------\n\nTITLE: Running Acceptance Tests in Go for Power Platform Terraform Provider\nDESCRIPTION: Command to run acceptance tests that interact with live Power Platform APIs. Requires proper authentication setup.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/playbook/resource.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake acctest\n```\n\n----------------------------------------\n\nTITLE: Nested Schema for Power Platform Licensing Configuration in Terraform\nDESCRIPTION: Schema configuration options for Power Platform licensing settings. Includes options to control billing policy creation, AI builder credits usage, tenant capacity reporting, and storage consumption thresholds.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/tenant_settings.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\npower_platform.licensing {\n  disable_billing_policy_creation_by_non_admin_users = bool\n  disable_use_of_unassigned_ai_builder_credits = bool\n  enable_tenant_capacity_report_for_environment_admins = bool\n  enable_tenant_licensing_report_for_environment_admins = bool\n  storage_capacity_consumption_warning_threshold = number\n}\n```\n\n----------------------------------------\n\nTITLE: Running Acceptance Tests in Power Platform Terraform Provider\nDESCRIPTION: Commands for running acceptance tests against real infrastructure in the Power Platform Terraform Provider project.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/testing_guidelines.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake acctest\n```\n\n----------------------------------------\n\nTITLE: Nested Schema for Power Pages Configuration in Terraform\nDESCRIPTION: Schema configuration options for Power Pages settings. Currently an empty block with no specific configuration options.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/tenant_settings.md#2025-04-23_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\npower_platform.power_pages {\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Running Specific Acceptance Test in Power Platform Terraform Provider\nDESCRIPTION: Command for running a single acceptance test in the Power Platform Terraform Provider project.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/testing_guidelines.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake acctest TEST=<test_name>\n```\n\n----------------------------------------\n\nTITLE: Defining Solution Checker Rule Overrides in Terraform for Power Platform\nDESCRIPTION: This code snippet shows how to define the 'solution_checker_rule_overrides' attribute in a Terraform configuration for Power Platform. It is used to specify a set of rules to exclude from the solution checker.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/managed_environment.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nsolution_checker_rule_overrides = [\"rule_code_1\", \"rule_code_2\"]\n```\n\n----------------------------------------\n\nTITLE: Running Specific Acceptance Test in Go for Power Platform Terraform Provider\nDESCRIPTION: Command to execute a specific acceptance test for a resource in the Power Platform Terraform Provider.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/playbook/resource.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nTF_ACC=1 go test -v ./... -run TestAccYourResourceName\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Power Platform Provider in Bash\nDESCRIPTION: Steps to build, install, and test the Power Platform provider locally. This includes navigating to the repository, building the provider, and running a basic terraform plan to verify functionality.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/DEVELOPER.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# you should already be in this directory, but just in case\ncd /workspaces/terraform-provider-power-platform\n\n# Build and install the provider's binary locally\nmake install\n\n# Navigate to a folder that contains *.tf files and run below\ncd examples/data-sources/powerplatform_environments\n\n# Run terraform to validate that provider is functioning\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Expand in Power Platform Terraform Provider\nDESCRIPTION: Schema definition for nested expand attributes supporting up to 9 levels of expansion. Includes required navigation_property and optional parameters for filtering, ordering, selecting, and limiting results through OData queries.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/data-sources/data_records.md#2025-04-23_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nexpand {\n  navigation_property = \"<entity_collection>\"\n  filter = \"<filter_condition>\"\n  order_by = \"<order_criteria>\"\n  select = [\"<column1>\", \"<column2>\"]\n  top = <number_of_records>\n  expand {\n    # Additional nested expand blocks can be added here\n    # Up to 9 levels deep\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Docker Container Terminal in Bash\nDESCRIPTION: This command allows developers to access the Docker container's terminal directly from the operating system's terminal, providing an alternative to using VS Code's integrated terminal.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/DEVELOPER.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -u vscode -w /workspaces/terraform-provider-power-platform -it <your_docker_container_name_goes_here> bash -c \"exec bash\"\n```\n\n----------------------------------------\n\nTITLE: Importing Power Platform Environment Group\nDESCRIPTION: Command for importing existing Power Platform environment groups into Terraform state using the environment group GUID.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/environment_group.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Environment Groups can be imported using the environment group id (replace with a real environment group guid)\nterraform import powerplatform_environment_group.example 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Running Acceptance Test with Network Tracing\nDESCRIPTION: Command for running a single acceptance test with network tracing enabled to debug API interactions.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/testing_guidelines.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake acctest TEST=<test_name> USE_PROXY=1\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Authentication Command\nDESCRIPTION: Command to authenticate using Azure CLI with the configured App Registration scope.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/guides/app_registration.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz login --scope api://powerplatform_provider_terraform/.default\n```\n\n----------------------------------------\n\nTITLE: Importing Power Platform Copilot Application Insights Configuration\nDESCRIPTION: Shell command example showing how to import existing Copilot Application Insights configuration into Terraform state using environment ID and bot ID.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/resources/copilot_studio_application_insights.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import powerplatform_copilot_studio_application_insights.example 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Application ID URI Format Example\nDESCRIPTION: Example format for setting the Application ID URI in the App Registration.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/guides/app_registration.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\napi://powerplatform_provider_terraform\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Schema - Go and Terraform Plugin Framework\nDESCRIPTION: Example showing the structure of resource schema definition using Terraform Plugin Framework. Demonstrates attribute types, required/computed fields, nested attributes, and validation patterns.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/playbook/resource.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *Resource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {\n  resp.Schema = schema.Schema{\n    Attributes: map[string]schema.Attribute{\n      \"id\": schema.StringAttribute{\n        Computed: true,\n        PlanModifiers: []planmodifier.String{\n          stringplanmodifier.UseStateForUnknown(),\n        },\n      },\n      \"display_name\": schema.StringAttribute{\n        Required:    true,\n        Description: \"The display name of the environment\",\n      },\n      \"dataverse\": schema.SingleNestedAttribute{\n        Optional: true,\n        Attributes: map[string]schema.Attribute{\n          // Nested attributes here\n        },\n      },\n      \"timeouts\": schema.SingleNestedAttribute{\n        Optional: true,\n        Attributes: map[string]schema.Attribute{\n          \"create\": schema.StringAttribute{Optional: true},\n          \"update\": schema.StringAttribute{Optional: true},\n          \"delete\": schema.StringAttribute{Optional: true},\n        },\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Power Platform Provider\nDESCRIPTION: Simple command to update all dependencies in the Power Platform provider project using the make system.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/DEVELOPER.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake deps\n```\n\n----------------------------------------\n\nTITLE: Generating PKCS12 Certificate for Power Platform\nDESCRIPTION: Converts the combined certificate file into PKCS12 format which is required for Power Platform authentication.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -export -out cert.pkcs12 -in cert+key.pem\n```\n\n----------------------------------------\n\nTITLE: Adding Error Diagnostic in Terraform Provider for Power Platform (Go)\nDESCRIPTION: This snippet demonstrates how to add an error diagnostic in a Terraform provider for Power Platform. It shows the pattern used throughout the provider to surface errors, providing a clear summary and detailed message.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/playbook/resource.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nresp.Diagnostics.AddError(\"Failed to create Environment\", \"The Power Platform API returned an error: \"+ err.Error())\n```\n\n----------------------------------------\n\nTITLE: Merging Certificate Files in Linux Shell\nDESCRIPTION: Combines the public and private parts of the certificate files into a single PEM file using the Linux shell cat command.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/docs/index.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncat *.pem > cert+key.pem\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for Power Platform Terraform Provider\nDESCRIPTION: Command to generate and update documentation markdown files for the Power Platform Terraform Provider based on schema and descriptions.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/playbook/resource.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake docs\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH and IPC for Git in Bash\nDESCRIPTION: These commands set environment variables for SSH authentication and IPC when accessing the container shell outside VS Code, ensuring proper Git connectivity.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/DEVELOPER.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport SSH_AUTH_SOCK=$(ls -t /tmp/vscode-ssh-auth* | head -1)\nexport REMOTE_CONTAINERS_IPC=$(ls -t /tmp/vscode-remote-containers-ipc* | head -1)\n```\n\n----------------------------------------\n\nTITLE: Example Table Structure in Markdown\nDESCRIPTION: Comparison table showing decision factors between loosely typed and strongly typed resources in the Power Platform Terraform provider\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/schema_guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Decision Factor                    | Loosely Typed Resources                      | Strongly Typed Resources                              |\n| ---------------------------------- | -------------------------------------------- | ----------------------------------------------------- |\n| API Stability                      | Unstable, rapidly evolving APIs              | Stable, mature APIs                                   |\n| Validation and Error Handling      | Limited validation; runtime errors possible  | Comprehensive validation; fewer runtime errors        |\n| Development and Maintenance Effort | Low ongoing maintenance                      | Higher initial and ongoing maintenance                |\n| Usability                          | Flexible but potentially error-prone         | Highly usable with clear guidance and auto-completion |\n| Speed to Adopt New Features        | Quick adoption; no need for provider updates | Slower adoption; requires provider schema updates     |\n| Debugging and Troubleshooting      | Harder; errors identified at runtime         | Easier; errors identified during plan                 |\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in Power Platform Terraform Provider\nDESCRIPTION: Commands for running unit tests in the Power Platform Terraform Provider project. Includes options for running all tests or a specific test.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/testing_guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake unittest\n```\n\n----------------------------------------\n\nTITLE: Running Specific Unit Test in Power Platform Terraform Provider\nDESCRIPTION: Command for running a single unit test in the Power Platform Terraform Provider project.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/testing_guidelines.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake unittest TEST=<test_name>\n```\n\n----------------------------------------\n\nTITLE: Fixing Container Permissions for Tests\nDESCRIPTION: Commands to resolve permission issues in the development container for running tests by assigning appropriate ownership to the project and Go package directories.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/testing_guidelines.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown -R vscode /workspaces/terraform-provider-power-platform/\nsudo chown -R vscode /go/pkg\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog with Changie in Bash\nDESCRIPTION: Commands to generate a new changelog entry using Changie. This process compiles unreleased change fragments into the main CHANGELOG.md file, grouping changes by type and creating a new version section.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/release_guidelines.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchangie batch auto\nchangie merge\n```\n\n----------------------------------------\n\nTITLE: Verifying Git Configuration in Bash\nDESCRIPTION: This command lists all Git configuration settings, allowing developers to verify their Git username and email within the development environment.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/DEVELOPER.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --list\n```\n\n----------------------------------------\n\nTITLE: Setting Git User Information in Bash\nDESCRIPTION: These commands set the global Git username and email, which are essential for proper attribution of commits in the development process.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/DEVELOPER.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@address\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Network Calls with mitmproxy in Power Platform Provider\nDESCRIPTION: Instructions for using mitmproxy to inspect network traffic when debugging the Power Platform provider. Shows how to run mitmproxy and execute tests or terraform commands with proxy settings.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/DEVELOPER.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmitmproxy\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake acctest TEST=<test_name> USE_PROXY=1\n```\n\nLANGUAGE: bash\nCODE:\n```\nHTTP_PROXY=http://127.0.0.1:8080 HTTPS_PROXY=http://127.0.0.1:8080 terraform apply\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Power Platform Provider\nDESCRIPTION: Commands for adding new Go module dependencies to the Power Platform Terraform provider. This process uses Go modules for dependency management.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/DEVELOPER.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/author/dependency\nmake deps\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in Go for Power Platform Terraform Provider\nDESCRIPTION: Command to execute unit tests for the Power Platform Terraform Provider without accessing real Power Platform APIs.\nSOURCE: https://github.com/microsoft/terraform-provider-power-platform/blob/main/devdocs/playbook/resource.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake unittest\n```"
  }
]