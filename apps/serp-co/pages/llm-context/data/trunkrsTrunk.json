[
  {
    "owner": "trunk-rs",
    "repo": "trunk",
    "content": "TITLE: Building, Watching and Serving WASM Projects\nDESCRIPTION: The serve command combines the functionality of 'trunk watch' with a web server, enabling immediate testing of changes in a browser environment.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/commands/index.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntrunk serve\n```\n\n----------------------------------------\n\nTITLE: Serving WebAssembly Project with Trunk CLI\nDESCRIPTION: The 'trunk serve' command combines the functionality of 'trunk watch' with a web server, allowing for immediate testing of the WebAssembly project in a browser.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/commands.md#2025-04-19_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ntrunk serve\n```\n\n----------------------------------------\n\nTITLE: Building WASM Projects with Trunk\nDESCRIPTION: The build command runs cargo build targeting wasm32, processes the output with wasm-bindgen, and builds any assets defined in the target index.html file. It leverages Rust's concurrency for optimal performance.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/commands/index.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntrunk build\n```\n\n----------------------------------------\n\nTITLE: Building WebAssembly with Trunk CLI\nDESCRIPTION: The 'trunk build' command compiles Rust code to WebAssembly, processes it with wasm-bindgen, and builds associated assets defined in the index.html file.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/commands.md#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntrunk build\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes in WASM Projects\nDESCRIPTION: The watch command performs the same build operations as 'trunk build' but continually watches the filesystem for changes, automatically triggering new builds when changes are detected.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/commands/index.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntrunk watch\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes with Trunk CLI\nDESCRIPTION: The 'trunk watch' command performs the same actions as 'trunk build', but also monitors the filesystem for changes and triggers new builds automatically when changes are detected.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/commands.md#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ntrunk watch\n```\n\n----------------------------------------\n\nTITLE: Trunk Configuration in Cargo.toml\nDESCRIPTION: Example showing how to include Trunk configuration within Cargo.toml under the package.metadata.trunk section.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/configuration/index.md#2025-04-19_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[package.metadata.trunk.build]\ndist = \"dist\"\n[package.metadata.trunk.serve]\nport = 8080\n```\n\n----------------------------------------\n\nTITLE: Starting Trunk Development Server\nDESCRIPTION: Command to build and serve the application using Trunk with automatic browser opening.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/getting-started/project.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntrunk serve --open\n```\n\n----------------------------------------\n\nTITLE: Basic Trunk Configuration in TOML\nDESCRIPTION: Example of basic Trunk configuration using TOML format, showing build and serve settings.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/configuration/index.md#2025-04-19_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[build]\ndist = \"dist\"\n[serve]\nport = 8080\n```\n\n----------------------------------------\n\nTITLE: Installing WebAssembly Target for Rust\nDESCRIPTION: Command to add the WebAssembly compilation target (wasm32-unknown-unknown) to an existing Rust installation using rustup. This is required for cross-compiling Rust code to WebAssembly.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/getting-started/pre-reqs.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrustup target add wasm32-unknown-unknown\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings in TOML\nDESCRIPTION: Defines build-related settings in the Trunk.toml file, including target HTML, output directory, release mode, and asset handling options.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/configuration.md#2025-04-19_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[build]\ntarget = \"index.html\"       # The index HTML file to drive the bundling process.\nhtml_output = \"index.html\"  # The name of the output HTML file.\nrelease = false             # Build in release mode.\ndist = \"dist\"               # The output dir for all final assets.\npublic_url = \"/\"            # The public URL from which assets are to be served.\nfilehash = true             # Whether to include hash values in the output file names.\ninject_scripts = true       # Whether to inject scripts (and module preloads) into the finalized output.\noffline = false             # Run without network access\nfrozen = false              # Require Cargo.lock and cache are up to date\nlocked = false              # Require Cargo.lock is up to date\nminify = \"never\"            # Control minification: can be one of: never, on_release, always\nno_sri = false              # Allow disabling sub-resource integrity (SRI)\n```\n\n----------------------------------------\n\nTITLE: Running Trunk with Yew Application\nDESCRIPTION: Command to serve the Trunk application and open it in a browser. This is used to build, serve, and automatically open the WASM web application.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/examples/yew/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntrunk serve --open\n```\n\n----------------------------------------\n\nTITLE: Running Trunk WASM Application\nDESCRIPTION: Command to serve and open the WASM web application using Trunk development server. The --open flag automatically opens the application in the default browser.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/examples/cdylib/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntrunk serve --open\n```\n\n----------------------------------------\n\nTITLE: Serving Trunk WASM Application\nDESCRIPTION: Command to serve and automatically open the WASM application in a browser using Trunk's development server.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/examples/initializer/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntrunk serve --open\n```\n\n----------------------------------------\n\nTITLE: Configuring OS-specific Hook Overrides in Trunk.toml\nDESCRIPTION: Example of how to implement OS-specific overrides for hooks in Trunk.toml. This pattern allows using different commands and arguments based on the operating system, such as using 'sh' on Linux and 'cmd' on Windows.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/build/hooks.md#2025-04-19_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[hooks.<os>]\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic DOM Manipulation in Rust\nDESCRIPTION: Main Rust code that demonstrates basic DOM manipulation using web_sys to create and append text to the document body.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/getting-started/project.md#2025-04-19_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse web_sys::window;\n\nfn main() {\n    console_error_panic_hook::set_once();\n\n    let document = window()\n        .and_then(|win| win.document())\n        .expect(\"Could not access the document\");\n    let body = document.body().expect(\"Could not access document.body\");\n    let text_node = document.create_text_node(\"Hello, world from Vanilla Rust!\");\n    body.append_child(text_node.as_ref())\n        .expect(\"Failed to append text\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding WASM Dependencies\nDESCRIPTION: Commands to add required dependencies for web development including wasm-bindgen and web_sys with specific features.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/getting-started/project.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo add wasm-bindgen console_error_panic_hook\ncargo add web_sys -F Window,Document,HtmlElement,Text\n```\n\n----------------------------------------\n\nTITLE: Configuring SASS/SCSS Processing in Trunk\nDESCRIPTION: HTML link tag setup for processing SASS/SCSS files. Options include inlining compiled CSS directly into style tags and integrity digest specification.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/assets/index.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link data-trunk rel=\"sass\" href=\"{path}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a WASM Entrypoint in lib.rs\nDESCRIPTION: Example of defining an asynchronous entrypoint function in a Rust library using the wasm_bindgen start attribute, which serves as the main function for a WebAssembly application.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/advanced.md#2025-04-19_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[wasm_bindgen(start)]\npub async fn run() {}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom WebAssembly Initializer in JavaScript\nDESCRIPTION: Example of creating a custom initializer module for Trunk WebAssembly applications. The initializer provides hooks for start, progress, completion, success, and failure events during WASM loading and initialization. This allows developers to implement custom loading feedback and error handling.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/advanced/initializer.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function myInitializer () {\n  return {\n    onStart: () => {\n      // called when the loading starts\n    },\n    onProgress: ({current, total}) => {\n      // the progress while loading, will be called periodically.\n      // \"current\" will contain the number of bytes of the WASM already loaded\n      // \"total\" will either contain the total number of bytes expected for the WASM, or if the server did not provide\n      //   the content-length header it will contain 0.\n    },\n    onComplete: () => {\n      // called when the initialization is complete (successfully or failed)\n    },\n    onSuccess: (wasm) => {\n      // called when the initialization is completed successfully, receives the `wasm` instance\n    },\n    onFailure: (error) => {\n      // called when the initialization is completed with an error, receives the `error`\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Rust WASM Assets in Trunk\nDESCRIPTION: Configuration for compiling Rust projects as WASM. Includes options for target selection, features, optimization, and various wasm-bindgen settings.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/assets.md#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link data-trunk rel=\"rust\" href=\"{path}\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Trunk WebAssembly Startup Event\nDESCRIPTION: Example code demonstrating how to listen for the TrunkApplicationStarted event and interact with WebAssembly bindings. Shows both direct binding access and event detail usage for calling WASM functions.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/advanced/startup_event.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  addEventListener(\"TrunkApplicationStarted\", (event) => {\n  console.log(\"application started - bindings:\", window.wasmBindings, \"WASM:\", event.detail.wasm);\n  // wasm_ffi is a function exported from WASM to JavaScript\n  window.wasmBindings.wasm_ffi();\n  // You can also run this via the WASM instance in the details\n  // event.detail.wasm.wasm_ffi();\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring a cdylib Project in Cargo.toml\nDESCRIPTION: Configuration for setting up a Rust project as a cdylib for WebAssembly compilation, enabling the project to be used as a library rather than an executable.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/advanced.md#2025-04-19_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[lib]\ncrate-type = [\"cdylib\", \"rlib\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Trunk Configuration in YAML\nDESCRIPTION: Equivalent Trunk configuration using YAML format, demonstrating the JSON-compatible model structure.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/configuration/index.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  dist: \"dist\"\nserve:\n  port: 8080\n```\n\n----------------------------------------\n\nTITLE: Basic Rust application entry point for Trunk\nDESCRIPTION: A minimal Rust main function template for a WASM application that can be built with Trunk. This is where application setup code would be placed.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/_index.md#2025-04-19_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    // ... your app setup code here ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Rust WASM Project with Cargo\nDESCRIPTION: Commands to create a new Rust project for web development and navigate to its directory.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/getting-started/project.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo new trunk-hello-world\ncd trunk-hello-world\n```\n\n----------------------------------------\n\nTITLE: Running Trunk Development Server\nDESCRIPTION: Command to start the Trunk development server and open the application in the default browser. The --open flag automatically launches the browser when the server starts.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/examples/vanilla/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntrunk serve --open\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings in Trunk.toml\nDESCRIPTION: Example configuration for setting up a proxy in Trunk.toml that redirects requests from '/api/v1/' to a backend server at 'http://localhost:9000/'. This demonstrates the basic proxy configuration structure using the [[proxy]] section with rewrite and backend fields.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/advanced/proxy.md#2025-04-19_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[proxy]]\nrewrite = \"/api/v1/\"\nbackend = \"http://localhost:9000/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings in TOML\nDESCRIPTION: Defines proxy settings for Trunk, including backend URL, WebSocket support, and path rewriting options.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/configuration.md#2025-04-19_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[[proxy]]\nbackend = \"https://localhost:9000/api/v1\" # Address to proxy requests to\nws = false                                # Use WebSocket for this proxy\ninsecure = false                          # Disable certificate validation\nno_system_proxy = false                   # Disable system proxy\nrewrite = \"\"                              # Strip the given prefix off paths\nno_redirect = false                       # Disable following redirects of proxy responses\n```\n\n----------------------------------------\n\nTITLE: Running a Trunk WASM Application\nDESCRIPTION: Command to serve and open a Trunk-based Rust WASM web application in the browser. This command starts a development server and automatically opens the application in the default web browser.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/examples/yaml-config/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntrunk serve --open\n```\n\n----------------------------------------\n\nTITLE: Cleaning Build Artifacts with Trunk CLI\nDESCRIPTION: The 'trunk clean' command removes all build artifacts generated from previous builds, helping to ensure a clean slate for new builds.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/commands.md#2025-04-19_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ntrunk clean\n```\n\n----------------------------------------\n\nTITLE: Serving Leptos WASM Application with Trunk\nDESCRIPTION: This command uses Trunk to serve the Leptos WASM application and automatically open it in the default web browser. It should be executed from the example's directory after installing Trunk.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/examples/leptos/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntrunk serve --open\n```\n\n----------------------------------------\n\nTITLE: Generated HTML output from Trunk build\nDESCRIPTION: The HTML file generated by Trunk after building a project, showing how assets are referenced with integrity hashes and how the WASM module is loaded.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/_index.md#2025-04-19_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"/index-fe65950190f03c21.css\" integrity=\"sha384-pgQCpTXf5Gd2g3bMQt/1fNJvznbtkReq/e3ooBAB1MPzHOTtbFDd5/tqXjQXrP4i\"/>\n    \n<script type=\"module\">\nimport init, * as bindings from '/my_program_name-905e0077a27c1ab6.js';\nconst wasm = await init('/my_program_name-905e0077a27c1ab6_bg.wasm');\n\nwindow.wasmBindings = bindings;\ndispatchEvent(new CustomEvent(\"TrunkApplicationStarted\", {detail: {wasm}}));\n\n</script>\n  <link rel=\"modulepreload\" href=\"/my_program_name-905e0077a27c1ab6.js\" crossorigin=\"anonymous\" integrity=\"sha384-XtIBch5nbGDblQX/VKgj2jEZMDa5+UbPgVtEQp18GY63sZAFYf81ithX9iMSLbBn\"><link rel=\"preload\" href=\"/my_program_name-905e0077a27c1ab6_bg.wasm\" crossorigin=\"anonymous\" integrity=\"sha384-Mf9hhCJLbxzecZm30W8m15djd1Z1yamaa52XBF0TsvX0/qITABYRpsB5cVmy3lt/\" as=\"fetch\" type=\"application/wasm\"></head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Cleaning Build Artifacts\nDESCRIPTION: The clean command removes any build artifacts generated from previous builds, providing a clean slate for new builds.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/commands/index.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntrunk clean\n```\n\n----------------------------------------\n\nTITLE: Declaring a Rust WASM Asset with Trunk\nDESCRIPTION: HTML link tag configuration for compiling a Rust project to WebAssembly. Includes options for specifying the Cargo.toml location, target selection, features activation, and various WebAssembly optimization settings.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/assets/index.md#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link data-trunk rel=\"rust\" href=\"{path}\" />\n```\n\n----------------------------------------\n\nTITLE: Handling CSS Files in Trunk\nDESCRIPTION: Configuration for processing CSS files. Trunk copies these files with optional minification and integrity verification.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/assets.md#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link data-trunk rel=\"css\" href=\"{path}\" />\n```\n\n----------------------------------------\n\nTITLE: Using Admonish Attention Block for Script Tag Requirements in Trunk\nDESCRIPTION: An admonish block explaining the requirements for valid HTML script tags in Trunk. It emphasizes that script tags must have an end tag rather than being self-closing to ensure proper functionality.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/assets/index.md#2025-04-19_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n```admonish attention\nA *valid* HTML `script` tag always has an end tag (like `<script></script>`). A self-closing script tag\n(like `<script />`) is **not** avalid HTML script tag and will trigger a warning an may create a non-working HTML file.\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Trunk from local directory using Cargo\nDESCRIPTION: This command installs Trunk from a local directory, useful when working with a checked-out repository or local changes.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/getting-started/installation.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --path . trunk\n```\n\n----------------------------------------\n\nTITLE: Installing Trunk by downloading from GitHub releases\nDESCRIPTION: Command to download and extract a Trunk binary release directly from GitHub releases. This example is for Linux x86_64 architecture.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/_index.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget -qO- https://github.com/trunk-rs/trunk/releases/download/0.17.10/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-\n```\n\n----------------------------------------\n\nTITLE: Installing specific Trunk tag from GitHub using Cargo\nDESCRIPTION: This command installs a specific tagged version of Trunk from its GitHub repository.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/getting-started/installation.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --git https://github.com/trunk-rs/trunk trunk --tag <tag>\n```\n\n----------------------------------------\n\nTITLE: Displaying Trunk Configuration with CLI\nDESCRIPTION: The 'trunk config show' command outputs Trunk's current configuration settings, excluding any CLI arguments. This is useful for testing and debugging purposes.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/commands.md#2025-04-19_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ntrunk config show\n```\n\n----------------------------------------\n\nTITLE: Starting Trunk Server with Custom Base URL\nDESCRIPTION: Runs the Trunk development server for a vanilla example with custom public URL and serve base configuration.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/examples/behind-reverse-proxy/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntrunk serve ../vanilla/Trunk.toml --public-url /my-app --serve-base /\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Trunk Configuration\nDESCRIPTION: This command shows Trunk's current configuration before any CLI arguments are applied, which is useful for testing and debugging purposes.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/commands/index.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntrunk config show\n```\n\n----------------------------------------\n\nTITLE: Running NGINX Reverse Proxy with Podman\nDESCRIPTION: Launches an NGINX container using Podman with host networking and a mounted configuration file.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/examples/behind-reverse-proxy/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npodman run --rm --network=host -ti  -v $(pwd)/nginx.conf:/etc/nginx/nginx.conf:z docker.io/library/nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Settings in TOML\nDESCRIPTION: Defines server-related settings for Trunk serve command, including address, port, aliases, and TLS options.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/configuration.md#2025-04-19_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[serve]\naddresses = [\"127.0.0.1\"]  # The address to serve on.\nport = 8080                # The port to serve on.\naliases = [\"http://localhost.mywebsite.com\"] # The aliases to serve on.\nopen = false               # Open a browser tab once the initial build is complete.\nno_spa = false             # Whether to disable fallback to index.html for missing files.\nno_autoreload = false      # Disable auto-reload of the web app.\nno_error_reporting = false # Disable error reporting\nws_protocol = \"ws\"         # Protocol used for autoreload WebSockets connection.\n# Additional headers set for responses.\nheaders = { \"test-header\" = \"header value\", \"test-header2\" = \"header value 2\" }\n# The certificate/private key pair to use for TLS, which is enabled if both are set.\ntls_key_path = \"self_signed_certs/key.pem\"\ntls_cert_path = \"self_signed_certs/cert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch Settings in TOML\nDESCRIPTION: Specifies watch settings for Trunk, including paths to watch and ignore for triggering rebuilds on file changes.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/configuration.md#2025-04-19_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[watch]\nwatch = []  # Paths to watch. The `build.target`'s parent folder is watched by default.\nignore = [] # Paths to ignore.\n```\n\n----------------------------------------\n\nTITLE: Copying Files in Trunk\nDESCRIPTION: Configuration for copying files directly to the distribution directory without modification or content hashing.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/assets.md#2025-04-19_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<link data-trunk rel=\"copy-file\" href=\"{path}\" />\n```\n\n----------------------------------------\n\nTITLE: Trunk Event Details Structure in JavaScript\nDESCRIPTION: Defines the structure of the TrunkApplicationStarted event details object containing the WebAssembly instance.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/advanced/startup_event.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  wasm // The web assembly instance\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Files with Trunk\nDESCRIPTION: HTML link tag for simple file copying to the distribution directory without content modification.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/assets/index.md#2025-04-19_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<link data-trunk rel=\"copy-file\" href=\"{path}\" />\n```\n\n----------------------------------------\n\nTITLE: Script Asset Declaration\nDESCRIPTION: HTML script tag format for declaring script assets in Trunk. Requires data-trunk attribute and src pointing to the script file.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/assets.md#2025-04-19_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script data-trunk src=\"{path}\" ..other options here..></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Clean Settings in TOML\nDESCRIPTION: Specifies settings for the Trunk clean command, including output directory and optional cargo clean.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/configuration.md#2025-04-19_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[clean]\ndist = \"dist\" # The output dir for all final assets.\ncargo = false # Optionally perform a cargo clean.\n```\n\n----------------------------------------\n\nTITLE: Displaying Required Tools Information\nDESCRIPTION: This command displays information about tools required by Trunk and the project, showing which tools are expected and which are currently found on the system.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/commands/index.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntrunk tools show\n```\n\n----------------------------------------\n\nTITLE: Configuring Trunk Version in TOML\nDESCRIPTION: Specifies the required Trunk version using Semantic Versioning constraint in the Trunk.toml file. This ensures compatibility with specific Trunk features.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/configuration.md#2025-04-19_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntrunk-version = \"^0.20.1\"\n```\n\n----------------------------------------\n\nTITLE: Running the Trunk Example with CLI Command\nDESCRIPTION: Command to start the Trunk development server with the browser automatically opening the application.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/examples/hooks/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntrunk serve --open\n```\n\n----------------------------------------\n\nTITLE: Running Trunk with Feature Flags\nDESCRIPTION: Command to start Trunk with specific Cargo features enabled, which will affect the build.rs output.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/examples/hooks/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntrunk --features a\n```\n\n----------------------------------------\n\nTITLE: Installing Trunk from GitHub repository using Cargo\nDESCRIPTION: This command installs Trunk directly from its GitHub repository, building the most recent commit from the main branch.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/getting-started/installation.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --git https://github.com/trunk-rs/trunk trunk\n```\n\n----------------------------------------\n\nTITLE: Running Development Version of Trunk Server\nDESCRIPTION: Starts a development version of the Trunk server using cargo run with custom configuration options.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/examples/behind-reverse-proxy/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --manifest-path=../../Cargo.toml -- serve --config ../vanilla/Trunk.toml --public-url /my-app --serve-base /\n```\n\n----------------------------------------\n\nTITLE: Inlining Content in Trunk\nDESCRIPTION: Configuration for inlining file content directly into the HTML. Supports various file types with appropriate wrapping based on content type.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/assets.md#2025-04-19_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link data-trunk rel=\"inline\" href=\"{path}\" />\n```\n\n----------------------------------------\n\nTITLE: Optimizing Dependencies in Cargo.toml\nDESCRIPTION: Configuration in Cargo.toml to optimize all dependencies even in debug builds. This can help solve recursion errors and improve performance.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/examples/wasm_threads/README.md#2025-04-19_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# in Cargo.toml\n# Optimize all dependencies even in debug builds:\n[profile.dev.package.\"*\"]\nopt-level = 2\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed TLS Certificates with OpenSSL\nDESCRIPTION: A shell command to create self-signed TLS certificates valid for 10 years (3650 days) using OpenSSL. The command generates both a private key and a certificate for the localhost domain.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/examples/yew-tls/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 \\\n    -subj \"/C=XX/CN=localhost\" \\\n    -keyout self_signed_certs/key.pem  -out self_signed_certs/cert.pem\n```\n\n----------------------------------------\n\nTITLE: Installing Trunk on NixOS\nDESCRIPTION: This command installs Trunk on NixOS using the Nix package manager.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/getting-started/installation.md#2025-04-19_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnix-env -i trunk\n```\n\n----------------------------------------\n\nTITLE: Integrating Tailwind CSS with Trunk\nDESCRIPTION: HTML link tag configuration for processing Tailwind CSS files, including options for inlining and minification control.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/assets/index.md#2025-04-19_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<link data-trunk rel=\"tailwind-css\" href=\"{path}\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Trunk from crates.io using Cargo\nDESCRIPTION: This command installs the latest release of Trunk from crates.io using Cargo, the Rust package manager.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/getting-started/installation.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --locked trunk\n```\n\n----------------------------------------\n\nTITLE: Managing Icon Assets in Trunk\nDESCRIPTION: Configuration for handling icon images. Trunk copies the specified icon to the distribution directory with cache control through content hashing.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/assets.md#2025-04-19_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link data-trunk rel=\"icon\" href=\"{path}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining WASM Library Entry Point\nDESCRIPTION: Implementation of the WebAssembly entry point using wasm_bindgen in the lib.rs file. The function can be asynchronous but it's not required.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/advanced/library.md#2025-04-19_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[wasm_bindgen(start)]\npub async fn run() {}\n```\n\n----------------------------------------\n\nTITLE: Including Icon Files in Trunk Projects\nDESCRIPTION: HTML link tag for copying icon images to the dist directory with optional integrity verification.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/assets/index.md#2025-04-19_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link data-trunk rel=\"icon\" href=\"{path}\" />\n```\n\n----------------------------------------\n\nTITLE: Running Trunk Application with Seed\nDESCRIPTION: Command to serve and open the Trunk application in a web browser. This command builds the WASM application and serves it, automatically opening it in the default browser.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/examples/seed/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntrunk serve --open\n```\n\n----------------------------------------\n\nTITLE: Copy File Resource Link\nDESCRIPTION: HTML link element for copying individual files to the dist directory without modification. Used for images and other static resources.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/assets.md#2025-04-19_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<link data-trunk rel=\"copy-file\" href=\"path/to/image\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing Trunk on NixOS\nDESCRIPTION: Command to install Trunk using the Nix package manager on NixOS.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/_index.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnix-env -i trunk\n```\n\n----------------------------------------\n\nTITLE: Running Trunk Server with Yew and Tailwind\nDESCRIPTION: Command to serve the Trunk project with Yew and Tailwind, opening it in the default browser.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/examples/yew-tailwindcss/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntrunk serve --open\n```\n\n----------------------------------------\n\nTITLE: Generating Configuration Schema with Cargo\nDESCRIPTION: Command to regenerate the configuration schema JSON file using Cargo run. This should be executed when making changes to the configuration.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -- config generate-schema schemas/config.json\n```\n\n----------------------------------------\n\nTITLE: Inlining Content with Trunk\nDESCRIPTION: HTML link tag for directly inlining file content into the HTML output, supporting various content types.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/assets/index.md#2025-04-19_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link data-trunk rel=\"inline\" href=\"{path}\" />\n```\n\n----------------------------------------\n\nTITLE: Generating Schema via Trunk CLI\nDESCRIPTION: Command to generate the JSON schema using Trunk's CLI without specifying an output path.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/configuration/schema.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntrunk config generate-schema\n```\n\n----------------------------------------\n\nTITLE: Managing CSS Files with Trunk\nDESCRIPTION: HTML link tag for handling CSS files, with options for controlling integrity checks and minification.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/assets/index.md#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link data-trunk rel=\"css\" href=\"{path}\" />\n```\n\n----------------------------------------\n\nTITLE: Generating Schema to File via Trunk CLI\nDESCRIPTION: Command to generate and save the JSON schema to a specified file path using Trunk's CLI.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/configuration/schema.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntrunk config generate-schema path/to/file\n```\n\n----------------------------------------\n\nTITLE: Copy Directory HTML Link\nDESCRIPTION: HTML link element for recursively copying a directory to the dist folder. Supports optional data-target-path attribute for specifying output location.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/assets.md#2025-04-19_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<link data-trunk rel=\"copy-dir\" href=\"path/to/images-dir\"/>\n```\n\n----------------------------------------\n\nTITLE: Referencing Schema in YAML Configuration\nDESCRIPTION: Shows how to reference the JSON schema in a YAML configuration file using the $schema property.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/configuration/schema.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n$schema: \"./schema.json\"\n```\n\n----------------------------------------\n\nTITLE: Installing Trunk on Fedora\nDESCRIPTION: This command installs Trunk on Fedora Linux distributions (version 40 and later) using the dnf package manager.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/getting-started/installation.md#2025-04-19_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf install trunk\n```\n\n----------------------------------------\n\nTITLE: Using Admonish Note Block for Trunk Image Handling\nDESCRIPTION: An admonish note block discussing the current state of image handling in Trunk and inviting contribution to discussions about improving the image resource management process.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/assets/index.md#2025-04-19_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n```admonish note\nAs Trunk continues to mature, we will find better ways to include images and other resources. Hashing content for cache control is great, we just need to find a nice pattern to work with images referenced in Rust components. Please contribute to the discussion over in [trunk#9](https://github.com/trunk-rs/trunk/issues/9)! See you there.\n```\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Entry Point\nDESCRIPTION: Basic HTML template that serves as the entry point for the WASM application.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/getting-started/project.md#2025-04-19_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\"/>\n  <title>Hello World</title>\n</head>\n<body>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Building Trunk with Custom SSL Backend\nDESCRIPTION: Command to build Trunk with native-tls SSL backend instead of the default rustls. Demonstrates how to configure SSL backend using cargo features.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --no-default-features -F update_check,native-tls\n```\n\n----------------------------------------\n\nTITLE: HTML template for Trunk application\nDESCRIPTION: A minimal HTML template that Trunk uses to drive asset building and bundling. It includes directives for SCSS styling and Rust WASM compilation.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/_index.md#2025-04-19_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <link data-trunk rel=\"scss\" href=\"path/to/index.scss\"/>\n    <link data-trunk rel=\"rust\"/>\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Updating OpenSSL Dependency in Cargo.toml\nDESCRIPTION: Diff showing how to update the OpenSSL dependency to use a specific Git repository and branch for Windows build support.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/CONTRIBUTING.md#2025-04-19_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- openssl = { version = \"0.10\", default-features = false, optional = true }\n+ openssl = { git = \"https://github.com/micolous/rust-openssl\", branch = \"windows-build\", default-features = false, optional = true }\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites for Trunk-rs Documentation Build (Shell)\nDESCRIPTION: This snippet shows the commands to install the required tools for building the Trunk-rs documentation book. It installs mdbook and mdbook-admonish using Cargo, and sets up mdbook-admonish in the current directory.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install mdbook --locked\ncargo install mdbook-admonish --locked\nmdbook-admonish install .\n```\n\n----------------------------------------\n\nTITLE: IntelliJ Schema Reference Example\nDESCRIPTION: Example showing how to reference the schema in IntelliJ-based IDEs using YAML configuration.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/configuration/schema.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n$schema: \"./schema.json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SASS/SCSS Assets in Trunk\nDESCRIPTION: Configuration for processing SASS/SCSS files using dart-sass. Options include inline styling and integrity settings.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/assets.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link data-trunk rel=\"sass\" href=\"{path}\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Trunk using cargo-binstall\nDESCRIPTION: Command to download and install a pre-built Trunk binary using the cargo-binstall tool.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/_index.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo binstall trunk\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom WASM Initializer in JavaScript\nDESCRIPTION: Implementation of a JavaScript initializer module that provides hooks into the WASM loading process, allowing custom handling of start, progress, completion, success, and failure events during WebAssembly initialization.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/advanced.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function myInitializer () {\n  return {\n    onStart: () => {\n      // called when the loading starts\n    },\n    onProgress: ({current, total}) => {\n      // the progress while loading, will be called periodically.\n      // \"current\" will contain the number of bytes of the WASM already loaded\n      // \"total\" will either contain the total number of bytes expected for the WASM, or if the server did not provide\n      //   the content-length header it will contain 0.\n    },\n    onComplete: () => {\n      // called when the initialization is complete (successfully or failed)\n    },\n    onSuccess: (wasm) => {\n      // called when the initialization is completed successfully, receives the `wasm` instance\n    },\n    onFailure: (error) => {\n      // called when the initialization is completed with an error, receives the `error`\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Serving Trunk-rs Documentation Book Locally (Shell)\nDESCRIPTION: This command starts a local server to view the Trunk-rs documentation book while editing. It uses mdbook to serve the content, allowing for real-time updates as changes are made.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmdbook serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS in Trunk\nDESCRIPTION: Configuration for processing Tailwind CSS using the official Tailwind CLI. Includes options for inlining, integrity, and configuration path.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/assets.md#2025-04-19_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<link data-trunk rel=\"tailwind-css\" href=\"{path}\" />\n```\n\n----------------------------------------\n\nTITLE: Installing wasm-bindgen manually for Apple M1 users\nDESCRIPTION: Command to manually install the wasm-bindgen CLI for Apple M1 users, since pre-built binaries may not be available.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/_index.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --locked wasm-bindgen-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Hooks in TOML\nDESCRIPTION: Specifies hooks for running tasks before, during, or after the build process in Trunk.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/configuration.md#2025-04-19_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[[hooks]]\nstage = \"post_build\"  # When to run hook, must be one of \"pre_build\", \"build\", \"post_build\"\ncommand = \"ls\"        # Command to run\ncommand_arguments = [] # Arguments to pass to command\n```\n\n----------------------------------------\n\nTITLE: Installing Trunk using Homebrew\nDESCRIPTION: Command to install Trunk using the Homebrew package manager on macOS or Linux.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/_index.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install trunk\n```\n\n----------------------------------------\n\nTITLE: Showing Trunk Tool Information with CLI\nDESCRIPTION: The 'trunk tools show' command displays information about the tools required by Trunk and the project, including which tools are expected and which are currently available on the system.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/commands.md#2025-04-19_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ntrunk tools show\n```\n\n----------------------------------------\n\nTITLE: Installing Trunk using Cargo\nDESCRIPTION: Command to install Trunk directly from its source code using Cargo. The --locked flag ensures version consistency.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/_index.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --locked trunk\n```\n\n----------------------------------------\n\nTITLE: VSCode Settings for Rust Analyzer\nDESCRIPTION: Configuration for VSCode to specify an explicit target for the workspace, solving issues with rust-analyzer when using the build-std flag.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/examples/wasm_threads/README.md#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n./.vscode/settings.json\n```\n\n----------------------------------------\n\nTITLE: Public URL Base Tag\nDESCRIPTION: HTML base tag for instructing Trunk to write the public URL to the HTML output. Useful for apps that need to know their base URL for routing.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/site/content/assets.md#2025-04-19_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<base data-trunk-public-url/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo.toml for WASM Library\nDESCRIPTION: Cargo configuration to enable both cdylib (WebAssembly) and rlib (Rust library) outputs for the project.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/advanced/library.md#2025-04-19_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[lib]\ncrate-type = [\"cdylib\", \"rlib\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Trunk using cargo-binstall\nDESCRIPTION: This command installs a pre-compiled binary of Trunk using cargo-binstall, which fetches the matching binary from GitHub releases.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/getting-started/installation.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo binstall trunk\n```\n\n----------------------------------------\n\nTITLE: Installing specific Trunk commit from GitHub using Cargo\nDESCRIPTION: This command allows installation of a specific commit of Trunk from its GitHub repository.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/getting-started/installation.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo install --git https://github.com/trunk-rs/trunk trunk --rev <commit>\n```\n\n----------------------------------------\n\nTITLE: Installing Trunk using Homebrew\nDESCRIPTION: This command installs Trunk using the Homebrew package manager for macOS.\nSOURCE: https://github.com/trunk-rs/trunk/blob/main/guide/src/getting-started/installation.md#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nbrew install trunk\n```"
  }
]