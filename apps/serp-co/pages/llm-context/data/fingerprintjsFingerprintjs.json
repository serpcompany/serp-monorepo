[
  {
    "owner": "fingerprintjs",
    "repo": "fingerprintjs",
    "content": "TITLE: Handling Errors in Entropy Sources\nDESCRIPTION: This snippet demonstrates best practices for error handling within an entropy source. It ensures expected errors are transformed into specific return values while allowing unexpected errors to propagate, ensuring robustness and clarity in error management.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#2025-04-19_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nasync function entropySource() {\n  try {\n    // `await` is necessary to catch asynchronous errors\n    return await doLongAction()\n  } catch (error) {\n    // WRONG:\n    return 'error'\n\n    // Correct:\n    if (error.message = 'Foo bar') {\n      return 'bot'\n    }\n    if (/boo/.test(error.message)) {\n      return 'ie'\n    }\n    throw error // Unexpected error\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using FingerprintJS in HTML\nDESCRIPTION: This snippet demonstrates how to initialize the FingerprintJS agent and retrieve a visitor identifier. It includes loading the library from a CDN and using promises to handle the asynchronous operations.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/readme.md#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  // Initialize the agent at application startup.\n  // If you're using an ad blocker or Brave/Firefox, this import will not work.\n  // Please use the NPM package instead: https://t.ly/ORyXk\n  const fpPromise = import('https://openfpcdn.io/fingerprintjs/v4')\n    .then(FingerprintJS => FingerprintJS.load())\n\n  // Get the visitor identifier when you need it.\n  fpPromise\n    .then(fp => fp.get())\n    .then(result => {\n      // This is the visitor identifier:\n      const visitorId = result.visitorId\n      console.log(visitorId)\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Entropy Source with Load and Get Phases\nDESCRIPTION: This snippet defines an asynchronous entropy source function that performs a long action during the 'load' phase and returns a function for the 'get' phase which retrieves final data based on pre-calculated results. The design ensures that the load phase is efficient while allowing the get phase to be executed quickly and without side effects.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// The function below represents the \"load\" phase\nasync function entropySource() {\n  // The \"load\" phase starts here\n  const preData = await doLongAction()\n\n  // The \"load\" phase ends when the `entropySource` function returns\n  // The function below represents the \"get\" phase\n  return async () => {\n    // The \"get\" phase starts here\n    const finalData = await finalizeData(preData)\n    return finalData\n    // The \"get\" phase ends then this returned function returns\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing FingerprintJS in Browser ECMAScript Module\nDESCRIPTION: Demonstrates how to load and use FingerprintJS as an ECMAScript module in a browser environment. It initializes the agent and retrieves the visitor identifier.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/api.md#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  // Initialize the agent at application startup.\n  // You can also use https://openfpcdn.io/fingerprintjs/v4/esm.min.js\n  const fpPromise = import('https://openfpcdn.io/fingerprintjs/v4')\n    .then(FingerprintJS => FingerprintJS.load())\n\n  // Get the visitor identifier when you need it.\n  fpPromise\n    .then(fp => fp.get())\n    .then(result => console.log(result.visitorId))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing FingerprintJS in TypeScript\nDESCRIPTION: Example of how to import the FingerprintJS library in a TypeScript file.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/typescript_support.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport FingerprintJS from '@fingerprintjs/fingerprintjs'\n```\n\n----------------------------------------\n\nTITLE: Excluding and Adding Components in FingerprintJS (JavaScript)\nDESCRIPTION: Demonstrates how to both exclude built-in components and add custom components to the FingerprintJS result, then create a visitor identifier using the modified list of components.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/extending.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\nconst result = await fp.get()\n\n// The `languages` and `audio` components will be excluded\nconst { languages, audio, ...components } = result.components\n\n// New components will be added: `foo` and `bar`\nconst extendedComponents = {\n  ...components,\n  foo: { value: await getFooComponent() },\n  bar: { value: await getBarComponent() },\n}\n\n// Optionally, you can make a visitor identifier from your custom list of components\nconst visitorId = FingerprintJS.hashComponents(extendedComponents)\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Sending Visitor Identifiers from Multiple FingerprintJS Versions\nDESCRIPTION: This snippet demonstrates how to get visitor identifiers from both old and new versions of FingerprintJS and send them to a server. It uses Promise.all to handle asynchronous operations efficiently.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/version_policy.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPromise.all([\n  oldFpPromise.then(fp => fp.get()),\n  newFpPromise.then(fp => fp.get()),\n]).then(([oldResult, newResult]) => {\n  // Handle both the results. For example, send to your server.\n  return fetch(\n    '/visitor'\n      + `?fingerprintV4_0=${encodeURIComponent(oldResult.visitorId)}`\n      + `&fingerprintV4_1=${encodeURIComponent(newResult.visitorId)}`\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Code Practices in FingerprintJS\nDESCRIPTION: JavaScript code snippets illustrating good and bad practices for writing code in the FingerprintJS project, focusing on tree-shaking and expression evaluation.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Ok. Will be removed if not used.\nfunction do() {\n  // Any expression inside a function is ok\n}\n\n// Ok. Will be removed if not used.\nconst var1 = { prop: 'foo' }\n\n// No! A function is called, the function call won't be removed.\nconst var2 = Object.keys(var1)\n\n// No! An object property is accessed, the expression won't be removed because the property may be a getter.\nconst var3 = var1.prop\n\n// No! Will be converted to `const var4 = {}; var4.bar = 'foo'`.\nconst var4 = { [Enum.Member]: 'foo' }\n```\n\n----------------------------------------\n\nTITLE: Using FingerprintJS in a Module Environment\nDESCRIPTION: Demonstrates how to import and use FingerprintJS in a module environment, such as with Webpack or Rollup. It shows initialization and asynchronous usage of the library.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/api.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport FingerprintJS from '@fingerprintjs/fingerprintjs'\n\n// Initialize an agent at application startup.\nconst fpPromise = FingerprintJS.load()\n\n;(async () => {\n  // Get the visitor identifier when you need it.\n  const fp = await fpPromise\n  const result = await fp.get()\n  console.log(result.visitorId)\n})()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Components in FingerprintJS (JavaScript)\nDESCRIPTION: Shows how to add custom components ('foo' and 'bar') to the FingerprintJS result and create a visitor identifier using the extended list of components.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/extending.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\nconst result = await fp.get()\n\n// New components will be added: `foo` and `bar`.\n// You should implement the `getFooComponent` and `getBarComponent` functions by yourself,\n// they can return any value.\nconst components = {\n  ...result.components,\n  foo: { value: await getFooComponent() },\n  bar: { value: await getBarComponent() },\n}\n\n// Optionally, you can make a visitor identifier from your custom list of components\nconst visitorId = FingerprintJS.hashComponents(components)\n```\n\n----------------------------------------\n\nTITLE: Excluding Components in FingerprintJS (JavaScript)\nDESCRIPTION: Demonstrates how to exclude specific built-in components ('languages' and 'audio') from the FingerprintJS result and optionally create a visitor identifier using the remaining components.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/extending.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\nconst result = await fp.get()\n\n// The `languages` and `audio` components will be excluded\nconst { languages, audio, ...components } = result.components\n\n// Optionally, you can make a visitor identifier from your custom list of components\nconst visitorId = FingerprintJS.hashComponents(components)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dual Version Strategy for FingerprintJS\nDESCRIPTION: Demonstrates how to use both v2 and v4 simultaneously to maintain compatibility during migration. This approach allows for gradual transition without losing existing identifiers.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/migration/v2_v4.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPromise.all([\n  new Promise(resolve => {\n    requestIdleCallback(() => {\n      Fingerprint2.get(resolve)\n    })\n  }),\n  FingerprintJS.load().then(fp => fp.get())\n]).then(([v2Result, v4Result]) => {\n  // Handle both the results. For example, send to your server.\n  const v2VisitorId = Fingerprint2.x64hash128(\n    v2Result.map(component => component.value).join(''),\n    31\n  )\n  const v4VisitorId = v4Result.visitorId\n  return fetch(\n    '/visitor'\n      + `?fingerprintV2=${encodeURIComponent(v2VisitorId)}`\n      + `&fingerprintV4=${encodeURIComponent(v4VisitorId)}`\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Versions of FingerprintJS\nDESCRIPTION: This code shows how to load both the current and a new version of FingerprintJS simultaneously using dynamic imports. This approach allows for a smooth transition between versions.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/version_policy.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst oldFpPromise = import('https://openfpcdn.io/fingerprintjs/v4.0')\n  .then(FingerprintJS => FingerprintJS.load())\n\nconst newFpPromise = import('https://openfpcdn.io/fingerprintjs/v4.1')\n  .then(FingerprintJS => FingerprintJS.load())\n```\n\n----------------------------------------\n\nTITLE: Comparing FingerprintJS Visitor Identifiers Across Versions\nDESCRIPTION: This snippet demonstrates how to compare visitor identifiers from different versions of FingerprintJS by checking if the major and minor version numbers match.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/version_policy.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (\n  result1.version.split('.', 2).join('.') ===\n  result2.version.split('.', 2).join('.')\n) {\n  return result1.visitorId === result2.visitorId ? 'same' : 'different'\n} else {\n  return 'unknown'\n}\n```\n\n----------------------------------------\n\nTITLE: Handling FingerprintJS v4 Result\nDESCRIPTION: Shows how to extract the visitor ID from the result object in v4, which is different from v2. V4 provides a complete visitor identifier without the need for manual derivation.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/migration/v2_v4.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  fp.get().then(result => {\n-   const values = result.map(function (component) { return component.value })\n-   const visitorId = Fingerprint2.x64hash128(values.join(''), 31)\n+   const visitorId = result.visitorId\n  })\n```\n\n----------------------------------------\n\nTITLE: Dual Version Fingerprint Collection\nDESCRIPTION: JavaScript code demonstrating how to collect fingerprints from both v1 and v4 simultaneously during migration period.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/migration/v1_v4.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPromise.all([\n  new Promise(resolve => {\n    new Fingerprint2().get((visitorId, components) => {\n      resolve({ visitorId, components })\n    })\n  }),\n  FingerprintJS.load().then(fp => fp.get())\n]).then(([v1Result, v4Result]) => {\n  // Handle both the results. For example, send to your server.\n  return fetch(\n    '/visitor'\n      + `?fingerprintV1=${encodeURIComponent(v1Result.visitorId)}`\n      + `&fingerprintV4=${encodeURIComponent(v4Result.visitorId)}`\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Updating FingerprintJS Initialization Code\nDESCRIPTION: Code diff showing changes required to initialize FingerprintJS and handle results when migrating from v1 to v4.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/migration/v1_v4.md#2025-04-19_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- const fp = new Fingerprint2()\n- fp.get(function(visitorId, components) {\n+ const fpPromise = FingerprintJS.load()\n+ fpPromise\n+   .then(fp => fp.get()){\n+   .then(({ visitorId, components }) => {\n      // Handle the result\n    })\n```\n\n----------------------------------------\n\nTITLE: Stabilizing Canvas Entropy Source in FingerprintJS (JavaScript)\nDESCRIPTION: Demonstrates how to exclude the text image from the canvas entropy source to achieve more stability in FingerprintJS, while still using the geometry-only image.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/extending.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\nlet { components } = await fp.get()\n\nif ('value' in components.canvas) {\n  components.canvas.value.text = ''\n}\n\n// Optionally, you can make a visitor identifier from your custom list of components\nconst visitorId = FingerprintJS.hashComponents(components)\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Action in Load Phase\nDESCRIPTION: This snippet highlights how to implement an entropy source that performs necessary work during the load phase while also starting an optional background action without blocking the execution. This allows for responsiveness while still gathering additional data.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nasync function entropySource() {\n  // Wait for the required data to be calculated during the \"load\" phase\n  let result = await doLongAction()\n\n  // Start watching optional data in the background (this function doesn't block the execution)\n  watchNextResults((newResult) => {\n    result = newResult\n  })\n\n  // Then complete the \"load\" phase by returning a function.\n  // `watchNextResults` will continue working until the \"get\" phase starts.\n  return () => {\n    return result\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side SQL Operations for Managing FingerprintJS Visitor Identifiers\nDESCRIPTION: This SQL snippet shows how to handle visitor identifiers from multiple FingerprintJS versions on the server side. It includes queries for retrieving visitors, updating identifiers, and inserting new visitors.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/version_policy.md#2025-04-19_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- Getting the visitor\nSELECT * FROM visitors\nWHERE\n  fingerprintV4_0 = :fingerprintV4_0 OR\n  fingerprintV4_1 = :fingerprintV4_1;\n\n-- Update the visitor identifier\n-- to switch to the new fingerprint version\nUPDATE visitors\nSET fingerprintV4_1 = :fingerprintV4_1\nWHERE fingerprintV4_0 = :fingerprintV4_0;\n\n-- Saving a new visitor\nINSERT INTO visitors (..., fingerprintV4_1)\nVALUES (..., :fingerprintV4_1);\n```\n\n----------------------------------------\n\nTITLE: Initializing FingerprintJS v4\nDESCRIPTION: Demonstrates the change in initialization process from v2 to v4. V4 uses a promise-based approach with FingerprintJS.load() instead of manually calling requestIdleCallback or setTimeout.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/migration/v2_v4.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n- requestIdleCallback(() => {\n-   Fingerprint2.get(result => {\n+ const fpPromise = FingerprintJS.load()\n+ fpPromise\n+   .then(fp => fp.get()){\n+   .then(result => {\n      // Handle the result\n    })\n- })\n```\n\n----------------------------------------\n\nTITLE: Comparing FingerprintJS v2 and v4 Result Formats\nDESCRIPTION: Illustrates the difference in result format between v2 and v4. V4 provides a more structured object with a visitorId and components, while v2 returned an array of key-value pairs.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/migration/v2_v4.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await fp.get()\nconsole.log(result)\n\n- [\n-   { key: 'ordinaryComponent', value: 'Some value' },\n-   { key: 'componentWithError', value: 'error' },\n-   { key: 'notAvailableComponent', value: 'not available' },\n-   { key: 'excludedComponent', value: 'excluded' },\n- ],\n+ {\n+   visitorId: 'aStringWithAnIdentifier',\n+   components: {\n+     ordinaryComponent: { value: 'some value', duration: 4 },\n+     componentWithError: { error: { message: 'This is the error object' }, duration: 2 },\n+     notAvailableComponent: { value: undefined, duration: 1 },\n+     excludedComponent: { value: 'Exclusion is not supported', duration: 10 },\n+   }\n+ }\n```\n\n----------------------------------------\n\nTITLE: Using FingerprintJS with CommonJS Syntax\nDESCRIPTION: Shows how to use FingerprintJS with CommonJS syntax, which is considered outdated but still supported. It demonstrates initialization and usage of the library.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/api.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst FingerprintJS = require('@fingerprintjs/fingerprintjs')\n\n// Initialize the agent at application startup.\nconst fpPromise = FingerprintJS.load()\n\n// Get the visitor identifier when you need it.\nfpPromise\n  .then(fp => fp.get())\n  .then(result => console.log(result.visitorId))\n```\n\n----------------------------------------\n\nTITLE: Updating Error Handling Syntax\nDESCRIPTION: Shows the change in error handling syntax for component errors, moving from direct error property check to using 'in' operator.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/migration/v3_v4.md#2025-04-19_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- if (component.error) {\n+ if ('error' in component) {\n    console.log('Unexpected error in the component', component.error)\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Entropy Source Without Get Phase\nDESCRIPTION: This snippet demonstrates how to create an entropy source where the get phase is omitted, directly returning the final data after the load phase. This is useful for cases where the output does not change after the load phase, streamlining the process.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nasync function entropySource() {\n  const finalData = await doLongAction()\n\n  // If the source's returned value is not a function, it's considered an entropy component\n  return finalData // Equivalent to: return () => finalData\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Entropy Source without Asynchronous Phases\nDESCRIPTION: This snippet shows how to implement a synchronous version of an entropy source where both the load and get functionalities run synchronously, not requiring any asynchronous handling. This can simplify the design when the actions involved are straightforward and do not require waiting on promises.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction entropySource() {\n  const preData = doLongSynchronousAction()\n\n  return () => {\n    const finalData = finalizeDataSynchronously(preData)\n    return finalData\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating FingerprintJS with UMD\nDESCRIPTION: Demonstrates how to use FingerprintJS with Universal Module Definition (UMD). This method is suitable for environments that support UMD module loading.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/api.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\n  ['https://openfpcdn.io/fingerprintjs/v4/umd.min.js'],\n  FingerprintJS => {\n    // Initialize the agent at application startup.\n    const fpPromise = FingerprintJS.load()\n\n    // Get the visitor identifier when you need it.\n    fpPromise\n      .then(fp => fp.get())\n      .then(result => console.log(result.visitorId))\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Loading FingerprintJS with Browser Script Tag\nDESCRIPTION: Shows how to include FingerprintJS using a script tag in HTML. This method is synchronous and may pause other scripts during loading, so it's not recommended for production use.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/api.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Note that we use iife.min.js -->\n<script src=\"https://openfpcdn.io/fingerprintjs/v4/iife.min.js\"></script>\n<script>\n  // Initialize the agent at application startup.\n  var fpPromise = FingerprintJS.load()\n\n  // Analyze the visitor when necessary.\n  fpPromise\n    .then(fp => fp.get())\n    .then(result => console.log(result.visitorId))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating Database for FingerprintJS v4 Migration\nDESCRIPTION: SQL queries to handle both v2 and v4 identifiers during the migration process. Includes selecting visitors, updating existing records, and inserting new visitors with v4 identifiers.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/migration/v2_v4.md#2025-04-19_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- Getting the visitor\nSELECT * FROM visitors\nWHERE\n  fingerprintV2 = :fingerprintV2 OR\n  fingerprintV4 = :fingerprintV4;\n\n-- Update the visitor identifier\n-- to switch to the fingerprint version 4\nUPDATE visitors\nSET fingerprintV4 = :fingerprintV4\nWHERE fingerprintV2 = :fingerprintV2;\n\n-- Saving a new visitor\nINSERT INTO visitors (..., fingerprintV4)\nVALUES (..., :fingerprintV4);\n```\n\n----------------------------------------\n\nTITLE: SQL Database Migration Queries\nDESCRIPTION: SQL queries for handling both v1 and v4 fingerprints during migration, including visitor lookup and updating fingerprint versions.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/migration/v1_v4.md#2025-04-19_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- Getting the visitor\nSELECT * FROM visitors\nWHERE\n  fingerprintV1 = :fingerprintV1 OR\n  fingerprintV4 = :fingerprintV4;\n\n-- Update the visitor identifier\n-- to switch to the fingerprint version 4\nUPDATE visitors\nSET fingerprintV4 = :fingerprintV4\nWHERE fingerprintV1 = :fingerprintV1;\n\n-- Saving a new visitor\nINSERT INTO visitors (..., fingerprintV4)\nVALUES (..., :fingerprintV4);\n```\n\n----------------------------------------\n\nTITLE: Error Object Structure Change\nDESCRIPTION: Demonstrates the difference in error object structure between v3 and v4 for component errors.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/migration/v3_v4.md#2025-04-19_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nconst result = {\n  visitorId: '...',\n  components: {\n    failedComponent: {\n-     error: { message: '' },\n+     error: '',\n      duration: 10,\n    },\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Components for Debugging in FingerprintJS (JavaScript)\nDESCRIPTION: Shows how to format a custom list of components into a human-friendly text for debugging purposes using the componentsToDebugString method.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/extending.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\nconst debugOutput = document.querySelector('pre')\ndebugOutput.textContent = FingerprintJS.componentsToDebugString(components)\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta for macOS BrowserStack Testing\nDESCRIPTION: Command to install Rosetta on macOS to resolve potential issues when running BrowserStack tests.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsoftwareupdate --install-rosetta\n```\n\n----------------------------------------\n\nTITLE: Inserting Filter Code into Source File (Bash/TypeScript)\nDESCRIPTION: This command runs a TypeScript script to insert the unique selectors into the 'src/sources/dom_blockers.ts' file, updating the entropy sources with the latest filter data.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/content_blockers.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./node_modules/.bin/ts-node ./resources/content_blocking/insert_filter_code.ts\n```\n\n----------------------------------------\n\nTITLE: Generating Unique Filter Selectors (Bash/TypeScript)\nDESCRIPTION: This command runs a TypeScript script to generate a JSON file containing unique blocked selectors for each filter. The output is used to update the entropy sources.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/content_blockers.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./node_modules/.bin/ts-node ./resources/content_blocking/get_unique_filter_selectors.ts\n```\n\n----------------------------------------\n\nTITLE: Generating Selectors Tester HTML (Bash/TypeScript)\nDESCRIPTION: This command creates an HTML file for testing CSS selectors blocked by various content filters. It uses TypeScript to compile and run the script that generates the tester.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/content_blockers.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n./node_modules/.bin/ts-node --compiler-options '{\"esModuleInterop\": true}' ./resources/content_blocking/make_selectors_tester.ts\n```\n\n----------------------------------------\n\nTITLE: Installing FingerprintJS v4 via NPM or Yarn\nDESCRIPTION: Commands to install the latest version of FingerprintJS using NPM or Yarn package managers. Also includes a command to remove the now unnecessary type declaration package.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/migration/v2_v4.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @fingerprintjs/fingerprintjs\n# or\nyarn add @fingerprintjs/fingerprintjs\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm remove @types/fingerprintjs__fingerprintjs\n# or\nyarn remove @types/fingerprintjs__fingerprintjs\n```\n\n----------------------------------------\n\nTITLE: Installing FingerprintJS via NPM or Yarn\nDESCRIPTION: Shows the command to install FingerprintJS using NPM or Yarn package managers.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/api.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install the package first:\nnpm i @fingerprintjs/fingerprintjs\n# or\nyarn add @fingerprintjs/fingerprintjs\n```\n\n----------------------------------------\n\nTITLE: Installing FingerprintJS using npm or yarn\nDESCRIPTION: Commands to install the FingerprintJS library using either npm or yarn package managers.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/typescript_support.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @fingerprintjs/fingerprintjs\n# or\nyarn add @fingerprintjs/fingerprintjs\n```\n\n----------------------------------------\n\nTITLE: Installing FingerprintJS v4 via NPM/Yarn\nDESCRIPTION: Commands to remove the old FingerprintJS v2 package and install the new v4 package using NPM or Yarn package managers.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/migration/v1_v4.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm remove fingerprintjs2\nnpm install @fingerprintjs/fingerprintjs\n# or\nyarn remove fingerprintjs2\nyarn add @fingerprintjs/fingerprintjs\n```\n\n----------------------------------------\n\nTITLE: Setting up FingerprintJS Development Environment\nDESCRIPTION: Commands to clone the FingerprintJS repository and install dependencies using Git, Node.js, and Yarn.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/fingerprintjs/fingerprintjs.git\ncd fingerprintjs\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Starting FingerprintJS Development Playground\nDESCRIPTION: Command to start a local development playground for FingerprintJS, with an option to specify a custom port.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn playground:start # Add '--port 8765' to change the server port\n```\n\n----------------------------------------\n\nTITLE: Checking FingerprintJS Server-Side Rendering Compatibility\nDESCRIPTION: Command to verify that the FingerprintJS package is compatible with server-side rendering.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn check:ssr\n```\n\n----------------------------------------\n\nTITLE: Installing via NPM/Yarn\nDESCRIPTION: Commands to install or update FingerprintJS package using NPM or Yarn package managers.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/migration/v3_v4.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @fingerprintjs/fingerprintjs\n# or\nyarn add @fingerprintjs/fingerprintjs\n```\n\n----------------------------------------\n\nTITLE: Updating CDN Installation URL\nDESCRIPTION: Shows the change in CDN URL from version 3 to version 4 of FingerprintJS.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/migration/v3_v4.md#2025-04-19_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- https://openfpcdn.io/fingerprintjs/v3/iife.min.js\n+ https://openfpcdn.io/fingerprintjs/v4/iife.min.js\n```\n\n----------------------------------------\n\nTITLE: Generating FingerprintJS License Header with Template Variables\nDESCRIPTION: A template string that generates the license header for FingerprintJS releases. Uses template variables to inject the package version, current year, and license type dynamically.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/resources/license_banner.txt#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFingerprintJS v<%= pkg.version %> - Copyright (c) FingerprintJS, Inc, <%= new Date().getFullYear() %> (https://fingerprint.com)\n\nLicensed under <%= data.license %>\n```\n\n----------------------------------------\n\nTITLE: Importing FingerprintJS without TypeScript types\nDESCRIPTION: Alternative import statement to use FingerprintJS without its TypeScript types, which can resolve certain TypeScript errors.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/typescript_support.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport ... from '@fingerprintjs/fingerprintjs/dist/fp.esm'\n```\n\n----------------------------------------\n\nTITLE: Declaring FingerprintJS module without types\nDESCRIPTION: Declaration to add in a .d.ts file when using FingerprintJS without its TypeScript types, preventing TypeScript errors.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/typescript_support.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@fingerprintjs/fingerprintjs/dist/fp.esm'\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript to version 5.1 or newer\nDESCRIPTION: Command to update the TypeScript package to version 5.1 or newer using npm or yarn, which can resolve compatibility issues.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/typescript_support.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i typescript@^5.1\n# or\nyarn add typescript@^5.1\n```\n\n----------------------------------------\n\nTITLE: Removing TypeScript Declarations for FingerprintJS\nDESCRIPTION: Commands to remove the separate type declarations package which is no longer needed in v4 as types are included in the main package.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/docs/migration/v1_v4.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm remove @types/fingerprintjs2\n# or\nyarn remove @types/fingerprintjs2\n```\n\n----------------------------------------\n\nTITLE: Running FingerprintJS Tests Locally\nDESCRIPTION: Commands to run FingerprintJS tests in local browsers using Karma, specifically for Chrome and Firefox.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:local --browsers ChromeHeadless\n# or to run in Firefox\nyarn test:local --browsers FirefoxHeadless\n# or to run in both\nyarn test:local\n```\n\n----------------------------------------\n\nTITLE: Running FingerprintJS Tests on BrowserStack\nDESCRIPTION: Command to run FingerprintJS tests on BrowserStack, requiring a BrowserStack username and access key.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# For Linux, macOS and WSL (Linux on Windows)\nBROWSERSTACK_USERNAME=your-username BROWSERSTACK_ACCESS_KEY=your-key yarn test:browserstack\n```\n\n----------------------------------------\n\nTITLE: Checking and Fixing Code Style in FingerprintJS\nDESCRIPTION: Commands to check and fix code style using ESLint and Prettier in the FingerprintJS project.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\nyarn lint:fix\n```\n\n----------------------------------------\n\nTITLE: Checking FingerprintJS TypeScript Declarations\nDESCRIPTION: Command to check the distribution TypeScript declarations in the FingerprintJS project.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn check:dts\n```\n\n----------------------------------------\n\nTITLE: Building FingerprintJS Distribution Files\nDESCRIPTION: Command to build the distribution files of FingerprintJS that can be used directly in a browser, which will be saved in the 'dist' directory.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Building FingerprintJS Playground Distribution\nDESCRIPTION: Command to build the static webpage files for the FingerprintJS playground, which will be saved in the 'playground/dist' directory.\nSOURCE: https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn playground:build\n```"
  }
]