[
  {
    "owner": "fabian-hiller",
    "repo": "modular-forms",
    "content": "TITLE: Handling Form Submission with onSubmit in Solid\nDESCRIPTION: Demonstrates how to define a `SubmitHandler` function and pass it to the `onSubmit` prop of the `Form` component in Solid. This function receives the form values and the event object, allowing client-side processing upon form submission. It utilizes `createForm` from `@modular-forms/solid` to initialize the form.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/handle-submission.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { createForm, SubmitHandler } from '@modular-forms/solid';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = createForm<LoginForm>();\n\n  const handleSubmit: SubmitHandler<LoginForm> = (values, event) => {\n    // Runs on client\n  };\n\n  return <Form onSubmit={handleSubmit}>…</Form>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Form Types with TypeScript for Modular Forms\nDESCRIPTION: Demonstrates defining a TypeScript type `SpecialForm` for Modular Forms, handling various data types including numbers, nested objects, arrays, and files. Includes separate code examples tailored for Solid/Preact/React (using `File`) and Qwik (using `NoSerialize<Blob>` and optional fields) environments, reflecting framework-specific requirements.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/define-your-form.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SpecialForm = {\n  number: number;\n  range: number;\n  checkbox: {\n    array: string[];\n    boolean: boolean;\n  };\n  select: {\n    array: string[];\n    string: string;\n  };\n  file: {\n    list: File[];\n    item: File;\n  };\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype SpecialForm = {\n  number: number;\n  range: number;\n  checkbox: {\n    array: string[];\n    boolean: boolean;\n  };\n  select: {\n    array: string[];\n    string?: string;\n  };\n  file: {\n    list: NoSerialize<Blob>[];\n    item?: NoSerialize<Blob>;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Form Values with routeLoader$ in Qwik (TSX)\nDESCRIPTION: Demonstrates defining initial values for a Qwik form using `routeLoader$`. This pattern is recommended for fetching dynamic data server-side, populating the form state based on the `LoginForm` type. It utilizes `@builder.io/qwik-city` for `routeLoader$` and `@modular-forms/qwik` for `InitialValues`.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/create-your-form.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { routeLoader$ } from '@builder.io/qwik-city';\nimport { type InitialValues } from '@modular-forms/qwik';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport const useFormLoader = routeLoader$<InitialValues<LoginForm>>(() => {\n  return {\n    email: '',\n    password: '',\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Inferring Form Types from Valibot Schemas in Modular Forms\nDESCRIPTION: Illustrates inferring a TypeScript form type (`SpecialForm`) from a Valibot schema (`SpecialSchema`) using `v.InferInput`. Provides distinct examples for Solid/Preact/React (using `File` and a custom `isFile` validator) and Qwik (using `NoSerialize<Blob>`, a custom `isBlob` validator, and optional fields). Requires the Valibot validation library and framework-specific considerations for file types.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/define-your-form.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as v from 'valibot';\n\nconst isFile = (input: unknown) => input instanceof File;\n\nconst SpecialSchema = v.object({\n  number: v.number(),\n  range: v.number(),\n  checkbox: v.object({\n    array: v.array(v.string()),\n    boolean: v.boolean(),\n  }),\n  select: v.object({\n    array: v.array(v.string()),\n    string: v.string(),\n  }),\n  file: v.object({\n    list: v.array(v.custom<File>(isFile)),\n    item: v.custom<File>(isFile),\n  }),\n});\n\ntype SpecialForm = v.InferInput<typeof SpecialSchema>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NoSerialize } from '@builder.io/qwik';\nimport * as v from 'valibot';\n\nconst isBlob = (input: unknown) => input instanceof Blob;\n\nconst SpecialSchema = v.object({\n  number: v.number(),\n  range: v.number(),\n  checkbox: v.object({\n    array: v.array(v.string()),\n    boolean: v.boolean(),\n  }),\n  select: v.object({\n    array: v.array(v.string()),\n    string: v.optional(v.string()),\n  }),\n  file: v.object({\n    list: v.array(v.custom<NoSerialize<Blob>>(isBlob)),\n    item: v.optional(v.custom<NoSerialize<Blob>>(isBlob)),\n  }),\n});\n\ntype SpecialForm = v.InferInput<typeof SpecialSchema>;\n```\n\n----------------------------------------\n\nTITLE: Adding Fields Using Modular Forms in Solid - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Modular Forms library in Solid. It imports the createForm function and defines a LoginForm type for strong typing. The example sets up a form with two Field components—email and password—where each field utilizes a render prop function to pass state and input properties. The expected inputs are user-provided credentials, and the outputs are typed, validated form submissions. Requires '@modular-forms/solid' and TypeScript, and should be run within a Solid application.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/add-fields-to-form.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createForm } from '@modular-forms/solid';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = createForm<LoginForm>();\n\n  return (\n    <Form>\n      <Field name=\"email\">\n        {(field, props) => <input {...props} type=\"email\" />}\n      </Field>\n      <Field name=\"password\">\n        {(field, props) => <input {...props} type=\"password\" />}\n      </Field>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Email Validation Function\nDESCRIPTION: Creates a validation function that validates an email address. Takes an error message parameter and returns a validation function that works with MaybeValue<string> type.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/email.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = email(error);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  solidPreactOrReact: {\n    validate: {\n      type: {\n        type: 'function',\n        params: [\n          {\n            name: 'value',\n            type: {\n              type: 'custom',\n              name: 'MaybeValue',\n              href: '../MaybeValue',\n              generics: ['string'],\n            },\n          },\n        ],\n        return: 'string',\n      },\n    },\n  },\n  qwik: {\n    validate: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'function',\n            params: [\n              {\n                name: 'value',\n                type: {\n                  type: 'custom',\n                  name: 'MaybeValue',\n                  href: '../MaybeValue',\n                  generics: ['string'],\n                },\n              },\n            ],\n            return: 'string',\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Login Form Type with TypeScript\nDESCRIPTION: Provides a basic example `LoginForm` type definition using TypeScript. This simple type, containing required `email` and `password` string fields, serves as a standard example for demonstrating concepts in subsequent Modular Forms guides.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/define-your-form.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Validating a Login Form with Valibot in Solid (TypeScript)\nDESCRIPTION: This snippet demonstrates a login form in Solid using Modular Forms and Valibot for schema validation. Dependencies include '@modular-forms/solid' and 'valibot'. The schema validates the email and password fields: email must be present and well-formed, and the password must have at least 8 characters. The 'validate' option ensures the entire form is checked, and errors are displayed per field. The form expects 'email' and 'password' as strings and shows validation messages inline.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/validate-your-fields.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createForm, valiForm } from '@modular-forms/solid';\nimport * as v from 'valibot';\n\nconst LoginSchema = v.object({\n  email: v.pipe(\n    v.string(),\n    v.nonEmpty('Please enter your email.'),\n    v.email('The email address is badly formatted.')\n  ),\n  password: v.pipe(\n    v.string(),\n    v.nonEmpty('Please enter your password.'),\n    v.minLength(8, 'You password must have 8 characters or more.')\n  ),\n});\n\ntype LoginForm = v.InferInput<typeof LoginSchema>;\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = createForm<LoginForm>({\n    validate: valiForm(LoginSchema),\n  });\n\n  return (\n    <Form>\n      <Field name=\"email\">\n        {(field, props) => (\n          <>\n            <input {...props} type=\"email\" required />\n            {field.error && <div>{field.error}</div>}\n          </>\n        )}\n      </Field>\n      <Field name=\"password\">\n        {(field, props) => (\n          <>\n            <input {...props} type=\"password\" required />\n            {field.error && <div>{field.error}</div>}\n          </>\n        )}\n      </Field>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing General Form Errors - Solid with Modular Forms - TypeScript\nDESCRIPTION: This snippet demonstrates handling general form errors in a Solid application's form using Modular Forms. It imports createForm, FormError, and SubmitHandler, sets up a login form, and throws a FormError instance within the onSubmit event if an error occurs. The response message state is displayed to the user. Dependencies: @modular-forms/solid, TypeScript. Expects login data as input and outputs form state changes with error messages.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/throw-form-errors.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createForm, FormError, SubmitHandler } from '@modular-forms/solid';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = createForm<LoginForm>();\n\n  const handleSubmit: SubmitHandler<LoginForm> = (values, event) => {\n    if (error) {\n      throw new FormError<LoginForm>('An error has occurred.');\n    }\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <div>…</div>\n      <div>{loginForm.response.message}</div>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using valiForm to Create a Validator in TypeScript\nDESCRIPTION: Demonstrates how to use the `valiForm` function by passing a Valibot schema (`schema`) to generate a validation function (`validate`). This function can then be used to validate form field values according to the provided schema.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/valiForm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst validate = valiForm(schema);\n```\n\n----------------------------------------\n\nTITLE: Validating Login Form Fields with Modular Forms in Solid\nDESCRIPTION: Demonstrates implementing field validation in a Solid application using `@modular-forms/solid`. It utilizes the `createForm` hook and applies `required`, `email`, and `minLength` validators to email and password fields via the `validate` prop on the `Field` component. Errors are displayed conditionally using the field state provided by the render function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/validate-your-fields.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createForm, email, minLength, required } from '@modular-forms/solid';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = createForm<LoginForm>();\n\n  return (\n    <Form>\n      <Field\n        name=\"email\"\n        validate={[\n          required('Please enter your email.'),\n          email('The email address is badly formatted.'),\n        ]}\n      >\n        {(field, props) => (\n          <>\n            <input {...props} type=\"email\" required />\n            {field.error && <div>{field.error}</div>}\n          </>\n        )}\n      </Field>\n      <Field\n        name=\"password\"\n        validate={[\n          required('Please enter your password.'),\n          minLength(8, 'You password must have 8 characters or more.'),\n        ]}\n      >\n        {(field, props) => (\n          <>\n            <input {...props} type=\"password\" required />\n            {field.error && <div>{field.error}</div>}\n          </>\n        )}\n      </Field>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Form Store and Components with createForm\nDESCRIPTION: Example usage of createForm hook that returns a form store and linked Form, Field, and FieldArray components. The hook accepts generic types for Values and ResponseData, along with optional configuration options.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/createForm.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [form, { Form, Field, FieldArray }] = createForm<Values, ResponseData>(\n  options\n);\n```\n\n----------------------------------------\n\nTITLE: Defining and Validating a Login Form with Valibot in Preact (TypeScript)\nDESCRIPTION: This code shows a Preact-based login form using Modular Forms and Valibot for validation. Required libraries are '@modular-forms/preact' and 'valibot'. The Valibot schema validates required fields and formatting with custom error messages. The useForm hook manages form state and provides Form and Field components, each rendering input elements and error messages. The form expects 'email' and 'password' as strings from the user.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/validate-your-fields.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm, valiForm } from '@modular-forms/preact';\nimport * as v from 'valibot';\n\nconst LoginSchema = v.object({\n  email: v.pipe(\n    v.string(),\n    v.nonEmpty('Please enter your email.'),\n    v.email('The email address is badly formatted.')\n  ),\n  password: v.pipe(\n    v.string(),\n    v.nonEmpty('Please enter your password.'),\n    v.minLength(8, 'You password must have 8 characters or more.')\n  ),\n});\n\ntype LoginForm = v.InferInput<typeof LoginSchema>;\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>({\n    validate: valiForm(LoginSchema),\n  });\n\n  return (\n    <Form>\n      <Field name=\"email\">\n        {(field, props) => (\n          <>\n            <input {...props} type=\"email\" required />\n            {field.error && <div>{field.error}</div>}\n          </>\n        )}\n      </Field>\n      <Field name=\"password\">\n        {(field, props) => (\n          <>\n            <input {...props} type=\"password\" required />\n            {field.error && <div>{field.error}</div>}\n          </>\n        )}\n      </Field>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping Fields in a Field Array using TypeScript\nDESCRIPTION: This function swaps two fields of a field array by their index. It takes a form object, the name of the field array, and options specifying the indices to swap.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/swap.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nswap(form, name, options);\n```\n\n----------------------------------------\n\nTITLE: Defining and Validating a Login Form with Valibot in React (TypeScript)\nDESCRIPTION: This React example shows how to validate a login form using Modular Forms and Valibot. It imports hooks from '@modular-forms/react' and utilizes a shared schema to enforce email and password validation. The inputs are wrapped in Field components to display real-time validation errors. Developers must install 'valibot' and '@modular-forms/react'. The form expects string values for email and password, and integration allows for extensible field validation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/validate-your-fields.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm, valiForm } from '@modular-forms/react';\nimport * as v from 'valibot';\n\nconst LoginSchema = v.object({\n  email: v.pipe(\n    v.string(),\n    v.nonEmpty('Please enter your email.'),\n    v.email('The email address is badly formatted.')\n  ),\n  password: v.pipe(\n    v.string(),\n    v.nonEmpty('Please enter your password.'),\n    v.minLength(8, 'You password must have 8 characters or more.')\n  ),\n});\n\ntype LoginForm = v.InferInput<typeof LoginSchema>;\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>({\n    validate: valiForm(LoginSchema),\n  });\n\n  return (\n    <Form>\n      <Field name=\"email\">\n        {(field, props) => (\n          <>\n            <input {...props} type=\"email\" required />\n            {field.error && <div>{field.error}</div>}\n          </>\n        )}\n      </Field>\n      <Field name=\"password\">\n        {(field, props) => (\n          <>\n            <input {...props} type=\"password\" required />\n            {field.error && <div>{field.error}</div>}\n          </>\n        )}\n      </Field>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Login Form Fields with Modular Forms in React\nDESCRIPTION: Provides an example of field validation in a React application using `@modular-forms/react`. It leverages the `useForm` hook and applies `required`, `email`, and `minLength` validation functions to the `validate` prop of `Field` components. Errors are shown conditionally based on the field state passed to the render function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/validate-your-fields.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { email, minLength, required, useForm } from '@modular-forms/react';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>();\n\n  return (\n    <Form>\n      <Field\n        name=\"email\"\n        validate={[\n          required('Please enter your email.'),\n          email('The email address is badly formatted.'),\n        ]}\n      >\n        {(field, props) => (\n          <>\n            <input {...props} type=\"email\" required />\n            {field.error && <div>{field.error}</div>}\n          </>\n        )}\n      </Field>\n      <Field\n        name=\"password\"\n        validate={[\n          required('Please enter your password.'),\n          minLength(8, 'You password must have 8 characters or more.'),\n        ]}\n      >\n        {(field, props) => (\n          <>\n            <input {...props} type=\"password\" required />\n            {field.error && <div>{field.error}</div>}\n          </>\n        )}\n      </Field>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Validation Function with zodForm in Modular Forms (TypeScript)\nDESCRIPTION: Demonstrates how to use the zodForm function to generate a validate function from a Zod schema. Requires Zod for schema definitions, and is intended for use in SolidJS, Preact, and React environments utilizing Modular Forms. The key input is a ZodType schema object, and the output is a validate function that accepts partial form values and returns form errors based on the schema constraints.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/zodForm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst validate = zodForm(schema);\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe Forms with Modular Forms in SolidJS (TypeScript)\nDESCRIPTION: Demonstrates defining a form structure using a TypeScript type (`LoginForm`), creating a form store with `createFormStore`, and passing it as a type-safe prop (`FormStore<LoginForm>`) to a child component for rendering using `@modular-forms/solid`. The `Form` and `Field` components ensure type safety when accessing form state and field properties.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/typescript.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFormStore, Form, FormStore, Field } from '@modular-forms/solid';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n}\n\nexport function LoginPage() {\n  const loginForm = createFormStore<LoginForm>();\n  return <FormContent loginForm={loginForm} />\n}\n\ntype FormContentProps {\n  loginForm: FormStore<LoginForm>;\n}\n\nfunction FormContent(props: FormContentProps) {\n  return (\n    <Form of={props.loginForm}>\n      <Field of={props.loginForm} name=\"email\">\n        {(field, props) => <input {...props} type=\"email\" />}\n      </Field>\n      <Field of={props.loginForm} name=\"password\">\n        {(field, props) => <input {...props} type=\"password\" />}\n      </Field>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Form with useForm Hook in Qwik (TSX)\nDESCRIPTION: Shows how to use the `useForm` hook from `@modular-forms/qwik` within a Qwik component. It takes the form type (`LoginForm`) and a configuration object containing the `loader` (typically the result of `useFormLoader` or a static value object). It returns the form store and associated components (`Form`, `Field`, `FieldArray`).\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/create-your-form.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n  const [loginForm, { Form, Field, FieldArray }] = useForm<LoginForm>({\n    loader: useFormLoader(),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe Forms with Modular Forms in Qwik (TypeScript)\nDESCRIPTION: Demonstrates defining a form structure with a TypeScript type (`LoginForm`), using `routeLoader$` for initial values, creating a form store with `useFormStore` in a Qwik component, and passing the store as a type-safe prop (`FormStore<LoginForm>`) for rendering with `@modular-forms/qwik`. The `Form` and `Field` components maintain type safety.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/typescript.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from \"@builder.io/qwik\";\nimport { routeLoader$ } from '@builder.io/qwik-city';\nimport { useFormStore, Form, type FormStore, Field } from '@modular-forms/qwik'; // Assuming @modular-forms/qwik based on context\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport const useFormLoader = routeLoader$<InitialValues<LoginForm>>(() => ({\n  email: '',\n  password: '',\n}));\n\nexport default component$(() => {\n  const loginForm = useFormStore<LoginForm>({ loader: useFormLoader() });\n  return <FormContent loginForm={loginForm} />\n});\n\ntype FormContentProps {\n  loginForm: FormStore<LoginForm>;\n}\n\nconst FormContent = component$(({ loginForm }) => (\n  <Form of={loginForm}>\n    <Field of={loginForm} name=\"email\">\n      {(field, props) => <input {...props} type=\"email\" />}\n    </Field>\n    <Field of={loginForm} name=\"password\">\n      {(field, props) => <input {...props} type=\"password\" />}\n    </Field>\n    <button type=\"submit\">Login</button>\n  </Form>\n));\n```\n\n----------------------------------------\n\nTITLE: Removing an Item from Field Array - Modular Forms - TypeScript\nDESCRIPTION: This snippet illustrates the signature for invoking the 'remove' function provided by Modular Forms to remove an item from a field array using TypeScript. The function requires a 'form' object (of type FormStore), the 'name' of the field array (string), and an 'options' object where 'at' indicates the zero-based index of the item to remove. The action only executes with a valid index. This function is dependent on the FormStore type, and users should ensure the referenced types and infrastructure are available.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/remove.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nremove(form, name, options);\n```\n\n----------------------------------------\n\nTITLE: Creating Field Validator with Zod and Modular Forms (TypeScript)\nDESCRIPTION: This snippet demonstrates how to instantiate a field validation function using the 'zodField' helper, which parses a provided Zod schema to produce a validator suitable for Modular Forms in SolidJS, Preact, or React. The function accepts a Zod schema representing the rules for a field value and returns a function that will validate those field values, returning a string error message if validation fails. Prerequisites include importing or defining a suitable Zod schema object. Inputs: a Zod schema; Outputs: a validation function. It is not compatible with Qwik; only use within supported libraries.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/zodField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = zodField(schema);\n```\n\n----------------------------------------\n\nTITLE: Adding Fields Using Modular Forms in React - TypeScript\nDESCRIPTION: This code uses useForm from '@modular-forms/react' to create a type-safe login form for React applications. The Form and Field components are extracted from the hook and used to construct the UI, connecting each field to input components with validation and state tracking handled by the Field's render prop. It requires React, the Modular Forms React package, and TypeScript, accepting string inputs for email and password and returning a fully validated form submission.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/add-fields-to-form.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from '@modular-forms/react';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>();\n\n  return (\n    <Form>\n      <Field name=\"email\">\n        {(field, props) => <input {...props} type=\"email\" />}\n      </Field>\n      <Field name=\"password\">\n        {(field, props) => <input {...props} type=\"password\" />}\n      </Field>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Validating Login Form Fields with Modular Forms in Preact\nDESCRIPTION: Illustrates field validation implementation in a Preact application using `@modular-forms/preact`. It uses the `useForm` hook and integrates `required`, `email`, and `minLength` validators within the `Field` components' `validate` prop. Conditional error display is handled via the field state in the render function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/validate-your-fields.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { email, minLength, required, useForm } from '@modular-forms/preact';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>();\n\n  return (\n    <Form>\n      <Field\n        name=\"email\"\n        validate={[\n          required('Please enter your email.'),\n          email('The email address is badly formatted.'),\n        ]}\n      >\n        {(field, props) => (\n          <>\n            <input {...props} type=\"email\" required />\n            {field.error && <div>{field.error}</div>}\n          </>\n        )}\n      </Field>\n      <Field\n        name=\"password\"\n        validate={[\n          required('Please enter your password.'),\n          minLength(8, 'You password must have 8 characters or more.'),\n        ]}\n      >\n        {(field, props) => (\n          <>\n            <input {...props} type=\"password\" required />\n            {field.error && <div>{field.error}</div>}\n          </>\n        )}\n      </Field>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fields Using Modular Forms in Qwik - TypeScript\nDESCRIPTION: This Qwik example utilizes the useForm composable from Modular Forms to create a typed form for login. It shows the creation of the loginForm signal and renders the Form and Field components, managing email and password fields via render props. Form submission relies on loader data for SSR integration, and field state is accessible for validation and UI updates. Dependencies include Modular Forms for Qwik, a Qwik environment, and TypeScript.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/add-fields-to-form.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default component$(() => {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>({\n    loader: useFormLoader(),\n  });\n\n  return (\n    <Form>\n      <Field name=\"email\">\n        {(field, props) => <input {...props} type=\"email\" />}\n      </Field>\n      <Field name=\"password\">\n        {(field, props) => <input {...props} type=\"password\" />}\n      </Field>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n});\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Field Array Item in TypeScript\nDESCRIPTION: This function replaces an item in a field array. It takes the form, field name, and options as parameters. The 'at' option specifies the index of the item to be replaced, and 'value' provides the new value.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/replace.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreplace(form, name, options);\n```\n\n----------------------------------------\n\nTITLE: Throwing General Form Errors - Qwik with Modular Forms - TypeScript\nDESCRIPTION: This snippet explains client-side error handling in a Qwik form built with Modular Forms and valibot for validation. createForm is replaced by useForm, and form events use onSubmit$ and Qwik's component$ syntax. Custom errors are thrown with FormError in the SubmitHandler. Dependencies: @modular-forms/qwik, valibot, TypeScript. Expects login credentials, validated against a schema, responds with form errors upon error occurrence.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/throw-form-errors.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { $, component$ } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\nimport type { InitialValues, FormError } from '@modular-forms/qwik';\nimport { formAction$, valiForm$ } from '@modular-forms/qwik';\nimport * as v from 'valibot';\n\nconst LoginSchema = v.object({\n  email: v.pipe(\n    v.string(),\n    v.nonEmpty('Please enter your email.'),\n    v.email('The email address is badly formatted.')\n  ),\n  password: v.pipe(\n    v.string(),\n    v.nonEmpty('Please enter your password.'),\n    v.minLength(8, 'You password must have 8 characters or more.')\n  ),\n});\n\ntype LoginForm = v.InferInput<typeof LoginSchema>;\n\nexport const useFormLoader = routeLoader$<InitialValues<LoginForm>>(() => ({\n  email: '',\n  password: '',\n}));\n\nexport default component$(() => {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>({\n    loader: useFormLoader(),\n    validate: valiForm$(LoginSchema),\n  });\n\n  const handleSubmit: SubmitHandler<LoginForm> = $((values, event) => {\n    if (error) {\n      throw new FormError<LoginForm>('An error has occurred.');\n    }\n  });\n\n  return (\n    <Form onSubmit$={handleSubmit}>\n      <div>…</div>\n      <div>{loginForm.response.message}</div>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission with Actions and onSubmit$ in Qwik\nDESCRIPTION: Illustrates a comprehensive Qwik form setup using `@modular-forms/qwik`. It defines a `LoginSchema` with Valibot for validation, uses `routeLoader$` for initial values, `formAction$` for server-side submission handling (integrated with validation via `valiForm$`), and `useForm` to tie them together. An optional client-side `onSubmit$` handler is also shown for potential progressive enhancement.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/handle-submission.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { $, component$, QRL } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\nimport {\n  type InitialValues,\n  formAction$,\n  valiForm$,\n} from '@modular-forms/qwik';\nimport * as v from 'valibot';\n\nconst LoginSchema = v.object({\n  email: v.pipe(\n    v.string(),\n    v.nonEmpty('Please enter your email.'),\n    v.email('The email address is badly formatted.')\n  ),\n  password: v.pipe(\n    v.string(),\n    v.nonEmpty('Please enter your password.'),\n    v.minLength(8, 'You password must have 8 characters or more.')\n  ),\n});\n\ntype LoginForm = v.InferInput<typeof LoginSchema>;\n\nexport const useFormLoader = routeLoader$<InitialValues<LoginForm>>(() => ({\n  email: '',\n  password: '',\n}));\n\nexport const useFormAction = formAction$<LoginForm>((values) => {\n  // Runs on server\n}, valiForm$(LoginSchema));\n\nexport default component$(() => {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>({\n    loader: useFormLoader(),\n    action: useFormAction(),\n    validate: valiForm$(LoginSchema),\n  });\n\n  const handleSubmit: QRL<SubmitHandler<LoginForm>> = $((values, event) => {\n    // Runs on client\n  });\n\n  return <Form onSubmit$={handleSubmit}>…</Form>;\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission with onSubmit in React\nDESCRIPTION: Demonstrates defining a `SubmitHandler` function and passing it to the `onSubmit` prop of the `Form` component in React. This enables client-side processing of form values upon submission. The example utilizes `useForm` from `@modular-forms/react` to manage form state.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/handle-submission.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { SubmitHandler, useForm } from '@modular-forms/react';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>();\n\n  const handleSubmit: SubmitHandler<LoginForm> = (values, event) => {\n    // Your code here\n  };\n\n  return <Form onSubmit={handleSubmit}>…</Form>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Basic MinRange Validation Function Usage - TypeScript\nDESCRIPTION: Creates a validation function that checks if a value meets minimum range requirements for strings, numbers, or dates. Takes a requirement parameter and an error message string.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/minRange.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = minRange(requirement, error);\n```\n\n----------------------------------------\n\nTITLE: Validating Login Form Fields with Modular Forms in Qwik\nDESCRIPTION: Shows how to implement field validation in a Qwik application using `@modular-forms/qwik`. It employs the `useForm` hook with `routeLoader$` for initial values and applies `required`, `email`, and `minLength` validators to `Field` components. Validation errors are displayed using the field state from the render function. Note the explicit type annotation `<string>` for `required`.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/validate-your-fields.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\nimport {\n  email,\n  type InitialValues,\n  minLength,\n  required,\n  useForm,\n} from '@modular-forms/qwik';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport const useFormLoader = routeLoader$<InitialValues<LoginForm>>(() => ({\n  email: '',\n  password: '',\n}));\n\nexport default component$(() => {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>({\n    loader: useFormLoader(),\n  });\n\n  return (\n    <Form>\n      <Field\n        name=\"email\"\n        validate={[\n          required<string>('Please enter your email.'),\n          email('The email address is badly formatted.'),\n        ]}\n      >\n        {(field, props) => (\n          <>\n            <input {...props} type=\"email\" required />\n            {field.error && <div>{field.error}</div>}\n          </>\n        )}\n      </Field>\n      <Field\n        name=\"password\"\n        validate={[\n          required<string>('Please enter your password.'),\n          minLength(8, 'You password must have 8 characters or more.'),\n        ]}\n      >\n        {(field, props) => (\n          <>\n            <input {...props} type=\"password\" required />\n            {field.error && <div>{field.error}</div>}\n          </>\n        )}\n      </Field>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Types for Field Arrays in Modular Forms - TypeScript\nDESCRIPTION: This snippet defines a TypeScript type for a todo form with a heading and an array of todo items, each having a label and deadline. It provides the shape required for using Modular Forms' FieldArray functionality. No external dependencies are required other than TypeScript.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/field-arrays.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TodoForm = {\n  heading: string;\n  todos: {\n    label: string;\n    deadline: string;\n  }[];\n};\n```\n\n----------------------------------------\n\nTITLE: Destructuring Form Components in Qwik (TSX)\nDESCRIPTION: Demonstrates alternative destructuring for the `useForm` hook in Qwik, similar to the Solid example. It ignores the form store using `const [, Login] = ...` and assigns the component object to a custom name (e.g., `Login`, `Register`), requiring the respective loaders to be passed to each `useForm` call. This enhances clarity when dealing with multiple forms.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/create-your-form.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n  const [, Login] = useForm<LoginForm>({ loader: useLoginLoader() });\n  const [, Register] = useForm<RegisterForm>({ loader: useRegisterLoader() });\n\n  return (\n    <>\n      <Login.Form></Login.Form>\n      <Register.Form></Register.Form>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Form Data Structures with TypeScript\nDESCRIPTION: This TypeScript snippet defines a ContactForm type where first and last name fields are grouped into a nested object. This structure allows complex data to be represented in a way that closely matches database schemas or business logic requirements. Dependencies include TypeScript, and it is expected that this type will be used to type the values in a form implementation; input keys such as 'name.first' and 'name.last' should align with this shape.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/nested-fields.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ntype ContactForm = {\n  name: {\n    first: string;\n    last: string;\n  };\n  email: string;\n  message: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Validation and Data Types with formAction$ in Qwik\nDESCRIPTION: Demonstrates configuring `formAction$` in Qwik for server-side validation using `valiForm$` and a schema (`SpecialSchema`). It also shows how to supplement type information for arrays, booleans, files, and numbers using the `arrays`, `booleans`, `files`, and `numbers` options, which is necessary for progressively enhanced forms submitted without JavaScript to ensure data fits the schema.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/enhanced-forms.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport const useFormAction = formAction$<SpecialForm>(\n  (values) => {\n    // Runs on server\n  },\n  {\n    validate: valiForm$(SpecialSchema),\n    arrays: ['checkbox.array', 'file.list', 'select.array'],\n    booleans: ['checkbox.boolean'],\n    files: ['file.item', 'file.list'],\n    numbers: ['number', 'range'],\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Field Error in TypeScript Form\nDESCRIPTION: This function sets the error of a specified field or field array in a form. It takes the form object, field name, error message, and optional configuration as parameters. By default, it focuses the HTML element of the field unless specified otherwise.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/setError.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetError(form, name, error, options);\n```\n\n----------------------------------------\n\nTITLE: Rendering FieldArray in Preact/React with map and value property - TypeScript\nDESCRIPTION: This code shows how to render a field array using Preact or React, specifically mapping over fieldArray.items.value to generate dynamic input fields for each todo item. It illustrates integrating Modular Forms with these libraries using controlled form state and keying items for performance. Dependencies: Modular Forms, React or Preact, properly set up form state.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/field-arrays.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<FieldArray name=\"todos\">\n  {(fieldArray) =>\n    fieldArray.items.value.map((item, index) => (\n      <div key={item}>\n        <Field name={`todos.${index}.label`}>\n          {(field, props) => <input {...props} type=\"text\" />}\n        </Field>\n        <Field name={`todos.${index}.deadline`}>\n          {(field, props) => <input {...props} type=\"date\" />}\n        </Field>\n      </div>\n    ))\n  }\n</FieldArray>\n```\n\n----------------------------------------\n\nTITLE: Using the Custom RadioGroup Component with Modular Forms in SolidJS\nDESCRIPTION: This TSX snippet illustrates how to integrate the previously defined `RadioGroup` component with the Modular Forms library in a SolidJS application. It uses the `<Field>` component from Modular Forms to manage the state (`field.value`, `field.error`) for the 'framework' input and passes these, along with other configuration props like `label`, `options`, and `required`, to the custom `RadioGroup` component. This demonstrates binding the custom UI component to the form's state management.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/kobalte.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Field name=\"framework\">\n  {(field, props) => (\n    <RadioGroup\n      {...props}\n      label=\"Framework\"\n      options={[\n        { label: 'SolidJS', value: 'solid' },\n        { label: 'Qwik', value: 'qwik' },\n        { label: 'Preact', value: 'preact' },\n      ]}\n      value={field.value}\n      error={field.error}\n      required\n    />\n  )}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Rendering FieldArray with Solid and For Component - TypeScript\nDESCRIPTION: This snippet demonstrates dynamically rendering field array items with the SolidJS `For` component combined with Modular Forms' FieldArray and Field components. Each todo item renders labeled and deadline input fields, using signal-based indexing for reactivity. Requires SolidJS, Modular Forms, and properly initialized form state.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/field-arrays.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<FieldArray name=\"todos\">\n  {(fieldArray) => (\n    <For each={fieldArray.items}>\n      {(_, index) => (\n        <div>\n          <Field name={`todos.${index()}.label`}>\n            {(field, props) => <input {...props} type=\"text\" />}\n          </Field>\n          <Field name={`todos.${index()}.deadline`}>\n            {(field, props) => <input {...props} type=\"date\" />}\n          </Field>\n        </div>\n      )}\n    </For>\n  )}\n</FieldArray>\n```\n\n----------------------------------------\n\nTITLE: Initializing Field Arrays with useForm Hook - Qwik - TypeScript\nDESCRIPTION: This snippet shows how to initialize a form and its field arrays with the `useForm` hook in Qwik and TypeScript. It specifies which field arrays to manage, ensuring integration with Modular Forms. Requires Modular Forms library and the written TodoForm type; make sure to pass all relevant config for form operation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/field-arrays.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst [todoForm, { Form, Field, FieldArray }] = useForm<TodoForm>({\n  loader: useFormLoader(),\n  fieldArrays: ['todos'],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Validation Function with valiField in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the valiField function to create a validation function based on a Valibot schema. The function takes a schema as input and returns a validate function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/valiField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = valiField(schema);\n```\n\n----------------------------------------\n\nTITLE: Using hasField Function in TypeScript\nDESCRIPTION: Example of how to use the hasField function to check if a field is included in the form. The function accepts a form object, field name, and optional configuration to filter based on field status like active, touched, dirty, or valid state.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/hasField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = hasField(form, name, options);\n```\n\n----------------------------------------\n\nTITLE: Using the Form Component in Solid, Preact, or React (TypeScript/TSX)\nDESCRIPTION: This snippet demonstrates how to instantiate and configure the Form component within Solid, Preact, or React using JSX/TSX. Key properties include 'of' for binding the FormStore, 'onSubmit' for a submission callback, and boolean flags like 'keepResponse', 'shouldActive', 'shouldTouched', 'shouldDirty', and 'shouldFocus' that control validation and response behaviors. The component expects child nodes representing form contents. The snippet assumes an environment where the Form component and dependencies are present, and that 'event.preventDefault()' will be used to prevent the default form submission behavior.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/Form.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\\n<Form\\n  of={\\u2026}\\n  onSubmit={\\u2026}\\n  keepResponse={\\u2026}\\n  shouldActive={\\u2026}\\n  shouldTouched={\\u2026}\\n  shouldDirty={\\u2026}\\n  shouldFocus={\\u2026}\\n>\\n  children\\n</Form>\\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Field Arrays with Dynamic Names in Solid - TypeScript\nDESCRIPTION: Shows how to render nested field arrays in Solid by referencing a dynamic field array name with index signal, making it easier to construct deeply nested and dynamic forms. Intended for Modular Forms with SolidJS; ensures flexible, nested structure.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/field-arrays.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<FieldArray name=\"todos\">\n  {(fieldArray) => (\n    <For each={fieldArray.items}>\n      {(_, index) => (\n        <div>\n          <Field name={`${fieldArray.name}.${index()}.label`}>\n            {(field, props) => <input {...props} type=\"text\" />}\n          </Field>\n          <Field name={`${fieldArray.name}.${index()}.deadline`}>\n            {(field, props) => <input {...props} type=\"date\" />}\n          </Field>\n        </div>\n      )}\n    </For>\n  )}\n</FieldArray>\n```\n\n----------------------------------------\n\nTITLE: Controlled Date Input with Solid - TypeScript\nDESCRIPTION: Introduces a DateInput component for Solid that transforms a date or number value to a properly formatted date string, suitable for input type date fields. Uses createMemo to memoize the formatted value and validates against NaN for robust input handling. Requires solid-js, a custom DateInputProps type, and typical input attributes.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/controlled-fields.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { createMemo } from 'solid-js';\n\ntype DateInputProps = { … };\n\nexport function DateInput(props: DateInputProps) {\n  // Transform date or number to string\n  const getValue = createMemo(() =>\n    props.value &&\n    !Number.isNaN(\n      typeof props.value === 'number' ? props.value : props.value.getTime()\n    )\n      ? new Date(props.value).toISOString().split('T', 1)[0]\n      : ''\n  );\n  return <input {...props} type=\"date\" value={getValue()} />;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Form Store with TypeScript in SolidJS\nDESCRIPTION: Creates and returns a form store instance with type-safe values. The function accepts optional FormOptions and returns a FormStore object. It supports generic type parameters for form values and response data.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/createFormStore.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst form = createFormStore<Values>(options);\n```\n\n----------------------------------------\n\nTITLE: Using FieldArray Component in TSX\nDESCRIPTION: This snippet demonstrates the basic usage of the FieldArray component. It shows the component structure with its properties and children.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldArray.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<FieldArray of={…} name={…} validate={…} keepActive={…} keepState={…}>\n  children\n</FieldArray>\n```\n\n----------------------------------------\n\nTITLE: Using hasFieldArray Function in TypeScript\nDESCRIPTION: Demonstrates how to use the hasFieldArray function to check if a field array is included in a form. The function accepts form object, field array name, and optional filtering options.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/hasFieldArray.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = hasFieldArray(form, name, options);\n```\n\n----------------------------------------\n\nTITLE: Using the Field Component in Modular Forms with TSX\nDESCRIPTION: This snippet demonstrates how to use the headless Field component in TSX/JSX, outlining all configurable properties such as of, name, type, validate, and transformation logic. It is intended for consumption within a modular-forms-compatible application in frameworks like React, Preact, Qwik, or Solid. Supported props and their types are indicated in surrounding documentation, and the Field component is used as a wrapper for form field children, managing state and behavior reactively.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/Field.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\\n<Field\\n  of={…}\\n  name={…}\\n  type={…}\\n  validate={…}\\n  validateOn={…}\\n  revalidateOn={…}\\n  transform={…}\\n  keepActive={…}\\n  keepState={…}\\n>\\n  children\\n</Field>\\n```\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Select Component with Modular Forms\nDESCRIPTION: This example illustrates using the custom Kobalte-based `Select` component within a Modular Forms `Field`. It passes necessary props like `label`, `placeholder`, `options`, and `required`. Crucially, it binds the component's `value` and `error` props to the state provided by the `Field` render function (`field.value`, `field.error`), ensuring integration with the form's data and validation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/kobalte.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Field name=\"framework\">\n  {(field, props) => (\n    <Select\n      {...props}\n      label=\"Framework\"\n      placeholder=\"Select a framework\"\n      options={[\n        { label: 'SolidJS', value: 'solid' },\n        { label: 'Qwik', value: 'qwik' },\n        { label: 'Preact', value: 'preact' },\n      ]}\n      value={field.value}\n      error={field.error}\n      required\n    />\n  )}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Data from formAction$ in Qwik\nDESCRIPTION: Shows how to return custom data (e.g., a user ID after login) from a Qwik `formAction$`. This is achieved by defining a response type (`ResponseData`), adding it as a second generic parameter to `formAction$`, and returning an object with a `data` key containing the custom payload from the action handler. This data can then be accessed via `loginForm.response.data` in the component.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/handle-submission.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\ntype ResponseData = {\n  userId: string;\n};\n\nexport const useFormAction = formAction$<LoginForm, ResponseData>(\n  async (values) => {\n    const userId = await loginUser(values);\n    return {\n      status: 'success',\n      message: 'You are now logged in.',\n      data: { userId },\n    };\n  },\n  valiForm$(LoginSchema)\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Form Store with useFormStore Hook - Modular Forms (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize a form store using the useFormStore hook from the Modular Forms library in a Qwik, Preact, or React environment. It employs TypeScript generics to specify the form's field values (Values) and expected response data (ResponseData), which provide compile-time type safety and auto-completion. The options parameter is required to configure the form, and the returned form object contains the store representing the form's state; users should define Values and ResponseData according to their application's needs.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/useFormStore.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst form = useFormStore<Values, ResponseData>(options);\n```\n\n----------------------------------------\n\nTITLE: Throwing General Form Errors - React with Modular Forms - TypeScript\nDESCRIPTION: This Preact-to-React analogous snippet demonstrates React form error handling using Modular Forms' useForm hook. The FormError is thrown within the submit handler to display a general error, which populates the form's response message. Dependencies: @modular-forms/react, TypeScript. Inputs are login fields, outputs are error messages displayed under the form, tailored for client-side validation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/throw-form-errors.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormError, SubmitHandler, useForm } from '@modular-forms/react';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>();\n\n  const handleSubmit: SubmitHandler<LoginForm> = (values, event) => {\n    if (error) {\n      throw new FormError<LoginForm>('An error has occurred.');\n    }\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <div>…</div>\n      <div>{loginForm.response.message}</div>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Single Select with Modular Forms - Qwik - TSX\nDESCRIPTION: This snippet shows a single-select dropdown using Modular Forms with Qwik. It maps options directly and sets 'selected={field.value === value}'. Requires Modular Forms, Qwik. Inputs: label/value options. Output: selected string in form state.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/special-inputs.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\n<Field name=\"framework\">\n  {(field, props) => (\n    <select {...props}>\n      {[\n        { label: 'Preact', value: 'preact' },\n        { label: 'Solid', value: 'solid' },\n        { label: 'Qwik', value: 'qwik' },\n      ].map(({ label, value }) => (\n        <option key={value} value={value} selected={field.value === value}>\n          {label}\n        </option>\n      ))}\n    </select>\n  )}\n</Field>\n```\n```\n\n----------------------------------------\n\nTITLE: Using zodField$ for Field Validation in Qwik (TypeScript)\nDESCRIPTION: This snippet demonstrates the basic usage of the `zodField$` function in Qwik. It assigns the result of calling `zodField$` with a Zod `schema` to a `validate` constant. This `validate` function can then be used to perform validation on a form field's value based on the provided Zod schema.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/zodField$.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst validate = zodField$(schema);\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable 'toInputMask' Helper Function for SolidJS Modular Forms\nDESCRIPTION: This TypeScript function, `toInputMask`, acts as a helper to simplify applying input masks from libraries like `@solid-primitives/input-mask` within SolidJS Modular Forms. It abstracts the `toCustom` call, taking the mask function and transformation options as arguments, and returns a `TransformField` function suitable for the `transform` prop.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nimport { FieldEvent, toCustom, TransformOptions } from '@modular-forms/solid';\n\nexport function toInputMask(\n  inputMask: (event: FieldEvent) => string,\n  options: TransformOptions\n) {\n  return toCustom((_, event) => inputMask(event), options);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Kobalte TextField Component in SolidJS\nDESCRIPTION: This snippet defines a reusable SolidJS component named `TextField` that wraps Kobalte's core `TextField`, `Input`, and `TextArea` components. It accepts props like `name`, `label`, `value`, `error`, `multiline`, and event handlers, making it compatible with form libraries like Modular Forms. It uses `splitProps` for prop delegation, `Show` for conditional rendering, and sets `validationState` based on the `error` prop for accessibility and styling.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/kobalte.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextField as Kobalte } from '@kobalte/core';\nimport { type JSX, Show, splitProps } from 'solid-js';\n\ntype TextFieldProps = {\n  name: string;\n  type?: 'text' | 'email' | 'tel' | 'password' | 'url' | 'date' | undefined;\n  label?: string | undefined;\n  placeholder?: string | undefined;\n  value: string | undefined;\n  error: string;\n  multiline?: boolean | undefined;\n  required?: boolean | undefined;\n  disabled?: boolean | undefined;\n  ref: (element: HTMLInputElement | HTMLTextAreaElement) => void;\n  onInput: JSX.EventHandler<HTMLInputElement | HTMLTextAreaElement, InputEvent>;\n  onChange: JSX.EventHandler<HTMLInputElement | HTMLTextAreaElement, Event>;\n  onBlur: JSX.EventHandler<HTMLInputElement | HTMLTextAreaElement, FocusEvent>;\n};\n\nexport function TextField(props: TextFieldProps) {\n  const [rootProps, inputProps] = splitProps(\n    props,\n    ['name', 'value', 'required', 'disabled'],\n    ['placeholder', 'ref', 'onInput', 'onChange', 'onBlur']\n  );\n  return (\n    <Kobalte.Root\n      {...rootProps}\n      validationState={props.error ? 'invalid' : 'valid'}\n    >\n      <Show when={props.label}>\n        <Kobalte.Label>{props.label}</Kobalte.Label>\n      </Show>\n      <Show\n        when={props.multiline}\n        fallback={<Kobalte.Input {...inputProps} type={props.type} />}\n      >\n        <Kobalte.TextArea {...inputProps} autoResize />\n      </Show>\n      <Kobalte.ErrorMessage>{props.error}</Kobalte.ErrorMessage>\n    </Kobalte.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Field Errors with a General Error Message - Modular Forms - TypeScript\nDESCRIPTION: This snippet illustrates how to throw both general and field-specific errors in a Modular Forms handler using TypeScript. The FormError constructor is used with two arguments: the general error message and a field-to-message map, assigning a custom error to the email field. Dependencies: @modular-forms/solid, @modular-forms/qwik, @modular-forms/preact, or @modular-forms/react, TypeScript. Inputs are form values; outputs set the response message and field error(s).\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/throw-form-errors.mdx#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nif (error) {\n  throw new FormError<LoginForm>('An error has occurred.', {\n    email: 'This email has been blacklisted.',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Multi-Select Dropdown with Modular Forms - React - TSX\nDESCRIPTION: This code sample shows a multi-select dropdown using Modular Forms in React, with explicit value binding and the 'multiple' attribute. The form field binds to an array of selected values, with options mapped accordingly. Dependencies: Modular Forms, React. Input: options; output: array of string selections.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/special-inputs.mdx#2025-04-23_snippet_13\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\n<Field name=\"framework\" type=\"string[]\">\n  {(field, props) => (\n    // Set \"multiple\" to \"true\"\n    <select {...props} value={field.value.value || []} multiple>\n      {[\n        { label: 'Preact', value: 'preact' },\n        { label: 'Solid', value: 'solid' },\n        { label: 'Qwik', value: 'qwik' },\n      ].map(({ label, value }) => (\n        <option key={value} value={value}>\n          {label}\n        </option>\n      ))}\n    </select>\n  )}\n</Field>\n```\n```\n\n----------------------------------------\n\nTITLE: Using toUpperCase Function in TypeScript\nDESCRIPTION: Demonstrates the usage of the toUpperCase function to create a transformation function. The function takes an options object as a parameter and returns a transform function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/toUpperCase.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst transform = toUpperCase(options);\n```\n\n----------------------------------------\n\nTITLE: Using the 'toInputMask' Helper for Date Formatting in SolidJS Modular Forms\nDESCRIPTION: This snippet demonstrates using the custom `toInputMask` helper function (defined previously) to apply a date input mask within a Modular Forms `Field` component in SolidJS. It passes the `dateMask` function (created using `createInputMask`) and the desired trigger event ('change') to `toInputMask`, making the code more readable.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<Field name=\"date\" transform={toInputMask(dateMask, { on: 'change' })}>\n  {(field, props) => (\n    <input\n      {...props}\n      type=\"text\"\n      placeholder=\"01/01/2023\"\n      value={field.value}\n    />\n  )}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Creating Validation Function with valiField$ in Qwik\nDESCRIPTION: Demonstrates how to use the valiField$ function to create a validation function that parses a Valibot schema for a field in Modular Forms for Qwik. The function takes a schema parameter and returns a validate function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/valiField$.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = valiField$(schema);\n```\n\n----------------------------------------\n\nTITLE: Rendering Multi-Select Dropdown with Modular Forms - Preact - TSX\nDESCRIPTION: This snippet renders a multi-select dropdown via Modular Forms and Preact. The 'multiple' attribute and 'selected={field.value.value?.includes(value)}' ensure array selection. Libraries needed: Modular Forms, Preact. Expected input: options list; output: array of strings.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/special-inputs.mdx#2025-04-23_snippet_12\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\n<Field name=\"framework\" type=\"string[]\">\n  {(field, props) => (\n    // Set \"multiple\" to \"true\"\n    <select {...props} multiple>\n      {[\n        { label: 'Preact', value: 'preact' },\n        { label: 'Solid', value: 'solid' },\n        { label: 'Qwik', value: 'qwik' },\n      ].map(({ label, value }) => (\n        <option\n          key={value}\n          value={value}\n          selected={field.value.value?.includes(value)}\n        >\n          {label}\n        </option>\n      ))}\n    </select>\n  )}\n</Field>\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Form Actions with formAction$ in Qwik\nDESCRIPTION: Demonstrates the usage of formAction$ for creating actions for both simple and complex forms. It shows the function signature with generics for Values and ResponseData.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/formAction$.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Form action for simple forms\nformAction$<Values, ResponseData>(action, validate);\n\n// Form actions for complex forms\nformAction$<Values, ResponseData>(action, options);\n```\n\n----------------------------------------\n\nTITLE: Rendering Array of Checkboxes with Modular Forms - Qwik - TSX\nDESCRIPTION: This snippet shows how to render multiple checkboxes mapping to an array form field using Modular Forms in Qwik. The map function renders each checkbox with unique value, while <Field> manages state for 'fruits' array. Dependencies: Modular Forms and Qwik. Inputs: Array of fruit labels/values. Output: array of selected string values.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/special-inputs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\n{\n  [\n    { label: 'Bananas', value: 'bananas' },\n    { label: 'Apples', value: 'apples' },\n    { label: 'Grapes', value: 'grapes' },\n  ].map(({ label, value }) => (\n    <Field key={value} name=\"fruits\" type=\"string[]\">\n      {(field, props) => (\n        <label>\n          <input\n            {...props}\n            type=\"checkbox\"\n            value={value}\n            checked={field.value?.includes(value)}\n          />\n          {label}\n        </label>\n      )}\n    </Field>\n  ));\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a Type-Coerced Field to Modular Forms - TypeScript\nDESCRIPTION: This snippet displays how to add a field that captures types other than string, such as number, with the headless Field component. The example shows a Field for 'age' with an explicit 'type' prop set to number, ensuring type-safe data entry and automatic validation. This feature requires no additional dependencies beyond a Modular Forms-compatible framework and TypeScript, and highlights how types are inferred in the UI and validated at runtime.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/add-fields-to-form.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<Field name=\"age\" type=\"number\">\n  {(field, props) => <input {...props} type=\"number\" />}\n</Field>\n\n```\n\n----------------------------------------\n\nTITLE: Moving Items in a Field Array Using move() - TypeScript\nDESCRIPTION: Illustrates how to move an item within a field array using the move method provided by Modular Forms. Moves the first todo item to the third position; handles array state updates automatically. Needs a Modular Forms form instance with field arrays enabled.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/field-arrays.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nmove(todoForm, 'todos', { from: 0, to: 2 });\n```\n\n----------------------------------------\n\nTITLE: Using useForm Hook in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the useForm hook to create a form store and associated components. It includes generics for type-safe form values and response data.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/useForm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst [form, { Form, Field, FieldArray }] = useForm<Values, ResponseData>(\n  options\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable 'toCents' Transformation for SolidJS Modular Forms\nDESCRIPTION: This TypeScript function, `toCents`, creates a reusable transformation logic for Modular Forms in SolidJS. It leverages `toCustom` to define a transform that takes a numeric input value (representing currency like dollars/euros) and multiplies it by 100 to convert it to cents. This transformation is configured to trigger on the 'input' event, making it suitable for currency fields.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  Maybe,\n  MaybeValue,\n  toCustom,\n  TransformField,\n} from '@modular-forms/solid';\n\nexport function toCents<\n  TValue extends MaybeValue<number>\n>(): TransformField<TValue> {\n  return toCustom<TValue>(\n    (value) => value && ((value * 100) as Maybe<TValue>),\n    { on: 'input' }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering FieldArray in Qwik with map - TypeScript\nDESCRIPTION: This snippet uses the Qwik framework for rendering dynamic field arrays, mapping over fieldArray.items and providing controlled field names for each todo. Useful for building dynamically sized forms in Qwik apps. Requires Modular Forms and Qwik; input fields are updated based on array index.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/field-arrays.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<FieldArray name=\"todos\">\n  {(fieldArray) =>\n    fieldArray.items.map((item, index) => (\n      <div key={item}>\n        <Field name={`todos.${index}.label`}>\n          {(field, props) => <input {...props} type=\"text\" />}\n        </Field>\n        <Field name={`todos.${index}.deadline`}>\n          {(field, props) => <input {...props} type=\"date\" />}\n        </Field>\n      </div>\n    ))\n  }\n</FieldArray>\n```\n\n----------------------------------------\n\nTITLE: Using transform Prop with toCustom in Solid/Preact (TSX)\nDESCRIPTION: Demonstrates how to use the `transform` prop within a Modular Forms `Field` component in a Solid or Preact application. It utilizes the `toCustom` helper function to apply custom transformation logic (placeholder for phone number formatting) triggered by the 'input' event.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Field\n  name=\"phone\"\n  transform={toCustom(\n    (value, event) => {\n      // Transform phone number here\n    },\n    { on: 'input' }\n  )}\n>\n  {(field, props) => (\n    <input\n      {...props}\n      type=\"tel\"\n      placeholder=\"(000) 000-0000\"\n      value={field.value}\n    />\n  )}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Using transform Prop with toCustom$ in Qwik (TSX)\nDESCRIPTION: Shows the usage of the `transform` prop in a Qwik `Field` component. It employs the `toCustom$` helper function to define input transformation logic (placeholder for phone number formatting) that executes on the 'input' event, providing access to the value, event, and element.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Field\n  name=\"phone\"\n  transform={toCustom$(\n    (value, event, element) => {\n      // Transform phone number here\n    },\n    { on: 'input' }\n  )}\n>\n  {(field, props) => (\n    <input\n      {...props}\n      type=\"tel\"\n      placeholder=\"(000) 000-0000\"\n      value={field.value}\n    />\n  )}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Rendering Boolean Checkbox with Modular Forms - React - TSX\nDESCRIPTION: This snippet creates a boolean checkbox input using Modular Forms in React. It demonstrates using 'type=\"boolean\"' and binds the checkbox's 'checked' property to a possibly-nested state value via '!!field.value.value'. Requires Modular Forms and React. The Field component provides field state and control, ensuring correct boolean coercion. Input is a React-specific <Field> element, outputting a boolean form value.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/special-inputs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\n<Field name=\"cookies\" type=\"boolean\">\n  {(field, props) => (\n    <label>\n      <input {...props} type=\"checkbox\" checked={!!field.value.value} />\n      Yes, I want cookies\n    </label>\n  )}\n</Field>\n```\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Checkbox Component with Modular Forms\nDESCRIPTION: This snippet demonstrates how to use the custom Kobalte-based `Checkbox` component within a Modular Forms `Field`. It sets the field `type` to \"boolean\", passes the `label` and `required` props, and critically binds the component's `checked` state and `error` display to the corresponding state (`field.value`, `field.error`) managed by Modular Forms.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/kobalte.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Field name=\"cookies\" type=\"boolean\">\n  {(field, props) => (\n    <Checkbox\n      {...props}\n      label=\"Yes, I want cookies\"\n      checked={field.value}\n      error={field.error}\n      required\n    />\n  )}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Controlled Number Input with React - TypeScript\nDESCRIPTION: Creates a controlled number input in React by leveraging @preact/signals-react for reactivity and forwardRef for parent ref usage. The value is updated conditionally (not NaN) and defaults to an empty string if undefined. Useful for complex forms requiring type-safe number input handling.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/controlled-fields.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { useSignal, useSignalEffect } from '@preact/signals-react';\nimport { forwardRef } from 'react';\n\ntype NumberInputProps = { … };\n\nexport const NumberInput = forwardRef<HTMLInputElement, NumberInputProps>(\n  ({ value, ...props }, ref) => {\n    // Update signal if value is not `NaN`\n    const input = useSignal<string | number>('');\n    useSignalEffect(() => {\n      if (!Number.isNaN(value.value)) {\n        input.value = value.value === undefined ? '' : value.value;\n      }\n    });\n    return <input {...props} ref={ref} type=\"number\" value={input.value} />;\n  }\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Instantiating FormError for Error Handling in TypeScript (TSX)\nDESCRIPTION: This snippet shows how to instantiate a FormError object for different form error scenarios, supporting generic typing with Values. The usage examples include providing a generic form error message, associating detailed errors, or specifying only field errors. Dependencies include TypeScript with support for TSX syntax and a FormError class that inherits from Error. Key parameters are the generic Values, a message string, and errors object(s). Inputs are the message or errors, and the output is a constructed FormError instance suitable for form validation error handling.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FormError.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// For general errors\\nnew FormError<Values>(message);\\n\\n// For general and field errors\\nnew FormError<Values>(message, errors);\\n\\n// For field errors only\\nnew FormError<Values>(errors);\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Field Arrays with Dynamic Names in Preact/React - TypeScript\nDESCRIPTION: For React or Preact, this code shows mapping over fieldArray.items.value to render nested field arrays, dynamically constructing field names. Facilitates deep nesting and dynamic fields with correct naming. Dependencies: Modular Forms, React or Preact.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/field-arrays.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<FieldArray name=\"todos\">\n  {(fieldArray) =>\n    fieldArray.items.value.map((item, index) => (\n      <div key={item}>\n        <Field name={`${fieldArray.name}.${index}.label`}>\n          {(field, props) => <input {...props} type=\"text\" />}\n        </Field>\n        <Field name={`${fieldArray.name}.${index}.deadline`}>\n          {(field, props) => <input {...props} type=\"date\" />}\n        </Field>\n      </div>\n    ))\n  }\n</FieldArray>\n```\n\n----------------------------------------\n\nTITLE: Creating Pattern Validation Function in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a validation function that checks the pattern of a string. It takes a RegExp requirement and an error message as parameters, and returns a validation function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/pattern.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = pattern(requirement, error);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Form with useForm Hook in React (TSX)\nDESCRIPTION: Shows how to initialize a form within a React component using the `useForm` hook imported from `@modular-forms/react`. It defines the `LoginForm` type and destructures the return value into the form store (`loginForm`) and form components (`Form`, `Field`, `FieldArray`).\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/create-your-form.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useForm } from '@modular-forms/react';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field, FieldArray }] = useForm<LoginForm>();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Phone Number Transformer for Solid (TS)\nDESCRIPTION: Defines a reusable `toPhoneNumber` transformation function for Solid applications using `toCustom` from '@modular-forms/solid'. This function takes raw input, removes non-digit characters, and formats the remaining digits into a US phone number format (e.g., '(123) 456-7890'). The transformation behavior is configured via the passed `TransformOptions`.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { toCustom, TransformOptions } from '@modular-forms/solid';\n\nexport function toPhoneNumber(options: TransformOptions) {\n  return toCustom<string>((value) => {\n    // Remove everything that is not a number\n    const numbers = value.replace(/\\D/g, '');\n\n    // Continue if string is not empty\n    if (numbers) {\n      // Extract area, first 3 and last 4\n      const [, area, first3, last4] = numbers.match(\n        /(\\d{0,3})(\\d{0,3})(\\d{0,4})/\n      );\n\n      // If length or first 3 is less than 1\n      if (first3.length < 1) {\n        return `(${area}`;\n      }\n\n      // If length or last 4 is less than 1\n      if (last4.length < 1) {\n        return `(${area}) ${first3}`;\n      }\n\n      // Otherwise return full US number\n      return `(${area}) ${first3}-${last4}`;\n    }\n\n    // Otherwise return an emty string\n    return '';\n  }, options);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Boolean Checkbox with Modular Forms - Solid/Qwik/Preact - TSX\nDESCRIPTION: This code snippet illustrates a checkbox form field to represent a boolean value (true/false) using Modular Forms in Solid, Qwik, or Preact. It employs the <Field> component with 'type=\"boolean\"' and leverages field-state binding for the checked property. Requires Modular Forms library, and is framework-agnostic among the listed ones. 'field' manages the state, and 'props' spreads relevant input attributes. Expects no initial value or a boolean. Output is a user-checked boolean.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/special-inputs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\n<Field name=\"cookies\" type=\"boolean\">\n  {(field, props) => (\n    <label>\n      <input {...props} type=\"checkbox\" checked={field.value} />\n      Yes, I want cookies\n    </label>\n  )}\n</Field>\n```\n```\n\n----------------------------------------\n\nTITLE: Throwing Field Errors Only - Modular Forms - TypeScript\nDESCRIPTION: This example shows how to throw field-specific errors without a general error message using the FormError class. Passing only a field-to-message mapping, the error is attached directly to the field's state. Dependencies: compatible Modular Forms package for your framework, TypeScript. Inputs are form values; output is the field-specific error shown by the form UI.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/throw-form-errors.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nif (error) {\n  throw new FormError<LoginForm>({\n    email: 'This email has been blacklisted.',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Text Input with Qwik - TypeScript\nDESCRIPTION: Shows how to set up a controlled text input in Qwik by directly assigning the field's value to the input element. The Field component provides controlled field management, and field/props are used for context and spreading properties. Expected usage inside a functional component.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/controlled-fields.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<Field name=\"firstName\">\n  {(field, props) => <input {...props} type=\"text\" value={field.value} />}\n</Field>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining maxLength Validation Function in TypeScript\nDESCRIPTION: Creates a validation function that checks if the length of a string or array is not greater than the specified maximum length. It takes a requirement (max length) and an error message as parameters.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/maxLength.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst validate = maxLength(requirement, error);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Form with createForm in Solid (TSX)\nDESCRIPTION: Illustrates the basic usage of the `createForm` primitive from `@modular-forms/solid` to initialize form state in a Solid application. It defines a `LoginForm` type and destructures the returned tuple into the form store (`loginForm`) and an object containing `Form`, `Field`, and `FieldArray` components.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/create-your-form.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createForm } from '@modular-forms/solid';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field, FieldArray }] = createForm<LoginForm>();\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Forms and Fields with modular-forms in TypeScript\nDESCRIPTION: Shows how to validate an entire form, a single field or field array, or multiple fields/field arrays using the validate function from modular-forms. Dependencies include the modular-forms library and a properly configured FormStore object. Parameters include the form instance, the field or field array names, and an options object to control active field selection and focus behavior. Inputs are the form object and relevant identifiers; outputs are the result of the validation action, including error focus if applicable. Note that only active fields are validated by default, and focusing on the first error can be toggled via options.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/validate.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Validate the entire form\nvalidate(form, options);\n\n// Validate a single field or field array\nvalidate(form, name, options);\n\n// Validate several fields and field arrays\nvalidate(form, names, options);\n```\n\n----------------------------------------\n\nTITLE: Basic Form Component Usage in Preact JSX (TSX)\nDESCRIPTION: Shows the fundamental JSX usage of the `Form` component obtained from the `useForm` hook in a Preact application. The `Form` component is rendered to wrap the form's elements.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/create-your-form.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useForm } from '@modular-forms/preact';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>();\n\n  return <Form></Form>;\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Price Input (Cents to Currency) in SolidJS with Modular Forms\nDESCRIPTION: This snippet demonstrates how to handle currency inputs with Modular Forms in a SolidJS application. It stores the 'price' value in cents internally but displays it in a standard currency format (e.g., dollars or euros) in the input field. The `transform` prop with `toCustom` converts the input value back to cents whenever the 'input' event occurs. `createMemo` is used to derive the display value (dividing by 100) reactively from the field's state.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Field\n  name=\"price\"\n  type=\"number\"\n  transform={toCustom((value) => value && value * 100, {\n    on: 'input',\n  })}\n>\n  {(field, props) => {\n    const getValue = createMemo<number | undefined>((prevValue) =>\n      !Number.isNaN(field.value) ? field.value && field.value / 100 : prevValue\n    );\n    return <input {...props} type=\"number\" value={getValue()} />;\n  }}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Defining Detailed Property Types for Frameworks in TypeScript\nDESCRIPTION: Exports a constant `properties` object containing detailed TypeScript type definitions for refs and event handlers (`onInput`, `onChange`, `onBlur`) tailored for Solid, Qwik, Preact, and React. It leverages custom types like `FieldElement`, `FieldEvent`, `JSX.EventHandler`, `QRL`, `RefCallback`, etc., providing precise type information for use within the `modular-forms` library. This object serves as a source for the documentation components (`<Property />`) used earlier in the file.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldElementProps.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  solid: {\n    ref: {\n      type: {\n        type: 'function',\n        params: [\n          {\n            name: 'element',\n            type: {\n              type: 'custom',\n              name: 'FieldElement',\n              href: '../FieldElement',\n            },\n          },\n        ],\n        return: 'void',\n      },\n    },\n    onInput: {\n      type: {\n        type: 'custom',\n        name: 'JSX.EventHandler',\n        generics: [\n          {\n            type: 'custom',\n            name: 'FieldElement',\n            href: '../FieldElement',\n          },\n          {\n            type: 'custom',\n            name: 'InputEvent',\n          },\n        ],\n      },\n    },\n    onChange: {\n      type: {\n        type: 'custom',\n        name: 'JSX.EventHandler',\n        generics: [\n          {\n            type: 'custom',\n            name: 'FieldElement',\n            href: '../FieldElement',\n          },\n          {\n            type: 'custom',\n            name: 'Event',\n          },\n        ],\n      },\n    },\n    onBlur: {\n      type: {\n        type: 'custom',\n        name: 'JSX.EventHandler',\n        generics: [\n          {\n            type: 'custom',\n            name: 'FieldElement',\n            href: '../FieldElement',\n          },\n          {\n            type: 'custom',\n            name: 'FocusEvent',\n          },\n        ],\n      },\n    },\n  },\n  qwik: {\n    ref: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'function',\n            params: [\n              {\n                name: 'element',\n                type: {\n                  type: 'custom',\n                  name: 'FieldElement',\n                  href: '../FieldElement',\n                },\n              },\n            ],\n            return: 'void',\n          },\n        ],\n      },\n    },\n    onInput$: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'function',\n            params: [\n              {\n                name: 'event',\n                type: {\n                  type: 'custom',\n                  name: 'FieldEvent',\n                  href: '../FieldEvent',\n                },\n              },\n              {\n                name: 'element',\n                type: {\n                  type: 'custom',\n                  name: 'FieldElement',\n                  href: '../FieldElement',\n                },\n              },\n            ],\n            return: 'void',\n          },\n        ],\n      },\n    },\n    onChange$: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'function',\n            params: [\n              {\n                name: 'event',\n                type: {\n                  type: 'custom',\n                  name: 'FieldEvent',\n                  href: '../FieldEvent',\n                },\n              },\n              {\n                name: 'element',\n                type: {\n                  type: 'custom',\n                  name: 'FieldElement',\n                  href: '../FieldElement',\n                },\n              },\n            ],\n            return: 'void',\n          },\n        ],\n      },\n    },\n    onBlur$: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'function',\n            params: [\n              {\n                name: 'event',\n                type: {\n                  type: 'custom',\n                  name: 'FieldEvent',\n                  href: '../FieldEvent',\n                },\n              },\n              {\n                name: 'element',\n                type: {\n                  type: 'custom',\n                  name: 'FieldElement',\n                  href: '../FieldElement',\n                },\n              },\n            ],\n            return: 'void',\n          },\n        ],\n      },\n    },\n  },\n  preact: {\n    onInput: {\n      type: {\n        type: 'custom',\n        name: 'JSX.GenericEventHandler',\n        generics: [\n          {\n            type: 'custom',\n            name: 'FieldElement',\n            href: '../FieldElement',\n          },\n        ],\n      },\n    },\n    onChange: {\n      type: {\n        type: 'custom',\n        name: 'JSX.GenericEventHandler',\n        generics: [\n          {\n            type: 'custom',\n            name: 'FieldElement',\n            href: '../FieldElement',\n          },\n        ],\n      },\n    },\n    onBlur: {\n      type: {\n        type: 'custom',\n        name: 'JSX.FocusEventHandler',\n        generics: [\n          {\n            type: 'custom',\n            name: 'FieldElement',\n            href: '../FieldElement',\n          },\n        ],\n      },\n    },\n  },\n  preactOrReact: {\n    ref: {\n      type: {\n        type: 'custom',\n        name: 'RefCallback',\n        generics: [\n          {\n            type: 'custom',\n            name: 'FieldElement',\n            href: '../FieldElement',\n          },\n        ],\n      },\n    },\n  },\n  react: {\n    onChange: {\n      type: {\n        type: 'custom',\n        name: 'ChangeEventHandler',\n        generics: [\n          {\n            type: 'custom',\n            name: 'FieldElement',\n            href: '../FieldElement',\n          },\n        ],\n      },\n    },\n    onBlur: {\n      type: {\n        type: 'custom',\n        name: 'FocusEventHandler',\n        generics: [\n          {\n            type: 'custom',\n            name: 'FieldElement',\n            href: '../FieldElement',\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Single Select with Modular Forms - Solid - TSX\nDESCRIPTION: This code example demonstrates a single-selection dropdown (<select>) using Modular Forms with Solid. It utilizes <For> to loop through options, setting the 'selected' attribute based on field.value. Requires Modular Forms and Solid. Input: option list; Output: selected string value as form field.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/special-inputs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\n<Field name=\"framework\">\n  {(field, props) => (\n    <select {...props}>\n      <For\n        each={[\n          { label: 'Preact', value: 'preact' },\n          { label: 'Solid', value: 'solid' },\n          { label: 'Qwik', value: 'qwik' },\n        ]}\n      >\n        {({ label, value }) => (\n          <option value={value} selected={field.value === value}>\n            {label}\n          </option>\n        )}\n      </For>\n    </select>\n  )}\n</Field>\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Field Values with getValue in TypeScript\nDESCRIPTION: The getValue function retrieves a field's value from a form. It takes a form store, field name, and optional configuration to filter values based on field states like active, touched, dirty, and valid.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/getValue.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = getValue(form, name, options);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Form with useForm Hook in Preact (TSX)\nDESCRIPTION: Demonstrates initializing a form in a Preact application using the `useForm` hook from `@modular-forms/preact`. Similar to the React/Qwik versions, it takes the form type (`LoginForm`) and returns the form store (`loginForm`) and components (`Form`, `Field`, `FieldArray`).\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/create-your-form.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useForm } from '@modular-forms/preact';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field, FieldArray }] = useForm<LoginForm>();\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Single Select with Modular Forms - React - TSX\nDESCRIPTION: This example provides a single-select dropdown in Modular Forms with React. The value of <select> is explicitly controlled with 'value={field.value.value || \\\"\\\"}', while options are mapped with their keys and values. Libraries required: Modular Forms, React. Inputs: label/value pairs. Output: selected value string.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/special-inputs.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\n<Field name=\"framework\">\n  {(field, props) => (\n    <select {...props} value={field.value.value || ''}>\n      {[\n        { label: 'Preact', value: 'preact' },\n        { label: 'Solid', value: 'solid' },\n        { label: 'Qwik', value: 'qwik' },\n      ].map(({ label, value }) => (\n        <option key={value} value={value}>\n          {label}\n        </option>\n      ))}\n    </select>\n  )}\n</Field>\n```\n```\n\n----------------------------------------\n\nTITLE: Transforming Price Input (Cents to Currency) in Preact with Modular Forms\nDESCRIPTION: This code example illustrates handling currency inputs with Modular Forms in a Preact application, using Preact Signals. It maintains the 'price' in cents. The `transform` prop employs `toCustom` to convert the input value back to cents on the 'input' event. A `useSignal` hook manages the input's display value, and `useSignalEffect` listens for changes in the field's signal value (`field.value.value`), updating the display signal by dividing the cents value by 100.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Field\n  name=\"price\"\n  type=\"number\"\n  transform={toCustom((value) => value && value * 100, {\n    on: 'input',\n  })}\n>\n  {(field, props) => {\n    const value = useSignal<number | undefined>(undefined);\n    useSignalEffect(() => {\n      if (!Number.isNaN(field.value.value)) {\n        value.value = field.value.value && field.value.value / 100;\n      }\n    });\n    return <input {...props} type=\"number\" value={value} />;\n  }}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Exporting Framework-Aware FieldValue Type Definitions (JavaScript)\nDESCRIPTION: This snippet exports a JavaScript object named properties containing two configurations for FieldValue types: one for Solid, Preact, or React, and one for Qwik. Each entry details the allowed types FieldValue may take, including primitives (string, number, boolean), objects (File, Date), arrays, and special framework-dependent wrappers (NoSerialize for Blob and File in Qwik). The distinction enables framework-specific handling for advanced form values. No external dependencies are required except for consistent TypeScript/JavaScript support in the target framework. The object structure is intended for lookups when rendering or validating form fields, with no runtime logic constraints applied.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldValue.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const properties = {\n  solidPreactOrReact: {\n    FieldValue: {\n      type: [\n        'string',\n        { type: 'array', item: 'string' },\n        'number',\n        'boolean',\n        'null',\n        'undefined',\n        { type: 'custom', name: 'File' },\n        {\n          type: 'array',\n          item: {\n            type: 'custom',\n            name: 'File',\n          },\n        },\n        { type: 'custom', name: 'Date' },\n      ],\n    },\n  },\n  qwik: {\n    FieldValue: {\n      type: [\n        'string',\n        { type: 'array', item: 'string' },\n        'number',\n        'boolean',\n        'null',\n        'undefined',\n        {\n          type: 'custom',\n          name: 'NoSerialize',\n          generics: [{ type: 'custom', name: 'Blob' }],\n        },\n        {\n          type: 'custom',\n          name: 'NoSerialize',\n          generics: [{ type: 'custom', name: 'File' }],\n        },\n        {\n          type: 'array',\n          item: {\n            type: 'custom',\n            name: 'NoSerialize',\n            generics: [{ type: 'custom', name: 'Blob' }],\n          },\n        },\n        {\n          type: 'array',\n          item: {\n            type: 'custom',\n            name: 'NoSerialize',\n            generics: [{ type: 'custom', name: 'File' }],\n          },\n        },\n        { type: 'custom', name: 'Date' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Multi-Select Dropdown with Modular Forms - Qwik - TSX\nDESCRIPTION: This example demonstrates a multi-select <select> using Modular Forms in Qwik. The select is set to 'multiple'; each option's 'selected' reflects inclusion in an array field. Modular Forms and Qwik are required. Input: list of options; output: array of selected strings.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/special-inputs.mdx#2025-04-23_snippet_11\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\n<Field name=\"framework\" type=\"string[]\">\n  {(field, props) => (\n    // Set \"multiple\" to \"true\"\n    <select {...props} multiple>\n      {[\n        { label: 'Preact', value: 'preact' },\n        { label: 'Solid', value: 'solid' },\n        { label: 'Qwik', value: 'qwik' },\n      ].map(({ label, value }) => (\n        <option\n          key={value}\n          value={value}\n          selected={field.value?.includes(value)}\n        >\n          {label}\n        </option>\n      ))}\n    </select>\n  )}\n</Field>\n```\n```\n\n----------------------------------------\n\nTITLE: Clearing Form Field Errors in TypeScript\nDESCRIPTION: This function clears the error of a specified field or field array in a form. It takes two parameters: the form store and the name of the field or field array.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/clearError.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclearError(form, name);\n```\n\n----------------------------------------\n\nTITLE: Adding Fields Using Modular Forms in Preact - TypeScript\nDESCRIPTION: This Preact example imports useForm from '@modular-forms/preact' and demonstrates a login form with email and password fields. Each Field uses a render function to connect state and props to a standard input. Inputs are validated and controlled based on type definitions. The snippet requires Preact, the Modular Forms Preact package, and TypeScript. Inputs are email and password strings, with output as a fully typed form submission.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/add-fields-to-form.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useForm } from '@modular-forms/preact';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>();\n\n  return (\n    <Form>\n      <Field name=\"email\">\n        {(field, props) => <input {...props} type=\"email\" />}\n      </Field>\n      <Field name=\"password\">\n        {(field, props) => <input {...props} type=\"password\" />}\n      </Field>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Single Select with Modular Forms - Preact - TSX\nDESCRIPTION: This code showcases a single-selection dropdown menu built with Modular Forms and Preact. It uses 'selected={field.value.value === value}' for proper data binding. Depends on Modular Forms, Preact. Input: array of label/value; output: selected option string.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/special-inputs.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\n<Field name=\"framework\">\n  {(field, props) => (\n    <select {...props}>\n      {[\n        { label: 'Preact', value: 'preact' },\n        { label: 'Solid', value: 'solid' },\n        { label: 'Qwik', value: 'qwik' },\n      ].map(({ label, value }) => (\n        <option\n          key={value}\n          value={value}\n          selected={field.value.value === value}\n        >\n          {label}\n        </option>\n      ))}\n    </select>\n  )}\n</Field>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing TextInput Component in SolidJS\nDESCRIPTION: A reusable text input component for SolidJS with support for labels, validation errors, and accessibility attributes. Uses splitProps to separate input-specific properties from other component props.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/input-components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { JSX, splitProps } from 'solid-js';\n\ntype TextInputProps = {\n  name: string;\n  type: 'text' | 'email' | 'tel' | 'password' | 'url' | 'date';\n  label?: string;\n  placeholder?: string;\n  value: string | undefined;\n  error: string;\n  required?: boolean;\n  ref: (element: HTMLInputElement) => void;\n  onInput: JSX.EventHandler<HTMLInputElement, InputEvent>;\n  onChange: JSX.EventHandler<HTMLInputElement, Event>;\n  onBlur: JSX.EventHandler<HTMLInputElement, FocusEvent>;\n};\n\nexport function TextInput(props: TextInputProps) {\n  const [, inputProps] = splitProps(props, ['value', 'label', 'error']);\n  return (\n    <div>\n      {props.label && (\n        <label for={props.name}>\n          {props.label} {props.required && <span>*</span>}\n        </label>\n      )}\n      <input\n        {...inputProps}\n        id={props.name}\n        value={props.value || ''}\n        aria-invalid={!!props.error}\n        aria-errormessage={`${props.name}-error`}\n      />\n      {props.error && <div id={`${props.name}-error`}>{props.error}</div>}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Form Components in Preact/React (TSX)\nDESCRIPTION: Illustrates an alternative destructuring pattern for the `useForm` hook applicable in both Preact and React. It mirrors the Solid and Qwik examples by skipping the form store (`const [, Login] = ...`) and renaming the component object (e.g., to `Login`, `Register`) for better organization when handling multiple forms on a page.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/create-your-form.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App() {\n  const [, Login] = useForm<LoginForm>();\n  const [, Register] = useForm<RegisterForm>();\n\n  return (\n    <>\n      <Login.Form></Login.Form>\n      <Register.Form></Register.Form>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Array of Checkboxes with Modular Forms - React - TSX\nDESCRIPTION: This example renders an array of checkbox inputs using Modular Forms in React, with boolean casting in 'checked' via '!!field.value.value?.includes(value)'. It maps label/value pairs and binds the form value as an array to 'fruits'. Dependencies: Modular Forms, React. Input: fruit list; Output: array of selected strings.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/special-inputs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\n{\n  [\n    { label: 'Bananas', value: 'bananas' },\n    { label: 'Apples', value: 'apples' },\n    { label: 'Grapes', value: 'grapes' },\n  ].map(({ label, value }) => (\n    <Field key={value} name=\"fruits\" type=\"string[]\">\n      {(field, props) => (\n        <label>\n          <input\n            {...props}\n            type=\"checkbox\"\n            value={value}\n            checked={!!field.value.value?.includes(value)}\n          />\n          {label}\n        </label>\n      )}\n    </Field>\n  ));\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using setValue Function in TypeScript\nDESCRIPTION: This snippet demonstrates the basic usage of the setValue function. It takes four parameters: form, name, value, and options. The function sets the value of a specified field and can optionally handle field states like touched, dirty, validation, and focus.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/setValue.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetValue(form, name, value, options);\n```\n\n----------------------------------------\n\nTITLE: Rendering Array of Checkboxes with Modular Forms - Solid - TSX\nDESCRIPTION: This snippet demonstrates how to render multiple checkbox inputs representing a string array using Modular Forms in Solid. It uses <For> for dynamic iteration, and each <Field> is provided with a name ('fruits') and type ('string[]'), binding 'checked' to the array containment. Requires Modular Forms and SolidJS. Inputs are label/value pairs; output is an array of checked values.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/special-inputs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\n<For\n  each={[\n    { label: 'Bananas', value: 'bananas' },\n    { label: 'Apples', value: 'apples' },\n    { label: 'Grapes', value: 'grapes' },\n  ]}\n>\n  {({ label, value }) => (\n    <Field name=\"fruits\" type=\"string[]\">\n      {(field, props) => (\n        <label>\n          <input\n            {...props}\n            type=\"checkbox\"\n            value={value}\n            checked={field.value?.includes(value)}\n          />\n          {label}\n        </label>\n      )}\n    </Field>\n  )}\n</For>\n```\n```\n\n----------------------------------------\n\nTITLE: Resetting Form State with Modular Forms Module in TypeScript\nDESCRIPTION: These code snippets demonstrate how to use the `reset` function to reset the entire form, a single field, or multiple fields/field arrays within the Modular Forms library. The functions accept a `form` instance and optional `name` or `names` parameters to target specific parts of the form. The `options` object allows customization, such as providing new initial values, controlling which states (like errors, touched, or dirty flags) are reset or preserved, and specifying whether to retain elements like response or submit count. Required dependencies include the Modular Forms library and appropriate form creation via `createForm` or `useForm` primitives/hooks. The expected output is the form state being reset according to the applied parameters, but any constraints on resetting must match the configuration options specified.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/reset.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Reset the entire form\nreset(form, options);\n\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Reset a single field or field array\nreset(form, name, options);\n\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Reset several fields and field arrays\nreset(form, names, options);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe Forms with Modular Forms in React (TypeScript)\nDESCRIPTION: Shows how to define a form's data structure (`LoginForm`), create the form state using the `useFormStore` hook, and pass this state as a type-safe prop (`FormStore<LoginForm>`) to a component responsible for rendering the form using `@modular-forms/react`. The `Form` and `Field` components ensure type safety.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/typescript.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form, type FormStore, Field, useFormStore } from '@modular-forms/react';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n}\n\nexport function LoginPage() {\n  const loginForm = useFormStore<LoginForm>();\n  return <FormContent loginForm={loginForm} />\n}\n\ntype FormContentProps {\n  loginForm: FormStore<LoginForm>;\n}\n\nfunction FormContent({ loginForm }: FormContentProps) {\n  return (\n    <Form of={loginForm}>\n      <Field of={loginForm} name=\"email\">\n        {(field, props) => <input {...props} type=\"email\" />}\n      </Field>\n      <Field of={loginForm} name=\"password\">\n        {(field, props) => <input {...props} type=\"password\" />}\n      </Field>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Validation Function with zodForm$ in Qwik - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to generate a validation function for a form schema using the zodForm$ utility from Modular Forms with Qwik. The validate constant becomes a function that applies the Zod schema validation logic to form values. The only dependency is the presence of a valid Zod schema object as input; zodForm$ returns a validate function matching the expected signature. The primary parameter is schema, which should be a ZodType instance, and the output is a validate function capable of producing form errors for given values. There are no additional dependencies or constraints outlined in this example.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/zodForm$.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = zodForm$(schema);\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Form Fields Using Dot Notation in React (TSX)\nDESCRIPTION: This TSX code snippet demonstrates how to create an input form field for a nested property using dot notation in the field name. It leverages a Field component, typically from a React form library, to bind the input to the nested 'name.first' property. Dependencies include React and a compatible form library (implicit from the usage of 'Field'). The field expects to receive form context and proper props for rendering, returning an input for user entry.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/nested-fields.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Field name=\\\"name.first\\\">\\n  {(field, props) => <input {...props} type=\\\"text\\\" />}\\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Inserting Items into Field Array in TypeScript\nDESCRIPTION: This function inserts a new item into a field array at a specified index or at the end if no index is provided. The function takes a form store, field name, and options object that can specify the insertion position and value.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/insert.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninsert(form, name, options);\n```\n\n----------------------------------------\n\nTITLE: Throwing General Form Errors on the Server - Qwik with Modular Forms - TypeScript\nDESCRIPTION: This server-side code uses formAction$ in a Qwik module to handle login form submissions. It throws a custom FormError if an error occurs to expose a user-friendly error message instead of leaking sensitive server-side details. Dependencies: @modular-forms/qwik, valibot, TypeScript. Expects validated login data and only exposes FormError-derived messages to the response.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/throw-form-errors.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const useFormAction = formAction$<LoginForm>((values) => {\n  if (error) {\n    throw new FormError<LoginForm>('An error has occurred.');\n  }\n}, valiForm$(LoginSchema));\n```\n\n----------------------------------------\n\nTITLE: Throwing General Form Errors - Preact with Modular Forms - TypeScript\nDESCRIPTION: This code snippet shows how to handle general form errors in a Preact application using Modular Forms. The useForm hook manages form state, and FormError is thrown in the submit handler to display a general error message via the response state. Dependencies: @modular-forms/preact, TypeScript. Inputs are login credentials; outputs are error messages displayed to the user. Designed for client-side validation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/throw-form-errors.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormError, SubmitHandler, useForm } from '@modular-forms/preact';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>();\n\n  const handleSubmit: SubmitHandler<LoginForm> = (values, event) => {\n    if (error) {\n      throw new FormError<LoginForm>('An error has occurred.');\n    }\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <div>…</div>\n      <div>{loginForm.response.message}</div>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Kobalte Checkbox Component in SolidJS\nDESCRIPTION: This code defines a reusable `Checkbox` component for SolidJS applications using Kobalte's `Checkbox` core component and its parts (`Input`, `Control`, `Indicator`, `Label`). It accepts standard checkbox props (`name`, `label`, `value`, `checked`, `required`, `disabled`) and form-related props (`error`, event handlers). It uses `splitProps` for prop management and sets the `validationState` based on the `error` prop. A placeholder for an SVG checkmark icon is included within the `Kobalte.Indicator`.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/kobalte.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Checkbox as Kobalte } from '@kobalte/core';\nimport { type JSX, splitProps } from 'solid-js';\n\ntype CheckboxProps = {\n  name: string;\n  label: string;\n  value?: string | undefined;\n  checked: boolean | undefined;\n  error: string;\n  required?: boolean | undefined;\n  disabled?: boolean | undefined;\n  ref: (element: HTMLInputElement) => void;\n  onInput: JSX.EventHandler<HTMLInputElement, InputEvent>;\n  onChange: JSX.EventHandler<HTMLInputElement, Event>;\n  onBlur: JSX.EventHandler<HTMLInputElement, FocusEvent>;\n};\n\nexport function Checkbox(props: CheckboxProps) {\n  const [rootProps, inputProps] = splitProps(\n    props,\n    ['name', 'value', 'checked', 'required', 'disabled'],\n    ['ref', 'onInput', 'onChange', 'onBlur']\n  );\n  return (\n    <Kobalte.Root\n      {...rootProps}\n      validationState={props.error ? 'invalid' : 'valid'}\n    >\n      <Kobalte.Input {...inputProps} />\n      <Kobalte.Control>\n        <Kobalte.Indicator>{/* Add SVG icon here */}</Kobalte.Indicator>\n      </Kobalte.Control>\n      <Kobalte.Label>{props.label}</Kobalte.Label>\n    </Kobalte.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Validating a Login Form with Valibot in Qwik (TypeScript)\nDESCRIPTION: This Qwik example uses Modular Forms and Valibot to implement validation in a login form. It imports form hooks from '@modular-forms/qwik' and defines a schema that ensures email and password are required, using custom error messages. The form is initialized with empty values using a Qwik route loader, and validation takes place via 'valiForm$'. The structure supports real-time and submission validation, returning errors inline. Dependencies include Qwik, Modular Forms for Qwik, and Valibot.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/validate-your-fields.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { $, component$ } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\nimport { type InitialValues, useForm, valiForm$ } from '@modular-forms/qwik';\nimport * as v from 'valibot';\n\nconst LoginSchema = v.object({\n  email: v.pipe(\n    v.string(),\n    v.nonEmpty('Please enter your email.'),\n    v.email('The email address is badly formatted.')\n  ),\n  password: v.pipe(\n    v.string(),\n    v.nonEmpty('Please enter your password.'),\n    v.minLength(8, 'You password must have 8 characters or more.')\n  ),\n});\n\ntype LoginForm = v.InferInput<typeof LoginSchema>;\n\nexport const useFormLoader = routeLoader$<InitialValues<LoginForm>>(() => ({\n  email: '',\n  password: '',\n}));\n\nexport default component$(() => {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>({\n    loader: useFormLoader(),\n    validate: valiForm$(LoginSchema),\n  });\n\n  return (\n    <Form>\n      <Field name=\"email\">\n        {(field, props) => (\n          <>\n            <input {...props} type=\"email\" required />\n            {field.error && <div>{field.error}</div>}\n          </>\n        )}\n      </Field>\n      <Field name=\"password\">\n        {(field, props) => (\n          <>\n            <input {...props} type=\"password\" required />\n            {field.error && <div>{field.error}</div>}\n          </>\n        )}\n      </Field>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using Dot Notation for Field Names in Solid - TypeScript\nDESCRIPTION: This snippet demonstrates correct usage of dot notation with a dynamic index via a signal from Solid's For component. Ensures field names update appropriately as array elements are added, removed, or reordered. Used with Modular Forms in Solid; index() is a signal.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/field-arrays.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Field name={`todos.${index()}.label`}>\n  {(field, props) => <input {...props} type=\"text\" />}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Form Errors with getErrors Function in TypeScript\nDESCRIPTION: This snippet demonstrates three ways to use the getErrors function: getting errors for all fields, for a field array, and for specific fields. It showcases the function's flexibility in error retrieval.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/getErrors.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Get errors of each field\nconst errors = getErrors(form, options);\n\n// Get errors of a field array\nconst errors = getErrors(form, name, options);\n\n// Get errors of specific fields\nconst errors = getErrors(form, names, options);\n```\n\n----------------------------------------\n\nTITLE: Controlled Number Input with Qwik - TypeScript\nDESCRIPTION: Defines a Qwik component that controls a number input by tracking changes and only updating the value if not NaN. Utilizes Qwik's useSignal and useTask$ for reactivity, ensuring a consistent and valid input state. Requires @builder.io/qwik, value prop, and an appropriate NumberInputProps definition.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/controlled-fields.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { component$, useTask$, … } from '@builder.io/qwik';\n\ntype NumberInputProps = { … };\n\nexport const NumberInput = component$(\n  ({ value, ...props }: NumberInputProps) => {\n    // Update signal if value is not `NaN`\n    const input = useSignal<number>();\n    useTask$(({ track }) => {\n      if (!Number.isNaN(track(() => value))) {\n        input.value = value;\n      }\n    });\n    return <input {...props} type=\"number\" value={input.value} />;\n  }\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Input Masking in SolidJS with Modular Forms and Solid Primitives\nDESCRIPTION: This example demonstrates integrating input masking with Modular Forms in SolidJS using the `@solid-primitives/input-mask` package. It creates a date input mask ('99/99/9999') using `createInputMask`. This mask function is then applied to the 'date' field via the `transform` prop and the `toCustom` function from Modular Forms, triggering on the 'change' event to format the input value according to the mask.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createForm, FieldEvent, toCustom } from '@modular-forms/solid';\nimport { createInputMask } from '@solid-primitives/input-mask';\n\ntype DateForm = { date: string };\n\nexport default function App() {\n  const [dateForm, { Form, Field }] = createForm<DateForm>();\n  const dateMask = createInputMask<FieldEvent>('99/99/9999');\n\n  return (\n    <Form>\n      <Field\n        name=\"date\"\n        transform={toCustom((_, event) => dateMask(event), { on: 'change' })}\n      >\n        {(field, props) => (\n          <input\n            {...props}\n            type=\"text\"\n            placeholder=\"01/01/2023\"\n            value={field.value}\n          />\n        )}\n      </Field>\n      <button type=\"submit\">Submit</button>ubmit\" />\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Minimum Total File Size with minTotalSize - TypeScript\nDESCRIPTION: This snippet shows how to create a validation function using minTotalSize, which ensures that the combined size of files does not exceed a specific threshold. Dependency: minTotalSize must be imported from the validation module. Parameters include requirement (number, the allowed total size) and error (string, error message). The function returns a validate function usable as a field validator, which accepts an array of File-like objects and returns a string error if validation fails.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/minTotalSize.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst validate = minTotalSize(requirement, error);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Phone Number Transformer for Qwik (TS)\nDESCRIPTION: Defines a reusable `toPhoneNumber` transformation function for Qwik applications using `toCustom$` from '@modular-forms/qwik'. It formats input strings into a US phone number pattern by removing non-digits and applying the structure '(XXX) XXX-XXXX'. The transformation trigger event is specified in the `TransformOptions`.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { toCustom$, TransformOptions } from '@modular-forms/qwik';\n\nexport function toPhoneNumber(options: TransformOptions) {\n  return toCustom$<string>((value) => {\n    // Remove everything that is not a number\n    const numbers = value.replace(/\\D/g, '');\n\n    // Continue if string is not empty\n    if (numbers) {\n      // Extract area, first 3 and last 4\n      const [, area, first3, last4] = numbers.match(\n        /(\\d{0,3})(\\d{0,3})(\\d{0,4})/\n      );\n\n      // If length or first 3 is less than 1\n      if (first3.length < 1) {\n        return `(${area}`;\n      }\n\n      // If length or last 4 is less than 1\n      if (last4.length < 1) {\n        return `(${area}) ${first3}`;\n      }\n\n      // Otherwise return full US number\n      return `(${area}) ${first3}-${last4}`;\n    }\n\n    // Otherwise return an emty string\n    return '';\n  }, options);\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Number Input with Solid - TypeScript\nDESCRIPTION: Provides a modular NumberInput component in Solid that only updates its displayed value when the value isn't NaN, preventing invalid input removal. Uses createMemo to cache a usable numeric value and passes it to an input of type number. Dependencies: solid-js/createMemo, TypeScript type for props.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/controlled-fields.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { createMemo } from 'solid-js';\n\ntype NumberInputProps = { … };\n\nexport function NumberInput(props: NumberInputProps) {\n  // Update memo if value is not `NaN`\n  const getValue = createMemo<number | undefined>((prevValue) =>\n    !Number.isNaN(props.value) ? props.value : prevValue\n  );\n  return <input {...props} type=\"number\" value={getValue()} />;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Transformation Function with toCustom in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the toCustom function to create a custom transformation function for form fields. It takes an action and options as parameters and returns a transform function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/toCustom.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst transform = toCustom(action, options);\n```\n\n----------------------------------------\n\nTITLE: Controlled Number Input with Preact - TypeScript\nDESCRIPTION: Implements a controlled number input in Preact by utilizing signals and signal effects to conditionally set the value if it's not NaN. ForwardRef allows parent refs, and useSignal maintains local value state. Dependencies: @preact/signals, @preact/compat for forwardRef, custom NumberInputProps.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/controlled-fields.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { useSignal, useSignalEffect } from '@preact/signals';\nimport { forwardRef } from 'preact/compat';\n\ntype NumberInputProps = { … };\n\nexport const NumberInput = forwardRef<HTMLInputElement, NumberInputProps>(\n  ({ value, ...props }, ref) => {\n    // Update signal if value is not `NaN`\n    const input = useSignal<number | undefined>(undefined);\n    useSignalEffect(() => {\n      if (!Number.isNaN(value.value)) {\n        input.value = value.value;\n      }\n    });\n    return <input {...props} ref={ref} type=\"number\" value={input} />;\n  }\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe Forms with Modular Forms in Preact (TypeScript)\nDESCRIPTION: Illustrates defining a form structure (`LoginForm`), utilizing the `useFormStore` hook to create the form state, and passing the state as a type-safe prop (`FormStore<LoginForm>`) to a child component for rendering using `@modular-forms/preact`. Type safety is enforced through the `Form` and `Field` components.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/typescript.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form, type FormStore, Field, useFormStore } from '@modular-forms/preact';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n}\n\nexport function LoginPage() {\n  const loginForm = useFormStore<LoginForm>();\n  return <FormContent loginForm={loginForm} />\n}\n\ntype FormContentProps {\n  loginForm: FormStore<LoginForm>;\n}\n\nfunction FormContent({ loginForm }: FormContentProps) {\n  return (\n    <Form of={loginForm}>\n      <Field of={loginForm} name=\"email\">\n        {(field, props) => <input {...props} type=\"email\" />}\n      </Field>\n      <Field of={loginForm} name=\"password\">\n        {(field, props) => <input {...props} type=\"password\" />}\n      </Field>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Custom Validation Function\nDESCRIPTION: Defines the types for the requirement function and the returned validate function. The requirement function takes a Maybe<FieldValue> and returns a MaybePromise<boolean>. The validate function returns a Promise<string>.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/custom$.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  requirement: {\n    type: {\n      type: 'function',\n      params: [\n        {\n          name: 'value',\n          type: {\n            type: 'custom',\n            name: 'Maybe',\n            href: '../Maybe',\n            generics: [\n              { type: 'custom', name: 'FieldValue', href: '../FieldValue' },\n            ],\n          },\n        },\n      ],\n      return: {\n        type: 'custom',\n        name: 'MaybePromise',\n        href: '../MaybePromise',\n        generics: ['boolean'],\n      },\n    },\n  },\n  validate: {\n    type: {\n      type: 'custom',\n      name: 'QRL',\n      generics: [\n        {\n          type: 'function',\n          params: [\n            {\n              name: 'value',\n              type: {\n                type: 'custom',\n                name: 'Maybe',\n                href: '../Maybe',\n                generics: [\n                  {\n                    type: 'custom',\n                    name: 'FieldValue',\n                    href: '../FieldValue',\n                  },\n                ],\n              },\n            },\n          ],\n          return: { type: 'custom', name: 'Promise', generics: ['string'] },\n        },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Dot Notation for Field Names in Qwik/Preact/React - TypeScript\nDESCRIPTION: This snippet shows how to use dot notation for nested field names with a dynamic index in Qwik, React, or Preact. It is essential for keeping field names synchronized with their position in the array. Dependencies include Modular Forms and one of Qwik, React, or Preact.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/field-arrays.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Field name={`todos.${index}.label`}>\n  {(field, props) => <input {...props} type=\"text\" />}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Controlled Date Input with React - TypeScript\nDESCRIPTION: Implements a controlled date input using React and signals-react, converting a potentially numeric or Date value to a formatted string before assigning it to the input. The useComputed hook ensures the input field receives the correct string representation or an empty string. Depends on @preact/signals-react, React/forwardRef, and a proper DateInputProps interface.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/controlled-fields.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { useComputed } from '@preact/signals-react';\nimport { forwardRef } from 'react';\n\ntype DateInputProps = { … };\n\nexport const DateInput = forwardRef<HTMLInputElement, DateInputProps>(\n  ({ value, ...props }, ref) => {\n    // Transform date or number to string\n    const input = useComputed(() =>\n      value.value &&\n      !Number.isNaN(\n        typeof value.value === 'number'\n          ? value.value\n          : value.value.getTime()\n      )\n        ? new Date(value.value).toISOString().split('T', 1)[0]\n        : ''\n    );\n    return <input {...props} ref={ref} type=\"date\" value={input.value} />;\n  }\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Controlled Date Input with Qwik - TypeScript\nDESCRIPTION: Provides a Qwik DateInput component that computes and formats its value as a string for input type date fields. Using useComputed$ ensures derived values are reactive, and the logic validates against NaN. Requires @builder.io/qwik, value prop (date or number), and a corresponding DateInputProps type.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/controlled-fields.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { component$, useComputed$, … } from '@builder.io/qwik';\n\ntype DateInputProps = { … };\n\nexport const DateInput = component$(({ value, ...props }: DateInputProps) => {\n  // Transform date or number to string\n  const input = useComputed$(({ track }) =>\n    track(() => value) &&\n    !Number.isNaN(typeof value === \"number\" ? value : value.getTime())\n      ? new Date(value).toISOString().split(\"T\", 1)[0]\n      : undefined\n  );\n  return <input {...props} type=\"date\" value={input.value} />;\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Controlling Text Input with Solid - TypeScript\nDESCRIPTION: Demonstrates how to create a controlled text input using the Solid framework. By passing the field value or an empty string as the input's value prop, it ensures the input is always controlled even if the value is undefined or null. Requires the Field component from a modular-forms system, and expects field and props objects as function parameters.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/controlled-fields.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<Field name=\"firstName\">\n  {(field, props) => (\n    <input\n      {...props}\n      type=\"text\"\n      // Pass value or empty string\n      value={field.value || ''}\n    />\n  )}\n</Field>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Kobalte Select Component in SolidJS\nDESCRIPTION: This snippet defines a `Select` component in SolidJS using Kobalte's core `Select` primitives (`Root`, `Label`, `HiddenSelect`, `Trigger`, `Value`, `Icon`, `Portal`, `Content`, `Listbox`, `Item`, etc.). It manages the selected option's state using `createSignal` and `createEffect` to synchronize with the `value` prop passed from the form. It accepts an array of `options`, displays validation state based on the `error` prop, and includes placeholders for custom SVG icons.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/kobalte.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Select as Kobalte } from '@kobalte/core';\nimport { type JSX, Show, splitProps, createSignal, createEffect } from 'solid-js';\n\ntype Option = {\n  label: string;\n  value: string;\n};\n\ntype SelectProps = {\n  name: string;\n  label?: string | undefined;\n  placeholder?: string | undefined;\n  options: Option[];\n  value: string | undefined;\n  error: string;\n  required?: boolean | undefined;\n  disabled?: boolean | undefined;\n  ref: (element: HTMLSelectElement) => void;\n  onInput: JSX.EventHandler<HTMLSelectElement, InputEvent>;\n  onChange: JSX.EventHandler<HTMLSelectElement, Event>;\n  onBlur: JSX.EventHandler<HTMLSelectElement, FocusEvent>;\n};\n\nexport function Select(props: SelectProps) {\n  const [rootProps, selectProps] = splitProps(\n    props,\n    ['name', 'placeholder', 'options', 'required', 'disabled'],\n    ['placeholder', 'ref', 'onInput', 'onChange', 'onBlur']\n  );\n  const [getValue, setValue] = createSignal<Option>();\n  createEffect(() => {\n    setValue(props.options.find((option) => props.value === option.value));\n  });\n  return (\n    <Kobalte.Root\n      {...rootProps}\n      multiple={false}\n      value={getValue()}\n      onChange={setValue}\n      optionValue=\"value\"\n      optionTextValue=\"label\"\n      validationState={props.error ? 'invalid' : 'valid'}\n      itemComponent={(props) => (\n        <Kobalte.Item item={props.item}>\n          <Kobalte.ItemLabel>{props.item.textValue}</Kobalte.ItemLabel>\n          <Kobalte.ItemIndicator>\n            {/* Add SVG icon here */}\n          </Kobalte.ItemIndicator>\n        </Kobalte.Item>\n      )}\n    >\n      <Show when={props.label}>\n        <Kobalte.Label>{props.label}</Kobalte.Label>\n      </Show>\n      <Kobalte.HiddenSelect {...selectProps} />\n      <Kobalte.Trigger>\n        <Kobalte.Value<Option>>\n          {(state) => state.selectedOption().label}\n        </Kobalte.Value>\n        <Kobalte.Icon>{/* Add SVG icon here */}</Kobalte.Icon>\n      </Kobalte.Trigger>\n      <Kobalte.Portal>\n        <Kobalte.Content>\n          <Kobalte.Listbox />\n        </Kobalte.Content>\n      </Kobalte.Portal>\n      <Kobalte.ErrorMessage>{props.error}</Kobalte.ErrorMessage>\n    </Kobalte.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FormActionStore Properties\nDESCRIPTION: This code defines the properties of the FormActionStore type, including values, errors, and response. Each property is associated with a custom type and has a corresponding href for further documentation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FormActionStore.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  values: {\n    type: { type: 'custom', name: 'FieldValues', href: '../FieldValues' },\n  },\n  errors: {\n    type: { type: 'custom', name: 'FormErrors', href: '../FormErrors' },\n  },\n  response: {\n    type: { type: 'custom', name: 'FormResponse', href: '../FormResponse' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using the Form Component in Qwik (TypeScript/TSX)\nDESCRIPTION: This snippet shows how to configure the Form component within a Qwik application with specific props including 'action', 'onSubmit$', 'encType', and 'reloadDocument', in addition to the common form props. 'encType' controls how data is sent (urlencoded or as FormData), and 'reloadDocument' manages reload behavior. The properties enable flexible response handling and validation for SSR and client-interactive scenarios. The snippet assumes the Form, FormStore, and related types are available, and illustrates Qwik-specific submission patterns.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/Form.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\\n<Form\\n  of={\\u2026}\\n  action={\\u2026}\\n  onSubmit$={\\u2026}\\n  encType={\\u2026}\\n  reloadDocument={\\u2026}\\n  keepResponse={\\u2026}\\n  shouldActive={\\u2026}\\n  shouldTouched={\\u2026}\\n  shouldDirty={\\u2026}\\n  shouldFocus={\\u2026}\\n>\\n  children\\n</Form>\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining FieldElementProps for Preact\nDESCRIPTION: Specifies the properties required for a field element within a Preact context using a definition list format. It includes `name` (string), `ref` (RefCallback), `onInput` (event handler), `onChange` (event handler), and `onBlur` (event handler). These properties should be spread onto a native HTML input, textarea, or select element.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldElementProps.mdx#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n- `FieldElementProps` <Property type=\"object\" />\n  - `name` <Property type=\"string\" />\n  - `ref` <Property {...properties.preactOrReact.ref} />\n  - `onInput` <Property {...properties.preact.onInput} />\n  - `onChange` <Property {...properties.preact.onChange} />\n  - `onBlur` <Property {...properties.preact.onBlur} />\n```\n\n----------------------------------------\n\nTITLE: Defining a SolidJS RadioGroup Component with Kobalte for Modular Forms\nDESCRIPTION: This TSX code defines a reusable `RadioGroup` component for SolidJS applications using the `@kobalte/core` library. It accepts props common to form inputs, including options for the radio buttons, value, error state, and event handlers (`onInput`, `onChange`, `onBlur`), making it compatible with form libraries like Modular Forms. It uses `splitProps` to separate root and input properties and leverages Kobalte components (`Root`, `Label`, `Item`, `ItemInput`, `ItemControl`, `ItemIndicator`, `ItemLabel`, `ErrorMessage`) to structure the radio group and display validation errors.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/kobalte.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RadioGroup as Kobalte } from '@kobalte/core';\nimport { type JSX, Show, splitProps, For } from 'solid-js';\n\ntype RadioGroupProps = {\n  name: string;\n  label?: string | undefined;\n  options: { label: string; value: string }[];\n  value: string | undefined;\n  error: string;\n  required?: boolean | undefined;\n  disabled?: boolean | undefined;\n  ref: (element: HTMLInputElement | HTMLTextAreaElement) => void;\n  onInput: JSX.EventHandler<HTMLInputElement | HTMLTextAreaElement, InputEvent>;\n  onChange: JSX.EventHandler<HTMLInputElement | HTMLTextAreaElement, Event>;\n  onBlur: JSX.EventHandler<HTMLInputElement | HTMLTextAreaElement, FocusEvent>;\n};\n\nexport function RadioGroup(props: RadioGroupProps) {\n  const [rootProps, inputProps] = splitProps(\n    props,\n    ['name', 'value', 'required', 'disabled'],\n    ['ref', 'onInput', 'onChange', 'onBlur']\n  );\n  return (\n    <Kobalte.Root\n      {...rootProps}\n      validationState={props.error ? 'invalid' : 'valid'}\n    >\n      <Show when={props.label}>\n        <Kobalte.Label>{props.label}</Kobalte.Label>\n      </Show>\n      <div>\n        <For each={props.options}>\n          {(option) => (\n            <Kobalte.Item value={option.value}>\n              <Kobalte.ItemInput {...inputProps} />\n              <Kobalte.ItemControl>\n                <Kobalte.ItemIndicator />\n              </Kobalte.ItemControl>\n              <Kobalte.ItemLabel>{option.label}</Kobalte.ItemLabel>\n            </Kobalte.Item>\n          )}\n        </For>\n      </div>\n      <Kobalte.ErrorMessage>{props.error}</Kobalte.ErrorMessage>\n    </Kobalte.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TextInput Component in Preact with Signals\nDESCRIPTION: A Preact implementation of the TextInput component using Preact Signals for reactive state management. Uses forwardRef to pass ref to the input element and useComputed for derived reactive values.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/input-components.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReadonlySignal, useComputed } from '@preact/signals';\nimport { JSX, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\n\ntype TextInputProps = {\n  name: string;\n  type: 'text' | 'email' | 'tel' | 'password' | 'url' | 'date';\n  label?: string;\n  placeholder?: string;\n  value: ReadonlySignal<string | undefined>;\n  error: string;\n  required?: boolean;\n  ref: Ref<HTMLInputElement>;\n  onInput: JSX.GenericEventHandler<HTMLInputElement>;\n  onChange: JSX.GenericEventHandler<HTMLInputElement>;\n  onBlur: JSX.FocusEventHandler<HTMLInputElement>;\n};\n\nexport const TextInput = forwardRef<HTMLInputElement, TextInputProps>(\n  ({ label, value, error, ...props }, ref) => {\n    const { name, required } = props;\n    return (\n      <div>\n        {label && (\n          <label for={name}>\n            {label} {required && <span>*</span>}\n          </label>\n        )}\n        <input\n          {...props}\n          ref={ref}\n          id={name}\n          value={useComputed(() => value.value || '')}\n          aria-invalid={!!error.value}\n          aria-errormessage={`${name}-error`}\n        />\n        {error.value && <div id={`${name}-error`}>{error}</div>}\n      </div>\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Controlling Text Input with Preact - TypeScript\nDESCRIPTION: Implements a controlled text input in Preact using signals and computed values to manage the field value. Uses the useComputed function to default the value to an empty string when undefined or null, ensuring a consistently controlled input. Dependencies include the Field component and @preact/signals.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/controlled-fields.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<Field name=\"firstName\">\n  {(field, props) => (\n    <input\n      {...props}\n      type=\"text\"\n      // Pass value or empty string\n      value={useComputed(() => field.value.value || '')}\n    />\n  )}\n</Field>\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Multi-Select Dropdown with Modular Forms - Solid - TSX\nDESCRIPTION: This sample implements a multi-select dropdown using Modular Forms in Solid. By setting 'multiple' on <select>, the form field holds an array of selected strings. Uses <For> for options; checks items with 'selected={field.value?.includes(value)}'. Requires Modular Forms, Solid. Input: list of options; output: array of selected values.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/special-inputs.mdx#2025-04-23_snippet_10\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\n<Field name=\"framework\" type=\"string[]\">\n  {(field, props) => (\n    // Set \"multiple\" to \"true\"\n    <select {...props} multiple>\n      <For\n        each={[\n          { label: 'Preact', value: 'preact' },\n          { label: 'Solid', value: 'solid' },\n          { label: 'Qwik', value: 'qwik' },\n        ]}\n      >\n        {({ label, value }) => (\n          <option value={value} selected={field.value?.includes(value)}>\n            {label}\n          </option>\n        )}\n      </For>\n    </select>\n  )}\n</Field>\n```\n```\n\n----------------------------------------\n\nTITLE: Using getValues Function in TypeScript\nDESCRIPTION: Demonstrates three ways to use the getValues function: getting values of all fields, values of a field array, and values of specific fields. The function accepts a form object, optional field names, and configuration options.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/getValues.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Get values of each field\nconst values = getValues(form, options);\n\n// Get values of a field array\nconst values = getValues(form, name, options);\n\n// Get values of specific fields\nconst values = getValues(form, names, options);\n```\n\n----------------------------------------\n\nTITLE: Using the Custom TextField Component with Modular Forms\nDESCRIPTION: This code demonstrates how to integrate the custom `TextField` component (built with Kobalte) within a Modular Forms `Field` component. It passes the field state (`field.value`, `field.error`) and configuration props (`type`, `label`, `placeholder`, `required`) from the Modular Forms field render function to the `TextField`, effectively connecting the UI component to the form's state management.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/kobalte.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Field name=\"email\">\n  {(field, props) => (\n    <TextField\n      {...props}\n      type=\"email\"\n      label=\"Email\"\n      placeholder=\"jane@example.com\"\n      value={field.value}\n      error={field.error}\n      required\n    />\n  )}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Implementing TextInput Component in Qwik\nDESCRIPTION: A Qwik version of the TextInput component that uses component$ for defining the component. Handles form input events with Qwik's event system and maintains accessibility features.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/input-components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, type QRL } from '@builder.io/qwik';\n\ntype TextInputProps = {\n  name: string;\n  type: 'text' | 'email' | 'tel' | 'password' | 'url' | 'date';\n  label?: string;\n  placeholder?: string;\n  value: string | undefined;\n  error: string;\n  required?: boolean;\n  ref: QRL<(element: HTMLInputElement) => void>;\n  onInput$: (event: Event, element: HTMLInputElement) => void;\n  onChange$: (event: Event, element: HTMLInputElement) => void;\n  onBlur$: (event: Event, element: HTMLInputElement) => void;\n};\n\nexport const TextInput = component$(\n  ({ label, error, ...props }: TextInputProps) => {\n    const { name, required } = props;\n    return (\n      <div>\n        {label && (\n          <label for={name}>\n            {label} {required && <span>*</span>}\n          </label>\n        )}\n        <input\n          {...props}\n          id={name}\n          aria-invalid={!!error}\n          aria-errormessage={`${name}-error`}\n        />\n        {error && <div id={`${name}-error`}>{error}</div>}\n      </div>\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable 'toCents' Transformation for React Modular Forms\nDESCRIPTION: This TypeScript function, `toCents`, creates a reusable transformation for handling currency inputs with Modular Forms in React. It employs `toCustom` to implement the conversion from a standard currency format to cents (multiplying by 100). This transformation is specifically configured to trigger on the 'change' event.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  Maybe,\n  MaybeValue,\n  toCustom,\n  TransformField,\n} from '@modular-forms/react';\n\nexport function toCents<\n  TValue extends MaybeValue<number>\n>(): TransformField<TValue> {\n  return toCustom<TValue>(\n    (value) => value && ((value * 100) as Maybe<TValue>),\n    { on: 'change' }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Text Input with React - TypeScript\nDESCRIPTION: Illustrates the controlled text input pattern in React by assigning the signal value or an empty string. Handles environments where the value might be undefined or null and falls back to an empty string for input consistency. Dependencies are Field, signals-react, and a compatible form system.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/controlled-fields.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<Field name=\"firstName\">\n  {(field, props) => (\n    <input\n      {...props}\n      type=\"text\"\n      // Pass value or empty string\n      value={field.value.value || ''}\n    />\n  )}\n</Field>\n```\n```\n\n----------------------------------------\n\nTITLE: Transforming Price Input (Cents to Currency) in React with Modular Forms\nDESCRIPTION: This snippet demonstrates currency input transformation using Modular Forms in a React application, integrated with Preact Signals (@preact/signals-react). The 'price' field stores value in cents. The `transform` prop uses `toCustom` to convert the input back to cents on the 'change' event. `useSignal` manages the input's display value, and `useSignalEffect` updates this display signal by dividing the field's cents value (`field.value.value`) by 100 when it changes.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Field\n  name=\"price\"\n  type=\"number\"\n  transform={toCustom((value) => value && value * 100, {\n    on: 'change',\n  })}\n>\n  {(field, props) => {\n    const value = useSignal<string | number>('');\n    useSignalEffect(() => {\n      if (!Number.isNaN(field.value.value)) {\n        input.value =\n          field.value.value === undefined ? '' : field.value.value / 100;\n      }\n    });\n    return <input {...props} type=\"number\" value={value.value} />;\n  }}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Exporting MaybePromise Property Type Definitions in TypeScript\nDESCRIPTION: This code exports a properties object that defines the structure of the MaybePromise utility's type parameters and return type. It specifies that Value can be any type, and Type can be either Value or a Promise of Value. This configuration is used for type metadata in documentation and potentially in code generation or introspection.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/MaybePromise.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  Value: {\n    type: 'any',\n  },\n  Type: {\n    type: [\n      { type: 'custom', name: 'Value' },\n      {\n        type: 'custom',\n        name: 'Promise',\n        generics: [{ type: 'custom', name: 'Value' }],\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable 'toCents' Transformation for Qwik Modular Forms\nDESCRIPTION: This TypeScript function, `toCents`, provides reusable transformation logic for Modular Forms in Qwik. It uses `toCustom$` to create a transform that converts a standard currency value input into cents by multiplying it by 100. The transformation is set to run on the 'input' event, designed for fields handling monetary values.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Maybe, MaybeValue, TransformField } from '@modular-forms/qwik';\nimport { toCustom$ } from '@modular-forms/qwik';\n\nexport function toCents<\n  TValue extends MaybeValue<number>\n>(): TransformField<TValue> {\n  return toCustom$<TValue>(\n    (value) => value && ((value * 100) as Maybe<TValue>),\n    { on: 'input' }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Transformer in Solid/Qwik/Preact (TSX)\nDESCRIPTION: Demonstrates how to apply the previously defined custom `toPhoneNumber` function to the `transform` prop of a `Field` component in Solid, Qwik, or Preact. The transformation is configured to trigger on the 'input' event.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Field name=\"phone\" transform={toPhoneNumber({ on: 'input' })}>\n  {(field, props) => (\n    <input\n      {...props}\n      type=\"tel\"\n      placeholder=\"(000) 000-0000\"\n      value={field.value}\n    />\n  )}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable 'toCents' Transformation for Preact Modular Forms\nDESCRIPTION: This TypeScript function, `toCents`, defines a reusable input transformation for Modular Forms within a Preact application. It utilizes `toCustom` to wrap the logic for converting a displayed currency value (e.g., dollars/euros) into cents by multiplying by 100. The transformation is configured to execute on the 'input' event.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  Maybe,\n  MaybeValue,\n  toCustom,\n  TransformField,\n} from '@modular-forms/preact';\n\nexport function toCents<\n  TValue extends MaybeValue<number>\n>(): TransformField<TValue> {\n  return toCustom<TValue>(\n    (value) => value && ((value * 100) as Maybe<TValue>),\n    { on: 'input' }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Form Encoding Type for File Uploads and Dates in Qwik\nDESCRIPTION: Shows how to set the `encType` property to `multipart/form-data` on the Modular Forms `Form` component in Qwik. This is essential for forms that handle file uploads or native date objects, ensuring correct data transfer as `Blob` or proper server-side transformation for dates when JavaScript is disabled.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/enhanced-forms.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Form encType=\"multipart/form-data\">…</Form>\n```\n\n----------------------------------------\n\nTITLE: Transforming Price Input (Cents to Currency) in Qwik with Modular Forms\nDESCRIPTION: This snippet shows currency input handling using Modular Forms within a Qwik application. The 'price' is managed in cents internally. The `transform` prop utilizes `toCustom$` to multiply the input value by 100 (converting to cents) on the 'input' event. For display, `useSignal` creates a local signal for the input's value, and `useTask$` observes the field's value, dividing it by 100 to update the display signal whenever the cents value changes.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Field\n  name=\"price\"\n  type=\"number\"\n  transform={toCustom$((value) => value && value * 100, {\n    on: 'input',\n  })}\n>\n  {(field, props) => {\n    const value = useSignal<number>();\n    useTask$(({ track }) => {\n      if (!Number.isNaN(track(() => field.value))) {\n        value.value = field.value && field.value / 100;\n      }\n    });\n    return <input {...props} type=\"number\" value={value.value} />;\n  }}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: MaybeFunction Type Properties Definition\nDESCRIPTION: Defines the properties object containing type definitions for the Value and Type generic parameters of MaybeFunction.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/MaybeFunction.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  Value: {\n    type: 'any',\n  },\n  Type: {\n    type: [\n      { type: 'custom', name: 'Value' },\n      { type: 'function', return: { type: 'custom', name: 'Value' } },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Focusing Form Fields in TypeScript\nDESCRIPTION: The focus function is used to programmatically set focus on a specified field within a form. It takes two parameters: the form object and the name of the field to focus.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/focus.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfocus(form, name);\n```\n\n----------------------------------------\n\nTITLE: Rendering Array of Checkboxes with Modular Forms - Preact - TSX\nDESCRIPTION: This code sample creates a group of checkboxes for selecting multiple string values using Modular Forms with Preact. The checked property uses 'field.value.value?.includes(value)' per Preact's value-wrapping. Prerequisites include Modular Forms and Preact. Expects a list of fruit options; returns selected values as array.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/special-inputs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\n{\n  [\n    { label: 'Bananas', value: 'bananas' },\n    { label: 'Apples', value: 'apples' },\n    { label: 'Grapes', value: 'grapes' },\n  ].map(({ label, value }) => (\n    <Field key={value} name=\"fruits\" type=\"string[]\">\n      {(field, props) => (\n        <label>\n          <input\n            {...props}\n            type=\"checkbox\"\n            value={value}\n            checked={field.value.value?.includes(value)}\n          />\n          {label}\n        </label>\n      )}\n    </Field>\n  ));\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Form Response in TypeScript\nDESCRIPTION: This function sets the response of a form. It takes a form object, a response object, and optional settings including a duration for automatic reset.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/setResponse.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetResponse(form, response, options);\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission with onSubmit in Preact\nDESCRIPTION: Shows how to define a `SubmitHandler` function and attach it to the `onSubmit` prop of the `Form` component in Preact. This function, triggered on submission, receives the form values and the event object for client-side data processing. It uses `useForm` from `@modular-forms/preact`.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/handle-submission.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { SubmitHandler, useForm } from '@modular-forms/preact';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>();\n\n  const handleSubmit: SubmitHandler<LoginForm> = (values, event) => {\n    // Your code here\n  };\n\n  return <Form onSubmit={handleSubmit}>…</Form>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Form Component Usage in Qwik JSX (TSX)\nDESCRIPTION: Demonstrates the basic JSX setup for a form in a Qwik component. It calls `useForm` (with a loader) and then renders the destructured `Form` component within the component's return statement, acting as the container for form fields.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/create-your-form.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>({\n    loader: useFormLoader(),\n  });\n\n  return <Form></Form>;\n});\n```\n\n----------------------------------------\n\nTITLE: Controlled Date Input with Preact - TypeScript\nDESCRIPTION: Demonstrates a controlled date input in Preact, converting number or date values to an ISO date string for input fields. The useComputed hook supplies a memoized value, ensuring that the input gets a properly formatted string or an empty string when invalid. Utilizes @preact/signals, forwardRef, and a DateInputProps definition.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/controlled-fields.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { useComputed } from '@preact/signals';\nimport { forwardRef } from 'preact/compat';\n\ntype DateInputProps = { … };\n\nexport const DateInput = forwardRef<HTMLInputElement, DateInputProps>(\n  ({ value, ...props }, ref) => {\n    // Transform date or number to string\n    const input = useComputed(() =>\n      value.value &&\n      !Number.isNaN(\n        typeof value.value === 'number'\n          ? value.value\n          : value.value.getTime()\n      )\n        ? new Date(value.value).toISOString().split('T', 1)[0]\n        : ''\n    );\n    return <input {...props} ref={ref} type=\"date\" value={input} />;\n  }\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Clearing Form Response with clearResponse Function in TypeScript\nDESCRIPTION: The clearResponse function is used to clear the response of a form. It takes a single parameter 'form' of type FormStore. This function is likely used to reset form state after submission or when needing to clear user input.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/clearResponse.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclearResponse(form);\n```\n\n----------------------------------------\n\nTITLE: Exporting Property Definitions for Documentation in JavaScript\nDESCRIPTION: Exports a constant object named `properties`. This object contains structured metadata about the `FieldEvent` type and its framework-specific properties (like `currentTarget`). This metadata is used by the documentation components (e.g., `<Property>`) to dynamically render type information, links, and details on the page.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldEvent.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const properties = {\n  FieldEvent: {\n    type: {\n      type: 'custom',\n      name: 'Event',\n    },\n  },\n  solidPreactOrReact: {\n    currentTarget: {\n      type: {\n        type: 'custom',\n        name: 'FieldElement',\n        href: '../FieldElement',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Form Property Types in TypeScript\nDESCRIPTION: This code snippet defines and exports the properties object, which includes the type definition for the form parameter used in the clearError function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/clearError.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  form: {\n    type: {\n      type: 'custom',\n      name: 'FormStore',\n      href: '../FormStore',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Type Properties for valiForm Parameters and Return Value in TypeScript\nDESCRIPTION: Exports a `properties` object detailing the expected types for the `valiForm` function's parameters and return value. The `schema` parameter accepts a Valibot `BaseSchema` or `BaseSchemaAsync` taking `FieldValues`, and the returned `validate` function takes `PartialValues<FieldValues>` and returns `FormErrors`.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/valiForm.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport const properties = {\n  schema: {\n    type: [\n      {\n        type: 'custom',\n        name: 'BaseSchema',\n        generics: [\n          {\n            type: 'custom',\n            name: 'FieldValues',\n            href: '../FieldValues',\n          },\n          'any',\n        ],\n      },\n      {\n        type: 'custom',\n        name: 'BaseSchemaAsync',\n        generics: [\n          {\n            type: 'custom',\n            name: 'FieldValues',\n            href: '../FieldValues',\n          },\n          'any',\n        ],\n      },\n    ],\n  },\n  validate: {\n    type: {\n      type: 'function',\n      params: [\n        {\n          name: 'values',\n          type: {\n            type: 'custom',\n            name: 'PartialValues',\n            href: '../PartialValues',\n            generics: [\n              {\n                type: 'custom',\n                name: 'FieldValues',\n                href: '../FieldValues',\n              },\n            ],\n          },\n        },\n      ],\n      return: {\n        type: 'custom',\n        name: 'FormErrors',\n        href: '../FormErrors',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Destructuring Form Components in Solid (TSX)\nDESCRIPTION: Provides an example of alternative destructuring for the `createForm` primitive in Solid. It ignores the first element (form store) using `const [, Login] = ...` and assigns the component object (`{ Form, Field, ... }`) to a custom name (e.g., `Login`, `Register`). This pattern is useful when managing multiple forms within a single component for better naming.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/create-your-form.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App() {\n  const [, Login] = createForm<LoginForm>();\n  const [, Register] = createForm<RegisterForm>();\n\n  return (\n    <>\n      <Login.Form></Login.Form>\n      <Register.Form></Register.Form>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using move Function in Modular Forms (TypeScript)\nDESCRIPTION: The move function is used to relocate a field within a field array. It takes the form object, the field name, and options specifying the 'from' and 'to' indexes. The function rearranges fields between the specified indexes.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/move.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nmove(form, name, options);\n```\n\n----------------------------------------\n\nTITLE: Defining ValidateFieldArray Properties\nDESCRIPTION: Defines the properties of the ValidateFieldArray type, including its function signature with parameters and return type.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/ValidateFieldArray.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const properties = {\n  ValidateFieldArray: {\n    type: {\n      type: 'function',\n      params: [\n        {\n          name: 'items',\n          type: { type: 'array', item: 'number' },\n        },\n      ],\n      return: {\n        type: 'custom',\n        name: 'MaybePromise',\n        href: '../MaybePromise',\n        generics: ['string'],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Properties for Form Response in TypeScript\nDESCRIPTION: This code snippet defines and exports properties used in the setResponse function documentation. It includes type definitions for form, response, options, and duration parameters.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/setResponse.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  form: {\n    type: {\n      type: 'custom',\n      name: 'FormStore',\n      href: '../FormStore',\n    },\n  },\n  response: {\n    type: { type: 'custom', name: 'FormResponse', href: '../FormResponse' },\n  },\n  options: {\n    type: 'object',\n    defaultValue: { type: 'object', entries: [] },\n  },\n  duration: {\n    type: {\n      type: 'custom',\n      name: 'Maybe',\n      href: '../Maybe',\n      generics: ['number'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Form Component Usage in React JSX (TSX)\nDESCRIPTION: Illustrates the initial JSX structure for using the `Form` component returned by the `useForm` hook in a React application. Rendering the `Form` component creates the necessary context for form fields within it.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/create-your-form.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useForm } from '@modular-forms/react';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>();\n\n  return <Form></Form>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FieldElementProps for React\nDESCRIPTION: Specifies the properties required for a field element within a React context using a definition list format. It includes `name` (string), `ref` (RefCallback), `onChange` (event handler), and `onBlur` (event handler). These properties are designed to be spread onto a native HTML input, textarea, or select element.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldElementProps.mdx#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n- `FieldElementProps` <Property type=\"object\" />\n  - `name` <Property type=\"string\" />\n  - `ref` <Property {...properties.preactOrReact.ref} />\n  - `onChange` <Property {...properties.react.onChange} />\n  - `onBlur` <Property {...properties.react.onBlur} />\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting Form Option Property Descriptors in TypeScript\nDESCRIPTION: This snippet exports a constant 'properties' object that comprehensively documents the structure, types, and default values for the 'FormOptions' configuration used in modular forms. It specifies the expected property types for various frameworks (Qwik, Solid, Preact, React), including nested generic types and enum-like string patterns for validation strategies. Dependencies are primarily on the TypeScript type system, and the object is intended for code generation, validation, or documentation at build/runtime. Inputs are not directly accepted; instead, the object is imported and consumed by other modules or documentation engines.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FormOptions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  FormOptions: {\n    type: 'object',\n  },\n  solidPreactOrReact: {\n    initialValues: {\n      type: {\n        type: 'Custom',\n        name: 'PartialValues',\n        href: '../PartialValues',\n        generics: [\n          {\n            type: 'Custom',\n            name: 'FieldValues',\n            href: '../FieldValues',\n          },\n        ],\n      },\n    },\n    validate: {\n      type: {\n        type: 'custom',\n        name: 'Maybe',\n        href: '../Maybe',\n        generics: [\n          {\n            type: 'custom',\n            name: 'ValidateForm',\n            href: '../ValidateForm',\n          },\n        ],\n      },\n    },\n  },\n  solidQwikOrReact: {\n    validateOn: {\n      type: [\n        { type: 'string', value: 'touched' },\n        { type: 'string', value: 'input' },\n        { type: 'string', value: 'change' },\n        { type: 'string', value: 'blur' },\n        { type: 'string', value: 'submit' },\n      ],\n      defaultValue: { type: 'string', value: 'submit' },\n    },\n    revalidateOn: {\n      type: [\n        { type: 'string', value: 'touched' },\n        { type: 'string', value: 'input' },\n        { type: 'string', value: 'change' },\n        { type: 'string', value: 'blur' },\n        { type: 'string', value: 'submit' },\n      ],\n      defaultValue: { type: 'string', value: 'input' },\n    },\n  },\n  qwik: {\n    loader: {\n      type: {\n        type: 'custom',\n        name: 'Readonly',\n        generics: [\n          {\n            type: 'Custom',\n            name: 'Signal',\n            generics: [\n              {\n                type: 'Custom',\n                name: 'InitialValues',\n                href: '../InitialValues',\n                generics: [\n                  {\n                    type: 'Custom',\n                    name: 'FieldValues',\n                    href: '../FieldValues',\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n    },\n    action: {\n      type: {\n        type: 'custom',\n        name: 'Maybe',\n        href: '../Maybe',\n        generics: [\n          {\n            type: 'Custom',\n            name: 'ActionStore',\n            generics: [\n              {\n                type: 'Custom',\n                name: 'FormActionStore',\n                href: '../FormActionStore',\n              },\n              {\n                type: 'Custom',\n                name: 'PartialValues',\n                href: '../PartialValues',\n                generics: [\n                  {\n                    type: 'Custom',\n                    name: 'FieldValues',\n                    href: '../FieldValues',\n                  },\n                ],\n              },\n              { type: 'boolean', value: true },\n            ],\n          },\n        ],\n      },\n    },\n    validate: {\n      type: {\n        type: 'custom',\n        name: 'Maybe',\n        href: '../Maybe',\n        generics: [\n          {\n            type: 'custom',\n            name: 'QRL',\n            generics: [\n              {\n                type: 'custom',\n                name: 'ValidateForm',\n                href: '../ValidateForm',\n              },\n            ],\n          },\n        ],\n      },\n    },\n    fieldArrays: {\n      type: {\n        type: 'custom',\n        name: 'Maybe',\n        href: '../Maybe',\n        generics: [\n          {\n            type: 'array',\n            item: 'string',\n          },\n        ],\n      },\n    },\n  },\n  react: {\n    validateOn: {\n      type: [\n        { type: 'string', value: 'touched' },\n        { type: 'string', value: 'change' },\n        { type: 'string', value: 'blur' },\n        { type: 'string', value: 'submit' },\n      ],\n      defaultValue: { type: 'string', value: 'submit' },\n    },\n    revalidateOn: {\n      type: [\n        { type: 'string', value: 'touched' },\n        { type: 'string', value: 'change' },\n        { type: 'string', value: 'blur' },\n        { type: 'string', value: 'submit' },\n      ],\n      defaultValue: { type: 'string', value: 'change' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Field Component Properties and Types in Modular Forms (TypeScript)\nDESCRIPTION: This snippet exports a TypeScript object named properties, which defines the expected types and default values for all props supported by the Field component in modular-forms. It includes deeply nested types, framework-specific variations, and links to custom type definitions for validation, transformation, and rendering functions. This object is consumed for both documentation generation and type enforcement, and is critical for maintaining API consistency across React, Preact, Qwik, and Solid integrations.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/Field.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\\n  of: {\\n    type: {\\n      type: 'custom',\\n      name: 'FormStore',\\n      href: '../FormStore',\\n    },\\n  },\\n  type: {\\n    type: {\\n      type: 'custom',\\n      name: 'Maybe',\\n      href: '../Maybe',\\n      generics: [\\n        [\\n          { type: 'string', value: 'string' },\\n          { type: 'string', value: 'string[]' },\\n          { type: 'string', value: 'number' },\\n          { type: 'string', value: 'boolean' },\\n          { type: 'string', value: 'submit' },\\n          { type: 'string', value: 'File' },\\n          { type: 'string', value: 'File[]' },\\n          { type: 'string', value: 'Date' },\\n        ],\\n      ],\\n    },\\n  },\\n  keepActive: {\\n    type: 'boolean',\\n    defaultValue: { type: 'boolean', value: false },\\n  },\\n  keepState: {\\n    type: 'boolean',\\n    defaultValue: { type: 'boolean', value: true },\\n  },\\n  solidOrQwik: {\\n    children: {\\n      type: {\\n        type: 'function',\\n        params: [\\n          {\\n            name: 'field',\\n            type: {\\n              type: 'custom',\\n              name: 'FieldStore',\\n              href: '../FieldStore',\\n            },\\n          },\\n          {\\n            name: 'props',\\n            type: {\\n              type: 'custom',\\n              name: 'FieldElementProps',\\n              href: '../FieldElementProps',\\n            },\\n          },\\n        ],\\n        return: { type: 'custom', name: 'JSX.Element' },\\n      },\\n    },\\n  },\\n  solidPreactOrReact: {\\n    validate: {\\n      type: {\\n        type: 'custom',\\n        name: 'Maybe',\\n        href: '../Maybe',\\n        generics: [\\n          {\\n            type: 'custom',\\n            name: 'MaybeArray',\\n            href: '../MaybeArray',\\n            generics: [\\n              {\\n                type: 'custom',\\n                name: 'ValidateField',\\n                href: '../ValidateField',\\n              },\\n            ],\\n          },\\n        ],\\n      },\\n    },\\n    transform: {\\n      type: {\\n        type: 'custom',\\n        name: 'Maybe',\\n        href: '../Maybe',\\n        generics: [\\n          {\\n            type: 'custom',\\n            name: 'MaybeArray',\\n            href: '../MaybeArray',\\n            generics: [\\n              {\\n                type: 'custom',\\n                name: 'TransformField',\\n                href: '../TransformField',\\n              },\\n            ],\\n          },\\n        ],\\n      },\\n    },\\n  },\\n  solidQwikOrReact: {\\n    validateOn: {\\n      type: [\\n        { type: 'string', value: 'touched' },\\n        { type: 'string', value: 'input' },\\n        { type: 'string', value: 'change' },\\n        { type: 'string', value: 'blur' },\\n        { type: 'string', value: 'submit' },\\n      ],\\n      defaultValue: { type: 'string', value: 'submit' },\\n    },\\n    revalidateOn: {\\n      type: [\\n        { type: 'string', value: 'touched' },\\n        { type: 'string', value: 'input' },\\n        { type: 'string', value: 'change' },\\n        { type: 'string', value: 'blur' },\\n        { type: 'string', value: 'submit' },\\n      ],\\n      defaultValue: { type: 'string', value: 'input' },\\n    },\\n  },\\n  qwik: {\\n    validate: {\\n      type: {\\n        type: 'custom',\\n        name: 'Maybe',\\n        href: '../Maybe',\\n        generics: [\\n          {\\n            type: 'custom',\\n            name: 'MaybeArray',\\n            href: '../MaybeArray',\\n            generics: [\\n              {\\n                type: 'custom',\\n                name: 'QRL',\\n                generics: [\\n                  {\\n                    type: 'custom',\\n                    name: 'ValidateField',\\n                    href: '../ValidateField',\\n                  },\\n                ],\\n              },\\n            ],\\n          },\\n        ],\\n      },\\n    },\\n    transform: {\\n      type: {\\n        type: 'custom',\\n        name: 'Maybe',\\n        href: '../Maybe',\\n        generics: [\\n          {\\n            type: 'custom',\\n            name: 'MaybeArray',\\n            href: '../MaybeArray',\\n            generics: [\\n              {\\n                type: 'custom',\\n                name: 'QRL',\\n                generics: [\\n                  {\\n                    type: 'custom',\\n                    name: 'TransformField',\\n                    href: '../TransformField',\\n                  },\\n                ],\\n              },\\n            ],\\n          },\\n        ],\\n      },\\n    },\\n  },\\n  preact: {\\n    children: {\\n      type: {\\n        type: 'function',\\n        params: [\\n          {\\n            name: 'field',\\n            type: {\\n              type: 'custom',\\n              name: 'FieldStore',\\n              href: '../FieldStore',\\n            },\\n          },\\n          {\\n            name: 'props',\\n            type: {\\n              type: 'custom',\\n              name: 'FieldElementProps',\\n              href: '../FieldElementProps',\\n            },\\n          },\\n        ],\\n        return: { type: 'custom', name: 'ComponentChild' },\\n      },\\n    },\\n  },\\n  react: {\\n    children: {\\n      type: {\\n        type: 'function',\\n        params: [\\n          {\\n            name: 'field',\\n            type: {\\n              type: 'custom',\\n              name: 'FieldStore',\\n              href: '../FieldStore',\\n            },\\n          },\\n          {\\n            name: 'props',\\n            type: {\\n              type: 'custom',\\n              name: 'FieldElementProps',\\n              href: '../FieldElementProps',\\n            },\\n          },\\n        ],\\n        return: { type: 'custom', name: 'ReactNode' },\\n      },\\n    },\\n    validateOn: {\\n      type: [\\n        { type: 'string', value: 'touched' },\\n        { type: 'string', value: 'change' },\\n        { type: 'string', value: 'blur' },\\n        { type: 'string', value: 'submit' },\\n      ],\\n      defaultValue: { type: 'string', value: 'submit' },\\n    },\\n    revalidateOn: {\\n      type: [\\n        { type: 'string', value: 'touched' },\\n        { type: 'string', value: 'change' },\\n        { type: 'string', value: 'blur' },\\n        { type: 'string', value: 'submit' },\\n      ],\\n      defaultValue: { type: 'string', value: 'change' },\\n    },\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Property Types for replace Function\nDESCRIPTION: This code snippet defines the property types for the 'replace' function parameters. It includes custom types for the form and value properties, with links to their respective documentation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/replace.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  form: {\n    type: {\n      type: 'custom',\n      name: 'FormStore',\n      href: '../FormStore',\n    },\n  },\n  value: {\n    type: [\n      {\n        type: 'custom',\n        name: 'FieldValue',\n        href: '../FieldValue',\n      },\n      {\n        type: 'custom',\n        name: 'FieldValues',\n        href: '../FieldValues',\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ResponseData Type Properties in TypeScript\nDESCRIPTION: Defines the properties of the ResponseData type, which can be either a Record with string keys and any values, or an Array of any type.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/ResponseData.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const properties = {\n  ResponseData: {\n    type: [\n      {\n        type: 'custom',\n        name: 'Record',\n        generics: ['string', 'any'],\n      },\n      {\n        type: 'custom',\n        name: 'Array',\n        generics: ['any'],\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Value Validation Function in TypeScript\nDESCRIPTION: Defines a function 'value' that creates a validation function. The validation function checks if an input value matches a specified requirement. It takes a requirement (string or number) and an error message as parameters, and returns a validation function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/value.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst validate = value(requirement, error);\n```\n\n----------------------------------------\n\nTITLE: MinRange Properties Configuration - TypeScript\nDESCRIPTION: Defines the type configurations for the minRange validation function, including requirement types and framework-specific validation function signatures.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/minRange.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  requirement: {\n    type: ['string', 'number', { type: 'custom', name: 'Date' }],\n  },\n  solidPreactOrReact: {\n    validate: {\n      type: {\n        type: 'function',\n        params: [\n          {\n            name: 'value',\n            type: {\n              type: 'custom',\n              name: 'MaybeValue',\n              href: '../MaybeValue',\n              generics: [\n                ['string', 'number', { type: 'custom', name: 'Date' }],\n              ],\n            },\n          },\n        ],\n        return: 'string',\n      },\n    },\n  },\n  qwik: {\n    validate: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'function',\n            params: [\n              {\n                name: 'value',\n                type: {\n                  type: 'custom',\n                  name: 'MaybeValue',\n                  href: '../MaybeValue',\n                  generics: [\n                    ['string', 'number', { type: 'custom', name: 'Date' }],\n                  ],\n                },\n              },\n            ],\n            return: 'string',\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FieldElement Properties in TypeScript\nDESCRIPTION: Exports an object containing the properties of the FieldElement type, specifying it as a union of HTMLInputElement, HTMLSelectElement, and HTMLTextAreaElement.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldElement.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const properties = {\n  FieldElement: {\n    type: [\n      {\n        type: 'custom',\n        name: 'HTMLInputElement',\n      },\n      {\n        type: 'custom',\n        name: 'HTMLSelectElement',\n      },\n      {\n        type: 'custom',\n        name: 'HTMLTextAreaElement',\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Form Component Properties for Multiple Frameworks (JavaScript)\nDESCRIPTION: This JavaScript object literal outlines the available properties for configuring the Form component across Solid, Preact, React, and Qwik. Each framework's specific prop types and defaults are specified, including nested types like 'FormStore', 'ActionStore', and utility booleans for form state management. This structure is intended for documentation, type-checking, or code generation, and assumes the specified custom types are defined elsewhere in the codebase.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/Form.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const properties = {\\n  of: {\\n    type: {\\n      type: 'custom',\\n      name: 'FormStore',\\n      href: '../FormStore',\\n    },\\n  },\\n  keepResponse: {\\n    type: 'boolean',\\n    defaultValue: { type: 'boolean', value: false },\\n  },\\n  shouldActive: {\\n    type: 'boolean',\\n    defaultValue: { type: 'boolean', value: true },\\n  },\\n  shouldTouched: {\\n    type: 'boolean',\\n    defaultValue: { type: 'boolean', value: false },\\n  },\\n  shouldDirty: {\\n    type: 'boolean',\\n    defaultValue: { type: 'boolean', value: false },\\n  },\\n  shouldFocus: {\\n    type: 'boolean',\\n    defaultValue: { type: 'boolean', value: true },\\n  },\\n  solidPreactOrReact: {\\n    onSubmit: {\\n      type: {\\n        type: 'custom',\\n        name: 'Maybe',\\n        href: '../Maybe',\\n        generics: [\\n          {\\n            type: 'custom',\\n            name: 'SubmitHandler',\\n            href: '../SubmitHandler',\\n          },\\n        ],\\n      },\\n    },\\n  },\\n  solidOrQwik: {\\n    children: {\\n      type: { type: 'custom', name: 'JSX.Element' },\\n    },\\n  },\\n  qwik: {\\n    action: {\\n      type: {\\n        type: 'custom',\\n        name: 'Maybe',\\n        href: '../Maybe',\\n        generics: [\\n          {\\n            type: 'custom',\\n            name: 'ActionStore',\\n            generics: [\\n              {\\n                type: 'custom',\\n                name: 'FormActionStore',\\n                href: '../FormActionStore',\\n              },\\n              {\\n                type: 'custom',\\n                name: 'PartialValues',\\n                href: '../PartialValues',\\n                generics: [\\n                  {\\n                    type: 'custom',\\n                    name: 'FieldValues',\\n                    href: '../FieldValues',\\n                  },\\n                ],\\n              },\\n              { type: 'boolean', value: true },\\n            ],\\n          },\\n        ],\\n      },\\n    },\\n    onSubmit$: {\\n      type: {\\n        type: 'custom',\\n        name: 'Maybe',\\n        href: '../Maybe',\\n        generics: [\\n          {\\n            type: 'custom',\\n            name: 'SubmitHandler',\\n            href: '../SubmitHandler',\\n          },\\n        ],\\n      },\\n    },\\n    encType: {\\n      type: {\\n        type: 'custom',\\n        name: 'Maybe',\\n        href: '../Maybe',\\n        generics: [\\n          [\\n            { type: 'string', value: 'application/x-www-form-urlencoded' },\\n            { type: 'string', value: 'multipart/form-data' },\\n          ],\\n        ],\\n      },\\n    },\\n    reloadDocument: {\\n      type: 'boolean',\\n      defaultValue: { type: 'boolean', value: false },\\n    },\\n  },\\n  preact: {\\n    children: {\\n      type: { type: 'custom', name: 'ComponentChildren' },\\n    },\\n  },\\n  react: {\\n    children: {\\n      type: { type: 'custom', name: 'ReactNode' },\\n    },\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FieldStore Type for Modular Forms\nDESCRIPTION: This code snippet defines the FieldStore type, which is an object with various properties representing the state of a form field. The exact types of some properties depend on whether the code is running in a Preact/React or Solid/Qwik environment.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldStore.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const properties = {\n  solidOrQwik: {\n    value: {\n      type: {\n        type: 'custom',\n        name: 'Maybe',\n        href: '../Maybe',\n        generics: [\n          {\n            type: 'custom',\n            name: 'FieldValue',\n            href: '../FieldValue',\n          },\n        ],\n      },\n    },\n    error: {\n      type: 'string',\n    },\n    active: {\n      type: 'boolean',\n    },\n    touched: {\n      type: 'boolean',\n    },\n    dirty: {\n      type: 'boolean',\n    },\n  },\n  preactOrReact: {\n    value: {\n      type: {\n        type: 'custom',\n        name: 'ReadonlySignal',\n        generics: [\n          {\n            type: 'custom',\n            name: 'Maybe',\n            href: '../Maybe',\n            generics: [\n              {\n                type: 'custom',\n                name: 'FieldValue',\n                href: '../FieldValue',\n              },\n            ],\n          },\n        ],\n      },\n    },\n    error: {\n      type: {\n        type: 'custom',\n        name: 'ReadonlySignal',\n        generics: ['string'],\n      },\n    },\n    active: {\n      type: {\n        type: 'custom',\n        name: 'ReadonlySignal',\n        generics: ['boolean'],\n      },\n    },\n    touched: {\n      type: {\n        type: 'custom',\n        name: 'ReadonlySignal',\n        generics: ['boolean'],\n      },\n    },\n    dirty: {\n      type: {\n        type: 'custom',\n        name: 'ReadonlySignal',\n        generics: ['boolean'],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using getError Function in TypeScript with Modular Forms\nDESCRIPTION: This snippet demonstrates the basic usage of the getError function, which returns the error of a specified field or field array. It takes a form object, field name, and optional configuration parameters to control when errors should be returned.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/getError.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst error = getError(form, name, options);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Phone Number Transformer for Preact (TS)\nDESCRIPTION: Defines a reusable `toPhoneNumber` transformation function for Preact applications using `toCustom` from '@modular-forms/preact'. This function cleans the input value by keeping only digits and then formats it as a US phone number. The `TransformOptions` parameter controls when the transformation is applied.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { toCustom, TransformOptions } from '@modular-forms/preact';\n\nexport function toPhoneNumber(options: TransformOptions) {\n  return toCustom<string>((value) => {\n    // Remove everything that is not a number\n    const numbers = value.replace(/\\D/g, '');\n\n    // Continue if string is not empty\n    if (numbers) {\n      // Extract area, first 3 and last 4\n      const [, area, first3, last4] = numbers.match(\n        /(\\d{0,3})(\\d{0,3})(\\d{0,4})/\n      );\n\n      // If length or first 3 is less than 1\n      if (first3.length < 1) {\n        return `(${area}`;\n      }\n\n      // If length or last 4 is less than 1\n      if (last4.length < 1) {\n        return `(${area}) ${first3}`;\n      }\n\n      // Otherwise return full US number\n      return `(${area}) ${first3}-${last4}`;\n    }\n\n    // Otherwise return an emty string\n    return '';\n  }, options);\n}\n```\n\n----------------------------------------\n\nTITLE: Building the @modular-forms/react Package (Bash)\nDESCRIPTION: This sequence of commands first changes the current directory to `packages/react` within the project structure and then executes the build script defined in that package's `package.json` using `pnpm`. This compiles the React-specific part of the `modular-forms` library. Requires `pnpm` and the necessary build tools defined in the package.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/playgrounds/react/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/react && pnpm build\n```\n\n----------------------------------------\n\nTITLE: Exporting Framework-Specific Property Structures - TypeScript\nDESCRIPTION: Defines the 'properties' object, mapping Solid/Qwik and Preact/React frameworks to their respective property type structures for use in FieldArrayStore definitions. Requires familiarity with TypeScript custom types and generics as well as the concept of Signals for reactivity in frontend frameworks. Inputs to this structure depend on the framework context, with 'preactOrReact' using 'ReadonlySignal' wrappers, while 'solidOrQwik' versions are primitive types; this enables accurate property typing for each supported environment.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldArrayStore.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  solidOrQwik: {\n    items: {\n      type: 'array',\n      item: 'number',\n    },\n    error: {\n      type: 'string',\n    },\n    active: {\n      type: 'boolean',\n    },\n    touched: {\n      type: 'boolean',\n    },\n    dirty: {\n      type: 'boolean',\n    },\n  },\n  preactOrReact: {\n    items: {\n      type: {\n        type: 'custom',\n        name: 'ReadonlySignal',\n        generics: [\n          {\n            type: 'array',\n            item: 'number',\n          },\n        ],\n      },\n    },\n    error: {\n      type: {\n        type: 'custom',\n        name: 'ReadonlySignal',\n        generics: ['string'],\n      },\n    },\n    active: {\n      type: {\n        type: 'custom',\n        name: 'ReadonlySignal',\n        generics: ['boolean'],\n      },\n    },\n    touched: {\n      type: {\n        type: 'custom',\n        name: 'ReadonlySignal',\n        generics: ['boolean'],\n      },\n    },\n    dirty: {\n      type: {\n        type: 'custom',\n        name: 'ReadonlySignal',\n        generics: ['boolean'],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Applying FieldElementProps using Spread Syntax in TSX\nDESCRIPTION: Shows the intended usage pattern where the `FieldElementProps` object (`props`) is spread onto a standard HTML `<input />` element in a TSX context. This correctly assigns the necessary properties like `name`, `ref`, and event handlers provided by the `modular-forms` library.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldElementProps.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<input {...props} type=\"text\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Framework-Specific TransformField Type Definitions (TypeScript)\nDESCRIPTION: This TypeScript code exports a 'properties' object containing type definitions for the 'TransformField' function. It differentiates between Qwik and other frameworks (Solid, Preact, React) by providing distinct function signatures. The 'solidPreactOrReact' version takes 'value' and 'event' parameters and returns a 'Maybe<FieldValue>', while the 'qwik' version adds an 'element' parameter and returns a 'MaybePromise<Maybe<FieldValue>>'. This allows modular-forms to adapt its transformation logic based on the execution environment.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/TransformField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  solidPreactOrReact: {\n    TransformField: {\n      type: {\n        type: 'function',\n        params: [\n          {\n            name: 'value',\n            type: {\n              type: 'custom',\n              name: 'Maybe',\n              href: '../Maybe',\n              generics: [\n                { type: 'custom', name: 'FieldValue', href: '../FieldValue' },\n              ],\n            },\n          },\n          {\n            name: 'event',\n            type: {\n              type: 'custom',\n              name: 'FieldEvent',\n              href: '../FieldEvent',\n            },\n          },\n        ],\n        return: {\n          type: 'custom',\n          name: 'Maybe',\n          href: '../Maybe',\n          generics: [\n            {\n              type: 'custom',\n              name: 'FieldValue',\n              href: '../FieldValue',\n            },\n          ],\n        },\n      },\n    },\n  },\n  qwik: {\n    TransformField: {\n      type: {\n        type: 'function',\n        params: [\n          {\n            name: 'value',\n            type: {\n              type: 'custom',\n              name: 'Maybe',\n              href: '../Maybe',\n              generics: [\n                { type: 'custom', name: 'FieldValue', href: '../FieldValue' },\n              ],\n            },\n          },\n          {\n            name: 'event',\n            type: {\n              type: 'custom',\n              name: 'FieldEvent',\n              href: '../FieldEvent',\n            },\n          },\n          {\n            name: 'element',\n            type: {\n              type: 'custom',\n              name: 'FieldElement',\n              href: '../FieldElement',\n            },\n          },\n        ],\n        return: {\n          type: 'custom',\n          name: 'MaybePromise',\n          href: '../MaybePromise',\n          generics: [\n            {\n              type: 'custom',\n              name: 'Maybe',\n              href: '../Maybe',\n              generics: [\n                {\n                  type: 'custom',\n                  name: 'FieldValue',\n                  href: '../FieldValue',\n                },\n              ],\n            },\n          ],\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Form Properties in TypeScript\nDESCRIPTION: This code snippet defines and exports properties for the form parameter, specifying its type as a custom FormStore type with a reference to its documentation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/focus.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  form: {\n    type: {\n      type: 'custom',\n      name: 'FormStore',\n      href: '../FormStore',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering FormActionResult Documentation with JSX Components (TSX)\nDESCRIPTION: Uses custom UI components to render documentation for the FormActionResult type, including sections for the title, description, and a breakdown of its properties, suitable for the Qwik documentation page. There are no runtime dependencies, but requires the presence of the imported UI components. The snippet is designed to be used within a documentation site that rendered React-like UI from TSX syntax.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FormActionResult.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Title>FormActionResult</Title>\\n<Description>Type that defines the return of a form action.</Description>\\n\\n# FormActionResult\\n\\n<Qwik block>\\n\\nType that defines the return of a form action.\\n\\n## Definition\\n\\n- `FormActionResult` <Property type=\\\"object\\\" />\\n  - `status` <Property {...properties.status} />\\n  - `message` <Property {...properties.message} />\\n  - `errors` <Property {...properties.errors} />\\n  - `data` <Property {...properties.data} />\\n\\n</Qwik>\\n\\n<SolidPreactOrReact block>\\n\\n<HttpStatusCode code={404} />\\n\\n> This page is exclusively for the Qwik library of Modular Forms.\\n\\n</SolidPreactOrReact>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Transformer in React (TSX)\nDESCRIPTION: Shows how to use the custom `toPhoneNumber` function within the `transform` prop of a React `Field` component. The transformation is set to occur on the 'change' event. Note the specific value access `field.value.value || ''`.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Field name=\"phone\" transform={toPhoneNumber({ on: 'change' })}>\n  {(field, props) => (\n    <input\n      {...props}\n      type=\"tel\"\n      placeholder=\"(000) 000-0000\"\n      value={field.value.value || ''}\n    />\n  )}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Pattern Validation in TypeScript\nDESCRIPTION: This code defines the type properties for the pattern validation function, including the requirement type and different return types for Solid/Preact/React and Qwik frameworks. It uses custom types like MaybeValue and QRL.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/pattern.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  requirement: {\n    type: {\n      type: 'custom',\n      name: 'RegExp',\n    },\n  },\n  solidPreactOrReact: {\n    validate: {\n      type: {\n        type: 'function',\n        params: [\n          {\n            name: 'value',\n            type: {\n              type: 'custom',\n              name: 'MaybeValue',\n              href: '../MaybeValue',\n              generics: ['string'],\n            },\n          },\n        ],\n        return: 'string',\n      },\n    },\n  },\n  qwik: {\n    validate: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'function',\n            params: [\n              {\n                name: 'value',\n                type: {\n                  type: 'custom',\n                  name: 'MaybeValue',\n                  href: '../MaybeValue',\n                  generics: ['string'],\n                },\n              },\n            ],\n            return: 'string',\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SubmitHandler Type Properties (JavaScript)\nDESCRIPTION: Exports a constant `properties` object containing detailed type definitions for the `SubmitHandler` function. It specifies different signatures based on the framework: one for Solid, Preact, or React using standard `SubmitEvent`, and another for Qwik using `QwikSubmitEvent`. Both versions accept form field values (`FieldValues`) and return a `MaybePromise<any>`. This object structure is likely consumed by documentation generation tools.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/SubmitHandler.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const properties = {\n  solidPreactOrReact: {\n    SubmitHandler: {\n      type: {\n        type: 'function',\n        params: [\n          {\n            name: 'values',\n            type: {\n              type: 'custom',\n              name: 'FieldValues',\n              href: '../FieldValues',\n            },\n          },\n          {\n            name: 'event',\n            type: {\n              type: 'custom',\n              name: 'SubmitEvent',\n            },\n          },\n        ],\n        return: {\n          type: 'custom',\n          name: 'MaybePromise',\n          href: '../MaybePromise',\n          generics: ['any'],\n        },\n      },\n    },\n  },\n  qwik: {\n    SubmitHandler: {\n      type: {\n        type: 'function',\n        params: [\n          {\n            name: 'values',\n            type: {\n              type: 'custom',\n              name: 'FieldValues',\n              href: '../FieldValues',\n            },\n          },\n          {\n            name: 'event',\n            type: {\n              type: 'custom',\n              name: 'QwikSubmitEvent',\n              generics: [\n                {\n                  type: 'custom',\n                  name: 'HTMLFormElement',\n                },\n              ],\n            },\n          },\n        ],\n        return: {\n          type: 'custom',\n          name: 'MaybePromise',\n          href: '../MaybePromise',\n          generics: ['any'],\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Framework-Specific Validation - TypeScript\nDESCRIPTION: Defines type structures for validation functions across different frameworks (Solid/Preact/React and Qwik). Includes type definitions for handling File and File[] inputs with MaybeValue type wrapper.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/maxSize.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  solidPreactOrReact: {\n    validate: {\n      type: {\n        type: 'function',\n        params: [\n          {\n            name: 'value',\n            type: {\n              type: 'custom',\n              name: 'MaybeValue',\n              href: '../MaybeValue',\n              generics: [\n                [\n                  { type: 'custom', name: 'File' },\n                  { type: 'array', item: { type: 'custom', name: 'File' } },\n                ],\n              ],\n            },\n          },\n        ],\n        return: 'string',\n      },\n    },\n  },\n  qwik: {\n    validate: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'function',\n            params: [\n              {\n                name: 'value',\n                type: {\n                  type: 'custom',\n                  name: 'MaybeValue',\n                  href: '../MaybeValue',\n                  generics: [\n                    [\n                      { type: 'custom', name: 'File' },\n                      { type: 'array', item: { type: 'custom', name: 'File' } },\n                    ],\n                  ],\n                },\n              },\n            ],\n            return: 'string',\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ValidateField Type Properties in TypeScript\nDESCRIPTION: Defines the properties of the ValidateField type, including its function signature, parameters, and return type. It uses custom types like Maybe, FieldValue, and MaybePromise.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/ValidateField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const properties = {\n  ValidateField: {\n    type: {\n      type: 'function',\n      params: [\n        {\n          name: 'value',\n          type: {\n            type: 'custom',\n            name: 'Maybe',\n            href: '../Maybe',\n            generics: [\n              { type: 'custom', name: 'FieldValue', href: '../FieldValue' },\n            ],\n          },\n        },\n      ],\n      return: {\n        type: 'custom',\n        name: 'MaybePromise',\n        href: '../MaybePromise',\n        generics: ['string'],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Phone Number Transformer for React (TS)\nDESCRIPTION: Defines a reusable `toPhoneNumber` transformation function tailored for React applications, using `toCustom` from '@modular-forms/react'. It processes an input string, removes non-numeric characters, and formats the result into a standard US phone number structure. The `TransformOptions` argument determines the event triggering the transformation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { toCustom, TransformOptions } from '@modular-forms/react';\n\nexport function toPhoneNumber(options: TransformOptions) {\n  return toCustom<string>((value) => {\n    // Remove everything that is not a number\n    const numbers = value.replace(/\\D/g, '');\n\n    // Continue if string is not empty\n    if (numbers) {\n      // Extract area, first 3 and last 4\n      const [, area, first3, last4] = numbers.match(\n        /(\\d{0,3})(\\d{0,3})(\\d{0,4})/\n      );\n\n      // If length or first 3 is less than 1\n      if (first3.length < 1) {\n        return `(${area}`;\n      }\n\n      // If length or last 4 is less than 1\n      if (last4.length < 1) {\n        return `(${area}) ${first3}`;\n      }\n\n      // Otherwise return full US number\n      return `(${area}) ${first3}-${last4}`;\n    }\n\n    // Otherwise return an emty string\n    return '';\n  }, options);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Field Arrays with Dynamic Names in Qwik - TypeScript\nDESCRIPTION: This Qwik snippet demonstrates the use of dynamic fieldArray.name for nested field arrays, supporting modular and flexible deep nesting. Maps over fieldArray.items and constructs field names dynamically. Dependencies: Modular Forms, Qwik.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/field-arrays.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<FieldArray name=\"todos\">\n  {(fieldArray) =>\n    fieldArray.items.map((item, index) => (\n      <div key={item}>\n        <Field name={`${fieldArray.name}.${index}.label`}>\n          {(field, props) => <input {...props} type=\"text\" />}\n        </Field>\n        <Field name={`${fieldArray.name}.${index}.deadline`}>\n          {(field, props) => <input {...props} type=\"date\" />}\n        </Field>\n      </div>\n    ))\n  }\n</FieldArray>\n```\n\n----------------------------------------\n\nTITLE: Importing HttpStatusCode from solid-start/server in TypeScript\nDESCRIPTION: This snippet shows the import statement for the HttpStatusCode component from the solid-start/server module. It's used to display HTTP status codes in the documentation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/toCustom.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { HttpStatusCode } from 'solid-start/server';\n```\n\n----------------------------------------\n\nTITLE: Creating Minimum Length Validation Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a validation function using the 'minLength' function. It takes a requirement number and an error message as parameters, and returns a validate function that checks if a string or array meets the minimum length.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/minLength.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = minLength(requirement, error);\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Validation Function in TypeScript\nDESCRIPTION: This snippet defines the type structure for the validation function returned by minSize. It includes variations for Solid, Preact, React, and Qwik frameworks, specifying the function signature and return type.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/minSize.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  solidPreactOrReact: {\n    validate: {\n      type: {\n        type: 'function',\n        params: [\n          {\n            name: 'value',\n            type: {\n              type: 'custom',\n              name: 'MaybeValue',\n              href: '../MaybeValue',\n              generics: [\n                [\n                  { type: 'custom', name: 'File' },\n                  { type: 'array', item: { type: 'custom', name: 'File' } },\n                ],\n              ],\n            },\n          },\n        ],\n        return: 'string',\n      },\n    },\n  },\n  qwik: {\n    validate: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'function',\n            params: [\n              {\n                name: 'value',\n                type: {\n                  type: 'custom',\n                  name: 'MaybeValue',\n                  href: '../MaybeValue',\n                  generics: [\n                    [\n                      { type: 'custom', name: 'File' },\n                      { type: 'array', item: { type: 'custom', name: 'File' } },\n                    ],\n                  ],\n                },\n              },\n            ],\n            return: 'string',\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FieldElementProps for SolidJS\nDESCRIPTION: Specifies the properties required for a field element within a SolidJS context using a definition list format. It includes `name` (string), `autofocus` (boolean), `ref` (function), `onInput` (event handler), `onChange` (event handler), and `onBlur` (event handler). These properties are intended to be spread onto a native HTML input, textarea, or select element.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldElementProps.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- `FieldElementProps` <Property type=\"object\" />\n  - `name` <Property type=\"string\" />\n  - `autofocus` <Property type=\"boolean\" />\n  - `ref` <Property {...properties.solid.ref} />\n  - `onInput` <Property {...properties.solid.onInput} />\n  - `onChange` <Property {...properties.solid.onChange} />\n  - `onBlur` <Property {...properties.solid.onBlur} />\n```\n\n----------------------------------------\n\nTITLE: Using transform Prop with toCustom in React (TSX)\nDESCRIPTION: Illustrates how to apply input transformation in a React `Field` component using the `transform` prop and the `toCustom` helper. The transformation logic is triggered on the 'change' event. Note the access to the field's value using `field.value.value || ''`.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/transform-inputs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Field\n  name=\"phone\"\n  transform={toCustom(\n    (value, event) => {\n      // Transform phone number here\n    },\n    { on: 'change' }\n  )}\n>\n  {(field, props) => (\n    <input\n      {...props}\n      type=\"tel\"\n      placeholder=\"(000) 000-0000\"\n      value={field.value.value || ''}\n    />\n  )}\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Basic Form Component Usage in Solid JSX (TSX)\nDESCRIPTION: Example showing the initial JSX structure for a form in Solid. After calling `createForm` and obtaining the form components, the returned `Form` component is rendered within the application component's JSX to establish the form's boundary.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/create-your-form.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createForm } from '@modular-forms/solid';\n\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\nexport default function App() {\n  const [loginForm, { Form, Field }] = createForm<LoginForm>();\n\n  return <Form></Form>;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Properties for toCustom Function Documentation in TypeScript\nDESCRIPTION: This snippet defines and exports the properties object, which contains type information for the toCustom function parameters and return value. It's used to generate the documentation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/toCustom.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const properties = {\n  action: {\n    type: {\n      type: 'custom',\n      name: 'TransformField',\n      href: '../TransformField',\n    },\n  },\n  on: {\n    type: [\n      { type: 'string', value: 'input' },\n      { type: 'string', value: 'change' },\n      { type: 'string', value: 'blur' },\n    ],\n  },\n  transform: {\n    type: {\n      type: 'custom',\n      name: 'TransformField',\n      href: '../TransformField',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Required Validation Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a validation function that checks for the existence of an input. It takes an error message as a parameter and returns a validate function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/required.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = required(error);\n```\n\n----------------------------------------\n\nTITLE: MaxRange Type Definitions\nDESCRIPTION: Detailed type definitions for the maxRange function properties, including requirement types and framework-specific validation function signatures for Solid, Preact, React, and Qwik.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/maxRange.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  requirement: {\n    type: ['string', 'number', { type: 'custom', name: 'Date' }],\n  },\n  solidPreactOrReact: {\n    validate: {\n      type: {\n        type: 'function',\n        params: [\n          {\n            name: 'value',\n            type: {\n              type: 'custom',\n              name: 'MaybeValue',\n              href: '../MaybeValue',\n              generics: [\n                ['string', 'number', { type: 'custom', name: 'Date' }],\n              ],\n            },\n          },\n        ],\n        return: 'string',\n      },\n    },\n  },\n  qwik: {\n    validate: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'function',\n            params: [\n              {\n                name: 'value',\n                type: {\n                  type: 'custom',\n                  name: 'MaybeValue',\n                  href: '../MaybeValue',\n                  generics: [\n                    ['string', 'number', { type: 'custom', name: 'Date' }],\n                  ],\n                },\n              },\n            ],\n            return: 'string',\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: URL Validation Function Type Definition in TypeScript\nDESCRIPTION: This code defines the type of the validation function returned by the 'url' function. It shows different type definitions for Solid/Preact/React and Qwik frameworks.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  solidPreactOrReact: {\n    validate: {\n      type: {\n        type: 'function',\n        params: [\n          {\n            name: 'value',\n            type: {\n              type: 'custom',\n              name: 'MaybeValue',\n              href: '../MaybeValue',\n              generics: ['string'],\n            },\n          },\n        ],\n        return: 'string',\n      },\n    },\n  },\n  qwik: {\n    validate: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'function',\n            params: [\n              {\n                name: 'value',\n                type: {\n                  type: 'custom',\n                  name: 'MaybeValue',\n                  href: '../MaybeValue',\n                  generics: ['string'],\n                },\n              },\n            ],\n            return: 'string',\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Validation Function with valiForm$ in Qwik\nDESCRIPTION: Demonstrates how to use the valiForm$ function to create a validation function that parses a Valibot schema for a form. The function takes a schema as input and returns a validate function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/valiForm$.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = valiForm$(schema);\n```\n\n----------------------------------------\n\nTITLE: FormStore Properties Configuration\nDESCRIPTION: Defines the property configurations for different frameworks including type definitions and generics\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FormStore.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const properties = {\n  solidOrQwik: {\n    element: {\n      type: {\n        type: 'custom',\n        name: 'Maybe',\n        href: '../Maybe',\n        generics: [{ type: 'custom', name: 'HTMLFormElement' }],\n      },\n    },\n    submitCount: {\n      type: 'number',\n    },\n    submitting: {\n      type: 'boolean',\n    },\n    submitted: {\n      type: 'boolean',\n    },\n    validating: {\n      type: 'boolean',\n    },\n    touched: {\n      type: 'boolean',\n    },\n    dirty: {\n      type: 'boolean',\n    },\n    invalid: {\n      type: 'boolean',\n    },\n    response: {\n      type: { type: 'custom', name: 'FormResponse', href: '../FormResponse' },\n    },\n  },\n  preactOrReact: {\n    element: {\n      type: {\n        type: 'custom',\n        name: 'Signal',\n        generics: [\n          {\n            type: 'custom',\n            name: 'MaybeValue',\n            href: '../MaybeValue',\n            generics: [{ type: 'custom', name: 'HTMLFormElement' }],\n          },\n        ],\n      },\n    },\n    submitCount: {\n      type: {\n        type: 'custom',\n        name: 'Signal',\n        generics: ['number'],\n      },\n    },\n    submitting: {\n      type: {\n        type: 'custom',\n        name: 'Signal',\n        generics: ['boolean'],\n      },\n    },\n    submitted: {\n      type: {\n        type: 'custom',\n        name: 'Signal',\n        generics: ['boolean'],\n      },\n    },\n    validating: {\n      type: {\n        type: 'custom',\n        name: 'Signal',\n        generics: ['boolean'],\n      },\n    },\n    touched: {\n      type: {\n        type: 'custom',\n        name: 'Signal',\n        generics: ['boolean'],\n      },\n    },\n    dirty: {\n      type: {\n        type: 'custom',\n        name: 'Signal',\n        generics: ['boolean'],\n      },\n    },\n    invalid: {\n      type: {\n        type: 'custom',\n        name: 'Signal',\n        generics: ['boolean'],\n      },\n    },\n    response: {\n      type: {\n        type: 'custom',\n        name: 'Signal',\n        generics: [\n          { type: 'custom', name: 'FormResponse', href: '../FormResponse' },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Introduction using Custom SolidJS Component\nDESCRIPTION: Employs the custom `Description` component, imported from `~/components`, to display introductory text for the FAQ section. This text explains the page's purpose and invites users to submit issues via a link.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/faq.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Description>\n  Below you will find an overview of frequently asked questions. Please fill out\n  an issue to ask us anything. We're looking forward to your message.\n</Description>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Validation Function - TypeScript\nDESCRIPTION: Creates a custom validation function that takes a requirement function and error message. The requirement function validates a field value and returns a boolean, while the validate function returns a Promise with an error string.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/custom.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = custom(requirement, error);\n```\n\n----------------------------------------\n\nTITLE: Properties Export for Insert Function Documentation\nDESCRIPTION: Defines the TypeScript types for the parameters of the insert function. Includes definitions for form, options object, and value types with custom types and references to other documentation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/insert.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  form: {\n    type: {\n      type: 'custom',\n      name: 'FormStore',\n      href: '../FormStore',\n    },\n  },\n  options: {\n    type: 'object',\n  },\n  value: {\n    type: [\n      {\n        type: 'custom',\n        name: 'FieldValue',\n        href: '../FieldValue',\n      },\n      {\n        type: 'custom',\n        name: 'FieldValues',\n        href: '../FieldValues',\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting FormActionResult Properties Schema in TypeScript\nDESCRIPTION: Defines and exports the properties schema used to describe the FormActionResult object's fields, capturing detailed type information for 'status', 'message', 'errors', and 'data'. Each property uses a custom Maybe<T> type, supporting flexible or nullable fields, and references additional type documentation through 'href'. This snippet is critical for consumers needing TypeScript type safety or for code generation/documentation tools.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FormActionResult.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\\n  status: {\\n    type: {\\n      type: 'custom',\\n      name: 'Maybe',\\n      href: '../Maybe',\\n      generics: [\\n        [\\n          { type: 'string', value: 'info' },\\n          { type: 'string', value: 'error' },\\n          { type: 'string', value: 'success' },\\n        ],\\n      ],\\n    },\\n  },\\n  message: {\\n    type: {\\n      type: 'custom',\\n      name: 'Maybe',\\n      href: '../Maybe',\\n      generics: ['string'],\\n    },\\n  },\\n  errors: {\\n    type: {\\n      type: 'custom',\\n      name: 'Maybe',\\n      href: '../Maybe',\\n      generics: [\\n        {\\n          type: 'custom',\\n          name: 'FormErrors',\\n          href: '../FormErrors',\\n        },\\n      ],\\n    },\\n  },\\n  data: {\\n    type: {\\n      type: 'custom',\\n      name: 'Maybe',\\n      href: '../Maybe',\\n      generics: [\\n        {\\n          type: 'custom',\\n          name: 'ResponseData',\\n          href: '../ResponseData',\\n        },\\n      ],\\n    },\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Validation Function in Qwik\nDESCRIPTION: Demonstrates how to create a custom validation function using the custom$ method. It takes a requirement function and an error string as parameters, and returns a validate function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/custom$.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = custom$(requirement, error);\n```\n\n----------------------------------------\n\nTITLE: Defining FieldEvent Structure for Qwik\nDESCRIPTION: Specifies the structure of the `FieldEvent` type as represented within the documentation for the Qwik framework. It references the base `FieldEvent` definition using the `Property` component.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldEvent.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Qwik block>\n\n- `FieldEvent` <Property {...properties.FieldEvent} />\n\n</Qwik>\n```\n\n----------------------------------------\n\nTITLE: Wrapping SolidJS-Specific Content using Custom Component\nDESCRIPTION: Utilizes a custom `Solid` component with a `block` property. This component likely wraps content specifically relevant to SolidJS or SolidStart, potentially for applying specific styles, layout, or conditional rendering based on the SolidJS context.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/faq.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Solid block>\n\n## Does it work with SolidStart?\n\nYes, Modular Forms works with <a href=\"https://start.solidjs.com\" target=\"_blank\" rel=\"noreferrer\">SolidStart</a>. This website is proof of that! Currently, we are also working on integrating SolidStart's actions so that forms can be submitted and validated even when JavaScript is disabled or not sent to the browser. This is expected to be implemented in the next few weeks.\n\n> Currently, it seems that the implementation is more difficult than expected. You can find the latest information <a href={`${import.meta.env.VITE_GITHUB_URL}/issues/3`} target=\"\\_blank\" rel=\"noreferrer\">here</a> on GitHub.\n\n</Solid>\n```\n\n----------------------------------------\n\nTITLE: Validation Function Type Definitions - TypeScript\nDESCRIPTION: Type definitions for the custom validation function's properties, including the requirement function that takes a Maybe<FieldValue> type and returns a MaybePromise<boolean>, and the validate function that returns a Promise<string>.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/custom.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  requirement: {\n    type: {\n      type: 'function',\n      params: [\n        {\n          name: 'value',\n          type: {\n            type: 'custom',\n            name: 'Maybe',\n            href: '../Maybe',\n            generics: [\n              { type: 'custom', name: 'FieldValue', href: '../FieldValue' },\n            ],\n          },\n        },\n      ],\n      return: {\n        type: 'custom',\n        name: 'MaybePromise',\n        href: '../MaybePromise',\n        generics: ['boolean'],\n      },\n    },\n  },\n  validate: {\n    type: {\n      type: 'function',\n      params: [\n        {\n          name: 'value',\n          type: {\n            type: 'custom',\n            name: 'Maybe',\n            href: '../Maybe',\n            generics: [\n              { type: 'custom', name: 'FieldValue', href: '../FieldValue' },\n            ],\n          },\n        },\n      ],\n      return: { type: 'custom', name: 'Promise', generics: ['string'] },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Properties Object Export for hasFieldArray Documentation\nDESCRIPTION: Defines the properties object used to generate documentation for the hasFieldArray function parameters. It includes type definitions and default values for the form object and various options.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/hasFieldArray.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  form: {\n    type: {\n      type: 'custom',\n      name: 'FormStore',\n      href: '../FormStore',\n    },\n  },\n  options: {\n    type: 'object',\n    defaultValue: { type: 'object', entries: [] },\n  },\n  shouldActive: {\n    type: 'boolean',\n    defaultValue: { type: 'boolean', value: true },\n  },\n  shouldTouched: {\n    type: 'boolean',\n    defaultValue: { type: 'boolean', value: false },\n  },\n  shouldDirty: {\n    type: 'boolean',\n    defaultValue: { type: 'boolean', value: false },\n  },\n  shouldValid: {\n    type: 'boolean',\n    defaultValue: { type: 'boolean', value: false },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FormResponse Properties\nDESCRIPTION: Exports an object containing property definitions for the FormResponse type. Each property uses the Maybe type with specific generics.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FormResponse.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const properties = {\n  status: {\n    type: {\n      type: 'custom',\n      name: 'Maybe',\n      href: '../Maybe',\n      generics: [\n        [\n          { type: 'string', value: 'info' },\n          { type: 'string', value: 'error' },\n          { type: 'string', value: 'success' },\n        ],\n      ],\n    },\n  },\n  message: {\n    type: {\n      type: 'custom',\n      name: 'Maybe',\n      href: '../Maybe',\n      generics: [['string']],\n    },\n  },\n  data: {\n    type: {\n      type: 'custom',\n      name: 'Maybe',\n      href: '../Maybe',\n      generics: [\n        {\n          type: 'custom',\n          name: 'ResponseData',\n          href: '../ResponseData',\n        },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing MIME Type Validation Function\nDESCRIPTION: Creates a validation function that checks file types against specified MIME type requirements. Takes a requirement parameter that can be either a string or array of strings, and an error message string.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/mimeType.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = mimeType(requirement, error);\n```\n\n----------------------------------------\n\nTITLE: Defining FieldEvent Structure for React\nDESCRIPTION: Specifies the structure of the `FieldEvent` type as represented within the documentation for React environments. It highlights the `FieldEvent` type and its `target` property (distinct from Solid/Preact's `currentTarget`), which links to the `FieldElement` type.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldEvent.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<React block>\n\n- `FieldEvent` <Property {...properties.FieldEvent} />\n  - `target` <Property {...properties.solidPreactOrReact.currentTarget} />\n\n</React>\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for Solid, Preact, or React in TypeScript\nDESCRIPTION: Defines the type structure for the validate function in Solid, Preact, or React contexts. It specifies the function signature, including parameter types and return type.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/maxLength.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const properties = {\n  solidPreactOrReact: {\n    validate: {\n      type: {\n        type: 'function',\n        params: [\n          {\n            name: 'value',\n            type: {\n              type: 'custom',\n              name: 'MaybeValue',\n              href: '../MaybeValue',\n              generics: [\n                [\n                  'string',\n                  { type: 'array', item: 'string' },\n                  { type: 'array', item: 'number' },\n                ],\n              ],\n            },\n          },\n        ],\n        return: 'string',\n      },\n    },\n  },\n  qwik: {\n    validate: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'function',\n            params: [\n              {\n                name: 'value',\n                type: {\n                  type: 'custom',\n                  name: 'MaybeValue',\n                  href: '../MaybeValue',\n                  generics: [\n                    [\n                      'string',\n                      { type: 'array', item: 'string' },\n                      { type: 'array', item: 'number' },\n                    ],\n                  ],\n                },\n              },\n            ],\n            return: 'string',\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing maxSize Validation Function - TypeScript\nDESCRIPTION: Creates a validation function that checks if a file or array of files meets the maximum size requirement. Takes a numeric size requirement and error message string as parameters.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/maxSize.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = maxSize(requirement, error);\n```\n\n----------------------------------------\n\nTITLE: Defining Submit Function Signature in TypeScript\nDESCRIPTION: Provides the TypeScript function signature for the 'submit' function, which takes a form parameter.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/submit.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsubmit(form);\n```\n\n----------------------------------------\n\nTITLE: FormErrors Type Import and Display Component\nDESCRIPTION: Import statement for documentation components and JSX markup defining the FormErrors type display.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FormErrors.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Description, Property, Title } from '~/components';\n\n<Title>FormErrors</Title>\n<Description>Type that defines the errors of a form.</Description>\n```\n\n----------------------------------------\n\nTITLE: Using maxTotalSize Validation Function in TypeScript\nDESCRIPTION: Creates a validation function that checks if the total size of all files in a file list exceeds a specified maximum size. It takes a size requirement as a number and an error message string, and returns a validation function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/maxTotalSize.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = maxTotalSize(requirement, error);\n```\n\n----------------------------------------\n\nTITLE: Importing HttpStatusCode and Custom Components in TypeScript\nDESCRIPTION: Imports dependencies used for type definitions and UI rendering, including HttpStatusCode from 'solid-start/server' and several custom UI components from a components directory. These imports support both the implementation and documentation rendering parts of the file. No inputs or outputs apply to this snippet; it sets up necessary modules for the rest of the file to function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FormActionResult.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpStatusCode } from 'solid-start/server';\\nimport {\\n  Description,\\n  Property,\\n  Qwik,\\n  SolidPreactOrReact,\\n  Title,\\n} from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Initializing Meta Tags and Page Title in SolidStart (TypeScript/JSX)\nDESCRIPTION: This code snippet initializes the privacy policy page by importing SolidStart's Meta component for setting meta tags and a custom Title component to define the page title within a React-like JSX environment. Dependencies include the SolidStart framework and the '~/components' local module for the Title component. The Meta tag is used to exclude the privacy policy page from search engine indexing, while the Title component clearly labels the page heading. Inputs are not required; outputs are the SSR meta tags and title elements in the resulting HTML. This setup keeps privacy policy pages out of search indexing and ensures clear, accessible titling within the SPA routing system.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/legal/privacy.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta } from 'solid-start';\nimport { Title } from '~/components';\n\n<Title>Privacy policy</Title>\n<Meta name=\"robots\" content=\"noindex, nofollow\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Transformation Function with toCustom$ in Qwik\nDESCRIPTION: This snippet demonstrates how to use the toCustom$ function to create a custom transformation function. It takes an action and options as parameters and returns a transform function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/toCustom$.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst transform = toCustom$(action, options);\n```\n\n----------------------------------------\n\nTITLE: Exporting Form Property Type in TypeScript\nDESCRIPTION: Defines and exports the type information for the 'form' parameter, specifying it as a custom 'FormStore' type with a link to its documentation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/submit.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  form: {\n    type: {\n      type: 'custom',\n      name: 'FormStore',\n      href: '../FormStore',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Properties Export Configuration\nDESCRIPTION: Defines the TypeScript type configurations for form properties including Values, ResponseData, options, and form store types with their respective documentation links.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/createFormStore.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  Values: {\n    type: { type: 'custom', name: 'FieldValues', href: '../FieldValues' },\n  },\n  ResponseData: {\n    type: {\n      type: 'custom',\n      name: 'Maybe',\n      href: '../Maybe',\n      generics: [\n        {\n          type: 'custom',\n          name: 'ResponseData',\n          href: '../ResponseData',\n        },\n      ],\n    },\n    defaultValue: 'undefined',\n  },\n  options: {\n    type: {\n      type: 'custom',\n      name: 'Maybe',\n      href: '../Maybe',\n      generics: [\n        { type: 'custom', name: 'FormOptions', href: '../FormOptions' },\n      ],\n    },\n  },\n  form: {\n    type: { type: 'custom', name: 'FormStore', href: '../FormStore' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating File Size Validation Function with minSize in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a validation function using minSize to check file sizes. It takes a size requirement and an error message as parameters, and returns a validation function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/minSize.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = minSize(requirement, error);\n```\n\n----------------------------------------\n\nTITLE: Installing Modular Forms with Solid - Bash\nDESCRIPTION: Installs the Solid-specific version of Modular Forms using npm. Requires that you have npm configured in your project. Use this command if you are integrating with the Solid framework.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @modular-forms/solid\n```\n\n----------------------------------------\n\nTITLE: Installing Modular Forms with Preact - Bash\nDESCRIPTION: Adds Modular Forms support for the Preact framework using npm. Make sure your project uses Preact when issuing this installation command.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @modular-forms/preact\n```\n\n----------------------------------------\n\nTITLE: Starting SolidJS Playground Development Server\nDESCRIPTION: Commands to navigate to the SolidJS playground directory and start the development server using PNPM.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/playgrounds/solid/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ../../playgrounds/solid && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: MaxRange Function Signature\nDESCRIPTION: Basic function signature showing how to create a maxRange validation function with requirement and error parameters.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/maxRange.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = maxRange(requirement, error);\n```\n\n----------------------------------------\n\nTITLE: Export of Properties Object for Documentation\nDESCRIPTION: Defines the types and default values of parameters used in the getValue function documentation. Includes information about the form store, options object, and various boolean flags that control the function's behavior.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/getValue.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  form: {\n    type: {\n      type: 'custom',\n      name: 'FormStore',\n      href: '../FormStore',\n    },\n  },\n  options: {\n    type: 'object',\n    defaultValue: { type: 'object', entries: [] },\n  },\n  shouldActive: {\n    type: 'boolean',\n    defaultValue: { type: 'boolean', value: true },\n  },\n  shouldTouched: {\n    type: 'boolean',\n    defaultValue: { type: 'boolean', value: false },\n  },\n  shouldDirty: {\n    type: 'boolean',\n    defaultValue: { type: 'boolean', value: false },\n  },\n  shouldValid: {\n    type: 'boolean',\n    defaultValue: { type: 'boolean', value: false },\n  },\n  value: {\n    type: {\n      type: 'custom',\n      name: 'Maybe',\n      href: '../Maybe',\n      generics: [\n        {\n          type: 'custom',\n          name: 'FieldValue',\n          href: '../FieldValue',\n        },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FieldElementProps for Qwik\nDESCRIPTION: Specifies the properties required for a field element within a Qwik context using a definition list format. It includes `name` (string), `autoFocus` (boolean), `ref` (QRL function), `onInput$` (QRL event handler), `onChange$` (QRL event handler), and `onBlur$` (QRL event handler). Note the `$` suffix for event handlers, characteristic of Qwik's resumability. These properties are meant to be spread onto a native HTML element.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldElementProps.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n- `FieldElementProps` <Property type=\"object\" />\n  - `name` <Property type=\"string\" />\n  - `autoFocus` <Property type=\"boolean\" />\n  - `ref` <Property {...properties.qwik.ref} />\n  - `onInput$` <Property {...properties.qwik.onInput$} />\n  - `onChange$` <Property {...properties.qwik.onChange$} />\n  - `onBlur$` <Property {...properties.qwik.onBlur$} />\n```\n\n----------------------------------------\n\nTITLE: Installing Modular Forms with React - Bash\nDESCRIPTION: Downloads and installs Modular Forms configured for React via npm. This is intended for projects where React is the primary framework used.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @modular-forms/react\n```\n\n----------------------------------------\n\nTITLE: Installing Peer Dependency for Preact Signals - Bash\nDESCRIPTION: Installs @preact/signals as a required peer dependency for Modular Forms when used with Preact. Ensures reactive state management features function correctly.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @preact/signals\n```\n\n----------------------------------------\n\nTITLE: Defining Property Types for Solid, Preact, or React in TypeScript\nDESCRIPTION: This code defines the type of the validate function for Solid, Preact, or React frameworks. It specifies the function signature, including parameter types and return type.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/required.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  solidPreactOrReact: {\n    validate: {\n      type: {\n        type: 'function',\n        params: [\n          {\n            name: 'value',\n            type: [\n              { type: 'custom', name: 'FieldValue', href: '../FieldValue' },\n              { type: 'array', item: 'number' },\n            ],\n          },\n        ],\n        return: 'string',\n      },\n    },\n  },\n  qwik: {\n    validate: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'function',\n            params: [\n              {\n                name: 'value',\n                type: [\n                  {\n                    type: 'custom',\n                    name: 'FieldValue',\n                    href: '../FieldValue',\n                  },\n                  { type: 'array', item: 'number' },\n                ],\n              },\n            ],\n            return: 'string',\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Usage Example of toTrimmed Function in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the toTrimmed function to create a transformation function. It shows the basic syntax for calling toTrimmed with options.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/toTrimmed.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst transform = toTrimmed(options);\n```\n\n----------------------------------------\n\nTITLE: Property Definitions for hasField Documentation\nDESCRIPTION: Export statement defining the properties used in the documentation of the hasField function. It includes types and default values for form, options, shouldActive, shouldTouched, shouldDirty, and shouldValid parameters.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/hasField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  form: {\n    type: {\n      type: 'custom',\n      name: 'FormStore',\n      href: '../FormStore',\n    },\n  },\n  options: {\n    type: 'object',\n    defaultValue: { type: 'object', entries: [] },\n  },\n  shouldActive: {\n    type: 'boolean',\n    defaultValue: { type: 'boolean', value: true },\n  },\n  shouldTouched: {\n    type: 'boolean',\n    defaultValue: { type: 'boolean', value: false },\n  },\n  shouldDirty: {\n    type: 'boolean',\n    defaultValue: { type: 'boolean', value: false },\n  },\n  shouldValid: {\n    type: 'boolean',\n    defaultValue: { type: 'boolean', value: false },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for toTrimmed Function in TypeScript\nDESCRIPTION: This snippet defines the properties object used in the documentation. It includes type definitions for the 'on' option and the return types for different frameworks (Solid, Preact/React, and Qwik).\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/toTrimmed.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  on: {\n    type: [\n      { type: 'string', value: 'input' },\n      { type: 'string', value: 'change' },\n      { type: 'string', value: 'blur' },\n    ],\n  },\n  solidPreactOrReact: {\n    transform: {\n      type: {\n        type: 'custom',\n        name: 'TransformField',\n        href: '../TransformField',\n      },\n    },\n  },\n  qwik: {\n    transform: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'custom',\n            name: 'TransformField',\n            href: '../TransformField',\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Modular Forms Documentation\nDESCRIPTION: Import statements for documentation components and routing utilities from SolidJS and Modular Forms.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/createForm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { A } from 'solid-start';\nimport { HttpStatusCode } from 'solid-start/server';\nimport {\n  Description,\n  Property,\n  QwikPreactOrReact,\n  Solid,\n  Title,\n} from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Using toLowerCase Function in TypeScript\nDESCRIPTION: Demonstrates the usage of the toLowerCase function. It shows how to create a transform function with options.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/toLowerCase.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst transform = toLowerCase(options);\n```\n\n----------------------------------------\n\nTITLE: Defining Property Types for Documentation in TypeScript\nDESCRIPTION: Defines the property types used in the documentation. It includes options for the 'on' parameter and different return types based on the framework (Solid, Preact, React, or Qwik).\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/toLowerCase.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  on: {\n    type: [\n      { type: 'string', value: 'input' },\n      { type: 'string', value: 'change' },\n      { type: 'string', value: 'blur' },\n    ],\n  },\n  solidPreactOrReact: {\n    transform: {\n      type: {\n        type: 'custom',\n        name: 'TransformField',\n        href: '../TransformField',\n      },\n    },\n  },\n  qwik: {\n    transform: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'custom',\n            name: 'TransformField',\n            href: '../TransformField',\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Modular Forms in Solid - TypeScript\nDESCRIPTION: Demonstrates how to import APIs from the Solid version of Modular Forms into a TypeScript file. Replace the ellipsis (…) with specific exports as needed for your application.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { … } from '@modular-forms/solid';\n```\n\n----------------------------------------\n\nTITLE: Exporting Properties for Modular Forms Documentation\nDESCRIPTION: This code snippet defines and exports properties used in the documentation, specifically for the 'form' parameter of the swap function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/swap.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  form: {\n    type: {\n      type: 'custom',\n      name: 'FormStore',\n      href: '../FormStore',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Validation Function in Qwik\nDESCRIPTION: This code defines the type for the validate function returned by minLength in Qwik context. It uses a QRL type with similar function signature as the Solid/Preact/React version, but wrapped in a QRL generic.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/minLength.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvalidate: {\n  type: {\n    type: 'custom',\n    name: 'QRL',\n    generics: [\n      {\n        type: 'function',\n        params: [\n          {\n            name: 'value',\n            type: {\n              type: 'custom',\n              name: 'MaybeValue',\n              href: '../MaybeValue',\n              generics: [\n                [\n                  'string',\n                  { type: 'array', item: 'string' },\n                  { type: 'array', item: 'number' },\n                ],\n              ],\n            },\n          },\n        ],\n        return: 'string',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in TypeScript/JSX\nDESCRIPTION: Imports necessary components like `Description`, `Property`, `Qwik`, `React`, `SolidOrPreact`, and `Title` from the '~/components' path. These components are used for rendering the documentation page content and structure.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldEvent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Description,\n  Property,\n  Qwik,\n  React,\n  SolidOrPreact,\n  Title,\n} from '~/components';\n```\n\n----------------------------------------\n\nTITLE: FieldValues Property Type Definition\nDESCRIPTION: Defines the type structure for form field values with nested objects and arrays. It specifies that field values can be either single values, nested objects, or arrays of values.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldValues.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  FieldValues: {\n    type: {\n      type: 'object',\n      entries: [\n        {\n          key: { name: 'name', type: 'string' },\n          value: [\n            { type: 'custom', name: 'FieldValue', href: '../FieldValue' },\n            { type: 'custom', name: 'FieldValues' },\n            {\n              type: 'array',\n              item: [\n                {\n                  type: 'custom',\n                  name: 'FieldValue',\n                  href: '../FieldValue',\n                },\n                { type: 'custom', name: 'FieldValues' },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Modular Forms in Qwik - TypeScript\nDESCRIPTION: Shows the correct import statement for bringing Modular Forms packages into a Qwik-based TypeScript file. Substitute the ellipsis (…) with actual API members you require.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { … } from '@modular-forms/qwik';\n```\n\n----------------------------------------\n\nTITLE: Importing Modular Forms in React - TypeScript\nDESCRIPTION: Explains how to import Modular Forms in a React/TypeScript environment. The ellipsis (…) should be replaced by the specific functions or objects needed for your implementation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { … } from '@modular-forms/react';\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for toUpperCase Function Documentation\nDESCRIPTION: Imports necessary components and utilities for the documentation page of the toUpperCase function. It includes HTTP status codes, UI components, and a context check for Qwik framework.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/toUpperCase.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpStatusCode } from 'solid-start/server';\nimport { Description, Property, Title } from '~/components';\nimport { isQwik } from '~/contexts';\n```\n\n----------------------------------------\n\nTITLE: Defining Type Properties for zodField$ Parameters and Return Value (TypeScript)\nDESCRIPTION: This TypeScript object defines the expected types for the `schema` parameter and the `validate` return value of the `zodField$` function. The `schema` parameter accepts a `MaybeFunction` resolving to a `ZodType`. The `validate` return value is a Qwik QRL (Qwik Resource Loader) containing a function that takes a `FieldValue` and returns a string (likely an error message or an empty string if valid). It uses custom type definitions specific to the Modular Forms library and its Qwik integration.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/zodField$.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport const properties = {\n  schema: {\n    type: {\n      type: 'custom',\n      name: 'MaybeFunction',\n      href: '../MaybeFunction',\n      generics: [\n        {\n          type: 'custom',\n          name: 'ZodType',\n          generics: [\n            'any',\n            'any',\n            {\n              type: 'custom',\n              name: 'FieldValue',\n              href: '../FieldValue',\n            },\n          ],\n        },\n      ],\n    },\n  },\n  validate: {\n    type: {\n      type: 'custom',\n      name: 'QRL',\n      generics: [\n        {\n          type: 'function',\n          params: [\n            {\n              name: 'value',\n              type: {\n                type: 'custom',\n                name: 'FieldValue',\n                href: '../FieldValue',\n              },\n            },\n          ],\n          return: 'string',\n        },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Components for PartialValues Documentation in TypeScript/JSX\nDESCRIPTION: This code snippet imports necessary components from solid-start and local components for creating the documentation page for the PartialValues utility type.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/PartialValues.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { A } from 'solid-start';\nimport { Description, Property, Title } from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Importing Components in SolidStart/TypeScript\nDESCRIPTION: Imports the `A` component (likely for routing/links) from the `solid-start` library and custom `Description` and `Title` components from a local project directory (`~/components`). This setup is typical in SolidStart applications.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { A } from 'solid-start';\nimport { Description, Title } from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Installing Modular Forms with Qwik - Bash\nDESCRIPTION: Installs the Qwik-specific version of Modular Forms via npm. Ensure your JavaScript or TypeScript project uses the Qwik framework before running this command.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @modular-forms/qwik\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for InitialValues Type in TypeScript\nDESCRIPTION: This code defines the properties object for the InitialValues type. It specifies the 'Values' property as a custom type 'FieldValues' with a link to its documentation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/InitialValues.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const properties = {\n  Values: {\n    type: { type: 'custom', name: 'FieldValues', href: '../FieldValues' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for toUpperCase Function Documentation\nDESCRIPTION: Defines the properties object containing type definitions and descriptions for the toUpperCase function parameters and return values. It includes options for different frameworks like Solid, Preact, React, and Qwik.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/toUpperCase.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  on: {\n    type: [\n      { type: 'string', value: 'input' },\n      { type: 'string', value: 'change' },\n      { type: 'string', value: 'blur' },\n    ],\n  },\n  solidPreactOrReact: {\n    transform: {\n      type: {\n        type: 'custom',\n        name: 'TransformField',\n        href: '../TransformField',\n      },\n    },\n  },\n  qwik: {\n    transform: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'custom',\n            name: 'TransformField',\n            href: '../TransformField',\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for MIME Type Validator\nDESCRIPTION: Defines the TypeScript types and interfaces for the MIME type validator, including property definitions for different framework implementations (Qwik, Solid, Preact, React) and validation function signatures.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/mimeType.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  requirement: {\n    type: ['string', { type: 'array', item: 'string' }],\n  },\n  solidPreactOrReact: {\n    validate: {\n      type: {\n        type: 'function',\n        params: [\n          {\n            name: 'value',\n            type: {\n              type: 'custom',\n              name: 'MaybeValue',\n              href: '../MaybeValue',\n              generics: [\n                [\n                  { type: 'custom', name: 'File' },\n                  { type: 'array', item: { type: 'custom', name: 'File' } },\n                ],\n              ],\n            },\n          },\n        ],\n        return: 'string',\n      },\n    },\n  },\n  qwik: {\n    validate: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'function',\n            params: [\n              {\n                name: 'value',\n                type: {\n                  type: 'custom',\n                  name: 'MaybeValue',\n                  href: '../MaybeValue',\n                  generics: [\n                    [\n                      { type: 'custom', name: 'File' },\n                      { type: 'array', item: { type: 'custom', name: 'File' } },\n                    ],\n                  ],\n                },\n              },\n            ],\n            return: 'string',\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using the PNPM package manager.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/playgrounds/solid/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Form Values with setValues in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the setValues function to set multiple form values at once. It also shows how to set values for a field array.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/setValues.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Set multiple form values\nsetValues(form, values, options);\n\n// Set values of a field array\nsetValues(form, name, values, options);\n```\n\n----------------------------------------\n\nTITLE: Starting the React Playground Development Server (Bash)\nDESCRIPTION: These commands change the directory to the React playground (`playgrounds/react`) relative to the project root and then start the development server using the `dev` script defined in its `package.json` via `pnpm`. This typically launches a local web server to test the forms in a browser. Requires `pnpm` and the playground's dependencies to be installed.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/playgrounds/react/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ../../playgrounds/react && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in TypeScript\nDESCRIPTION: Imports various components like `Description`, `Property`, `Title`, and framework-specific tags (`Preact`, `Qwik`, `React`, `Solid`) from a local `~/components` path. These are likely used to structure and render the documentation page itself.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldElementProps.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Description,\n  Property,\n  Preact,\n  Qwik,\n  React,\n  Solid,\n  Title,\n} from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Utilities in TypeScript/JSX\nDESCRIPTION: Imports necessary components and utilities for the documentation page. It includes HTTP status codes, custom components, and a context check for Qwik framework.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/toLowerCase.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpStatusCode } from 'solid-start/server';\nimport { Description, Property, Title } from '~/components';\nimport { isQwik } from '~/contexts';\n```\n\n----------------------------------------\n\nTITLE: Defining FieldEvent Structure for Solid/Preact\nDESCRIPTION: Specifies the structure of the `FieldEvent` type as represented within the documentation for SolidJS and Preact environments. It highlights the `FieldEvent` type itself and its `currentTarget` property, which links to the `FieldElement` type.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldEvent.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SolidOrPreact block>\n\n- `FieldEvent` <Property {...properties.FieldEvent} />\n  - `currentTarget` <Property {...properties.solidPreactOrReact.currentTarget} />\n\n</SolidOrPreact>\n```\n\n----------------------------------------\n\nTITLE: Building SolidJS Package for Modular Forms\nDESCRIPTION: Commands to navigate to the SolidJS package directory and build it using PNPM.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/playgrounds/solid/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/solid && pnpm build\n```\n\n----------------------------------------\n\nTITLE: Implementing TextInput Component in React with Signals\nDESCRIPTION: A React implementation of the TextInput component that uses @preact/signals-react for state management. Utilizes React's forwardRef pattern for ref forwarding and proper React event handlers.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/input-components.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReadonlySignal } from '@preact/signals-react';\nimport { ChangeEventHandler, FocusEventHandler, forwardRef } from 'react';\n\ntype TextInputProps = {\n  name: string;\n  type: 'text' | 'email' | 'tel' | 'password' | 'url' | 'date';\n  label?: string;\n  placeholder?: string;\n  value: ReadonlySignal<string | undefined>;\n  error: ReadonlySignal<string>;\n  required?: boolean;\n  onChange: ChangeEventHandler<HTMLInputElement>;\n  onBlur: FocusEventHandler<HTMLInputElement>;\n};\n\nexport const TextInput = forwardRef<HTMLInputElement, TextInputProps>(\n  ({ label, value, error, ...props }, ref) => {\n    const { name, required } = props;\n    return (\n      <div>\n        {label && (\n          <label htmlFor={name}>\n            {label} {required && <span>*</span>}\n          </label>\n        )}\n        <input\n          {...props}\n          ref={ref}\n          id={name}\n          value={value.value || ''}\n          aria-invalid={!!error.value}\n          aria-errormessage={`${name}-error`}\n        />\n        {error.value && <div id={`${name}-error`}>{error}</div>}\n      </div>\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Providing Static Initial Form Values in Qwik (TSX)\nDESCRIPTION: Shows how to pass static initial values directly to the `useForm` hook in Qwik using an object literal with a `value` key. This is an alternative to `routeLoader$` when initial form data is static or known client-side, simplifying setup for non-dynamic values.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/create-your-form.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst [loginForm, { Form, Field }] = useForm<LoginForm>({\n  loader: { value: { email: '', password: '' } },\n});\n```\n\n----------------------------------------\n\nTITLE: Component Imports\nDESCRIPTION: Imports required components from solid-start and local components directory for rendering the documentation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldValues.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { A } from 'solid-start';\nimport { Description, Property, Title } from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Documentation in TypeScript/JSX\nDESCRIPTION: This code snippet imports various components and utilities used for documentation purposes. It includes imports from 'solid-start' and custom components.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/InitialValues.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { A } from 'solid-start';\nimport { HttpStatusCode } from 'solid-start/server';\nimport {\n  Description,\n  Property,\n  Qwik,\n  SolidPreactOrReact,\n  Title,\n} from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Value Validation Function\nDESCRIPTION: Defines TypeScript types for the 'value' function parameters and return value. It includes different type definitions for Solid/Preact/React and Qwik frameworks, specifying the structure of the validation function.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/value.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const properties = {\n  requirement: {\n    type: ['string', 'number'],\n  },\n  solidPreactOrReact: {\n    validate: {\n      type: {\n        type: 'function',\n        params: [\n          {\n            name: 'value',\n            type: {\n              type: 'custom',\n              name: 'MaybeValue',\n              href: '../MaybeValue',\n              generics: [['string', 'number']],\n            },\n          },\n        ],\n        return: 'string',\n      },\n    },\n  },\n  qwik: {\n    validate: {\n      type: {\n        type: 'custom',\n        name: 'QRL',\n        generics: [\n          {\n            type: 'function',\n            params: [\n              {\n                name: 'value',\n                type: {\n                  type: 'custom',\n                  name: 'MaybeValue',\n                  href: '../MaybeValue',\n                  generics: [['string', 'number']],\n                },\n              },\n            ],\n            return: 'string',\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Installing all required project dependencies using pnpm package manager.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/playgrounds/preact/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Exporting Form Properties Object in Modular Forms (TypeScript)\nDESCRIPTION: This code snippet defines and exports a 'properties' object containing form-related properties. It specifically defines the 'form' property with a custom type 'FormStore' and a reference to its documentation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/move.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const properties = {\n  form: {\n    type: {\n      type: 'custom',\n      name: 'FormStore',\n      href: '../FormStore',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Client-Side Link with SolidStart's A Component\nDESCRIPTION: Creates an internal link to the `/playground` route using the `A` component imported from `solid-start`. This component typically handles client-side navigation within a SolidStart application without full page reloads.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/introduction.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<A href=\"/playground\">playground</A>\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Components for Documentation in TypeScript\nDESCRIPTION: This snippet demonstrates the import of custom components used for documentation purposes. These components are likely used to structure and format the documentation content.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/toCustom.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  Description,\n  Property,\n  Qwik,\n  SolidPreactOrReact,\n  Title,\n} from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Displaying 404 for Unsupported Framework (Solid) - Modular Forms (JSX)\nDESCRIPTION: This snippet renders a 404 status code and a notice indicating that the useFormStore documentation is only applicable to Modular Forms usage with the Qwik, Preact, and React frameworks, not Solid. It is intended to be used in the Solid-specific documentation route to prevent confusion and inform users of support limitations. The component uses the HttpStatusCode utility from solid-start/server for sending proper HTTP responses.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/useFormStore.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<HttpStatusCode code={404} />\n\n> This page is exclusively for the Qwik, Preact and React library of Modular Forms.\n```\n\n----------------------------------------\n\nTITLE: Returning 404 Status for Non-Qwik Implementations - TSX\nDESCRIPTION: This TSX code snippet sets the HTTP status code to 404 using SolidStart's HttpStatusCode component to indicate that the page or feature is exclusive to the Qwik implementation and not supported for Solid, Preact, or React. Dependencies include the HttpStatusCode component from 'solid-start/server'. The main parameter, code, specifies the HTTP status, and there are no return values besides the side effect of setting the status. This snippet demonstrates conditional documentation rendering based on the framework context.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/zodForm$.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<HttpStatusCode code={404} />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: This command installs all the necessary dependencies for the project using PNPM. It should be run after cloning the repository.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/playgrounds/qwik/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Validation Function in Solid, Preact, or React\nDESCRIPTION: This code defines the type for the validate function returned by minLength in Solid, Preact, or React contexts. It takes a MaybeValue of string or array type and returns a string.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/minLength.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvalidate: {\n  type: {\n    type: 'function',\n    params: [\n      {\n        name: 'value',\n        type: {\n          type: 'custom',\n          name: 'MaybeValue',\n          href: '../MaybeValue',\n          generics: [\n            [\n              'string',\n              { type: 'array', item: 'string' },\n              { type: 'array', item: 'number' },\n            ],\n          ],\n        },\n      },\n    ],\n    return: 'string',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for SolidJS FAQ Page\nDESCRIPTION: Imports the `A` component for navigation from `solid-start` and custom `Description`, `Solid`, and `Title` components from the local `~/components` directory. These components are used to structure and render the FAQ page content within a SolidJS application.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/faq.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { A } from 'solid-start';\nimport { Description, Solid, Title } from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Importing Components for ValidateFieldArray Documentation\nDESCRIPTION: Imports necessary components from a local module to create documentation for the ValidateFieldArray type.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/ValidateFieldArray.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Description, Property, Title } from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Importing Modular Forms in Preact - TypeScript\nDESCRIPTION: Provides sample code for importing the Preact version of Modular Forms into your TypeScript project. Update the ellipsis (…) with relevant Modular Forms components or functions.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { … } from '@modular-forms/preact';\n```\n\n----------------------------------------\n\nTITLE: FormErrors Type Properties Definition\nDESCRIPTION: JavaScript object defining the properties of the FormErrors type, specifying it as an object with string keys and string values.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FormErrors.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const properties = {\n  FormErrors: {\n    type: {\n      type: 'object',\n      entries: [{ key: { name: 'name', type: 'string' }, value: 'string' }],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Qwik Playground Development Server\nDESCRIPTION: This command navigates to the Qwik playground directory and starts the development server. This is the final step to run the playground.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/playgrounds/qwik/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ../../playgrounds/qwik && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Cloning Modular Forms Repository\nDESCRIPTION: Command to clone the Modular Forms repository from GitHub using SSH.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/playgrounds/solid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:fabian-hiller/modular-forms.git\n```\n\n----------------------------------------\n\nTITLE: Linking to Playground using SolidStart A Component\nDESCRIPTION: Uses the `A` component imported from `solid-start`. This component is typically used for client-side navigation within SolidStart applications, creating a link to the `/playground` route without a full page reload.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/faq.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<A href=\"/playground\">playground</A>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in TypeScript/JSX\nDESCRIPTION: Imports components used for structuring the documentation page, including Description, Property, and Title.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/submit.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Description, Property, Title } from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic External Links in JSX/TSX\nDESCRIPTION: Creates external links using standard HTML `<a>` tags within a JSX/TSX context. The `href` attribute dynamically constructs the URL using a Vite environment variable (`import.meta.env.VITE_GITHUB_URL`). `target=\"_blank\"` ensures the link opens in a new tab, and `rel=\"noreferrer\"` adds a security measure.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/introduction.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<a href={`${import.meta.env.VITE_GITHUB_URL}/issues/new`} target=\"\\_blank\" rel=\"noreferrer\">issue</a>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<a href={`${import.meta.env.VITE_GITHUB_URL}/tree/main/LICENSE.md`} target=\"\\_blank\" rel=\"noreferrer\">MIT License</a>\n```\n\n----------------------------------------\n\nTITLE: Exporting Type Metadata Object in TypeScript\nDESCRIPTION: Defines and exports a properties object containing metadata for the MaybeValue utility type, specifying the possible types for 'Value' and the resulting 'Type' (the union of the original type with null and undefined). This pattern provides strong typing and can be used as documentation or for runtime type-checking in TypeScript-based projects. All type associations use standard JavaScript object notation, and the custom type reference makes it extensible for other generic utilities.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/MaybeValue.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  Value: {\n    type: 'any',\n  },\n  Type: {\n    type: [{ type: 'custom', name: 'Value' }, 'null', 'undefined'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing FormStore Dependencies\nDESCRIPTION: Imports required components and utilities for FormStore implementation\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FormStore.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { A } from 'solid-start';\nimport { Description, Property, Title } from '~/components';\nimport { isPreact, isReact } from '~/contexts';\n```\n\n----------------------------------------\n\nTITLE: Importing SolidStart and Custom Components in TypeScript\nDESCRIPTION: This snippet imports the `Meta` component from the 'solid-start' library and a custom `Title` component from the local '~/components' directory. These imports are necessary to use these components within the SolidStart page.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/legal/contact.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta } from 'solid-start';\nimport { Title } from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Installing Kobalte Core via npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the '@kobalte/core' library, which provides the unstyled, accessible UI components used in the subsequent examples. This is a prerequisite for building custom form components with Kobalte.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/kobalte.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @kobalte/core\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Utilities in TypeScript/JSX\nDESCRIPTION: This snippet shows the import statements for various components and utilities used in the documentation page. It includes imports from solid-start/server and local components.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/toTrimmed.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpStatusCode } from 'solid-start/server';\nimport { Description, Property, Title } from '~/components';\nimport { isQwik } from '~/contexts';\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using pnpm (Bash)\nDESCRIPTION: This command utilizes `pnpm` (Performant npm) to install all the necessary project dependencies defined in the `pnpm-lock.yaml` and `package.json` files within the cloned repository's root directory. It requires `pnpm` to be installed globally or available in the environment.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/playgrounds/react/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for PartialValues Generic in TypeScript\nDESCRIPTION: This code defines the properties object for the PartialValues utility type, specifying the type information for the Values generic parameter.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/PartialValues.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const properties = {\n  Values: {\n    type: { type: 'custom', name: 'FieldValues', href: '../FieldValues' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title and Meta Tags using SolidStart Components in JSX\nDESCRIPTION: This snippet utilizes the imported `Title` and `Meta` components within JSX syntax. The `Title` component sets the HTML document's title to 'Contact'. The `Meta` component adds a robots meta tag with 'noindex, nofollow' to instruct search engine crawlers not to index or follow links on this page.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/legal/contact.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Title>Contact</Title>\n<Meta name=\"robots\" content=\"noindex, nofollow\" />\n```\n\n----------------------------------------\n\nTITLE: Creating URL Validation Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a URL validation function. It takes an error message as a parameter and returns a validation function that checks if a given value is a valid URL.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst validate = url(error);\n```\n\n----------------------------------------\n\nTITLE: Import Statements for MaybeFunction Documentation\nDESCRIPTION: Imports required components and utilities from solid-start server and local components.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/MaybeFunction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpStatusCode } from 'solid-start/server';\nimport {\n  Description,\n  Property,\n  Qwik,\n  SolidPreactOrReact,\n  Title,\n} from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Navigate to the Preact playground directory and start the development server.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/playgrounds/preact/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ../../playgrounds/preact && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Describing MaybePromise Utility Type with React Components in TSX\nDESCRIPTION: This snippet uses React components to document and visually present the MaybePromise type. It includes title and description components, as well as inline rendering of property type metadata. The dependencies are the '~/components' module providing the custom components, and it expects a property object to destructure for displaying property types and descriptions.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/MaybePromise.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Description, Property, Title } from '~/components';\n\n<Title>MaybePromise</Title>\n<Description>\n  Utility type that transforms a type into a maybe Promise type.\n</Description>\n\n# MaybePromise\n\nUtility type that transforms a type into a maybe `Promise` type.\n\n## Generic\n\n- `Value` <Property {...properties.Value} />\n\n## Return\n\n- `Type` <Property {...properties.Type} />\n```\n\n----------------------------------------\n\nTITLE: Linking to External SolidStart Website\nDESCRIPTION: Renders a standard HTML anchor (`<a>`) tag providing an external link to the official SolidStart documentation website (start.solidjs.com). The `target=\"_blank\"` attribute ensures the link opens in a new tab.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/faq.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<a href=\"https://start.solidjs.com\" target=\"_blank\" rel=\"noreferrer\">SolidStart</a>\n```\n\n----------------------------------------\n\nTITLE: Exporting Form Validation Type Properties - TypeScript\nDESCRIPTION: Defines and exports the 'properties' object that declares the type signature for ValidateForm using custom and generic types. Establishes that the form validator takes an object of type PartialValues<FieldValue> and returns a MaybePromise of FormErrors. Dependencies include the PartialValues, FieldValue, MaybePromise, and FormErrors types, and intended for strict type checking of validation logic. Expects a partial input object and returns (or resolves to) the form's errors, if any.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/ValidateForm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  ValidateForm: {\n    type: {\n      type: 'function',\n      params: [\n        {\n          name: 'values',\n          type: {\n            type: 'custom',\n            name: 'PartialValues',\n            href: '../PartialValues',\n            generics: [\n              { type: 'custom', name: 'FieldValue', href: '../FieldValue' },\n            ],\n          },\n        },\n      ],\n      return: {\n        type: 'custom',\n        name: 'MaybePromise',\n        href: '../MaybePromise',\n        generics: [\n          { type: 'custom', name: 'FormErrors', href: '../FormErrors' },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Properties Configuration for MaybeArray Type in TypeScript\nDESCRIPTION: Exports the properties configuration object that defines the Value generic parameter and Type return type for the MaybeArray utility type. This configuration is used to generate the documentation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/MaybeArray.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  Value: {\n    type: 'any',\n  },\n  Type: {\n    type: [\n      { type: 'custom', name: 'Value' },\n      { type: 'array', item: { type: 'custom', name: 'Value' } },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using pnpm Bash\nDESCRIPTION: This command uses the pnpm package manager to install all necessary dependencies defined in the project's `package.json` or `pnpm-lock.yaml` file. This step should be run after cloning the repository and navigating into the project directory.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Link to Specific GitHub Issue using Vite Env Var\nDESCRIPTION: Generates an anchor (`<a>`) tag linking to a specific GitHub issue (issue #3) within the project repository. The link URL is dynamically constructed using the `VITE_GITHUB_URL` environment variable provided by Vite.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/faq.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<a href={`${import.meta.env.VITE_GITHUB_URL}/issues/3`} target=\"\\_blank\" rel=\"noreferrer\">here</a>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Title and Description Components in JSX/TSX\nDESCRIPTION: Utilizes the previously imported `Title` and `Description` components to render introductory content for the Modular Forms library page. This demonstrates basic component usage in a JSX/TSX environment, likely within a SolidJS/SolidStart application.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/introduction.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Title>Introduction</Title>\n<Description>\n  Modular Forms is a JavaScript library built on SolidJS, Qwik, Preact and React\n  to validate and handle various types of forms. It is fast, type-safe and the\n  bundle size is small.\n</Description>\n```\n\n----------------------------------------\n\nTITLE: Starting the Website Development Server using pnpm Bash\nDESCRIPTION: This command sequence changes the directory back up two levels and then into the `website` directory, finally starting the development server using the `dev` script (defined in the website's `package.json`) via pnpm. This makes the local development version of the website accessible.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ../../website && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Documentation in TypeScript/JSX\nDESCRIPTION: Imports necessary components from a local module for documenting the ValidateField type.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/ValidateField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Description, Property, Title } from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Importing Components for FormActionStore Documentation\nDESCRIPTION: This snippet imports necessary components and types for documenting the FormActionStore type. It includes imports from 'solid-start' and custom components.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FormActionStore.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { A } from 'solid-start';\nimport { HttpStatusCode } from 'solid-start/server';\nimport {\n  Description,\n  Property,\n  Qwik,\n  SolidPreactOrReact,\n  Title,\n} from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Documentation in TypeScript/JSX\nDESCRIPTION: Imports components used for documenting the FieldElement type, including Description, Property, and Title.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FieldElement.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Description, Property, Title } from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Context (JavaScript)\nDESCRIPTION: Imports necessary components (`Description`, `Property`, `Title`) from a local components directory and a context utility function (`isQwik`) used to determine the current framework (Qwik vs. Solid/Preact/React) for rendering framework-specific documentation content.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/SubmitHandler.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Description, Property, Title } from '~/components';\nimport { isQwik } from '~/contexts';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in TypeScript/React\nDESCRIPTION: Imports necessary components from a local module for generating documentation.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/ResponseData.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Description, Property, Title } from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title using Custom SolidJS Component\nDESCRIPTION: Utilizes the custom `Title` component, presumably defined in `~/components` and imported previously, to render the main heading \"FAQ\" for the page.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/faq.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Title>FAQ</Title>\n```\n\n----------------------------------------\n\nTITLE: Building @modular-forms/qwik Package\nDESCRIPTION: This command navigates to the Qwik package directory and builds it. This step is necessary before running the playground.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/playgrounds/qwik/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/qwik && pnpm build\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt with Sitemap Reference\nDESCRIPTION: A robots.txt configuration that allows all user agents to crawl the website without restrictions and includes a reference to the website's sitemap location.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: * \nDisallow: \n\nSitemap: https://www.example.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Importing Components for FormResponse Documentation\nDESCRIPTION: Imports necessary components from a local module for documenting the FormResponse type.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/FormResponse.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Description, Property, Title } from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components\nDESCRIPTION: Imports required components for documentation from local components directory.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/Maybe.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Description, Property, Title } from '~/components';\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Link to GitHub Issues using Vite Env Var\nDESCRIPTION: Renders an anchor (`<a>`) tag linking to the project's GitHub issues page for creating new issues. The URL is dynamically constructed using the `VITE_GITHUB_URL` environment variable, accessed via `import.meta.env`, which is a common pattern in Vite-based projects.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/faq.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<a href={`${import.meta.env.VITE_GITHUB_URL}/issues/new`} target=\"\\_blank\" rel=\"noreferrer\">issue</a>\n```\n\n----------------------------------------\n\nTITLE: Building Preact Package\nDESCRIPTION: Navigate to the Preact package directory and build the @modular-forms/preact package.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/playgrounds/preact/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/preact && pnpm build\n```\n\n----------------------------------------\n\nTITLE: Cloning Modular Forms Repository\nDESCRIPTION: Initial step to clone the Modular Forms repository from GitHub using SSH.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/playgrounds/preact/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:fabian-hiller/modular-forms.git\n```\n\n----------------------------------------\n\nTITLE: Cloning Modular Forms Repository using Git\nDESCRIPTION: This command clones the Modular Forms repository from GitHub using SSH. It's the first step in setting up the Qwik Playground.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/playgrounds/qwik/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:fabian-hiller/modular-forms.git\n```\n\n----------------------------------------\n\nTITLE: Cloning the Modular Forms Repository using Git (Bash)\nDESCRIPTION: This command uses Git to clone the `modular-forms` repository from GitHub via the SSH protocol. It requires Git to be installed and SSH keys configured with GitHub. The repository contains the source code for the modular-forms library and its associated playgrounds.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/playgrounds/react/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:fabian-hiller/modular-forms.git\n```\n\n----------------------------------------\n\nTITLE: Defining Maybe Type Properties Configuration\nDESCRIPTION: Exports configuration object defining the properties for the Maybe type, including value type and return type definitions.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/api/Maybe.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const properties = {\n  Value: {\n    type: 'any',\n  },\n  Type: {\n    type: [{ type: 'custom', name: 'Value' }, 'undefined'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning the Modular Forms Repository using Git Bash\nDESCRIPTION: This command clones the `modular-forms` project repository from GitHub using the SSH URL. It's the first step in setting up the local development environment.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:fabian-hiller/modular-forms.git\n```\n\n----------------------------------------\n\nTITLE: Building the @modular-forms/solid Package using pnpm Bash\nDESCRIPTION: This command sequence first changes the current directory to `packages/solid` and then executes the build script (defined in that package's `package.json`) using pnpm. This step compiles the Solid framework integration package needed by the website.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/solid && pnpm build\n```\n\n----------------------------------------\n\nTITLE: Installing Peer Dependency for Preact Signals React - Bash\nDESCRIPTION: Installs @preact/signals-react, a peer dependency required by Modular Forms for React. Reference the README of @preact/signals-react for further setup and configuration.\nSOURCE: https://github.com/fabian-hiller/modular-forms/blob/main/website/src/routes/(layout)/[framework]/guides/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @preact/signals-react\n```"
  }
]