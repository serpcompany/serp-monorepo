[
  {
    "owner": "storj",
    "repo": "docs",
    "content": "TITLE: Implementing Presigned URLs with AWS Lambda in Go\nDESCRIPTION: Complete Go implementation for creating presigned URLs using AWS Lambda functions. This code establishes an S3 connection to Storj, handles request validation, and generates time-limited presigned URLs for GET and POST operations. It's designed to be deployed as a Lambda function with URL endpoint access.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/presigned-urls-serverless-cloud/page.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n\nimport (\n   \"context\"\n   \"time\"\n\n\n   \"github.com/aws/aws-lambda-go/events\"\n   \"github.com/aws/aws-lambda-go/lambda\"\n   \"github.com/aws/aws-sdk-go/aws\"\n   \"github.com/aws/aws-sdk-go/aws/credentials\"\n   \"github.com/aws/aws-sdk-go/aws/request\"\n   \"github.com/aws/aws-sdk-go/aws/session\"\n   \"github.com/aws/aws-sdk-go/service/s3\"\n)\n\n\nconst (\n   storjS3Bucket = \"<YOUR S3 BUCKET>\"\n   storjS3Id     = \"<YOUR ACCESS KEY ID>\"\n   storjS3Secret = \"<YOUR SECRET KEY>\"\n   storjS3URL    = \"https://gateway.storjshare.io/\"\n)\n\n\nfunc main() {\n   lambda.Start(handleRequest)\n}\n\n\n// HandleRequest accepts an S3 key and presigned URL method type, and returns a presigned URL.\n// It is designed to be used directly as a Lambda function URL. (https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html)\n// Nil errors are always returned, so that the client gets more than an \"Internal Server Error\" message.\nfunc handleRequest(ctx context.Context, r events.LambdaFunctionURLRequest) (events.LambdaFunctionURLResponse, error) {\n   key := r.QueryStringParameters[\"key\"]\n   method := r.QueryStringParameters[\"method\"]\n\n\n   if len(key) == 0 {\n       return events.LambdaFunctionURLResponse{Body: \"Request is missing 'key' query parameter\", StatusCode: 400}, nil\n   }\n   if len(method) == 0 {\n       return events.LambdaFunctionURLResponse{Body: \"Request is missing 'method' query parameter\", StatusCode: 400}, nil\n   }\n\n\n   sess, err := session.NewSession(&aws.Config{\n       Credentials: credentials.NewStaticCredentials(storjS3Id, storjS3Secret, \"\"),\n       Endpoint:    aws.String(storjS3URL),\n       Region:      aws.String(\"us-east-1\"),\n   })\n   if err != nil {\n       return events.LambdaFunctionURLResponse{Body: \"Failed to create AWS S3 session\", StatusCode: 500}, nil\n   }\n\n\n   svc := s3.New(sess)\n   var req *request.Request\n   switch method {\n   case \"GET\":\n       req, _ = svc.GetObjectRequest(&s3.GetObjectInput{Bucket: aws.String(storjS3Bucket), Key: &key})\n   case \"POST\":\n       req, _ = svc.PutObjectRequest(&s3.PutObjectInput{Bucket: aws.String(storjS3Bucket), Key: &key})\n   default:\n       return events.LambdaFunctionURLResponse{Body: \"The request 'method' query parameter is invalid\", StatusCode: 400}, nil\n   }\n   urlStr, err := req.Presign(15 * time.Minute)\n   if err != nil {\n       return events.LambdaFunctionURLResponse{Body: \"Failed to presign request\", StatusCode: 500}, nil\n   }\n\n\n   return events.LambdaFunctionURLResponse{Body: urlStr, StatusCode: 200}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Structured Documentation for Commvault-Storj Integration\nDESCRIPTION: Complete markdown documentation outlining the process of setting up Commvault integration with Storj, including requirements, account creation, bucket setup, S3 credential generation, and cloud storage configuration steps.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/commvault/page.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Commvault\ndocId: zohpei7doongeiNg9caiy\ntags:\n  - backup\nmetadata:\n  title: Guide for Commvault Integration\n  description:\n    A guide on how to download, configure, and use Commvault's backup solutions\n    to integrate with Storj for fast and efficient backups.\n---\n```\n\n----------------------------------------\n\nTITLE: Replacing Worker Pools with Goroutine Limiters in Go\nDESCRIPTION: Comparison showing how to replace worker pools with a goroutine limiter, which is more flexible and often more efficient. The limiter controls concurrency without the overhead of maintaining idle workers.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar wg sync.WaitGroup\ndefer wg.Wait()\nqueue := make(chan string, 8)\nfor k := 0; k < 8; k++ {\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor work := range queue {\n\t\t\tprocess(work)\n\t\t}\n\t}()\n}\n\nfor _, work := range items {\n\tqueue <- work\n}\nclose(queue)\n```\n\nLANGUAGE: go\nCODE:\n```\nvar wg sync.WaitGroup\ndefer wg.Wait()\nlimiter := make(chan struct{}, 8)\nfor _, work := range items {\n\twork := work\n\twg.Add(1)\n\tlimiter <- struct{}{}\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tdefer func() { <-limiter }()\n\n\t\tprocess(work)\n\t}()\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Storj Storage Nodes with Ansible Playbook\nDESCRIPTION: This Ansible playbook deploys multiple Storj Storage nodes as Docker containers on a single host. It configures each node with unique ports, storage volumes, and environment variables. The playbook uses a loop to iterate over a list of container configurations, allowing for easy scaling of nodes.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/commercial-node/setup/ansible/page.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Run Storj Storage Nodes\n  hosts: storagenode\n  become: yes\n  vars:\n    base_email: 'name+{{ item.name }}@example.com'\n    public_ip: xxx.xx.xx.xx\n    storj_containers:\n      - name: storagenode1\n        external_port: 20001\n        internal_dashboard_port: 14001\n        volume_mount: '/mnt/sdb'\n        storage: '10TB'\n      - name: storagenode2\n        external_port: 20002\n        internal_dashboard_port: 14002\n        volume_mount: '/mnt/sdc'\n        storage: '10TB'\n      # Add more here\n  tasks:\n    - name: Pull Storj image\n      community.docker.docker_image:\n        name: storjlabs/storagenode:latest\n        source: pull\n\n    - name: Run Storj containers\n      community.docker.docker_container:\n        name: '{{ item.name }}'\n        image: storjlabs/storagenode:latest\n        env:\n          WALLET: '0x0000000000000000000000000000000000000000'\n          EMAIL: '{{ base_email }}'\n          ADDRESS: '{{ public_ip }}:{{ item.external_port }}'\n          STORAGE: '{{ item.storage }}'\n          STORJ_CONSOLE_ADDRESS: '127.0.0.1:{{ item.internal_dashboard_port }}'\n        volumes:\n          - '{{ item.volume_mount }}/identity:/app/identity'\n          - '{{ item.volume_mount }}/storage:/app/config'\n        ports:\n          - '{{ item.external_port }}:{{ item.external_port }}/tcp'\n          - '{{ item.external_port }}:{{ item.external_port }}/udp'\n          - '127.0.0.1:{{ item.internal_dashboard_port }}:{{ item.internal_dashboard_port }}'\n        state: started\n        restart_policy: unless-stopped\n      loop: '{{ storj_containers }}'\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Storj Bucket using rclone\nDESCRIPTION: This snippet demonstrates how to copy a file from the local Downloads folder to a Storj bucket using rclone. It requires rclone to be installed and configured with Storj access.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/objects/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrclone copy ~/Downloads/storj-tree.png storj:my-bucket/\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Uplink CLI for Linux AMD64\nDESCRIPTION: This snippet shows how to download and install the Uplink CLI binary for Linux AMD64 systems using curl. It downloads the zip file, extracts it, and installs the binary to /usr/local/bin.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://github.com/storj/storj/releases/latest/download/uplink_linux_amd64.zip -o uplink_linux_amd64.zip\nunzip -o uplink_linux_amd64.zip\nsudo install uplink /usr/local/bin/uplink\n```\n\n----------------------------------------\n\nTITLE: Demonstrating a Potential Goroutine Leak in Go\nDESCRIPTION: This code snippet shows a function that may leak goroutines when the context is canceled. It sums the squares of input values using goroutines.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-goroutine-leaks-in-tests/page.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc LeakySumSquares(ctx context.Context, data []int) (\n  total int, err error) {\n\n  results := make(chan int)\n\n  for _, v := range data {\n    v := v\n    go func() {\n      result := v * v\n      results <- result\n    }()\n  }\n\n  for {\n    select {\n    case value := <-results:\n      total += value\n    case <-ctx.Done():\n      return ctx.Err()\n    }\n  }\n\n  return total, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Recursively Copying Files to Storj in macOS\nDESCRIPTION: Example of recursively copying all files from a local folder to a Storj bucket using the --recursive flag in macOS environment.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nuplink cp --recursive ~/receipts sj://cakes/\n```\n\n----------------------------------------\n\nTITLE: Listing Files in Storj Bucket\nDESCRIPTION: Commands to list files within a bucket using both rclone and AWS CLI\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/getting-started/page.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nrclone ls storj:my-bucket\n```\n\nLANGUAGE: shell\nCODE:\n```\naws s3 --endpoint-url=https://gateway.storjshare.io ls s3://my-bucket\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment for Storj Access SDK\nDESCRIPTION: Commands to create and activate a Python virtual environment and install the Storj access SDK project\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/concepts/multi-tenant-data/multi-tenant-access-management/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -m venv .venv\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ . ./.venv/bin/activate\n```\n\nLANGUAGE: bash\nCODE:\n```\n(.venv) $ python3 -m pip install -e \".[dev,tests]\"\n```\n\n----------------------------------------\n\nTITLE: Basic Uplink ls Command Usage\nDESCRIPTION: Shows the basic syntax for the ls command across different operating systems. The command can list all buckets or objects within a specific bucket or prefix path.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/ls-command/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe ls [sj://BUCKET[/PREFIX]] [flags]\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink ls [sj://BUCKET[/PREFIX]] [flags]\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink ls [sj://BUCKET[/PREFIX]] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring rclone for Storj\nDESCRIPTION: Configuration settings for rclone to connect with Storj, including endpoint and authentication details\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/getting-started/page.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[storj]\ntype = s3\nprovider = Storj\naccess_key_id =  access_key # REPLACE ME\nsecret_access_key = secret_key  # REPLACE ME\nendpoint = gateway.storjshare.io\nchunk_size = 64Mi\ndisable_checksum: true\n```\n\n----------------------------------------\n\nTITLE: Generating S3 Credentials via Uplink CLI\nDESCRIPTION: This command uses the Uplink CLI to generate read-only S3 credentials for a specific bucket prefix. It demonstrates how to use the 'uplink share' command with the '--register' option to create restricted access grants and exchange them for S3-compatible credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/s3/s3-compatible-gateway/page.md#2025-04-16_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nuplink share --readonly=true --register sj://bucket/prefix/\n```\n\n----------------------------------------\n\nTITLE: Registering Public Access Grants with Uplink CLI\nDESCRIPTION: Example of registering an access grant with the public flag set to true, which makes the content accessible without requiring a secret key. This is necessary for hosting static sites or sharing URLs through the gateway.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-register/page.md#2025-04-16_snippet_1\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access register --public=true <ACCESS-GRANT>\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access register --public=true <ACCESS-GRANT>\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access register --public=true <ACCESS-GRANT>\n```\n\n----------------------------------------\n\nTITLE: Example of File Resource Leak in Go\nDESCRIPTION: An example function demonstrating a file resource leak where a file is opened but not closed if an error occurs during the fs.Stat() call. The Close() call is only reached if there are no errors.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-and-tracking-resource-leaks-in-go/page.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleFile(ctx context.Context, fs fs.FS) error {\n\tfile, err := fs.Open(\"data.csv\")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"open failed: %w\", err)\n\t}\n\n\tstat, err := fs.Stat()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"stat failed: %w\", err)\n\t}\n\n\tfmt.Println(stat.Name())\n\n\t_ = file.Close()\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Presigned URLs with Google Cloud Functions in Go\nDESCRIPTION: Go implementation for creating presigned URLs using Google Cloud Functions. This code connects to Storj's S3-compatible storage, validates request parameters, and generates time-limited presigned URLs. It uses the functions-framework-go package to handle HTTP requests.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/presigned-urls-serverless-cloud/page.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage cloudsigning\n\n\nimport (\n   \"fmt\"\n   \"net/http\"\n   \"time\"\n\n\n   \"github.com/GoogleCloudPlatform/functions-framework-go/functions\"\n   \"github.com/aws/aws-sdk-go/aws\"\n   \"github.com/aws/aws-sdk-go/aws/credentials\"\n   \"github.com/aws/aws-sdk-go/aws/request\"\n   \"github.com/aws/aws-sdk-go/aws/session\"\n   \"github.com/aws/aws-sdk-go/service/s3\"\n)\n\n\nconst (\n   storjS3Bucket = \"<YOUR S3 BUCKET>\"\n   storjS3Id     = \"<YOUR ACCESS KEY ID>\"\n   storjS3Secret = \"<YOUR SECRET KEY>\"\n   storjS3URL    = \"https://gateway.storjshare.io/\"\n)\n\n\nfunc init() {\n   functions.HTTP(\"Presign\", HandleRequest)\n}\n\n\n// HandleRequest accepts an S3 key and presigned URL method type, and returns a presigned URL.\nfunc HandleRequest(w http.ResponseWriter, r *http.Request) {\n   key := r.URL.Query()[\"key\"]\n   method := r.URL.Query()[\"method\"]\n\n\n   if len(key) == 0 {\n       w.WriteHeader(400)\n       fmt.Fprint(w, \"Request is missing 'key' query parameter\")\n       return\n   }\n   if len(method) == 0 {\n       w.WriteHeader(400)\n       fmt.Fprint(w, \"Request is missing 'method' query parameter\")\n       return\n   }\n\n\n   sess, err := session.NewSession(&aws.Config{\n       Credentials: credentials.NewStaticCredentials(storjS3Id, storjS3Secret, \"\"),\n       Endpoint:    aws.String(storjS3URL),\n       Region:      aws.String(\"us-east-1\"),\n   })\n   if err != nil {\n       w.WriteHeader(500)\n       fmt.Fprint(w, \"Failed to create AWS S3 session\")\n       return\n   }\n\n\n   svc := s3.New(sess)\n   var req *request.Request\n   switch method[0] {\n   case \"GET\":\n       req, _ = svc.GetObjectRequest(&s3.GetObjectInput{Bucket: aws.String(storjS3Bucket), Key: &key[0]})\n   case \"POST\":\n       req, _ = svc.PutObjectRequest(&s3.PutObjectInput{Bucket: aws.String(storjS3Bucket), Key: &key[0]})\n   default:\n       w.WriteHeader(400)\n       fmt.Fprint(w, \"The request 'method' query parameter is invalid\")\n       return\n   }\n   urlStr, err := req.Presign(15 * time.Minute)\n   if err != nil {\n       w.WriteHeader(500)\n       fmt.Fprint(w, \"Failed to presign request\")\n       return\n   }\n   fmt.Fprint(w, urlStr)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Uplink CLI on Linux AMD64 using curl\nDESCRIPTION: Commands to download, unzip, and install the Uplink CLI tool on Linux AMD64 architecture. The script downloads the latest release from GitHub, extracts it, and installs it to the system path at /usr/local/bin.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/installation/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/storj/storj/releases/latest/download/uplink_linux_amd64.zip -o uplink_linux_amd64.zip\nunzip -o uplink_linux_amd64.zip\nsudo install uplink /usr/local/bin/uplink\n```\n\n----------------------------------------\n\nTITLE: Implementing a Goroutine Limiter in Go\nDESCRIPTION: This snippet shows how to implement a custom Limiter that controls the number of concurrent goroutines, respecting context cancellation and providing proper synchronization.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_22\n\nLANGUAGE: go\nCODE:\n```\ntype Limiter struct {\n\tlimit   chan struct{}\n\tworking sync.WaitGroup\n}\n\nfunc NewLimiter(n int) *Limiter {\n\treturn &Limiter{limit: make(chan struct{}, n)}\n}\n\nfunc (lim *Limiter) Go(ctx context.Context, fn func()) bool {\n\tif ctx.Err() != nil {\n\t\treturn false\n\t}\n\n\tselect {\n\tcase lim.limit <- struct{}{}:\n\tcase <-ctx.Done():\n\t\treturn false\n\t}\n\n\tlim.working.Add(1)\n\tgo func() {\n\t\tdefer func() {\n\t\t\t<-lim.limit\n\t\t\tlim.working.Done()\n\t\t}()\n\n\t\tfn()\n\t}()\n\n\treturn true\n}\n\nfunc (lim *Limiter) Wait() {\n\tlim.working.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: ActiveStorage Service Configuration\nDESCRIPTION: YAML configuration for connecting ActiveStorage to Storj\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/rails-activestorage/page.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstorj:\n  service: S3\n  access_key_id: <%= Rails.application.credentials.dig(:storj, :access_key_id) %>\n  secret_access_key: <%= Rails.application.credentials.dig(:storj, :secret_access_key) %>\n  region: global\n  endpoint: https://gateway.storjshare.io\n  bucket: active-storj\n```\n\n----------------------------------------\n\nTITLE: Importing Access Grant from Console in Uplink CLI (Windows/macOS/Linux)\nDESCRIPTION: Example of importing an Access Grant directly from the console by providing the grant string, associating it with the name 'main' in Uplink CLI.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-import/page.md#2025-04-16_snippet_2\n\nLANGUAGE: windows\nCODE:\n```\n.\\uplink.exe access import main 18fglgkoitmfvkogmoitr....\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access import main 18fglgkoitmfvkogmoitr....\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access import main 18fglgkoitmfvkogmoitr....\n```\n\n----------------------------------------\n\nTITLE: Importing Access Grant in Windows PowerShell\nDESCRIPTION: Command to import an Access Grant file into Uplink CLI on Windows systems. Must be run from the directory containing uplink.exe, using a regular user account rather than administrator privileges.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/uploading-your-first-object/set-up-uplink-cli/page.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n./uplink.exe access import main accessgrant.txt\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Storj\nDESCRIPTION: Commands to upload files to a Storj bucket using both rclone and AWS CLI\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/getting-started/page.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nrclone copy ~/Downloads/storj-tree.png storj:my-bucket/\n```\n\nLANGUAGE: shell\nCODE:\n```\naws s3 --endpoint-url=https://gateway.storjshare.io cp ~/Downloads/storj-tree.png s3://my-bucket/\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Uplink CLI for Linux ARM\nDESCRIPTION: This snippet demonstrates how to download and install the Uplink CLI binary for Linux ARM systems using curl. It downloads the zip file, extracts it, and installs the binary to /usr/local/bin.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://github.com/storj/storj/releases/latest/download/uplink_linux_arm.zip -o uplink_linux_arm.zip\nunzip -o uplink_linux_arm.zip\nsudo install uplink /usr/local/bin/uplink\n```\n\n----------------------------------------\n\nTITLE: Testing the Tracked Filesystem in Go\nDESCRIPTION: A test function that demonstrates using the TrackedFS wrapper to detect file resource leaks. It creates a virtual filesystem using fstest.MapFS and ensures all opened files are properly closed.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-and-tracking-resource-leaks-in-go/page.md#2025-04-16_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc TestFS(t *testing.T) {\n\t// We'll use `fstest` package here, but you can also replace this with\n\t// `os.DirFS` or similar.\n\tdir := fstest.MapFS{\n\t\t\"data.csv\": &fstest.MapFile{Data: []byte(\"hello\")},\n\t}\n\n\tfs := TrackFS(dir)\n\tdefer func() {\n\t\tif err := fs.Close(); err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t}()\n\n\tfile, err := fs.Open(\"data.csv\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tstat, err := file.Stat()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tt.Log(stat.Name())\n}\n```\n\n----------------------------------------\n\nTITLE: Running Storj Storage Node (Linux/macOS)\nDESCRIPTION: This command runs the Storj Storage Node on Linux or macOS. It sets up port forwarding, environment variables for wallet, email, address, and storage, and mounts the identity and storage directories.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/cli/storage-node/page.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --restart unless-stopped --stop-timeout 300 \\\n    -p 28967:28967/tcp \\\n    -p 28967:28967/udp \\\n    -p 127.0.0.1:14002:14002 \\\n    -e WALLET=\"0xXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" \\\n    -e EMAIL=\"user@example.com\" \\\n    -e ADDRESS=\"domain.ddns.net:28967\" \\\n    -e STORAGE=\"2TB\" \\\n    --user $(id -u):$(id -g) \\\n    --mount type=bind,source=\"<identity-dir>\",destination=/app/identity \\\n    --mount type=bind,source=\"<storage-dir>\",destination=/app/config \\\n    --name storagenode storjlabs/storagenode:latest\n```\n\n----------------------------------------\n\nTITLE: Listing Buckets in Storj\nDESCRIPTION: Commands to list existing buckets using both rclone and AWS CLI\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/getting-started/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrclone lsf storj:\n```\n\nLANGUAGE: shell\nCODE:\n```\naws s3 --endpoint-url=https://gateway.storjshare.io ls s3://\n```\n\n----------------------------------------\n\nTITLE: Configuring HashBackup S3 Destination for Storj\nDESCRIPTION: Configuration file (dest.conf) for setting up Storj as an S3 destination in HashBackup. Includes essential parameters like endpoint, access credentials, and bucket configuration for Storj integration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/hashbackup/page.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndestname storj\ntype s3\nhost <End Point>\npartsize 64m\nsecure\naccesskey <Access Key>\nsecretkey <Secret Key>\nbucket <Bucket Name>\n```\n\n----------------------------------------\n\nTITLE: Executing Uplink Setup on macOS\nDESCRIPTION: Example of running the Uplink setup command on macOS systems to start the configuration wizard.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/setup-command/page.md#2025-04-16_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nuplink setup\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema-based Isolation for PostgreSQL Testing in Go\nDESCRIPTION: This function creates a unique schema for each test, connects to the database with the schema, runs the test, and cleans up afterwards. It uses generics to work with different testing.TB types and handles connection, schema creation, and cleanup.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/go-integration-tests-with-postgres/page.md#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc WithSchema[TB testing.TB](ctx context.Context, tb TB, test func(t TB, db *pgx.Conn)) {\n\tif *pgaddr == \"\" {\n\t\ttb.Skip(\"-database flag not defined\")\n\t}\n\tdbaddr := *pgaddr\n\n\t// We need to create a unique schema name so that our parallel tests don't clash.\n\tvar id [8]byte\n\trand.Read(id[:])\n\tuniqueName := tb.Name() + \"/\" + hex.EncodeToString(id[:])\n\n\t// Change the connection string to use a specific schema name.\n\tconnstr, err := connstrWithSchema(dbaddr, uniqueName)\n\tif err != nil {\n\t\ttb.Fatal(err)\n\t}\n\tdb, err := pgx.Connect(ctx, connstr)\n\tif err != nil {\n\t\ttb.Fatalf(\"Unable to connect to database: %v\", err)\n\t}\n\tdefer func() { _ = db.Close(ctx) }()\n\n\t// Surprisingly, it's perfectly fine to create a schema after connecting with the name.\n\tif err := createSchema(ctx, db, uniqueName); err != nil {\n\t\ttb.Fatal(err)\n\t}\n\tdefer func() {\n\t\tif err := dropSchema(ctx, db, uniqueName); err != nil {\n\t\t\ttb.Fatal(err)\n\t\t}\n\t}()\n\n\ttest(tb, db)\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Storj Bucket using uplink CLI\nDESCRIPTION: This snippet demonstrates file upload to a Storj bucket using the uplink CLI tool. It copies a file from the local Downloads folder to the specified bucket.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/objects/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuplink cp ~/Downloads/storj-tree.png sj://my-bucket\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronization Fence in Go\nDESCRIPTION: A synchronization primitive that allows goroutines to wait for a specific condition. Includes context cancellation support and safe initialization.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_25\n\nLANGUAGE: go\nCODE:\n```\ntype Fence struct {\n\tcreate  sync.Once\n\trelease sync.Once\n\twait    chan struct{}\n}\n\nfunc (f *Fence) init() {\n\tf.create.Do(func() {\n\t\tf.wait = make(chan struct{})\n\t})\n}\n\nfunc (f *Fence) Release() {\n\tf.init()\n\tf.release.Do(func() {\n\t\tclose(f.wait)\n\t})\n}\n\nfunc (f *Fence) Released() chan struct{} {\n\tf.init()\n\treturn f.wait\n}\n\nfunc (f *Fence) Wait(ctx context.Context) error {\n\tf.init()\n\tselect {\n\tcase <-f.Released():\n\t\treturn nil\n\tcase <-ctx.Done():\n\t\treturn ctx.Err()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Access Grant with Key\nDESCRIPTION: Examples demonstrating how to import an access grant using a direct key string across different operating systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/import-command/page.md#2025-04-16_snippet_2\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe import cheesecake 13df....qa\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink import cheesecake 13df....qa\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink import cheesecake 13df....qa\n```\n\n----------------------------------------\n\nTITLE: Downloading Files from Storj Bucket using uplink CLI\nDESCRIPTION: This snippet shows how to download a file from a Storj bucket to the local Downloads folder using the uplink CLI tool.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/objects/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nuplink cp sj://my-bucket ~/Downloads/storj-tree.png\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK for Node.js\nDESCRIPTION: This snippet shows how to install the AWS SDK for Node.js using npm, which is a prerequisite for using AWS S3 client with Storj.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/aws/nodejs/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save aws-sdk\n```\n\n----------------------------------------\n\nTITLE: Updating Client Implementation with Resource Tracking in Go\nDESCRIPTION: Modified version of the TCP client that incorporates resource tracking. It retrieves a tracker from the context and creates a tag for each connection to ensure proper cleanup.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-and-tracking-resource-leaks-in-go/page.md#2025-04-16_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype Client struct {\n\tconn net.Conn\n\ttag  *Tag\n}\n\nfunc Dial(ctx context.Context, address string) (*Client, error) {\n\tconn, err := (&net.Dialer{}).DialContext(ctx, \"tcp\", address)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to dial: %w\", err)\n\t}\n\n\ttracker := TrackerFromContext(ctx)\n\treturn &Client{conn: conn, tag: tracker.Create()}, nil\n}\n\nfunc (client *Client) Close() error {\n\tclient.tag.Close()\n\treturn client.conn.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Mount Fusion with Static Allocation in Kubernetes\nDESCRIPTION: A YAML configuration example for setting up Object Mount Fusion with static allocation, which requires two PersistentVolumes: a backing PV/PVC for write consistency and an Object Mount PV that references the backing PVC through the fusion_pvc parameter.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: \"backing-pv\"\n# <...>\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: backing-pvc\nspec:\n  volumeName: \"backing-pv\"\n  # <...>\n---\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: cunofs-pv\nspec:\n  capacity:\n    storage: 16Ei # ignored, required\n  accessModes:\n    - ReadWriteMany\n  csi:\n    driver: cunofs.csi.com\n    volumeHandle: cunofs-csi-driver-volume\n    volumeAttributes:\n      # <...>\n      fusion_pvc: \"backing-pvc\" # gets the name of the pvc to try and mount to it\n```\n\n----------------------------------------\n\nTITLE: Downloading Files from Storj Bucket using AWS CLI\nDESCRIPTION: This snippet demonstrates file download from a Storj bucket using the AWS CLI. It specifies the Storj gateway endpoint URL and uses the S3-compatible API to copy the file to the local Downloads folder.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/objects/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\naws s3 --endpoint-url=https://gateway.storjshare.io cp s3://my-bucket/ ~/Downloads/storj-tree-2.png\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resource Tracker in Go\nDESCRIPTION: A Tracker struct that maintains a registry of open resources. It provides methods to create, remove, and check for resource leaks when the tracker is closed. Useful for ensuring all resources are properly released in tests.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-and-tracking-resource-leaks-in-go/page.md#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Tracker keeps track of all open tags.\ntype Tracker struct {\n\tmu     sync.Mutex\n\tclosed bool\n\topen   map[*Tag]struct{}\n}\n\n// NewTracker creates an empty tracker.\nfunc NewTracker() *Tracker {\n\treturn &Tracker{open: map[*Tag]struct{}{}}\n}\n\n// Create creates a new tag, which needs to be closed.\nfunc (tracker *Tracker) Create() *Tag {\n\ttag := newTag(tracker, 2)\n\n\ttracker.mu.Lock()\n\tdefer tracker.mu.Unlock()\n\n\t// We don't want to allow creating a new tag, when we stopped tracking.\n\tif tracker.closed {\n\t\tpanic(\"creating a tag after tracker has been closed\")\n\t}\n\ttracker.open[tag] = struct{}{}\n\n\treturn tag\n}\n\n// Remove stops tracking tag.\nfunc (tracker *Tracker) Remove(tag *Tag) {\n\ttracker.mu.Lock()\n\tdefer tracker.mu.Unlock()\n\tdelete(tracker.open, tag)\n}\n\n// Close checks that none of the tags are still open.\nfunc (tracker *Tracker) Close() error {\n\ttracker.mu.Lock()\n\tdefer tracker.mu.Unlock()\n\n\ttracker.closed = true\n\tif len(tracker.open) > 0 {\n\t\treturn errors.New(tracker.openResources())\n\t}\n\treturn nil\n}\n\n// openResources returns a string describing all the open resources.\nfunc (tracker *Tracker) openResources() string {\n\tvar s strings.Builder\n\tfmt.Fprintf(&s, \"%d open resources\\n\", len(tracker.open))\n\n\tfor tag := range tracker.open {\n\t\tfmt.Fprintf(&s, \"---\\n%s\\n\", tag)\n\t}\n\n\treturn s.String()\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Uplink Setup on Linux\nDESCRIPTION: Example of running the Uplink setup command on Linux systems to start the configuration wizard.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/setup-command/page.md#2025-04-16_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nuplink setup\n```\n\n----------------------------------------\n\nTITLE: Initializing Uplink CLI Setup\nDESCRIPTION: Commands to initialize the Uplink CLI setup process across different operating systems. This is the first step in configuring access to the Storj network.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/generate-access-grants-and-tokens/generate-a-token/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe setup\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink setup\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink setup\n```\n\n----------------------------------------\n\nTITLE: Adding Context Cancellation Checks to Long Operations in Go\nDESCRIPTION: Example showing how to periodically check for context cancellation during long-running operations, enabling responsive cancellation when needed.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfor _, f := range files {\n\tdata, err := os.ReadFile(f)\n\t// ...\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfor _, f := range files {\n\tif err := ctx.Err(); err != nil {\n\t\treturn err\n\t}\n\n\tdata, err := os.ReadFile(f)\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing S3 Client with Storj Credentials\nDESCRIPTION: This snippet demonstrates how to create an S3 client object with Storj credentials and configuration. It sets up the necessary parameters for connecting to the Storj gateway.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/aws/nodejs/page.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst accessKeyId = \"access key here\";\nconst secretAccessKey = \"secret access key here\";\nconst endpoint = \"https://gateway.storjshare.io\";\n\nconst s3 = new S3({\n  accessKeyId,\n  secretAccessKey,\n  endpoint,\n  s3ForcePathStyle: true,\n  signatureVersion: \"v4\",\n  connectTimeout: 0,\n  httpOptions: { timeout: 0 }\n});\n```\n\n----------------------------------------\n\nTITLE: Uploading an Object to Storj using AWS SDK\nDESCRIPTION: This snippet demonstrates how to upload an object to Storj using the AWS SDK. It sets up the necessary parameters including bucket name, object key, and file data, then uses the upload method to send the file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/aws/nodejs/page.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n\n  // `file` can be a readable stream in node or a `Blob` in the browser\n\n  const params = {\n    Bucket: \"my-bucket\",\n    Key: \"my-object\",\n    Body: file\n  };\n\n  await s3.upload(params, {\n    partSize: 64 * 1024 * 1024\n  }).promise();\n\n})();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Context-Aware Sleep Function in Go\nDESCRIPTION: This snippet demonstrates how to implement a Sleep function that respects context cancellation, providing a better alternative to time.Sleep for concurrent operations.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nfunc Sleep(ctx context.Context, duration time.Duration) error {\n\tt := time.NewTimer(duration)\n\tdefer t.Stop()\n\n\tselect {\n\tcase <-t.C:\n\t\treturn nil\n\tcase <-ctx.Done():\n\t\treturn ctx.Err()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket with Rclone for Storj\nDESCRIPTION: Use the 'mkdir' command to create a new bucket named 'mybucket' in the Storj network.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-s3/page.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrclone mkdir waterbear:mybucket\n```\n\n----------------------------------------\n\nTITLE: Using errgroup.Group with Context Cancellation in Go\nDESCRIPTION: This snippet demonstrates how to use errgroup.Group with context cancellation, allowing for graceful shutdown of multiple concurrent operations.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ng, ctx := errgroup.WithContext(ctx)\ng.Go(func() error {\n\treturn publicServer.Run(ctx)\n})\ng.Go(func() error {\n\treturn grpcServer.Run(ctx)\n})\nerr := g.Wait()\n```\n\n----------------------------------------\n\nTITLE: Installing rclone CLI Tool\nDESCRIPTION: Commands to install rclone using the official installation script\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/getting-started/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo -v ; curl https://rclone.org/install.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Sharing Storj Bucket with Custom Domain using Uplink CLI\nDESCRIPTION: This command uses the Uplink CLI to share a Storj bucket or object prefix with a custom domain. It generates the necessary DNS records for setup. The --tls flag can be added for Pro accounts to enable HTTPS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/static-site-hosting/custom-domains/page.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./uplink.exe share --dns <hostname> sj://<bucket>/<prefix>\n```\n\nLANGUAGE: shell\nCODE:\n```\nuplink share --dns <hostname> sj://<bucket>/<prefix>\n```\n\n----------------------------------------\n\nTITLE: Background Job Management in Go Server\nDESCRIPTION: A job management system for handling background tasks in a server context with graceful shutdown support and concurrent execution control.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_27\n\nLANGUAGE: go\nCODE:\n```\ntype Jobs struct {\n\troot  context.WithContext\n\tlimit chan struct{}\n\tgroup errgroup.Group\n}\n\nfunc (jobs *Jobs) Go(requestCtx context.Context, fn func(ctx context.Context)) bool {\n\tif requestCtx.Err() != nil || jobs.root.Err() != nil {\n\t\treturn false\n\t}\n\tselect {\n\tcase <-requestCtx.Done():\n\t\treturn false\n\tcase <-jobs.root.Done():\n\t\treturn false\n\tcase jobs.limit <- struct{}{}:\n\t}\n\n\tjobs.group.Go(func() error {\n\t\tdefer func() { <-jobs.limit }()\n\t\tfn(ctx)\n\t\treturn nil\n\t})\n\n\treturn true\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Access to an Object using Uplink CLI\nDESCRIPTION: This snippet demonstrates how to revoke an access grant to an object using the 'uplink revoke' command. The command is the same for Windows, macOS, and Linux, with slight variations in execution.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/sharing-your-first-object/revoke-an-access-to-an-object/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access revoke asdfRF...\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access revoke asdfRF...\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access revoke asdfRF...\n```\n\n----------------------------------------\n\nTITLE: Uploading a File with Expiration Date in Windows\nDESCRIPTION: Example of uploading a file with an expiration date set using the --expires flag in Windows. The file will be automatically removed after the specified date.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n./uplink.exe cp --expires 2021-12-31T13:00:00+02:00 cheesecake.jpg sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload to Storj IPFS in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to upload a file and pin it to the Storj IPFS Pinning Service. It includes functions for pinning a file to IPFS and a main entry point for script execution.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/storj-ipfs-pinning/page.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// The 'got' module gives a promised-based HTTP client.\nimport got from 'got'\n\n// The 'fs' built-in module provides access to the file system.\nimport fs from 'fs'\n\n// The 'form-data' module helps us submit forms and file uploads\n// to other web applications.\nimport FormData from 'form-data'\n\n/**\n * Uploads a file from `filepath` and pins it to the Storj IPFS pinning service.\n * @param {string} username your username for the Storj IPFS pinning service\n * @param {string} password your password for the Storj IPFS pinning service\n * @param {string} filepath the path to the file\n */\nasync function pinFileToIPFS(username, password, filepath) {\n  // The HTTP upload endpoint of the Storj IPFS pinning service\n  const url = `https://www.storj-ipfs.com/api/v0/add`\n\n  // Create a form with the file to upload\n  let data = new FormData()\n  data.append('file', fs.createReadStream(filepath))\n\n  // Execute the Upload request to the Storj IPFS pinning service\n  return got.post(url, {\n    username: username,\n    password: password,\n    headers: {\n      'Content-Type': `multipart/form-data; boundary= ${data._boundary}`,\n    },\n    body: data,\n  })\n}\n\n/**\n * The main entry point for the script that checks the command line arguments and\n * calls pinFileToIPFS.\n *\n * To simplify the example, we don't do fancy command line parsing. Just three\n * positional arguments for imagePath, name, and description\n */\nasync function main() {\n  const args = process.argv.slice(2)\n  if (args.length !== 3) {\n    console.error(\n      `usage: ${process.argv[0]} ${process.argv[1]} <username> <password> <filepath>`\n    )\n    process.exit(1)\n  }\n\n  const [username, password, filepath] = args\n  const response = await pinFileToIPFS(username, password, filepath)\n  console.log(response.body)\n}\n\n/**\n * Don't forget to call the main function!\n * We can't `await` things at the top level, so this adds\n * a .catch() to grab any errors and print them to the console.\n */\nmain().catch((err) => {\n  console.error(err)\n  process.exit(1)\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Access Grant from File\nDESCRIPTION: Commands to import an access grant named 'cheesecake' from a file across different operating systems using the Uplink CLI.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/sharing-your-first-object/import-access/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access import cheesecake cheesecake.access\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access import cheesecake ~/cheesecake.access\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access import cheesecake ~/cheesecake.access\n```\n\n----------------------------------------\n\nTITLE: Satellite Address Selection\nDESCRIPTION: Prompt for selecting or entering a satellite address when creating a new access grant.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-native/page.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nprovider> 2\nOption satellite_address.\nSatellite address.\nCustom satellite address should match the format: `<nodeid>@<address>:<port>`.\nChoose a number from below, or type in your own string value.\nPress Enter for the default (us-central-1.storj.io).\n 1 / US Central 1\n   \\ (us-central-1.storj.io)\n 2 / Europe West 1\n   \\ (europe-west-1.storj.io)\n 3 / Asia East 1\n   \\ (asia-east-1.storj.io)\nsatellite_address>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storj Volume in Splunk's indexes.conf\nDESCRIPTION: This snippet shows how to configure the Storj volume in Splunk's indexes.conf file. It includes settings for the storage type, path, S3 credentials, and endpoint.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/splunk/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[volume:Storj]\n\nstorageType = remote\n\npath = s3://splunk/\n\nremote.s3.access_key = ACCESS_KEY\n\nremote.s3.secret_key = SECRET_KEY\n\nremote.s3.endpoint = https://gateway.storjshare.io\n\nremote.s3.auth_region = global\n\n# If versioning is not being utilized add:\n\n# remote.s3.supports_versioning = false\n```\n\n----------------------------------------\n\nTITLE: Uploading a File with Expiration Date in macOS\nDESCRIPTION: Example of uploading a file with an expiration date set using the --expires flag in macOS. The file will be automatically removed after the specified date.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nuplink cp  --expires 2021-12-31T13:00:00+02:00 cheesecake.jpg sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Using AWS CLI with Gateway ST\nDESCRIPTION: These AWS CLI commands demonstrate basic operations with the S3-compatible Gateway ST, including creating buckets, uploading, listing, downloading, and deleting objects.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_10\n\nLANGUAGE: none\nCODE:\n```\naws s3 --endpoint=http://localhost:7777 mb s3://bucket-name\n```\n\nLANGUAGE: none\nCODE:\n```\naws s3 --endpoint=http://localhost:7777 cp your-large-file.mp4 s3://bucket-name/your-large-file.mp4\n```\n\nLANGUAGE: none\nCODE:\n```\naws s3 --endpoint=http://localhost:7777 ls s3://bucket-name/\n```\n\nLANGUAGE: none\nCODE:\n```\naws s3 --endpoint=http://localhost:7777 cp s3://bucket-name/your-large-file.mp4 ~/Downloads/your-large-file.mp4\n```\n\nLANGUAGE: none\nCODE:\n```\naws s3 --endpoint=http://localhost:7777 presign s3://bucket-name/your-large-file.mp4\n```\n\nLANGUAGE: none\nCODE:\n```\naws s3 --endpoint=http://localhost:7777 rm s3://bucket-name/your-large-file.mp4\n```\n\n----------------------------------------\n\nTITLE: Using t.Parallel() for Concurrent Testing in Go\nDESCRIPTION: Example showing how to mark a test function to run in parallel with other tests, which helps find concurrency bugs in your code while also speeding up test execution.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TestServer(t *testing.T) {\n\tt.Parallel()\n\t// ...\n```\n\n----------------------------------------\n\nTITLE: Creating S3-compatible Credentials File with One-liner Command\nDESCRIPTION: A single command that creates a credentials file for S3-compatible storage, sets secure permissions, and populates it with the required format. This simplifies the process of setting up secure credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n#terminal\ntouch credentials.txt ; chmod 0600 credentials.txt ; printf \"aws_access_key_id = xxxxxxxxxxxxxxxxxx \\naws_secret_access_key = xxxxxxxxxxxxxxxxxx\\nendpoint=A.B.C.D:PORT\" > credentials.txt\n```\n\n----------------------------------------\n\nTITLE: Listing S3 buckets using AWS CLI\nDESCRIPTION: This command lists S3 buckets using the AWS CLI with the configured Storj endpoint.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/aws/aws-cli-endpoint/page.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\naws s3 ls\n```\n\n----------------------------------------\n\nTITLE: Creating Storj Bucket on Linux\nDESCRIPTION: Command to create a new bucket named 'cakes' using Uplink CLI on Linux. The command uses the 'mb' (make bucket) command with the 'sj://' protocol prefix.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/uploading-your-first-object/create-a-bucket/page.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuplink mb sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Sharing Bucket for Website Hosting with Uplink CLI (macOS)\nDESCRIPTION: Command to share a bucket or object prefix for website hosting using Uplink CLI on macOS. It generates DNS entries and optionally includes TLS configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/static-site-hosting/page.md#2025-04-16_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nuplink share --dns <hostname> sj://<bucket>/<prefix> --tls --not-after=none\n```\n\n----------------------------------------\n\nTITLE: Basic S3 Operations with Storj Gateway\nDESCRIPTION: Demonstrates basic S3 operations using AWS CLI with the Storj gateway, including creating buckets, uploading files, listing objects, and generating presigned URLs for file sharing.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-windows/page.md#2025-04-16_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\naws s3 --endpoint http://localhost:11000 mb s3://test3\naws s3 --endpoint http://localhost:11000 cp C:\\bigvideo.avi s3://bigvideo.avi\naws s3 --endpoint http://localhost:11000 ls\naws s3 --endpoint http://localhost:11000 ls s3://test3\naws s3 --endpoint http://localhost:11000 presign s3://test3/bigvideo.avi\n```\n\n----------------------------------------\n\nTITLE: Importing Access Grant in Linux\nDESCRIPTION: Command to import an Access Grant file into Uplink CLI on Linux systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/uploading-your-first-object/set-up-uplink-cli/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nuplink access import main accessgrant.txt\n```\n\n----------------------------------------\n\nTITLE: Uploading File Using Presigned URL with cURL\nDESCRIPTION: cURL command to upload a file using the generated presigned URL. The command includes verbose output and specifies the file to upload.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/s3/presigned-urls/page.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v --upload-file file.name \"https://gateway.storjshare.io/yourbucketname/path/within/bucket?AWSAccessKeyId=jvruleqdpbwqx7vxmwgqbtlbmapa&Signature=fUNxawPyFd%2F9apR%2FZnKmR%2BPXGCA%3D&Expires=1628019103\"\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Database Test Helper in Go\nDESCRIPTION: Full implementation of a database test helper using dockertest to manage Postgres containers.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/go-integration-tests-with-postgres/page.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc WithDatabase[TB testing.TB](ctx context.Context, tb TB, test func(t TB, db *pgx.Conn)) {\n\tresource, err := dockerPool.RunWithOptions(&dockertest.RunOptions{\n\t\tRepository: \"postgres\",\n\t\tTag:        \"15\",\n\t\tEnv: []string{\n\t\t\t\"POSTGRES_PASSWORD=secret\",\n\t\t\t\"POSTGRES_USER=user\",\n\t\t\t\"POSTGRES_DB=main\",\n\t\t\t\"listen_addresses = '*'\",\n\t\t},\n\t}, func(config *docker.HostConfig) {\n\t\tconfig.AutoRemove = true\n\t\tconfig.RestartPolicy = docker.RestartPolicy{Name: \"no\"}\n\t})\n\tif err != nil {\n\t\ttb.Fatalf(\"Could not start resource: %s\", err)\n\t}\n\tdefer func() {\n\t\tif err := dockerPool.Purge(resource); err != nil {\n\t\t\ttb.Logf(\"failed to stop: %v\", err)\n\t\t}\n\t}()\n\n\thostAndPort := resource.GetHostPort(\"5432/tcp\")\n\tdatabaseConnstr := fmt.Sprintf(\"postgres://user:secret@%s/main?sslmode=disable\", hostAndPort)\n\n\terr = resource.Expire(2 * 60)\n\tif err != nil {\n\t\ttb.Fatalf(\"Unable to set container expiration: %v\", err)\n\t}\n\n\tvar db *pgx.Conn\n\terr = dockerPool.Retry(func() error {\n\t\tdb, err = pgx.Connect(ctx, databaseConnstr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n\tif err != nil {\n\t\ttb.Fatal(\"unable to connect to Postgres\", err)\n\t}\n\n\tdefer func() {\n\t\terr := db.Close(ctx)\n\t\tif err != nil {\n\t\t\ttb.Logf(\"failed to close db: %v\", err)\n\t\t}\n\t}()\n\n\ttest(tb, db)\n}\n```\n\n----------------------------------------\n\nTITLE: Using AWS CLI with Storj profile\nDESCRIPTION: This command demonstrates how to use the AWS CLI with the separate 'storj' profile to list S3 buckets.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/aws/aws-cli-endpoint/page.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\naws s3 --profile storj ls\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Function with Shell Script\nDESCRIPTION: Shell script for building, packaging, and deploying a Go AWS Lambda function for presigned URL generation. This script handles compilation for the correct architecture, IAM role creation, Lambda function deployment, and setting up function URL configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/presigned-urls-serverless-cloud/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o main main.go\nzip lambda-handler.zip main\naws iam create-role --role-name lambda-ex --assume-role-policy-document file://trust-policy.json\naws iam attach-role-policy --role-name lambda-ex --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\naws lambda create-function --function-name cloudsigning --runtime go1.x --role arn:aws:iam::<YOUR IAM NUMBER>:role/lambda-ex --handler main --zip-file fileb://lambda-handler.zip\naws lambda add-permission --function-name cloudsigning --action lambda:InvokeFunctionUrl --principal \"*\" --function-url-auth-type \"NONE\" --statement-id url\naws lambda create-function-url-config --function-name cloudsigning --auth-type NONE\ncurl 'https://<YOUR LAMBDA NUMBER>.lambda-url.us-east-1.on.aws/?key=test&method=POST'\n```\n\n----------------------------------------\n\nTITLE: Database Creation Helper Functions in Go\nDESCRIPTION: Utility functions for managing database creation, connection string manipulation, and name sanitization.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/go-integration-tests-with-postgres/page.md#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc connstrWithDatabase(connstr, database string) (string, error) {\n\tu, err := url.Parse(connstr)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"invalid connstr: %q\", connstr)\n\t}\n\tu.Path = database\n\treturn u.String(), nil\n}\n\nfunc createDatabase(ctx context.Context, db *pgx.Conn, name string) error {\n\t_, err := db.Exec(ctx, `CREATE DATABASE `+sanitizeDatabaseName(name)+`;`)\n\treturn err\n}\n\nfunc dropDatabase(ctx context.Context, db *pgx.Conn, name string) error {\n\t_, err := db.Exec(ctx, `DROP DATABASE `+sanitizeDatabaseName(name)+`;`)\n\treturn err\n}\n\nfunc sanitizeDatabaseName(schema string) string {\n\treturn pgx.Identifier{schema}.Sanitize()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Node Identity\nDESCRIPTION: Commands to create a new storage node identity across different operating systems\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/identity/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nidentity create storagenode\n```\n\nLANGUAGE: powershell\nCODE:\n```\n./identity.exe create storagenode\n```\n\n----------------------------------------\n\nTITLE: New Remote Configuration Selection\nDESCRIPTION: Interactive prompt showing options for remote configuration management, where user selects 'n' for new remote setup.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-native/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ne) Edit existing remote\nn) New remote\nd) Delete remote\nr) Rename remote\nc) Copy remote\ns) Set configuration password\nq) Quit config\ne/n/d/r/c/s/q> n\n```\n\n----------------------------------------\n\nTITLE: Sharing Object Access with Uplink CLI\nDESCRIPTION: Commands to share access to a specific object (cheesecake.jpg) using the uplink share command. The command exports the access credentials to a file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/sharing-your-first-object/generate-access/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe share sj://cakes/cheesecake.jpg --export-to cheesecake.access\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink share sj://cakes/cheesecake.jpg --export-to cheesecake.access\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink share sj://cakes/cheesecake.jpg --export-to cheesecake.access\n```\n\n----------------------------------------\n\nTITLE: Running rb Command in Uplink CLI across platforms\nDESCRIPTION: Basic syntax for the rb command to remove a bucket in the Uplink CLI. The command requires specifying a bucket URI with the sj:// prefix and supports additional flags.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/rb-command/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe rb sj://BUCKET [flags]\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink rb sj://BUCKET [flags]\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink rb sj://BUCKET [flags]\n```\n\n----------------------------------------\n\nTITLE: Storage Node Variables and Calculations\nDESCRIPTION: Defines key variables and calculations used to determine storage node operator capacity and bandwidth constraints in a distributed storage network.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/concepts/file-redundancy/page.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Variables**\n\n1.  **Storage per storage node operator** - The amount of hard drive space available to share by a storage node.\n\n2.  **Download speed** - The downstream bandwidth available on the network on which the storage node is operating, measured in Mbps.\n\n3.  **Upload speed** - The upstream bandwidth available on the network on which the storage node is operating, measured in Mbps.\n\n4.  **ISP bandwidth cap** - The maximum amount of bandwidth a storage node operator can utilize in a month.\n\n5.  **Storage node operator bandwidth utilization percentage** - The percentage of the total monthly bandwidth cap dedicated to the storage node.\n\n6.  **Egress bandwidth percentage** - The average amount of egress traffic from client downloads.\n\n7.  **Repair bandwidth ratio (as a percent of storage)** - The percentage amount of repair traffic on the network.\n\n8.  **Ingress bandwidth percentage** - The amount of bandwidth available for uploads of new data from clients.\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CLI for Storj\nDESCRIPTION: Interactive AWS CLI configuration command with Storj credentials\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/getting-started/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\naws configure\n  AWS Access Key ID [None]: <Access Key>\n  AWS Secret Access Key [None]: <Secret Key>\n  Default region name [None]: global\n  Default output format [None]:\n```\n\n----------------------------------------\n\nTITLE: Adding Storj Sidecar Container to Kubernetes Deployment\nDESCRIPTION: This YAML snippet defines the Storj sidecar container to be added to the Kubernetes Deployment. It uses the Storj gateway image and sets up the necessary environment variables for authentication.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/use-storj-dcs-from-cloud-native-environments-using-sidecar-pattern/page.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n     - name: storj-sidecar\n       image: storjlabs/gateway\n       args:\n         - run\n       env:\n       - name: STORJ_MINIO_ACCESS_KEY\n         valueFrom:\n           secretKeyRef:\n             name: storj-gateway\n             key: storj-gateway-key\n       - name: STORJ_MINIO_SECRET_KEY\n         valueFrom:\n           secretKeyRef:\n             name: storj-gateway\n             key: storj-gateway-secret\n       - name: STORJ_ACCESS\n         valueFrom:\n           secretKeyRef:\n             name: storj-gateway\n             key: storj-access-grant\n```\n\n----------------------------------------\n\nTITLE: Downloading Files from Storj Bucket using rclone\nDESCRIPTION: This snippet shows how to download a file from a Storj bucket to the local Downloads folder using rclone. It requires rclone to be installed and configured with Storj access.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/objects/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrclone copy storj:my-bucket/ ~/Downloads/storj-tree-2.png\n```\n\n----------------------------------------\n\nTITLE: Creating Buckets in Storj\nDESCRIPTION: Commands to create a new bucket using both rclone and AWS CLI\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/getting-started/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nrclone mkdir storj:my-bucket\n```\n\nLANGUAGE: shell\nCODE:\n```\naws s3 --endpoint-url=https://gateway.storjshare.io mb s3://my-bucket\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Credentials File Format for Object Mount\nDESCRIPTION: Example format for AWS S3 credentials file containing the access key ID and secret access key. This format is required for Object Mount to authenticate with AWS S3 buckets.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\naws_access_key_id = xxxxxxxxxxxxxxxxxx\naws_secret_access_key = xxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Hiding Locks in Go Struct Design\nDESCRIPTION: Comparison showing how to design structs that don't expose their locks directly. The improved version keeps the lock as a private field, preventing misuse by client code.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype Set[T any] struct {\n\tsync.Lock\n\tItems []T\n}\n```\n\nLANGUAGE: go\nCODE:\n```\ntype Set[T any] struct {\n\tmu    sync.Lock\n\titems []T\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Mounting Object Mount Fusion for Azure\nDESCRIPTION: Creates an Object Mount Fusion mount and mounts it to a specified directory using Azure Blob Storage.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncuno fusion \"/mnt/fast/fusion-store\" \"az:///<account-name>/<bucket>/fusion-store\"\ncuno mount --root \"/mnt/fast/fusion-store\" \"$HOME/my-fusion-filesystem\"\n```\n\n----------------------------------------\n\nTITLE: Downloading an Object with Uplink CLI on Linux\nDESCRIPTION: This command uses the Uplink CLI tool to download a file named 'cheesecake.jpg' from the 'cakes' bucket to the local Downloads folder on Linux.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/interacting-with-your-first-object/download-an-object/page.md#2025-04-16_snippet_2\n\nLANGUAGE: linux\nCODE:\n```\nuplink cp sj://cakes/cheesecake.jpg ~/Downloads/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Exporting Access Grant - Command Syntax\nDESCRIPTION: Base command syntax for exporting an Access Grant from Uplink to a file. Requires the access name and target filename as parameters.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-export/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access export <name> <filename>\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access export <name> <filename>\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access export <name> <filename>\n```\n\n----------------------------------------\n\nTITLE: Generating S3-compatible Credentials for Storj\nDESCRIPTION: This command generates S3-compatible Access Key ID and Secret Key for the specified Storj bucket. It creates read-write credentials with no expiration date.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/mastodon/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuplink share --register --readonly=false --not-after=none sj://BUCKET\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Credentials File\nDESCRIPTION: Creates a credentials file containing the S3 access key and secret key, with appropriate permissions set for security.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/s3fs/page.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\necho ACCESS_KEY_ID:SECRET_ACCESS_KEY > ${HOME}/.passwd-s3fs\nchmod 600 ${HOME}/.passwd-s3fs\n```\n\n----------------------------------------\n\nTITLE: Initializing S3 Client with Sidecar Gateway\nDESCRIPTION: This Python code initializes an S3 client using boto3, connecting to the Storj sidecar gateway running in the same pod without hard-coding credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/use-storj-dcs-from-cloud-native-environments-using-sidecar-pattern/page.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsession = boto3.session.Session()\nclient = session.client(\n   's3',\n   endpoint_url=\"http://localhost:7777\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket with Uplink CLI on Linux\nDESCRIPTION: Command to create a new bucket named 'cakes' using the Uplink CLI on Linux. The command uses the 'mb' (make bucket) operation with the Storj protocol prefix 'sj://'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/uplink-mb-command/page.md#2025-04-16_snippet_1\n\nLANGUAGE: linux\nCODE:\n```\nuplink mb [flags] sj://<BUCKET>\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink mb sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Creating Storj Bucket on Windows\nDESCRIPTION: Command to create a new bucket named 'cakes' using Uplink CLI on Windows. The command uses the 'mb' (make bucket) command with the 'sj://' protocol prefix.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/uploading-your-first-object/create-a-bucket/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./uplink.exe mb sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Illustrating Lazy Closing Order Problem in Go Server Implementation\nDESCRIPTION: This code shows a server implementation that may have issues with closing order, potentially causing goroutines to access closed resources.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-goroutine-leaks-in-tests/page.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Server struct {\n  log Logger\n  db  *sql.DB\n}\n\nfunc NewServer(log Logger, dburi string) (*Server, error) {\n  db, err := sql.Open(\"postgres\", dburi)\n  if err != nil {\n    return nil, fmt.Errorf(\"opening database failed: %w\", err)\n  }\n  return &Server{log: log, db: db}, nil\n}\n\n\nfunc (server *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n  tag := r.FormValue(\"tag\")\n  if tag == \"\" {\n    return\n  }\n\n  // update the database in the background\n  go func() {\n    err := server.db.Exec(\"...\", tag)\n    if err != nil {\n      server.log.Errorf(\"failed to update tags: %w\", err)\n    }\n  }()\n}\n\n\nfunc (server *Server) Close() {\n  _ = server.db.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Uplink CLI on Apple Silicon Mac using curl\nDESCRIPTION: Commands to download, unzip, and install the Uplink CLI tool on macOS with Apple Silicon (ARM64) processors. The script downloads the Apple Silicon-specific binary and adds it to the system path.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/installation/page.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/storj/storj/releases/latest/download/uplink_darwin_arm64.zip -o uplink_darwin_arm64.zip\nunzip -o uplink_darwin_arm64.zip\nsudo install uplink /usr/local/bin/uplink\n```\n\n----------------------------------------\n\nTITLE: Existing Access Grant Configuration\nDESCRIPTION: Configuration prompt for entering an existing access grant and confirming the setup.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-native/page.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nprovider> 1\nOption access_grant.\nAccess grant.\nEnter a value. Press Enter to leave empty.\naccess_grant> 1cC...\n--------------------\n[waterbear]\ntype = storj\naccess_grant = 1cC...\n--------------------\ny) Yes this is OK (default)\ne) Edit this remote\nd) Delete this remote\ny/e/d>\n```\n\n----------------------------------------\n\nTITLE: Creating Backup with Restic to Storj\nDESCRIPTION: Command to backup a directory to Storj using Restic with optimal pack size settings\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/restic/page.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nrestic --repo rclone:storj:bucket/my-backup backup ~/directory-to-backup --pack-size=60\n```\n\n----------------------------------------\n\nTITLE: Generating Presigned PUT URL with Python and Boto3\nDESCRIPTION: Python script that uses boto3 to generate a presigned URL for uploading objects to Storj. Requires S3 credentials and configuration of bucket details. The URL expires after the specified time.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/s3/presigned-urls/page.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nACCESS_KEY = \"Your_Access_Key\"\nSECRET_KEY = \"Your_Secret_Key\"\nURL = \"https://gateway.storjshare.io\"\nBUCKET_NAME = \"yourbucketname\"\nsession = boto3.session.Session()\ns3 = session.client(service_name=\"s3\", aws_access_key_id=ACCESS_KEY, aws_secret_access_key=SECRET_KEY, endpoint_url=URL)\nurl = s3.generate_presigned_url('put_object', Params={\"Bucket\":BUCKET_NAME, \"Key\":\"path/within/bucket/file.name\"}, ExpiresIn=3600)\nprint(url)\n```\n\n----------------------------------------\n\nTITLE: Setting Time-Bound Access in Storj CLI\nDESCRIPTION: Creates a time-restricted access grant that expires after 2 weeks (336 hours).\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/concepts/multi-tenant-data/multi-tenant-access-management/page.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nuplink access restrict --access <ACCESS_GRANT> --not-after +336h\n```\n\n----------------------------------------\n\nTITLE: Configuring User Agent in Go Code for Storj Project\nDESCRIPTION: This Go code snippet shows how to programmatically set the User Agent when opening a Storj project. This method allows for dynamic configuration of the User Agent in Go applications.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/partner-program-tools/page.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nuplink.Config{UserAgent: \"MyCompany\"}.OpenProject(...)\n```\n\n----------------------------------------\n\nTITLE: Installing Object Mount CSI Driver with Helm\nDESCRIPTION: Command to install the Object Mount CSI Driver using Helm. It requires setting a license and optionally specifying cloud credentials to import.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm install cunofs-csi-chart oci://registry-1.docker.io/cunofs/cunofs-csi-chart \\\n  --set Object MountLicense.license=\"<license-text>\"                                   \\\n  --set credsToImport=\"{<credentials-1>,<credential-2>, ... ,<credentials-N>}\"\n```\n\n----------------------------------------\n\nTITLE: Migrating data from Backblaze to Storj using rclone\nDESCRIPTION: rclone command to synchronize data from a Backblaze bucket to a Storj bucket. Replace 'my-backblaze-bucket' with your actual bucket name.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/migrate/backblaze/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrclone sync --progress backblaze:my-backblaze-bucket storj:my-backblaze-bucket\n```\n\n----------------------------------------\n\nTITLE: Installing Uplink CLI on Intel Mac using curl\nDESCRIPTION: Commands to download, unzip, and install the Uplink CLI tool on macOS with Intel processors. The script downloads the Intel Mac-specific binary from GitHub and installs it to /usr/local/bin.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/installation/page.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/storj/storj/releases/latest/download/uplink_darwin_amd64.zip -o uplink_darwin_amd64.zip\nunzip -o uplink_darwin_amd64.zip\nsudo install uplink /usr/local/bin/uplink\n```\n\n----------------------------------------\n\nTITLE: Uploading a Local File to a Storj Bucket in Windows\nDESCRIPTION: Example of copying a local file (cheesecake.jpg) to a Storj bucket (cakes) using Uplink CLI in Windows environment.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n./uplink.exe cp cheesecake.jpg sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Generating Signed URL for Storj Object using AWS SDK\nDESCRIPTION: This code shows how to generate a signed URL for an object in Storj using the AWS SDK. It uses the getSignedUrl method to create a cryptographically signed URL that allows temporary access to the object.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/aws/nodejs/page.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = {\n  Bucket: \"my-bucket\",\n  Key: \"my-object\"\n}\n\nconst url = s3.getSignedUrl(\"getObject\", params);\n\n// e.g. create an <img> where src points to url\n```\n\n----------------------------------------\n\nTITLE: Running Gateway ST on Different Platforms\nDESCRIPTION: These commands start the Gateway ST daemon on different platforms, including Windows, Linux, macOS, and Docker.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./gateway.exe run\n```\n\nLANGUAGE: bash\nCODE:\n```\ngateway run\n```\n\nLANGUAGE: bash\nCODE:\n```\ngateway run\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\ndocker run -it --rm -p 127.0.0.1:7777:7777 --mount type=bind,source=/path/to/gateway-config-dir/,destination=/root/.local/share/storj/gateway/ --name gateway storjlabs/gateway run\n```\n\n----------------------------------------\n\nTITLE: Replacing Existing Access with Restricted Grant\nDESCRIPTION: Example of creating a restricted Access Grant, importing it to Uplink as a named access, and replacing an existing access if it exists.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-restrict/page.md#2025-04-16_snippet_4\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access restrict --import-as us1-ro --force\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access restrict --import-as us1-ro --force\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access restrict --import-as us1-ro --force\n```\n\n----------------------------------------\n\nTITLE: Launching Object Mount CLI for Direct Interception in Shell\nDESCRIPTION: This command launches a new interactive shell with Object Mount acting in Direct Interception mode. It allows accessing object storage using path or URI formats.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/enabling-object-mount/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncuno\n```\n\n----------------------------------------\n\nTITLE: Using Defer for Unlocking Mutexes in Go\nDESCRIPTION: Comparison showing how to use defer for unlocking mutexes to prevent resource leaks. The improved version uses an anonymous function with defer to ensure the mutex is always unlocked, even if the function returns early.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfor _, item := range items {\n\tservice.mu.Lock()\n\tservice.process(item)\n\tservice.mu.Unlock()\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfor _, item := range items {\n\tfunc() {\n\t\tservice.mu.Lock()\n\t\tdefer service.mu.Unlock()\n\n\t\tservice.process(item)\n\t}()\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Storj Objects Using Uplink CLI\nDESCRIPTION: Basic usage syntax for the 'mv' command in Uplink CLI to move Storj objects. The command supports Windows, Linux, and macOS platforms.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/mv/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n.\\uplink.exe mv SOURCE DESTINATION [flags]\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink mv SOURCE DESTINATION [flags]\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink mv SOURCE DESTINATION [flags]\n```\n\n----------------------------------------\n\nTITLE: Using cp Command in Windows Environment\nDESCRIPTION: Basic syntax for using the cp command in Windows environment with Uplink CLI to copy files between local storage and Storj DCS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./uplink.exe cp [flags] SOURCE DESTINATION\n```\n\n----------------------------------------\n\nTITLE: Setting Up Object Mount Fusion with AWS S3\nDESCRIPTION: Creates a Fusion mount that combines local storage with AWS S3 bucket storage. Files will be automatically migrated between the two based on access patterns and thresholds.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncuno mount --fusion \"/dev/sdf/fusion-store\" --root \"/cuno/s3/<bucket>/fusion-store\" \"~/my-fusion-filesystem\"\n```\n\n----------------------------------------\n\nTITLE: Making Time Operations Context-Aware in Go\nDESCRIPTION: Comparison showing how to make time operations like Sleep respond to context cancellation, which is important for graceful shutdown and testability. The improved version responds to cancellation signals.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntime.Sleep(time.Minute)\n```\n\nLANGUAGE: go\nCODE:\n```\ntick := time.NewTimer(time.Minute)\ndefer tick.Stop()\n\nselect {\ncase <-tick.C:\ncase <-ctx.Done():\n\treturn ctx.Err()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Summary and Completion\nDESCRIPTION: Final configuration summary showing all settings and completion of the setup process.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-native/page.md#2025-04-16_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nCurrent remotes:\n\nName                 Type\n====                 ====\nwaterbear            storj\n\ne) Edit existing remote\nn) New remote\nd) Delete remote\nr) Rename remote\nc) Copy remote\ns) Set configuration password\nq) Quit config\ne/n/d/r/c/s/q> q\n```\n\n----------------------------------------\n\nTITLE: Uploading CAR File using cURL to Storj IPFS\nDESCRIPTION: Example command for uploading a CAR file to Storj's IPFS service using cURL. Requires HTTP basic authentication with beta credentials and proper file path formatting with '@' prefix. The endpoint follows IPFS HTTP RPC standards with implicit stats=true parameter.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/storj-ipfs-pinning/page.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u ipfs_beta_user:ipfs_beta_password -X POST -F file=@/path/file.car \"https://www.storj-ipfs.com/api/v0/dag/import\"\n```\n\n----------------------------------------\n\nTITLE: Concurrent Function Execution Helper in Go\nDESCRIPTION: A utility function that executes multiple functions concurrently using errgroup. Simplifies running multiple goroutines and waiting for their completion.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nfunc Concurrently(fns ...func() error) error {\n\tvar g errgroup.Group\n\tfor _, fn := range fns {\n\t\tg.Go(fn)\n\t}\n\treturn g.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Initializing LucidLink Filespace with Storj Credentials\nDESCRIPTION: This is an example command for initializing a LucidLink Filespace with specific Storj credentials. It demonstrates how to use the command-line interface with actual values for the Filespace domain, password, Storj endpoint, region, access key, secret key, bucket name, and provider.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/lucidlink/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nlucid init-s3 --fs <storj.storjdemo> --password <MtrU76#pxxY98> --https --endpoint us1.storj.io/ --region <US east> --access-key <jx626ak4gis37hyvfi42znkz5mrq> --secret-key <j2gyivv7jor6gasbgqkhsalx4jky2qj36zlamm76mxiggl6esaj2u> --bucket-name <lucidlink-bucket> --provider Storj\n```\n\n----------------------------------------\n\nTITLE: Running Gateway ST with Specific Access Grant using Docker\nDESCRIPTION: Docker command to run the Gateway with a specified access grant, mounting a local configuration directory.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_18\n\nLANGUAGE: text\nCODE:\n```\ndocker run -it --rm -p 127.0.0.1:7777:7777 --mount type=bind,source=/path/to/gateway-config-dir/,destination=/root/.local/share/storj/gateway/ --name gateway storjlabs/gateway run --access 14aV....\n```\n\n----------------------------------------\n\nTITLE: Uploading a File with Parallelism in Linux\nDESCRIPTION: Example of uploading a file with parallelism to increase upload speed using the --parallelism flag in Linux. Beneficial for large files with sufficient bandwidth.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nuplink cp --parallelism 10 cheesecake.jpg sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Generating Shareable URL with Uplink CLI - Linux\nDESCRIPTION: Command to generate a shareable URL for a file stored in Storj using Uplink CLI on Linux. The --not-after flag sets a 2-hour expiration time for the link.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/uploading-your-first-object/view-distribution-of-an-object/page.md#2025-04-16_snippet_2\n\nLANGUAGE: linux\nCODE:\n```\nuplink share --url --not-after=+2h sj://cakes/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Uplink CLI for macOS\nDESCRIPTION: This snippet illustrates how to download and install the Uplink CLI binary for macOS systems using curl. It downloads the zip file, extracts it, and installs the binary to /usr/local/bin.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://github.com/storj/storj/releases/latest/download/uplink_darwin_amd64.zip -o uplink_darwin_amd64.zip\nunzip -o uplink_darwin_amd64.zip\nsudo install uplink /usr/local/bin/uplink\n```\n\n----------------------------------------\n\nTITLE: Data Validation Command\nDESCRIPTION: Rclone check command to verify data integrity between Wasabi and Storj buckets after migration\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/migrate/wasabi/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrclone check wasabi:my-wasabi-bucket storj:my-wasabi-bucket\n```\n\n----------------------------------------\n\nTITLE: Implementing Context-Based Resource Tracking in Go\nDESCRIPTION: Helper functions to integrate the resource tracker with Go's context system. This allows passing the tracker implicitly through context, making it easier to use across function calls.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-and-tracking-resource-leaks-in-go/page.md#2025-04-16_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype trackerKey struct{}\n\nfunc WithTracker(ctx context.Context) (*Tracker, context.Context) {\n\ttracker := NewTracker()\n\treturn tracker, context.WithValue(ctx, trackerKey{}, tracker)\n}\n\nfunc TrackerFromContext(ctx context.Context) *Tracker {\n\tvalue := ctx.Value(trackerKey{})\n\treturn value.(*Tracker)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directory in Google Cloud Storage for Fusion Store\nDESCRIPTION: Creates a new directory in a Google Cloud Storage bucket to be used for Object Mount Fusion.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ncuno run mkdir \"gs:///<bucket>/fusion-store\"\n```\n\n----------------------------------------\n\nTITLE: Locking a New Object on Upload in Storj using AWS CLI\nDESCRIPTION: This snippet demonstrates how to upload a new object to a Storj bucket with object locking enabled. It sets the lock mode to COMPLIANCE and specifies a retention date using the AWS CLI S3 API.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/objects/page.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\naws s3api put-object \\\n  --bucket my-object-lock-bucket \\\n  --key my-file.txt \\\n  --body my-file.txt \\\n  --object-lock-mode COMPLIANCE \\\n  --object-lock-retain-until-date 2025-01-01T00:00:00Z \\\n  --endpoint-url https://gateway.storjshare.io\n```\n\n----------------------------------------\n\nTITLE: Uplink CLI Access Import Success Message\nDESCRIPTION: Example of the success message displayed after successfully importing an Access Grant in Uplink CLI. It shows the name of the imported access and the path where it's saved.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-import/page.md#2025-04-16_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nImported access \"main\" to \"/home/user/.config/storj/uplink/access.json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring fstab Entry for Auto-mount\nDESCRIPTION: Adds an entry to /etc/fstab for automatic mounting of the S3 bucket during system boot.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/s3fs/page.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmy-bucket /mnt/my-bucket fuse.s3fs _netdev,allow_other,use_path_request_style,url=https://gateway.storjshare.io 0 0\n```\n\n----------------------------------------\n\nTITLE: Downloading Multiple Small Files with Rclone from Storj\nDESCRIPTION: This command shows how to download multiple small files concurrently from Storj using Rclone. It sets the number of transfers to 10, allowing for parallel download of 10 files at once.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/file-transfer-performance/page.md#2025-04-16_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nrclone copy --progress --transfers 10 remote:bucket /tmp\n```\n\n----------------------------------------\n\nTITLE: Initiating Graceful Exit for Linux Storage Nodes\nDESCRIPTION: This snippet demonstrates how to start the graceful exit process for a Storj storage node running in a Docker container on Linux. It shows the command to execute and the expected output, including the option to select which satellites to exit from.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/graceful-exit-guide/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it storagenode /app/bin/storagenode exit-satellite --config-dir /app/config\n\nPlease be aware that by starting a graceful exit from a satellite, you will no longer be allowed to participate in repairs or uploads from that satellite. This action can not be undone. Are you sure you want to continue? y/n : y\n\nDomain Name                      Node ID                                             Space Used\nap1.storj.io:7777   121RTSDpyNZVcEU84Ticf2L1ntiuUimbWgfATz21tuvgk3vzoA6 37.9 GB\nus1.storj.io:7777  12EayRS2V1kEsWESU9QMRseFhdxYxKicsiFmxrsLZHeLUtdps3S 38.7 GB\neu1.storj.io:7777 12L9ZFwhzVpuEKMUNUqkaTLGzwY9G24tbiigLiXpmZWKwmcNDDs 0.8 TB\n\nPlease enter a space delimited list of satellite domain names you would like to gracefully exit. Press enter to continue: ap1.storj.io:7777 us1.storj.io:7777 eu1.storj.io:7777\n```\n\n----------------------------------------\n\nTITLE: Verifying data integrity after migration\nDESCRIPTION: rclone command to check and compare the contents of Backblaze and Storj buckets after migration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/migrate/backblaze/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrclone check backblaze:my-backblaze-bucket storj:my-backblaze-bucket\n```\n\n----------------------------------------\n\nTITLE: Recursively Copying Files to Storj in Windows\nDESCRIPTION: Example of recursively copying all files from a local folder to a Storj bucket using the --recursive flag in Windows environment.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\n./uplink.exe cp --recursive ~/receipts sj://cakes/\n```\n\n----------------------------------------\n\nTITLE: Creating and Mounting Object Mount Fusion for Google Cloud Storage\nDESCRIPTION: Creates an Object Mount Fusion mount and mounts it to a specified directory using Google Cloud Storage.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ncuno fusion \"/mnt/fast/fusion-store\" \"gs:///<bucket>/fusion-store\"\ncuno mount --root \"/mnt/fast/fusion-store\" \"$HOME/my-fusion-filesystem\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Satellite Audits (Port-Mapped/PowerShell)\nDESCRIPTION: PowerShell script for querying audit statistics when the node's dashboard is port-mapped or using Windows GUI. Uses curl and PowerShell's JSON conversion to fetch and process the data.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/audits-by-satellite/page.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n((curl http://127.0.0.1:14002/api/sno).Content | ConvertFrom-Json).satellites.id | %{\"$_\"; ((curl http://127.0.0.1:14002/api/sno/satellite/$_).Content | ConvertFrom-Json).audits}\n```\n\n----------------------------------------\n\nTITLE: Creating and importing Access Grant in Uplink CLI\nDESCRIPTION: This command creates an Access Grant and imports it to Uplink as a named access 'us2'. It demonstrates the use of the '--import-as' flag to save the Access Grant with a specific name.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-create/page.md#2025-04-16_snippet_2\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access create --import-as us2\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access create --import-as us2\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access create --import-as us2\n```\n\n----------------------------------------\n\nTITLE: Setting Up Gateway ST using Docker\nDESCRIPTION: This Docker command runs the setup process for Gateway ST in a Docker container, binding a local configuration directory.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\ndocker run -it --rm --mount type=bind,source=/path/to/gateway-config-dir/,destination=/root/.local/share/storj/gateway/ --name gateway storjlabs/gateway setup\n```\n\n----------------------------------------\n\nTITLE: Restoring Kubernetes Backup with Velero\nDESCRIPTION: Command to restore a Kubernetes cluster from an existing backup using Velero. Requires specifying both the restore name and the source backup name.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/velero/page.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ velero restore create $RESTORE_NAME --from-backup $BACKUP_NAME\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of sync.WaitGroup in Go\nDESCRIPTION: This snippet demonstrates the correct way to use sync.WaitGroup, ensuring that wg.Add(1) is called before starting each goroutine and wg.Done() is deferred within the goroutine.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nfunc processConcurrently(item []*Item) {\n\tvar wg sync.WaitGroup\n\tdefer wg.Wait()\n\tfor _, item := range items {\n\t\titem := item\n\t\tif filepath.Ext(item.Path) != \".go\" {\n\t\t\tcontinue\n\t\t}\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\tprocess(item)\n\t\t}()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Dataset from Storj\nDESCRIPTION: Loads a previously saved dataset from Storj storage using the load_from_disk method.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/hugging-face/page.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom datasets import load_from_disk\n# load encoded_dataset from cloud storage\ndataset = load_from_disk(\"s3://my-dataset-bucket/imdb/train\", storage_options=storage_options)\nprint(len(dataset))\n```\n\n----------------------------------------\n\nTITLE: Downloading Large File with Uplink CLI from Storj\nDESCRIPTION: This command demonstrates how to download a large file from Storj using the Uplink CLI with parallelism. It sets the parallelism to 4, which will utilize 4 CPU cores for the download process.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/file-transfer-performance/page.md#2025-04-16_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nuplink cp sj://bucket/bighugefile.zip ~/Downloads/bighugefile.zip --parallelism 4\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Storj DCS using s3-sync-action\nDESCRIPTION: This step uses the jakejarvis/s3-sync-action to upload the index.html file to the root of the destination Storj DCS bucket. It uses encrypted secrets for S3 credentials and bucket information.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/using-storj-dcs-with-github-actions/page.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Uploads the index.html file to the root of the destination bucket\n- uses: jakejarvis/s3-sync-action@v0.5.1\n  with:\n  # This is a workaround as SOURCE_DIR does not support\n  # a single file\n    args: --exclude '*' --include 'index.html'\n  env:\n    AWS_S3_ENDPOINT: ${{ secrets.AWS_S3_ENDPOINT }}\n    AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}\n    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n```\n\n----------------------------------------\n\nTITLE: Writing an Object to Google Cloud Storage Bucket with Object Mount\nDESCRIPTION: Creates a text file in a Google Cloud Storage bucket using Object Mount. This command writes the text 'hello world' to a file named 'helloworld.txt' in 'bucket1'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\necho \"hello world\" > gs://bucket1/helloworld.txt\n```\n\n----------------------------------------\n\nTITLE: Upload File Using Uplink CLI - MacOS\nDESCRIPTION: Command to upload a file named cheesecake.jpg from Desktop to Storj bucket 'cakes' using MacOS Uplink CLI\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/uploading-your-first-object/upload-an-object/page.md#2025-04-16_snippet_1\n\nLANGUAGE: macos\nCODE:\n```\nuplink cp ~/Desktop/cheesecake.jpg sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Generating Access Grant in Windows\nDESCRIPTION: Command to generate an Access Grant with no restrictions using Uplink CLI in Windows. This creates a full-rights Access Grant for the Storj project.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/access/page.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./uplink.exe access restrict --readonly=false\n```\n\n----------------------------------------\n\nTITLE: Downloading a File from Storj to Local Drive in Windows\nDESCRIPTION: Example of downloading a file (cheesecake.jpg) from a Storj bucket (cakes) to the local Downloads folder using Uplink CLI in Windows.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n./uplink.exe cp sj://cakes/cheesecake.jpg ~/Downloads/\n```\n\n----------------------------------------\n\nTITLE: Downloading a File from Storj to Local Drive in macOS\nDESCRIPTION: Example of downloading a file (cheesecake.jpg) from a Storj bucket (cakes) to the local Downloads folder using Uplink CLI in macOS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nuplink cp sj://cakes/cheesecake.jpg ~/Downloads/\n```\n\n----------------------------------------\n\nTITLE: Listing Buckets in Storj using AWS SDK\nDESCRIPTION: This code snippet shows how to list buckets in Storj using the AWS SDK. It uses an async function to call the listBuckets method and logs the results to the console.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/aws/nodejs/page.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n\n  const { Buckets } = await s3.listBuckets({}).promise();\n\n  console.log(Buckets);\n\n})();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Object Mount on FUSE in Shell\nDESCRIPTION: These commands create a directory and mount object storage as a FUSE filesystem, allowing access to object storage as if it were a local directory.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/enabling-object-mount/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmkdir ~/my-object-storage\ncuno mount ~/my-object-storage\n```\n\n----------------------------------------\n\nTITLE: Verifying Backup Consistency\nDESCRIPTION: Command to check the integrity and consistency of the Restic backup repository\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/restic/page.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nrestic --repo rclone:storj:bucket/my-backup check\n```\n\n----------------------------------------\n\nTITLE: Setting Up Restic Repository with Storj\nDESCRIPTION: Command to initialize a new Restic repository in a specific Storj bucket location\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/restic/page.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nrestic --repo rclone:storj:bucket/my-backup init\n```\n\n----------------------------------------\n\nTITLE: Creating a Storj Bucket with rclone\nDESCRIPTION: This snippet demonstrates how to create a Storj bucket using the rclone command-line tool. It requires rclone to be installed and configured for use with Storj.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/create-buckets/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrclone mkdir storj:my-bucket\n```\n\n----------------------------------------\n\nTITLE: Checking Graceful Exit Status for Linux Storage Nodes\nDESCRIPTION: This code snippet shows how to check the status of the graceful exit process for a Storj storage node running in a Docker container on Linux. It displays the progress and completion status for each satellite being exited.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/graceful-exit-guide/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it storagenode /app/bin/storagenode exit-status --config-dir /app/config --identity-dir /app/identity\n\nDomain Name     Node ID                                             Percent Complete Successful Completion Receipt \n127.0.0.1:10000 12fbck97kqEGbWPu673CpeyrXavtqgVriyv9pCfL3mpw3yz2zN9 0.00%            N          N/A\n```\n\n----------------------------------------\n\nTITLE: Data Migration Command\nDESCRIPTION: Rclone sync command to migrate data from Wasabi bucket to Storj bucket with progress tracking\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/migrate/wasabi/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrclone sync --progress wasabi:my-wasabi-bucket storj:my-wasabi-bucket\n```\n\n----------------------------------------\n\nTITLE: Creating a New Bucket with Object Lock Enabled using AWS CLI\nDESCRIPTION: Creates a new bucket with Object Lock functionality enabled using the AWS CLI. The command specifies the bucket name and enables object lock protection for the bucket.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/object-lock/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\naws s3api create-bucket \\\n  --bucket my-object-lock-bucket \\\n  --object-lock-enabled-for-bucket \\\n  --endpoint-url https://gateway.storjshare.io\n```\n\n----------------------------------------\n\nTITLE: Generating Access Grant in macOS\nDESCRIPTION: Command to generate an Access Grant with no restrictions using Uplink CLI in macOS. This creates a full-rights Access Grant for the Storj project.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/access/page.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuplink access restrict --readonly=false\n```\n\n----------------------------------------\n\nTITLE: S3-Compatible Storage Configuration\nDESCRIPTION: Basic configuration format for S3-compatible storage solutions including access keys and custom endpoint.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/credentials/page.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\naws_access_key_id = xxxxxxxxxxxxxxxxxx\naws_secret_access_key = xxxxxxxxxxxxxxxxxx\nendpoint=http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Importing and Replacing Existing Access Grant in Uplink CLI (Windows/macOS/Linux)\nDESCRIPTION: Example of importing an Access Grant from a file and forcibly replacing an existing access with the same name using the '--force' flag in Uplink CLI.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-import/page.md#2025-04-16_snippet_3\n\nLANGUAGE: windows\nCODE:\n```\n.\\uplink.exe access import main access.txt --force\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access import main access.txt --force\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access import main access.txt --force\n```\n\n----------------------------------------\n\nTITLE: Setting Up Web Hosting with Custom Domain in Uplink CLI\nDESCRIPTION: Example of sharing a bucket for web hosting with a custom domain name. This generates the necessary DNS records to connect your domain to the shared content.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/share-command/page.md#2025-04-16_snippet_5\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe share --dns www.mysite.com sj://cakes/\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink share --dns www.mysite.com sj://cakes/\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink share --dns www.mysite.com sj://cakes/\n```\n\n----------------------------------------\n\nTITLE: Configuring Storj S3 Connection\nDESCRIPTION: Sets up S3 filesystem connection to Storj using access credentials and configures the endpoint URL for Storj gateway.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/hugging-face/page.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom getpass import getpass\nkey = getpass('Enter Storj access key')\nsecret = getpass('Enter Storj secret key')\nimport s3fs\nstorage_options={\"key\":key, \"secret\":secret, \"client_kwargs\": {'endpoint_url':\"https://gateway.storjshare.io\"}}\nfs = s3fs.S3FileSystem(**storage_options)\n```\n\n----------------------------------------\n\nTITLE: Using Object Mount on FUSE with Python for ML Acceleration\nDESCRIPTION: This example shows how to mount an S3 bucket using Object Mount on FUSE and run a Python script with the Machine Learning Accelerator enabled. It includes setting environment variables and mounting the bucket.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/ml/page.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nexport CUNO_SPEEDUP_PYTHON=1\nexport PYTHONPATH=\"<path to the Object Mount MLA>/dataset_preload2${PYTHONPATH+:$PYTHONPATH}\"\ncuno mount --root s3://dataset_bucket \"$HOME/cloudmount\"\npython3 dataset_preload2/demo/verify.py --location \"$HOME/cloudmount/training_set_1\"\n```\n\n----------------------------------------\n\nTITLE: Mounting Fusion Filesystem After Binding\nDESCRIPTION: Mounts a previously bound Fusion filesystem. This simplified command requires only the path to the attached-storage backing directory and the mount location.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncuno mount \\\n    --root \"<path to attached-storage backing directory>\" \\\n    \"<mount location>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Object-Level TTL with AWS CLI in Storj\nDESCRIPTION: Demonstrates how to set an object-level Time To Live (TTL) when uploading a file to Storj using AWS CLI. The example shows setting a 2-hour expiration time and using a specific date and time.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/s3/s3-compatibility/page.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ aws s3 --endpoint-url https://gateway.storjshare.io cp file s3://bucket/object --metadata Object-Expires=+2h\nupload: ./file to s3://bucket/object\n\n# or\n\n$ aws s3 --endpoint-url https://gateway.storjshare.io cp file s3://bucket/object --metadata Object-Expires=2022-05-19T00:10:55Z\nupload: ./file to s3://bucket/object\n```\n\n----------------------------------------\n\nTITLE: Uploading Object with Metadata in Uplink CLI\nDESCRIPTION: Example of uploading an object with metadata using the Uplink CLI. This command copies a local file to a Storj bucket and attaches metadata in JSON format.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/meta-command/meta-get-command/page.md#2025-04-16_snippet_1\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe cp cheesecake.jpg sj://cakes --metadata '{\\\"baker\\\":\\\"cheeseman\\\", \"\\picture-author\\\": \"\\picman\\\"}'\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink cp cheesecake.jpg sj://cakes --metadata '{\"baker\":\"cheeseman\", \"picture-author\": \"picman\"}'\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink cp cheesecake.jpg sj://cakes --metadata '{\"baker\":\"cheeseman\", \"picture-author\": \"picman\"}'\n```\n\n----------------------------------------\n\nTITLE: Using Uplink CLI for File Operations\nDESCRIPTION: Demonstrates basic file operations using the Uplink CLI, including creating buckets, uploading, downloading, and deleting files.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-windows/page.md#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nuplink ls \nuplink mb sj://test\nuplink ls\nuplink cp bigfile.avi sj://test/\nuplink ls sj://test/\nuplink cp sj://test/bigfile.avi bigfile.avi\nuplink rm sj://test/bigfile.avi\n```\n\n----------------------------------------\n\nTITLE: Configuring oCIS Environment Variables for Storj Integration\nDESCRIPTION: This shell script sets up the necessary environment variables for oCIS to use Storj as its storage backend via the S3NG driver. It includes settings for the storage driver, endpoint, region, access credentials, and bucket name.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/ocis/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# activate s3ng storage driver\nSTORAGE_USERS_DRIVER=s3ng\nSTORAGE_SYSTEM_DRIVER=ocis # keep system data on ocis storage since this are only small files atm\n# s3ng specific settings\nSTORAGE_USERS_S3NG_ENDPOINT=https://gateway.storjshare.io\nSTORAGE_USERS_S3NG_REGION=global\nSTORAGE_USERS_S3NG_ACCESS_KEY=access_key # REPLACE ME\nSTORAGE_USERS_S3NG_SECRET_KEY=secret_key # REPLACE ME\nSTORAGE_USERS_S3NG_BUCKET=my-bucket # REPLACE ME\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket with Uplink CLI on Windows\nDESCRIPTION: Command to create a new bucket named 'cakes' using the Uplink CLI on Windows. The command uses the 'mb' (make bucket) operation with the Storj protocol prefix 'sj://'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/uplink-mb-command/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe mb [flags] sj://<BUCKET>\n```\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe mb sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Defining a StorageClass for Dynamic Provisioning\nDESCRIPTION: YAML configuration for a StorageClass that enables dynamic provisioning of cloud storage using the Object Mount CSI Driver with specified bucket and mount options.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: storage.K8s.io/v1\nkind: StorageClass\nmetadata:\n  name: cunofs-storageclass\nprovisioner: cunofs.csi.com\n  reclaimPolicy: Retain # default is Delete\n  parameters:\n    cloud-type: s3 # requires either of s3/az/gs\n    bucket: cuno-csi-testing # requires bucket that already exists\n    bucket-subdir: test_kubernetes # optional\n    # Options passed down to the PV:\n    posix: \"true\" # optional\n    allow_root: \"false\" # optional\n    allow_other: \"true\" # optional\n    auto_restart: \"true\" # optional\n    readonly: \"true\" # optional\n```\n\n----------------------------------------\n\nTITLE: Implementing ListBucketsWithAttribution with AWS SDK for Go\nDESCRIPTION: Provides a Go code example that uses the AWS SDK for Go to implement the ListBucketsWithAttribution API call. It includes custom structs to handle the Attribution field and demonstrates how to make the API request.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/s3/s3-compatibility/page.md#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go/aws\"\n\t\"github.com/aws/aws-sdk-go/aws/awsutil\"\n\t\"github.com/aws/aws-sdk-go/aws/credentials\"\n\t\"github.com/aws/aws-sdk-go/aws/request\"\n\t\"github.com/aws/aws-sdk-go/aws/session\"\n\t\"github.com/aws/aws-sdk-go/service/s3\"\n)\n\ntype BucketWithAttribution struct {\n\t_            struct{}   `type:\"structure\"`\n\tCreationDate *time.Time `type:\"timestamp\"`\n\tName         *string    `type:\"string\"`\n\tAttribution  *string    `type:\"string\"`\n}\n\ntype ListBucketsWithAttributionOutput struct {\n\t_       struct{}                 `type:\"structure\"`\n\tBuckets []*BucketWithAttribution `locationNameList:\"Bucket\" type:\"list\"`\n\tOwner   *s3.Owner                `type:\"structure\"`\n}\n\nfunc main() {\n\t// Note: YOUR-ACCESSKEYID and YOUR-SECRETACCESSKEY are example values, please replace them with your keys.\n\tcreds := credentials.NewCredentials(&credentials.StaticProvider{\n\t\tValue: credentials.Value{\n\t\t\tAccessKeyID:     \"YOUR_ACCESSKEYID\",\n\t\t\tSecretAccessKey: \"YOUR_SECRETACCESSKEY\",\n\t\t}})\n\n\tses := session.Must(session.NewSession(aws.NewConfig().WithCredentials(creds).WithRegion(\"eu1\").WithEndpoint(\"https://gateway.storjshare.io\")))\n\tsvc := s3.New(ses)\n\n\top := &request.Operation{\n\t\tName:       \"ListBuckets\",\n\t\tHTTPMethod: \"GET\",\n\t\tHTTPPath:   \"/?attribution\",\n\t}\n\n\toutput := &ListBucketsWithAttributionOutput{}\n\n\treq := svc.NewRequest(op, &s3.ListBucketsInput{}, output)\n\n\tif err := req.Send(); err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(awsutil.Prettify(output))\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metadata with Uplink CLI\nDESCRIPTION: Command syntax for retrieving metadata of an object using the Uplink CLI. The command accepts a PATH argument and an optional KEY argument, along with flags for access and help.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/meta-command/meta-get-command/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe meta get PATH [KEY] [flags]\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink meta get PATH [KEY] [flags]\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink meta get PATH [KEY] [flags]\n```\n\n----------------------------------------\n\nTITLE: Mounting Storj Bucket using Rclone\nDESCRIPTION: Command to mount a Storj bucket as a local filesystem with optimized caching and performance settings. Uses rclone mount with specific flags for VFS caching, directory caching, and read-only access.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/plex/page.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrclone mount Storj:media X:\\ --vfs-cache-mode full --dir-cache-time 1h --read-only --no-checksum --no-modtime --rc\n```\n\n----------------------------------------\n\nTITLE: Downloading Objects from Storj using Rclone\nDESCRIPTION: Use the 'copy' command with '--disable-http2' flag for increased transfer speeds. The '--progress' flag displays progress information.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-s3/page.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrclone copy --disable-http2 --progress waterbear:mybucket/videos/myvideo.mp4 ~/Downloads/\n```\n\nLANGUAGE: bash\nCODE:\n```\nrclone copy --progress waterbear:mybucket/videos/ ~/Downloads/\n```\n\n----------------------------------------\n\nTITLE: Enabling Versioning on an Existing Bucket using AWS CLI\nDESCRIPTION: Enables versioning on an existing bucket using AWS CLI, which is a prerequisite for enabling Object Lock on an existing bucket. This command sets the versioning status to 'Enabled'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/object-lock/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\naws s3api put-bucket-versioning \\\n  --bucket my-existing-bucket \\\n  --versioning-configuration Status=Enabled \\\n  --endpoint-url https://gateway.storjshare.io\n```\n\n----------------------------------------\n\nTITLE: Running Gateway ST with Minio Caching using Docker\nDESCRIPTION: Example Docker command for running Gateway ST with Minio caching enabled, mounting cache drives and using environment variables from a file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_27\n\nLANGUAGE: text\nCODE:\n```\ndocker run -it --rm -p 127.0.0.1:7777:7777 --env-file ./minio_vars --mount type=bind,src=/mnt/drive1,dst=/mnt/drive1 --mount type=bind,src=/mnt/drive2,dst=/mnt/drive2 --mount type=bind,src=/mnt/cache1,dst=/mnt/cache1 --mount type=bind,src=/mnt/cache2,dst=/mnt/cache2 --mount type=bind,src=/mnt/cache3,dst=/mnt/cache3 --mount type=bind,source=/path/to/gateway-config-dir/,destination=/root/.local/share/storj/gateway/ --name gateway storjlabs/gateway run --access site --website\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects with Uplink CLI - Windows\nDESCRIPTION: Command to delete a file named 'cheesecake.jpg' from the 'cakes' bucket using Uplink CLI on Windows. Uses the .exe executable format.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/interacting-with-your-first-object/delete-an-object/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe rm sj://cakes/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Removing Non-Empty Bucket with AWS CLI\nDESCRIPTION: This command uses AWS CLI to remove a non-empty bucket from Storj, even if the encryption phrase is lost. It requires AWS CLI to be installed and configured with Storj S3 credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/delete-buckets/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\naws s3 --endpoint-url=https://gateway.storjshare.io rb --force s3://my-bucket\n```\n\n----------------------------------------\n\nTITLE: Removing Objects from Bucket with uplink\nDESCRIPTION: This command uses uplink to remove objects from a Storj bucket, even if the encryption phrase is lost. It requires uplink to be installed and configured with Storj credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/delete-buckets/page.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nuplink rm --recursive --encrypted --parallelism 30 sj://my-bucket\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshot Bucket\nDESCRIPTION: Command to create a new bucket named 'snapshots' for storing chainstate snapshots.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/chainstate-snapshots/page.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nuplink mb sj://snapshots\n```\n\n----------------------------------------\n\nTITLE: Deleting a Specific Object Example\nDESCRIPTION: Example of using the 'rm' command to delete a specific object (cheesecake.jpg) from a bucket named 'cakes'. The command is shown for Windows, Linux, and macOS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/rm-command/page.md#2025-04-16_snippet_1\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe rm sj://cakes/cheesecake.jpg\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink rm sj://cakes/cheesecake.jpg\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink rm sj://cakes/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Deleting Files from Storj\nDESCRIPTION: Commands to delete individual files from a Storj bucket using both rclone and AWS CLI\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/getting-started/page.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nrclone deletefile storj:my-bucket/storj-tree.png\n```\n\nLANGUAGE: shell\nCODE:\n```\naws s3 --endpoint-url=https://gateway.storjshare.io rm s3://my-bucket/storj-tree.png\n```\n\n----------------------------------------\n\nTITLE: Pinning a Single File Using cURL in Shell\nDESCRIPTION: This snippet demonstrates how to pin a single file to the Storj IPFS Pinning Service using cURL. It requires the user's beta credentials and the file path.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/storj-ipfs-pinning/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u ipfs_beta_user:ipfs_beta_password -X POST -F file=@/path/file.extension \"https://www.storj-ipfs.com/api/v0/add\"\n```\n\n----------------------------------------\n\nTITLE: Activating Object Mount Direct Interception for Python\nDESCRIPTION: This example demonstrates how to set up the environment variables and activate a shell with Object Mount enabled for using the Machine Learning Accelerator.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/ml/page.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ export CUNO_SPEEDUP_PYTHON=1\n$ export PYTHONPATH=\"<path to the Object Mount MLA>${PYTHONPATH+:$PYTHONPATH}\"\n$ cuno\n(cuno) $ python3 demo/verify.py\n```\n\n----------------------------------------\n\nTITLE: Revoking a Named Access Grant using Uplink CLI\nDESCRIPTION: This snippet shows how to revoke a named access grant using the 'uplink revoke' command. The command is similar across Windows, macOS, and Linux, with the access name specified as an argument.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/sharing-your-first-object/revoke-an-access-to-an-object/page.md#2025-04-16_snippet_1\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access revoke access-name\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access revoke access-name\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access revoke access-name\n```\n\n----------------------------------------\n\nTITLE: Revoking a stored access in Linux\nDESCRIPTION: Example of revoking a stored access named 'us1-ro' in Linux. This removes the access from the system, preventing further use.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-revoke/page.md#2025-04-16_snippet_4\n\nLANGUAGE: linux\nCODE:\n```\nuplink access revoke us1-ro\n```\n\n----------------------------------------\n\nTITLE: Saving Dataset to Storj\nDESCRIPTION: Saves an encoded dataset to Storj storage using the save_to_disk method.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/hugging-face/page.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nencoded_dataset.save_to_disk(\"s3://my-dataset-bucket/imdb/train\", storage_options=storage_options)\n```\n\n----------------------------------------\n\nTITLE: Deploying Google Cloud Functions with Shell Script\nDESCRIPTION: Shell script for deploying a Google Cloud Function that generates presigned URLs. This simple deployment script uses the gcloud CLI to deploy the function with HTTP trigger and public access, and includes a test curl command.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/presigned-urls-serverless-cloud/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngcloud functions deploy Presign --runtime go119 --trigger-http --allow-unauthenticated\ncurl \"https://<YOUR LOCATION>.cloudfunctions.net/Presign?key=test&method=POST\"\n```\n\n----------------------------------------\n\nTITLE: Managing Goroutine Lifecycle with errgroup in Go\nDESCRIPTION: Comparison showing how to properly manage goroutines with errgroup instead of starting them without tracking their completion. The errgroup approach enables proper error handling and graceful shutdown.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngo ListenHTTP(ctx)\ngo ListenGRPC(ctx)\ngo ListenDebugServer(ctx)\nselect{}\n```\n\nLANGUAGE: go\nCODE:\n```\ng, ctx := errgroup.WithContext(ctx)\ng.Go(func() error {\n\treturn ListenHTTP(ctx)\n}\ng.Go(func() error {\n\treturn ListenGRPC(ctx)\n}\ng.Go(func() error {\n\treturn ListenDebugServer(ctx)\n}\nerr := g.Wait()\n```\n\n----------------------------------------\n\nTITLE: Executing Python Script for URL Generation\nDESCRIPTION: Command to execute the Python script that generates the presigned URL.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/s3/presigned-urls/page.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 my_put_script.py\n```\n\n----------------------------------------\n\nTITLE: Uploading Objects to Storj using Rclone\nDESCRIPTION: Use the 'copy' command to upload objects or folders to Storj. The '--progress' flag displays progress information.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-s3/page.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrclone copy --progress ~/Videos/myvideo.mp4 waterbear:mybucket/videos/\n```\n\nLANGUAGE: bash\nCODE:\n```\nrclone copy --progress ~/Videos/ waterbear:mybucket/videos/\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Storj Bucket using AWS CLI\nDESCRIPTION: This snippet shows how to upload a file to a Storj bucket using the AWS CLI. It specifies the Storj gateway endpoint URL and uses the S3-compatible API.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/objects/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\naws s3 --endpoint-url=https://gateway.storjshare.io cp ~/Downloads/storj-tree.png s3://my-bucket/\n\nupload: Downloads/storj-tree.png to s3://my-bucket/storj-tree.png\n```\n\n----------------------------------------\n\nTITLE: Docker Container Launch with Object Mount\nDESCRIPTION: Example of running Docker container with automatic Object Mount interception enabled\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/advanced/page.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nexport CUNO_INTERCEPT_DOCKER=1\ncuno run docker run --rm ubuntu:latest ls -l s3://bucket\n```\n\n----------------------------------------\n\nTITLE: Sharing a Single Object in Uplink CLI\nDESCRIPTION: Example of sharing a single object (cheesecake.jpg) with read-only permissions. By default, only download and list operations are allowed.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/share-command/page.md#2025-04-16_snippet_1\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe share sj://cakes/cheesecake.jpg\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink share sj://cakes/cheesecake.jpg\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink share sj://cakes/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Mounting an S3 bucket with POSIX mode and multi-user access\nDESCRIPTION: Command to mount an S3 bucket with POSIX file access enabled, allowing root and other users to access the mount. This setup enables fine-grained control over file permissions and ownership.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/configuration/page.md#2025-04-16_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ cuno mount --posix -o allow_root -o allow_other --root s3://mybucket /mnt/cloud/bucket\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Gateway ST for Linux AMD64\nDESCRIPTION: This curl command downloads, extracts, and installs the Gateway ST binary for Linux AMD64 systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/storj/gateway-st/releases/latest/download/gateway_linux_amd64.zip -O && unzip gateway_linux_amd64.zip\nchmod 755 gateway\nsudo mv gateway /usr/local/bin/gateway\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Gateway ST for Linux ARM\nDESCRIPTION: This curl command downloads, extracts, and installs the Gateway ST binary for Linux ARM systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/storj/gateway-st/releases/latest/download/gateway_linux_arm.zip -O && unzip gateway_linux_arm.zip\nchmod 755 gateway\nsudo mv gateway /usr/local/bin/gateway\n```\n\n----------------------------------------\n\nTITLE: Naming Goroutines with pprof Labels in Go\nDESCRIPTION: Example showing how to add labels to goroutines using pprof, which improves debugging and profiling by making stack traces more meaningful.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nlabels := pprof.Labels(\"server\", \"grpc\")\npprof.Do(ctx, labels,\n\tfunc(ctx context.Context) {\n\t\t// ...\n\t})\n```\n\n----------------------------------------\n\nTITLE: Uploading Large File with Rclone to Storj\nDESCRIPTION: This command demonstrates how to upload a 1GB file to Storj using Rclone with optimal parallelism settings. It sets the upload concurrency to 16 and chunk size to 64MB for efficient transfer.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/file-transfer-performance/page.md#2025-04-16_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nrclone copy --progress --s3-upload-concurrency 16 --s3-chunk-size 64M 1gb.zip remote:bucket\n```\n\n----------------------------------------\n\nTITLE: Moving Files to Google Cloud Storage\nDESCRIPTION: Commands to move a local file to Google Cloud Storage using both URI and directory formats.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/access/page.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmv ./sample.txt gs://my-bucket/dir/sample.txt\n```\n\nLANGUAGE: console\nCODE:\n```\nmv ./sample.txt /cuno/gs/my-bucket/dir/sample.txt\n```\n\n----------------------------------------\n\nTITLE: Implementing Goroutine Tracking for Leak Detection in Go Tests\nDESCRIPTION: This function uses goroutine labels to track and detect leaked goroutines in Go tests. It attaches a unique label to each test goroutine.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-goroutine-leaks-in-tests/page.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc Track(ctx context.Context, t *testing.T, fn func(context.Context)) {\n  label := t.Name()\n  pprof.Do(ctx, pprof.Labels(\"test\", label), fn)\n  if err := CheckNoGoroutines(\"test\", label); err != nil {\n    t.Fatal(\"Leaked goroutines\\n\", err)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Uplink Setup Command on Windows\nDESCRIPTION: Command to run the Uplink setup wizard on Windows systems which initiates the configuration process for creating an Uplink config file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/setup-command/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe setup [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting POSIX file access mode on a bucket using Object Mount CLI\nDESCRIPTION: Command to enable POSIX mode on an S3 bucket using the creds setposix command. This allows for persistent storage of file system metadata including ownership and permissions.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/configuration/page.md#2025-04-16_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ncuno creds setposix s3://examplebucket true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Satellite Audits (Docker/PowerShell)\nDESCRIPTION: PowerShell script for querying audit statistics from a Docker-deployed Storj storage node. Uses docker exec with wget and PowerShell's JSON conversion to process the data.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/audits-by-satellite/page.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n(docker exec -i storagenode wget -qO - localhost:14002/api/sno | ConvertFrom-Json).satellites.id | %{\"$_\"; (docker exec -i storagenode wget -qO - localhost:14002/api/sno/satellite/$_ | ConvertFrom-Json).audits}\n```\n\n----------------------------------------\n\nTITLE: Generating S3 Compatible Credentials for Storj Bucket\nDESCRIPTION: This command generates S3 compatible credentials (Access Key ID and Secret Key) for the Storj bucket. It creates a read-write access grant with no expiration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/pixelfed/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuplink share --register --readonly=false --not-after=none sj://BUCKET\n```\n\n----------------------------------------\n\nTITLE: Transferring Hugging Face Dataset to Storj\nDESCRIPTION: Downloads a dataset from Hugging Face Hub and transfers it to Storj storage using the configured S3 connection.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/hugging-face/page.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datasets import load_dataset_builder\nbuilder = load_dataset_builder(\"imdb\")\n\noutput_dir = \"s3://my-dataset-bucket/imdb\"\nbuilder = load_dataset_builder(\"imdb\")\nbuilder.download_and_prepare(output_dir, storage_options=storage_options, file_format=\"parquet\")\n```\n\n----------------------------------------\n\nTITLE: Testing Object Mount with Public S3 Data on Mac\nDESCRIPTION: Commands to test Object Mount functionality on Mac by listing contents of a public S3 bucket. These examples demonstrate browsing telescope data from the stpubdata bucket to verify the installation works correctly in the Mac container environment.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/download-install/page.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# terminal\ncuno-mac run sh -c \"ls s3://stpubdata/\"\ngalex  hst  jwst  k2  kepler  panstarrs  tess\n```\n\nLANGUAGE: shell\nCODE:\n```\n# terminal\ncuno-mac run sh -c \"ls s3://stpubdata/tess/public/*\"\n's3://stpubdata/tess/public/ffi':\ns0001  s0005  s0009  s0013  s0017  s0021  s0025  s0029 ... [truncated]\n's3://stpubdata/tess/public/mast':\ntess-s0001-1-1-cube.fits  tess-s0012-1-4-cube.fits  tess-s0023-2-3-cube.fits ... [truncated]\n... [truncated]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Satellite Audits (Docker/Bash)\nDESCRIPTION: Bash script to query audit statistics for each satellite from a Docker-deployed Storj storage node. Uses wget to fetch data from the node's API and jq to parse JSON responses.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/audits-by-satellite/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfor sat in `docker exec -i storagenode wget -qO - localhost:14002/api/sno | jq .satellites[].id -r`; do docker exec -i storagenode wget -qO - localhost:14002/api/sno/satellite/$sat | jq .id,.audits; done\n```\n\n----------------------------------------\n\nTITLE: Installing Uplink CLI on Linux ARM using curl\nDESCRIPTION: Commands to download, unzip, and install the Uplink CLI tool on Linux ARM architecture. The script downloads the ARM-specific binary from GitHub, extracts it, and installs it to the system path.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/installation/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/storj/storj/releases/latest/download/uplink_linux_arm.zip -o uplink_linux_arm.zip\nunzip -o uplink_linux_arm.zip\nsudo install uplink /usr/local/bin/uplink\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CLI for Large Object Upload in Storj\nDESCRIPTION: Sets the multipart chunk size for AWS CLI to handle objects larger than 5 TiB when uploading to Storj. This example sets the chunk size to 630 MiB for a 6 TiB file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/s3/s3-compatibility/page.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ aws --profile storj configure set s3.multipart_chunksize 630MiB\n$ aws --profile storj --endpoint-url https://gateway.storjshare.io s3 cp 6TiB_file s3://objects/\n```\n\n----------------------------------------\n\nTITLE: Generating Shareable URL with Uplink CLI - Windows\nDESCRIPTION: Command to generate a shareable URL for a file stored in Storj using Uplink CLI on Windows. The --not-after flag sets a 2-hour expiration time for the link.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/uploading-your-first-object/view-distribution-of-an-object/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe share --url --not-after=+2h sj://cakes/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Testing the Client with Resource Tracking in Go\nDESCRIPTION: A comprehensive test that demonstrates using the tracking system with the TCP client. It sets up a test server and creates a tracked client, which will cause the test to fail if the client is not properly closed.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-and-tracking-resource-leaks-in-go/page.md#2025-04-16_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc TestClient(t *testing.T) {\n\tctx := TestingTracker(context.Background(), t)\n\n\taddr := startTestServer(t)\n\n\tclient, err := Dial(ctx, addr)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t// if we forget to close, then the test will fail\n\t// client.Close\n\t_ = client\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Region for S3 Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure an S3 client to use Storj's global region. It's typically used when setting up S3 compatible tools to work with Storj's distributed storage system.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/data-location/page.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst s3Client = new S3.S3Client({ region: 'global' })\n```\n\n----------------------------------------\n\nTITLE: Initializing Rclone Configuration\nDESCRIPTION: Command to start the Rclone configuration process which launches the interactive setup wizard.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-native/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrclone config\n```\n\n----------------------------------------\n\nTITLE: Configuring Mastodon's .env.production for Storj Integration\nDESCRIPTION: This configuration block sets up Mastodon to use Storj as its object storage provider. It includes settings for S3-compatible access, endpoint configuration, and linksharing setup.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/mastodon/page.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nS3_ENABLED=true\nS3_PROTOCOL=https\nS3_REGION=global\nS3_ENDPOINT=https://gateway.storjshare.io\nS3_HOSTNAME=gateway.storjshare.io\nS3_BUCKET=BUCKET\nS3_ALIAS_HOST=link.storjshare.io/raw/LINKSHARINGKEY/BUCKET\nAWS_ACCESS_KEY_ID=ACCESS_KEY_ID\nAWS_SECRET_ACCESS_KEY=SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Listing Buckets in S3-compatible Storage with Object Mount\nDESCRIPTION: Lists all paired buckets in S3-compatible storage using Object Mount. This command requires that Object Mount be enabled first by running the 'cuno' command.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nls s3://\n```\n\n----------------------------------------\n\nTITLE: Generating Access Grant in Linux\nDESCRIPTION: Command to generate an Access Grant with no restrictions using Uplink CLI in Linux. This creates a full-rights Access Grant for the Storj project.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/access/page.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuplink access restrict --readonly=false\n```\n\n----------------------------------------\n\nTITLE: Running Uplink Setup Command on Linux\nDESCRIPTION: Command to run the Uplink setup wizard on Linux systems which initiates the configuration process for creating an Uplink config file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/setup-command/page.md#2025-04-16_snippet_1\n\nLANGUAGE: linux\nCODE:\n```\nuplink setup [flags]\n```\n\n----------------------------------------\n\nTITLE: Mounting S3 Bucket Using s3fs\nDESCRIPTION: Mounts a Storj bucket to a local directory using s3fs with specified credentials and gateway endpoint.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/s3fs/page.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ns3fs my-bucket /mnt/my-bucket -o passwd_file=${HOME}/.passwd-s3fs -o url=https://gateway.storjshare.io -o use_path_request_style\n```\n\n----------------------------------------\n\nTITLE: Performance Comparison: CockroachDB vs PostgreSQL Iterator Speed\nDESCRIPTION: Benchmark results comparing ordered iterator performance between CockroachDB and CloudSQL PostgreSQL for different record counts. Shows significant performance improvements with CockroachDB.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/choosing-cockroach-db-for-horizontal-scalability/page.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSpeed of ordered iterator\n\nCockroachDB\nTook 3.5s for 100,000 records\nTook 18.8s for 1,000,000 records\nTook 14m0.5s for 10,000,000 records\n\nCloudSQL Postgres\nTook 56.8s for 100,000 records\nTook 4m53.3s for 1000,000 records\nTook 1h48m25.1s for 10,000,000 records\n```\n\n----------------------------------------\n\nTITLE: Restricting Access Grant with MaxObjectTTL in Storj\nDESCRIPTION: These commands use Uplink CLI to restrict an access grant with MaxObjectTTL permission, setting a TTL of 720 hours (30 days) for all objects uploaded with this access grant.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/object-lifecycles/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./uplink.exe access restrict --access 18k...TAY --readonly=false --max-object-ttl 720h\n```\n\nLANGUAGE: shell\nCODE:\n```\nuplink access restrict --access 18k...TAY --readonly=false --max-object-ttl 720h\n```\n\nLANGUAGE: shell\nCODE:\n```\nuplink access restrict --access 18k...TAY --readonly=false --max-object-ttl 720h\n```\n\n----------------------------------------\n\nTITLE: Folder Upload and Pinning Implementation\nDESCRIPTION: JavaScript implementation for uploading and pinning a folder to Storj IPFS service. Uses got for HTTP requests, form-data for multipart uploads, and recursive-fs for folder traversal.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/storj-ipfs-pinning/page.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// The 'got' module gives a promised-based HTTP client.\nimport got from 'got'\n\n// The 'fs' built-in module provides access to the file system.\nimport fs from 'fs'\n\n// The 'form-data' module helps us submit forms and file uploads\n// to other web applications.\nimport FormData from 'form-data'\n\n// The 'recursive-fs' module provides async recursive file system operations.\nimport rfs from 'recursive-fs'\n\n// The 'base-path-converter' module trims file paths from a base path.\nimport basePathConverter from 'base-path-converter'\n\n/**\n * Uploads a folder from `folderpath` and pins it to the Storj IPFS pinning service.\n * @param {string} username your username for the Storj IPFS pinning service\n * @param {string} password your password for the Storj IPFS pinning service\n * @param {string} folderpath the path to the folder\n */\nasync function pinFolderToIPFS(username, password, folderpath) {\n  // The HTTP upload endpoint of the Storj IPFS pinning service\n  const url = `https://www.storj-ipfs.com/api/v0/add`\n\n  // Create a form with the folder and its files to upload\n  let data = new FormData()\n  const { dirs, files } = await rfs.read(folderpath)\n  for (const file of files) {\n    data.append(`file`, fs.createReadStream(file), {\n      filepath: basePathConverter(folderpath, file),\n    })\n  }\n\n  // Execute the Upload request to the Storj IPFS pinning service\n  return got\n    .post(url, {\n      username: username,\n      password: password,\n      headers: {\n        'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n      },\n      body: data,\n    })\n    .on('uploadProgress', (progress) => {\n      console.log(progress)\n    })\n}\n\n/**\n * The main entry point for the script that checks the command line arguments and\n * calls pinFolderToIPFS.\n *\n * To simplify the example, we don't do fancy command line parsing. Just three\n * positional arguments for username, password, and folder path.\n */\nasync function main() {\n  const args = process.argv.slice(2)\n  if (args.length !== 3) {\n    console.error(\n      `usage: ${process.argv[0]} ${process.argv[1]} <username> <password> <folderpath>`\n    )\n    process.exit(1)\n  }\n\n  const [username, password, folderpath] = args\n  const response = await pinFolderToIPFS(username, password, folderpath)\n  console.log(response.body)\n}\n\n/**\n * Don't forget to call the main function!\n * We can't `await` things at the top level, so this adds\n * a .catch() to grab any errors and print them to the console.\n */\nmain().catch((err) => {\n  console.error(err)\n  process.exit(1)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Bucket for Dataverse\nDESCRIPTION: AWS CLI command to create a new bucket named 'dataverse' using Storj's gateway endpoint.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/dataverse/page.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\naws --endpoint-url=https://gateway.storjshare.io s3 mb s3://dataverse\n```\n\n----------------------------------------\n\nTITLE: Inspecting Access Grant Details\nDESCRIPTION: Commands to inspect detailed information about a specific access grant named 'cheesecake' across different operating systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/sharing-your-first-object/import-access/page.md#2025-04-16_snippet_3\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access inspect cheesecake\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access inspect cheesecake\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access inspect cheesecake\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Server-Side Encryption\nDESCRIPTION: Sets AWS S3 environment variable for AES256 server-side encryption with a customer-provided key. This configuration enables SSE-C (Server-Side Encryption with Customer-Provided Keys) for AWS S3 operations.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/extraopts/page.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nexport AWS_S3OPTIONS=\"--sse-write-c AES256 --sse-write-c-key xxxxxxxxxxxxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Mounting a Bucket with Enforced POSIX Access\nDESCRIPTION: This command mounts an S3 bucket with POSIX access enforcement enabled. The allow_root and allow_other options permit both root and non-root users to access the mount, enabling proper permission enforcement.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/enforced-posix-access/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cuno mount --posix -o allow_root -o allow_other --root s3://mybucket /mnt/cloud/bucket\n```\n\n----------------------------------------\n\nTITLE: Deleting Non-Empty Buckets in Storj\nDESCRIPTION: Commands to force delete buckets containing files using both rclone and AWS CLI\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/getting-started/page.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nrclone purge storj:my-bucket\n```\n\nLANGUAGE: shell\nCODE:\n```\naws s3 --endpoint-url=https://gateway.storjshare.io rb --force s3://my-bucket/\n```\n\n----------------------------------------\n\nTITLE: Uploading a Local File to a Storj Bucket in macOS\nDESCRIPTION: Example of copying a local file (cheesecake.jpg) to a Storj bucket (cakes) using Uplink CLI in macOS environment.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuplink cp cheesecake.jpg sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Installing Uplink CLI on Linux AMD64\nDESCRIPTION: Commands to download, unzip and install the Storj uplink CLI tool on Linux AMD64 systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/chainstate-snapshots/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://github.com/storj/storj/releases/latest/download/uplink_linux_amd64.zip -o uplink_linux_amd64.zip\nunzip -o uplink_linux_amd64.zip\nsudo install uplink /usr/local/bin/uplink\n```\n\n----------------------------------------\n\nTITLE: Configuring PixelFed Environment for Storj S3 Integration\nDESCRIPTION: This code snippet shows the PixelFed environment configuration for integrating with Storj S3. It includes settings for enabling cloud storage, S3 driver, and Storj-specific credentials and endpoints.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/pixelfed/page.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nPF_ENABLE_CLOUD=true\nFILESYSTEM_DRIVER=s3\nFILESYSTEM_CLOUD=s3\nAWS_ACCESS_KEY_ID=ACCESS_KEY_ID\nAWS_SECRET_ACCESS_KEY=SECRET_KEY\nAWS_DEFAULT_REGION=global\nAWS_BUCKET=BUCKET\nAWS_URL=https://link.storjshare.io/raw/LINKSHARINGKEY/BUCKET\nAWS_ENDPOINT=https://gateway.storjshare.io\n#AWS_USE_PATH_STYLE_ENDPOINT=false\n```\n\n----------------------------------------\n\nTITLE: Creating Access Grant and exporting to file in Uplink CLI\nDESCRIPTION: This command creates an Access Grant and exports it to a file named 'access.txt'. It demonstrates how to use the '--export-to' flag to save the Access Grant to a specified file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-create/page.md#2025-04-16_snippet_1\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access create --export-to access.txt\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access create --export-to access.txt\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access create --export-to access.txt\n```\n\n----------------------------------------\n\nTITLE: Creating a PersistentVolumeClaim for Static Provisioning\nDESCRIPTION: YAML configuration for a PersistentVolumeClaim (PVC) that references a specific PersistentVolume for static storage provisioning.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: cunofs-pvc\nspec:\n  accessModes:\n    - ReadWriteOncePod\n  storageClassName: \"\" # ensures that no dynamic provisioning occurs\n  resources:\n    requests:\n      storage: 16Ei # ignored but required\n  volumeName: cunofs-pv # PV metadata.name\n```\n\n----------------------------------------\n\nTITLE: Sharing a Bucket with Full Permissions in Uplink CLI\nDESCRIPTION: Example of sharing an entire bucket with all permissions by setting the readonly flag to false. This allows uploads, downloads, lists, and deletes.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/share-command/page.md#2025-04-16_snippet_2\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe share sj://cakes/ --readonly=false\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink share sj://cakes/ --readonly=false\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink share sj://cakes/ --readonly=false\n```\n\n----------------------------------------\n\nTITLE: Downloading Storj Storage Node Docker Container\nDESCRIPTION: This command pulls the latest version of the Storj Storage Node Docker container from the official repository.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/cli/storage-node/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull storjlabs/storagenode:latest\n```\n\n----------------------------------------\n\nTITLE: Livepeer Transcoding Script\nDESCRIPTION: Shell script that uses the Livepeer API to transcode videos stored in Storj, configuring input/output locations and transcoding profiles.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/livepeer/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\n\nLIVEPEER_API_KEY=\"<LIVEPEER API KEY>\"\nSTORJ_ACCESS_KEY_ID=\"<STORJ ACCESS KEY>\"\nSTORJ_SECRET_ACCESS_KEY=\"<STORJ SECRET KEY>\"\n\ncurl --location --request POST 'https://livepeer.studio/api/transcode' \\\n--header \"Authorization: Bearer $LIVEPEER_API_KEY\" \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"input\": {\n        \"type\": \"s3\",\n        \"endpoint\": \"https://gateway.storjshare.io\",\n        \"credentials\": {\n            \"accessKeyId\": \"'\"$STORJ_ACCESS_KEY_ID\"'\",\n            \"secretAccessKey\": \"'\"$STORJ_SECRET_ACCESS_KEY\"'\"\n         },\n        \"bucket\": \"livepeer\",\n        \"path\": \"/global-upload.mp4\"\n    },\n    \"storage\": {\n        \"type\": \"s3\",\n        \"endpoint\": \"https://gateway.storjshare.io\",\n        \"credentials\": {\n            \"accessKeyId\": \"'\"$STORJ_ACCESS_KEY_ID\"'\",\n            \"secretAccessKey\": \"'\"$STORJ_SECRET_ACCESS_KEY\"'\"\n        },\n        \"bucket\": \"livepeer\"\n    },\n    \"outputs\": {\n        \"hls\": {\n            \"path\": \"/resized/hls\"\n        }\n    },\n    \"profiles\": [\n    {\n        \"name\": \"480p0\",\n        \"fps\": 24000,\n        \"fpsDen\": 1001,\n        \"bitrate\": 1600000,\n        \"width\": 854,\n        \"height\": 480,\n        \"gop\": \"2.0\",\n        \"profile\": \"H264High\"\n    },\n    {\n        \"name\": \"720p0\",\n        \"fps\": 0,\n        \"bitrate\": 3000000,\n        \"width\": 1280,\n        \"height\": 720,\n        \"gop\": \"2.0\",\n        \"profile\": \"H264ConstrainedHigh\"\n    }\n]'\n```\n\n----------------------------------------\n\nTITLE: Downloading Files from Storj\nDESCRIPTION: Commands to download files from a Storj bucket using both rclone and AWS CLI\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/getting-started/page.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrclone copy storj:my-bucket/ ~/Downloads/storj-tree-2.png\n```\n\nLANGUAGE: shell\nCODE:\n```\naws s3 --endpoint-url=https://gateway.storjshare.io cp s3://my-bucket/ ~/Downloads/storj-tree-2.png\n```\n\n----------------------------------------\n\nTITLE: Running Gateway ST as Static Website Host on Windows\nDESCRIPTION: Command to run the Gateway with website hosting capability enabled on Windows systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n./gateway run --access 14aV.... --website\n```\n\n----------------------------------------\n\nTITLE: Default Storagenode Configuration Template\nDESCRIPTION: Default YAML configuration template for a Storj storage node. This includes essential parameters such as identity paths, network addresses, operator information, and storage allocation settings.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/running-node-via-pia/page.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# path to the certificate chain for this identity\nidentity.cert-path: \"identity/identity.cert\"\n# path to the private key for this identity\nidentity.key-path: \"identity/identity.key\"\n# the public address of the node, useful for nodes behind NAT\ncontact.external-address: \"\"\n# operator email address\noperator.email: \"\"\n# operator wallet address\noperator.wallet: \"\"\n# the minimum log level to log\nlog.level: info\n# address to listen on\nserver.address: \":28967\"\n# total allocated disk space in bytes\nstorage.allocated-disk-space: 1.0 TB\n```\n\n----------------------------------------\n\nTITLE: Syncing Files to Storj using Rclone Move\nDESCRIPTION: Command to move media files from a local directory to a Storj bucket with optimized transfer settings. Includes parameters for chunk size, transfer concurrency, and directory cleanup.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/plex/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nrclone move -P D:\\shows\\ Storj:media/shows/ --delete-empty-src-dirs --fast-list --drive-chunk-size=64M --max-backlog=999999 --transfers=8 --checkers=4 --no-traverse\n```\n\n----------------------------------------\n\nTITLE: Creating Unrestricted Access Grant in Storj CLI\nDESCRIPTION: Creates an unrestricted access grant for a bucket with read/write permissions.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/concepts/multi-tenant-data/multi-tenant-access-management/page.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuplink share sj://<BUCKET>/ --readonly=false\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CLI for Optimal Multipart Upload Threshold on Storj\nDESCRIPTION: This command sets the default multipart upload threshold to 64MB in the AWS CLI configuration, which is the recommended size for optimal performance and cost efficiency when using Storj storage.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/s3/multipart-upload/multipart-part-size/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws configure set default.s3.multipart_threshold 64MB\n```\n\n----------------------------------------\n\nTITLE: Removing Bucket after Clearing Object Versions (PowerShell)\nDESCRIPTION: This PowerShell version of the command removes a Storj bucket after clearing all object versions. It should be used after removing all object versions from the bucket.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/delete-buckets/page.md#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n./uplink rb --force sj://locked-bucket\n```\n\n----------------------------------------\n\nTITLE: Example of Mounting Object Mount Fusion Filesystem\nDESCRIPTION: This is an example command demonstrating how to mount an Object Mount Fusion filesystem using specific paths for attached storage, object storage, and the mount location.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncuno mount --fusion /dev/sdf/fusion-store --root s3://bucket/fusion-store $HOME/my-fusion-filesystem\n```\n\n----------------------------------------\n\nTITLE: Initializing LucidLink Filespace via Command Line with Storj\nDESCRIPTION: This command initializes a LucidLink Filespace using Storj as the storage provider. It requires specifying the Filespace domain, root password, Storj endpoint, region, access key, secret key, bucket name, and provider.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/lucidlink/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nlucid init-s3 --fs <filespace.domain> --password <rootpassword> --https --endpoint storage.googleapis.com --region <region> --access-key <accesskey> --secret-key <secretkey> --bucket-name <bucket> --provider <provider>\n```\n\n----------------------------------------\n\nTITLE: Testing File Operations with Rucio\nDESCRIPTION: Commands to test uploading and downloading a file using the configured Rucio-Storj integration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rucio/page.md#2025-04-16_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nrucio upload --rse STORJ --scope archive tools/test.file.1000\nrucio download archive:test.file.1000\n```\n\n----------------------------------------\n\nTITLE: Deleting an Object from S3-compatible Storage Bucket with Object Mount\nDESCRIPTION: Removes a file from an S3-compatible storage bucket using Object Mount. This command deletes 'helloworld.txt' from 'bucket1'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\nrm s3://bucket1/helloworld.txt\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Uplink CLI for Linux ARM64\nDESCRIPTION: This snippet shows the process of downloading and installing the Uplink CLI binary for Linux ARM64 systems using curl. It downloads the zip file, extracts it, and installs the binary to /usr/local/bin.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://github.com/storj/storj/releases/latest/download/uplink_linux_arm64.zip -o uplink_linux_arm64.zip\nunzip -o uplink_linux_arm64.zip\nsudo install uplink /usr/local/bin/uplink\n```\n\n----------------------------------------\n\nTITLE: Using Access Inspect Command in Uplink CLI on Linux\nDESCRIPTION: Command syntax for inspecting a Storj access grant using Uplink CLI on Linux systems. The command takes an access grant identifier as a parameter and optionally accepts a help flag.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-inspect-command/page.md#2025-04-16_snippet_1\n\nLANGUAGE: linux\nCODE:\n```\nuplink access inspect [ACCESS-GRANT] [flags]\n```\n\n----------------------------------------\n\nTITLE: Importing Access Grant from Direct Input\nDESCRIPTION: Commands to import an access grant named 'cheesecake' from direct input string across different operating systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/sharing-your-first-object/import-access/page.md#2025-04-16_snippet_1\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access import cheesecake 14dfgh....qr\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access import cheesecake 14dfgh....qr\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access import cheesecake 14dfgh....qr\n```\n\n----------------------------------------\n\nTITLE: Defining Ansible Inventory for Storage Nodes\nDESCRIPTION: This INI file defines the inventory of hosts where the Ansible playbook will be executed. It lists the IP addresses or hostnames of the target machines under the 'storagenode' group.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/commercial-node/setup/ansible/page.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[storagenode]\n192.168.1.5\n192.168.1.6\n```\n\n----------------------------------------\n\nTITLE: Creating Minio Environment Variables File for Docker\nDESCRIPTION: Example of an environment variables file for Docker to configure Minio caching with Gateway ST.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_26\n\nLANGUAGE: text\nCODE:\n```\nMINIO_CACHE=\"on\"\nMINIO_CACHE_DRIVES=\"/mnt/drive1,/mnt/drive2,/mnt/cache{1...3}\"\nMINIO_CACHE_EXCLUDE=\"*.pdf,mybucket/*\"\nMINIO_CACHE_QUOTA=80\nMINIO_CACHE_AFTER=3\nMINIO_CACHE_WATERMARK_LOW=70\nMINIO_CACHE_WATERMARK_HIGH=90\n```\n\n----------------------------------------\n\nTITLE: Sharing Bucket for Website Hosting with Uplink CLI (Windows)\nDESCRIPTION: Command to share a bucket or object prefix for website hosting using Uplink CLI on Windows. It generates DNS entries and optionally includes TLS configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/static-site-hosting/page.md#2025-04-16_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n./uplink.exe share --dns <hostname> sj://<bucket>/<prefix> --tls --not-after=none\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Storage Credentials\nDESCRIPTION: Commands to configure Azure Storage access using account name and access key environment variables.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/credentials/page.md#2025-04-16_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nexport AZURE_STORAGE_ACCOUNT=\"<account-name>\"\nexport AZURE_STORAGE_ACCESS_KEY=\"<account-key>\"\n```\n\n----------------------------------------\n\nTITLE: Purging Non-Empty Bucket with rclone\nDESCRIPTION: This command uses rclone to remove a non-empty bucket from Storj, even if the encryption phrase is lost. It requires rclone to be installed and configured with Storj credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/delete-buckets/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrclone purge storj:my-bucket\n```\n\n----------------------------------------\n\nTITLE: Generating LINKSHARINGKEY using Uplink CLI\nDESCRIPTION: Command to create a public share link for a Storj bucket using uplink CLI. The command generates a read-only share that disallows listing and has no expiration date.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/public-buckets/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuplink share --url --readonly --disallow-lists --not-after=none sj://BUCKET\n```\n\n----------------------------------------\n\nTITLE: Removing Empty Bucket with rclone\nDESCRIPTION: This command uses rclone to remove an empty bucket from Storj. It requires rclone to be installed and configured with Storj credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/delete-buckets/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrclone rmdir storj:my-bucket\n```\n\n----------------------------------------\n\nTITLE: Setting Object TTL with AWS CLI in Storj\nDESCRIPTION: These commands use AWS CLI to copy a file to a Storj bucket with a TTL specified either as relative time (+5m) or as an absolute RFC3339 date.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/object-lifecycles/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# terminal\naws s3 --endpoint-url https://gateway.storjshare.io cp storj-tree.png s3://my-bucket --metadata \"Object-Expires=+5m\"\n# terminal\naws s3 --endpoint-url https://gateway.storjshare.io cp storj-tree.png s3://my-bucket --metadata Object-Expires=2022-05-19T00:10:55Z\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway ST with Access Grant\nDESCRIPTION: These commands configure Gateway ST using an access grant for different platforms. The access grant is used to authenticate and authorize access to Storj network.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./gateway setup --access 14aV.... --non-interactive\n```\n\nLANGUAGE: bash\nCODE:\n```\ngateway setup --access 14aV.... --non-interactive\n```\n\nLANGUAGE: bash\nCODE:\n```\ngateway setup --access 14aV.... --non-interactive\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\ndocker run -it --rm --mount type=bind,source=/path/to/gateway-config-dir/,destination=/root/.local/share/storj/gateway/ --name gateway storjlabs/gateway setup --access 14aV.... --non-interactive\n```\n\n----------------------------------------\n\nTITLE: Setting Default Object Lock Configuration using AWS CLI\nDESCRIPTION: Configures a default Object Lock retention policy for a bucket using AWS CLI. This command sets a 30-day governance mode retention period that will automatically apply to all new objects uploaded to the bucket.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/object-lock/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\naws s3api put-object-lock-configuration \\\n  --bucket my-object-lock-bucket \\\n  --object-lock-configuration \"ObjectLockEnabled=Enabled,Rule={DefaultRetention={Mode=GOVERNANCE,Days=30}}\" \\\n  --endpoint-url https://gateway.storjshare.io\n```\n\n----------------------------------------\n\nTITLE: Creating a Pod with Generic Inline Volume\nDESCRIPTION: YAML configuration for a Pod that creates and mounts an ephemeral inline volume using the StorageClass, without requiring a separate PersistentVolumeClaim.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: consumer-pod-dyn-inline\nspec:\n  containers:\n    - name: cunofs-app-inline\n      image: centos\n      command: [\"/bin/sh\"]\n      args: [\"-c\", \"echo 'Hello from the container, inline volume!' >> /data/generic-inline-k8s_$(date -u).txt; tail -f /dev/null\"]\n      volumeMounts:\n        - name: inline-cuno-storage\n          mountPath: /data\n  volumes:\n    - name: inline-cuno-storage\n      ephemeral:\n        volumeClaimTemplate:\n          metadata:\n            labels:\n              type: my-inline-volume\n          spec:\n            accessModes: [ \"ReadWriteOncePod\" ]\n            storageClassName: cunofs-storageclass # StorageClass metadata.name\n            resources:\n              requests:\n                storage: 16Ei # ignored but required\n```\n\n----------------------------------------\n\nTITLE: Generated DNS Zone File for Static Website Hosting\nDESCRIPTION: Example of a generated DNS zone file containing CNAME and TXT records for configuring a static website hosted on Storj. Includes placeholders for domain, bucket, and access key.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/static-site-hosting/page.md#2025-04-16_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n$ORIGIN example.com.\n$TTL    3600\n<hostname>    \tIN\tCNAME\tlink.storjshare.io.\ntxt-<hostname> \tIN\tTXT  \tstorj-root:<bucket>/<prefix>\ntxt-<hostname> \tIN\tTXT  \tstorj-access:<access key>\ntxt-<hostname> \tIN\tTXT  \tstorj-tls:true\n```\n\n----------------------------------------\n\nTITLE: Recursively Copying Files to Storj in Linux\nDESCRIPTION: Example of recursively copying all files from a local folder to a Storj bucket using the --recursive flag in Linux environment.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nuplink cp --recursive ~/receipts sj://cakes/\n```\n\n----------------------------------------\n\nTITLE: Locating rclone configuration file\nDESCRIPTION: Command to find the location of the rclone configuration file on your system.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/migrate/backblaze/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrclone config file\n```\n\n----------------------------------------\n\nTITLE: Defining a PersistentVolume for Static Provisioning\nDESCRIPTION: YAML configuration for creating a PersistentVolume (PV) that uses the Object Mount CSI Driver with various mount options and bucket configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: cunofs-pv\nspec:\n  capacity:\n    storage: 16Ei # ignored but required\n  accessModes:\n    - ReadWriteOncePod # Currently only support \"ReadWriteOncePod\"\n  csi:\n    driver: cunofs.csi.com # required\n    volumeHandle: cunofs-csi-driver-volume\n    volumeAttributes:\n      root: \"/cuno/s3/bucket/subdirectory/other_subdirectory\" # optional\n      posix: \"true\" # optional\n      allow_root: \"false\" # optional\n      allow_other: \"true\" # optional\n      auto_restart: \"true\" # optional\n      readonly: \"true\" # optional\n```\n\n----------------------------------------\n\nTITLE: Installing Velero with Storj Plugin\nDESCRIPTION: Command to install Velero with the Storj plugin configuration. Requires an access grant and bucket name as parameters. The command sets up Velero to use Storj as the backup storage location.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/velero/page.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ velero install --provider tardigrade \\\n    --plugins storjlabs/velero-plugin:latest \\\n    --bucket $BUCKET \\\n    --backup-location-config accessGrant=$ACCESS \\\n    --no-secret\n```\n\n----------------------------------------\n\nTITLE: Executing Metadata Command in Storj Uplink CLI (Linux)\nDESCRIPTION: Command syntax for executing metadata-related operations using the Storj Uplink CLI on Linux. The command is followed by a specific subcommand.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/meta-command/page.md#2025-04-16_snippet_1\n\nLANGUAGE: linux\nCODE:\n```\nuplink meta [command]\n```\n\n----------------------------------------\n\nTITLE: Creating and Mounting Object Mount Fusion for S3-compatible Storage\nDESCRIPTION: Creates an Object Mount Fusion mount and mounts it to a specified directory using S3-compatible storage.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncuno fusion \"/mnt/fast/fusion-store\" \"s3://<bucket>/fusion-store\"\ncuno mount --root \"/mnt/fast/fusion-store\" \"$HOME/my-fusion-filesystem\"\n```\n\n----------------------------------------\n\nTITLE: Stopping Storj Storage Node Container (Shell)\nDESCRIPTION: Command to stop the running Storj storage node container with a timeout of 300 seconds. This is part of the manual update process.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/cli/software-updates/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker stop -t 300 storagenode\n```\n\n----------------------------------------\n\nTITLE: Example of 'access list' Command in Linux\nDESCRIPTION: Example showing how to execute the 'access list' command in Linux to display all available access grants and their satellites.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-list-command/page.md#2025-04-16_snippet_4\n\nLANGUAGE: linux\nCODE:\n```\nuplink access list\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in Storj using Rclone\nDESCRIPTION: Use 'ls' to list recursively all objects and 'lsf' to list non-recursively in a bucket or folder.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-s3/page.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrclone ls waterbear:mybucket\n```\n\nLANGUAGE: bash\nCODE:\n```\nrclone ls waterbear:mybucket/videos/\n```\n\nLANGUAGE: bash\nCODE:\n```\nrclone lsf waterbear:mybucket/videos/\n```\n\n----------------------------------------\n\nTITLE: Revoking an access grant in Linux\nDESCRIPTION: Example of revoking an access grant by its value in Linux. This command revokes the access permissions associated with the specified access grant value.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-revoke/page.md#2025-04-16_snippet_8\n\nLANGUAGE: linux\nCODE:\n```\nuplink access revoke 19hFrjmsi...\n```\n\n----------------------------------------\n\nTITLE: Writing an Object to AWS S3 Bucket with Object Mount\nDESCRIPTION: Creates a text file in an AWS S3 bucket using Object Mount. This command writes the text 'hello world' to a file named 'helloworld.txt' in 'bucket1'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\necho \"hello world\" > s3://bucket1/helloworld.txt\n```\n\n----------------------------------------\n\nTITLE: Displaying Generated S3 Gateway Credentials in Storj\nDESCRIPTION: After configuring Uplink CLI to disable encryption for object keys, the command outputs the S3-compatible gateway credentials that can be used in S3-compatible applications. These credentials enable lexicographically sorted object listings.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/object-listings/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n========== GATEWAY CREDENTIALS =================\nAccess Key ID: <redacted>\nSecret Key : <redacted>\nEndpoint : https://gateway.storjshare.io\n```\n\n----------------------------------------\n\nTITLE: Creating S3 User Credentials in Globus\nDESCRIPTION: Command to register S3 user credentials with the Globus storage gateway. Requires specifying the Globus user identity.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/globus/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nglobus-connect-server user-credentials s3-create --globus-identity user@example.org\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Commercial Storage Nodes in YAML\nDESCRIPTION: These YAML environment variables are required for Commercial Storage Nodes. They specify trusted sources and set a placeholder wallet address.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/commercial-node/setup/page.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nSTORJ_STORAGE2_TRUST_SOURCES=\"https://www.storj.io/trusted-satellites-soc2\"\nWALLET=\"0x0000000000000000000000000000000000000000\"\n```\n\n----------------------------------------\n\nTITLE: Creating Local Directory for S3-compatible Fusion Storage\nDESCRIPTION: Creates a directory on the attached storage device mounted at /mnt/fast to store local data for Fusion with S3-compatible storage.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmkdir \"/mnt/fast/fusion-store\"\n```\n\n----------------------------------------\n\nTITLE: Uploading Multiple Files with Rclone to Storj\nDESCRIPTION: This command shows how to upload multiple 1GB files simultaneously to Storj using Rclone. It sets the number of transfers to 4, upload concurrency to 16, and chunk size to 64MB for optimal performance.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/file-transfer-performance/page.md#2025-04-16_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nrclone copy --progress --transfers 4 --s3-upload-concurrency 16 --s3-chunk-size 64M 1gb.zip remote:bucket\n```\n\n----------------------------------------\n\nTITLE: AWS S3 CLI Configuration for Gateway Access\nDESCRIPTION: Commands to configure and test AWS S3 CLI with the local gateway.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/mongodb/page.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ kubectl port-forward tardigrade-gateway-tardigrade-gateway-75cfdb889-nz2n4 7777:7777 &\n$ export AWS_ACCESS_KEY_ID=XXX\n$ export AWS_SECRET_ACCESS_KEY=XXX\n$ aws --endpoint-url http://localhost:7777 s3 ls test\n```\n\n----------------------------------------\n\nTITLE: Configuring User Agent in Uplink CLI Configuration File (INI)\nDESCRIPTION: This snippet shows how to set the User Agent in the legacy uplink configuration INI file. The User Agent is crucial for partner value attribution in Storj.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/partner-program-tools/page.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nclient.user-agent = MyCompany\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Backup with Velero\nDESCRIPTION: Command to create a new backup of the Kubernetes cluster using Velero. Requires specifying a backup name.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/velero/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ velero backup create $BACKUP_NAME\n```\n\n----------------------------------------\n\nTITLE: Creating Google Cloud Storage Service Account Credentials JSON Format\nDESCRIPTION: Example JSON format for Google Cloud Storage service account credentials. This format is required for Object Mount to authenticate with Google Cloud Storage buckets.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"type\": \"service_account\",\n   \"project_id\": \"PROJECT_ID\",\n   \"private_key_id\": \"KEY_ID\",\n   \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nPRIVATE_KEY\\n-----END PRIVATE KEY-----\\n\",\n   \"client_email\": \"SERVICE_ACCOUNT_EMAIL\",\n   \"client_id\": \"CLIENT_ID\",\n   \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n   \"token_uri\": \"https://accounts.google.com/o/oauth2/token\",\n   \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n   \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/SERVICE_ACCOUNT_EMAIL\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Storj using S3 Protocol in Python\nDESCRIPTION: This Python code demonstrates how to read data from a Storj bucket using the S3 protocol with boto3 library. It initializes an S3 client with Storj credentials and endpoint, then reads a CSV file into a pandas DataFrame.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/use-storj-dcs-from-cloud-native-environments-using-sidecar-pattern/page.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nimport pandas as pd\nfrom io import StringIO\n\nsession = boto3.session.Session()\ns3_client = session.client(\n   's3',\n   aws_access_key_id=\"...\",\n   aws_secret_access_key=\"...\",\n   endpoint_url=\"https://gateway.eu1.storjshare.io\")\n\nresponse = client.get_object(Bucket=\"sidecar\", Key=\"data.csv\")\ncsv = response[\"Body\"].read().decode('utf-8')\ndf = pd.read_csv(StringIO(csv))\n\ndf\n```\n\n----------------------------------------\n\nTITLE: Removing All Objects from Bucket with rclone\nDESCRIPTION: This command uses rclone to remove all objects from a Storj bucket when the encryption phrase is known. It requires rclone to be installed and configured with Storj credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/delete-buckets/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrclone delete --rmdirs storj:my-bucket\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Storage with Direct Interception in Shell\nDESCRIPTION: These commands demonstrate how to list contents of object storage buckets using path or URI formats in the Object Mount CLI shell.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/enabling-object-mount/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n(cuno)$ ls s3://<bucket>/<path>\n(cuno)$ ls /cuno/s3/<bucket>/<path>\n```\n\n----------------------------------------\n\nTITLE: Server-Side Copy Between Buckets in Windows\nDESCRIPTION: Example of copying a file between two Storj buckets in Windows (server-side copy). This operation doesn't count against egress limits as the data is not downloaded.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_21\n\nLANGUAGE: powershell\nCODE:\n```\n./uplink.exe cp sj://cakes/cheesecake.jpg sj://new-recipes/cakes/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Running Storj Storage Node (Windows)\nDESCRIPTION: This command runs the Storj Storage Node on Windows. It sets up port forwarding, environment variables for wallet, email, address, and storage, and mounts the identity and storage directories.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/cli/storage-node/page.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --restart unless-stopped --stop-timeout 300 -p 28967:28967/tcp -p 28967:28967/udp -p 127.0.0.1:14002:14002 -e WALLET=\"0xXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" -e EMAIL=\"user@example.com\" -e ADDRESS=\"domain.ddns.net:28967\" -e STORAGE=\"2TB\" --mount type=bind,source=\"<identity-dir>\",destination=/app/identity --mount type=bind,source=\"<storage-dir>\",destination=/app/config --name storagenode storjlabs/storagenode:latest\n```\n\n----------------------------------------\n\nTITLE: Listing S3 Buckets with Custom Cloud Root\nDESCRIPTION: Example of how to list configured S3 buckets after setting a custom cloudroot path. This demonstrates accessing cloud storage through the custom path.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/configuration/page.md#2025-04-16_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nls /my-object-storage/s3/<bucket>\n```\n\n----------------------------------------\n\nTITLE: Direct Upload Form Configuration\nDESCRIPTION: ERB template for direct upload form field\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/rails-activestorage/page.md#2025-04-16_snippet_14\n\nLANGUAGE: erb\nCODE:\n```\n<div>\n  <%= form.label :main_image %> <%= form.file_field :main_image, direct_upload:\n  true %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Access Grants to Gateway ST Configuration\nDESCRIPTION: Example of how to format multiple access grants in the config.yaml file, showing how to set a default access and named accesses.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_11\n\nLANGUAGE: text\nCODE:\n```\naccess: 14aV.... # default Access\naccesses.site: 26NBm..... # the Access with name \"site\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket with Uplink CLI on macOS\nDESCRIPTION: Command to create a new bucket named 'cakes' using the Uplink CLI on macOS. The command uses the 'mb' (make bucket) operation with the Storj protocol prefix 'sj://'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/uplink-mb-command/page.md#2025-04-16_snippet_2\n\nLANGUAGE: macos\nCODE:\n```\nuplink mb [flags] sj://<BUCKET>\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink mb sj://cakes\n```\n\n----------------------------------------\n\nTITLE: HashBackup Backup Command\nDESCRIPTION: Command to execute a backup operation using HashBackup, which creates both local and remote copies in the configured Storj bucket.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/hashbackup/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhb backup -c backup data\n```\n\n----------------------------------------\n\nTITLE: Importing S3 Client in Node.js\nDESCRIPTION: This code imports the S3 client from the AWS SDK, which is necessary for interacting with Storj using the S3-compatible API.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/aws/nodejs/page.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport S3 from \"aws-sdk/clients/s3\";\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials via Command Line\nDESCRIPTION: Commands to configure AWS credentials for Storj S3 access using the aws configure command. Sets up access key, secret key, and region.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/dataverse/page.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\naws configure\n  AWS Access Key ID [None]: <Access Key>\n  AWS Secret Access Key [None]: <Secret Key>\n  Default region name [None]: us-1\n  Default output format [None]:\n```\n\n----------------------------------------\n\nTITLE: Preferring Synchronous API in Go\nDESCRIPTION: Comparison demonstrating how a synchronous API is generally preferable to an asynchronous one. The first example shows separate start, stop and wait calls, while the second shows a simpler synchronous Run method.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nserver.Start(ctx)\nserver.Stop()\nserver.Wait()\n```\n\nLANGUAGE: go\nCODE:\n```\nserver.Run(ctx)\n```\n\n----------------------------------------\n\nTITLE: Setting Storj as default S3 API endpoint\nDESCRIPTION: This command sets the Storj gateway URL as the default S3 API endpoint in the AWS CLI configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/aws/aws-cli-endpoint/page.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\naws configure set default.s3api.endpoint_url https://gateway.storjshare.io\n```\n\n----------------------------------------\n\nTITLE: Verifying Mount Configuration\nDESCRIPTION: Commands to verify the mount configuration and check if the bucket is properly mounted.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/s3fs/page.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nsudo mount -a\ndf -HT\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Cloud Root Directory in Object Mount\nDESCRIPTION: Example of configuring a custom directory path prefix to replace the default /cuno path using the cloudroot option. This determines where cloud storage is mounted in the file system.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/configuration/page.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nexport CUNO_OPTIONS='+cloudroot=my-object-storage'\n```\n\n----------------------------------------\n\nTITLE: Uploading a File with Expiration Date in Linux\nDESCRIPTION: Example of uploading a file with an expiration date set using the --expires flag in Linux. The file will be automatically removed after the specified date.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nuplink cp  --expires 2021-12-31T13:00:00+02:00 cheesecake.jpg sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Creating Storj Bucket with rclone in Text\nDESCRIPTION: rclone command to create a new bucket named 'tesla-m3-cam' in Storj DCS for storing Tesla dashcam clips.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/tesla-sentry-mode-teslausb/page.md#2025-04-16_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nrclone mkdir storj-dcs-us1-gateway:tesla-m3-cam\n```\n\n----------------------------------------\n\nTITLE: Running Gateway ST with Specific Access Grant on Windows\nDESCRIPTION: Command to run the Gateway with a specified access grant on Windows systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n./gateway run --access 14aV....\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resource Tracking Tag in Go\nDESCRIPTION: A Tag struct that keeps track of open resources using runtime.Callers to capture the call stack. It includes methods to create new tags and format the call stack for debugging resource leaks.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-and-tracking-resource-leaks-in-go/page.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Tag is used to keep track of things we consider open.\ntype Tag struct {\n\towner  *Tracker // we'll explain this below\n\tcaller [5]uintptr\n}\n\n// newTag creates a new tracking tag.\nfunc newTag(owner *Tracker, skip int) *Tag {\n\ttag := &Tag{owner: owner}\n\truntime.Callers(skip+1, tag.caller[:])\n\treturn tag\n}\n\n// String converts a caller frames to a string.\nfunc (tag *Tag) String() string {\n\tvar s strings.Builder\n\tframes := runtime.CallersFrames(tag.caller[:])\n\tfor {\n\t\tframe, more := frames.Next()\n\t\tif strings.Contains(frame.File, \"runtime/\") {\n\t\t\tbreak\n\t\t}\n\t\tfmt.Fprintf(&s, \"%s\\n\", frame.Function)\n\t\tfmt.Fprintf(&s, \"\\t%s:%d\\n\", frame.File, frame.Line)\n\t\tif !more {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn s.String()\n}\n\n// Close marks the tag as being properly deallocated.\nfunc (tag *Tag) Close() {\n\ttag.owner.Remove(tag)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bucket in Storj using Rclone\nDESCRIPTION: Command to create a new bucket in Storj using Rclone before initializing Restic\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/restic/page.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ rclone mkdir storj:bucket\n```\n\n----------------------------------------\n\nTITLE: Deleting an Encrypted Object\nDESCRIPTION: Example of deleting an encrypted object using its encrypted path. The '--encrypted' flag is used along with the 'rm' command to specify that the path is encrypted.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/rm-command/page.md#2025-04-16_snippet_3\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe rm --encrypted sj://cakes/Ao8rmi2hw5v8_SS2GRokJwqkzQ2j9wXRH2Ll-1owEGPwIWMyu8tj5YCCig==\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink rm --encrypted sj://cakes/Ao8rmi2hw5v8_SS2GRokJwqkzQ2j9wXRH2Ll-1owEGPwIWMyu8tj5YCCig==\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink rm --encrypted sj://cakes/Ao8rmi2hw5v8_SS2GRokJwqkzQ2j9wXRH2Ll-1owEGPwIWMyu8tj5YCCig==\n```\n\n----------------------------------------\n\nTITLE: Example of Access Inspect Command with Direct Parameter on macOS\nDESCRIPTION: Example of inspecting an access grant named 'cheesecake' using Uplink CLI on macOS systems. This demonstrates the direct parameter approach.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-inspect-command/page.md#2025-04-16_snippet_5\n\nLANGUAGE: macos\nCODE:\n```\nuplink access inspect cheesecake\n```\n\n----------------------------------------\n\nTITLE: Locking an Existing Object in Storj using AWS CLI\nDESCRIPTION: This snippet shows how to apply object locking to an existing object in a Storj bucket. It sets the retention mode to COMPLIANCE and specifies a retention date using the AWS CLI S3 API.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/objects/page.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\naws s3api put-object-retention \\\n  --bucket my-object-lock-bucket \\\n  --key my-file.txt \\\n  --version-id <version-id> \\\n  --retention \"Mode=COMPLIANCE,RetainUntilDate=2025-06-01T00:00:00Z\" \\\n  --endpoint-url https://gateway.storjshare.io\n```\n\n----------------------------------------\n\nTITLE: Object Mount FUSE Mount Command\nDESCRIPTION: Basic command structure for mounting Object Mount using FUSE with configurable options\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/basic/page.md#2025-04-16_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ncuno [cuno-options] mount [mount-options] <mount-path>\n```\n\n----------------------------------------\n\nTITLE: Creating Linksharing Key for Public Access to Storj Bucket\nDESCRIPTION: This command generates a linksharing key for public read-only access to the Storj bucket. It disallows listing and has no expiration date.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/pixelfed/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuplink share --url --readonly --disallow-lists --not-after=none sj://BUCKET\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Container Status\nDESCRIPTION: This command lists all Docker containers and their status, which can be used to verify if the Storj Storage Node container is running correctly.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/cli/storage-node/page.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps -a\n```\n\n----------------------------------------\n\nTITLE: Running rsync with Object Storage Optimization Options\nDESCRIPTION: Command showing the recommended rsync options (--inplace -W) for efficient operation with object storage through Object Mount.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/tips/page.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n--inplace -W\n```\n\n----------------------------------------\n\nTITLE: Running Storj Storagenode Docker Container for Production\nDESCRIPTION: Complete Docker run command for operating a Storj storagenode in production mode. This configures ports, environment variables for wallet, email, address and storage allocation, memory limits, log rotation settings, and mounts for identity and storage directories.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/install-storagenode-on-raspberry-pi3-or-higher-version/page.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --restart always --stop-timeout 300 \\\n-p 28967:28967/tcp \\\n-p 28967:28967/udp \\\n-p 127.0.0.1:14002:14002 \\\n-e WALLET=\"0x0000...\" \\\n-e EMAIL=\"your@email.com\" \\\n-e ADDRESS=\"externaladdress:28967\" \\\n-e STORAGE=\"2TB\" \\\n--memory=800m \\\n--log-opt max-size=50m \\\n--log-opt max-file=10 \\\n--mount type=bind,source=/home/pi/.local/share/storj/identity/storagenode,destination=/app/identity \\\n--mount type=bind,source=/mnt/storj/storagenode,destination=/app/config \\\n--name storagenode storjlabs/storagenode:latest\n```\n\n----------------------------------------\n\nTITLE: Model Configuration\nDESCRIPTION: Ruby model configuration for ActiveStorage attachment\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/rails-activestorage/page.md#2025-04-16_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Name < ApplicationRecord\n  has_one_attached :main_image\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Storj Network\nDESCRIPTION: Sets up and runs a local Storj test network with multiple components including Satellite, Uplink, S3 gateway, and storage nodes.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-windows/page.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nsetx path \"C:\\msys64\\mingw64\\bin;C:\\msys64\\usr\\bin;%USERPROFILE%\\go\\bin\"\n\n# Restart terminal, then run:\nstorj-sim network setup --postgres=postgres://postgres@localhost/teststorj?sslmode=disable\n\nstorj-sim network run\n```\n\n----------------------------------------\n\nTITLE: Displaying Rclone Config File Location\nDESCRIPTION: Command to show the location of rclone configuration file on the system\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/migrate/wasabi/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrclone config file\n```\n\n----------------------------------------\n\nTITLE: Configuring Acronis Backup Gateway with Storj S3 Credentials\nDESCRIPTION: Steps to set up Acronis Backup Gateway using Storj as the storage destination. This includes selecting the storage type, entering Storj S3 endpoint and credentials, and creating the backup storage configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/acronis/page.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n6.  Configure Public cloud with the following in their respective fields:\n\n    - **Object Storage type**: Select AuthV2 compatible (S3).\n\n    - **Endpoint URL**: https://gateway.storjshare.io\n\n    - **Access Key**: Enter the access key from the S3 credentials you generated in Storj.\n\n    - **Secret Key**: Enter the secret key from the S3 credentials you generated in Storj.\n```\n\n----------------------------------------\n\nTITLE: Listing Files in Storj Volume using Splunk Command\nDESCRIPTION: This Splunk command lists files in the Storj volume to verify connectivity and proper file transfer.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/splunk/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./opt/splunk/bin/splunk cmd splunkd rfs -- ls --starts-with volume:Storj\n```\n\n----------------------------------------\n\nTITLE: Listing Encrypted Objects\nDESCRIPTION: Command to list encrypted objects in a bucket, which is necessary to obtain the encrypted path for deleting encrypted objects. The '--encrypted' flag is used to display encrypted paths.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/rm-command/page.md#2025-04-16_snippet_2\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe ls sj://cakes --encrypted\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink ls sj://cakes --encrypted\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink ls sj://cakes --encrypted\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Credential Format - Style 1\nDESCRIPTION: First format option for AWS S3 credentials file showing access key ID, secret access key and optional region configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/credentials/page.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\naws_access_key_id     = <access_key_id>\naws_secret_access_key = <secret_access_key>\nregion                = <region> [optional]\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in a Google Cloud Storage Bucket with Object Mount\nDESCRIPTION: Lists all objects within a specified bucket in Google Cloud Storage using Object Mount. This command shows the contents of 'bucket1'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nls gs://bucket1/\n```\n\n----------------------------------------\n\nTITLE: Activating Object Mount License on Linux\nDESCRIPTION: Command to activate the Object Mount license on Linux systems through an interactive process. This command starts the activation workflow where users can enter their license credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/download-install/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# terminal\ncuno creds activate\n```\n\n----------------------------------------\n\nTITLE: Setting up Storj Storage Node (Windows)\nDESCRIPTION: This command sets up the Storj Storage Node on Windows. It requires specifying the identity and storage directories, and should only be run once during initial setup.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/cli/storage-node/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -e SETUP=\"true\" --mount type=bind,source=\"<identity-dir>\",destination=/app/identity --mount type=bind,source=\"<storage-dir>\",destination=/app/config --name storagenode storjlabs/storagenode:latest\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects in Storj using Rclone\nDESCRIPTION: Use 'deletefile' to delete a single object and 'delete' to delete all objects in a folder.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-s3/page.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrclone deletefile waterbear:mybucket/videos/myvideo.mp4\n```\n\nLANGUAGE: bash\nCODE:\n```\nrclone delete waterbear:mybucket/videos/\n```\n\n----------------------------------------\n\nTITLE: Writing an Object to Azure Storage Container with Object Mount\nDESCRIPTION: Creates a text file in an Azure Storage container using Object Mount. This command writes the text 'hello world' to a file named 'helloworld.txt' in 'bucket1'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\necho \"hello world\" > az://your-azure-storage-account/bucket1/helloworld.txt\n```\n\n----------------------------------------\n\nTITLE: Python Access CLI Commands for Credential Management\nDESCRIPTION: Examples of using the Python access CLI tool for registering and restricting access credentials\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/concepts/multi-tenant-data/multi-tenant-access-management/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naccess register --access <ACCESS_GRANT>\n```\n\nLANGUAGE: bash\nCODE:\n```\naccess register --access <ACCESS_GRANT> --public=true\n```\n\nLANGUAGE: bash\nCODE:\n```\naccess restrict --access <ACCESS_GRANT> --readonly true\n```\n\nLANGUAGE: bash\nCODE:\n```\naccess restrict --access <ACCESS_GRANT> --readonly=false\n```\n\nLANGUAGE: bash\nCODE:\n```\naccess restrict --access <ACCESS_GRANT> --prefix sj://<BUCKET>/<PATH>/\n```\n\nLANGUAGE: bash\nCODE:\n```\nuplink access restrict --access <ACCESS_GRANT> --disallow-deletes true\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Storj and Hugging Face\nDESCRIPTION: Installs the necessary Python packages s3fs and datasets for working with Storj and Hugging Face.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/hugging-face/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install -qqU s3fs datasets\n```\n\n----------------------------------------\n\nTITLE: Configuring Storj Storage Node with DDNS and PIA Port\nDESCRIPTION: Example configuration for a Storj storage node using a DDNS hostname from NoIP and a port forwarded by Private Internet Access VPN. This setup assumes a specific DDNS hostname and PIA port, which should be replaced with the user's actual values.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/running-node-via-pia/page.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# 6. Storagenode configuration with DDNS and PIA port\n\nWe will now configure the storagenode software and add our NoIP hostname and the TCP port given to us by PIA.\n\nOur assumptions for this example:\n\n* your DDNS hostname is `mystoragenode.ddns.net`\n* your PIA port is `59538`\n\nReplace the above parameters with your own, the DDNS and PIA port you configured above.\n```\n\n----------------------------------------\n\nTITLE: Creating a Storj Bucket using Uplink CLI\nDESCRIPTION: This command creates a new bucket in Storj using the Uplink CLI. It's a prerequisite step before uploading content and setting up a custom domain.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/static-site-hosting/custom-domains/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuplink mb sj://my-website\n```\n\n----------------------------------------\n\nTITLE: Creating a Storj Bucket with AWS CLI\nDESCRIPTION: This snippet shows how to create a Storj bucket using the AWS CLI with a custom endpoint URL. It requires the AWS CLI to be installed and configured.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/create-buckets/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\naws s3 --endpoint-url=https://gateway.storjshare.io mb s3://my-bucket\n```\n\n----------------------------------------\n\nTITLE: Enabling POSIX Compatibility Mode via Environment Variable\nDESCRIPTION: Environment variable setting to enable POSIX compatibility mode for the current session. This provides per-session control over POSIX compatibility when bucket-level settings cannot be applied.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuration-modes/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport CUNO_POSIX=1\n```\n\n----------------------------------------\n\nTITLE: Creating a Storj Bucket with uplink\nDESCRIPTION: This snippet illustrates how to create a Storj bucket using the uplink command-line tool. It requires uplink to be installed and configured for use with Storj.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/create-buckets/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuplink mb sj://my-bucket\n```\n\n----------------------------------------\n\nTITLE: Setting File Permissions for AWS S3 Credentials\nDESCRIPTION: Command to change file permissions to secure credentials file by making it readable only by the owner. This is important for security when storing sensitive AWS credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# terminal\nchmod 0600 \"<path to your credentials file>\"\n```\n\n----------------------------------------\n\nTITLE: Setting POSIX Mode on a Bucket with Cuno\nDESCRIPTION: This command uses the 'cuno creds setposix' command to enable POSIX file access mode on a specific S3 bucket. This setting will apply to all Object Mount installations accessing this bucket.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/enforced-posix-access/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# terminal\ncuno creds setposix s3://mybucket true\n```\n\n----------------------------------------\n\nTITLE: Uploading Docker Container Files to Storj\nDESCRIPTION: Bash commands for uploading container files to Storj, including manifest and blobs with proper metadata\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/docker/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#just to make /v2 work\ntouch index.html\nuplink cp index.html sj://registry/v2/index.html\n\n#upload manifest with custom content type\nuplink cp manifest.json sj://registry/v2/elek/herbsttag/manifests/latest --metadata '{\"Content-Type\":\"application/vnd.docker.distribution.manifest.v2+json\"}'\n\n#note: sha256: prefix is added to the filenames\nuplink cp 833c7a986ed965eec8fe864223920c366fb0a25dd23edd0bdd2a4428fd0ce1e2 sj://registry/v2/elek/herbsttag/blobs/sha256:833c7a986ed965eec8fe864223920c366fb0a25dd23edd0bdd2a4428fd0ce1e2\nuplink cp e2eb06d8af8218cfec8210147357a68b7e13f7c485b991c288c2d01dc228bb68 sj://registry/v2/elek/herbsttag/blobs/sha256:e2eb06d8af8218cfec8210147357a68b7e13f7c485b991c288c2d01dc228bb68\n\n#it's a good idea to support sha256 based pulls\nsha256sum manifest.json\n#output: be9eeb0e64046a25df3df2df0eb2577ea11a9e521733b6e10df37914cddc7bcb  manifest.json\nuplink cp manifest.json sj://registry/v2/elek/herbsttag/manifests/sha256:be9eeb0e64046a25df3df2df0eb2577ea11a9e521733b6e10df37914cddc7bcb --metadata '{\"Content-Type\":\"application/vnd.docker.distribution.manifest.v2+json\"}'\n```\n\n----------------------------------------\n\nTITLE: Sharing Bucket for Website Hosting with Uplink CLI (Linux)\nDESCRIPTION: Command to share a bucket or object prefix for website hosting using Uplink CLI on Linux. It generates DNS entries and optionally includes TLS configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/static-site-hosting/page.md#2025-04-16_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nuplink share --dns <hostname> sj://<bucket>/<prefix> --tls --not-after=none\n```\n\n----------------------------------------\n\nTITLE: Uploading a File with Parallelism in Windows\nDESCRIPTION: Example of uploading a file with parallelism to increase upload speed using the --parallelism flag in Windows. Beneficial for large files with sufficient bandwidth.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\n./uplink.exe cp --parallelism 10 cheesecake.jpg sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Uplink Setup Access Name Prompt\nDESCRIPTION: Command line prompt for entering an access name during the Uplink setup process. The default is 'main' if left blank.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/setup-command/page.md#2025-04-16_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nEnter name to import as [default: main]:\n```\n\n----------------------------------------\n\nTITLE: Example of Access Inspect Command with Flag Parameter on Linux\nDESCRIPTION: Alternative syntax for inspecting an access grant named 'cheesecake' using Uplink CLI on Linux systems. This demonstrates using the --access flag approach.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-inspect-command/page.md#2025-04-16_snippet_7\n\nLANGUAGE: linux\nCODE:\n```\nuplink access --access cheesecake inspect\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in an AWS S3 Bucket with Object Mount\nDESCRIPTION: Lists all objects within a specified bucket in AWS S3 using Object Mount. This command shows the contents of 'bucket1'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nls s3://bucket1/\n```\n\n----------------------------------------\n\nTITLE: Inspecting Access Grant in Storj\nDESCRIPTION: These commands use Uplink CLI to inspect an access grant and verify the MaxObjectTTL configuration, showing the caveat with max_object_ttl field in the macaroon.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/object-lifecycles/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./uplink.exe access inspect 1AW...V3B\n```\n\nLANGUAGE: shell\nCODE:\n```\nuplink access inspect 1AW...V3B\n```\n\nLANGUAGE: shell\nCODE:\n```\nuplink access inspect 1AW...V3B\n```\n\n----------------------------------------\n\nTITLE: Reading an Object from S3-compatible Storage Bucket with Object Mount\nDESCRIPTION: Displays the content of a file stored in an S3-compatible storage bucket using Object Mount. This command reads and outputs the content of 'helloworld.txt' from 'bucket1'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\ncat s3://bucket1/helloworld.txt\n```\n\n----------------------------------------\n\nTITLE: Running Gateway ST as Static Website Host using Docker\nDESCRIPTION: Docker command to run the Gateway with website hosting capability enabled.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_22\n\nLANGUAGE: text\nCODE:\n```\ndocker run -it --rm -p 127.0.0.1:7777:7777 --mount type=bind,source=/path/to/gateway-config-dir/,destination=/root/.local/share/storj/gateway/ --name gateway storjlabs/gateway run --access 14aV.... --website\n```\n\n----------------------------------------\n\nTITLE: Dumping SQLite3 Database Contents\nDESCRIPTION: This SQL script sets the output mode to INSERT, dumps the entire database content to a file, and exits the SQLite3 shell.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-fix-a-database-disk-image-is-malformed/page.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n.mode insert\n.output /storage/dump_all.sql\n.dump\n.exit\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Size of Objects in Storj using Rclone\nDESCRIPTION: Use the 'size' command to print the total size of objects in a bucket or folder.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-s3/page.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrclone size waterbear:mybucket/videos/\n```\n\n----------------------------------------\n\nTITLE: Downloading a File from Storj to Local Drive in Linux\nDESCRIPTION: Example of downloading a file (cheesecake.jpg) from a Storj bucket (cakes) to the local Downloads folder using Uplink CLI in Linux.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nuplink cp sj://cakes/cheesecake.jpg ~/Downloads/\n```\n\n----------------------------------------\n\nTITLE: Verifying Fastly Cache Headers with cURL\nDESCRIPTION: Command to check cache control headers for a Fastly-served domain using cURL, demonstrating the response headers when no cache control is specified.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/fastly/page.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ curl -I https://cdn.example.com\n\nAccept-Ranges: bytes\nContent-Length: 250\nContent-Type: application/xml\nServer: MinIO/DEVELOPMENT.GOGET\nVary: Origin\nDate: Wed, 20 Oct 2020 05:56:29 GMT\n```\n\n----------------------------------------\n\nTITLE: Configuring Storj RSE in Rucio\nDESCRIPTION: Commands to add and configure a Storj Remote Storage Element (RSE) in Rucio, including protocol setup and attribute configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rucio/page.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# replace YOUR_BUCKET_NAME with your storj bucket\nrucio-admin rse add STORJ\nrucio-admin rse add-protocol --hostname gateway.storjshare.io --scheme https --port 443 --prefix YOUR_BUCKET_NAME --impl rucio.rse.protocols.gfal.NoRename --domain-json '{\"wan\": {\"read\": 1, \"write\": 1, \"delete\": 1, \"third_party_copy_read\": 1, \"third_party_copy_write\": 1}, \"lan\": {\"read\": 1, \"write\": 1, \"delete\": 1}}' STORJ\nrucio-admin rse set-attribute --rse STORJ --key sign_url --value s3\nrucio-admin rse set-attribute --rse STORJ --key skip_upload_stat --value True\nrucio-admin rse set-attribute --rse STORJ --key verify_checksum --value False\nrucio-admin rse set-attribute --rse STORJ --key strict_copy --value True\n```\n\n----------------------------------------\n\nTITLE: Adding firewall rules for Storj in Windows PowerShell\nDESCRIPTION: PowerShell commands to add inbound firewall rules for Storj v3 TCP and UDP on port 28967 in Windows.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/port-forwarding/page.md#2025-04-16_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nNew-NetFirewallRule -DisplayName \"Storj v3 TCP\" -Direction Inbound -Protocol TCP -LocalPort 28967 -Action allow\nNew-NetFirewallRule -DisplayName \"Storj v3 UDP\" -Direction Inbound -Protocol UDP -LocalPort 28967 -Action allow\n```\n\n----------------------------------------\n\nTITLE: Downloading Gateway ST for Windows using PowerShell\nDESCRIPTION: This command downloads and extracts the Gateway ST binary for Windows using curl in PowerShell.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncurl https://github.com/storj/gateway-st/releases/latest/download/gateway_windows_amd64.exe.zip -o gateway_windows_amd64.exe.zip; Expand-Archive gateway_windows_amd64.exe.zip -Destination . -Force\n```\n\n----------------------------------------\n\nTITLE: Uploading a File with Parallelism in macOS\nDESCRIPTION: Example of uploading a file with parallelism to increase upload speed using the --parallelism flag in macOS. Beneficial for large files with sufficient bandwidth.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nuplink cp --parallelism 10 cheesecake.jpg sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Launching Object Mount CLI with FlexMount\nDESCRIPTION: Commands to start Object Mount CLI with the --flex parameter pointing to the previously mounted directory, enabling FlexMount functionality.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/basic/page.md#2025-04-16_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ cuno --flex \"$HOME/my-object-storage\"\n(cuno) $ ls $HOME/object_storage_mount/s3/<bucket>/<path>\n```\n\n----------------------------------------\n\nTITLE: Setting Content Headers with AWS S3 CLI\nDESCRIPTION: Example command showing how to set content-type and cache-control headers when uploading a file using AWS S3 CLI\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/static-site-hosting/content-response-headers/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws s3 cp /tmp/myfile.txt s3://files/myfile.txt --content-type text/html --cache-control no-cache\n```\n\n----------------------------------------\n\nTITLE: Copying Orders Directory with Rsync\nDESCRIPTION: Command to copy storage node orders directory using rsync with archive mode and progress display\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrsync -aP /mnt/storj/storagenode/orders/ /mnt/storj2/storagenode-new/orders/\n```\n\n----------------------------------------\n\nTITLE: Running Gateway ST with Specific Access Grant on Linux\nDESCRIPTION: Command to run the Gateway with a specified access grant on Linux systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_16\n\nLANGUAGE: text\nCODE:\n```\ngateway run --access 14aV....\n```\n\n----------------------------------------\n\nTITLE: Setting Up Object Mount Fusion with Azure Storage\nDESCRIPTION: Creates a Fusion mount that combines local storage with Azure blob storage. Files will be automatically migrated between the two based on access patterns and thresholds.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncuno mount --fusion \"/mnt/fast/fusion-store\" --root \"/cuno/az/<account-name>/<bucket>/fusion-store\" \"~/my-fusion-filesystem\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Aspera Document Root for Storj\nDESCRIPTION: Commands to set up a document root in Aspera configuration to enable connection to Storj's S3-compatible storage. Requires replacing placeholders for account, S3 credentials, and bucket name.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/aspera/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# vi /opt/aspera/etc/aspera.conf\n# asconfigurator -x \"set_user_data;user_name,[account];absolute,s3://[s3_account_id]:[s3_secret_key]]@gateway.storjshare.io/[bucket]\"\n```\n\n----------------------------------------\n\nTITLE: Binding Local Directory to Cloud Location for Fusion\nDESCRIPTION: Binds a local directory to a cloud location for Fusion using extended attribute support. This command saves the relationship and options as metadata for future mounts.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncuno fusion \"<path to attached storage backing directory>\" \"<path to object storage backing directory>\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Metadata for an Object in Uplink CLI\nDESCRIPTION: Command to retrieve all metadata for a specific object stored in a Storj bucket using the Uplink CLI.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/meta-command/meta-get-command/page.md#2025-04-16_snippet_2\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe meta get sj://cakes/cheesecake.jpg\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink meta get sj://cakes/cheesecake.jpg\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink meta get sj://cakes/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Removing Access in Uplink CLI (Windows)\nDESCRIPTION: Command to remove an access from the local store of Uplink CLI on Windows. The '<name>' argument specifies the access name to be deleted.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-remove/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access remove <name>\n```\n\n----------------------------------------\n\nTITLE: Listing Available Access Grants\nDESCRIPTION: Commands to list all available access grants in the system across different operating systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/sharing-your-first-object/import-access/page.md#2025-04-16_snippet_2\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access list\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access list\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access list\n```\n\n----------------------------------------\n\nTITLE: Setting Full Access Permissions with Time Restrictions\nDESCRIPTION: Commands demonstrating how to set full access permissions (read and write) with specific time constraints using the uplink share command.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/sharing-your-first-object/generate-access/page.md#2025-04-16_snippet_2\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe share --readonly=false --not-before=+2h --not-after=+10h sj://cakes/\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink share --readonly=false --not-before=+2h --not-after=+10h sj://cakes/\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink share --readonly=false --not-before=+2h --not-after=+10h sj://cakes/\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Restricted Access Grant\nDESCRIPTION: Example of creating a restricted Access Grant with default read-only access using the 'access restrict' command in Uplink CLI.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-restrict/page.md#2025-04-16_snippet_1\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access restrict\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access restrict\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access restrict\n```\n\n----------------------------------------\n\nTITLE: Server-Side Copy Between Buckets in Linux\nDESCRIPTION: Example of copying a file between two Storj buckets in Linux (server-side copy). This operation doesn't count against egress limits as the data is not downloaded.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nuplink cp sj://cakes/cheesecake.jpg sj://new-recipes/cakes/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Exporting Restricted Access Grant to File\nDESCRIPTION: Example of creating a restricted Access Grant with a time limitation and exporting it to a file using the 'access restrict' command in Uplink CLI.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-restrict/page.md#2025-04-16_snippet_2\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access restrict --not-after +1h --export-to access.txt\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access restrict --not-after +1h --export-to access.txt\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access restrict --not-after +1h --export-to access.txt\n```\n\n----------------------------------------\n\nTITLE: Example Log Object Key in Storj\nDESCRIPTION: A concrete example of a log object key following the specified format, showing how the prefix and timestamp components appear in practice.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/bucket-logging/page.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nv-0730-ttl30/2024-08-29-03-48-32-33A6009CA7B144AF\n```\n\n----------------------------------------\n\nTITLE: Setting Object TTL with rclone in Storj\nDESCRIPTION: This command uses rclone to copy a file to a Storj bucket with a TTL of 5 minutes specified via the x-amz-meta-object-expires custom header.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/object-lifecycles/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# terminal\nrclone copy storj-tree.png storj:my-bucket --header-upload \"x-amz-meta-object-expires:+5m\"\n```\n\n----------------------------------------\n\nTITLE: Listing Pinned Content\nDESCRIPTION: cURL command to list all pinned content for a user\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/storj-ipfs-pinning/page.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u ipfs_beta_user:ipfs_beta_password -X POST \"https://www.storj-ipfs.com/api/v0/pin/ls\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Mounting Object Mount Fusion for Storj\nDESCRIPTION: Creates an Object Mount Fusion mount and mounts it to a specified directory using Storj.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncuno fusion \"/dev/sdf/fusion-store\" \"s3://<bucket>/fusion-store\"\ncuno mount --root \"/dev/sdf/fusion-store\" \"$HOME/my-fusion-filesystem\"\n```\n\n----------------------------------------\n\nTITLE: Setting Trace Log Level for Directory Listing in Bash\nDESCRIPTION: This snippet demonstrates how to set the CUNO_LOG environment variable to 'trace' level and perform a directory listing on an S3 bucket. It shows the verbose output generated at this log level.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/configuration/page.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ CUNO_LOG=trace ls s3://example-bucket\ncuno: [TRACE][01/02/21 08:39:07.39][Thread: 3817873920] Trying bucket store at: /home/user/.config/cuno/creds/...\ncuno: [TRACE][01/02/21 08:39:07.40][Thread: 3817873920] Loading S3Client\ncuno: [DEBUG][01/02/21 08:39:07.40][Thread: 3817873920] Not On EC2\ncuno: [TRACE][01/02/21 08:39:07.40][Thread: 3817873920] Attempting to find CaCerts.\ncuno: [DEBUG][01/02/21 08:39:07.40][Thread: 3817873920] Using Certs: /etc/ssl/certs/ca-certificates.crt\ncuno: [TRACE][01/02/21 08:39:07.40][Thread: 3817873920] Attempting to load PGMAN\ncuno: [DEBUG][01/02/21 08:39:07.40][Thread: 3817873920] Using custom Endpoint: http://127.0.0.1:8080\ncuno: [DEBUG][01/02/21 08:39:07.40][Thread: 3817873920] Using custom pathstyle\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Gateway ST for macOS\nDESCRIPTION: This command downloads, extracts, and installs the Gateway ST binary for macOS systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/storj/gateway-st/releases/latest/download/gateway_darwin_amd64.zip -O && unzip gateway_darwin_amd64.zip\nchmod 755 gateway\nsudo mv gateway /usr/local/bin/gateway\n```\n\n----------------------------------------\n\nTITLE: Testing Object Mount with Public S3 Data on Linux\nDESCRIPTION: Commands to test Object Mount functionality on Linux by listing contents of a public S3 bucket. These examples demonstrate browsing telescope data from the stpubdata bucket to verify the installation works correctly.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/download-install/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# terminal\ncuno run sh -c \"ls s3://stpubdata/\"\ngalex  hst  jwst  k2  kepler  panstarrs  tess\n```\n\nLANGUAGE: shell\nCODE:\n```\n# terminal\ncuno run sh -c \"ls s3://stpubdata/tess/public/*\"\n's3://stpubdata/tess/public/ffi':\ns0001  s0005  s0009  s0013  s0017  s0021  s0025  s0029 ... [truncated]\n's3://stpubdata/tess/public/mast':\ntess-s0001-1-1-cube.fits  tess-s0012-1-4-cube.fits  tess-s0023-2-3-cube.fits ... [truncated]\n... [truncated]\n```\n\n----------------------------------------\n\nTITLE: Verifying DNS Records for Custom Domain with Storj\nDESCRIPTION: These commands use the 'dig' utility to verify that the DNS records for a custom domain have been set up correctly. They check both the CNAME and TXT records.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/static-site-hosting/custom-domains/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndig cname my-website.storj.dev +short\n```\n\nLANGUAGE: shell\nCODE:\n```\ndig txt txt-my-website.storj.dev +short\n```\n\n----------------------------------------\n\nTITLE: Copying Identity Files with Rsync\nDESCRIPTION: Command to copy storage node identity files using rsync with archive mode and progress display\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrsync -aP /mnt/storj/identity/storagenode/ /mnt/storj2/storagenode-new/identity/\n```\n\n----------------------------------------\n\nTITLE: Setting Path-Bound Access in Storj CLI\nDESCRIPTION: Restricts access to a single top-level path prefix for tenant isolation.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/concepts/multi-tenant-data/multi-tenant-access-management/page.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nuplink access restrict --access <ACCESS_GRANT> --prefix sj://<BUCKET>/<PATH>/\n```\n\n----------------------------------------\n\nTITLE: Syncing Data with Storj using Rclone\nDESCRIPTION: Use the 'sync' command to synchronize data between local and Storj, or between different Storj buckets. Use '--dry-run' to test before actual sync.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-s3/page.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrclone sync --progress ~/Videos/ waterbear:mybucket/videos/\n```\n\nLANGUAGE: bash\nCODE:\n```\nrclone sync --progress waterbear:mybucket/videos/ ~/Videos/\n```\n\nLANGUAGE: bash\nCODE:\n```\nrclone sync --progress waterbear-us:mybucket/videos/ waterbear-europe:mybucket/videos/\n```\n\nLANGUAGE: bash\nCODE:\n```\nrclone sync --progress s3:mybucket/videos/ waterbear:mybucket/videos/\n```\n\n----------------------------------------\n\nTITLE: Exporting Access Grant - Usage Example\nDESCRIPTION: Example of exporting an Access Grant named 'us1' to a text file named 'us1.txt'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-export/page.md#2025-04-16_snippet_1\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access export us1 us1.txt\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access export us1 us1.txt\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access export us1 us1.txt\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects with Uplink CLI - Linux\nDESCRIPTION: Command to delete a file named 'cheesecake.jpg' from the 'cakes' bucket using Uplink CLI on Linux.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/interacting-with-your-first-object/delete-an-object/page.md#2025-04-16_snippet_2\n\nLANGUAGE: linux\nCODE:\n```\nuplink rm sj://cakes/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Creating Restricted Access Grant for Multiple Prefixes\nDESCRIPTION: Example of creating a restricted Access Grant for multiple prefixes using the 'access restrict' command in Uplink CLI.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-restrict/page.md#2025-04-16_snippet_5\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access restrict --prefix sj://cakes/New-York --prefix sj://pies\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access restrict --prefix sj://cakes/New-York --prefix sj://pies\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access restrict  --prefix sj://cakes/New-York --prefix sj://pies\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Storj Presigned URLs\nDESCRIPTION: Commands to install Python and required packages (boto3, requests) using brew and pip3 package managers.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/s3/presigned-urls/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install python\nbrew install python3\n# install boto3\npip3 install boto3\npip3 install requests\n```\n\n----------------------------------------\n\nTITLE: Enabling Object Lock on an Existing Bucket using AWS CLI\nDESCRIPTION: Enables Object Lock protection on an existing bucket using AWS CLI. This command applies Object Lock configuration to the bucket after versioning has been enabled.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/object-lock/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\naws s3api put-object-lock-configuration \\\n  --bucket my-existing-bucket \\\n  --object-lock-configuration \"ObjectLockEnabled=Enabled\" \\\n  --endpoint-url https://gateway.storjshare.io\n\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in a Specific Bucket\nDESCRIPTION: Commands to list all objects in a specified bucket. This example lists the contents of the 'images' bucket.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/ls-command/page.md#2025-04-16_snippet_2\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe ls sj://images\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink ls sj://images\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink ls sj://images\n```\n\n----------------------------------------\n\nTITLE: Executing 'access list' Command in Windows\nDESCRIPTION: Command syntax for listing all available Storj DCS access grants using the Uplink CLI on Windows. This command displays a list of all configured access grants along with their associated satellites.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-list-command/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access list [flags]\n```\n\n----------------------------------------\n\nTITLE: Downloading an Object with Uplink CLI on macOS\nDESCRIPTION: This command uses the Uplink CLI tool to download a file named 'cheesecake.jpg' from the 'cakes' bucket to the local Downloads folder on macOS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/interacting-with-your-first-object/download-an-object/page.md#2025-04-16_snippet_1\n\nLANGUAGE: macos\nCODE:\n```\nuplink cp sj://cakes/cheesecake.jpg ~/Downloads/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Setting Object TTL with Uplink CLI in Storj\nDESCRIPTION: This command uses Uplink CLI to copy a file to a Storj bucket with a TTL of 5 minutes using the --expires flag instead of HTTP headers.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/object-lifecycles/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# uses `--expires` instead\n# terminal\nuplink cp --expires \"+5m\" storj-tree.png sj://my-bucket\n```\n\n----------------------------------------\n\nTITLE: Pulling Gateway ST Docker Image\nDESCRIPTION: This Docker command pulls the latest Gateway ST image from the Storj Labs repository.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\ndocker pull storjlabs/gateway\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Metadata Key in Uplink CLI\nDESCRIPTION: Command to retrieve the value of a specific metadata key for an object stored in a Storj bucket using the Uplink CLI.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/meta-command/meta-get-command/page.md#2025-04-16_snippet_3\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe meta get sj://cakes/cheesecake.jpg baker\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink meta get sj://cakes/cheesecake.jpg baker\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink meta get sj://cakes/cheesecake.jpg baker\n```\n\n----------------------------------------\n\nTITLE: Setting AWS CLI Transfer Parameters\nDESCRIPTION: Optional AWS CLI configuration for optimizing transfer performance\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/getting-started/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\naws configure set default.s3.multipart_threshold 64MB\naws configure set default.s3.multipart_chunksize 64MB\naws configure set default.s3.max_concurrent_requests 40\n```\n\n----------------------------------------\n\nTITLE: Creating Directory in Azure Blob Storage for Fusion Store\nDESCRIPTION: Creates a new directory in an Azure Blob Storage container to be used for Object Mount Fusion.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncuno run mkdir \"az:///<account-name>/<bucket>/fusion-store\"\n```\n\n----------------------------------------\n\nTITLE: Running access revoke command in Linux\nDESCRIPTION: Executes the access revoke command in Linux to revoke an access grant. The command requires the access name or value to be revoked as an argument.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-revoke/page.md#2025-04-16_snippet_1\n\nLANGUAGE: linux\nCODE:\n```\nuplink access [flags] <revokee>\n```\n\n----------------------------------------\n\nTITLE: Configuring LSF Queue for Object Mount\nDESCRIPTION: Command sequence to append Object Mount queue configuration to LSF's lsb.queues file. It automatically detects the cluster name and uses a template from the Object Mount installation.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/advanced/page.md#2025-04-16_snippet_9\n\nLANGUAGE: console\nCODE:\n```\ncluster_name=$(lsid | grep 'cluster name' | awk '{print $NF}')\ncuno run sh -c \"\n    sed 's;@LSF_ENVDIR@;$LSF_ENVDIR;' \\\"\\$CUNO_BASEDIR\\\"/share/lsf/lsb.queues \\\n    >>\\\"$LSF_ENVDIR\\\"/lsbatch/$cluster_name/configdir/lsb.queues\n\"\n```\n\n----------------------------------------\n\nTITLE: Setting Content Headers with Uplink CLI\nDESCRIPTION: Example command showing how to set content-type and cache-control metadata when uploading a file using Uplink CLI\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/static-site-hosting/content-response-headers/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuplink cp /tmp/myfile.txt sj://files/myfile.txt --metadata '{\"content-type\":\"text/html\",\"cache-control\":\"no-cache\"}'\n```\n\n----------------------------------------\n\nTITLE: Restoring from Backup\nDESCRIPTION: Command to restore the latest snapshot from backup to a specified target directory\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/restic/page.md#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nrestic --repo rclone:storj:bucket/my-backup restore latest --target ~/restore\n```\n\n----------------------------------------\n\nTITLE: Rclone Installation Command\nDESCRIPTION: Command to download and install Rclone on the Raspberry Pi using a shell script.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/tesla-sentry-mode-teslausb/page.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncurl https://rclone.org/install.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Setting Object Mount Options with Environment Variables\nDESCRIPTION: Alternative method to configure Object Mount options using environment variables instead of command line arguments.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/basic/page.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport CUNO_OPTIONS=\"<Object Mount option>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Storj S3 Storage Gateway in Globus\nDESCRIPTION: Command to create a new S3 storage gateway in Globus that connects to Storj. Requires specifying the gateway name, domain, Storj endpoint, and target buckets.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/globus/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nglobus-connect-server storage-gateway create s3 \\\n    \"Storj Storage Gateway\" \\\n    --domain example.org \\\n    --s3-endpoint https://gateway.storjshare.io \\\n    --s3-user-credential \\\n    --bucket my-bucket --bucket research-data-bucket-2\n```\n\n----------------------------------------\n\nTITLE: Reading an Object from AWS S3 Bucket with Object Mount\nDESCRIPTION: Displays the content of a file stored in an AWS S3 bucket using Object Mount. This command reads and outputs the content of 'helloworld.txt' from 'bucket1'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncat s3://bucket1/helloworld.txt\n```\n\n----------------------------------------\n\nTITLE: Registering Access Grant as S3 Credentials in Storj\nDESCRIPTION: These commands use Uplink CLI to register an access grant with TTL restrictions as S3 credentials, which can then be used in S3 clients to automatically apply TTL to uploaded objects.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/object-lifecycles/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./uplink.exe access register 1AW...V3B\n```\n\nLANGUAGE: shell\nCODE:\n```\nuplink access register 1AW...V3B\n```\n\nLANGUAGE: shell\nCODE:\n```\nuplink access register 1AW...V3B\n```\n\n----------------------------------------\n\nTITLE: Generating a Shareable URL for Content in Uplink CLI\nDESCRIPTION: Example of creating a shareable URL for a bucket with no expiration time. The URL can be used to access the shared content through a web browser.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/share-command/page.md#2025-04-16_snippet_4\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe share sj://cakes/ --url --not-after=none\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink share sj://cakes/ --url --not-after=none\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink share sj://cakes/ --url --not-after=none\n```\n\n----------------------------------------\n\nTITLE: Creating RSE Accounts Configuration\nDESCRIPTION: Commands to create and configure the RSE accounts configuration file with S3 credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rucio/page.md#2025-04-16_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# get your rse_id\nrucio-admin rse info STORJ\n\n# use your rse_id and s3 credentials below\ncat >> etc/rse-accounts.cfg <<EOL\n{\n    \"YOUR_RSE_ID\": {\n        \"access_key\": \"YOUR_ACCESS_KEY\",\n        \"secret_key\": \"YOUR_SECRET_KEY\",\n        \"signature_version\": \"s3v4\",\n        \"region\": \"us-east-1\"\n    }\n}\nEOL\n```\n\n----------------------------------------\n\nTITLE: Incorrect Channel Usage with Worker Pool in Go\nDESCRIPTION: This snippet shows a common mistake when using channels with a worker pool, where the channel is not closed after all items are processed, potentially leading to goroutine leaks.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nconst workerCount = 100\n\nvar wg sync.WaitGroup\nworkQueue := make(chan *Item)\ndefer wg.Wait()\n\nfor i := 0; i < workerCount; i++ {\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor item := range workQueue {\n\t\t\tprocess(item)\n\t\t}\n\t}()\n}\n\nerr := db.IterateItems(ctx, func(item *Item) {\n\tworkQueue <- item\n})\n```\n\n----------------------------------------\n\nTITLE: Uplink Share Command Output Format\nDESCRIPTION: Example output from the uplink share --url command showing access restrictions, credentials, and the generated shareable URL for the file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/uploading-your-first-object/view-distribution-of-an-object/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n=========== ACCESS RESTRICTIONS ==========================================================\nDownload  : Allowed\nUpload    : Disallowed\nLists     : Allowed\nDeletes   : Disallowed\nNotBefore : No restriction\nNotAfter  : 2022-03-01 09:56:13\nPaths     : sj://cakes/cheesecake.jpg\n=========== SERIALIZED ACCESS WITH THE ABOVE RESTRICTIONS TO SHARE WITH OTHERS ===========\nAccess    : 1Dv4...\n========== CREDENTIALS ===================================================================\nAccess Key ID: jvw3fmzqyg2cvxm27qishw6y4qka\nSecret Key   : ...\nEndpoint     : https://gateway.storjshare.io\nPublic Access:  true\n=========== BROWSER URL ==================================================================\nREMINDER  : Object key must end in '/' when trying to share recursively\nURL       : https://link.storjshare.io/s/juexo54k2db7lt5fawuqkupqkcfa/cakes/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Extending Retention Period for Locked Object in Storj using AWS CLI\nDESCRIPTION: This snippet demonstrates how to extend the retention period for a locked object in a Storj bucket. It updates the retention date to a later time using the AWS CLI S3 API.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/objects/page.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\naws s3api put-object-retention \\\n  --bucket my-object-lock-bucket \\\n  --key my-file.txt \\\n  --version-id <version-id> \\\n  --retention \"Mode=COMPLIANCE,RetainUntilDate=2025-07-01T00:00:00Z\" \\\n  --endpoint-url https://gateway.storjshare.io\n```\n\n----------------------------------------\n\nTITLE: Removing Non-Empty Bucket with uplink\nDESCRIPTION: This command uses uplink to remove a non-empty bucket from Storj, even if the encryption phrase is lost. It requires uplink to be installed and configured with Storj credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/delete-buckets/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nuplink rb --force sj://my-bucket\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Docker Container\nDESCRIPTION: Docker command to run Grafana Enterprise container for visualization.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/commercial-node/dashboard/page.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name=grafana -p 3000:3000 grafana/grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Thread-Safe State Management in Go\nDESCRIPTION: A generic state container that provides thread-safe access and modification with context cancellation support.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_26\n\nLANGUAGE: go\nCODE:\n```\ntype Locked[T any] struct {\n\tstate chan *T\n}\n\nfunc NewLocked[T any](initial *T) *Locked[T] {\n\ts := &Locked[T]{}\n\ts.state = make(chan *T, 1)\n\ts.state <- initial\n\treturn s\n}\n\nfunc (s *Locked[T]) Modify(ctx context.Context, fn func(*T) error) error {\n\tif ctx.Err() != nil {\n\t\treturn ctx.Err()\n\t}\n\n\tselect {\n\tcase state := <-s.state:\n\t\tdefer func() { s.state <- state }()\n\t\treturn fn(state)\n\tcase <-ctx.Done():\n\t\treturn ctx.Err()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example DNS Zone File for Static Website Hosting\nDESCRIPTION: Sample DNS zone file output from Uplink CLI, showing CNAME and TXT records for a specific domain (www.example.com) and bucket. Includes actual values for illustration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/static-site-hosting/page.md#2025-04-16_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\n$ORIGIN example.com.\n$TTL    3600\nwww.example.com    \tIN\tCNAME\tlink.storjshare.io.\ntxt-www.example.com\tIN\tTXT  \tstorj-root:bucket/prefix\ntxt-www.example.com\tIN\tTXT  \tstorj-access:abcdefghijklmnopqrstuvwxzy\ntxt-www.example.com IN\tTXT  \tstorj-tls:true\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshot Archive\nDESCRIPTION: Command to compress snapshot directory into a single tar archive.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/chainstate-snapshots/page.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ntar cf snapshot.tar /path/to/snapshot\n```\n\n----------------------------------------\n\nTITLE: Authentication Method Selection\nDESCRIPTION: Prompt for choosing between existing access grant or creating a new access grant for authentication.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-native/page.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nStorage> storj\nOption provider.\nChoose an authentication method.\nChoose a number from below, or type in your own string value.\nPress Enter for the default (existing).\n 1 / Use an existing access grant.\n   \\ (existing)\n 2 / Create a new access grant from satellite address, API key, and passphrase.\n   \\ (new)\nprovider>\n```\n\n----------------------------------------\n\nTITLE: Example AWS CLI configuration file\nDESCRIPTION: This snippet shows an example of how the AWS CLI configuration file would look after setting up the Storj endpoint. Replace 'access_key' and 'secret_key' with your actual credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/aws/aws-cli-endpoint/page.md#2025-04-16_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n[default]\naws_access_key_id = access_key # replace me\naws_secret_access_key = secret_key # replace me\ns3 =\n  endpoint_url = https://gateway.storjshare.io\n```\n\n----------------------------------------\n\nTITLE: Uplink Setup Satellite Address Prompt\nDESCRIPTION: Command line prompt for entering the satellite address during the Uplink setup process, which was generated when creating the access grant.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/setup-command/page.md#2025-04-16_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\nSatellite address:\n```\n\n----------------------------------------\n\nTITLE: Running access revoke command in Windows\nDESCRIPTION: Executes the access revoke command in Windows to revoke an access grant. The command requires the access name or value to be revoked as an argument.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-revoke/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access [flags] <revokee>\n```\n\n----------------------------------------\n\nTITLE: Importing Access Grant from File in Uplink CLI (Windows/macOS/Linux)\nDESCRIPTION: Example of importing an Access Grant from a file named 'access.txt' and associating it with the name 'main' in Uplink CLI.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-import/page.md#2025-04-16_snippet_1\n\nLANGUAGE: windows\nCODE:\n```\n.\\uplink.exe access import main access.txt\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access import main access.txt\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access import main access.txt\n```\n\n----------------------------------------\n\nTITLE: Downloading Data into Fusion Filesystem\nDESCRIPTION: Downloads a file from the web into the mounted Fusion filesystem.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ncd $HOME/my-fusion-filesystem\nwget http://vision.stanford.edu/aditya86/ImageNetDogs/images.tar\n```\n\n----------------------------------------\n\nTITLE: Revoking Access Credentials in Storj CLI\nDESCRIPTION: Revokes a specific access grant using the parent access grant.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/concepts/multi-tenant-data/multi-tenant-access-management/page.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nuplink access revoke --access <PARENT_ACCESS_GRANT> <ACCESS_GRANT_TO_REVOKE>\n```\n\n----------------------------------------\n\nTITLE: Checking Status of Object Mount CSI Driver Resources\nDESCRIPTION: Command to display the status of all Kubernetes resources associated with the Object Mount CSI Driver by filtering with a label selector.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get all -l app.kubernetes.io/name=Object Mount-csi-driver\n```\n\n----------------------------------------\n\nTITLE: Removing Bucket after Clearing Object Versions (Shell)\nDESCRIPTION: This command uses uplink to remove a Storj bucket after clearing all object versions. It should be used after removing all object versions from the bucket.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/delete-buckets/page.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nuplink rb --force sj://locked-bucket\n```\n\n----------------------------------------\n\nTITLE: Retrieving Satellite Audits (Port-Mapped/Bash)\nDESCRIPTION: Bash script for directly querying audit statistics when the node's dashboard is port-mapped. Uses wget to fetch data from the exposed port and jq to parse JSON responses.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/audits-by-satellite/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfor sat in `wget -qO - localhost:14002/api/sno | jq .satellites[].id -r`; do wget -qO - localhost:14002/api/sno/satellite/$sat | jq .id,.audits; done\n```\n\n----------------------------------------\n\nTITLE: Listing Encrypted Paths of Objects\nDESCRIPTION: Commands to display encrypted paths of objects. This is useful for viewing objects encrypted with different keys that may not be visible in normal listing.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/ls-command/page.md#2025-04-16_snippet_5\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe ls sj://recipes --encrypted --recursive\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink ls sj://recipes --encrypted\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink ls sj://recipes --encrypted\n```\n\n----------------------------------------\n\nTITLE: Storj Credentials Configuration\nDESCRIPTION: YAML configuration for Storj access credentials\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/rails-activestorage/page.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstorj:\n  access_key_id: <access_key>\n  secret_access_key: <secret_key>\n```\n\n----------------------------------------\n\nTITLE: Creating a Storj Bucket for Mastodon Integration\nDESCRIPTION: This command creates a new bucket in Storj using the Uplink CLI. The bucket name is user-defined and will be used in subsequent steps.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/mastodon/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuplink mb sj://mastodon\n```\n\n----------------------------------------\n\nTITLE: Using cp Command in macOS Environment\nDESCRIPTION: Basic syntax for using the cp command in macOS environment with Uplink CLI to copy files between local storage and Storj DCS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuplink cp [flags] SOURCE DESTINATION\n```\n\n----------------------------------------\n\nTITLE: Bypassing Governance Mode Retention in Storj using AWS CLI\nDESCRIPTION: This snippet shows how to bypass Governance Mode retention for an object in a Storj bucket. It requires the user to have the BypassGovernanceRetention permission and uses the AWS CLI S3 API.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/objects/page.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\naws s3api put-object-retention \\\n  --bucket my-object-lock-bucket \\\n  --key my-file.txt \\\n  --version-id <version-id> \\\n  --retention \"{}\" \\\n  --bypass-governance-retention \\\n  --endpoint-url https://gateway.storjshare.io\n```\n\n----------------------------------------\n\nTITLE: Restricting Access with Time Constraints\nDESCRIPTION: Commands to create restricted access with time limitations and specific bucket prefix using the uplink access restrict command.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/sharing-your-first-object/generate-access/page.md#2025-04-16_snippet_1\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access restrict --not-after=+10h --prefix sj://cakes/NewYork\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink share --readonly=false --not-before=+2h --not-after=+10h sj://cakes/\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink share --readonly=false --not-before=+2h --not-after=+10h sj://cakes/\n```\n\n----------------------------------------\n\nTITLE: Reconfiguring LSF After Queue Setup\nDESCRIPTION: Command to reconfigure LSF after adding the new queue configuration, which is required for the changes to take effect.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/advanced/page.md#2025-04-16_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nbadmin reconfig\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus Docker Container\nDESCRIPTION: Docker command to run Prometheus container with custom configuration file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/commercial-node/dashboard/page.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 9090:9090 -v ./prometheus.yaml:/etc/prometheus/prometheus.yml prom/prometheus\n```\n\n----------------------------------------\n\nTITLE: Testing Storj-Aspera Integration\nDESCRIPTION: Commands to restart the Aspera service and test file transfers to Storj using local connection.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/aspera/page.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# systemctl restart asperanoded\n# ascp -P 33001 -v [testfile] [account]@localhost:/\n```\n\n----------------------------------------\n\nTITLE: Setting POSIX Compatibility Mode via Command Line\nDESCRIPTION: Command to enable POSIX compatibility mode at the bucket level using the cuno credentials utility. This affects all users of the bucket and forces POSIX compatibility mode.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuration-modes/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncuno creds setposix s3://yourbucket true\n```\n\n----------------------------------------\n\nTITLE: Verifying Object Mount Installation on Linux\nDESCRIPTION: Command to check the installed version of Object Mount on Linux. This confirms the software is correctly installed and accessible from the command line.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/download-install/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# terminal\ncuno version\n```\n\n----------------------------------------\n\nTITLE: Using Share Command Syntax in Uplink CLI\nDESCRIPTION: Basic syntax for the share command across different operating systems. The command allows sharing restricted access to objects by specifying allowed path prefixes and flags.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/share-command/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe share [ALLOWED_PATH_PREFIX]... [flags]\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink share [ALLOWED_PATH_PREFIX]... [flags]\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink share [ALLOWED_PATH_PREFIX]... [flags]\n```\n\n----------------------------------------\n\nTITLE: ListBucketsWithAttribution Response Syntax for Storj Gateway-MT\nDESCRIPTION: Illustrates the XML response structure for the ListBucketsWithAttribution API, including the Attribution field in the Bucket element.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/s3/s3-compatibility/page.md#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ListAllMyBucketsResult>\n   <Buckets>\n      <Bucket>\n         <Attribution>string</Attribution>\n         <CreationDate>timestamp</CreationDate>\n         <Name>string</Name>\n      </Bucket>\n   </Buckets>\n   <Owner>\n      <DisplayName>string</DisplayName>\n      <ID>string</ID>\n   </Owner>\n</ListAllMyBucketsResult>\n```\n\n----------------------------------------\n\nTITLE: Revoking an access grant in Windows\nDESCRIPTION: Example of revoking an access grant by its value in Windows. This command revokes the access permissions associated with the specified access grant value.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-revoke/page.md#2025-04-16_snippet_7\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access revoke 19hFrjmsi...\n```\n\n----------------------------------------\n\nTITLE: Moving an Object Between Storj Buckets\nDESCRIPTION: Example of moving an object from one Storj bucket to another using the 'mv' command. This operation uses a server-side move method.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/mv/page.md#2025-04-16_snippet_3\n\nLANGUAGE: windows\nCODE:\n```\n.\\uplink.exe mv sj://cakes/New-York/cheesecake.jpg sj://new-recipes/cakes/cheesecake.jpg\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink mv sj://cakes/New-York/cheesecake.jpg sj://new-recipes/cakes/cheesecake.jpg\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink mv sj://cakes/New-York/cheesecake.jpg sj://new-recipes/cakes/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Creating Local Directory for AWS S3 Fusion Storage\nDESCRIPTION: Creates a directory on the attached storage device mounted at /dev/sdf to store local data for Fusion with AWS S3.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmkdir \"/dev/sdf/fusion-store\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Identity Binary - Linux\nDESCRIPTION: Commands to download and setup the identity binary for Linux AMD64 systems\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/identity/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/storj/storj/releases/latest/download/identity_linux_amd64.zip -o identity_linux_amd64.zip\nunzip -o identity_linux_amd64.zip\nchmod +x identity\nsudo mv identity /usr/local/bin/identity\n```\n\n----------------------------------------\n\nTITLE: Removing Access in Uplink CLI (macOS)\nDESCRIPTION: Command to remove an access from the local store of Uplink CLI on macOS. The '<name>' argument specifies the access name to be deleted.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-remove/page.md#2025-04-16_snippet_2\n\nLANGUAGE: macos\nCODE:\n```\nuplink access remove <name>\n```\n\n----------------------------------------\n\nTITLE: Using Object Mount with LSF Job Starter\nDESCRIPTION: Example of using the Object Mount job starter with LSF's lsrun command by setting the LSF_JOB_STARTER environment variable. This allows direct access to object storage.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/advanced/page.md#2025-04-16_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nexport LSF_JOB_STARTER=$LSF_ENVDIR/cuno-starter.sh\nlsrun ls -l s3://bucket\n```\n\n----------------------------------------\n\nTITLE: Uplink CLI Commands for Access Management\nDESCRIPTION: Examples of using the Uplink CLI tool for registering and restricting access credentials\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/concepts/multi-tenant-data/multi-tenant-access-management/page.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuplink access register <ACCESS_GRANT>\n```\n\nLANGUAGE: bash\nCODE:\n```\nuplink access register --access <ACCESS_GRANT> --public=true\n```\n\nLANGUAGE: bash\nCODE:\n```\nuplink access restrict --access <ACCESS_GRANT> --readonly true\n```\n\n----------------------------------------\n\nTITLE: Setting POSIX Permissions on Directory in Object Mount\nDESCRIPTION: Commands to set owner, group, and permissions on a directory in Object Mount, limiting access to a specific user.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/enforced-posix-access/page.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ chown -R user1 /mnt/cloud/bucket/directory\n$ chgrp -R group1 /mnt/cloud/bucket/directory\n$ chmod -R 700 /mnt/cloud/bucket/directory\n```\n\n----------------------------------------\n\nTITLE: Running S3-compatibility Check for Object Mount\nDESCRIPTION: Command to test S3-compatibility, settings, and limitations for a specific bucket and reconfigure credentials accordingly. This is useful when troubleshooting issues with S3-compatible services.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncuno creds detectfeatures s3://bucket-to-test credentials.txt\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Old Backups in Restic\nDESCRIPTION: Command to remove old snapshots while keeping the specified number of recent backups\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/restic/page.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nrestic --repo rclone:storj:bucket/my-backup forget --keep-last 2 --prune\n```\n\n----------------------------------------\n\nTITLE: Setting User Agent in S3 Gateway YAML Configuration\nDESCRIPTION: This YAML configuration snippet demonstrates how to set the User Agent for the S3 Gateway in Storj. The User Agent is used for connecting to the satellite and is essential for partner attribution.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/partner-program-tools/page.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# User-Agent used for connecting to the satellite\nclient.user-agent: 'MyCompany'\n```\n\n----------------------------------------\n\nTITLE: Setting Storj as default S3 endpoint\nDESCRIPTION: This command sets the Storj gateway URL as the default S3 endpoint in the AWS CLI configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/aws/aws-cli-endpoint/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\naws configure set default.s3.endpoint_url https://gateway.storjshare.io\n```\n\n----------------------------------------\n\nTITLE: Listing Buckets in Google Cloud Storage with Object Mount\nDESCRIPTION: Lists all paired buckets in Google Cloud Storage using Object Mount. This command requires that Object Mount be enabled first by running the 'cuno' command.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nls gs://\n```\n\n----------------------------------------\n\nTITLE: Importing Write-Only Restricted Access Grant\nDESCRIPTION: Example of creating a write-only restricted Access Grant and importing it to Uplink as a named access using the 'access restrict' command.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-restrict/page.md#2025-04-16_snippet_3\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access restrict --access us1 --writeonly --import-as us1-wo\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access restrict --access us1 --writeonly --import-as us1-wo\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access restrict --access us1 --writeonly --import-as us1-wo\n```\n\n----------------------------------------\n\nTITLE: Uploading Snapshot to Storj\nDESCRIPTION: Command to upload snapshot archive to Storj with parallel processing for improved performance.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/chainstate-snapshots/page.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nuplink cp --parallelism 4 snapshot.tar sj://snapshots/snapshot.tar\n```\n\n----------------------------------------\n\nTITLE: Listing GCS Directory Contents\nDESCRIPTION: Commands to list contents of a subdirectory in Google Cloud Storage using both URI and directory formats.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/access/page.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nls gs://my-bucket/dir\n```\n\nLANGUAGE: console\nCODE:\n```\nls /cuno/gs/my-bucket/dir\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects with Uplink CLI - MacOS\nDESCRIPTION: Command to delete a file named 'cheesecake.jpg' from the 'cakes' bucket using Uplink CLI on MacOS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/interacting-with-your-first-object/delete-an-object/page.md#2025-04-16_snippet_1\n\nLANGUAGE: macos\nCODE:\n```\nuplink rm sj://cakes/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Setting Minio Cache Environment Variables on Linux\nDESCRIPTION: Bash commands to set Minio caching environment variables on Linux for Gateway ST, including cache drives configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nexport MINIO_CACHE=\"on\"\nexport MINIO_CACHE_DRIVES=\"/mnt/drive1,/mnt/drive2,/mnt/cache{1...3}\"\nexport MINIO_CACHE_EXCLUDE=\"*.pdf,mybucket/*\"\nexport MINIO_CACHE_QUOTA=80\nexport MINIO_CACHE_AFTER=3\nexport MINIO_CACHE_WATERMARK_LOW=70\nexport MINIO_CACHE_WATERMARK_HIGH=90\n```\n\n----------------------------------------\n\nTITLE: Installing Object Mount System-wide\nDESCRIPTION: This command runs the Object Mount installer for system-wide installation, requiring sudo privileges.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/musl/page.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nsudo sh cuno-musl-installer.run\n```\n\n----------------------------------------\n\nTITLE: Removing Bucket with Object Lock using rclone\nDESCRIPTION: This command uses rclone to remove a bucket with Object Lock enabled in Governance mode. It requires rclone to be configured with Storj S3 credentials and specific permissions.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/delete-buckets/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrclone purge us1-gw-mt:my-locked-bucket --header \"x-amz-bypass-governance-retention:true\"\n```\n\n----------------------------------------\n\nTITLE: Listing All Buckets in Storj DCS\nDESCRIPTION: Commands to list all buckets in your Storj DCS project. When executed without arguments, the ls command displays all available buckets.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/ls-command/page.md#2025-04-16_snippet_1\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe ls\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink ls\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink ls\n```\n\n----------------------------------------\n\nTITLE: Example Access Logs from Storj Bucket\nDESCRIPTION: Sample log entries that demonstrate the format of access logs in Storj. These logs conform to the Amazon S3 Server Access Log Format and include details such as request timestamps, IP addresses, operation types, and request details.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/bucket-logging/page.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n1831182b-718f-471f-852d-6e1a4701eadd v-0730-ttl30 [29/Aug/2024:03:07:14 +0000] 136.0.77.2 1831182b-718f-471f-852d-6e1a4701eadd 17F0142B99B6139E PostPolicyBucket - \"POST /v-0730-ttl30/ HTTP/1.1\" 204 - - - - - \"-\" \"Go-http-client/1.1\" - 46ccb4215d73986341ced57f4a224a18133bf183644e3873e3384d8f95295bb3 SigV4 TLS_AES_128_GCM_SHA256 - - TLS 1.3 - -\n1831182b-718f-471f-852d-6e1a4701eadd v-0730-ttl30 [29/Aug/2024:03:07:14 +0000] 136.0.77.2 1831182b-718f-471f-852d-6e1a4701eadd 17F0142B9E85FFFE GetBucketLocation - \"GET /v-0730-ttl30/?location= HTTP/1.1\" 200 - 134 - - - \"-\" \"MinIO (linux; amd64) minio-go/v7.0.70\" - 46ccb4215d73986341ced57f4a224a18133bf183644e3873e3384d8f95295bb3 SigV4 TLS_AES_128_GCM_SHA256 - - TLS 1.3 - -\n1831182b-718f-471f-852d-6e1a4701eadd v-0730-ttl30 [29/Aug/2024:03:07:14 +0000] 136.0.77.2 1831182b-718f-471f-852d-6e1a4701eadd 17F0142B9E845AFB GetBucketLocation - \"GET /v-0730-ttl30/?location= HTTP/1.1\" 200 - 134 - - - \"-\" \"MinIO (linux; amd64) minio-go/v7.0.70\" - 46ccb4215d73986341ced57f4a224a18133bf183644e3873e3384d8f95295bb3 SigV4 TLS_AES_128_GCM_SHA256 - - TLS 1.3 - -\n1831182b-718f-471f-852d-6e1a4701eadd v-0730-ttl30 [29/Aug/2024:03:07:14 +0000] 136.0.77.2 1831182b-718f-471f-852d-6e1a4701eadd 17F0142B9992374E PostPolicyBucket - \"POST /v-0730-ttl30/ HTTP/1.1\" 204 - - - - - \"-\" \"Go-http-client/1.1\" - 46ccb4215d73986341ced57f4a224a18133bf183644e3873e3384d8f95295bb3 SigV4 TLS_AES_128_GCM_SHA256 - - TLS 1.3 - -\n```\n\n----------------------------------------\n\nTITLE: Duplicati Configuration Options Table\nDESCRIPTION: Table of recommended configuration options for optimizing Duplicati backup performance with Storj, including concurrent upload limits, verification settings, and compression methods.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/duplicati/page.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Option                                 | Description                                                                                                                                                                                                                                                                                                                         |\n| :------------------------------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| asynchronous-concurrent-upload-limit=1 | By default, Duplicati will transfer 4 files in parallel in order to speed up the transfer. The Storj protocol splits every file upload into many small pieces and uploads them in parallel. Even with only 1 concurrent upload it should max out most consumer connections.                                                         |\n| backup-test-samples=0                  | The Storj protocol checks the hash at the end of every file upload. An additional test sample is not needed. Use list-verify-uploads instead.                                                                                                                                                                                       |\n| list-verify-uploads=true               | If a file upload fails for any reason, a final listing will catch it.                                                                                                                                                                                                                                                               |\n| no-auto-compact=true                   | If a large number of small files are detected during a backup, or wasted space is found after deleting backups, the remote data will be compacted. This will cause a lot of unnecessary and expensive download traffic.                                                                                                             |\n| threshold                              | As files are changed, some data stored at the remote destination may not be required. This option controls how much wasted space the destination can contain before being reclaimed. Depending on the use case, the threshold can be reduced to 0. Storj doesn't charge you for the additional delete and re-upload operations. |\n| zip-compression-method                 | This option can be used to set up an alternative compression method, such as LZMA.                                                                                                                                                                                                                                                  |\n```\n\n----------------------------------------\n\nTITLE: Force Deleting a Bucket with Contents using Uplink CLI\nDESCRIPTION: Commands to delete a bucket named 'cakes' and all objects it contains using the --force flag. This operation will empty the bucket first and then remove it.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/rb-command/page.md#2025-04-16_snippet_2\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe rb sj://cakes --force\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink rb sj://cakes --force\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink rb sj://cakes --force\n```\n\n----------------------------------------\n\nTITLE: Checking Graceful Exit Status for Windows Storage Nodes\nDESCRIPTION: This snippet demonstrates how to check the status of the graceful exit process for a Storj storage node on Windows using the command prompt. It includes the full command with paths to the executable, config directory, and identity directory.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/graceful-exit-guide/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"C:\\Program Files\\Storj\\Storage Node\\storagenode.exe\" exit-status --config-dir \"C:\\Program Files\\Storj\\Storage Node\\\\\" --identity-dir \"C:\\Users\\USER\\AppData\\Roaming\\Storj\\Identity\\storagenode\" --log.output stderr\n\nDomain Name     Node ID                                             Percent Complete Successful Completion Receipt \n127.0.0.1:10000 12fbck97kqEGbWPu673CpeyrXavtqgVriyv9pCfL3mpw3yz2zN9 0.00%            N          N/A\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Logs for Storagenode (Linux)\nDESCRIPTION: This command displays the full log output for a Storagenode running in a Docker container on Linux systems. It's useful for troubleshooting and monitoring the node's operation.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/check-logs/page.md#2025-04-16_snippet_0\n\nLANGUAGE: linux\nCODE:\n```\ndocker logs storagenode\n```\n\n----------------------------------------\n\nTITLE: Sharing Bucket with Specific Domain using Uplink CLI\nDESCRIPTION: Example command for sharing a bucket with a specific domain name using Uplink CLI. This generates a DNS zone file for the given domain and bucket.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/static-site-hosting/page.md#2025-04-16_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nuplink share --dns www.example.com sj://bucket/prefix\n```\n\n----------------------------------------\n\nTITLE: Restricting Delete Operations in Storj CLI\nDESCRIPTION: Creates an access grant that allows read, write, and list operations but disallows deletions.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/concepts/multi-tenant-data/multi-tenant-access-management/page.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nuplink access restrict --access <ACCESS_GRANT> --disallow-deletes\n```\n\n----------------------------------------\n\nTITLE: Server-Side Copy Between Buckets in macOS\nDESCRIPTION: Example of copying a file between two Storj buckets in macOS (server-side copy). This operation doesn't count against egress limits as the data is not downloaded.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nuplink cp sj://cakes/cheesecake.jpg sj://new-recipes/cakes/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Configuring rclone for Backblaze and Storj\nDESCRIPTION: Sample rclone configuration file content for setting up Backblaze and Storj access. Replace placeholder values with actual credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/migrate/backblaze/page.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[backblaze]\ntype = b2\naccount =  keyID # REPLACE ME\nkey = applicationKey # REPLACE ME\n\n[storj]\ntype = storj\naccess_grant = access_grant # REPLACE ME\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon Insecure Registry Configuration\nDESCRIPTION: JSON configuration for Docker daemon to allow insecure registry connections\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/docker/page.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"insecure-registries\": [\"registry.anzix.net\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Bucket Mount Point\nDESCRIPTION: Creates a directory for mounting the S3 bucket and sets appropriate ownership permissions.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/s3fs/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsudo mkdir /mnt/my-bucket\nsudo chown myuser /mnt/my-bucket\n```\n\n----------------------------------------\n\nTITLE: Debugging Storj Storage Node Docker Container\nDESCRIPTION: This Docker command displays the last 20 lines of logs for the 'storagenode1' container, useful for debugging and monitoring the Storage node's status.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/commercial-node/setup/ansible/page.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs --tail 20 storagenode1\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CLI plugin path\nDESCRIPTION: This command sets the plugin path in the AWS CLI configuration file. Replace 'site-packages-path' with the actual path from the previous step.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/aws/aws-cli-endpoint/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\naws configure set plugins.cli_legacy_plugin_path site-packages-path\n```\n\n----------------------------------------\n\nTITLE: Configuring Dataverse JVM Options for Storj\nDESCRIPTION: Series of asadmin commands to configure Dataverse's JVM options for Storj integration, including endpoint settings, bucket configuration, and transfer parameters.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/dataverse/page.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n./asadmin create-jvm-options \"\\-Ddataverse.files.storj.type=s3\"\n./asadmin create-jvm-options \"\\-Ddataverse.files.storj.label=Storj\"\n./asadmin create-jvm-options \"\\-Ddataverse.files.storj.custom-endpoint-url=gateway.storjshare.io\"\n./asadmin create-jvm-options \"\\-Ddataverse.files.storj.custom-endpoint-region=us-1\"\n\n./asadmin create-jvm-options \"\\-Ddataverse.files.storj.bucket-name=dataverse\"\n./asadmin create-jvm-options \"\\-Ddataverse.files.storj.profile=default\"\n./asadmin create-jvm-options \"\\-Ddataverse.files.storj.path-style-access=false\"\n\n./asadmin create-jvm-options \"\\-Ddataverse.files.storj.payload-signing=false\"\n./asadmin create-jvm-options \"\\-Ddataverse.files.storj.upload-redirect=true\"\n./asadmin create-jvm-options \"\\-Ddataverse.files.storj.chunked-encoding=true\"\n./asadmin create-jvm-options \"\\-Ddataverse.files.storj.download-redirect=true\"\n./asadmin create-jvm-options \"\\-Ddataverse.files.storj.min-part-size=67198864\"\n./asadmin create-jvm-options \"\\-Ddataverse.files.storj.url-expiration-minutes=120\"\n```\n\n----------------------------------------\n\nTITLE: Creating Collection in Globus\nDESCRIPTION: Generic command structure for creating a new collection in Globus using the storage gateway ID.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/globus/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nglobus-connect-server collection create STORAGE_GATEWAY_ID  BASE_PATH DISPLAY_NAME\n```\n\n----------------------------------------\n\nTITLE: Moving an Object Within a Storj Bucket\nDESCRIPTION: Example of moving a file named 'cheesecake.jpg' within the 'cakes' bucket to a new location. This operation uses a server-side move method.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/mv/page.md#2025-04-16_snippet_1\n\nLANGUAGE: windows\nCODE:\n```\n.\\uplink.exe mv sj://cakes/cheesecake.jpg sj://cakes/New-York/cheesecake.jpg\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink mv sj://cakes/cheesecake.jpg sj://cakes/New-York/cheesecake.jpg\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink mv sj://cakes/cheesecake.jpg sj://cakes/New-York/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Creating a New JavaScript Project for Storj IPFS in Shell\nDESCRIPTION: These shell commands create a new directory for a JavaScript project to interact with the Storj IPFS Pinning Service, initialize an npm project, and install required dependencies.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/storj-ipfs-pinning/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmkdir storj-ipfs-quickstart\ncd storj-ipfs-quickstart\nnpm init\nnpm install got form-data\n```\n\n----------------------------------------\n\nTITLE: Log Configuration - CLI\nDESCRIPTION: Configuration entry for config.yaml to specify log file location for CLI installation\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/redirect-logs/page.md#2025-04-16_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nlog.output: \"/app/config/node.log\"\n```\n\n----------------------------------------\n\nTITLE: Removing Object Versions from Bucket with uplink (PowerShell)\nDESCRIPTION: This PowerShell version of the command removes all object versions from a Storj bucket with Object Lock enabled, even if the encryption phrase is lost. It requires uplink to be set up with advanced permissions.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/delete-buckets/page.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n./uplink ls --encrypted --recursive --all-versions sj://locked-bucket/ -o json | %{$o = ($_ | ConvertFrom-Json); ./uplink rm --encrypted --bypass-governance-retention --version-id $o.versionId $(\"sj://locked-bucket/\" + $o.key)}\n```\n\n----------------------------------------\n\nTITLE: Creating and forcefully replacing Access Grant in Uplink CLI\nDESCRIPTION: This command creates an Access Grant, imports it as 'us2', and forcefully replaces any existing access with the same name. It uses both '--import-as' and '--force' flags to achieve this.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-create/page.md#2025-04-16_snippet_3\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access create --import-as us2 --force\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access create --import-as us2 --force\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access create --import-as us2 --force\n```\n\n----------------------------------------\n\nTITLE: IPFS Node Peering Configuration\nDESCRIPTION: JSON configuration for peering with Storj IPFS nodes to improve download performance\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/storj-ipfs-pinning/page.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Peering\": {\n    \"Peers\": [\n      {\n        \"ID\": \"12D3KooWFFhc8fPYnQXdWBCowxSV21EFYin3rU27p3NVgSMjN41k\",\n        \"Addrs\": [\n          \"/ip4/5.161.92.43/tcp/4001\",\n          \"/ip4/5.161.92.43/udp/4001/quic\",\n          \"/ip6/2a01:4ff:f0:3b1e::1/tcp/4001\",\n          \"/ip6/2a01:4ff:f0:3b1e::1/udp/4001/quic\"\n        ]\n      },\n      {\n        \"ID\": \"12D3KooWSW4hoHmDXmY5rW7nCi9XmGTy3foFt72u86jNP53LTNBJ\",\n        \"Addrs\": [\n          \"/ip4/5.161.55.227/tcp/4001\",\n          \"/ip4/5.161.55.227/udp/4001/quic\",\n          \"/ip6/2a01:4ff:f0:1e5a::1/tcp/4001\",\n          \"/ip6/2a01:4ff:f0:1e5a::1/udp/4001/quic\"\n        ]\n      },\n      {\n        \"ID\": \"12D3KooWSDj6JM2JmoHwE9AUUwqAFUEg9ndd3pMA8aF2bkYckZfo\",\n        \"Addrs\": [\n          \"/ip4/5.161.92.36/tcp/4001\",\n          \"/ip4/5.161.92.36/udp/4001/quic\",\n          \"/ip6/2a01:4ff:f0:3764::1/tcp/4001\",\n          \"/ip6/2a01:4ff:f0:3764::1/udp/4001/quic\"\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting Hard Drive for Storagenode\nDESCRIPTION: Creates a mount point, retrieves the drive's UUID, and adds an entry to fstab for persistent mounting.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/install-storagenode-on-raspberry-pi3-or-higher-version/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo mkdir /mnt/storj\nlsblk\nsudo blkid /dev/<location (example: sda1)>\nsudo nano /etc/fstab\n```\n\n----------------------------------------\n\nTITLE: Modified Cron Job for Locate with Object Mount\nDESCRIPTION: Bash script modification for the mlocate cron job to support object storage indexing with Object Mount's Direct Interception.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/tips/page.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nLD_PRELOAD='/usr/lib/cuno.so' CUNO_OPTIONS='<your options>' CUNO_CREDENTIALS='<path to credentials usable by the root user>' flock --nonblock /run/mlocate.daily.lock $NOCACHE $IONICE nice /usr/bin/updatedb.mlocate\n```\n\n----------------------------------------\n\nTITLE: Starting Storage Node - Docker CLI\nDESCRIPTION: Command to start a previously stopped Storage Node Docker container.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/system-maintenance/page.md#2025-04-16_snippet_2\n\nLANGUAGE: none\nCODE:\n```\ndocker start storagenode\n```\n\n----------------------------------------\n\nTITLE: Running a Single Command with FlexMount\nDESCRIPTION: Example of using cuno run with the --flex option to execute a single command with Object Mount enabled, creating a new file in the bucket.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/basic/page.md#2025-04-16_snippet_11\n\nLANGUAGE: console\nCODE:\n```\ncuno run --flex \"$HOME/my-object-storage\" bash -c \"touch $HOME/object_storage_mount/s3/<bucket>/newfile\"\n```\n\n----------------------------------------\n\nTITLE: Configuring External Address in Storj Node YAML Config\nDESCRIPTION: YAML configuration example showing how to set the external address for a Storj storage node in the config.yaml file. This setting is critical for node connectivity and must include both the domain/IP and port number.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/node-offline-troubleshooting/page.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncontact.external-address: external.address.tld:28967\n```\n\n----------------------------------------\n\nTITLE: Example of Access Inspect Command with Flag Parameter on macOS\nDESCRIPTION: Alternative syntax for inspecting an access grant named 'cheesecake' using Uplink CLI on macOS systems. This demonstrates using the --access flag approach.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-inspect-command/page.md#2025-04-16_snippet_8\n\nLANGUAGE: macos\nCODE:\n```\nuplink access --access cheesecake inspect\n```\n\n----------------------------------------\n\nTITLE: Uplink Setup Encryption Passphrase Prompt\nDESCRIPTION: Command line prompt for creating and confirming an encryption passphrase during the Uplink setup process, which is used to encrypt files locally before uploading.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/setup-command/page.md#2025-04-16_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\nPassphrase:\nAgain:\n```\n\n----------------------------------------\n\nTITLE: Creating Path-Specific S3 Credential in Storj CLI\nDESCRIPTION: Creates and registers an access credential restricted to a specific path prefix within a bucket.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/concepts/multi-tenant-data/multi-tenant-access-management/page.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuplink access restrict --access <ACCESS_GRANT> --prefix sj://<BUCKET>/<PATH>/\nuplink access register <ACCESS_GRANT>\n```\n\n----------------------------------------\n\nTITLE: Compiling Storj from Source\nDESCRIPTION: Clones the Storj repository, compiles the project, and installs the binaries on Windows.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-windows/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/storj/storj -b main\ncd storj\ngo install ./...\n```\n\n----------------------------------------\n\nTITLE: ListBucketsWithAttribution Request Syntax for Storj Gateway-MT\nDESCRIPTION: Shows the HTTP request syntax for the ListBucketsWithAttribution API, a Storj-specific extension that includes Attribution in the Bucket XML element of the response.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/s3/s3-compatibility/page.md#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /?attribution HTTP/1.1\nHost: gateway.storjshare.io\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Address and External Contact in YAML for Storj Node\nDESCRIPTION: This YAML configuration sets the server address for the Storj node to listen on and specifies the external address for contact. It's particularly relevant for multi-node setups where different ports are used for external and internal communication.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/single-and-multinode-setup/page.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# public address to listen on\nserver.address: :28967\n\n# the public address of the node, useful for nodes behind NAT\ncontact.external-address: yourddns.domain.com:28968\n```\n\n----------------------------------------\n\nTITLE: Initializing Restic Repository\nDESCRIPTION: Generic command format for initializing a new Restic repository using Rclone as backend\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/restic/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ restic -r rclone:foo:bar init\n```\n\n----------------------------------------\n\nTITLE: Viewing Last 20 Lines of Storagenode Log (Windows GUI Install)\nDESCRIPTION: This PowerShell command displays and continuously updates the last 20 lines of the Storagenode log file for GUI installations on Windows. It accesses the log file in the default installation directory.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/check-logs/page.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Content \"$env:ProgramFiles/Storj/Storage Node/storagenode.log\" -Tail 20 -Wait\n```\n\n----------------------------------------\n\nTITLE: Rclone Configuration Setup\nDESCRIPTION: Configuration file content for setting up Wasabi and Storj connections in rclone. Includes access credentials and endpoint settings for both services.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/migrate/wasabi/page.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[wasabi]\ntype = s3\nprovider = Wasabi\naccess_key_id =  access_key # REPLACE ME\nsecret_access_key = secret_key  # REPLACE ME\nendpoint = s3.us-central-1.wasabisys.com # REPLACE ME\nacl = private\n\n[storj]\ntype = storj\naccess_grant = access_grant # REPLACE ME\n```\n\n----------------------------------------\n\nTITLE: Verifying Object Mount Installation on Mac\nDESCRIPTION: Command to check the installed version of Object Mount on Mac. This runs the version check command through the Mac-specific wrapper that manages the Docker container.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/download-install/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# terminal\ncuno-mac version\n```\n\n----------------------------------------\n\nTITLE: Accessing Storj Storage Node Dashboard Locally\nDESCRIPTION: Command to access the Storj storage node dashboard directly on the local machine. This URL opens the dashboard in a web browser, allowing operators to monitor their node's activity.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/gui-windows/dashboard/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttp://127.0.0.1:14002/\n```\n\n----------------------------------------\n\nTITLE: Using cp Command in Linux Environment\nDESCRIPTION: Basic syntax for using the cp command in Linux environment with Uplink CLI to copy files between local storage and Storj DCS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuplink cp [flags] SOURCE DESTINATION\n```\n\n----------------------------------------\n\nTITLE: Setting up Storj Storage Node (Linux/macOS)\nDESCRIPTION: This command sets up the Storj Storage Node on Linux or macOS. It requires specifying the identity and storage directories, and should only be run once during initial setup.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/cli/storage-node/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -e SETUP=\"true\" \\\n    --user $(id -u):$(id -g) \\\n    --mount type=bind,source=\"<identity-dir>\",destination=/app/identity \\\n    --mount type=bind,source=\"<storage-dir>\",destination=/app/config \\\n    --name storagenode storjlabs/storagenode:latest\n```\n\n----------------------------------------\n\nTITLE: Docker Container Registry Manifest Structure\nDESCRIPTION: Example of a Docker container manifest JSON file that defines required blobs and layer descriptors\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/docker/page.md#2025-04-16_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\n{\n \"schemaVersion\": 2,\n \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n \"config\": {\n   \"mediaType\": \"application/vnd.docker.container.image.v1+json\",\n   \"size\": 4416,\n   \"digest\": \"sha256:833c7a986ed965eec8fe864223920c366fb0a25dd23edd0bdd2a4428fd0ce1e2\"\n },\n \"layers\": [\n   {\n     \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n     \"size\": 5865472,\n     \"digest\": \"sha256:e2eb06d8af8218cfec8210147357a68b7e13f7c485b991c288c2d01dc228bb68\"\n   }\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Credentials into Object Mount\nDESCRIPTION: Command to import credentials from a file into Object Mount. This process discovers all accessible buckets and their compatibility settings associated with the provided credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncuno creds import credentials.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Linksharing Credentials for Public Access\nDESCRIPTION: This command generates a linksharing key for public, read-only access to the Storj bucket. It disallows listing and sets no expiration date.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/mastodon/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuplink share --url --readonly --disallow-lists --not-after=none sj://BUCKET\n```\n\n----------------------------------------\n\nTITLE: Downloading Identity Binary - Linux ARM\nDESCRIPTION: Commands to download and setup the identity binary for Linux ARM systems like Raspberry Pi\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/identity/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/storj/storj/releases/latest/download/identity_linux_arm.zip -o identity_linux_arm.zip\nunzip -o identity_linux_arm.zip\nchmod +x identity\nsudo mv identity /usr/local/bin/identity\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Raspberry Pi\nDESCRIPTION: Installs Docker using the official installation script and enables Docker services to start on boot.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/install-storagenode-on-raspberry-pi3-or-higher-version/page.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://get.docker.com | sh\nsudo systemctl enable docker.service\nsudo systemctl enable containerd.service\n```\n\n----------------------------------------\n\nTITLE: Upload File Using Uplink CLI - Windows\nDESCRIPTION: Command to upload a file named cheesecake.jpg from Desktop to Storj bucket 'cakes' using Windows Uplink CLI executable\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/uploading-your-first-object/upload-an-object/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe cp ~/Desktop/cheesecake.jpg sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Example Storj Storagenode Setup Command with Specific Paths\nDESCRIPTION: An example of the Docker setup command with specific file paths for a Raspberry Pi implementation. It binds the identity directory from the Pi's home directory and the storage directory from an external mount point for persistent storage.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/install-storagenode-on-raspberry-pi3-or-higher-version/page.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -e SETUP=\"true\" \\\n--mount type=bind,source=\"/home/pi/.local/share/storj/identity/storagenode\",destination=/app/identity \\\n--mount type=bind,source=\"/mnt/storj/storagenode\",destination=/app/config \\\n--name storagenode storjlabs/storagenode:latest\n```\n\n----------------------------------------\n\nTITLE: Running Gateway ST with Specific Access Grant on macOS\nDESCRIPTION: Command to run the Gateway with a specified access grant on macOS systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_17\n\nLANGUAGE: text\nCODE:\n```\ngateway run --access 14aV....\n```\n\n----------------------------------------\n\nTITLE: Configuring zkSync Era in Storage Node YAML Config\nDESCRIPTION: Configuration setting to enable zkSync Era wallet features in the storage node's config.yaml file. This setting needs to be added or updated to enable L2 payments.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/payouts/zk-sync-opt-in-for-snos/page.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noperator.wallet-features: ['zksync-era']\n```\n\n----------------------------------------\n\nTITLE: Using sudo with Direct Interception in Object Mount\nDESCRIPTION: Command demonstrating how to properly use sudo with Direct Interception in Object Mount by preserving environment variables and setting LD_PRELOAD in a child shell.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/tips/page.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nsudo --preserve-env /bin/bash -c \"export LD_PRELOAD=$LD_PRELOAD && <YOUR COMMAND HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Command Output Example\nDESCRIPTION: Example output shown after successfully exporting an Access Grant to a file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-export/page.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nExported access to: us1.txt\n```\n\n----------------------------------------\n\nTITLE: Pinning a File with Optional Arguments Using cURL in Shell\nDESCRIPTION: This example shows how to pin a file to the Storj IPFS Pinning Service using cURL with optional arguments. It wraps the file in a directory and uses CIDv1 for the content identifier.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/storj-ipfs-pinning/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u ipfs_beta_user:ipfs_beta_password -X POST -F file=@/path/file.extension \"https://www.storj-ipfs.com/api/v0/add?wrap-with-directory&cid-version=1\"\n```\n\n----------------------------------------\n\nTITLE: Copying Storage Data with Rsync\nDESCRIPTION: Command to copy storage node data using rsync with archive mode and progress display\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrsync -aP /mnt/storj/storagenode/storage/ /mnt/storj2/storagenode-new/storage/\n```\n\n----------------------------------------\n\nTITLE: Installing Storj Gateway using Helm\nDESCRIPTION: Command to install the S3-compatible gateway (formerly Tardigrade) using Helm v3.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/mongodb/page.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n➜  addons git:(master) ✗ helm install s3-gateway tardigade-gateway\nNAME: s3-gateway\nLAST DEPLOYED: Sat May 30 07:52:43 2020\nNAMESPACE: total-cluster\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\n```\n\n----------------------------------------\n\nTITLE: Viewing Last 20 Lines of Log File (Windows PowerShell)\nDESCRIPTION: This PowerShell command displays and continuously updates the last 20 lines of a specified log file on Windows. Replace 'pathtologfile' with the actual path to your log file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/check-logs/page.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Content \"pathtologfile\" -Tail 20 -Wait\n```\n\n----------------------------------------\n\nTITLE: Creating S3-compatible Credentials File Format for Object Mount\nDESCRIPTION: Example format for S3-compatible storage solution credentials file containing the access key ID, secret access key, and endpoint. This format allows Object Mount to authenticate with various S3-compatible storage providers.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\naws_access_key_id = xxxxxxxxxxxxxxxxxx\naws_secret_access_key = xxxxxxxxxxxxxxxxxx\nendpoint=http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Downloading Object Mount Package for RHEL\nDESCRIPTION: Command to download the latest self-extracting package for Red Hat Enterprise Linux using wget.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/redhat/page.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwget https://github.com/cunoFS/cunoFS/releases/latest/download/cuno_x86_64_glibc_rpm.run\n```\n\n----------------------------------------\n\nTITLE: Verifying Watchtower Container Status (Shell)\nDESCRIPTION: Command to check if the Watchtower container is running properly. It displays all Docker containers, including the Watchtower container with its uptime.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/cli/software-updates/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker ps -a\n```\n\n----------------------------------------\n\nTITLE: Generating Shareable URL with Uplink CLI - MacOS\nDESCRIPTION: Command to generate a shareable URL for a file stored in Storj using Uplink CLI on MacOS. The --not-after flag sets a 2-hour expiration time for the link.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/uploading-your-first-object/view-distribution-of-an-object/page.md#2025-04-16_snippet_1\n\nLANGUAGE: macos\nCODE:\n```\nuplink share --url --not-after=+2h sj://cakes/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Port Configuration for Storj Storage Node\nDESCRIPTION: Demonstrates the port mapping syntax for TCP and UDP connections between host and container, including the core network port (28967) and GUI dashboard port (14002).\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/concepts/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-p <host-port>:<container-port>/tcp\n-p <host-port>:<container-port>/udp\n-p 28967:28967\n-p 14002:14002\n```\n\n----------------------------------------\n\nTITLE: Executing Generic Storagenode Commands\nDESCRIPTION: Template for executing any command on the Storagenode. The <<command>> placeholder should be replaced with the specific command to run.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/other-commands/page.md#2025-04-16_snippet_1\n\nLANGUAGE: none\nCODE:\n```\ndocker exec -it storagenode /app/storagenode <<command>>\n```\n\nLANGUAGE: powershell\nCODE:\n```\n&\"$env:ProgramFiles\\Storj\\Storage Node\\storagenode.exe\" <<command>>\n```\n\n----------------------------------------\n\nTITLE: Writing an Object to S3-compatible Storage Bucket with Object Mount\nDESCRIPTION: Creates a text file in an S3-compatible storage bucket using Object Mount. This command writes the text 'hello world' to a file named 'helloworld.txt' in 'bucket1'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\necho \"hello world\" > s3://bucket1/helloworld.txt\n```\n\n----------------------------------------\n\nTITLE: Combining Trace and Access Log Levels in Bash\nDESCRIPTION: This example shows how to combine the 'trace' and 'access' log levels when performing a directory listing on an S3 bucket. It demonstrates the additional file access logging provided by the 'access' option.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/configuration/page.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ CUNO_LOG=trace,access ls s3://example-bucket\ncuno: [DEBUG][07/17/23 13:59:03.287][P/T: 296181:2897806400] Not On EC2\ncuno: [DEBUG][07/17/23 13:59:03.287][P/T: 296181:2897806400] Using Certs: /etc/ssl/certs/ca-certificates.crt\ncuno: [ACCESS][07/17/23 13:59:03.355][P/T: 296181:2897806400] s3://example-bucket/file write() 12 @ 0\n```\n\n----------------------------------------\n\nTITLE: Downloading the Object Mount Musl Installer\nDESCRIPTION: This command downloads the latest version of the Object Mount Musl installer using wget.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/musl/page.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwget https://github.com/cunoFS/cunoFS/releases/latest/download/cuno-musl-installer.run\n```\n\n----------------------------------------\n\nTITLE: Pulling Storagenode Docker Image\nDESCRIPTION: Downloads the latest Storj storagenode Docker image for deployment.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/install-storagenode-on-raspberry-pi3-or-higher-version/page.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull storjlabs/storagenode:latest\n```\n\n----------------------------------------\n\nTITLE: Viewing Final Graceful Exit Status\nDESCRIPTION: This snippet demonstrates the final output of a completed graceful exit process for a Storj storage node. It shows the completion status, percentage, and the completion receipt which is crucial for receiving the held amount back.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/graceful-exit-guide/page.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nroot@kali:~# storagenode exit-status\n\nDomain Name     Node ID                                             Percent Complete Successful Completion Receipt \n127.0 0 1:10000 12fbck97kqEGbWPu673CpeyrXavtqgVriyv9pCfL3mpw3yz2zN9 100.00%          Y          0a473045022100da86329cfb4f5bb16f0702c1d073c3a8b54787311b54855bcf01a8e245250040022003ef911b3b2b2bea86ba34cd4927223f2718cd35c3b7de7cc030cd3a8ce4959a1220db55bd9fa76e8938be5a7a25c970d48bde19936e269dcf69a3ab9fa41b5486001a207508f9a6138cdc4089ea075f1553736d472cb1d3afa4397496a8eb948d121200220c08abe5dcf0051086e6fefe01\nYour node should automatically delete any remaining data for the satellite(s) it exited from when graceful exit is completed.\n```\n\n----------------------------------------\n\nTITLE: Non-interactive License Activation with Pipe in Console\nDESCRIPTION: Command to activate a license non-interactively by piping the license key as input. An alternative method for automated deployments.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/activation/page.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\necho \"<your licence key>\" | cuno creds activate\n```\n\n----------------------------------------\n\nTITLE: Registering Access Grants with Uplink CLI\nDESCRIPTION: Basic command syntax for registering an access grant with a hosted gateway using the uplink CLI across Windows, Linux, and macOS platforms. This command allows you to specify whether the access should be public and which authentication service to use.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-register/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access register <flags> <ACCESS-GRANT>\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access register <flags> <ACCESS-GRANT>\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access register <flags> <ACCESS-GRANT>\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Watchtower Image for Storj (Shell)\nDESCRIPTION: Command to pull the latest Watchtower image from Docker Hub for automatic updates of the Storj storage node.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/cli/software-updates/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull storjlabs/watchtower\n```\n\n----------------------------------------\n\nTITLE: Checking All SQLite3 Databases in Windows PowerShell\nDESCRIPTION: This PowerShell command checks the integrity of all .db files in the specified directory using SQLite3 and displays the results.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-fix-a-database-disk-image-is-malformed/page.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nGet-ChildItem X:\\storagenode\\storage\\*.db -File | %{$_.Name + \" \" + $(sqlite3.exe $_.FullName \"PRAGMA integrity_check;\")}\n```\n\n----------------------------------------\n\nTITLE: Setting Permanent UDP Buffer Size in Linux\nDESCRIPTION: Commands to permanently configure the UDP receive buffer size to 2.5MB and apply the change immediately. These settings persist across system reboots.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/quic-requirements/linux-configuration-for-udp/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho \"net.core.rmem_max=2500000\" >> /etc/sysctl.d/udp_buffer.conf\n\nsysctl -w net.core.rmem_max=2500000\n```\n\n----------------------------------------\n\nTITLE: Access Use Command Output\nDESCRIPTION: The expected output message when successfully switching the default access to a different access named 'us1'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-use/page.md#2025-04-16_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nSwitched default access to \"us1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Uplink CLI\nDESCRIPTION: Imports the access grant for the local Storj network into the Uplink CLI configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-windows/page.md#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nuplink import $(storj-sim network env GATEWAY_0_ACCESS)\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variables to Jupyter Container\nDESCRIPTION: This YAML snippet adds environment variables to the Jupyter container for secure access to the Storj gateway without hard-coding credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/use-storj-dcs-from-cloud-native-environments-using-sidecar-pattern/page.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n   spec:\n     containers:\n     - name: jupyter\n       image: jupyter/base-notebook\n       ports:\n         - containerPort: 8888\n           hostPort: 8888\n       env:\n       - name: AWS_ACCESS_KEY_ID\n         valueFrom:\n           secretKeyRef:\n             name: storj-gateway\n             key: storj-gateway-key\n       - name: AWS_SECRET_ACCESS_KEY\n         valueFrom:\n           secretKeyRef:\n             name: storj-gateway\n             key: storj-gateway-secret\n     - name: storj-sidecar\n```\n\n----------------------------------------\n\nTITLE: Access Use Command Example in macOS\nDESCRIPTION: Example demonstrating how to switch to an access named 'us1' in macOS. This assumes you have multiple accesses previously set up in your Uplink configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-use/page.md#2025-04-16_snippet_5\n\nLANGUAGE: macos\nCODE:\n```\nuplink access use us1\n```\n\n----------------------------------------\n\nTITLE: Using Access Grant with Copy Command\nDESCRIPTION: Commands demonstrating how to use an access grant with the copy command to download a shared object across different operating systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/sharing-your-first-object/import-access/page.md#2025-04-16_snippet_4\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe cp --access cheesecake sj://cakes/cheesecake.jpg .\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink cp --access cheesecake sj://cakes/cheesecake.jpg .\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink cp --access cheesecake sj://cakes/cheesecake.jpg .\n```\n\n----------------------------------------\n\nTITLE: Installing Object Mount System-wide\nDESCRIPTION: Command to run the Object Mount installer system-wide, requiring sudo privileges for installation accessible to all users.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/glibc/page.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nsudo sh cuno-glibc-installer.run\n```\n\n----------------------------------------\n\nTITLE: Deleting an Empty Bucket with Uplink CLI\nDESCRIPTION: Commands to delete an empty bucket named 'cakes' using the rb command. This operation will only succeed if the bucket contains no objects.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/rb-command/page.md#2025-04-16_snippet_1\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe rb sj://cakes\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink rb sj://cakes\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink rb sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Confirming Identity Files - Linux/macOS\nDESCRIPTION: Commands to verify the presence and validity of identity files on Unix-based systems\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/identity/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngrep -c BEGIN ~/.local/share/storj/identity/storagenode/ca.cert\ngrep -c BEGIN ~/.local/share/storj/identity/storagenode/identity.cert\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Web Dashboard in Bash\nDESCRIPTION: Command to access the Storage Node Operator Web Dashboard from the local machine. This URL should be opened in a web browser.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/cli/dashboard-cli/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttp://127.0.0.1:14002/\n```\n\n----------------------------------------\n\nTITLE: IPFS Gateway URL Format\nDESCRIPTION: URL format for accessing content through the Storj IPFS Gateway\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/storj-ipfs-pinning/page.md#2025-04-16_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nhttps://www.storj-ipfs.com/ipfs/<cid>\n```\n\n----------------------------------------\n\nTITLE: Configuring URI Patching for Java Applications\nDESCRIPTION: Example of using the +uricompat option to intercept Java applications when handling URI-style paths. This demonstrates how to target specific JAR files or Java classes.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/configuration/page.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nexport CUNO_OPTIONS=\"+uricompat=java/2/appname.jar:java/*/org.name.main.Class\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Applications for URI Patching in Object Mount\nDESCRIPTION: Example of how to specify applications that should have their URI handling patched using the +uricompat option. This allows Object Mount to override internal URI handling in specified applications.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/configuration/page.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n+uricompat=<executable 1>:<exectuable 2>:< ... >\n```\n\n----------------------------------------\n\nTITLE: Submitting Jobs to the Object Mount LSF Queue\nDESCRIPTION: Example of submitting a job to the dedicated 'cuno' queue in LSF, which automatically enables Object Mount functionality for the job without needing explicit 'cuno run' prefixing.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/advanced/page.md#2025-04-16_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nbsub -q cuno -Is ls -l s3://demo\n```\n\n----------------------------------------\n\nTITLE: Signing Storagenode Identity\nDESCRIPTION: Authorizes the storagenode identity using the provided authorization token.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/install-storagenode-on-raspberry-pi3-or-higher-version/page.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n./identity_windows_amd64.exe authorize storagenode user@example.com:ohihioHiohohIOhUyTUfyufVJHvufUyvJHvyFTYdhVJGionOoHib\n```\n\n----------------------------------------\n\nTITLE: Checking Failed Audits and Repairs in Linux/MacOS Docker Logs\nDESCRIPTION: This bash command searches Docker logs for failed GET_AUDIT or GET_REPAIR operations on a Storj storage node. It helps identify reasons for node suspension.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/suspension-mode/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs storagenode 2>&1 | grep -E \"GET_AUDIT|GET_REPAIR\" | grep failed\n```\n\n----------------------------------------\n\nTITLE: Activating Object Mount License on Mac\nDESCRIPTION: Command to activate the Object Mount license on Mac systems. This launches a temporary Docker container with the Object Mount installation mounted into it and runs the activation command inside the container.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/download-install/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# terminal\ncuno-mac creds activate\n```\n\n----------------------------------------\n\nTITLE: Creating a New Bucket in Linux for Server-Side Copy\nDESCRIPTION: Example of creating a new bucket in preparation for server-side copy operations in Linux. This uses the mb command which is a prerequisite for copying between buckets.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nuplink mb sj://new-recipes\n```\n\n----------------------------------------\n\nTITLE: Starting Storage Node - Windows Service\nDESCRIPTION: PowerShell command to start the Storj V3 Storage Node Windows service.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/system-maintenance/page.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nStart-Service storagenode\n```\n\n----------------------------------------\n\nTITLE: Editing Dumped SQL File in Linux or Docker\nDESCRIPTION: This command processes the dumped SQL file, adding a PRAGMA statement and removing transaction-related commands, creating a new SQL file for database reconstruction.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-fix-a-database-disk-image-is-malformed/page.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n{ echo \"PRAGMA synchronous = OFF ;\"; cat /storage/dump_all.sql; } | grep -v -e TRANSACTION -e ROLLBACK -e COMMIT >/storage/dump_all_notrans.sql\n```\n\n----------------------------------------\n\nTITLE: Running CLI Storage Node Dashboard in Bash\nDESCRIPTION: Docker command to execute the CLI dashboard for monitoring storage node activity. This command runs the dashboard script inside the storagenode container.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/cli/dashboard-cli/page.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it storagenode /app/dashboard.sh\n```\n\n----------------------------------------\n\nTITLE: Revoking an access grant in macOS\nDESCRIPTION: Example of revoking an access grant by its value in macOS. This command revokes the access permissions associated with the specified access grant value.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-revoke/page.md#2025-04-16_snippet_9\n\nLANGUAGE: macos\nCODE:\n```\nuplink access revoke 19hFrjmsi...\n```\n\n----------------------------------------\n\nTITLE: Development Environment Configuration\nDESCRIPTION: Ruby configuration to set ActiveStorage service in development\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/rails-activestorage/page.md#2025-04-16_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_storage.service = :storj\n```\n\n----------------------------------------\n\nTITLE: Object Mount Path Access Examples\nDESCRIPTION: Examples showing how to access object storage using both URI and path formats in Direct Interception mode\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/basic/page.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cuno\n(cuno) $ ls s3://<bucket>/<path>\n(cuno) $ ls /cuno/s3/<bucket>/<path>\n```\n\n----------------------------------------\n\nTITLE: Access Credentials Output Format\nDESCRIPTION: Sample output showing the returned credentials after registering an access grant. The output includes an Access Key ID, Secret Key, and the Endpoint URL for accessing the storage through the gateway.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-register/page.md#2025-04-16_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n========== CREDENTIALS ===================================================================\nAccess Key ID: jw7w7n2...\nSecret Key   : jycbodr...\nEndpoint     : https://gateway.storjshare.io\n```\n\n----------------------------------------\n\nTITLE: Setting File Permissions for Microsoft Azure Credentials\nDESCRIPTION: Command to change file permissions to secure credentials file by making it readable only by the owner. This is important for security when storing sensitive Azure credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# terminal\nchmod 0600 \"<path to your credentials file>\"\n```\n\n----------------------------------------\n\nTITLE: Upload File Using Uplink CLI - Linux\nDESCRIPTION: Command to upload a file named cheesecake.jpg from Desktop to Storj bucket 'cakes' using Linux Uplink CLI\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/uploading-your-first-object/upload-an-object/page.md#2025-04-16_snippet_2\n\nLANGUAGE: linux\nCODE:\n```\nuplink cp ~/Desktop/cheesecake.jpg sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Recursively Listing All Objects\nDESCRIPTION: Commands to recursively list all objects in all buckets, showing the complete hierarchy rather than just the top level.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/ls-command/page.md#2025-04-16_snippet_4\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe ls --recursive\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink ls --recursive\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink ls --recursive\n```\n\n----------------------------------------\n\nTITLE: Confirming Identity Files - Windows\nDESCRIPTION: PowerShell commands to verify the presence and validity of identity files on Windows\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/identity/page.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n(sls BEGIN \"$env:AppData\\Storj\\Identity\\storagenode\\ca.cert\").count\n(sls BEGIN \"$env:AppData\\Storj\\Identity\\storagenode\\identity.cert\").count\n```\n\n----------------------------------------\n\nTITLE: Stopping Storage Node - Windows Service\nDESCRIPTION: PowerShell command to stop the Storj V3 Storage Node Windows service.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/system-maintenance/page.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nStop-Service storagenode\n```\n\n----------------------------------------\n\nTITLE: Altering file change time on POSIX-enabled Object Mount\nDESCRIPTION: Example showing how changing file permissions updates the change time in a POSIX-enabled Object Mount. The stat command displays the updated timestamps reflecting the chmod operation.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/configuration/page.md#2025-04-16_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ chmod +x /mnt/s3-bucket/file\n$ stat /mnt/s3-bucket/file\nFile: /mnt/s3-bucket/file\nSize: 6               Blocks: 1          IO Block: 65536  regular file\nDevice: 49h/73d Inode: 4           Links: 1\nAccess: (0770/-rwxrwx---)  Uid: ( 1009/   alice)   Gid: ( 0/    root)\nAccess: 2021-11-10 11:32:59.185000000 +0000\nModify: 2021-11-10 11:32:59.185000000 +0000\nChange: 2021-11-10 11:47:21.846000000 +0000\n```\n\n----------------------------------------\n\nTITLE: Verifying DNS Records with dig Command\nDESCRIPTION: Command to check if DNS records are properly set up for a Storj-hosted static website using the dig utility. It queries TXT records for the specified hostname.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/static-site-hosting/page.md#2025-04-16_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\ndig @1.1.1.1 txt-<hostname>.<domain> TXT\n```\n\n----------------------------------------\n\nTITLE: Creating Storagenode Identity on Windows\nDESCRIPTION: Generates a new storagenode identity using the Windows identity binary.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/install-storagenode-on-raspberry-pi3-or-higher-version/page.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n./identity_windows_amd64.exe create storagenode\n```\n\n----------------------------------------\n\nTITLE: Setting Up Uplink CLI in Linux\nDESCRIPTION: Command to set up the Uplink CLI tool in Linux environment. This is part of the process for creating keys for CLI usage in Storj.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/access/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuplink setup\n```\n\n----------------------------------------\n\nTITLE: Checking All SQLite3 Databases in Linux\nDESCRIPTION: This command finds all .db files in the specified directory and performs an integrity check on each of them using SQLite3.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-fix-a-database-disk-image-is-malformed/page.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfind /path/to/storage/ -maxdepth 1 -iname \"*.db\" -print0 -exec sqlite3 '{}' 'PRAGMA integrity_check;' ';'\n```\n\n----------------------------------------\n\nTITLE: Installing Object Mount APK on Alpine Linux\nDESCRIPTION: This command installs Object Mount on Alpine Linux using the APK package manager. It allows untrusted packages and specifies the version and architecture.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/install/page.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nsudo apk add --allow-untrusted ./cuno_{FULL-VERSION}_amd64_musl/cuno_{FULL-VERSION}_amd64_musl.apk\n```\n\n----------------------------------------\n\nTITLE: Installing awscli-plugin-endpoint for AWS CLI v1.x\nDESCRIPTION: This command installs the awscli-plugin-endpoint plugin for AWS CLI v1.x.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/aws/aws-cli-endpoint/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip3 install awscli-plugin-endpoint\n```\n\n----------------------------------------\n\nTITLE: Immediately Updating UDP Buffer Size on macOS/FreeBSD\nDESCRIPTION: This command immediately updates the maximum socket buffer size to 2875000 bytes without requiring a system reboot. It uses sudo to execute the sysctl command with root privileges.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/quic-requirements/macosfreebsd-configuration-for-udp/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo sysctl -w kern.ipc.maxsockbuf=2875000\n```\n\n----------------------------------------\n\nTITLE: Checking Graceful Exit Status for Multiple Windows Storage Nodes\nDESCRIPTION: This code snippet shows how to check the status of the graceful exit process for multiple Storj storage nodes on the same Windows machine. It includes the command with custom server.private-address and paths for config and identity directories.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/graceful-exit-guide/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"C:\\Program Files\\Storj\\Storage Node\\storagenode.exe\" exit-status --config-dir \"C:\\Program Files\\Storj\\Storage Node2\\\" --identity-dir \"C:\\Users\\USER\\AppData\\Roaming\\Storj\\Identity\\storagenode2\" --log.output stderr --server.private-address 127.0.0.1:7779\n```\n\n----------------------------------------\n\nTITLE: Running Gateway ST as Static Website Host on macOS\nDESCRIPTION: Command to run the Gateway with website hosting capability enabled on macOS systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_21\n\nLANGUAGE: text\nCODE:\n```\ngateway run --access 14aV.... --website\n```\n\n----------------------------------------\n\nTITLE: Installing NodeJS LTS with Chocolatey\nDESCRIPTION: Uses Chocolatey package manager to install the LTS version of NodeJS on Windows.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-windows/page.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nchoco install nodejs-lts\n```\n\n----------------------------------------\n\nTITLE: Listing Buckets in AWS S3 with Object Mount\nDESCRIPTION: Lists all paired buckets in AWS S3 using Object Mount. This command requires that Object Mount be enabled first by running the 'cuno' command.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nls s3://\n```\n\n----------------------------------------\n\nTITLE: Uploading Content to Storj Bucket using Uplink CLI\nDESCRIPTION: These commands create a simple HTML file and upload it to a Storj bucket using the Uplink CLI. This is part of the process for hosting a website on a custom domain with Storj.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/static-site-hosting/custom-domains/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho '<div>Hello world!</div>' > index.html\nuplink cp index.html sj://my-website\n```\n\n----------------------------------------\n\nTITLE: Installing libgcc package on Alpine Linux\nDESCRIPTION: This command installs the libgcc package on Alpine Linux, which is a prerequisite for the Object Mount installation.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/musl/page.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\napk add libgcc\n```\n\n----------------------------------------\n\nTITLE: Reading an Object from Google Cloud Storage Bucket with Object Mount\nDESCRIPTION: Displays the content of a file stored in a Google Cloud Storage bucket using Object Mount. This command reads and outputs the content of 'helloworld.txt' from 'bucket1'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\ncat gs://bucket1/helloworld.txt\n```\n\n----------------------------------------\n\nTITLE: Downloading Identity Binary - Windows\nDESCRIPTION: PowerShell command to download and extract the identity binary for Windows systems\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/identity/page.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; curl https://github.com/storj/storj/releases/latest/download/identity_windows_amd64.zip -o identity_windows_amd64.zip; Expand-Archive ./identity_windows_amd64.zip . -Force\n```\n\n----------------------------------------\n\nTITLE: Initiating Graceful Exit for Windows Storage Nodes\nDESCRIPTION: This code snippet shows how to start the graceful exit process for a Storj storage node on Windows using the command prompt. It includes the full command with paths to the executable, config directory, and identity directory.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/graceful-exit-guide/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"C:\\Program Files\\Storj\\Storage Node\\storagenode.exe\" exit-satellite --config-dir \"C:\\Program Files\\Storj\\Storage Node\\\\\" --identity-dir \"C:\\Users\\USER\\AppData\\Roaming\\Storj\\Identity\\storagenode2\" --log.output stderr\n\nPlease be aware that by starting a graceful exit from a satellite, you will no longer be allowed to participate in repairs or uploads from that satellite. This action can not be undone. Are you sure you want to continue? y/n : y\n\nDomain Name                      Node ID                                             Space Used\nap1.storj.io:7777   121RTSDpyNZVcEU84Ticf2L1ntiuUimbWgfATz21tuvgk3vzoA6 37.9 GB\nus1.storj.io:7777  12EayRS2V1kEsWESU9QMRseFhdxYxKicsiFmxrsLZHeLUtdps3S 38.7 GB\neu1.storj.io:7777 12L9ZFwhzVpuEKMUNUqkaTLGzwY9G24tbiigLiXpmZWKwmcNDDs 0.8 TB\n\nPlease enter a space delimited list of satellite domain names you would like to gracefully exit. Press enter to continue: ap1.storj.io:7777 us1.storj.io:7777 eu1.storj.io:7777\n```\n\n----------------------------------------\n\nTITLE: Database Error Example\nDESCRIPTION: Common database error messages that may occur after abrupt system shutdowns or power failures\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/machine-restart-shutdown/page.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndatabase error: database disk image is malformed\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ndatabase: file is not a database\n```\n\n----------------------------------------\n\nTITLE: Verifying LSF Queue Configuration\nDESCRIPTION: Command to check that the Object Mount queue was set up correctly in LSF by displaying detailed information about the 'cuno' queue.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/advanced/page.md#2025-04-16_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nbqueues -l cuno\n```\n\n----------------------------------------\n\nTITLE: Example Log Object Key Format in Storj\nDESCRIPTION: The format used for naming log objects in Storj. It follows a non-date-based partitioning scheme that includes timestamp information and a unique string identifier.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/bucket-logging/page.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[DestinationPrefix][YYYY]-[MM]-[DD]-[hh]-[mm]-[ss]-[UniqueString]\n```\n\n----------------------------------------\n\nTITLE: Removing Corrupted SQLite3 Database\nDESCRIPTION: This command removes the corrupted database file after ensuring a backup has been created.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-fix-a-database-disk-image-is-malformed/page.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nrm /storage/bandwidth.db\n```\n\n----------------------------------------\n\nTITLE: Extending Filesystem on Raspberry Pi\nDESCRIPTION: Launches the Raspberry Pi configuration tool to expand the filesystem and use the full SD card capacity.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/install-storagenode-on-raspberry-pi3-or-higher-version/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo raspi-config\n```\n\n----------------------------------------\n\nTITLE: Downloading cunoFS Installer for Alpine\nDESCRIPTION: Command to download the latest version of the self-extracting package for Alpine using wget.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/alpine/page.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwget https://github.com/cunoFS/cunoFS/releases/latest/download/cuno_x86_64_musl_apk.run\n```\n\n----------------------------------------\n\nTITLE: Unpairing Storage Bucket Credentials\nDESCRIPTION: Command to dissociate a container from its credential file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/credentials/page.md#2025-04-16_snippet_9\n\nLANGUAGE: console\nCODE:\n```\ncuno creds unpair [bucket_remote_uri]\n```\n\n----------------------------------------\n\nTITLE: Basic Object Mount CLI Initialization\nDESCRIPTION: Simple command to launch a new interactive shell with Object Mount in Direct Interception mode\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/basic/page.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncuno\n```\n\n----------------------------------------\n\nTITLE: Downloading Object Mount Glibc Installer with wget\nDESCRIPTION: Command to download the latest version of the Object Mount Glibc installer from the cunoFS GitHub repository using wget.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/glibc/page.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwget https://github.com/cunoFS/cunoFS/releases/latest/download/cuno-glibc-installer.run\n```\n\n----------------------------------------\n\nTITLE: Downloading Helm Chart Manually\nDESCRIPTION: Command to download and extract the Object Mount CSI Driver Helm chart for manual configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nhelm pull --untar oci://registry-1.docker.io/cunofs/cunofs-csi-chart\n```\n\n----------------------------------------\n\nTITLE: Using errgroup.Group for Concurrent Processing in Go\nDESCRIPTION: This snippet shows how to use errgroup.Group from golang.org/x/sync/errgroup as a better alternative to sync.WaitGroup. It handles errors and simplifies goroutine management.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfunc processConcurrently(item []*Item) error {\n\tvar g errgroup.Group\n\tfor _, item := range items {\n\t\titem := item\n\t\tif filepath.Ext(item.Path) != \".go\" {\n\t\t\tcontinue\n\t\t}\n\t\tg.Go(func() error {\n\t\t\treturn process(item)\n\t\t})\n\t}\n\treturn g.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Auto-Update for Storj Storage Node (Shell)\nDESCRIPTION: Docker command to run Watchtower for automatic updates of the Storj storage node. It configures Watchtower to check for updates every 12-72 hours and update the node when a new version is available.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/cli/software-updates/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --restart=always --name watchtower -v /var/run/docker.sock:/var/run/docker.sock storjlabs/watchtower storagenode watchtower --stop-timeout 300s\n```\n\n----------------------------------------\n\nTITLE: S3 Endpoint Examples\nDESCRIPTION: Example endpoint configurations for S3-compatible storage solutions.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/credentials/page.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nendpoint = http://127.0.0.1:8080\nendpoint = https://s3objectstorage.example.com\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Trust Policy Configuration\nDESCRIPTION: JSON trust policy configuration for the AWS Lambda function. This policy document defines the trust relationship that allows the Lambda service to assume the specified IAM role to execute functions.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/presigned-urls-serverless-cloud/page.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Storj Bucket on macOS\nDESCRIPTION: Command to create a new bucket named 'cakes' using Uplink CLI on macOS. The command uses the 'mb' (make bucket) command with the 'sj://' protocol prefix.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/uploading-your-first-object/create-a-bucket/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuplink mb sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Setting Up Object Mount Fusion with S3-compatible Storage\nDESCRIPTION: Creates a Fusion mount that combines local storage with S3-compatible object storage. Files will be automatically migrated between the two based on access patterns and thresholds.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncuno mount --fusion \"/mnt/fast/fusion-store\" --root \"/cuno/s3/<bucket>/fusion-store\" \"~/my-fusion-filesystem\"\n```\n\n----------------------------------------\n\nTITLE: Downloading NoIP client files in Linux\nDESCRIPTION: Command to download the NoIP client files using wget in Linux.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/port-forwarding/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget http://www.no-ip.com/client/linux/noip-duc-linux.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Reading an Object from Azure Storage Container with Object Mount\nDESCRIPTION: Displays the content of a file stored in an Azure Storage container using Object Mount. This command reads and outputs the content of 'helloworld.txt' from 'bucket1'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncat az://your-azure-storage-account/bucket1/helloworld.txt\n```\n\n----------------------------------------\n\nTITLE: Credential Import Command\nDESCRIPTION: Command for importing a credential file into Object Mount.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/credentials/page.md#2025-04-16_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncuno creds import <credential_file>\n```\n\n----------------------------------------\n\nTITLE: Setting Node Server Address\nDESCRIPTION: Configuration for the public listening address of the Storj node.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-add-an-additional-drive/page.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n# public address to listen on\nserver.address: :28967\n```\n\n----------------------------------------\n\nTITLE: Windows Directory Restructuring\nDESCRIPTION: Reorganizes the Windows storage directories to match Docker structure\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/migrating-from-windows-gui-installation-to-a-docker-cli/page.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nmv D:\\STORJ D:\\storage\nmkdir D:\\STORJ\nmv D:\\storage D:\\STORJ\\storage\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Mount Subsystem with Options\nDESCRIPTION: Syntax for specifying Object Mount subsystem options that must be placed before the mount verb. These options configure the underlying behavior of the object storage mount.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/basic/page.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncuno -o <Object Mount option> mount ...\n```\n\n----------------------------------------\n\nTITLE: Deleting an Object from Google Cloud Storage Bucket with Object Mount\nDESCRIPTION: Removes a file from a Google Cloud Storage bucket using Object Mount. This command deletes 'helloworld.txt' from 'bucket1'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nrm gs://bucket1/helloworld.txt\n```\n\n----------------------------------------\n\nTITLE: Installing SSH Client on Windows\nDESCRIPTION: PowerShell command to install OpenSSH client on Windows\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-remote-access-the-web-dashboard/page.md#2025-04-16_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nAdd-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0\n```\n\n----------------------------------------\n\nTITLE: Setting Minio Cache Environment Variables on macOS\nDESCRIPTION: Bash commands to set Minio caching environment variables on macOS for Gateway ST, including cache drives configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nexport MINIO_CACHE=\"on\"\nexport MINIO_CACHE_DRIVES=\"/mnt/drive1,/mnt/drive2,/mnt/cache{1...3}\"\nexport MINIO_CACHE_EXCLUDE=\"*.pdf,mybucket/*\"\nexport MINIO_CACHE_QUOTA=80\nexport MINIO_CACHE_AFTER=3\nexport MINIO_CACHE_WATERMARK_LOW=70\nexport MINIO_CACHE_WATERMARK_HIGH=90\n```\n\n----------------------------------------\n\nTITLE: Setting Up Gateway ST on Linux and macOS\nDESCRIPTION: This bash command runs the setup process for Gateway ST on Linux and macOS systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngateway setup\n```\n\n----------------------------------------\n\nTITLE: Viewing Log File Contents (Linux/macOS)\nDESCRIPTION: This command displays the entire contents of a log file on Linux or macOS systems. Replace '/path/to/the/log/file.log' with the actual path to your log file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/check-logs/page.md#2025-04-16_snippet_3\n\nLANGUAGE: linux\nCODE:\n```\ncat /path/to/the/log/file.log\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Profile for Object Mount\nDESCRIPTION: Command to add Object Mount library to shell profile for automatic loading\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/advanced/page.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nexport LD_PRELOAD=\"${CUNO_ROOT}\"/lib/cuno.so`\n```\n\n----------------------------------------\n\nTITLE: Running Single Command with FlexMount in Shell\nDESCRIPTION: This command demonstrates how to run a single command with Object Mount FlexMount enabled, creating a new file in the object storage.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/enabling-object-mount/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncuno run --flex \"$HOME/my-object-storage\" bash -c \"touch $HOME/object_storage_mount/s3/<bucket>/newfile\"\n```\n\n----------------------------------------\n\nTITLE: Unpacking Archive in Fusion Filesystem\nDESCRIPTION: Unpacks a tar archive in the mounted Fusion filesystem.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ncd $HOME/my-fusion-filesystem\ntar -xf images.tar\n```\n\n----------------------------------------\n\nTITLE: Creating Microsoft Azure Credentials File with One-liner Command\nDESCRIPTION: A single command that creates a credentials file for Microsoft Azure, sets secure permissions, and populates it with the required format. This simplifies the process of setting up secure credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# terminal\ntouch credentials.txt ; chmod 0600 credentials.txt ; printf \"AZURE_STORAGE_ACCOUNT= xxxxxxxxxxxxxxxxxx \\nAZURE_STORAGE_ACCESS_KEY= xxxxxxxxxxxxxxxxxx\" > credentials.txt\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to HTML in GitHub Actions\nDESCRIPTION: This step uses the ZacJW/markdown-html-action to convert the homepage.md file to index.html.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/using-storj-dcs-with-github-actions/page.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Converts the homepage.md file to index.html\n- uses: ZacJW/markdown-html-action@1.1.0\n  with:\n    input_files: '[[\"homepage.md\"]]'\n    output_files: '[\"index.html\"]'\n    extensions: '[]' # Alas, this cannot be skipped even if empty\n```\n\n----------------------------------------\n\nTITLE: Configuring a separate Storj profile\nDESCRIPTION: These commands set up a separate 'storj' profile with the Storj endpoint and a custom multipart threshold.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/aws/aws-cli-endpoint/page.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\naws configure set profile.storj.s3.endpoint_url https://gateway.storjshare.io\naws configure set profile.storj.s3.multipart_threshold 1TB\n```\n\n----------------------------------------\n\nTITLE: Setting File Permissions for S3-compatible Credentials\nDESCRIPTION: Command to change file permissions to secure credentials file by making it readable only by the owner. This is important for security when storing sensitive S3-compatible credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n#terminal\nchmod 0600 \"<path to your credentials file>\"\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Gem\nDESCRIPTION: Ruby gem configuration for AWS S3 SDK integration\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/rails-activestorage/page.md#2025-04-16_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"aws-sdk-s3\", require: false\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in an S3-compatible Storage Bucket with Object Mount\nDESCRIPTION: Lists all objects within a specified bucket in S3-compatible storage using Object Mount. This command shows the contents of 'bucket1'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nls s3://bucket1/\n```\n\n----------------------------------------\n\nTITLE: Creating Directory in S3-compatible Storage for Fusion\nDESCRIPTION: Creates an empty directory in an S3-compatible storage bucket to be used for Fusion storage. This is required if the bucket is not already empty.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncuno run mkdir \"/cuno/s3/<bucket>/fusion-store\"\n```\n\n----------------------------------------\n\nTITLE: Checking System Architecture in Linux/Unix\nDESCRIPTION: This command displays system information including the architecture (32-bit or 64-bit) of the Linux or Unix system. It's used to determine which version of the storage node binary to download.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/running-node-via-pia/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuname -a\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in an Azure Storage Container with Object Mount\nDESCRIPTION: Lists all objects within a specified container in Azure Storage using Object Mount. This command shows the contents of 'bucket1' within your Azure storage account.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nls az://your-azure-storage-account/bucket1/\n```\n\n----------------------------------------\n\nTITLE: SSH Port Forwarding Command\nDESCRIPTION: Command to establish SSH tunnel for port forwarding dashboard traffic on port 14002\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-remote-access-the-web-dashboard/page.md#2025-04-16_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nssh -L 14002:localhost:14002 user@server\n```\n\n----------------------------------------\n\nTITLE: Editing Dumped SQL File in Windows PowerShell\nDESCRIPTION: This PowerShell command processes the dumped SQL file, adding a PRAGMA statement and removing transaction-related commands, creating a new SQL file for database reconstruction.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-fix-a-database-disk-image-is-malformed/page.md#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$(echo \"PRAGMA synchronous = OFF ;\"; Get-Content dump_all.sql) | Select-String -NotMatch \"TRANSACTION|ROLLBACK|COMMIT\" | Set-Content -Encoding utf8 dump_all_notrans.sql\n```\n\n----------------------------------------\n\nTITLE: Stopping Storj Node Service - Windows Command Shell\nDESCRIPTION: Command to stop the Storj storage node Windows service before completing final data migration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/how-to-migrate-the-windows-gui-node-from-a-one-physical-location-to-other/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnet stop storagenode\n```\n\n----------------------------------------\n\nTITLE: Creating Local Directory for Azure Fusion Storage\nDESCRIPTION: Creates a directory on the attached storage device mounted at /mnt/fast to store local data for Fusion with Azure storage.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmkdir \"/mnt/fast/fusion-store\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Bucket in Windows for Server-Side Copy\nDESCRIPTION: Example of creating a new bucket in preparation for server-side copy operations in Windows. This uses the mb command which is a prerequisite for copying between buckets.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\n./uplink.exe mb sj://new-recipes\n```\n\n----------------------------------------\n\nTITLE: Unpacking Object Mount Archive\nDESCRIPTION: Command to extract the downloaded self-extracting package. Requires accepting EULA interactively or via environment variable.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/redhat/page.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nsh cuno_x86_64_glibc_rpm.run\n```\n\n----------------------------------------\n\nTITLE: Viewing Gateway Help on Windows\nDESCRIPTION: Command to view the help documentation and locate the config.yaml file path on Windows systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n./gateway help\n```\n\n----------------------------------------\n\nTITLE: Setting Up Gateway ST on Windows\nDESCRIPTION: This PowerShell command runs the setup process for Gateway ST on Windows.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n./gateway.exe setup\n```\n\n----------------------------------------\n\nTITLE: Accessing Help Documentation for Storagenode\nDESCRIPTION: Commands to display the help documentation for the Storagenode application. Shows both Docker CLI and Windows GUI installation methods.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/other-commands/page.md#2025-04-16_snippet_0\n\nLANGUAGE: none\nCODE:\n```\ndocker exec -it storagenode /app/storagenode help\n```\n\nLANGUAGE: powershell\nCODE:\n```\n&\"$env:ProgramFiles\\Storj\\Storage Node\\storagenode.exe\" --help\n```\n\n----------------------------------------\n\nTITLE: Downloading the Object Mount Self-extracting Package for Debian\nDESCRIPTION: Command to download the latest version of the Storj Object Mount self-extracting package for Debian systems using wget. This downloads the installer from the cunoFS GitHub repository.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/debian/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/cunoFS/cunoFS/releases/latest/download/cuno_amd64_glibc_deb.run\n```\n\n----------------------------------------\n\nTITLE: Single Command Object Mount Interception\nDESCRIPTION: Command syntax for enabling direct interception for a single command execution while maintaining wildcard expansion support\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/basic/page.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncuno run bash -c \"<your command and arguments>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Directory in AWS S3 for Fusion Storage\nDESCRIPTION: Creates an empty directory in an AWS S3 bucket to be used for Fusion storage. This is required if the bucket is not already empty.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncuno run mkdir \"/cuno/s3/<bucket>/fusion-store\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Test Pool in Go\nDESCRIPTION: Sets up a Docker test pool for running Postgres containers in tests using dockertest package. Includes test main setup and retry configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/go-integration-tests-with-postgres/page.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar dockerPool *dockertest.Pool\n\nfunc TestMain(m *testing.M) {\n\tvar err error\n\tpool, err = dockertest.NewPool(\"\")\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\n\t// Set a time for our retries. A lower value probably makes more sense.\n\tpool.MaxWait = 120 * time.Second\n\tcode := m.Run()\n\tos.Exit(code)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default File Permissions with Umask\nDESCRIPTION: This example demonstrates how to use umask to set default file permissions when creating new files in a mounted bucket. The example sets umask 022 to achieve 644 (rw-r--r--) permissions on newly created files.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/enforced-posix-access/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ umask 022\n$ touch /mnt/cloud/bucket/user1/newfile\n$ ls -l /mnt/cloud/bucket/user1/newfile\n-rw-r--r-- 1 user1 group1 0 Mar  1 12:00 /mnt/cloud/bucket/user1/newfile\n```\n\n----------------------------------------\n\nTITLE: Enabling POSIX mode via environment variable for Direct Interception\nDESCRIPTION: Example of enabling POSIX file access mode using the CUNO_POSIX environment variable for a Direct Interception session with Object Mount CLI.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/configuration/page.md#2025-04-16_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ export CUNO_POSIX=1\n$ cuno\n```\n\n----------------------------------------\n\nTITLE: Installing Screen and Starting a Session\nDESCRIPTION: Updates package lists, installs the 'screen' utility, and starts a new screen session for persistent terminal access.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/install-storagenode-on-raspberry-pi3-or-higher-version/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get update\nsudo apt-get install screen\nscreen\n```\n\n----------------------------------------\n\nTITLE: Basic Import Command Usage\nDESCRIPTION: Basic syntax for importing access grants using the Uplink CLI tool across different operating systems. The command accepts a name and either an access grant or file path.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/import-command/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe import [flags] NAME (ACCESS | FILE)\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink import [flags] NAME (ACCESS | FILE)\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink import [flags] NAME (ACCESS | FILE)\n```\n\n----------------------------------------\n\nTITLE: Creating a Locate Database with Object Mount on FUSE\nDESCRIPTION: Command for creating a custom locate database for files in Object Mount FUSE mount points, which allows the locate utility to search objects in cloud storage.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/tips/page.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nsudo updatedb -U ~/my-object-storage -o cunoloc.db\n```\n\n----------------------------------------\n\nTITLE: Installing Cyberduck on Windows via Chocolatey\nDESCRIPTION: Commands to install Cyberduck on Windows using the Chocolatey package manager. Provides options for both GUI and CLI installations.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/cyberduck/page.md#2025-04-16_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nchoco install cyberduck\n```\n\nLANGUAGE: Text\nCODE:\n```\nchoco install duck\n```\n\n----------------------------------------\n\nTITLE: Deleting an Object from AWS S3 Bucket with Object Mount\nDESCRIPTION: Removes a file from an AWS S3 bucket using Object Mount. This command deletes 'helloworld.txt' from 'bucket1'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nrm s3://bucket1/helloworld.txt\n```\n\n----------------------------------------\n\nTITLE: Access Use Command Example in Windows\nDESCRIPTION: Example demonstrating how to switch to an access named 'us1' in Windows. This assumes you have multiple accesses previously set up in your Uplink configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-use/page.md#2025-04-16_snippet_3\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access use us1\n```\n\n----------------------------------------\n\nTITLE: Copying Storj Node Storage Data - Windows PowerShell\nDESCRIPTION: Command to copy the Storj node storage data between Windows machines using robocopy. Mirrors the entire storage directory structure.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/how-to-migrate-the-windows-gui-node-from-a-one-physical-location-to-other/page.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nrobocopy d:\\storagenode \\\\pc2\\storage /MIR\n```\n\n----------------------------------------\n\nTITLE: Inspecting Gateway Deployment Status\nDESCRIPTION: Kubernetes command to check the status of the deployed gateway components.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/mongodb/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n➜  addons git:(master) ✗ kubectl get all --selector='app=s3-gateway-tardigrade-gateway'\nNAME                                                 READY   STATUS    RESTARTS   AGE\npod/s3-gateway-tardigrade-gateway-68fbf4b4d7-4qbvt   1/1     Running   0          104s\n\nNAME                                        TYPE        CLUSTER-IP EXTERNAL-IP PORT(S) AGE\nservice/s3-gateway-tardigrade-gateway-svc   ClusterIP   10.43.65.192 <none> 7777/TCP   104s\n\nNAME                                            READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/s3-gateway-tardigrade-gateway   1/1     1            1           104s\n\nNAME                                                       DESIRED   CURRENT   READY   AGE\nreplicaset.apps/s3-gateway-tardigrade-gateway-68fbf4b4d7   1         1         1       104s\n```\n\n----------------------------------------\n\nTITLE: Setting Inherited Permissions on Directory in Object Mount\nDESCRIPTION: Command to set default permissions on a directory for collaborative use, allowing all users and groups to read and write files.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/enforced-posix-access/page.md#2025-04-16_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ setfacl -m u::rwX,g::rwX,o::- /mnt/cloud/bucket/shared\n```\n\n----------------------------------------\n\nTITLE: Uplink Setup Object Key Encryption Prompt\nDESCRIPTION: Optional prompt to disable encryption for object keys, which enables lexicographical sorting of objects in listings.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/setup-command/page.md#2025-04-16_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\nWould you like to disable encryption for object keys (allows lexicographical sorting of objects in listings)? (y/N):\n```\n\n----------------------------------------\n\nTITLE: Stopping Storage Node - CLI\nDESCRIPTION: Command to gracefully stop the storage node container with a 300-second timeout\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/redirect-logs/page.md#2025-04-16_snippet_0\n\nLANGUAGE: none\nCODE:\n```\ndocker stop -t 300 storagenode\n```\n\n----------------------------------------\n\nTITLE: Opening SQLite3 Shell in Docker Container\nDESCRIPTION: This command runs a Docker container with SQLite3, mounting the storage directory and opening an interactive shell for database operations.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-fix-a-database-disk-image-is-malformed/page.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it --mount type=bind,source=x:\\storagenode\\storage,destination=/storage sstc/sqlite3 sh\n```\n\n----------------------------------------\n\nTITLE: Downloading an Object with Uplink CLI on Windows\nDESCRIPTION: This command uses the Uplink CLI tool to download a file named 'cheesecake.jpg' from the 'cakes' bucket to the local Downloads folder on Windows.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/interacting-with-your-first-object/download-an-object/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe cp sj://cakes/cheesecake.jpg ~/Downloads/cheesecake.jpg\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Access 'us2' in Uplink CLI (Windows)\nDESCRIPTION: Example command to remove the access named 'us2' from the local store of Uplink CLI on Windows.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-remove/page.md#2025-04-16_snippet_3\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access remove us2\n```\n\n----------------------------------------\n\nTITLE: Refreshing Rclone Mount Cache\nDESCRIPTION: Command to refresh the Rclone mount's directory cache after uploading new files. Uses the remote control API to trigger a recursive refresh of the mounted filesystem.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/plex/page.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nrclone rc vfs/refresh -v --fast-list recursive=true\n```\n\n----------------------------------------\n\nTITLE: Creating a Pod that Mounts a PVC\nDESCRIPTION: YAML configuration for a Pod that mounts a PersistentVolumeClaim to access cloud storage as a regular filesystem within the container.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: consumer-pod\nspec:\n  containers:\n    - name: cunofs-app\n      image: centos\n      command: [\"/bin/sh\"]\n      args: [\"-c\", \"echo 'Hello from the container!' > /data/s3/cuno-csi-testing/K8s_$(date -u).txt; tail -f /dev/null\"]\n      volumeMounts:\n        - name: persistent-storage\n          mountPath: /data\n  volumes:\n    - name: persistent-storage\n      persistentVolumeClaim:\n        claimName: cunofs-pvc # PVC metadata.name\n```\n\n----------------------------------------\n\nTITLE: Specifying FUSE Options with Cuno Mount\nDESCRIPTION: Syntax for adding FUSE-specific options to the cuno mount command. These options are passed directly to the underlying fusermount3 command and control the FUSE mount behavior.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/basic/page.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncuno mount [FUSE option] ...\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Credentials File with One-liner Command\nDESCRIPTION: A single command that creates a credentials file for AWS S3, sets secure permissions, and populates it with the required format. This simplifies the process of setting up secure credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# terminal\ntouch credentials.txt ; chmod 0600 credentials.txt ; printf \"aws_access_key_id = xxxxxxxxxxxxxxxxxx \\naws_secret_access_key = xxxxxxxxxxxxxxxxxx\" > credentials.txt\n```\n\n----------------------------------------\n\nTITLE: Creating a Testing Helper for Resource Tracking in Go\nDESCRIPTION: A utility function that sets up a tracker within a test context and automatically checks for resource leaks at the end of the test using testing.TB's Cleanup method.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-and-tracking-resource-leaks-in-go/page.md#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc TestingTracker(ctx context.Context, tb testing.TB) context.Context {\n\ttracker, ctx := WithTracker(ctx)\n\ttb.Cleanup(func() {\n\t\tif err := tracker.Close(); err != nil {\n\t\t\ttb.Fatal(err)\n\t\t}\n\t})\n\treturn ctx\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Object Mount FlexMount in Shell\nDESCRIPTION: These commands set up a FlexMount, which combines Direct Interception and FUSE for wider compatibility and optimal performance.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/enabling-object-mount/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir \"$HOME/my-object-storage\"\n$ cuno mount \"$HOME/my-object-storage\"\n$ cuno --flex \"$HOME/my-object-storage\"\n(cuno) $ ls $HOME/my-object-storage/s3/<bucket>/<path>\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage Encryption\nDESCRIPTION: Sets Google Cloud Storage environment variable for server-side encryption with a customer-provided key. This configuration enables customer-supplied encryption keys for GCS operations.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/extraopts/page.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nexport GS_ENCRYPTION=\"--sse-write-c-key xxxxxxxxxxxxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Generating Scaffold\nDESCRIPTION: Command to generate Rails scaffold for Name model\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/rails-activestorage/page.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nrails generate scaffold Name name\n```\n\n----------------------------------------\n\nTITLE: Checking Out Repository in GitHub Actions\nDESCRIPTION: This step checks out the head of the GitHub repository, allowing the job to access its contents.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/using-storj-dcs-with-github-actions/page.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Checks-out your repository under $GITHUB_WORKSPACE,\n# so your job can access it\n- uses: actions/checkout@v2\n```\n\n----------------------------------------\n\nTITLE: Basic Cuno Mount Command Syntax\nDESCRIPTION: The basic syntax for the cuno mount command with options. This command mounts object storage as a local filesystem using FUSE.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/basic/page.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncuno mount [option] ...\n```\n\n----------------------------------------\n\nTITLE: Running Gateway ST as Static Website Host on Linux\nDESCRIPTION: Command to run the Gateway with website hosting capability enabled on Linux systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_20\n\nLANGUAGE: text\nCODE:\n```\ngateway run --access 14aV.... --website\n```\n\n----------------------------------------\n\nTITLE: Creating Access Restrictions\nDESCRIPTION: Commands to generate an Access Grant without restrictions using the uplink access restrict command. The --readonly=false flag ensures full access permissions.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/generate-access-grants-and-tokens/generate-a-token/page.md#2025-04-16_snippet_1\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access restrictt --readonly=false\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access restrict --readonly=false\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access restrict --readonly=false\n```\n\n----------------------------------------\n\nTITLE: Access Use Command Example in Linux\nDESCRIPTION: Example demonstrating how to switch to an access named 'us1' in Linux. This assumes you have multiple accesses previously set up in your Uplink configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-use/page.md#2025-04-16_snippet_4\n\nLANGUAGE: linux\nCODE:\n```\nuplink access use us1\n```\n\n----------------------------------------\n\nTITLE: Windows Service Management\nDESCRIPTION: Stops and disables the storagenode Windows service to prevent conflicts during migration\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/migrating-from-windows-gui-installation-to-a-docker-cli/page.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nStop-Service storagenode\nSet-Service storagenode -StartupType Disabled\n```\n\n----------------------------------------\n\nTITLE: Setting Up Uplink CLI in Windows\nDESCRIPTION: Command to set up the Uplink CLI tool in Windows environment. This is part of the process for creating keys for CLI usage in Storj.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/access/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./uplink.exe setup\n```\n\n----------------------------------------\n\nTITLE: Executing Uplink Setup in PowerShell\nDESCRIPTION: Example of running the Uplink setup command in Windows PowerShell to start the configuration wizard.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/setup-command/page.md#2025-04-16_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n./uplink.exe setup\n```\n\n----------------------------------------\n\nTITLE: Verifying Reconstructed Database Size in Windows PowerShell\nDESCRIPTION: This PowerShell command lists the details of the reconstructed database file to verify its size is greater than zero.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-fix-a-database-disk-image-is-malformed/page.md#2025-04-16_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nls /storage/bandwidth.db\n```\n\n----------------------------------------\n\nTITLE: Checking SQLite3 Version\nDESCRIPTION: This command displays the installed version of SQLite3, which should be v3.25.2 or later for the integrity check to work correctly.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-fix-a-database-disk-image-is-malformed/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsqlite3 --version\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in Storj Bucket - Linux\nDESCRIPTION: Command to list objects in a Storj bucket named 'cakes' using Linux Uplink CLI.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/interacting-with-your-first-object/list-an-object/page.md#2025-04-16_snippet_2\n\nLANGUAGE: linux\nCODE:\n```\nuplink ls sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Creating Local Directory for Fusion Store\nDESCRIPTION: Creates a local directory on an attached storage device to be used for Object Mount Fusion.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nmkdir \"/dev/sdf/fusion-store\"\n```\n\n----------------------------------------\n\nTITLE: Pairing AWS S3 Requester Pays Bucket\nDESCRIPTION: Command to force pair a Requester Pays bucket with an imported credential file in AWS S3.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/credentials/page.md#2025-04-16_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ncuno creds --force pair <bucket_remote_uri> <imported_credential_file>\n```\n\n----------------------------------------\n\nTITLE: Creating System-wide S3 Credentials\nDESCRIPTION: Creates system-wide credentials file for root access during boot time mounting.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/s3fs/page.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\necho ACCESS_KEY_ID:SECRET_ACCESS_KEY | sudo tee /etc/passwd-s3fs\nsudo chmod 0640 /etc/passwd-s3fs\n```\n\n----------------------------------------\n\nTITLE: Verifying Reconstructed Database Size in Linux or Docker\nDESCRIPTION: This command lists the details of the reconstructed database file to verify its size is greater than zero.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-fix-a-database-disk-image-is-malformed/page.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nls -l /storage/bandwidth.db\n```\n\n----------------------------------------\n\nTITLE: Avoiding Global Variables in Concurrent Tests\nDESCRIPTION: Example showing how global variables like loggers can cause problems in parallel tests. When tests run concurrently, the log output gets mixed in unpredictable ways.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc TestAlpha(t *testing.T) {\n\tt.Parallel()\n\tlog.Println(\"Alpha\")\n}\n\nfunc TestBeta(t *testing.T) {\n\tt.Parallel()\n\tlog.Println(\"Beta\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Object Mount and Dependencies\nDESCRIPTION: Commands to update apt package lists and install the Object Mount Debian package. The command uses a relative path to instruct apt to install the local package rather than searching repositories.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/debian/page.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install ./cuno_{FULL-VERSION}_amd64_glibc/cuno_{FULL-VERSION}_amd64_glibc.deb\n```\n\n----------------------------------------\n\nTITLE: Using Object Mount with LSF bsub Command\nDESCRIPTION: Basic usage of Object Mount with LSF by prefixing the bsub command with 'cuno run'. This allows direct access to object storage within LSF jobs.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/advanced/page.md#2025-04-16_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nbsub -Is cuno run ls -l s3://bucket\n```\n\n----------------------------------------\n\nTITLE: Restarting SSH Service on Windows\nDESCRIPTION: PowerShell command to restart the SSH service on a Windows server after making configuration changes to the sshd_config file for disabling password authentication.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-remote-access-the-web-dashboard/page.md#2025-04-16_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\nRestart-Service sshd\n```\n\n----------------------------------------\n\nTITLE: Assembly Code Analysis for Memory Operations\nDESCRIPTION: Examining the assembly code generated for memory operations in the optimized version.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/a-tale-of-two-copies/page.md#2025-04-16_snippet_7\n\nLANGUAGE: assembly\nCODE:\n```\n     50ms       50ms     515109: IMULQ $0x1c, CX, CX\n         .          .     51510d: LEAQ 0xa8(SP)(CX*1), CX\n         .          .     515115: MOVUPS X0, 0(CX)\n     130ms      130ms     515118: MOVUPS X0, 0xc(CX)\n```\n\n----------------------------------------\n\nTITLE: Executing Ansible Playbook for Storj Storage Nodes\nDESCRIPTION: This command runs the Ansible playbook using the specified inventory file. It executes the playbook tasks on the hosts listed in the inventory.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/commercial-node/setup/ansible/page.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nansible-playbook -i hosts.ini storagenode_playbook.yml\n```\n\n----------------------------------------\n\nTITLE: Creating cunoFS Public Key File\nDESCRIPTION: One-liner command to create a file containing the cunoFS public key for package verification.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/alpine/page.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncat >cunoFS.rsa.pub <<EOF\n-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAl1TDuzTVhYkr8OPFqU4D\nr250/ESsKys92maH7NWC6tprLEaGoTUWi/7XMO33dOOnIuHqWctcxvG/V5sQTRem\nPmyozszYyAFNziSO8Wrp9kiCQZ72NyN00j3I+zKG3m/tQ6nVbl5JkWniuPhn6rKQ\nmHE72e07+aHGk6a8/cTbkvMe9DA61Uhgu3BOj5+S8ksQhc6k4SFTu3XfhOKu+pIR\nU0GJ+/ZtjagvDzwX6Ebf6YS+Skn1CCX4FrLC20CdyyIwf1qvKNG141ireaZlIdp8\n4GCOG0UkccAMrACNipRXYfE2/Cx6uiwnwCoqa095CPqPvVXWZY++IlFk/8qdsiJj\nFotKjfBd3H68UIMpZF+seIkT/NSIHkyViwUiwrfaMTrIfklZwer+dvVgYvN2M/K/\nEq6QSu9ZzefcE605I14rHya6AnqSVyJx4GZ23tz1fT+l1qA7xC/jJ5jZ04Ni7y8Z\nCVEgn/9GD7hgZIc72bD4W8438oxhaALjbZadGz7mfmrp9j96w2pJzW59bpiT+f7I\nKgg57/XM1fjrDQ3xopM5PDTHzxPiIpvMGLmPivvr9gt3L3PoHHjWj3veS34OVPot\nRnYU4SBGBHVq0sNZPkeaZpb1bpNyF4t7458F/+RWPVF3S+y0we1q0Q5O9yk6LIfp\nOOUcK6r8cF6LV+CdCEE9VbkCAwEAAQ==\n-----END PUBLIC KEY-----\nEOF\n```\n\n----------------------------------------\n\nTITLE: Enabling awscli-plugin-endpoint in AWS CLI\nDESCRIPTION: This command enables the awscli-plugin-endpoint plugin in the AWS CLI configuration file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/aws/aws-cli-endpoint/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\naws configure set plugins.endpoint awscli_plugin_endpoint\n```\n\n----------------------------------------\n\nTITLE: Stopping Storage Node - Docker CLI\nDESCRIPTION: Command to gracefully stop a Storage Node container with a 300-second timeout period.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/system-maintenance/page.md#2025-04-16_snippet_0\n\nLANGUAGE: none\nCODE:\n```\ndocker stop -t 300 storagenode\n```\n\n----------------------------------------\n\nTITLE: Restarting Storagenode Service on Windows\nDESCRIPTION: PowerShell command to restart the Storj storage node service after configuration changes. This is required for the changes to take effect.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/running-node-via-pia/page.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nRestart-Service storagenode\n```\n\n----------------------------------------\n\nTITLE: Getting local IP for Ethernet connection in MacOS\nDESCRIPTION: Command to retrieve the local IP address for an Ethernet connection in MacOS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/port-forwarding/page.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nipconfig getifaddr en1\n```\n\n----------------------------------------\n\nTITLE: Docker Mount Configuration\nDESCRIPTION: Example of Docker mount parameters for the new storage node location\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/page.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n--mount type=bind,source=/mnt/storj2/storagenode-new/identity,destination=/app/identity \\\n--mount type=bind,source=/mnt/storj2/storagenode-new,destination=/app/config \\\n```\n\n----------------------------------------\n\nTITLE: Executing 'access list' Command in macOS\nDESCRIPTION: Command syntax for listing all available Storj DCS access grants using the Uplink CLI on macOS. This command displays a list of all configured access grants along with their associated satellites.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-list-command/page.md#2025-04-16_snippet_2\n\nLANGUAGE: macos\nCODE:\n```\nuplink access list [flags]\n```\n\n----------------------------------------\n\nTITLE: Exporting cuno-mac Location to PATH in MacOS\nDESCRIPTION: This command adds the cuno-mac tool location to the PATH environment variable in MacOS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/mac/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=$PATH:~/.local/opt/cuno/share/macos\n```\n\n----------------------------------------\n\nTITLE: Initializing Rucio Database\nDESCRIPTION: Command to initialize the Rucio database within the Docker container.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rucio/page.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ntools/run_tests_docker.sh -i\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Storj Bucket\nDESCRIPTION: Commands for creating a bucket, downloading a sample video, and uploading it to Storj.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/livepeer/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuplink mb sj://livepeer\nwget https://link.storjshare.io/raw/jxztgqgoyipublszkwo4e2gg5n4a/livepeer/global-upload.mp4\nuplink cp global-upload.mp4 sj://livepeer/\nuplink share --register --readonly=false --not-after=none sj://livepeer\n```\n\n----------------------------------------\n\nTITLE: Running Uplink Setup Command on macOS\nDESCRIPTION: Command to run the Uplink setup wizard on macOS systems which initiates the configuration process for creating an Uplink config file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/setup-command/page.md#2025-04-16_snippet_2\n\nLANGUAGE: macos\nCODE:\n```\nuplink setup [flags]\n```\n\n----------------------------------------\n\nTITLE: Removing Default Object Lock Configuration using AWS CLI\nDESCRIPTION: Removes the default Object Lock retention policy from a bucket while keeping Object Lock enabled. This command keeps the bucket's Object Lock capability but removes any default retention rules.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/object-lock/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\naws s3api put-object-lock-configuration \\\n  --bucket my-object-lock-bucket \\\n  --object-lock-configuration 'ObjectLockEnabled=Enabled' \\\n  --endpoint-url https://gateway.storjshare.io\n```\n\n----------------------------------------\n\nTITLE: Changing file ownership on POSIX-enabled Object Mount\nDESCRIPTION: Example of using chown to change the owner of a file in a POSIX-enabled Object Mount. The ownership is changed to user 'alice' while maintaining the root group.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/configuration/page.md#2025-04-16_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ chown alice /mnt/s3-bucket/file\n$ ls -l /mnt/s3-bucket/file\n-rwxrwx---  1 alice root 0 Nov 10 11:16 file\n```\n\n----------------------------------------\n\nTITLE: Removing Access in Uplink CLI (Linux)\nDESCRIPTION: Command to remove an access from the local store of Uplink CLI on Linux. The '<name>' argument specifies the access name to be deleted.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-remove/page.md#2025-04-16_snippet_1\n\nLANGUAGE: linux\nCODE:\n```\nuplink access remove <name>\n```\n\n----------------------------------------\n\nTITLE: Uploading a Local File to a Storj Bucket in Linux\nDESCRIPTION: Example of copying a local file (cheesecake.jpg) to a Storj bucket (cakes) using Uplink CLI in Linux environment.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuplink cp cheesecake.jpg sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Deploying Jupyter Notebook in Kubernetes\nDESCRIPTION: This YAML snippet defines a Kubernetes Deployment for a Jupyter notebook. It specifies a single replica with the Jupyter base-notebook image and exposes port 8888.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/use-storj-dcs-from-cloud-native-environments-using-sidecar-pattern/page.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n name: jupyter\nspec:\n replicas: 1\n selector:\n   matchLabels:\n     app: jupyter\n template:\n   metadata:\n     labels:\n       app: jupyter\n   spec:\n     containers:\n     - name: jupyter\n       image: jupyter/base-notebook\n       ports:\n         - containerPort: 8888\n           hostPort: 8888\n```\n\n----------------------------------------\n\nTITLE: Installing Object Mount via YUM\nDESCRIPTION: Commands to update YUM cache and install Object Mount package with dependencies using the RPM package manager.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/redhat/page.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nsudo yum makecache\nsudo yum install ./cuno_{FULL-VERSION}_x86_64_glibc/cuno_{FULL-VERSION}_x86_64_glibc.rpm\n```\n\n----------------------------------------\n\nTITLE: Azure Blob Storage Credentials\nDESCRIPTION: Credential file format for Microsoft Azure Blob Storage showing account name and access key configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/credentials/page.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nAZURE_STORAGE_ACCOUNT    = <account_name>\nAZURE_STORAGE_ACCESS_KEY = <access_key>\n```\n\n----------------------------------------\n\nTITLE: Moving Storj Node Orders Data using PowerShell\nDESCRIPTION: This PowerShell command uses robocopy to move order data from the previous Docker installation location to the new GUI installation folder. It mirrors the directory structure and moves all files.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/migrating-from-docker-cli-to-a-gui-install-on-windows/page.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nrobocopy /MIR /MOVE D:\\Storj\\orders \"$env:ProgramFiles\\Storj\\Storage Node\\orders\"\n```\n\n----------------------------------------\n\nTITLE: Debian Package Removal Command\nDESCRIPTION: Command to remove CUNO packages using apt-get package manager on Debian-based Linux distributions like Ubuntu.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/uninstall/page.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nsudo apt-get remove cuno\\*\n```\n\n----------------------------------------\n\nTITLE: Installing cunoFS Package on Alpine\nDESCRIPTION: Command to install the cunoFS package using Alpine's package manager apk.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/alpine/page.md#2025-04-16_snippet_5\n\nLANGUAGE: console\nCODE:\n```\napk add ./cuno_{FULL-VERSION}_x86_64_musl/cuno_{FULL-VERSION}_x86_64_musl.apk\n```\n\n----------------------------------------\n\nTITLE: Moving cunoFS Public Key to Trusted Keys Directory\nDESCRIPTION: Command to move the cunoFS public key file to the Alpine trusted keys directory.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/alpine/page.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nmv cunoFS.rsa.pub /etc/apk/keys/\n```\n\n----------------------------------------\n\nTITLE: Installing awscli-plugin-endpoint for AWS CLI v2.x\nDESCRIPTION: This command installs the awscli-plugin-endpoint plugin for AWS CLI v2.x without dependencies.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/aws/aws-cli-endpoint/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip3 install --no-deps awscli-plugin-endpoint\n```\n\n----------------------------------------\n\nTITLE: Revoking a stored access in Windows\nDESCRIPTION: Example of revoking a stored access named 'us1-ro' in Windows. This removes the access from the system, preventing further use.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-revoke/page.md#2025-04-16_snippet_3\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access revoke us1-ro\n```\n\n----------------------------------------\n\nTITLE: Mounting Object Mount Fusion Filesystem\nDESCRIPTION: This command mounts an Object Mount Fusion filesystem, combining attached storage and object storage. It requires specifying the path to the attached storage backing directory, the path to the object storage, and the desired mount location.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncuno mount \\\n    --fusion \"<path to attached-storage backing directory>\" \\\n    --root \"<path to object storage backing directory>\" \\\n    \"<mount location>\"\n```\n\n----------------------------------------\n\nTITLE: Getting local IP for wireless connection in MacOS\nDESCRIPTION: Command to retrieve the local IP address for a wireless connection in MacOS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/port-forwarding/page.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nipconfig getifaddr en0\n```\n\n----------------------------------------\n\nTITLE: Linux Data Migration Commands\nDESCRIPTION: Series of rsync commands for migrating data from Windows to Linux\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/migrating-from-windows-gui-installation-to-a-docker-cli/page.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrsync -aP /mnt/d/Users/user/AppData/Roaming/Storj/Identity/storagenode/ user@192.168.1.68:/mnt/storj/storagenode/identity/\nrsync -aP \"/mnt/c/Program Files/Storj/Storage Node/orders\" user@192.168.1.68:/mnt/storj/storagenode/orders/\nrsync -aP /mnt/d/STORJ/ user@192.168.1.68:/mnt/storj/storagenode/storage/\nrsync -aP --delete /mnt/d/STORJ/ user@192.168.1.68:/mnt/storj/storagenode/storage/\nrsync -aP --delete \"/mnt/c/Program Files/Storj/Storage Node/orders\" user@192.168.1.68:/mnt/storj/storagenode/orders/\n```\n\n----------------------------------------\n\nTITLE: Singularity Execution with Object Mount\nDESCRIPTION: Command to execute Singularity container with Object Mount injection\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/advanced/page.md#2025-04-16_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nsingularity exec   \\\n    --bind $CUNO_ROOT:/opt/cuno \\\n    --bind $CUNO_ROOT/etc/ld.so.preload:/etc/ld.so.preload \\\n    --bind \"$CUNO_CREDENTIALS\":/opt/cuno-config/creds     \\\n    ./singularity_image.sif ls s3://commoncrawl\n```\n\n----------------------------------------\n\nTITLE: Extracting NoIP client files in Linux\nDESCRIPTION: Command to extract the downloaded NoIP client files in Linux.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/port-forwarding/page.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntar xf noip-duc-linux.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Updating CA Certificates\nDESCRIPTION: Command to update the CA certificates package in the container.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rucio/page.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nyum update ca-certificates\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Storage via FUSE Mount in Shell\nDESCRIPTION: This command demonstrates how to list contents of an object storage bucket through the FUSE mount.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/enabling-object-mount/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nls ~/my-object-storage/s3/<bucket>/<path>\n```\n\n----------------------------------------\n\nTITLE: Checking Failed Audits and Repairs in Windows Redirected Logs Using PowerShell\nDESCRIPTION: This PowerShell command searches redirected log files for failed GET_AUDIT or GET_REPAIR operations on a Storj storage node in a Windows environment with custom log locations.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/suspension-mode/page.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nsls \"GET_AUDIT|GET_REPAIR\" \"x:\\storagenode\\node.log\" | sls failed\n```\n\n----------------------------------------\n\nTITLE: Example of Access Inspect Command with Direct Parameter on Linux\nDESCRIPTION: Example of inspecting an access grant named 'cheesecake' using Uplink CLI on Linux systems. This demonstrates the direct parameter approach.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-inspect-command/page.md#2025-04-16_snippet_4\n\nLANGUAGE: linux\nCODE:\n```\nuplink access inspect cheesecake\n```\n\n----------------------------------------\n\nTITLE: Altering file modification time on POSIX-enabled Object Mount\nDESCRIPTION: Example showing how writing to a file in a POSIX-enabled Object Mount updates its modification time. The example demonstrates creating a file with content and observing the timestamp change.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/configuration/page.md#2025-04-16_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ echo \"Hello\" > /mnt/s3-bucket/file\n$ ls -l /mnt/s3-bucket/file\n-rwxrwx---+ 1 alice root 6 Nov 10 11:32 file\n```\n\n----------------------------------------\n\nTITLE: Removing Single Pin\nDESCRIPTION: cURL command to remove a single pinned content by CID\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/storj-ipfs-pinning/page.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u ipfs_beta_user:ipfs_beta_password -X POST \"https://www.storj-ipfs.com/api/v0/pin/rm?arg=QmExample\"\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in Storj Bucket - Windows\nDESCRIPTION: Command to list objects in a Storj bucket named 'cakes' using Windows Uplink CLI executable.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/interacting-with-your-first-object/list-an-object/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe ls sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary UDP Buffer Size in Linux\nDESCRIPTION: Command to temporarily increase the UDP receive buffer size to 2.5MB. This setting will revert after system reboot.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/quic-requirements/linux-configuration-for-udp/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -w net.core.rmem_max=2500000\n```\n\n----------------------------------------\n\nTITLE: Passing Base64-encoded Credentials to Helm\nDESCRIPTION: Example showing how to provide credential file contents in base64 encoding format for security reasons, as Helm doesn't allow direct file path access.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--set credsToImport=\"{$(cat creds-1.txt | base64), $(cat creds-2.json | base64)}\"\n```\n\n----------------------------------------\n\nTITLE: API Keys Response Structure\nDESCRIPTION: Example JSON response structure for the API keys listing endpoint showing key details and pagination information.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/concepts/multi-tenant-data/multi-tenant-access-management/page.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiKeys\": [\n    {\n      \"id\": \"acc0dd0a-786b-46e7-b5e8-6b9c8bfffbb8\",\n      \"projectId\": \"c4885998-ead0-48db-abe6-ffff8635b453\",\n      \"projectPublicId\": \"f3452ca7-9d8b-4aa1-9e32-f2ffa0f58bd4\",\n      \"userAgent\": null,\n      \"name\": \"access1_lab\",\n      \"createdAt\": \"2023-12-22T21:19:37.48406Z\"\n    },\n    {\n      \"id\": \"01c46872-1573-4944-8a0a-54752aff98f1\",\n      \"projectId\": \"c4885998-ead0-48db-ffe6-ff798635b453\",\n      \"projectPublicId\": \"f3452ca7-9d8b-4ff1-9e32-f2a9a0f581d4\",\n      \"search\": \"\",\n      \"limit\": 50,\n      \"order\": 0,\n      \"orderDirection\": 0,\n      \"offset\": 0,\n      \"pageCount\": 1,\n      \"currentPage\": 1,\n      \"totalCount\": 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash Completion for Cloud Paths in Object Mount\nDESCRIPTION: This bash command modifies the COMP_WORDBREAKS variable to support auto-completion with paths containing colons when using Object Mount with LD_PRELOAD. It removes the colon character from the list of word break characters when cuno is detected in the LD_PRELOAD environment variable.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/limitations/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[[ \"$LD_PRELOAD\" =~ cuno ]] && export COMP_WORDBREAKS=${COMP_WORDBREAKS/:/}\n```\n\n----------------------------------------\n\nTITLE: Authorizing Storage Node Identity\nDESCRIPTION: Commands to authorize storage node identity using an authorization token\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/identity/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nidentity authorize storagenode <email:characterstring>\n```\n\nLANGUAGE: powershell\nCODE:\n```\n./identity.exe authorize storagenode <email:characterstring>\n```\n\n----------------------------------------\n\nTITLE: Downloading cunoFS Public Key\nDESCRIPTION: Command to download the public key for package verification using wget.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/alpine/page.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwget https://github.com/cunoFS/cunoFS/releases/latest/download/cunoFS.rsa.pub\n```\n\n----------------------------------------\n\nTITLE: Listing Extracted Package Contents\nDESCRIPTION: Command to display the contents of the extracted package directory, showing the RPM package and documentation.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/redhat/page.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ls cuno_{FULL-VERSION}_x86_64_glibc\ncuno_{FULL-VERSION}_x84_64_.rpm\nCUNO-Installation-and-User-Guide.pdf\n```\n\n----------------------------------------\n\nTITLE: Revoking a stored access in macOS\nDESCRIPTION: Example of revoking a stored access named 'us1-ro' in macOS. This removes the access from the system, preventing further use.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-revoke/page.md#2025-04-16_snippet_5\n\nLANGUAGE: macos\nCODE:\n```\nuplink access revoke us1-ro\n```\n\n----------------------------------------\n\nTITLE: Setting Up Object Mount Fusion with Google Cloud Storage\nDESCRIPTION: Creates a Fusion mount that combines local storage with Google Cloud Storage. Files will be automatically migrated between the two based on access patterns and thresholds.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncuno mount --fusion \"/mnt/fast/fusion-store\" --root \"/cuno/gs/<bucket>/fusion-store\" \"~/my-fusion-filesystem\"\n```\n\n----------------------------------------\n\nTITLE: Exporting SSH Public Key from macOS Client to Server\nDESCRIPTION: Command to export the public SSH key from a macOS client to a server using the ssh-copy-id utility, which handles the proper formatting and permissions automatically.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-remote-access-the-web-dashboard/page.md#2025-04-16_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\nssh-copy-id -i ~/.ssh/id_rsa.pub user@server\n```\n\n----------------------------------------\n\nTITLE: Copying Storj Node Identity - Windows PowerShell\nDESCRIPTION: Command to copy the Storj node identity folder between Windows machines using robocopy. Preserves all folder attributes and permissions.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/how-to-migrate-the-windows-gui-node-from-a-one-physical-location-to-other/page.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nrobocopy \"%AppData%\\Storj\\Identity\\storagenode\" \\\\pc2\\Users\\user\\AppData\\Roaming\\Storj\\Identity\\storagenode /MIR\n```\n\n----------------------------------------\n\nTITLE: Unsetting POSIX mode configuration on a bucket\nDESCRIPTION: Command to remove the POSIX mode configuration from a bucket, allowing it to be controlled through environment variables or command line flags instead.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/configuration/page.md#2025-04-16_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ncuno creds setposix s3://examplebucket unset\n```\n\n----------------------------------------\n\nTITLE: Navigating to Downloads Directory in MacOS Terminal\nDESCRIPTION: This command changes the current directory to the user's Downloads folder in MacOS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/mac/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd /Users/$USER/Downloads\n```\n\n----------------------------------------\n\nTITLE: Creating a Storj Bucket for PixelFed using Uplink CLI\nDESCRIPTION: This command creates a new Storj bucket named 'pixelfed' using the uplink CLI. The bucket will be used for storing PixelFed data.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/pixelfed/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuplink mb sj://pixelfed\n```\n\n----------------------------------------\n\nTITLE: Creating a New Storj Bucket\nDESCRIPTION: Example of creating a new bucket named 'new-recipes' using the 'mb' command. This is a prerequisite for moving objects between buckets.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/mv/page.md#2025-04-16_snippet_2\n\nLANGUAGE: windows\nCODE:\n```\n.\\uplink.exe mb sj://new-recipes\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink mb sj://new-recipes\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink mb sj://new-recipes\n```\n\n----------------------------------------\n\nTITLE: Using Access Use Command in Linux\nDESCRIPTION: Command syntax for switching the current access for Uplink in Linux. This command requires an access name parameter and allows configuration of the directory storing access information.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-use/page.md#2025-04-16_snippet_1\n\nLANGUAGE: linux\nCODE:\n```\nuplink access use <access>\n```\n\n----------------------------------------\n\nTITLE: Creating a Test File in Shell\nDESCRIPTION: This command creates a simple test file with the content 'test' to verify connectivity between Splunk and Storj.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/splunk/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho \"test\" > test01.txt\n```\n\n----------------------------------------\n\nTITLE: Manual Docker Container Configuration\nDESCRIPTION: Docker run command with manual Object Mount injection configuration\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/advanced/page.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndocker run                                               \\\n    --tmpfs /cunodb                                      \\\n    -v $CUNO_ROOT:/opt/cuno:ro                           \\\n    -v /opt/cuno/etc/ld.so.preload:/etc/ld.so.preload:ro \\\n    -v $CUNO_CREDENTIALS:/opt/cuno-config/creds:ro       \\\n    <image> [container-commands]\n```\n\n----------------------------------------\n\nTITLE: Deleting Buckets in Storj using Rclone\nDESCRIPTION: Use 'rmdir' to delete an empty bucket and 'purge' to delete a non-empty bucket with all its content.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-s3/page.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrclone rmdir waterbear:mybucket\n```\n\nLANGUAGE: bash\nCODE:\n```\nrclone purge waterbear:mybucket\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration Documentation\nDESCRIPTION: YAML frontmatter and markdown content describing the setup process for integrating Arq backup software with Storj\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/arq/page.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Arq\ndocId: rnZKB53zoxOVjYLcnHngs\ntags:\n  - backup\nredirects:\n  - /dcs/how-tos/arq-integration-guide\nmetadata:\n  title: Guide for Integrating Arq Backup Software with Storj\n  description: Tutorial on how to configure Arq backup software to work with Storj, along with detailed instructions to create and implement a backup plan.\n---\n```\n\n----------------------------------------\n\nTITLE: Copying Configuration Files\nDESCRIPTION: Commands to copy configuration and revocation database files to the new location\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncp /mnt/storj/storagenode/config.yaml /mnt/storj2/storagenode-new/\ncp /mnt/storj/storagenode/revocations.db /mnt/storj2/storagenode-new/revocations.db\n```\n\n----------------------------------------\n\nTITLE: Setting Minio Cache Environment Variables on Windows\nDESCRIPTION: PowerShell commands to set Minio caching environment variables on Windows for Gateway ST. Note that cache disks are not supported on Windows.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n$env:MINIO_CACHE=\"on\"\n$env:MINIO_CACHE_EXCLUDE=\"*.pdf,mybucket/*\"\n$env:MINIO_CACHE_QUOTA=80\n$env:MINIO_CACHE_AFTER=3\n$env:MINIO_CACHE_WATERMARK_LOW=70\n$env:MINIO_CACHE_WATERMARK_HIGH=90\n```\n\n----------------------------------------\n\nTITLE: Listing API Keys via REST API\nDESCRIPTION: REST endpoint for retrieving paginated list of API keys with a limit of 50 items per page.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/concepts/multi-tenant-data/multi-tenant-access-management/page.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nhttps://us1.storj.io/api/v0/api-keys/list-paged?projectID={yourprojectid}&limit=50&page=1&order=0&orderDirection=0\n```\n\n----------------------------------------\n\nTITLE: User Account Statistics Schema\nDESCRIPTION: JSON structure showing user account metrics for the Storj network.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/open-source-and-open-data-storj-dcs-network-statistics/page.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"registered_accounts\": \"number\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Storj Storage Node Image (Shell)\nDESCRIPTION: Command to pull the latest Storj storage node image from Docker Hub. This is a crucial step in the manual update process to ensure the node runs the most recent version.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/cli/software-updates/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull storjlabs/storagenode:latest\n```\n\n----------------------------------------\n\nTITLE: List Block Devices\nDESCRIPTION: Lists all block devices in the system to identify available drives\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/linux-static-mount/page.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlsblk\n```\n\n----------------------------------------\n\nTITLE: Restarting Splunk\nDESCRIPTION: This command restarts Splunk to apply the configuration changes made in indexes.conf.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/splunk/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./opt/splunk/bin/splunk restart\n```\n\n----------------------------------------\n\nTITLE: Running access revoke command in macOS\nDESCRIPTION: Executes the access revoke command in macOS to revoke an access grant. The command requires the access name or value to be revoked as an argument.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-revoke/page.md#2025-04-16_snippet_2\n\nLANGUAGE: macos\nCODE:\n```\nuplink access [flags] <revokee>\n```\n\n----------------------------------------\n\nTITLE: Listing Files in Fusion Filesystem\nDESCRIPTION: Lists the files in the mounted Fusion filesystem.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nls $HOME/my-fusion-filesystem/\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Access 'us2' in Uplink CLI (macOS)\nDESCRIPTION: Example command to remove the access named 'us2' from the local store of Uplink CLI on macOS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-remove/page.md#2025-04-16_snippet_5\n\nLANGUAGE: macos\nCODE:\n```\nuplink access remove us2\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Private Address\nDESCRIPTION: Configuration for setting the private listening address for the node's CLI dashboard.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-add-an-additional-drive/page.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# private address to listen on\nserver.private-address: 127.0.0.1:7778\n```\n\n----------------------------------------\n\nTITLE: Checking SQLite3 Database Integrity using Docker\nDESCRIPTION: This command uses a Docker container to run SQLite3 and check the integrity of all .db files in the current directory. It mounts the current directory to /data in the container and executes the integrity check on each database file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-fix-a-database-disk-image-is-malformed/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it --mount type=bind,source=${PWD},destination=/data sstc/sqlite3 find . -maxdepth 1 -iname \"*.db\" -print0 -exec sqlite3 '{}' 'PRAGMA integrity_check;' ';'\n```\n\n----------------------------------------\n\nTITLE: Starting SSH Service in FreeBSD Jail\nDESCRIPTION: Starts the SSH service to enable remote access to the jail.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-freenas-freebsd/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nservice sshd start\n```\n\n----------------------------------------\n\nTITLE: Get Drive UUID and Filesystem Type\nDESCRIPTION: Displays detailed filesystem information including UUID and filesystem type for a specific drive\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/linux-static-mount/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlsblk -d -fs /dev/<location (example: sda2)>\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB Platform\nDESCRIPTION: Commands to clone and install the total-cluster chart for MongoDB platform deployment.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/mongodb/page.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngit clone https://github.com/jasonmimick/total-cluster\nhelm install mongodb total-cluster\n```\n\n----------------------------------------\n\nTITLE: Loading Object Mount Library in Bash\nDESCRIPTION: Command to start a bash instance with Object Mount library loaded using LD_PRELOAD\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/advanced/page.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nLD_PRELOAD=\"$CUNO_ROOT\"/cuno.so bash\n```\n\n----------------------------------------\n\nTITLE: Using Access Use Command in macOS\nDESCRIPTION: Command syntax for switching the current access for Uplink in macOS. This command requires an access name parameter and allows configuration of the directory storing access information.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-use/page.md#2025-04-16_snippet_2\n\nLANGUAGE: macos\nCODE:\n```\nuplink access use <access>\n```\n\n----------------------------------------\n\nTITLE: Fastly VCL Configuration for S3 Authentication\nDESCRIPTION: Custom VCL code snippet for enabling Amazon S3 header-based authentication in Fastly. This code handles request signing and authorization for GET requests to Storj buckets through Fastly's CDN.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/fastly/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndeclare local var.accessKey STRING;\ndeclare local var.secretKey STRING;\ndeclare local var.storjBucket STRING;\ndeclare local var.storjGateway STRING;\ndeclare local var.region STRING;\ndeclare local var.canonicalHeaders STRING;\ndeclare local var.signedHeaders STRING;\ndeclare local var.canonicalRequest STRING;\ndeclare local var.canonicalQuery STRING;\ndeclare local var.stringToSign STRING;\ndeclare local var.dateStamp STRING;\ndeclare local var.signature STRING;\ndeclare local var.scope STRING;\n\n\nset var.accessKey = \"YOUR_ACCESS_KEY\";   # Change this value to your own data\nset var.secretKey = \"YOUR_SECRET_KEY\";   # Change this value to your own data\nset var.storjBucket = \"YOUR_BUCKET_NAME\";   # Change this value to your own data\nset var.storjGateway = \"STORJ-DCS_GATEWAY\";   # Change this value to your own data\nset var.region = \"decentralized\";\n\n\nif (req.method == \"GET\" && !req.backend.is_shield) {\n\n  set bereq.http.x-amz-content-sha256 = digest.hash_sha256(\"\");\n  set bereq.http.x-amz-date = strftime({\"%Y%m%dT%H%M%SZ\"}, now);\n  set bereq.http.host = var.storjBucket \".\" var.storjGateway;\n  set bereq.url = querystring.remove(bereq.url);\n  set bereq.url = regsuball(urlencode(urldecode(bereq.url.path)), {\"%2F\"}, \"/\");\n  set var.dateStamp = strftime({\"%Y%m%d\"}, now);\n  set var.canonicalHeaders = \"\"\n\t\"host:\" bereq.http.host LF\n\t\"x-amz-content-sha256:\" bereq.http.x-amz-content-sha256 LF\n\t\"x-amz-date:\" bereq.http.x-amz-date LF\n  ;\n  set var.canonicalQuery = \"\";\n  set var.signedHeaders = \"host;x-amz-content-sha256;x-amz-date\";\n  set var.canonicalRequest = \"\"\n\t\"GET\" LF\n\tbereq.url.path LF\n\tvar.canonicalQuery LF\n\tvar.canonicalHeaders LF\n\tvar.signedHeaders LF\n\tdigest.hash_sha256(\"\")\n  ;\n\n  set var.scope = var.dateStamp \"/\" var.region \"/s3/aws4_request\";\n\n\n  set var.stringToSign = \"\"\n\t\"AWS4-HMAC-SHA256\" LF\n\tbereq.http.x-amz-date LF\n\tvar.scope LF\n\tregsub(digest.hash_sha256(var.canonicalRequest),\"^0x\", \"\")\n  ;\n\n  set var.signature = digest.awsv4_hmac(\n\tvar.secretKey,\n\tvar.dateStamp,\n\tvar.region,\n\t\"s3\",\n\tvar.stringToSign\n  );\n\n\n set bereq.http.Authorization = \"AWS4-HMAC-SHA256 \"\n\t\"Credential=\" var.accessKey \"/\" var.scope \", \"\n\t\"SignedHeaders=\" var.signedHeaders \", \"\n\t\"Signature=\" + regsub(var.signature,\"^0x\", \"\")\n  ;\n\n  unset bereq.http.Accept;\n  unset bereq.http.Accept-Language;\n  unset bereq.http.User-Agent;\n  unset bereq.http.Fastly-Client-IP;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Network Web Dashboard\nDESCRIPTION: URL format to access the Storage Node Operator Web Dashboard from a device on the local network. Replace <your-nodes-local-ip> with the actual local IP address of your node.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/cli/dashboard-cli/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttp://<your-nodes-local-ip>:14002/\n```\n\n----------------------------------------\n\nTITLE: Rclone Configuration Steps\nDESCRIPTION: Interactive configuration steps for setting up Rclone with Storj gateway credentials and endpoint information.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/tesla-sentry-mode-teslausb/page.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n# setup rclone\nrclone config\n# select n (New Remote)\n# name\nstorj-dcs-us1-gateway\n# select 4 (4 / Amazon S3 Compliant Storage Provider)\n4\n# select 13 (13 / Any other S3 compatible provider)\n13\n# select 1 (1 / Enter AWS credentials in the next step \\ \"false\")\n1\n# enter access key\n<access_key>\n# enter secret key\n<secret_key>\n# select 1 ( 1 / Use this if unsure. Will use v4 signatures and an empty region.\\ \"\")\n1\n# enter endpoint (use your own endpoint, the example shows the Americas region gateway)\nhttps://gateway.us1.storjshare.io\n# use default location_constraint\n# use default ACL\n# edit advanced config\nn\n```\n\n----------------------------------------\n\nTITLE: Using 'access restrict' Command in Uplink CLI\nDESCRIPTION: Basic usage of the 'access restrict' command in Uplink CLI for Windows, Linux, and macOS. This command creates a restricted Access Grant and prints it to stdout.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-restrict/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access restrict [flags]\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access restrict [flags]\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access restrict [flags]\n```\n\n----------------------------------------\n\nTITLE: Reloading PixelFed Configuration and Restarting Services\nDESCRIPTION: These commands reload the PixelFed configuration cache and restart the necessary services (PixelFed, Nginx, and PHP-FPM) to apply the new Storj S3 configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/pixelfed/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo php artisan config:cache\nsudo systemctl restart pixelfed nginx php8.1-fpm.service\n```\n\n----------------------------------------\n\nTITLE: Checking Failed Audits and Repairs in Windows Docker Using PowerShell\nDESCRIPTION: This PowerShell command searches Docker logs for failed GET_AUDIT or GET_REPAIR operations on a Storj storage node in a Windows environment.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/suspension-mode/page.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ndocker logs storagenode 2>&1 | sls \"GET_AUDIT|GET_REPAIR\" | sls failed\n```\n\n----------------------------------------\n\nTITLE: Configuring NoIP client in Linux\nDESCRIPTION: Command to configure the NoIP client in Linux, prompting for username, password, and hostnames.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/port-forwarding/page.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n/usr/local/bin/noip2 -C\n```\n\n----------------------------------------\n\nTITLE: Installing Aspera Trapd Service\nDESCRIPTION: Commands to install and enable the Aspera Trapd service which is required for writing to object storage systems like Storj.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/aspera/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndnf install initscripts chkconfig\n/opt/aspera/bin/astrap-config.sh enable\n```\n\n----------------------------------------\n\nTITLE: Listing All Buckets in Storj using Rclone\nDESCRIPTION: Use the 'lsf' command to list all buckets in the Storj network. Note the colon (:) character at the end of the command line.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-s3/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrclone lsf waterbear:\n```\n\n----------------------------------------\n\nTITLE: Restarting SSH Service on Linux\nDESCRIPTION: Command to restart the SSH service on a Linux server after making configuration changes to the sshd_config file for disabling password authentication.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-remote-access-the-web-dashboard/page.md#2025-04-16_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\nsudo service ssh restart\n```\n\n----------------------------------------\n\nTITLE: Unpacking the Object Mount Archive\nDESCRIPTION: Command to execute the downloaded self-extracting package which will unpack the Object Mount archive. This begins the installation process and will display the EULA.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/debian/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsh cuno_amd64_glibc_deb.run\n```\n\n----------------------------------------\n\nTITLE: Installing Essential Packages in FreeBSD Jail\nDESCRIPTION: Installs necessary packages like nano, git, and bash in the FreeBSD jail.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-freenas-freebsd/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npkg install nano git bash\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command Example\nDESCRIPTION: Example Docker command showing port mappings and address configuration for running an additional node.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-add-an-additional-drive/page.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ndocker run .... -p 28968:28967/tcp -p 28968:28967/udp -p 172.0.0.1:14003:14002 -e ADDRESS=my.ddns.tld:28968 ....\n```\n\n----------------------------------------\n\nTITLE: Performing Integrity Check on a Single SQLite3 Database\nDESCRIPTION: This command runs an integrity check on a specific SQLite3 database file using the PRAGMA integrity_check command.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-fix-a-database-disk-image-is-malformed/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsqlite3 /path/to/storage/bandwidth.db \"PRAGMA integrity_check;\"\n```\n\n----------------------------------------\n\nTITLE: Editing Storj User Profile in FreeBSD Jail\nDESCRIPTION: Opens the .profile file for the storj user to add environment variables.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-freenas-freebsd/page.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnano /home/storj/.profile\n```\n\n----------------------------------------\n\nTITLE: Restarting Storage Node Service in Windows\nDESCRIPTION: PowerShell command to restart the Storj V3 Storage Node service after configuration changes.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-do-i-change-my-parameters-such-as-payout-address-allotted-storage-space-and-bandwidth/page.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nRestart-Service storagenode\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Ops Manager Access\nDESCRIPTION: Kubectl command to set up port forwarding for accessing MongoDB Ops Manager interface.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/mongodb/page.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nkubectl port-forward mongodb-ops-manager-0 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript File Upload Script for Storj IPFS in Shell\nDESCRIPTION: This shell command executes the JavaScript script to upload a file to the Storj IPFS Pinning Service. It requires the user's beta credentials and the file path as arguments.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/storj-ipfs-pinning/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnode upload-file.mjs ipfs_beta_user ipfs_beta_password /path/file.extension\n```\n\n----------------------------------------\n\nTITLE: Enabling zkSync Era in Docker Container\nDESCRIPTION: Docker run command example showing how to enable zkSync Era wallet features when launching a Storj storage node container. The wallet feature is specified as a command line option.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/payouts/zk-sync-opt-in-for-snos/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run ... storjlabs/storagenode:latest --operator.wallet-features=zksync-era\n```\n\n----------------------------------------\n\nTITLE: Add fstab Entry\nDESCRIPTION: Configuration line to add to /etc/fstab for static mounting of the drive\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/linux-static-mount/page.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nUUID=<your HD UUID> /mnt/<directory name> <FSTYPE> defaults 0 2\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration File\nDESCRIPTION: Direct configuration of AWS credentials in the ~/.aws/config file with Storj S3 credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/dataverse/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[default]\naws_access_key_id = <Access Key>\naws_secret_access_key = <Secret Key>\nregion = us-1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inherited Permissions in Object Mount\nDESCRIPTION: Commands to create a new file and directory in a shared space, showing how the inherited permissions are applied.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/enforced-posix-access/page.md#2025-04-16_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ touch /mnt/cloud/bucket/shared/newfile\n$ mkdir /mnt/cloud/bucket/shared/newdir\n$ ls -l /mnt/cloud/bucket/shared/\ndrwxrwxr-x 1 user1 group1 0 Mar  1 12:00 /mnt/cloud/bucket/shared/newdir\n-rw-rw-r-- 1 user1 group1 0 Mar  1 12:00 /mnt/cloud/bucket/shared/newfile\n```\n\n----------------------------------------\n\nTITLE: Getting local IP in Windows\nDESCRIPTION: Command to retrieve the local IP address in Windows using Command Prompt.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/port-forwarding/page.md#2025-04-16_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nipconfig | findstr /i \"IPv4\"\n```\n\n----------------------------------------\n\nTITLE: Getting local IP in Linux\nDESCRIPTION: Command to retrieve the local IP address in Linux.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/port-forwarding/page.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhostname -I\n```\n\n----------------------------------------\n\nTITLE: Getting gateway IP in MacOS\nDESCRIPTION: Command to retrieve the gateway IP address in MacOS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/port-forwarding/page.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnetstat -nr | grep default\n```\n\n----------------------------------------\n\nTITLE: Example of Access Inspect Command with Direct Parameter on Windows\nDESCRIPTION: Example of inspecting an access grant named 'cheesecake' using Uplink CLI on Windows systems. This demonstrates the direct parameter approach.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-inspect-command/page.md#2025-04-16_snippet_3\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access inspect cheesecake\n```\n\n----------------------------------------\n\nTITLE: Forcing Data Roll from Hot to Warm in Splunk\nDESCRIPTION: These commands force a data roll from hot to warm buckets in Splunk for testing purposes. Two variations are provided, one with authentication and one without.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/splunk/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./splunk _internal call /data/indexes/Storj/roll-hot-buckets –auth (admin_username):(admin_password)\n```\n\nLANGUAGE: shell\nCODE:\n```\n./opt/splunk/bin/splunk _internal call /data/indexes/Storj/roll-hot-buckets\n```\n\n----------------------------------------\n\nTITLE: Getting gateway IP in Linux\nDESCRIPTION: Command to retrieve the gateway IP address in Linux.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/port-forwarding/page.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nip route | grep default\n```\n\n----------------------------------------\n\nTITLE: Setting Path for MSYS2 Binaries\nDESCRIPTION: Adds MSYS2 binary paths to the system PATH environment variable on Windows.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-windows/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsetx path \"C:\\msys64\\mingw64\\bin;C:\\msys64\\usr\\bin\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Gateway Help on Linux\nDESCRIPTION: Command to view the help documentation and locate the config.yaml file path on Linux systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_13\n\nLANGUAGE: text\nCODE:\n```\ngateway help\n```\n\n----------------------------------------\n\nTITLE: Stopping Storage Node Service in Windows\nDESCRIPTION: PowerShell command to stop the Storj V3 Storage Node service in Windows. Can also be done through the Windows Services applet.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-do-i-change-my-parameters-such-as-payout-address-allotted-storage-space-and-bandwidth/page.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nStop-Service storagenode\n```\n\n----------------------------------------\n\nTITLE: Object Mount LSF Job Starter Script\nDESCRIPTION: Shell script template for creating an LSF job starter that configures and runs Object Mount. This script should be placed at $LSF_ENVDIR/cuno-starter.sh or another common location accessible to all LSF nodes.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/advanced/page.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\n\ncuno_basedir=<cuno_install_dir>\n# e.g.:\n# cuno_basedir=/opt/cuno\n\n# Further configuration as necessary, e.g.:\n# export CUNO_CREDENTIALS=/usr/share/cuno-creds\n# export CUNO_OPTIONS=+cloudroot=acme\n\n\"$cuno_basedir\"/bin/cuno run \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Listing Storj Binaries in FreeBSD Jail\nDESCRIPTION: Displays the compiled Storj binaries in the Go bin directory.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-freenas-freebsd/page.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nls /home/storj/go/bin/\n```\n\n----------------------------------------\n\nTITLE: Formatting Hard Drive for Storagenode\nDESCRIPTION: Installs gdisk, creates a new partition, and formats it with ext4 filesystem for use with the storagenode.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/install-storagenode-on-raspberry-pi3-or-higher-version/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install gdisk -y\nsudo gdisk /dev/sda\nsudo mkfs.ext4 /dev/sda1\n```\n\n----------------------------------------\n\nTITLE: Initiating Graceful Exit for Multiple Windows Storage Nodes\nDESCRIPTION: This snippet demonstrates how to start the graceful exit process for multiple Storj storage nodes on the same Windows machine. It includes the command with custom server.private-address and paths for config and identity directories.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/graceful-exit-guide/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"C:\\Program Files\\Storj\\Storage Node\\storagenode.exe\" exit-satellite --config-dir \"C:\\Program Files\\Storj\\Storage Node2\\\\\" --identity-dir \"C:\\Users\\USER\\AppData\\Roaming\\Storj\\Identity\\storagenode2\" --log.output stderr --server.private-address 127.0.0.1:7779\n```\n\n----------------------------------------\n\nTITLE: Generate SSH Keys\nDESCRIPTION: Command to generate SSH key pair for secure authentication\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-remote-access-the-web-dashboard/page.md#2025-04-16_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nssh-keygen\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Access Point Usage\nDESCRIPTION: Commands demonstrating how to use AWS S3 Access Points with credentials and listing operations.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/access/page.md#2025-04-16_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncuno creds -i pair s3://arn:aws:s3:us-east-1:999999999999:accesspoint:my-access-point-name\nls s3://arn:aws:s3:us-east-1:999999999999:accesspoint:my-access-point-name/<remote-path>\n```\n\n----------------------------------------\n\nTITLE: Installing Cyberduck on Linux (DEB Package)\nDESCRIPTION: Commands to install Cyberduck on Linux systems using DEB packages and the APT package manager.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/cyberduck/page.md#2025-04-16_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\necho -e \"deb https://s3.amazonaws.com/repo.deb.cyberduck.io stable main\" | sudo tee /etc/apt/sources.list.d/cyberduck.list > /dev/null\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys FE7097963FEFBE72\nsudo apt-get update\nsudo apt-get install duck\n```\n\n----------------------------------------\n\nTITLE: Using Access Use Command in Windows\nDESCRIPTION: Command syntax for switching the current access for Uplink in Windows. This command requires an access name parameter and allows configuration of the directory storing access information.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-use/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access use <access>\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration for Storage Node Metrics\nDESCRIPTION: YAML configuration for Prometheus to scrape metrics from multiple Storage nodes. Defines scrape interval and target endpoints for monitoring.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/commercial-node/dashboard/page.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'local-metrics'\n    static_configs:\n      - targets:\n          - host.docker.internal:6000 # if prometheus and node are on the same docker host\n          - host.docker.internal:6001\n          - 192.168.1.5:6000\n          - 192.168.1.5:6001\n          - 192.168.1.6:6000\n          - 192.168.1.6:6001\n```\n\n----------------------------------------\n\nTITLE: Persistently Adding cuno-mac to PATH in MacOS\nDESCRIPTION: This command appends the cuno-mac tool location to the user's .bash_profile for persistent PATH modification in MacOS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/mac/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho \"PATH=\\$PATH:~/.local/opt/cuno/share/macos\" >> ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Installing Object Mount for Current User\nDESCRIPTION: This command runs the Object Mount installer for the current user without system-wide installation.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/musl/page.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nsh cuno-musl-installer.run\n```\n\n----------------------------------------\n\nTITLE: Uplink Setup S3 Gateway Credentials Prompt\nDESCRIPTION: Optional prompt to generate S3 compatible Gateway credentials during the Uplink setup process.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/setup-command/page.md#2025-04-16_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\nWould you like S3 backwards-compatible Gateway credentials? (y/N):\n```\n\n----------------------------------------\n\nTITLE: Creating a Locate Database with Direct Interception\nDESCRIPTION: Command for creating a custom locate database using Direct Interception mode of Object Mount, working around sudo limitations.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/tips/page.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n(cuno) $ sudo --preserve-env /bin/bash -c \"export LD_PRELOAD=$LD_PRELOAD && updatedb -U /cuno/<s3/az/gs>/<bucket> -o cunoloc.db\"\n```\n\n----------------------------------------\n\nTITLE: Running Object Mount Installer on MacOS\nDESCRIPTION: This command executes the Object Mount installer script on MacOS without using sudo.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/mac/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsh cuno-glibc-installer.run\n```\n\n----------------------------------------\n\nTITLE: Final Sync with Delete Flag\nDESCRIPTION: Commands to perform final synchronization with delete flag to remove obsolete files from destination\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nrsync -aP --delete /mnt/storj/storagenode/orders/ /mnt/storj2/storagenode-new/orders/\nrsync -aP --delete /mnt/storj/storagenode/storage/ /mnt/storj2/storagenode-new/storage/\n```\n\n----------------------------------------\n\nTITLE: Changing Locate Database Ownership\nDESCRIPTION: Command to change the ownership of the locate database to the current user after creation with sudo privileges.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/tips/page.md#2025-04-16_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nsudo chown $(whoami):$(whoami) cunoloc.db\n```\n\n----------------------------------------\n\nTITLE: Using Resolve Mode for FlexMount\nDESCRIPTION: Commands demonstrating how to use the resolve mode instead of the default exact matching mode, which is useful when symbolic links point into the mount.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/basic/page.md#2025-04-16_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ cuno -o cloudrootover=resolve -o cloudroot=\"$HOME/my-object-storage\"\n(cuno) $ ls $HOME/object_storage_mount/s3/<bucket>/<path>\n```\n\n----------------------------------------\n\nTITLE: Installing NoIP client in Linux\nDESCRIPTION: Command to install the NoIP client in Linux using make.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/port-forwarding/page.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Initializing Storj Storagenode Docker Container for Setup\nDESCRIPTION: Command to initialize a Storj storagenode by running Docker in setup mode. This creates the initial configuration before actual node operation. It mounts two volumes - one for the identity files and one for the storagenode configuration and data storage.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/install-storagenode-on-raspberry-pi3-or-higher-version/page.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -e SETUP=\"true\" \\\n--mount type=bind,source=\"<identity-dir>\",destination=/app/identity \\\n--mount type=bind,source=\"<storage-dir>\",destination=/app/config \\\n--name storagenode storjlabs/storagenode:latest\n```\n\n----------------------------------------\n\nTITLE: Deleting Empty Buckets in Storj\nDESCRIPTION: Commands to delete empty buckets using both rclone and AWS CLI\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/getting-started/page.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nrclone rmdir storj:my-bucket\n```\n\nLANGUAGE: shell\nCODE:\n```\naws s3 --endpoint-url=https://gateway.storjshare.io rb s3://my-bucket/\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Environment and Generating Summaries with ChatGPT\nDESCRIPTION: This bash script sets up a Python virtual environment, installs dependencies from requirements.txt, and runs a script to generate summaries of Markdown files using OpenAI's API. The script requires organization ID and API key environment variables to authenticate with OpenAI.\nSOURCE: https://github.com/storj/docs/blob/main/scripts/ai-seo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\npip3 install -r requirements.txt\n\nOPENAI_ORG=<org_id> OPENAI_API_KEY=<key> ./generate_summaries ../../app/dcs/**/page.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows GUI Storagenode with PIA\nDESCRIPTION: YAML configuration example for setting up a Storj storage node with PIA on Windows. The configuration specifies the external address with custom port and server address settings required for PIA integration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/running-node-via-pia/page.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n...\ncontact.external-address: mystoragenode.ddns.net:59538\n...\nserver.address: :59538\n...\n```\n\n----------------------------------------\n\nTITLE: Non-interactive License Activation with File in Console\nDESCRIPTION: Command to activate a license non-interactively by providing a license file path. Useful for automated deployments.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/activation/page.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncuno creds activate \"<file>\"\n```\n\n----------------------------------------\n\nTITLE: Basic SSH Connection Command\nDESCRIPTION: Generic SSH command to connect to remote server with username and hostname\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-remote-access-the-web-dashboard/page.md#2025-04-16_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nssh user@server\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Storj Storage Node Container (Shell)\nDESCRIPTION: Command to remove the existing Storj storage node container. This step is necessary before pulling the latest image during a manual update.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/cli/software-updates/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker rm storagenode\n```\n\n----------------------------------------\n\nTITLE: S3 API Compatibility Table\nDESCRIPTION: Markdown table showing supported S3 API operations and their compatibility status with Storj Gateway.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/s3/s3-compatibility/page.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Support | Caveats |\n|---|---|---|\n| AbortMultipartUpload | Full |  |\n| CompleteMultipartUpload | Full |  |\n[...abbreviated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Configuring External Node Address\nDESCRIPTION: Configuration for setting the public address of a Storj node, particularly useful for nodes behind NAT.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-add-an-additional-drive/page.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# the public address of the node, useful for nodes behind NAT\ncontact.external-address: \"my.ddns.tld:28967\"\n```\n\n----------------------------------------\n\nTITLE: Setting Storj as Default Storage Driver\nDESCRIPTION: Commands to remove the existing default file storage driver and set Storj as the new default storage driver in Dataverse.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/dataverse/page.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n./asadmin delete-jvm-options \"-Ddataverse.files.storage-driver-id=file\"\n./asadmin create-jvm-options \"-Ddataverse.files.storage-driver-id=storj\"\n```\n\n----------------------------------------\n\nTITLE: Starting Storage Node - CLI\nDESCRIPTION: Command to start the storage node container after configuration\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/redirect-logs/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker start storagenode\n```\n\n----------------------------------------\n\nTITLE: Configuring TeslaUSB Variables for Storj Archiving in Text\nDESCRIPTION: Configuration variables to be added to the teslausb_setup_variables.conf file for setting up rclone archiving to Storj DCS. Includes archive system, rclone drive, and path settings.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/tesla-sentry-mode-teslausb/page.md#2025-04-16_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\n# Variables for rclone archiving\nexport ARCHIVE_SYSTEM=rclone\nexport RCLONE_DRIVE=storj-dcs-us1-gateway\nexport RCLONE_PATH=tesla-m3-cam\n# The following is optional\n#export RCLONE_FLAGS=()\n```\n\n----------------------------------------\n\nTITLE: Installing Local Helm Chart\nDESCRIPTION: Command to install the Object Mount CSI Driver using a locally configured Helm chart directory.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nhelm install cunofs-csi-chart <path-to-chart>\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Object Mount Installation (Intel)\nDESCRIPTION: This command runs a Docker container with the Object Mount installer mounted, specifically for Intel-based Macs.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/mac/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm --entrypoint /bin/bash \\\n-v <path_to_installation_script>/cuno-glibc-installer:/tmp/cuno_install \\\n--name cuno-container \\\nubuntu:latest\n```\n\n----------------------------------------\n\nTITLE: Compiling Storj from Source in FreeBSD Jail\nDESCRIPTION: Clones the Storj repository and compiles the necessary components for running a test network.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-freenas-freebsd/page.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/storj/storj.git storj\ncd storj\ngo install -race -v storj.io/storj/cmd/storj-sim storj.io/storj/cmd/bootstrap storj.io/storj/cmd/satellite storj.io/storj/cmd/storagenode storj.io/storj/cmd/uplink storj.io/storj/cmd/gateway storj.io/storj/cmd/identity storj.io/storj/cmd/certificates\n```\n\n----------------------------------------\n\nTITLE: Windows Identity Migration\nDESCRIPTION: Copies identity files using robocopy for Windows-to-Windows migration\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/migrating-from-windows-gui-installation-to-a-docker-cli/page.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nrobocopy /MIR /MOVE $env:AppData\\Storj\\Identity\\storagenode D:\\STORJ\\identity\n```\n\n----------------------------------------\n\nTITLE: Output of Access Removal in Uplink CLI\nDESCRIPTION: Example output message displayed after successfully removing an access named 'us2' from the Uplink CLI local store.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-remove/page.md#2025-04-16_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nRemoved access \"us2\" from \"/home/user/.config/storj/uplink/access.json\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Object Mount CSI Driver\nDESCRIPTION: Command to upgrade the Object Mount CSI Driver to the latest version while preserving existing configuration values.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade --reuse-values cunofs-csi-chart 'oci://registry-1.docker.io/cunofs/cunofs-csi-chart'\n```\n\n----------------------------------------\n\nTITLE: Launching NoIP client in Linux\nDESCRIPTION: Command to launch the NoIP client in the background in Linux.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/port-forwarding/page.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n/usr/local/bin/noip2\n```\n\n----------------------------------------\n\nTITLE: Specifying Mount Option in Docker Run Command for Storj Storage Node\nDESCRIPTION: This snippet demonstrates the --mount option in a Docker run command for a Storj Storage Node. It specifies the source and destination paths for the storage location, which determines where the config.yaml file will be created.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/where-can-i-find-a-config-yaml/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--mount type=bind,source=/mnt/storj/storagenode,destination=/app/config\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Storj Test Network in FreeBSD Jail\nDESCRIPTION: Configures and starts a local Storj test network with multiple components.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-freenas-freebsd/page.md#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nstorj-sim network setup\nstorj-sim network run\n```\n\n----------------------------------------\n\nTITLE: Stopping Storage Node - Windows\nDESCRIPTION: PowerShell command to stop the Storj storage node Windows service\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/redirect-logs/page.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nStop-Service storagenode\n```\n\n----------------------------------------\n\nTITLE: Deleting an Object with Uplink CLI\nDESCRIPTION: Basic usage of the 'rm' command to delete an object from a Storj bucket. The command syntax is the same for Windows, Linux, and macOS, with slight differences in the executable name.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/rm-command/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe rm sj://BUCKET/KEY [flags]\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink rm sj://BUCKET/KEY [flags]\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink rm sj://BUCKET/KEY [flags]\n```\n\n----------------------------------------\n\nTITLE: Starting Storage Node - Windows\nDESCRIPTION: PowerShell command to start the Storj storage node Windows service\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/redirect-logs/page.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nStart-Service storagenode\n```\n\n----------------------------------------\n\nTITLE: Setting Up Uplink CLI in macOS\nDESCRIPTION: Command to set up the Uplink CLI tool in macOS environment. This is part of the process for creating keys for CLI usage in Storj.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/access/page.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuplink setup\n```\n\n----------------------------------------\n\nTITLE: Uplink Setup API Key or Access Grant Prompt\nDESCRIPTION: Command line prompt for entering the API key or Access grant during the Uplink setup process.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/setup-command/page.md#2025-04-16_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\nEnter API key or Access grant:\n```\n\n----------------------------------------\n\nTITLE: Create Mount Directory\nDESCRIPTION: Creates a new directory in /mnt for mounting the drive\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/linux-static-mount/page.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir /mnt/<directory name>\n```\n\n----------------------------------------\n\nTITLE: Important Storj Directories on Windows\nDESCRIPTION: Lists the key directories used by Storj on Windows systems, including the GitHub repository location, configuration files directory, and compiled binaries location. Useful for managing or uninstalling Storj.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-windows/page.md#2025-04-16_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\n#This is where the Storj code from github is stored:\nC:\\Users\\USER\\storj\n\n#Stores the config files.\nC:\\Users\\USER\\AppData\\Roaming\\Storj\n\n#Stores compiled binaries.\nC:\\Users\\USER\\go\\bin\n```\n\n----------------------------------------\n\nTITLE: Changing file permissions on POSIX-enabled Object Mount\nDESCRIPTION: Example of using chmod to change permissions on a file in a POSIX-enabled Object Mount. The example shows setting rwx permissions for owner and group only.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/configuration/page.md#2025-04-16_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ chmod 0770 /mnt/s3-bucket/file\n$ ls -l /mnt/s3-bucket/file\n-rwxrwx---  1 root  root 0 Nov 10 11:16 file\n```\n\n----------------------------------------\n\nTITLE: Installing MLA Dependencies with pip in Python\nDESCRIPTION: This snippet shows how to install the Machine Learning Accelerator dependencies using pip. It requires the path to the Object Mount MLA requirements file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/ml/page.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install -r \"<path to Object Mount MLA>/requirements.txt\"\n```\n\n----------------------------------------\n\nTITLE: Executing Metadata Command in Storj Uplink CLI (macOS)\nDESCRIPTION: Command syntax for executing metadata-related operations using the Storj Uplink CLI on macOS. The command is followed by a specific subcommand.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/meta-command/page.md#2025-04-16_snippet_2\n\nLANGUAGE: macos\nCODE:\n```\nuplink meta [command]\n```\n\n----------------------------------------\n\nTITLE: Encryption Passphrase Configuration\nDESCRIPTION: Prompt for entering the encryption passphrase used for data encryption and decryption.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-native/page.md#2025-04-16_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nOption passphrase.\nEncryption passphrase.\nTo access existing objects enter passphrase used for uploading.\nEnter a value. Press Enter to leave empty.\npassphrase> your-secret-encryption-phrase\n```\n\n----------------------------------------\n\nTITLE: Interactive License Activation in Console\nDESCRIPTION: Command to activate a license interactively by following prompted steps. This is the standard method for license activation.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/activation/page.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncuno creds activate\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Storj Docs (Bash)\nDESCRIPTION: This command installs the necessary npm dependencies for the Storj documentation project. It should be run before starting the development server.\nSOURCE: https://github.com/storj/docs/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Object Mount CSI Driver\nDESCRIPTION: Command to completely remove the Object Mount CSI Driver from the Kubernetes cluster.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nhelm uninstall cunofs-csi-chart\n```\n\n----------------------------------------\n\nTITLE: Executing Metadata Command in Storj Uplink CLI (Windows)\nDESCRIPTION: Command syntax for executing metadata-related operations using the Storj Uplink CLI on Windows. The command is followed by a specific subcommand.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/meta-command/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe meta [command]\n```\n\n----------------------------------------\n\nTITLE: Embedding Registration Token Component in Markdown\nDESCRIPTION: This snippet demonstrates how to include a custom registration token component in the Markdown document, likely for user interaction to obtain the authorization token.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/auth-token/page.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% registration-token /%}\n```\n\n----------------------------------------\n\nTITLE: Compiling Storj Web UIs\nDESCRIPTION: Compiles the web user interfaces for Storj components including satellite, storagenode, and multinode on Windows.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-windows/page.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\ncd .\\web\\satellite\\\n$env:GOOS=\"js\"; $env:GOARCH=\"wasm\"; go build -o ./static/wasm/access.wasm storj.io/storj/satellite/console/wasm\ncp \"$(go env GOROOT)/misc/wasm/wasm_exec.js\" ./static/wasm\nget-item .\\static\\wasm\\* | %{brotli -k $_.FullName}\nnpm install\nnpm run build\n\ncd ..\\storagenode\nnpm install\nnpm run build\n\ncd ..\\multinode\nnpm install\nnpm run build\n\ncd ..\\..\\satellite\\admin\\ui\nnpm install\nnpm run build\n\ncd ..\\..\\..\ngo install -race -v storj.io/gateway@latest\ngo install ./...\n```\n\n----------------------------------------\n\nTITLE: Checking Failed Audits and Repairs in Windows GUI Using PowerShell\nDESCRIPTION: This PowerShell command searches the Storj storage node log file for failed GET_AUDIT or GET_REPAIR operations in a Windows GUI environment.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/suspension-mode/page.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nsls \"GET_AUDIT|GET_REPAIR\" \"C:\\Program Files\\Storj\\Storage Node\\storagenode.log\" | sls failed\n```\n\n----------------------------------------\n\nTITLE: Alpine Linux Package Removal Command\nDESCRIPTION: Command to remove CUNO package using apk package manager on Alpine Linux distributions.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/uninstall/page.md#2025-04-16_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nsudo apk del cuno\n```\n\n----------------------------------------\n\nTITLE: Detecting Audit Failures - Windows Docker\nDESCRIPTION: PowerShell command to search node logs for failed audit and repair operations in Docker environment\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/why-is-my-node-disqualified/page.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ndocker logs storagenode 2>&1 | sls \"GET_AUDIT|GET_REPAIR\" | sls failed\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Access 'us2' in Uplink CLI (Linux)\nDESCRIPTION: Example command to remove the access named 'us2' from the local store of Uplink CLI on Linux.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-remove/page.md#2025-04-16_snippet_4\n\nLANGUAGE: linux\nCODE:\n```\nuplink access remove us2\n```\n\n----------------------------------------\n\nTITLE: Uplink Setup Example Dialog\nDESCRIPTION: Example of the uplink setup process showing the interactive prompt format for entering credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/chainstate-snapshots/page.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ uplink setup\nEnter name to import as [default: main]:\nEnter API key or Access grant: <access grant>\nSatellite address: <satellite address>\nPassphrase:\n```\n\n----------------------------------------\n\nTITLE: Verify Mount Configuration\nDESCRIPTION: Verifies the mount point configuration by displaying drive information\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/linux-static-mount/page.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nlsblk -d -fs /dev/<location (example: sda2)>\n```\n\n----------------------------------------\n\nTITLE: Listing Objects with a Specific Prefix\nDESCRIPTION: Commands to list objects with a specific prefix. This example lists contents of the 'cakes' prefix within the 'images' bucket.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/ls-command/page.md#2025-04-16_snippet_3\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe ls sj://images/cakes\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink ls sj://images/cakes\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink ls sj://images/cakes\n```\n\n----------------------------------------\n\nTITLE: Enabling SSH in FreeBSD Jail\nDESCRIPTION: Enables SSH access to the FreeBSD jail for remote management.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-freenas-freebsd/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsysrc sshd_enable=\"YES\"\n```\n\n----------------------------------------\n\nTITLE: Installing Uplink CLI for Linux AMD64\nDESCRIPTION: Commands to download, unzip and install the Storj uplink CLI tool for Linux AMD64 systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/livepeer/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://github.com/storj/storj/releases/latest/download/uplink_linux_amd64.zip -o uplink_linux_amd64.zip\nunzip -o uplink_linux_amd64.zip\nsudo install uplink /usr/local/bin/uplink\n```\n\n----------------------------------------\n\nTITLE: Checking POSIX Metadata in Object Mount\nDESCRIPTION: Commands to view POSIX metadata for a file or directory in Object Mount using ls -l and stat.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/enforced-posix-access/page.md#2025-04-16_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ls -l /mnt/cloud/bucket/directory\ndrwx------ 1 user1 group1 0 Mar  1 12:00 /mnt/cloud/bucket/directory\n$ stat /mnt/cloud/bucket/directory\nFile: /mnt/cloud/bucket/directory\nSize: 0             Blocks: 0          IO Block: 4096   directory\nDevice: 1ch/28d     Inode: 123456      Links: 1\nAccess: (0700/drwx------)  Uid: ( 1000/  user1)   Gid: ( 1000/  group1)\nAccess: 2022-03-01 12:00:00.000000000 +0000\nModify: 2022-03-01 12:00:00.000000000 +0000\nChange: 2022-03-01 12:00:00.000000000 +0000\n Birth: -\n```\n\n----------------------------------------\n\nTITLE: Navigating to Binary Locations in Shell\nDESCRIPTION: Commands for navigating to different file locations where the Storj binary might be located. Shows how to navigate to Desktop, Downloads, or home directory using shell commands.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/support/faqs/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/Desktop\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/Downloads\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd ~\n```\n\n----------------------------------------\n\nTITLE: Example of 'access list' Command in macOS\nDESCRIPTION: Example showing how to execute the 'access list' command in macOS to display all available access grants and their satellites.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-list-command/page.md#2025-04-16_snippet_5\n\nLANGUAGE: macos\nCODE:\n```\nuplink access list\n```\n\n----------------------------------------\n\nTITLE: Creating a New Bucket in macOS for Server-Side Copy\nDESCRIPTION: Example of creating a new bucket in preparation for server-side copy operations in macOS. This uses the mb command which is a prerequisite for copying between buckets.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/cp-command/page.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nuplink mb sj://new-recipes\n```\n\n----------------------------------------\n\nTITLE: System-wide File Removal Commands\nDESCRIPTION: List of files to remove for system-wide CUNO installation, including binaries, shared objects, and man pages located in system directories.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/uninstall/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/usr/lib/cuno.so\n/usr/bin/cuno\n/usr/share/man/man1/cuno.1\n/usr/share/man/man1/cuno-creds.1\n/usr/share/man/man1/cuno-mount.1\n/usr/share/man/man8/cuno.so.8\n```\n\n----------------------------------------\n\nTITLE: Creating a PersistentVolumeClaim for Dynamic Provisioning\nDESCRIPTION: YAML configuration for a PersistentVolumeClaim that references a StorageClass for dynamic storage provisioning from cloud storage.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: cunofs-pvc\nspec:\n  accessModes:\n    - ReadWriteOncePod\n  storageClassName: \"cunofs-storageclass\" # StorageClass metadata.name\n  resources:\n    requests:\n      storage: 16Ei # ignored but required\n```\n\n----------------------------------------\n\nTITLE: Create Linux Storage Directory\nDESCRIPTION: Creates the required directory structure for Storj storage node on Linux systems\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/migrating-from-windows-gui-installation-to-a-docker-cli/page.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmkdir -p /mnt/storj/storagenode/storage\n```\n\n----------------------------------------\n\nTITLE: Setting Root Password in FreeBSD Jail\nDESCRIPTION: Sets a new password for the root user in the FreeBSD jail.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-freenas-freebsd/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npasswd\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database in WSL\nDESCRIPTION: Creates a PostgreSQL database for Storj testing in Windows Subsystem for Linux (WSL).\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-windows/page.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ncreate database teststorj;\n```\n\n----------------------------------------\n\nTITLE: Windows Orders Migration\nDESCRIPTION: Moves orders directory using robocopy for Windows-to-Windows migration\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/migrating-from-windows-gui-installation-to-a-docker-cli/page.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nrobocopy /MIR /MOVE \"$env:ProgramFiles\\Storj\\Storage Node\\orders\" D:\\STORJ\\orders\n```\n\n----------------------------------------\n\nTITLE: Setting Dashboard Address Configuration\nDESCRIPTION: Configuration for the API gateway and frontend app server address with the default port setting.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-add-an-additional-drive/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# server address of the api gateway and frontend app\n# console.address: 127.0.0.1:14002\n```\n\n----------------------------------------\n\nTITLE: Setting up Object Mount on FUSE for FlexMount\nDESCRIPTION: Commands to create a directory and mount it as an Object Mount on FUSE, which is the first step in setting up FlexMount.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/basic/page.md#2025-04-16_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir \"$HOME/my-object-storage\"\n$ cuno mount \"$HOME/my-object-storage\"\n```\n\n----------------------------------------\n\nTITLE: MacOS Data Migration Commands\nDESCRIPTION: Series of rsync commands for migrating data from Windows to MacOS\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/migrating-from-windows-gui-installation-to-a-docker-cli/page.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nrsync -aP /mnt/d/Users/user/AppData/Roaming/Storj/Identity/storagenode/ macuser@192.168.1.69:/Volumes/Storj/storagenode/identity/\nrsync -aP \"/mnt/c/Program Files/Storj/Storage Node/orders\" macuser@192.168.1.69:/Volumes/Storj/storagenode/orders/\nrsync -aP /mnt/d/STORJ/ macuser@192.168.1.69:/Volumes/Storj/storagenode/storage/\nrsync -aP --delete /mnt/d/STORJ/ macuser@192.168.1.69:/Volumes/Storj/storagenode/storage/\nrsync -aP --delete \"/mnt/c/Program Files/Storj/Storage Node/orders\" macuser@192.168.1.69:/Volumes/Storj/storagenode/orders/\n```\n\n----------------------------------------\n\nTITLE: Installing Python Libraries in Jupyter Notebook\nDESCRIPTION: This Python code snippet installs the required libraries (boto3 and pandas) using pip within a Jupyter notebook cell.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/use-storj-dcs-from-cloud-native-environments-using-sidecar-pattern/page.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport subprocess\nsubprocess.run([\"pip\", \"install\",\"boto3\", \"pandas\"])\n```\n\n----------------------------------------\n\nTITLE: Viewing Gateway Help on macOS\nDESCRIPTION: Command to view the help documentation and locate the config.yaml file path on macOS systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/self-host/gateway-st/page.md#2025-04-16_snippet_14\n\nLANGUAGE: text\nCODE:\n```\ngateway help\n```\n\n----------------------------------------\n\nTITLE: Checking Go Version in FreeBSD Jail\nDESCRIPTION: Verifies the installed Go version in the FreeBSD jail.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-freenas-freebsd/page.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo version\n```\n\n----------------------------------------\n\nTITLE: Installing Cyberduck on Linux (RPM Package)\nDESCRIPTION: Commands to install Cyberduck on Linux systems using RPM packages and the Yum package manager.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/cyberduck/page.md#2025-04-16_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\necho -e \"[duck-stable]\\nname=duck-stable\\nbaseurl=https://repo.cyberduck.io/stable/\\$basearch/\\nenabled=1\\ngpgcheck=0\" | sudo tee /etc/yum.repos.d/duck-stable.repo\nsudo yum install duck\n```\n\n----------------------------------------\n\nTITLE: Installing Go in FreeBSD Jail\nDESCRIPTION: Installs the Go programming language in the FreeBSD jail for Storj development.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-freenas-freebsd/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npkg install go\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of sync.WaitGroup in Go\nDESCRIPTION: This snippet demonstrates a common mistake with sync.WaitGroup where processConcurrently can return before wg.Add is called, potentially not waiting for all goroutines to finish.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc processConcurrently(item []*Item) {\n\tvar wg sync.WaitGroup\n\tdefer wg.Wait()\n\tfor _, item := range items {\n\t\titem := item\n\t\tgo func() {\n\t\t\tprocess(&wg, item)\n\t\t}()\n\t}\n}\n\nfunc process(wg *sync.WaitGroup, item *Item) {\n\twg.Add(1)\n\tdefer wg.Done()\n\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting SSH Service on macOS\nDESCRIPTION: Commands to restart the SSH service on a macOS server after making configuration changes to the sshd_config file for disabling password authentication.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-remote-access-the-web-dashboard/page.md#2025-04-16_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\nsudo launchctl stop com.openssh.sshd\nsudo launchctl start com.openssh.sshd\n```\n\n----------------------------------------\n\nTITLE: Creating Directory in Azure Storage for Fusion\nDESCRIPTION: Creates an empty directory in an Azure storage container to be used for Fusion storage. This is required if the container is not already empty.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncuno run mkdir \"/cuno/az/<account-name>/<bucket>/fusion-store\"\n```\n\n----------------------------------------\n\nTITLE: Importing Access Grant in Uplink CLI (Windows/macOS/Linux)\nDESCRIPTION: Basic usage syntax for the 'access import' command in Uplink CLI. It allows importing an Access Grant from a file or directly as a string, associating it with a name.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-import/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n.\\uplink.exe access import [flags] <name> <access|filename>\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access import [flags] <name> <access|filename>\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access import [flags] <name> <access|filename>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Connection with Potential Resource Leak in Go\nDESCRIPTION: This snippet demonstrates a connection implementation that could potentially leak resources if not properly closed. It uses a monitor goroutine for async processing.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-goroutine-leaks-in-tests/page.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Conn struct {\n  messages chan Message\n\n  close context.CancelFunc\n  done  chan struct{}\n}\n\nfunc Dial(ctx context.Context) *Conn {\n  ctx, cancel := context.WithCancel(ctx)\n  conn := &Conn{\n    close:    cancel,\n    messages: make(chan Message)\n    done:     make(chan struct{}),\n  }\n  go conn.monitor(ctx)\n  return conn\n}\n\nfunc (conn *Conn) monitor(ctx context.Context) {\n  defer close(conn.done)\n  for {\n    select {\n    case msg := <-conn.messages:\n      conn.handle(msg)\n    case <-ctx.Done():\n      return\n    }\n  }\n}\n\nfunc (conn *Conn) Close() {\n  conn.close()\n  <-conn.done\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Values.yaml for Manual Helm Installation\nDESCRIPTION: YAML configuration for values.yaml file to set license and import credentials when installing the Helm chart manually.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# values.yaml file\nObject MountLicense:\n  license: \"<your license key>\"\ncredsToImport:\n  - \"<credential-1>\"\n  - \"<credential-2>\"\n  - \"<..>\"\n  - \"<credential-N>\"\n```\n\n----------------------------------------\n\nTITLE: Running Folder Upload Script\nDESCRIPTION: Command to execute the folder upload script with authentication credentials\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/storj-ipfs-pinning/page.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnode upload-folder.mjs ipfs_beta_user ipfs_beta_password /path/folder\n```\n\n----------------------------------------\n\nTITLE: Displaying Go Environment in FreeBSD Jail\nDESCRIPTION: Shows the Go environment variables in the FreeBSD jail.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-freenas-freebsd/page.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo env\n```\n\n----------------------------------------\n\nTITLE: Restarting Storj Storage Node Service on Windows\nDESCRIPTION: This PowerShell command restarts the 'storagenode' service on Windows. It's used to apply QUIC configuration changes on Windows systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/quic-requirements/page.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRestart-Service storagenode\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel Batch Processing in Go\nDESCRIPTION: A parallel processing implementation that handles slices in batches with configurable concurrency and batch size. Uses a limiter to manage concurrent goroutines.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_23\n\nLANGUAGE: go\nCODE:\n```\ntype Parallel struct {\n\tConcurrency int\n\tBatchSize   int\n}\n\nfunc (p Parallel) Process(ctx context.Context,\n\tn, process func(low, high int)) error {\n\n\tif p.Concurrency <= 0 {\n\t\tpanic(\"concurrency must be larger than zero\")\n\t}\n\tif p.BatchSize <= 0 {\n\t\tpanic(\"batch size must be larger than zero\")\n\t}\n\n\tlim := NewLimiter(p.Concurrency)\n\tdefer lim.Wait()\n\n\tfor low := 0; low < n; low += p.BatchSize {\n\t\tlow, high := low, low + p.BatchSize\n\t\tif high > n {\n\t\t\thigh = n\n\t\t}\n\n\t\tstarted := lim.Go(ctx, func() {\n\t\t\tprocess(low, high)\n\t\t})\n\t\tif !started {\n\t\t\treturn ctx.Err()\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in Storj Bucket - MacOS\nDESCRIPTION: Command to list objects in a Storj bucket named 'cakes' using MacOS Uplink CLI.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/interacting-with-your-first-object/list-an-object/page.md#2025-04-16_snippet_1\n\nLANGUAGE: macos\nCODE:\n```\nuplink ls sj://cakes\n```\n\n----------------------------------------\n\nTITLE: Installing SSH Server on Linux\nDESCRIPTION: Command to install SSH server on Linux systems using apt package manager\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-remote-access-the-web-dashboard/page.md#2025-04-16_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nsudo apt update && sudo apt install ssh -y\n```\n\n----------------------------------------\n\nTITLE: Object Mount Shell Selection\nDESCRIPTION: Command to launch a specific shell with Object Mount enabled\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/basic/page.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncuno run <shell>\n```\n\n----------------------------------------\n\nTITLE: Unpacking cunoFS Archive\nDESCRIPTION: Command to unpack the downloaded cunoFS archive using the shell.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/alpine/page.md#2025-04-16_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nsh cuno_x86_64_musl_apk.run\n```\n\n----------------------------------------\n\nTITLE: Querying Active Sessions in CockroachDB\nDESCRIPTION: SQL query to monitor long-running queries by examining active sessions, showing node ID, query age, and truncated query text. Useful for identifying stalled transactions and investigating performance issues.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/choosing-cockroach-db-for-horizontal-scalability/page.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT node_id,\n   age(clock_timestamp(), oldest_query_start::timestamptz),\n   substring(active_queries, 0, 50) AS query\nFROM [SHOW SESSIONS]\nWHERE oldest_query_start IS  NOT  NULL\nORDER BY oldest_query_start ASC\nLIMIT  10;\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL in Docker\nDESCRIPTION: Pulls and runs a PostgreSQL Docker container, then creates a database for Storj testing.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-windows/page.md#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\ndocker pull postgres\n\ndocker run --rm -p 5432:5432 --name postgres postgres\n\n# In a new terminal\ndocker exec -it postgres createdb -U postgres teststorj\n```\n\n----------------------------------------\n\nTITLE: Importing Access Grant from File\nDESCRIPTION: Examples showing how to import an access grant from a file named 'cheesecake.access' across different operating systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/import-command/page.md#2025-04-16_snippet_1\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe import cheesecake cheesecake.access\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink import cheesecake cheesecake.access\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink import cheesecake cheesecake.access\n```\n\n----------------------------------------\n\nTITLE: Detecting Audit Failures - Linux/MacOS\nDESCRIPTION: Bash command to search node logs for failed GET_AUDIT and GET_REPAIR operations\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/why-is-my-node-disqualified/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs storagenode 2>&1 | grep -E \"GET_AUDIT|GET_REPAIR\" | grep failed\n```\n\n----------------------------------------\n\nTITLE: Database Storage Comparison with Prefix Compression\nDESCRIPTION: Comparison of storage efficiency between PostgreSQL and CockroachDB, demonstrating CockroachDB's prefix compression benefits for the same dataset.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/choosing-cockroach-db-for-horizontal-scalability/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nPrefix compression:\n\nCloudSQL Postgres\n239 GB\n65,323,332  rows\n~3658 bytes/row\n\nThe same database ported to CockroachDB\n186 GB\n65,323,332  rows\n~2846 bytes/row\n```\n\n----------------------------------------\n\nTITLE: Log Configuration - Windows\nDESCRIPTION: Configuration entry for config.yaml to specify log file location for Windows installation\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/redirect-logs/page.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nlog.output: winfile:///X:\\Storagenode\\node.log\n```\n\n----------------------------------------\n\nTITLE: Exporting SSH Public Key from Linux Client to Server\nDESCRIPTION: Command to export the public SSH key from a Linux client to a server using the ssh-copy-id utility, which handles the proper formatting and permissions automatically.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-remote-access-the-web-dashboard/page.md#2025-04-16_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nssh-copy-id -i ~/.ssh/id_rsa.pub user@server\n```\n\n----------------------------------------\n\nTITLE: Creating Directory in Google Cloud Storage for Fusion\nDESCRIPTION: Creates an empty directory in a Google Cloud Storage bucket to be used for Fusion storage. This is required if the bucket is not already empty.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncuno run mkdir \"/cuno/gs/<bucket>/fusion-store\"\n```\n\n----------------------------------------\n\nTITLE: Installing Object Mount for Current User\nDESCRIPTION: Command to run the Object Mount installer for the current user only, without requiring root privileges.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/glibc/page.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nsh cuno-glibc-installer.run\n```\n\n----------------------------------------\n\nTITLE: Basic Database Test Helper in Go\nDESCRIPTION: Demonstrates a simple test helper pattern for database testing, showing both callback and direct return approaches.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/go-integration-tests-with-postgres/page.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc TestCreateTable(t *testing.T) {\n\tctx := context.Background()\n\tWithDatabase(ctx, t, func(t *testing.TB, db *pgx.Conn) {\n\t\t_, err := db.Exec(ctx, `\n\t\t\tCREATE TABLE accounts ( user_id serial PRIMARY KEY );\n\t\t`)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t})\n}\n\nfunc WithDatabase[TB testing.TB](ctx context.Context, tb TB, test func(t TB, db *pgx.Conn)) {\n\t// < snip >\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Mount Fusion with Dynamic Allocation in Kubernetes\nDESCRIPTION: A YAML configuration showing how to set up Object Mount Fusion with dynamic provisioning using StorageClasses. The Object Mount StorageClass references a backing StorageClass that will be used to generate backing PVs automatically.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: \"backing-sc\"\n<...>\n---\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: cunofs-storageclass\nprovisioner: cunofs.csi.com\nparameters:\n  cloud-type: s3\n  bucket: cuno-csi-testing\n  bucket-subdir: test_kubernetes\n  fusionStorageClass: \"backing-sc\" # Refer to the backing StorageClass\n```\n\n----------------------------------------\n\nTITLE: Form Template Configuration\nDESCRIPTION: ERB template for file upload form\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/rails-activestorage/page.md#2025-04-16_snippet_9\n\nLANGUAGE: erb\nCODE:\n```\n<div><%= form.label :main_image %> <%= form.file_field :main_image %></div>\n```\n\n----------------------------------------\n\nTITLE: Deleting API Keys via REST API\nDESCRIPTION: REST endpoint for deleting a specific API key by its ID using DELETE method.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/concepts/multi-tenant-data/multi-tenant-access-management/page.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nhttps://us1.storj.io/api/v0/apikeys/delete/acc0dd0a-786b-46e7-b5e8-6b9c8b05fbb8\n```\n\n----------------------------------------\n\nTITLE: Configuring Storj Index in Splunk's indexes.conf\nDESCRIPTION: This snippet shows how to configure a Storj index in Splunk's indexes.conf file, including paths for cold, home, and thawed data, as well as remote path settings.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/splunk/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n[Storj]\n\n  coldPath = $SPLUNK_DB/Storj/colddb\n\n  enableDataIntegrityControl = 0\n\n  enableTsidxReduction = 0\n\n  homePath = $SPLUNK_DB/Storj/db\n\n  maxTotalDataSizeMB = 512000\n\n  thawedPath = $SPLUNK_DB/Storj/thaweddb\n\n  remotePath = volume:Storj/Storj\n\n  hotlist_bloom_filter_recency_hours = 48\n\n  hotlist_recency_secs = 86400\n```\n\n----------------------------------------\n\nTITLE: Referencing Caveat Implementation in Go\nDESCRIPTION: This snippet provides a link to the GitHub repository where the code for supported Caveats on the Satellite is implemented. It's important for understanding the specific implementation details of access restrictions in Storj.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/concepts/access/access-grants/api-key/restriction/page.md#2025-04-16_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/storj/common/blob/main/macaroon/apikey.go\n```\n\n----------------------------------------\n\nTITLE: Configuring Starfish Archive Target Settings in CLI\nDESCRIPTION: Command line instruction to update Starfish archive target configuration for Storj integration, setting the max_part_size and default_part_size parameters to 64MiB for optimal performance.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/starfish/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsf archive-target update Storj default_part_size=64MiB max_part_size=64MiB\n```\n\n----------------------------------------\n\nTITLE: Setting UDP Buffer Size in Configuration File on macOS/FreeBSD\nDESCRIPTION: This command adds a line to the /etc/sysctl.d/udp_buffer.conf file to set the maximum socket buffer size to 2875000 bytes. This change will take effect after system reboot.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/quic-requirements/macosfreebsd-configuration-for-udp/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho \"kern.ipc.maxsockbuf=2875000\" >> /etc/sysctl.d/udp_buffer.conf\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Container\nDESCRIPTION: Command to remove the existing storage node docker container\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker rm storagenode\n```\n\n----------------------------------------\n\nTITLE: Restarting Bacula Storage Daemon\nDESCRIPTION: Command to restart the Bacula Storage Daemon service after configuring new S3 storage target. This step is necessary for the new S3 target to be recognized by the system.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/bacula/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl restart bacula-sd\n```\n\n----------------------------------------\n\nTITLE: Verifying Object Mount Version within Mac Container\nDESCRIPTION: Command to check the Object Mount version when already inside a cuno-mac container session. This is used after entering the container environment where the cuno command is directly available.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/download-install/page.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# terminal\ncuno version\n```\n\n----------------------------------------\n\nTITLE: Configuring Cgroup Memory Support\nDESCRIPTION: Modifies the boot command line to enable cgroup memory support, preventing OOM hangs on Raspberry Pi 3 B/B+.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/install-storagenode-on-raspberry-pi3-or-higher-version/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo nano /boot/cmdline.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Storj User in FreeBSD Jail\nDESCRIPTION: Adds a new user named 'storj' with bash as the default shell for running Storj processes.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-freenas-freebsd/page.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nadduser storj\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Node Debug Address\nDESCRIPTION: Environment variable configuration to enable metrics endpoint for a Storage node, specifying the debug address and port.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/commercial-node/dashboard/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSTORJ_DEBUG_ADDR=127.0.0.1:6000\n```\n\n----------------------------------------\n\nTITLE: Updating Shell Environment in FreeBSD Jail\nDESCRIPTION: Reloads the user profile to apply the new environment variables.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-freenas-freebsd/page.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsource ~/.profile\n```\n\n----------------------------------------\n\nTITLE: Example of 'access list' Command in Windows\nDESCRIPTION: Example showing how to execute the 'access list' command in Windows to display all available access grants and their satellites.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-list-command/page.md#2025-04-16_snippet_3\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access list\n```\n\n----------------------------------------\n\nTITLE: Counting Audit Stats - Linux/MacOS\nDESCRIPTION: Bash commands to count started and finished audits for detecting hanging operations\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/why-is-my-node-disqualified/page.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs storagenode 2>&1 | grep -E \"GET_AUDIT|GET_REPAIR\" | grep started -c\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs storagenode 2>&1 | grep -E \"GET_AUDIT|GET_REPAIR\" | grep downloaded -c\n```\n\n----------------------------------------\n\nTITLE: Incorrect Modification of sync.WaitGroup Usage in Go\nDESCRIPTION: This snippet shows an incorrect modification of sync.WaitGroup usage where an added condition (filepath.Ext check) breaks the correct synchronization.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc processConcurrently(item []*Item) {\n\tvar wg sync.WaitGroup\n\twg.Add(len(items))\n\tdefer wg.Wait()\n\tfor _, item := range items {\n\t\titem := item\n\t\tif filepath.Ext(item.Path) != \".go\" {\n\t\t\tcontinue\n\t\t}\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\tprocess(item)\n\t\t}()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Searching with a Custom Locate Database\nDESCRIPTION: Command showing how to use the locate utility with a custom database created for Object Mount storage.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/tips/page.md#2025-04-16_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nlocate -d cunoloc.db myfile\n```\n\n----------------------------------------\n\nTITLE: Storage and Data Transfer Statistics Schema\nDESCRIPTION: JSON structure showing the available metrics for stored and transferred data on the Storj network, including bandwidth usage, storage counts, and capacity estimates.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/open-source-and-open-data-storj-dcs-network-statistics/page.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bandwidth_bytes_downloaded\": \"number\",\n  \"bandwidth_bytes_uploaded\": \"number\",\n  \"storage_inline_bytes\": \"number\",\n  \"storage_inline_segments\": \"number\",\n  \"storage_median_healthy_pieces_count\": \"number\",\n  \"storage_min_healthy_pieces_count\": \"number\",\n  \"storage_remote_bytes\": \"number\",\n  \"storage_remote_segments\": \"number\",\n  \"storage_remote_segments_lost\": \"number\",\n  \"storage_total_bytes\": \"number\",\n  \"storage_total_objects\": \"number\",\n  \"storage_total_pieces\": \"number\",\n  \"storage_total_segments\": \"number\",\n  \"storage_free_capacity_estimate_bytes\": \"number\"\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Video Access and Viewing\nDESCRIPTION: Commands for executing the transcoding script, checking progress, and generating public access links.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/livepeer/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x livepeer-req\n./livepeer-req\nuplink ls sj://livepeer/resized/hls\nuplink share --url --public --readonly=true --disallow-lists --not-after=none sj://livepeer/resized\n```\n\n----------------------------------------\n\nTITLE: Counting Audit Stats - Windows GUI\nDESCRIPTION: PowerShell commands to count started and finished audits in Windows GUI installation\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/why-is-my-node-disqualified/page.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n(sls \"GET_AUDIT|GET_REPAIR\" \"C:\\Program Files\\Storj\\Storage Node\\storagenode.log\" | sls started).Count\n```\n\nLANGUAGE: powershell\nCODE:\n```\n(sls \"GET_AUDIT|GET_REPAIR\" \"C:\\Program Files\\Storj\\Storage Node\\storagenode.log\" | sls downloaded).Count\n```\n\n----------------------------------------\n\nTITLE: Buffer Implementation in Go\nDESCRIPTION: Basic buffer structure and append operation implementation that manages an array of entries with a counter for tracking buffer fullness.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/a-tale-of-two-copies/page.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Buffer struct {\n\tfh  *os.File\n\tn   uint\n\tbuf [numEntries]Entry\n}\n\nfunc (b *Buffer) Append(ent Entry) error {\n\tif b.n < numEntries-1 {\n\t\tb.buf[b.n] = ent\n\t\tb.n++\n\t\treturn nil\n\t}\n\treturn b.appendSlow(ent)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Pins\nDESCRIPTION: cURL command to remove multiple pinned contents by CIDs\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/storj-ipfs-pinning/page.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u ipfs_beta_user:ipfs_beta_password -X POST \"https://www.storj-ipfs.com/api/v0/pin/rm?arg=QmExample1&arg=QmExample2&arg=QmExample3\"\n```\n\n----------------------------------------\n\nTITLE: Using Access Inspect Command in Uplink CLI on Windows\nDESCRIPTION: Command syntax for inspecting a Storj access grant using Uplink CLI on Windows systems. The command takes an access grant identifier as a parameter and optionally accepts a help flag.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-inspect-command/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access inspect [ACCESS-GRANT] [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Python with Chocolatey\nDESCRIPTION: Uses Chocolatey to install Python on Windows.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-windows/page.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nchoco install python -y\n```\n\n----------------------------------------\n\nTITLE: JavaScript Initialization\nDESCRIPTION: JavaScript configuration to initialize ActiveStorage\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/rails-activestorage/page.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ActiveStorage from '@rails/activestorage'\n\nconst application = Application.start()\nActiveStorage.start()\n```\n\n----------------------------------------\n\nTITLE: Disabling RBAC for Object Mount CSI Driver with Helm\nDESCRIPTION: A shell command for installing the Object Mount CSI Driver chart with Helm while disabling the default RBAC implementation by setting rbac.useRBAC to false in the values configuration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/k8s/page.md#2025-04-16_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nhelm install cunofs-csi-chart oci://registry-1.docker.io/cunofs/cunofs-csi-chart \\\n  --set cunofsLicense.license=\"<license-text>\"                                   \\\n  --set credsToImport=\"{<credentials-1>,<credential-2>, ... ,<credentials-N>}\"   \\\n  --set rbac.useRBAC=false\n```\n\n----------------------------------------\n\nTITLE: Filtering URI Patching Based on Command-Line Arguments\nDESCRIPTION: Syntax for limiting URI patching to specific command-line arguments in applications. This uses a slash-separated format to specify the binary name, argument index, and value to match.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/configuration/page.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n+uricompat=<name of binary>/<index of argument to be matched>/<argument value to match>\n```\n\n----------------------------------------\n\nTITLE: Deleting an Object from Azure Storage Container with Object Mount\nDESCRIPTION: Removes a file from an Azure Storage container using Object Mount. This command deletes 'helloworld.txt' from 'bucket1'.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nrm az://your-azure-storage-account/bucket1/helloworld.txt\n```\n\n----------------------------------------\n\nTITLE: Reconstructing SQLite3 Database from Dump\nDESCRIPTION: This command creates a new SQLite3 database and populates it with the data from the edited dump file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-fix-a-database-disk-image-is-malformed/page.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsqlite3 /storage/bandwidth.db \".read /storage/dump_all_notrans.sql\"\n```\n\n----------------------------------------\n\nTITLE: Singularity Definition File\nDESCRIPTION: Singularity definition file for installing Object Mount in a container image\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/advanced/page.md#2025-04-16_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nBootstrap: docker\nFrom: rockylinux:8\n\n%files\n    /home/admin/downloads/cuno-{FULL-VERSION}.x86_64.rpm /opt/src/\n\n%post\n    yum update -y\n    yum install -y /opt/src/cuno-{FULL-VERSION}.x86_64.rpm\n    echo \"YOUR LICENCE KEY HERE\" | cuno creds activate\n    chmod og+r /opt/cuno/etc/license\n\n%environment\n    export LD_PRELOAD=/usr/lib/cuno.so\n    export CUNO_CREDENTIALS=/opt/cuno-config/creds\n\n%labels\n    Name object mount\n    URL storj.io\n    Email supportdcs@storj.io\n```\n\n----------------------------------------\n\nTITLE: Binary Version Configuration\nDESCRIPTION: Complete configuration example for running an additional node using the binary version, including all necessary address and port settings.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-add-an-additional-drive/page.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n# the public address of the node, useful for nodes behind NAT\ncontact.external-address: \"my.ddns.tld:28968\"\n\n# public address to listen on\nserver.address: :28968\n\n# private address to listen on\nserver.private-address: 127.0.0.1:7779\n\n# server address of the api gateway and frontend app\nconsole.address: 127.0.0.1:14003\n```\n\n----------------------------------------\n\nTITLE: Installing Visual Studio 2017 Build Tools\nDESCRIPTION: Installs Visual Studio 2017 build tools for C++ using Chocolatey on Windows.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-windows/page.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nchoco install visualstudio2017-workload-vctools -y\n```\n\n----------------------------------------\n\nTITLE: Analyzing CPU Port Usage with llvm-mca\nDESCRIPTION: Using llvm-mca to compare port usage for SHLQ and IMULQ instructions in 32-byte and 28-byte versions of the code.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/a-tale-of-two-copies/page.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nResource pressure by instruction (32 byte version):\n[2]    [3]     [7]    [8]     Instructions:\n0.50    -       -     0.50    shlq  $5, %rcx\n -     0.50    0.50    -      leaq  200(%rsp,%rcx), %rcx\n\nResource pressure by instruction (28 byte version):\n[2]    [3]     [7]    [8]    Instructions:\n -     1.00     -      -     imulq  $28, %rcx, %rcx\n -      -      1.00    -     leaq   192(%rsp,%rcx), %rcx\n```\n\n----------------------------------------\n\nTITLE: URL Construction for Storj Link Sharing\nDESCRIPTION: URL pattern for constructing linkshare URLs with optional query parameters for customizing the sharing experience\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/concepts/multi-tenant-data/multi-tenant-access-management/page.md#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://link.storjshare.io/s/<PUBLIC_ACCESS_KEY_ID>/<BUCKET>/<OBJECT_KEY>\n```\n\n----------------------------------------\n\nTITLE: Storage Node Statistics Schema\nDESCRIPTION: JSON structure defining the metrics available for monitoring Storage Node status and health across the network.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/open-source-and-open-data-storj-dcs-network-statistics/page.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active_nodes\": \"number\",\n  \"disqualified_nodes\": \"number\",\n  \"exited_nodes\": \"number\",\n  \"offline_nodes\": \"number\",\n  \"suspended_nodes\": \"number\",\n  \"total_nodes\": \"number\",\n  \"vetted_nodes\": \"number\",\n  \"full_nodes\": \"number\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Globus Endpoint Concurrency\nDESCRIPTION: Optional command to modify the Globus endpoint's concurrent transfer settings for improved throughput.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/globus/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nglobus-connect-server endpoint update --network-use \"custom\" --max-concurrency N --preferred-concurrency N\n```\n\n----------------------------------------\n\nTITLE: Detecting Audit Failures - Windows GUI\nDESCRIPTION: PowerShell command to search local node logs for failed operations in Windows GUI installation\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/why-is-my-node-disqualified/page.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nsls \"GET_AUDIT|GET_REPAIR\" \"C:\\Program Files\\Storj\\Storage Node\\storagenode.log\" | sls failed\n```\n\n----------------------------------------\n\nTITLE: Assembly Code Analysis - 28 Byte Version\nDESCRIPTION: Assembly code showing the critical section responsible for the performance bottleneck in the 28-byte version.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/a-tale-of-two-copies/page.md#2025-04-16_snippet_3\n\nLANGUAGE: assembly\nCODE:\n```\n515129: IMULQ $0x1c, CX, CX\n51512d: LEAQ 0xc0(SP)(CX*1), CX\n515135: MOVUPS 0x7c(SP), X0\n51513a: MOVUPS X0, 0(CX)\n51513d: MOVUPS 0x88(SP), X0\n515145: MOVUPS X0, 0xc(CX)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of sync.Mutex in Go\nDESCRIPTION: This snippet shows a problematic use of sync.Mutex where a long-running operation (evictOldItems) is performed while holding the lock, potentially blocking other goroutines unnecessarily.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfunc (cache *Cache) Add(ctx context.Context, key, value string) {\n\tcache.mu.Lock()\n\tdefer cache.mu.Unlock()\n\n\tcache.evictOldItems()\n\tcache.items[key] = entry{\n\t\texpires: time.Now().Add(time.Second),\n\t\tvalue: value,\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Access Inspect Command in Uplink CLI on macOS\nDESCRIPTION: Command syntax for inspecting a Storj access grant using Uplink CLI on macOS systems. The command takes an access grant identifier as a parameter and optionally accepts a help flag.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-inspect-command/page.md#2025-04-16_snippet_2\n\nLANGUAGE: macos\nCODE:\n```\nuplink access inspect [ACCESS-GRANT] [flags]\n```\n\n----------------------------------------\n\nTITLE: Container Pairing Command\nDESCRIPTION: Command for manually pairing containers with credential files.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/credentials/page.md#2025-04-16_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ncuno creds pair <container_remote_uri> [imported_credential_file]\n```\n\n----------------------------------------\n\nTITLE: Viewing S3 File Contents\nDESCRIPTION: Command to view the beginning of a file stored in AWS S3 using the head utility.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/access/page.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhead s3://my-bucket/dir/sample.txt\n```\n\n----------------------------------------\n\nTITLE: Using Channel-based State Management for Concurrency in Go\nDESCRIPTION: This snippet demonstrates a better approach to state management using channels, allowing for proper handling of context cancellation and avoiding long-held locks.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_19\n\nLANGUAGE: go\nCODE:\n```\ntype Cache struct {\n\tstate chan *state\n}\n\nfunc NewCache() {\n\tcontent := make(chan *state, 1)\n\tcontent <- &state{}\n\treturn Cache{state: content}\n}\n\nfunc (cache *Cache) Add(ctx context.Context, key, value string) error {\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn ctx.Err()\n\tcase state := <-cache.state:\n\t\tdefer func() { cache.state <- state }()\n\n\t\tcache.evictOldItems()\n\t\tcache.items[key] = entry{\n\t\t\texpires: time.Now().Add(time.Second),\n\t\t\tvalue: value,\n\t\t}\n\n\t\treturn nil\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cyberduck on macOS via Homebrew\nDESCRIPTION: Command to install Cyberduck on macOS using the Homebrew package manager.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/cyberduck/page.md#2025-04-16_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nbrew install duck\n```\n\n----------------------------------------\n\nTITLE: Listing Access Credentials in Storj CLI\nDESCRIPTION: Lists all access credentials associated with the account.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/concepts/multi-tenant-data/multi-tenant-access-management/page.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nuplink access list\n```\n\n----------------------------------------\n\nTITLE: Referencing libuplink Library\nDESCRIPTION: The libuplink library is the core developer library for Storj, providing object store integration capabilities. It includes pre-written code, subroutines, classes, values, type specifications, and message templates.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/sdk/page.md#2025-04-16_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nlibuplink\n```\n\n----------------------------------------\n\nTITLE: Example of Connection Leak in Go Function\nDESCRIPTION: An example function showing how connections can be leaked when error handling isn't properly implemented. If the second connection fails, the first connection isn't closed because the defer statement comes after the error check.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-and-tracking-resource-leaks-in-go/page.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleDial(ctx context.Context) error {\n\tsource, err := Dial(ctx, \"127.0.0.1:1000\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tdestination, err := Dial(ctx, \"127.0.0.1:1001\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tdefer source.Close()\n\tdefer destination.Close()\n\n\tdata, err := source.Recv(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"recv failed: %w\", err)\n\t}\n\n\terr = destination.Send(ctx, data)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"send failed: %w\", err)\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Slow Queries in CockroachDB\nDESCRIPTION: SQL query to identify slow-running cluster queries that have been running for more than one minute. Helps in performance monitoring and troubleshooting.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/choosing-cockroach-db-for-horizontal-scalability/page.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM [SHOW CLUSTER QUERIES]\nWHERE  start < (now() - INTERVAL '1 min');\n```\n\n----------------------------------------\n\nTITLE: Creating Storagenode Identity on Raspberry Pi\nDESCRIPTION: Downloads and extracts the identity binary, then generates a new storagenode identity.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/install-storagenode-on-raspberry-pi3-or-higher-version/page.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install unzip curl -y\ncurl -L https://github.com/storj/storj/releases/latest/download/identity_linux_arm.zip -o identity_linux_arm.zip\nunzip ~/identity_linux_arm.zip\n./identity_linux_arm create storagenode\n```\n\n----------------------------------------\n\nTITLE: Formula for Generating Visually Distinct Colors\nDESCRIPTION: A mathematical formula for generating visually distinct colors using the golden ratio (phi). This approach ensures that sequential color selections are maximally different from each other when visualizing code relationships.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/lensm/page.md#2025-04-16_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nhue: index * phi * 2 * PI, saturation: 60%, lightness: 60%\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Actions Workflow for Storj DCS Upload\nDESCRIPTION: This YAML code defines a GitHub Actions workflow that triggers on pushes to the main branch affecting the homepage.md file. It sets up a job to run on Ubuntu and execute three steps: checkout the repository, convert Markdown to HTML, and upload to Storj DCS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/using-storj-dcs-with-github-actions/page.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# This is a workflow converts homepage.md to index.html\n# and uploads it to the static website\nname: upload homepage\n\n# Controls when the workflow will run\non:\n  # Triggers the workflow only on push event to the main branch,\n  # but not for pull requests\n  push:\n    branches: [ main ]\n    # Triggers the workflow only if the homepage.md file has been         # edited\n    paths:\n      - 'homepage.md'\n\n# A workflow run is made up of one or more jobs that can run\n# sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n    # Steps represent a sequence of tasks that will be executed as\n# part of the job\n    steps:\n```\n\n----------------------------------------\n\nTITLE: Displaying Callout Warning in Markdown\nDESCRIPTION: This snippet demonstrates how to create a callout warning in Markdown, cautioning users against using exchange wallet addresses for micropayments.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/wallet-address-for-storagenode/page.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% callout type=\"danger\"  %}\nDo NOT use an exchange wallet address, the micropayments wont work with an exchanges' deposit addresses.\n\nYou could lose your payments, if you would use an exchanges' deposit address instead of your wallet.\n{% /callout %}\n```\n\n----------------------------------------\n\nTITLE: Custom Tag Links Template Usage in Markdown\nDESCRIPTION: Template tag usage for generating categorized links in the documentation. Uses a custom tag-links component with directory and tag parameters to filter and display relevant content.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/page.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% tag-links tag=\"backup\" directory=\"./app/(docs)/dcs/third-party-tools\" %}\n{% /tag-links %}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% tag-links tag=\"large-file\" directory=\"./app/(docs)/dcs/third-party-tools\" %}\n{% /tag-links %}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% tag-links tag=\"file-management\" directory=\"./app/(docs)/dcs/third-party-tools\" %}\n{% /tag-links %}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% tag-links tag=\"content-delivery\" directory=\"./app/(docs)/dcs/third-party-tools\" %}\n{% /tag-links %}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% tag-links tag=\"scientific\" directory=\"./app/(docs)/dcs/third-party-tools\" %}\n{% /tag-links %}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% tag-links tag=\"cloud-ops\" directory=\"./app/(docs)/dcs/third-party-tools\" %}\n{% /tag-links %}\n```\n\n----------------------------------------\n\nTITLE: General Rule for Optimizing Multiplication by Constants\nDESCRIPTION: A mathematical formulation for optimizing multiplication by certain constants using shifts and additions, providing a general pattern and verification method.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/two-mul-or-not-two-mul/page.md#2025-04-16_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nx * c, where\n    c = 1 + 2^N + 2^(N+M), N != M;\n    N > 1, M > 1\n\nThen the multiplication can be rewritten as:\n    x + (x + x << M) << N\n\nThis can be checked with:\n    (c-1)&1 == 0 && bits.OnesCount(c - 1) == 2\n\nWhich holds for numbers like:\n    7, 11, 13, 19, 21, 25, 35, 37, 41, 49, 67, 69, 73, 81, 97, 131, 133, 137, 145, 161, 193...\n```\n\n----------------------------------------\n\nTITLE: Direct Database Test Setup in Go\nDESCRIPTION: Shows an alternative approach to database testing using direct initialization instead of callbacks.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/go-integration-tests-with-postgres/page.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TestCreateTable(t *testing.T) {\n\tctx := context.Background()\n\tdb := NewDatabase(ctx, t)\n\t_, err := db.Exec(ctx, `\n\t\tCREATE TABLE accounts ( user_id serial PRIMARY KEY );\n\t`)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n}\n\nfunc NewDatabase(ctx context.Context, tb testing.TB) *pgx.Conn {\n\t// create the database resource\n\ttb.Cleanup(func() {\n\t\terr := db.Close(ctx)\n\t\tif err != nil {\n\t\t\ttb.Logf(\"failed to close db: %v\", err)\n\t\t}\n\t})\n\treturn conn\n}\n```\n\n----------------------------------------\n\nTITLE: Executing 'access list' Command in Linux\nDESCRIPTION: Command syntax for listing all available Storj DCS access grants using the Uplink CLI on Linux. This command displays a list of all configured access grants along with their associated satellites.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-list-command/page.md#2025-04-16_snippet_1\n\nLANGUAGE: linux\nCODE:\n```\nuplink access list [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Job Starter Executable Permissions\nDESCRIPTION: Command to make the LSF job starter script executable, which is necessary for LSF to properly use the script.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/advanced/page.md#2025-04-16_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nchmod +x \"$LSF_ENVDIR\"/cuno-starter.sh\n```\n\n----------------------------------------\n\nTITLE: Assembly Code Analysis - 32 Byte Version\nDESCRIPTION: Assembly code showing the more efficient implementation used in the 32-byte version.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/a-tale-of-two-copies/page.md#2025-04-16_snippet_4\n\nLANGUAGE: assembly\nCODE:\n```\n515129: SHLQ $0x5, CX\n51512d: LEAQ 0xc8(SP)(CX*1), CX\n515135: MOVUPS 0x80(SP), X0\n51513d: MOVUPS X0, 0(CX)\n515140: MOVUPS 0x90(SP), X0\n515148: MOVUPS X0, 0x10(CX)\n```\n\n----------------------------------------\n\nTITLE: Raspberry Pi File System Remount Commands\nDESCRIPTION: Commands to access root privileges and remount the Raspberry Pi file system as read-write for configuration purposes.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/tesla-sentry-mode-teslausb/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsudo -i\n/root/bin/remountfs_rw\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Environment Variables\nDESCRIPTION: Commands to set AWS access credentials using environment variables.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/credentials/page.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID\nAWS_SECRET_ACCESS_KEY\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Credential Format - Style 2\nDESCRIPTION: Alternative format for AWS S3 credentials file with equivalent functionality.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/credentials/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAWSAccessKeyId = <access_key_id>\nAWSSecretKey   = <secret_access_key>\nregion         = <region> [optional]\n```\n\n----------------------------------------\n\nTITLE: Mount All fstab Entries\nDESCRIPTION: Mounts all filesystems defined in /etc/fstab\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/linux-static-mount/page.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nsudo mount -a\n```\n\n----------------------------------------\n\nTITLE: Benchmark Assembly for Direct Multiplication by 19\nDESCRIPTION: Assembly benchmark code for testing the performance of direct multiplication by 19 on ARM processors.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/two-mul-or-not-two-mul/page.md#2025-04-16_snippet_12\n\nLANGUAGE: assembly\nCODE:\n```\nTEXT ·Mul19(SB),0,$0-0\n\tMOVD\t$65536, R2\n\tMOVD\t$218643, R0\nloop:\n\tMOVD    $19, R1\n\tMUL     R1, R0, R0\n\tSUB\t$1, R2, R2\n\tCBNZ\tR2, loop\n\tRET\n```\n\n----------------------------------------\n\nTITLE: Using Notifications Instead of Polling in Go\nDESCRIPTION: Comparison showing how to replace polling with direct notifications using channels, which is more efficient and responsive. The channel-based approach avoids wasted resources when updates are infrequent.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nlastKnown := 0\nfor {\n\ttime.Sleep(time.Second)\n\tt.mu.Lock()\n\tif lastKnown != t.current {\n\t\tprocess(t.current)\n\t\tlastKnown = t.current\n\t}\n\tt.mu.Unlock()\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nlastKnown := 0\nfor newState := range t.updates {\n\tif lastKnown != newState {\n\t\tprocess(newState)\n\t\tlastKnown = newState\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Object Versions from Bucket with uplink (Shell)\nDESCRIPTION: This complex command uses uplink to remove all object versions from a Storj bucket with Object Lock enabled, even if the encryption phrase is lost. It requires uplink to be set up with advanced permissions.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/buckets/delete-buckets/page.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nuplink ls --encrypted --recursive --all-versions sj://locked-bucket/ -o json | jq '\"uplink rm --encrypted --bypass-governance-retention --version-id \" + .versionId + \" sj://locked-bucket/\" + .key' -r | bash\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration Header\nDESCRIPTION: YAML frontmatter configuration block defining the document metadata, redirects, and page properties for the project management documentation.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/support/projects/page.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Projects\ndocId: jwCUqpDCk8CUuUqFuykFx\nredirects:\n  - /setup/project\n  - /dcs/projects\n  - /dcs/getting-started/satellite-developer-account/manage-projects\nweight: 5\nmetadata:\n  title: Managing Projects on the Storj Console\n  description:\n    Learn how to manage, create, modify, limit and delete your projects\n    on the Storj Console. Information on how usage, billing and invoicing\n    works at the project level is also included.\n---\n```\n\n----------------------------------------\n\nTITLE: Avoiding Unnecessary Concurrency in Go\nDESCRIPTION: Comparison showing how unnecessary concurrency can be avoided. The first example uses a goroutine with WaitGroup unnecessarily, while the second shows the simpler, non-concurrent approach.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar wg sync.WaitGroup\n\nwg.Add(1)\ngo serve(&wg)\nwg.Wait()\n```\n\nLANGUAGE: go\nCODE:\n```\nserve()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Potential Race Condition with Goroutines in Go\nDESCRIPTION: This snippet shows a common mistake where a goroutine is started without ensuring it completes before the database connection is closed. It also demonstrates the issue of using r.Context() in a goroutine, which could be cancelled prematurely.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/production-concurrency/page.md#2025-04-16_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc (server *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\t...\n\t// start an async operation\n\tgo func() {\n\t\tres, err := server.db.ExecContext(r.Context(), \"INSERT ...\")\n\t\t...\n\t}()\n\t...\n}\n\nfunc main() {\n\t...\n\n\tdb, err := openDB(ctx)\n\tdefer db.Close()\n\n\terr := server.Run(ctx)\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Backing Up and Opening SQLite3 Database\nDESCRIPTION: These commands create a backup of the bandwidth.db file and open it in the SQLite3 shell for further operations.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-fix-a-database-disk-image-is-malformed/page.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncp /storage/bandwidth.db /storage/bandwidth.db.bak\nsqlite3 /storage/bandwidth.db\n```\n\n----------------------------------------\n\nTITLE: Utility Functions for PostgreSQL Schema Management in Go\nDESCRIPTION: These utility functions handle connection string modification, schema creation, schema dropping, and schema name sanitization for PostgreSQL. They are used in conjunction with the WithSchema function to manage isolated database environments for testing.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/go-integration-tests-with-postgres/page.md#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// connstrWithSchema adds search_path argument to the connection string.\nfunc connstrWithSchema(connstr, schema string) (string, error) {\n\tu, err := url.Parse(connstr)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"invalid connstr: %q\", connstr)\n\t}\n\tu.Query().Set(\"search_path\", sanitizeSchemaName(schema))\n\treturn u.String(), nil\n}\n\n// createSchema creates a new schema in the database.\nfunc createSchema(ctx context.Context, db *pgx.Conn, schema string) error {\n\t_, err := db.Exec(ctx, `CREATE SCHEMA IF NOT EXISTS`+sanitizeSchemaName(schema)+`;`)\n\treturn err\n}\n\n// dropSchema drops the specified schema and associated data.\nfunc dropSchema(ctx context.Context, db *pgx.Conn, schema string) error {\n\t_, err := db.Exec(ctx, `DROP SCHEMA `+sanitizeSchemaName(schema)+` CASCADE;`)\n\treturn err\n}\n\n// sanitizeSchemaName is ensures that the name is a valid postgres identifier.\nfunc sanitizeSchemaName(schema string) string {\n\treturn pgx.Identifier{schema}.Sanitize()\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Disassembly Information from Go's Internal objfile Package\nDESCRIPTION: A debug output showing the structure of disassembly information extracted from Go's internal objfile package. This shows how the author accessed assembly instructions and their metadata for visualization.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/lensm/page.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPath: /Users/egon/Dev/gio/layout/stack.go\nLine: 44\nProg: /Users/egon/Dev/gio/layout.Stack.Layout\n{Prog:/Users/egon/Dev/gio/layout.Stack.Layout File:/Users/egon/Dev/gio/layout/stack.go Line:44 ISA:amd64}\n\t/Users/egon/Dev/gio/layout/stack.go:44\tffff\tMOVQ AX, main.ret+48(SP)\n\t/Users/egon/Dev/gio/layout/stack.go:45\tffff\tMOVQ $134217728, AX\n```\n\n----------------------------------------\n\nTITLE: Switching to Storj User in FreeBSD Jail\nDESCRIPTION: Changes the current user to the newly created 'storj' user.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-freenas-freebsd/page.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsudo su storj\n```\n\n----------------------------------------\n\nTITLE: Accessing Storj Storage Node Dashboard on Local Network\nDESCRIPTION: URL format to access the Storj storage node dashboard from another device on the local network. Replace <your-nodes-local-ip> with the actual IP address of the node on the local network.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/install-node-software/gui-windows/dashboard/page.md#2025-04-16_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nhttp://<your-nodes-local-ip>:14002/\n```\n\n----------------------------------------\n\nTITLE: Copying Storj Node Orders Folder - Windows PowerShell\nDESCRIPTION: Command to copy the Storj node orders folder between Windows machines using robocopy. Ensures order history is preserved during migration.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/how-to-migrate-the-windows-gui-node-from-a-one-physical-location-to-other/page.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nrobocopy \"%ProgramFiles%\\Storj\\Storage Node\\orders\" \\\\pc2\\orders /MIR\n```\n\n----------------------------------------\n\nTITLE: Install SSH Server on Linux\nDESCRIPTION: Installs SSH server on Debian-based Linux systems for remote file transfer\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/migrating-from-windows-gui-installation-to-a-docker-cli/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsudo apt update && sudo apt install ssh -y\n```\n\n----------------------------------------\n\nTITLE: Open fstab Configuration\nDESCRIPTION: Opens the /etc/fstab file for editing using nano\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/linux-static-mount/page.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo nano /etc/fstab\n```\n\n----------------------------------------\n\nTITLE: Assembly Implementation of Multiplication by 19 on AMD64\nDESCRIPTION: AMD64 assembly implementation that computes multiplication by 19 using LEAQ instructions for shifts and additions instead of direct multiplication.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/two-mul-or-not-two-mul/page.md#2025-04-16_snippet_7\n\nLANGUAGE: assembly\nCODE:\n```\nLEAQ    (AX)(AX*8), CX\nLEAQ    (AX)(CX*2), AX\n```\n\n----------------------------------------\n\nTITLE: Additional Optimization Patterns for Constant Multiplication\nDESCRIPTION: More patterns for optimizing multiplication by constants that have specific bit patterns, showing formulas for different scenarios.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/two-mul-or-not-two-mul/page.md#2025-04-16_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nc = 1 + 2^H - 2^L, where L < H\n  => (x + x<<L) - x<<H\n\nc = 2^H - 2^L, where L < H\n  => (x<<L) - x<<H\n\nc = 2^L + 2^H, where L < H\n  => (x<<L) + x<<H\n```\n\n----------------------------------------\n\nTITLE: Buffer Benchmark Implementation\nDESCRIPTION: Benchmark code comparing performance between 28-byte and 32-byte entry sizes, measuring operations per second and flush counts.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/a-tale-of-two-copies/page.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc BenchmarkBuffer(b *testing.B) {\n\tfh := tempFile(b)\n\tdefer fh.Close()\n\n\tbuf := &Buffer{fh: fh}\n\tnow := time.Now()\n\tent := Entry{}\n\n\tb.ResetTimer()\n\n\tfor i := 0; i < b.N; i++ {\n\t\tfh.Seek(0, io.SeekStart)\n\n\t\tfor i := 0; i < 1e5; i++ {\n\t\t\t_ = buf.Append(ent)\n\t\t}\n\t\t_ = buf.Flush()\n\t}\n\n\tb.ReportMetric(float64(time.Since(now).Nanoseconds())/float64(b.N)/1e5, \"ns/key\")\n\tb.ReportMetric(float64(buf.flushes)/float64(b.N), \"flushes\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Folder Pinning\nDESCRIPTION: NPM command to install required packages recursive-js and base-path-converter\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/storj-ipfs-pinning/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install recursive-js base-path-converter\n```\n\n----------------------------------------\n\nTITLE: Quick Links Section in Markdown\nDESCRIPTION: Markdown template for displaying quick links to Storj support resources using custom quick-link components\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/support/page.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% quick-links %}\n{% quick-link title=\"Storj Support\" href=\"https://supportdcs.storj.io/hc/en-us\"  %}\n\nFAQ, articles, and support\n{% /quick-link %}\n\n{% quick-link title=\"Storage Node Support\" href=\"https://support.storj.io/hc/en-us\" %}\n\nFAQ, troubleshooting, and support\n{% /quick-link %}\n{% /quick-links %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Goroutine Leak Check Function in Go\nDESCRIPTION: This code implements a function to check for leaked goroutines using profiling data. It parses the goroutine profile and summarizes any leaked goroutines.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-goroutine-leaks-in-tests/page.md#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/google/pprof/profile\"\n\nfunc CheckNoGoroutines(key, value string) error {\n  var pb bytes.Buffer\n  profiler := pprof.Lookup(\"goroutine\")\n  if profiler == nil {\n    return fmt.Errorf(\"unable to find profile\")\n  }\n  err := profiler.WriteTo(&pb, 0)\n  if err != nil {\n    return fmt.Errorf(\"unable to read profile: %w\", err)\n  }\n\n  p, err := profile.ParseData(pb.Bytes())\n  if err != nil {\n    return fmt.Errorf(\"unable to parse profile: %w\", err)\n  }\n\n  return summarizeGoroutines(p, key, value)\n}\n\nfunc summarizeGoroutines(p *profile.Profile, key, expectedValue string) (\n  err error) {\n  var b strings.Builder\n\n  for _, sample := range p.Sample {\n    if !matchesLabel(sample, key, expectedValue) {\n      continue\n    }\n\n    fmt.Fprintf(&b, \"count %d @\", sample.Value[0])\n    // format the stack trace for each goroutine\n    for _, loc := range sample.Location {\n      for i, ln := range loc.Line {\n        if i == 0 {\n          fmt.Fprintf(&b, \"#   %#8x\", loc.Address)\n          if loc.IsFolded {\n            fmt.Fprint(&b, \" [F]\")\n          }\n        } else {\n          fmt.Fprint(&b, \"#           \")\n        }\n        if fn := ln.Function; fn != nil {\n          fmt.Fprintf(&b, \" %-50s %s:%d\", fn.Name, fn.Filename, ln.Line)\n        } else {\n          fmt.Fprintf(&b, \" ???\")\n        }\n        fmt.Fprintf(&b, \"\\n\")\n      }\n    }\n    fmt.Fprintf(&b, \"\\n\")\n  }\n\n  if b.Len() == 0 {\n    return nil\n  }\n\n  return errors.New(b.String())\n}\n\nfunc matchesLabel(sample *profile.Sample, key, expectedValue string) bool {\n  values, hasLabel := sample.Label[key]\n  if !hasLabel {\n    return false\n  }\n\n  for _, value := range values {\n    if value == expectedValue {\n      return true\n    }\n  }\n\n  return false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Rails Application\nDESCRIPTION: Command to generate a new Rails application\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/rails-activestorage/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrails new active-storj\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite3 on Linux\nDESCRIPTION: This command updates the package list and installs SQLite3 on a Linux system using apt package manager.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-fix-a-database-disk-image-is-malformed/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt install sqlite3 -y\n```\n\n----------------------------------------\n\nTITLE: Matrix Representation of Field Element Multiplication\nDESCRIPTION: A diagram showing the matrix multiplication approach for field elements, illustrating how each component of the field elements are multiplied together.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/two-mul-or-not-two-mul/page.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n                       a4   a3   a2   a1   a0  x\n                       b4   b3   b2   b1   b0  =\n                      ------------------------\n                     a4b0 a3b0 a2b0 a1b0 a0b0  +\n                a4b1 a3b1 a2b1 a1b1 a0b1       +\n           a4b2 a3b2 a2b2 a1b2 a0b2            +\n      a4b3 a3b3 a2b3 a1b3 a0b3                 +\n a4b4 a3b4 a2b4 a1b4 a0b4                      =\n----------------------------------------------\n   r8   r7   r6   r5   r4   r3   r2   r1   r0\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output from Access Inspect Command\nDESCRIPTION: Example output from the access inspect command, showing the detailed structure of a Storj access grant including satellite address, encryption settings, API key, and macaroon details.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-inspect-command/page.md#2025-04-16_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\n{\n  \"satellite_addr\": \"12EayRS2V1kEsWESU9QMRseFhdxYxKicsiFmxrsLZHeLUtdps3S@us1.storj.io:7777\",\n  \"encryption_access\": {\n    \"default_path_cipher\": \"ENC_AESGCM\"\n  },\n  \"api_key\": \"...\",\n  \"macaroon\": {\n    \"head\": \"...\",\n    \"caveats\": [],\n    \"tail\": \"...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Output\nDESCRIPTION: Raw benchmark results showing the performance difference between 28-byte and 32-byte buffer operations.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/a-tale-of-two-copies/page.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nBenchmarkBuffer/28       734286 ns/op      171.0 flushes      7.343 ns/key\nBenchmarkBuffer/32       436220 ns/op      196.0 flushes      4.362 ns/key\n```\n\n----------------------------------------\n\nTITLE: Implementing a TCP Client with Potential Connection Leak in Go\nDESCRIPTION: Basic implementation of a TCP client that demonstrates a potential resource leak if Close() is not properly called. The client wraps a net.Conn connection that must be explicitly closed.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-and-tracking-resource-leaks-in-go/page.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Client struct {\n\tconn net.Conn\n}\n\nfunc Dial(ctx context.Context, address string) (*Client, error) {\n\tconn, err := (&net.Dialer{}).DialContext(ctx, \"tcp\", address)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to dial: %w\", err)\n\t}\n\n\treturn &Client{conn: conn}, nil\n}\n\nfunc (client *Client) Close() error {\n\treturn client.conn.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Purging Credential Files\nDESCRIPTION: Command to completely remove a credential file and delete all its container associations.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/credentials/page.md#2025-04-16_snippet_10\n\nLANGUAGE: console\nCODE:\n```\ncuno creds purge [imported_credential_file]\n```\n\n----------------------------------------\n\nTITLE: Importing Access Grant in macOS\nDESCRIPTION: Command to import an Access Grant file into Uplink CLI on macOS systems.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/quickstart-uplink-cli/uploading-your-first-object/set-up-uplink-cli/page.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nuplink access import main accessgrant.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Root Login in FreeBSD Jail\nDESCRIPTION: Modifies the SSH configuration to allow root login for easier management.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-freenas-freebsd/page.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnano /etc/ssh/sshd_config\n```\n\n----------------------------------------\n\nTITLE: Defining Source Code Structure for Disassembly Visualization\nDESCRIPTION: A Go struct representing source code files and relevant line ranges needed for the disassembly visualization. This structure helps organize which source lines correspond to which assembly instructions.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/lensm/page.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Source struct {\n\tPath  string\n\tRanges []struct {\n\t\tStart, End int\n\t}\n\tLines map[int]string\n}\n```\n\n----------------------------------------\n\nTITLE: Debug Output of Source Line Extraction\nDESCRIPTION: Sample output showing how source code lines are extracted and mapped to assembly code. This demonstrates the relationship between source lines and their corresponding assembly instructions.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/lensm/page.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nSource:/Users/egon/Dev/gio/layout/stack.go\n\tRange: 36..58\n\tLine:36: func (s Stack) Layout(gtx Context, children ...StackChild) Dimensions {\n\tLine:37: \tcs := gtx.Constraints\n\tLine:38: \tn := len(children)\n\t...\n\tLine:57: \treturn dims\n\tLine:58: }\n```\n\n----------------------------------------\n\nTITLE: Installing ActiveStorage\nDESCRIPTION: Command to install ActiveStorage in Rails\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/rails-activestorage/page.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrails active_storage:install\n```\n\n----------------------------------------\n\nTITLE: Setting up Rucio Docker Environment\nDESCRIPTION: Commands to clone the Rucio repository, start the Docker container, and access the container shell.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rucio/page.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/rucio/rucio\ncd rucio\ndocker-compose --file ./etc/docker/dev/docker-compose.yml up -d\ndocker exec -it dev_rucio_1 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Computing r0 Component in Field Multiplication\nDESCRIPTION: Formula for computing the r0 component in the field element multiplication, showing how it combines products of components with constants.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/two-mul-or-not-two-mul/page.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nr0 := a0×b0 + 19×a1×b4 + 19×a2×b3 + 19×a3×b2 + 19×a4×b1\n```\n\n----------------------------------------\n\nTITLE: Markdown Formatting for STORJ Token Sale Instructions\nDESCRIPTION: This markdown snippet structures the token sale participation instructions, detailing requirements for both BTC and ETH participants. It emphasizes the need for ERC20 compatible wallets and non-exchange addresses for receiving tokens.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/support/faqs/token-sale/what-were-the-storj-token-sale-instructions/page.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Token Sale Participation \n\nYou can participate in the Storj Token Sale using either BTC or ETH to fund your purchase\n\n# BTC participation requirements:\n\n1. **A BTC refund address**\n2. **A receiving Ethereum address** - This Ethereum address must be from an ERC20 compatible wallet (such as [Parity](https://parity.io/parity.html), [Mist](https://github.com/ethereum/mist), [MetaMask](https://metamask.io/), and [MyEtherWallet](https://www.myetherwallet.com/)). Your STORJ tokens will be delivered to this address. \n\n   ***We cannot fill your order unless you have an Ethereum account with an ERC20 compatible wallet.***\n\n3. **An email address** - For sale-related notifications. We won't ever disclose your email to third parties.\n\n4. **Receiving and refund addresses *cannot* be exchange addresses, unless you own the private key.**\n\n# ETH participation requirements:\n\n1. **A receiving Ethereum address** - This Ethereum address must be from an ERC20 compatible wallet (such as [Parity](https://parity.io/parity.html), [Mist](https://github.com/ethereum/mist), [MetaMask](https://metamask.io/), and [MyEtherWallet](https://www.myetherwallet.com/)). Your STORJ tokens will be delivered to this address. \n\n    ***We cannot fill your order unless you have an Ethereum account with an ERC20 compatible wallet.***\n\n2. **An email address** - For sale-related notifications. We won't ever disclose your email to third parties.\n3. **Receiving and refund addresses *cannot* be exchange addresses, unless you own the private key.**\n```\n\n----------------------------------------\n\nTITLE: Implementation of Field Multiplication with Precomputed Constants\nDESCRIPTION: Original implementation of field multiplication, showing how the constant 19 is precomputed for each component and then used in the computation of results.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/two-mul-or-not-two-mul/page.md#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\na1_19 := a1 * 19\na2_19 := a2 * 19\na3_19 := a3 * 19\na4_19 := a4 * 19\n\nr0 := mul64(a0, b0)\nr0 = addMul64(r0, a1_19, b4)\n...\n```\n\n----------------------------------------\n\nTITLE: Create MacOS Storage Directory\nDESCRIPTION: Creates the required directory structure for Storj storage node on MacOS systems\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/migrate-my-node/migrating-from-windows-gui-installation-to-a-docker-cli/page.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmkdir -p /Volumes/Storj/storagenode/storage\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Credentials\nDESCRIPTION: Command to set up Google Cloud service account credentials using environment variable.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/credentials/page.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=\"/home/user/gckey.json\"\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Buffer Operations in Go\nDESCRIPTION: Go benchmark function to test buffer operations with different entry sizes.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/a-tale-of-two-copies/page.md#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc BenchmarkBuffer(b *testing.B) {\n\t// ... setup code\n\n\tfor i := 0; i < b.N; i++ {\n\t\tfh.Seek(0, io.SeekStart)\n\n\t\tfor i := 0; i < 1e5; i++ {\n\t\t\t_ = buf.Append(Entry{})\n\t\t}\n\t\t_ = buf.Flush()\n\t}\n\n\t// .. teardown code\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Optimization Pattern for Multiplication by Constants\nDESCRIPTION: Another pattern for optimizing multiplication by constants using shifts and additions, with different mathematical characteristics and applicable numbers.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/two-mul-or-not-two-mul/page.md#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nx * c, where\n    c = 1 + 2^N + 2^M + 2^(N+M), N < M\n    N > 1  // not sure whether this restriction is necessary\n\nThen the multiplication can be rewritten as:\n    x = x + x<<N; x = x + x<<M\n\nThis can be checked with:\n    (c-1)&1 == 0 && bits.OnesCount(c - 1) == 3 && highbit - lowbit == midbit\n\nWhich holds for numbers like:\n    15, 23, 27, 29, 39, 43, 51, 53, 57, 71, 75, 83, 89, 99, 101, 135, 139, 147, 163, 169, 177, 195...\n```\n\n----------------------------------------\n\nTITLE: Equivalence of AMD64 Assembly to Go Code\nDESCRIPTION: Explanation of the AMD64 assembly implementation of multiplication by 19, showing equivalent Go code with direct multiplication and with shifts and additions.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/two-mul-or-not-two-mul/page.md#2025-04-16_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc mul19(x uint64) uint64 {\n    return x + (x + x * 8) * 2\n}\n\n// which is equivalent to\nfunc mul19(x uint64) uint64 {\n    return x + (x + x<<3)<<1\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to NoIP client folder in Linux\nDESCRIPTION: Command to change directory to the extracted NoIP client folder in Linux.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/port-forwarding/page.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd noip-2.1.9-1/\n```\n\n----------------------------------------\n\nTITLE: Benchmark Assembly for Shift-Based Multiplication by 19\nDESCRIPTION: Assembly benchmark code for testing the performance of shift and add based implementation of multiplication by 19 on ARM processors.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/two-mul-or-not-two-mul/page.md#2025-04-16_snippet_13\n\nLANGUAGE: assembly\nCODE:\n```\nTEXT ·Mul19shift(SB),0,$0-0\n\tMOVD\t$65536, R2\n\tMOVD\t$218643, R0\nloop:\n\tADD\tR0<<3, R0, R1\n\tADD\tR1<<1, R0, R0\n\tSUB\t$1, R2, R2\n\tCBNZ\tR2, loop\n\tRET\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS for Aspera S3 Properties\nDESCRIPTION: Configuration changes in s3.properties file to enable mandatory HTTPS connections for Storj compatibility.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/aspera/page.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# vi /opt/aspera/etc/trapd/s3.properties\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Set to true to use HTTPS for s3 storage\n# Default is false\ns3service.https-only=true\n```\n\n----------------------------------------\n\nTITLE: Exporting SSH Public Key from Windows Client to Server\nDESCRIPTION: Command to export the public SSH key from a Windows client to a server. This uses a pipe to append the key to the authorized_keys file after ensuring proper permissions are set.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-to-remote-access-the-web-dashboard/page.md#2025-04-16_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\ncat ~/.ssh/id_rsa.pub | ssh user@server \"umask 077; test -d .ssh || mkdir .ssh ; cat >> .ssh/authorized_keys\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Azure Blob Storage\nDESCRIPTION: Commands to list contents in Azure Blob Storage using both URI and directory formats with account name specification.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/access/page.md#2025-04-16_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nls az://my-account-name/my-container\n```\n\nLANGUAGE: console\nCODE:\n```\nls /cuno/az/my-account-name/my-container\n```\n\n----------------------------------------\n\nTITLE: Getting gateway IP in Windows\nDESCRIPTION: Command to retrieve the gateway IP address in Windows using Command Prompt.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/port-forwarding/page.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nipconfig | findstr /i \"Gateway\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tracked Filesystem Wrapper in Go\nDESCRIPTION: A wrapper for fs.FS that creates a tracking tag for each opened file. It ensures that all opened files are properly closed by integrating with the resource tracker system.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-and-tracking-resource-leaks-in-go/page.md#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype TrackedFS struct {\n\ttracker *Tracker\n\tfs      fs.FS\n}\n\nfunc TrackFS(fs fs.FS) *TrackedFS {\n\treturn &TrackedFS{\n\t\ttracker: NewTracker(),\n\t\tfs:      fs,\n\t}\n}\n\nfunc (fs *TrackedFS) Open(name string) (fs.File, error) {\n\tfile, err := fs.fs.Open(name)\n\tif err != nil {\n\t\treturn file, err\n\t}\n\n\ttag := fs.tracker.Create()\n\treturn &trackedFile{\n\t\tFile: file,\n\t\ttag:  tag,\n\t}, nil\n}\n\nfunc (fs *TrackedFS) Close() error { return fs.tracker.Close() }\n\ntype trackedFile struct {\n\tfs.File\n\ttag *Tag\n}\n\nfunc (file *trackedFile) Close() error {\n\tfile.tag.Close()\n\treturn file.File.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Callout in Markdown\nDESCRIPTION: This snippet shows how to create a warning callout in Markdown, emphasizing the importance of completing the authorization token step.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/auth-token/page.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% callout type=\"warning\"  %}\n**Failure to complete these steps will prevent your storage node from working.**\n{% /callout %}\n```\n\n----------------------------------------\n\nTITLE: Stopping Storage Node Container via CLI\nDESCRIPTION: Commands to gracefully stop and remove the running Storage Node Docker container with a 300-second timeout.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/how-do-i-change-my-parameters-such-as-payout-address-allotted-storage-space-and-bandwidth/page.md#2025-04-16_snippet_0\n\nLANGUAGE: none\nCODE:\n```\ndocker stop -t 300 storagenode\ndocker rm storagenode\n```\n\n----------------------------------------\n\nTITLE: Navigating to src folder in Linux\nDESCRIPTION: Command to change directory to /usr/local/src/ in Linux.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/port-forwarding/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /usr/local/src/\n```\n\n----------------------------------------\n\nTITLE: Uplink CLI Setup Configuration\nDESCRIPTION: Command to initiate the uplink CLI setup process for configuring credentials.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/chainstate-snapshots/page.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nuplink setup\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Goroutine Leak Detection in Go Test\nDESCRIPTION: This test function demonstrates how to use the Track function to detect goroutine leaks in a Go test. It creates a leaky goroutine and checks for its presence.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-goroutine-leaks-in-tests/page.md#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc TestLeaking(t *testing.T) {\n  t.Parallel()\n  ctx, cancel := context.WithCancel(context.Background())\n  defer cancel()\n\n  Track(ctx, t, func(ctx context.Context) {\n    LeakyThing(ctx)\n  })\n}\n\nfunc LeakyThing(ctx context.Context) {\n  done := make(chan struct{})\n  go func() {\n    go func() {\n      done <- struct{}{}\n    }()\n    done <- struct{}{}\n  }()\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Computation for Field Element Multiplication\nDESCRIPTION: The simplified computation after applying the field-specific optimizations, showing how the constants 19 are applied to certain products in the matrix multiplication.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/two-mul-or-not-two-mul/page.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\na4b0    a3b0    a2b0    a1b0    a0b0  +\na3b1    a2b1    a1b1    a0b1 19×a4b1  +\na2b2    a1b2    a0b2 19×a4b2 19×a3b2  +\na1b3    a0b3 19×a4b3 19×a3b3 19×a2b3  +\na0b4 19×a4b4 19×a3b4 19×a2b4 19×a1b4  =\n-------------------------------------\n  r4      r3      r2      r1      r0\n```\n\n----------------------------------------\n\nTITLE: Example of Access Inspect Command with Flag Parameter on Windows\nDESCRIPTION: Alternative syntax for inspecting an access grant named 'cheesecake' using Uplink CLI on Windows systems. This demonstrates using the --access flag approach.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-inspect-command/page.md#2025-04-16_snippet_6\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access --access cheesecake inspect\n```\n\n----------------------------------------\n\nTITLE: Listing S3 Bucket Contents\nDESCRIPTION: Commands to list contents of a remote AWS S3 bucket using both URI and directory formats.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/access/page.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nls s3://my-bucket\n```\n\nLANGUAGE: console\nCODE:\n```\nls /cuno/s3/my-bucket\n```\n\n----------------------------------------\n\nTITLE: Storage Backend Selection\nDESCRIPTION: Menu prompt for selecting the storage backend type, showing Storj as option 41.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-native/page.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nOption Storage.\nType of storage to configure.\nChoose a number from below, or type in your own value.\n...\n41 / Storj Decentralized Cloud Storage\n   \\ (storj)\n...\nStorage> storj\n```\n\n----------------------------------------\n\nTITLE: User-local File Removal Commands\nDESCRIPTION: List of files to remove for user-local CUNO installation, including binaries, shared objects, and man pages located in the user's home directory.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/uninstall/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n~/.local/lib/x86_64-linux-gnu/cuno.so\n~/.local/bin/cuno\n~/.local/share/man/man1/cuno.1\n~/.local/share/man/man1/cuno-creds.1\n~/.local/share/man/man1/cuno-mount.1\n~/.local/share/man/man8/cuno.so.8\n```\n\n----------------------------------------\n\nTITLE: Illustrating Bezier Curve Drawing for Relation Visualization\nDESCRIPTION: A diagram showing how to create Bezier curves to visualize the relationship between source code and assembly. The orange arrows represent the handles of the Bezier curve, and the purple lines show the final shape.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/lensm/page.md#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nThe purple lines show the final relation shape. The orange arrows show bezier curve handles.\n```\n\n----------------------------------------\n\nTITLE: Displaying Information Callout in Markdown\nDESCRIPTION: This snippet shows how to create an information callout in Markdown, reminding users to copy their authorization token for later use.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/auth-token/page.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% callout type=\"info\"  %}\nMake sure you have copied your personal single-use authorization token to be used at a later step\n{% /callout %}\n```\n\n----------------------------------------\n\nTITLE: Sample Output of 'access list' Command\nDESCRIPTION: Example output of the 'access list' command showing the format of the displayed information. Each line shows an access name followed by its associated satellite address.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-list-command/page.md#2025-04-16_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\n=========== ACCESSES LIST: name / satellite ================================\ncheesecake / 12EayRS2V1kEsWESU9QMRseFhdxYxKicsiFmxrsLZHeLUtdps3S@us1.storj.io:7777\npumpkin-pie / 12L9ZFwhzVpuEKMUNUqkaTLGzwY9G24tbiigLiXpmZWKwmcNDDs@eu1.storj.io:7777\ntarte / 121RTSDpyNZVcEU84Ticf2L1ntiuUimbWgfATz21tuvgk3vzoA6@ap1.storj.io:7777\n```\n\n----------------------------------------\n\nTITLE: RedHat Package Removal Command\nDESCRIPTION: Command to remove CUNO packages using yum package manager on RedHat-based Linux distributions like CentOS.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/uninstall/page.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nsudo yum remove cuno\\*\n```\n\n----------------------------------------\n\nTITLE: Checking Failed Audits and Repairs in Linux/MacOS Redirected Logs\nDESCRIPTION: This bash command searches redirected log files for failed GET_AUDIT or GET_REPAIR operations on a Storj storage node. It's used when logs are redirected to a specific file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/suspension-mode/page.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngrep -E \"GET_AUDIT|GET_REPAIR\" /mnt/storj/storagenode/node.log | grep failed\n```\n\n----------------------------------------\n\nTITLE: Command output for revoking an access grant\nDESCRIPTION: Shows the output when successfully revoking an access grant. The system confirms the action with a message containing the value of the revoked access grant.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-revoke/page.md#2025-04-16_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\nRevoked access \"19hFrjmsi...\"\n```\n\n----------------------------------------\n\nTITLE: Python Requirements Dependencies List\nDESCRIPTION: Comprehensive list of Python package dependencies with exact version specifications. Includes packages for HTTP requests, data validation, API interactions, and utility functions.\nSOURCE: https://github.com/storj/docs/blob/main/scripts/ai-seo/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nannotated-types==0.6.0\nanyio==4.3.0\nbackoff==2.2.1\ncertifi==2024.2.2\ndistro==1.9.0\nh11==0.14.0\nhttpcore==1.0.5\nhttpx==0.27.0\nidna==3.7\nopenai==1.30.1\npydantic==2.7.1\npydantic_core==2.18.2\npython-frontmatter==1.1.0\nPyYAML==5.1\nsniffio==1.3.1\ntqdm==4.66.4\ntyping_extensions==4.11.0\n```\n\n----------------------------------------\n\nTITLE: Viewing Last 20 Lines of Docker Logs for Storagenode (Linux)\nDESCRIPTION: This command shows only the last 20 lines of the log for a Storagenode running in a Docker container on Linux. It's helpful for quickly checking recent activity or errors.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/check-logs/page.md#2025-04-16_snippet_1\n\nLANGUAGE: linux\nCODE:\n```\ndocker logs --tail 20 storagenode\n```\n\n----------------------------------------\n\nTITLE: Creating Local Directory for Google Cloud Storage Fusion\nDESCRIPTION: Creates a directory on the attached storage device mounted at /mnt/fast to store local data for Fusion with Google Cloud Storage.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmkdir \"/mnt/fast/fusion-store\"\n```\n\n----------------------------------------\n\nTITLE: Creating Directory in Storj Bucket for Fusion Store\nDESCRIPTION: Creates a new directory in a Storj bucket to be used for Object Mount Fusion.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/object-mount-fusion/page.md#2025-04-16_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncuno run mkdir \"s3://<bucket>/fusion-store\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing Assembly Code for Memory Write Operations\nDESCRIPTION: This assembly code snippet represents the inner loop of a benchmark, demonstrating memory operations including increments, comparisons, and data movement between stack and memory buffer.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/a-tale-of-two-copies/page.md#2025-04-16_snippet_8\n\nLANGUAGE: assembly\nCODE:\n```\nloop:\n  INCQ AX                     (1)\n  CMPQ $0x186a0, AX\n  JGE exit\n\n  MOVUPS 0x60(SP), X0         (2)\n  MOVUPS X0, 0x7c(SP)\n  MOVUPS 0x6c(SP), X0\n  MOVUPS X0, 0x88(SP)\n\n  MOVQ 0xb8(SP), CX           (3)\n  CMPQ $0x248, CX\n  JAE slow\n\n  IMULQ $0x1c, CX, CX         (4)\n  LEAQ 0xc0(SP)(CX*1), CX\n  MOVUPS 0x7c(SP), X0         (5)\n  MOVUPS X0, 0(CX)\n  MOVUPS 0x88(SP), X0\n  MOVUPS X0, 0xc(CX)\n\n  INCQ 0xb8(SP)               (6)\n  JMP loop\n\nslow:\n   // ... slow path goes here ...\n\nexit:\n```\n\n----------------------------------------\n\nTITLE: CSS Styling\nDESCRIPTION: CSS configuration for image sizing\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/rails-activestorage/page.md#2025-04-16_snippet_11\n\nLANGUAGE: css\nCODE:\n```\nimg {\n  width: 100vh;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TeslaUSB Variables for Raspberry Pi\nDESCRIPTION: Configuration file snippet showing the essential settings for the TeslaUSB setup, including archive system and WiFi configuration parameters.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/tesla-sentry-mode-teslausb/page.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# Variables for CIFS (Windows/Mac file sharing) archiving\nexport ARCHIVE_SYSTEM=none\nexport ARCHIVE_SERVER=your_archive_name_or_ip\nexport SHARE_NAME=your_archive_share_name\nexport SHARE_USER=username\nexport SHARE_PASSWORD=password\n# the cifs options below usually don't need to be specified\n# export SHARE_DOMAIN=domain\n# export CIFS_VERSION=\"3.0\"\n# export CIFS_SEC=\"ntlm\"\n\n\n# Wifi setup information. Note that Raspberry Pi Zero W only supports 2.4 GHz wifi.\n# If you are you are trying to connect to a network with a _hidden_ SSID,\n#   edit /boot/wpa_supplicant.conf.sample and un-comment the indicated line.\nexport SSID='your_ssid'\nexport WIFIPASS='your_pass'\n```\n\n----------------------------------------\n\nTITLE: Visualizing Overlapping Memory Writes in ASCII\nDESCRIPTION: This ASCII diagram illustrates the overlapping writes in memory, showing how two 16-byte writes overlap in the range [0x88, 0x8c].\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/a-tale-of-two-copies/page.md#2025-04-16_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n0x7c             0x8c\n├────────────────┤\n│  Write 1 (16b) │\n└───────────┬────┴──────────┐\n            │ Write 2 (16b) │\n            ├───────────────┤\n            0x88            0x98\n```\n\n----------------------------------------\n\nTITLE: Restarting Storj Storage Node in Docker\nDESCRIPTION: This command restarts the Storj storage node Docker container with a 300-second timeout. It's used to apply QUIC configuration changes.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/quic-requirements/page.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker restart -t 300 storagenode\n```\n\n----------------------------------------\n\nTITLE: Configuring Core File Access permissions in Object Mount with custom UID/GID\nDESCRIPTION: Example of mounting an S3 bucket with customized user ID, group ID, and file/directory permissions. This configuration sets root ownership with specific read permissions for files and directories.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/configuration/page.md#2025-04-16_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ cuno -o 'uid=0 gid=0 filemode=0444 dirmode=0447' \\\n  mount --root s3://examplebucket/directory/ /mnt/s3-bucket\n\n$ ls -l /mnt/s3-bucket\ndr--r--rwx  1 root root 0 Jan  1  1970 directory\n-r--r--r--  1 root root 0 Nov 10 11:16 file\n```\n\n----------------------------------------\n\nTITLE: Counting Audit Stats - Windows Docker\nDESCRIPTION: PowerShell commands to count started and finished audits in Docker environment\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/why-is-my-node-disqualified/page.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n(docker logs storagenode 2>&1 | sls \"GET_AUDIT|GET_REPAIR\" | sls started).Count\n```\n\nLANGUAGE: powershell\nCODE:\n```\n(docker logs storagenode 2>&1 | sls \"GET_AUDIT|GET_REPAIR\" | sls downloaded).Count\n```\n\n----------------------------------------\n\nTITLE: Representing Field Elements in Ed25519 Implementation\nDESCRIPTION: A mathematical representation of field elements used in Ed25519 cryptography, showing how large numbers are represented as a sum of components with powers of 2^51.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/two-mul-or-not-two-mul/page.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\na0 + a1*2^51 + a2*2^(51*2) + a3*2^(51*3) + a4*2^(51*4)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Video Streaming via S3 Gateway\nDESCRIPTION: Instructions for enabling video streaming through the S3 gateway. Creates a bucket, uploads a video file, and generates a presigned URL that can be opened in a browser or media player.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-windows/page.md#2025-04-16_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\naws s3 --endpoint http://127.0.0.1:11000 mb S3://Bucket\naws s3 --endpoint http://127.0.0.1:11000 cp c:\\StorjIntro.mp4 S3://Bucket/StorjIntro.mp4\naws s3 --endpoint http://127.0.0.1:11000 presign s3://Bucket/StorjIntro.mp4\n```\n\n----------------------------------------\n\nTITLE: Creating DNS Share for Custom Domain with Storj\nDESCRIPTION: This command creates a DNS share for a custom domain using the Uplink CLI. It generates the necessary DNS records for setting up a custom domain with HTTPS (for Pro accounts).\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/static-site-hosting/custom-domains/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuplink share --dns my-website.storj.dev sj://my-website --tls --not-after=none\n```\n\n----------------------------------------\n\nTITLE: Testing the Resource Tracker in Go\nDESCRIPTION: A simple test function that demonstrates how to use the Tracker to detect resource leaks in tests. If a tag is created but not closed, the test will fail with details about the leaked resource.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/finding-and-tracking-resource-leaks-in-go/page.md#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc TestTracker(t *testing.T) {\n\ttracker := NewTracker()\n\tdefer func() {\n\t\tif err := tracker.Close(); err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t}()\n\n\ttag := tracker.Create()\n\t// if we forget to call Close, then the test fails.\n\t// tag.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Pairing GCS Bucket with Billing Project\nDESCRIPTION: Non-interactive command to pair a Google Cloud Storage bucket with specific billing project ID and credential file.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/user-guides/credentials/page.md#2025-04-16_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ncuno creds pair --billing <billing_project_ID> <bucket_remote_uri> <imported_credential_file>\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Storj Gateway\nDESCRIPTION: This Bash script creates a Kubernetes secret containing the necessary credentials for the Storj gateway, including access grant, gateway key, and secret.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/use-storj-dcs-from-cloud-native-environments-using-sidecar-pattern/page.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport ACCESS_GRANT=...generated_by_ui…\n\nkubectl create secret generic storj-gateway \\\n--from-literal=storj-gateway-key=$(pwgen -n 18) \\\n--from-literal=storj-gateway-secret=$(pwgen -n 18) \\\n--from-literal=storj-access-grant=$ACCESS_GRANT\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Store Forwarding Performance in Go\nDESCRIPTION: This Go benchmark output compares the performance of different memory write scenarios, showing the impact of store forwarding on CPU performance through the ld_blocks.store_forward counter.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/a-tale-of-two-copies/page.md#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkBuffer/28-Slow      7.292 ns/key      1,006,025,599 ld_blocks.store_forward\nBenchmarkBuffer/32-Slow      4.394 ns/key          1,973,930 ld_blocks.store_forward\nBenchmarkBuffer/28-Fast      4.078 ns/key          4,433,624 ld_blocks.store_forward\nBenchmarkBuffer/32-Fast      4.369 ns/key          1,974,915 ld_blocks.store_forward\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CLI for S3 Gateway on Storj Network\nDESCRIPTION: Sets up AWS CLI with S3 gateway credentials for accessing Storj network. Configures the access key ID, secret access key, and multipart threshold settings.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-windows/page.md#2025-04-16_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\naws configure set default.aws_access_key_id eUXZt66VWTTpcwgBazQnPsuSYri\naws configure set default.aws_secret_access_key xDkJKUqJVhAj69CGH1VPqDPi47Q\naws configure set default.s3.multipart_threshold 1TB\n```\n\n----------------------------------------\n\nTITLE: Installing MSYS2 Dependencies\nDESCRIPTION: Installs git, make, and gcc using the MSYS2 package manager on Windows.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/learn/tutorials/getting-started-with-storj-testnet-on-windows/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npacman -S git make mingw-w64-x86_64-gcc\n```\n\n----------------------------------------\n\nTITLE: Optimized multiplication by 19 function\nDESCRIPTION: A specialized function that computes multiplication by 19 using bit shifts and additions instead of direct multiplication, targeting potential CPU execution unit optimization.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/two-mul-or-not-two-mul/page.md#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc mul19(v uint64) uint64 {\n\treturn v + (v+v<<3)<<1\n}\n\n...\nr0 = addMul64(r0, mul19(a1), b4)\nr0 = addMul64(r0, mul19(a2), b3)\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Object Mount Installation (Apple Silicon)\nDESCRIPTION: This command runs a Docker container with the Object Mount installer mounted, specifically for Apple Silicon Macs using x86 emulation.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/mac/page.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm --entrypoint /bin/bash \\\n-v <path_to_installation_script>:/tmp/cuno_install \\\n--name cuno-container \\\n--platform linux/amd64 ubuntu:latest\n```\n\n----------------------------------------\n\nTITLE: Dependency Chain Example in Multiplication\nDESCRIPTION: Example showing the difference between sequential multiplications that form a dependency chain versus independent multiplications that can be computed in parallel by the CPU.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/two-mul-or-not-two-mul/page.md#2025-04-16_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nr := x * y\nr = r * z // needs to wait for `r`\nr = r * w // needs to wait for `r`\n\nvs.\n\nu := x * y\nv := z * w\nr := u * v // needs to wait for `u` and `v`\n```\n\n----------------------------------------\n\nTITLE: Installing Object Mount in Docker Container\nDESCRIPTION: This command runs the Object Mount installer script within a Docker container.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/installation/mac/page.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsh /tmp/cuno_install\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Links using docId in Markdown for Storj Documentation\nDESCRIPTION: Demonstrates how to create internal links within Storj documentation using the docId approach. This method ensures links remain valid even if the URL structure changes.\nSOURCE: https://github.com/storj/docs/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[](docId:your-doc-id-here)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Link Text with docId in Markdown for Storj Documentation\nDESCRIPTION: Demonstrates how to override the default link text when using docId linking by providing custom text between the square brackets.\nSOURCE: https://github.com/storj/docs/blob/main/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Custom Link Name](docId:3gNhGvPOi3DFDya6NyVb0)\n```\n\n----------------------------------------\n\nTITLE: Checking UDP/IP Buffer Limit on macOS/FreeBSD\nDESCRIPTION: This command checks the current UDP/IP buffer limit on macOS/FreeBSD systems. It displays the value of kern.ipc.maxsockbuf, which should be at least 2875000 bytes for optimal performance.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/get-started/quic-requirements/macosfreebsd-configuration-for-udp/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsysctl kern.ipc.maxsockbuf\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Storj Docs (Bash)\nDESCRIPTION: This command starts the development server for the Storj documentation project. After running this, the site can be viewed at http://localhost:3000 in a web browser.\nSOURCE: https://github.com/storj/docs/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Registering Access with Gateway MT in Uplink CLI\nDESCRIPTION: Example of sharing a bucket and registering it with Gateway MT, which generates S3-compatible credentials for accessing the shared data.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/share-command/page.md#2025-04-16_snippet_3\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe share sj://cakes/ --register\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink share sj://cakes/ --register\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink share sj://cakes/ --register\n```\n\n----------------------------------------\n\nTITLE: Enabling SSH on Raspberry Pi\nDESCRIPTION: Creates an empty ssh file in the boot partition to enable SSH daemon on Raspberry Pi after boot.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/node/faq/install-storagenode-on-raspberry-pi3-or-higher-version/page.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo touch /boot/firmware/ssh\n```\n\n----------------------------------------\n\nTITLE: S3 API Limits Table\nDESCRIPTION: Markdown table defining the operational limits for various S3 operations in Storj Gateway.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/s3/s3-compatibility/page.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                                      Limit                                      |        Specification        |\n| :-----------------------------------------------------------------------------: | :-------------------------: |\n|                            Maximum number of buckets                            |             100             |\n|                      Maximum number of objects per bucket                       |          No limit           |\n[...abbreviated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Exiting rclone Configuration in Text\nDESCRIPTION: Command to quit the rclone configuration process after reviewing and selecting default options.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/tesla-sentry-mode-teslausb/page.md#2025-04-16_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nq\n```\n\n----------------------------------------\n\nTITLE: Show Template Configuration\nDESCRIPTION: ERB template for displaying uploaded image\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/rails-activestorage/page.md#2025-04-16_snippet_10\n\nLANGUAGE: erb\nCODE:\n```\n<p style=\"color: green\"><%= notice %></p>\n\n<%# highlight %>\n<%= render @name %> <%= image_tag @name.main_image %>\n\n<div>\n  <%= link_to \"Edit this name\", edit_name_path(@name) %> | <%= link_to \"Back to\n  names\", names_path %> <%= button_to \"Destroy this name\", @name, method:\n  :delete %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Listing Buckets in Microsoft Azure with Object Mount\nDESCRIPTION: Lists all paired buckets in Microsoft Azure using Object Mount. This command requires that Object Mount be enabled first by running the 'cuno' command.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nls az://\n```\n\n----------------------------------------\n\nTITLE: Import Map Configuration\nDESCRIPTION: Ruby configuration for ActiveStorage JavaScript package\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/rails-activestorage/page.md#2025-04-16_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\npin \"@rails/activestorage\", to: \"https://ga.jspm.io/npm:@rails/activestorage@7.0.4/app/assets/javascripts/activestorage.esm.js\"\n```\n\n----------------------------------------\n\nTITLE: Assembly Implementation of Multiplication by 19 on ARM64\nDESCRIPTION: ARM64 assembly implementation showing direct multiplication by 19 using MUL instruction.\nSOURCE: https://github.com/storj/docs/blob/main/app/(blog)/blog/two-mul-or-not-two-mul/page.md#2025-04-16_snippet_6\n\nLANGUAGE: assembly\nCODE:\n```\nMOVD    $19, R1\nMUL     R1, R0, R0\n```\n\n----------------------------------------\n\nTITLE: Creating Microsoft Azure Credentials File Format for Object Mount\nDESCRIPTION: Example format for Microsoft Azure credentials file containing the storage account name and access key. This format is required for Object Mount to authenticate with Azure Blob Storage.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/object-mount/getting-started/configuring-credentials/page.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nAZURE_STORAGE_ACCOUNT= xxxxxxxxxxxxxxxxxx\nAZURE_STORAGE_ACCESS_KEY= xxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Routes Configuration\nDESCRIPTION: Ruby configuration for root route\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/code/rails-activestorage/page.md#2025-04-16_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nroot \"names#index\"\n```\n\n----------------------------------------\n\nTITLE: API Key Configuration\nDESCRIPTION: Prompt for entering the API key during new access grant creation.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/third-party-tools/rclone/rclone-native/page.md#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nOption api_key.\nAPI key.\nEnter a value. Press Enter to leave empty.\napi_key> 1Cjfjf...\n```\n\n----------------------------------------\n\nTITLE: Command output for revoking a stored access\nDESCRIPTION: Shows the output when successfully revoking a stored access. The system confirms the action with a message containing the name of the revoked access.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-revoke/page.md#2025-04-16_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nRevoked access \"us1-ro\"\n```\n\n----------------------------------------\n\nTITLE: Using 'access create' command in Uplink CLI\nDESCRIPTION: Basic usage syntax for the 'access create' command in Uplink CLI. The command is used to create and manage Access Grants for the Storj network.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/access-create/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access create [flags]\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access create [flags]\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access create [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the Access Command in Uplink CLI\nDESCRIPTION: Basic usage syntax for the 'access' command in Uplink CLI across different operating systems. This command serves as the entry point for access grant management in Storj.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/access-command/page.md#2025-04-16_snippet_0\n\nLANGUAGE: windows\nCODE:\n```\n./uplink.exe access [command]\n```\n\nLANGUAGE: macos\nCODE:\n```\nuplink access [command]\n```\n\nLANGUAGE: linux\nCODE:\n```\nuplink access [command]\n```\n\n----------------------------------------\n\nTITLE: Installing Uplink CLI on Linux ARM64 using curl\nDESCRIPTION: Commands to download, unzip, and install the Uplink CLI tool on Linux ARM64 architecture. The script fetches the ARM64-specific binary, extracts the archive, and installs the executable to the system path.\nSOURCE: https://github.com/storj/docs/blob/main/app/(docs)/dcs/api/uplink-cli/installation/page.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/storj/storj/releases/latest/download/uplink_linux_arm64.zip -o uplink_linux_arm64.zip\nunzip -o uplink_linux_arm64.zip\nsudo install uplink /usr/local/bin/uplink\n```\n\n----------------------------------------\n\nTITLE: Linking to Document Sections with Fragments in Markdown for Storj Documentation\nDESCRIPTION: Shows how to link to specific sections within documents by adding fragments to docId links.\nSOURCE: https://github.com/storj/docs/blob/main/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[](docId:your-doc-id-here#fragment)\n```"
  }
]