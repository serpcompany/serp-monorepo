[
  {
    "owner": "cesiumgs",
    "repo": "cesium-unreal",
    "content": "TITLE: Implementing PostLoad for Object Reference Migration in Cesium Unreal\nDESCRIPTION: Shows how to use PostLoad to handle backward compatibility for object references, specifically for CesiumIonServer assets that didn't exist in previous versions.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/api-design-guide.md#2025-04-22_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nvoid ACesium3DTileset::PostLoad() {\n  // Don't forget to call `Super`.\n  Super::PostLoad();\n\n#if WITH_EDITOR\n  const int32 CesiumVersion =\n      this->GetLinkerCustomVersion(FCesiumCustomVersion::GUID);\n\n  PRAGMA_DISABLE_DEPRECATION_WARNINGS\n  if (CesiumVersion < FCesiumCustomVersion::CesiumIonServer) {\n    this->CesiumIonServer = UCesiumIonServer::GetBackwardCompatibleServer(\n        this->IonAssetEndpointUrl_DEPRECATED);\n  }\n  PRAGMA_ENABLE_DEPRECATION_WARNINGS\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Deprecation with Informative Messages\nDESCRIPTION: Example of deprecating a function using the DeprecatedFunction meta specifier with a descriptive message that guides users to the replacement functionality. This helps users migrate to newer API versions while maintaining code clarity.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/api-design-guide.md#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nUFUNCTION(\n    Meta =\n        (DeprecatedFunction,\n         DeprecationMessage =\n             \"CesiumMetadataPrimitive is deprecated. Get the associated property texture indices from CesiumPrimitiveMetadata instead.\"))\nstatic const TArray<FString>\nGetFeatureTextureNames(UPARAM(ref)\n                           const FCesiumMetadataPrimitive& MetadataPrimitive);\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Properties in C++ for Unreal Engine\nDESCRIPTION: Demonstrates how to use the EditCondition meta specifier to create dependent properties in Unreal Engine C++ classes. This example shows a RandomSeed property that is only editable when EnableRandomness is true.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/api-design-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n  UPROPERTY(EditAnywhere)\n  bool EnableRandomness;\n\n  UPROPERTY(\n      EditAnywhere,\n      meta = (EditCondition = \"EnableRandomness\"))\n  int RandomSeed = 0;\n```\n\n----------------------------------------\n\nTITLE: Defining a UFunction with Specifiers in Unreal Engine C++\nDESCRIPTION: Illustrates how to define a UFunction with specifiers for Blueprint integration, categorization, and return value display.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/api-design-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nUFUNCTION(\n    BlueprintPure,\n    Category = \"Cesium\",\n    meta = (ReturnDisplayName = \"UnrealPosition\"))\nFVector TransformLongitudeLatitudeHeightPositionToUnreal(\n    const FVector& LongitudeLatitudeHeight) const;\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum Class in Unreal Engine C++\nDESCRIPTION: Demonstrates how to define an enum class using the UENUM macro for use in UObject contexts and Blueprints.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/api-design-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nUENUM()\nenum class EMyEnum : uint8\n{\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metadata Values from Line Trace Hit in Unreal Blueprint\nDESCRIPTION: This snippet demonstrates how to use the 'Get Metadata Values For Face' node in Unreal Blueprint to retrieve metadata values from a line trace hit. It uses the Hit Component and Face Index from a Line Trace By Channel to query the component for its FCesiumPrimitiveFeatures and retrieve corresponding metadata values.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/upgrade-to-2.0-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: Blueprint\nCODE:\n```\n// Connect Hit Component and Face Index from Line Trace By Channel to Get Metadata Values For Face node\n// The node returns FCesiumMetadataValue instances mapped by property name\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Class or Struct with Forward Declaration\nDESCRIPTION: Technique for deprecating a struct or class using the UE_DEPRECATED macro in a forward declaration. This approach marks the type as deprecated before its actual definition and provides migration guidance to users.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/api-design-guide.md#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n// Forward declare the class with the UE_DEPRECATED macro.\n// The first string notes the plugin or engine version for which the thing is deprecated.\n// The second string contains the deprecation message.\nstruct UE_DEPRECATED(\n    \"Cesium For Unreal v2.0\",\n    \"FCesiumMetadataPrimitive is deprecated. Instead, use FCesiumPrimitiveFeatures and FCesiumPrimitiveMetadata to retrieve feature IDs and metadata from a glTF primitive.\")\n    FCesiumMetadataPrimitive;\n\n// Actual definition below.\nUSTRUCT(BlueprintType)\nstruct CESIUMRUNTIME_API FCesiumMetadataPrimitive { ... }\n```\n\n----------------------------------------\n\nTITLE: Declaring a UProperty with Specifiers in Unreal Engine C++\nDESCRIPTION: Shows how to declare a UProperty with various specifiers for editor integration, Blueprint access, and metadata constraints.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/api-design-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nUPROPERTY(\n    EditAnywhere,\n    BlueprintGetter = GetMaximumScreenSpaceError,\n    BlueprintSetter = SetMaximumScreenSpaceError,\n    Category = \"Cesium|Level of Detail\",\n    meta = (ClampMin = 0.0))\ndouble MaximumScreenSpaceError = 16.0;\n```\n\n----------------------------------------\n\nTITLE: Suppressing Deprecation Warnings for Backwards Compatibility\nDESCRIPTION: Example of using PRAGMA_DISABLE_DEPRECATION_WARNINGS and PRAGMA_ENABLE_DEPRECATION_WARNINGS to maintain backwards compatibility with deprecated types while reducing warning spam in the build process.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/api-design-guide.md#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nstruct LoadPrimitiveResult { \n  // List of properties here...\n\n  PRAGMA_DISABLE_DEPRECATION_WARNINGS\n  // For backwards compatibility with CesiumEncodedMetadataComponent.\n  FCesiumMetadataPrimitive Metadata_DEPRECATED{};\n  PRAGMA_ENABLE_DEPRECATION_WARNINGS\n\n  // Other properties here...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining GetPropertyTableValuesFromHit Function with Prioritized Parameters in C++\nDESCRIPTION: Example of parameter ordering from most important to least important in a C++ function declaration. This ordering affects how parameters appear in Blueprint nodes, with the Hit parameter appearing at the top as the most essential input.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/api-design-guide.md#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nTMap<FString, FCesiumMetadataValue> GetPropertyTableValuesFromHit(\n    const FHitResult& Hit,\n    int64 FeatureIDSetIndex = 0);\n```\n\n----------------------------------------\n\nTITLE: Class Hierarchy Diagram for 3D Tiles Components\nDESCRIPTION: Mermaid diagram showing the inheritance relationships between major UObject classes involved in 3D Tiles rendering, including both Unreal Engine built-in types and Cesium for Unreal custom types.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/unreal-engine-3d-tiles.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n@mermaid{classes-for-3d-tiles}\n```\n\n----------------------------------------\n\nTITLE: Categorizing Properties and Functions in Unreal Engine C++\nDESCRIPTION: Illustrates how to use the Category specifier to organize properties and functions into logical groups in the Unreal Engine editor. This example shows both top-level and nested category assignments.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/api-design-guide.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// Falls under the general \"Cesium\" category.\n UFUNCTION(Category = \"Cesium\")\n void RefreshTileset();\n\n // Nested under \"Cesium\" > \"Debug\".\n UPROPERTY(Category = \"Cesium|Debug\")\n bool SuspendUpdate;\n```\n\n----------------------------------------\n\nTITLE: Implementing Serialize for Property Migration in Cesium Unreal\nDESCRIPTION: Implementation of the Serialize method that handles migrating from a boolean property to an enum property based on the custom version.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/api-design-guide.md#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nvoid UCesiumWebMapTileServiceRasterOverlay::Serialize(FArchive& Ar) {\n  // Don't forget to call `Super`.\n  Super::Serialize(Ar);\n\n  Ar.UsingCustomVersion(FCesiumCustomVersion::GUID);\n\n  const int32 CesiumVersion = Ar.CustomVer(FCesiumCustomVersion::GUID);\n\n  if (CesiumVersion < FCesiumCustomVersion::WebMapTileServiceProjectionAsEnum) {\n    // In previous versions, the projection of the overlay was controlled by\n    // boolean, rather than being explicitly specified by an enum.\n    this->Projection =\n        this->UseWebMercatorProjection_DEPRECATED\n            ? ECesiumWebMapTileServiceRasterOverlayProjection::WebMercator\n            : ECesiumWebMapTileServiceRasterOverlayProjection::Geographic;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Property Categorization in Unreal Engine C++\nDESCRIPTION: Demonstrates the correct way to group properties by category in C++ code, ensuring logical organization in both the code and the Unreal Engine editor interface.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/api-design-guide.md#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n  UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Cesium|Debug\")\n  bool SuspendUpdate;\n\n  UPROPERTY(EditAnywhere, Category = \"Cesium|Debug\")\n  bool UpdateInEditor;\n\n  UPROPERTY(EditAnywhere, Category = \"Cesium|Tile Loading\")\n  bool PreloadAncestors;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metadata Values as Strings in Unreal Blueprint\nDESCRIPTION: This snippet shows how to use the 'Get Metadata Values For Face As Strings' node in Unreal Blueprint to retrieve metadata values as strings from a line trace hit. This is useful for displaying the values as text in a UI.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/upgrade-to-2.0-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: Blueprint\nCODE:\n```\n// Connect Hit Component and Face Index from Line Trace By Channel to Get Metadata Values For Face As Strings node\n// The node returns string values mapped by property name\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Value Transformation and Fallback Logic in Pseudocode\nDESCRIPTION: This pseudocode snippet demonstrates the logic for handling property values, including transformations (scale and offset), no data value checks, and default value fallbacks. It represents the behavior of the material graph nodes generated for property table properties.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/upgrade-to-2.0-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: pseudocode\nCODE:\n```\nif (propertyHasValue) {\n  if (rawValue == noDataValue) {\n    return defaultValue;\n  }\n\n  transformedValue = rawValue * scale + offset;\n  return transformedValue;\n\n} else {\n  return defaultValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Naming Convention for Public Cesium Classes in Unreal Engine\nDESCRIPTION: Demonstrates the correct naming convention for public Cesium classes in Unreal Engine, using the 'Cesium' prefix and appropriate Unreal class prefixes.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/style-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Don't do this.\npublic AGeoreference : public AActor {...}\n\n// Do this.\npublic ACesiumGeoreference : public AActor {...}\n```\n\n----------------------------------------\n\nTITLE: Metadata Class Renames in Cesium for Unreal\nDESCRIPTION: Lists of class renames for property tables and metadata handling, including FCesiumFeatureTable to FCesiumPropertyTable and related changes.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/upgrade-to-2.0-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nFCesiumFeatureTable -> FCesiumPropertyTable\nFCesiumMetadataProperty -> FCesiumPropertyTableProperty\nUCesiumFeatureTableBlueprintLibrary -> UCesiumPropertyTableBlueprintLibrary\nFCesiumFeatureTexture -> FCesiumPropertyTexture\nUCesiumFeatureTextureBlueprintLibrary -> UCesiumPropertyTextureBlueprintLibrary\nFCesiumMetadataModel -> FCesiumModelMetadata\n```\n\n----------------------------------------\n\nTITLE: Complex Conditional Property Logic in Unreal Engine C++\nDESCRIPTION: Shows the limitations of EditCondition when dealing with function calls and complex logic. Demonstrates how to implement a conditional property based on an enum value using inline boolean expressions.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/api-design-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\npublic:\n  UPROPERTY()\n  EDataType Type;\n\n  UFUNCTION()\n  bool IsNumber(EDataType Type) {\n    return Type == EDataType::Int || Type == EDataType::Float || Type == EDataType::Double;\n  }\n  \n  // This won't work...\n  UPROPERTY(\n    meta= (EditCondition = \"IsNumber(Type)\"))\n  double Offset = 0.0;\n\n  // ...so the check must be done manually.\n  UPROPERTY(\n    meta= (EditCondition = \"Type == EDataType::Int || Type == EDataType::Float || Type == EDataType::Double\"))\n  double Offset = 0.0;\n```\n\n----------------------------------------\n\nTITLE: Public vs Private Naming Conventions in Cesium for Unreal\nDESCRIPTION: Illustrates the difference in naming conventions between public and private members in Cesium for Unreal structs and classes.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/style-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nUSTRUCT()\nstruct CESIUMRUNTIME_API FCesiumStruct {\n    GENERATED_BODY()\n\npublic:\n    float PublicField;\n    void DoSomethingPublic(float Input);\n\nprivate:\n    float _privateField;\n    void doSomethingPrivate(float input);\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Units and Coordinate Systems in Cesium for Unreal\nDESCRIPTION: Example of how to document the expected units and coordinate systems for function parameters in Cesium for Unreal.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/style-guide.md#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n/**\n * Transforms a position in Unreal coordinates into longitude in degrees (x),\n * latitude in degrees (y), and height above the ellipsoid in meters (z). The\n * position should generally not be an Unreal _world_ position, but rather a\n * position expressed in some parent Actor's reference frame as defined by its\n * transform. This way, the chain of Unreal transforms places and orients the\n * \"globe\" in the Unreal world.\n */\nFVector TransformUnrealPositionToLongitudeLatitudeHeight(\n    const FVector& UnrealPosition) const;\n```\n\n----------------------------------------\n\nTITLE: Adding Async Height Sampling Function for 3D Tilesets\nDESCRIPTION: A new function added to Cesium3DTileset that allows asynchronous height querying at specific positions, accessible from both C++ and Blueprints.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/CHANGES.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Added `SampleHeightMostDetailed` function to `Cesium3DTileset`, which asynchronously queries the height of a tileset at a list of positions. It is callable from both C++ and Blueprints.\n```\n\n----------------------------------------\n\nTITLE: Pointer Naming Conventions in Cesium for Unreal\nDESCRIPTION: Shows the naming conventions for pointer variables in public and private contexts within Cesium for Unreal classes.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/style-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nUCLASS()\nclass CESIUMRUNTIME_API UCesiumClass {\n    GENERATED_BODY()\n\npublic:\n    UCesiumEllipsoid* Ellipsoid;\n    void SetEllipsoid(UCesiumEllipsoid* NewEllipsoid)\n\nprivate:\n    ACesium3DTileset* _pTilesetActor;\n    void setTileset(ACesium3DTileset* pNewTileset);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata Property Table Search in Blueprint Library\nDESCRIPTION: A new function added to the CesiumMetadataPickingBlueprintLibrary to search for a property table property by name on a given UPrimitiveComponent.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Added `UCesiumMetadataPickingBlueprintLibrary::FindPropertyTableProperty` to search for a `FCesiumPropertyTableProperty` by name on a given `UPrimitiveComponent`.\n```\n\n----------------------------------------\n\nTITLE: Creating a New Version in the Custom Versions Enum for Cesium Unreal\nDESCRIPTION: Demonstrates how to define a new version in the Cesium custom versions enum with proper naming conventions and documentation.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/api-design-guide.md#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nenum Versions {\n    // Other versions omitted.\n    // (...)\n\n    // Replaced the UseWebMercatorProjection property in\n    // CesiumWebMapTileServiceOverlay with the enum Projection property.\n    WebMapTileServiceProjectionAsEnum = 8,\n\n    VersionPlusOne,\n    LatestVersion = VersionPlusOne - 1\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Serialize Method for UCesiumWebMapTileServiceRasterOverlay\nDESCRIPTION: Shows the class declaration for adding a virtual Serialize method to handle backward compatibility for a property change.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/api-design-guide.md#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nclass UCesiumWebMapTileServiceRasterOverlay {\n  protected:\n    virtual void Serialize(FArchive& Ar) override;\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Abbreviations in Cesium for Unreal Function Names\nDESCRIPTION: Shows how to improve function naming by avoiding abbreviations, enhancing readability for developers.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/style-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n// Not great.\nstatic void CompBoundingRect(FVector BL, FVector TR) {...}\n\n// Better.\nstatic void ComputeBoundingRectangle(FVector BottomLeft, FVector TopRight) {...}\n```\n\n----------------------------------------\n\nTITLE: Improving Function Naming Clarity in Cesium for Unreal\nDESCRIPTION: Demonstrates how to improve function naming for clarity, especially when dealing with different coordinate systems and transformations.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/style-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n/**\n * Computes the matrix that transforms from an East-South-Up frame centered at\n * a given location to the Unreal frame.\n * \n * (Insert detailed explanation of East-South-Up.)\n */\nFMatrix ComputeEastSouthUpToUnrealTransformation(FVector UnrealLocation) {...}\n```\n\n----------------------------------------\n\nTITLE: Texture Resource Class Hierarchy\nDESCRIPTION: Mermaid diagram illustrating the inheritance structure of texture resource classes used for efficient texture handling in Cesium for Unreal.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/unreal-engine-3d-tiles.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n@mermaid{texture-resource-classes}\n```\n\n----------------------------------------\n\nTITLE: Property Table Function Renames\nDESCRIPTION: Function name changes in the property table system, including renamed getters and new functionality for property access.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/upgrade-to-2.0-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nGetNumberOfFeatures -> GetPropertyTableSize\nGetMetadataValuesForFeatureID -> GetMetadataValuesForFeature\nGetMetadataValuesForFeatureAsStrings -> UCesiumMetadataValueBlueprintLibrary::GetValuesAsStrings\nGetTrueType -> GetValueType\nGetTrueComponentType -> GetValueType\nGetComponentCount -> GetArraySize\nGetBlueprintComponentType -> GetArrayElementBlueprintType\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Settings for Cesium Unreal\nDESCRIPTION: Sets platform-specific variables and compiler flags for different target platforms including Android, iOS, and desktop systems.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/extern/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (${CMAKE_SYSTEM_NAME} STREQUAL \"Android\")\n    set(CESIUM_ARCHITECTURE \"aarch64\")\n    set(HTTPLIB_USE_OPENSSL_IF_AVAILABLE OFF)\n    set(ANDROID_ABI ${CMAKE_ANDROID_ARCH_ABI})\n    set(ANDROID_NDK ${CMAKE_ANDROID_NDK})\nelseif (${CMAKE_SYSTEM_NAME} STREQUAL \"iOS\")\n    set(CESIUM_ARCHITECTURE \"arm64\")\nelse()\n    if (CMAKE_SIZEOF_VOID_P EQUAL 8)\n        set(CESIUM_ARCHITECTURE \"64\")\n    else()\n        set(CESIUM_ARCHITECTURE \"32\")\n    endif()\nendif()\n\nif (${CMAKE_SYSTEM_NAME} STREQUAL \"iOS\")\n    # Fix for PThread library not in path\n    set(CMAKE_THREAD_LIBS_INIT \"-lpthread\")\n    set(CMAKE_HAVE_THREADS_LIBRARY 1)\n    set(CMAKE_USE_WIN32_THREADS_INIT 0)\n    set(CMAKE_USE_PTHREADS_INIT 1)\n\n    find_package(Threads REQUIRED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding engine configuration settings in Engine.ini for improved download performance\nDESCRIPTION: Configuration settings added to Engine.ini to improve tile download performance. These settings increase HTTP thread activity time and maximum server connections to enhance performance for all tilesets, particularly Google Photorealistic 3D Tiles.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/CHANGES.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nHttpThreadActiveFrameTimeInSeconds=0.001\nHttpMaxConnectionsPerServer=40\n```\n\n----------------------------------------\n\nTITLE: Version Release Notes - Markdown Documentation\nDESCRIPTION: Structured changelog entries detailing version changes, additions, fixes and breaking changes for Cesium for Unreal plugin across multiple releases.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/CHANGES.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n##### Fixes :wrench:\n\n- Drastically reduced tile mesh memory usage in UE 5.3 and 5.4 by working around a bug that causes those engine versions to add more texture coordinate sets than necessary.\n- Fixed a bug where the `scale`, `noData`, and `default` values of a property in `EXT_strutural_metadata` were not correctly passed to the tileset's material.\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Cesium Unreal\nDESCRIPTION: Sets up the CMake project with version and language requirements. It also determines the Unreal Engine root directory.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/extern/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n\nproject(\n    cesium-unreal-extern\n    VERSION 0.1.0\n    LANGUAGES CXX C\n)\n\nif (DEFINED ENV{UNREAL_ENGINE_ROOT} AND NOT UNREAL_ENGINE_ROOT)\n  set(UNREAL_ENGINE_ROOT \"$ENV{UNREAL_ENGINE_ROOT}\")\nendif()\n\nif (NOT UNREAL_ENGINE_ROOT)\n  # On Windows, try to use the default UE 5.3 location\n  set(WINDOWS_DEFAULT_UNREAL_INSTALLATION \"C:/Program Files/Epic Games/UE_5.3\")\n  if (WIN32 AND EXISTS \"${WINDOWS_DEFAULT_UNREAL_INSTALLATION}\")\n    set(UNREAL_ENGINE_ROOT \"${WINDOWS_DEFAULT_UNREAL_INSTALLATION}\")\n  else()\n    message(FATAL_ERROR \"Please specify the root of your Unreal Engine installation, either by setting the UNREAL_ENGINE_ROOT environment variable or with -DUNREAL_ENGINE_ROOT=path on the cmake command-line.\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Contributing Documentation in Markdown\nDESCRIPTION: Complete markdown documentation detailing contribution guidelines, issue reporting procedures, and pull request workflows for the Cesium Unreal project.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributing {#contributing-unreal}\n\nThanks for contributing to Cesium for Unreal!\n\n<!--!\n[TOC]\n-->\n\nHere are the guidelines that we use for all contributions to this project:\n\n- [Submitting an issue](#submitting-an-issue)\n- [Getting started contributing](#getting-started-contributing)\n- [Opening a pull request](#opening-a-pull-request)\n\nTo ensure an inclusive community, contributors and users in the Cesium community should follow the [code of conduct](./CODE_OF_CONDUCT.md).\n```\n\n----------------------------------------\n\nTITLE: Installing Cesium for Unreal ZIP Package\nDESCRIPTION: Step-by-step instructions for installing a pre-release Cesium for Unreal plugin ZIP file. Includes removing previous installations, locating the correct directory, and extracting the new package.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/using-prerelease-packages.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. If you previously installed the Cesium for Unreal plugin via the Unreal Engine Marketplace, uninstall it first.\n2. Find Unreal Engine's `Engine/Plugins/Marketplace` directory. For example, on Unreal Engine 5.3 on Windows, this is typically `C:\\Program Files\\Epic Games\\UE_5.3\\Engine\\Plugins\\Marketplace`. You may need to create the `Marketplace` directory yourself.\n3. If the `CesiumForUnreal` subdirectory already exists in this `Marketplace` directory, delete it first to make sure you're getting a clean installation.\n4. Extract the release ZIP into this `Marketplace` directory. If you've done this correctly, you'll find a `CesiumForUnreal` sub-directory inside the `Marketplace` directory.\n```\n\n----------------------------------------\n\nTITLE: Configuring Unreal Tracing for Cesium Native\nDESCRIPTION: Sets up optional tracing for Cesium Native using Unreal's tracing framework. This includes setting up include paths and defining necessary macros.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/extern/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\noption(CESIUM_USE_UNREAL_TRACING \"Whether to trace cesium-native events using Unreal's tracing framework.\")\nif (CESIUM_USE_UNREAL_TRACING)\n  set(UNREAL_ENGINE_DIR $ENV{UE427})\n  list(APPEND CESIUM_EXTRA_INCLUDES \"${UNREAL_ENGINE_DIR}/Engine/Source/Runtime/TraceLog/Public\")\n  list(APPEND CESIUM_EXTRA_INCLUDES \"${UNREAL_ENGINE_DIR}/Engine/Source/Runtime/Core/Public\")\n  list(APPEND CESIUM_EXTRA_INCLUDES \"${CMAKE_CURRENT_SOURCE_DIR}/../Intermediate/Build/Win64/UnrealEditor/Development/CesiumRuntime\")\n  add_compile_definitions(CESIUM_TRACING_ENABLED)\n  add_compile_definitions(CESIUM_OVERRIDE_TRACING)\n  list(APPEND CESIUM_EXTRA_INCLUDES \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite3 Build with CMake for Cesium Unreal\nDESCRIPTION: Complete CMake configuration for building SQLite3 library and tools. It sets up build options, compiler definitions, platform-specific handling for Windows and Unix systems, and proper installation rules for integration with Cesium Unreal.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/extern/vcpkg-overlays/sqlite3/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nproject(sqlite3 C)\n\noption(WITH_ZLIB \"Build sqlite3 with zlib support\" OFF)\noption(SQLITE3_SKIP_TOOLS \"Disable build sqlite3 executable\" OFF)\n\nset(PKGCONFIG_LIBS_PRIVATE \"\")\n\nadd_library(sqlite3 sqlite3.c sqlite3.rc)\n\ntarget_include_directories(sqlite3 PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}> $<INSTALL_INTERFACE:include>)\n\ntarget_compile_definitions(\n    sqlite3\n    PRIVATE\n        $<$<CONFIG:Debug>:SQLITE_DEBUG=1>\n        $<$<CONFIG:Debug>:SQLITE_ENABLE_SELECTTRACE>\n        $<$<CONFIG:Debug>:SQLITE_ENABLE_WHERETRACE>\n        $<$<COMPILE_LANGUAGE:RC>:RC_VERONLY>\n)\n\nif (BUILD_SHARED_LIBS)\n    if (WIN32)\n        target_compile_definitions(sqlite3 PRIVATE \"SQLITE_API=__declspec(dllexport)\")\n    else()\n        target_compile_definitions(sqlite3 PRIVATE \"SQLITE_API=__attribute__((visibility(\\\"default\\\")))\")\n    endif()\nendif()\n\nif (NOT WIN32)\n    find_package(Threads REQUIRED)\n    target_link_libraries(sqlite3 PRIVATE Threads::Threads ${CMAKE_DL_LIBS})\n    string(APPEND PKGCONFIG_LIBS_PRIVATE \" -pthread\")\n    foreach(LIB IN LISTS CMAKE_DL_LIBS)\n        string(APPEND PKGCONFIG_LIBS_PRIVATE \" -l${LIB}\")\n    endforeach()\n\n    if(SQLITE_ENABLE_FTS5 OR SQLITE_ENABLE_MATH_FUNCTIONS)\n        find_library(HAVE_LIBM m)\n        if(HAVE_LIBM)\n            target_link_libraries(sqlite3 PRIVATE m)\n            string(APPEND PKGCONFIG_LIBS_PRIVATE \" -lm\")\n        endif()\n    endif()\nendif()\n\nif(NOT SQLITE3_SKIP_TOOLS)\n    add_executable(sqlite3-bin shell.c)\n    set_target_properties(sqlite3-bin PROPERTIES\n        OUTPUT_NAME sqlite3\n        PDB_NAME \"sqlite3${CMAKE_EXECUTABLE_SUFFIX}.pdb\"\n    )\n\n    target_link_libraries(sqlite3-bin PRIVATE sqlite3)\n    if (WITH_ZLIB)\n        find_package(ZLIB REQUIRED)\n        target_link_libraries(sqlite3-bin PRIVATE ZLIB::ZLIB)\n        target_compile_definitions(sqlite3-bin PRIVATE SQLITE_HAVE_ZLIB)\n    endif()\n\n    install(TARGETS sqlite3-bin sqlite3\n      RUNTIME DESTINATION bin\n      LIBRARY DESTINATION lib\n      ARCHIVE DESTINATION lib\n    )\nendif()\n\ninstall(\n    TARGETS sqlite3\n    EXPORT unofficial-sqlite3-targets\n    RUNTIME DESTINATION bin\n    LIBRARY DESTINATION lib\n    ARCHIVE DESTINATION lib\n)\n\ninstall(FILES sqlite3.h sqlite3ext.h cesium_sqlite3-vcpkg-config.h DESTINATION include CONFIGURATIONS Release)\ninstall(EXPORT unofficial-sqlite3-targets NAMESPACE unofficial::sqlite3:: FILE unofficial-sqlite3-targets.cmake DESTINATION share/unofficial-sqlite3)\n\nconfigure_file(sqlite3.pc.in sqlite3.pc @ONLY)\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/sqlite3.pc\" DESTINATION \"${CMAKE_INSTALL_PREFIX}/lib/pkgconfig\")\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags and Definitions for Cesium Unreal\nDESCRIPTION: Configures compiler flags and definitions for different platforms to ensure compatibility with Unreal Engine and consistent behavior across debug and release builds.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/extern/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_MSVC_RUNTIME_LIBRARY MultiThreadedDLL)\nset(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_LIST_DIR}/../Source/ThirdParty)\nset(CMAKE_INSTALL_LIBDIR ${CMAKE_INSTALL_PREFIX}/lib/${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}-$<IF:$<CONFIG:Debug>,Debug,Release>)\n\n# Always define NDEBUG, since Unreal does in debug anyway.\n# We don't want any mismatches, especially with class member ordering.\n# But still let debug builds force assertions.\nadd_compile_definitions(NDEBUG $<$<CONFIG:Debug>:CESIUM_FORCE_ASSERTIONS>)\n\n# On Mac and Linux, Unreal uses -fvisibility-ms-compat.\n# On Android, it uses -fvisibility=hidden\nif (${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\" OR ${CMAKE_SYSTEM_NAME} STREQUAL \"Darwin\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility-ms-compat -fvisibility-inlines-hidden -fno-rtti\")\nelseif (${CMAKE_SYSTEM_NAME} STREQUAL \"Android\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility=hidden -fvisibility-inlines-hidden -fno-rtti\")\nelseif (${CMAKE_SYSTEM_NAME} STREQUAL \"iOS\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility=hidden -fno-rtti\")\nelseif (${CMAKE_SYSTEM_NAME} STREQUAL \"Windows\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /Zp8\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building cesium-native for Android\nDESCRIPTION: Commands to configure and build cesium-native for Android using CMake and Ninja. Requires properly configured Android NDK.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-windows.md#2025-04-22_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\ncmake -B build-android -S . -G Ninja -DCMAKE_TOOLCHAIN_FILE=\"unreal-android-toolchain.cmake\" -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_BUILD_TYPE=Release\ncmake --build build-android --config Release --target install\n```\n\n----------------------------------------\n\nTITLE: Setting Android NDK Environment Variable in Windows\nDESCRIPTION: Sets the ANDROID_NDK_ROOT environment variable for Android cross-compilation in Windows. Forward slashes must be used in the path.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-windows.md#2025-04-22_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nSET ANDROID_NDK_ROOT=<path_to_android_ndk>\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Visual Studio 2022\nDESCRIPTION: Command to configure the CMake project for Visual Studio 2022 for building cesium-native.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-windows.md#2025-04-22_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\ncmake -B build -S . -G \"Visual Studio 17 2022\" -A x64\n```\n\n----------------------------------------\n\nTITLE: Building Release Version of cesium-native from Command Line\nDESCRIPTION: Command to build and install the Release configuration of cesium-native using CMake command line.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-windows.md#2025-04-22_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\ncmake --build build --config Release --target install\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project Files for Cesium for Unreal\nDESCRIPTION: Runs the Unreal Engine script to generate Xcode project files for the Cesium for Unreal Samples project. This enables building and debugging the plugin within Xcode.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-osx.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/dev/cesium-unreal-samples\n\"/Users/Shared/Epic Games/UE_5.3/Engine/Build/BatchFiles/Mac/GenerateProjectFiles.sh\" -game -project=\"$PWD/CesiumForUnrealSamples.uproject\"\n```\n\n----------------------------------------\n\nTITLE: Building Debug Version of cesium-native from Command Line\nDESCRIPTION: Command to build and install the Debug configuration of cesium-native using CMake command line.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-windows.md#2025-04-22_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\ncmake --build build --config Debug --target install\n```\n\n----------------------------------------\n\nTITLE: Setting Unreal Engine Environment Variables in Linux\nDESCRIPTION: Configures required environment variables for Unreal Engine development, including paths to the engine directory, compiler, and LibCxx library.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-linux.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport UNREAL_ENGINE_DIR=<path_to_unreal_engine>\nexport UNREAL_ENGINE_COMPILER_DIR=$UNREAL_ENGINE_DIR/Engine/Extras/ThirdPartyNotUE/SDKs/HostLinux/Linux_x64/v20_clang-13.0.1-centos7/x86_64-unknown-linux-gnu\nexport UNREAL_ENGINE_LIBCXX_DIR=$UNREAL_ENGINE_DIR/Engine/Source/ThirdParty/Unix/LibCxx\n```\n\n----------------------------------------\n\nTITLE: Cloning Cesium Unreal Repositories\nDESCRIPTION: Git commands to clone the Cesium Unreal samples repository and its plugin with submodules.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-osx.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/CesiumGS/cesium-unreal-samples.git\ncd cesium-unreal-samples\nmkdir Plugins\ncd Plugins\ngit clone --recursive https://github.com/CesiumGS/cesium-unreal.git\n```\n\n----------------------------------------\n\nTITLE: Building Release Version of cesium-native\nDESCRIPTION: CMake commands to configure and build a Release version of cesium-native with position independent code enabled.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-linux.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=\"unreal-linux-toolchain.cmake\" -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_BUILD_TYPE=Release\ncmake --build build --target install\n```\n\n----------------------------------------\n\nTITLE: Modifying UnrealBuildTool Version Check\nDESCRIPTION: Code modification in ApplePlatformSDK.Versions.cs to support Xcode 16.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-osx.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nMaxVersion = \"16.9.9\";\n```\n\n----------------------------------------\n\nTITLE: Generating Reference Documentation\nDESCRIPTION: Commands for installing dependencies and generating Doxygen documentation for the project. Requires Doxygen to be installed and available in system path.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run doxygen\n```\n\n----------------------------------------\n\nTITLE: Building cesium-native Debug Configuration\nDESCRIPTION: CMake commands to build debug version of cesium-native libraries.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-osx.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/dev/cesium-unreal-samples/Plugins/cesium-unreal/extern\ncmake -B build -S . -DCMAKE_BUILD_TYPE=Debug\ncmake --build build --target install --parallel 14\n```\n\n----------------------------------------\n\nTITLE: Building cesium-native for iOS\nDESCRIPTION: CMake commands to build and install cesium-native for iOS platform.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-osx.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/dev/cesium-unreal-samples/Plugins/cesium-unreal/extern\ncmake -B build-ios -S . -GXcode -DCMAKE_TOOLCHAIN_FILE=\"unreal-ios-toolchain.cmake\" -DCMAKE_BUILD_TYPE=Release\ncmake --build build-ios --target install --config Release --parallel 14\n```\n\n----------------------------------------\n\nTITLE: Converting Cesium for Unreal Samples to a C++ Project\nDESCRIPTION: Converts the Blueprint-based Cesium for Unreal Samples project to a C++ project by copying the Source directory from the documentation folder of the plugin.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-osx.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/dev/cesium-unreal-samples\ncp -r ./Plugins/cesium-unreal/Documentation/Source .\n```\n\n----------------------------------------\n\nTITLE: Cloning Cesium for Unreal Repositories\nDESCRIPTION: Git commands to clone the cesium-unreal-samples repository and the cesium-unreal plugin with its submodules.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-windows.md#2025-04-22_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\ngit clone https://github.com/CesiumGS/cesium-unreal-samples.git\ncd cesium-unreal-samples\nmkdir Plugins\ncd Plugins\ngit clone --recursive https://github.com/CesiumGS/cesium-unreal.git\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodules for Cesium for Unreal\nDESCRIPTION: Updates the git submodules for the cesium-unreal repository if they weren't initially cloned recursively.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-windows.md#2025-04-22_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Installing Cesium for Unreal Plugin\nDESCRIPTION: Commands to copy the built Cesium for Unreal plugin into the Engine's plugins directory for use in projects.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-linux.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $UNREAL_ENGINE_DIR/Engine/Plugins/Marketplace\ncp -r $CESIUM_FOR_UNREAL_DIR/../packages/CesiumForUnreal $UNREAL_ENGINE_DIR/Engine/Plugins/Marketplace/\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing Git Tags for Cesium Unreal\nDESCRIPTION: Commands to create and push a version tag for cesium-unreal to GitHub. The example shows creating a tag named 'v2.0.0' with the message '2.0.0 release'.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/release-process.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a v2.0.0 -m \"2.0.0 release\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin v2.0.0\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing Git Tags for Cesium Native\nDESCRIPTION: Commands to create and push a version tag for cesium-native to GitHub. The example shows creating a tag named 'v0.2.0' with the message '0.2.0 release'.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/release-process.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a v0.2.0 -m \"0.2.0 release\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Tagging a New Release in Git for Cesium Unreal Samples\nDESCRIPTION: These Git commands create a new annotated tag for the release and push it to the remote repository. The version number should be updated to match the current release.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/release-process.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a v1.10.0 -m \"v1.10.0 release\"\ngit push origin v1.10.0\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodules\nDESCRIPTION: Command to update Git submodules if they were not initially cloned recursively.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-osx.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Converting iOS Crash Logs to Symbolicated Stack Traces\nDESCRIPTION: A series of commands to convert iOS crash logs (.ips files) to readable stack traces. Uses AppleCrashScripts for conversion and Xcode's symbolicatecrash tool for symbolication.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup-osx.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nswift ~/github/AppleCrashScripts/convertFromJSON.swift -i dev-IOS-DebugGame-2025-02-06-204209.ips -o dev-IOS-DebugGame-2025-02-06-204209.crash\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$PATH:/Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/\nexport DEVELOPER_DIR=$(xcode-select --print-path)\nsymbolicatecrash ./dev-IOS-DebugGame-2025-02-06-204209.crash\n```\n\n----------------------------------------\n\nTITLE: Setting Up vcpkg and Adding Subdirectories for Cesium Unreal\nDESCRIPTION: Configures vcpkg for managing external dependencies and adds subdirectories for cesium-native, tidy-html5, and other components. It also sets up MikkTSpace for Android and iOS platforms.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/extern/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(ENV{VCPKG_OVERLAY_PORTS} \"${CMAKE_CURRENT_LIST_DIR}/vcpkg-overlays\")\nset(ENV{VCPKG_OVERLAY_TRIPLETS} \"${CMAKE_CURRENT_LIST_DIR}/vcpkg-overlays/triplets\")\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/cesium-native/cmake/detect-vcpkg-triplet.cmake)\n\nif (NOT VCPKG_TRIPLET)\n    if (DEFINED ENV{VCPKG_TRIPLET})\n        set(VCPKG_TRIPLET \"$ENV{VCPKG_TRIPLET}\")\n    elseif(DETECTED_VCPKG_TRIPLET_ERROR)\n        message(FATAL_ERROR \"${DETECTED_VCPKG_TRIPLET_ERROR}\")\n    else()\n        set(VCPKG_TRIPLET \"${DETECTED_VCPKG_TRIPLET}-unreal\")\n    endif()\nendif()\n\nset(CESIUM_EXCLUDE_INSTALL_HEADERS openssl)\nset(CESIUM_EXCLUDE_INSTALL_STATIC_LIBS openssl)\n\nadd_subdirectory(cesium-native)\n\nif (ANDROID OR IOS)\n    add_library(MikkTSpace MikkTSpace/mikktspace.c)\n    set_target_properties(MikkTSpace PROPERTIES PUBLIC_HEADER \"${CMAKE_CURRENT_SOURCE_DIR}/MikkTSpace/mikktspace.h\")\n    target_include_directories(MikkTSpace PUBLIC MikkTSpace)\n    install(TARGETS MikkTSpace\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/mikktspace\n    )\nendif()\n\noption(BUILD_SHARED_LIB OFF)\noption(SUPPORT_CONSOLE_APP OFF)\nset(LIB_INSTALL_DIR ${CMAKE_INSTALL_LIBDIR})\nadd_subdirectory(tidy-html5)\n\nset_target_properties(cesium-native-tests PROPERTIES EXCLUDE_FROM_ALL 1 EXCLUDE_FROM_DEFAULT_BUILD 1)\n\nadd_subdirectory(swl-variant)\ninstall(DIRECTORY \"${CMAKE_CURRENT_LIST_DIR}/swl-variant/include/\" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n```\n\n----------------------------------------\n\nTITLE: Generating User Guide Table of Contents in Markdown\nDESCRIPTION: This snippet creates a table of contents for the Cesium for Unreal user guide using Markdown syntax. It includes links to specific subpages and external resources.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/Pages/user-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# User Guide {#user-guide}\n\nThis section contains topics that are useful to anyone using Cesium for Unreal. See the [Contributor Guide](#contributor-guide) for information about building, modifying, and contributing to the plugin itself.\n\n> [!note]\n> In addition to the topics below, please see the [tutorials](https://cesium.com/learn/unreal/) on the Cesium web site.\n\n- \\subpage using-prerelease\n- \\subpage v2-upgrade-guide\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies and Running Code Formatter\nDESCRIPTION: Commands for installing node modules and running the clang formatter on source code before committing changes.\nSOURCE: https://github.com/cesiumgs/cesium-unreal/blob/main/Documentation/developer-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm ci\nnpm run format\n```"
  }
]