[
  {
    "owner": "visgl",
    "repo": "react-google-maps",
    "content": "TITLE: Basic Map Integration with APIProvider in React\nDESCRIPTION: Basic example showing how to render a Google Map within an APIProvider container with specified zoom level and center coordinates.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/map.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {APIProvider, Map} from '@vis.gl/react-google-maps';\n\nconst App = () => (\n  <APIProvider apiKey={process.env.GOOGLE_MAPS_API_KEY}>\n    <Map zoom={10} center={{lat: 53.54992, lng: 10.00678}} />\n  </APIProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Marker Instance with useMarkerRef Hook in React Google Maps\nDESCRIPTION: This example shows how to use the useMarkerRef hook to get access to the underlying Google Maps Marker instance. The hook returns a tuple with a ref to attach to the Marker component and the actual marker instance for imperative manipulation.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/guides/interacting-with-google-maps-api.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {\n  APIProvider,\n  Map,\n  Marker,\n  useMarkerRef\n} from '@vis.gl/react-google-maps';\n\nconst App = () => {\n  const [markerRef, marker] = useMarkerRef();\n\n  useEffect(() => {\n    if (!marker) {\n      return;\n    }\n\n    // do something with marker instance here\n  }, [marker]);\n\n  return (\n    <APIProvider apiKey={'Your API key here'}>\n      <Map zoom={12} center={{lat: 53.54992, lng: 10.00678}}>\n        <Marker ref={markerRef} position={{lat: 53.54992, lng: 10.00678}} />\n      </Map>\n    </APIProvider>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Basic Map Setup with Advanced Marker in React\nDESCRIPTION: Example showing how to create a basic map with an advanced marker using the React Google Maps library. Demonstrates the usage of APIProvider and Map components.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AdvancedMarker, APIProvider, Map} from '@vis.gl/react-google-maps';\n\nfunction App() {\n  const position = {lat: 53.54992, lng: 10.00678};\n\n  return (\n    <APIProvider apiKey={'YOUR API KEY HERE'}>\n      <Map defaultCenter={position} defaultZoom={10} mapId=\"DEMO_MAP_ID\">\n        <AdvancedMarker position={position} />\n      </Map>\n    </APIProvider>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Basic AdvancedMarker Usage Examples in React\nDESCRIPTION: Demonstrates three different ways to use the AdvancedMarker component: default red marker, customized green marker with Pin component, and fully customized marker with an image.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/advanced-marker.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AdvancedMarker} from './advanced-marker';\n\n<Map {...mapProps}>\n  {/* red default marker */}\n  <AdvancedMarker position={{lat: 29.5, lng: -81.2}} />\n\n  {/* customized green marker */}\n  <AdvancedMarker position={{lat: 29.5, lng: -81.2}}>\n    <Pin\n      background={'#0f9d58'}\n      borderColor={'#006425'}\n      glyphColor={'#60d98f'}\n    />\n  </AdvancedMarker>\n\n  {/* fully customized marker */}\n  <AdvancedMarker position={{lat: 29.5, lng: -81.2}}>\n    <img src={markerImage} width={32} height={32} />\n  </AdvancedMarker>\n</Map>;\n```\n\n----------------------------------------\n\nTITLE: Accessing Map Instance with useMap Hook in React Google Maps\nDESCRIPTION: This snippet demonstrates how to access the underlying Google Maps instance using the useMap hook. The example wraps a custom component within the APIProvider to give it access to the map instance, allowing direct interaction with the imperative Maps API.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/guides/interacting-with-google-maps-api.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useEffect} from 'react';\nimport {APIProvider, useMap} from '@vis.gl/react-google-maps';\n\nconst MyComponent = () => {\n  const map = useMap();\n\n  useEffect(() => {\n    if (!map) return;\n\n    // here you can interact with the imperative maps API\n  }, [map]);\n\n  return <></>;\n};\n\nconst App = () => (\n  <APIProvider apiKey={'YOUR API KEY HERE'}>\n    <Map /* ... */></Map>\n\n    <MyComponent />\n  </APIProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic React Google Maps Component Implementation\nDESCRIPTION: Minimal example that demonstrates how to render a Google Map in a React application using APIProvider and Map components. It sets up the map with custom styling and configurations.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/get-started.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {APIProvider, Map} from '@vis.gl/react-google-maps';\n\nconst App = () => (\n  <APIProvider apiKey={API_KEY}>\n    <Map\n      style={{width: '100vw', height: '100vh'}}\n      defaultCenter={{lat: 22.54992, lng: 0}}\n      defaultZoom={3}\n      gestureHandling={'greedy'}\n      disableDefaultUI={true}\n    />\n  </APIProvider>\n);\n\nconst root = createRoot(document.querySelector('#app'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom usePlacesService Hook for React Google Maps\nDESCRIPTION: This example demonstrates how to create a custom hook called usePlacesService that encapsulates the logic for loading the Places library and initializing a PlacesService. It extracts reusable functionality from the previous example into a dedicated hook.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/guides/interacting-with-google-maps-api.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction usePlacesService() {\n  const map = useMap();\n  const placesLibrary = useMapsLibrary('places');\n  const [placesService, setPlacesService] = useState(null);\n\n  useEffect(() => {\n    if (!placesLibrary || !map) return;\n\n    setPlacesService(new placesLibrary.PlacesService(map));\n  }, [placesLibrary, map]);\n\n  return placesService;\n}\n\nconst MyComponent = () => {\n  const placesService = usePlacesService();\n\n  useEffect(() => {\n    if (!placesService) return;\n\n    // ... use placesService ...\n  }, [placesService]);\n\n  return <></>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing an Uncontrolled Map with Default Props\nDESCRIPTION: Example of an uncontrolled Map implementation that uses defaultCenter and defaultZoom props, which are only applied when the map is first initialized.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/map.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst UncontrolledMap = () => {\n  return <Map defaultCenter={{lat: 40.7, lng: -74}} defaultZoom={12}></Map>;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Map Camera Changes in React Google Maps\nDESCRIPTION: Example demonstrating how to handle camera change events in a React Google Maps component using the onCameraChanged prop. The handler receives a MapCameraChangedEvent containing details about the camera's new position.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/map.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst MapWithEventHandler = props => {\n  const handleCameraChange = useCallback((ev: MapCameraChangedEvent) => {\n    console.log('camera changed: ', ev.detail);\n  });\n\n  return <Map {...props} onCameraChanged={handleCameraChange}></Map>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Map with Camera State Management\nDESCRIPTION: Example of a controlled Map component that manages camera state and responds to camera change events. The component always reflects the specified camera parameters and updates them when interactions occur.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/map.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MapCameraChangedEvent, MapCameraProps} from '@vis.gl/react-google-maps';\n\nconst INITIAL_CAMERA = {\n  center: {lat: 40.7, lng: -74},\n  zoom: 12\n};\n\nconst ControlledMap = () => {\n  const [cameraProps, setCameraProps] =\n    useState<MapCameraProps>(INITIAL_CAMERA);\n  const handleCameraChange = useCallback((ev: MapCameraChangedEvent) =>\n    setCameraProps(ev.detail)\n  );\n\n  return <Map {...cameraProps} onCameraChanged={handleCameraChange}></Map>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using useMapsLibrary Hook with React and Google Maps API\nDESCRIPTION: Demonstrates how to use the useMapsLibrary hook within a React component to access the Places library of the Google Maps API. It shows the hook usage, component setup, and wrapping with APIProvider.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/hooks/use-maps-library.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = () => {\n  const map = useMap();\n  const placesLib = useMapsLibrary('places');\n\n  useEffect(() => {\n    if (!placesLib || !map) return;\n\n    const svc = new placesLib.PlacesService(map);\n    // ...\n  }, [placesLib, map]);\n\n  // ...\n};\n\n// Make sure you have wrapped the component tree with the APIProvider\nconst App = () => (\n  <APIProvider apiKey={/* ... */}>\n    {/* ... */}\n    <MyComponent />\n  </APIProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Places Library with useMapsLibrary Hook in React Google Maps\nDESCRIPTION: This snippet shows how to use the useMapsLibrary hook to dynamically load the Places library from Google Maps API. It demonstrates creating a PlacesService instance and handling the asynchronous loading pattern.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/guides/interacting-with-google-maps-api.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useMapsLibrary} from '@vis.gl/react-google-maps';\n\nconst MyComponent = () => {\n  const map = useMap();\n\n  // triggers loading the places library and returns the API Object once complete (the\n  // component calling the hook gets automatically re-rendered when this is\n  // the case)\n  const placesLibrary = useMapsLibrary('places');\n\n  const [placesService, setPlacesService] = useState(null);\n\n  useEffect(() => {\n    if (!placesLibrary || !map) return;\n\n    // when placesLibrary is loaded, the library can be accessed via the\n    // placesLibrary API object\n    setPlacesService(new placesLibrary.PlacesService(map));\n  }, [placesLibrary, map]);\n\n  useEffect(() => {\n    if (!placesService) return;\n\n    // ...use placesService...\n  }, [placesService]);\n\n  return <></>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Marker Component in React Google Maps\nDESCRIPTION: Example showing how to use the Marker component within a React application using the @vis.gl/react-google-maps library. Demonstrates basic setup with APIProvider and Map components.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/marker.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {FunctionComponent} from 'react';\nimport {APIProvider, Map, Marker} from '@vis.gl/react-google-maps';\n\nconst App: FunctionComponent<Record<string, unknown>> = () => (\n  <APIProvider apiKey={'Your API key here'}>\n    <Map zoom={12} center={{lat: 53.54992, lng: 10.00678}}>\n      <Marker position={{lat: 53.54992, lng: 10.00678}} />\n    </Map>\n  </APIProvider>\n);\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing React Google Maps in Remix with ClientOnly Wrapper\nDESCRIPTION: Example of implementing a Google Maps component in Remix using remix-utils ClientOnly component to ensure client-side rendering. Includes support for fallback content to prevent layout shifts during loading.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/guides/ssr-and-frameworks.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {APIProvider, Map} from '@vis.gl/react-google-maps';\nimport {ClientOnly} from 'remix-utils/client-only';\n\nexport default function MyMap() {\n  return (\n    <ClientOnly fallback={<MapFallback />}>\n      {() => (\n        <APIProvider apiKey={'...'}>\n          <Map\n            mapId={'bf51a910020fa25a'}\n            defaultZoom={5}\n            defaultCenter={{lat: 53, lng: 10}}\n            gestureHandling={'greedy'}\n            disableDefaultUI={true}\n          />\n        </APIProvider>\n      )}\n    </ClientOnly>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing APIProvider Component in React\nDESCRIPTION: This snippet demonstrates how to use the APIProvider component to wrap your application and provide the Google Maps API key. It's typically placed at the top of your component tree.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/api-provider.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {APIProvider} from '@vis.gl/react-google-maps';\n\nconst App = () => (\n  <APIProvider apiKey={'Your API key here'}>\n    {/* ... any components ... */}\n  </APIProvider>\n);\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: AdvancedMarker with InfoWindow Integration\nDESCRIPTION: Demonstrates how to use the useAdvancedMarkerRef hook to connect an AdvancedMarker with an InfoWindow component.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/advanced-marker.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  AdvancedMarker,\n  InfoWindow,\n  useAdvancedMarkerRef\n} from '@vis.gl/react-google-maps';\n\nconst MarkerWithInfoWindow = props => {\n  const [markerRef, marker] = useAdvancedMarkerRef();\n\n  return (\n    <>\n      <AdvancedMarker position={props.position} ref={markerRef} />\n      <InfoWindow anchor={marker}>Infowindow Content</InfoWindow>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a 3D Globe Component with React and Google Maps\nDESCRIPTION: This code snippet demonstrates how to create a 3D Globe component using the Map3D component with camera controls. It implements a partially controlled component pattern where camera properties can be manipulated programmatically while still responding to user interactions.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/map-3d/README.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useState, useCallback} from 'react';\nimport {Map3D, Map3DCameraProps} from './map-3d';\n\nconst MyGlobe = () => {\n  const [cameraProps, setCameraProps] =\n    useState<Map3DCameraProps>(INITIAL_CAMERA_PROPS);\n  const handleCameraChange = useCallback(props => setCameraProps(props), []);\n\n  return <Map3D {...cameraProps} onCameraChange={handleCameraChange} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Using useApiIsLoaded Hook in React Component\nDESCRIPTION: This snippet demonstrates how to use the useApiIsLoaded hook in a React component. It checks if the Google Maps API is loaded and performs an action when it becomes available.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/hooks/use-api-is-loaded.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useApiIsLoaded} from '@vis.gl/react-google-maps';\n\nconst MyComponent = () => {\n  const apiIsLoaded = useApiIsLoaded();\n\n  useEffect(() => {\n    if (!apiIsLoaded) return;\n\n    // when the maps library is loaded, apiIsLoaded will be true and the API can be\n    // accessed using the global `google.maps` namespace.\n  }, [apiIsLoaded]);\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using useMap Hook with Single Map\nDESCRIPTION: Demonstrates how to use the useMap hook in a React component when there is only a single map within the APIProvider. The hook retrieves the map instance which can be used in side effects or other operations.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/hooks/use-map.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = () => {\n  const map = useMap();\n\n  useEffect(() => {\n    if (!map) return;\n\n    // do something with the map instance\n  }, [map]);\n\n  return <>...</>;\n};\n\nconst App = () => {\n  return (\n    <APIProvider>\n      <Map></Map>\n      <MyComponent />\n    </APIProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Marker with Toggleable InfoWindow in React Google Maps\nDESCRIPTION: A component that implements a marker with an attached InfoWindow that toggles visibility when clicked. It uses useAdvancedMarkerRef to establish the connection between marker and InfoWindow, and handles state synchronization when the InfoWindow is closed.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/info-window.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst MarkerWithInfoWindow = ({position}) => {\n  // `markerRef` and `marker` are needed to establish the connection between\n  // the marker and infowindow (if you're using the Marker component, you\n  // can use the `useMarkerRef` hook instead).\n  const [markerRef, marker] = useAdvancedMarkerRef();\n\n  const [infoWindowShown, setInfoWindowShown] = useState(false);\n\n  // clicking the marker will toggle the infowindow\n  const handleMarkerClick = useCallback(\n    () => setInfoWindowShown(isShown => !isShown),\n    []\n  );\n\n  // if the maps api closes the infowindow, we have to synchronize our state\n  const handleClose = useCallback(() => setInfoWindowShown(false), []);\n\n  return (\n    <>\n      <AdvancedMarker\n        ref={markerRef}\n        position={position}\n        onClick={handleMarkerClick}\n      />\n\n      {infoWindowShown && (\n        <InfoWindow anchor={marker} onClose={handleClose}>\n          <h2>InfoWindow content!</h2>\n          <p>Some arbitrary html to be rendered into the InfoWindow.</p>\n        </InfoWindow>\n      )}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Examples to React Google Maps Website\nDESCRIPTION: Process for adding examples to the React Google Maps website, including steps for examples with and without additional dependencies.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/guides/writing-examples.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nIf you are adding an example with **no additional dependencies**:\n\n1. Create the example page in `./website/src/examples/your-example-id.mdx`\n2. Add the example to `./website/src/examples-sidebar.js`\n3. Create a 400x400 px image for the overview page and place it in\n   `./website/static/images/examples/your-example-id.jpg`\n4. The whole website can be started in dev-mode by running `npm i` and \n   `npm start` in the `./website` directory. The website build can be tested \n   by running `npm run build`.\n\nIf you are adding an example **with additional dependencies**:\n\n1. Create a 400x400 px image for the overview page and place it in `./website/static/images/examples/your-example-id.jpg`\n2. Add the example to `./website/src/examples-sidebar.js` as an [external link](https://docusaurus.io/docs/sidebar/items#sidebar-item-link) to [a CodeSandbox](https://codesandbox.io/docs/learn/devboxes/synced-templates#creating-a-synced-template) based on the title of your new example folder in the `./examples` folder.\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Pin with AdvancedMarker in React Google Maps\nDESCRIPTION: Demonstrates how to create a customized marker using the Pin component within an AdvancedMarker. The example shows setting custom background, glyph color, and border color properties.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/pin.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomizedMarker = () => (\n  <AdvancedMarker position={{lat: 53.54992, lng: 10.00678}}>\n    <Pin background={'#FBBC04'} glyphColor={'#000'} borderColor={'#000'} />\n  </AdvancedMarker>\n);\n```\n\n----------------------------------------\n\nTITLE: Using useMap Hook with Multiple Maps\nDESCRIPTION: Shows how to use the useMap hook when working with multiple Map components in the APIProvider. In this scenario, each Map component requires an explicit ID that must be passed to the useMap hook to retrieve the specific map instance.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/hooks/use-map.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = () => {\n  const map = useMap('one-of-my-maps');\n\n  useEffect(() => {\n    if (!map) return;\n\n    // do something with the map instance\n  }, [map]);\n\n  return <>...</>;\n};\n\nconst App = () => {\n  return (\n    <APIProvider>\n      <Map id={'one-of-my-maps'} />\n      <Map id={'another-map'} />\n      <MyComponent />\n    </APIProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Polyline Component Props Interface Definition\nDESCRIPTION: TypeScript interface for the Polyline component props, extending Google Maps PolylineOptions with additional event handlers and the encodedPath property.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/geometry/README.md#2025-04-16_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ninterface PolylineProps extends google.maps.PolylineOptions {\n  onClick?: (e: google.maps.MapMouseEvent) => void;\n  onDrag?: (e: google.maps.MapMouseEvent) => void;\n  onDragStart?: (e: google.maps.MapMouseEvent) => void;\n  onDragEnd?: (e: google.maps.MapMouseEvent) => void;\n  onMouseOver?: (e: google.maps.MapMouseEvent) => void;\n  onMouseOut?: (e: google.maps.MapMouseEvent) => void;\n  encodedPath?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wrapper Component in TypeScript React\nDESCRIPTION: A TypeScript implementation of a backwards-compatible Wrapper component that mimics the behavior of @googlemaps/react-wrapper using @vis.gl/react-google-maps. The component handles API loading states and provides both callback and render prop patterns for status handling.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/guides/migrating-from-react-wrapper.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {\n  FunctionComponent,\n  PropsWithChildren,\n  ReactNode,\n  useEffect\n} from 'react';\n\nimport {\n  APILoadingStatus,\n  APIProvider,\n  APIProviderProps,\n  useApiLoadingStatus\n} from '@vis.gl/react-google-maps';\n\nconst STATUS_MAP = {\n  [APILoadingStatus.LOADING]: 'LOADING',\n  [APILoadingStatus.LOADED]: 'SUCCESS',\n  [APILoadingStatus.FAILED]: 'FAILURE'\n} as const;\n\ntype WrapperProps = PropsWithChildren<\n  {\n    apiKey: string;\n    callback?: (status: string) => void;\n    render?: (status: string) => ReactNode;\n  } & APIProviderProps\n>;\n\nexport const Wrapper: FunctionComponent<WrapperProps> = ({\n  apiKey,\n  children,\n  render,\n  callback,\n  ...apiProps\n}) => {\n  return (\n    <APIProvider apiKey={apiKey} {...apiProps}>\n      <InnerWrapper render={render}>{children}</InnerWrapper>\n    </APIProvider>\n  );\n};\n\nconst InnerWrapper = ({\n  callback,\n  render,\n  children\n}: PropsWithChildren<Omit<WrapperProps, 'apiKey'>>) => {\n  const status = useApiLoadingStatus();\n  const mappedStatus = STATUS_MAP[status] ?? 'LOADING';\n\n  useEffect(() => {\n    if (callback) callback(mappedStatus);\n  }, [callback, mappedStatus]);\n\n  if (status === APILoadingStatus.LOADED) return children;\n  if (render) return render(mappedStatus);\n\n  return <></>;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering an InfoWindow with Position in React Google Maps\nDESCRIPTION: A minimal example showing how to render an InfoWindow at a specific position on the map. The InfoWindow is initially visible but can be closed by the user, with no way to reopen it.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/info-window.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst MapWithInfoWindow = () => {\n  return (\n    <Map {...mapProps}>\n      <InfoWindow position={infoWindowPosition}>\n        The content of the info window is here.\n      </InfoWindow>\n    </Map>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Marker Component Props Interface Definition\nDESCRIPTION: TypeScript interface definition for MarkerProps, extending google.maps.MarkerOptions with additional event handling properties for click, drag, and mouse events.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/marker.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface MarkerProps extends google.maps.MarkerOptions {\n  onClick?: (e: google.maps.MapMouseEvent) => void;\n  onDrag?: (e: google.maps.MapMouseEvent) => void;\n  onDragStart?: (e: google.maps.MapMouseEvent) => void;\n  onDragEnd?: (e: google.maps.MapMouseEvent) => void;\n  onMouseOver?: (e: google.maps.MapMouseEvent) => void;\n  onMouseOut?: (e: google.maps.MapMouseEvent) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Circle Component with React Google Maps\nDESCRIPTION: Example of how to implement the Circle component on a Google Map, showing basic props for center location and radius.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/geometry/README.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {APIProvider, Map} from '@vis.gl/react-google-maps';\nimport {Circle} from './components/circle'; // import from your local file\n\nconst App = () => (\n  <APIProvider apiKey={'Your API key here'}>\n    <Map defaultZoom={8} defaultCenter={{lat: 53.54992, lng: 10.00678}}>\n      <Circle center={{lat: 53.54992, lng: 10.00678}} radius={15000} />\n    </Map>\n  </APIProvider>\n);\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing React Google Maps in Next.js with Client-Side Rendering\nDESCRIPTION: Example of implementing a Google Maps component in Next.js using the app router. Uses 'use client' directive to ensure client-side only rendering. Component sets up an APIProvider with a Map configuration including zoom, center, and UI options.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/guides/ssr-and-frameworks.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport {APIProvider, Map} from '@vis.gl/react-google-maps';\n\nexport default function MyMap() {\n  return (\n    <div className={styles.container}>\n      <APIProvider apiKey={'...'}>\n        <Map\n          mapId={'bf51a910020fa25a'}\n          defaultZoom={5}\n          defaultCenter={{lat: 53, lng: 10}}\n          gestureHandling={'greedy'}\n          disableDefaultUI={true}\n        />\n      </APIProvider>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Circle Component Props Interface Definition\nDESCRIPTION: TypeScript interface for the Circle component props, extending Google Maps CircleOptions with additional event handler properties.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/geometry/README.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ninterface CircleProps extends google.maps.CircleOptions {\n  onClick?: (e: google.maps.MapMouseEvent) => void;\n  onDrag?: (e: google.maps.MapMouseEvent) => void;\n  onDragStart?: (e: google.maps.MapMouseEvent) => void;\n  onDragEnd?: (e: google.maps.MapMouseEvent) => void;\n  onMouseOver?: (e: google.maps.MapMouseEvent) => void;\n  onMouseOut?: (e: google.maps.MapMouseEvent) => void;\n  onRadiusChanged?: (r: ReturnType<google.maps.Circle['getRadius']>) => void;\n  onCenterChanged?: (p: ReturnType<google.maps.Circle['getCenter']>) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Polygon Component with React Google Maps\nDESCRIPTION: Example of implementing the Polygon component to create shapes (Bermuda triangle) on a Google Map using both direct coordinates and encoded paths.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/geometry/README.md#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {APIProvider, Map} from '@vis.gl/react-google-maps';\nimport {Polygon} from './components/polygon'; // import from your local file\n\nconst App = () => (\n  <APIProvider apiKey={'Your API key here'}>\n    <Map defaultZoom={5} defaultCenter={{lat: 24, lng: -72}}>\n      {/* Draw the Bermuda triangle */}\n      <Polygon\n        paths={[\n          {lat: 25.774, lng: -80.19},\n          {lat: 18.466, lng: -66.118},\n          {lat: 32.321, lng: -64.757}\n        ]}\n      />\n\n      {/* Draw the Bermuda triangle with an encoded path */}\n      <Polygon encodedPaths={['o~h|CnbmhN~irk@_m{tAw`qsAgyhG']} />\n    </Map>\n  </APIProvider>\n);\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: AdvancedMarker Anchor Point Configuration\nDESCRIPTION: Shows how to configure the anchor point of an AdvancedMarker using the anchorPoint property to adjust marker positioning.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/advanced-marker.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AdvancedMarker, AdvancedMarkerAnchorPoint} from '@vis.gl/react-google-maps';\n\n<AdvancedMarker position={...} anchorPoint={AdvancedMarkerAnchorPoint.TOP_LEFT}>\n    ...\n</AdvancedMarker>\n```\n\n----------------------------------------\n\nTITLE: Implementing GoogleMapsOverlay with DeckGL in React\nDESCRIPTION: This snippet shows how to use the GoogleMapsOverlay from @deck.gl/google-maps to render DeckGL content via Maps API WebGlOverlayView. It includes a custom DeckGlOverlay component and its usage within the Map component.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/guides/deckgl-integration.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useEffect, useMemo} from 'react';\nimport {useMap} from '@vis.gl/react-google-maps';\nimport {GoogleMapsOverlay} from '@deck.gl/google-maps';\n\nexport const DeckGlOverlay = ({layers}) => {\n  const deck = useMemo(() => new GoogleMapsOverlay({interleaved: true}), []);\n\n  const map = useMap();\n  useEffect(() => {\n    deck.setMap(map);\n    \n    return () => deck.setMap(null);\n  }, [map]);\n  useEffect(() => deck.setProps({layers}), [layers]);\n\n  // no dom rendered by this component\n  return null;\n};\n\nconst App = () => (\n  <APIProvider apiKey={API_KEY}>\n    <Map {...mapProps}>\n      <DeckGlOverlay layers={deckGlLayers} />\n    </Map>\n  </APIProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Loading React Google Maps Extended Component Library with BrowserOnly in Docusaurus\nDESCRIPTION: This code imports and uses the BrowserOnly component from Docusaurus to conditionally render a React Google Maps example only on the client-side. This approach prevents server-side rendering errors that might occur with browser-dependent libraries.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/extended-component-library.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport BrowserOnly from '@docusaurus/BrowserOnly';\n\n<BrowserOnly>\n  {() => {\n    const App = require('website-examples/extended-component-library/src/app').default;\n\n    return <App />;\n  }}\n</BrowserOnly>\n```\n\n----------------------------------------\n\nTITLE: StaticMapsPath Type Definition for Google Static Maps\nDESCRIPTION: Type definition for path objects used in the Google Static Maps API. Supports an array of coordinates or encoded polylines, with styling options for weight, color, fill color, and geodesic path rendering.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/static-map.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntype StaticMapsPath = {\n  coordinates: Array<google.maps.LatLngLiteral | string> | string;\n  weight?: number;\n  color?: string;\n  fillcolor?: string;\n  geodesic?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing MapControl Component in React Google Maps\nDESCRIPTION: Demonstrates how to use the MapControl component within a React Google Maps application to add custom controls at specific positions on the map. Shows integration with APIProvider and Map components, using the ControlPosition enum for positioning.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/map-control.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  APIProvider,\n  ControlPosition,\n  Map,\n  MapControl\n} from '@vis.gl/react-google-maps';\n\nconst App = () => (\n  <APIProvider apiKey={'...'}>\n    <Map {...mapProps}>\n      <MapControl position={ControlPosition.TOP_LEFT}>\n        .. any component here will be added to the control-containers of the\n        google map instance ..\n      </MapControl>\n    </Map>\n  </APIProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: StaticMapsMarker Type Definition for Google Static Maps\nDESCRIPTION: Type definition for marker objects used in the Google Static Maps API. Includes support for styling markers with color, size, label options and custom icons with anchoring and scaling.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/static-map.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntype StaticMapsMarker = {\n  location: google.maps.LatLngLiteral | string;\n  color?: string;\n  size?: 'tiny' | 'mid' | 'small';\n  label?: string;\n  icon?: string;\n  anchor?: string;\n  scale?: 1 | 2 | 4;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Maps API Key in .env file for React Google Maps\nDESCRIPTION: Example of how to provide a Google Maps API key via an environment variable in a .env file. This is required for the autocomplete examples to work properly.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/autocomplete/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Using Polyline Component with React Google Maps\nDESCRIPTION: Example of implementing the Polyline component to create line-based shapes on a Google Map using both direct path coordinates and encoded paths.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/geometry/README.md#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {APIProvider, Map} from '@vis.gl/react-google-maps';\nimport {Polyline} from './components/polyline'; // import from your local file\n\nconst App = () => (\n  <APIProvider apiKey={'Your API key here'}>\n    <Map defaultZoom={5} defaultCenter={{lat: 24, lng: -72}}>\n      {/* Draw the Bermuda triangle */}\n      <Polyline\n        path={[\n          {lat: 25.774, lng: -80.19},\n          {lat: 18.466, lng: -66.118},\n          {lat: 32.321, lng: -64.757}\n        ]}\n      />\n\n      {/* Draw the Bermuda triangle with an encoded path */}\n      <Polyline encodedPath={'o~h|CnbmhN~irk@_m{tAw`qsAgyhG'} />\n    </Map>\n  </APIProvider>\n);\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Autocomplete Component in React\nDESCRIPTION: This snippet imports the BrowserOnly component from Docusaurus and the Autocomplete App component. It then renders the App component wrapped in BrowserOnly to ensure client-side rendering.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/autocomplete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BrowserOnly from '@docusaurus/BrowserOnly';\nimport App from 'website-examples/autocomplete/src/app';\n\n<BrowserOnly>{() => <App />}</BrowserOnly>\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key in .env File\nDESCRIPTION: Instructions for setting up the required Google Maps API key in a .env file. This environment variable is necessary for the example to connect to Google Maps Platform services.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/extended-component-library/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Integrating DeckGL with Map Component in React\nDESCRIPTION: This snippet demonstrates how to use the Map component as a child of DeckGL. It includes setting up the DeckGL component with necessary props and using the limitTiltRange function for proper integration with Google Maps.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/guides/deckgl-integration.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {limitTiltRange} from '@vis.gl/react-google-maps';\n\nconst App = () => (\n  <APIProvider apiKey={'Your API key here'}>\n    <DeckGL\n      initialViewState={INITIAL_VIEW_STATE}\n      layers={layers}\n      controller={true}\n      onViewStateChange={limitTiltRange}>\n      <Map {...GOOGLE_MAPS_MAP_OPTIONS} />\n    </DeckGL>\n  </APIProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key in .env File\nDESCRIPTION: Creates an environment file to store the Google Maps API key which is required to run the example. The key is stored in the GOOGLE_MAPS_API_KEY environment variable.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/static-map/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Basic StaticMap Component Usage with URL Generation in React\nDESCRIPTION: Example showing how to use the StaticMap component with the createStaticMapsUrl utility function to create and render a Google Static Map. Demonstrates required parameters including apiKey, width, height, center, and zoom.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/static-map.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {StaticMap, createStaticMapsUrl} from '@vis.gl/react-google-maps';\n\nconst App = () => {\n  let staticMapsUrl = createStaticMapsUrl({\n    apiKey: 'YOUR API KEY',\n    width: 512,\n    height: 512,\n    center: {lat: 53.555570296010295, lng: 10.008892744638956},\n    zoom: 15\n  });\n\n  // Recommended url-signing when in a server environment.\n  staticMapsUrl = someServerSigningCode(\n    staticMapsUrl,\n    process.env.MAPS_SIGNING_SECRET\n  );\n\n  return <StaticMap url={staticMapsUrl} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key with Environment Variables\nDESCRIPTION: Instructions for setting up the Google Maps API key as an environment variable in a .env file for local development.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/geometry/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Using the useApiLoadingStatus Hook with React in TypeScript\nDESCRIPTION: Example demonstrating how to use the useApiLoadingStatus hook to monitor the Google Maps API loading status and react to loading failures. The hook returns an APILoadingStatus enum value that can be checked in an effect.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/hooks/use-api-loading-status.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useApiLoadingStatus, APILoadingStatus} from '@vis.gl/react-google-maps';\n\nconst MyComponent = () => {\n  const status = useApiLoadingStatus();\n\n  useEffect(() => {\n    if (status === APILoadingStatus.FAILED) {\n      console.log(':(');\n\n      return;\n    }\n  }, [status]);\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key Environment Variable\nDESCRIPTION: Shows how to set up the Google Maps API key in a .env file for local development. The API key is required for the Google Maps Platform functionality.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/remix/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Using Google Maps Geocoding Library with React Hooks\nDESCRIPTION: Example demonstrating how to use the useMapsLibrary hook to load and utilize the Google Maps Geocoding API without rendering a map. Shows proper handling of asynchronous library loading.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useMap, useMapsLibrary} from '@vis.gl/react-google-maps';\n\nconst MyComponent = () => {\n  // useMapsLibrary loads the geocoding library, it might initially return `null`\n  // if the library hasn't been loaded. Once loaded, it will return the library\n  // object as it would be returned by `await google.maps.importLibrary()`\n  const geocodingLib = useMapsLibrary('geocoding');\n  const geocoder = useMemo(\n    () => geocodingLib && new geocodingLib.Geocoder(),\n    [geocodingLib]\n  );\n\n  useEffect(() => {\n    if (!geocoder) return;\n\n    // now you can use `geocoder.geocode(...)` here\n  }, [geocoder]);\n\n  return <></>;\n};\n\nconst App = () => {\n  return (\n    <APIProvider apiKey={'YOUR API KEY HERE'}>\n      <MyComponent />\n    </APIProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Map Styles Component\nDESCRIPTION: Imports and renders the App component from the change-map-styles example directory. This component likely contains map style customization functionality.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/change-map-styles.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport App from 'website-examples/change-map-styles/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Polygon Component Props Interface Definition\nDESCRIPTION: TypeScript interface for the Polygon component props, extending Google Maps PolygonOptions with additional event handlers and the encodedPaths property.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/geometry/README.md#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ninterface PolygonProps extends google.maps.PolygonOptions {\n  onClick?: (e: google.maps.MapMouseEvent) => void;\n  onDrag?: (e: google.maps.MapMouseEvent) => void;\n  onDragStart?: (e: google.maps.MapMouseEvent) => void;\n  onDragEnd?: (e: google.maps.MapMouseEvent) => void;\n  onMouseOver?: (e: google.maps.MapMouseEvent) => void;\n  onMouseOut?: (e: google.maps.MapMouseEvent) => void;\n  encodedPaths?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Google Maps Geometry App Component\nDESCRIPTION: Imports and displays a geometry example component from the website examples directory.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/geometry.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport App from 'website-examples/geometry/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: URL Signing Implementation with Next.js Server Component\nDESCRIPTION: Example of implementing the URL signing process for Google Static Maps in a Next.js server environment. Uses the @googlemaps/url-signature package to sign static map URLs with a secret key.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/static-map.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'server-only';\n\nimport {signUrl} from '@googlemaps/url-signature';\n\nexport function signStaticMapsUrl(url: string, secret: string): string {\n  return signUrl(url, secret).toString();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering 3D Map Component in React\nDESCRIPTION: This code imports a 3D map component from the website examples directory and renders it directly in the current component. This demonstrates how to integrate a pre-built 3D map visualization.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/map-3d.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport App from 'website-examples/map-3d/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Creating a New Example in React Google Maps\nDESCRIPTION: Steps to create a new example for the React Google Maps library, including copying the template folder, developing the example, and handling dependencies.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/guides/writing-examples.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Start off by copying the `./examples/_template` folder for\n  your example. This will contain the config-files needed and some\n  basic setup that is the same for all examples. The new directory-name will be\n  the \"example id\" and should be in 'kebap-case' (we'll need that id later).\n- Develop the example independently of the library as a standalone\n  mini-application (using `npm install` and `npm start` to start the vite \n  dev-server).\n- If you install additional dependencies, the \"Examples\" section of [the website](https://visgl.github.io/react-google-maps/examples/) will not be able to host your example, but you can still [link to a CodeSandbox](https://codesandbox.io/docs/learn/devboxes/synced-templates#creating-a-synced-template) for the example.\n- Edit the title, description and sourcecode links in the\n  `README.md`, `index.html`, and `./src/control-panel.tsx` files.\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Basic Map Component in React\nDESCRIPTION: Imports a basic map example component from the website examples directory and renders it. This demonstrates the simplest implementation of a Google Map in a React application.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/basic-map.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport App from 'website-examples/basic-map/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Directions Component in React Google Maps\nDESCRIPTION: This code imports a directions example App component and renders it. The App component likely contains the implementation of Google Maps directions functionality.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/directions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport App from 'website-examples/directions/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: StaticMapsLocation Type Definition for React Google Maps\nDESCRIPTION: Type definition for location parameters in the Google Static Maps API. Supports both Google Maps LatLngLiteral objects and string addresses.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/api-reference/components/static-map.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype StaticMapsLocation = google.maps.LatLngLiteral | string;\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Synchronized Maps Component in React\nDESCRIPTION: This code imports an App component from a multiple-maps example directory and renders it. The component likely contains the implementation of synchronized Google Maps where user interactions on one map are reflected on another.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/multiple-maps.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport App from 'website-examples/multiple-maps/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Drawing Component\nDESCRIPTION: Imports BrowserOnly component from Docusaurus and a custom drawing App component, then renders it wrapped in BrowserOnly to ensure client-side only rendering\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/drawing.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport BrowserOnly from '@docusaurus/BrowserOnly';\nimport App from 'website-examples/drawing/src/app';\n\n<BrowserOnly>{() => <App />}</BrowserOnly>\n```\n\n----------------------------------------\n\nTITLE: Fetching Castle Data from OpenStreetMap using Overpass API (Shell)\nDESCRIPTION: This snippet uses wget to fetch castle data from the Overpass API. It queries for nodes, ways, and relations that are historic castles, tourist attractions, have a name, and a Wikidata tag. The result is saved as JSON.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/custom-marker-clustering/data/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nquery=\"[out:json];nwr[historic=castle][tourism=attraction][name][wikidata];convert item ::=::,::geom=geom(),_osm_type=type(); out center;\"\nwget -O castles-osm.json \"http://overpass-api.de/api/interpreter?data=${query}\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Routes API Example in React\nDESCRIPTION: This snippet imports an App component from a specific path and renders it. The App component likely contains the implementation of the Routes API with React Google Maps.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/routes-api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'website-examples/routes-api/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Deck.gl Overlay Example in React\nDESCRIPTION: This snippet imports a Deck.gl overlay example application and renders it as a React component. It demonstrates how to integrate Deck.gl with React Google Maps.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/deckgl-overlay.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'website-examples/deckgl-overlay/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Static Map Component in React\nDESCRIPTION: This code imports a static map example component from a predefined path and renders it directly. The Static Map component would display a non-interactive Google Map image.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/static-map.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport App from 'website-examples/static-map/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Importing Map Control App Component in React\nDESCRIPTION: This code imports an App component from a map control example directory and renders it. This demonstrates how to implement custom map controls in React Google Maps.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/map-control.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport App from 'website-examples/map-control/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Markers and Infowindows Example in React Google Maps\nDESCRIPTION: This code imports a React application example that demonstrates markers and infowindows functionality, then renders it using JSX syntax. The example shows how to implement interactive map markers and information windows in a React Google Maps application.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/markers-and-infowindows.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport App from 'website-examples/markers-and-infowindows/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Advanced Marker Interaction App in React\nDESCRIPTION: This code snippet imports an App component from a specific path and renders it. The App component likely contains the implementation of advanced marker interaction using React Google Maps.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/advanced-marker-interaction.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'website-examples/advanced-marker-interaction/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Advanced Marker Example in React Google Maps\nDESCRIPTION: This code imports the App component from the advanced-marker example directory and renders it within the current page. This pattern is commonly used in documentation sites to showcase working examples.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/advanced-marker.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport App from 'website-examples/advanced-marker/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Heatmap Component in React\nDESCRIPTION: This code snippet imports a heatmap example component from a specific path and renders it within the current component. It demonstrates how to integrate a pre-built heatmap example into a React application.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/heatmap.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'website-examples/heatmap/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for react-google-maps\nDESCRIPTION: Commands for setting up the development environment for @vis.gl/react-google-maps, including checking out the main branch, installing dependencies, and running tests.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/contributing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\nnpm install\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Marker Clustering Example in React Google Maps\nDESCRIPTION: This code imports a marker clustering example application from the website-examples directory and renders it. The App component likely contains the implementation of marker clustering functionality using the React Google Maps library.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/marker-clustering.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport App from 'website-examples/marker-clustering/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Starting Example with Local Library\nDESCRIPTION: Command to start the example application using the local version of the Extended Component Library. This is used for development purposes.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/extended-component-library/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Custom Marker Clustering App Component\nDESCRIPTION: Imports a custom marker clustering example App component from the website examples directory and renders it in the current context.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/custom-marker-clustering.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport App from 'website-examples/custom-marker-clustering/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key in Next.js Environment\nDESCRIPTION: Shows how to set up the Google Maps Platform API key in a .env file for a Next.js application using the NEXT_PUBLIC_GOOGLE_MAPS_API_KEY environment variable.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/nextjs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nNEXT_PUBLIC_GOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server with Local Library\nDESCRIPTION: Command to start the development server using the local version of the library for testing and development.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/deckgl-overlay/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start the development server with local library integration.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/marker-clustering/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Google Maps Example\nDESCRIPTION: This command installs the necessary dependencies for the React Google Maps example. It should be run in the example directory after cloning the repository.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/advanced-marker/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install project dependencies using npm package manager.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/routes-api/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Detailed changelog entries documenting version updates, including bug fixes, new features, and breaking changes for the React Google Maps library from version 0.1.0 to 0.3.3.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.3.3](https://github.com/visgl/react-google-maps/compare/v0.3.2...v0.3.3) (2023-11-13)\n\n### Bug Fixes\n\n* add map camera state tracking ([#84](https://github.com/visgl/react-google-maps/issues/84)) ([1dc1584](https://github.com/visgl/react-google-maps/commit/1dc158436c4ffde60548486da5410b46e989fc5b))\n\n## [0.3.2](https://github.com/visgl/react-google-maps/compare/v0.3.1...v0.3.2) (2023-11-09)\n\n### Bug Fixes\n\n* use moveCamera and useLayoutEffect for faster map-updates ([e493d5f](https://github.com/visgl/react-google-maps/commit/e493d5ffa350efebddd5ef63bb57495954478877))\n\n## [0.3.1](https://github.com/visgl/react-google-maps/compare/v0.3.0...v0.3.1) (2023-11-09)\n\n### Bug Fixes\n\n* update ControlPosition values ([#71](https://github.com/visgl/react-google-maps/issues/71)) ([1dd144a](https://github.com/visgl/react-google-maps/commit/1dd144ac3deac53a77d870ba8cf1e4623786a620))\n```\n\n----------------------------------------\n\nTITLE: Running React Google Maps Example with Local Library\nDESCRIPTION: This command starts the React Google Maps example using the local library. It's used for development purposes when working with a local version of the library.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/change-map-styles/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start the development server with local library integration.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/routes-api/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Version History Table in Markdown\nDESCRIPTION: Structured changelog entries showing version history, features added, and bugs fixed for React Google Maps library\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.9.0] (2024-04-18)\n- Features:\n  - Better handling for missing map configuration\n- Bug Fixes:\n  - Correct spelling of JavaScript in docs\n  - Omit map prop from markers\n\n## [0.8.3] (2024-04-04)\n- Bug Fixes:\n  - API-loader callback on repeat load calls\n  - Map controls crashing with invalid key\n\n## [0.8.2] (2024-03-29)\n- Bug Fixes:\n  - Memoize context-values to avoid re-renders\n\n## [0.8.1] (2024-03-26)\n- Bug Fixes:\n  - InfoWindow.shouldFocus fix for false value\n```\n\n----------------------------------------\n\nTITLE: Running React Google Maps Example with Local Library\nDESCRIPTION: This command starts the React Google Maps example using the local library. It's used for development and testing of local changes to the library.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/advanced-marker-interaction/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server with Local Library\nDESCRIPTION: Command to start the development server using local library files for development and testing purposes.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/remix/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Installed Package\nDESCRIPTION: Command to start the development server using the installed @vis.gl/react-google-maps package version.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/remix/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running the Example with Local Library\nDESCRIPTION: Command to start the example using the local library. This is used for development and testing purposes when working with the source code directly.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/directions/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Maps API Key in .env file\nDESCRIPTION: Creates an environment variable file to store the Google Maps API key, which is required for the examples to work.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/get-started.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGOOGLE_MAPS_API_KEY=<your API key here>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Google Maps Example\nDESCRIPTION: Command to install the necessary dependencies for the React Google Maps autocomplete examples.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/autocomplete/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Google Maps Directions Example\nDESCRIPTION: Command to install all required dependencies for the Google Maps Directions example. Run this in the example directory before starting the application.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/directions/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server with Local Library Files\nDESCRIPTION: Command to start the Next.js development server using the local library files for @vis.gl/react-google-maps instead of the installed package.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/nextjs/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for react-google-maps Example\nDESCRIPTION: This command installs the necessary dependencies for the react-google-maps example project. It should be run in the example directory to set up the project environment.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/react-wrapper-migration/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing @vis.gl/react-google-maps with npm\nDESCRIPTION: Command to install the React Google Maps library using npm package manager.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/get-started.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vis.gl/react-google-maps\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Google Maps Example\nDESCRIPTION: Command to install necessary npm dependencies for the example project.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/multiple-maps/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing @vis.gl/react-google-maps with npm\nDESCRIPTION: Command for installing the React Google Maps library using npm package manager.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @vis.gl/react-google-maps\n```\n\n----------------------------------------\n\nTITLE: Running react-google-maps Example with Local Library\nDESCRIPTION: This command starts the react-google-maps example using the local library. It's used for development and testing purposes when working with a local version of the library.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/react-wrapper-migration/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Installing @vis.gl/react-google-maps with yarn\nDESCRIPTION: Command for installing the React Google Maps library using yarn package manager.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @vis.gl/react-google-maps\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start the example application using the local library version.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/markers-and-infowindows/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Starting Regular Next.js Development Server\nDESCRIPTION: Command to start the standard Next.js development server that uses the installed files for the @vis.gl/react-google-maps package.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/nextjs/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Google Maps Example\nDESCRIPTION: This command installs the necessary dependencies for the heatmap example project.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/heatmap/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running React Google Maps Example with Local Library\nDESCRIPTION: This command starts the heatmap example using the local library. It's used for development purposes.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/heatmap/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Rendering ExamplesIndex Component with Dynamic Thumbnail Generation in React JSX\nDESCRIPTION: Imports and renders the ExamplesIndex component with a function that generates thumbnail paths dynamically based on item properties. The function uses either the docId or a kebab-cased version of the label to construct the image path.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/website/src/examples/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport {ExamplesIndex} from '../components';\nimport {toKebapCase} from '../utils/to-kebap-case';\n\n<ExamplesIndex\n  getThumbnail={item =>\n    `/images/examples/${item.docId || toKebapCase(item.label)}.jpg`\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key in .env File\nDESCRIPTION: Instructions for setting up the Google Maps API key as an environment variable in a .env file. This is required to run the example locally.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/custom-marker-clustering/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Setting up API Key Environment Variable for Google Maps\nDESCRIPTION: Creates an environment variable file to store the Google Maps API key. This file should be named .env and placed in the example directory, containing the API key required for the Google Maps Platform.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/directions/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key in .env File for React Google Maps Example\nDESCRIPTION: This snippet shows how to set up the Google Maps API key in a .env file for the React Google Maps example. The API key is crucial for the functioning of the Google Maps Platform in the application.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/advanced-marker-interaction/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key in .env File for React Google Maps\nDESCRIPTION: This snippet shows how to set up the Google Maps API key in a .env file for use with the React Google Maps example. The API key is crucial for the functionality of the map component.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/change-map-styles/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key in .env File\nDESCRIPTION: This snippet shows how to set up the Google Maps API key in a .env file. The API key is crucial for the example to function and must be obtained from the Google Maps Platform.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/map-control/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File for Google Maps API Key\nDESCRIPTION: This snippet shows how to create a .env file to store the Google Maps API key. The API key is required to run the example locally.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/heatmap/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Google Maps API Key in Environment File\nDESCRIPTION: Creates an environment file to store the Google Maps Platform API key required for running the example locally.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/multiple-maps/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Google Maps API\nDESCRIPTION: Configuration of Google Maps API key using a .env file for local development.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/marker-clustering/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key Environment Variable\nDESCRIPTION: Creates an environment file to store the Google Maps API key required for running the example application.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/markers-and-infowindows/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key in .env File\nDESCRIPTION: Shows how to set up the Google Maps API key in a .env file for local development. The API key is essential for the example to function properly.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/drawing/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key in Shell\nDESCRIPTION: Creates a .env file to store the Google Maps API key as an environment variable. This is required for running the example locally.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/homepage-header/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key in .env File\nDESCRIPTION: This snippet shows how to set up the Google Maps API key in a .env file. The API key is required to run the example locally and should be provided as an environment variable.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/advanced-marker/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite for react-google-maps\nDESCRIPTION: Commands for running the full test suite or just the unit tests for the react-google-maps project.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/contributing.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:unit\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Maps API Key in Environment File\nDESCRIPTION: Instructions for storing your Google Maps Platform API key in a .env file to be used by the application. The API key is essential for the Google Maps functionality to work.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/_template/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Google Maps API Key in Environment\nDESCRIPTION: Configuration example showing how to set up the Google Maps API key in a .env file for local development.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/routes-api/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Google Maps API Key Environment Variable\nDESCRIPTION: Creates an environment variable file for storing the Google Maps API key required for map functionality.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/basic-map/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key Environment File\nDESCRIPTION: Creates an environment file to store the Google Maps Platform API key required for the application to function.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/deckgl-overlay/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Google Maps API Key in Environment Variables\nDESCRIPTION: This snippet shows how to configure the Google Maps API key for the application by creating an .env file in the example directory. The API key is required for the Map3D component to function properly.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/map-3d/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API Key in .env File for react-google-maps\nDESCRIPTION: This snippet shows how to set up the Google Maps API key in a .env file for use with the react-google-maps library. The API key is crucial for authenticating and accessing Google Maps Platform services.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/react-wrapper-migration/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_MAPS_API_KEY=\"<YOUR API KEY HERE>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Google Maps Example\nDESCRIPTION: This command installs the necessary dependencies for the React Google Maps example. It should be run in the example directory after cloning the repository.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/advanced-marker-interaction/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for the Example\nDESCRIPTION: Command to install the required dependencies for the custom marker clustering example. Run this in the example directory to set up the project.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/custom-marker-clustering/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Google Maps Example\nDESCRIPTION: This command installs the necessary dependencies for the React Google Maps example project. It should be run in the example directory before starting the application.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/change-map-styles/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Google Maps Example\nDESCRIPTION: Command to install all required npm dependencies for the Extended Component Library example project.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/extended-component-library/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for the Example\nDESCRIPTION: Command to install all required dependencies for the React Google Maps Static Map example.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/static-map/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Google Maps Example\nDESCRIPTION: Installs the necessary dependencies for the React Google Maps example project using npm.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/homepage-header/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Google Maps Overlay Example\nDESCRIPTION: Command to install all required npm dependencies for the example project.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/deckgl-overlay/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Google Maps Example\nDESCRIPTION: Command to install required dependencies for the geometry example project.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/geometry/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Local Development\nDESCRIPTION: Command to install required npm packages for the example project.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/marker-clustering/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing @vis.gl/react-google-maps with yarn\nDESCRIPTION: Command to install the React Google Maps library using yarn package manager.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/docs/get-started.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @vis.gl/react-google-maps\n```\n\n----------------------------------------\n\nTITLE: Running React Google Maps Example with Local Library\nDESCRIPTION: This command starts the React Google Maps example using the local library. It's used for development purposes when working with the local version of the library.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/advanced-marker/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Starting React Google Maps Example with Local Library\nDESCRIPTION: Command to start the example using the local library version, used for development purposes.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/multiple-maps/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Running React Google Maps Example with Local Library\nDESCRIPTION: This command starts the example using the local library. It's used for development and testing of local changes to the React Google Maps library.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/map-control/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Starting the React Google Maps Example with Local Library\nDESCRIPTION: Command to start the example application using the local library configuration.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/geometry/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Running the React Google Maps Example with Local Library\nDESCRIPTION: Command to start the example using the local version of the library, which is useful for development and testing changes to the react-google-maps library.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/_template/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Running the Example Application with Local Library\nDESCRIPTION: These shell commands demonstrate how to set up and run the 3D Maps example application. The commands include installing dependencies and starting the application with the local library for development purposes.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/map-3d/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Transforming OpenStreetMap Data to GeoJSON using jq (Shell)\nDESCRIPTION: This snippet uses jq to transform the fetched OpenStreetMap data into a proper GeoJSON format. It creates a FeatureCollection, mapping each element to a Feature with specific properties. The result is saved as castles.json.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/custom-marker-clustering/data/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njq '{\n  type: \"FeatureCollection\",\n  features: .elements | map({\n    type:\"Feature\",\n    id: .tags.wikidata,\n    geometry: .geometry,\n    properties: {\n      name: (.tags[\"name:en\"] // .tags.name),\n      wikipedia:.tags.wikipedia,\n      wikidata:.tags.wikidata\n    }\n  })\n}' \\\n  < castles-osm.json \\\n  > castles.json\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Google Maps Example\nDESCRIPTION: Command to install necessary npm dependencies for the example project.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/basic-map/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Google Maps Example\nDESCRIPTION: Command to install the necessary npm packages for the example project. This should be run from within the example directory.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/_template/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Example Dependencies\nDESCRIPTION: Command to install all necessary dependencies for the example project.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/markers-and-infowindows/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Google Maps Example\nDESCRIPTION: Command to install the necessary dependencies for the drawing tools example project using npm.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/drawing/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Google Maps Example\nDESCRIPTION: This command installs the necessary dependencies for the custom map control example. It should be run in the example directory after cloning the repository.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/map-control/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting React Google Maps Development Server\nDESCRIPTION: Command to start the development server with local library integration.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/basic-map/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Starting React Google Maps Example with Local Library\nDESCRIPTION: Command to start the example application using the local library instead of the published version. Used for development and testing.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/autocomplete/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Running the Example with Local Library\nDESCRIPTION: Command to start the example using the local version of the React Google Maps library, useful for development and testing.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/static-map/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Running React Google Maps Example with Local Library\nDESCRIPTION: Command to start the example application using the local library version of React Google Maps.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/drawing/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Running the Example with Local Library\nDESCRIPTION: Command to start the example using the local library. This is used for development and testing with the local version of @vis.gl/react-google-maps.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/custom-marker-clustering/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Starting React Google Maps Example with Local Library\nDESCRIPTION: Starts the React Google Maps example using the local library version, which is useful for development and testing.\nSOURCE: https://github.com/visgl/react-google-maps/blob/main/examples/homepage-header/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start-local\n```"
  }
]