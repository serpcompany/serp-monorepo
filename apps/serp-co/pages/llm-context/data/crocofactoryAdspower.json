[
  {
    "owner": "crocofactory",
    "repo": "adspower",
    "content": "TITLE: Installing AdsPower Package\nDESCRIPTION: Instructions for installing the AdsPower package using pip. Shows the basic installation command as well as how to install with optional dependencies for Selenium or Playwright integration.\nSOURCE: https://github.com/crocofactory/adspower/blob/main/README.md#2025-04-19_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\npip install adspower\n```\n\nLANGUAGE: sh\nCODE:\n```\npip install adspower[playwright]\n```\n\nLANGUAGE: sh\nCODE:\n```\npip install adspower[selenium]\n```\n\n----------------------------------------\n\nTITLE: Creating Groups and Profiles with Synchronous API in AdsPower\nDESCRIPTION: Demonstrates how to create a group and a profile using the synchronous API. This snippet shows how to initialize the basic structure needed for AdsPower automation.\nSOURCE: https://github.com/crocofactory/adspower/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom adspower.sync_api import Group, ProfileAPI\ngroup = Group.create(name='my_group', remark='The best group ever')\n\nprofile_api = ProfileAPI.create(group=group)  \nprint(f'Profile {profile_api.name} was created in group {group.name}')\n```\n\n----------------------------------------\n\nTITLE: Browser Automation with Selenium in AdsPower\nDESCRIPTION: Shows how to use AdsPower with Selenium for browser automation. This example demonstrates creating a profile in a specific group and opening a browser session using the context manager pattern.\nSOURCE: https://github.com/crocofactory/adspower/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom adspower.sync_api.selenium import Profile, Group\nmy_group = Group.query(name='my_group')[0]\nprofile = Profile.create(group=my_group, name='my_profile')\n\nwith profile as browser:\n   browser.get('https://github.com/blnkoff/adspower')\n```\n\n----------------------------------------\n\nTITLE: Browser Automation with Playwright in AdsPower (Async)\nDESCRIPTION: Demonstrates asynchronous browser automation using Playwright with AdsPower. Shows how to create a profile and open a browser session within an async context manager.\nSOURCE: https://github.com/crocofactory/adspower/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom adspower.async_api.playwright import Profile, Group\n\nasync def main() -> None:\n    my_group = (await Group.query(name='my_group'))[0]\n    profile = await Profile.create(group=my_group, name='my_profile')\n    \n    async with profile as browser:\n       page = browser.pages[0]\n       await page.goto('https://github.com/blnkoff/adspower')\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy and Fingerprint in AdsPower\nDESCRIPTION: Demonstrates how to configure proxy settings and browser fingerprints when creating a profile. This allows for fine-grained control over browser identification and connectivity.\nSOURCE: https://github.com/crocofactory/adspower/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom adspower.sync_api.playwright import Profile, Group\nfrom adspower import ProxyConfig, FingerprintConfig\n\nproxy = ProxyConfig(\n    soft='other',\n    type='http',\n    host='xx.xx.x.xx',\n    port=1000,\n    user='username',\n    password='password'\n)\n\nfingerprint = FingerprintConfig(\n    ua='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.112 Safari/537.36'\n)\n\ngroup = Group.query(name='my_group')[0]\nprofile = Profile.create(group=group, proxy_config=proxy, name='my_profile', fingerprint_config=fingerprint)\n```\n\n----------------------------------------\n\nTITLE: Manual Browser Control in AdsPower\nDESCRIPTION: Shows how to manually control the browser creation process without using a context manager. This approach allows for more customization of browser behavior such as disabling IP tab or running in headless mode.\nSOURCE: https://github.com/crocofactory/adspower/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom adspower.sync_api.selenium import Profile, Group\n\nmy_group = Group.query(name='my_group')[0]\nprofile = Profile.create(group=my_group, name='my_profile')\nbrowser = profile.get_browser(ip_tab=False, headless=True, disable_password_filling=True)\nbrowser.get('https://github.com/blnkoff/adspower')\nprofile.quit()\n```\n\n----------------------------------------\n\nTITLE: Creating Anonymous Profiles in AdsPower\nDESCRIPTION: Demonstrates how to create and use an anonymous profile that gets deleted automatically after use. This is useful for temporary or one-time browser sessions.\nSOURCE: https://github.com/crocofactory/adspower/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom adspower.async_api.playwright import Profile, Group\n\nasync def main() -> None:\n    my_group = (await Group.query(name='my_group'))[0]\n    profile = await Profile.anonymous(group=my_group)\n\n    async with profile as browser:\n        page = browser.pages[0]\n        await page.goto('https://www.google.com')\n```\n\n----------------------------------------\n\nTITLE: Using Extension Categories in AdsPower\nDESCRIPTION: Shows how to query for an extension category and use it when creating a profile. Extension categories help organize browser extensions for different profile types.\nSOURCE: https://github.com/crocofactory/adspower/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom adspower.sync_api.playwright import Profile, Category, Group\n\ncategory = Category.query(name='my_category')[0]\ngroup = Group.query(name='my_group')[0]\n\nprofile = Profile.create(group=group, category=category)\n```\n\n----------------------------------------\n\nTITLE: Converting AdsPower Objects to Dictionaries\nDESCRIPTION: Shows how to convert an AdsPower API object to a dictionary representation. This is useful for serialization or when you need to process the object's data in a different format.\nSOURCE: https://github.com/crocofactory/adspower/blob/main/README.md#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom adspower.sync_api.playwright import Category\n\ncategory = Category.query(name='my_category')[0]\nprint(category.to_dict())\n```\n\n----------------------------------------\n\nTITLE: Comparing AdsPower API Objects\nDESCRIPTION: Demonstrates how AdsPower API objects can be compared for equality. This is useful for verifying that objects retrieved from different methods reference the same entity.\nSOURCE: https://github.com/crocofactory/adspower/blob/main/README.md#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom adspower.sync_api.playwright import Profile, Group\n\ngroup = Group.query(name='my_group')[0]\nprofile_created = Profile.create(group=group)\n\nprofile_queried = Profile.query(id_=profile_created.id)\nprint(profile_queried == profile_created)\n```\n\n----------------------------------------\n\nTITLE: String Representation of Category Objects in AdsPower\nDESCRIPTION: Shows how AdsPower API entities like Category have string representations for easy debugging and inspection. The example demonstrates printing a category object.\nSOURCE: https://github.com/crocofactory/adspower/blob/main/README.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom adspower.sync_api.playwright import Category\n\ncategory = Category.query(name='my_category')[0]\nprint(category)\n```"
  }
]