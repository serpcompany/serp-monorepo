[
  {
    "owner": "pytest-dev",
    "repo": "pytest-bdd",
    "content": "TITLE: Implementing BDD steps in Python with pytest-bdd\nDESCRIPTION: Python code implementing the steps defined in the Gherkin feature file using pytest-bdd decorators.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# content of test_publish_article.py\n\nfrom pytest_bdd import scenario, given, when, then\n\n@scenario('publish_article.feature', 'Publishing the article')\ndef test_publish():\n    pass\n\n\n@given(\"I'm an author user\")\ndef author_user(auth, author):\n    auth['user'] = author.user\n\n\n@given(\"I have an article\", target_fixture=\"article\")\ndef article(author):\n    return create_test_article(author=author)\n\n\n@when(\"I go to the article page\")\ndef go_to_article(article, browser):\n    browser.visit(urljoin(browser.url, '/manage/articles/{0}/'.format(article.id)))\n\n\n@when(\"I press the publish button\")\ndef publish_article(browser):\n    browser.find_by_css('button[name=publish]').first.click()\n\n\n@then(\"I should not see the error message\")\ndef no_error_message(browser):\n    with pytest.raises(ElementDoesNotExist):\n        browser.find_by_css('.message.error').first\n\n\n@then(\"the article should be published\")\ndef article_is_published(article):\n    article.refresh()  # Refresh the object in the SQLAlchemy session\n    assert article.is_published\n```\n\n----------------------------------------\n\nTITLE: Automatic Scenario Binding with scenarios() Helper\nDESCRIPTION: Shows how to automatically bind all scenarios from feature files using the scenarios() helper function. This avoids manually binding each scenario with the @scenario decorator, while still allowing for selective manual binding when needed.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_bdd import scenarios\n\n# assume 'features' subfolder is in this file's directory\nscenarios('features')\n```\n\n----------------------------------------\n\nTITLE: Scenario Outline with Multiple Example Tables and Tags\nDESCRIPTION: Demonstrates using multiple example tables in a scenario outline with tags to differentiate between test conditions (positive/negative). This allows for running specific subsets of examples by filtering on tags during test execution.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_19\n\nLANGUAGE: gherkin\nCODE:\n```\n# content of scenario_outline.feature\n\nFeature: Scenario outlines with multiple examples tables\n    Scenario Outline: Outlined with multiple example tables\n        Given there are <start> cucumbers\n        When I eat <eat> cucumbers\n        Then I should have <left> cucumbers\n\n        @positive\n        Examples: Positive results\n            | start | eat | left |\n            |  12   |  5  |  7   |\n            |  5    |  4  |  1   |\n\n        @negative\n        Examples: Impossible negative results\n            | start | eat | left |\n            |  3    |  9  |  -6  |\n            |  1    |  4  |  -3  |\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_bdd import scenarios, given, when, then, parsers\n\n\nscenarios(\"scenario_outline.feature\")\n\n\n@given(parsers.parse(\"there are {start:d} cucumbers\"), target_fixture=\"cucumbers\")\ndef given_cucumbers(start):\n    return {\"start\": start, \"eat\": 0}\n\n\n@when(parsers.parse(\"I eat {eat:d} cucumbers\"))\ndef eat_cucumbers(cucumbers, eat):\n    cucumbers[\"eat\"] += eat\n\n\n@then(parsers.parse(\"I should have {left:d} cucumbers\"))\ndef should_have_left_cucumbers(cucumbers, left):\n    assert cucumbers[\"start\"] - cucumbers[\"eat\"] == left\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest -k \"positive\"\n```\n\n----------------------------------------\n\nTITLE: Defining a feature scenario in Gherkin\nDESCRIPTION: Example of a Gherkin feature file describing a blog publishing scenario.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\n# content of publish_article.feature\n\nFeature: Blog\n    A site where you can publish your articles.\n\n    Scenario: Publishing the article\n        Given I'm an author user\n        And I have an article\n\n        When I go to the article page\n        And I press the publish button\n\n        Then I should not see the error message\n        And the article should be published\n```\n\n----------------------------------------\n\nTITLE: Basic Scenario Outline with Examples Table\nDESCRIPTION: Implements a scenario outline with an examples table to parameterize tests. The feature file defines variable templates with angular brackets, and the examples table provides concrete values for each scenario execution.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_17\n\nLANGUAGE: gherkin\nCODE:\n```\n# content of scenario_outlines.feature\n\nFeature: Scenario outlines\n    Scenario Outline: Outlined given, when, then\n        Given there are <start> cucumbers\n        When I eat <eat> cucumbers\n        Then I should have <left> cucumbers\n\n        Examples:\n        | start | eat | left |\n        |  12   |  5  |  7   |\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_bdd import scenarios, given, when, then, parsers\n\n\nscenarios(\"scenario_outlines.feature\")\n\n\n@given(parsers.parse(\"there are {start:d} cucumbers\"), target_fixture=\"cucumbers\")\ndef given_cucumbers(start):\n    return {\"start\": start, \"eat\": 0}\n\n\n@when(parsers.parse(\"I eat {eat:d} cucumbers\"))\ndef eat_cucumbers(cucumbers, eat):\n    cucumbers[\"eat\"] += eat\n\n\n@then(parsers.parse(\"I should have {left:d} cucumbers\"))\ndef should_have_left_cucumbers(cucumbers, left):\n    assert cucumbers[\"start\"] - cucumbers[\"eat\"] == left\n```\n\n----------------------------------------\n\nTITLE: Working with Datatables in Gherkin and Python\nDESCRIPTION: Demonstrates how to use datatables in Gherkin scenarios and access them in Python step definitions. The example shows a feature for managing user accounts with multiple datatables and corresponding Python code to handle the data.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_22\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Manage user accounts\n\n  Scenario: Creating a new user with roles and permissions\n    Given the following user details:\n      | name  | email             | age |\n      | John  | john@example.com  | 30  |\n      | Alice | alice@example.com | 25  |\n\n    When each user is assigned the following roles:\n      | Admin       | Full access to the system |\n      | Contributor | Can add content           |\n\n    And the page is saved\n\n    Then the user should have the following permissions:\n      | permission     | allowed |\n      | view dashboard | true    |\n      | edit content   | true    |\n      | delete content | false   |\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_bdd import given, when, then\n\n\n@given(\"the following user details:\", target_fixture=\"users\")\ndef _(datatable):\n    users = []\n    for row in datatable[1:]:\n        users.append(row)\n\n    print(users)\n    return users\n\n\n@when(\"each user is assigned the following roles:\")\ndef _(datatable, users):\n    roles = datatable\n    for user in users:\n        for role_row in datatable:\n            assign_role(user, role_row)\n\n\n@when(\"the page is saved\")\ndef _():\n    save_page()\n\n\n@then(\"the user should have the following permissions:\")\ndef _(datatable, users):\n    expected_permissions = []\n    for row in datatable[1:]:\n        expected_permissions.append(row)\n\n    assert users_have_correct_permissions(users, expected_permissions)\n```\n\n----------------------------------------\n\nTITLE: Overriding Fixtures via Target Fixture Parameter in pytest-bdd\nDESCRIPTION: Example showing how to override existing fixtures using the 'target_fixture' parameter in the @given decorator. This allows for imperatively changing fixture values only for specific tests while leaving them unchanged for others.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_bdd import given\n\n@pytest.fixture\ndef foo():\n    return \"foo\"\n\n\n@given(\"I have injecting given\", target_fixture=\"foo\")\ndef injecting_given():\n    return \"injected foo\"\n\n\n@then('foo should be \"injected foo\"')\ndef foo_is_foo(foo):\n    assert foo == 'injected foo'\n```\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Target fixture\n    Scenario: Test given fixture injection\n        Given I have injecting given\n        Then foo should be \"injected foo\"\n```\n\n----------------------------------------\n\nTITLE: Using target_fixture in When Steps for HTTP Request Testing\nDESCRIPTION: Demonstrates using the 'target_fixture' parameter in @when steps for HTTP request testing. This allows the When step to provide a fixture containing the HTTP response that can be used in Then steps for assertion.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# content of test_blog.py\n\nfrom pytest_bdd import scenarios, given, when, then\n\nfrom my_app.models import Article\n\nscenarios(\"blog.feature\")\n\n\n@given(\"there is an article\", target_fixture=\"article\")\ndef there_is_an_article():\n    return Article()\n\n\n@when(\"I request the deletion of the article\", target_fixture=\"request_result\")\ndef there_should_be_a_new_article(article, http_client):\n    return http_client.delete(f\"/articles/{article.uid}\")\n\n\n@then(\"the request should be successful\")\ndef article_is_published(request_result):\n    assert request_result.status_code == 200\n```\n\nLANGUAGE: gherkin\nCODE:\n```\n# content of blog.feature\n\nFeature: Blog\n    Scenario: Deleting the article\n        Given there is an article\n\n        When I request the deletion of the article\n\n        Then the request should be successful\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Step Parser in pytest-bdd\nDESCRIPTION: Example of implementing a custom step parser with regex pattern substitution. The parser replaces '%parameter%' patterns with regex capture groups and provides methods to match and extract arguments from step definitions.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom pytest_bdd import given, parsers\n\n\nclass MyParser(parsers.StepParser):\n    \"\"\"Custom parser.\"\"\"\n\n    def __init__(self, name, **kwargs):\n        \"\"\"Compile regex.\"\"\"\n        super().__init__(name)\n        self.regex = re.compile(re.sub(\"%(.+)%\", \"(?P<\\1>.+)\", self.name), **kwargs)\n\n    def parse_arguments(self, name):\n        \"\"\"Get step arguments.\n\n        :return: `dict` of step arguments\n        \"\"\"\n        return self.regex.match(name).groupdict()\n\n    def is_matching(self, name):\n        \"\"\"Match given name with the step name.\"\"\"\n        return bool(self.regex.match(name))\n\n\n@given(parsers.parse(\"there are %start% cucumbers\"), target_fixture=\"cucumbers\")\ndef given_cucumbers(start):\n    return {\"start\": start, \"eat\": 0}\n```\n\n----------------------------------------\n\nTITLE: Implementing step aliases in Python\nDESCRIPTION: Example of using multiple decorators to create step aliases for better readability.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@given(\"I have an article\")\n@given(\"there's an article\")\ndef article(author, target_fixture=\"article\"):\n    return create_test_article(author=author)\n```\n\n----------------------------------------\n\nTITLE: Combining Manual and Automatic Scenario Binding\nDESCRIPTION: Shows how to manually bind specific scenarios while letting the rest be bound automatically. The manual binding must be done before calling the scenarios() helper function to prevent it from being overridden.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_bdd import scenario, scenarios\n\n@scenario('features/some.feature', 'Test something')\ndef test_something():\n    pass\n\n# assume 'features' subfolder is in this file's directory\nscenarios('features')\n```\n\n----------------------------------------\n\nTITLE: Pytest-BDD Test File for Running Wallet Scenarios\nDESCRIPTION: A Python test file that imports wallet fixtures and step definitions, then executes the scenarios defined in the Gherkin feature file using pytest-bdd.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n# contents of test_wallet.py\n\nfrom pytest_factoryboy import scenarios\n\nfrom wallet_factory import *  # import the registered fixtures \"wallet\" and \"second_wallet\"\nfrom wallet_steps import *  # import all the step definitions into this test file\n\nscenarios(\"wallet.feature\")\n```\n\n----------------------------------------\n\nTITLE: Gherkin Feature Definition for Wallet Testing\nDESCRIPTION: A Gherkin feature file that defines scenarios for testing wallet functionality with different currencies. It verifies that wallet amounts remain constant across different wallet instances.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_36\n\nLANGUAGE: gherkin\nCODE:\n```\n# contents of wallet.feature\nFeature: A feature\n\n    Scenario: Wallet EUR amount stays constant\n        Given I have 10 EUR in my wallet\n        And I have a wallet\n        Then I should have 10 EUR in my wallet\n\n    Scenario: Second wallet JPY amount stays constant\n        Given I have 100 JPY in my second wallet\n        And I have a second wallet\n        Then I should have 100 JPY in my second wallet\n```\n\n----------------------------------------\n\nTITLE: Using Docstrings in Gherkin and Python\nDESCRIPTION: Explains how to use and access docstrings in Gherkin scenarios and Python step definitions. The example demonstrates various ways of including docstrings in Gherkin steps and how they are passed to the corresponding Python functions.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_23\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Docstring\n\n  Scenario: Step with docstrings\n    Given some steps will have docstrings\n\n    Then a step has a docstring\n    \"\"\"\n    This is a docstring\n    on two lines\n    \"\"\"\n\n    And a step provides a docstring with lower indentation\n    \"\"\"\nThis is a docstring\n    \"\"\"\n\n    And this step has no docstring\n\n    And this step has a greater indentation\n    \"\"\"\n        This is a docstring\n    \"\"\"\n\n    And this step has no docstring\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_bdd import given, then\n\n\n@given(\"some steps will have docstrings\")\ndef _():\n    pass\n\n@then(\"a step has a docstring\")\ndef _(docstring):\n    assert docstring == \"This is a docstring\\non two lines\"\n\n@then(\"a step provides a docstring with lower indentation\")\ndef _(docstring):\n    assert docstring == \"This is a docstring\"\n\n@then(\"this step has a greater indentation\")\ndef _(docstring):\n    assert docstring == \"This is a docstring\"\n\n@then(\"this step has no docstring\")\ndef _():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Scenario Outline with Parameters in Docstrings and Datatables\nDESCRIPTION: Shows how to use example parameters within docstrings and datatables. This allows for dynamic substitution of values in complex multi-line text blocks and table structures, providing greater flexibility in test cases.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_18\n\nLANGUAGE: gherkin\nCODE:\n```\n# content of docstring_and_datatable_with_params.feature\n\nFeature: Docstring and Datatable with example parameters\n    Scenario Outline: Using parameters in docstrings and datatables\n        Given the following configuration:\n            \"\"\"\n            username: <username>\n            password: <password>\n            \"\"\"\n        When the user logs in\n        Then the response should contain:\n            | field     | value      |\n            | username  | <username> |\n            | logged_in | true       |\n\n        Examples:\n        | username  | password  |\n        | user1     | pass123   |\n        | user2     | 123secure |\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_bdd import scenarios, given, when, then\nimport json\n\n# Load scenarios from the feature file\nscenarios(\"docstring_and_datatable_with_params.feature\")\n\n\n@given(\"the following configuration:\")\ndef given_user_config(docstring):\n    print(docstring)\n\n\n@when(\"the user logs in\")\ndef user_logs_in(logged_in):\n    logged_in = True\n\n\n@then(\"the response should contain:\")\ndef response_should_contain(datatable):\n    assert datatable[1][1] in [\"user1\", \"user2\"]\n```\n\n----------------------------------------\n\nTITLE: Using Rules and Examples in Gherkin\nDESCRIPTION: Illustrates the use of Rules in Gherkin to group related scenarios or examples under a shared context. It shows how tags can be applied to rules and automatically inherited by examples or scenarios within the rule.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_21\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Rules and examples\n\n    @feature_tag\n    Rule: A rule for valid cases\n\n        @rule_tag\n        Example: Valid case 1\n            Given I have a valid input\n            When I process the input\n            Then the result should be successful\n\n    Rule: A rule for invalid cases\n\n        Example: Invalid case\n            Given I have an invalid input\n            When I process the input\n            Then the result should be an error\n```\n\n----------------------------------------\n\nTITLE: Defining a Given Step with Target Fixture (Python)\nDESCRIPTION: This snippet demonstrates how to define a 'Given' step in pytest-bdd that creates a target fixture. The fixture 'article' is created and can be used in subsequent steps.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n@given(\"I have a beautiful article\", target_fixture=\"article\")\ndef article():\n    return Article(is_beautiful=True)\n```\n\n----------------------------------------\n\nTITLE: Using scenario decorator with additional assertions\nDESCRIPTION: Example of using the scenario decorator with additional assertions in the test function.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_bdd import scenario, given, when, then\n\n@scenario('publish_article.feature', 'Publishing the article')\ndef test_publish(browser):\n    assert article.title in browser.html\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Example Cells in Gherkin and Python\nDESCRIPTION: Demonstrates how to use a custom converter to return None for empty cells in example tables. The Gherkin feature file defines a scenario outline with an empty cell, while the Python code uses a converter to handle the empty value.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_20\n\nLANGUAGE: gherkin\nCODE:\n```\n# content of empty_example_cells.feature\n\nFeature: Handling empty example cells\n    Scenario Outline: Using converters for empty cells\n        Given I am starting lunch\n        Then there are <start> cucumbers\n\n        Examples:\n        | start |\n        |       |\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_bdd import then, parsers\n\n\n# Define a converter that returns None for empty strings\ndef empty_to_none(value):\n    return None if value.strip() == \"\" else value\n\n\n@given(\"I am starting lunch\")\ndef _():\n    pass\n\n\n@then(\n    parsers.re(\"there are (?P<start>.*?) cucumbers\"),\n    converters={\"start\": empty_to_none}\n)\ndef _(start):\n    # Example assertion to demonstrate the conversion\n    assert start is None\n```\n\n----------------------------------------\n\nTITLE: Implementing step arguments in Python\nDESCRIPTION: Python code implementing step arguments using parsers and assertions.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_bdd import scenarios, given, when, then, parsers\n\n\nscenarios(\"arguments.feature\")\n\n\n@given(parsers.parse(\"there are {start:d} cucumbers\"), target_fixture=\"cucumbers\")\ndef given_cucumbers(start):\n    return {\"start\": start, \"eat\": 0}\n\n\n@when(parsers.parse(\"I eat {eat:d} cucumbers\"))\ndef eat_cucumbers(cucumbers, eat):\n    cucumbers[\"eat\"] += eat\n\n\n@then(parsers.parse(\"I should have {left:d} cucumbers\"))\ndef should_have_left_cucumbers(cucumbers, left):\n    assert cucumbers[\"start\"] - cucumbers[\"eat\"] == left\n```\n\n----------------------------------------\n\nTITLE: Defining a When Step (Python)\nDESCRIPTION: This snippet shows how to define a 'When' step in pytest-bdd. It demonstrates how to use a fixture ('article') created in a previous step.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n@when(\"I publish this article\")\ndef publish_article(article):\n    article.publish()\n```\n\n----------------------------------------\n\nTITLE: Feature with Background Definition (Gherkin)\nDESCRIPTION: This Gherkin code defines a feature with a background and two scenarios. The background sets up common steps for all scenarios in the feature.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_28\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Multiple site support\n\n  Background:\n    Given a global administrator named \"Greg\"\n    And a blog named \"Greg's anti-tax rants\"\n    And a customer named \"Wilson\"\n    And a blog named \"Expensive Therapy\" owned by \"Wilson\"\n\n  Scenario: Wilson posts to his own blog\n    Given I am logged in as Wilson\n    When I try to post to \"Expensive Therapy\"\n    Then I should see \"Your article was published.\"\n\n  Scenario: Greg posts to a client's blog\n    Given I am logged in as Greg\n    When I try to post to \"Expensive Therapy\"\n    Then I should see \"Your article was published.\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Pytest-BDD Scenario with Example Converters\nDESCRIPTION: Demonstrates using the @scenario decorator with example_converters to handle float conversion for parameters.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n@scenario(\"outline.feature\", \"Outlined\", example_converters={\"start\": float})\ndef test_outline():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Step Definitions for Wallet Models in Python with pytest-bdd\nDESCRIPTION: Function that dynamically generates pytest-bdd step definitions for wallet models with currency fields. It creates given/then steps for each currency field in the Wallet dataclass.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n# contents of wallet_steps.py\n\nimport re\nfrom dataclasses import fields\n\nimport factory\nimport pytest\nfrom pytest_bdd import given, when, then, scenarios, parsers\n\n\ndef generate_wallet_steps(model_name=\"wallet\", stacklevel=1):\n    stacklevel += 1\n\n    human_name = model_name.replace(\"_\", \" \")  # \"second_wallet\" -> \"second wallet\"\n\n    @given(f\"I have a {human_name}\", target_fixture=model_name, stacklevel=stacklevel)\n    def _(request):\n        return request.getfixturevalue(model_name)\n\n    # Generate steps for currency fields:\n    for field in fields(Wallet):\n        match = re.fullmatch(r\"amount_(?P<currency>[a-z]{3})\", field.name)\n        if not match:\n            continue\n        currency = match[\"currency\"]\n\n        @given(\n            parsers.parse(f\"I have {{value:d}} {currency.upper()} in my {human_name}\"),\n            target_fixture=f\"{model_name}__amount_{currency}\",\n            stacklevel=stacklevel,\n        )\n        def _(value: int) -> int:\n            return value\n\n        @then(\n            parsers.parse(f\"I should have {{value:d}} {currency.upper()} in my {human_name}\"),\n            stacklevel=stacklevel,\n        )\n        def _(value: int, _currency=currency, _model_name=model_name) -> None:\n            wallet = request.getfixturevalue(_model_name)\n            assert getattr(wallet, f\"amount_{_currency}\") == value\n\n# Inject the steps into the current module\ngenerate_wallet_steps(\"wallet\")\ngenerate_wallet_steps(\"second_wallet\")\n```\n\n----------------------------------------\n\nTITLE: Multiple Paths for Automatic Scenario Binding\nDESCRIPTION: Demonstrates passing multiple paths to the scenarios() helper, including feature files and feature folders. This allows for flexible organization of feature files across multiple directories.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_bdd import scenarios\n\n# pass multiple paths/files\nscenarios('features', 'other_features/some.feature', 'some_other_features')\n```\n\n----------------------------------------\n\nTITLE: Feature and Scenario Definition (Gherkin)\nDESCRIPTION: This Gherkin code defines a feature and a scenario for testing the power of PyTest. It includes steps for having and publishing an article.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_26\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: The power of PyTest\n    Scenario: Symbolic name across steps\n        Given I have a beautiful article\n        When I publish this article\n```\n\n----------------------------------------\n\nTITLE: Gherkin scenario with step arguments\nDESCRIPTION: Example of a Gherkin scenario using step arguments.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_9\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Step arguments\n    Scenario: Arguments for given, when, then\n        Given there are 5 cucumbers\n\n        When I eat 3 cucumbers\n        And I eat 2 cucumbers\n\n        Then I should have 0 cucumbers\n```\n\n----------------------------------------\n\nTITLE: Reusing Steps with conftest.py (Python)\nDESCRIPTION: These snippets show how to define common steps in a conftest.py file and reuse them in test files. It includes definitions for 'Given' and 'Then' steps.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n# content of conftest.py\n\nfrom pytest_bdd import given, then\n\n\n@given(\"I have a bar\", target_fixture=\"bar\")\ndef bar():\n    return \"bar\"\n\n\n@then('bar should have value \"bar\"')\ndef bar_is_bar(bar):\n    assert bar == \"bar\"\n```\n\nLANGUAGE: python\nCODE:\n```\n# content of test_common.py\n\n@scenario(\"common_steps.feature\", \"All steps are declared in the conftest\")\ndef test_conftest():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing steps with asterisk shorthand\nDESCRIPTION: Python implementation of steps that use asterisk shorthand in Gherkin scenarios.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_bdd import given\n\n@given(\"I'm an author\")\ndef _():\n    pass\n\n@given(\"I have an article\")\ndef _():\n    pass\n\n@given(\"I have a pen\")\ndef _():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Given Step with Fixture Dependency\nDESCRIPTION: Example of a given step that depends on an existing fixture through dependency injection.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n@given(\"there's an article\")\ndef there_is_an_article(article):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Given Step with Target Fixture\nDESCRIPTION: Example of using target_fixture parameter in given step to create a fixture.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n@given(\"there's an article\", target_fixture=\"article\")\ndef there_is_an_article():\n    return Article()\n```\n\n----------------------------------------\n\nTITLE: Using cfparse for step arguments\nDESCRIPTION: Example of using cfparse parser for step arguments with type conversion.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_bdd import parsers\n\n@given(\n    parsers.cfparse(\"there are {start:Number} cucumbers\", extra_types={\"Number\": int}),\n    target_fixture=\"cucumbers\",\n)\ndef given_cucumbers(start):\n    return {\"start\": start, \"eat\": 0}\n```\n\n----------------------------------------\n\nTITLE: Using re parser for step arguments\nDESCRIPTION: Example of using re parser for step arguments with type conversion.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_bdd import parsers\n\n@given(\n    parsers.re(r\"there are (?P<start>\\d+) cucumbers\"),\n    converters={\"start\": int},\n    target_fixture=\"cucumbers\",\n)\ndef given_cucumbers(start):\n    return {\"start\": start, \"eat\": 0}\n```\n\n----------------------------------------\n\nTITLE: Basic Pytest-BDD Scenario Implementation\nDESCRIPTION: Simple scenario implementation without parameter conversion.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n@scenario(\"outline.feature\", \"Outlined\")\ndef test_outline():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Pytest-BDD Given Step with Parser\nDESCRIPTION: Shows how to implement a given step with parser.parse and converters for float type conversion.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n@given(parsers.parse(\"there are {start} cucumbers\"), converters={\"start\": float})\ndef given_cucumbers(start):\n    return {\"start\": start}\n```\n\n----------------------------------------\n\nTITLE: Reusing Fixtures in pytest-bdd (Python)\nDESCRIPTION: This code demonstrates how to reuse an existing pytest fixture in a pytest-bdd step. It creates a new name for the existing 'article' fixture.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef article():\n   \"\"\"Test article.\"\"\"\n   return Article()\n\n@given('I have a beautiful article')\ndef i_have_an_article(article):\n   \"\"\"I have an article.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Tags in pytest-bdd (Python)\nDESCRIPTION: This snippet shows how to handle a custom 'todo' tag in pytest-bdd by skipping the test with a reason. For other tags, it falls back to the default pytest-bdd behavior.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nif tag == 'todo':\n    marker = pytest.mark.skip(reason=\"Not implemented yet\")\n    marker(function)\n    return True\nelse:\n    # Fall back to the default behavior of pytest-bdd\n    return None\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature File Paths (INI and Python)\nDESCRIPTION: These snippets show how to configure the base directory for feature files in pytest.ini and how to override it for specific scenarios in Python code.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nbdd_features_base_dir = features/\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_bdd import scenario\n\n\n@scenario(\"foo.feature\", \"Foo feature in features/foo.feature\")\ndef test_foo():\n    pass\n\n\n@scenario(\n    \"foo.feature\",\n    \"Foo feature in tests/local-features/foo.feature\",\n    features_base_dir=\"./local-features/\",\n)\ndef test_foo_local():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining a Wallet Class (Python)\nDESCRIPTION: This code defines a Wallet class using Python's dataclass decorator. The Wallet has a verified status and amounts for different currencies.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n# contents of wallet.py\n\nimport dataclass\n\n@dataclass\nclass Wallet:\n    verified: bool\n\n    amount_eur: int\n    amount_usd: int\n    amount_gbp: int\n    amount_jpy: int\n```\n\n----------------------------------------\n\nTITLE: Using partial for Scenario Definitions (Python)\nDESCRIPTION: This code demonstrates how to use functools.partial to avoid retyping the feature file name when defining multiple scenarios in a test file.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n# content of test_publish_article.py\n\nfrom functools import partial\n\nimport pytest_bdd\n\n\nscenario = partial(pytest_bdd.scenario, \"/path/to/publish_article.feature\")\n\n\n@scenario(\"Publishing the article\")\ndef test_publish():\n    pass\n\n\n@scenario(\"Publishing the article as unprivileged user\")\ndef test_publish_unprivileged():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Factory for Wallet (Python)\nDESCRIPTION: This code uses pytest-factoryboy to create a factory for the Wallet class. It registers two fixtures: 'wallet' and 'second_wallet'.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n# contents of wallet_factory.py\n\nfrom wallet import Wallet\n\nimport factory\nfrom pytest_factoryboy import register\n\nclass WalletFactory(factory.Factory):\n    class Meta:\n        model = Wallet\n\n    amount_eur = 0\n    amount_usd = 0\n    amount_gbp = 0\n    amount_jpy = 0\n\nregister(Wallet)  # creates the \"wallet\" fixture\nregister(Wallet, \"second_wallet\")  # creates the \"second_wallet\" fixture\n```\n\n----------------------------------------\n\nTITLE: Using asterisks in Gherkin scenarios\nDESCRIPTION: Example of using asterisks as a shorthand for step keywords in Gherkin scenarios.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_5\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Resource owner\n    Scenario: I'm the author\n        Given I'm an author\n        * I have an article\n        * I have a pen\n```\n\n----------------------------------------\n\nTITLE: Installing pytest-bdd using pip\nDESCRIPTION: Command to install pytest-bdd package using pip package manager.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/README.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest-bdd\n```\n\n----------------------------------------\n\nTITLE: Creating and Uploading a Release Distribution for pytest-bdd\nDESCRIPTION: A shell script for building and uploading a distribution package for pytest-bdd. It installs required tools, cleans up previous distributions, builds new ones, and uploads them to PyPI using twine.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install --upgrade build twine\n\n# cleanup the ./dist folder\nrm -rf ./dist\n\n# Build the distributions\npython -m build\n\n# Upload them\n\ntwine upload dist/*\n```\n\n----------------------------------------\n\nTITLE: Including RST files in documentation using directives\nDESCRIPTION: This snippet shows how to include external RST files within a documentation file using the 'include' directive. The file references three important project documentation files: README.rst, AUTHORS.rst, and CHANGES.rst.\nSOURCE: https://github.com/pytest-dev/pytest-bdd/blob/master/docs/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../README.rst\n\n.. include:: ../AUTHORS.rst\n\n.. include:: ../CHANGES.rst\n```"
  }
]