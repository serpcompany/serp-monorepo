[
  {
    "owner": "dotnet",
    "repo": "maui-samples.git",
    "content": "TITLE: Including Raw Assets with MauiAsset in .csproj (XML)\nDESCRIPTION: This snippet shows how to include raw assets in a .NET MAUI project by using the `MauiAsset` build action in the `.csproj` file. The `LogicalName` attribute ensures the file is accessible with its original directory structure.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/XAML/Fundamentals/XamlSamples/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n    <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File Using FileSystem API\nDESCRIPTION: Asynchronous C# method demonstrating how to open and read the contents of a deployed asset file using the FileSystem.OpenAppPackageFileAsync method.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/Localization/LocalizationDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File at Runtime\nDESCRIPTION: Asynchronous C# method demonstrating how to read contents of a MAUI asset file using FileSystem API. The code opens the file as a stream and reads its contents using StreamReader.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Navigation/TabbedPage/TabbedPage/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SkiaSharp in .NET MAUI C# App\nDESCRIPTION: This C# snippet demonstrates how to integrate SkiaSharp into a .NET MAUI application. It requires the SkiaSharp.Views.Maui.Controls NuGet package. The MauiProgram class includes the UseSkiaSharp method in the builder for setting up SkiaSharp, along with font configuration. The app utilizes conditional debug logging, which is enabled in debug mode. The builder then compiles and returns the configured MauiApp instance.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/SkiaSharp/SkiaSharpDemos/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Logging;\nusing SkiaSharp.Views.Maui.Controls.Hosting;\n\nnamespace MyMauiApp;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .UseSkiaSharp()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n\n        #if DEBUG\n        builder.Logging.AddDebug();\n        #endif\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .NET MAUI Project\nDESCRIPTION: This XML snippet shows how to include raw assets in a .NET MAUI project file (.csproj). It uses the MauiAsset Build Action to automatically handle the deployment of assets placed in the Resources\\Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/PlatformIntegration/LocalNotificationsDemo/LocalNotificationsDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets in .NET MAUI\nDESCRIPTION: This C# code snippet defines an asynchronous method to load and read a text file from the application package using the Essentials API. It demonstrates opening a file named 'AboutAssets.txt' and reading its contents. It requires the Essentials library and appropriate read access permissions.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Layouts/BindableLayoutDemos/BindableLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\\n{\\n\\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\\\"AboutAssets.txt\\\");\\n\\tusing var reader = new StreamReader(stream);\\n\\n\\tvar contents = reader.ReadToEnd();\\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Application Package Asset Asynchronously\nDESCRIPTION: Demonstrates asynchronous loading of an asset file from the application package using FileSystem.OpenAppPackageFileAsync, reading the entire file contents into memory\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Layouts/GridDemos/GridDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Assets with Essentials in C#\nDESCRIPTION: This C# snippet demonstrates how to asynchronously open and read the contents of a MauiAsset file using the FileSystem class provided by Essentials in a .NET MAUI application. It requires the 'AboutAssets.txt' file to be included as a MauiAsset in the project. The method reads the file contents and can be further modified to handle the data as needed.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Beginners-Series/BeginnersTask/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .csproj\nDESCRIPTION: This XML snippet shows how to include all files within the `Resources\\Raw` directory and its subdirectories as assets for deployment. The `LogicalName` attribute specifies how the files will be organized within the application package, preserving the directory structure.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/ContentViewDemo/CardViewDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Assets in C#\nDESCRIPTION: This code snippet demonstrates how to asynchronously load a raw asset from the application package using .NET MAUI's FileSystem API. It reads the content of the file 'AboutAssets.txt' and allows the developer to retrieve file data programmatically. Ensure that the MauiAsset build action is properly configured in the .csproj file to include the asset.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/PlatformIntegration/LocalNotificationsDemo/LocalNotificationsDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Assets Using Essentials in C#\nDESCRIPTION: This C# code snippet provides an asynchronous method to load a raw asset file named 'AboutAssets.txt' using the Essentials FileSystem API. It reads the contents of the file to completion, which can then be processed within the application. The method demonstrates reading raw data from the app package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Handlers/CreateHandlerDemo/VideoDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to asynchronously load a raw asset from the application package in .NET MAUI. It utilizes the `FileSystem` class to open a file and read its contents using a `StreamReader`. The expected input is the name of the asset file, and the output is the contents of that file as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UITesting/BrowserStackAppiumMaui/BasicAppiumNunitSample/MauiApp/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SkiaSharp in .NET MAUI Application\nDESCRIPTION: Configures a .NET MAUI application to use SkiaSharp for graphics rendering by calling the UseSkiaSharp extension method and setting up additional configuration like fonts and logging.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/SkiaSharp/PhotoPuzzle/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Logging;\nusing SkiaSharp.Views.Maui.Controls.Hosting;\n\nnamespace MyMauiApp;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .UseSkiaSharp()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n\n        #if DEBUG\n        builder.Logging.AddDebug();\n        #endif\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SkiaSharp in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to initialize SkiaSharp in a .NET MAUI application. It shows the necessary code within the MauiProgram class to set up SkiaSharp and configure fonts. Required dependencies include the 'SkiaSharp.Views.Maui.Controls' NuGet package, which must be added to the project.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/SkiaSharp/MandelbrotAnimation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Logging;\nusing SkiaSharp.Views.Maui.Controls.Hosting;\n\nnamespace MyMauiApp;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .UseSkiaSharp()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n\n        #if DEBUG\n        builder.Logging.AddDebug();\n        #endif\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Assets Asynchronously in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to asynchronously load a Maui asset from the app package using the FileSystem API. It reads the contents of the specified asset file and uses a StreamReader for processing. The required dependencies include the .NET MAUI Essentials library to access the FileSystem functionality.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/XAML/MarkupExtensions/MarkupExtensions/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action\nDESCRIPTION: XML configuration in .csproj file that specifies how raw assets should be included and deployed with the MAUI application package\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/ThemingDemo/ThemingDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File\nDESCRIPTION: Asynchronous C# method demonstrating how to load and read contents of a deployed asset file using the FileSystem API.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Handlers/CustomizeHandlersDemo/CustomizeHandlersDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic UI Tests with NUnit in .NET MAUI\nDESCRIPTION: Example class showing how to write UI tests for .NET MAUI applications using NUnit and Appium. Demonstrates basic test setup, element finding, and assertions. The class includes tests for app launch verification and button click counter functionality.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UITesting/BasicAppiumNunitSample/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MainPageTests : BaseTest\n{\n    [Test]\n    public void AppLaunches()\n    {\n        App.GetScreenshot().SaveAsFile($\"{nameof(AppLaunches)}.png\");\n    }\n\n    [Test]\n    public void ClickCounterTest()\n    {\n        // Arrange\n        // Find elements with the value of the AutomationId property\n        var element = FindUIElement(\"CounterBtn\");\n\n        // Act\n        element.Click();\n        Task.Delay(500).Wait(); // Wait for the click to register and show up on the screenshot\n\n        // Assert\n        App.GetScreenshot().SaveAsFile($\"{nameof(ClickCounterTest)}.png\");\n        Assert.That(element.Text, Is.EqualTo(\"Clicked 1 time\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets in MAUI\nDESCRIPTION: This C# code snippet shows how to access a deployed asset within a MAUI application. It uses `FileSystem.OpenAppPackageFileAsync` to open the file as a stream and then reads the contents of the file. This method is part of the Essentials library and simplifies accessing packaged resources.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/CheckBoxDemos/CheckBoxDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\tasync Task LoadMauiAsset()\n\t{\n\t\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\t\tusing var reader = new StreamReader(stream);\n\n\t\tvar contents = reader.ReadToEnd();\n\t}\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets in .NET MAUI\nDESCRIPTION: This C# method showcases how to asynchronously access a deployed asset file using the Essentials API in a .NET MAUI application. The method retrieves the content of the asset 'AboutAssets.txt'.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/TwoPaneView/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SkiaSharp in a .NET MAUI app\nDESCRIPTION: This code initializes the SkiaSharp graphics library within a .NET MAUI application. It configures the app builder to use SkiaSharp and sets up font resources. The `MauiProgram` class contains the `CreateMauiApp` method which constructs the application with necessary configurations.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/SkiaSharp/SpinPaint/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Logging;\nusing SkiaSharp.Views.Maui.Controls.Hosting;\n\nnamespace MyMauiApp;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .UseSkiaSharp()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n\n        #if DEBUG\n        builder.Logging.AddDebug();\n        #endif\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Asset File in .NET MAUI using FileSystem\nDESCRIPTION: This C# code demonstrates how to load a raw asset file in a .NET MAUI application using the FileSystem class from .NET MAUI Essentials. It opens the 'AboutAssets.txt' file from the application package, reads its contents using a StreamReader, and stores the content in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/DeveloperBalance/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset Asynchronously with FileSystem\nDESCRIPTION: Demonstrates asynchronous loading of an asset file from the application package using FileSystem.OpenAppPackageFileAsync, reading its contents into a string\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Apps/PointOfSale/src/PointOfSale/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File at Runtime\nDESCRIPTION: C# async method demonstrating how to load a MAUI asset file using the FileSystem API. Opens the file as a stream and reads its contents using StreamReader.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/XAML/MarkupExtensions/MarkupExtensions/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File Using FileSystem API\nDESCRIPTION: Asynchronous C# method demonstrating how to load and read contents of a deployed asset file using the FileSystem.OpenAppPackageFileAsync method from MAUI Essentials.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/Tooltips/TooltipsSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SkiaSharp in .NET MAUI Application\nDESCRIPTION: This code snippet demonstrates how to set up and initialize SkiaSharp in a .NET MAUI application. It shows the process of creating a MauiApp, configuring it to use SkiaSharp, and setting up fonts. The snippet also includes conditional debug logging setup.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/SkiaSharp/CatClock/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Logging;\nusing SkiaSharp.Views.Maui.Controls.Hosting;\n\nnamespace MyMauiApp;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .UseSkiaSharp()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n\n        #if DEBUG\n        builder.Logging.AddDebug();\n        #endif\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SkiaSharp in .NET MAUI Application\nDESCRIPTION: This code snippet demonstrates how to set up and initialize SkiaSharp in a .NET MAUI application. It shows the process of creating a MauiApp, configuring it to use SkiaSharp, and setting up fonts. The snippet also includes conditional debug logging setup.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/SkiaSharp/CatClock/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Logging;\nusing SkiaSharp.Views.Maui.Controls.Hosting;\n\nnamespace MyMauiApp;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .UseSkiaSharp()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n\n        #if DEBUG\n        builder.Logging.AddDebug();\n        #endif\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Raw Assets at Runtime\nDESCRIPTION: An asynchronous C# method that demonstrates how to load a raw asset file from a MAUI application package. It uses the FileSystem class from the Essentials library to open the file and read its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/WebServices/TodoREST/TodoREST/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UI Tests with NUnit and Appium in .NET MAUI\nDESCRIPTION: Example test class demonstrating how to write UI tests for a .NET MAUI application using NUnit and Appium. The class includes tests for app launch verification and counter button interaction, utilizing screenshot capabilities and element finding through AutomationId.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UITesting/BrowserStackAppiumMaui/BasicAppiumNunitSample/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MainPageTests : BaseTest\n{\n    [Test]\n    public void AppLaunches()\n    {\n        App.GetScreenshot().SaveAsFile($\"{nameof(AppLaunches)}.png\");\n    }\n\n    [Test]\n    public void ClickCounterTest()\n    {\n        // Arrange\n        // Find elements with the value of the AutomationId property\n        var element = FindUIElement(\"CounterBtn\");\n\n        // Act\n        element.Click();\n        Task.Delay(500).Wait(); // Wait for the click to register and show up on the screenshot\n\n        // Assert\n        App.GetScreenshot().SaveAsFile($\"{nameof(ClickCounterTest)}.png\");\n        Assert.That(element.Text, Is.EqualTo(\"Clicked 1 time\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Deployment in .NET MAUI Project File\nDESCRIPTION: This XML snippet shows how to include raw assets in the project file for automatic deployment with the application. It uses the MauiAsset Build Action to include all files in the Resources\\Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Animations/Animations/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File at Runtime\nDESCRIPTION: Demonstrates how to load a MAUI asset file at runtime using FileSystem.OpenAppPackageFileAsync and StreamReader. Returns the contents of the file as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Navigation/FlyoutPageSample/FlyoutPageSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Asset File Using .NET MAUI Essentials\nDESCRIPTION: This C# code snippet demonstrates how to load a raw asset file asynchronously using the FileSystem class from .NET MAUI Essentials. It opens the file, reads its contents, and stores them in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/DeveloperBalance/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Asset in .NET MAUI Application\nDESCRIPTION: This C# code demonstrates how to load a raw asset file in a .NET MAUI application using the FileSystem class from .NET MAUI Essentials. It opens a file named 'AboutAssets.txt' from the app package and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/SwitchDemos/SwitchDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Package Resources in XAML\nDESCRIPTION: This XAML snippet demonstrates how to use various resources provided by the SamplePackage, including images, fonts, and color resources. It uses static references to classes defined in the package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<Image\n    Source=\"{x:Static sp:PackageImages.DotnetBot}\"\n    HeightRequest=\"185\"\n    Aspect=\"AspectFit\" />\n\n<Label\n    Text=\"{x:Static sp:FontAwesomeGlyphs.Code}\"\n    FontFamily=\"{x:Static sp:FontAwesomeGlyphs.FontAlias}\"\n    TextColor=\"{StaticResource PrimaryBrandColor}\" />\n\n<Label\n    Text=\"Welcome to &#10;.NET Multi-platform App UI\"\n    TextColor=\"{StaticResource PrimaryBrandColor}\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime\nDESCRIPTION: Asynchronous C# method demonstrating how to load raw assets from the application package using FileSystem APIs. Opens a file stream and reads the contents using StreamReader.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Animations/Animations/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Reading MauiAsset in .NET MAUI\nDESCRIPTION: This C# method demonstrates how to load and read a deployed MauiAsset file in a .NET MAUI application using the Essentials API. It opens a file named \"AboutAssets.txt\" from the application's package and reads its contents asynchronously. The method ensures that resources are properly disposed of by utilizing 'using' statements.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/ScrollViewDemos/ScrollViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets in .NET MAUI Application\nDESCRIPTION: This C# code demonstrates how to load a raw asset file in a .NET MAUI application using the FileSystem.OpenAppPackageFileAsync method from the Essentials library. It opens a file named 'AboutAssets.txt' and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/SkiaSharp/MandelbrotAnimation/MandelbrotAnimation/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Calling UseSamplePackage in MauiProgram.cs - C# - C#\nDESCRIPTION: This snippet demonstrates the setup of the `MauiApp` in the `MauiProgram.cs` file, where the `UseSamplePackage` method is called to register the sample package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .UseSamplePackage()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Assets Asynchronously in .NET MAUI\nDESCRIPTION: This code snippet defines an asynchronous method to load a Maui asset from the application package. It utilizes the FileSystem class to open a stream to the asset and reads its contents using a StreamReader. The expected input is the logical name of the asset file, and the output is the contents of that file as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/Map/MapDemo/WorkingWithMaps/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for MVVM Tutorial\nDESCRIPTION: Markdown file explaining the purpose of the repository and linking to the official Microsoft tutorial for implementing MVVM concepts in .NET MAUI applications.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Tutorials/ConvertToMvvm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Upgrade your app with MVVM concepts\n\nThis is the code created by following the [Upgrade your app with MVVM concepts](https://learn.microsoft.com/dotnet/maui/tutorials/notes-mvvm/) tutorial.\n```\n\n----------------------------------------\n\nTITLE: Using MauiImage in XAML\nDESCRIPTION: This XAML snippet demonstrates how to use a MauiImage item that was included via the .targets file. The image can be referenced directly without additional setup.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<Image\n    Source=\"sample_bot.png\"\n    HeightRequest=\"185\"\n    Aspect=\"AspectFit\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Assets Asynchronously with C#\nDESCRIPTION: This code snippet demonstrates how to asynchronously load a Maui asset file from the application package using .NET MAUI. It leverages the asynchronous method 'OpenAppPackageFileAsync' from FileSystem to obtain a stream of the asset, which is then read to retrieve the file contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/TriggersDemos/WorkingWithTriggers/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Reading Maui Asset Content using FileSystem API\nDESCRIPTION: This C# code snippet demonstrates how to access a raw asset file deployed with a .NET MAUI application using the FileSystem.OpenAppPackageFileAsync method.  The method returns a stream that can be read using a StreamReader to retrieve the asset's content.  The returned contents is a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/Upgrading/CustomRenderer/MauiCustomRenderer/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n async Task LoadMauiAsset()\n {\n  using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n  using var reader = new StreamReader(stream);\n\n  var contents = reader.ReadToEnd();\n }\n```\n\n----------------------------------------\n\nTITLE: Including MauiFont and MauiImage in MSBuild Targets File - XML - XML\nDESCRIPTION: This snippet illustrates how to include fonts and images within the MSBuild targets file for a .NET MAUI project. It specifies the asset locations and their properties in the project build process.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n    <ItemGroup>\n        <MauiFont Include=\"$(MSBuildThisFileDirectory)..\\fonts\\Font Awesome 6 Free-Regular-400.otf\" Visible=\"False\">\n            <Link>%(Filename)%(Extension)</Link>\n        </MauiFont>\n        <MauiImage Include=\"$(MSBuildThisFileDirectory)..\\images\\sample_bot.svg\" Visible=\"False\">\n            <Link>%(Filename)%(Extension)</Link>\n        </MauiImage>\n    </ItemGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset Using FileSystem in C#\nDESCRIPTION: This C# code demonstrates how to access and read the contents of a deployed asset file using the FileSystem class from .NET MAUI Essentials.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/XAML/Fundamentals/XamlSamples/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing NuGet Package to NuGet.org in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to push a NuGet package to NuGet.org using the dotnet nuget push command in a GitHub Actions workflow. It uses a secret API key for authentication.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README_DevOps.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Push nuget to NuGet.org\n  run: |\n    dotnet nuget push **/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate\n```\n\n----------------------------------------\n\nTITLE: NUnit Test Example in C#\nDESCRIPTION: This code snippet demonstrates a basic NUnit test class for a .NET MAUI application, using Appium for UI interaction. It includes a test to verify app launch and another to simulate a button click and assert the resulting text. The tests utilize the `App` field for interacting with the application UI and `FindUIElement` helper method for locating UI elements.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UITesting/BasicAppiumNunitSample/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MainPageTests : BaseTest\n{\n    [Test]\n    public void AppLaunches()\n    {\n        App.GetScreenshot().SaveAsFile($\"{nameof(AppLaunches)}.png\");\n    }\n\n    [Test]\n    public void ClickCounterTest()\n    {\n        // Arrange\n        // Find elements with the value of the AutomationId property\n        var element = FindUIElement(\"CounterBtn\");\n\n        // Act\n        element.Click();\n        Task.Delay(500).Wait(); // Wait for the click to register and show up on the screenshot\n\n        // Assert\n        App.GetScreenshot().SaveAsFile($\"{nameof(ClickCounterTest)}.png\");\n        Assert.That(element.Text, Is.EqualTo(\"Clicked 1 time\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Maui Asset in .NET MAUI Project\nDESCRIPTION: This XML snippet demonstrates how to specify raw assets for deployment in a .NET MAUI project. The `MauiAsset` Build Action ensures that any files placed under the `Resources\\Raw` directory are included in the application package. These assets can later be accessed programmatically during runtime.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/XAML/MarkupExtensions/MarkupExtensions/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Loading a Maui Asset at Runtime with .NET MAUI\nDESCRIPTION: This C# snippet demonstrates how to access a raw asset packaged with the .NET MAUI app at runtime. It uses FileSystem.OpenAppPackageFileAsync to open the asset file and StreamReader to read its contents asynchronously. This requires including the namespace for Essentials.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Handlers/CreateHandlerDemo/VideoDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets in .NET MAUI Application\nDESCRIPTION: This C# code demonstrates how to load a raw asset file in a .NET MAUI application using the FileSystem class from .NET MAUI Essentials. It opens a file named 'AboutAssets.txt' from the app package and reads its contents asynchronously.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/DataBindingDemos/DataBindingDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime\nDESCRIPTION: C# code demonstrating how to access a raw asset file at runtime using the FileSystem class from MAUI Essentials. The example opens a file, reads its contents as text, and returns it as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/IndicatorViewDemos/IndicatorViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets from MAUI App Package\nDESCRIPTION: This C# method demonstrates how to access a deployed raw asset file at runtime using the FileSystem.OpenAppPackageFileAsync method from the Essentials library.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/PlatformIntegration/InvokePlatformCodeDemos/InvokePlatformCodeDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering MauiFont in MauiProgram.cs\nDESCRIPTION: This C# code snippet shows how to register a custom font that was included via the .targets file. The font must be registered in the MauiProgram.cs file before it can be used in XAML.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.ConfigureFonts(fonts =>\n{\n    fonts.AddFont(\"Font Awesome 6 Free-Regular-400.otf\", \"FontAwesome\");\n});\n```\n\n----------------------------------------\n\nTITLE: Including Maui Asset in .NET MAUI Project\nDESCRIPTION: This XML snippet demonstrates how to include a file as a MauiAsset in a .NET MAUI project. The specified file will be deployed with the application package. Ensuring that the assets are properly included allows them to be accessed at runtime.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Navigation/ShellMixedSample/ShellMixedSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\\\"AboutAssets.txt\\\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets with Essentials (C#)\nDESCRIPTION: This code snippet demonstrates how to access deployed raw assets from within a .NET MAUI application using the `FileSystem.OpenAppPackageFileAsync` method. The method takes the file name as input and returns a stream that can be used to read the file's contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/XAML/Fundamentals/XamlSamples/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n    async Task LoadMauiAsset()\n    {\n        using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n        using var reader = new StreamReader(stream);\n\n        var contents = reader.ReadToEnd();\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets Asynchronously in C#\nDESCRIPTION: This C# code snippet shows how to asynchronously load a file named 'AboutAssets.txt' from the application package using the .NET MAUI Essentials API. It reads the file's contents using a StreamReader. This snippet requires the MAUI Essentials library and assumes the file exists in the package. The method returns the file's contents as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/Shell/Xaminals/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiApp with SamplePackage in MauiProgram.cs\nDESCRIPTION: This C# code snippet shows how to configure a MauiApp to use the SamplePackage. It calls the UseSamplePackage() extension method and configures additional fonts.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n         builder\n            .UseMauiApp<App>()\n            .UseSamplePackage()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SkiaSharp in .NET MAUI Application\nDESCRIPTION: Configuration code for setting up SkiaSharp in a .NET MAUI application. The code demonstrates initializing the MAUI app builder with SkiaSharp support, configuring fonts, and setting up debug logging. Requires the SkiaSharp.Views.Maui.Controls NuGet package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/SkiaSharp/SkiaSharpDemos/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Logging;\nusing SkiaSharp.Views.Maui.Controls.Hosting;\n\nnamespace MyMauiApp;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .UseSkiaSharp()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n\n        #if DEBUG\n        builder.Logging.AddDebug();\n        #endif\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Registered Font in XAML\nDESCRIPTION: This XAML snippet demonstrates how to use a custom font that was registered from the package. It uses the font alias and a specific glyph from the Font Awesome font.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<Label\n    Text=\"&#xf1c9;\"\n    FontFamily=\"FontAwesome\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj for Raw Assets\nDESCRIPTION: XML configuration to include raw assets in your .NET MAUI application build. This build action ensures that files in the Resources/Raw directory are included in the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UITesting/BasicAppiumNunitSample/MauiApp/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing SkiaSharp in .NET MAUI Application\nDESCRIPTION: This code snippet demonstrates how to set up and initialize SkiaSharp in a .NET MAUI application. It shows the configuration of the MauiAppBuilder, including the use of SkiaSharp, font configuration, and debug logging setup.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/SkiaSharp/SpinPaint/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Logging;\nusing SkiaSharp.Views.Maui.Controls.Hosting;\n\nnamespace MyMauiApp;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .UseSkiaSharp()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n\n        #if DEBUG\n        builder.Logging.AddDebug();\n        #endif\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime\nDESCRIPTION: Shows how to load a MAUI asset file at runtime using the FileSystem.OpenAppPackageFileAsync method from MAUI Essentials. The example reads the contents of a text file into a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Navigation/ShellFlyoutSample/ShellFlyoutSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets Using .NET MAUI\nDESCRIPTION: This snippet demonstrates how to asynchronously load a text asset from the application's package using the FileSystem API. It sets up a stream reader to read the contents of the file named 'AboutAssets.txt'. The required dependency is the 'Microsoft.Maui.Essentials' library, which provides the FileSystem methods used in this snippet. The expected input is the asset file name, and the output is the content of the file as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Fundamentals/Shell/Xaminals/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset() {\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets Using FileSystem API\nDESCRIPTION: C# async method demonstrating how to load and read contents of a deployed asset file using the FileSystem.OpenAppPackageFileAsync method. Shows proper stream handling with using statements.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/BrushesDemos/BrushesDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets Programmatically in C#\nDESCRIPTION: C# method demonstrating how to access deployed assets at runtime using the FileSystem class from the MAUI Essentials library. It opens a file from the application package, reads its contents using a StreamReader, and returns the content as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Layouts/FlexLayoutDemos/FlexLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Static Values in MainPage.xaml - XAML - XAML\nDESCRIPTION: This snippet shows the usage of static values for image source and text in `MainPage.xaml`. It uses static resource references for images and labels to improve maintainability and readability.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<Image\n    Source=\"{x:Static sp:PackageImages.DotnetBot}\"\n    HeightRequest=\"185\"\n    Aspect=\"AspectFit\" />\n\n<Label\n    Text=\"{x:Static sp:FontAwesomeGlyphs.Code}\"\n    FontFamily=\"{x:Static sp:FontAwesomeGlyphs.FontAlias}\"\n    TextColor=\"{StaticResource PrimaryBrandColor}\" />\n\n<Label\n    Text=\"Welcome to &#10;.NET Multi-platform App UI\"\n    TextColor=\"{StaticResource PrimaryBrandColor}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Maui Asset Build Action\nDESCRIPTION: This XML code snippet specifies the MauiAsset Build Action in a .csproj file, enabling the automatic deployment of assets placed in the Resources\\Raw directory of a .NET Maui project. It ensures the assets are included in the application package and are accessible at runtime.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/GraphicsViewDemos/GraphicsViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing SkiaSharp in .NET MAUI Application\nDESCRIPTION: Demonstrates how to configure and initialize SkiaSharp in a .NET MAUI application. The code shows the required setup in the MauiProgram class, including package initialization, font configuration, and debug logging setup.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/SkiaSharp/MandelbrotAnimation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Logging;\nusing SkiaSharp.Views.Maui.Controls.Hosting;\n\nnamespace MyMauiApp;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .UseSkiaSharp()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n\n        #if DEBUG\n        builder.Logging.AddDebug();\n        #endif\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Asset Async in .NET MAUI - C#\nDESCRIPTION: This code snippet demonstrates how to load a Maui asset asynchronously using .NET MAUI. The function 'LoadMauiAsset' opens a specified Maui asset file, reads its contents, and manages resources properly through 'using' statements. Ensure that the asset is included in the project with the appropriate 'MauiAsset' build action.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Navigation/ShellMixedSample/ShellMixedSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset Using FileSystem in C#\nDESCRIPTION: This C# code demonstrates how to asynchronously load a raw asset file from a MAUI application package using the Essentials FileSystem API. It opens the file, reads its contents, and stores them in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/SkiaSharp/SkiaSharpDemos/SkiaSharpDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MauiAsset with Essentials in .NET MAUI\nDESCRIPTION: A C# async method showing how to use .NET MAUI Essentials to open and read a file from the app package. The method asynchronously opens 'AboutAssets.txt', reads its contents, and stores it in a string variable. It serves as an example of accessing deployed assets within the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/SkiaSharp/MandelbrotAnimation/MandelbrotAnimation/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Asset using FileSystem (C#)\nDESCRIPTION: This C# code snippet demonstrates how to load a Maui asset using the `FileSystem.OpenAppPackageFileAsync` method from Essentials. It opens a stream to the specified file (\"AboutAssets.txt\"), reads its content using a `StreamReader`, and stores the content in the `contents` variable. The method is asynchronous and returns a Task.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/RadioButtonDemos/RadioButtonDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    async Task LoadMauiAsset()\n    {\n        using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n        using var reader = new StreamReader(stream);\n\n        var contents = reader.ReadToEnd();\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Deployment in .NET\nDESCRIPTION: This XML snippet configures the MauiAsset Build Action within the .csproj file to automatically deploy all resources located in the Raw directory and its subdirectories. The assets are included with recursive directory paths and become part of the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Handlers/CreateHandlerDemo/VideoDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .NET MAUI Project (csproj)\nDESCRIPTION: This XML snippet demonstrates how to include raw assets for deployment in a .NET MAUI application using the `MauiAsset` build action within the `.csproj` file. It configures the inclusion of all files within the `Resources\\Raw` directory and its subdirectories, while also setting the logical name for each asset based on its directory, filename, and extension.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/SystemThemesDemo/SystemThemesDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Run Appium Tests on BrowserStack\nDESCRIPTION: Executes the compiled Appium tests for Android and iOS on BrowserStack, utilizing the .NET CLI. Ensure BrowserStack credentials are correctly configured.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UITesting/BrowserStackAppiumMaui/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# For Android\ndotnet test BasicAppiumNunitSample/UITests.Android/UITests.Android.csproj\n\n# For iOS\n./dotnet test BasicAppiumNunitSample/UITests.iOS/UITests.iOS.csproj\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Asset in .NET MAUI Application\nDESCRIPTION: This C# code demonstrates how to access a deployed raw asset using the FileSystem class from .NET MAUI Essentials. It opens a file named 'AboutAssets.txt' from the app package, reads its contents using a StreamReader, and stores the content in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/BugSweeper/BugSweeper/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Deployed Assets in .NET MAUI (C#)\nDESCRIPTION: This C# function demonstrates how to load and read contents from a deployed raw asset in a .NET MAUI application using the FileSystem.OpenAppPackageFileAsync method from .NET MAUI Essentials. It asynchronously opens the asset and reads its contents using a StreamReader.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Fundamentals/BehaviorsDemos/BehaviorsDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\\n{\\n\\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\\\"AboutAssets.txt\\\");\\n\\tusing var reader = new StreamReader(stream);\\n\\n\\tvar contents = reader.ReadToEnd();\\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Layout: Measure Override in C#\nDESCRIPTION: This code snippet describes the `Measure` method which is overridden in a custom layout implementation. It should call measure on each `IView` in the layout, and should return the total size of the layout given the constraints. This method is crucial for determining the size requirements of the layout based on its content.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Layouts/CustomLayoutDemos/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n\"Size Measure(double widthConstraint, double heightConstraint)\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets with FileSystem\nDESCRIPTION: This C# code snippet demonstrates how to access a raw asset that was deployed with the application using the `FileSystem.OpenAppPackageFileAsync` method. The method opens a stream to the specified file within the application package, allowing you to read its contents.  It requires the `Microsoft.Maui.Essentials` namespace.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/SkiaSharp/SpinPaint/SpinPaint/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .NET MAUI Project (.csproj)\nDESCRIPTION: This XML snippet shows how to include raw assets in a .NET MAUI project by using the `MauiAsset` build action. The `LogicalName` attribute ensures that the directory structure is preserved when the asset is deployed.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Fundamentals/Tooltips/TooltipsSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in Project File\nDESCRIPTION: XML configuration to include raw assets for automatic deployment with the application package. Uses MauiAsset build action to recursively include all files in the Resources\\Raw directory.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/IndicatorViewDemos/IndicatorViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Asset Asynchronously in C#\nDESCRIPTION: This C# snippet shows how to asynchronously load an asset packaged with the application using `FileSystem.OpenAppPackageFileAsync`. It relies on the `Essentials` library to access the file and `StreamReader` to read its contents. The required parameter is the file name, and it outputs the file's contents as a string. Ensure the asset file exists in the application's resources.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/SkiaSharp/PhotoPuzzle/PhotoPuzzle/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Install BrowserStack SDK for Mac with Apple Silicon\nDESCRIPTION: This snippet installs and sets up the BrowserStack SDK on macOS VMs with Apple Silicon chips. It ensures the correct .NET SDK version is used for running tests on BrowserStack.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UITesting/BrowserStackAppiumMaui/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install browserstack-sdk --version 1.16.3 --create-manifest-if-needed\ndotnet browserstack-sdk setup-dotnet --dotnet-path \\\".\\\" --dotnet-version \\\"8.0.403\\\" --yes\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets from a .NET MAUI Application at Runtime\nDESCRIPTION: Method that demonstrates how to open and read a raw asset file at runtime using the FileSystem API from .NET MAUI Essentials. The method opens the file as a stream and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UITesting/BasicAppiumNunitSample/MauiApp/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File Using FileSystem\nDESCRIPTION: C# code demonstrating how to load and read a raw asset file using the FileSystem API from .NET MAUI Essentials. Shows async file access pattern with proper stream handling.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/WebServices/PushNotificationsDemo/PushNotificationsDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Assets with MAUI Essentials in C#\nDESCRIPTION: This C# method demonstrates how to load and read an asset file named 'AboutAssets.txt' using the MAUI Essentials FileSystem API. It opens the file asynchronously, reads its contents, and stores the result in a string. This depends on the asset being included with the MauiAsset Build Action.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/SkiaSharp/SkiaSharpDemos/SkiaSharpDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MauiAsset in C#\nDESCRIPTION: This asynchronous C# method demonstrates how to load a 'MauiAsset' within an application using the .NET MAUI Essentials library. It opens 'AboutAssets.txt' as a stream, reads its content using a StreamReader, and outputs the file content. This requires using the FileSystem class from the Essentials to handle the asset file.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Navigation/FlyoutPageSample/FlyoutPageSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Assets in Project File using XML\nDESCRIPTION: Demonstrates how to configure the MauiAsset Build Action in the .csproj file to include raw assets from the Resources/Raw directory in the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Tutorials/ConvertToMvvm/code/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in CSPROJ File\nDESCRIPTION: This snippet shows the MSBuild configuration needed in the .csproj file to include raw assets in the application package. The MauiAsset build action automatically handles the deployment of all files in the Resources/Raw directory.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/GameOfLife/GameOfLife/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Package Metadata in .NET MAUI Project\nDESCRIPTION: This snippet defines essential package metadata properties such as PackageVersion, PackageOutputPath, and whether the package should be generated on build. These properties are critical for managing package versions and outputs during the build process.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    ...\n    <PackageVersion>0.0.99999-sample</PackageVersion>\n    <PackageOutputPath>../artifacts/</PackageOutputPath>\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Asset Asynchronously in .NET MAUI\nDESCRIPTION: Demonstrates how to asynchronously open and read a raw asset file using FileSystem.OpenAppPackageFileAsync method. Reads contents of a text file from the application's package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/ShapesDemos/ShapesDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets using FileSystem API\nDESCRIPTION: This C# code demonstrates how to access a deployed asset from the application package using the `FileSystem.OpenAppPackageFileAsync()` method. It reads the content of the \"AboutAssets.txt\" file and stores it in the `contents` variable.  The code uses `StreamReader` to read the file content.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/ListViewDemos/ListViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\tasync Task LoadMauiAsset()\n\t{\n\t\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\t\tusing var reader = new StreamReader(stream);\n\n\t\tvar contents = reader.ReadToEnd();\n\t}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset with Async Task in C#\nDESCRIPTION: This code snippet defines an asynchronous method for loading a Maui asset from the application package. It utilizes the FileSystem API to access the asset and reads its content using a StreamReader. This method requires the presence of the specified file in the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/SkiaSharp/SpinPaint/SpinPaint/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset() {\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets using Essentials FileSystem in .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to access a deployed asset using the `FileSystem.OpenAppPackageFileAsync` method. It opens a file named \"AboutAssets.txt\" from the application package, reads its contents using a `StreamReader`, and stores the result in the `contents` variable.  The method is asynchronous and uses `using` statements to ensure proper resource disposal.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/BrushesDemos/BrushesDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\tasync Task LoadMauiAsset()\n\t{\n\t\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\t\tusing var reader = new StreamReader(stream);\n\n\t\tvar contents = reader.ReadToEnd();\n\t}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File Using FileSystem in C#\nDESCRIPTION: This C# code snippet demonstrates how to load a raw asset file from the application package using the FileSystem class from .NET MAUI Essentials. It opens the file as a stream and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/ControlTemplateDemos/ControlTemplateDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File\nDESCRIPTION: C# code demonstrating how to load and read a raw asset file from the application package using the FileSystem API. Shows async file handling with proper stream management.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/Shell/Xaminals/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset in Project File\nDESCRIPTION: XML configuration to include raw assets in the MAUI application build process with MauiAsset build action\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Navigation/TabbedPage/TabbedPage/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in XML\nDESCRIPTION: This XML snippet shows how to configure the MauiAsset Build Action in the project file (.csproj) to automatically include and deploy raw assets from the Resources/Raw directory.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Layouts/StackLayoutDemos/StackLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Content Files in NuGet Package\nDESCRIPTION: This snippet configures the inclusion of various content files in the NuGet package by specifying their paths and conditions under which they should be packed. It utilizes the None build action so these files are not part of the build process but are included in the package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    ...\n    <None Include=\"Content\\font_awesome\\*\" Pack=\"true\" PackagePath=\"\\fonts\" />\n    <None Include=\"Content\\images\\*\" Pack=\"true\" PackagePath=\"\\images\" />\n    <None Include=\"Content\\resources\\*\" Pack=\"true\" PackagePath=\"\\resources\" />\n    <None Include=\"Content\\SamplePackage.targets\" Pack=\"true\" PackagePath=\"\\build\\SamplePackage.targets\" />\n    <None Include=\"Content\\SamplePackage.targets\" Pack=\"true\" PackagePath=\"\\buildTransitive\\SamplePackage.targets\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Loading a Maui Asset in C#\nDESCRIPTION: This C# code demonstrates how to load and read the contents of a file deployed as a MauiAsset using `FileSystem.OpenAppPackageFileAsync`. It opens a stream to the asset, reads its contents using a `StreamReader`, and stores the result in a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Layouts/BindableLayoutDemos/BindableLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\tasync Task LoadMauiAsset()\n\t{\n\t\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\t\tusing var reader = new StreamReader(stream);\n\n\t\tvar contents = reader.ReadToEnd();\n\t}\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets at Runtime in C#\nDESCRIPTION: Asynchronous method demonstrating how to open and read the contents of a raw asset file using the FileSystem API from .NET MAUI Essentials. The example shows opening a text file and reading its contents with a StreamReader.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Tutorials/CreateNetMauiApp/code/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Release with Artifacts in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to create a GitHub Release and upload artifacts using the GitHub CLI in a GitHub Actions workflow. It generates release notes automatically and uses the package version as the release tag.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README_DevOps.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Create Release and Upload Artifact to Release\n  run: gh release create ${{env.VERSION_NUMBER}} -t ${{env.VERSION_NUMBER}} *.nupkg --generate-notes\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .csproj - MAUI\nDESCRIPTION: This snippet shows how to include raw assets for deployment using the `MauiAsset` build action in your `.csproj` file. The `LogicalName` ensures that the directory structure is preserved when the asset is deployed within the application package. It uses wildcards to include all files and subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Layouts/CustomLayoutDemos/CustomLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Assets in .NET MAUI Project\nDESCRIPTION: Enables deploying raw assets in a .NET MAUI project using the MauiAsset Build Action within a .csproj file. It automatically handles asset deployment, allowing access through Essentials.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Layouts/CustomLayoutDemos/CustomLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Mobile App Push Notification Settings\nDESCRIPTION: Configuration class for storing API key and service endpoint settings for push notification integration in the mobile application\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/WebServices/PushNotificationsDemo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Config.cs file for managing push notification configuration\npublic static class Config\n{\n    public static string ApiKey { get; set; }\n    public static string ServiceEndpoint { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File in C#\nDESCRIPTION: This C# code snippet shows how to asynchronously open and read the contents of a deployed asset file using the FileSystem API from .NET MAUI Essentials.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/ListViewDemos/ListViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Maui Asset Using FileSystem in C#\nDESCRIPTION: This C# code snippet demonstrates how to asynchronously access a raw asset within a .NET MAUI application using the `FileSystem` class. The method `LoadMauiAsset` opens the asset `AboutAssets.txt` and reads its contents. This approach requires a prior understanding of asynchronous programming in C#. The method outputs the file contents as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/XAML/MarkupExtensions/MarkupExtensions/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset() {\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action\nDESCRIPTION: XML configuration in .csproj file that specifies how raw assets should be included and deployed with the MAUI application. Assets from the Resources/Raw directory are automatically included in the build.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Animations/Animations/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj\nDESCRIPTION: This XML snippet shows the build action required in the .csproj file to include raw assets from the Resources/Raw directory in the MAUI application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/PlatformIntegration/InvokePlatformCodeDemos/InvokePlatformCodeDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Referencing SamplePackage in PackageConsumerApp\nDESCRIPTION: This snippet shows the PackageConsumerApp test application referencing the SamplePackage NuGet package. This setup allows the test app to utilize functionalities provided by the SamplePackage library directly.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <PackageReference Include=\"SamplePackage\" Version=\"0.0.99999-sample\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action in Project File\nDESCRIPTION: XML configuration in .csproj file that enables automatic deployment of raw assets from the Resources/Raw directory to the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/BehaviorsDemos/BehaviorsDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime Using FileSystem\nDESCRIPTION: C# code demonstrating how to access deployed assets at runtime using the FileSystem.OpenAppPackageFileAsync method. This example loads a text file named 'AboutAssets.txt' and reads its contents as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/ControlGallery/ControlGallery/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Deployment in .NET MAUI (.csproj)\nDESCRIPTION: This code snippet specifies the configuration for deploying raw assets in a .NET MAUI application using the `MauiAsset` build action in the project file (.csproj). It includes all the raw assets located under the 'Resources\\Raw\\' directory for inclusion in the build output.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/SkiaSharp/MandelbrotAnimation/MandelbrotAnimation/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets using MauiAsset in .csproj\nDESCRIPTION: This snippet shows how to include raw assets for deployment with a .NET MAUI application. It utilizes the `MauiAsset` Build Action in the `.csproj` file, specifying the directory containing the assets and defining a logical name for them.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/ContentViewDemo/CardViewDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including MauiAsset in .csproj file\nDESCRIPTION: This code snippet shows how to include a raw asset file (AboutAssets.txt) in a .NET MAUI project using the `<MauiAsset>` tag within the .csproj file.  This ensures the file is deployed with the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Navigation/ShellMixedSample/ShellMixedSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File at Runtime\nDESCRIPTION: C# code demonstrating how to load a raw asset file from the application package using the FileSystem API. Shows proper stream handling with using statements for resource cleanup.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/SkiaSharp/PhotoPuzzle/PhotoPuzzle/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing MAUI Raw Asset using FileSystem API\nDESCRIPTION: This C# code demonstrates how to access a raw asset deployed with a MAUI application using the `FileSystem.OpenAppPackageFileAsync` method. The method returns a stream that can be read to access the contents of the asset. The example uses a `StreamReader` to read the entire contents of the file into a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/RefreshViewDemo/RefreshViewDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\tasync Task LoadMauiAsset()\n\t{\n\t\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\t\tusing var reader = new StreamReader(stream);\n\n\t\tvar contents = reader.ReadToEnd();\n\t}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime with C#\nDESCRIPTION: Demonstrates how to access a deployed asset file at runtime using the FileSystem.OpenAppPackageFileAsync method from MAUI Essentials. The example shows opening a text file, reading its contents with a StreamReader, and storing the content in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Beginners-Series/BeginnersTask/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .NET MAUI Project\nDESCRIPTION: This snippet shows how to include raw assets in the .NET MAUI project file using the `MauiAsset` Build Action. The assets placed under `Resources\\Raw\\` are automatically deployed with the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Tutorials/CreateNetMauiApp/code/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj for MAUI Resource Deployment\nDESCRIPTION: XML configuration that specifies how raw assets should be included in the MAUI application. This build action ensures files in the Resources/Raw directory are deployed with the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/CheckBoxDemos/CheckBoxDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime\nDESCRIPTION: C# method demonstrating how to load a MAUI asset file asynchronously using FileSystem.OpenAppPackageFileAsync() and read its contents using StreamReader.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/SkiaSharp/CatClock/CatClock/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Assets using Essentials in MAUI\nDESCRIPTION: This C# code snippet shows how to access raw assets deployed with your .NET MAUI application using the `FileSystem.OpenAppPackageFileAsync` method from the Essentials library. The method opens a stream to the specified file within the application package, allowing you to read its contents. The stream is then used to read the entire contents of the asset file.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Apps/BugSweeper/BugSweeper/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in Project File\nDESCRIPTION: XML configuration in .csproj file that specifies how raw assets should be included and deployed with the MAUI application. Assets placed in Resources/Raw directory are automatically included in the package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/Tooltips/TooltipsSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .csproj\nDESCRIPTION: This XML snippet demonstrates how to include raw assets in your MAUI project. The `MauiAsset` Build Action automatically deploys any files in the `Resources\\Raw` directory (and its subdirectories) with your application. The `LogicalName` attribute specifies how the files are organized in the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/CheckBoxDemos/CheckBoxDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj\nDESCRIPTION: This XML configuration snippet demonstrates how to set up a MauiAsset Build Action in a .csproj file to automate the inclusion of raw assets in a .NET MAUI application package. The 'Include' attribute specifies the location of assets, and the 'LogicalName' uses placeholders to generate appropriate paths.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Fundamentals/BehaviorsDemos/BehaviorsDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in MAUI Project\nDESCRIPTION: This snippet demonstrates how to include raw assets in a MAUI project using the `MauiAsset` build action.  The `LogicalName` attribute specifies how the asset will be named and organized within the application package. This allows for easy access using the `FileSystem` API.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/RefreshViewDemo/RefreshViewDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets Using FileSystem in C#\nDESCRIPTION: This C# code demonstrates how to load a deployed MAUI asset at runtime using the FileSystem API from Essentials. It opens the 'AboutAssets.txt' file from the app package, reads its contents using a StreamReader, and stores the result in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/PlatformIntegration/LocalNotificationsDemo/LocalNotificationsDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset in Project File\nDESCRIPTION: XML configuration to include raw assets in the MAUI application build process with Build Action of 'MauiAsset'\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/PointOfSale/src/PointOfSale/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in Project File\nDESCRIPTION: Demonstrates how to include an asset file with MauiAsset build action, ensuring the file will be packaged with the application\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Apps/PointOfSale/src/PointOfSale/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset in .csproj\nDESCRIPTION: This snippet shows how to include all files in the `Resources\\Raw` directory (and subdirectories) as assets to be deployed with the application. The `LogicalName` attribute specifies how the files will be organized within the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Layouts/BindableLayoutDemos/BindableLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets using FileSystem in C#\nDESCRIPTION: This snippet demonstrates how to access deployed assets within a .NET MAUI application using the `FileSystem` class from the Essentials library.  The `OpenAppPackageFileAsync` method is used to open a stream to the asset file within the application package.  The stream can then be read to access the asset's content.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/WebServices/PushNotificationsDemo/PushNotificationsDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n        async Task LoadMauiAsset()\n        {\n                using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n                using var reader = new StreamReader(stream);\n\n                var contents = reader.ReadToEnd();\n        }\n```\n\n----------------------------------------\n\nTITLE: Loading and Reading Maui Asset in C#\nDESCRIPTION: This C# snippet showcases how to load and read a text file asset asynchronously in a .NET MAUI application using the Essentials library. The FileSystem.OpenAppPackageFileAsync method is utilized to open the asset file, and a StreamReader is used to read the file's contents. The example targets a file named 'AboutAssets.txt'.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/SystemThemesDemo/SystemThemesDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment with .csproj Build Action\nDESCRIPTION: XML configuration that should be included in the project's .csproj file to specify how raw assets should be deployed with the application. This configuration includes all files in the Resources/Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/ControlGallery/ControlGallery/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading a Maui Asset using Essentials FileSystem\nDESCRIPTION: This C# code snippet shows how to load a deployed Maui asset using the `FileSystem.OpenAppPackageFileAsync` method from the Essentials library. The method opens a stream to the asset, which can then be read using a `StreamReader`. The example reads the contents of the \"AboutAssets.txt\" file.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Fundamentals/Localization/LocalizationDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    async Task LoadMauiAsset()\n    {\n        using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n        using var reader = new StreamReader(stream);\n\n        var contents = reader.ReadToEnd();\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset in Project File\nDESCRIPTION: Shows how to include raw assets in the MAUI project file using the MauiAsset build action\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Navigation/ShellFlyoutSample/ShellFlyoutSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Loading a MAUI Asset in C#\nDESCRIPTION: This C# code snippet demonstrates how to load a raw asset (specifically, \"AboutAssets.txt\") from the MAUI application package using the `FileSystem.OpenAppPackageFileAsync` method. It reads the content of the file and stores it in the `contents` variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Layouts/GridDemos/GridDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\tasync Task LoadMauiAsset()\n\t{\n\t\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\t\tusing var reader = new StreamReader(stream);\n\n\t\tvar contents = reader.ReadToEnd();\n\t}\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .NET MAUI Project\nDESCRIPTION: This XML snippet shows how to include raw assets in a .NET MAUI project file (.csproj). It uses the MauiAsset Build Action to automatically handle the deployment of assets placed in the Resources\\Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/Map/MapDemo/WorkingWithMaps/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in Project File (XML)\nDESCRIPTION: This XML snippet demonstrates how to include raw assets in the MAUI project file (.csproj) for automatic deployment with the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/PlatformIntegration/PlatformIntegrationDemos/PlatformIntegrationDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset Using FileSystem in C#\nDESCRIPTION: This C# code demonstrates how to access a deployed asset file using the Essentials FileSystem API in a MAUI application. It opens a file named 'AboutAssets.txt' from the app package and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/SkiaSharp/CatClock/CatClock/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Assets Using Essentials\nDESCRIPTION: This C# code snippet shows how to asynchronously load and read a raw asset file from the application package in a .NET MAUI application. It uses the Essentials API to open and read from the asset file named \"AboutAssets.txt\".\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/WebServices/TodoREST/TodoREST/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Assets with .NET MAUI Essentials\nDESCRIPTION: This C# snippet demonstrates how to load a raw asset included in a .NET MAUI package using the Essentials API. It opens a file named 'AboutAssets.txt' from the application package and reads its contents using a StreamReader. This example assumes the 'AboutAssets.txt' file is included and deployed correctly using a MauiAsset Build Action.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/CollectionViewDemos/CollectionViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets in .NET MAUI Application\nDESCRIPTION: This C# code demonstrates how to access a deployed raw asset file in a .NET MAUI application using the Essentials FileSystem API. It opens a file named 'AboutAssets.txt' from the application package, reads its contents using a StreamReader, and stores the content in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Tutorials/ConvertToMvvm/code/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed MAUI Assets with Essentials\nDESCRIPTION: This C# snippet demonstrates how to asynchronously load a deployed asset in a .NET MAUI application. It opens the file `AboutAssets.txt` from the application package using `FileSystem.OpenAppPackageFileAsync` and reads its contents with a `StreamReader`. This method requires both the `Essentials` library for file system access and the `System.IO` namespace for reading streams.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/ControlGallery/ControlGallery/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in .NET Project\nDESCRIPTION: The XML snippet demonstrates how to configure the deployment of raw assets in a .NET MAUI project using the `MauiAsset` Build Action. This configuration ensures that all assets within the specified directory are included in the application package. No specific prerequisites other than a .NET MAUI project are required.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/ShapesDemos/ShapesDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets in .NET MAUI Application\nDESCRIPTION: This C# code demonstrates how to load a raw asset file in a .NET MAUI application using the FileSystem class from .NET MAUI Essentials. It opens a file named 'AboutAssets.txt' from the app package and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/DataBindingDemos/DataBindingDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in Project File\nDESCRIPTION: XML configuration for including raw assets in a .NET MAUI project, automatically deploying files from the Resources\\Raw directory with a dynamic logical naming strategy\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Layouts/GridDemos/GridDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Reading Deployed Assets in .NET MAUI\nDESCRIPTION: This C# function demonstrates how to asynchronously load an asset named 'AboutAssets.txt' using the FileSystem class of .NET MAUI. It opens the asset file, reads its contents, and stores them as a string. Ensure the asset is correctly defined in the project file as a MauiAsset.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/SkiaSharp/PhotoPuzzle/PhotoPuzzle/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Maui Assets with Essentials in C#\nDESCRIPTION: Demonstrates how to load and read a raw asset file named 'AboutAssets.txt' in a .NET MAUI application using the Essentials API to asynchronously open and read the file contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Layouts/CustomLayoutDemos/CustomLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maui Assets in .NET XML\nDESCRIPTION: This XML snippet illustrates how to utilize the MauiAsset Build Action to mark files in the 'Resources\\Raw' directory for automatic deployment with a .NET MAUI application. The 'Include' attribute specifies the directory path, and 'LogicalName' constructs the path within the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Layouts/BindableLayoutDemos/BindableLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Assets using FileSystem in .NET MAUI (C#)\nDESCRIPTION: This C# code snippet demonstrates how to access a raw asset that has been deployed with the application. It uses the `FileSystem.OpenAppPackageFileAsync` method to open a stream to the asset and then reads the contents of the file.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Fundamentals/Tooltips/TooltipsSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n    {\n        using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n        using var reader = new StreamReader(stream);\n\n        var contents = reader.ReadToEnd();\n    }\n```\n\n----------------------------------------\n\nTITLE: Pushing NuGet Package to Azure DevOps Internal Feed in GitHub Actions\nDESCRIPTION: This YAML snippet shows how to push a NuGet package to an Azure DevOps internal feed using GitHub Actions. It includes steps for setting up .NET Core and pushing the package with authentication.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README_DevOps.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Setup .NET Core\n  uses: actions/setup-dotnet@v1\n  with:\n    dotnet-version: ${{ env.DOTNETVERSION }}\n    source-url: ${{ env.AZURE_ARTIFACTS_FEED_URL }}\n  env:\n    NUGET_AUTH_TOKEN: ${{ secrets.AZURE_DEVOPS_TOKEN }} \n\n- name: Push nuget to Azure DevOps Internal Feed\n  run: |\n    dotnet nuget push --api-key AzureArtifacts -s foo.nupkg\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj\nDESCRIPTION: This XML snippet shows how to configure the MauiAsset Build Action in the project file to include all files from the Resources\\Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Layouts/BindableLayoutDemos/BindableLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading a Maui Asset Asynchronously in C#\nDESCRIPTION: This C# code snippet demonstrates how to load a raw asset from the application's package asynchronously. It utilizes the `FileSystem` class in .NET MAUI to open a file stream and reads the contents into a string using a `StreamReader`.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/SkiaSharp/MandelbrotAnimation/MandelbrotAnimation/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\\n{\\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\\n    using var reader = new StreamReader(stream);\\n\\n    var contents = reader.ReadToEnd();\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw Assets in MAUI Project\nDESCRIPTION: Shows how to include raw assets in your MAUI project by specifying files with the 'MauiAsset' build action in your project file.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/Calculator/src/Calculator/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in Project File\nDESCRIPTION: XML configuration in .csproj file that specifies how raw assets should be included and deployed with the MAUI application. The build action preserves the directory structure and file names.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/BrushesDemos/BrushesDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets in a .NET MAUI App\nDESCRIPTION: This C# function demonstrates how to asynchronously load a text asset bundled with a .NET MAUI application using the Essentials API. Dependencies include FileSystem for file operations. The function opens the asset by name and reads its contents using a StreamReader, returning them as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Fundamentals/DataTemplateDemos/DataTemplates/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset at Runtime\nDESCRIPTION: C# async method demonstrating how to load a raw asset file from the application package using the FileSystem API. Shows proper stream handling with using statements for resource cleanup.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/ControlTemplateDemos/ControlTemplateDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset Using Essentials FileSystem\nDESCRIPTION: Shows how to asynchronously load the contents of a MAUI asset file using the Essentials FileSystem API. This method opens the file from the app package, reads its contents, and returns them as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/Calculator/src/Calculator/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File Using FileSystem\nDESCRIPTION: C# method demonstrating how to load and read a MAUI asset file asynchronously using the FileSystem API. The example shows opening a file stream and reading its contents using StreamReader.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Tutorials/CreateNetMauiApp/code/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Including Content Files in NuGet Package (XML)\nDESCRIPTION: This XML snippet shows how to include files from the 'Content' folder into the NuGet package with specific paths. The 'Pack' attribute specifies that the files should be included, and the 'PackagePath' attribute defines their location within the resulting NuGet package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    ...\n    <None Include=\"Content\\font_awesome\\*\" Pack=\"true\" PackagePath=\"\\fonts\" />\n    <None Include=\"Content\\images\\*\" Pack=\"true\" PackagePath=\"\\images\" />\n    <None Include=\"Content\\resources\\*\" Pack=\"true\" PackagePath=\"\\resources\" />\n    <None Include=\"Content\\SamplePackage.targets\" Pack=\"true\" PackagePath=\"\\build\\SamplePackage.targets\" />\n    <None Include=\"Content\\SamplePackage.targets\" Pack=\"true\" PackagePath=\"\\buildTransitive\\SamplePackage.targets\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime\nDESCRIPTION: C# code demonstrating how to load a raw asset from the application package using the FileSystem class from MAUI Essentials. The example opens a text file, reads its contents, and stores them as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/SystemThemesDemo/SystemThemesDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing MAUI App Package Files using FileSystem in C#\nDESCRIPTION: C# method demonstrating how to open and read a file from the application package using MAUI Essentials' FileSystem APIs. This example loads and reads the content of a text file.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/WordPuzzle/WordPuzzle/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj for .NET MAUI\nDESCRIPTION: This XML snippet shows how to configure the MauiAsset Build Action in the project file to include raw assets in the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/ControlTemplateDemos/ControlTemplateDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime using FileSystem\nDESCRIPTION: This C# code demonstrates how to asynchronously open and read the contents of a deployed asset file using the FileSystem API from .NET MAUI Essentials.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/BugSweeper/BugSweeper/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Assets in .NET MAUI using C#\nDESCRIPTION: This code snippet demonstrates how to asynchronously load a text asset from the application's package using the FileSystem class. It retrieves the asset, 'AboutAssets.txt', and reads its content into a string variable. It requires the 'System.IO' namespace for the StreamReader functionality and 'System.Threading.Tasks' for the async pattern.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/ListViewDemos/ListViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action in CSProj\nDESCRIPTION: XML configuration for the MauiAsset Build Action in the project file, which handles automatic deployment of raw assets in your MAUI application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Handlers/CustomizeHandlersDemo/CustomizeHandlersDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset using FileSystem in C#\nDESCRIPTION: This C# code snippet demonstrates how to access a raw asset deployed with the MAUI application. It uses `FileSystem.OpenAppPackageFileAsync` to open the asset as a stream, then reads its contents using a `StreamReader`. This method is part of the `Microsoft.Maui.Essentials` namespace.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/SwitchDemos/SwitchDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    async Task LoadMauiAsset()\n    {\n        using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n        using var reader = new StreamReader(stream);\n\n        var contents = reader.ReadToEnd();\n    }\n```\n\n----------------------------------------\n\nTITLE: Reading a Maui Asset using .NET MAUI FileSystem\nDESCRIPTION: This code snippet shows how to access a MauiAsset from your .NET MAUI application. It uses FileSystem.OpenAppPackageFileAsync to open the asset as a stream and then reads its content.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Navigation/ShellTabBarSample/ShellTabBarSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n async Task LoadMauiAsset()\n {\n  using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n  using var reader = new StreamReader(stream);\n\n  var contents = reader.ReadToEnd();\n }\n```\n\n----------------------------------------\n\nTITLE: Setting Package Metadata in csproj file (XML)\nDESCRIPTION: This XML snippet demonstrates how to define package metadata in the csproj file, including the package version, output path, and enabling package generation on build. These properties control the NuGet package creation process for the project.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    ...\n    <PackageVersion>0.0.99999-sample</PackageVersion>\n    <PackageOutputPath>../artifacts/</PackageOutputPath>\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Raw Assets at Runtime using FileSystem\nDESCRIPTION: This C# method demonstrates how to access a deployed raw asset file at runtime. It uses the FileSystem.OpenAppPackageFileAsync method to open the file as a stream, then reads its contents using a StreamReader.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/GameOfLife/GameOfLife/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Assets with Async Method in .NET MAUI C#\nDESCRIPTION: This code snippet demonstrates how to asynchronously load and read a text asset file from the application package using the FileSystem API in a .NET MAUI application. It utilizes a stream to access the file and a StreamReader to read the contents of the file. The method is expected to handle any exceptions related to file access and should be called within an asynchronous context.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Fundamentals/DataBindingDemos/DataBindingDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: FlexLayout C# Code Example\nDESCRIPTION: Shows programmatic creation and configuration of FlexLayout with child elements and layout settings in C#\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Layouts/FlexLayoutDemos/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Standalone Integration with CSS Link\nDESCRIPTION: HTML link tag for including default Open Iconic stylesheet.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset Using FileSystem in C#\nDESCRIPTION: This C# code demonstrates how to load a MAUI asset file asynchronously using the FileSystem.OpenAppPackageFileAsync method from the Essentials library. It opens a file named 'AboutAssets.txt', reads its contents using a StreamReader, and stores the content in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/GraphicsViewDemos/GraphicsViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing MauiAsset via FileSystem API in .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to access a raw asset file deployed with the application using the `FileSystem.OpenAppPackageFileAsync` method. It opens the file, reads its contents using a `StreamReader`, and stores the content in a variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Navigation/ShellMixedSample/ShellMixedSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    async Task LoadMauiAsset()\n    {\n        using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n        using var reader = new StreamReader(stream);\n\n        var contents = reader.ReadToEnd();\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File Using FileSystem in C#\nDESCRIPTION: This C# code snippet demonstrates how to load a raw asset file from the application package using the FileSystem class from .NET MAUI Essentials. It opens the 'AboutAssets.txt' file as a stream, reads its contents using a StreamReader, and stores the content in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/HyperlinkDemo/HyperlinkDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Application Asset Asynchronously\nDESCRIPTION: Demonstrates how to load a text file from the application's package using FileSystem.OpenAppPackageFileAsync, read its contents, and process the asset stream\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Layouts/FlexLayoutDemos/FlexLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset Using Essentials FileSystem\nDESCRIPTION: This C# code snippet shows how to asynchronously load a MAUI asset file using the Essentials FileSystem API. It opens the file as a stream, reads its contents, and returns them as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Beginners-Series/BeginnersTask/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Including BrowserStack.TestAdapter NuGet Package\nDESCRIPTION: This snippet demonstrates how to include the BrowserStack.TestAdapter NuGet package in the Android and iOS UI test projects to enable seamless integration with BrowserStack. Ensure the package version is specified.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UITesting/BrowserStackAppiumMaui/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"BrowserStack.TestAdapter\\\" Version=\\\"0.13.3\\\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Application Package Asset Asynchronously\nDESCRIPTION: Demonstrates how to asynchronously open and read a text file packaged with the application using FileSystem.OpenAppPackageFileAsync(). Reads the entire contents of the file into memory.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/IndicatorViewDemos/IndicatorViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MauiAsset Build Action in .NET Project File\nDESCRIPTION: Defines the build action for deploying resources to a .NET MAUI application. This XML snippet specifies that all files under the `Resources\\Raw` directory should be included in the application package using the `MauiAsset` build action and accessed based on their recursive directory structure and filename. Requires a .NET MAUI project environment.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Fundamentals/ContextMenu/ContextMenuSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Integration with CSS Link\nDESCRIPTION: HTML link tag for including Open Iconic Bootstrap stylesheet.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw Asset Deployment in MAUI\nDESCRIPTION: This XML snippet defines the MauiAsset build action for deploying raw asset files included in the project. It allows for recursive inclusion of files from the Resources/Raw directory with logical names based on their paths and extensions. The inclusion of these assets is necessary for accessing them in the application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Animations/Animations/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets at Runtime in MAUI\nDESCRIPTION: Demonstrates how to access raw assets at runtime using the FileSystem API from MAUI Essentials. The example opens a text file from the app package and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/RadioButtonDemos/RadioButtonDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MauiAsset Build Action in XML\nDESCRIPTION: This snippet shows how to define a MauiAsset Build Action in a .csproj file to include raw resources in a .NET MAUI project. The build action ensures that all files within the specified directory are packaged with the application. No external dependencies are required for this XML configuration.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/CheckBoxDemos/CheckBoxDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets in .NET MAUI Application\nDESCRIPTION: This C# code snippet demonstrates how to load a raw asset file in a .NET MAUI application using the Essentials FileSystem API. It opens the 'AboutAssets.txt' file from the app package, reads its contents using a StreamReader, and stores the content in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/WordPuzzle/WordPuzzle/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File Using FileSystem\nDESCRIPTION: Asynchronous C# method demonstrating how to load and read a MAUI asset file using FileSystem.OpenAppPackageFileAsync and StreamReader.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/PointOfSale/src/PointOfSale/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing to NuGet.org\nDESCRIPTION: Pushes the signed NuGet package to NuGet.org using an API key stored in GitHub secrets.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README_DevOps.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Push nuget to NuGet.org\n  run: |\n    dotnet nuget push **/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Deployment in .NET MAUI\nDESCRIPTION: The snippet defines a MauiAsset Build Action in the .csproj file to manage the deployment of raw assets in a .NET MAUI application. The `Include` attribute specifies the path to the assets, and the `LogicalName` is constructed using predefined macros to preserve the directory structure of the assets.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Layouts/AbsoluteLayoutDemos/AbsoluteLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj\nDESCRIPTION: This XML snippet shows how to configure the `MauiAsset` build action in the .csproj file to automatically deploy raw assets located in the `Resources\\Raw` directory and its subdirectories.  The `LogicalName` attribute defines how the assets are named during deployment, preserving the directory structure.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/ListViewDemos/ListViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\t<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Deploying Raw Assets with MauiAsset in .NET MAUI\nDESCRIPTION: Configures a .NET MAUI application to include raw assets by using the MauiAsset Build Action in the .csproj file. The pattern includes all files under the Resources\\Raw directory and allows them to be accessed programmatically in the app.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Apps/GameOfLife/GameOfLife/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\\\Raw\\\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Icons with Foundation\nDESCRIPTION: Demonstrates the HTML markup for using an Open Iconic icon with Foundation. It includes the necessary classes and attributes for proper display and accessibility.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in MAUI Project (.csproj)\nDESCRIPTION: This snippet demonstrates how to include raw assets for deployment within a MAUI application.  It uses the `MauiAsset` build action to include all files within the `Resources\\Raw` directory and its subdirectories. The `LogicalName` attribute specifies how the assets will be organized within the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/HyperlinkDemo/HyperlinkDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading a .NET MAUI Asset using Essentials\nDESCRIPTION: This C# snippet shows how to load a raw asset deployed with a .NET MAUI application using the `FileSystem.OpenAppPackageFileAsync` method. It opens a stream to the specified file and reads its contents into a string. The method uses `StreamReader` to read the file contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/HybridWebViewDemo/HybridWebViewDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n    async Task LoadMauiAsset()\n    {\n        using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n        using var reader = new StreamReader(stream);\n\n        var contents = reader.ReadToEnd();\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading a MAUI Asset File Asynchronously\nDESCRIPTION: This C# code snippet demonstrates how to load a raw asset file named 'AboutAssets.txt' from the app package asynchronously using the FileSystem class. It opens a stream to the specified file and reads its contents into a string. This is useful for displaying asset content within the application dynamically.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Animations/Animations/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\\n{\\n\\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\\n\\tusing var reader = new StreamReader(stream);\\n\\n\\tvar contents = reader.ReadToEnd();\\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File Using FileSystem\nDESCRIPTION: Asynchronous C# method demonstrating how to open and read contents of a deployed asset file using the FileSystem API. Uses StreamReader to read the entire file contents into a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Data/TodoSQLite/TodoSQLite/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File in C#\nDESCRIPTION: Shows how to asynchronously load the contents of a MAUI asset file at runtime using the FileSystem.OpenAppPackageFileAsync method from the Essentials library. The example reads the entire contents of the file into a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Navigation/ShellTabBarSample/ShellTabBarSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Packing .NET MAUI Library\nDESCRIPTION: Creates a NuGet package from the .NET MAUI library project using the specified version number.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README_DevOps.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Pack Library\n  run: |\n    dotnet pack src/SamplePackage/SamplePackage.csproj -p:PackageVersion=$VERSION -c Release\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File in C#\nDESCRIPTION: This C# code demonstrates how to asynchronously open and read the contents of an asset file named 'AboutAssets.txt' using the FileSystem class from .NET MAUI Essentials. It uses a StreamReader to read the entire content of the file.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/DataTemplateDemos/DataTemplates/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Icon Dimensions\nDESCRIPTION: CSS rules for setting consistent dimensions for SVG icons.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Asset Files in .NET MAUI\nDESCRIPTION: This C# async method demonstrates how to load and read a raw asset file using the .NET Essentials FileSystem API. The method opens the file \\\"AboutAssets.txt\\\" placed in the app package, reads its contents into a string, and requires the System.IO and System.Threading.Tasks namespaces. It outputs the file's content but does not handle exceptions.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/XAML/Fundamentals/XamlSamples/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset() {\\n\\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\\\"AboutAssets.txt\\\");\\n\\tusing var reader = new StreamReader(stream);\\n\\n\\tvar contents = reader.ReadToEnd();\\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File Using FileSystem\nDESCRIPTION: Asynchronous C# method demonstrating how to load and read contents of a deployed asset file using the FileSystem API from .NET MAUI Essentials. The method opens a file stream and uses StreamReader to read the file contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/PlatformIntegration/InvokePlatformCodeDemos/InvokePlatformCodeDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic SVG Sprite\nDESCRIPTION: Advanced method for displaying icons using SVG sprite technique, allowing for efficient icon rendering and styling\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Referencing Local NuGet Package (XML)\nDESCRIPTION: This XML snippet shows how the PackageConsumerApp project references the SamplePackage NuGet package. This allows the test application to use the library's functionality.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <PackageReference Include=\"SamplePackage\" Version=\"0.0.99999-sample\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Asset in .NET MAUI with FileSystem\nDESCRIPTION: This C# code demonstrates how to load a raw asset (e.g., \"AboutAssets.txt\") deployed with a .NET MAUI application using the `FileSystem.OpenAppPackageFileAsync` method. It asynchronously opens the specified file from the application package, reads its contents using a `StreamReader`, and stores the contents in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/SystemThemesDemo/SystemThemesDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    async Task LoadMauiAsset()\n    {\n        using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n        using var reader = new StreamReader(stream);\n\n        var contents = reader.ReadToEnd();\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Project Application ID for Push Notifications\nDESCRIPTION: Configuring the project file with the Firebase project and iOS app registration application identifier for push notification setup\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/WebServices/PushNotificationsDemo/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <ApplicationId>com.example.pushnotificationsdemo</ApplicationId>\n    <!-- Other project configuration settings -->\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Configuring FlexLayout in XAML\nDESCRIPTION: Demonstrates declarative configuration of FlexLayout with wrapping and alignment properties in XAML for multi-platform UI layout\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Layouts/FlexLayoutDemos/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .NET MAUI Project\nDESCRIPTION: This XML snippet shows how to include raw assets in a .NET MAUI project file (.csproj). It uses the MauiAsset Build Action to automatically handle the deployment of assets placed in the Resources\\Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/ContextMenu/ContextMenuSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Maui Assets in .NET Project Configuration\nDESCRIPTION: This XML code is used in a .csproj file to include raw assets located in the Resources\\Raw directory for deployment with the application package. It ensures that any files placed in this directory are automatically handled during the build process.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Apps/WordPuzzle/WordPuzzle/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Assets with Essentials in C#\nDESCRIPTION: This C# code snippet demonstrates how to asynchronously load a deployed asset called AboutAssets.txt using the Essentials library in a .NET MAUI application. It opens the asset file as a stream and reads its contents into a string. The code relies on the FileSystem API from Essentials and requires a reference to the Microsoft.Maui.Essentials namespace.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Layouts/StackLayoutDemos/StackLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime using Essentials FileSystem\nDESCRIPTION: Demonstrates how to access asset files at runtime using the MAUI Essentials FileSystem API. This async method opens an asset file as a stream and reads its contents using a StreamReader.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/Calculator/src/Calculator/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Build Appium Tests for BrowserStack\nDESCRIPTION: This command compiles the Appium tests for Android and iOS using .NET CLI. Ensure the project paths are correct relative to the working directory.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UITesting/BrowserStackAppiumMaui/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# For Android\ndotnet build BasicAppiumNunitSample/UITests.Android/UITests.Android.csproj\n\n# For iOS\ndotnet build BasicAppiumNunitSample/UITests.iOS/UITests.iOS.csproj\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File at Runtime\nDESCRIPTION: C# async method demonstrating how to load and read contents of a deployed asset file using FileSystem.OpenAppPackageFileAsync from MAUI Essentials.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/TriggersDemos/WorkingWithTriggers/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Version in GitHub Actions Workflow\nDESCRIPTION: Sets the version number for the NuGet package using a combination of major version and GitHub run ID to ensure unique versioning.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README_DevOps.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Set VERSION variable from tag\n  run: |\n    echo \"VERSION=$MAJORVERSION-$GITHUB_RUN_ID\" >> $GITHUB_ENV\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets Using .NET MAUI Essentials in C#\nDESCRIPTION: This C# code snippet demonstrates how to load a raw asset file named 'AboutAssets.txt' using the FileSystem class from .NET MAUI Essentials. It opens the file as a stream, reads its contents, and stores them in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Layouts/GridDemos/GridDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .NET MAUI Project\nDESCRIPTION: This XML snippet shows how to configure the MauiAsset build action in the .csproj file to include all files from the Resources\\Raw directory and its subdirectories as assets in the MAUI application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/DataTemplateDemos/DataTemplates/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj (XML)\nDESCRIPTION: This XML snippet configures the `MauiAsset` Build Action in the `.csproj` file to include all files under the `Resources\\Raw` directory and its subdirectories. The `LogicalName` attribute specifies how the assets will be named during deployment, preserving the directory structure and file name.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/RadioButtonDemos/RadioButtonDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets from MAUI App Package\nDESCRIPTION: C# code demonstrating how to load a raw asset file from the application package using the FileSystem class from .NET MAUI Essentials. The example opens a file asynchronously, reads its contents, and returns them as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/SwipeViewDemos/SwipeViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets Using .NET MAUI\nDESCRIPTION: This snippet illustrates how to load a raw asset file from the application package asynchronously. It uses FileSystem to open the file and StreamReader to read its contents as a string. This is fundamental for accessing any assets included in the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/GraphicsViewDemos/GraphicsViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maui Asset in XML\nDESCRIPTION: This XML snippet configures a build action (`MauiAsset`) to include raw resources from the specified directory. The files are made accessible in the application via the Essentials library. No additional dependencies are required for this configuration, but the directory structure must be correctly set within the project.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/HybridWebViewDemo/HybridWebViewDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets from MAUI Package\nDESCRIPTION: C# method demonstrating how to access deployed assets at runtime using the FileSystem class from .NET MAUI Essentials. It opens a file from the app package, reads its contents using a StreamReader, and returns the content as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/CustomLayoutDemos/CustomLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Install Appium for GitHub Actions Workflow\nDESCRIPTION: This Bash command installs Appium globally along with necessary Appium drivers for Android (UIAutomator2) and iOS (XCUITest) on the GitHub Actions runner. This setup is a prerequisite for building and running the tests.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UITesting/BrowserStackAppiumMaui/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g appium\n\n# For Android\nappium driver install uiautomator2\n\n# For iOS\nappium driver install xcuitest\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime\nDESCRIPTION: C# code demonstrating how to load raw assets from the application package using FileSystem.OpenAppPackageFileAsync and read their contents using StreamReader.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/CarouselViewDemos/CarouselViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Asset File Using .NET MAUI Essentials in C#\nDESCRIPTION: This C# code demonstrates how to load a raw asset file using .NET MAUI Essentials. It opens the 'AboutAssets.txt' file from the application package, reads its contents using a StreamReader, and stores the content in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/BehaviorsDemos/BehaviorsDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets with MauiAsset in .csproj\nDESCRIPTION: This snippet shows how to include raw assets for deployment with a .NET MAUI application. The `MauiAsset` build action within the `.csproj` file automatically handles the deployment of assets located in the `Resources\\Raw` directory and its subdirectories.  The `LogicalName` attribute defines how the assets will be named in the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/WebServices/PushNotificationsDemo/PushNotificationsDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n        <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in csproj\nDESCRIPTION: This XML snippet specifies the `MauiAsset` Build Action in the `.csproj` file to include all files in the `Resources\\Raw` directory for deployment. This configuration ensures that all assets are automatically bundled with the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/WebServices/PushNotificationsDemo/PushNotificationsDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets from MAUI Application Package in C#\nDESCRIPTION: Asynchronous method to access and read the contents of a deployed asset file using the FileSystem API from .NET MAUI Essentials. This demonstrates opening a file from the application package and reading its contents as text.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/TwoPaneView/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Icons with Foundation\nDESCRIPTION: This snippet demonstrates how to use an Open Iconic icon with the Foundation framework. The `fi-icon-name` class is used to display the desired icon. The `title` attribute provides a description of the icon, and `aria-hidden=\"true\"` hides the icon from screen readers since the title provides accessible information.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n\"<span class=\\\"fi-icon-name\\\" title=\\\"icon name\\\" aria-hidden=\\\"true\\\"></span>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .NET MAUI Project File\nDESCRIPTION: This XML snippet shows how to include the MauiAsset build action in the .csproj file. It ensures that all files in the Resources\\Raw directory and its subdirectories are deployed with the application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/BehaviorsDemos/BehaviorsDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets using FileSystem (C#)\nDESCRIPTION: This C# code snippet demonstrates how to access raw assets deployed with the application using the FileSystem.OpenAppPackageFileAsync method. It opens a stream to the asset and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/ThemingDemo/ThemingDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n  async Task LoadMauiAsset()\n  {\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n  }\n```\n\n----------------------------------------\n\nTITLE: Referencing Additional Packages in .NET MAUI Project\nDESCRIPTION: This snippet includes references to the Microsoft.SourceLink.GitHub and System.Management packages. The former aids in linking source code for debugging, while the latter provides system management functionalities specific to Windows builds.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <PackageReference Include=\"Microsoft.SourceLink.GitHub\" Version=\"1.0.0\" PrivateAssets=\"all\" IsImplicitlyDefined=\"true\" />\n    <PackageReference Include=\"System.Management\" Version=\"7.0.0\" Condition=\"$(TargetFramework.Contains('-windows')) == true\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj\nDESCRIPTION: This XML configuration snippet is used in the .csproj file of a .NET MAUI application to include raw assets located in the Resources\\Raw directory. These assets are then automatically deployed with the application package. The LogicalName property ensures the assets maintain their directory structure within the package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/WebServices/TodoREST/TodoREST/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .NET MAUI Project\nDESCRIPTION: This XML snippet demonstrates how to include raw assets in a .NET MAUI project using the MauiAsset Build Action within the .csproj file. It ensures that all files in the Resources\\Raw directory and its subdirectories are deployed with the application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/WordPuzzle/WordPuzzle/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in MAUI Project\nDESCRIPTION: This snippet demonstrates how to include raw assets in a MAUI project using the `MauiAsset` build action in the `.csproj` file. It specifies the files to include, their logical name within the application package, and uses the `RecursiveDir`, `Filename`, and `Extension` properties to construct the logical name.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/RefreshViewDemo/RefreshViewDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n        <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime with FileSystem API\nDESCRIPTION: C# method demonstrating how to load a raw asset file from the application package using the FileSystem API. The example opens a file stream, reads its contents with a StreamReader, and returns the text content.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/BrushesDemos/BrushesDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Assets in Maui Application\nDESCRIPTION: This C# code snippet demonstrates how to load and read contents from a deployed asset file in a .NET Maui application asynchronously. It utilizes FileSystem.OpenAppPackageFileAsync to open the asset file and a StreamReader to read its contents into a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/GraphicsViewDemos/GraphicsViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Project Exclusion - NuGet Package Consumer\nDESCRIPTION: Excludes a NuGet package consumer test project.  This project must be built after the NuGet package has been created. Adapting the standard build process to handle this dependency is considered to have limited benefit.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/eng/excluded_projects_windows.txt#2025-04-21_snippet_4\n\nLANGUAGE: None\nCODE:\n```\n\".\\/9.0/Packaging/NuGetWithMSBuildFiles/src/PackageConsumerApp/PackageConsumerApp.csproj\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action in .csproj\nDESCRIPTION: XML configuration that automatically handles the deployment of assets placed in the Resources/Raw directory to your MAUI application. The MauiAsset build action ensures files maintain their relative paths and filenames.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Layouts/AbsoluteLayoutDemos/AbsoluteLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime using C#\nDESCRIPTION: Shows how to access deployed assets at runtime using the FileSystem API from .NET MAUI Essentials. This example demonstrates opening a file as a stream and reading its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Tutorials/ConvertToMvvm/code/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Registered Fonts in MainPage.xaml - XAML - XAML\nDESCRIPTION: This snippet shows how to use a registered font in a label in the `MainPage.xaml` file. It utilizes the font alias to display a specific icon from Font Awesome.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<Label\n    Text=\"&#xf1c9;\"\n    FontFamily=\"FontAwesome\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Deployment in .NET MAUI Project File\nDESCRIPTION: This XML snippet shows how to configure the .csproj file to automatically include raw assets in the MAUI application package. It uses the MauiAsset Build Action to include all files in the Resources\\Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Tutorials/ConvertToMvvm/code/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading App Package File Asynchronously in .NET MAUI C#\nDESCRIPTION: This C# snippet demonstrates how to load a file asynchronously from the application's package using .NET MAUI Essentials' FileSystem API. It opens 'AboutAssets.txt' and reads its content using a StreamReader, enabling further processing within the application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/Map/MapDemo/WorkingWithMaps/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime with FileSystem\nDESCRIPTION: C# code demonstrating how to access deployed assets in a MAUI application using the FileSystem API. This async method opens a file from the app package, reads its contents using a StreamReader, and returns the content as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Layouts/AbsoluteLayoutDemos/AbsoluteLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Including MAUI Asset in Project File\nDESCRIPTION: This XML snippet demonstrates how to include a raw asset file in a MAUI project file. It sets the Build Action to 'MauiAsset' for deployment with the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Beginners-Series/BeginnersTask/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in Project File\nDESCRIPTION: XML snippet for including raw assets in a MAUI application package with the MauiAsset build action\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Navigation/FlyoutPageSample/FlyoutPageSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Assets with Asynchronous File Access in C#\nDESCRIPTION: This snippet demonstrates how to read a raw asset file included in a .NET MAUI application asynchronously. It leverages the FileSystem class to access the asset and StreamReader to read its contents into a string. The expected input is the name of the asset file, and the output is the content of the file as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Layouts/FlexLayoutDemos/FlexLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Build Appium BrowserStack Tests\nDESCRIPTION: Commands to build the Appium tests targeting the specific platforms Android and iOS. Building is required to compile the test projects successfully before running them on BrowserStack.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UITesting/BrowserStackAppiumMaui/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# For Android\ndotnet build BasicAppiumNunitSample/UITests.Android/UITests.Android.csproj\n\n# For iOS\ndotnet build BasicAppiumNunitSample/UITests.iOS/UITests.iOS.csproj\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .NET MAUI Project File\nDESCRIPTION: This XML snippet shows how to include raw assets in the project file (.csproj) for deployment with the application. It uses the MauiAsset Build Action to include all files in the Resources\\Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/BugSweeper/BugSweeper/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Assets Asynchronously in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to load raw asset files included in a .NET MAUI project using asynchronous file operations. The method reads an asset named 'AboutAssets.txt' from the application package, utilizing the FileSystem API to open the file and read its contents with a StreamReader. This approach is essential for accessing bundled resources in a cross-platform environment.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Tutorials/ConvertToMvvm/code/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Secrets in GitHub Actions\nDESCRIPTION: Example of accessing repository secrets in GitHub Actions workflow for secure API key usage.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README_DevOps.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Push nuget to NuGet.org\n  run: |\n    dotnet nuget push **/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Icons in HTML\nDESCRIPTION: Shows how to display an Open Iconic SVG icon as an image in HTML. The code demonstrates the basic structure for including an SVG icon with an alt attribute for accessibility.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Asset Asynchronously in C#\nDESCRIPTION: This C# asynchronous function demonstrates how to load a deployed asset using the FileSystem API in a .NET Maui application. It opens a stream to the asset file and reads its contents using a StreamReader. This function is dependent on the Maui Essentials SDK.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Apps/WordPuzzle/WordPuzzle/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets with MauiAsset in .csproj\nDESCRIPTION: This XML snippet shows how to configure the `.csproj` file to include raw assets from the `Resources\\Raw` directory.  The `MauiAsset` build action automatically handles the deployment of these assets with the application. The `LogicalName` attribute specifies how the assets are organized within the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/SwitchDemos/SwitchDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset Asynchronously - C#\nDESCRIPTION: This code snippet defines an asynchronous method to load a raw asset file from the application package. It utilizes the .NET MAUI file system to open the specified asset file and reads its contents using a StreamReader. This allows for dynamic access to application resources during runtime.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/SwitchDemos/SwitchDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Deployed Maui Assets using Essentials\nDESCRIPTION: This C# code snippet demonstrates how to load and read the contents of a deployed Maui Asset using the Essentials library in a .NET MAUI application. The method asynchronously opens the 'AboutAssets.txt' file from the app package, reads its content using a StreamReader, and stores it in a variable. This example depends on the Essentials library for file system operations.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Layouts/AbsoluteLayoutDemos/AbsoluteLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset() {\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action in Project File\nDESCRIPTION: XML configuration in .csproj file that enables automatic deployment of raw assets from the Resources/Raw directory to the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/CarouselViewDemos/CarouselViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action in Project File\nDESCRIPTION: XML configuration in the .csproj file that automatically handles the deployment of raw assets from the Resources/Raw directory to the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/Localization/LocalizationDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading and Reading a Maui Asset in C#\nDESCRIPTION: This C# snippet demonstrates how to access a raw asset that was deployed with the application. It uses the `FileSystem.OpenAppPackageFileAsync` method to open the asset file and then reads its contents into a string.  This asset is deployed because of the prior MauiAsset definition.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/SwipeViewDemos/SwipeViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    async Task LoadMauiAsset()\n    {\n        using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n        using var reader = new StreamReader(stream);\n\n        var contents = reader.ReadToEnd();\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Typeface from Asset in C#\nDESCRIPTION: This code snippet shows how to create a Typeface object from a font file placed in the assets directory. It uses the CreateFromAsset method of the Typeface class, requiring the context and the relative path of the font asset. This allows custom fonts to be loaded into the application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/Upgrading/CustomRenderer/XamarinCustomRenderer/XamarinCustomRenderer/XamarinCustomRenderer.Android/Assets/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nTypeface tf = Typeface.CreateFromAsset (Context.Assets, \"fonts/samplefont.ttf\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets in .NET MAUI Application\nDESCRIPTION: This C# code demonstrates how to access a deployed asset file using the Essentials FileSystem API. It opens a file named 'AboutAssets.txt' from the app package, reads its contents using a StreamReader, and stores the content in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Animations/Animations/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Assets Asynchronously in C#\nDESCRIPTION: This snippet demonstrates how to load and read file contents asynchronously using the Essentials library within a MAUI application. The function `LoadMauiAsset` uses `FileSystem.OpenAppPackageFileAsync` to open a file, reads its content using a `StreamReader`, and provides the content as a string. The function is asynchronous and returns `Task`. The file ('AboutAssets.txt') must be included in the app package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/HybridWebViewDemo/HybridWebViewDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .csproj with MauiAsset\nDESCRIPTION: This XML snippet demonstrates how to include raw assets from the `Resources\\Raw` directory (and its subdirectories) in the .NET MAUI application package. The `LogicalName` attribute specifies how the files will be named within the deployed package, preserving the directory structure.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/BrushesDemos/BrushesDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\t<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Maui Assets Using XML Build Actions\nDESCRIPTION: This XML snippet specifies the build action to include raw assets in the .NET MAUI application. By using \\\"MauiAsset\\\" in the .csproj file, any files in the specified directory are automatically bundled with the application package, making them accessible at runtime. No external dependencies are required.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/XAML/Fundamentals/XamlSamples/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets in .NET MAUI Application\nDESCRIPTION: This C# code demonstrates how to load a raw asset file in a .NET MAUI application using the FileSystem class from .NET MAUI Essentials. It opens a file named 'AboutAssets.txt' from the application package and reads its contents asynchronously.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/Map/MapDemo/WorkingWithMaps/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in MAUI Project (XML)\nDESCRIPTION: This XML snippet shows how to include raw assets in your .NET MAUI project using the MauiAsset Build Action. It automatically handles the deployment of assets to your application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/ScrollViewDemos/ScrollViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Icons with CSS\nDESCRIPTION: Provides CSS examples for sizing and coloring SVG icons from the Open Iconic set. It shows how to set dimensions and change the fill color of specific icons.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Assets in Project File\nDESCRIPTION: XML configuration needed in the .csproj file to include raw assets in the MAUI application build. This Build Action ensures assets in the Resources/Raw directory are deployed with the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/SystemThemesDemo/SystemThemesDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Assets in MAUI with FileSystem\nDESCRIPTION: This C# snippet demonstrates how to access a raw asset deployed with a MAUI application using the `FileSystem.OpenAppPackageFileAsync()` method. It opens the asset as a stream, reads its contents using a `StreamReader`, and stores the contents in a variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/RefreshViewDemo/RefreshViewDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n        async Task LoadMauiAsset()\n        {\n                using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n                using var reader = new StreamReader(stream);\n\n                var contents = reader.ReadToEnd();\n        }\n```\n\n----------------------------------------\n\nTITLE: Referencing .NET MAUI Notes App Tutorial in Markdown\nDESCRIPTION: This Markdown snippet provides a brief introduction to the code repository, explaining that it contains the implementation resulting from following the official .NET MAUI tutorial for creating a notes application. It includes a hyperlink to the tutorial for easy reference.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Tutorials/CreateNetMauiApp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Create a .NET MAUI app\n\nThis is the code created by following the [Create a .NET MAUI app](https://learn.microsoft.com/en-us/dotnet/maui/tutorials/notes-app/) tutorial.\n```\n\n----------------------------------------\n\nTITLE: Loading and Reading Assets in MAUI with C#\nDESCRIPTION: A C# method to asynchronously load and read a deployed asset file using MAUI's Essentials. The `LoadMauiAsset` function demonstrates how to open and read an asset named `AboutAssets.txt`, leveraging file system utilities in MAUI.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/WebServices/PushNotificationsDemo/PushNotificationsDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in Project File\nDESCRIPTION: XML configuration for including raw assets in a .NET MAUI project, using MauiAsset build action to automatically deploy assets with the application package\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Layouts/FlexLayoutDemos/FlexLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including a Maui Asset in .NET MAUI Project File\nDESCRIPTION: This snippet demonstrates how to include a raw asset in your .NET MAUI project. By setting the Build Action to \"MauiAsset\", the file will be included in the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Navigation/ShellTabBarSample/ShellTabBarSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets using .NET MAUI Essentials\nDESCRIPTION: This C# code snippet demonstrates how to access a deployed raw asset within a .NET MAUI application.  It uses `FileSystem.OpenAppPackageFileAsync` to open a stream to the asset and then reads the contents of the file. The `AboutAssets.txt` file name is used as an example.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/TwoPaneView/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    async Task LoadMauiAsset()\n    {\n        using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n        using var reader = new StreamReader(stream);\n\n        var contents = reader.ReadToEnd();\n    }\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .NET MAUI Project\nDESCRIPTION: This XML snippet shows how to include raw assets in a .NET MAUI project file (.csproj). It uses the MauiAsset Build Action to automatically handle the deployment of assets placed in the Resources\\Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/SwitchDemos/SwitchDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Assets Asynchronously with .NET MAUI - C#\nDESCRIPTION: This code snippet demonstrates how to load a raw asset file asynchronously in a .NET MAUI application. It utilizes the `FileSystem.OpenAppPackageFileAsync` method to open a file located in the app's package, and it reads the file contents asynchronously using a `StreamReader`. The method returns the content of the file as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/RadioButtonDemos/RadioButtonDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset in Project File\nDESCRIPTION: Demonstrates how to configure a file as a MAUI asset in the project file using the MauiAsset build action.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Navigation/ShellTabBarSample/ShellTabBarSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Assets in .NET MAUI with C#\nDESCRIPTION: The C# method demonstrates how to asynchronously open and read a file from the app package using the FileSystem class in .NET MAUI. This method uses StreamReader to read the contents of the file included as a MauiAsset.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/TableViewDemos/TableViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset() {\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action\nDESCRIPTION: XML configuration in .csproj file that defines how raw assets should be included in the MAUI application build process. The MauiAsset build action automatically handles deployment of files from the Resources/Raw directory.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/DataTemplateDemos/DataTemplates/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Assets with FileSystem Essentials in .NET MAUI\nDESCRIPTION: This C# snippet demonstrates how to read a deployed asset using .NET MAUI's Essentials library. The `OpenAppPackageFileAsync` method asynchronously opens an asset file from the app package, and its contents are read using a `StreamReader`. The code is intended for use within an asynchronous method and requires using directives for `System.IO` and `System.Threading.Tasks`.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Layouts/AbsoluteLayoutDemos/AbsoluteLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset() {\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\\\"AboutAssets.txt\\\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj for .NET MAUI\nDESCRIPTION: This XML snippet demonstrates how to configure the MauiAsset Build Action in the project file to include raw assets from the Resources\\Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/DeveloperBalance/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Maui Asset in .csproj\nDESCRIPTION: This XML snippet outlines how to define raw assets in the project's `.csproj` file using the `MauiAsset` build action. The specified files will be included in the build package, allowing the application to access them at runtime.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/SkiaSharp/SkiaSharpDemos/SkiaSharpDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Assets Asynchronously with .NET MAUI Essentials in C#\nDESCRIPTION: This C# code snippet illustrates how to load raw asset files asynchronously using the .NET MAUI Essentials library. The method 'LoadMauiAsset' reads an asset named 'AboutAssets.txt' using the 'FileSystem.OpenAppPackageFileAsync' method. The inputs involve the file name, and the expected output is the file's content as a string. It requires .NET MAUI Essentials to be properly configured and included in the project.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/CarouselViewDemos/CarouselViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj for Raw Assets\nDESCRIPTION: XML configuration for the project file that automatically deploys raw asset files to the application package. The MauiAsset Build Action ensures files in the Resources/Raw directory are included in the final package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/SwipeViewDemos/SwipeViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Using Icons on its own\nDESCRIPTION: This snippet demonstrates how to use an Open Iconic icon with the default stylesheet. The `oi` class and `data-glyph` attribute are used to display the desired icon. The `title` attribute provides a description of the icon, and `aria-hidden=\"true\"` hides the icon from screen readers since the title provides accessible information.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n\"<span class=\\\"oi\\\" data-glyph=\\\"icon-name\\\" title=\\\"icon name\\\" aria-hidden=\\\"true\\\"></span>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action in Project File\nDESCRIPTION: XML configuration that specifies how raw assets should be included and deployed with the MAUI application. Uses the MauiAsset Build Action to include all files from the Resources/Raw directory.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/SkiaSharp/PhotoPuzzle/PhotoPuzzle/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset Using FileSystem in C#\nDESCRIPTION: This C# code demonstrates how to access a deployed MAUI asset using the FileSystem class from .NET MAUI Essentials. It opens a file asynchronously and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UITesting/BrowserStackAppiumMaui/BasicAppiumNunitSample/MauiApp/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Icons Standalone\nDESCRIPTION: Demonstrates how to use Open Iconic icons without a framework. This snippet shows the HTML structure for displaying an icon using the default Open Iconic classes and data attributes.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Loading Assets with Async Method in C#\nDESCRIPTION: This snippet defines an asynchronous method to load a text file from the application package using .NET MAUI Essentials. It reads the content of 'AboutAssets.txt' and makes it available for use within the application. Required dependencies: 'System.IO' and 'Microsoft.Maui.Essentials'.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Layouts/StackLayoutDemos/StackLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Including Maui Asset in .csproj file\nDESCRIPTION: This snippet demonstrates how to include a raw asset file in a .NET MAUI project by adding a <MauiAsset> element to the .csproj file.  The Build Action of \"MauiAsset\" ensures that the file is deployed with the application package. The Include attribute specifies the path to the asset file relative to the project file.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/Upgrading/CustomRenderer/MauiCustomRenderer/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets Using FileSystem in C#\nDESCRIPTION: This C# code snippet demonstrates how to load a deployed asset file at runtime using the FileSystem API from .NET MAUI Essentials. It opens the 'AboutAssets.txt' file from the application package, reads its contents using a StreamReader, and stores the result in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/SkiaSharp/SpinPaint/SpinPaint/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj for .NET MAUI\nDESCRIPTION: This XML snippet shows how to configure the MauiAsset Build Action in the project file to include raw assets in the application package. It specifies that all files in the Resources\\Raw directory and its subdirectories should be included with their relative path and filename as the logical name.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/HyperlinkDemo/HyperlinkDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in Project File\nDESCRIPTION: XML configuration to include raw assets for automatic deployment with the MAUI application package. Uses MauiAsset build action to recursively include all files from Resources\\Raw directory.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/SwipeViewDemos/SwipeViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj for MAUI Resources\nDESCRIPTION: XML configuration for the .csproj file that handles automatic deployment of raw assets from the Resources/Raw directory to the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/WordPuzzle/WordPuzzle/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset at Runtime\nDESCRIPTION: Asynchronous C# method demonstrating how to load a MAUI asset file using FileSystem.OpenAppPackageFileAsync and read its contents using StreamReader\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/PointOfSale/src/PointOfSale/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MtouchLink in Microsoft.Maui.Controls.Build.Tasks.targets\nDESCRIPTION: This XML snippet from the Microsoft.Maui.Controls.Build.Tasks package demonstrates how to conditionally set the MtouchLink property for iOS builds. It's an example of using framework-specific build folders in NuGet packages.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project>\n  <PropertyGroup>\n    <MtouchLink Condition=\"'$(MtouchLink)' == '' and '$(Configuration)' == 'Debug' and '$(UseInterpreter)' == 'true'\">None</MtouchLink>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed MAUI Assets in C#\nDESCRIPTION: This C# code snippet demonstrates how to access a deployed asset asynchronously within a .NET MAUI application. It uses FileSystem.OpenAppPackageFileAsync to open a file named 'AboutAssets.txt' from the app package. The file contents are read using a StreamReader, returning the full contents of the file as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/PlatformIntegration/InvokePlatformCodeDemos/InvokePlatformCodeDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment with XML\nDESCRIPTION: XML configuration to include an asset file with the MauiAsset build action, ensuring it will be packaged with the application\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Navigation/TabbedPage/TabbedPage/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Defining MAUI Assets in .NET CSPROJ\nDESCRIPTION: This XML snippet specifies how to include raw assets in your .NET MAUI application. The `MauiAsset` build action is used to automatically deploy assets from the `Resources\\Raw` directory by recursively including all files with their logical names intact. This setup ensures the assets are packaged and accessible within the application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/ControlGallery/ControlGallery/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action\nDESCRIPTION: MSBuild configuration that specifies how raw assets should be included in the MAUI application package. Files in the Resources/Raw directory and its subdirectories will be automatically deployed.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/GameOfLife/GameOfLife/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset Using FileSystem in C#\nDESCRIPTION: This C# code snippet shows how to asynchronously load a MAUI asset file using the FileSystem class from .NET MAUI Essentials. It opens the 'AboutAssets.txt' file from the app package, reads its contents using a StreamReader, and stores the content in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/PlatformIntegration/PlatformIntegrationDemos/PlatformIntegrationDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in XML\nDESCRIPTION: This snippet demonstrates how to configure the `MauiAsset` build action in a .NET MAUI project's `.csproj` file to ensure raw assets located in the `Resources\\Raw` directory are included in the application package. No dependencies are required other than a .NET MAUI project structure.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/SkiaSharp/PhotoPuzzle/PhotoPuzzle/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Asset using .NET MAUI in C#\nDESCRIPTION: This snippet shows how to load a Maui asset asynchronously from the application package using the FileSystem API. It reads the contents of the specified asset file and utilizes asynchronous programming paradigms in C#.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Apps/Calculator/src/Calculator/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action\nDESCRIPTION: XML configuration in .csproj file that defines how raw assets should be included and deployed with the MAUI application package\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Data/TodoSQLite/TodoSQLite/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Assets in Project File\nDESCRIPTION: This XML snippet shows the MauiAsset Build Action that should be included in your .csproj file to automatically deploy raw assets with your application. The LogicalName attribute preserves the directory structure.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/RefreshViewDemo/RefreshViewDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets with MauiAsset\nDESCRIPTION: This snippet shows how to include all files in the `Resources\\Raw` directory and its subdirectories as raw assets in a .NET MAUI project.  The `LogicalName` attribute specifies how the files will be named within the application package.  This build action is defined within the .csproj file.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/SkiaSharp/SpinPaint/SpinPaint/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Inclusion in MAUI .csproj\nDESCRIPTION: This code snippet demonstrates how to use the 'MauiAsset' Build Action in a .csproj file to include raw assets from the 'Resources\\Raw' directory into a .NET MAUI project. No additional dependencies are required. It will recursively include all files and preserve their logical names for access within the application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/Shell/Xaminals/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\\\Raw\\\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .NET MAUI Project\nDESCRIPTION: This XML snippet shows how to include raw assets in a .NET MAUI project using the MauiAsset Build Action. It ensures that all files in the Resources\\Raw directory and its subdirectories are deployed with the application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/SkiaSharp/MandelbrotAnimation/MandelbrotAnimation/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action\nDESCRIPTION: XML configuration in .csproj file that specifies how raw assets should be included and deployed with the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Handlers/CustomizeHandlersDemo/CustomizeHandlersDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in MAUI Project File\nDESCRIPTION: This XML snippet shows how to configure the MauiAsset Build Action in the .csproj file to include raw assets in the MAUI application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/SkiaSharp/SkiaSharpDemos/SkiaSharpDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets Asynchronously in C#\nDESCRIPTION: The C# code snippet demonstrates how to asynchronously load and read the contents of a text file included as a MAUI asset using the Essentials API. It utilizes the 'FileSystem.OpenAppPackageFileAsync' method to access the file and 'StreamReader' to read its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Navigation/ShellFlyoutSample/ShellFlyoutSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets in .NET MAUI\nDESCRIPTION: This C# code demonstrates how to access a raw asset deployed with a .NET MAUI application using the `FileSystem.OpenAppPackageFileAsync` method. It reads the content of the asset file into a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UITesting/BasicAppiumNunitSample/MauiApp/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    async Task LoadMauiAsset()\n    {\n        using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n        using var reader = new StreamReader(stream);\n\n        var contents = reader.ReadToEnd();\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing SkiaSharp in .NET MAUI Application\nDESCRIPTION: Demonstrates the setup of SkiaSharp in a .NET MAUI application by configuring the MauiAppBuilder. The code shows how to initialize SkiaSharp, configure fonts, and set up debug logging. This is a required setup step for using SkiaSharp in a .NET MAUI application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/SkiaSharp/PhotoPuzzle/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Logging;\nusing SkiaSharp.Views.Maui.Controls.Hosting;\n\nnamespace MyMauiApp;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .UseSkiaSharp()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n\n        #if DEBUG\n        builder.Logging.AddDebug();\n        #endif\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maui Asset Deployment in .NET MAUI Project\nDESCRIPTION: This XML code snippet configures the deployment of raw asset files in a .NET MAUI application. It uses the 'MauiAsset' Build Action within the .csproj file to ensure that all files in the 'Resources\\Raw' directory are included in the package. The LogicalName attribute specifies how these files will be accessed within the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Fundamentals/ControlTemplateDemos/ControlTemplateDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action in Project File\nDESCRIPTION: XML configuration that specifies how raw assets should be included in the MAUI application build. The MauiAsset build action ensures files in the Resources/Raw directory are deployed with the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/BrushesDemos/BrushesDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .NET MAUI Project\nDESCRIPTION: This XML snippet shows how to include raw assets in the .NET MAUI project file (.csproj). It uses the MauiAsset Build Action to automatically handle the deployment of assets placed in the Resources\\Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/DataBindingDemos/DataBindingDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in Project File\nDESCRIPTION: XML configuration for including raw assets in a .NET MAUI project, automatically deploying files from the Resources\\Raw directory with recursive subdirectory support\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Fundamentals/TriggersDemos/WorkingWithTriggers/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Sprite Icon Size\nDESCRIPTION: This CSS snippet demonstrates how to control the size of an SVG icon embedded using the sprite method. The width and height of the `<svg>` element are set to equal values to maintain the icon's aspect ratio.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n\".icon {\\n  width: 16px;\\n  height: 16px;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Loading and Reading Raw Assets in C# using FileSystem\nDESCRIPTION: This C# snippet demonstrates how to access a raw asset deployed with your MAUI application using `FileSystem.OpenAppPackageFileAsync`.  It opens a stream to the specified asset file (e.g., \"AboutAssets.txt\") within the application package, reads its contents using a `StreamReader`, and stores the result in the `contents` variable. Ensure the filename matches the asset deployed and included in the project.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/ContextMenu/ContextMenuSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    async Task LoadMauiAsset()\n    {\n        using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n        using var reader = new StreamReader(stream);\n\n        var contents = reader.ReadToEnd();\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action\nDESCRIPTION: XML configuration in .csproj file that specifies how raw assets should be included and deployed with the MAUI application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/Shell/Xaminals/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Adding BrowserStack Configuration to .NET MAUI UITests\nDESCRIPTION: The snippet shows how to include browserstack.yml configuration files in Android and iOS projects. It explains the key configurations such as BrowserStack credentials, Appium version, and application path. This setup is crucial for running tests on BrowserStack's device cloud. Both Android and iOS require separate configuration files.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UITesting/BrowserStackAppiumMaui/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuserName: \"<BROWSERSTACK_USERNAME>\"\naccessKey: \"<BROWSERSTACK_ACCESS_KEY>\"\nautomationName: \"<engine>\"\nappiumVersion: \"<version>\"\napp: \"<path-to-app>\"\nbrowserstackLocal: false\n\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic Foundation CSS\nDESCRIPTION: Shows how to include the Open Iconic Foundation CSS stylesheet in an HTML file. This is necessary when using Open Iconic icons with Foundation.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .NET MAUI\nDESCRIPTION: The snippet specifies the deployment of raw assets in a .NET MAUI application using the MauiAsset Build Action. It sets the LogicalName to include all resources under the Resources\\Raw directory, which are then accessible in the application. This configuration must be added to the .csproj file.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/ScrollViewDemos/ScrollViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including MauiAsset in XML Project File\nDESCRIPTION: Demonstrates how to include a raw asset file in the MAUI project using XML configuration. This ensures the file is deployed with the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Navigation/ShellTabBarSample/ShellTabBarSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Including Bootstrap Stylesheet\nDESCRIPTION: This snippet shows how to include the Open Iconic Bootstrap stylesheet in an HTML page.  This stylesheet provides the necessary CSS classes to use Open Iconic icons with the Bootstrap framework.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n\"<link href=\\\"/open-iconic/font/css/open-iconic-bootstrap.css\\\" rel=\\\"stylesheet\\\">\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Packages in csproj file (XML)\nDESCRIPTION: This XML snippet demonstrates how to reference NuGet packages within a csproj file. It shows how to include packages like `Microsoft.SourceLink.GitHub` for source linking and `System.Management` for accessing system management information on Windows builds.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <PackageReference Include=\"Microsoft.SourceLink.GitHub\" Version=\"1.0.0\" PrivateAssets=\"all\" IsImplicitlyDefined=\"true\" />\n    <PackageReference Include=\"System.Management\" Version=\"7.0.0\" Condition=\"$(TargetFramework.Contains('-windows')) == true\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets in .NET MAUI Application\nDESCRIPTION: This C# code demonstrates how to load a raw asset file in a .NET MAUI application using the FileSystem class from .NET MAUI Essentials. It opens a file named 'AboutAssets.txt' from the application package and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/ContextMenu/ContextMenuSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Including Bootstrap Icon Stylesheet\nDESCRIPTION: HTML link tag for including Open Iconic Bootstrap stylesheet.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File at Runtime\nDESCRIPTION: Asynchronous method demonstrating how to load and read a MAUI asset file using FileSystem.OpenAppPackageFileAsync and StreamReader\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Navigation/TabbedPage/TabbedPage/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action\nDESCRIPTION: XML configuration in .csproj file to include raw assets for deployment with the MAUI application. This build action ensures all files in Resources\\Raw directory are included in the final package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/Localization/LocalizationDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Project Exclusion - BrowserStack Android\nDESCRIPTION: Excludes a BrowserStack Appium test project for Android.  These test projects require specific configurations and a paid BrowserStack account to function, making them unsuitable for standard build processes.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/eng/excluded_projects_windows.txt#2025-04-21_snippet_2\n\nLANGUAGE: None\nCODE:\n```\n\".\\/9.0/UITesting/BrowserStackAppiumMaui/BasicAppiumNunitSample/UITests.Android/UITests.Android.csproj\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Deployment in .NET MAUI Project File\nDESCRIPTION: This XML snippet demonstrates how to include raw assets in the build process of a .NET MAUI application. It uses the MauiAsset Build Action to automatically deploy files from the Resources\\Raw directory.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/ControlGallery/ControlGallery/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets Programmatically (C#)\nDESCRIPTION: This C# code snippet demonstrates how to access and read the contents of a deployed MAUI asset file using the FileSystem class from .NET MAUI Essentials.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/PlatformIntegration/PlatformIntegrationDemos/PlatformIntegrationDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG Icons Using Image Tag\nDESCRIPTION: Basic implementation of Open Iconic SVG icons using the HTML img tag with proper alt attribute for accessibility.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Setting Up Images in MainPage.xaml - XAML - XAML\nDESCRIPTION: This snippet demonstrates the inclusion of an image in a .NET MAUI application using XAML. The image is referenced with its source attribute set to 'sample_bot.png'.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<Image\n    Source=\"sample_bot.png\"\n    HeightRequest=\"185\"\n    Aspect=\"AspectFit\" />\n```\n\n----------------------------------------\n\nTITLE: Using Standalone Icon Classes\nDESCRIPTION: HTML markup for displaying icons using default Open Iconic classes.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Loading Assets Asynchronously in .NET MAUI - C#\nDESCRIPTION: This snippet demonstrates how to load a raw asset file, 'AboutAssets.txt', from the application's package using asynchronous file operations. It utilizes the .NET MAUI Essentials FileSystem to open the asset and reads its content using a StreamReader. The expected output is the contents of the 'AboutAssets.txt' file as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/CollectionViewDemos/CollectionViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset in Build XML\nDESCRIPTION: XML configuration to include raw assets in the MAUI application build process with MauiAsset Build Action.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/PointOfSale/src/PointOfSale/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Project Exclusion - Xamarin iOS\nDESCRIPTION: Excludes a Xamarin.iOS project from the build process. This is due to the specialized build requirements of Xamarin projects that differ from standard .NET MAUI builds. The effort to adapt the build process is considered not worth the gain.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/eng/excluded_projects_windows.txt#2025-04-21_snippet_1\n\nLANGUAGE: None\nCODE:\n```\n\".\\/Upgrading/CustomRenderer/XamarinCustomRenderer/XamarinCustomRenderer/XamarinCustomRenderer.iOS/XamarinCustomRenderer.iOS.csproj\"\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in MAUI Project (.csproj)\nDESCRIPTION: This snippet configures the `MauiAsset` Build Action in the .csproj file to include all files within the `Resources\\Raw` directory (and its subdirectories) as raw assets in the MAUI application package. The `LogicalName` attribute defines how the files are named within the package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Layouts/GridDemos/GridDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Assets in .NET MAUI with C#\nDESCRIPTION: This C# method demonstrates how to asynchronously load and read the contents of a file packaged with the application. It uses the FileSystem.OpenAppPackageFileAsync method to access the file and a StreamReader to read its contents. The method requires the 'AboutAssets.txt' file to be included in the application package using the previous MauiAsset configuration.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/CheckBoxDemos/CheckBoxDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File\nDESCRIPTION: C# async method demonstrating how to load and read contents of a deployed asset file using FileSystem.OpenAppPackageFileAsync\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Data/TodoSQLite/TodoSQLite/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Loading MAUI Asset File\nDESCRIPTION: Demonstrates loading a raw asset file from the application package using FileSystem.OpenAppPackageFileAsync() method, reading its contents into a string\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Fundamentals/TriggersDemos/WorkingWithTriggers/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Assets Using .NET MAUI\nDESCRIPTION: This snippet shows how to asynchronously load a text file named 'AboutAssets.txt' from the app package using the .NET MAUI Essentials FileSystem API. It utilizes a stream to read the file's contents. Ensure that the file is included in the project with the appropriate MauiAsset build action.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/src/PackageConsumerApp/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Android Resources through Generated Resource Class in C#\nDESCRIPTION: Example of the auto-generated Resource class that provides type-safe access to Android resources. The class contains nested classes for different resource types (Drawable, Layout, Strings) with constant integer IDs representing each resource.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/PlatformIntegration/NativeEmbeddingDemo/NativeEmbeddingDemo.Droid/Resources/AboutResources.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Resource {\n    public class Drawable {\n        public const int icon = 0x123;\n    }\n\n    public class Layout {\n        public const int main = 0x456;\n    }\n\n    public class Strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action\nDESCRIPTION: XML configuration in .csproj file that specifies how raw assets should be included in the MAUI application build process. The MauiAsset build action automatically handles deployment of files from the Resources/Raw directory.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/ControlTemplateDemos/ControlTemplateDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Foundation Icon Implementation\nDESCRIPTION: HTML markup for displaying an icon using Foundation classes.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset in .NET MAUI csproj\nDESCRIPTION: This XML snippet shows how to configure the MauiAsset build action within the .csproj file of a .NET MAUI project. This build action automatically handles the deployment of raw assets stored in the specified Resources\\Raw directory, allowing them to be packaged with the application. No additional dependencies are required beyond the .NET MAUI framework.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Layouts/StackLayoutDemos/StackLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime\nDESCRIPTION: C# method demonstrating how to load raw assets from a MAUI application package using the FileSystem API from .NET MAUI Essentials. The example opens a file asynchronously and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Handlers/CustomizeHandlersDemo/CustomizeHandlersDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets in .NET MAUI - C#\nDESCRIPTION: This snippet demonstrates how to asynchronously load a raw asset file in a .NET MAUI application. It uses the FileSystem API to obtain a stream for the specified asset and reads its contents using a StreamReader. The asset must be included in the project with the MauiAsset build action for this to work.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/ThemingDemo/ThemingDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset() {\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets using .NET MAUI Essentials\nDESCRIPTION: Shows how to asynchronously access a deployed asset named AboutAssets.txt in a .NET MAUI application using Essentials. Utilizes OpenAppPackageFileAsync and StreamReader to read the contents of the asset.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Apps/GameOfLife/GameOfLife/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Font from Asset in C#\nDESCRIPTION: This code snippet demonstrates how to load a font from an asset file in Android. It uses the `Typeface.CreateFromAsset` method to load a font file from the assets folder. It assumes that the font file \"fonts/samplefont.ttf\" has been included in the project with a Build Action of \"AndroidAsset\".\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/Upgrading/CustomRenderer/MultiProject/Entry/Android/Assets/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nTypeface tf = Typeface.CreateFromAsset (Context.Assets, \"fonts/samplefont.ttf\");\n```\n\n----------------------------------------\n\nTITLE: Running Appium BrowserStack Tests\nDESCRIPTION: The commands for executing the Appium tests on BrowserStack. This step is conducted after the test projects are successfully built. Tests are run against BrowserStack's real-device cloud, providing coverage over multiple device setups.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UITesting/BrowserStackAppiumMaui/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# For Android\ndotnet test BasicAppiumNunitSample/UITests.Android/UITests.Android.csproj\n\n# For iOS\n./dotnet test BasicAppiumNunitSample/UITests.iOS/UITests.iOS.csproj\n\n```\n\n----------------------------------------\n\nTITLE: Including MauiFont and MauiImage in SamplePackage.targets\nDESCRIPTION: This XML snippet shows how to include font and image assets in a .targets file for a NuGet package. It demonstrates setting the MauiFont and MauiImage build actions for specific files, which will be automatically included in projects consuming the package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n    <ItemGroup>\n        <MauiFont Include=\"$(MSBuildThisFileDirectory)..\\fonts\\Font Awesome 6 Free-Regular-400.otf\" Visible=\"False\">\n            <Link>%(Filename)%(Extension)</Link>\n        </MauiFont>\n        <MauiImage Include=\"$(MSBuildThisFileDirectory)..\\images\\sample_bot.svg\" Visible=\"False\">\n            <Link>%(Filename)%(Extension)</Link>\n        </MauiImage>\n    </ItemGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action in Project File\nDESCRIPTION: XML configuration in .csproj file that specifies how raw assets should be included and deployed with the MAUI application. The build action copies files from Resources\\Raw directory maintaining their structure.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/TriggersDemos/WorkingWithTriggers/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw Assets in MAUI Project File\nDESCRIPTION: Shows how to configure your .csproj file to include raw assets from the Resources/Raw directory. The MauiAsset Build Action automatically handles deployment of these assets with your application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/RadioButtonDemos/RadioButtonDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in XML\nDESCRIPTION: This XML snippet uses the <MauiAsset> Build Action to include all raw resources from the Resources\\Raw directory in the application package. The LogicalName attribute ensures correct deployment paths. Ensure the Resources\\Raw path is correctly set in your project structure.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/PlatformIntegration/PlatformIntegrationDemos/PlatformIntegrationDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Embedding an SVG Icon\nDESCRIPTION: This snippet demonstrates how to embed an Open Iconic SVG icon directly into an HTML page using the `<img>` tag. It is recommended to include an `alt` attribute for accessibility.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n\"<img src=\\\"/open-iconic/svg/icon-name.svg\\\" alt=\\\"icon name\\\">\"\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File Using FileSystem API\nDESCRIPTION: Shows how to load a MAUI asset file asynchronously using the FileSystem API and read its contents using StreamReader.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Navigation/ShellTabBarSample/ShellTabBarSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .csproj with MauiAsset\nDESCRIPTION: This snippet demonstrates how to include raw assets in your .NET MAUI project using the `MauiAsset` Build Action within your `.csproj` file.  This ensures that the files are deployed with your application package. The `LogicalName` attribute defines how the files are named and organized within the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Apps/BugSweeper/BugSweeper/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MtouchLink in MSBuild Targets File - XML - XML\nDESCRIPTION: This snippet demonstrates the configuration of the `MtouchLink` property in an MSBuild `.targets` file. This is particularly useful for setting specific build properties based on the project configuration.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project>\n  <PropertyGroup>\n    <MtouchLink Condition=\"'$(MtouchLink)' == '' and '$(Configuration)' == 'Debug' and '$(UseInterpreter)' == 'true'\">None</MtouchLink>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Icons with Bootstrap\nDESCRIPTION: Demonstrates how to use Open Iconic icons with Bootstrap classes. This snippet shows the HTML structure for displaying an icon using Bootstrap-specific classes.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .NET MAUI Project\nDESCRIPTION: This XML snippet shows how to include raw assets in a .NET MAUI project file (.csproj). It uses the MauiAsset Build Action to automatically handle the deployment of assets placed in the Resources\\Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/DataBindingDemos/DataBindingDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset in .csproj\nDESCRIPTION: This XML snippet demonstrates how to configure the `MauiAsset` build action in your `.csproj` file. It includes all files under the `Resources\\Raw` directory and its subdirectories. The `LogicalName` attribute specifies how the files will be named and organized within the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Fundamentals/Localization/LocalizationDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Foundation Icon Stylesheet\nDESCRIPTION: HTML link tag for including Open Iconic Foundation stylesheet.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Sprite Icon Color\nDESCRIPTION: This CSS snippet demonstrates how to change the color of an SVG icon embedded using the sprite method. The `fill` property of the `<use>` element is set to the desired color.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n\".icon-account-login {\\n  fill: #f00;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Maui Assets in C#\nDESCRIPTION: Demonstrates how to asynchronously read a deployed asset in a .NET MAUI application using the `FileSystem.OpenAppPackageFileAsync` method. This C# method loads the content of 'AboutAssets.txt', requiring the `Microsoft.Maui.Essentials` package. Takes no parameters and its output is the asset contents as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Fundamentals/ContextMenu/ContextMenuSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Project Exclusion - Xamarin Android\nDESCRIPTION: Excludes a Xamarin.Android project from the build process. This is likely due to the specialized build requirements of Xamarin projects that differ from standard .NET MAUI builds. The effort to adapt the build process is considered not worth the gain.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/eng/excluded_projects_windows.txt#2025-04-21_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n\".\\/Upgrading/CustomRenderer/XamarinCustomRenderer/XamarinCustomRenderer/XamarinCustomRenderer.Android/XamarinCustomRenderer.Android.csproj\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Font Awesome in Markdown\nDESCRIPTION: Shows how to reference the Font Awesome 6 Free-Regular-400 font provided under MIT license in a .NET MAUI project. The code demonstrates proper attribution for third-party resources included in the package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/src/SamplePackage/Content/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```Font Awesome 6 Free-Regular-400```\n```\n\n----------------------------------------\n\nTITLE: Using SVG Sprite in HTML\nDESCRIPTION: Demonstrates how to use the Open Iconic SVG sprite to display icons. This method allows multiple icons to be loaded with a single request, improving performance. It includes tips for styling and naming conventions.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .NET MAUI Project (csproj)\nDESCRIPTION: This snippet shows how to include raw assets for deployment within a .NET MAUI application's .csproj file using the `MauiAsset` build action. The `LogicalName` attribute defines the path where the asset will be accessible within the deployed application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UITesting/BasicAppiumNunitSample/MauiApp/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File\nDESCRIPTION: Asynchronous C# method demonstrating how to load and read a MAUI asset file using FileSystem.OpenAppPackageFileAsync. The example shows reading a text file named 'AboutAssets.txt' into a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Fundamentals/Localization/LocalizationDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj\nDESCRIPTION: XML configuration that should be included in your .csproj file to automatically deploy raw assets placed in the Resources/Raw directory. This build action ensures all files in that directory are included in the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Tutorials/CreateNetMauiApp/code/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Using SVG Sprite Icon\nDESCRIPTION: This snippet shows how to include an icon from an SVG sprite. A general class is added to the `<svg>` tag, and a unique class is added to the `<use>` tag for styling purposes.  The `xlink:href` attribute specifies the icon to use from the sprite.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n\"<svg class=\\\"icon\\\">\\n  <use xlink:href=\\\"open-iconic.svg#account-login\\\" class=\\\"icon-account-login\\\"></use>\\n</svg>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action for .NET MAUI in XML\nDESCRIPTION: This XML configuration sets up the Build Action for raw assets in a .NET MAUI project. It uses the 'MauiAsset' Build Action to include all files in the 'Resources\\Raw\\' directory and its subdirectories. This setup ensures that these files are automatically deployed with the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/PlatformIntegration/InvokePlatformCodeDemos/InvokePlatformCodeDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Defining MauiAsset Build Action in .NET MAUI Project\nDESCRIPTION: This XML snippet specifies the MauiAsset Build Action to include all files in the 'Resources\\Raw' directory and its subdirectories as assets in the .NET MAUI application. These assets are automatically deployed with the application package. No additional prerequisites are necessary.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/SkiaSharp/PhotoPuzzle/PhotoPuzzle/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\\\Raw\\\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Using Bootstrap Icon Classes\nDESCRIPTION: HTML markup for displaying icons using Bootstrap-specific classes.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Registering Fonts in MauiProgram.cs - C# - C#\nDESCRIPTION: This snippet illustrates how to register custom fonts in a .NET MAUI application within the `MauiProgram.cs` file. It adds font resources to the application builder.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.ConfigureFonts(fonts =>\n{\n    fonts.AddFont(\"Font Awesome 6 Free-Regular-400.otf\", \"FontAwesome\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj for .NET MAUI\nDESCRIPTION: This XML snippet shows how to configure the MauiAsset Build Action in the project file to include raw assets in the application package. It specifies that all files in the Resources\\Raw directory and its subdirectories should be included with their relative path and filename as the logical name.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/DeveloperBalance/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime Using FileSystem\nDESCRIPTION: Async method demonstrating how to access deployed assets in a .NET MAUI application using the FileSystem API from .NET MAUI Essentials. The sample shows opening a file as a stream and reading its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/src/PackageConsumerApp/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Icon Color Styling\nDESCRIPTION: CSS rule for customizing icon color using the fill property.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Using SVG Sprite with Icon Reference\nDESCRIPTION: Implementation of SVG sprite usage with xlink:href reference and styling classes for individual icons.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Loading a Maui Asset with Essentials\nDESCRIPTION: This C# snippet shows how to load a deployed asset named `AboutAssets.txt` from the application package using the `FileSystem.OpenAppPackageFileAsync` method. It reads the content of the file into a string using a `StreamReader`.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/ContentViewDemo/CardViewDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    async Task LoadMauiAsset()\n    {\n        using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n        using var reader = new StreamReader(stream);\n\n        var contents = reader.ReadToEnd();\n    }\n```\n\n----------------------------------------\n\nTITLE: dotnet Tool Setup for Apple Silicon Macs\nDESCRIPTION: This setup is specifically for Mac VMs with Apple Silicon chips, where additional steps for installing the BrowserStack .NET tool and setting up the appropriate .NET version are required. It is pivotal for ensuring compatibility and proper execution of tests.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UITesting/BrowserStackAppiumMaui/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install browserstack-sdk --version 1.16.3 --create-manifest-if-needed\ndotnet browserstack-sdk setup-dotnet --dotnet-path \".\" --dotnet-version \"8.0.403\" --yes\n\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Icons Standalone\nDESCRIPTION: Demonstrates the HTML markup for using an Open Iconic icon without a specific framework. It includes the necessary classes and data attributes for proper display and accessibility.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Class for Android Resources in C#\nDESCRIPTION: The class definition for managing Android resources in a Xamarin application. It provides constant integer values that represent drawable images, layout files, and strings used throughout the application. This structure aids in efficient resource management and referencing within the code.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/PlatformIntegration/NativeEmbeddingDemo/NativeEmbeddingDemo.Droid/Resources/AboutResources.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Resource {\n    public class Drawable {\n        public const int icon = 0x123;\n    }\n\n    public class Layout {\n        public const int main = 0x456;\n    }\n\n    public class Strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Asset Using File System in .NET MAUI C#\nDESCRIPTION: This code snippet loads a raw asset from the application's package using the FileSystem API in .NET MAUI. It utilizes asynchronous methods to read the contents of the asset file 'AboutAssets.txt'. The snippet highlights the use of streams and readers to access asset data effectively.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/WebServices/TodoREST/TodoREST/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset() {\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset Asynchronously with FileSystem\nDESCRIPTION: Demonstrates how to asynchronously load a raw asset file from the application package using FileSystem.OpenAppPackageFileAsync. Reads the contents of AboutAssets.txt into a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/SwipeViewDemos/SwipeViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets in .NET MAUI Application\nDESCRIPTION: This C# code demonstrates how to access and read the contents of a deployed raw asset file named 'AboutAssets.txt' using the FileSystem class from .NET MAUI Essentials. It opens the file as a stream and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/CollectionViewDemos/CollectionViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Icon Font Integration\nDESCRIPTION: Adding Open Iconic icon font stylesheet for Bootstrap and using icon markup\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG Icon Display with HTML\nDESCRIPTION: Basic implementation of displaying an Open Iconic SVG icon as an image element with proper accessibility attributes.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File\nDESCRIPTION: Asynchronous C# method demonstrating how to load and read contents of a deployed asset file using FileSystem.OpenAppPackageFileAsync\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/ThemingDemo/ThemingDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Assets Asynchronously in .NET MAUI\nDESCRIPTION: This code snippet defines an asynchronous method to load a raw asset file named 'AboutAssets.txt' from the application package using the .NET MAUI framework. It utilizes the FileSystem API to open the file and reads its contents using a StreamReader. Key parameters include the file name and its path within the application package. The expected output is the contents of the text file read into memory.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/HyperlinkDemo/HyperlinkDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Icons with Bootstrap\nDESCRIPTION: This snippet demonstrates how to use an Open Iconic icon with the Bootstrap framework. The `oi` and `oi-icon-name` classes are used to display the desired icon. The `title` attribute provides a description of the icon, and `aria-hidden=\"true\"` hides the icon from screen readers since the title provides accessible information.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n\"<span class=\\\"oi oi-icon-name\\\" title=\\\"icon name\\\" aria-hidden=\\\"true\\\"></span>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj\nDESCRIPTION: XML configuration that defines how raw assets should be included and deployed with the MAUI application. The build action copies files from the Resources/Raw directory while maintaining their relative paths.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Tutorials/CreateNetMauiApp/code/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading and Reading Maui Asset with .NET MAUI Essentials\nDESCRIPTION: The C# code snippet demonstrates how to asynchronously load and read the contents of a MauiAsset file using the FileSystem and StreamReader classes in .NET MAUI. The function `LoadMauiAsset` opens the specified file from the app package, reads its contents, and illustrates handling of file streams within async operations.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Navigation/ShellMixedSample/ShellMixedSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Assets at Runtime in .NET MAUI Application\nDESCRIPTION: This C# code demonstrates how to access deployed raw assets at runtime using the FileSystem API from .NET MAUI Essentials. It opens a package file asynchronously, reads its contents with a StreamReader, and stores the contents in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/TableViewDemos/TableViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Icons in HTML\nDESCRIPTION: Shows how to display an Open Iconic SVG icon as an image in HTML. This method treats the icon like any other image, including the use of the alt attribute for accessibility.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset Asynchronously using FileSystem\nDESCRIPTION: Demonstrates how to open and read a packaged asset file using FileSystem and StreamReader in a MAUI application\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Navigation/FlyoutPageSample/FlyoutPageSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic Default CSS\nDESCRIPTION: Shows how to include the default Open Iconic CSS file for standalone use. This links the stylesheet in the HTML head.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Accessing MAUI Assets at Runtime in C#\nDESCRIPTION: This C# code demonstrates how to load a deployed asset file (AboutAssets.txt) at runtime using the FileSystem API from .NET MAUI Essentials. It opens the file as a stream and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Layouts/StackLayoutDemos/StackLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime\nDESCRIPTION: Asynchronous C# method demonstrating how to load and read contents of a deployed asset file using FileSystem from MAUI Essentials\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UITesting/BasicAppiumNunitSample/MauiApp/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic Foundation CSS\nDESCRIPTION: Shows how to include the Open Iconic CSS file for use with Foundation. This links the stylesheet in the HTML head.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Defining MauiAsset Build Action in .csproj\nDESCRIPTION: This XML snippet shows how to include raw assets for deployment using the `MauiAsset` build action in the .csproj file. The `LogicalName` attribute specifies how the assets will be organized within the application package, preserving directory structure and filename.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/TitleBarDemo/TitleBarDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic SVG Image\nDESCRIPTION: Basic method for displaying Open Iconic icons as standard image elements with SVG files\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Raw Assets in C#\nDESCRIPTION: This snippet demonstrates how to load a raw asset file from the application's package using async methods available in .NET MAUI. It utilizes the `FileSystem` class to access the asset and reads its contents using a `StreamReader`. The expected input is the asset's filename, and the output is the content of the asset as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/IndicatorViewDemos/IndicatorViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File at Runtime\nDESCRIPTION: Demonstrates how to load a MAUI asset file asynchronously using FileSystem.OpenAppPackageFileAsync and StreamReader\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Navigation/ShellFlyoutSample/ShellFlyoutSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Reading an Asset File in .NET MAUI Using C#\nDESCRIPTION: This C# snippet demonstrates how to asynchronously read an asset file included in a .NET MAUI package. It uses the FileSystem.OpenAppPackageFileAsync method from Microsoft.Maui.Essentials to open 'AboutAssets.txt', and a StreamReader to read its contents. This example assumes the file is already included via the MauiAsset build action.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Fundamentals/ControlTemplateDemos/ControlTemplateDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MauiAsset Build Action in .csproj\nDESCRIPTION: This snippet demonstrates how to include raw assets in a .NET MAUI project by specifying the `MauiAsset` build action in the `.csproj` file.  The `LogicalName` attribute defines how the files will be organized within the application package. This is how MAUI knows to include the resource.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/SwipeViewDemos/SwipeViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Release\nDESCRIPTION: Automatically creates a GitHub release with generated release notes and uploads the NuGet package as an artifact.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README_DevOps.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Create Release and Upload Artifact to Release\n  run: gh release create ${{env.VERSION_NUMBER}} -t ${{env.VERSION_NUMBER}} *.nupkg --generate-notes\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .csproj File (XML)\nDESCRIPTION: This XML snippet shows how to configure the .csproj file to include raw assets from the Resources\\Raw directory. The LogicalName attribute specifies how the asset will be named when it is deployed with the application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/ThemingDemo/ThemingDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n  <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG Sprite Icons\nDESCRIPTION: Implementation of Open Iconic icons using SVG sprite system, which allows displaying multiple icons with a single request.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Loading MauiAsset File in C#\nDESCRIPTION: This C# code snippet demonstrates how to access a deployed raw asset using the `FileSystem.OpenAppPackageFileAsync` method. It opens a stream to the specified file, reads its contents using a `StreamReader`, and stores the contents in a string variable.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/TitleBarDemo/TitleBarDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Assets Using .NET MAUI Essentials\nDESCRIPTION: This C# snippet demonstrates how to asynchronously load a text file from the application's package using .NET MAUI Essentials. It opens the asset file 'AboutAssets.txt', reads its content, and saves it into a string. This operation requires `FileSystem` from Essentials.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Tutorials/CreateNetMauiApp/code/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Asset Asynchronously in C#\nDESCRIPTION: This snippet demonstrates how to load a raw asset file asynchronously from the application package using the .NET MAUI framework. Dependencies include `System.IO` and `Microsoft.Maui.Essentials`. The method opens a stream to read the contents of the specified asset file, which must be included in the project with the `MauiAsset` build action.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/SkiaSharp/SkiaSharpDemos/SkiaSharpDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action in Project File\nDESCRIPTION: XML configuration in .csproj file that specifies how raw assets should be included and deployed with the MAUI application. The build action copies files from the Resources/Raw directory while preserving their directory structure.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/Tooltips/TooltipsSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Default Stylesheet\nDESCRIPTION: This snippet shows how to include the default Open Iconic stylesheet in an HTML page. This stylesheet provides basic styling for Open Iconic icons without any framework dependencies.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n\"<link href=\\\"/open-iconic/font/css/open-iconic.css\\\" rel=\\\"stylesheet\\\">\"\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Asset from MAUI App Package\nDESCRIPTION: This C# code demonstrates how to access a raw asset deployed with the application package in MAUI. It uses `FileSystem.OpenAppPackageFileAsync` to open the specified file as a stream, then reads its contents into a string. This method is part of the Essentials library.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/HyperlinkDemo/HyperlinkDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\tasync Task LoadMauiAsset()\n\t{\n\t\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\t\tusing var reader = new StreamReader(stream);\n\n\t\tvar contents = reader.ReadToEnd();\n\t}\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Asset using Essentials\nDESCRIPTION: This C# code snippet demonstrates how to load a deployed Maui asset using the Essentials FileSystem API. It opens the asset file from the application package, reads its contents using a StreamReader, and then stores the contents in a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/ContentViewDemo/CardViewDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    async Task LoadMauiAsset()\n    {\n        using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n        using var reader = new StreamReader(stream);\n\n        var contents = reader.ReadToEnd();\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action in Project File\nDESCRIPTION: XML configuration in .csproj file that specifies how raw assets should be included and deployed with the MAUI application. The build action preserves directory structure and filenames.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/XAML/MarkupExtensions/MarkupExtensions/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: CSS Icon Sizing Configuration\nDESCRIPTION: CSS rules for setting consistent icon dimensions in square format.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action in Project File\nDESCRIPTION: XML configuration that defines how raw assets should be included and deployed with the MAUI application. Uses MauiAsset Build Action to include all files from the Resources/Raw directory.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Data/TodoSQLite/TodoSQLite/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Icons with CSS\nDESCRIPTION: Shows how to style SVG icons using CSS. This snippet demonstrates setting the size of the icon container and coloring the icon using the fill property.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Deployed Asset with MAUI Essentials in C#\nDESCRIPTION: This code demonstrates how to asynchronously load a deployed asset using MAUI Essentials in a .NET application. It opens a file named 'AboutAssets.txt' from the app package and reads its content. The method uses FileSystem.OpenAppPackageFileAsync and requires a compatible setup in the project so that 'AboutAssets.txt' is included as a packaged asset.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/ScrollViewDemos/ScrollViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .NET MAUI Project File\nDESCRIPTION: This XML snippet demonstrates how to include raw assets in the project file for automatic deployment with the application. It uses the MauiAsset Build Action to include all files in the Resources\\Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/PlatformIntegration/PlatformIntegrationDemos/PlatformIntegrationDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in Project File\nDESCRIPTION: XML configuration for automatically deploying raw assets in a .NET MAUI project, including recursive directory asset inclusion\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/ShapesDemos/ShapesDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Defining MauiAsset Build Action for .NET MAUI\nDESCRIPTION: This snippet defines the MauiAsset Build Action in a .NET MAUI project's .csproj file. It specifies the inclusion of all raw assets under the Resources\\Raw directory. This setup ensures that these assets are automatically deployed with the application package and can be accessed using Essentials.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/ScrollViewDemos/ScrollViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Sizing SVG Icons with CSS\nDESCRIPTION: CSS technique for setting consistent dimensions for Open Iconic SVG icons\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Loading MAUI Asset File\nDESCRIPTION: Demonstrates how to load a text asset from the application package using FileSystem.OpenAppPackageFileAsync method, reading its contents into a string\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Navigation/TabbedPage/TabbedPage/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Asset File in Android App Using C#\nDESCRIPTION: This code snippet demonstrates how to create an Android activity that accesses a raw asset file. The OnCreate method retrieves an InputStream for 'my_asset.txt' using the Assets.Open method. The snippet requires the Android framework and defines the asset to be read as part of the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/Upgrading/CustomRenderer/XamarinCustomRenderer/XamarinCustomRenderer/XamarinCustomRenderer.Android/Assets/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npublic class ReadAsset : Activity\n{\n    protected override void OnCreate (Bundle bundle)\n    {\n        base.OnCreate (bundle);\n\n        InputStream input = Assets.Open (\"my_asset.txt\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in .csproj\nDESCRIPTION: This XML snippet shows how to configure the MauiAsset Build Action in the project file to automatically deploy raw assets with the application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UITesting/BrowserStackAppiumMaui/BasicAppiumNunitSample/MauiApp/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in Project File\nDESCRIPTION: The XML configuration needed in the .csproj file to automatically include and deploy raw assets with the application. This Build Action ensures files in the Resources/Raw directory are included in the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/src/PackageConsumerApp/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Icons with CSS\nDESCRIPTION: CSS method for changing icon color using fill property\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Deployment in MAUI Project File\nDESCRIPTION: XML configuration that specifies how raw assets should be included in the MAUI application build process. This build action ensures files in the Resources/Raw directory are properly packaged with the application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/CustomLayoutDemos/CustomLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Defining the R class for Android Resources in C#\nDESCRIPTION: This code snippet demonstrates the structure of the 'R' class, automatically generated by the build system in Android projects. It provides constants (resource IDs) for accessing resources like drawables, layouts, and strings. These IDs are used to reference resources in code rather than directly using file names.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/Upgrading/CustomRenderer/MultiProject/Entry/Android/Resources/AboutResources.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class R {\n    public class drawable {\n        public const int icon = 0x123;\n    }\n\n    public class layout {\n        public const int main = 0x456;\n    }\n\n    public class strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Exclusion - BrowserStack iOS\nDESCRIPTION: Excludes a BrowserStack Appium test project for iOS.  These test projects require specific configurations and a paid BrowserStack account to function, making them unsuitable for standard build processes.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/eng/excluded_projects_windows.txt#2025-04-21_snippet_3\n\nLANGUAGE: None\nCODE:\n```\n\".\\/9.0/UITesting/BrowserStackAppiumMaui/BasicAppiumNunitSample/UITests.iOS/UITests.iOS.csproj\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Assets in Project File with XML\nDESCRIPTION: Shows how to include raw assets in a .NET MAUI project by setting the Build Action to 'MauiAsset' in the project file. This configuration ensures the file will be deployed with the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Beginners-Series/BeginnersTask/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic Bootstrap CSS\nDESCRIPTION: Shows how to include the Open Iconic CSS file for use with Bootstrap. This links the stylesheet in the HTML head.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Asset in .NET MAUI Application\nDESCRIPTION: This C# code demonstrates how to load a raw asset file in a .NET MAUI application using the FileSystem class from .NET MAUI Essentials. It opens a file named 'AboutAssets.txt' from the app package and reads its contents asynchronously.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/PlatformIntegration/LocalNotificationsDemo/LocalNotificationsDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Assets with MauiAsset Build Action\nDESCRIPTION: This snippet demonstrates how to configure the .NET MAUI project file to deploy raw assets using the MauiAsset build action. The assets are included from the Resources\\Raw directory and will be accessible at runtime.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/TwoPaneView/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Coloring SVG Icons\nDESCRIPTION: CSS rules for setting the color of SVG icons using the fill property.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic Default CSS\nDESCRIPTION: Shows how to include the default Open Iconic CSS stylesheet in an HTML file. This is used when not using a specific framework like Bootstrap or Foundation.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action\nDESCRIPTION: This XML snippet configures the MauiAsset Build Action in a .NET MAUI project's '.csproj' file to include raw resources from the 'Resources\\Raw\\' directory hierarchy. It ensures that specified files are packaged and deployed with the application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/CollectionViewDemos/CollectionViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic Bootstrap CSS\nDESCRIPTION: Shows how to include the Open Iconic Bootstrap CSS stylesheet in an HTML file. This is necessary when using Open Iconic icons with Bootstrap.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action\nDESCRIPTION: XML configuration in .csproj file that defines how raw assets should be included and deployed with the MAUI application. The build action copies files from Resources/Raw directory maintaining the directory structure.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/SkiaSharp/CatClock/CatClock/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Using Foundation Icon Classes\nDESCRIPTION: HTML markup for displaying icons using Foundation-specific classes.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in XML\nDESCRIPTION: This XML snippet shows the build action required in the .csproj file to automatically handle the deployment of raw assets with the MAUI application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/SkiaSharp/CatClock/CatClock/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action for Raw Assets in .NET MAUI\nDESCRIPTION: This XML snippet shows how to configure the MauiAsset build action in your .csproj file to automatically handle the deployment of raw assets placed in the Resources/Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/TableViewDemos/TableViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Standalone Icon Stylesheet\nDESCRIPTION: HTML link tag for including default Open Iconic stylesheet.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File at Runtime\nDESCRIPTION: C# async method demonstrating how to load and read a raw asset file using the FileSystem class from MAUI Essentials. Opens the file as a stream and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/ShapesDemos/ShapesDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in .csproj\nDESCRIPTION: This XML snippet shows how to include raw assets in your MAUI project's .csproj file. It uses the MauiAsset Build Action to automatically handle the deployment of assets from the Resources\\Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/PlatformIntegration/LocalNotificationsDemo/LocalNotificationsDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Foundation Icon Font Integration\nDESCRIPTION: Adding Open Iconic icon font stylesheet for Foundation and using icon markup\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Using SVG Sprite in HTML\nDESCRIPTION: Demonstrates how to use the Open Iconic SVG sprite to display icons. This method allows for displaying multiple icons with a single request, similar to an icon font but using SVG.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .NET MAUI Project\nDESCRIPTION: This XML snippet shows how to include raw assets in a .NET MAUI project file (.csproj). It uses the MauiAsset Build Action to automatically handle the deployment of assets placed in the Resources\\Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/GraphicsViewDemos/GraphicsViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Foundation Stylesheet\nDESCRIPTION: This snippet shows how to include the Open Iconic Foundation stylesheet in an HTML page. This stylesheet provides the necessary CSS classes to use Open Iconic icons with the Foundation framework.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n\"<link href=\\\"/open-iconic/font/css/open-iconic-foundation.css\\\" rel=\\\"stylesheet\\\">\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action XML\nDESCRIPTION: This snippet configures the MauiAsset build action in the .csproj file of a .NET MAUI application. It ensures that raw resource files located in the specified directory and its subdirectories are included in the application package. The LogicalName property is used to assign a name to each asset based on its directory and filename, which can then be accessed at runtime.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/SystemThemesDemo/SystemThemesDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File using FileSystem API\nDESCRIPTION: C# code demonstrating how to load and read the contents of a deployed asset file using the MAUI Essentials FileSystem API. The example shows opening a file stream and reading its contents asynchronously.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/Tooltips/TooltipsSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj File\nDESCRIPTION: Configuration for including raw assets in the MAUI application package. This build action automatically handles the deployment of assets stored in the Resources/Raw directory to make them accessible at runtime.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/TwoPaneView/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Icons with Foundation\nDESCRIPTION: Demonstrates how to use Open Iconic icons with Foundation classes. This snippet shows the HTML structure for displaying an icon using Foundation-specific classes.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Loading Deployed MAUI Assets at Runtime using FileSystem API\nDESCRIPTION: C# asynchronous method that demonstrates how to access a deployed asset from a MAUI application. The code opens the specified file using the FileSystem API and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/CheckBoxDemos/CheckBoxDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .NET MAUI Project File\nDESCRIPTION: This XML snippet shows how to include the MauiAsset build action in the .csproj file to automatically handle the deployment of raw assets placed in the Resources\\Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/CollectionViewDemos/CollectionViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .csproj with MauiAsset\nDESCRIPTION: This snippet shows how to include raw assets in your MAUI project by adding a `MauiAsset` item to your .csproj file.  The `LogicalName` attribute ensures that the directory structure is preserved when deploying the asset. The `%(RecursiveDir)%(Filename)%(Extension)` syntax constructs a logical path that mirrors the physical directory structure.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/ContextMenu/ContextMenuSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Defining MauiAsset Build Action in XML\nDESCRIPTION: This XML snippet demonstrates how to use the MauiAsset Build Action in a .NET MAUI .csproj file to deploy raw assets within your application package. The Include attribute specifies the path to the raw resources, ensuring automatic deployment with your application package. There are no specific parameters or constraints, but files should be placed in the specified directories for correct deployment.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/CarouselViewDemos/CarouselViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Icon Implementation\nDESCRIPTION: HTML markup for displaying an icon using Bootstrap classes.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action in Project File\nDESCRIPTION: XML configuration in the .csproj file that includes raw assets in the MAUI application build process. The MauiAsset build action specifies how files in the Resources/Raw directory and its subdirectories are deployed with the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Layouts/FlexLayoutDemos/FlexLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action in XML\nDESCRIPTION: This XML snippet demonstrates how to configure the MauiAsset Build Action in the project file (.csproj) to include raw assets in the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/ListViewDemos/ListViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .NET MAUI Project (.csproj)\nDESCRIPTION: This XML snippet configures the build process to include raw assets from the 'Resources\\Raw' directory and its subdirectories.  The `LogicalName` attribute specifies how the files will be named and organized within the application package. This allows access to the assets within the app.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/TwoPaneView/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj for .NET MAUI\nDESCRIPTION: This XML snippet defines a MauiAsset Build Action in the project file to automatically handle the deployment of raw assets to the application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/XAML/Fundamentals/XamlSamples/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .NET MAUI Project File\nDESCRIPTION: This XML snippet demonstrates how to include the MauiAsset build action in the .csproj file to automatically handle the deployment of raw assets placed in the Resources\\Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Layouts/GridDemos/GridDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Including MAUI Assets in .NET MAUI Project\nDESCRIPTION: This XML snippet specifies how to include a text file as an asset in a .NET MAUI application. 'MauiAsset' build action is used to include the 'AboutAssets.txt' file, making it accessible from the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Navigation/ShellFlyoutSample/ShellFlyoutSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\t<MauiAsset Include=\\\"AboutAssets.txt\\\" />\n```\n\n----------------------------------------\n\nTITLE: Adding MauiAsset Build Action in .NET Project\nDESCRIPTION: This XML snippet is used to include raw files as assets in a .NET MAUI project. The MauiAsset Build Action automatically manages the deployment of assets located in the specified directory. These assets can later be accessed using Essentials APIs. No external dependencies are required, but the project's .csproj file must be properly configured to support the MauiAsset Build Action.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/CarouselViewDemos/CarouselViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset in Project File\nDESCRIPTION: XML configuration to include a file as a MAUI asset in the project build process. Files marked with MauiAsset build action will be deployed with the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Navigation/TabbedPage/TabbedPage/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Defining MauiAsset Build Action in .NET MAUI Project\nDESCRIPTION: This XML snippet is used in the .csproj file of a .NET MAUI project to specify raw assets for deployment. By including a MauiAsset Build Action, designated assets within 'Resources\\Raw' and subdirectories will be automatically packaged with the application, using a logical name structure defined by the recursive directory and file properties.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/SkiaSharp/MandelbrotAnimation/MandelbrotAnimation/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Assets to MAUI Project\nDESCRIPTION: Demonstrates how to include raw assets in a .NET MAUI project by setting the Build Action to 'MauiAsset' in the project file.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Navigation/ShellFlyoutSample/ShellFlyoutSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Deploying Assets with MauiAsset Build Action\nDESCRIPTION: The MauiAsset Build Action in a .NET MAUI application's .csproj file facilitates the deployment of raw assets to the application package. The specified path pattern includes all files under 'Resources\\Raw' using recursive inclusion. This approach automates the asset inclusion process.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Fundamentals/DataTemplateDemos/DataTemplates/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading a MAUI Asset Asynchronously in C#\nDESCRIPTION: This C# asynchronous task demonstrates loading an asset file named \"AboutAssets.txt\" using the FileSystem.OpenAppPackageFileAsync method. Ensure that the file exists in the specified location and is included in the project using the MauiAsset Build Action. Expects the file to be in the application package; the output is the file's content read into a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/PlatformIntegration/PlatformIntegrationDemos/PlatformIntegrationDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets in .NET MAUI Project (csproj)\nDESCRIPTION: This XML snippet demonstrates how to include raw assets for deployment with a .NET MAUI application. The `MauiAsset` element specifies a glob pattern to include all files within the `Resources\\Raw` directory and its subdirectories. The `LogicalName` attribute defines how the files will be organized within the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/HybridWebViewDemo/HybridWebViewDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n    <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Layout: ArrangeChildren Override in C#\nDESCRIPTION: This code snippet describes the `ArrangeChildren` method which is overridden in a custom layout implementation. The `ArrangeChildren` implementation should determine where each `IView` should be placed within the given bounds, and should call `Arrange` on each `IView` with its appropriate bounds. The return value should be the actual size of the layout.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Layouts/CustomLayoutDemos/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\"Size ArrangeChildren(Rectangle bounds)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action\nDESCRIPTION: XML configuration in .csproj file that defines how raw assets should be included and deployed with the MAUI application package\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UITesting/BasicAppiumNunitSample/MauiApp/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action\nDESCRIPTION: XML configuration in .csproj file that specifies how raw assets should be included and deployed with the MAUI application. The build action copies files from Resources\\Raw directory maintaining their structure.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/ShapesDemos/ShapesDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset Asynchronously Using C#\nDESCRIPTION: This C# method demonstrates how to asynchronously load and read a text file from the app package using the `FileSystem.OpenAppPackageFileAsync` method provided by .NET MAUI Essentials. The method opens the file 'AboutAssets.txt', reads its contents using a `StreamReader`, and processes the contents. The method requires `System.IO` and `System.Threading.Tasks` namespaces and depends on the presence of the asset in the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/ShapesDemos/ShapesDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Assets using FileSystem - MAUI - C#\nDESCRIPTION: This snippet demonstrates how to access raw assets deployed with the MAUI application using the `FileSystem` API.  The `FileSystem.OpenAppPackageFileAsync` method is used to open the asset file, and then `StreamReader` reads the contents. It assumes a file named 'AboutAssets.txt' is deployed.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Layouts/CustomLayoutDemos/CustomLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    async Task LoadMauiAsset()\n    {\n        using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n        using var reader = new StreamReader(stream);\n\n        var contents = reader.ReadToEnd();\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .NET MAUI Project\nDESCRIPTION: This XML snippet shows the configuration required in the .csproj file to include raw assets in the MAUI application package. It uses the MauiAsset Build Action to automatically handle the deployment of assets from the Resources\\Raw directory.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/SkiaSharp/SpinPaint/SpinPaint/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime\nDESCRIPTION: C# method demonstrating how to load a MAUI asset file asynchronously using FileSystem.OpenAppPackageFileAsync. The example shows reading the contents of a text file named 'AboutAssets.txt' using StreamReader.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/DataTemplateDemos/DataTemplates/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action for Deployment\nDESCRIPTION: This XML snippet configures the MauiAsset Build Action in a .NET MAUI project file to automatically deploy raw assets located in the Resources\\Raw directory (including subdirectories). It defines a LogicalName for each file based on its recursive directory path, filename, and extension.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Layouts/AbsoluteLayoutDemos/AbsoluteLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Maui Asset Build Action in .csproj\nDESCRIPTION: This XML snippet outlines the MauiAsset Build Action in the .csproj configuration. It specifies that all raw files in the Resources\\Raw directory should be included as assets when building the application. The LogicalName attribute is used to determine the asset's path within the app package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Handlers/CreateHandlerDemo/VideoDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in XML\nDESCRIPTION: This XML snippet shows how to configure a MAUI application to include all raw assets under the 'Resources\\Raw' directory using the MauiAsset Build Action. These assets will be included in the app package and are referenced by their logical names.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/SkiaSharp/SkiaSharpDemos/SkiaSharpDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime with FileSystem\nDESCRIPTION: This C# method demonstrates how to access deployed assets at runtime using the FileSystem API from .NET MAUI Essentials. It opens a file as a stream, reads its contents using a StreamReader, and returns the content as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/RefreshViewDemo/RefreshViewDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Assets Asynchronously in .NET MAUI\nDESCRIPTION: This C# snippet demonstrates how to asynchronously load a text asset from the application package using the Essentials API in a .NET MAUI application. The method opens a file asynchronously and reads its contents using a StreamReader. This functionality requires the Essentials library to be available in the project. The method assumes the asset is correctly included and deployed within the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/CarouselViewDemos/CarouselViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Font Reference in Markdown\nDESCRIPTION: Shows the reference to the Font Awesome font file using inline code formatting in markdown.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/src/SamplePackage/Content/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```Font Awesome 6 Free-Regular-400```\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets in .NET MAUI Application\nDESCRIPTION: This C# code snippet demonstrates how to access a deployed asset file in a .NET MAUI application using the Essentials FileSystem API. It opens a file named 'AboutAssets.txt' from the app package and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/ControlGallery/ControlGallery/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .NET MAUI XML\nDESCRIPTION: This XML snippet in the .csproj file configures the MauiAsset Build Action to include resources located in the 'Resources/Raw/' directory in the application package. It uses the logical name pattern for recursive directory inclusion, allowing the application to access these files.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Views/Map/MapDemo/WorkingWithMaps/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Signing NuGet Package in GitHub Actions Workflow\nDESCRIPTION: This YAML snippet shows how to sign a NuGet package using dotnet nuget sign command in a GitHub Actions workflow. It includes steps for packing and signing the library.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README_DevOps.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Pack Library\n  run: |\n    dotnet pack src/SamplePackage/SamplePackage.csproj -p:PackageVersion=$VERSION -c Release\n    dotnet nuget sign MyPackage.nupkg --certificate-path <PathToTheCertificate> --timestamper <TimestampServiceURL>\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in Project File\nDESCRIPTION: XML configuration in .csproj file that specifies how raw assets should be included and deployed with the MAUI application. The build action automatically handles deployment of files from the Resources/Raw directory.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/PlatformIntegration/InvokePlatformCodeDemos/InvokePlatformCodeDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset in Project File\nDESCRIPTION: Shows how to include a raw asset file in the MAUI project using the MauiAsset build action in the project file.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Navigation/FlyoutPageSample/FlyoutPageSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File\nDESCRIPTION: Asynchronous C# method demonstrating how to load a raw asset file from the application package using the FileSystem API. Shows proper stream handling with using statements for reading file contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Handlers/CreateHandlerDemo/VideoDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets Programmatically (C#)\nDESCRIPTION: This C# code demonstrates how to access deployed assets in a .NET MAUI application using the FileSystem class from .NET MAUI Essentials. It opens a file asynchronously and reads its contents.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/ScrollViewDemos/ScrollViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset at Runtime\nDESCRIPTION: Asynchronous method demonstrating how to load and read a raw asset file from the application package using FileSystem API. The example shows reading the contents of 'AboutAssets.txt' file.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Apps/GameOfLife/GameOfLife/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action\nDESCRIPTION: XML configuration in .csproj file that specifies how raw assets should be included and deployed with the MAUI application. Assets placed in the Resources/Raw directory will be automatically included in the package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Handlers/CreateHandlerDemo/VideoDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw Assets in MAUI Project\nDESCRIPTION: A build action configuration that specifies how raw assets should be included in a MAUI application. It uses the MauiAsset tag to include all files from the Resources/Raw directory and its subdirectories.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/WebServices/TodoREST/TodoREST/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in Project File\nDESCRIPTION: XML configuration for automatically deploying raw assets with a MAUI application using the MauiAsset build action. Includes all files in the Resources\\Raw directory and preserves their directory structure.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/TitleBarDemo/TitleBarDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Publishing to Azure DevOps Feed\nDESCRIPTION: Configures .NET environment and pushes the package to an Azure DevOps internal feed using authentication token.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README_DevOps.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Setup .NET Core\n  uses: actions/setup-dotnet@v1\n  with:\n    dotnet-version: ${{ env.DOTNETVERSION }}\n    source-url: ${{ env.AZURE_ARTIFACTS_FEED_URL }}\n  env:\n    NUGET_AUTH_TOKEN: ${{ secrets.AZURE_DEVOPS_TOKEN }} \n\n- name: Push nuget to Azure DevOps Internal Feed\n  run: |\n    dotnet nuget push --api-key AzureArtifacts -s foo.nupkg\n```\n\n----------------------------------------\n\nTITLE: Including MauiAssets with Build Action in XML\nDESCRIPTION: This XML code snippet configures the .NET MAUI project to include all files within the Resources\\Raw directory as MauiAssets. It ensures that the specified assets are packaged with the application during the build process.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/TableViewDemos/TableViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\Raw\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in Project File\nDESCRIPTION: XML configuration for including raw assets in the MAUI application build process. This build action ensures all files in the Resources/Raw directory are deployed with the application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/WebServices/PushNotificationsDemo/PushNotificationsDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset from Application Package\nDESCRIPTION: Asynchronous method to open and read a text file from the application's package using FileSystem.OpenAppPackageFileAsync. Demonstrates reading the contents of a raw asset file.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/Views/TitleBarDemo/TitleBarDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Assets in Project File\nDESCRIPTION: MSBuild configuration that includes all files from the Resources/Raw directory in the application package. The LogicalName attribute determines the path used to access the file at runtime.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Views/IndicatorViewDemos/IndicatorViewDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Asset in .NET MAUI - C#\nDESCRIPTION: The snippet demonstrates how to asynchronously load a raw asset from the application package in a .NET MAUI application. It uses the FileSystem API to access the asset and a StreamReader to read its contents. The expected input is the asset filename, and the output is the contents of the asset as a string.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/UserInterface/Handlers/CustomizeHandlersDemo/CustomizeHandlersDemo/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset Using FileSystem in C#\nDESCRIPTION: This C# code demonstrates how to asynchronously open and read the contents of a deployed asset file using the FileSystem class from .NET MAUI Essentials.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/UserInterface/Layouts/BindableLayoutDemos/BindableLayoutDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Configuration YAML\nDESCRIPTION: Configuration YAML defining the project metadata, including supported languages and target platforms for the native embedding sample.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/PlatformIntegration/NativeEmbeddingDemo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: .NET MAUI - Native embedding\ndescription: This sample demonstrates how to embed a .NET MAUI UI in a .NET Android, .NET iOS, .NET Mac Catalyst, and WinUI app.\npage_type: sample\nlanguages:\n- csharp\n- xaml\nproducts:\n- dotnet-maui\nurlFragment: platformintegration-nativeembedding\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in .csproj\nDESCRIPTION: This XML snippet shows how to configure the MauiAsset Build Action in the project file to automatically include raw assets in the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/BugSweeper/BugSweeper/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Signing NuGet Package\nDESCRIPTION: Signs the NuGet package for content integrity verification and authenticity using a certificate.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Packaging/NuGetWithMSBuildFiles/README_DevOps.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Pack Library\n  run: |\n    dotnet pack src/SamplePackage/SamplePackage.csproj -p:PackageVersion=$VERSION -c Release\n    dotnet nuget sign MyPackage.nupkg --certificate-path <PathToTheCertificate> --timestamper <TimestampServiceURL>\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File at Runtime\nDESCRIPTION: C# method demonstrating how to load and read contents of a deployed asset file using FileSystem.OpenAppPackageFileAsync method from MAUI Essentials.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/Fundamentals/BehaviorsDemos/BehaviorsDemos/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MauiAsset Build Action in XML\nDESCRIPTION: The XML snippet assigns the 'MauiAsset' build action to a file, 'AboutAssets.txt', to ensure it is included as part of the application package. This action is crucial for raw assets being accessible in a .NET MAUI application.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Navigation/FlyoutPageSample/FlyoutPageSample/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset in Project File\nDESCRIPTION: Demonstrates how to include a file as a MAUI asset in the project configuration. This allows the file to be deployed with the application package.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/Calculator/src/Calculator/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Resource IDs in Android .NET MAUI Project\nDESCRIPTION: This snippet demonstrates how the Resource class is automatically generated by the build system for an Android application. It contains identifiers for each resource file included in the application, allowing developers to reference resources using constant values rather than file paths. No external dependencies are necessary.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/Upgrading/CustomRenderer/XamarinCustomRenderer/XamarinCustomRenderer/XamarinCustomRenderer.Android/Resources/AboutResources.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Resource {\n    public class drawable {\n        public const int icon = 0x123;\n    }\n\n    public class layout {\n        public const int main = 0x456;\n    }\n\n    public class strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Standalone Icon Implementation\nDESCRIPTION: HTML markup for displaying an icon using default Open Iconic classes and data attributes.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: NuGet Package Addition for BrowserStack Integration\nDESCRIPTION: The snippet adds the BrowserStack.TestAdapter NuGet package to the project's configuration, enabling its integration with the project. The specified package version is needed in the configuration to facilitate capabilities required for BrowserStack testing.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UITesting/BrowserStackAppiumMaui/README.md#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"BrowserStack.TestAdapter\" Version=\"0.13.3\" />\n\n```\n\n----------------------------------------\n\nTITLE: Install and Set Up Appium for GitHub Actions\nDESCRIPTION: This script installs Appium and necessary drivers for both Android and iOS platforms on GitHub Actions. It is essential to install these components to build and run tests in the CI/CD pipeline. The script supports installation tailored to Linux and Mac environments.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UITesting/BrowserStackAppiumMaui/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g appium\n\n# For Android\naopium driver install uiautomator2\n\n# For iOS\nappium driver install xcuitest\n\n```\n\n----------------------------------------\n\nTITLE: Android Resource Class Generation Example in C#\nDESCRIPTION: Demonstrates the auto-generated Resource class structure that provides strongly-typed access to Android resources. Shows how resource IDs are mapped to constants for drawables, layouts, and strings.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/PlatformIntegration/NativeEmbeddingDemo/NativeEmbeddingDemo.Droid/Resources/AboutResources.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Resource {\n    public class Drawable {\n        public const int icon = 0x123;\n    }\n\n    public class Layout {\n        public const int main = 0x456;\n    }\n\n    public class Strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Asset using AssetManager in C#\nDESCRIPTION: This code snippet demonstrates how to read an asset file in Android using the AssetManager. It opens an input stream to the specified asset file and makes it accessible within the application.  It assumes that the asset file \"my_asset.txt\" has been included in the project with a Build Action of \"AndroidAsset\".\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/Upgrading/CustomRenderer/MultiProject/Entry/Android/Assets/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReadAsset : Activity\n{\n\tprotected override void OnCreate (Bundle bundle)\n\t{\n\t\tbase.OnCreate (bundle);\n\n\t\tInputStream input = Assets.Open (\"my_asset.txt\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Packing .NET Library with Dynamic Version in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to use the dotnet pack command in a GitHub Actions workflow to create a NuGet package with a dynamically set version number.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README_DevOps.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Pack Library\n  run: |\n    dotnet pack src/SamplePackage/SamplePackage.csproj -p:PackageVersion=$VERSION -c Release\n```\n\n----------------------------------------\n\nTITLE: Setting Version Variable in GitHub Actions Workflow\nDESCRIPTION: This YAML snippet sets the VERSION environment variable using the MAJORVERSION and GITHUB_RUN_ID in a GitHub Actions workflow. It creates a unique version number for each workflow run.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Packaging/NuGetWithMSBuildFiles/README_DevOps.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Set VERSION variable from tag\n  run: |\n    echo \"VERSION=$MAJORVERSION-$GITHUB_RUN_ID\" >> $GITHUB_ENV\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Icons with Bootstrap\nDESCRIPTION: Demonstrates the HTML markup for using an Open Iconic icon with Bootstrap. It includes the necessary classes and attributes for proper display and accessibility.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/10.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Foundation Integration with CSS Link\nDESCRIPTION: HTML link tag for including Open Iconic Foundation stylesheet.\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/9.0/UserInterface/ControlGallery/ControlGallery/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Standalone Icon Font Usage\nDESCRIPTION: Using Open Iconic default icon font stylesheet and markup\nSOURCE: https://github.com/dotnet/maui-samples.git/blob/main/8.0/Apps/PointOfSale/src/PointOfSale/wwwroot/css/open-iconic/README.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```"
  }
]