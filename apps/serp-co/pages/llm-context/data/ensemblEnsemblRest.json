[
  {
    "owner": "ensembl",
    "repo": "ensembl-rest",
    "content": "TITLE: Configuring Ensembl REST API Database Connections and Plugins in Perl\nDESCRIPTION: This code snippet sets up the configuration for the Ensembl REST API, including database connections, plugin settings, and API-specific configurations. It defines the structure and behavior of the API endpoints, including content types, documentation, and rate limiting.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/associated_xref.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  using => ['Config::Plugin::Licenses'],\n  default_view => 'HTML',\n\n  service_name => 'Ensembl REST API',\n  service_logo => 'ensembl_logo.png',\n  service_parent_url => 'https://rest.ensembl.org',\n  copyright_footer => '<p class=\"center\">Â© <a href=\"https://www.ebi.ac.uk\">EMBL-EBI</a> 2023 | Ensembl REST API</p>',\n\n  # API Documentation\n  api_help_template => '<a href=\"http://rest.ensembl.org/\">See here for general documentation</a>',\n\n  jsonp => 1,\n  enable_jsonp => 1,\n  \n  # Content type definition\n  content_type_header_regexp => qr/^application\\/(?:json|javascript)$/,\n\n  # Compress output by default\n  compress => 1,\n\n  # Enable CORS on all endpoints\n  <map>\n    \"/**\" => {\n      \"Access-Control-Allow-Origin\" => \"*\",\n      \"Access-Control-Allow-Methods\" => \"GET\",\n      \"Access-Control-Allow-Headers\" => \"*\",\n    }\n  </map>,\n\n  # Plugins\n  Plugin => {\n    'Cache' => {\n      use_plugins => ['Base'],\n      driver => 'CHI',\n      driver_options => {\n        namespace => 'ensrest',\n        storage => '/path/to/file/storage/directory',\n      },\n    },\n    'Cache::Memcached' => {\n      use_plugins => ['Base'],\n      'servers' => ['127.0.0.1:11211'],\n      'debug'   => 0,\n      'compress_threshold' => 10_000,\n    },\n    'EnsEMBL::REST::Throttle::Limiter::Memcached' => {\n      'servers' => ['127.0.0.1:11211'],\n      'debug'   => 0,\n      'compress_threshold' => 10_000,\n    },\n  },\n\n  # Limit by IP\n  # IP_address => Number of requests per hour\n  throttle_max_requests => {\n    '0.0.0.0' => 1000,\n  },\n\n  # Documentation URL\n  documentation_url => 'https://rest.ensembl.org/documentation/info/lookup',\n\n  # Database connection details\n  connection_details => {\n    biompd => {\n      ALL => {\n        dbname => 'ensembl_metadata',\n        host => 'mysql-eg-mirror.ebi.ac.uk',\n        port => 4157,\n        user => 'anonymous',\n        pass => '',\n      },\n    },\n  },\n\n  # Species database connections\n  species => {\n    default => {\n      biompd => 'biompd',\n    },\n  },\n\n  # API-specific settings\n  reference_data_url => 'https://rest.ensembl.org/sequence/reference-data',\n  lookup_features_url => 'https://rest.ensembl.org/lookup/features',\n  variation_url => 'https://rest.ensembl.org/variation',\n  regulation_url => 'https://rest.ensembl.org/regulation',\n  ontology_url => 'https://rest.ensembl.org/ontology',\n  assembly_url => 'https://rest.ensembl.org/assembly',\n  comparative_genomics_url => 'https://rest.ensembl.org/comparative_genomics',\n\n  # Additional configuration options...\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Human HGNC Gene Symbol to Ensembl ID with curl\nDESCRIPTION: A shell command that demonstrates how to convert a human gene symbol (BRCA2) to its corresponding Ensembl ID using the Ensembl REST API's /xrefs/symbol endpoint.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/protein_feature.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET \"https://rest.ensembl.org/xrefs/symbol/homo_sapiens/BRCA2?content-type=application/json\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Expiration in Catalyst Configuration\nDESCRIPTION: Configuration example showing how to set cache expiration time in seconds for the Memcached backend in a Catalyst application.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/dnac.txt#2025-04-22_snippet_4\n\nLANGUAGE: Perl\nCODE:\n```\n<cache>\n  <backends>\n    <memcached>\n      expires 3600  # 1 hour in seconds\n    </memcached>\n  </backends>\n</cache>\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Logic for Ensembl REST API Requests in Python\nDESCRIPTION: This code implements a robust HTTP request function with retry logic for the Ensembl REST API. It handles transient errors, includes exponential backoff, and processes both successful responses and failure conditions appropriately.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/unmapped_object.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport time\n\ndef fetch_endpoint(server, ext):\n    max_retries = 3\n    retry_delay = 1  # seconds\n    \n    for attempt in range(max_retries):\n        try:\n            r = requests.get(server+ext, headers={\"Content-Type\": \"application/json\"})\n            \n            if r.ok:\n                return r.json()\n            elif r.status_code == 429:  # Too Many Requests\n                # Extract retry time from headers if available\n                if 'Retry-After' in r.headers:\n                    retry_delay = int(r.headers['Retry-After'])\n                print(f\"Rate limit hit, waiting {retry_delay} seconds...\")\n                time.sleep(retry_delay)\n                continue\n            else:\n                r.raise_for_status()\n                \n        except requests.exceptions.RequestException as e:\n            print(f\"Request failed: {e}\")\n            if attempt < max_retries - 1:\n                print(f\"Retrying in {retry_delay} seconds...\")\n                time.sleep(retry_delay)\n                retry_delay *= 2  # Exponential backoff\n            else:\n                print(\"Max retries reached. Giving up.\")\n                raise\n    \n    return None\n\n# Example usage\nserver = \"https://rest.ensembl.org\"\next = \"/lookup/id/ENSG00000157764?\"\n\nresult = fetch_endpoint(server, ext)\nif result:\n    print(result['display_name'])\n```\n\n----------------------------------------\n\nTITLE: Starting Ensembl REST API Server with Custom Configuration in Bash\nDESCRIPTION: This bash script provides functionality to start, stop, and restart the Ensembl REST API server with various configuration options. It includes functions for managing the server process, checking its status, and displaying help information. The script uses environment variables and command-line arguments to customize the server's configuration.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/gene_archive.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nDIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\nCONFIG=ensrest.conf\nSRV=\"$DIR/ensembl-rest_server.pl\"\nPORT=5000\nPIDFILE=$DIR/ensembl-rest.pid\nLOGFILE=$DIR/ensembl-rest.log\nMAX_WORKERS=1\nIOWORKERS=\"\"\nCREATOR=\"\"\nDETACH=\"\"\nROLES=\"web\"\nWORKERS=\"\"\n\nfunction usage {\n  echo -e \"Usage: ensembl-rest <command> [arguments]\"\n  echo -e \"Commands:\"\n  echo -e \"  start    Start the REST server\"\n  echo -e \"  stop     Stop the REST server\"\n  echo -e \"  restart  Restart the REST server\"\n  echo -e \"  status   Check if the server is running\"\n  echo -e \"  help     This message\"\n  echo -e \"See ensembl-rest start --help for additional options\"\n}\n\nfunction start_usage {\n  echo -e \"Usage: ensembl-rest start [arguments]\"\n  echo -e \"Arguments:\"\n  echo -e \"  --port            Port to start the server on (default: 5000)\"\n  echo -e \"  --pidfile         File to store the server process ID\"\n  echo -e \"                    (default: ensembl-rest.pid)\"\n  echo -e \"  --logfile         File to log the server output\"\n  echo -e \"                    (default: ensembl-rest.log)\"\n  echo -e \"  --maxworkers      Number of worker processes to run\"\n  echo -e \"                    (default: 1)\"\n  echo -e \"  --ioworkers       Number of I/O worker processes to run\"\n  echo -e \"                    (default: none)\"\n  echo -e \"  --workers         Number of worker processes to run\"\n  echo -e \"                    (default: none, use this instead of --maxworkers)\"\n  echo -e \"  --config          Config file to read from, if different from the default\"\n  echo -e \"                    (default: ensrest.conf)\"\n  echo -e \"  --creator         Class to use for starting the server\"\n  echo -e \"                    (default: use built-in start process)\"\n  echo -e \"  --detach          Detach the server from the shell\"\n  echo -e \"                    (default: keep attached to the shell)\"\n  echo -e \"  --roles           Roles to run the server in, comma-separated\"\n  echo -e \"                    (default: web)\"\n  echo -e \"  --dir             Directory to start the server in\"\n  echo -e \"                    (default: current directory)\"\n}\n\nfunction start {\n  if [ \"$1\" == \"--help\" ]; then\n    start_usage\n    return 0\n  fi\n\n  # Process command line arguments\n  while [[ $# -gt 0 ]]; do\n    key=\"$1\"\n\n    case $key in\n      --port)\n        PORT=\"$2\"\n        shift\n        ;;\n      --pidfile)\n        PIDFILE=\"$2\"\n        shift\n        ;;\n      --logfile)\n        LOGFILE=\"$2\"\n        shift\n        ;;\n      --maxworkers)\n        MAX_WORKERS=\"$2\"\n        shift\n        ;;\n      --ioworkers)\n        IOWORKERS=\"--io_workers $2\"\n        shift\n        ;;\n      --workers)\n        WORKERS=\"--workers $2\"\n        shift\n        ;;\n      --config)\n        CONFIG=\"$2\"\n        shift\n        ;;\n      --creator)\n        CREATOR=\"-creator $2\"\n        shift\n        ;;\n      --detach)\n        DETACH=\"--detached\"\n        ;;\n      --roles)\n        ROLES=\"$2\"\n        shift\n        ;;\n      --dir)\n        DIR=\"$2\"\n        shift\n        ;;\n      *)\n        # unknown option\n        ;;\n    esac\n    shift\n  done\n\n  cd \"$DIR\"\n\n  # Check if the server is already running\n  if [ -f \"$PIDFILE\" ]; then\n    PID=$(cat \"$PIDFILE\")\n    if ps -p \"$PID\" > /dev/null; then\n      echo \"Server is already running with PID $PID\"\n      return 1\n    else\n      echo \"Removing stale PID file for non-existent process $PID\"\n      rm \"$PIDFILE\"\n    fi\n  fi\n\n  # Start the server\n  perl \"$SRV\" -config \"$CONFIG\" -port \"$PORT\" -pid_file \"$PIDFILE\" -maxworkers \"$MAX_WORKERS\" \"$DETACH\" \"$IOWORKERS\" \"$WORKERS\" \"$CREATOR\" -roles \"$ROLES\"\n  if [ $? -eq 0 ]; then\n    echo \"Server started on port $PORT (Log: $LOGFILE)\"\n    if [[ -z \"$DETACH\" && -n \"$LOGFILE\" ]]; then\n      cat \"$LOGFILE\"\n    fi\n    return 0\n  else\n    echo \"Failed to start server\"\n    return 1\n  fi\n}\n\nfunction stop {\n  if [ ! -f \"$PIDFILE\" ]; then\n    echo \"No PID file found, server may not be running\"\n    return 1\n  fi\n\n  PID=$(cat \"$PIDFILE\")\n  if ! ps -p \"$PID\" > /dev/null; then\n    echo \"Process $PID not found, removing stale PID file\"\n    rm \"$PIDFILE\"\n    return 1\n  fi\n\n  echo \"Stopping server with PID $PID\"\n  kill \"$PID\"\n  rm \"$PIDFILE\"\n  return 0\n}\n\nfunction restart {\n  stop\n  sleep 2\n  start \"$@\"\n}\n\nfunction status {\n  if [ ! -f \"$PIDFILE\" ]; then\n    echo \"No PID file found, server is not running\"\n    return 1\n  fi\n\n  PID=$(cat \"$PIDFILE\")\n  if ps -p \"$PID\" > /dev/null; then\n    echo \"Server is running with PID $PID\"\n    return 0\n  else\n    echo \"Process $PID not found, server may have crashed\"\n    rm \"$PIDFILE\"\n    return 1\n  fi\n}\n\n# Main script\nif [ \"$#\" -eq 0 ]; then\n  usage\n  exit 1\nfi\n\nCOMMAND=\"$1\"\nshift\n\ncase \"$COMMAND\" in\n  start)\n    start \"$@\"\n    exit $?\n    ;;\n  stop)\n    stop\n    exit $?\n    ;;\n  restart)\n    restart \"$@\"\n    exit $?\n    ;;\n  status)\n    status\n    exit $?\n    ;;\n  help)\n    usage\n    exit 0\n    ;;\n  *)\n    echo \"Unknown command: $COMMAND\"\n    usage\n    exit 1\n    ;;\nesac\n```\n\n----------------------------------------\n\nTITLE: Analyzing Variant Effects using Ensembl REST API in Python\nDESCRIPTION: This code demonstrates how to use the Ensembl REST API to analyze the effects of a genetic variant. It checks the impact of a specific SNP on the BRCA2 gene.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/transcript_intron_supporting_evidence.txt#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nvariant = client.variant_effect('human', 'rs80359550')\nfor transcript in variant[0]['transcript_consequences']:\n    if transcript['gene_symbol'] == 'BRCA2':\n        print(f\"Impact: {transcript['impact']}\")\n        print(f\"Consequence: {', '.join(transcript['consequence_terms'])}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Database Connections and Caching in Perl\nDESCRIPTION: This snippet defines the configuration for database connections, caching, and API endpoints for the Ensembl REST API. It includes settings for database aliases, caching mechanisms, and specific API endpoint configurations.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/simple_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  # Database settings\n  databases => {\n    DATABASE_CORE => {\n      driver => 'mysql',\n      port   => 3306,\n      user   => 'ensro',\n      pass   => '',\n    },\n    DATABASE_USERDATA => {\n      driver => 'sqlite',\n      file   => 'user_upload.sqlite'\n    },\n  },\n  \n  # Database aliases\n  DATABASE_ALIASES => {\n    ALIAS_NAME => 'DATABASE_CORE'\n  },\n\n  # Caching\n  no_cache => 0,\n  cache_dir => '/tmp/ensembl_rest',\n  memcached => '127.0.0.1:11211',\n  ttl => 3600,\n\n  # API settings\n  content_type_header => 'text/plain',\n  jsonp_callback_param => 'callback',\n  api_root_path => '/api',\n  \n  # API endpoint configurations\n  endpoints => [\n    'Example::Endpoint',\n    'Feature::Region',\n    'Sequence::Region',\n  ],\n\n  # Optional log4perl settings\n  log4perl => 'log4perl.conf',\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching variant consequences with curl\nDESCRIPTION: This shell command demonstrates how to use curl to fetch variant consequences from the Ensembl REST API. It performs a POST request to the variant effect predictor endpoint with a JSON payload containing variant data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon_transcript_gene.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-type:application/json\" -X POST \\\n-d '{ \"hgvs_notations\" : [\"ENST00000526603.1:c.1431_1433delTTC\",\"ENST00000528897.1:c.1431_1433delTTC\"] }' \\\nhttps://rest.ensembl.org/vep/human/hgvs | jq .\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Database Connections and Server Settings in Perl\nDESCRIPTION: This snippet defines the configuration for the Ensembl REST API, including database connections for various species and data types, as well as server-specific settings like authentication and compression. It sets up multiple database connections and configures server parameters such as content types, rate limiting, and logging.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/ontology_xref.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  default => {\n    databases => {\n      compara => 'mysql://ensro@compara1/ensembl_compara_108',\n      ontology => 'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/ensembl_ontology_108',\n      taxonomy => 'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/ncbi_taxonomy',\n      otherfeatures => [\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/homo_sapiens_otherfeatures_108_38',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/mus_musculus_otherfeatures_108_39',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/rattus_norvegicus_otherfeatures_108_6',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/felis_catus_otherfeatures_108_9',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/bos_taurus_otherfeatures_108_31',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/gallus_gallus_otherfeatures_108_6',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/canis_lupus_familiaris_otherfeatures_108_3',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/danio_rerio_otherfeatures_108_11',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/sus_scrofa_otherfeatures_108_111',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/ovis_aries_otherfeatures_108_31'\n      ],\n      variation => [\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/homo_sapiens_variation_108_38',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/mus_musculus_variation_108_39',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/rattus_norvegicus_variation_108_6',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/felis_catus_variation_108_9',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/bos_taurus_variation_108_31',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/gallus_gallus_variation_108_6',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/canis_lupus_familiaris_variation_108_3',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/danio_rerio_variation_108_11',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/sus_scrofa_variation_108_111',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/ovis_aries_variation_108_31'\n      ],\n      core => [\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/homo_sapiens_core_108_38',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/mus_musculus_core_108_39',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/rattus_norvegicus_core_108_6',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/felis_catus_core_108_9',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/bos_taurus_core_108_31',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/gallus_gallus_core_108_6',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/canis_lupus_familiaris_core_108_3',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/danio_rerio_core_108_11',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/sus_scrofa_core_108_111',\n        'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/ovis_aries_core_108_31'\n      ],\n    },\n\n    # ontology_db_url => 'mysql://ensro@mysql-ensembl-mirror.ebi.ac.uk:4240/ensembl_ontology_108',\n\n    compress_content => 1,\n    shared_content_types => 1,\n    rate_limit_key => 'SCRIPT_FILENAME',\n    rate_limit_proxy => 1,\n    debug_config_file => 0,\n    logging => 0,\n    # debug_log_file => '/nfs/public/nobackup/ensembl/mnuhn/rest.ebi.ensembl.org.log',\n    # \n    #Access-Control-Allow-Origin header\n    #\n    allowed_cors_origins => '(https?:\\\\/\\\\/(?:.*\\\\.)?ensembl\\\\.org)',\n    allowed_cors_origins_regex => 1,\n    \n    handle_cors => 1,\n    #Allow credentials in CORS, disabled by default\n    # allow_credentials => 0,\n    \n    strict_content_type => 1,\n    \n    # Enable content_type extensions everywhere\n    content_type_use_ext => 1,\n    \n    # Set the maximum post size to 1MB. A large post body will make Catalyst crash\n    max_request_size => 1048576,\n    \n    # Global JSON serializer options\n    json_serialiser_options => {\n      pretty => 1,\n      indent => 2,\n    },\n    \n    # Extend the timeout for the variaiton beacons endpoint.\n    # If it was not included here, then \n    'Controller::ga4gh::Beacons' => {\n      # 30 minutes\n      _OPTIONS => { request_timeout => 1800 },\n    },\n    \n    # This is the global session encryption key. Please change me\n    session_cookie_key => 'wibble.mouse.king',\n    \n    # You must change the name of the HMAC key.\n    # It will refuse to start with the default value set.\n    'Authentication::Hmac' => {\n      key => 'ctQnYDMDm5u3qZJIUysYyWzJ',\n    },\n    \n    'Plugin::Cache' => {\n      backend => {\n        class => \"Cache::Memcached::Fast\",\n        servers => [\n          '127.0.0.1:11211',\n        ],\n        debug => 0,\n        namespace => 'ensrest:',\n      },\n    },\n    \n    jsonp => {\n      callback_key => 'callback',\n      callback_pattern => '^[\\w\\.]+$',\n    },\n  },\n  \n  # Provide a custom default here if needed\n  # production => {\n  #   service_config => {\n  #     # production-specific configuration here\n  #   }\n  # },\n\n  # Provide a custom default here if needed\n  # staging => {\n  #   service_config => {\n  #     # staging-specific configuration here\n  #   }\n  # },\n  \n  # Provide a custom default here if needed\n  # development => {\n  #   service_config => {\n  #     # development-specific configuration here\n  #   }\n  # },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Server in Perl\nDESCRIPTION: This snippet sets up the configuration for the Ensembl REST API server. It includes database connections, plugins, and various server settings such as logging, caching, and compression.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/dnac.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  using => ['Plack::Middleware::ReverseProxy'],\n  default_view => 'JSON',\n  'Plugin::Cache' => {\n    backend => 'CHI',\n    config => {\n      driver => 'Memory',\n      global => 1\n    }\n  },\n  # Enable CORS for all responses\n  'Plugin::CORS' => {\n    allow_origin => '*',\n    allow_methods => ['GET','OPTIONS'],\n    allow_headers => ['content-type'],\n    max_age => 180,\n  },\n  service_name => 'Ensembl REST API',\n  service_logo => 'ensembl_logo.png',\n  service_parent_url => 'https://www.ensembl.org',\n  default_content_type => 'text/html'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Ensembl REST API Cache Configuration in Perl\nDESCRIPTION: This snippet configures the caching mechanism for the Ensembl REST API. It sets up CHI caching with file-based storage, specifying the root directory and namespace for the cache.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/prediction_exon.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\nsub chi_cache {\n  my ($self) = @_;\n  return {\n    driver => 'File',\n    root_dir => $self->o('ENSEMBL_REST_CACHE_ROOT_DIR').'/chi',\n    namespace => 'ensembl:rest'\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment and Database Connections for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets up the environment variables, database connections, and plugin configurations for the Ensembl REST API server. It includes database host, port, and user settings, as well as plugin configurations for various Ensembl features.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/dnac.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\n\nuse Config::General;\n\n{   \n  name                          => 'EnsemblRest',\n  using_mysql                   => 1,\n  default_view                  => 'HTML',\n  encoding                      => 'UTF-8',\n  enable_jsonview               => 1,\n  enable_cors                   => 1,\n  cors_origin                   => '*',\n  timeout                       => 900,\n  # Config::General for read_dir() support in config files.\n  'Plugin::ConfigLoader'        => { file => 'conf/ensrest.conf', driver => 'Config::General', substitution => { vars => 1 }, config_local_suffix => 'local' },\n\n  # RDF Plugin, format defaults to turtle\n  # default_serializer_type => 'text/turtle',\n  # default_rdf_writer_class => 'Turtle',\n  # default_format_type => 'turtle',\n  # Allow overriding the default serialization format via query\n  # parameters.\n  # format_query_parameter => 'rdf_fmt',\n\n  'Model::Registry' => {\n    skip_infer_schema => 1,\n    use_new_assembly => 1,\n    host          => $ENV{ENS_REST_HOST}     || 'useastdb.ensembl.org',\n    port          => $ENV{ENS_REST_PORT}     || 5306,\n    user          => $ENV{ENS_REST_USER}     || 'anonymous',\n    pass          => $ENV{ENS_REST_PASS}     || '',\n    version       => $ENV{ENS_REST_VERSION}  || 108,\n    verbose       => $ENV{ENS_REST_VERBOSE}  || 0,\n    no_cache      => $ENV{ENS_REST_NO_CACHE} || 0,\n    scratch_space => $ENV{ENS_REST_SCRATCH}  || '/tmp',\n    dont_wait     => 1,\n  },\n\n  'Plugin::Static::Simple' => {\n    include_path => ['root/'],\n    dirs => ['static'],\n    ignore_extensions => [ qw// ],\n    debug  => 1,\n  },\n\n  'Plugin::Cache' => {\n    backend => $ENV{CACHE_MEMORY} || {\n      class   => 'Cache::Memcached::Fast',\n      servers => ['127.0.0.1:11211'],\n      debug   => 0,\n    },\n  },\n\n  enable_stats => 1,\n  stats_class  => 'Statistics::Descriptive::LogScale',\n\n  'Controller::Root' => { no_cache_control => 1 },\n\n  no_example => 'test',\n\n  # SpeciesList Plugin for LD endpoint\n  'Plugin::SpeciesList' => {\n      lists => {\n          defaults => ['http://www.ensembl.org/info/genome/compara/species_sets.xml'],\n      }\n  },\n\n  # CORS plugin\n  'Plugin::CORS' => {\n      allow_headers => ['X-Requested-With'],\n      allow_methods => ['GET', 'POST', 'OPTIONS'],\n      header_field_name => 'Access-Control-Allow-Origin',\n  },\n\n  log4perl => {\n    category_style => 'clustered',\n    conf => 'catalyst.log4perl.conf',\n  },\n\n  # Ontology Plugin\n  'Model::Ontology' => {\n    ontology_service_url => 'http://www.ebi.ac.uk/ols/api',\n  },\n\n  # XMLRPC Plugin\n  'Plugin::XMLRPC' => {\n    DTDPath => '/usr/share/soap-lite/',\n  },\n\n  'Plugin::ProxyPath' => {\n    path => '/api',\n  },\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Ensembl REST API using curl in Bash\nDESCRIPTION: This snippet demonstrates how to make a GET request to the Ensembl REST API using curl in Bash. It retrieves information about the human BRCA2 gene.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/prediction_transcript.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://rest.ensembl.org/lookup/symbol/homo_sapiens/BRCA2?content-type=application/json'\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Dependencies and Settings in Perl\nDESCRIPTION: This snippet defines the required Perl modules, database connections, and API settings for the Ensembl REST API project. It includes version requirements, database configurations, and various API-specific settings.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/supporting_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nname = EnsEMBL::REST\nversion = 7.1.0\n\n[PruneCaches]\n\n[PruneNeedsRestart]\n\n[Prereqs]\nCatalyst = 5.90050\nCatalyst::Action::RenderView = 0\nCatalyst::Authentication::Credential::HTTP = 0\nCatalyst::Component::InstancePerContext = 0\nCatalyst::Plugin::ConfigLoader = 0\nCatalyst::Plugin::Static::Simple = 0\nCatalyst::View::TT = 0\nConfig::General = 0\nData::Printer = 0\nDBD::SQLite = 1.42\nDBI = 0\nFile::Spec = 0\nHash::Merge = 0\nHTML::Entities = 0\nHTTP::Headers = 0\nHTTP::Request = 0\nJSON = 2.90\nLog::Log4perl::Catalyst = 0\nLWP::Protocol::https = 0\nLWP::Simple = 0\nMoose = 2.0604\nMooseX::Types = 0\nMooseX::Types::Moose = 0\nNamespace::autoclean = 0\nNet::FTP = 0\nPerl::Critic = 1.130\nPlack::Middleware::Assets = 0\nPlack::Middleware::Deflater = 0\nPlack::Middleware::CrossOrigin = 0\nPlack::Middleware::ReverseProxy = 0\nPlack::Middleware::SizeLimit = 0\nPerl::Critic::Progressive = 0\nPlack::Test = 0\nSereal = 0\nStar::Studded = 0\nStar::Wars = 0\nReadonly = 0\nURI::Escape = 0\nURI::PathAbstract = 0\nWWW::REST::Google::Apps::Gmail = 0\n\n[Prereqs / TestRequires]\nCatalyst::Test = 0\nError = 0\nGuard = 0\nData::Dumper = 0\nIO::Scalar = 0\nLWP::Protocol::PSGI = 0\nTest::Differences = 0\nTest::Deep = 0\nTest::Exception = 0\nTest::MockObject = 1.09\nTest::More = 0\nTest::Warnings = 0\nTest::XML::Simple = 0\n\n[Prereqs / RuntimeRequires]\nDBIx::Class::Cursor::Cached = 0\nCatalyst::Model::DBIC::Schema = 0\nCatalyst::Plugin::Cache = 0\nCatalyst::Plugin::StackTrace = 0\nCatalyst::Plugin::PageCache = 0\nCatalyst::View::JSON = 0\nDevel::Cycle = 0\nMooseX::ClassAttribute = 0\nPadWalker = 0\nPlack::Handler::Starman = 0\nPlack::Middleware::Debug = 0\nRedis = 0\nREST::Client = 0\nMooseX::Log::Log4perl = 0\n\n[Prereqs / RuntimeRecommends]\nMooseX::NonMoose = 0\nTest::Pod::Coverage = 0\nTest::Perl::Critic = 0\nLog::Dispatch::FileRotate = 0\nCatalyst::Plugin::Session = 0\nCatalyst::Plugin::Session::Store::File = 0\nCatalyst::Plugin::Session::State::Cookie = 0\nTest::HTTP::Server::Simple = 0\nDevel::Cover = 0\nPod::Coverage::TrustPod = 0\nDBD::mysql = 4.025\nDBIx::Class::Schema::Loader = 0\nPlack::App::FakeApache = 0\nCache::FileCache = 0\nCache::Memcached = 0\nCache::Memcached::Fast = 0\nPlack::Middleware::Debug::Ajax = 0\nCatalyst::TraitFor::Component::DBIC::Schema::QueryLog = 0\nClass::Load = 0\nGo::Workbench = 0\nGoogle::Analytics::Data::V1alpha = 0\nJSON::XS = 0\n```\n\n----------------------------------------\n\nTITLE: Finding Human Genomic Variants with VEP in Python\nDESCRIPTION: A Python script that uses the Variant Effect Predictor (VEP) endpoint of the Ensembl REST API to analyze the effects of genomic variants. It sends a POST request with variant data in the required format.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/protein_feature.txt#2025-04-22_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport requests, sys\n \nserver = \"https://rest.ensembl.org\"\nextension = \"/vep/human/hgvs\"\nhgvs_notations = ['ENST00000380152:c.2309C>T', 'ENST00000544455:c.1376C>T', 'ENST00000269305:c.6146G>A']\nheaders={ \"Content-Type\" : \"application/json\", \"Accept\" : \"application/json\"}\nr = requests.post(server+extension, json={'hgvs_notations':hgvs_notations}, headers=headers)\n \nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \ndecoded = r.json()\nprint(repr(decoded))\n```\n\n----------------------------------------\n\nTITLE: Configuring Catalyst for Ensembl REST API\nDESCRIPTION: This Perl script configures the Catalyst framework for the Ensembl REST API. It sets up various plugins, middleware, and application-specific settings.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/operon_transcript.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  using_frontend_proxy => 1,\n  using_delay_log => 1,\n  default_view => 'HTML',\n  'Plugin::Cache' => {\n    backend => {\n      class => 'CHI',\n      driver => 'Memory',\n      global => 1,\n    }\n  },\n  'Model::Registry' => {\n    use_new_assembly => 1,\n  },\n  # Enable CORS for all responses\n  'View::JSON' => {\n    expose_stash      => 'rest',\n    json_encoder_args => {pretty => 1},\n    renderer          => 'JSON::XS'\n  },\n  'View::HTML' => {\n    #Tell TT that it should look for templates in root/src\n    INCLUDE_PATH => [\n      __PACKAGE__->path_to('root','src'),\n    ],\n    TEMPLATE_EXTENSION => '.tt',\n    WRAPPER            => 'wrapper.tt',\n    render_die => 1,\n  },\n  'View::TXT' => {\n    INCLUDE_PATH => [\n      __PACKAGE__->path_to('root','src'),\n    ],\n    TEMPLATE_EXTENSION => '.tt',\n    render_die => 1,\n  },\n  'View::GFF3' => {\n    INCLUDE_PATH => [\n      __PACKAGE__->path_to('root','src'),\n    ],\n    TEMPLATE_EXTENSION => '.tt',\n    render_die => 1,\n  },\n  'View::FASTA' => {\n    INCLUDE_PATH => [\n      __PACKAGE__->path_to('root','src'),\n    ],\n    TEMPLATE_EXTENSION => '.tt',\n    render_die => 1,\n  },\n  service_name => 'Ensembl REST API',\n  service_logo => 'static/img/e-ensembl.png',\n  service_parent_url => 'https://www.ensembl.org',\n  copyright => '<p class=\"center\">Copyright &copy; 1999-2021 EMBL-EBI</p>',\n  markdown_pod_formatter => ' ',\n  enabled_plugin_list => [qw/Cache Static::Simple/],\n  # The following lines are needed if you use the CHI cache\n  disable_middleware => [ 'Debug' ],\n  # They ensure that debug panels are *not* appended to HTML\n  # responses (it would break non-HTML response parsers)\n  'Plugin::Static::Simple' => {\n    include_path => ['/'],\n    dirs => ['static'],\n  },\n  'Controller::Root' => {\n    # Set to 0 if the site is under heavy load\n    clear_cached_api_key => 1\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Ensembl REST API for Gene Information in Perl\nDESCRIPTION: This code snippet demonstrates how to use the Ensembl REST API to retrieve information about a specific gene. It uses the LWP::UserAgent module to make an HTTP GET request and JSON module to parse the response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/object_xref.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\nuse strict;\nuse warnings;\nuse LWP::UserAgent;\nuse JSON;\n\nmy $ua = LWP::UserAgent->new;\nmy $server = 'https://rest.ensembl.org';\nmy $ext = '/lookup/id/ENSG00000157764?';\nmy $response = $ua->get($server.$ext, 'Content-Type' => 'application/json');\n\ndie \"\" . $response->status_line . \"\\n\" unless $response->is_success;\n\nmy $hash = decode_json($response->content);\nprint \"$hash->{id}\\t$hash->{display_name}\\t$hash->{description}\\n\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Server in Perl\nDESCRIPTION: This snippet defines the configuration for the Ensembl REST API server. It includes settings for plugin loading, authentication, and content security policy. The configuration uses the Catalyst framework and sets up various plugins and middleware for the API server.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/splicing_event_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  using_frontend_proxy => 1,\n  default_view => 'HTML',\n  service_name => 'Ensembl REST API',\n  service_logo => 'static/img/e-ensembl.png',\n  service_parent_url => 'https://www.ensembl.org',\n  service_status => 'https://status.ensembl.org',\n  # set manual availability of species endpoints\n  species_available => {'homo_sapiens' => 1},\n  # enable CORS by default\n  <enable_cors>\n    \"0.0.0.0/0\" = 1\n  </enable_cors>\n  # set age of cached static content to 5 minutes\n  cache_age => 300,\n  no_server_name_header => 0,\n  use_xforwardedfor_headers => 1,\n  # enable gzip compression\n  encoding => 'UTF-8', # leave blank for no encoding\n  use_openapi_v3_docs => 1,\n  allow_jsonp => 0,\n  # Plugins to load:\n  Plugin::Cache => {\n    backend => {\n      class => 'CHI',\n      driver => 'Memory',\n      global => 1\n    }\n  },\n  Plugin::Authentication => {\n    use_session => 0,\n    default_realm => 'user',\n    realms => {\n      user => {\n        credential => {\n          class => 'Password',\n          password_field => 'password',\n          password_type => 'clear'\n        },\n        store => {\n          class => 'Minimal',\n          users => {}\n        }\n      },\n      user_remote_user => {\n        credential => {\n          class => 'RemoteUser'\n        }\n      }\n    }\n  },\n  'Plugin::Throttle' => {\n    auto => 1,\n    max_requests => 15,\n    timeframe => '1 minute',\n    error_message => 'You have exceeded the allowed number of requests per minute. Please reduce your query rate',\n    backend => {\n      class => 'Hash'\n    },\n  },\n  'Plugin::ContentSecurityPolicy' => {\n    policy => \"default-src 'self' https://www.ensembl.org https://*.ensembl.org https://www.ebi.ac.uk https://ajax.googleapis.com https://code.jquery.com https://maxcdn.bootstrapcdn.com http://www.google-analytics.com https://www.google-analytics.com https://js.monitor.azure.com https://az416426.vo.msecnd.net https://www.googletagmanager.com 'unsafe-inline' 'unsafe-eval'\"\n  },\n  assets => {\n    'assets.ensembl_js' => [\n      'https://www.ensembl.org/min/js/main.js',\n      'https://www.ensembl.org/js/general.js'\n    ],\n    'assets.css' => [\n      'https://www.ensembl.org/min/css/main.css',\n      'https://www.ensembl.org/css/general-doc.css'\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching region features with Python\nDESCRIPTION: This Python code demonstrates how to fetch region features from the Ensembl REST API. It sends a GET request to the overlap/region endpoint to retrieve all features in a specified genomic region on human chromosome 7.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon_transcript_gene.txt#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport requests, sys\n\nserver = \"https://rest.ensembl.org\"\next = \"/overlap/region/human/7:140424943-140624564?feature=gene;feature=transcript;feature=cds;feature=exon\"\n\nr = requests.get(server+ext, headers={ \"Content-Type\" : \"application/json\"})\n \nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \nprintable = r.json()\nprint(printable)\n```\n\n----------------------------------------\n\nTITLE: Setting up Ensembl database connection for API testing in Perl\nDESCRIPTION: This snippet initializes the database connection setup for testing. It creates a database adaptor and configures a JSON adaptor for processing API responses. It also defines the base JSON path for the tests.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/external_db.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nSKIP: {\n  my $cfg = RestHelper->cfg();\n  my $db_conf = $cfg->{db_conf};\n  \n  my $reg = 'Bio::EnsEMBL::Registry';\n  $reg->load_all(\"$Bin/../t/test-genome-DBs\", 1, 0, 0, \"SQLite\");\n  $reg->load_registry_from_db(\n    -host => $db_conf->{host}, -user => $db_conf->{user}, -pass => $db_conf->{pass},\n    -port => $db_conf->{port}, -db_name => $db_conf->{name},\n  ) if defined $db_conf;\n  \n  my $json = RestHelper->get_json(\"info/ping\");\n  my $ping = $json->{ping};\n  \n  skip \"No ping\" if ! $ping;\n  \n  my $base = '/info/genomes';\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Gene Data from Ensembl REST API in Python\nDESCRIPTION: This code demonstrates how to retrieve gene information from the Ensembl REST API using Python's requests library. It includes proper error handling and response processing to get gene data in JSON format.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/unmapped_object.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests, sys\n\nserver = \"https://rest.ensembl.org\"\next = \"/lookup/id/ENSG00000157764?\"\n\nr = requests.get(server+ext, headers={ \"Content-Type\" : \"application/json\"})\n\nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \njson_response = r.json()\nprint(json_response['display_name'])\n```\n\n----------------------------------------\n\nTITLE: Ensembl REST API Python Client Implementation\nDESCRIPTION: Example of using Python with the requests library to interact with the Ensembl REST API. This snippet shows how to format the request, handle errors, and process the JSON response data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/associated_xref.txt#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport requests, sys\n \nserver = \"https://rest.ensembl.org\"\next = \"/overlap/region/human/7:140424943-140624564?feature=gene;feature=transcript;feature=cds;feature=exon\"\n \nr = requests.get(server+ext, headers={ \"Content-Type\" : \"application/json\"})\n \nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \ndecoded = r.json()\nprint(repr(decoded))\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Schema for Ensembl REST API in YAML\nDESCRIPTION: A complete OpenAPI schema definition that documents the Ensembl REST API. It includes information about API paths, parameters, responses, and components. The schema defines endpoints for accessing genomic data and specifies expected request formats and response structures.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/dependent_xref.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: 3.0.0\ninfo:\n  description: |\n    Ensembl REST API\n    \n  version: \"1.0.0\"\n  title: Ensembl REST API\n  contact:\n    email: helpdesk@ensembl.org\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - url: https://rest.ensembl.org\ntags:\n  - name: sequence\n    description: Sequence related endpoints\n  - name: overlap\n    description: Overlap related endpoints\npaths:\n  /sequence/region/{species}/{region}:\n    get:\n      tags:\n        - sequence\n      summary: Returns the genomic sequence of the specified region\n      operationId: getSequenceByRegion\n      parameters:\n        - $ref: '#/components/parameters/species'\n        - name: region\n          in: path\n          description: Query region. A maximum of 10Mb is allowed to be requested at any one time\n          required: true\n          schema:\n            type: string\n        - name: strand\n          in: query\n          description: Strand of requested sequence. Default is the forward (positive) orientation\n          required: false\n          schema:\n            type: integer\n            enum: [1, -1]\n            default: 1\n        - name: expanded\n          in: query\n          description: Request the sequence padded either side of the region by the specified number of basepairs\n          required: false\n          schema:\n            type: integer\n            default: 0\n          example: 100\n        - name: format\n          in: query\n          description: Response format\n          required: false\n          schema:\n            type: string\n            enum: [fasta, json]\n            default: json\n      responses:\n        '200':\n          description: A successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SequenceResponse'\n            text/x-fasta:\n              schema:\n                type: string\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /overlap/region/{species}/{region}:\n    get:\n      tags:\n        - overlap\n      summary: Returns features overlapping a region\n      operationId: getOverlapByRegion\n      parameters:\n        - $ref: '#/components/parameters/species'\n        - name: region\n          in: path\n          description: Query region. A maximum of 5Mb is allowed to be requested at any one time\n          required: true\n          schema:\n            type: string\n        - name: feature\n          in: query\n          description: Feature type to retrieve\n          required: true\n          schema:\n            type: string\n            enum: [gene, transcript, cds, exon, repeat, simple, misc, variation, somatic_variation, structural_variation, somatic_structural_variation, constrained, regulatory, motif, chip_peak, array_probe]\n      responses:\n        '200':\n          description: A successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OverlapResponse'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  parameters:\n    species:\n      name: species\n      in: path\n      description: Species name/alias\n      required: true\n      schema:\n        type: string\n  schemas:\n    SequenceResponse:\n      type: object\n      properties:\n        seq:\n          type: string\n          description: The sequence\n        id:\n          type: string\n          description: The input region\n    OverlapResponse:\n      type: array\n      items:\n        type: object\n        properties:\n          id:\n            type: string\n            description: Feature identifier\n          start:\n            type: integer\n            description: Start coordinate\n          end:\n            type: integer\n            description: End coordinate\n          strand:\n            type: integer\n            description: Strand orientation\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database Connection Pool for AWS Lambda in JavaScript\nDESCRIPTION: Establishes a connection pool to a MySQL database using the mysql2 package with configuration read from environment variables. The pool is created with specific parameters for connection limits and timeouts.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/object_xref.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar mysql = require('mysql2');\nvar pool = mysql.createPool({\n  host: process.env.RDS_HOSTNAME,\n  user: process.env.RDS_USERNAME,\n  password: process.env.RDS_PASSWORD,\n  port: process.env.RDS_PORT,\n  database: process.env.RDS_DATABASE,\n  connectionLimit: 10,\n  queueLimit: 0,\n  waitForConnections: true\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching region features with curl\nDESCRIPTION: This shell command demonstrates how to use curl to fetch region features from the Ensembl REST API. It sends a GET request to the overlap/region endpoint to retrieve all features in a specified genomic region on human chromosome 7.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon_transcript_gene.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-type:application/json\" \\\nhttps://rest.ensembl.org/overlap/region/human/7:140424943-140624564?feature=gene\\;feature=transcript\\;feature=cds\\;feature=exon | jq .\n```\n\n----------------------------------------\n\nTITLE: REST Server Health Check Script for EBI Production Environment\nDESCRIPTION: A comprehensive shell script that checks the health of an EBI Production REST server instance by making HTTP requests to various API endpoints and validating the responses. The script performs checks on species listing, archives, and specialized endpoints to ensure proper server functionality.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/supporting_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\necho \"Content-type: text/plain\"\necho\n\nPHOST=http://rest.ensembl.org\n\nfail=0\n\necho \"Testing $PHOST\"\n\necho \"Testing Archive\"\nif curl -s \"$PHOST/archive/id/ENSG00000157764?content-type=application/json\" | grep -q BRCA2 ; then\n  echo \"  OK\"\nelse\n  echo \"  NO $PHOST/archive/id/ENSG00000157764?content-type=application/json\"\n  fail=1\nfi\n\necho \"Checking species list\"\ncurl -s \"$PHOST/info/species?content-type=application/json\" | grep -q Homo > /dev/null && echo \"  OK\" || (echo \"   NO\" ; fail=1)\n\necho \"Checking species\"\ncurl -s \"$PHOST/info/rest?content-type=application/json\" | grep -q service > /dev/null && echo \"  OK\" || (echo \"   NO\" ; fail=1)\n\necho \"Checking LD\"\ncurl -s \"$PHOST/ld/human/pairwise/rs1042779/rs10744000?content-type=application/json\" | grep -q r2 > /dev/null && echo \"  OK\" || (echo \"   NO\" ; fail=1)\n\necho \"Checking variation\"\ncurl -s \"$PHOST/variation/human/rs56116432?content-type=application/json\" | grep -q MAF > /dev/null && echo \"  OK\" || (echo \"   NO\" ; fail=1)\n\nif [ $fail -eq 1 ]; then\n  echo \"FAILED\"\n  exit 1\nfi\n\necho \"OK\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gene Information via Ensembl REST API Using curl\nDESCRIPTION: This example demonstrates how to use curl to make a GET request to the Ensembl REST API to retrieve information about the BRCA2 gene in JSON format. It shows the proper URL structure and includes a header to specify the content type.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/density_type.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-type:application/json\" https://rest.ensembl.org/lookup/id/ENSG00000139618?format=full\n```\n\n----------------------------------------\n\nTITLE: Accessing Ensembl REST API with Ruby\nDESCRIPTION: Ruby implementation for connecting to the Ensembl REST API. This example demonstrates how to use Ruby's Net::HTTP and JSON libraries to make a request and parse the response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/associated_xref.txt#2025-04-22_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'net/http'\nrequire 'uri'\nrequire 'json'\n \nserver = 'https://rest.ensembl.org'\npath = '/overlap/region/human/7:140424943-140624564?feature=gene;feature=transcript;feature=cds;feature=exon'\n \nurl = URI.parse(server + path)\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n \nrequest = Net::HTTP::Get.new(url.request_uri)\nrequest.content_type = 'application/json'\n \nresponse = http.request(request)\n \nif response.code != \"200\"\n  puts \"Invalid response: \" + response.code\n  puts response.body\n  exit\nend\n \nresult = JSON.parse(response.body)\nputs result.inspect\n```\n\n----------------------------------------\n\nTITLE: Setting Perl Library Paths for Ensembl API\nDESCRIPTION: Perl code to add necessary Ensembl API libraries to the Perl library path. This snippet demonstrates how to include core Ensembl modules in your environment.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature_misc_set.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nuse lib '/path/to/ensembl/modules';\nuse lib '/path/to/ensembl-compara/modules';\nuse lib '/path/to/ensembl-variation/modules';\nuse lib '/path/to/ensembl-functgenomics/modules';\n```\n\n----------------------------------------\n\nTITLE: Converting coordinates between species with Perl\nDESCRIPTION: This Perl code demonstrates how to convert genomic coordinates between species using the Ensembl REST API. It sends a GET request to the map/human/GRCh37 endpoint to convert coordinates from human assembly GRCh37 to mouse assembly GRCm38.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon_transcript_gene.txt#2025-04-22_snippet_9\n\nLANGUAGE: perl\nCODE:\n```\nuse strict;\nuse warnings;\nuse HTTP::Tiny;\nuse JSON;\n\nmy $http = HTTP::Tiny->new();\n\nmy $server = 'https://rest.ensembl.org';\nmy $ext = '/map/human/GRCh37/7:140424943-140424943:1/mouse?';\nmy $response = $http->get($server.$ext, {\n  headers => { 'Content-type' => 'application/json' }\n});\n\ndie \"Failed!\\n\" unless $response->{success};\n\nif(length $response->{content}) {\n  my $hash = decode_json($response->{content});\n  print $response->{content};\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting for Ensembl REST API in Perl\nDESCRIPTION: This snippet shows how to configure rate limiting for the Ensembl REST API. It defines default limits, blacklisted addresses, and how to handle different types of users with varying rate limits.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/marker.txt#2025-04-22_snippet_4\n\nLANGUAGE: perl\nCODE:\n```\n# Rate limiting configuration\nRateLimiter:\n  # switch to turn rate limiting on and off\n  enabled: 1\n  # Default amount of requests per second \n  default_limit: 15\n  # Hard limit for all requests\n  max_limit: ~\n  # Store to use\n  storage: EnsEMBL::REST::RateLimitStorage::Redis\n  # Addresses to blacklist\n  blacklist: []\n  # Path for socket\n  socket: /tmp/redis.sock\n  # redis information\n  redis_host: 127.0.0.1\n  redis_port: 6379\n```\n\n----------------------------------------\n\nTITLE: Querying Ensembl REST API using requests in Python\nDESCRIPTION: This snippet demonstrates how to use the requests library in Python to make a GET request to the Ensembl REST API. It retrieves information about the human BRCA2 gene and prints the JSON response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/prediction_transcript.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests, sys\nserver = \"http://rest.ensembl.org\"\next = \"/lookup/symbol/homo_sapiens/BRCA2?\"\nr = requests.get(server+ext, headers={ \"Content-Type\" : \"application/json\"})\nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\nprint(r.json())\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Database Connections and Parameters in Perl\nDESCRIPTION: This snippet defines the configuration for the Ensembl REST API, including database connections, API versioning, and various startup parameters. It sets up connections to different Ensembl databases and configures the API's behavior.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/alt_allele.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  default_view => 'HTML',\n  using_frontend_proxy => 1,\n  service_name => 'Ensembl REST API',\n  service_logo => 'ensembl_logo.png',\n  service_parent_url => 'https://www.ensembl.org',\n  ontology_root => '/ontology',\n  jsonp => 1,\n  log_dir => '$HOME/logs/restapi/',\n  # Enable CORS for all responses\n  <MapTo::Plugin::DOD>\n    cors => 1\n  </MapTo::Plugin::DOD>\n  \n  species_common => 'b_taurus,c_elegans,d_rerio,d_melanogaster,e_coli,g_gorilla,h_sapiens,m_musculus,p_troglodytes,r_norvegicus,s_cerevisiae',\n  \n  # Location of assembly fasta files\n  fasta => '/path/to/fasta/files',\n  \n  # Databases to connect to\n  Model::Registry => {\n    host => 'ensembldb.ensembl.org',\n    port => 5306,\n    user => 'anonymous',\n    verbose => 0,\n\n    version => 104,\n\n    databases => {\n      human => {\n        core => 'homo_sapiens_core_104_38',\n        variation => 'homo_sapiens_variation_104_38',\n        funcgen => 'homo_sapiens_funcgen_104_38',\n        otherfeatures => 'homo_sapiens_otherfeatures_104_38',\n        rnaseq => 'homo_sapiens_rnaseq_104_38',\n      },\n      mouse => {\n        core => 'mus_musculus_core_104_39',\n        variation => 'mus_musculus_variation_104_39',\n        funcgen => 'mus_musculus_funcgen_104_39',\n        otherfeatures => 'mus_musculus_otherfeatures_104_39',\n        rnaseq => 'mus_musculus_rnaseq_104_39',\n      },\n      # Add more species as needed\n    },\n  },\n\n  # API Documentation\n  docs_site => 'https://rest.ensembl.org',\n\n  # Controller configuration\n  Controller::Info => {\n    documentation => 'Ensembl REST API Documentation',\n    example => 'https://rest.ensembl.org/info/species'\n  },\n\n  # Plugin configuration\n  Plugin::Cache => {\n    backend => 'Memory',\n    expires_in => 3600,\n  },\n\n  # Versioning\n  api_version => 'v1',\n\n  # Rate limiting\n  <Plugin::RateLimiter>\n    max_requests => 15,\n    timeframe => 3600,\n    blacklist => ['192.168.0.1'],\n  </Plugin::RateLimiter>,\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving gene information from Ensembl REST API using Python and requests\nDESCRIPTION: This code demonstrates how to fetch information about the BRCA2 gene from the Ensembl REST API. It uses the requests library to make an HTTP GET request, specifying JSON as the desired response format.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/external_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests, sys\n\nserver = \"https://rest.ensembl.org\"\nextension = \"/lookup/symbol/homo_sapiens/BRCA2?\"\n\nr = requests.get(server+extension, headers={ \"Content-Type\" : \"application/json\"})\n \nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \ndecoded = r.json()\nprint(repr(decoded))\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint for Retrieving Region Sequence in Perl\nDESCRIPTION: This function handles requests for retrieving sequence information for a specific genomic region. It validates input parameters, fetches the sequence data, and formats the response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/prediction_transcript.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\nsub get_region : Chained('/') PathPart('sequence/region') Args(0) ActionClass('REST') Does('RegionLength') {}\n\nsub get_region_GET {\n  my ($self, $c) = @_;\n  my $region = $c->stash()->{region};\n  my $slice = $c->stash()->{slice};\n  my $seq_obj = $self->_seq_obj($slice);\n  $self->status_ok($c, entity => $seq_obj);\n}\n```\n\n----------------------------------------\n\nTITLE: Development Environment Configuration for Ensembl REST API\nDESCRIPTION: A configuration example for development environments showing debug settings, CORS configuration, and other options useful during development including database connection details.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/map.txt#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\\nname: EnsEMBL::REST\\nservice_name: rest\\nseqlevels:\\n  - chromosome\\n  - supercontig\\n  - primary_assembly\\nwww_root: http://rest.ensembl.org\\nensembl_rest:\\n  default:\\n    compara: multi\\n    compara_grch37: multi_grch37\\n    compara_mouse: multi_mouse\\n    debug: 1\\n    ontology: multi\\n    regulation: homo_sapiens\\n    variation: homo_sapiens\\n  multi:\\n    ce:\\n      alias: c_elegans\\n      compara: multi\\n      core: caenorhabditis_elegans_core_84_250\\n      otherfeatures: caenorhabditis_elegans_otherfeatures_84_250\\n      rnaseq: caenorhabditis_elegans_rnaseq_84_250\\n      variation: caenorhabditis_elegans_variation_84_250\\n    dm:\\n      alias: fruitfly\\n      compara: multi\\n      core: drosophila_melanogaster_core_84_602\\n      otherfeatures: drosophila_melanogaster_otherfeatures_84_602\\n      variation: drosophila_melanogaster_variation_84_602\\nCors:\\n  Origins: '*'\\nshow_data_structure_failures: 1\\n\\nspecies: homo_sapiens\\nmouse: mus_musculus\\nzebrafish: danio_rerio\\ncompara: multi\\nstarman_config:\\n  listen:\\n    - :5000\\n  pid: /tmp/restapi.pid\\n  #Access log format\\n  daemonize: 0\\n  error_log: /tmp/restapierror.log\\n  #access_log: /tmp/restapiajp.log\\n  #Minimum number of workers at start-up\\n  workers: 5\\n  #Maximum number of worker processes\\n  max_workers: 5\\n  max_requests: 10000\\nlog4perl:\\n  logger: console\\n  console:\\n    layout: %M %p %n %m%n\\n    class: Log::Log4perl::Appender::Screen\\n#Uncomment to generate docs for swagger\\n#documentation:\\n#  paths:\\n#    - %paths\\n#  out: rest.app\\n#  host: rest.ensembl.org\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Database Connections and Settings in Perl\nDESCRIPTION: This snippet defines the configuration for the Ensembl REST API, including database connections, caching options, and API-specific settings. It sets up connections to various Ensembl databases and configures content types and compression for API responses.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/exon.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  default_view => 'HTML',\n  using_frontend_proxy => 1,\n  jsonp_callback_parameters => ['callback', 'jsonp'],\n  # Disable compression on *everything*\n  # N.B. This is a bit of a hack. We should probably disable this on a per-endpoint basis\n  disable_component_resolution_regex_fallback => 1,\n  compression => 0,\n  encoding => 'UTF-8',\n  version_check => 'strict',\n  # Set max number of threads for any Catalyst based responses\n  # This is needed to prevent server overload in high traffic conditions\n  psgi_keep_alive => 0,\n  psgi_workers    => 16,\n  # API Cache configuration\n  cache_on_key => 1,\n  # Allow access to our API from any server, we will control who can do what\n  # at an API level\n  <Model::Registry>\n    # The default connection details for Ensembl databases\n    default_connection = {\n      host => 'ensembldb.ensembl.org',\n      port => '5306',\n      user => 'anonymous'\n    }\n    \n    # Access to GRCh37\n    version_check = strict\n    warn_if_cores_inconsistent = 1\n    species_groups = [\n      'vertebrates', # 'Vertebrates (65)' in the VEP web interface\n      'arthropods', # 'Metazoa (7)' in the VEP web interface\n      'microbes', # 'Bacteria (22)' in the VEP web interface\n      'fungi', # 'Fungi (11)' in the VEP web interface\n      'protists', # 'Protists (4)' in the VEP web interface\n      'plants', # 'Plants (51)' in the VEP web interface\n      'virus', # 'Viruses (1)' in the VEP web interface\n    ]\n    grch37 = {\n      host => 'grch37.ensembl.org',\n      port => '3306',\n      user => 'anonymous',\n    }\n  </Model::Registry>\n  \n  <Model::Lookup>\n    # Control if nested linked hash lookups are allowed. Say we lookup a Gene\n    # EG: /lookup/id/ENSG00000...\n    # The user can traverse into other linked information such as transcripts\n    # EG: /lookup/id/ENSG00000...?expand=1;format=full\n    allow_nested_lookup=1\n  </Model::Lookup>\n  \n  <Model::Sequence>\n  </Model::Sequence>\n  \n  <Model::GA4GH>\n  </Model::GA4GH>\n  \n  <Model::Ontology>\n  </Model::Ontology>\n  \n  <Model::Taxon>\n  </Model::Taxon>\n  \n  <Model::Overlap>\n  </Model::Overlap>\n  \n  <Model::Variation>\n    max_post_size=1000\n  </Model::Variation>\n  \n  <Model::LDFeatureContainer>\n  </Model::LDFeatureContainer>\n  \n  <Model::Homology>\n  </Model::Homology>\n  \n  <Model::Assembly>\n  </Model::Assembly>\n  \n  <View::JSON>\n    # JSON format config\n    exposeable_keys_only => 1\n    allow_blessed => 1\n    convert_blessed => 1\n    json_encoder_class => \"CBOR::XS\"\n  </View::JSON>\n  \n  <Plugin::Cache>\n    # Cache configuration\n    <backend>\n      class = CHI\n      # We can't use BerkeleyDB and Memcached because of CPAN dependency issues\n      # Memcached's module isn't installed because it's uninstallable and BerkeleyDB is not installed in production\n      driver = Memory\n      global = 1\n      # store => '/path/to/file/based/store'\n      # servers => ['memcached.example.com:11211']\n    </backend>\n  </Plugin::Cache>\n  \n  <Model::Documentation>\n    paths = [root/documentation]\n    cache_ttl = 3600\n    cache_class = Memory\n  </Model::Documentation>\n  \n  <Controller::Archive>\n    max_post_size=1000\n  </Controller::Archive>\n\n  <Plugin::Static::Simple>\n    include_path = [root/static]\n    ignore_extensions = []\n  </Plugin::Static::Simple>\n\n  <Plugin::Assets>\n    minify = 0\n    ignore_extensions = []\n  </Plugin::Assets>\n\n  <Model::VariationOther>\n    max_post_size=1000\n  </Model::VariationOther>\n\n  <Model::VariationVEP>\n    max_post_size=100000\n  </Model::VariationVEP>\n\n  <Model::VariationPhenotypeFeature>\n  </Model::VariationPhenotypeFeature>\n\n  <Model::Transcript>\n  </Model::Transcript>\n\n  <Model::Compara>\n  </Model::Compara>\n\n  <Model::SpeciesSet>\n  </Model::SpeciesSet>\n\n  <Model::Info>\n  </Model::Info>\n\n  <Model::RegulationOther>\n  </Model::RegulationOther>\n\n  <Model::Variant>\n  </Model::Variant>\n\n  <Model::Phenotype>\n  </Model::Phenotype>\n}\n\n```\n\n----------------------------------------\n\nTITLE: POSTing to REST server using HTTP::Request in Perl\nDESCRIPTION: Demonstrates how to use HTTP::Request with LWP::UserAgent in Perl to send POST requests to the Ensembl REST API. Shows creating a request object with headers and a JSON payload.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/external_synonym.txt#2025-04-22_snippet_4\n\nLANGUAGE: perl\nCODE:\n```\nuse strict;\nuse warnings;\nuse HTTP::Request;\nuse LWP::UserAgent;\nuse JSON;\n\nmy $ua = LWP::UserAgent->new();\n\nmy $server = 'https://rest.ensembl.org';\nmy $ext = '/vep/human/hgvs';\nmy $request = HTTP::Request->new('POST', $server.$ext, ['Content-type' => 'application/json']);\n$request->content('{\"hgvs_notations\":[\"ENST00000494142:c.48C>A\",\"ENST00000313050:c.136G>A\"]}');\n\nmy $response = $ua->request($request);\n\ndie \"Failed!\\n\" unless $response->is_success;\n\nif(length $response->decoded_content) {\n  my $hash = decode_json($response->decoded_content);\n  foreach my $entry (@{$hash}) {\n    print $entry->{transcript_id}, \":\", $entry->{most_severe_consequence}, \"\\n\";\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Overlapping Features with Feature Type Filtering in Ensembl REST API\nDESCRIPTION: This example shows how to retrieve overlapping features of specific types (gene, transcript, cds) from a genomic region. Multiple feature types can be specified in a single request.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://rest.ensembl.org/overlap/region/human/7:140424943-140624564?feature=gene;feature=transcript;feature=cds;content-type=application/json\"\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Request to Ensembl API in Perl\nDESCRIPTION: This function performs an HTTP GET request to the Ensembl API. It constructs the URL using the _url function, sets up headers including content type and user agent, and handles the response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/splicing_event.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\nsub get {\n  my ($self, $path, $params) = @_;\n  my $url = $self->_url($path, $params);\n  my $response = $self->http_get($url,\n    {\n      headers => {\n        'Content-type' => 'application/json',\n        %{$self->extra_headers},\n      }\n    }\n  );\n  my $content;\n  if (exists $response->{content}) {\n    $content = $response->{content};\n  } else {\n    $content = $response->content;\n  }\n  return $self->json->decode($content);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Ensembl REST API with Python requests\nDESCRIPTION: Example of using Python's requests library to access the Ensembl REST API. This code shows how to make a GET request with proper headers and process the response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/assembly.txt#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport requests, sys\n\nserver = \"https://rest.ensembl.org\"\next = \"/info/ping\"\n\nr = requests.get(server+ext, headers={ \"Content-Type\" : \"application/json\"})\n\nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n\nprint(r.json())\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Ensembl REST API Development Environment\nDESCRIPTION: A Docker Compose configuration that sets up a development environment for the Ensembl REST API. It defines services for the REST API and a Swagger UI container, with volume mappings for local development and network configurations.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon_transcript.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  rest:\n    build:\n      context: ../\n      dockerfile: ./docker/Dockerfile\n    volumes:\n      - \"../:/app\"\n    ports:\n      - \"3000:3000\"\n    networks:\n      - ens-net\n    environment:\n      - SRV_HOST=\"0.0.0.0\"\n      - SRV_PORT=3000\n\n  swagger-ui:\n    image: swaggerapi/swagger-ui\n    ports:\n      - 8080:8080\n    environment:\n      - SWAGGER_JSON=/specs/rest_dev.json\n    volumes:\n      - \"../root/documentation:/specs\"\n    networks:\n      - ens-net\n\nnetworks:\n  ens-net:\n    external: false\n```\n\n----------------------------------------\n\nTITLE: Querying Ensembl Elasticsearch API endpoint using curl\nDESCRIPTION: Example of using curl to query the Ensembl Elasticsearch endpoint. This basic request demonstrates how to search for the gene 'BRCA2' using the Ensembl REST API's search endpoint with JSON format specified.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/unconventional_transcript_association.txt#2025-04-22_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl 'https://rest.ensembl.org/search/BRCA2' -H 'Content-type:application/json'\n```\n\n----------------------------------------\n\nTITLE: Implementing Track Hub Endpoint for Ensembl REST API in Perl\nDESCRIPTION: Defines a REST endpoint to generate track hub information. This method validates parameters, processes track hub requests, and returns a properly formatted response with appropriate content type. It handles errors, formats URLs, and manages the response structure.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/data_set.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nsub trackhub : Chained('experiment') PathPart('trackhub') Args(0) ActionClass('REST') { }\n\nsub trackhub_GET {\n  my ( $self, $c ) = @_;\n\n  # optional parameter to specify whether to use a subdomain, default is 1\n  # (/experiment/trackhub?subdomain=0)\n  my $subdomain = $c->request->param('subdomain') // 1;\n\n  # validate boolean parameter\n  if ($subdomain !~ /^[01]$/) {\n    $c->go('ReturnError', 'custom', [qq{subdomain parameter must be 0 or 1, if specified}]);\n  }\n\n  my $hub_info = {};\n  my $url = $c->request->base;\n  $url->path_query(\"\"); # remove '/experiment/trackhub' from url\n\n  # remove subdomain from url if specified\n  if ( $subdomain ) {\n    my $host = $url->host;\n    $host =~ s/^[^\\.]+\\.(.*)/\\1/;\n    $url->host($host);\n  }\n\n  # build hub info with full URIs\n  $hub_info->{url} = $url->as_string;\n  $hub_info->{trackhub} = $c->request->base->as_string;\n\n  $self->status_ok( $c, entity => $hub_info );\n  $c->response->header( 'Content-Type' => 'text/plain' );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Ensembl REST API with Perl\nDESCRIPTION: A Perl example showing how to access the Ensembl REST API using the HTTP::Tiny module. It demonstrates making a request to retrieve genetic data and handling the response, including proper setting of headers and content-type specification.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/qtl_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nuse strict;\nuse warnings;\nuse HTTP::Tiny;\nuse JSON;\n\nmy $http = HTTP::Tiny->new();\nmy $server = 'http://rest.ensembl.org';\nmy $ext = '/sequence/id/ENSG00000157764?';\nmy $response = $http->get($server.$ext, {\n  headers => { 'Content-type' => 'application/json' }\n});\n\ndie \"Failed!\\n\" unless $response->{success};\n\nif(length $response->{content}) {\n  print \"Query returned: \".$response->{content}.\"\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Package and Controller Class Definition\nDESCRIPTION: This code shows how to define a controller package for an Ensembl REST API endpoint. It demonstrates the proper naming convention and inheritance structure for resource controllers in the application.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/alt_allele.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\npackage EnsEMBL::REST::Controller::Sequence;\nuse Moose;\nuse namespace::autoclean;\n\nBEGIN { extends 'Catalyst::Controller::REST'; }\n```\n\n----------------------------------------\n\nTITLE: Querying Variation Data in Ensembl REST API with Perl\nDESCRIPTION: A controller method for handling genetic variation queries in the Ensembl REST API. It specifies how to extract variation information for a given transcript ID, handling species and population filters.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/seq_region_attrib.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nsub get_transcript_haplotypes_GET {\n  my ($self, $c, $species, $id) = @_;\n  my $population_name = $c->request->param('population_name');\n  \n  try {\n    my $tr_haps = $c->model('ga4gh::TranscriptHaplotypes')->fetch_by_transcript($id, $population_name);\n    $self->status_ok($c, entity => $tr_haps);\n  } catch {\n    $c->go('ReturnError', 'from_ensembl', [$_]);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS and Rate Limiting for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets up Cross-Origin Resource Sharing (CORS) and rate limiting for the Ensembl REST API. It defines allowed origins, headers, and methods for CORS, as well as rate limiting parameters.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/marker_map_location.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\n<Plack::Middleware::CrossOrigin>\nallow_origins = *\nallow_headers = Content-Type\nallow_methods = GET OPTIONS\n</Plack::Middleware::CrossOrigin>\n\n<Plack::Middleware::ReverseProxy>\nuse = 1\n</Plack::Middleware::ReverseProxy>\n\n<Plack::Middleware::SizeLimit>\nuse = 1\nmax_unshared_size_in_kb = 120000\nmin_shared_size_in_kb = 2000\nmax_process_size_in_kb = 200000\ncheck_every_n_requests = 10\n</Plack::Middleware::SizeLimit>\n\n[Plugin::Cache]\nuse = 1\n\n[Plack::Middleware::EnsThrottle::MemcachedBackend]\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sequence Data from Ensembl REST API in Python\nDESCRIPTION: This snippet shows how to fetch sequence data for a specific genomic region using the Ensembl REST API. It retrieves the sequence for a portion of the BRCA2 gene.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/transcript_intron_supporting_evidence.txt#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nsequence = client.sequence_region('human', 'BRCA2', start=32316461, end=32316470)\nprint(f\"Sequence: {sequence['seq']}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Routes in Perl\nDESCRIPTION: This code snippet defines the routes for an Ensembl REST API endpoint. It maps various URL patterns to specific controller actions, allowing access to genetic data such as variations, phenotypes, and genomic features. The configuration uses the Catalyst framework's chained dispatch type for flexible routing.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/qtl.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nuse strict;\nuse warnings;\n\nsub endpoints {\n  my ($self) = @_;\n  my $parent = $self->next::method();\n\n  my $dba_check = sub {\n    my $c = shift;\n    $c->stash(variation_adaptor => $c->model('Registry')->get_adaptor($c->stash->{species}, 'Variation', 'Variation'));\n    $c->stash(transcript_variation_adaptor => $c->model('Registry')->get_adaptor($c->stash->{species}, 'Variation', 'TranscriptVariation'));\n    $c->stash(vep_adaptor => $c->model('Registry')->get_adaptor($c->stash->{species}, 'variation', 'VariationFeature'));\n    $c->stash(phenotype_adaptor => $c->model('Registry')->get_adaptor($c->stash->{species}, 'variation', 'phenotype'));\n    $c->stash(population_adaptor => $c->model('Registry')->get_adaptor($c->stash->{species}, 'variation', 'population'));\n    $c->stash(variation_feature_adaptor => $c->model('Registry')->get_adaptor($c->stash->{species}, 'variation', 'variationfeature'));\n  };\n\n  push @{$parent}, (\n    # Variation related Endpoints\n    [qw/variation species/,\n      [qw/id/,\n        [qw/GET/, 'Lookup'],\n        ['sources', [qw/GET/, 'Sources']],\n        ['phenotypes', [qw/GET/, 'Phenotypes']],\n        ['populations', [qw/GET/, 'Populations']],\n        ['genotypes', [qw/GET/, 'Genotypes']],\n      ]\n    ],\n    [qw/vep species/,\n      [qw/region/, [qw/POST/, 'RegionVEP']],\n      [qw/id/, [qw/POST/, 'IdVEP']],\n    ],\n    [qw/variation_feature species/,\n      [qw/region/, [qw/GET/, 'VariationFeatureRegionGet']],\n    ],\n    [qw/structural_variation species/,\n      [qw/id/,\n        [qw/GET/, 'StructuralVariationIdGet'],\n      ],\n    ],\n    [qw/phenotype species region/,\n      [qw/GET/, 'PhenotypeRegionGet'],\n    ],\n    [qw/gene species/,\n      [qw/id/,\n        [qw/haplotypes/, [qw/GET/, 'HapStatGet']],\n        [qw/variation_graph/, [qw/GET/, 'VariationGraphGet']],\n      ],\n    ],\n  );\n\n  return $parent;\n}\n\n1;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Overlapping Features by Region in Ensembl REST API\nDESCRIPTION: This example demonstrates how to retrieve all gene features that overlap with a specific genomic region. The request specifies the species, chromosome, start and end positions of the region.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://rest.ensembl.org/overlap/region/human/7:140424943-140624564?feature=gene;content-type=application/json\"\n```\n\n----------------------------------------\n\nTITLE: Executing GET Request with cURL to Ensembl REST API\nDESCRIPTION: This snippet demonstrates how to retrieve data from an Ensembl REST API endpoint using cURL. It makes a GET request to the lookup endpoint for a specific genome ID, passing content-type and accept headers.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/analysis.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-type:application/json\" -H \"Accept:application/json\" \\\nhttp://rest.ensembl.org/lookup/id/ENSG00000157764?\n```\n\n----------------------------------------\n\nTITLE: Converting coordinates between species with Python\nDESCRIPTION: This Python code demonstrates how to convert genomic coordinates between species using the Ensembl REST API. It sends a GET request to the map/human/GRCh37 endpoint to convert coordinates from human assembly GRCh37 to mouse assembly GRCm38.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon_transcript_gene.txt#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport requests, sys\n\nserver = \"https://rest.ensembl.org\"\next = \"/map/human/GRCh37/7:140424943-140424943:1/mouse?\"\n\nr = requests.get(server+ext, headers={ \"Content-Type\" : \"application/json\"})\n \nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \nprintable = r.json()\nprint(printable)\n```\n\n----------------------------------------\n\nTITLE: Querying Variant Effect Prediction Endpoint in Ensembl REST API\nDESCRIPTION: This snippet demonstrates how to use the variant effect prediction endpoint in the Ensembl REST API. It shows the URL structure, required parameters, and an example of the expected JSON response format.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/analysis.txt#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nGET /vep/:species/region/:region/:allele/\n\nRequired Parameters:\nspecies : Species name/alias\nregion : Query region e.g 9:22125503-22125502:1\nallele : Variation allele\n\n# Example Response:\n{\n  \"variant_consequences\" : [{\n    \"variant_allele\" : \"C\",\n    \"consequences\" : [\n       {\n         \"consequence_terms\" : [\n           \"downstream_gene_variant\"\n         ],\n         \"impact\" : \"MODIFIER\",\n         \"gene_id\" : \"ENSG00000178188\",\n         \"gene_symbol\" : \"THBD\"\n       }\n    ]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Authentication for Ensembl REST API\nDESCRIPTION: Sets up custom authentication for the Ensembl REST API using Catalyst::Authentication. It defines authentication realms, credential validation, and user storage methods.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/exon_transcript.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\n__PACKAGE__->config(\n  'Plugin::Authentication' => {\n    default => {\n      credential => {\n        class => 'Password',\n        password_field => 'password',\n        password_type => 'self_check',\n      },\n      store => {\n        class => 'Minimal',\n        users => {\n          admin => {\n            password => \"admin\",\n          },\n        },\n      },\n    },\n    no_user => {\n      credential => {\n        class => 'Password',\n        password_field => 'password',\n        password_type => 'none',\n      },\n      store => {\n        class => 'Minimal',\n        users => {},\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Assembly Accession in Ensembl REST API (Perl)\nDESCRIPTION: This function retrieves the assembly accession for a given species. It uses the Ensembl API to access the species' meta container and fetch the assembly accession number.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/stable_id_event.txt#2025-04-22_snippet_4\n\nLANGUAGE: Perl\nCODE:\n```\nsub _assembly_accession {\n  my ($self, $species) = @_;\n  my $dba = $self->_get_DBAdaptor($species);\n  return $dba->get_MetaContainer()->single_value_by_key('assembly.accession');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoints for Ensembl REST in Perl\nDESCRIPTION: This code block specifies the API endpoints for the Ensembl REST service. It includes various endpoints for different functionalities such as info, lookup, and overlap.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/marker_map_location.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\n[Controller::Info]\n[Controller::Lookup]\n[Controller::Assembly]\n[Controller::Overlap]\n[Controller::Map]\n[Controller::Sequence]\n[Controller::Variation]\n[Controller::Regulatory]\n[Controller::Homology]\n[Controller::VEP]\n\n[View::GFF3]\n[View::HTML]\n[View::YAML]\n\n[Model::Documentation]\n\n[Plugin::Cache]\nuse = 1\n```\n\n----------------------------------------\n\nTITLE: Querying VEP with GET request using bash curl\nDESCRIPTION: Example of querying the Variant Effect Predictor (VEP) REST API endpoint using curl in bash to analyze a genomic variant. Shows how to use the GET method to retrieve data about a specific variant.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/external_synonym.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://rest.ensembl.org/vep/human/hgvs/ENST00000494142:c.48C>A?content-type=application/json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets up authentication for the Ensembl REST API. It defines the authentication realm, credential store, and session configuration.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/karyotype.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\n  $c->config->{Authentication} = {\n    default_realm => 'ensembl',\n    realms => {\n      ensembl => {\n        credential => {\n          class => 'Password',\n          password_field => 'password',\n          password_type => 'clear'\n        },\n        store => {\n          class => 'DBIx::Class',\n          user_model => 'DB::User',\n        }\n      }\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Requesting Feature IDs with Additional Parameters in Ensembl REST API\nDESCRIPTION: This example shows how to request feature information with expanded details by setting the 'expand' parameter to 1. This returns additional information about the feature including its parent and child objects.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://rest.ensembl.org/lookup/id/ENSG00000157764?content-type=application/json;expand=1\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Genomic Features with Ensembl REST API\nDESCRIPTION: This code snippet demonstrates how to fetch genomic features using the Ensembl REST API. It shows an example request to retrieve features within a specific genomic region for the human genome.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/ditag.txt#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /overlap/region/human/7:140424943-140624564?feature=gene HTTP/1.1\nHost: rest.ensembl.org\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Installing Ensembl API dependencies via Git\nDESCRIPTION: Commands to clone Ensembl API repositories from GitHub into a specified directory structure. This sets up the required Ensembl API modules that the REST server depends on.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/ditag.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Ensembl/ensembl.git\ngit clone https://github.com/Ensembl/ensembl-io.git\ngit clone https://github.com/Ensembl/ensembl-variation.git\ngit clone https://github.com/Ensembl/ensembl-funcgen.git\ngit clone https://github.com/Ensembl/ensembl-compara.git\n```\n\n----------------------------------------\n\nTITLE: Defining Endpoint Path in Perl with Catalyst\nDESCRIPTION: This code snippet demonstrates how to define a RESTful endpoint path in Perl using Catalyst's chained dispatch system. It defines a parent chain with versioning and shows how to create a Lookup endpoint that will respond to GET requests.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/alt_allele.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\npackage EnsEMBL::REST::Controller::Archive;\n\nuse Moose;\nuse namespace::autoclean;\nuse Try::Tiny;\n\n__PACKAGE__->config(PROMETHEUS_INSTRUMENTATE => 1);\n\nBEGIN { extends 'Catalyst::Controller::REST'; }\n\n# This creates the basis for the REST URL\n# e.g. /archive/\n# The /** creates a chained matching meaning we will try to capture\n# any endpoint that is prefixed with /archive/\nsub id_GET : Chained('') Path('/archive/id') Args(1) ActionClass('REST') {}\nsub id_GET_GET {\n  # Rest of code\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Variant Effect Predictions with cURL from Ensembl VEP Endpoint\nDESCRIPTION: This cURL command demonstrates how to use the Variant Effect Predictor (VEP) REST endpoint. It sends a POST request with variant data to predict the effects of chromosome 7 variants on the BRAF gene.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/analysis.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-type:application/json\" -H \"Accept:application/json\" -X POST -d '{ \"variants\": [\"7 140453136 140453136 A/T 1\"] }' \\\nhttp://rest.ensembl.org/vep/homo_sapiens/region?\n```\n\n----------------------------------------\n\nTITLE: Requesting Gene Homology with Target Species Filter in Python\nDESCRIPTION: This snippet demonstrates requesting homology data for a specific gene with a target species filter. It uses the Ensembl REST API and appends the 'target_species' parameter to restrict results.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/associated_group.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nserver = \"https://rest.ensembl.org\"\nextension = \"/homology/id/ENSG00000157764?target_species=human;sequence=none\"\n\nr = requests.get(server+extension, headers={ \"Content-Type\" : \"application/json\"})\n \nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \ndecoded = r.json()\nprint(repr(decoded))\n```\n\n----------------------------------------\n\nTITLE: Formatting HGVS Notation for VEP Processing in Perl\nDESCRIPTION: This function formats HGVS notation for use with the Variant Effect Predictor. It processes the input HGVS string and prepares it in the format required by the VEP, handling both genomic and transcript-based notations.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/karyotype.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\nsub _format_hgvs {\n  my ($self, $c, $hgvs, $version) = @_;\n  my ($id_part, $syn_part) = split ':', $hgvs, 2;\n  my ($first_part, $second_part);\n  \n  if($id_part =~ /^ENST/) {\n    $first_part = 't';\n  }\n  elsif($id_part =~ /^ENSP/) {\n    $first_part = 'p';\n  }\n  elsif($id_part =~ /^(ENS[A-Z]+)?[0-9]+$/ || $id_part =~ /^([0-9]+|[XY]|MT?):g$/) {\n    $first_part = 'g';\n    $hgvs =~ s/:g/:/ if $hgvs =~ /:g/;\n    \n    #If we don't have an assembled piece of genomic sequence (a region), don't continue\n    return { id => $hgvs };\n  }\n  else {\n    Catalyst::Exception->throw(message => \"HGVS notation not supported: $hgvs\");\n  }\n  \n  # Version specified when transcript ID doesn't have it\n  if($hgvs !~ /\\.[0-9]+:/ && $version) {\n    $hgvs =~ s/:/\\.$version:/;\n  }\n  \n  return { id => $hgvs };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Data Type Coercions in Perl\nDESCRIPTION: Defines a method to handle JSON data type coercions for the Ensembl REST API. This method processes different field types and applies appropriate transformations to ensure data consistency.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/transcript_supporting_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nsub write_type_coercions {\n  my ($self, $fields) = @_;\n  my $coercions = {};\n  foreach my $field (@{$fields}) {\n    my $type = $field->{type};\n    my $key  = $field->{name};\n    if($type eq 'json') {\n      my $code = sub {\n        my ($t) = @_;\n        return $t if ref($t);\n        return undef if ! defined $t;\n        my $decoded_json;\n        eval {\n          $decoded_json = decode_json($t);\n        };\n        if($@) {\n          die {message => \"Could not decode json for field $key\", code => HTTP_BAD_REQUEST};\n        }\n        return $decoded_json;\n      };\n      $coercions->{$key} = $code;\n    }\n    elsif($type eq 'boolean') {\n      $coercions->{$key} = sub {\n        my ($t) = @_;\n        return 0 if ! defined $t;\n        if($t eq 'false' || $t == 0) {\n          return 0;\n        }\n        if($t eq 'true' || $t >= 1) {\n          return 1;\n        }\n        return $t;\n      };\n    }\n    elsif($type eq 'enum') {\n      $coercions->{$key} = sub {\n        my ($t) = @_;\n        return if ! defined $t;\n        return $t\n      };\n    }\n    elsif($type eq 'numeric') {\n      $coercions->{$key} = sub {\n        my ($t) = @_;\n        return if ! defined $t;\n        return $t;\n      };\n    }\n    elsif($type eq 'integer') {\n      $coercions->{$key} = sub {\n        my ($t) = @_;\n        return if ! defined $t;\n        return $t;\n      };\n    }\n    elsif($type eq 'string') {\n      $coercions->{$key} = sub {\n        my ($t) = @_;\n        return if ! defined $t;\n        return $t;\n      };\n    }\n    elsif($type eq 'object') {\n      $coercions->{$key} = sub {\n        my ($t) = @_;\n        return if ! defined $t;\n        if($field->{model} eq 'gene') {\n          return EnsEMBL::REST::EnsemblModel::Gene->new_from_json($t);\n        } elsif($field->{model} eq 'transcript') {\n          return EnsEMBL::REST::EnsemblModel::Transcript->new_from_json($t);\n        } elsif($field->{model} eq 'exon') {\n          return EnsEMBL::REST::EnsemblModel::Exon->new_from_json($t);\n        } elsif($field->{model} eq 'variation') {\n          return EnsEMBL::REST::EnsemblModel::Variation->new_from_json($t);\n        } elsif($field->{model} eq 'variation_feature') {\n          return EnsEMBL::REST::EnsemblModel::VariationFeature->new_from_json($t);\n        } elsif($field->{model} eq 'transcript_variation') {\n          return EnsEMBL::REST::EnsemblModel::TranscriptVariation->new_from_json($t);\n        } else {\n          die \"model $field->{model} could not be found\";\n        }\n      };\n    }\n    else {\n      $coercions->{$key} = sub {\n        my ($t) = @_;\n        return $t;\n      };\n    } \n  }\n  return $coercions;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Ensembl REST API on Kubernetes\nDESCRIPTION: Kubernetes deployment and service configuration for the Ensembl REST API. It defines the deployment strategy, resource allocation, and exposes the service.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/qtl_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ensembl-rest-deployment\n  labels:\n    app: ensembl-rest\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: ensembl-rest\n  template:\n    metadata:\n      labels:\n        app: ensembl-rest\n    spec:\n      containers:\n      - name: ensembl-rest\n        image: ensemblorg/ensembl-rest:release-110\n        ports:\n        - containerPort: 3000\n        resources:\n          limits:\n            cpu: \"1\"\n            memory: 4Gi\n          requests:\n            cpu: 500m\n            memory: 2Gi\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: ensembl-rest-service\nspec:\n  selector:\n    app: ensembl-rest\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 3000\n  type: LoadBalancer\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Sequence Data from Ensembl REST API\nDESCRIPTION: This snippet illustrates how to use the sequence retrieval endpoint in the Ensembl REST API. It shows the URL structure, required parameters, and an example of the expected JSON response format for sequence data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/analysis.txt#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nGET /sequence/id/:id\n\nRequired Parameters:\nid : Stable ID of the feature to retrieve sequence for\n\n# Example Response:\n{\n  \"seq\" : \"ATGCTTGAAGGTGAGCTGGCCTCTCTCTGCCTGGTGGCTGGCATTGCTGCTAC...\",\n  \"id\" : \"ENST00000377001\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets up rate limiting for the Ensembl REST API. It defines the maximum number of requests allowed per second and the path to exempt from rate limiting.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/intron_supporting_evidence.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\n<Plugin::Authentication>\n  use = NoPassword\n</Plugin::Authentication>\n\n<Controller::Root>\n  max_requests_per_second = 15\n  # Use this to tailor a response on breach\n  max_requests_message = \"You have exceeded the limit of 15 requests per second\"\n  paths_exempt_from_rate_limiting = \"/healthcheck|/archive\"\n</Controller::Root>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Regulatory Features with Ensembl REST API\nDESCRIPTION: Example JSON response for regulatory feature data from the Ensembl REST API. The response includes details about regulatory elements such as enhancers and transcription factor binding sites in a specific genomic region.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/stable_id_history.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"binding_matrix\": {\n    \"length\": 6,\n    \"name\": \"MA0139.1\",\n    \"source\": \"JASPAR\"\n  },\n  \"end\": 1054765,\n  \"score\": 6.868,\n  \"stable_id\": \"ENSM00000000080\",\n  \"start\": 1054760,\n  \"strand\": \"+\",\n  \"transcription_factor\": \"CTCF\"\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Ensembl Variation Data in JSON Format\nDESCRIPTION: This example shows how to request variation data from the Ensembl REST API using curl. The request targets a specific human variant (rs116035550) and specifies the JSON output format.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/mapping_set.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-type:application/json\" 'http://rest.ensembl.org/variation/human/rs116035550'\n```\n\n----------------------------------------\n\nTITLE: Advanced Starman Server Configuration for Production\nDESCRIPTION: Command to start the Ensembl REST API server in a production environment with more detailed configuration, including number of workers, host, port, and daemonization options.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/map.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd ensembl-rest\nstarman --workers 10 --pid ensrest.pid --daemonize --listen :8080 --error-log ensrest.error.log bin/production/start_rest_server.pl\n```\n\n----------------------------------------\n\nTITLE: Querying Ensembl REST API for Variant Consequence\nDESCRIPTION: This example demonstrates how to use the Ensembl REST API to get the consequences of a specific variant. It uses the 'vep/human/hgvs' endpoint with an HGVS notation for the variant and specifies JSON as the response format.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/splicing_transcript_pair.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /vep/human/hgvs/AGT:c.803T>C?content-type=application/json\n```\n\n----------------------------------------\n\nTITLE: Querying for Gene Symbol Information in Ensembl REST API\nDESCRIPTION: This example demonstrates how to query for a specific gene by its symbol (BRCA2) in human. The endpoint returns information about the gene including its stable ID and other relevant details.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://rest.ensembl.org/lookup/symbol/homo_sapiens/BRCA2?content-type=application/json\"\n```\n\n----------------------------------------\n\nTITLE: Using Taxonomy Filter with Homology Endpoint in Ensembl REST API\nDESCRIPTION: This code example queries the Ensembl REST API for homology data with a taxonomy filter. It uses a target taxonomy ID of 9526 to focus results on specific taxonomic groups, demonstrating how to refine orthology searches.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/associated_group.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nserver = \"https://rest.ensembl.org\"\nextension = \"/homology/id/ENSG00000157764?target_taxon=9526;sequence=none\"\n\nr = requests.get(server+extension, headers={ \"Content-Type\" : \"application/json\"})\n \nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \ndecoded = r.json()\nprint(repr(decoded))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gene Information from Ensembl REST API\nDESCRIPTION: This snippet shows how to use the gene lookup endpoint in the Ensembl REST API. It includes the URL structure, required parameters, and an example of the expected JSON response format for gene information.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/analysis.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nGET /lookup/id/:id\n\nRequired Parameters:\nid : Gene stable ID\n\n# Example Response:\n{\n  \"source\" : \"ensembl\",\n  \"object_type\" : \"Gene\",\n  \"logic_name\" : \"ensembl_havana_gene\",\n  \"species\" : \"homo_sapiens\",\n  \"description\" : \"thrombomodulin [Source:HGNC Symbol;Acc:HGNC:11784]\",\n  \"display_name\" : \"THBD\",\n  \"biotype\" : \"protein_coding\",\n  \"strand\" : -1,\n  \"end\" : 22125508,\n  \"id\" : \"ENSG00000178188\",\n  \"start\" : 22098013,\n  \"version\" : 14,\n  \"name\" : \"THBD\",\n  \"seq_region_name\" : \"20\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Epigenomes REST Controller Module in Perl\nDESCRIPTION: Defines the EnsEMBL::REST::Controller::Epigenomes package with Moose, setting up the controller's namespace, chained actions, and dependencies. It establishes the base path for all epigenome-related endpoints.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/peptide_archive.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\npackage EnsEMBL::REST::Controller::Epigenomes;\n\nuse Moose;\nuse namespace::autoclean;\nuse Try::Tiny;\nuse Bio::EnsEMBL::Utils::Scalar qw/wrap_array/;\n\nrequires 'epigenomes_adaptor';\n\n__PACKAGE__->config(\n  map => {\n    'text/x-gff3' => [qw/View GFF3/],\n  }\n);\n\nbegin { extends 'Catalyst::Controller::REST'; }\n\n# This will be the basis for the rest of the paths\nsub epigenomes :Chained('/') PathPart('epigenomes') CaptureArgs(0) {}\n\n```\n\n----------------------------------------\n\nTITLE: Building Ensembl REST API Docker Image\nDESCRIPTION: Dockerfile instructions for building the Ensembl REST API image. It sets up the base environment, installs dependencies, and configures the application.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/qtl_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM ensemblorg/ensembl-base:release-110\n\nLABEL maintainer=\"dev@ensembl.org\"\n\nENV PERL5LIB_DEFAULT ${PERL5LIB}\n\nRUN apt-get update && \\\n    apt-get install -y curl && \\\n    cpanm --force Catalyst::Action::REST::AddContentTypeHeader Catalyst::Component::InstancePerContext Catalyst::Controller::REST@1.21 Catalyst::Plugin::Cache::FastMmap CHI::Driver::Memcached DateTime::Format::Strptime@1.77 Digest::MD5::File File::Temp HTTP::Tiny JSON::XS List::MoreUtils Lingua::EN::Inflect Module::Build Readonly::XS Starman@0.4014 SQL::Translator Text::Unidecode URI::Escape XML::Writer@0.625\n\nENV OPT_USE_APPEND_ASSEMBLY_ID 0\nADD . /opt/ensembl-rest\nWORKDIR /opt/ensembl-rest\n\nRUN ln -sf /ensembl-plugins /opt/ensembl-rest/ensembl-plugins\n\nCMD [\"/bin/bash\"]\n\n```\n\n----------------------------------------\n\nTITLE: Converting coordinates between species with curl\nDESCRIPTION: This shell command demonstrates how to use curl to convert genomic coordinates between species using the Ensembl REST API. It sends a GET request to the map/human/GRCh37 endpoint to convert coordinates from human assembly GRCh37 to mouse assembly GRCm38.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon_transcript_gene.txt#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-type:application/json\" \\\nhttps://rest.ensembl.org/map/human/GRCh37/7:140424943-140424943:1/mouse? | jq .\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Logging in Perl\nDESCRIPTION: This snippet sets up the logging configuration for the Ensembl REST API. It defines the log level, file path, and format for the application logs.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/translation_attrib.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\n  log4perl => {\n    logger => {\n      ROOT => {\n        level => 'WARN',\n        appender => 'Screen',\n      },\n    },\n    appender => {\n      Screen => {\n        plugin => 'Log::Log4perl::Appender::Screen',\n        stderr => 1,\n        layout => 'EnsEMBL::REST::PatternLayout',\n      },\n      DebugFile => {\n        plugin => 'Log::Log4perl::Appender::File',\n        filename => 'debug.log',\n        mode => 'append',\n        layout => 'EnsEMBL::REST::PatternLayout',\n      },\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Testing Gene Filtering Functionality in Ensembl REST API\nDESCRIPTION: This code snippet demonstrates how to test gene filtering functionality in the Ensembl REST API. It creates a list of test genes with different biotypes and tests the filtering process based on those biotypes and other criteria.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/unmapped_object.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\nmy $genes = [\n  #should pass\n  bless({'biotype' => 'protein_coding', 'status' => 'KNOWN', 'source' => 'ensembl'}),\n  #shouldn't since version 70\n  bless({'biotype' => 'ensembl', 'status' => 'KNOWN', 'source' => 'nonsense'}),\n  #filter_biotype should reject this\n  bless({'biotype' => 'pseudogene', 'status' => 'KNOWN', 'source' => 'ensembl'}),\n  #filter_biotype should reject this\n  bless({'biotype' => 'LRG_gene', 'status' => 'KNOWN', 'source' => 'ensembl'}),\n  #should let LRG through because we only filter when source is ensembl\n  bless({'biotype' => 'LRG_gene', 'status' => 'KNOWN', 'source' => 'non_ensembl_source'}),\n  #but this will also go since status is KNOWN and source is ensembl (and can_filter is set to true)\n  bless({'biotype' => 'RNA', 'status' => 'KNOWN', 'source' => 'ensembl'}),\n  #filter_biotype should reject this\n  bless({'biotype' => 'processed_transcript', 'status' => 'KNOWN', 'source' => 'ensembl'}),\n  #Has a null status and should be let through\n  bless({'biotype' => 'processed_transcript', 'status' => undef, 'source' => 'ensembl'}),\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Variant Lookup Endpoint in Perl\nDESCRIPTION: This code snippet implements an endpoint for looking up variant information. It includes parameter validation and error handling.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/unmapped_reason.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\npost '/variant/lookup' => sub {\n  my $c = shift;\n  my $params = $c->req->json;\n  \n  unless ($params && ref($params) eq 'HASH') {\n    $c->render(status => 400, json => { error => 'Invalid request format' });\n    return;\n  }\n  \n  # Further implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying Ensembl REST API with Starman\nDESCRIPTION: Perl script for deploying the Ensembl REST API using Starman. It sets up the server environment, defines startup parameters, and launches the application.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/CAFE_gene_family.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse Daemon::Control;\n\nmy $root_dir = '/ensembl/ensembl-rest';\nmy $starman = '/ensembl/ensembl-rest/bin/starman';\nmy $workers = 10;\nmy $port = 8080;\n\nmy $init = Daemon::Control->new(\n    name        => \"ensrest\",\n    lsb_start   => '$syslog $remote_fs',\n    lsb_stop    => '$syslog',\n    lsb_sdesc   => 'Ensembl REST server control',\n    lsb_desc    => 'Ensembl REST server control',\n    path        => '/ensembl/ensembl-rest/ensrest.pl',\n    program     => $starman,\n    program_args => [\n        '--workers', $workers,\n        '--listen', \":${port}\",\n        '--env', 'production',\n        \"${root_dir}/ensrest.psgi\"\n    ],\n    pid_file    => '/ensembl/ensembl-rest/ensrest.pid',\n    stderr_file => '/ensembl/ensembl-rest/logs/error.log',\n    stdout_file => '/ensembl/ensembl-rest/logs/access.log',\n    fork        => 2,\n);\n\n$init->run;\n```\n\n----------------------------------------\n\nTITLE: Setting up Ensembl REST API tests with Test::More framework in Perl\nDESCRIPTION: This snippet sets up a test environment for the Ensembl REST API using the Test::More and Test::Deep frameworks. It initializes the test with a plan for 66 tests and loads the necessary Ensembl configuration.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/external_db.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse Test::Deep;\nuse Test::Differences;\nuse Test::Warnings;\nuse JSON;\nuse URI::Escape;\n\nuse FindBin qw($Bin);\nuse lib \"$Bin/lib\";\nuse RestHelper;\nuse Test::Warnings;\n\nmy $conf_file = \"$Bin/../ensembl_rest.conf\";\n\nmy $live = 0;\nmy ($conf, $dba, $multi);\n\nplan tests => 66;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing POST Method in REST Controller with Perl\nDESCRIPTION: Example implementing a POST method for a REST endpoint. Demonstrates proper request body handling and response formatting for POST requests in the Ensembl REST API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/analysis_description.txt#2025-04-22_snippet_4\n\nLANGUAGE: perl\nCODE:\n```\nsub id_POST {\n  my ($self, $c, $id) = @_;\n  my $body = $c->req->body_parameters->{id};\n  # Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Memcached Caching in a Controller\nDESCRIPTION: Example of using caching in a controller to store and retrieve data. Demonstrates checking for cached data, retrieving from cache, and setting data in cache when needed.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/dnac.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\nsub get_gene : Chained('/') Args(1) {\n  my ($self, $c, $id) = @_;\n  my $key = 'get_gene:'.$id;\n  my $cached_content = $c->cache->get($key);\n  if ($cached_content) {\n    $c->stash->{data} = $cached_content;\n  } else {\n    my $gene = $c->model('Gene')->get($id);\n    $c->stash->{data} = $gene;\n    $c->cache->set($key, $gene);\n  }\n  $self->status_ok($c);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Ensembl REST API Response and Printing Results in Python\nDESCRIPTION: This snippet checks the HTTP status code of the API response, decodes the JSON content if successful, and prints the formatted result. It includes error handling for failed requests.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/protein_align_feature.txt#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \ndecoded = r.json()\nprint(repr(decoded))\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Endpoint in Perl\nDESCRIPTION: This Perl code configures an Ensembl REST API endpoint. It sets up database connections, caching parameters, and request handling settings. The configuration includes options for controlling the number of worker processes, connection timeouts, and rate limiting.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/prediction_exon.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nuse strict;\nuse warnings;\n\nsub setup_rest_api {\n  my $self = shift;\n\n  $self->{'general'} = {\n    # Number of workers and worker-specific options\n    daemonise => 1,\n    max_workers => 20,\n    pid_file => '/nfs/ensembl/ensembl/rest_test/ensrest.%d.pid',\n    status_file => '/nfs/ensembl/ensembl/rest_test/ensrest.%d.status',\n    access_log => '/nfs/ensembl/ensembl/rest_test/ensrest.%d.access.log',\n    error_log => '/nfs/ensembl/ensembl/rest_test/ensrest.%d.error.log',\n\n    # Connection timeouts\n    read_timeout => 60,\n    write_timeout => 600,\n    keep_alive_timeout => 600,\n\n    # Rate limiting\n    max_requests_per_hour => 15000,\n    max_requests_per_second => 15,\n\n    # Proxy settings\n    proxy => {\n      proxy_set => 0,\n      proxy_url => '',\n      proxy_http_port => '',\n      proxy_https_port => '',\n      no_proxy => '',\n    }\n  };\n\n  $self->{'log'} = {\n    config => 'log4perl.conf'\n  };\n\n  $self->{'database'} = {\n    user     => 'anonymous',\n    host     => 'ensembldb.ensembl.org',\n    port     => 3306,\n    soap_db_host => 'ensembldb.ensembl.org',\n    soap_db_port => 3306,\n  };\n\n  $self->{'mt'} = {\n    # Mandatory settings\n    production_name => 'homo_sapiens',\n    genomic_sequence_adaptor => '/nfs/ensembl/your_mountpoint/adaptor',\n\n    # Optional settings\n    # mt_codon_table => 2,\n    # mt_genetic_code => 2,\n  };\n\n  $self->{'cache'} = {\n    enabled => 1,\n    backend => 'Memcached',\n    host => '127.0.0.1:11211',\n    expires => '24 hours',\n    compress => 1,\n    serialiser => 'JSON',\n    reconnect => 5,\n    timeout => 5,\n  };\n\n  $self->{'sequence'} = {\n    cache => {\n      type => 'memcached',\n      host => 'localhost:11211',\n      expires => '24 hours',\n      compress => 1,\n      serialiser => 'Storable',\n      enabled => 1,\n    },\n  };\n\n  $self->{'vep'} = {\n    cache => {\n      enabled => 1,\n      dir => '/nfs/ensembl/your_mountpoint/vep_cache',\n      version => 91,\n    },\n    bam => {\n      enabled => 1,\n      dir => '/nfs/ensembl/your_mountpoint/bam_files',\n      url => 'http://example.com/bam_files',\n    },\n    fasta => {\n      enabled => 1,\n      dir => '/nfs/ensembl/your_mountpoint/fasta_files',\n    },\n    plugin => {\n      enabled => 1,\n      dir => '/nfs/ensembl/your_mountpoint/vep_plugins',\n    },\n  };\n\n  return $self;\n}\n\n1;\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections for Ensembl REST API in Perl\nDESCRIPTION: This snippet defines database connection parameters for the Ensembl REST API. It includes settings for multiple databases, specifying host, port, user, and pass for each connection.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/marker_map_location.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nuser = ensro\npass = \nhost = ensembldb.ensembl.org\nport = 3306\n\n[compara]\nuser = ensro\npass = \nhost = compara.ensembl.org\nport = 3306\n\n[websitedbs]\nuser = ensro\npass = \nhost = ensembldb.ensembl.org\nport = 3306\n\n[genomicalign]\nuser = ensro\npass = \nhost = ensembldb.ensembl.org\nport = 3306\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Caching Options in Perl\nDESCRIPTION: This snippet configures the caching options for the Ensembl REST API server. It sets up CHI caching with file-based storage and defines cache expiration times for different types of data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/data_file.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\n    chi_root => root_dir().'/ensembl_rest',\n    chi => {\n      driver => 'File',\n      root_dir => root_dir().'/ensembl_rest/chi',\n    },\n    \n    # Setting CacheControl headers\n    expires_header => \"expires\",\n    cache_expires_mapping => {\n      \"application/json\" => \"86400\",\n      \"text/plain\" => \"86400\",\n      \"application/xml\" => \"86400\",\n      \"default\" => \"86400\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Testing genome assembly accession endpoint in Ensembl REST API with Perl\nDESCRIPTION: This test validates the '/info/genomes/accession' endpoint of the Ensembl REST API. It verifies that filtering genomes by assembly accession works correctly and returns the expected genome data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/external_db.txt#2025-04-22_snippet_5\n\nLANGUAGE: perl\nCODE:\n```\n  {\n    my $accession = 'GCA_000001405';\n    my $genomes_json = RestHelper->get_json(\"$base/accession/$accession\");\n    ok(scalar(@{$genomes_json}) >= 1, \"Asserting we get at least one result back\");\n    my ($genome) = grep { $_->{name} eq 'homo_sapiens'} @{$genomes_json};\n    ok($genome, \"Asserting accession filtering works\");\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gene Sequence Data with Ensembl REST API\nDESCRIPTION: Example JSON response showing gene sequence data retrieved from the Ensembl REST API. The response includes the sequence ID, description, and the actual DNA sequence string for the BRCA2 gene.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/stable_id_history.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"desc\": \"chromosome:GRCh38:13:32315086:32400266:1\",\n  \"id\": \"chromosome:GRCh38:13:32315086:32400266:1\",\n  \"seq\": \"NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving variant consequences from Ensembl REST API using Python and requests\nDESCRIPTION: This code demonstrates how to fetch consequences for a specific genomic variant using Ensembl's Variant Effect Predictor (VEP) endpoint. It sends a POST request with JSON data specifying the variant details.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/external_feature.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests, sys\n \nserver = \"https://rest.ensembl.org\"\nextension = \"/vep/human/hgvs/ENSP00000401091.1:p.Glu2Gly?\"\n \nr = requests.get(server+extension, headers={ \"Content-Type\" : \"application/json\"})\n \nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \ndecoded = r.json()\nprint(repr(decoded))\n```\n\n----------------------------------------\n\nTITLE: Defining Variant GET Endpoint in Perl for Ensembl REST API\nDESCRIPTION: This code snippet configures a REST API endpoint for retrieving variant information. It specifies the route, HTTP method, and includes documentation for the endpoint. The endpoint supports various parameters for filtering and customizing the variant data retrieval.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/misc_attrib.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\nsub variant_GET {\\n  my $c = shift;\\n  my $variation = $c->stash()->{variation};\\n  my $pops = $c->request->param('population_genotypes');\\n  my $pops_full = $c->request->param('genotypes');\\n  my $pheno = $c->request->param('phenotypes');\\n  #...\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ensembl Assemblies Information with curl\nDESCRIPTION: A shell command using curl to retrieve information about assemblies from the Ensembl REST API. It requests JSON data from the /info/assemblies endpoint.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/protein_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET \"https://rest.ensembl.org/info/assembly/homo_sapiens?\" -H \"Content-Type:application/json\"\n```\n\n----------------------------------------\n\nTITLE: Fetching homologues for a gene with Perl\nDESCRIPTION: This Perl code demonstrates how to fetch homologues for a specific gene from the Ensembl REST API. It sends a GET request to the homology/id endpoint to retrieve homology information for ENSG00000157764.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon_transcript_gene.txt#2025-04-22_snippet_6\n\nLANGUAGE: perl\nCODE:\n```\nuse strict;\nuse warnings;\nuse HTTP::Tiny;\nuse JSON;\n\nmy $http = HTTP::Tiny->new();\n\nmy $server = 'https://rest.ensembl.org';\nmy $ext = '/homology/id/ENSG00000157764?format=condensed;type=orthologues';\nmy $response = $http->get($server.$ext, {\n  headers => { 'Content-type' => 'application/json' }\n});\n\ndie \"Failed!\\n\" unless $response->{success};\n\nif(length $response->{content}) {\n  my $hash = decode_json($response->{content});\n  print $response->{content};\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL connection in ensembl_rest.conf\nDESCRIPTION: Perl configuration snippet showing how to set up MySQL database connections for different Ensembl species in the REST API configuration file. This defines database host, port and authentication details.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/ditag.txt#2025-04-22_snippet_7\n\nLANGUAGE: perl\nCODE:\n```\n{\n  host => 'mysql-ensembl-mirror.ebi.ac.uk',\n  port => 4240,\n  user => 'anonymous',\n  verbose => 0,\n  #port => 3306,\n  #user => 'username',\n  #pass => 'password',\n  # add a sardinian rosemary, thyme, bay leaf, sea salt for taste\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Caching Options for Ensembl REST API in Perl\nDESCRIPTION: This snippet defines caching configuration for the Ensembl REST API. It specifies different caching strategies, including long and short-term caching, and defines cache eviction policies.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/marker.txt#2025-04-22_snippet_6\n\nLANGUAGE: perl\nCODE:\n```\n# Basic configuration for CHI caching\nCHI:\n  # Driver details for CHI::Driver::File\n  driver: Memory\n  # Driver details for CHI::Driver::Memcached. Default port for memcached is 11211\n  driver: File\n  \n  #For file\n  root_dir: /tmp/erest\n  depth: 3\n  \n  # for Memcached\n  namespace: endpoint\n  servers:\n    - localhost:11211\n\n# Setup memcached as our cache engine\nCache:\n  enabled: 1\n  default:\n    driver: Memory\n    global: 1\n    expires_in: 60\n  long_timeout:\n    driver: Memory\n    global: 1\n    # 7 days or 604800 seconds\n    expires_in: 604800\n  short_timeout:\n    driver: Memory\n    global: 1\n    # 6 hours or 21600 seconds\n    expires_in: 21600\n  # 8 hours\n  medium_timeout:\n    driver: Memory\n    global: 1\n    expires_in: 28800\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Server in Perl\nDESCRIPTION: This snippet defines the configuration for the Ensembl REST API server, including database connections, logging settings, and caching options. It sets up the database adaptors, species aliases, and various server parameters.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/operon.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  default_view => 'HTML',\n  using_frontend_proxy => 1,\n  service_name => 'Ensembl REST API',\n  service_logo => 'ensembl_logo.png',\n  service_parent_url => '/',\n  default_content_type => 'text/xml',\n  log_disable => 0,\n  log_level => 'debug',\n  no_deprecated => undef,\n  enable_schema_loader => 0,\n  disable_plugin_header_change_emit => 1,\n  jsonp => 1,\n  view_loading_grace_period => 30,\n  enable_jsonview => 1,\n  enable_compression => 1,\n  caching => 'off',\n  cache_dir => '/app/cache',\n  no_slice_cache => 1,\n  no_variation_effect_cache => 1,\n\n  app_settings => {\n    info => {\n      title => 'Ensembl REST API',\n      description => 'Access Ensembl data using REST URLs',\n      contact => {\n        name => 'Ensembl HelpDesk',\n        email => 'helpdesk@ensembl.org'\n      },\n      license => {\n        name => 'Apache 2.0',\n        url => 'https://www.apache.org/licenses/LICENSE-2.0.html'\n      }\n    }\n  },\n\n  controller => {\n    Root => { actions => ['index'] }\n  },\n\n  plugin => {\n    'Cache' => {\n      'backend' => {\n        'class' => 'CHI',\n        'driver' => 'File',\n        'root_dir' => '/tmp/ensrest'\n      }\n    },\n    'Log::Log4perl' => {\n      category => 'root',\n      level => 'DEBUG',\n      file => {filename => 'log/catalyst.log', mode => '>>'}\n    }\n  },\n\n  'Model::Registry' => {\n    skip_auto_load => 1,\n    no_disconnect => 1,\n    load_registry_from_url => 'mysql://ensro@mysql-eg-publicsql.ebi.ac.uk:4157/',\n    load_registry_from_trackhub => 'http://ftp.ensembl.org/pub/trackhub/hub.txt'\n  },\n\n  'Model::Documentation' => {\n    paths => ['root/documentation']\n  },\n\n  'Model::Lookup' => {\n    lookup_source => 'HTTP',\n    lookup_url => 'http://test.rest.ensembl.org'\n  },\n\n  'Controller::Archive' => {\n    old_assembly_formatter => 'Ensembl::REST::EnsemblModel::AssemblyConverter'\n  },\n\n  'Controller::Ontology' => {\n    ontology_source => 'ontology_db',\n    ontology_db => {\n      dsn => 'dbi:mysql:ontology_73:mysql-ensembl-mirror:4240',\n      user => 'ensro',\n      pass => ''\n    }\n  },\n\n  'Controller::Sequence' => {\n    max_slice_length => 1e7\n  },\n\n  'Plugin::Static::Simple' => {\n    include_path => ['root/static'],\n    ignore_extensions => ['','.cgi','.pl']\n  },\n\n  species_alias => {\n    'ara' => 'arabidopsis_thaliana',\n    'bac' => 'brachypodium_distachyon',\n    'gra' => 'glycine_max',\n    'hor' => 'hordeum_vulgare',\n    'mai' => 'zea_mays',\n    'ory' => 'oryza_sativa',\n    'sor' => 'sorghum_bicolor',\n    'sol' => 'solanum_lycopersicum',\n    'sol_tub' => 'solanum_tuberosum',\n    'tri' => 'triticum_aestivum',\n    'vit' => 'vitis_vinifera'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequence Retrieval Endpoint in Perl for Ensembl REST API\nDESCRIPTION: This snippet defines a REST API endpoint for retrieving sequence information. It specifies the route, HTTP method, and documentation for the endpoint. The endpoint supports various parameters for customizing the sequence retrieval.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/misc_attrib.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nsub sequence_GET {\\n  my $c = shift;\\n  my $slice = $c->stash()->{slice};\\n  my $seq_edits = $c->request->param('seq_edits');\\n  my $expand_3prime = $c->request->param('expand_3prime');\\n  my $expand_5prime = $c->request->param('expand_5prime');\\n  my $type = $c->request->param('type') || 'genomic';\\n  my $format = $c->request->param('format') || 'fasta';\\n  #...\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Endpoint for Retrieving ID-based Sequence in Perl\nDESCRIPTION: This function handles requests for retrieving sequence information based on a specific identifier. It supports various types of identifiers and fetches the corresponding sequence data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/prediction_transcript.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\nsub get_id : Chained('/') PathPart('sequence/id') Args(0) ActionClass('REST') Does('IDTypeValidator') {}\n\nsub get_id_GET {\n  my ($self, $c) = @_;\n  my $id = $c->stash()->{id};\n  my $type = $c->stash()->{id_type};\n  my $object = $c->model('Lookup')->find_object_by_stable_id($id);\n  my $seq_obj = $self->_seq_obj($object);\n  $self->status_ok($c, entity => $seq_obj);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Ensembl REST API Controller in Perl\nDESCRIPTION: This snippet defines the Ensembl::REST::Controller::Sequence package and sets up the base path for API endpoints. It also imports necessary modules and defines the allowed HTTP methods.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/prediction_transcript.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\npackage Ensembl::REST::Controller::Sequence;\nuse Moose;\nuse namespace::autoclean;\nuse Try::Tiny;\n\n__PACKAGE__->config(\n  map => {\n    'text/html'           => [qw/View JSON/],\n    'text/plain'          => [qw/View Text/],\n    'text/x-fasta'        => [qw/View FASTA/],\n    'application/json'    => [qw/View JSON/],\n    'application/jsonp'   => [qw/View JSONP/],\n    'application/xml'     => [qw/View XML/]\n  }\n);\n\nBEGIN { extends 'Catalyst::Controller::REST'; }\n\n# This allows us to define all our allowed methods once and re-use them\nmy $allowed_methods = ['GET'];\n```\n\n----------------------------------------\n\nTITLE: Testing taxonomy descendants endpoint in Ensembl REST API with Perl\nDESCRIPTION: This test validates the '/taxonomy/descendants' endpoint which returns taxonomic descendants for a given ID. It verifies that the endpoint correctly filters results by a specific taxonomic subtree.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/external_db.txt#2025-04-22_snippet_13\n\nLANGUAGE: perl\nCODE:\n```\n  # Taxonomy descendants endpoint\n  {\n    my $taxon_id = 9605; # Homo genus\n    my $taxonomy_json = RestHelper->get_json(\"taxonomy/descendants/$taxon_id\");\n    ok(scalar(@{$taxonomy_json}) >= 1, 'Descendants endpoint returned some results');\n    my @scinames = map { $_->{scientific_name} } @{$taxonomy_json};\n    ok((grep { $_ eq 'Homo sapiens' } @scinames), 'Homo sapiens found');\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Transcript Sequence Endpoint in Perl\nDESCRIPTION: Defines an endpoint for retrieving the sequence of a transcript. It supports parameters for controlling UTR expansion and sequence retrieval.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/dna_align_feature.txt#2025-04-22_snippet_4\n\nLANGUAGE: Perl\nCODE:\n```\nsub sequence : Chained('transcript') PathPart('sequence') Args(0) ActionClass('REST') {}\n\nsub sequence_GET {\n  my ($self, $c) = @_;\n  my $transcript = $c->stash()->{transcript};\n  my $transcript_id = $c->stash->{transcript_id};\n  \n  my $expand_3prime = $c->stash->{expand_3prime};\n  my $expand_5prime = $c->stash->{expand_5prime};\n  my $no_seq = $c->stash->{no_seq};\n  \n  $self->status_ok(\n    $c, \n    entity => {\n      id => $transcript_id,\n      seq => $c->model('Sequence')->get_transcript_sequence($transcript, $expand_3prime, $expand_5prime, $no_seq),\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package and Importing Dependencies for Ensembl REST API in Perl\nDESCRIPTION: Defines the package namespace and imports required modules for the Ensembl REST API experiment endpoints. Sets up inheritance from EnsEMBL::REST::Controller and configures the chain action for handling experiment-related requests.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/data_set.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\npackage EnsEMBL::REST::Controller::Experiment;\n\nuse Moose;\nuse namespace::autoclean;\nuse Try::Tiny;\nuse EnsEMBL::REST::EnsemblModel::Experiment;\n\nrequires 'experiment_adaptors';\n\n__PACKAGE__->config(\n  action => {\n    experiment => { Args => 1 },\n    source     => { Args => 0 },\n  }\n);\n\nsub experiment : Chained('/') PathPart('experiment') CaptureArgs(0) {}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving sequence data from Ensembl REST API using Python and requests\nDESCRIPTION: This example shows how to fetch the genomic sequence for human chromosome 13 coordinates. It demonstrates making a GET request with specific sequence region parameters and handling the response data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/external_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests, sys\n \nserver = \"https://rest.ensembl.org\"\nextension = \"/sequence/region/human/13:32889611..32973805:1?\"\n \nr = requests.get(server+extension, headers={ \"Content-Type\" : \"application/json\"})\n \nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \ndecoded = r.json()\nprint(repr(decoded))\n```\n\n----------------------------------------\n\nTITLE: Querying Ensembl REST API for Sequence Data using curl\nDESCRIPTION: This example demonstrates how to use curl to fetch sequence data from the Ensembl REST API. It includes headers to specify the response format as JSON and makes a GET request to retrieve the coding sequence of a specific human gene.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/qtl_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-type:application/json\" \\\n  'http://rest.ensembl.org/sequence/id/ENSG00000157764?content-type=text/plain'\n```\n\n----------------------------------------\n\nTITLE: Handling Species and Assembly Information in Ensembl REST API (Perl)\nDESCRIPTION: This snippet defines a subroutine for retrieving species and assembly information. It processes the species name, checks for aliases, and returns relevant data including assembly and accession details.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/stable_id_event.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nsub get_species_and_assembly {\n  my ($self, $species) = @_;\n\n  $species = $self->_clean_species_name($species);\n  $species = $self->_alias_species($species);\n\n  my $info = {\n    species => $species,\n  };\n\n  if (my $assembly = $self->_assembly($species)) {\n    $info->{assembly} = $assembly;\n  }\n\n  if (my $accession = $self->_assembly_accession($species)) {\n    $info->{assembly_accession} = $accession;\n  }\n\n  return $info;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Connection and Settings in Ensembl REST API\nDESCRIPTION: Configuration settings for connecting to an Elasticsearch server from the Ensembl REST API. Specifies the nodes to connect to, the maximum result window size, and the default result size.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/ditag.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n[Search]\nelasticsearch_host = localhost:9200\nelasticsearch_max_result_window = 100000\nelasticsearch_result_size = 100\n```\n\n----------------------------------------\n\nTITLE: Using Perl HTTP::Tiny for POST requests to REST API\nDESCRIPTION: Example showing how to use HTTP::Tiny in Perl to make POST requests to the Ensembl REST API. Demonstrates configuring headers and content, and handling the JSON response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/external_synonym.txt#2025-04-22_snippet_5\n\nLANGUAGE: perl\nCODE:\n```\nuse strict;\nuse warnings;\nuse HTTP::Tiny;\nuse JSON;\n\nmy $http = HTTP::Tiny->new();\n\nmy $server = 'https://rest.ensembl.org';\nmy $ext = '/vep/human/hgvs';\nmy $response = $http->post_form($server.$ext, {\n  'hgvs_notations' => '[\"ENST00000494142:c.48C>A\",\"ENST00000313050:c.136G>A\"]'\n}, {\n  headers => { 'Content-type' => 'application/json', 'Accept' => 'application/json'}\n});\n\ndie \"Failed!\\n\" unless $response->{success};\n\nif(length $response->{content}) {\n  my $hash = decode_json($response->{content});\n  foreach my $entry (@{$hash}) {\n    print $entry->{transcript_id}, \":\", $entry->{most_severe_consequence}, \"\\n\";\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up Caching for Ensembl REST API in Perl\nDESCRIPTION: This configuration block sets up caching for the Ensembl REST API. It specifies the cache type, expiration time, and namespace for storing cached data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/intron_supporting_evidence.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\n<Cache>\n  <backend>\n    class = CHI\n    driver = Memory\n    global = 1\n  </backend>\n  <frontend>\n    class = CHI\n    driver = Memory\n    global = 1\n    expires_in = 24h\n    namespace = endpoint\n  </frontend>\n</Cache>\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections in YAML\nDESCRIPTION: Example YAML configuration file that defines database connection parameters for the Ensembl REST API. It specifies database hosts, ports, and user credentials for accessing Ensembl databases.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/map.txt#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndatabases:\n  DATABASE_CORE:\n    host: ensembldb.ensembl.org\n    port: 3306\n    user: anonymous\n    verbose: 0\n  DATABASE_VARIATION:\n    host: ensembldb.ensembl.org\n    port: 3306\n    user: anonymous\n    verbose: 0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Variant Phenotype Data with Content-Type Specification\nDESCRIPTION: A curl command example demonstrating how to query the Ensembl REST API for variant phenotype data with a specific content type (JSON). This shows the proper headers to use when making requests to the API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/external_synonym.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"https://rest.ensembl.org/variation/homo_sapiens/rs2299222/phenotypes\" -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Service for Ensembl REST API\nDESCRIPTION: This Service configuration exposes the REST API deployment to the network, making it accessible both within the Kubernetes cluster and externally. It maps port 80 to the container's port 3000 and is set up for load balancing.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/hmm_profile.txt#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: rest\n  labels:\n    app: rest\nspec:\n  ports:\n    - port: 80\n      targetPort: 3000\n  selector:\n    app: rest\n  type: ClusterIP\n\n```\n\n----------------------------------------\n\nTITLE: Testing taxonomy siblings endpoint in Ensembl REST API with Perl\nDESCRIPTION: This test validates the '/taxonomy/siblings' endpoint which returns taxonomic siblings (same parent) for a given ID. It checks if the endpoint correctly identifies sibling taxa of the same taxonomic rank.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/external_db.txt#2025-04-22_snippet_14\n\nLANGUAGE: perl\nCODE:\n```\n  # Taxonomy siblings endpoint\n  {\n    my $taxon_id = 9606; # Homo sapiens\n    my $taxonomy_json = RestHelper->get_json(\"taxonomy/siblings/$taxon_id\");\n    cmp_ok(scalar(@{$taxonomy_json}), '>=', 2, 'Siblings endpoint returned at least 2 results');\n    my @scinames = map { $_->{scientific_name} } @{$taxonomy_json};\n    ok((grep { $_ eq 'Homo sapiens neanderthalensis' } @scinames), 'Homo sapiens neanderthalensis found');\n    ok((grep { $_ eq 'Homo sapiens ssp. Denisova' } @scinames), 'Homo sapiens ssp. Denisova found');\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Defining Ensembl REST API Endpoints in Perl\nDESCRIPTION: This Perl code defines REST API endpoints for the Ensembl project. It sets up routes for various genomic data queries, including sequence retrieval, variant information, and gene annotations.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/associated_xref.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\npackage EnsEMBL::REST::Controller::Sequence;\n\nuse Moose;\nuse namespace::autoclean;\nuse Try::Tiny;\nuse Bio::EnsEMBL::Utils::Scalar qw/wrap_array/;\n\n__PACKAGE__->config(namespace => 'sequence');\n\nwith 'EnsEMBL::REST::Role::Content';\n\nsub sequence : Chained('/') PathPart('sequence') Args(1) ActionClass('REST') {}\n\nsub sequence_GET {\n  my ($self, $c, $id) = @_;\n  my $sequence = $self->_fetch_sequence($c, $id);\n  $self->status_ok($c, entity => { seq => $sequence });\n}\n\nsub _fetch_sequence {\n  my ($self, $c, $id) = @_;\n  my $db = $c->model('Registry')->get_adaptor('Human', 'Core', 'Slice');\n  my $slice = $db->fetch_by_region('chromosome', $id);\n  return $slice->seq();\n}\n\n__PACKAGE__->meta->make_immutable;\n\n1;\n\n```\n\n----------------------------------------\n\nTITLE: Kubernetes ConfigMap for Ensembl REST API Configuration\nDESCRIPTION: This ConfigMap defines various configuration parameters for the Ensembl REST API service such as database connections, timeout settings, and server configurations. It sets up server name, port, pidfile, and several connection timeout parameters for the API deployment.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/hmm_profile.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: rest-config\ndata:\n  # Server Setting\n  serverName: \"rest.ensembl.org\"\n  port: \"3000\"\n  pidfile: \"/ensembl/REST/ensrest.pid\"\n  timeout: \"180\"\n\n  # connection timeout\n  timeout_connection: \"120\"\n  timeout_idle_connection: \"120\"\n  timeout_search: \"120\"\n  timeout_per_sequence: \"120\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Routes in YAML\nDESCRIPTION: YAML configuration block that defines routing paths for the Ensembl REST API. It maps various endpoints to their corresponding controller actions, specifying the HTTP methods and formats supported.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/analysis_description.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Controller that handles lookup operations\n'/lookup/id/:id':\n  get:\n    to: 'Lookup#id'\n    params:\n      id:\n        type: 'Str'\n        pattern: '[\\w\\.]+'\n        default_:\n    description: 'ID lookup'\n    examples:\n      - /lookup/id/ENSG00000157764\n    parameters:\n      - name: db_type\n        description: 'Retrieves features from the given database type. Default core. Available - [core, otherfeatures, rnaseq, cdna, vega]'\n        example: [core, otherfeatures, rnaseq, cdna, vega]\n        required: 0\n        type: String\n      - name: expand\n        description: 'Expands the search to include any connected features. e.g. If the object is a gene, its transcripts, translations and exons will be returned as well.'\n        example: 'true'\n        type: Boolean\n        required: 0\n      - name: format\n        description: 'Format of the data'\n        example: ['full', 'condensed']\n        required: 0\n        type: Enum[full, condensed]\n      - name: species\n        description: 'Preferred species. Used when a stable ID is available in multiple species.'\n        required: 0\n        type: String\n        example: 'human'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gene Sequence from Ensembl REST API\nDESCRIPTION: This example shows how to fetch the genomic sequence for a specific gene using the Ensembl REST API. It uses the 'sequence/id' endpoint with the gene ID 'ENSG00000157764' and includes additional parameters to retrieve masked sequence and expand 5' and 3' ends.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/splicing_transcript_pair.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /sequence/id/ENSG00000157764?content-type=text/plain;mask=soft;expand_5prime=60;expand_3prime=60\n```\n\n----------------------------------------\n\nTITLE: Retrieving Variant Data with Perl for Ensembl REST API\nDESCRIPTION: This code demonstrates how to use Perl to retrieve variant data from the Ensembl REST API. It uses HTTP::Tiny to make a GET request to the variant lookup endpoint with specific arguments and processes the JSON response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/homology.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\nuse strict;\nuse warnings;\nuse HTTP::Tiny;\nuse JSON;\n \nmy $http = HTTP::Tiny->new();\n \nmy $server = 'https://rest.ensembl.org';\nmy $ext = '/variant/human/rs56116432?content-type=application/json';\nmy $response = $http->get($server.$ext);\n \ndie \"Failed!\\n\" unless $response->{success};\n \nif(length $response->{content}) {\n    my $hash = decode_json($response->{content});\n    print $hash->{most_severe_consequence}, \"\\n\";\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Allowed Species and Types from Registry\nDESCRIPTION: This function queries the Registry to determine which species and database types are available. It checks which combinations are accessible and returns the information structured as lists of allowed species, groups, and types.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/species_tree_node_tag.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\nsub registry_species_and_types {\n  my ($self, $c) = @_;\n  \n  my $reg = 'Bio::EnsEMBL::Registry';\n  \n  my $adaptors = $reg->get_all_available();\n  my %species_hash;\n  my %types_hash;\n  \n  foreach my $dba_list (values %{$adaptors}) {\n    foreach my $dba (values %{$dba_list}) {\n      $species_hash{lc($dba->species)} = 1;\n      $types_hash{lc($dba->group)} = 1;\n    }\n  }\n  \n  # get the values sorted and ready for return\n  my @allowed_species = sort keys %species_hash;\n  my @allowed_types   = sort keys %types_hash;\n  \n  # if a DBAdaptor method exists, it needs to be exposed as an allowed group\n  my %allowed_groups = map { $_ => 1 } qw/dna sequence archive core regulation gene transcript variation/;\n  my @allowed_groups = keys %allowed_groups;\n  \n  return (\\@allowed_species, \\@allowed_groups, \\@allowed_types);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching homologues for a gene with Python\nDESCRIPTION: This Python code demonstrates how to fetch homologues for a specific gene from the Ensembl REST API. It sends a GET request to the homology/id endpoint to retrieve homology information for ENSG00000157764.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon_transcript_gene.txt#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport requests, sys\n\nserver = \"https://rest.ensembl.org\"\next = \"/homology/id/ENSG00000157764?format=condensed;type=orthologues\"\n\nr = requests.get(server+ext, headers={ \"Content-Type\" : \"application/json\"})\n \nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \nprintable = r.json()\nprint(printable)\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Package for Ensembl REST API in Perl\nDESCRIPTION: Defines the EnsEMBL::REST::Exception Perl package which extends Bio::EnsEMBL::Utils::Exception to handle REST-specific error conditions. The module sets up package variables for exception classes and exports exception-related functions.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/mapping_session.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n=head1 LICENSE\n\nCopyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute \nCopyright [2016-2023] EMBL-European Bioinformatics Institute\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n=cut\n\npackage EnsEMBL::REST::Exception;\n\nuse strict;\nuse warnings;\n\nuse parent qw/Bio::EnsEMBL::Utils::Exception/;\n\nour @EXPORT;\nour @EXPORT_OK;\nour %EXPORT_TAGS;\n\nInit();\n\nsub throw_REST_exception {\n  my $c = shift;\n  my $ex = shift;\n  my $message = shift;\n  my $verbose = shift || 0;\n  $c->log->info($ex->stack_trace()->as_string()) if $verbose;\n  $c->log->error($message);  \n  $c->go('ReturnError', $ex->status, [{ msg => $message}]);\n  $c->detach();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Caching for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets up caching for the Ensembl REST API. It defines the cache implementation, expiration time, and cache size for various API endpoints.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/karyotype.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\n  $c->config->{Model::Documentation} = {\n    cache_implementation => 'CHI',\n    cache_expires => '1 day',\n    cache_chi => {\n      driver => 'Memory',\n      global => 1,\n      max_size => 100*1024*1024\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Fetching region features with Perl\nDESCRIPTION: This Perl code demonstrates how to fetch region features from the Ensembl REST API. It sends a GET request to the overlap/region endpoint to retrieve all features in a specified genomic region on human chromosome 7.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon_transcript_gene.txt#2025-04-22_snippet_3\n\nLANGUAGE: perl\nCODE:\n```\nuse strict;\nuse warnings;\nuse HTTP::Tiny;\nuse JSON;\n\nmy $http = HTTP::Tiny->new();\n\nmy $server = 'https://rest.ensembl.org';\nmy $ext = '/overlap/region/human/7:140424943-140624564?feature=gene;feature=transcript;feature=cds;feature=exon';\nmy $response = $http->get($server.$ext, {\n  headers => { 'Content-type' => 'application/json' }\n});\n\ndie \"Failed!\\n\" unless $response->{success};\n\nif(length $response->{content}) {\n  my $hash = decode_json($response->{content});\n  print $response->{content};\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Starman Servers for Ensembl REST API\nDESCRIPTION: Bash script that starts multiple instances of Starman server to serve the Ensembl REST API application. It specifies worker count, port assignments, and process management with background execution.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/species_tree_root.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\ncd /ensembl/ensembl-rest\nsource ~/perl5/perlbrew/etc/bashrc\n\nstarman -I lib -I ../ensembl/modules -I ../ensembl-compara/modules -I ../ensembl-variation/modules -I ../ensembl-funcgen/modules -I ../ensembl-io/modules -I ../ensembl-vep/modules --workers 10 --pid ensrest.starman.pid --access-log logs/access.log --error-log logs/error.log --listen :5000 configurations/production/psgi_ensrest.psgi &\n\nstarman -I lib -I ../ensembl/modules -I ../ensembl-compara/modules -I ../ensembl-variation/modules -I ../ensembl-funcgen/modules -I ../ensembl-io/modules -I ../ensembl-vep/modules --workers 10 --pid ensrest.starman.5001.pid --access-log logs/access.5001.log --error-log logs/error.5001.log --listen :5001 configurations/production/psgi_ensrest.psgi &\n\nstarman -I lib -I ../ensembl/modules -I ../ensembl-compara/modules -I ../ensembl-variation/modules -I ../ensembl-funcgen/modules -I ../ensembl-io/modules -I ../ensembl-vep/modules --workers 10 --pid ensrest.starman.5002.pid --access-log logs/access.5002.log --error-log logs/error.5002.log --listen :5002 configurations/production/psgi_ensrest.psgi &\n\nstarman -I lib -I ../ensembl/modules -I ../ensembl-compara/modules -I ../ensembl-variation/modules -I ../ensembl-funcgen/modules -I ../ensembl-io/modules -I ../ensembl-vep/modules --workers 10 --pid ensrest.starman.5003.pid --access-log logs/access.5003.log --error-log logs/error.5003.log --listen :5003 configurations/production/psgi_ensrest.psgi &\n```\n\n----------------------------------------\n\nTITLE: Creating Transcript Object Endpoint in Perl\nDESCRIPTION: Implements a handler for retrieving the actual transcript object from the database. This method populates the transcript data based on the ID provided in the request path.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/dna_align_feature.txt#2025-04-22_snippet_3\n\nLANGUAGE: Perl\nCODE:\n```\nsub transcript : Chained('/') PathPart('transcript') CaptureArgs(1) {\n  my ( $self, $c, $id ) = @_;\n  $c->stash->{transcript_id} = $id;\n  \n  $c->log->debug('Retrieving transcript from database');\n\n  my $transcript = try {\n    $c->model('Lookup')->find_transcript_by_stable_id($id);\n  } catch {\n    $c->log->error(\"Failed to search for transcript $id: $_\");\n    $c->go('ReturnError', 'from_ensembl', [\"Given ID does not exist in our system: $id\"]);\n  };\n\n  my $params = $c->req->params;\n  my $expand_3prime = $params->{expand_3prime_utr};\n  my $expand_5prime = $params->{expand_5prime_utr};\n  my $no_seq = $params->{no_seq};\n\n  $c->stash(transcript => $transcript, expand_3prime => $expand_3prime, expand_5prime => $expand_5prime, no_seq => $no_seq);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Sequence Operations in Ensembl REST API with Perl\nDESCRIPTION: This script tests various sequence-related operations using the Ensembl REST API. It includes tests for retrieving genomic sequences and performing sequence manipulations.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/alt_allele.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse Test::Differences;\nuse Test::Deep;\nuse JSON;\nuse Bio::EnsEMBL::Test::MultiTestDB;\nuse Bio::EnsEMBL::Test::TestUtils;\n\nmy $dba = Bio::EnsEMBL::Test::MultiTestDB->new('homo_sapiens');\nmy $multi = Bio::EnsEMBL::Test::MultiTestDB->new('multi');\nmy $json = JSON->new->allow_nonref;\n\nmy $base = '/sequence/region/homo_sapiens';\n\n# Test basic sequence retrieval\nmy $region = '6:1000000..1000100';\n{\n  my $seq = json_GET(\"$base/$region\", 'Get genomic sequence');\n  ok($seq->{seq}, 'Sequence is present');\n  is(length($seq->{seq}), 101, 'Sequence length is correct');\n}\n\n# Test reverse complement\nmy $region = '6:1000000..1000100';\n{\n  my $seq = json_GET(\"$base/$region?strand=-1\", 'Get reverse complement sequence');\n  ok($seq->{seq}, 'Sequence is present');\n  is(length($seq->{seq}), 101, 'Sequence length is correct');\n  isnt($seq->{seq}, json_GET(\"$base/$region\")->{seq}, 'Reverse complement is different from original');\n}\n\n# Test masked sequence\nmy $region = '6:1000000..1000100';\n{\n  my $seq = json_GET(\"$base/$region?mask=soft\", 'Get masked sequence');\n  ok($seq->{seq}, 'Sequence is present');\n  is(length($seq->{seq}), 101, 'Sequence length is correct');\n  like($seq->{seq}, qr/[a-z]/, 'Sequence contains lowercase (masked) bases');\n}\n\n# Test multiple regions\nmy $regions = '6:1000000..1000100,6:2000000..2000100';\n{\n  my $seqs = json_GET(\"$base?region=$regions\", 'Get multiple sequences');\n  is(scalar @$seqs, 2, 'Two sequences returned');\n  for my $seq (@$seqs) {\n    ok($seq->{seq}, 'Sequence is present');\n    is(length($seq->{seq}), 101, 'Sequence length is correct');\n  }\n}\n\ndone_testing();\n```\n\n----------------------------------------\n\nTITLE: Converting Experiment Objects to Hash Structure in Ensembl REST API Perl\nDESCRIPTION: Helper method that converts experiment objects to hash structures for API responses. Maps various properties from the experiment object to a structured hash format, including metadata like source, type, experimental factors, and associated data files.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/data_set.txt#2025-04-22_snippet_5\n\nLANGUAGE: perl\nCODE:\n```\nsub experiment_to_hash {\n  my ($self, $c, $experiment, $source) = @_;\n\n  my $result = {\n    source => $source,\n    id => $experiment->dbID,\n    accession => $experiment->accession,\n    secondary_accession => $experiment->secondary_accession,\n    display_label => $experiment->display_label,\n    description => $experiment->description,\n    archive => $experiment->archive,\n    experiment_type => $experiment->experiment_type,\n    epigenome => $experiment->epigenome,\n    project => $experiment->project,\n    feature_type => $experiment->feature_type,\n  };\n\n  # add experimental group if defined\n  if ($experiment->experimental_group) {\n    $result->{experimental_group} = $experiment->experimental_group;\n  }\n  # add pubmed ID if defined\n  if ($experiment->pubmed_id) {\n    $result->{pubmed_id} = $experiment->pubmed_id;\n  }\n  # add experimental factor if defined\n  my $ef = $experiment->experimental_factor;\n  if ($ef) {\n    $result->{experimental_factor} = {\n      name => $ef->name,\n      value => $ef->value,\n    };\n  }\n\n  # add result file count if any\n  my @result_files = @{$experiment->get_ResultFiles()};\n  if (@result_files) {\n    $result->{result_files} = scalar @result_files;\n  }\n\n  return $result;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets up the database connections for the Ensembl REST API. It specifies the host, port, and user for different database types including core, variation, and funcgen.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/transcript_supporting_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n    host => 'ensembldb.ensembl.org',\n    port => 5306,\n    user => 'anonymous',\n    verbose => 0,\n\n    # The lines below are needed if you want to access the otherfeatures, variation, or funcgen databases\n    'DATABASE_CORE' => [\n      { host => 'ensembldb.ensembl.org', port => 5306, user => 'anonymous', db_version => 103 },\n    ],\n    'DATABASE_VARIATION' => [\n      { host => 'ensembldb.ensembl.org', port => 5306, user => 'anonymous', db_version => 103 },\n    ],\n    'DATABASE_FUNCGEN' => [\n      { host => 'ensembldb.ensembl.org', port => 5306, user => 'anonymous', db_version => 103 },\n    ],\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger API Documentation for Ensembl REST API in Perl\nDESCRIPTION: This code snippet defines the configuration for Swagger API documentation in the Ensembl REST API project. It includes API information, external documentation links, and security schemes. The configuration is set up as a Perl hash structure.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/unmapped_reason.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  info => {\n    version => '7',\n    title => 'Ensembl REST API',\n    description => 'Access Ensembl data using REST URLs',\n    contact => {\n      name => 'Ensembl',\n      email => 'helpdesk@ensembl.org',\n      url => 'http://www.ensembl.org'\n    },\n    license => {\n      name => 'Apache 2.0',\n      url => 'http://www.apache.org/licenses/LICENSE-2.0.html'\n    },\n    'x-logo' => {\n      url => 'https://ensembl.org/i/e-ensembl.png'\n    }\n  },\n  externalDocs => {\n    description => 'GitHub Wiki',\n    url => 'https://github.com/Ensembl/ensembl-rest/wiki'\n  },\n  security => [\n    {\n      APIKey => []\n    }\n  ],\n  securityDefinitions => {\n    APIKey => {\n      type => 'apiKey',\n      in => 'header',\n      name => 'api_key',\n      description => 'Obtain an API key from https://www.ensembl.org/account/user/login.'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Ensembl REST API Client in Python\nDESCRIPTION: This snippet shows how to import the Ensembl REST API client in Python. It also sets up a client instance for making API requests.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/transcript_intron_supporting_evidence.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ensembl_rest import EnsemblRestClient\n\nclient = EnsemblRestClient()\n```\n\n----------------------------------------\n\nTITLE: Requesting Ensembl Variation Data in XML Format\nDESCRIPTION: This example demonstrates how to request variation data from the Ensembl REST API using curl. The request targets a specific human variant (rs116035550) and specifies XML as the output format.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/mapping_set.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-type:text/xml\" 'http://rest.ensembl.org/variation/human/rs116035550'\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Server Settings in Perl\nDESCRIPTION: This snippet defines the configuration for the Ensembl REST API server, including plugin loading, authentication settings, and rate limiting. It sets up the server name, plugins to be used, and various server-specific options.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/density_type.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  using => ['Catalyst::Plugin::ConfigLoader',\n             'Catalyst::Plugin::Static::Simple',\n             'Catalyst::Plugin::Cache',\n             'Catalyst::Plugin::Gzip',\n             'EnsEMBL::REST::Role::PostLimiter',\n             ],\n\n  authentication => {\n    default_realm => 'user',\n    realms => {\n      user => {\n        credential => {\n          class => 'Password',\n          password_field => 'password',\n          password_type => 'clear'\n        },\n        store => {\n          class => 'DBIx::Class',\n          user_model => 'DB::User',\n        }\n      }\n    }\n  },\n\n  # Enable CORS (javascript must be able to bring back content from other domains)\n  'Plugin::CrossOriginResource' => {\n    # allow all origins\n    origins => '*',\n    # allow only GET, POST, OPTIONS methods\n    methods => ['GET', 'POST', 'OPTIONS'],\n    # allow content_type and x-requested-with headers\n    headers => ['content-type', 'x-requested-with'],\n    # cache preflight request for 604800 seconds\n    max_age => '604800',\n  },\n\n  # Set limit based on time=3600 (1 hour), unit=900 (15 minutes), or no. page views.\n  # default time limit can be overriden in the Rate_limit plugin definition below\n  # use page to limit by no. of page views\n  default_view => 'HTML',\n  disable_component_resolution_regex_fallback => 1,\n  'default_time_limit' => '3600',\n  'enable_rate_limit' => 1,\n  'enable_schema_cache' => 1,\n  'log4perl_config' => 'log4perl.conf',\n  'Model::Registry' => { \n    use_ftp => 1\n  },\n  'View::JSON' => {\n    expose_stash    => 'json'\n  },\n  'Controller::Root' => {\n    # Set the actions in this controller to be registered with no prefix\n    # so they function identically to actions created in MyApp.pm\n    namespace => ''\n  },\n  'root_documentation' => 'documentation/info.tt',\n  'wrapper' => 'wrapper.tt',\n  'species_common' => {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transcript Lookup Endpoint in Perl\nDESCRIPTION: Defines an endpoint for looking up transcript information. This handles requests to find transcripts based on various attributes and parameters.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/dna_align_feature.txt#2025-04-22_snippet_7\n\nLANGUAGE: Perl\nCODE:\n```\n__PACKAGE__->meta->make_immutable;\n\n1;\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Experiment Retrieval Endpoint in Ensembl REST API Perl\nDESCRIPTION: Defines an endpoint to fetch a specific experiment by ID. This method validates input parameters, searches multiple adaptors for the requested experiment, and returns detailed experiment information. It handles error cases for non-existent experiments.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/data_set.txt#2025-04-22_snippet_3\n\nLANGUAGE: perl\nCODE:\n```\nsub experiment_id : Chained('experiment') PathPart('') ActionClass('REST') Args(1) { }\n\nsub experiment_id_GET {\n  my ( $self, $c, $id ) = @_;\n\n  # empty id is not allowed\n  if (!$id) {\n    $c->go('ReturnError', 'custom', [qq{experiment id must be specified}]);\n  }\n\n  my $result;\n  for my $adaptor (@{$self->experiment_adaptors($c)}) {\n    my $experiment = $adaptor->fetch_by_accession($id);\n    # try to fetch by dbID in case accession did not work\n    if (!$experiment && $id =~ /^\\d+$/) {\n      $experiment = $adaptor->fetch_by_dbID($id);\n    }\n    if ($experiment) {\n      $result = $self->experiment_to_hash($c, $experiment, $adaptor->db->species);\n      last;\n    }\n  }\n\n  if ($result) {\n    $self->status_ok($c, entity => $result);\n  } else {\n    $c->go('ReturnError', 'custom', [qq{experiment $id not found}]);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Making HTTP POST Request to Ensembl API in Perl\nDESCRIPTION: This function performs an HTTP POST request to the Ensembl API. It constructs the URL, sets up headers, and encodes the data as JSON before sending. It also handles the response and decodes the JSON content.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/splicing_event.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\nsub post {\n  my ($self, $path, $params, $data) = @_;\n  my $url = $self->_url($path, $params);\n  my $response = $self->http_post($url,\n    {\n      headers => {\n        'Content-type' => 'application/json',\n        %{$self->extra_headers},\n      },\n      content => $self->json->encode($data)\n    }\n  );\n  my $content;\n  if (exists $response->{content}) {\n    $content = $response->{content};\n  } else {\n    $content = $response->content;\n  }\n  return $self->json->decode($content);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Python requests library with proxy configuration\nDESCRIPTION: Demonstrates how to configure the Python requests library to use the EBI proxy server. This example shows both the dictionary-based configuration and the environment variable approach.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/assembly_exception.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\n\nimport requests\n\n# Either configure the proxy in your request\nproxies = {\n  'http': 'http://www-proxy.ebi.ac.uk:3128',\n  'https': 'http://www-proxy.ebi.ac.uk:3128'\n}\n\nr = requests.get('http://rest.ensembl.org/info/ping', headers={ 'Content-Type' : 'application/json'}, proxies=proxies)\n\n# Or set the environment variables HTTP_PROXY and HTTPS_PROXY\nimport os\nos.environ['HTTP_PROXY'] = 'http://www-proxy.ebi.ac.uk:3128'\nos.environ['HTTPS_PROXY'] = 'http://www-proxy.ebi.ac.uk:3128'\n\nr = requests.get('http://rest.ensembl.org/info/ping', headers={ 'Content-Type' : 'application/json'})\n```\n\n----------------------------------------\n\nTITLE: Querying Ensembl REST API using LWP in Perl\nDESCRIPTION: This snippet shows how to use the LWP library in Perl to make a GET request to the Ensembl REST API. It retrieves information about the human BRCA2 gene and prints the response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/prediction_transcript.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nuse strict;\nuse warnings;\nuse LWP::UserAgent;\nmy $ua = LWP::UserAgent->new;\nmy $server = 'http://rest.ensembl.org';\nmy $ext = '/lookup/symbol/homo_sapiens/BRCA2?';\nmy $response = $ua->get($server.$ext, 'Content-Type' => 'application/json');\ndie \"Failed!\", $response->status_line unless $response->is_success;\nprint $response->content;\n```\n\n----------------------------------------\n\nTITLE: Implementing Gene ID Endpoint in Perl for Ensembl REST API\nDESCRIPTION: This snippet defines a REST API endpoint for retrieving gene information by ID. It specifies the route, HTTP method, and includes documentation for the endpoint. The endpoint supports parameters for customizing the gene data retrieval and handles different types of gene identifiers.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/misc_attrib.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\nsub id_GET {\\n  my $c = shift;\\n  my $id = $c->stash()->{id};\\n  my $eg_dbname = $c->stash()->{eg_dbname};\\n  my $object = $c->stash()->{object};\\n  my $type = $c->request->param('type');\\n  my $fields = $c->request->param('fields');\\n  my $expand = $c->request->param('expand');\\n  #...\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Ensembl REST API for Gene Information\nDESCRIPTION: This example demonstrates how to make a GET request to the Ensembl REST API to retrieve information about a specific gene. It uses the 'lookup' endpoint with the gene ID 'ENSG00000157764' and specifies JSON as the response format.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/splicing_transcript_pair.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /lookup/id/ENSG00000157764?content-type=application/json\n```\n\n----------------------------------------\n\nTITLE: Querying Genomic Features by Region in Ensembl REST API\nDESCRIPTION: Example URL for retrieving genomic features from a specific region of human chromosome 7 using Ensembl REST API. The query targets the GRCh37 assembly and filters for features on the positive strand with expansion of 500bp.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/homology_member.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttp://grch37.rest.ensembl.org/overlap/region/human/7:140424943-140624564?feature=gene;feature=transcript;feature=exon;feature=variation;strand=1;expand=1;biotype=protein_coding;so_term=SO:0001650;logic_name=havana_homo_sapiens;variant_set=ph_variants;content-type=application/json;db_type=core\n```\n\n----------------------------------------\n\nTITLE: Get Serializer Function in Perl for REST API\nDESCRIPTION: Function that selects the appropriate serialization format based on the content type. It takes a serializer object, content type, and optional type parameter, and returns the right serialization method to convert data to the requested format.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/unconventional_transcript_association.txt#2025-04-22_snippet_5\n\nLANGUAGE: Perl\nCODE:\n```\nsub get_serialiser {\n  my ($class, $serialiser, $content_type, $type) = @_;\n  $content_type = $class->map_content_type($content_type);\n  return sub {\n    my (@args) = @_;\n    if($content_type eq 'json') {\n      return $serialiser->json(@args);\n    }\n    if($content_type eq 'xml') {\n      return $serialiser->xml(@args);\n    }\n    if($content_type eq 'yaml') {\n      return $serialiser->yaml(@args);\n    }\n    if($content_type eq 'seqxml') {\n      return $serialiser->seqxml(@args);\n    }\n    if($content_type eq 'orthoxml') {\n      return $serialiser->orthoxml(@args);\n    }\n    if($content_type eq 'phyloxml') {\n      return $serialiser->phyloxml(@args);\n    }\n    if($content_type eq 'nh') {\n      return $serialiser->newick(@args);\n    }\n    if($content_type eq 'fasta') {\n      return $serialiser->fasta(@args);\n    }\n    if($content_type eq 'gff3') {\n      return $serialiser->gff3(@args);\n    }\n    if($content_type eq 'bed') {\n      return $serialiser->bed(@args);\n    }\n    if(defined $type) {\n      my $method = lc($type);\n      if( $serialiser->can($method) ) {\n        return $serialiser->$method(@args);\n      }\n    }\n    return $serialiser->text(@args);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Directories for Ensembl REST API in Perl\nDESCRIPTION: This code shows how to specify additional plugin directories for the Ensembl REST API. It enables loading plugins from custom locations outside the standard plugin directory.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/marker.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nPlugin:\n  # List of directories containg Plugin modules. Perl's path resolution will be\n  # used to locate the directory.\n  directories:\n    - EnsEMBL::REST::Plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets up database connections for the Ensembl REST API. It defines the type of databases to connect to and the parameters for each connection.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/translation_attrib.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\nsub connection_details {\n  return {\n    compara => {\n      TYPE => 'Compara'\n    },\n    otherfeatures => {\n      TYPE => 'Core',\n      SPECIES => 'multi'\n    },\n    variation => {\n      TYPE => 'Variation'\n    },\n    funcgen => {\n      TYPE => 'Funcgen'\n    },\n    rnaseq => {\n      TYPE => 'Core',\n      SPECIES => 'multi'\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Ensembl REST API Caching Configuration in Perl\nDESCRIPTION: This snippet configures the caching mechanism for the Ensembl REST API. It specifies the cache implementation, storage details, and expiration times for different types of data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/misc_feature_misc_set.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\n<Model::Cache>\n  <args>\n    #Default\n    default_expires_in 60\n    \n    #Memcached\n    class CHI\n    driver Memcached\n    namespace RestEnsembl\n    servers localhost:11211\n    debug 0\n    \n    #Explicit Expiry Settings\n    <expires_in>\n      getVEP 3600\n      getBulkVEP 3600\n      getVariation 1800\n    </expires_in>\n  </args>\n</Model::Cache>\n```\n\n----------------------------------------\n\nTITLE: Testing Variation Information Retrieval in Ensembl REST API with Perl\nDESCRIPTION: This script tests the retrieval of variation information using the Ensembl REST API. It checks for the presence of specific fields in the response and validates the content type.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/alt_allele.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse Test::Differences;\nuse Test::Deep;\nuse JSON;\nuse Bio::EnsEMBL::Test::MultiTestDB;\nuse Bio::EnsEMBL::Test::TestUtils;\n\nmy $dba = Bio::EnsEMBL::Test::MultiTestDB->new('homo_sapiens');\nmy $multi = Bio::EnsEMBL::Test::MultiTestDB->new('multi');\nmy $json = JSON->new->allow_nonref;\n\nmy $base = '/variation/homo_sapiens';\n\n# Test basic variation\nmy $id = 'rs142276873';\n{\n  my $get_args = {\n    action => $base,\n    id => $id,\n  };\n\n  my $json_output = json_GET($base.'/'.$id, 'Basic variation info');  \n  my $variation = $json->decode($json_output);\n\n  cmp_ok(scalar(@{$variation->{mappings}}), '==', 3, 'Mapping check');\n\n  my @alleles = sort @{$variation->{alleles}};\n  cmp_ok(scalar @alleles, '==', 2, 'Allele count');\n\n  my $expected_alleles = [qw/A G/];\n  is_deeply([sort @{$variation->{alleles}}], $expected_alleles, 'Allele check');\n\n  ok($variation->{MAF}, 'MAF');  \n  cmp_ok($variation->{MAF}, '==', 0.0014, 'MAF check');\n}\n\n# Test genotype\nmy $id = 'rs67521280';\n{\n  my $get_args = {\n    action => $base,\n    id => $id,\n    genotypes => 1,\n  };\n\n  my $json_output = json_GET($base.'/'.$id.'?genotypes=1', 'Genotype data');\n  my $variation = $json->decode($json_output);\n\n  ok($variation->{genotypes}, 'Genotypes present');\n  cmp_ok(scalar @{$variation->{genotypes}}, '==', 3, 'Genotype count');\n\n  my $expected_genotype = {\n    individual => \"NA18637\",\n    genotype => [\"C\", \"C\"]\n  };\n  is_deeply($variation->{genotypes}->[0], $expected_genotype, 'Genotype check');\n}\n\n# Test population_genotypes\nmy $id = 'rs67521280';\n{\n  my $get_args = {\n    action => $base,\n    id => $id,\n    population_genotypes => 1,\n  };\n\n  my $json_output = json_GET($base.'/'.$id.'?population_genotypes=1', 'Population genotype data');\n  my $variation = $json->decode($json_output);\n\n  ok($variation->{population_genotypes}, 'Population genotypes present');\n  cmp_ok(scalar @{$variation->{population_genotypes}}, '==', 3, 'Population genotype count');\n\n  my $expected_pop_genotype = {\n    population => \"1000GENOMES:phase_1_ASW\",\n    genotypes => {\n      \"C|C\" => 0.4666666666666667,\n      \"C|T\" => 0.4666666666666667,\n      \"T|T\" => 0.06666666666666667\n    }\n  };\n  is_deeply($variation->{population_genotypes}->[0], $expected_pop_genotype, 'Population genotype check');\n}\n\ndone_testing();\n```\n\n----------------------------------------\n\nTITLE: Making Ensembl REST API Requests Using Perl Client\nDESCRIPTION: Example of using Perl's REST::Client to query the Ensembl REST API endpoint. This snippet shows how to set up the client, make a GET request to fetch region information, and process the JSON response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/associated_xref.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nuse strict;\nuse warnings;\nuse REST::Client;\nuse JSON;\n\nmy $server = 'https://rest.ensembl.org';\nmy $ext = '/overlap/region/human/7:140424943-140624564?feature=gene;feature=transcript;feature=cds;feature=exon';\nmy $client = REST::Client->new();\n$client->GET($server.$ext, {\n  'Content-Type' => 'application/json'\n});\n\ndie $client->responseContent() if $client->responseCode() != 200;\n\nmy $decoded = decode_json($client->responseContent());\nprint Dumper($decoded);\n```\n\n----------------------------------------\n\nTITLE: Defining REST Endpoint for Feature Retrieval in Perl\nDESCRIPTION: This code snippet defines a REST endpoint for retrieving feature information. It specifies the HTTP method, route, and documentation for the endpoint.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/unmapped_reason.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nget '/feature/:id' => sub {\n  my $c = shift;\n  my $id = $c->param('id');\n  # Implementation details\n};\n```\n\n----------------------------------------\n\nTITLE: Testing assembly region endpoint in Ensembl REST API with Perl\nDESCRIPTION: This test validates the '/info/assembly/:species/:region' endpoint of the Ensembl REST API. It ensures the endpoint returns the correct information for a specific genomic region including coordinate systems.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/external_db.txt#2025-04-22_snippet_6\n\nLANGUAGE: perl\nCODE:\n```\n  {\n    my $species = 'homo_sapiens';\n    my $region = '6:1000000..2000000';\n    my $assembly_json = RestHelper->get_json(\"info/assembly/$species/$region\");\n    is($assembly_json->{id}, $region, \"Region in response\");\n    is_deeply($assembly_json->{coord_system}, {name => 'chromosome', version => 'GRCh37'}, 'Checking coordinate system');\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Docker Image Configuration for Ensembl REST API\nDESCRIPTION: Dockerfile instructions to build a container image for the Ensembl REST API, based on the ensemblorg/ensembl-vep-web image and setting up the necessary environment.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/external_synonym.txt#2025-04-22_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ensemblorg/ensembl-vep-web:release-102.0\n\nCOPY . /opt/ensembl-rest/\nWORKDIR /opt/ensembl-rest\n\nRUN apt-get -y update && apt-get -y install libdbi-perl libcgi-pm-perl && rm -rf /var/lib/apt/lists/* && cpanm --installdeps . && cpanm Starman\n\nENV ENSEMBL_REST_CONFIG=/opt/ensembl-rest/configurations/production/ensrest.conf\nENV ENSEMBL_REST_PORT=3000\n\nEXPOSE 3000\n\nCMD starman --listen :${ENSEMBL_REST_PORT} --workers 10 ensembl_rest.psgi\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Production Environment in Perl\nDESCRIPTION: This configuration snippet defines production settings for the Ensembl REST API server, including connection parameters, compression settings, authentication methods, and deployment options. It specifies how the application should handle requests, manage resources, and secure connections in a production environment.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/intron_supporting_evidence.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\n\n{\n  name => 'EnsEMBL::REST',\n  using_frontend_proxy => 1,\n  user                => 'ensembl',\n  group               => 'ensembl',\n  user_home           => '/nfs/ensembl/ensembl-rest',\n  # The majority of these inputs are assumed to be from internal sources\n  # and that we're not aiming to be excessively paranoid.\n  max_request_size    => 50_000_000,\n  pid_locking         => 1,\n  admin_email         => 'dev-team@example.org',\n  admin_email_regexps => '(admin|error)s',\n  session_expires => 3600, # 1hr\n  # You can increase workers here if needed but check in with sysops first\n  # if setting this on production servers\n  workers             => 10,\n  # Can we gzip output?  This adds CPU load\n  enable_compression    => 1,\n  # Init script allows us to set the following variables\n  # init_config => {\n  #   port => '5000',\n  #   starman_config => 'prod',\n  # },\n  starman_config => {\n    prod => {\n      preload_app => 1,\n      daemonize => 1,\n      pid_file => 'ensrest.pid',\n    },\n  },\n  # Authentication\n  auth => {\n    auth_codes => {\n      dev => {\n        key => 'ensembl_dev',\n        name => 'dev',\n      },\n    },\n    # Default auth code\n    default_auth_code => 'dev',\n\n    # Default expiry time in days\n    token_expiry => 30,\n\n    # Disable the ticket system entirely\n    disable_tickets => 0,\n\n    # Set to 1 to prevent multiple tickets per user\n    disable_multiple_tickets => 0,\n  },\n\n   # Content Deployment\n   content => {\n    # Create URLs to the right tools in such a way to minimise the need to create plugin objects\n    # e.g.: http://www.ensembl.org/Homo_sapiens/Location/View?r=1:1-1000\n    # e.g.: http://grch37.ensembl.org/Homo_sapiens/Variation/Explore?v=rs123\n    # e.g.: http://fungi.ensembl.org/Saccharomyces_cerevisiae/Gene/Summary?g=YBR040W\n    # e.g.: http://bacteria.ensembl.org/Escherichia_coli_str_k_12_substr_mg1655/Gene/Summary?g=b2001\n\n    # Override default deployments\n    deployments => {\n      prod => 'http://www.ensembl.org',\n      grch37 => 'http://grch37.ensembl.org',\n      # These need to be real URLs in the future\n      \n      plants => 'http://plants.ensembl.org',\n      fungi => 'http://fungi.ensembl.org',\n      bacteria => 'http://bacteria.ensembl.org',\n      protists => 'http://protists.ensembl.org',\n      metazoa => 'http://metazoa.ensembl.org',\n\n      # Others\n      vep => 'http://www.ensembl.org/Homo_sapiens',\n      pre => 'http://pre.ensembl.org',\n    },\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying VEP with LWP::UserAgent in Perl\nDESCRIPTION: Example of using LWP::UserAgent in Perl to send a GET request to the Variant Effect Predictor REST API. Shows how to configure the request headers and process the response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/external_synonym.txt#2025-04-22_snippet_3\n\nLANGUAGE: perl\nCODE:\n```\nuse strict;\nuse warnings;\nuse LWP::UserAgent;\nuse JSON;\n\nmy $ua = LWP::UserAgent->new();\n\nmy $server = 'https://rest.ensembl.org';\nmy $ext = '/vep/human/hgvs/ENST00000494142:c.48C>A?';\nmy $response = $ua->get($server.$ext, 'Content-type' => 'application/json');\n\ndie \"Failed!\\n\" unless $response->is_success;\n\nif(length $response->decoded_content) {\n  my $hash = decode_json($response->decoded_content);\n  print $hash->[0]{most_severe_consequence}, \"\\n\";\n}\n\n```\n\n----------------------------------------\n\nTITLE: Get Extensions Function for Content-Type Mapping in Perl\nDESCRIPTION: Function that returns a hash mapping of content types to their corresponding file extensions for the Ensembl REST API. This mapping is used to determine the appropriate serialization format based on the requested content type in HTTP requests.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/unconventional_transcript_association.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\nsub get_extensions {\n  my ($self) = @_;\n  return {\n    'application/json' => 'json',\n    'text/xml' => 'xml',\n    'application/xml' => 'xml',\n    'text/x-yaml' => 'yaml',\n    'text/x-seqxml+xml' => 'seqxml',\n    'text/x-orthoxml+xml' => 'orthoxml',\n    'text/x-phyloxml+xml' => 'phyloxml',\n    'text/x-nh' => 'nh',\n    'text/x-fasta' => 'fasta',\n    'text/x-gff3' => 'gff3',\n    'text/x-bed' => 'bed',\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ensembl REST Server with Starman for Production\nDESCRIPTION: Command for running the Ensembl REST API in production using Starman, a high-performance web server for Perl applications. This setup uses multiple workers to handle concurrent requests.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature_misc_set.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nENSEMBL_REST_CONFIG=conf/ensembl_rest.conf starman --listen :3000 --workers 10 bin/app.psgi\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Dependencies in Perl\nDESCRIPTION: This code snippet defines the required dependencies for the Ensembl REST API project. It specifies the Ensembl and EnsEMBL::REST versions, as well as other necessary Perl modules.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/transcript_attrib.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\nrequires 'Catalyst::Runtime' => '5.90040';\nrequires 'Moose';\nrequires 'namespace::autoclean';\nrequires 'Config::General';\nrequires 'Log::Log4perl';\nrequires 'Hash::Merge';\nrequires 'Catalyst::Plugin::ConfigLoader';\nrequires 'Catalyst::Plugin::Static::Simple';\nrequires 'Catalyst::Action::RenderView';\n\n# Ensembl stuff\nrequires 'Bio::EnsEMBL::LookUp' => '2.3';\nrequires 'Ensembl';\nrequires 'EnsEMBL::REST' => '1.6.1';\n\nrequires 'Test::More' => '0.88';\nrequires 'Test::Differences';\nrequires 'Test::JSON';\nrequires 'Test::XML::Simple';\nrequires 'Test::XPath';\ncatalyst;\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets up the database connections for the Ensembl REST API. It includes configuration for various Ensembl databases, such as core, variation, and regulation.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/dnac.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  user     => $SiteDefs::USER || \"ensro\",\n  port     => $SiteDefs::PORT || 3306,\n  pass     => $SiteDefs::PASS || \"\",\n  host     => $SiteDefs::HOST || \"ensembldb.ensembl.org\",\n  version  => $SiteDefs::VERSION || 105,\n\n  databases => {\n    DATABASE_CORE => {\n      user     => undef,\n      port     => undef,\n      pass     => undef,\n      host     => undef,\n    },\n    DATABASE_VARIATION => {\n      user     => undef,\n      port     => undef,\n      pass     => undef,\n      host     => undef,\n    },\n    DATABASE_FUNCGEN => {\n      user     => undef,\n      port     => undef,\n      pass     => undef,\n      host     => undef,\n    },\n    DATABASE_COMPARA => {\n      user     => undef,\n      port     => undef,\n      pass     => undef,\n      host     => undef,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing taxonomy endpoint in Ensembl REST API with Perl\nDESCRIPTION: This test validates the '/taxonomy/id' endpoint, verifying that it returns the correct taxonomic information for a given ID including scientific name, common name, and classification.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/external_db.txt#2025-04-22_snippet_9\n\nLANGUAGE: perl\nCODE:\n```\n  # Taxonomy ID endpoint\n  {\n    my $taxon_id = 9606;\n    my $taxonomy_json = RestHelper->get_json(\"taxonomy/id/$taxon_id\");\n    cmp_ok($taxonomy_json->{id}, '==', $taxon_id, 'ID in the resource as expected');\n    cmp_ok($taxonomy_json->{scientific_name}, 'eq', 'Homo sapiens', 'Scientific name as expected');\n    cmp_ok($taxonomy_json->{common_name}, 'eq', 'human', 'Common name as expected');\n    cmp_ok($taxonomy_json->{scientific_name_authorship}, 'eq', 'Linnaeus, 1758', 'Scientific name authorship as expected');\n    ok(length($taxonomy_json->{synonyms}) >= 1, 'Synonyms in JSON') if defined $taxonomy_json->{synonyms};\n    ok(exists $taxonomy_json->{parent}, 'Parent exists in response') if defined $taxonomy_json->{parent};\n    ok(exists $taxonomy_json->{children}, 'Children exists in response') if defined $taxonomy_json->{children};\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring LWP Timeout for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets the LWP timeout for the Ensembl REST API. It specifies the timeout in seconds for HTTP requests.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/transcript_supporting_feature.txt#2025-04-22_snippet_3\n\nLANGUAGE: Perl\nCODE:\n```\n  # LWP timeout\n  lwp_timeout => 15,\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Pattern Matching for Ensembl REST API Endpoints\nDESCRIPTION: Defines URL patterns for various Ensembl REST API endpoints, mapping them to specific controller actions. This configuration determines how incoming requests are routed to the appropriate handlers.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/exon_transcript.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\n__PACKAGE__->config(\n  'Plugin::URLMap' => {\n    '.well-known' => {\n      'Path' => '/well-known',\n      'Controller' => 'WellKnown',\n    },\n    'info' => {\n      'Path' => '/info',\n      'Args' => '1',\n      'Controller' => 'Info',\n    },\n    'archive' => {\n      'Path' => '/archive',\n      'Args' => '2',\n      'Controller' => 'Archive',\n    },\n    'sequence' => {\n      'Path' => '/sequence',\n      'Args' => '2',\n      'Controller' => 'Sequence',\n    },\n    'genetree' => {\n      'Path' => '/genetree',\n      'Args' => '2',\n      'Controller' => 'GeneTree',\n    },\n    'overlap' => {\n      'Path' => '/overlap',\n      'Args' => '2',\n      'Controller' => 'Overlap',\n    },\n    'variation' => {\n      'Path' => '/variation',\n      'Args' => '2',\n      'Controller' => 'Variation',\n    },\n    'vep' => {\n      'Path' => '/vep',\n      'Args' => '3',\n      'Controller' => 'VEP',\n    },\n    'ld' => {\n      'Path' => '/ld',\n      'Args' => '3',\n      'Controller' => 'LD',\n    },\n    'lookup' => {\n      'Path' => '/lookup',\n      'Args' => '2',\n      'Controller' => 'Lookup',\n    },\n    'analysis' => {\n      'Path' => '/analysis',\n      'Args' => '2',\n      'Controller' => 'Analysis',\n    },\n    'homology' => {\n      'Path' => '/homology',\n      'Args' => '2',\n      'Controller' => 'Homology',\n    },\n    'map' => {\n      'Path' => '/map',\n      'Args' => '2',\n      'Controller' => 'Map',\n    },\n    'ontology' => {\n      'Path' => '/ontology',\n      'Args' => '2',\n      'Controller' => 'Ontology',\n    },\n    'taxonomy' => {\n      'Path' => '/taxonomy',\n      'Args' => '2',\n      'Controller' => 'Taxonomy',\n    },\n    'assembly' => {\n      'Path' => '/assembly',\n      'Args' => '2',\n      'Controller' => 'Assembly',\n    },\n    'biotype' => {\n      'Path' => '/biotype',\n      'Args' => '2',\n      'Controller' => 'Biotype',\n    },\n    'xrefs' => {\n      'Path' => '/xrefs',\n      'Args' => '3',\n      'Controller' => 'Xrefs',\n    },\n    'ga4gh' => {\n      'Path' => '/ga4gh',\n      'Args' => '3',\n      'Controller' => 'ga4gh',\n    },\n    'cafe' => {\n      'Path' => '/cafe',\n      'Args' => '2',\n      'Controller' => 'Cafe',\n    },\n    'phenotype' => {\n      'Path' => '/phenotype',\n      'Args' => '2',\n      'Controller' => 'Phenotype',\n    },\n    'var' => {\n      'Path' => '/var',\n      'Args' => '2',\n      'Controller' => 'Var',\n    },\n    'variant_recoder' => {\n      'Path' => '/variant_recoder',\n      'Args' => '2',\n      'Controller' => 'VariantRecoder',\n    },\n    'linkage_disequilibrium' => {\n      'Path' => '/linkage_disequilibrium',\n      'Args' => '2',\n      'Controller' => 'LDFeatureContainer',\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Schema Class for Ensembl REST API in Perl\nDESCRIPTION: Defines the EnsEMBL::REST::Schema package which provides core schema functionality for the Ensembl REST API. It extends Moo and implements JSON field handling and type coercion methods.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/transcript_supporting_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\npackage EnsEMBL::REST::Schema;\n\nuse Moo;\nuse Types::Standard qw/Str Int ArrayRef HashRef Bool/;\nuse JSON;\nuse Scalar::Util qw/looks_like_number/;\nuse HTTP::Status qw/:constants/;\nuse EnsEMBL::REST::EnsemblModel::TranscriptVariation;\nuse EnsEMBL::REST::EnsemblModel::VariationFeature;\nuse EnsEMBL::REST::EnsemblModel::Variation;\nuse EnsEMBL::REST::EnsemblModel::Exon;\nuse EnsEMBL::REST::EnsemblModel::Transcript;\nuse EnsEMBL::REST::EnsemblModel::Gene;\nuse feature qw/switch/;\nno if $] >= 5.018, warnings => \"experimental::smartmatch\";\n\n\nsub validate_ref {\n  my ($self, $data, $field, $type) = @_;\n  #Don't need to check if the field isn't required\n  if(exists $field->{validate_if} && defined $field->{validate_if}) {\n    my $required = $field->{validate_if};\n    my $value = $data->{ $required->{field} };\n    if(defined $value) {\n      if( exists $required->{value} ) {\n        unless ($value eq $required->{value}) {\n          return;\n        }\n      }\n    } else {\n      return;\n    }\n  }\n  #Field exists\n  my $key = $field->{name};\n  if(!exists $data->{$key} && $field->{required}) {\n    die {  message => \"$key is a required field\", code => HTTP_BAD_REQUEST };\n  }\n  if(!exists $data->{$key}) {\n    return;\n  }\n  #Check field value against data type\n  my $value = $data->{$key};\n  my $class = ref($value);\n  if($type eq 'json') {\n    unless( (!$class || $class eq 'ARRAY' || $class eq 'HASH') ) {\n      die { message => \"$key needs to be a json string or a HashRef/ArrayRef already\", \n        code => HTTP_BAD_REQUEST \n      };\n    }\n  }\n  elsif($type eq 'array') {\n    unless($class eq 'ARRAY') {\n      die { message => \"$key needs to be an array of values\", code => HTTP_BAD_REQUEST};\n    }\n  }\n  elsif($type eq 'hash') {\n    unless($class eq 'HASH') {\n      die { message => \"$key needs to be a hash of values\", code => HTTP_BAD_REQUEST};\n    }\n  }\n  elsif($type eq 'uri') {\n    #Urg; importing things can hurt but I don't want to force deps of HTTP::Request etc.\n    unless(!$class && (substr($value,0,4) eq 'http' || substr($value,0,1) eq '/')) {\n      die { message => \"$key needs to be either an absolute URI or a root path\", code => HTTP_BAD_REQUEST};\n    }\n  }\n  elsif($type eq 'boolean') {\n    if($class) {\n      die { message => \"$key needs to be a boolean\", code => HTTP_BAD_REQUEST};\n    }\n  }\n  elsif($type eq 'integer') {\n    if($class || ! looks_like_number($value)) {\n      die { message => \"$key needs to be an integer\", code => HTTP_BAD_REQUEST};\n    }\n    if($value != int($value)) {\n      die { message => \"$key needs to be an integer\", code => HTTP_BAD_REQUEST};\n    }\n  }\n  elsif($type eq 'string') {\n    if($class) {\n      die { message => \"$key needs to be a string\", code => HTTP_BAD_REQUEST};\n    }\n  }\n  elsif(substr($type, 0, 7) eq 'enum::(') { \n    my @enum = eval $type;\n    if($class || !grep { $_ eq $value } @enum) {\n      die { message => \"$key must be one of the following: \".join(', ', @enum), code => HTTP_BAD_REQUEST};\n    }\n  }\n  elsif($type eq 'enum') {\n    if($class || !grep { $_ eq $value } @{$field->{enum}}) {\n      die { message => \"$key must be one of the following: \".join(', ', @{$field->{enum}}), code => HTTP_BAD_REQUEST};\n    }\n  }\n  elsif($type eq 'numeric') {\n    if($class || !looks_like_number($value)) {\n      die { message => \"$key needs to be a number\", code => HTTP_BAD_REQUEST};\n    }\n  }\n  elsif($type eq 'file') {\n    unless($class eq 'HASH' && exists $value->{tempname}) {\n      die { message => \"$key must be a HashRef with a 'tempname' key\", code => HTTP_BAD_REQUEST};\n    }\n    my $tmp = $value->{tempname};\n    unless(-f $tmp) {\n      die { message => \"Cannot find $tmp. Upload failure?\", code => HTTP_BAD_REQUEST};\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSONP Callback with Ensembl REST API in Python\nDESCRIPTION: This snippet shows how to use the JSONP callback parameter with the Ensembl REST API. It wraps the JSON response in a JavaScript function call named 'process_data', allowing for cross-domain API usage in web applications.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/associated_group.txt#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nserver = \"https://rest.ensembl.org\"\nextension = \"/homology/id/ENSG00000157764?callback=process_data\"\n\nr = requests.get(server+extension, headers={ \"Content-Type\" : \"application/json\"})\n \nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \ndecoded = r.text\nprint(repr(decoded))\n```\n\n----------------------------------------\n\nTITLE: Configuring VEP Runner with Plugin Options in Perl\nDESCRIPTION: This code snippet demonstrates how to configure the VEP Runner with plugin options in the Ensembl REST API. It includes logic for handling plugin parameters and formatting them correctly for the VEP runner configuration.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/karyotype.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\nsub _configure_plugins {\n  my ($self, $c) = @_;\n  \n  my $plugins = $c->request->param('plugins');\n  return [] if ! $plugins;\n  \n  my @plugin_config;\n  foreach my $plugin_string (split(',', $plugins)) {\n    my $string_copy = $plugin_string;\n    my @split = split('=', $plugin_string);\n    my %config = ( name => $split[0] );\n    if($split[1]) {\n      my @params = split('&', $split[1]);\n      foreach my $param(@params) {\n        my @param_details = split(':', $param);\n        $config{params}->{$param_details[0]} = $param_details[1];\n      }\n    }\n    push(@plugin_config, \\%config);\n  }\n  return \\@plugin_config;\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting REST Endpoints with POD in Perl\nDESCRIPTION: Example of proper documentation for a REST endpoint using POD (Plain Old Documentation) format in Perl. Shows how to document the purpose, parameters, and expected responses of an endpoint.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/analysis_description.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\n=head2 /type/id/:id\n\nFetch an entry by its given database identifier\n\n=cut\n```\n\n----------------------------------------\n\nTITLE: Get Mime Type Function in Perl for REST API\nDESCRIPTION: Function that returns the MIME type corresponding to a given serialization format in the Ensembl REST API. It maps extensions like 'json' and 'xml' to their appropriate MIME types to be used in HTTP Content-Type headers.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/unconventional_transcript_association.txt#2025-04-22_snippet_4\n\nLANGUAGE: Perl\nCODE:\n```\nsub get_mime_type {\n  my ($class, $reference) = @_;\n  my $default = $class->default_content_type();\n  my %mime_types = %{ $class->suffix_to_type() };\n  return $default unless $reference;\n  return $mime_types{$reference} || $default;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Experiment Result Files to Array in Ensembl REST API Perl\nDESCRIPTION: Helper method that processes experiment result files and converts them to an array structure. It handles file limits, formats file information including paths and metadata, and organizes files by their relation to the experiment.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/data_set.txt#2025-04-22_snippet_6\n\nLANGUAGE: perl\nCODE:\n```\nsub result_files_to_array {\n  my ($self, $experiment, $max_files) = @_;\n\n  # extract all result files\n  my @result_files = @{$experiment->get_ResultFiles()};\n  my @result;\n\n  # limit number of files if requested\n  if ($max_files > 0 && @result_files > $max_files) {\n    @result_files = @result_files[0..$max_files-1];\n  }\n\n  # convert each result file to a hash entry\n  for my $rf (@result_files) {\n    my $entry = {\n      name => $rf->name,\n      md5sum => $rf->md5sum,\n      dbID => $rf->dbID,\n      file => $rf->file,\n      experiment_id => $experiment->dbID,\n      analysis_method => $rf->analysis_method,\n    };\n\n    # add file size if defined\n    if ($rf->size) {\n      $entry->{size} = $rf->size + 0; # ensure numeric format\n    }\n\n    push @result, $entry;\n  }\n\n  return @result;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Server in Perl\nDESCRIPTION: This code snippet sets up various configuration options for the Ensembl REST API server, including database connections, caching, and compression settings. It defines the name of the application, specifies database connection parameters, and configures caching and compression options.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/stable_id_event.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  using_frontend_proxy => 1,\n  default_view => 'HTML',\n  service_name => 'Ensembl REST API',\n  service_logo => 'ensembl_logo.png',\n  service_parent_url => '/',\n  default_content_type => 'application/json',\n\n  # API Cache code\n  cache_root_dir => $ENV{ENSEMBL_REST_CACHE_DIR} || undef,\n\n  # Cookies\n  session_store => 'File',\n  session_lock_dir => '/tmp',\n\n  # Compressing\n  enable_jsonp => 1,\n  enable_gzip_compression => 1,\n  compress_gzip_threshold => 1024,\n\n  # Enable restarting\n  enable_reload => 1,\n\n  #List of plugins\n  Enable => ['EnsEMBL::REST::EnsemblPlugin'],\n\n  # Plug in the correct DB password\n  db_pass => $ENV{ENSEMBL_REST_DB_PASSWORD},\n  db_host => $ENV{ENSEMBL_REST_DB_HOST},\n\n  # Documentation external resources\n  helpscout_beacon_id => $ENV{ENSEMBL_REST_HELPSCOUT_BEACON_ID} || '',\n\n  # Capthca\n  recaptcha_site_key => $ENV{ENSEMBL_REST_RECAPTCHA_SITE_KEY},\n  recaptcha_secret_key => $ENV{ENSEMBL_REST_RECAPTCHA_SECRET_KEY},\n\n  # Flag endpoints that require variation database\n  require_variation_db => [qw(\n    /overlap/region/:species/:region\n    /overlap/id/:species/:id\n    /overlap/translation/:species/:id\n    /variation/:species/:id\n    /variation_post/:species\n    /vep/:species/id\n    /vep/:species/hgvs\n    /vep/:species/region\n    /vep/:species/transcript_id\n    /vep/:species/:format\n    /vep/:species/:format/id\n    /vep/:species/:format/hgvs\n    /vep/:species/:format/region\n    /vep/:species/:format/transcript_id\n    /vep/:species/:format/post\n    /vep/:species/post\n    /variant_recoder/:species\n    /variant_recoder/:species/post\n  )],\n\n  # Flag endpoints that require 'coredb'\n  require_coredb => [qw(\n    /homology/:species/:id\n    /archive/:species/:type/:id\n    /archive/:species/:type/:id/:version\n    /genetics/:species/:symbol/:trait\n    /ontology/:term\n    /ontology/:term/chart\n    /ontology/:term/descendants\n    /ontology/:term/hierarchical_ancestors\n    /ontology/:term/ancestors\n    /ontology/ancestors/:term\n    /ontology/:term/ancestors/chart\n    /ontology/:term/descendant_chart\n    /ontology/id/:id\n    /taxonomy/:species\n    /taxonomy/classification/:species\n    /taxonomy/id/:id\n    /taxonomy/name/:name\n    /assembly/:species/:region\n    /sequence/region/:species/:region\n    /sequence/region/:species/:region\n    /sequence/id/:species/:id\n    /sequence/id/:species/:id\n    /assembly/info/:species\n    /assembly/info/:species/:region_name\n    /assembly/stats/:species\n    /map/:species/:asm_one/:region/:asm_two\n    /map/:species/:asm1/:region1/:asm2/:region2\n    /map/cdna/:species/:id/:region\n    /map/cds/:species/:id/:region\n    /map/translation/:species/:id/:region\n    /cafe/tree/:id/:species\n    /cafe/tree_pdf/:id/:species\n    /cafe/plot_side_by_side/:id/:species\n    /cafe/gene_tree/:id\n    /cafe/gene_tree/:id/:species\n    /cafe/gene_tree_alignment/:id\n    /cafe/gene_tree_member/:id/:species\n    /cafe/gene_tree_member_id/:id\n    /cafe/gene_tree_member_symbol/:symbol/:species\n    /cafe/species_set/:species_set_name\n    /cafe/species_set/:species_set_id\n    /cafe/eqtl/:id\n    /cafe/eqtl/:species/:gene\n    /lookup/:species/:id\n    /lookup/symbol/:species/:symbol\n    /lookup/id\n    /xrefs/:species/:id\n    /xrefs/name/:species/:name\n    /xrefs/symbol/:species/:symbol\n    /overlap/region/:species/:region\n    /overlap/id/:species/:id\n    /overlap/translation/:species/:id\n    /feature/:species/:id\n    /phenotype/region/:species/:region\n    /phenotype/gene/:species/:gene\n    /info/analysis/:species\n    /info/assembly/:species\n    /info/assembly/:species/:region_name\n    /info/biotypes/:species\n    /info/compara/methods\n    /info/compara/species_sets/:method\n    /info/comparas\n    /info/data\n    /info/external_dbs/:species\n    /info/ping\n    /info/rest\n    /info/software\n    /info/species\n    /info/variation/:species\n    /info/variation/populations/:species\n    /info/variation/consequence_types\n    /info/variation/overlap_consequences\n    /info/variation/population_frequencies/:species\n    /info/variation/sample_genotype_frequencies/:species\n    /info/variation/phenotype_ontologies/:species\n  )],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Server Deployment Hook\nDESCRIPTION: A Git post-checkout hook script that handles deployment tasks after checking out code. It manages symlinks for the deployment configuration in production or development environments and runs necessary update commands.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/operon.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/bash\n\nBRANCH=$3\nif [ $BRANCH -eq 1 ]; then\n  CUR_BRANCH=`git branch | grep '*' | sed 's/* //'`\n  echo \"Now on branch $CUR_BRANCH\"\n  # If we're on master make sure we have a symlink to production\n  if [ \"$CUR_BRANCH\" == \"master\" ]; then\n    if [ -e configurations/production/ensrest.psgi -a ! -e root/ensrest.psgi ]; then\n      echo \"Setting up production symlinks\"\n      cd root\n      ln -s ../configurations/production/ensrest.psgi\n      cd ..\n    fi\n  # Otherwise if we already have a development copy then use that.\n  elif [ -e configurations/development/ensrest.psgi -a ! -e root/ensrest.psgi ]; then\n    echo \"Setting up development symlinks\"\n    cd root\n    ln -s ../configurations/development/ensrest.psgi\n    cd ..\n  fi\n  echo \"Running ensembl-git-tools/bin/git-ensembl-update-conf\"\n  ensembl-git-tools/bin/git-ensembl-update-conf\nfi\n\n```\n\n----------------------------------------\n\nTITLE: Testing taxonomy ID filtering in Ensembl REST API with Perl\nDESCRIPTION: This snippet tests the taxonomy filtering functionality of the '/info/genomes/taxonomy' endpoint. It validates that the endpoint correctly returns genome information when filtered by a taxonomy ID.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/external_db.txt#2025-04-22_snippet_4\n\nLANGUAGE: perl\nCODE:\n```\n  {\n    my $taxonomy_id = 9606;\n    my $taxonomy_json = RestHelper->get_json(\"$base/taxonomy/$taxonomy_id\");\n    ok(scalar(@{$taxonomy_json}) >= 1, \"Asserting we get at least one result back\");\n    my ($genome) = grep { $_->{name} eq 'homo_sapiens'} @{$taxonomy_json};\n    ok($genome, \"Asserting taxonomy filtering works\");\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Running REST Server with Debug Mode and HTTP::Tiny Tracer\nDESCRIPTION: Command to start the Ensembl REST server with debugging enabled and HTTP::Tiny tracer for monitoring HTTP requests. Includes configuration for host, port, and number of processes.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon_transcript.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ensembl-rest\nHTTP_TINY_DEBUG=1 perl -Ilib scripts/rest_server.pl -debug 1 -host 0.0.0.0 -port 3000 -pid_file rest_ensembl.pid -processes 15\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Database Connections\nDESCRIPTION: This YAML configuration file defines database connection settings for various Ensembl databases used by the REST API. It includes connection details for core, variation, and other database types across different species.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/associated_xref.txt#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n---\nhomo_sapiens:\n  core:\n    - host: mysql-ensembl-mirror\n      port: 4240\n      user: anonymous\n      pass: \n      db_name: homo_sapiens_core_95_38\n  variation:\n    - host: mysql-ensembl-mirror\n      port: 4240\n      user: anonymous\n      pass: \n      db_name: homo_sapiens_variation_95_38\n\nmus_musculus:\n  core:\n    - host: mysql-ensembl-mirror\n      port: 4240\n      user: anonymous\n      pass: \n      db_name: mus_musculus_core_95_38\n  variation:\n    - host: mysql-ensembl-mirror\n      port: 4240\n      user: anonymous\n      pass: \n      db_name: mus_musculus_variation_95_38\n\nmulti:\n  compara:\n    - host: mysql-ensembl-mirror\n      port: 4240\n      user: anonymous\n      pass: \n      db_name: ensembl_compara_95\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Plugins in Perl\nDESCRIPTION: This snippet sets up the plugin configuration for the Ensembl REST API. It specifies the directories where plugins are located and any additional configuration options for the plugins.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/prediction_exon.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\nsub plugin_use {\n  my ($self) = @_;\n  return {\n    'EnsEMBL::REST::Plugin' => undef,\n  };\n}\n\nsub plugin_config {\n  my ($self) = @_;\n  return {\n    'EnsEMBL::REST::Plugin' => {\n      -dirs => [$self->o('ENSEMBL_REST_PLUGIN_ROOT')],\n      # Add any other config options here\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing REST GET Method for Homology Symbol Endpoint in Perl\nDESCRIPTION: A REST GET method implementation for retrieving homology data by gene symbol in the Ensembl REST API. It includes error handling and parameter processing for controlling the homology data returned.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/seq_region_attrib.txt#2025-04-22_snippet_3\n\nLANGUAGE: perl\nCODE:\n```\nsub homology_symbol_GET {\n  my ($self, $c, $species, $symbol) = @_;\n  my $target_species = $c->request->param('target_species');\n  my $target_taxon = $c->request->param('target_taxon');\n  my $aligned = $c->request->param('aligned');\n  my $type = $c->request->param('type') || 'all';\n  my $format = $c->request->param('format') || 'full';\n  my $cigar_line = $c->request->param('cigar_line');\n  \n  try {\n    my $lookup = $c->model('Lookup');\n    my ($gene) = @{$lookup->find_objects_by_symbol($symbol) || []};\n    $c->go('ReturnError', 'custom', [\"No genes found for $symbol in $species\"]) unless $gene;\n    \n    # More processing logic would go here\n    \n    my $homologies = $c->model('Homology')->fetch_by_gene_stable_id($gene->stable_id(), $target_species, $target_taxon, $type, $aligned, $format, $cigar_line);\n    $self->status_ok($c, entity => $homologies);\n  } catch {\n    $c->go('ReturnError', 'from_ensembl', [$_])\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Sequence Data from Ensembl REST API with Node.js\nDESCRIPTION: This code demonstrates how to request sequence data from the Ensembl REST API using Node.js. It makes an HTTP GET request to the specified endpoint, handles the response, and processes the JSON data returned by the API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/species_set_tag.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar request = require('request');\n\nrequest({\n  uri: 'https://rest.ensembl.org/sequence/id/ENSG00000157764?content-type=application/json',\n  headers:{\n    'User-Agent': 'Node.js'\n  }\n}, function(error, response, body) {\n  if(error) console.log('Error retrieving data');\n  else if(response.statusCode != 200) console.log('Error: ' + response.statusCode);\n  else {\n    var data = JSON.parse(body);\n    console.log(data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Testing genome information endpoint in Ensembl REST API with Perl\nDESCRIPTION: This snippet tests the '/info/genomes' endpoint of the Ensembl REST API. It validates that the endpoint returns the expected genome data structure including assembly information, taxonomy ID, and other genome metadata.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/external_db.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\n  {\n    my $genomes_json = RestHelper->get_json($base);\n    ok(scalar(@{$genomes_json}) > 3, \"Asserting we get more than 3 results from reporting\");\n    my ($genome) = grep { $_->{name} eq 'homo_sapiens'} @{$genomes_json};\n    cmp_ok(scalar(keys %{$genome}), '==', 11, 'Checking we get 11 keys back. More means you need to update the test');\n\n    cmp_deeply($genome, {\n      'name' => 'homo_sapiens',\n      'assembly_name' => 'GRCh37.p13',\n      'assembly_accession' => 'GCA_000001405.14',\n      'is_reference' => 1,\n      'taxonomy_id' => 9606,\n      'strain' => 'GRCh37',\n      'strain_collection' => undef,\n      'display_name' => 'Human',\n      'accession' => 'GCA_000001405.14',\n      'common_name' => 'human',\n      'species_taxonomy_id' => 9606,\n    }, \"Checking genome response\");\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets up the Content Security Policy (CSP) for the Ensembl REST API. It defines various directives to control which resources can be loaded and executed by the API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/translation_attrib.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\nsub content_security_policy {\n  return {\n    default_src => [\"'self'\"],\n    style_src => [\"'self'\", \"'unsafe-inline'\"],\n    img_src => [\"'self'\", \"data:\"],\n    font_src => [\"'self'\"],\n    script_src => [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"],\n    connect_src => [\"'self'\"],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining custom exception class for Ensembl REST API in Perl\nDESCRIPTION: This snippet defines a custom exception class 'EnsEMBL::REST::Exception' that inherits from 'Throwable::Error'. It includes attributes for HTTP status code, error code, and reason.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/splicing_event_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\npackage EnsEMBL::REST::Exception;\nuse Moose;\nuse namespace::autoclean;\nextends 'Throwable::Error';\n\nhas 'http_status_code' => ( is => 'ro', isa => 'Int', required => 1 );\nhas 'error_code' => ( is => 'ro', isa => 'Int', required => 1 );\nhas 'reason' => ( is => 'ro', isa => 'Str', required => 1 );\n\n__PACKAGE__->meta->make_immutable;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Overlapping Features with File Upload in Ensembl REST API\nDESCRIPTION: This example demonstrates how to upload a file with region specifications to retrieve overlapping features. The file contains a list of regions in a supported format, and the API returns features that overlap with those regions.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature.txt#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: text/plain\" -H \"Accept: application/json\" --data-binary \"7 140424943 140624564\\n7 100000000 101000000\" http://rest.ensembl.org/overlap/region/human?feature=gene;feature=transcript;feature=cds\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Starman Server in YAML\nDESCRIPTION: This YAML configuration file sets up the Starman server for the Ensembl REST API. It defines server settings, process management, and logging options.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/simple_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n---\nname: Starman\nmax_workers: 10\nmax_requests: 10000\nmin_workers: 2\nworkers: 10\nrestart_delay: 5\nrestart_interval: 5\nchild_exit: 1\npreload_app: 1\nlog_file: ensrest.log\nlog_level: warn\nlog_format: '%s'\naccess_log: access.log\npid_file: ensrest.pid\nuser: ensro\ngroup: ensro\nfile_or_dir: script/ensembl_rest_server.psgi\n```\n\n----------------------------------------\n\nTITLE: Creating Git Pre-Commit Hook for Version Control\nDESCRIPTION: A Git pre-commit hook script that checks if any development-specific files have been modified and stops the commit if found, ensuring proper version control practices. The script examines files related to configuration and documentation.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/operon.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/bash\n\nBRANCH_NAME=`git branch | grep '*' | sed 's/* //'`\nCOMMIT_FILES=`git diff --cached --name-only`\n\nDEV_FILES=\"\"\nfor f in $COMMIT_FILES; do\n  case \"$f\" in\n    root/documentation/*)\n      DEV_FILES=\"$DEV_FILES\\n$f\"\n      ;;\n    configurations/production/ensrest.psgi)\n      DEV_FILES=\"$DEV_FILES\\n$f\"\n      ;;\n  esac\ndone\n\nif [ \"$DEV_FILES\" != \"\" ]; then\n  echo -e \"\\nYou cannot commit the following files. Please unstage them using 'git reset HEAD <file>' :\\n$DEV_FILES\\n\"\n  exit 1\nfi\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Catalyst ActionClasses in Perl\nDESCRIPTION: Example demonstrating how to implement Catalyst ActionClasses in a REST controller. Shows the pattern for creating endpoints with proper path specification and attribute decorators.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/analysis_description.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nsub id : Chained(\"/\") PathPart(\"type/id\") ActionClass(\"REST\") {}\n```\n\n----------------------------------------\n\nTITLE: Installing Ensembl REST API dependencies with cpanm\nDESCRIPTION: Command to install Perl dependencies for the Ensembl REST API using cpanm. This installs all required modules specified in the cpanfile located in the Ensembl REST API directory.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/ditag.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncpanm --installdeps .\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Database Connections in Perl\nDESCRIPTION: Sets up database connections for the Ensembl REST API, including species-specific databases and multi-species databases. It defines connection parameters and species aliases.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/xref.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\nuse strict;\nuse warnings;\n\nsub setup_db_adaptors {\n  my ($self) = @_;\n  my $reg = 'Bio::EnsEMBL::Registry';\n  my %aliases = (\n    'ara' => 'arabidopsis_thaliana',\n    'bra' => 'brachypodium_distachyon',\n    'hor' => 'hordeum_vulgare',\n    'ory' => 'oryza_sativa',\n    'pop' => 'populus_trichocarpa',\n    'sor' => 'sorghum_bicolor',\n    'soy' => 'glycine_max',\n    'mai' => 'zea_mays',\n    'sbi' => 'sorghum_bicolor',\n    'sol' => 'solanum_lycopersicum',\n    'vig' => 'vigna_angularis',\n    'vin' => 'vitis_vinifera',\n    'whe' => 'triticum_aestivum'\n  );\n\n  $reg->load_registry_from_db(\n    -host => 'mysql-eg-publicsql.ebi.ac.uk',\n    -user => 'anonymous',\n    -port => 4157,\n    -db_version => '57',\n    -SECURE => 1,\n    -verbose => '0',\n    -reconnect_when_lost => 1,\n    -species_suffix => '_eg',\n    -aliases => \\%aliases,\n  );\n  \n  $reg->load_registry_from_db(\n    -host => 'mysql-eg-publicsql.ebi.ac.uk',\n    -user => 'anonymous',\n    -port => 4157,\n    -db_version => '57',\n    -SECURE => 1,\n    -verbose => '0',\n    -reconnect_when_lost => 1,\n  );\n\n  $reg->set_disconnect_when_inactive();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Rate Limits in Perl\nDESCRIPTION: This snippet sets up rate limiting for the Ensembl REST API. It defines different rate limits for various endpoints and specifies the time period for these limits.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/misc_feature_misc_set.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\n<Model::Documentation::Routes>\n  <endpoints>\n    gene_symbol 'lookup/symbol/:species/:symbol'\n    gene_stable_id 'lookup/id/:id'\n    translation_stable_id 'lookup/translation/:id'\n    ontology_ancestors 'ontology/ancestors/:id'\n    ontology_ancestors_chart 'ontology/ancestors/chart/:id'\n    ontology_descendants 'ontology/descendants/:id'\n    ontology_term 'ontology/id/:id'\n    ontology_name 'ontology/name/:name'\n    xrefs_symbol 'xrefs/symbol/:species/:symbol'\n    map_symbol 'map/symbol/:species/:symbol'\n    map 'map/:species/:region/:start/:end'\n    homology_symbol 'homology/symbol/:species/:symbol'\n    homology_gene_tree 'homology/id/:id'\n    homology_id 'homology/id/:id'\n    archive_id 'archive/id/:id'\n    assembly_info 'assembly/info/:species'\n    assembly_stats 'assembly/stats/:species'\n    sequence_region '/sequence/region/:species/:region'\n    info_assembly 'info/assembly/:species/:region_name'\n    info_assembly_stats 'info/assembly/:species'\n    info_biotypes 'info/biotypes/:species'\n    info_compara_methods 'info/compara/methods'\n    info_compara_species_sets 'info/compara/species_sets/:method'\n    info_data 'info/data'\n    info_ping 'info/ping'\n    info_rest 'info/rest'\n    info_software 'info/software'\n    info_species 'info/species'\n    info_variation '/info/variation/:species'\n    info_external_dbs 'info/external_dbs/:species'\n    lookup_symbol 'lookup/symbol/:species/:symbol'\n    lookup_id 'lookup/id/:id'\n    map_translation_id 'map/translation/:id'\n    overlap_id 'overlap/id/:id'\n    overlap_region 'overlap/region/:species/:region'\n    overlap_translation 'overlap/translation/:id'\n    sequence_id 'sequence/id/:id'\n    sequence_region '/sequence/region/:species/:region'\n    vep_region 'vep/:species/region/:region/:allele/'\n    vep_id 'vep/:species/id/:id/:allele/'\n    variation_symbol 'variation/:species/:symbol'\n    variation_id 'variation/:species/[:id]'\n    variation_pmcid 'variation/:species/pmcid/:pmcid'\n    variation_pmid 'variation/:species/pmid/:pmid'\n    variation_vepregion 'vep/:species/region/:region/:allele/'\n    variation_vepid 'vep/:species/id/:id/:allele'\n    variation_consequences 'variation/:species/[:id]/consequences'\n    # not sure what to do with these two\n    ga4gh_variantannotations 'ga4gh/variantannotations/search'\n    ga4gh_variants 'ga4gh/variants/search'\n    ga4gh_referenceset 'ga4gh/referencesets/:id'\n    ga4gh_references 'ga4gh/references/:id'\n    ga4gh_callsets 'ga4gh/callsets/search'\n    ga4gh_alleles 'ga4gh/variants/:id'\n    ga4gh_variantsets 'ga4gh/variantsets/search'\n    ga4gh_alignments 'ga4gh/reads/search'\n    ga4gh_referenceseq 'ga4gh/references/:id/bases'\n    ga4gh_reads 'ga4gh/readgroupsets/search'\n    ga4gh_sequences 'ga4gh/sequences/search'\n    ga4gh_variants 'ga4gh/variants/search'\n    ga4gh_variantannotations 'ga4gh/variantannotations/search'\n    ga4gh_features 'ga4gh/features/search'\n    ga4gh_featuresets 'ga4gh/featuresets/search'\n    ga4gh_datasets 'ga4gh/datasets/search'\n    ga4gh_phenotypeassociationsets 'ga4gh/phenotypeassociationsets/search'\n    ga4gh_phenotypes 'ga4gh/phenotypes/search'\n    info_analysis 'info/analysis/:species'\n    info_genomes 'info/genomes'\n    info_genomes_accession 'info/genomes/accession/:accession'\n    info_genomes_assembly 'info/genomes/assembly/:assembly'\n    info_genomes_division 'info/genomes/division/:division'\n    info_genomes_taxonomy 'info/genomes/taxonomy/:taxon_id'\n    lookup_genome 'lookup/genome/:name_accession'\n    regulatory_feature 'regulatory/species/:species/id/:id'\n    regulatory_region 'regulatory/species/:species/region/:region'\n    sequence_id_post 'sequence/id'\n    sequence_region_post 'sequence/region'\n    sequence_metadata_post 'sequence/metadata'\n    variation_post 'variation/:species'\n    variation_consequence_types 'variation/:species/consequence_types'\n    vep_hgvs 'vep/:species/hgvs/:hgvs'\n    vep_region_post 'vep/:species/region'\n    vep_id_post 'vep/:species/id'\n    variation_id_phenotypes 'variation/:species/[:id]/phenotypes'\n  </endpoints>\n  <global_rate_limit>\n    limit   13500\n    period  3600\n  </global_rate_limit>\n  <endpoint_rate_limit>\n    getVEP   750\n    getBulkVEP   750\n    getVariation   750\n  </endpoint_rate_limit>\n</Model::Documentation::Routes>\n```\n\n----------------------------------------\n\nTITLE: Configuring Highlight.js for BR Tags\nDESCRIPTION: Configuration example for using Highlight.js with BR tags instead of traditional pre/code blocks.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/root/static/js/highlight/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nhljs.configure({useBR: true});\n\n$('div.code').each(function(i, block) {\n  hljs.highlightBlock(block);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Ensembl REST API for Gene Information\nDESCRIPTION: This snippet demonstrates how to make a GET request to the Ensembl REST API to retrieve information about a specific gene. It uses the 'curl' command to send the request and includes headers for content type and Ensembl API version.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/qtl_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-type:application/json\" \\\n  'https://rest.ensembl.org/lookup/id/ENSG00000157764?content-type=application/json'\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection to Ensembl Database Using Registry\nDESCRIPTION: This function establishes connection to the Ensembl database using the Registry object. It sets up appropriate database handlers for core, variation, and other Ensembl resources based on the provided species and database arguments.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/species_tree_node_tag.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\nsub connect_to_DB {\n  my ($self, $species, $type) = @_;\n\n  # defaults\n  $species ||= $self->{_species_id};\n  $type    ||= 'core';\n  \n  # get registry\n  my $reg = 'Bio::EnsEMBL::Registry';\n  \n  # remember that we got this adaptor\n  $self->{_used_adaptors}->{$species}->{$type} = 1;\n  \n  # return the adaptor\n  my $dba;\n  \n  if(uc($type) eq 'CORE' || $type =~ /funcgen/i || $type =~ /variation/i) {\n    # If the species has been set on the object and is for multi.\n    # Overwrite the species here so multi adaptors are returned \n    # for standard access and not the species-specific ones\n    if ($species eq $self->{_species_id} && $species eq 'multi') {\n      $dba = $reg->get_DBAdaptor($species, $type);\n    }\n    # normal case, no interesting species ID to look for\n    else {\n      $dba = $reg->get_DBAdaptor($species, $type);\n    }\n  }\n  elsif(uc($type) eq 'VEGA') {\n    $dba = $reg->get_DBAdaptor($species, 'vega');\n  }\n  elsif(uc($type) =~ /COMPARA/) {\n    if(!$dba) {\n      $dba = $reg->get_DBAdaptor('multi', 'compara');\n    }\n  }\n  \n  # Did the adaptors get instantiated correctly?\n  if(!$dba && $type ne 'vega') {\n    my $dd = $reg->get_DBAdaptor('multi', 'ontology');\n    if ($dd) {\n      return [$dd];\n    }\n  }\n  \n  # Don't wrap an array inside an array\n  # reftype will report the type of ref it was, not what it is now\n  # without this, two successive calls to adaptor will wrap again\n  return $dba;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Virtual Host for Ensembl REST API\nDESCRIPTION: Apache configuration for setting up a virtual host for the Ensembl REST API. It defines server name, document root, and various Apache directives for handling requests.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/CAFE_gene_family.txt#2025-04-22_snippet_0\n\nLANGUAGE: Apache\nCODE:\n```\n<VirtualHost *:80>\n  ServerAdmin webmaster@localhost\n  ServerName rest.ensembl.org\n  DocumentRoot /ensembl/ensembl-rest/root\n\n  <Directory />\n    Options FollowSymLinks\n    AllowOverride None\n  </Directory>\n\n  <Directory /ensembl/ensembl-rest/root>\n    Options Indexes FollowSymLinks MultiViews\n    AllowOverride None\n    Order allow,deny\n    allow from all\n  </Directory>\n\n  <IfModule mod_rewrite.c>\n    RewriteEngine On\n    RewriteRule ^/static/(.*)$ /ensembl/ensembl-rest/root/static/$1 [L]\n    RewriteRule ^/favicon.ico$ /ensembl/ensembl-rest/root/static/favicon.ico [L]\n    RewriteRule ^/(.*)$ /ensembl/ensembl-rest/root/$1 [L]\n  </IfModule>\n\n  ErrorLog ${APACHE_LOG_DIR}/error.log\n  LogLevel warn\n  CustomLog ${APACHE_LOG_DIR}/access.log combined\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Implementing Experiment Source Endpoint in Ensembl REST API Perl\nDESCRIPTION: Creates an endpoint to retrieve information about experiment sources. The method accesses experiment adaptors, retrieves source information, and formats the response. It provides data about available experimental sources that can be used in other API calls.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/data_set.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\nsub source : Chained('experiment') PathPart('source') ActionClass('REST') { }\n\nsub source_GET {\n  my ( $self, $c ) = @_;\n\n  my @result;\n  for my $adaptor (@{$self->experiment_adaptors($c)}) {\n    push @result, {\n      name => $adaptor->db->species,\n      url => $adaptor->dbc->host . ':' . $adaptor->dbc->port . ':' . $adaptor->dbc->dbname\n    };\n  }\n\n  $self->status_ok($c, entity => \\@result);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Ensembl Perl libraries to PERL5LIB\nDESCRIPTION: Commands to add Ensembl API libraries to the PERL5LIB environment variable. This ensures that Perl can find all the required Ensembl modules when executing the REST server.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/ditag.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport PERL5LIB=$PERL5LIB:$HOME/src/ensembl/modules\nexport PERL5LIB=$PERL5LIB:$HOME/src/ensembl-compara/modules\nexport PERL5LIB=$PERL5LIB:$HOME/src/ensembl-variation/modules\nexport PERL5LIB=$PERL5LIB:$HOME/src/ensembl-funcgen/modules\nexport PERL5LIB=$PERL5LIB:$HOME/src/ensembl-rest/lib\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Database Connections in Perl\nDESCRIPTION: This snippet defines the database connections for the Ensembl REST API. It specifies the host, port, user, and password for different database types including core, variation, and funcgen.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/prediction_exon.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nsub connections {\n  my ($self) = @_;\n  my %args = (\n    -HOST => $self->o('ENSEMBL_REST_HOST'),\n    -PORT => $self->o('ENSEMBL_REST_PORT'),\n    -USER => $self->o('ENSEMBL_REST_USER'),\n    -PASS => $self->o('ENSEMBL_REST_PASS'),\n  );\n  return {\n    'DATABASE_CORE' => {\n      %args,\n      -DRIVER => 'mysql',\n      -GROUP  => 'core',\n    },\n    'DATABASE_VARIATION' => {\n      %args,\n      -DRIVER => 'mysql',\n      -GROUP  => 'variation',\n    },\n    'DATABASE_FUNCGEN' => {\n      %args,\n      -DRIVER => 'mysql',\n      -GROUP  => 'funcgen',\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets up rate limiting for the Ensembl REST API. It defines the number of requests allowed per second and the path to exempt from rate limiting.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/transcript_supporting_feature.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\n  # Rate limiter\n  service_limit => {\n    requests_per_second => 15,\n    exempt_path_regex => qr/^\\/(?:info|health|metrics|debug)\\/.*/,\n  },\n```\n\n----------------------------------------\n\nTITLE: Implementing Transcript Variant Mapping Endpoint in Perl\nDESCRIPTION: Defines an endpoint for mapping variation data to a transcript. The endpoint processes query parameters and validates them before retrieving variant information.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/dna_align_feature.txt#2025-04-22_snippet_6\n\nLANGUAGE: Perl\nCODE:\n```\nsub mapping : Chained('transcript') PathPart('mapping') Args(0) ActionClass('REST') {}\n\nsub mapping_GET {\n  my ($self, $c) = @_;\n  my $transcript = $c->stash()->{transcript};\n  my $variation_adaptor = $c->model('Registry')->get_adaptor(\n    $transcript->species, 'variation', 'variation');\n  if(! defined $variation_adaptor) {\n    my $en_name = $c->model('Registry')->get_alias($transcript->species, 'core');\n    Catalyst::Exception->throw(\"No variation database for species $en_name\");\n  }\n  \n  my $params = $c->req->params;\n  my $variant = $params->{variant};\n  my $version = $params->{version};\n  \n  $c->go('ReturnError', 'custom', [\"No variant given. Please specify a variant\"])\n    unless $variant;\n    \n  my $data = $c->model('VariationTranscript')->get_variation_mappings_for_transcript(\n    $transcript, $variant, $version);\n    \n  $self->status_ok($c, entity => $data);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ensembl REST API Development Environment\nDESCRIPTION: Shell script for setting up a local development environment for the Ensembl REST API. It clones necessary repositories, sets environment variables, and starts the server.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/qtl_feature.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/bash\n\n# Clone necessary repositories\ngit clone https://github.com/Ensembl/ensembl.git\ngit clone https://github.com/Ensembl/ensembl-variation.git\ngit clone https://github.com/Ensembl/ensembl-funcgen.git\ngit clone https://github.com/Ensembl/ensembl-compara.git\ngit clone https://github.com/Ensembl/ensembl-io.git\n\n# Set environment variables\nexport PERL5LIB=\\\n$PWD/ensembl/modules:\\\n$PWD/ensembl-variation/modules:\\\n$PWD/ensembl-funcgen/modules:\\\n$PWD/ensembl-compara/modules:\\\n$PWD/ensembl-io/modules:\\\n$PWD/lib\n\n# Start the server\nplackup -p 3000 -r bin/production/ensembl-rest.psgi\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Database Connections in Perl\nDESCRIPTION: This snippet defines the database connection settings for the Ensembl REST API. It specifies the host, port, and user for connecting to the MySQL database.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/misc_feature_misc_set.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n    user     admin\n    host     localhost\n    port     3306\n    driver   mysql\n```\n\n----------------------------------------\n\nTITLE: Starting the Ensembl REST API Server\nDESCRIPTION: Commands to start the Ensembl REST API server using the Starman PSGI web server. These commands specify the host, port, and worker processes configuration.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/map.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ensembl-rest\nstartup.pl\n```\n\n----------------------------------------\n\nTITLE: Querying Analysis Configuration Table in SQL\nDESCRIPTION: This SQL query retrieves all columns from an analysis configuration table. It includes various parameters for different bioinformatics tools used in genomic and proteomic analysis, such as BLAST, Exonerate, and various protein annotation tools.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/analysis.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM analysis_configuration_table WHERE analysis_id BETWEEN 8275 AND 8359;\n```\n\n----------------------------------------\n\nTITLE: Accessing Ensembl REST API Using curl\nDESCRIPTION: Command-line example showing how to use curl to access the Ensembl REST API. This demonstrates making a GET request with appropriate headers to retrieve data in JSON format.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/associated_xref.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -H \"Content-type:application/json\" 'https://rest.ensembl.org/overlap/region/human/7:140424943-140624564?feature=gene;feature=transcript;feature=cds;feature=exon'\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Server in Perl\nDESCRIPTION: This code snippet defines the configuration for the Ensembl REST API server. It specifies server settings, plugins, database connections, and various other parameters for the API's functionality.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/unconventional_transcript_association.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  default_view => 'HTML',\n  using_frontend_proxy => 1,\n  service_name => 'Ensembl REST API',\n  service_logo => 'ensembl_logo.png',\n  service_parent_url => 'https://www.ensembl.org',\n  strict_content_type => 1,\n  log_dir => '$HOME/logs/ensrest',\n  \n  # Disable compression of json objects. Has sometimes caused content length errors\n  # enable_jsonp => 1,\n  \n  # Enable CORS on GET requests\n  <Controller::Root>\n    action_cache_duration '0'\n  </Controller::Root>\n  \n  <Controller::Lookup>\n    action_cache_duration '0'\n  </Controller::Lookup>\n  \n  <Controller::Sequence>\n    action_cache_duration '0'\n  </Controller::Sequence>\n\n  enable_cors => 1,\n  \n  <Plugin::Cache>\n    <backend>\n      class = CHI\n      driver = Memory\n      global = 1\n    </backend>\n  </Plugin::Cache>\n\n  jsonp_callback_key         => 'callback',\n  doc_root_path => 'https://www.ensembl.org/info/docs/api/rest',\n  spec_root_path => 'https://raw.githubusercontent.com/Ensembl/ensembl-rest/master/root/documentation',\n\n  <Model::Registry>\n    ###### Database settings\n  </Model::Registry>\n\n  <Model::Documentation>\n    paths = [root/documentation]\n    hide_schema = 1\n    #Adding references to internal documentation\n    <includes>\n      ID_SET = /documentation/info.json\n      compara = /documentation/compara.json\n    </includes>\n  </Model::Documentation>\n  \n  <Plugin::Static::Simple>\n    include_path = [ 'root/static', 'root/img', 'root/documentation' ]\n    ignore_extensions = [ qw/tmpl tt tt2 html yml json/ ]\n  </Plugin::Static::Simple>\n\n  <Model::Lookup>\n    lookup_as_registry = 0\n  </Model::Lookup>\n\n  <Model::Variation>\n    use_vcf    1\n    vcf_config {\n      collections {\n        homo_sapiens {\n          37 1000genomes_phase1\n          38 1000genomes_phase3\n        }\n      }\n      valid_chromosomes [[ 1 .. 22 ], ['X', 'Y']]\n      dir            /path/to/dir\n      enable_req_over_limit 1\n    }\n    var_config {\n      max_post_variations 999\n      max_post_regions 999\n    }\n  </Model::Variation>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections for ensembl-rest in Perl\nDESCRIPTION: This snippet defines database connection parameters for different Ensembl databases. It specifies host, port, user, and pass for each database type, allowing the application to connect to the required data sources.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/transcript_intron_supporting_evidence.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\nsub databases {\n  my $self = shift;\n  return {\n    %{$self->Catalyst::Plugin::ConfigLoader::Config->{Model}->{Registry}->{connection_params}},\n    ensembl => {\n      host => 'mysql-eg-publicsql.ebi.ac.uk',\n      port => 4157,\n      user => 'anonymous',\n      pass => '',\n    },\n    ensembl_genomes => {\n      host => 'mysql-eg-publicsql.ebi.ac.uk',\n      port => 4157,\n      user => 'anonymous',\n      pass => '',\n    },\n    ensembl_website => {\n      host => 'mysql-eg-publicsql.ebi.ac.uk',\n      port => 4157,\n      user => 'anonymous',\n      pass => '',\n    },\n    ensembl_archive => {\n      host => 'mysql-eg-publicsql.ebi.ac.uk',\n      port => 4157,\n      user => 'anonymous',\n      pass => '',\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Parameters for Genomic Endpoint Testing in Perl\nDESCRIPTION: This Perl configuration block sets up parameters for testing genomic endpoints in the Ensembl REST API. It includes test settings for various endpoints including gene, lookup, and genomic data retrieval with specific test cases for different species.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/data_file.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n{\n  # Test configs\n  'strict'      => 1,                 # Make the test harness very intolerant of warnings\n  'restart'     => 0,                 # No need to restart with this config\n  'user_agent'  => { agent => 'Test', contact => 'test@ensembl.org', }\n  'lookup'     => [\n    { 'id' => 'ENSG00000176515', species => 'homo_sapiens', response => { id => 'ENSG00000176515', version => 1, species => 'homo_sapiens', 'object_type' => 'Gene', db_type => 'core', } },\n    { 'id' => 'ENSP00000288602', species => 'homo_sapiens', response => { id => 'ENSP00000288602', version => 1, species => 'homo_sapiens', 'object_type' => 'Translation', db_type => 'core', } },\n    { 'id' => 'CCDS5863.1', object => 'transcript', response => { id => 'ENST00000315216', version => 1, species => 'homo_sapiens', 'object_type' => 'Transcript', db_type => 'core' } },\n    { 'id' => 'ENSG00000176515', format => 'full', response => { id => 'ENSG00000176515', version => 1, species => 'homo_sapiens', 'object_type' => 'Gene', db_type => 'core', source => 'ensembl', biotype => 'protein_coding', external_name => 'CT009', display_name => 'CT009', strand => -1, assembly_name => 'GRCh37', description => 'Cancer/testis antigen 9 [Source:HGNC Symbol;Acc:24703]'} },\n    { 'id' => 'ASMP', format => 'condensed', species => 'homo_sapiens', response => { id => 'ENSG00000171124', version => 1, species => 'homo_sapiens', 'object_type' => 'Gene', db_type => 'core', display_name => 'ASMP'} },\n    { 'id' => 'ASMP', format => 'full', species => 'homo_sapiens', response => { id => 'ENSG00000171124', version => 1, species => 'homo_sapiens', 'object_type' => 'Gene', db_type => 'core', source => 'ensembl', biotype => 'protein_coding', external_name => 'ASMP', display_name => 'ASMP', strand => -1, assembly_name => 'GRCh37', description => 'acid sphingomyelinase-like phosphodiesterase [Source:HGNC Symbol;Acc:18860]'} },\n    { 'id' => 'homo_sapiens', format => 'condensed', response => { id => 'homo_sapiens', species => 'homo_sapiens', 'object_type' => 'Bio::EnsEMBL::Compara::NCBITaxon', db_type => 'compara', display_name => 'homo_sapiens' } },\n\n    # External DB tests\n    { id => 'GO:0005667', db_type => 'core', species => 'homo_sapiens', format => 'full', response => { id => 'GO:0005667', db_type => 'core', species => 'homo_sapiens', object_type => 'Gene', version => undef, description => 'transcription factor complex', display_name => 'GO:0005667' } },\n    { id => 'GO:0005667', db_type => 'core', species => 'homo_sapiens', object_type => 'Transcript', format => 'full', response => { id => 'GO:0005667', db_type => 'core', species => 'homo_sapiens', object_type => 'Transcript', version => undef, description => 'transcription factor complex', display_name => 'GO:0005667' } },\n\n    # ID which can be found in the otherfeatures DB, the core test will not find anything\n    {id => 'NM_001195597.1', db_type => 'otherfeatures', species => 'homo_sapiens', response => { id => 'NM_001195597.1', db_type => 'otherfeatures', species => 'homo_sapiens', object_type => 'Transcript', version => 1 } },\n\n    # ENSEMBL Gene ID with multiple versions\n    { id => 'ENSG00000157764', expansion => 'translations', format => 'condensed', species => 'homo_sapiens', response => { id => 'ENSG00000157764', version => 5, object_type => 'Gene', translations => [ { id => 'ENSP00000288602', version => 1 }, ], db_type => 'core', species => 'homo_sapiens', display_name => 'BRAF'  } },\n\n    # Gene stable ID mapped to transcript stable ID\n    { id => 'ENSG00000157764', all_levels => 1, response => { id => 'ENSG00000157764', version => 5, object_type => 'Gene', species => 'homo_sapiens', db_type => 'core'} },\n    { id => 'ENST00000497897', species => 'homo_sapiens', format => 'condensed', response => { id => 'ENST00000497897', version => 1, species => 'homo_sapiens', object_type => 'Transcript', display_name => 'BRAF-001', db_type => 'core' } },\n  ],\n  'gene' => [\n    { 'id' => 'ENSG00000176515', response => { seq_region_name => '19', description => 'Cancer/testis antigen 9 [Source:HGNC Symbol;Acc:24703]' }},\n    { 'id' => 'ENSG00000176515', 'content-type' => 'application/json', response => { seq_region_name => '19', description => 'Cancer/testis antigen 9 [Source:HGNC Symbol;Acc:24703]' }},\n    { 'id' => 'ENSG00000176515', 'content-type' => 'text/x-gff3', response_regex => 'ID=gene:ENSG00000176515;Name=CT009;biotype=protein_coding;description=Cancer/testis\\ antigen\\ 9\\ %5BSource:HGNC\\ Symbol;Acc:24703%5D;gene_id=ENSG00000176515;logic_name=ensembl;version=1' },\n    { 'id' => 'ENSG00000176515', 'content-type' => 'text/x-gff3', 'gff_format' => '1', response_regex => 'name \"CT009\"; transcripts (.*); description \"Cancer/testis antigen 9 \\[Source:HGNC Symbol;Acc:24703\\]\";' },\n\n    # ID endpoint with expanded content\n    { id => 'ENSG00000157764', full => 1, response => { id => 'ENSG00000157764', version => 5, species => 'homo_sapiens', object_type => 'Gene', db_type => 'core', source => 'ensembl', biotype => 'protein_coding', external_name => 'BRAF', display_name => 'BRAF', strand => -1, assembly_name => 'GRCh37' } },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Ensembl REST API with Perl LWP::UserAgent\nDESCRIPTION: Example of using Perl's LWP::UserAgent to connect to the Ensembl REST API. This code creates a user agent with proper HTTP headers and demonstrates how to make a request to the API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/assembly.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nuse strict;\nuse warnings;\nuse LWP::UserAgent;\n\nmy $server = 'https://rest.ensembl.org';\nmy $ext = '/info/ping';\nmy $response = get_endpoint($server.$ext);\n\nsub get_endpoint {\n  my ($endpoint) = @_;\n  my $user_agent = LWP::UserAgent->new();\n  $user_agent->agent('MyAgent');\n  my $request  = HTTP::Request->new(GET => $endpoint);\n  $request->headers->header('Content-Type' => 'application/json');\n  my $response = $user_agent->request($request);\n  \n  if ($response->is_success) {\n    return $response->content;\n  }\n  else {\n    return $response->status_line;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gene Sequences with curl\nDESCRIPTION: A shell command to fetch the genomic sequence for a specific human gene (BRCA2) using the Ensembl REST API. It uses the /sequence/id endpoint with parameters to retrieve the sequence in FASTA format.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/protein_feature.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET \"https://rest.ensembl.org/sequence/id/ENSG00000139618?content-type=text/x-fasta;type=cds\"\n```\n\n----------------------------------------\n\nTITLE: Testing the API Installation\nDESCRIPTION: Command to test if the Ensembl REST API server is running correctly by requesting the species list endpoint using curl. This verifies basic functionality of the API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/map.txt#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-type:application/json\" http://localhost:3000/species\n```\n\n----------------------------------------\n\nTITLE: Querying COSMIC Database for Variant IDs in Perl\nDESCRIPTION: This function queries the COSMIC database to retrieve variant IDs corresponding to a mutation ID. It handles database connections and properly formats the query results for use in the VEP pipeline.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/karyotype.txt#2025-04-22_snippet_3\n\nLANGUAGE: perl\nCODE:\n```\nsub _get_cosmic_variant_ids {\n  my ($self, $c, $id) = @_;\n  my $db = $c->model('Registry')->get_DBAdaptor('homo_sapiens', 'cosmic');\n  unless($db) {\n    Catalyst::Exception->throw(\"COSMIC database unavailable\");\n  }\n  my $cosmic_sth = $db->dbc->prepare(<<SQL);\n  SELECT distinct(var.name)\n  FROM     phenotype_feature pf, phenotype p, variation var, source s\n  WHERE    pf.phenotype_id = p.phenotype_id\n  AND      p.name = ?\n  AND      pf.object_id = var.name\n  AND      var.name like 'COSV%'\n  AND      pf.source_id = s.source_id\n  AND      s.name = 'COSMIC'\nSQL\n  \n  $cosmic_sth->execute(\"COSM$id\");\n  my $cosmic_id_string = join(\",\", map { $_->[0] } @{$cosmic_sth->fetchall_arrayref()});\n  \n  return $cosmic_id_string;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Ensembl Git Repositories\nDESCRIPTION: Commands to clone the necessary Ensembl Git repositories needed for the REST API functionality. These repositories contain the core API and web code.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/map.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Ensembl/ensembl.git\ngit clone https://github.com/Ensembl/ensembl-rest.git\ngit clone https://github.com/Ensembl/ensembl-io.git\ngit clone https://github.com/Ensembl/ensembl-funcgen.git\ngit clone https://github.com/Ensembl/ensembl-variation.git\ngit clone https://github.com/Ensembl/ensembl-compara.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Settings for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets up caching options for the Ensembl REST API. It configures CHI caching with file-based storage and specifies cache expiration times.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/supporting_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\nsub cache {\n  my ($self) = @_;\n  my $cache = {\n    %$CACHE,\n    driver => 'CHI',\n    root_dir => $self->cache_root_dir(),\n    namespace => 'endpoint',\n    default_time => '6 hours',\n  };\n  return $cache;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections for Ensembl REST API in Perl\nDESCRIPTION: This snippet defines the database connections for the Ensembl REST API. It specifies the driver, host, port, user, and password for connecting to the Ensembl databases.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/operon_transcript_gene.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  driver => 'mysql',\n  host   => 'ensembldb.ensembl.org',\n  port   => 5306,\n  user   => 'anonymous',\n  pass   => '',\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Transcript Information Request from Ensembl API\nDESCRIPTION: This JSON response contains detailed information about a specific transcript, including its parent gene, biotype, coding regions, exon count, and sequence locations.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/analysis.txt#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Parent\": \"ENSG00000157764\",\n  \"source\": \"ensembl_havana\",\n  \"object_type\": \"Transcript\",\n  \"id\": \"ENST00000342066\",\n  \"display_name\": \"BRAF-201\",\n  \"species\": \"homo_sapiens\",\n  \"biotype\": \"protein_coding\",\n  \"strand\": -1,\n  \"seq_region_name\": \"7\",\n  \"start\": 140719327,\n  \"end\": 140924764,\n  \"is_canonical\": 1,\n  \"Translation\": {\n    \"id\": \"ENSP00000288602\",\n    \"start\": 188,\n    \"end\": 2438,\n    \"length\": 766\n  },\n  \"version\": 8,\n  \"ccds\": [\n    \"CCDS5863\"\n  ],\n  \"Logic_name\": \"ensembl_havana_transcript_homo_sapiens\",\n  \"exon_structure\": {\n    \"exon_id_list\": [\n      \"ENSE00001891664\",\n      \"ENSE00000939162\",\n      \"ENSE00001184026\",\n      \"ENSE00000939163\",\n      \"ENSE00000939164\",\n      \"ENSE00003688032\",\n      \"ENSE00003594817\",\n      \"ENSE00001723882\",\n      \"ENSE00003484844\",\n      \"ENSE00001641191\",\n      \"ENSE00001656138\",\n      \"ENSE00003539346\",\n      \"ENSE00001723852\",\n      \"ENSE00001668495\",\n      \"ENSE00001776672\",\n      \"ENSE00001723840\",\n      \"ENSE00001776670\",\n      \"ENSE00001723833\"\n    ],\n    \"exon_count\": 18\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Ensembl REST API\nDESCRIPTION: Docker Compose configuration file defining the services needed to run the Ensembl REST API, including the web service with port mapping and environment variables.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/external_synonym.txt#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - ENSEMBL_REST_CONFIG=/opt/ensembl-rest/configurations/production/ensrest.conf\n      - ENSEMBL_REST_PORT=3000\n```\n\n----------------------------------------\n\nTITLE: Defining API Version and Deprecated Versions for ensembl-rest in Perl\nDESCRIPTION: This snippet sets the current API version and lists deprecated versions. It helps manage API versioning and informs clients about outdated versions that should no longer be used.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/transcript_intron_supporting_evidence.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nsub api_info {\n  my $self = shift;\n  return {\n    version => 17,\n    deprecated => [qw/1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16/],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Testing taxonomy classification endpoint in Ensembl REST API with Perl\nDESCRIPTION: This test verifies the '/taxonomy/classification' endpoint which returns the taxonomic classification hierarchy for a species. It ensures the endpoint returns the correct classification ancestors in the expected order.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/external_db.txt#2025-04-22_snippet_11\n\nLANGUAGE: perl\nCODE:\n```\n  # Taxonomy classification endpoint\n  {\n    my $taxon_id = 9606;\n    my $taxonomy_json = RestHelper->get_json(\"taxonomy/classification/$taxon_id\");\n    cmp_ok(scalar(@{$taxonomy_json}), '>', 20, 'Got back at least 20 ancestors');\n    ok((grep { $_->{id} == 9606 } @{$taxonomy_json}), 'Expected taxon id found');\n    ok((grep { $_->{id} == 1 } @{$taxonomy_json}), 'Root taxon id found');\n    my @scinames = map { $_->{scientific_name} } @{$taxonomy_json};\n    ok((grep { $_ eq 'Homo sapiens' } @scinames), 'Homo sapiens found');\n    ok((grep { $_ eq 'Mammalia' } @scinames), 'Mammalian class found');\n    ok((grep { $_ eq 'Chordata' } @scinames), 'Chordata phylum found');\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets up the logging configuration for the Ensembl REST API. It specifies the log level, log file path, and log file rotation settings.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/dnac.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  log4perl => {\n    category_name => 'root',\n    file => {\"___path_to(log-dir)___/rest.log\"},\n    layout => '%d %p %c %m%n',\n    log_level => 'warn',\n    is_component => 1,\n    \n    appender => {\n      dailyroll => {\n        layout   => 'Log::Log4perl::Layout::PatternLayout',\n        threshold => 'ALL',\n        warp_message => 0,\n        filename  => \"___path_to(log-dir)___/rest.log\",\n        mode      => 'append',\n        maxlevel  => 'OFF',\n        class     => 'Log::Dispatch::File::Rolling',\n        autoflush => 1,\n        \n        DatePattern => \"yyyy-MM-dd\",\n        max => 90\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example from Ensembl REST Search Endpoint\nDESCRIPTION: Example JSON response from the Ensembl REST API search endpoint. Shows the structure of returned data including pagination information and search results with their metadata.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/meta_coord.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hits\" : [\n    {\n      \"source\" : \"gene\",\n      \"id\" : \"ENSG00000139618\",\n      \"species\" : \"homo_sapiens\",\n      \"featuretype\" : \"Gene\",\n      \"description\" : \"breast cancer 2, early onset [Source:HGNC Symbol;Acc:1101]\"\n    },\n    {\n      \"source\" : \"gene\",\n      \"id\" : \"ENSMUSG00000041147\",\n      \"species\" : \"mus_musculus\",\n      \"featuretype\" : \"Gene\",\n      \"description\" : \"breast cancer 2 [Source:MGI Symbol;Acc:MGI:109000]\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Perl Dependencies with cpanm\nDESCRIPTION: Command to install Perl dependencies required by the Ensembl REST API using the cpanm tool, which retrieves the necessary modules listed in the cpanfile.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/map.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ensembl-rest\ncpanm --installdeps .\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Endpoints in Ensembl REST API\nDESCRIPTION: This Perl code defines the REST endpoints for feature-related operations. It specifies the routes, parameters, and documentation for each endpoint in the Ensembl REST API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature.txt#2025-04-22_snippet_11\n\nLANGUAGE: perl\nCODE:\n```\npackage EnsEMBL::REST::Controller::Feature;\n\nuse Moose;\nuse namespace::autoclean;\nuse Try::Tiny;\nuse Bio::EnsEMBL::Utils::Scalar qw/wrap_array/;\n\nrequires 'lookup';\n\nwith 'EnsEMBL::REST::Role::Content';\n\n__PACKAGE__->meta->make_immutable;\n```\n\n----------------------------------------\n\nTITLE: Running Ensembl REST API Tests with Prove\nDESCRIPTION: Command to run the test suite for the Ensembl REST API using the prove utility, specifying the t/ directory with the verbose flag.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/external_synonym.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nprove -l t\n```\n\n----------------------------------------\n\nTITLE: Enabling Cache in Catalyst Configuration\nDESCRIPTION: Configuring the cache module in a Catalyst-based application by setting the relevant parameters in the YML configuration file.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/dnac.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\n<cache>\n  <backends>\n    <memcached>\n      class Catalyst::Plugin::Cache::Backend::Memcached\n      servers 127.0.0.1:11211\n      debug 0\n      # The amount of time to keep items in the cache in seconds\n      expires 2592000\n    </memcached>\n  </backends>\n</cache>\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection Configuration for Ensembl REST API\nDESCRIPTION: Database configuration for the Ensembl REST API, defining MySQL connection parameters, port settings, and database user credentials for accessing Ensembl databases in a production environment.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/species_tree_root.txt#2025-04-22_snippet_3\n\nLANGUAGE: perl\nCODE:\n```\n{\n  host => 'mysql-host-1',\n  port => 3306,\n  user => 'anonymous',\n  verbose => 0,\n  timeout => 0,\n  database => {\n    homo_sapiens => {\n      core => 'homo_sapiens_core_70_37',\n      otherfeatures => 'homo_sapiens_otherfeatures_70_37',\n      variation => 'homo_sapiens_variation_70_37',\n      funcgen => 'homo_sapiens_funcgen_70_37'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Ensembl VEP API Endpoint\nDESCRIPTION: This JSON response shows the variant effect prediction results from the Ensembl VEP API. It includes detailed information about the variant's impact on various transcripts, consequences, and protein-level changes.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/analysis.txt#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"seq_region_name\": \"7\",\n    \"assembly_name\": \"GRCh38\",\n    \"strand\": 1,\n    \"input\": \"7 140453136 140453136 A/T 1\",\n    \"most_severe_consequence\": \"intron_variant\",\n    \"variant_allele\": \"T\",\n    \"allele_string\": \"A/T\",\n    \"start\": 140453136,\n    \"end\": 140453136,\n    \"transcript_consequences\": [\n      {\n        \"variant_allele\": \"T\",\n        \"consequence_terms\": [\n          \"downstream_gene_variant\"\n        ],\n        \"distance\": 1453,\n        \"biotype\": \"protein_coding\",\n        \"strand\": -1,\n        \"gene_id\": \"ENSG00000267825\",\n        \"gene_symbol\": \"AC022905.2\",\n        \"transcript_id\": \"ENST00000586308\",\n        \"impact\": \"MODIFIER\"\n      },\n      {\n        \"variant_allele\": \"T\",\n        \"consequence_terms\": [\n          \"intron_variant\"\n        ],\n        \"biotype\": \"protein_coding\",\n        \"strand\": -1,\n        \"gene_id\": \"ENSG00000157764\",\n        \"gene_symbol\": \"BRAF\",\n        \"gene_symbol_source\": \"HGNC\",\n        \"transcript_id\": \"ENST00000288602\",\n        \"impact\": \"MODIFIER\",\n        \"intron\": \"6/17\"\n      },\n      {\n        \"variant_allele\": \"T\",\n        \"consequence_terms\": [\n          \"intron_variant\",\n          \"NMD_transcript_variant\"\n        ],\n        \"biotype\": \"nonsense_mediated_decay\",\n        \"strand\": -1,\n        \"gene_id\": \"ENSG00000157764\",\n        \"gene_symbol\": \"BRAF\",\n        \"gene_symbol_source\": \"HGNC\",\n        \"transcript_id\": \"ENST00000479537\",\n        \"impact\": \"MODIFIER\",\n        \"intron\": \"1/8\"\n      },\n      {\n        \"variant_allele\": \"T\",\n        \"consequence_terms\": [\n          \"intron_variant\"\n        ],\n        \"biotype\": \"protein_coding\",\n        \"strand\": -1,\n        \"gene_id\": \"ENSG00000157764\",\n        \"gene_symbol\": \"BRAF\",\n        \"gene_symbol_source\": \"HGNC\",\n        \"transcript_id\": \"ENST00000496384\",\n        \"impact\": \"MODIFIER\",\n        \"intron\": \"1/8\"\n      },\n      {\n        \"variant_allele\": \"T\",\n        \"consequence_terms\": [\n          \"downstream_gene_variant\"\n        ],\n        \"distance\": 3401,\n        \"biotype\": \"lncRNA\",\n        \"strand\": 1,\n        \"gene_id\": \"ENSG00000286022\",\n        \"gene_symbol\": \"AC092794.3\",\n        \"transcript_id\": \"ENST00000664592\",\n        \"impact\": \"MODIFIER\"\n      },\n      {\n        \"variant_allele\": \"T\",\n        \"consequence_terms\": [\n          \"intron_variant\"\n        ],\n        \"biotype\": \"protein_coding\",\n        \"strand\": -1,\n        \"gene_id\": \"ENSG00000157764\",\n        \"gene_symbol\": \"BRAF\",\n        \"gene_symbol_source\": \"HGNC\",\n        \"transcript_id\": \"ENST00000644969\",\n        \"impact\": \"MODIFIER\",\n        \"intron\": \"6/17\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Ensembl REST Search Endpoint with Species Filter\nDESCRIPTION: An example of searching the Ensembl REST API with a species filter parameter. This request searches for 'BRCA2' but limited to human (homo_sapiens) results only.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/meta_coord.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'https://rest.ensembl.org/search/BRCA2?species=homo_sapiens' -H 'Content-type:application/json'\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Server in Perl\nDESCRIPTION: This configuration sets up various parameters for the Ensembl REST API server, including database connections, logging, and caching options. It defines the species available, database connection details, and server-specific settings.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/CAFE_species_gene.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  default_view => 'HTML',\n\n  service_name => 'Ensembl REST API',\n  service_logo => 'ensembl_logo.png',\n  service_parent_url => 'https://www.ensembl.org',\n  \n  # Model to use for connecting to compara\n  # Supports anything that implements the Compara::PipeConfig::GetDnaFragRegionAlignment API\n  compara_models => [\n    'RegulationDnaFragRegionAlignment',\n    'DnaFragRegionAlignment'\n  ],\n\n  # The following values are required for HTTP caching to work correctly\n  expires => 4 * 60 * 60, # 4 hours\n\n  # This is used by Catalyst::Restarter in dev. mode but has no effect in production\n  watch_dirs => [ 'root' ],\n\n  # Plug in the appropriate DBConn helper\n  db_adaptor => 'Bio::EnsEMBL::LookUp::DBAdaptor',\n  db_adaptors => [\n    Bio::EnsEMBL::LookUp::Database::WebDBAdaptor->new('homo_sapiens'),\n    Bio::EnsEMBL::LookUp::Database::WebDBAdaptor->new('mus_musculus'),\n    Bio::EnsEMBL::LookUp::Database::WebDBAdaptor->new('danio_rerio'),\n  ],\n\n  # Enable CORS for all origins\n  <map>\n    <cors>\n      allow_origin = *\n      allow_methods = GET OPTIONS\n    </cors>\n  </map>\n\n  # Enable compression for all responses\n  <map>\n    <response>\n      providers => [\n        'Gzip'\n      ]\n    </response>\n  </map>\n\n  # Logging configuration\n  <log4perl>\n    config = <<EOCONF\n      log4perl.logger = WARN, Screen\n      log4perl.appender.Screen = Log::Log4perl::Appender::Screen\n      log4perl.appender.Screen.layout = SimpleLayout\nEOCONF\n  </log4perl>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Types for ensembl-rest API Responses in Perl\nDESCRIPTION: This snippet defines the content types supported by the API for different response formats. It specifies MIME types for JSON, XML, and YAML responses, ensuring proper content negotiation with API clients.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/transcript_intron_supporting_evidence.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\nsub content_types {\n  my $self = shift;\n  return {\n    'default'   => 'application/json',\n    'text/html'        => undef,\n    'text/plain'       => undef,\n    'application/json' => 'EnsEMBL::REST::Serialiser::JSON',\n    'application/xml'  => 'EnsEMBL::REST::Serialiser::XML',\n    'text/xml'         => 'EnsEMBL::REST::Serialiser::XML',\n    'application/yaml' => 'EnsEMBL::REST::Serialiser::YAML',\n    'text/yaml'        => 'EnsEMBL::REST::Serialiser::YAML',\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Server in Perl\nDESCRIPTION: This snippet defines the configuration for the Ensembl REST API server. It sets up database connections, caching options, and logging settings. The configuration uses the Catalyst framework and includes various plugins and middleware.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/interpro.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  using_frontend_proxy => 1,\n  connection_is_secure => 0,\n\n  service_name => 'Ensembl REST API',\n  service_logo => 'ensembl_logo.png',\n  service_parent_url => 'https://www.ensembl.org',\n  copyright_footer => '<p class=\"center\">\\&#169; 20XX <a href=\"https://www.ebi.ac.uk\">EMBL-EBI<\\/a><\\/p>',\n\n  use_mysql => 1,\n  species => [],\n\n  # Plug in 'log4perl' implementation:\n  log4perl_cnf => '/path/to/log4perl.config',\n  # Config dir:\n  config_file => '/path/to/myapp.conf',\n\n  # Enable CORS for all responses\n  <Plugin::DOD>\n    only => ''\n  <\\/Plugin::DOD>\n\n  <Plugin::Cache>\n    <backend>\n      class = CHI\n      driver = Memory\n      global = 1\n    <\\/backend>\n  <\\/Plugin::Cache>\n\n  <Model::Registry>\n    host = mydb.mysql.example.com\n    port = 3306\n    user = username\n    pass = password\n    version = 95\n  <\\/Model::Registry>\n\n  <Model::Lookup>\n    index = /path/to/mime.index\n    assembly_map = /path/to/assembly_map.json\n  <\\/Model::Lookup>\n\n  <Model::Documentation>\n    paths = ['/path/to/root/dir/ensembl-rest/root']\n    extn = '.psgi'\n  <\\/Model::Documentation>\n\n  <Controller::Archive>\n    no_compara_databases = 0\n  <\\/Controller::Archive>\n\n  <Plugin::Static::Simple>\n    include_path = [ __path_to(root/static)__ ]\n    ignore_extensions = [ htm, html, xhtml ]\n  <\\/Plugin::Static::Simple>\n\n  <SpeciesLookup>\n    multi_species_index = /path/to/multi_species_index\n  <\\/SpeciesLookup>\n\n  enable_schema_caching = 1\n\n  <Model::VariationLookup>\n    dir = /path/to/variation_lookup_dir\n  <\\/Model::VariationLookup>\n\n  <Controller::Phenotype>\n    ontology_prefix = http://purl.obolibrary.org/obo\n    # Ontology version\n    ontology_version = 4.5\n    ontology = /path/to/efo.owl\n  <\\/Controller::Phenotype>\n\n  jsonp = 0\n\n  <Controller::Sequence>\n    limit => 1e7\n  <\\/Controller::Sequence>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Compression Settings in Perl\nDESCRIPTION: This snippet sets up the compression options for the Ensembl REST API server. It enables Gzip compression for responses and defines the minimum size for compression to be applied.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/data_file.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\n    # Compression\n    enable_compression => 1,\n    compression_minimum => 1000, # Only compress outputs larger than 1KB\n```\n\n----------------------------------------\n\nTITLE: Installing Ensembl REST API dependencies with CPAN\nDESCRIPTION: Alternative command to install Perl dependencies for the Ensembl REST API using the CPAN shell. This is provided as an alternative to cpanm for installing required dependencies.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/ditag.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nperl -MCPAN -e 'install Bundle::CPAN'\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Display for Ensembl REST API in Perl\nDESCRIPTION: This code demonstrates how to configure the documentation display settings for the Ensembl REST API. It includes options for showing/hiding endpoints, configuring example values, and setting up the API version information.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/marker.txt#2025-04-22_snippet_5\n\nLANGUAGE: perl\nCODE:\n```\nDocumentation:\n  # Hide endpoints that are not fully formed or likely to see major breaking\n  # changes in the future\n  hide_endpoints: []\n  # Example objects to use in REST json responses, used in place of 'OBJECT' and 'SPECIES'\n  # placeholders in the documentation schema strings. \n  # Some defaults will be provided but documentation renderers should \n  # not depend on these being present.\n  example_objects:\n    # ID: Value\n    biotype: protein_coding\n    format: full\n    symbol: BRCA2\n    id: ENSG00000139618\n    species: homo_sapiens\n    division: ensembl\n    genome: genome\n    phenotype_source: omia\n    target_taxon: insects\n    source_taxon: plants\n    stable_id_type: gene\n    feature: transcript\n    so_term: transcript\n    # For the variation endpoints\n    variant_id: rs116035550\n    phenotype_id: EFO:0003761\n  info:\n    version: 1\n```\n\n----------------------------------------\n\nTITLE: Initializing Transcript REST Endpoint in Perl\nDESCRIPTION: Sets up the base transcript endpoint that will match /transcript/{id} and handle various operations related to transcript data. This defines the routing structure for the controller.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/dna_align_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\nsub transcript_GET {};\n\nsub transcript : Chained('/') PathPart('transcript') CaptureArgs(1) {\n  my ( $self, $c, $id ) = @_;\n  $c->stash->{transcript_id} = $id;\n}\n```\n\n----------------------------------------\n\nTITLE: Content Type Mapping Function in Perl for REST API\nDESCRIPTION: Function that maps content type strings to file extension references for the Ensembl REST API. It takes a content type string and returns the corresponding file extension (txt, json, xml, etc.) to facilitate content type handling in HTTP responses.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/unconventional_transcript_association.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nsub map_content_type {\n  my ($class, $content_type) = @_;\n  my $mapped_type = $content_type;\n  \n  # Convert things like application/json; charset=UTF-8 to application/json\n  if(index($mapped_type, ';') > -1) {\n    my @bits = split(/;/, $mapped_type);\n    $mapped_type = $bits[0];\n  }\n  \n  my $extension = 'txt';\n  $extension = 'json' if $mapped_type eq 'application/json';\n  $extension = 'xml' if $mapped_type eq 'text/xml';\n  $extension = 'xml' if $mapped_type eq 'application/xml';\n  $extension = 'yaml' if $mapped_type eq 'text/x-yaml';\n  $extension = 'seqxml' if $mapped_type eq 'text/x-seqxml+xml';\n  $extension = 'orthoxml' if $mapped_type eq 'text/x-orthoxml+xml';\n  $extension = 'phyloxml' if $mapped_type eq 'text/x-phyloxml+xml';\n  $extension = 'nh' if $mapped_type eq 'text/x-nh';\n  $extension = 'fasta' if $mapped_type eq 'text/x-fasta';\n  $extension = 'gff3' if $mapped_type eq 'text/x-gff3';\n  $extension = 'bed' if $mapped_type eq 'text/x-bed';\n  \n  return $extension;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Docker Image\nDESCRIPTION: This Dockerfile sets up the environment for running the Ensembl REST API. It installs necessary dependencies, configures the Apache web server, and sets up the Ensembl codebase.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/associated_xref.txt#2025-04-22_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM ensemblorg/ensembl-base:latest\n\nMAINTAINER Ensembl Webteam <webmaster@ensembl.org>\n\nENV DEBIAN_FRONTEND noninteractive\n\n# Install dependencies\nRUN apt-get update -y && apt-get install -y \\\n    apache2 \\\n    libapache2-mod-perl2 \\\n    libplack-perl \\\n    mysql-client \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Configure Apache\nRUN a2enmod headers\nRUN a2enmod proxy\nRUN a2enmod proxy_http\nRUN a2enmod rewrite\n\n# Setup Ensembl code\nADD . /ensembl-rest\nWORKDIR /ensembl-rest\n\n# Install Ensembl dependencies\nRUN cpanm --installdeps --with-recommends .\n\n# Setup Ensembl environment\nENV PERL5LIB=/ensembl-rest/lib:/ensembl/ensembl/modules:/ensembl/ensembl-compara/modules:/ensembl/ensembl-variation/modules:/ensembl/ensembl-funcgen/modules:/ensembl/ensembl-io/modules:/ensembl/ensembl-vep/modules\n\n# Expose port\nEXPOSE 3000\n\n# Start server\nCMD [\"/ensembl-rest/script/ensembl_rest_server.pl\"]\n\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Schema Files in Perl for Ensembl REST API\nDESCRIPTION: Example showing how to create a schema file in Perl with a package declaration, class, and required attributes. The schema defines a REST API response structure with specific data types and validations.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/gene_attrib.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\npackage EnsEMBL::REST::Schema::Result::GenomicAlignment;\n\nuse strict;\nuse warnings;\nuse Moose;\nuse namespace::autoclean;\nuse JSON;\n\nextends 'DBIx::Class::Core';\n\n__PACKAGE__->table(\"genomic_align\");\n\n__PACKAGE__->add_columns(\n  \"genomic_align_id\",\n  { data_type => \"integer\", default_value => 0, is_nullable => 0 },\n);\n\n__PACKAGE__->set_primary_key(\"genomic_align_id\");\n\n__PACKAGE__->has_many(\n  \"genomic_align_blocks\",\n  \"EnsEMBL::REST::Schema::Result::GenomicAlignBlock\",\n  { \"foreign.genomic_align_id\" => \"self.genomic_align_id\" },\n  { cascade_copy => 0, cascade_delete => 0 },\n);\n\n1;\n```\n\n----------------------------------------\n\nTITLE: Running Ensembl REST API Unit Tests\nDESCRIPTION: Commands to run the unit tests for the Ensembl REST API to verify that all components are working correctly. This helps to ensure the installation is properly configured.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/map.txt#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd ensembl-rest\nprove -l t\n```\n\n----------------------------------------\n\nTITLE: Defining Ensembl REST Service Configuration Parameters (plaintext)\nDESCRIPTION: This configuration block specifies parameters for connecting to and querying an Ensembl database via the REST service. It includes connection details (host: ens-staging1, port: 3306, user: ensro), data versions (build: all, assembly: GRCh37, regulatory: 1, SIFT source: sift5.0.2, PolyPhen source: 2.2.2), an extensive list of supported cell types, and the specific columns to be included in variation data responses. This configuration likely informs the behavior of the associated Ensembl REST API instance.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/testdata/vep/homo_sapiens/86_GRCh37/info.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# CACHE UPDATED 2014-02-08 02:28:14\\nhost\\tens-staging1\\nport\\t3306\\nuser\\tensro\\nbuild\\tall\\nregulatory\\t1\\nsift\\tb\\nassembly\\tGRCh37\\npolyphen\\tb\\ncell_types\\tHeLa-S3,GM06990,U2OS,CD4,IMR90,HL-60,HepG2,Lymphoblastoid,CD133,CD36,K562,GM12878,HUVEC,NHEK,H1ESC,MultiCell,K562b,NH-A,HSMM,HMEC,A549,AG04449,AG04450,AG09309,AG09319,AG10803,Caco-2,Chorion,CMK,GM10847,GM12801,GM12864,GM12865,GM12872,GM12873,GM12874,GM12875,GM12891,GM12892,GM15510,GM18505,GM18507,GM18526,GM18951,GM19099,GM19193,GM19238,GM19239,GM19240,H7ESC,H9ESC,HAEpiC,HCF,HCM,HCPEpiC,HCT116,HEEpiC,HEK293b,HEK293,HepG2b,HGF,HIPEpiC,HNPCEpiC,HRCEpiC,HRE,HRPEpiC,Jurkat,LHSR,MCF7,Medullo,Melano,NB4,NHBE,NHDF-neo,NHLF,NT2-D1,Panc1,PanIslets,PFSK1,SAEC,SKMC,SKNMC,SKNSHRA,Th1,Th2,WERIRB1,RPTEC,ProgFib,HSMMtube,Osteobl,MCF10A-Er-Src,HPAEpiC,Fibrobl,GM12878-XiMat,BJ\\nsource_sift\\tsift5.0.2\\nsource_polyphen\\t2.2.2\\nvariation_cols\\tvariation_name,failed,start,end,allele_string,strand,minor_allele,minor_allele_freq,clin_sig,pubmed,AFR,AMR,ASN,EUR,AA,EA\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment for Ensembl REST API\nDESCRIPTION: This Kubernetes Deployment configuration defines how the Ensembl REST API should be deployed, including container images, resource limits, environment variables, and volume mounts. It specifies health checks, ports, and configures connections to necessary resources.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/hmm_profile.txt#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rest\n  labels:\n    name: rest\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: rest\n  template:\n    metadata:\n      labels:\n        app: rest\n        tier: backend\n    spec:\n      containers:\n        - name: rest\n          image: \"{{ .Values.imageRegistry }}/ensembl-rest\"\n          imagePullPolicy: Always\n          securityContext:\n            runAsNonRoot: true\n            allowPrivilegeEscalation: false\n            capabilities:\n              drop: [\"ALL\"]\n          env:\n            - name: \"SERVER_NAME\"\n              valueFrom:\n                configMapKeyRef:\n                  name: rest-config\n                  key: serverName\n            - name: \"PORT\"\n              valueFrom:\n                configMapKeyRef:\n                  name: rest-config\n                  key: port\n            - name: \"PIDFILE\"\n              valueFrom:\n                configMapKeyRef:\n                  name: rest-config\n                  key: pidfile\n            - name: \"TIMEOUT\"\n              valueFrom:\n                configMapKeyRef:\n                  name: rest-config\n                  key: timeout\n            - name: \"TIMEOUT_CONNECTION\"\n              valueFrom:\n                configMapKeyRef:\n                  name: rest-config\n                  key: timeout_connection\n            - name: \"TIMEOUT_IDLE_CONNECTION\"\n              valueFrom:\n                configMapKeyRef:\n                  name: rest-config\n                  key: timeout_idle_connection\n            - name: \"TIMEOUT_SEARCH\"\n              valueFrom:\n                configMapKeyRef:\n                  name: rest-config\n                  key: timeout_search\n            - name: \"TIMEOUT_PER_SEQUENCE\"\n              valueFrom:\n                configMapKeyRef:\n                  name: rest-config\n                  key: timeout_per_sequence\n            - name: \"MYSQL_HOST\"\n              value: \"{{ include \\\"ensembl.mysql.host\\\" . }}\"\n            - name: \"MYSQL_PORT\"\n              value: \"{{ .Values.mysql.port }}\"\n            - name: \"MYSQL_DBNAME\"\n              value: \"ensembl_website\"\n            - name: \"MYSQL_USER\"\n              value: \"{{ .Values.mysql.user }}\"\n            - name: \"MYSQL_PASS\"\n              valueFrom:\n                secretKeyRef:\n                  name: \"{{ include \\\"ensembl.mysql.secretName\\\" . }}\"\n                  key: \"{{ .Values.mysql.passwordKey }}\"\n          ports:\n            - containerPort: 3000\n              name: rest\n          resources:\n            limits:\n              cpu: \"2\"\n              memory: 4Gi\n            requests:\n              cpu: 500m\n              memory: 2Gi\n          livenessProbe:\n            httpGet:\n              path: /ping\n              port: 3000\n            initialDelaySeconds: 60\n            periodSeconds: 10\n            timeoutSeconds: 5\n          readinessProbe:\n            httpGet:\n              path: /ping\n              port: 3000\n            initialDelaySeconds: 60\n            periodSeconds: 10\n            timeoutSeconds: 5\n      # Init containers for wait-for-db\n      initContainers:\n        - name: wait-for-db\n          image: \"{{ .Values.imageRegistry }}/ensembl-wait-for-db\"\n          env:\n            - name: \"MYSQL_HOST\"\n              value: \"{{ include \\\"ensembl.mysql.host\\\" . }}\"\n            - name: \"MYSQL_PORT\"\n              value: \"{{ .Values.mysql.port }}\"\n            - name: \"MYSQL_DBNAME\"\n              value: \"ensembl_website\"\n            - name: \"MYSQL_USER\"\n              value: \"{{ .Values.mysql.user }}\"\n            - name: \"MYSQL_PASS\"\n              valueFrom:\n                secretKeyRef:\n                  name: \"{{ include \\\"ensembl.mysql.secretName\\\" . }}\"\n                  key: \"{{ .Values.mysql.passwordKey }}\"\n          securityContext:\n            runAsNonRoot: true\n            allowPrivilegeEscalation: false\n            capabilities:\n              drop: [\"ALL\"]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Docker Image\nDESCRIPTION: This Dockerfile sets up the environment for the Ensembl REST API. It installs necessary system packages, Perl modules, and configures the application. The image is based on ensemblorg/ensembl-base and exposes port 3000.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/seq_region_mapping.txt#2025-04-22_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM ensemblorg/ensembl-base:latest\n\nENV GUNICORN_WORKERS=1\nENV DATAFILES_ROOT=/\n\nRUN apt-get update && apt-get install -y \\\n    uuid-dev \\\n    libconfig-inifiles-perl \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN cpanm --installdeps --with-recommends --notest --cpanfile /ensembl-rest/cpanfile /ensembl-rest\n\nRUN mkdir -p /usr/local/share/codecompletion /usr/local/share/autocomplete\n\nCOPY docker/docker-cmd.sh /docker-cmd.sh\nCOPY docker/docker-entrypoint.sh /\n\nEXPOSE 3000\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"/docker-cmd.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Server in Perl\nDESCRIPTION: This snippet defines the configuration for the Ensembl REST API server. It sets up database connections, enables plugins, and configures various server parameters such as content types, cache settings, and documentation options.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/peptide_archive.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  using => ['Config::Common'],\n\n  # Force specifying of a single connection.\n  default_view => 'REST',\n  enabled_views => ['REST'],\n\n  # plugins => [qw/Cache/],\n  plugins => [\n    'Cache' => {\n      'driver' => 'Memcached',\n      'servers' => ['127.0.0.1:11211'],\n      'namespace' => 'ensrest:',\n      'expires' => '1 hour',\n    },\n    'Authentication' => {\n      'required' => 0,\n      'realm'    => 'ensembl',\n      'store'    => {\n        'class'     => 'Simple',\n        'user_file' => './users.htpasswd',\n      },\n    },\n  ],\n\n  # Enable CORS on all endpoints. If you need more fine grained control\n  # see http://www.ensembl.info/\n  'Plugin::CORS' => {\n    allow_origin => '*',\n    allow_methods => ['GET','POST','OPTIONS'],\n    allow_headers => ['Content-Type'],\n    max_age => 0,\n  },\n\n  service_name => 'Ensembl REST API',\n\n  #Controller::Root opts\n  Cors => {\n    allow_credentials => undef,\n    allowed_headers => undef,\n    exposed_headers => undef,\n    allow_methods => undef,\n    max_age => undef,\n  },\n\n  jsonp => 1,\n\n  # Set to 1 to make server use compression when client can accept it\n  compression => 0,\n\n  # Available content types, add or remove to taste & redefine default\n  content_type_map => {\n    'text'          => ['text/plain'],\n    'txt'           => ['text/plain'],\n    'html'          => ['text/html'],\n    'json'          => ['application/json'],\n    'xml'           => ['text/xml'],\n    'yml'           => ['text/x-yaml'],\n    'yaml'          => ['text/x-yaml'],\n    'fasta'         => ['text/x-fasta'],\n    'gff'           => ['text/x-gff3'],\n    'gff3'          => ['text/x-gff3'],\n    'bed'           => ['text/x-bed'],\n    'gtf'           => ['text/x-gtf'],\n    'nh'            => ['text/x-nh'],\n    'seqxml'        => ['text/x-seqxml+xml'],\n    'phyloxml'      => ['text/x-phyloxml+xml'],\n    'orthoxml'      => ['text/x-orthoxml+xml'],\n    'vcf'           => ['text/x-vcf'],\n    'compara_xml'   => ['text/x-compara+xml'],\n    'rdf'           => ['application/rdf+xml'],\n    'fastq'         => ['text/x-fastq'],\n    'svg'           => ['image/svg+xml'],\n    'alignment'     => ['text/x-alignment'],\n    'spaghetti'     => ['application/x-spaghetti'],\n    'emf'           => ['text/x-emf'],\n    'maf'           => ['text/x-maf'],\n  },\n\n  default_content_type => 'json',\n\n  # These content-types we understand but don't want to\n  # present to uses as an option\n  hidden_content_types => [qw/seqxml orthoxml fasta alignment emf maf/],\n\n  # Max size we are ever going to serve up\n  max_post_size => 20 * 1024 * 1024,\n\n  # Documentation configuration. Localized versions of the documentation\n  # should use the same structure but with 'documentation_urlbase' substituted\n  # for 'documentation_baseurl_live', 'documentation_baseurl_staging'\n  # or 'documentation_baseurl_dev'\n  documentation_urlbase => 'https://github.com/Ensembl/ensembl-rest/wiki',\n  documentation_md_node => '/rest/docs',\n  documentation_menu_cmd => \"/mnt/ensembl-rest-gh-pages/bin/get_menu_json.sh\",\n\n  # Caching options\n  cache_all_endpoints => 1,\n  endpoint_lifetime   => 7200, # 2hrs in seconds\n  force_database_timeout => 1,\n\n  # WARNING: Can expose potential confidential database information\n  log_exception => 1,\n\n  # Use a single database connection instead of one per request. Useful\n  # when you have limited db connections available.\n  connection_sharing => 1,\n\n  # --- Documentation URLs\n  taxon_url          => '//www.uniprot.org/taxonomy/', #append ID\n  xref_url           => '//www.uniprot.org/uniprot/', #append ID\n  tark_url           => '//betatark.ensembl.org/#/Detailed-view?', #append transcript stable id in format assembly=GRCh38;transcript=ENST00000288602\n  g2p_url            => '//www.ebi.ac.uk/gene2phenotype/search?panel=ALL&globalresearch=', #append HGNC symbol\n  dbsnp_url          => '//www.ncbi.nlm.nih.gov/projects/SNP/snp_ref.cgi?rs=', #append rsID\n  cosmic_url         => '//cancer.sanger.ac.uk/cosmic/mutation/overview?id=', #append COSM99584\n\n  # --- Linked probes configuration\n  linked_probes => {\n    ArrayExpress => 'http://www.ebi.ac.uk/arrayexpress/experiments/%s',\n    GEO => 'https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=%s',\n  },\n\n  # --- Phenotype display configuration:\n  # Phenotype ordering in request parameters\n  phenotype_order => [\n    'variation', 'structural_variation', 'gene', 'procedure', 'trait', 'ontology',\n    'type', 'sex', 'source', 'study', 'strain', 'evidence_type', 'evidence',\n    'pvalue', 'external_id', 'associated_gene', 'description', 'inheritance_type'\n  ],\n\n  # Phenotype ordering in responses\n  phenotype_display_order => [\n    'external_id',\n    'type',\n    'ontology',\n    'trait',\n    'evidence_type',\n    'evidence',\n    'strain',\n    'inheritance_type',\n    'study',\n    'associated_gene',\n    'procedure',\n    'source',\n    'sex',\n    'description',\n    'pvalue',\n  ],\n\n  # --- Lookup configuration\n  # List of all available types in the lookup:\n  # Default for all of these is 1, i.e. enabled\n  #lookup_gene => 0,\n  #lookup_transcript => 0,\n  #lookup_exon => 0,\n  #lookup_translation => 0,\n  #lookup_lrg => 0,\n  #lookup_canonicals => 0,\n\n  # --- Frequency Configuration\n  # Min frequency percentage for a variant to be classed as common\n  # Only used when info->FREQ is unavailable\n  min_common_frequency => 0.01,\n\n  # --- Sequence Configuration\n  # Explicitly allow MASK to be 'hard' or 'soft' only, setting anything else to 'hard'\n  mask => \"\",\n  seqlevel => \"chromosome\",\n\n  # --- Individual Configuration\n  # Allow specification of GVF file in individual endpoint\n  individual_file => \"\",\n\n  # --- Feature Configuration\n  # Add biotype-groups to features/overlap endpoint\n  add_biotype_groups => 0,\n\n  # --- VEP Configuration\n  # Set to 1 to allow VEP to use full Ensembl analysis pipeline\n  # Set to 0 to restrict VEP to minimal VEP plugins\n  vep_pipeline => 1,\n\n  # --- GXA Baseline Gene Expression Configuration\n  gxa_gene_expression_source_endpoint => 'https://www.ebi.ac.uk/gxa/json/expressionData?geneQuery=',\n\n  # --- ClinVar Configuration\n  # ClinVar config\n  clinvar => {\n    review_status_colours => {\n      'practice guideline'                                      => '#3FDA54',\n      'reviewed by expert panel'                                => '#3FDA6D',\n      'criteria provided, multiple submitters, no conflicts'    => '#3FDA85',\n      'criteria provided, single submitter'                     => '#3FDA9E',\n      'criteria provided, conflicting interpretations'          => '#3FDAB7',\n      'criteria provided, multiple submitters, some conflicts'  => '#3FDAD0',\n      'no assertion for the individual variant'                 => '#3FDAE9',\n      'no assertion criteria provided'                          => '#818181',\n      'no assertion provided'                                   => '#818181',\n    },\n  },\n\n  # --- Variants Configuration\n  # Disable default sorting by p-value.\n  disable_pvalue_sort => 0,\n\n  # --- Gene Tree Configuration\n  # Enable gene tree pruning\n  prune_tree => 0,\n\n  # --- Server configuration\n  # Leave empty if no proxy\n  proxy => '',\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Exception Classes and Export Lists for Ensembl REST API\nDESCRIPTION: The Init function sets up exception class variables, export lists, and creates new exception classes for REST-specific error conditions. It defines base classes for authentication failures, runtime errors, and general REST exceptions with their associated HTTP status codes.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/mapping_session.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nsub Init() {\n  @EXPORT = @Bio::EnsEMBL::Utils::Exception::EXPORT;\n  @EXPORT_OK = @Bio::EnsEMBL::Utils::Exception::EXPORT_OK;\n  %EXPORT_TAGS = %Bio::EnsEMBL::Utils::Exception::EXPORT_TAGS;\n  \n  push(@EXPORT, qw(throw_REST_exception));\n  push(@{$EXPORT_TAGS{rest}}, qw(throw_REST_exception));\n  \n  foreach my $class (qw/AuthenticationFail UnhandledEntity AuthorizationFail BadRequest OutOfRange/) {\n    Bio::EnsEMBL::Utils::Exception->_create_exception_class(\"EnsEMBL::REST::Exception::${class}\");\n    push(@EXPORT, \"${class}Exception\");\n    push(@{$EXPORT_TAGS{rest}}, \"${class}Exception\");\n  }\n  \n  no strict 'refs';\n  *EnsEMBL::REST::Exception::AuthenticationFail::status = sub { return 401; };\n  *EnsEMBL::REST::Exception::AuthorizationFail::status = sub { return 403; };\n  *EnsEMBL::REST::Exception::BadRequest::status = sub { return 400; };\n  *EnsEMBL::REST::Exception::OutOfRange::status = sub { return 400; };\n  *EnsEMBL::REST::Exception::UnhandledEntity::status = sub { return 415; };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ENCODE Project Configuration in Ensembl REST\nDESCRIPTION: A tab-delimited configuration entry for the ENCODE Project in the Ensembl REST API. The entry includes an ID (2), name (ENCODE), shortname (encode), description (The ENCODE Project), URL (http://encodeproject.org), and a numeric value (1).\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/experimental_group.txt#2025-04-22_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n2\tENCODE\tencode\tThe ENCODE Project\thttp://encodeproject.org\t1\n```\n\n----------------------------------------\n\nTITLE: Setting up Species Config for Ensembl REST API in Perl\nDESCRIPTION: This snippet demonstrates how to configure species-related settings for the Ensembl REST API. It defines which species to support in the API and how to handle production names.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/marker.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\n# Our species configuration comes directly from the registry\nspecies_config:\n  # add_species_prefix adds a prefix before all aliases\n  # This is useful if your aliases are integers which are expanded by Catalyst\n  # into arrayrefs which breaks the controller\n  add_species_prefix: false\n  # replace with an array if you want a subset of the current registry of\n  # species available through this REST server\n  valid_species: []\n  # Set to an alias which can be used to retrieve all species in the system\n  all_species_alias: \"all\"\n  common_aliases:\n    - assemblyaccessionversion\n```\n\n----------------------------------------\n\nTITLE: Retrieving Epigenome Activity Data in Ensembl REST API\nDESCRIPTION: Implements an endpoint to fetch activity data for a specific epigenome. This action is chained to the epigenome ID path and returns the activity data for that epigenome at a given location.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/peptide_archive.txt#2025-04-22_snippet_3\n\nLANGUAGE: Perl\nCODE:\n```\nsub activity :Chained('id') PathPart('activity') Args(0) ActionClass('REST') {}\nsub activity_GET {\n  my ($self, $c) = @_;\n  my $epigenome = $c->stash->{epigenome};\n  my $regulatory_build_adaptor = $c->model('Regulatory')->fetch_regulatory_build_adaptor;\n  my $regulatory_build = $regulatory_build_adaptor->fetch_current_regulatory_build;\n  $c->go('ReturnError', 'custom', [\"No current regulatory build\"]) unless defined $regulatory_build;\n\n  my $activity = {};\n  my $rfeatures = $regulatory_build->get_all_regulatory_features_by_epigenome($epigenome);\n\n  if ($rfeatures) {\n    \n    for my $rf (@$rfeatures) {\n      my $activity_level = $rf->activity;\n      next unless defined $activity_level;\n      if (!exists $activity->{$activity_level}) {\n        $activity->{$activity_level} = 1;\n      } else {\n        $activity->{$activity_level}++;\n      }\n    }\n  }\n\n  $self->status_ok($c, entity => $activity);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Suffix to Content-Type Mapping in Perl for REST API\nDESCRIPTION: Function that returns a hash mapping of file extensions to their corresponding content types. This is used to determine the appropriate HTTP Content-Type header based on the requested file extension in the Ensembl REST API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/unconventional_transcript_association.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\nsub suffix_to_type {\n  my ($self) = @_;\n  return {\n    'json' => 'application/json',\n    'xml' => 'text/xml',\n    'yaml' => 'text/x-yaml',\n    'seqxml' => 'text/x-seqxml+xml',\n    'orthoxml' => 'text/x-orthoxml+xml',\n    'phyloxml' => 'text/x-phyloxml+xml',\n    'nh' => 'text/x-nh',\n    'fasta' => 'text/x-fasta',\n    'gff3' => 'text/x-gff3',\n    'bed' => 'text/x-bed',\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for Ensembl REST API\nDESCRIPTION: This Dockerfile sets up the environment for running the Ensembl REST API. It installs necessary dependencies, sets up the working directory, and configures the entry point for the application.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/operon_transcript.txt#2025-04-22_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM ensemblorg/ensembl-web-libs:release-103\n\nRUN apt-get update && apt-get install -y \\\n    libcatalyst-perl \\\n    libcatalyst-modules-perl \\\n    libcatalyst-plugin-static-simple-perl \\\n    libcatalyst-action-rest-perl \\\n    libjson-perl \\\n    libplack-perl \\\n    libdbi-perl \\\n    libdbd-mysql-perl \\\n    libmath-random-perl \\\n    libcarp-clan-perl \\\n    liburi-escape-xs-perl \\\n    libjson-xs-perl \\\n    libhttp-tiny-perl \\\n    libhttp-message-perl \\\n    libwww-perl \\\n    libset-intervaltree-perl \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /opt/ensembl-rest\n\nCOPY . /opt/ensembl-rest\n\nENTRYPOINT [\"perl\", \"script/ensembl_rest_server.pl\", \"-p\", \"3000\", \"-r\", \"--fork\", \"--pid_file\", \"/var/run/ensrest.pid\", \"-m\", \"production\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections for Ensembl REST API in Perl\nDESCRIPTION: This snippet defines the database connections for the Ensembl REST API. It specifies the driver, host, port, user, and password for various databases including core, variation, and funcgen.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/karyotype.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n  Rose::DB->register_db(\n    driver => 'mysql',\n    database => 'ensembl_accounts_66',\n    host => 'mysql-eg-publicsql.ebi.ac.uk',\n    port => 4157,\n    username => 'anonymous',\n    password => '',\n    type => 'ensembl',\n    domain => 'ensembl'\n  );\n\n  Bio::EnsEMBL::Registry->load_registry_from_db(\n    -HOST => 'mysql-ensembl-mirror.ebi.ac.uk',\n    -PORT => 4240,\n    -USER => 'anonymous',\n    -DB_VERSION => $SiteDefs::ENSEMBL_VERSION,\n  );\n```\n\n----------------------------------------\n\nTITLE: Fetching Human Gene Information with curl\nDESCRIPTION: A shell command that retrieves detailed information about a specific human gene (BRCA2) using the Ensembl REST API. It specifies the gene ID and requests JSON format response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/protein_feature.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET \"https://rest.ensembl.org/lookup/id/ENSG00000139618?\" -H \"Content-Type:application/json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Database Settings in registry.conf\nDESCRIPTION: This configuration snippet shows how to set up a test database connection in registry.conf file for Ensembl REST API testing. It defines database locations, species names, and other essential parameters for test database access.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/repeat_consensus.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n{\n  -name           => 'homo_sapiens',\n  -species        => 'homo_sapiens',\n  -core_species   => 'homo_sapiens',\n  -species_id     => 1,\n  -taxon_id       => 9606,\n  -chromosome_21  => 'NC_000021.9'\n},\n{\n  -name           => 'homo_sapiens',\n  -species        => 'homo_sapiens',\n  -core_species   => 'homo_sapiens',\n  -species_id     => 1,\n  -registry_file  => 'registry.pm',\n  -chromosome_21  => 'NC_000021.9',\n  -variation_21   => 'rs2254135',\n\n  -host           => 'mysql-ensembl-mirror.ebi.ac.uk',\n  -port           => 4240,\n  -user           => 'anonymous',\n}\n```\n\n----------------------------------------\n\nTITLE: Testing species alias lookup endpoint in Ensembl REST API with Perl\nDESCRIPTION: This test validates the alias lookup functionality of the '/info/species/' endpoint. It ensures the API correctly identifies species when searching with a common name or alias rather than the scientific name.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/external_db.txt#2025-04-22_snippet_8\n\nLANGUAGE: perl\nCODE:\n```\n  # Species endpoint (alternative name)\n  {\n    my $species = 'human';\n    my $info_species = RestHelper->get_json(\"info/species/$species\");\n    cmp_ok(scalar(@{$info_species}), '==', 1, 'One result from lookup');\n    cmp_ok($info_species->[0]->{name}, 'eq', 'homo_sapiens', 'Found correct lookup from alternative name');\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Settings in Perl\nDESCRIPTION: This code snippet defines configuration settings for the Ensembl REST API. It includes database connection parameters, caching options, and request limits. The configuration is structured as a Perl hash with nested key-value pairs.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/associated_group.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  default_view => 'default',\n\n  service_name => 'Ensembl REST API',\n  service_logo => 'ensembl_logo.png',\n  service_url  => 'http://rest.ensembl.org',\n  copyright_footer => '<p class=\"center\">&#169; 1999-2023 EMBL-EBI</p>',\n\n  jsonp => {\n    callback_param => 'callback',\n    callback_regexp => '\\w+',\n  },\n\n  # enable CORS requests from other domains\n  <enable_cors>\n    cors_allow_origin => '*'\n\n    # Additional CORS headers - default: '*'\n    #cors_allow_headers => 'X-Requested-With,Content-Type'\n\n    # Additional methods to allow - default: ['GET','POST','OPTIONS']\n    #cors_allowed_methods => ['GET','POST','OPTIONS','PUT','DELETE']\n\n    # Max prefligh cache age in seconds - default: 86400 (24 hours)\n    #cors_max_age => 86400\n  </enable_cors>\n\n  psgi_stack_size => 4194304,\n\n  # Content type to Serialize format options.  See\n  # http://www.perlmonks.org/?node_id=1078367 for serializer options\n  content_type_to_serializer => {\n    'text/html'           => 'YAML',\n    'text/yaml'           => 'YAML',\n    'text/x-yaml'         => 'YAML',\n    'application/json'    => 'JSON',\n    'text/javascript'     => 'JSON',   # JSON\n    'text/plain'          => 'JSON',   # Plain text\n    'application/ld+json' => 'JSON::LD',\n\n    # Add here to support other content types/serializer pairs\n    # 'text/xml'        => 'XML::Simple',\n    # 'text/x-foo'      => '+MyApp::Foo', # Call MyApp::Foo::serialize\n    # 'application/pdf' => 'PDF',\n  },\n\n  # configuration on which database to use\n  # {$spc} stands for the spceies name\n  multi_config => {\n    main => 'Bio::EnsEMBL::REST::MulticonfigStatic',\n    http_proxy => 'http://sys-embl-pdb:3128',\n    https_proxy => 'http://sys-embl-pdb:3128',\n    compara => 'Bio::EnsEMBL::REST::MulticonfigCompara',\n  },\n\n  # configuration for the CACHE used by the REST API\n  use_caching => 1,\n  no_long_cache => 0,\n  cache_short_time => 3600,\n  cache_long_time => 86400,\n  memcached_servers => [ 'rest-mc-01.ebi.ac.uk:11211', 'rest-mc-02.ebi.ac.uk:11211' ],\n  memcached_namespace => 'ensrest',\n\n  # 1Gb max memory\n  cache_memory_size => 1073741824,\n\n  # this should be set as the time zone used by the database\n  time_zone => 'Europe/London',\n\n  # limits on the API\n  default_limit => 500,\n  max_post_body => 10_000_000,\n  max_get_max_length => 10_000_000,\n  max_slice_length => 15_000_000,\n  max_group_size => 500,\n  max_json_ld => 100,\n  max_facet_depth => 4,\n  max_allowed_depth => 1000,\n\n  # default maximum number of threads to use for each operation\n  num_threads => 10,\n\n  # the maximum number of features allowed when querying overlapping features\n  max_features => 100_000,\n\n  # enable or disable certain endpoints\n  # default to enable endpoints\n  endpoints => {\n    # genetree => { endpoints => [qw/genetree_stable_id/], method => 'disable_endpoints' },\n  },\n\n  # the maximum number of regions allowed when querying variation API\n  max_slice_length_var => 5_000_000,\n  max_post_size_var => 1000,\n\n  # the maximum number of regions allowed when querying for sequence\n  max_sequence_length => 10_000_000,\n\n  # the maximum number of transcripts allowed when querying for sequence by transcript ID\n  # this should be the same as the max_post_size in the sequence endpoint\n  max_transcript_ids => 250,\n\n  # maximum number of sequences to compare cross-species using compara\n  max_compara_sequence_length => 100_000,\n\n  # maximum number of sequences to query for homologues\n  max_homologues_sequence_length => 100_000,\n\n  # maximum number of species in a custom compara request\n  max_compara_species => 10,\n\n  # maximum number of transcripts allowed when querying for sequence by transcript ID\n  # this should be the same as the max_post_size in the sequence endpoint\n  max_variants => 200,\n\n  # maximum number of variants allowed when querying for variant recoder\n  max_variant_recoder => 200,\n\n  # maximum number of input IDs for variation_recoder endpoint\n  max_variation_recoder_inputs => 200,\n\n  # maximum number of variants allowed when querying for variant_consequence\n  max_variant_consequences => 750,\n\n  # maximum number of VCF entries to read when querying VCF endpoint\n  max_vcf_entries => 2_000_000,\n\n  # rate limiting for the API; currently 18000 requests per hour as per\n  # https://github.com/Ensembl/ensembl-rest/wiki/Rate-Limits\n  default_rate_limiter => {\n    rate => 18000,\n    time_period => 3600,\n  },\n\n  debug_mode => 0,\n\n  lookup => {\n    # Set to 1 to enable multiple lookups in the /lookup endpoint\n    multi_lookup_enabled => 1,\n  },\n\n  # deprecated endpoints\n  deprecated => {\n    archive => \"Please use LDFeatureContainer endpoint instead\",\n  },\n\n  # enable all features\n  feature => {\n    genomic_alignment => undef,\n    regulatory => undef,\n    variation => undef,\n  },\n\n  # LD config\n  ld => {\n    default_window => 500_000,\n    max_snp => 100_000,\n  },\n\n  # HGVS config\n  hgvs => {\n    max_slice_length => 1_000_000,\n  },\n\n  # regulation config\n  regulation => {\n    feature_types => [qw(Promoter Promoter Flanking Region Enhancer TF binding site Open chromatin CTCF Binding Site)],\n    so_term_required => 0,\n  },\n\n  # ID History config\n  idhistory => {\n    max_archive => 1,\n  },\n\n  # ontology config\n  ontology => {\n    max_terms => 1000,\n  },\n\n  # xrefs config\n  xrefs => {\n    max_results => 1000,\n  },\n\n  # VEP config\n  vep => {\n    # max input size for VEP endpoint\n    max_post_size => 1000,\n    max_post_size_lrg => 100,\n    max_post_size_lrg_on_primary => 50,\n\n    # size limit for VEP cache files\n    cache_file_size_limit => 100_000_000,\n\n    # plugin directory\n    dir => '/nfs/web-hx/vep/groups/ensembl/WebData/VEP/plugins',\n\n    # plugin config\n    plugin_config => {\n      # variant effect predictor params\n      params => {\n        host => 'mysql-ensembl-mirror.ebi.ac.uk',\n        port => 4240,\n        user => 'anonymous',\n      },\n    },\n  },\n\n  # phenotype config\n  phenotype => {\n    max_internal_id => 10000,\n  },\n\n  # linkage disequilibrium config\n  ld => {\n    default_population => '1000GENOMES:phase_3:GBR',\n    default_population_display => '1000 Genomes phase 3 GBR',\n    default_r2 => 0.85,\n    default_window_size => 500000,\n    default_d_prime => 0,\n  },\n\n  # gene tree config\n  genetree => {\n    # set this to 1 to enable the use of the genetree_stable_id endpoint\n    # this endpoint is currently disabled by default\n    genetree_stable_id => 0,\n  },\n\n  # sequence config\n  sequence => {\n    # set this to 1 to enable the use of the sequence endpoint\n    # this endpoint is currently disabled by default\n    sequence => 0,\n  },\n\n  # variation config\n  variation => {\n    # set this to 1 to enable the use of the variation endpoint\n    # this endpoint is currently disabled by default\n    variation => 0,\n  },\n\n  # variation consequence config\n  variation_consequence => {\n    # set this to 1 to enable the use of the variation_consequence endpoint\n    # this endpoint is currently disabled by default\n    variation_consequence => 0,\n  },\n\n  # variation recoder config\n  variation_recoder => {\n    # set this to 1 to enable the use of the variation_recoder endpoint\n    # this endpoint is currently disabled by default\n    variation_recoder => 0,\n  },\n\n  # vcf config\n  vcf => {\n    # set this to 1 to enable the use of the vcf endpoint\n    # this endpoint is currently disabled by default\n    vcf => 0,\n  },\n\n  # vep config\n  vep => {\n    # set this to 1 to enable the use of the vep endpoint\n    # this endpoint is currently disabled by default\n    vep => 0,\n  },\n\n  # xrefs config\n  xrefs => {\n    # set this to 1 to enable the use of the xrefs endpoint\n    # this endpoint is currently disabled by default\n    xrefs => 0,\n  },\n\n  # archive config\n  archive => {\n    # set this to 1 to enable the use of the archive endpoint\n    # this endpoint is currently disabled by default\n    archive => 0,\n  },\n\n  # lookup config\n  lookup => {\n    # set this to 1 to enable the use of the lookup endpoint\n    # this endpoint is currently disabled by default\n    lookup => 0,\n  },\n\n  # overlap config\n  overlap => {\n    # set this to 1 to enable the use of the overlap endpoint\n    # this endpoint is currently disabled by default\n    overlap => 0,\n  },\n\n  # regulatory config\n  regulatory => {\n    # set this to 1 to enable the use of the regulatory endpoint\n    # this endpoint is currently disabled by default\n    regulatory => 0,\n  },\n\n  # phenotype config\n  phenotype => {\n    # set this to 1 to enable the use of the phenotype endpoint\n    # this endpoint is currently disabled by default\n    phenotype => 0,\n  },\n\n  # ontology config\n  ontology => {\n    # set this to 1 to enable the use of the ontology endpoint\n    # this endpoint is currently disabled by default\n    ontology => 0,\n  },\n\n  # idhistory config\n  idhistory => {\n    # set this to 1 to enable the use of the idhistory endpoint\n    # this endpoint is currently disabled by default\n    idhistory => 0,\n  },\n\n  # homology config\n  homology => {\n    # set this to 1 to enable the use of the homology endpoint\n    # this endpoint is currently disabled by default\n    homology => 0,\n  },\n\n  # genetree config\n  genetree => {\n    # set this to 1 to enable the use of the genetree endpoint\n    # this endpoint is currently disabled by default\n    genetree => 0,\n  },\n\n  # compara config\n  compara => {\n    # set this to 1 to enable the use of the compara endpoint\n    # this endpoint is currently disabled by default\n    compara => 0,\n  },\n\n  # assembly config\n  assembly => {\n    # set this to 1 to enable the use of the assembly endpoint\n    # this endpoint is currently disabled by default\n    assembly => 0,\n  },\n\n  # archive config\n  archive => {\n    # set this to 1 to enable the use of the archive endpoint\n    # this endpoint is currently disabled by default\n    archive => 0,\n  },\n\n  # info config\n  info => {\n    # set this to 1 to enable the use of the info endpoint\n    # this endpoint is currently disabled by default\n    info => 0,\n  },\n\n  # linkage disequilibrium config\n  ld => {\n    # set this to 1 to enable the use of the ld endpoint\n    # this endpoint is currently disabled by default\n    ld => 0,\n  },\n\n  # mapping config\n  mapping => {\n    # set this to 1 to enable the use of the mapping endpoint\n    # this endpoint is currently disabled by default\n    mapping => 0,\n  },\n\n  # overlap config\n  overlap => {\n    # set this to 1 to enable the use of the overlap endpoint\n    # this endpoint is currently disabled by default\n    overlap => 0,\n  },\n\n  # sequence config\n  sequence => {\n    # set this to 1 to enable the use of the sequence endpoint\n    # this endpoint is currently disabled by default\n    sequence => 0,\n  },\n\n  # variation config\n  variation => {\n    # set this to 1 to enable the use of the variation endpoint\n    # this endpoint is currently disabled by default\n    variation => 0,\n  },\n\n  # variation consequence config\n  variation_consequence => {\n    # set this to 1 to enable the use of the variation_consequence endpoint\n    # this endpoint is currently disabled by default\n    variation_consequence => 0,\n  },\n\n  # variation recoder config\n  variation_recoder => {\n    # set this to 1 to enable the use of the variation_recoder endpoint\n    # this endpoint is currently disabled by default\n    variation_recoder => 0,\n  },\n\n  # vcf config\n  vcf => {\n    # set this to 1 to enable the use of the vcf endpoint\n    # this endpoint is currently disabled by default\n    vcf => 0,\n  },\n\n  # vep config\n  vep => {\n    # set this to 1 to enable the use of the vep endpoint\n    # this endpoint is currently disabled by default\n    vep => 0,\n  },\n\n  # xrefs config\n  xrefs => {\n    # set this to 1 to enable the use of the xrefs endpoint\n    # this endpoint is currently disabled by default\n    xrefs => 0,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Documentation and Plugins in Perl\nDESCRIPTION: Sets up documentation-related settings and plugin configurations for the Ensembl REST API. It specifies the documentation root, enables plugins, and configures CORS settings.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/splicing_transcript_pair.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\n  # Documentation\n  doc_root => '/ensembl/ensembl-rest/root/documentation',\n\n  # Plugins\n  plugins => [\n    'Cache',\n    'Throttle',\n    'EnsEMBL::REST::Plugin::Compara',\n    'EnsEMBL::REST::Plugin::Variation',\n  ],\n\n  # CORS\n  cors => {\n    allow_origin => '*',\n    allow_methods => ['GET', 'POST', 'OPTIONS'],\n    allow_headers => ['Content-Type', 'X-Requested-With'],\n    max_age => 86400,\n  },\n```\n\n----------------------------------------\n\nTITLE: Basic Highlight.js Implementation in HTML\nDESCRIPTION: The minimal setup required to implement Highlight.js on a web page, including stylesheet loading, script inclusion, and initialization.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/root/static/js/highlight/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"/path/to/styles/default.css\">\n<script src=\"/path/to/highlight.pack.js\"></script>\n<script>hljs.initHighlightingOnLoad();</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for EnsEMBL REST API\nDESCRIPTION: This Dockerfile sets up the environment for the EnsEMBL REST API. It uses a base image, installs system dependencies, sets up the application directory, installs Perl dependencies, and configures the application for deployment.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/operon_transcript_gene.txt#2025-04-22_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM ensemblorg/ensembl-base:5.0\n\nLABEL maintainer=\"Web Team <webteam@ensembl.org>\"\n\n# Install system dependencies\nRUN apt-get update && \\\n    apt-get install -y \\\n    cpanminus \\\n    libdbd-sqlite3-perl \\\n    libcgi-pm-perl \\\n    sqlite3 \\\n    liblwp-protocol-https-perl \\\n    pkg-config && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Setup application directory\nRUN mkdir -p /opt/rest\nWORKDIR /opt/rest\n\n# Install ensembl-rest\nRUN git clone https://github.com/Ensembl/ensembl-rest.git -b release/114 ensembl-rest\n\n# Install perl dependencies\nRUN cpanm --installdeps --with-recommends --notest --cpanfile /opt/rest/ensembl-rest/cpanfile .\n\n# Setup ensembl-rest configuration\nRUN cp /opt/rest/ensembl-rest/configurations/production/ensembl_rest.conf.default /opt/rest/ensembl-rest/configurations/production/ensembl_rest.conf\n\n# Set env variables\nENV ENSEMBL_REST_CONFIG=/opt/rest/ensembl-rest/configurations/production/ensembl_rest.conf\nENV PERL5LIB=${PERL5LIB}:/opt/rest/ensembl-rest/lib\n\n# Expose port\nEXPOSE 3000\n\n# Start server\nCMD [\"/opt/rest/ensembl-rest/script/ensembl_rest_server.pl\"]\n\n```\n\n----------------------------------------\n\nTITLE: Listing All Epigenomes in Ensembl REST API\nDESCRIPTION: Implements an endpoint that returns all available epigenomes from the database. This action is chained to the base epigenomes path and dispatches the list of epigenome objects to the appropriate serializer.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/peptide_archive.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\n# Return a list of all epigenomes\nsub list_all_GET :Chained('epigenomes') PathPart('') Args(0) ActionClass('REST') {}\n\nsub list_all_GET_REST {\n  my ($self, $c) = @_;\n  my $epigenomes = $self->epigenomes_adaptor($c)->fetch_all();\n  $self->status_ok($c, entity => $epigenomes);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Experiment Result File Retrieval Endpoint in Ensembl REST API Perl\nDESCRIPTION: Creates an endpoint for retrieving result files associated with an experiment. This method fetches experiment data by ID, validates its existence, and returns information about all related result files including paths and metadata.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/data_set.txt#2025-04-22_snippet_4\n\nLANGUAGE: perl\nCODE:\n```\nsub experiment_file : Chained('experiment') PathPart('file') ActionClass('REST') Args(1) { }\n\nsub experiment_file_GET {\n  my ( $self, $c, $id ) = @_;\n\n  # empty id is not allowed\n  if (!$id) {\n    $c->go('ReturnError', 'custom', [qq{experiment id must be specified}]);\n  }\n\n  my $max_files = $c->request->param('max_files') // 0;\n  if ($max_files !~ /^\\d+$/) {\n    $c->go('ReturnError', 'custom', [qq{max_files parameter must be an integer, if specified}]);\n  }\n\n  my $result;\n  for my $adaptor (@{$self->experiment_adaptors($c)}) {\n    my $experiment = $adaptor->fetch_by_accession($id);\n    # try to fetch by dbID in case accession did not work\n    if (!$experiment && $id =~ /^\\d+$/) {\n      $experiment = $adaptor->fetch_by_dbID($id);\n    }\n    if ($experiment) {\n      my @results = $self->result_files_to_array($experiment, $max_files);\n      $result = \\@results;\n      last;\n    }\n  }\n\n  if ($result) {\n    $self->status_ok($c, entity => $result);\n  } else {\n    $c->go('ReturnError', 'custom', [qq{experiment $id not found}]);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Ensembl REST API with Docker Compose\nDESCRIPTION: Command to start the Ensembl REST API using Docker Compose, which sets up all necessary services defined in the docker-compose.yml file.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/marker_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Links for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets up documentation links for the Ensembl REST API. It specifies URLs for various documentation resources including the REST API documentation and the Ensembl browser.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/transcript_supporting_feature.txt#2025-04-22_snippet_4\n\nLANGUAGE: Perl\nCODE:\n```\n  # Documentation\n  docs_url => 'https://rest.ensembl.org/documentation/',\n  rest_api_page => 'https://rest.ensembl.org/',\n  ensembl_url => 'https://www.ensembl.org',\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for User Account Endpoints in Ensembl REST API\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for user account endpoints in the Ensembl REST API. It includes paths for retrieving user information, registering new users, updating user details, and managing user groups and group memberships.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/ditag_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /user/whoami:\n    get:\n      summary: Who am I\n      description: If you are a user of this Ensembl REST API instance, then this function returns some basic information about you.\n      tags:\n        - User account\n        - Current development\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              examples:\n                whoami:\n                  value: |-\n                    { \"user\": \"ben\", \"administrator\": 1 }\n  /user/en/register:\n    post:\n      tags:\n        - User account\n        - Current development\n      summary: Register a user in Ensembl\n      description: Registers a user in Ensembl\n      responses:\n        201:\n          description: Register successful\n        401:\n          description: Authentication failure; provided credentials rejected\n        409:\n          description: Conflict; that username is already in use, or that email address is already registered\n        403:\n          description: Self-registration is disabled; your request has been forwarded to an administrator\n  /user/en/$USER/by_username:\n    get:\n      summary: Retrieve a user's details\n      description: Retrieves a user's details by username\n      parameters:\n      - name: USER\n        in: path\n        required: true\n        description: The username of the user you want information about\n        schema:\n          type: string\n      tags:\n        - User account\n        - Current development\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              examples:\n                user_details:\n                  value: |-\n                    { \"user_id\": \"7\", \"username\": \"ben\", \"email\": \"bs@example.org\" }\n  /user/en/change_details:\n    post:\n      tags:\n        - User account\n        - Current development\n      summary: Change user details.\n      description: Changes various user details. Must be authenticated.\n      responses:\n        201:\n          description: Updated OK\n        401:\n          description: Authentication failure; provided credentials rejected\n  /user/en/groups:\n    get:\n      summary: List user groups\n      description: Lists user groups\n      tags:\n        - User account\n        - Current development\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              examples:\n                groups:\n                  value: |-\n                    [\"Ensembl 106 users\", \"Ensembl 107 users\"]\n  /user/en/groups/$GROUP:\n    get:\n      summary: List group members\n      description: Lists the members of a user group\n      parameters:\n      - name: GROUP\n        in: path\n        required: true\n        description: The name of the user group you want information about\n        schema:\n          type: string\n      tags:\n        - User account\n        - Current development\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              examples:\n                members:\n                  value: |-\n                    [\"ben\",\"andy\"]\n\n```\n\n----------------------------------------\n\nTITLE: Handling Species Aliases in Ensembl REST API (Perl)\nDESCRIPTION: This function checks if a given species name is an alias and returns the correct species name. It uses a predefined hash of aliases to map alternative names to their correct counterparts.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/stable_id_event.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\nsub _alias_species {\n  my ($self, $species) = @_;\n  my $aliases = $self->aliases;\n  return $aliases->{$species} if exists $aliases->{$species};\n  return $species;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Ensembl REST API for Variant Phenotype Associations\nDESCRIPTION: Example URL for requesting phenotype data associated with the variant rs2299222. The query demonstrates the structure of the API endpoint for variant phenotype associations.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/external_synonym.txt#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://rest.ensembl.org/variation/homo_sapiens/rs2299222/phenotypes\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Server in Perl\nDESCRIPTION: This snippet defines the configuration for the Ensembl REST API server, including database connections, caching settings, and logging options. It sets up the necessary parameters for connecting to Ensembl databases and configuring the server's behavior.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/dependent_xref.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  default_view => 'JSON',\n  # User Agent to be used for requests to the plant's ensembl\n  plant_user_agent => 'EnsemblREST',\n  controller_class => 'EnsEMBL::REST::Controller',\n  species => [],\n  \n  # Debug configs\n  enable_jsonp => 1,\n  log_level => 'info',\n  log_dir   => '/ensembl/logs',\n  jsonp_callback_param => 'callback',\n  \n  # Middleware configs\n  # ...x-xss-protection header must be set to 0 or it plays havoc with GET requests containing %26 (as used\n  # in gene symbol search)\n  'Plugin::Plack::Builder' => {\n    '\\$app' => {\n      'enable \"XSS\"',\n      'header_field \"x-xss-protection\"',\n      'value \"0\"'\n    }\n  },\n\n  # Compress configs\n  'View::JSON' => {\n    encode_json => 0,\n  },\n  'View::GFF3' => {\n    sub_Type => 'gff3',\n    content_type => 'text/plain',\n  },\n  'Plugin::Cache' => {\n    backend => {\n      class => 'Cache::Memcached::libmemcached',\n      servers => ['localhost:11211'],\n      debug => 0,\n      compress_threshold => 10_000,\n    },\n    set_http_header => 1,\n    expires => 6*3600, #6hr default\n  },\n\n  'Model::Registry' => {\n    # Disable multi-db mode if you have only 1 database for all species\n    # and the registry files will discover them\n    # use_multidb => 0,\n\n    # Remove all species or add them all\n    species => [],\n\n    # Uncomment to enable indexing of Vega as well as Ensembl databases\n    # Use vdba to create this connection\n    # vega => {\n    #   user => 'username',\n    #   host => 'server.where.vega.lives.com',\n    #   port => 3306,\n    #   pass => 'password',\n    # },\n\n    # The key for this hash must match the final portion of the URLs you wish to use\n    compara => {\n      vertebrates => {\n        user => 'username',\n        host => 'server.where.vertebrates.compara.lives.com',\n        port => 3306,\n        pass => 'password',\n      },\n      plants => {\n        user => 'username',\n        host => 'server.where.plants.compara.lives.com',\n        port => 3306,\n        pass => 'password',\n      },\n      pan_homology => {\n        user => 'username',\n        host => 'server.where.pan.homology.compara.lives.com',\n        port => 3306,\n        pass => 'password',\n      },\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Caching for Ensembl REST API in Perl\nDESCRIPTION: This snippet configures the caching settings for the Ensembl REST API. It sets up memory-based caching with a maximum size and expiration time.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/intron_supporting_evidence.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nsub cache {\n  my ($self) = @_;\n  return {\n    default => {\n      class => 'CHI',\n      driver => 'Memory',\n      driver_config => {\n        global => 1,\n        max_size => 1000000,\n      },\n      expires_in => '1 day',\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Variant Information with Ensembl REST API\nDESCRIPTION: This snippet shows how to retrieve variant information using the Ensembl REST API. It demonstrates a request to get details about a specific variant in the human genome.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/ditag.txt#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /variation/human/rs56116432 HTTP/1.1\nHost: rest.ensembl.org\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Creating Subclasses with Moose in Perl\nDESCRIPTION: Example showing how to create a Moose subclass of REST::Controller using the 'extends' directive and declaring a 'registry' attribute. This demonstrates proper class inheritance structure for REST controllers.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/analysis_description.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\npackage Namespace::Controller::Type;\nuse Moose;\nuse namespace::autoclean;\n\nextends 'REST::Controller';\n\nhas 'registry' => ( is => 'ro', isa => 'Bio::EnsEMBL::Registry', );\n```\n\n----------------------------------------\n\nTITLE: Testing genome division filtering in Ensembl REST API with Perl\nDESCRIPTION: This test validates the division filtering functionality of the '/info/genomes/division' endpoint in the Ensembl REST API. It ensures the endpoint correctly filters genomes based on the specified division parameter.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/external_db.txt#2025-04-22_snippet_3\n\nLANGUAGE: perl\nCODE:\n```\n  {\n    my $division = 'ensembl';\n    my $division_json = RestHelper->get_json(\"$base/division/$division\");\n    my ($genome) = grep { $_->{name} eq 'homo_sapiens'} @{$division_json};\n    ok($genome, \"Asserting division filtering works\");\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication for Ensembl REST API in Perl\nDESCRIPTION: This code shows how to set up authentication for the Ensembl REST API. It includes configuration for enabling authentication, setting up lookup services, and defining allowed domains for CORS.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/marker.txt#2025-04-22_snippet_3\n\nLANGUAGE: perl\nCODE:\n```\n# Authentication configuration\nAuthentication:\n  # Set to 1 to explicitly enable (or explicitly disable) the X-Auth-Token header\n  use_auth_header: ~\n  # Configure the key lookup service\n  # Enable support for authentication\n  enable: 0\n  #If we want data to be served as JSON disable the redirect to the ID\n  disable_auth_on_jsonp: 0\n  #If looking for users they can be found here\n  cache_user_details: 1\n  user_details_ttl: 86400 # 24 hour cache\n  user_details_lookup_class: \"EnsEMBL::REST::User\"\n  user_details_lookup_method: \"find_user\"\n  # Allow CORS access to all domains\n  allow_all_domains: ~\n  # Used to specify the domains we will allow requests to come from\n  allowed_domains: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Moose Class for Ensembl REST API Controller in Perl\nDESCRIPTION: Finalizes the Moose class definition for the experiment controller. This is a standard Moose pattern that ensures proper class initialization and cleanup, and completes the class definition for the REST API controller.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/data_set.txt#2025-04-22_snippet_7\n\nLANGUAGE: perl\nCODE:\n```\n__PACKAGE__->meta->make_immutable;\n1;\n\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Ensembl REST API Docker Environment\nDESCRIPTION: Command to execute tests within the Docker container for the Ensembl REST API. This runs the test suite to verify the functionality of the API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/marker_feature.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose run --rm app prove -l\n```\n\n----------------------------------------\n\nTITLE: Starting Ensembl REST API server in development mode\nDESCRIPTION: Command to launch the Ensembl REST API server in development mode using the script/ensembl_rest_server.pl script. This runs the server with debugging enabled for development purposes.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/ditag.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ensembl-rest\nscript/ensembl_rest_server.pl -D\n```\n\n----------------------------------------\n\nTITLE: Implementing GET Method in REST Controller with Perl\nDESCRIPTION: Example implementing a GET method for a REST endpoint. Shows proper parameter handling, error checking, and response formatting according to the Ensembl REST API standards.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/analysis_description.txt#2025-04-22_snippet_3\n\nLANGUAGE: perl\nCODE:\n```\nsub id_GET {\n  my ($self, $c, $id) = @_;\n  # Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Database Connections in Perl\nDESCRIPTION: This snippet defines the database connections for the Ensembl REST API. It specifies the host, port, and user for accessing the Ensembl databases.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/intron_supporting_evidence.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nname = Ensembl REST API\nensembl_rest = 1\n\n<Model::Registry>\n  host = ensembldb.ensembl.org\n  port = 5306\n  user = anonymous\n  version = 108\n</Model::Registry>\n```\n\n----------------------------------------\n\nTITLE: Apache Configuration for Ensembl REST API\nDESCRIPTION: Apache server configuration directives for the Ensembl REST API, including virtual host setup, URL rewriting rules, logging configuration, and proxy settings to forward requests to the backend Starman server.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/species_tree_root.txt#2025-04-22_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\n<VirtualHost *:80>\n  ServerAdmin webmaster@rest.ensembl.org\n  ServerName rest.ensembl.org\n  ServerAlias beta-rest.ensembl.org\n  \n  # Required for PSGI\n  <Perl>\n    use Plack::Handler::Apache2;\n    Plack::Handler::Apache2->preload(\"/ensembl/ensembl-rest/configurations/production/psgi_ensrest.psgi\");\n  </Perl>\n  \n  <Location />\n    SetHandler perl-script\n    PerlResponseHandler Plack::Handler::Apache2\n    PerlSetVar psgi_app /ensembl/ensembl-rest/configurations/production/psgi_ensrest.psgi\n  </Location>\n\n  ErrorLog logs/rest.ensembl.org_error.log\n  CustomLog logs/rest.ensembl.org_access.log combined\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Database Connections and Settings in Perl\nDESCRIPTION: This code snippet defines the configuration for the Ensembl REST API, including database connections, API version, and content type settings. It specifies the databases to connect to, sets the API version, and defines content types for different data formats.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/unmapped_object.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  default_view => 'HTML',\n\n  # API\n  api_version   => 1,\n  api_subprefix => 'api',\n\n  service_name => 'Ensembl REST API',\n  species_url  => 'http://www.ensembl.org/info/about/species.html',\n  \n  jsonp => {\n    callback_param => 'callback',\n    callback_regexp => '^[\\w\\.]+$',\n  },\n\n  # Documentation (pod2html)\n  license_text => '<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/3.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"http://i.creativecommons.org/l/by/3.0/88x31.png\" /></a><br />This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by/3.0/\">Creative Commons Attribution 3.0 Unported License</a>',\n  \n  # Order these in reverse preference\n  content_type_pref => [qw/json xml stark sereal msgpack/],\n  \n  # Enable CORS\n  'Plugin::CrossOrigin' => { allow_origin => '*' },\n  \n  # Response compressor\n  'Plack::Middleware::Deflater' => {\n    #content_type => [qw/text/html text/plain text/javascript text/css application/javascript application/json/],\n    #memory_level => 5,\n  },\n\n  # Enable staticly hosted documentation\n  'Plugin::Static::Simple' => {\n    include_path => ['root'],\n    dirs => ['static'],\n  },\n\n  # Configure/override messenging\n  'Model::Documentation' => {\n    paths => [qw/root/documentation/],\n    index => 'index.md',\n  },\n\n  # These are the core databases\n  default_dbs => [qw/\n    core otherfeatures presite variation compara funcgen\n  /],\n\n  # Found in Ensembl Genomes\n  eg_dbs => [qw/\n    core otherfeatures presite variation funcgen compara\n  /],\n\n  meta_dbs => [qw/\n    core\n  /],\n\n  # Allowed characters for the simple_features parameters\n  simple_features_valid_chars => [qw/a c g t n/i],\n\n  # Controller/Model configuration\n  controller_conf => {\n    'TestExternalDb' => {\n      databases => [qw/test_external_db/],\n    },\n  },\n  model_conf => {\n    'GenomicFeatures' => {\n      allowed_feature_types => [qw/gene transcript exon intron/],\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets up the compression options for the Ensembl REST API responses. It enables gzip compression for specific content types.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/intron_supporting_evidence.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\nsub compress {\n  return {\n    enabled => 1,\n    types => [\n      'text/plain',\n      'text/html',\n      'text/xml',\n      'application/json',\n      'application/xml',\n    ]\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Ensembl REST API Server with Starman\nDESCRIPTION: Command to start the Ensembl REST API server using the Starman web server, specifying the port, the PSGI file to execute, and the number of workers.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/external_synonym.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ensembl-rest\nstarman -l :$ENSEMBL_REST_PORT ensembl_rest.psgi --workers 10\n```\n\n----------------------------------------\n\nTITLE: Installing Ensembl REST API Dependencies on Ubuntu/Debian\nDESCRIPTION: Commands to install the required system packages on Ubuntu/Debian-based systems before setting up the Ensembl REST API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/map.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install git cpanminus npm nodejs libpng-dev libgd-dev libssl-dev libdb-dev\nsudo npm install -g coffee-script nodemon\n```\n\n----------------------------------------\n\nTITLE: Testing version loading in Ensembl REST API\nDESCRIPTION: Tests that the Ensembl REST API properly loads version information from configuration. It checks whether the version information can be successfully loaded from the configuration file.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/dnafrag_region.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\nsub test_version : Test(5) {\n  my ($self) = @_;\n  my $cfg = $self->app_config();\n  \n  my $version = $cfg->{service_version};\n  \n  ok(defined $version, 'Version is defined');\n  note(\"Version is $version\");\n  cmp_ok($version, '>', 0, 'Version is greater than 0');\n  \n  my $major_version = $cfg->{service_major_version};\n  ok(defined $major_version, 'Major version is defined');\n  note(\"Major version is $major_version\");\n  \n  my $minor_version = $cfg->{service_minor_version};\n  ok(defined $minor_version, 'Minor version is defined');\n  note(\"Minor version is $minor_version\");\n  \n  my $expected_version = $major_version . '.' . $minor_version;\n  is($version, $expected_version, 'Major and minor add up to main version');\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Assembly Information in Ensembl REST API (Perl)\nDESCRIPTION: This function retrieves the assembly information for a given species. It uses the Ensembl API to access the species' meta container and fetch the assembly version.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/stable_id_event.txt#2025-04-22_snippet_3\n\nLANGUAGE: Perl\nCODE:\n```\nsub _assembly {\n  my ($self, $species) = @_;\n  my $dba = $self->_get_DBAdaptor($species);\n  return $dba->get_MetaContainer()->single_value_by_key('assembly.default');\n}\n```\n\n----------------------------------------\n\nTITLE: Testing taxonomy ancestors endpoint in Ensembl REST API with Perl\nDESCRIPTION: This test validates the '/taxonomy/ancestors' endpoint which returns taxonomic ancestors for a given ID. It verifies that important taxonomic ranks like Mammalia and Chordata are included in the result.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/external_db.txt#2025-04-22_snippet_12\n\nLANGUAGE: perl\nCODE:\n```\n  # Taxonomy ancestors endpoint\n  {\n    my $taxon_id = 9606;\n    my $taxonomy_json = RestHelper->get_json(\"taxonomy/ancestors/$taxon_id\");\n    cmp_ok(scalar(@{$taxonomy_json}), '>', 20, 'Got back at least 20 ancestors');\n    ok((grep { $_->{id} == 9605 } @{$taxonomy_json}), 'Expected taxon id found');\n    ok((grep { $_->{id} == 1 } @{$taxonomy_json}), 'Root taxon id found');\n    my @scinames = map { $_->{scientific_name} } @{$taxonomy_json};\n    ok((grep { $_ eq 'Homo' } @scinames), 'Homo genus found');\n    ok((grep { $_ eq 'Mammalia' } @scinames), 'Mammalian class found');\n    ok((grep { $_ eq 'Chordata' } @scinames), 'Chordata phylum found');\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Installing Ensembl REST API via git clone\nDESCRIPTION: Command for cloning the Ensembl REST API repository from GitHub, which is the first step in setting up the API for local use.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/gene_attrib.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Ensembl/ensembl-rest.git\n```\n\n----------------------------------------\n\nTITLE: Defining Coordinate Systems for Ensembl REST API (TSV)\nDESCRIPTION: This TSV (Tab-Separated Values) data defines three coordinate systems: contig, scaffold, and chromosome. Each row specifies properties such as version, rank, and attributes for a coordinate system.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/coord_system.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n1\t1\tcontig\t\\N\t3\tdefault_version,sequence_level\n2\t1\tscaffold\tGalgal4\t2\tdefault_version\n3\t1\tchromosome\tGalgal4\t1\tdefault_version\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection for Ensembl REST API in Perl\nDESCRIPTION: This snippet demonstrates how to configure database connectivity for the Ensembl REST API. It shows how to set up connections to Ensembl databases with specific parameters.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/marker.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\nModel::Registry:\n  host: ensembldb.ensembl.org\n  port: 3306\n  user: anonymous\n  verbose: 0\n\n  # Extra optional arguments for connecting to a database.\n  # Will use the given arguments for Database.connect()\n\n  # connection_timeout: 3\n  # disconnect_when_inactive: 1\n  # reconnect_when_lost: 1\n```\n\n----------------------------------------\n\nTITLE: Defining Ancestral Segment Configuration in Ensembl REST API\nDESCRIPTION: This line defines configuration parameters for an ancestral segment in the Ensembl REST API. It specifies the segment ID, version, type, and additional attributes.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/coord_system.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1\t1\tancestralsegment\t\\N\t1\tdefault_version,sequence_level\n```\n\n----------------------------------------\n\nTITLE: Extended Production Environment Configuration for Ensembl REST API\nDESCRIPTION: A more comprehensive configuration example for production deployments, showing various settings including databases, caching, and starman server configuration with environment variable references.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/map.txt#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\\nname: EnsEMBL::REST\\n# Disable compression in Plack/Starman because we are getting the nginx proxy to do gzip.\\n# If you're not exposing the app via nginx then set these values to 1.\\ndisable_compression: ${DISABLE_COMPRESSION-1}\\nplack_middlewares:\\n  - name: Deflater\\n    options:\\n      - varies\\n      - \\\"${PLACK_GZIP-0}\\\"\\nservice_name: ${SERVICE_NAME-ensembl}\\nstarman_config:\\n  listen:\\n    - ${LISTEN-:5000}\\ndo_not_deploy:\\n  - plugin\\n# For a production environment file\\nwww_root: ${WWW_ROOT-http://localhost:${PORT-5000}}\\nshow_data_structure_failures: 0\\n# Database access information\\nspecies:       # Homo sapiens       core 75\\nmouse:         # Mus musculus       core 75\\nrat:          # Rattus norvegicus  core 75\\nzebrafish:     # Danio rerio        core 75\\n# Log4perl configuration\\nlog4perl:\\n  config: ${HOME}/log4perl.conf\n```\n\n----------------------------------------\n\nTITLE: TSV Data Table with Genomic Identifiers and Statistical Values\nDESCRIPTION: This is a tab-separated values (TSV) file containing genomic or biological data with numeric identifiers and statistical measurements. The table has 7 columns that likely represent entity IDs, parent references, and statistical calculations used in the Ensembl REST API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/gene_tree_node.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n100215559\t100215557\t100215408\t69\t158\t0.0553033174228712\t\\N\n100215560\t100215559\t100215408\t70\t79\t0.00000123030864772833\t\\N\n100215562\t100215560\t100215408\t71\t76\t0.0543134227076781\t\\N\n100215437\t100215562\t100215408\t72\t73\t0.0888944595521743\t100240803\n100215414\t100215562\t100215408\t74\t75\t0.279298512226885\t100166821\n100215432\t100215560\t100215408\t77\t78\t0.147242877599723\t100047100\n100215565\t100215559\t100215408\t80\t157\t0.0293377034596416\t\\N\n100215567\t100215565\t100215408\t81\t102\t0.0608020947586249\t\\N\n100215568\t100215567\t100215408\t82\t99\t0.0219910808615219\t\\N\n100215572\t100215568\t100215408\t83\t96\t0.0301443726113714\t\\N\n100215578\t100215572\t100215408\t84\t89\t0.023471540168556\t\\N\n100215467\t100215578\t100215408\t85\t86\t0.0242697771033893\t100138860\n100215427\t100215578\t100215408\t87\t88\t0.119766283020646\t100244304\n100215575\t100215572\t100215408\t90\t95\t0.0291455967721777\t\\N\n100215430\t100215575\t100215408\t91\t92\t0.154985335964881\t100054946\n100215419\t100215575\t100215408\t93\t94\t0.195490101956449\t100008186\n100215436\t100215568\t100215408\t97\t98\t0.100166557107505\t100016850\n100215423\t100215567\t100215408\t100\t101\t0.086899716660184\t100002264\n100215579\t100215565\t100215408\t103\t156\t0.0667037754456101\t\\N\n100215585\t100215579\t100215408\t104\t137\t0.0149261677166421\t\\N\n100215586\t100215585\t100215408\t105\t134\t0.0622677332338402\t\\N\n100215587\t100215586\t100215408\t106\t131\t0.127102404133824\t\\N\n100215588\t100215587\t100215408\t107\t128\t0.0408720944333776\t\\N\n100215589\t100215588\t100215408\t108\t125\t0.0255864985414721\t\\N\n100215590\t100215589\t100215408\t109\t122\t0.0410069192332701\t\\N\n100215591\t100215590\t100215408\t110\t119\t0.0999088635075286\t\\N\n100215592\t100215591\t100215408\t111\t116\t0.0369312518282884\t\\N\n100215441\t100215592\t100215408\t112\t113\t0.00000123030864772833\t100003688\n100215452\t100215592\t100215408\t114\t115\t0.00000123030864772833\t100000065\n100215462\t100215591\t100215408\t117\t118\t0.0706635092294676\t100002260\n100215428\t100215590\t100215408\t120\t121\t0.0457936392748767\t100244296\n100215475\t100215589\t100215408\t123\t124\t0.0176185572671081\t100016849\n100215460\t100215588\t100215408\t126\t127\t0.0830651897586024\t100008184\n100215454\t100215587\t100215408\t129\t130\t0.0646531591251709\t100138857\n100215468\t100215586\t100215408\t132\t133\t0.150356230105841\t100100505\n100215451\t100215585\t100215408\t135\t136\t0.0872907440515901\t100227949\n100215581\t100215579\t100215408\t138\t155\t0.0366218938524216\t\\N\n100215582\t100215581\t100215408\t139\t144\t0.140503707232974\t\\N\n100215434\t100215582\t100215408\t140\t141\t0.0594049678423885\t100003686\n100215447\t100215582\t100215408\t142\t143\t0.310340927535165\t100054945\n100215583\t100215581\t100215408\t145\t154\t0.187376106539873\t\\N\n100215584\t100215583\t100215408\t146\t151\t0.0748606222606188\t\\N\n100215416\t100215584\t100215408\t147\t148\t0.00363614562123242\t100220007\n100215476\t100215584\t100215408\t149\t150\t0.266514227034879\t100220025\n100215433\t100215583\t100215408\t152\t153\t0.216674526904968\t100220003\n100215593\t100215557\t100215408\t159\t180\t0.076842118947066\t\\N\n100215594\t100215593\t100215408\t160\t177\t0.083925532313913\t\\N\n100215595\t100215594\t100215408\t161\t174\t0.03515874661077\t\\N\n100215597\t100215595\t100215408\t162\t167\t0.0698455005467025\t\\N\n100215418\t100215597\t100215408\t163\t164\t0.00000123030864772833\t100046335\n100215456\t100215597\t100215408\t165\t166\t0.0511681246513649\t100185036\n100215596\t100215595\t100215408\t168\t173\t0.0744151031365258\t\\N\n100215477\t100215596\t100215408\t169\t170\t0.00000123030864772833\t100132105\n100215445\t100215596\t100215408\t171\t172\t0.00000123030864772833\t100153475\n100215458\t100215594\t100215408\t175\t176\t0.00000123030864772833\t100124975\n100215448\t100215593\t100215408\t178\t179\t0.0343298047608653\t100094079\n100215449\t100215555\t100215408\t182\t183\t0.00000123030864772833\t100194492\n100215473\t100215553\t100215408\t185\t186\t0.0164130380062462\t100289437\n100215598\t100215520\t100215408\t190\t239\t0.0241854767349976\t\\N\n100215601\t100215598\t100215408\t191\t228\t0.0324363189170376\t\\N\n100215602\t100215601\t100215408\t192\t225\t0.0377178493008389\t\\N\n100215603\t100215602\t100215408\t193\t222\t0.0258657980876534\t\\N\n100215604\t100215603\t100215408\t194\t219\t0.0473055827586767\t\\N\n100215608\t100215604\t100215408\t195\t204\t0.0139416213042707\t\\N\n100215609\t100215608\t100215408\t196\t201\t0.0347361909532544\t\\N\n100215422\t100215609\t100215408\t197\t198\t0.00000123030864772833\t100032620\n100215439\t100215609\t100215408\t199\t200\t0.00000123030864772833\t100199937\n100215464\t100215608\t100215408\t202\t203\t0.0354354202262108\t100227479\n100215605\t100215604\t100215408\t205\t218\t0.0181456732670869\t\\N\n100215606\t100215605\t100215408\t206\t215\t0.0165709098427836\t\\N\n100215607\t100215606\t100215408\t207\t212\t0.0163920982626773\t\\N\n100215446\t100215607\t100215408\t208\t209\t0.00000123030864772833\t100178494\n100215431\t100215607\t100215408\t210\t211\t0.016399270468659\t100124962\n100215411\t100215606\t100215408\t213\t214\t0.0334040105654885\t100091903\n100215459\t100215605\t100215408\t216\t217\t0.00000123030864772833\t100006075\n100215421\t100215603\t100215408\t220\t221\t0.0653349139696567\t100133274\n100215426\t100215602\t100215408\t223\t224\t0.275157699797042\t100170436\n100215471\t100215601\t100215408\t226\t227\t0.0507590001203925\t100178710\n100215599\t100215598\t100215408\t229\t238\t0.0485037974312111\t\\N\n100215600\t100215599\t100215408\t230\t235\t0.0166081053410996\t\\N\n100215435\t100215600\t100215408\t231\t232\t0.00000123030864772833\t100207705\n100215440\t100215600\t100215408\t233\t234\t0.00000123030864772833\t100029371\n100215420\t100215599\t100215408\t236\t237\t0.0162552814813957\t100225049\n100215610\t100215519\t100215408\t241\t254\t0.0172511252788789\t\\N\n100215611\t100215610\t100215408\t242\t251\t0.0198018655120508\t\\N\n100215612\t100215611\t100215408\t243\t248\t0.106834699178194\t\\N\n100215409\t100215612\t100215408\t244\t245\t0.173434507895392\t100048212\n100215412\t100215612\t100215408\t246\t247\t0.204247913345189\t100042937\n100215461\t100215611\t100215408\t249\t250\t0.0719756385852417\t100167956\n100215425\t100215610\t100215408\t252\t253\t0.148300200013998\t100255328\n100215444\t100215518\t100215408\t256\t257\t0.484009813633794\t100166458\n100215470\t100215517\t100215408\t259\t260\t0.124236678127822\t100245823\n100215429\t100215516\t100215408\t262\t263\t0.184984758173844\t100086824\n100215410\t100215515\t100215408\t265\t266\t0.263507216689467\t100172734\n100215465\t100215408\t100215408\t268\t269\t0.0354429152747525\t100250572\n100215438\t100215408\t100215408\t270\t271\t0.0863188488518787\t100257358\n100204474\t\\N\t100204474\t0\t0\t0\t\\N\n100339417\t100204474\t100204474\t0\t0\t0\t\\N\n100339420\t100339417\t100339420\t1\t274\t0\t\\N\n100339693\t100339420\t100339420\t2\t91\t0.00183115\t\\N\n100339695\t100339693\t100339420\t3\t48\t0.0115068\t\\N\n100339698\t100339695\t100339420\t4\t29\t0.00442844\t\\N\n100339701\t100339698\t100339420\t5\t26\t0.00665063\t\\N\n100339703\t100339701\t100339420\t6\t15\t0.00533322\t\\N\n100339706\t100339703\t100339420\t7\t12\t0.0221844\t\\N\n100339444\t100339706\t100339420\t8\t9\t0.232078\t100255328\n100339508\t100339706\t100339420\t10\t11\t0.255607\t100086718\n100339500\t100339703\t100339420\t13\t14\t0.297864\t100220025\n100339712\t100339701\t100339420\t16\t25\t0.0206066\t\\N\n100339713\t100339712\t100339420\t17\t22\t0.0431068\t\\N\n100339446\t100339713\t100339420\t18\t19\t0.249427\t100048212\n100339423\t100339713\t100339420\t20\t21\t0.27797\t100170436\n100339438\t100339712\t100339420\t23\t24\t0.272303\t100042937\n100339523\t100339698\t100339420\t27\t28\t0.264414\t100178710\n100339717\t100339695\t100339420\t30\t47\t0.0146189\t\\N\n100339718\t100339717\t100339420\t31\t44\t0.111302\t\\N\n100339720\t100339718\t100339420\t32\t41\t0.025285\t\\N\n100339721\t100339720\t100339420\t33\t38\t0.0126358\t\\N\n100339455\t100339721\t100339420\t34\t35\t0.0490965\t100250572\n100339425\t100339721\t100339420\t36\t37\t0.0857349\t100257358\n100339457\t100339720\t100339420\t39\t40\t0.138104\t100172734\n100339439\t100339718\t100339420\t42\t43\t0.121422\t100245823\n100339467\t100339717\t100339420\t45\t46\t0.267853\t100086824\n100339722\t100339693\t100339420\t49\t90\t0.0475952\t\\N\n100339724\t100339722\t100339420\t50\t83\t0.0052487\t\\N\n100339725\t100339724\t100339420\t51\t56\t0.00927015\t\\N\n100339448\t100339725\t100339420\t52\t53\t0.304267\t100100505\n100339471\t100339725\t100339420\t54\t55\t0.366254\t100166458\n100339726\t100339724\t100339420\t57\t82\t0.056184\t\\N\n100339727\t100339726\t100339420\t58\t79\t0.0388335\t\\N\n100339729\t100339727\t100339420\t59\t72\t0.0480158\t\\N\n100339731\t100339729\t100339420\t60\t65\t0.00732649\t\\N\n100339488\t100339731\t100339420\t61\t62\t0.112051\t100016850\n100339495\t100339731\t100339420\t63\t64\t0.130373\t100244304\n100339730\t100339729\t100339420\t66\t71\t0.02551\t\\N\n100339436\t100339730\t100339420\t67\t68\t0.0979345\t100008186\n100339479\t100339730\t100339420\t69\t70\t0.108315\t100138860\n100339728\t100339727\t100339420\t73\t78\t0.0583627\t\\N\n100339527\t100339728\t100339420\t74\t75\t0.0849104\t100003686\n100339477\t100339728\t100339420\t76\t77\t0.101425\t100002264\n100339519\t100339726\t100339420\t80\t81\t0.239297\t100220003\n100339723\t100339722\t100339420\t84\t89\t0.0199445\t\\N\n100339473\t100339723\t100339420\t85\t86\t0.231465\t100220007\n100339445\t100339723\t100339420\t87\t88\t0.243843\t100054945\n100339567\t100339420\t100339420\t92\t273\t0.0365259\t\\N\n100339570\t100339567\t100339420\t93\t122\t0.0369041\t\\N\n100339572\t100339570\t100339420\t94\t119\t0.0368089\t\\N\n100339574\t100339572\t100339420\t95\t100\t0.0171586\t\\N\n100339539\t100339574\t100339420\t96\t97\t0.119152\t100138857\n100339486\t100339574\t100339420\t98\t99\t0.144999\t100008184\n100339576\t100339572\t100339420\t101\t118\t0.0250944\t\\N\n100339577\t100339576\t100339420\t102\t107\t0.0181468\t\\N\n100339432\t100339577\t100339420\t103\t104\t0.106542\t100016849\n100339502\t100339577\t100339420\t105\t106\t0.107331\t100244296\n100339580\t100339576\t100339420\t108\t117\t0.0500013\t\\N\n100339581\t100339580\t100339420\t109\t114\t0.0871159\t\\N\n100339496\t100339581\t100339420\t110\t111\t0.00252849\t100000065\n100339525\t100339581\t100339420\t112\t113\t0.00360648\t100003688\n100339481\t100339580\t100339420\t115\t116\t0.103068\t100002260\n100339428\t100339570\t100339420\t120\t121\t0.189119\t100227949\n100339583\t100339567\t100339420\t123\t272\t0.037153\t\\N\n100339588\t100339583\t100339420\t124\t261\t0.0120545\t\\N\n100339591\t100339588\t100339420\t125\t242\t0.00246166\t\\N\n100339593\t100339591\t100339420\t126\t239\t0.0178373\t\\N\n100339595\t100339593\t100339420\t127\t236\t0.0636943\t\\N\n100339629\t100339595\t100339420\t128\t173\t0.00645716\t\\N\n100339630\t100339629\t100339420\t129\t138\t0.0578512\t\\N\n100339632\t100339630\t100339420\t130\t135\t0.00817226\t\\N\n100339534\t100339632\t100339420\t131\t132\t0.00287232\t100029371\n100339504\t100339632\t100339420\t133\t134\t0.00712768\t100207705\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Caching and Rate Limiting in Perl\nDESCRIPTION: Sets up caching and rate limiting parameters for the Ensembl REST API. It configures cache drivers, cache expiration times, and rate limiting rules for different endpoints.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/splicing_transcript_pair.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\n  # Caching\n  cache => {\n    driver => 'CHI',\n    driver_args => {\n      root_dir => '/tmp/ensembl_rest_cache',\n      namespace => 'ensembl_rest',\n    },\n    global_ttl => '6 hours',\n    default_ttl => '1 hour',\n    routes => {\n      '/sequence/id' => {\n        ttl => '1 day',\n      },\n      '/vep' => {\n        ttl => '1 day',\n      },\n    },\n  },\n\n  # Rate limiting\n  rate_limit => {\n    default => {\n      limit => 15,\n      period => 60,\n    },\n    '/vep' => {\n      limit => 5,\n      period => 60,\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Catalyst Application in YAML\nDESCRIPTION: This YAML configuration file sets up the Catalyst application for the Ensembl REST API. It defines various plugins, middleware, and application-specific settings.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/simple_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: EnsEMBL::REST\ndefault_view: HTML\n\nPlugin::Cache:\n  backend:\n    class: CHI\n    driver: Memory\n    global: 1\n  \nPlugin::Session:\n  expires: 3600\n  rewrite: 0\n  storage: /tmp/ensrest/session\n\nController::Root:\n  # Set the actions in this controller to be registered with no prefix\n  # so they function identically to actions created in MyApp.pm\n  namespace: ''\n\nView::HTML:\n  TEMPLATE_EXTENSION: .tt\n  WRAPPER: wrapper.tt\n  \nModel::Documentation:\n  schema_class: EnsEMBL::REST::Model::Documentation::Schema\n\nModel::Registry:\n  host: ensembldb.ensembl.org\n  port: 3306\n  user: anonymous\n  version: 81\n\nPlugin::Static::Simple:\n  dirs:\n    - static\n  include_path:\n    - root\n  ignore_extensions:\n    - tt\n\n<Model::Lookup>\n  index_gene_by_type: 1\n  disconnect_if_inactive: 1\n  disconnect_if_inactive_interval: 1200\n</Model::Lookup>\n\ntruncation_length: 1000\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database for Sequence Ontology - Bash\nDESCRIPTION: Creates a new MySQL database to store Sequence Ontology data using the specified environment variables for MySQL host, user, and password. It sets DB name based on the user's name.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/testdata/ontology.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create the DB. \nexport MYSQL_HOST='127.0.0.1'\nexport MYSQL_USR='root'\nexport MYSQL_PASS=''\nexport DB=\"${USER}_so_ontology\"\nmysqladmin --host=$MYSQL_HOST --user=$MYSQL_USR --password=$MYSQL_PASS create $DB\n```\n\n----------------------------------------\n\nTITLE: Defining Project Dependencies in requirements.txt\nDESCRIPTION: This requirements.txt file lists the project dependencies, including specific versions of the requests library and other packages needed for the Ensembl REST API client.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/protein_align_feature.txt#2025-04-22_snippet_3\n\nLANGUAGE: Plain Text\nCODE:\n```\nrequests==2.25.1\ncertifi==2020.12.5\nchardet==4.0.0\nidna==2.10\nurllib3==1.26.4\n```\n\n----------------------------------------\n\nTITLE: Accessing Schema Data in REST API Endpoints in Perl\nDESCRIPTION: Example demonstrating how to access schema data within a REST API endpoint implementation. The code shows pattern for database interaction and data retrieval using the schema.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/gene_attrib.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\nsub get_alignment_by_region {\n  my ($self, $species, $region, $alignment_type, $alignment_id) = @_;\n  \n  my $c = $self->context();\n  my $schema = $c->model('Registry')->schema();\n  \n  my $genomic_align = $schema->resultset('GenomicAlignment')->find(\n    {\n      'species.name' => $species,\n      'region'       => $region,\n      'type'         => $alignment_type,\n      'id'           => $alignment_id,\n    },\n    {\n      join => ['species', 'alignment'],\n    }\n  );\n  \n  return $genomic_align;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Highlighting with HTML Class\nDESCRIPTION: Example of preventing syntax highlighting on a specific code block using the no-highlight class.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/root/static/js/highlight/README.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<pre><code class=\"no-highlight\">...</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections for Ensembl REST API in Perl\nDESCRIPTION: Sets up database connection parameters for the Ensembl REST API, including host, port, and user credentials. It also defines species aliases and data access configurations.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/operon_transcript.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nuse strict;\nuse warnings;\n\nsub setup_db_connections {\n  my $self = shift;\n  my $db_configs = {\n    mysql_host => $self->{mysql}->{host},\n    mysql_port => $self->{mysql}->{port},\n    mysql_user => $self->{mysql}->{user},\n    mysql_pass => $self->{mysql}->{pass},\n    #mysql_dbname => $self->{mysql}->{database}\n  };\n  \n  # Set species_alias if defined\n  if(exists $self->{species_alias}) {\n    $db_configs->{species_alias} = $self->{species_alias};\n  }\n  \n  # Add compara if defined\n  if(exists $self->{compara}) {\n    $db_configs->{compara} = $self->{compara};\n  }\n  \n  # Variation DB params;\n  if ( exists $self->{variation} ) {\n    $db_configs->{mysql_variation_host} = $self->{variation}->{host};\n    $db_configs->{mysql_variation_port} = $self->{variation}->{port};\n  }\n  \n  # Funcgen DB params;\n  if ( exists $self->{funcgen} ) {\n    $db_configs->{mysql_funcgen_host} = $self->{funcgen}->{host};\n    $db_configs->{mysql_funcgen_port} = $self->{funcgen}->{port};\n  }\n  \n  return $db_configs;\n}\n\n1;\n```\n\n----------------------------------------\n\nTITLE: Coordinate System Mapping TSV Data\nDESCRIPTION: Tab-separated values defining coordinate system configurations including system IDs, types, versions, and attributes. Maps relationships between different coordinate systems like chromosomes, contigs, and scaffolds across genome assemblies GRCh37 and GRCh38.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/coord_system.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n2472\tchromosome\tGRCh37\t1\tdefault_version\t76_37\t2\t1\t1\n2482\tclone\t\t3\tdefault_version\t706_154444\t4\t1\t1\n2483\tcontig\t\t4\tdefault_version,sequence_level\t706_154444\t1\t1\t1\n2484\tsupercontig\tGRCh37\t2\tdefault_version\t706_154444\t3\t1\t1\n2485\tlrg\t\t8\tdefault_version\t706_154444\t1003\t1\t1\n2472\tchromosome\tGRCh37\t1\tdefault_version\t706_154444\t2\t1\t1\n2482\tclone\t\t3\tdefault_version\t824_141157\t4\t1\t1\n2483\tcontig\t\t4\tdefault_version,sequence_level\t824_141157\t1\t1\t1\n2484\tsupercontig\tGRCh37\t2\tdefault_version\t824_141157\t3\t1\t1\n2485\tlrg\t\t8\tdefault_version\t824_141157\t1003\t1\t1\n2472\tchromosome\tGRCh37\t1\tdefault_version\t824_141157\t2\t1\t1\n2472\tchromosome\tGRCh38\t1\tdefault_version\t89_38\t4\t1\t1\n2473\tscaffold\tGRCh38\t2\tdefault_version\t89_38\t3\t1\t1\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Database Connections in Perl\nDESCRIPTION: This snippet defines database connection settings for the Ensembl REST API. It specifies the driver, host, port, user, and password for connecting to the database.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/associated_group.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nDatabaseDSN => [\n  {\n    driver => 'mysql',\n    host => 'ensembldb.ensembl.org',\n    port => 3306,\n    user => 'anonymous',\n    pass => '',\n  }\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Docker Image\nDESCRIPTION: Dockerfile for setting up the Ensembl REST API environment. It installs required dependencies, sets up the application directory, and configures the entry point.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/marker_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM ensemblorg/ensembl-web-libs:release-1.0.0\n\nCOPY cpanfile /root/\nRUN cpanm --installdeps /root\n\nRUN groupadd -r ensembl && useradd -r -g ensembl ensembl\nRUN mkdir -p /opt/apache2\nRUN chown ensembl:ensembl /opt/apache2\n\nCOPY . /opt/ensembl-rest\nWORKDIR /opt/ensembl-rest\n\nRUN chown -R ensembl:ensembl /opt/ensembl-rest\n\nUSER ensembl\n\nCMD [\"/opt/ensembl-rest/docker/start_ensrest.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Catalyst URL Pattern Matching for Ensembl REST API\nDESCRIPTION: Sets up URL pattern matching for the Ensembl REST API using Catalyst::TraitFor::Request::REST. It defines patterns for various API endpoints and their corresponding controllers.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/exon_transcript.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n# Configure the TraitFor::Request::REST plugin\n{\n  package EnsEMBL::REST;\n  use Moose;\n  use namespace::autoclean;\n  use Catalyst::TraitFor::Request::REST;\n  extends 'Catalyst';\n}\n\n__PACKAGE__->config(\n  'Plugin::Static::Simple' => {\n    dirs => [\n      'static'\n    ],\n    include_path => [\n      __PACKAGE__->path_to( 'root' ),\n    ],\n    debug => 1,\n  },\n  # Disable deprecated behavior needed by old applications\n  disable_component_resolution_regex_fallback => 1,\n);\n\n# Start the application\n__PACKAGE__->setup();\n```\n\n----------------------------------------\n\nTITLE: Defining error formatting function for Ensembl REST API in Perl\nDESCRIPTION: This snippet defines a function 'format_error' that formats error responses for the Ensembl REST API. It takes an exception object and returns a hash with standardized error information.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/splicing_event_feature.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\nsub format_error {\n  my ($c, $exception) = @_;\n  my $h;\n  if(ref($exception) eq 'ARRAY') {\n    $h = { error => $exception->[0], msg => $exception->[1]};\n  }\n  else {\n    if(blessed($exception) && $exception->isa('EnsEMBL::REST::Exception')) {\n      $h = {\n        error => $exception->error_code(),\n        msg => $exception->reason(),\n      };\n    }\n    else {\n      $h = {\n        error => 0,\n        msg => 'Unspecified error',\n      };\n    }\n  }\n  return $h;\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping MySQL Database - Bash\nDESCRIPTION: Uses a script to dump the contents of the MySQL database with options for verbosity and test compatibility. The results are stored in a specified directory.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/testdata/ontology.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Dump\nensembl/misc-scripts/db/dump_mysql.pl --host $MYSQL_HOST --user=$MYSQL_USR --pass=$MYSQL_PASS --database $DB --verbose --testcompatible --directory /tmp\n```\n\n----------------------------------------\n\nTITLE: Defining Ensembl REST API Endpoint and Making GET Request in Python\nDESCRIPTION: This code defines the Ensembl REST API endpoint and makes a GET request to retrieve gene information. It specifies the gene ID and desired response format as URL parameters.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/protein_align_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nserver = \"https://rest.ensembl.org\"\nextension = \"/lookup/id/ENSG00000157764?\"\n\nr = requests.get(server + extension, headers={ \"Content-Type\" : \"application/json\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring Caching for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets up caching for the Ensembl REST API. It specifies the cache implementation (CHI::Driver::Memcached::libmemcached) and the memcached server details.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/transcript_supporting_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\n  cache => {\n    #use_local => 1,\n    implementation => 'CHI::Driver::Memcached::libmemcached',\n    memcached => [\n      'server1:11211',\n      'server2:11211',\n    ],\n  },\n```\n\n----------------------------------------\n\nTITLE: Fetching variant consequences with Perl and HTTP::Tiny\nDESCRIPTION: This code demonstrates how to use Perl with HTTP::Tiny to fetch variant consequences from the Ensembl REST API. It performs a POST request to the variant effect predictor endpoint with a JSON payload containing variant data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon_transcript_gene.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\nuse strict;\nuse warnings;\nuse HTTP::Tiny;\nuse JSON;\n\nmy $http = HTTP::Tiny->new();\n\nmy $server = 'https://rest.ensembl.org';\nmy $ext = '/vep/human/hgvs';\nmy $response = $http->request('POST', $server.$ext, {\n  headers => { 'Content-type' => 'application/json' },\n  content => '{ \"hgvs_notations\" : [\"ENST00000526603.1:c.1431_1433delTTC\",\"ENST00000528897.1:c.1431_1433delTTC\"] }'\n});\n\ndie \"Failed!\\n\" unless $response->{success};\n\nif(length $response->{content}) {\n  my $hash = decode_json($response->{content});\n  print $response->{content};\n}\n```\n\n----------------------------------------\n\nTITLE: Loading OBO File into MySQL Database - Perl\nDESCRIPTION: Uses a Perl script to load the downloaded OBO file into the MySQL database. Requires Perl and the load_OBO_file.pl script to be available.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/testdata/ontology.txt#2025-04-22_snippet_3\n\nLANGUAGE: perl\nCODE:\n```\n# Load\nperl ensembl/misc-scripts/ontology/scripts/load_OBO_file.pl -host $MYSQL_HOST -user $MYSQL_USR -pass $MYSQL_PASS -name $DB -f so.obo -o SO\n```\n\n----------------------------------------\n\nTITLE: Fetching variant consequences with Python and requests\nDESCRIPTION: This code demonstrates how to use Python with the requests library to fetch variant consequences from the Ensembl REST API. It performs a POST request to the variant effect predictor endpoint with a JSON payload containing variant data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon_transcript_gene.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests, sys\n\nserver = \"https://rest.ensembl.org\"\next = \"/vep/human/hgvs\"\n\nheaders={ \"Content-Type\" : \"application/json\"}\n\ndata='{ \"hgvs_notations\" : [\"ENST00000526603.1:c.1431_1433delTTC\",\"ENST00000528897.1:c.1431_1433delTTC\"] }'\n\nr = requests.post(server+ext, headers=headers, data=data)\n \nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \nprintable = r.json()\nprint(printable)\n```\n\n----------------------------------------\n\nTITLE: Fetching Variant Recurrence Data with Ensembl REST API\nDESCRIPTION: This code snippet illustrates how to query the Ensembl REST API for variant recurrence data. It shows a GET request to the /variation/human endpoint with a specific variant ID to retrieve population genetics information.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/density_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://rest.ensembl.org/variation/human/rs56116432?content-type=application/json' | json_pp\n```\n\n----------------------------------------\n\nTITLE: Starting the Ensembl REST API server\nDESCRIPTION: Command to start the Ensembl REST API server, which makes the API available for use. This starts the server with default settings.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/gene_attrib.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nplackup -p 3000 ensembl-rest/configurations/production/01_ensrest.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Caching in Perl\nDESCRIPTION: Sets up caching options for the Ensembl REST API, including memcached servers and cache expiration times for different types of data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/xref.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nsub cache {\n  my ($self) = @_;\n  return {\n    enabled => 0,\n    memcached => ['127.0.0.1:11211'],\n    dir => '/path/to/cache',\n    expires => {\n      gene => '1 day',\n      sequence => '1 day',\n      compara => '1 day',\n      variation => '1 day',\n      regulation => '1 day',\n      lookup => '1 day',\n      default => '1 day'\n    },\n    auto_purge => 0,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Ensembl REST API\nDESCRIPTION: Docker Compose configuration for setting up the Ensembl REST API service. It defines the service, build context, port mapping, and environment variables.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/marker_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3'\n\nservices:\n  ensrest:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"3000:3000\"\n    environment:\n      - ENSEMBL_REST_CONFIG=/opt/ensembl-rest/configurations/production/ensembl_rest.conf\n      - ENSEMBL_REST_LOG4PERL=/opt/ensembl-rest/configurations/production/log4perl.conf\n    volumes:\n      - ./configurations:/opt/ensembl-rest/configurations\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Logging in Perl\nDESCRIPTION: Sets up logging options for the Ensembl REST API, including log file location and logging levels for different components.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/xref.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\nsub log {\n  my ($self) = @_;\n  return {\n    logger => 'console',\n    log_file => '/path/to/log/file.log',\n    log_format => '[%d] [%p] %m%n',\n    log_level => 'warn',\n    log_stats => 0,\n    stats_file => '/path/to/stats/file.log',\n    stats_rotation => 'weekly',\n    log_request_parameters => 0,\n    config => {\n      'Log::Log4perl::Logger' => {\n        'EBI::Log::Appender::File' => {\n          Name => 'log_file',\n          layout => 'Log::Log4perl::Layout::PatternLayout',\n          ConversionPattern => '[%d] [%p] [%x] %m%n'\n        }\n      }\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: URL Template Example for REST API\nDESCRIPTION: This snippet shows a URL template syntax for defining an API endpoint. It includes placeholders for parameters in curly braces and indicates optional parameters with question marks, following standard RESTful conventions.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/alt_allele.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\n/sequence/id/{id}?{optional_param}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Variant Consequences with Ensembl REST API\nDESCRIPTION: Example JSON response for variant consequence data from the Ensembl REST API. The response shows the effects of a specific genetic variant, including affected transcripts and potential impacts.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/stable_id_history.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variant_allele\": \"G\",\n  \"colocated_variants\": [\n    {\n      \"frequencies\": {\n        \"amr\": {\n          \"g\": 0.0144,\n          \"a\": 0.9856\n        },\n        \"eas\": {\n          \"g\": 0.0149,\n          \"a\": 0.9851\n        }\n      },\n      \"id\": \"rs1333049\"\n    }\n  ],\n  \"most_severe_consequence\": \"downstream_gene_variant\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Homologues of Human Gene with curl\nDESCRIPTION: A shell command to fetch homologues of a human gene (BRCA2) across mouse, with alignment statistics. It uses the /homology/id endpoint to retrieve evolutionary relationship data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/protein_feature.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET \"https://rest.ensembl.org/homology/id/ENSG00000139618?format=condensed;type=orthologues;target_species=mus_musculus\" -H \"Content-Type:application/json\"\n```\n\n----------------------------------------\n\nTITLE: Apache Load Balancing Configuration for Ensembl REST API\nDESCRIPTION: Apache load balancing setup for Ensembl REST API that proxies requests to multiple Starman server instances running on different ports, with health check and load balancing directives.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/species_tree_root.txt#2025-04-22_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\n<VirtualHost *:80>\n  ServerAdmin webmaster@rest.ensembl.org\n  ServerName rest.ensembl.org\n  ServerAlias beta-rest.ensembl.org\n\n  # Standard directives\n  DocumentRoot /ensembl/ensembl-rest/root\n  ErrorLog logs/rest.ensembl.org_error.log\n  CustomLog logs/rest.ensembl.org_access.log combined\n  \n  RewriteEngine On\n  RewriteRule ^/rhodecode(.*)$ http://host.docker.internal:5000/rhodecode$1 [P]\n\n  <Proxy balancer://ensrest>\n    BalancerMember http://127.0.0.1:5000 connectiontimeout=10 timeout=600 ttl=120\n    BalancerMember http://127.0.0.1:5001 connectiontimeout=10 timeout=600 ttl=120\n    BalancerMember http://127.0.0.1:5002 connectiontimeout=10 timeout=600 ttl=120\n    BalancerMember http://127.0.0.1:5003 connectiontimeout=10 timeout=600 ttl=120\n    \n    ProxySet lbmethod=byrequests\n    ProxySet maxattempts=1\n  </Proxy>\n  \n  ProxyRequests Off\n  ProxyPreserveHost Off\n  ProxyPass / balancer://ensrest/\n  ProxyPassReverse / balancer://ensrest/\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sequence Variations with Ensembl REST API in Python\nDESCRIPTION: This snippet shows how to query the Ensembl REST API for genomic variations using Python requests. It specifies the genomic region and requests variation data in JSON format with appropriate headers.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/unmapped_object.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests, sys\n\nserver = \"https://rest.ensembl.org\"\next = \"/overlap/region/human/7:140424943-140624564?feature=variation;content-type=application/json\"\n\nr = requests.get(server+ext, headers={ \"Content-Type\" : \"application/json\"})\n\nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \ndecode = r.json()\nfor record in decode:\n  print(record['id'])\n```\n\n----------------------------------------\n\nTITLE: Dropping MySQL Database - Bash\nDESCRIPTION: Drops the MySQL database once it is no longer needed, cleaning up any resources used.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/testdata/ontology.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Drop DB\nmysqladmin --host=$MYSQL_HOST --user=$MYSQL_USR --password=$MYSQL_PASS drop $DB\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Parameters for Ensembl REST API Testing\nDESCRIPTION: This configuration snippet defines URL parameters needed to access the Ensembl REST API server during testing. It specifies base URLs, port settings, and additional parameters required for test connections.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/repeat_consensus.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\n{\n  -http_root      => '/ensembl-rest',\n  -basic_auth     => 0,\n  -content_type   => 'text/xml; charset=utf-8',\n  -base_url       => 'http://127.0.0.1:3000/',\n  -port           => 3000,\n\n  -username       => 'user',\n  -password       => 'pass',\n  -release_suffix => 0,  # don't say /ensembl-rest/v${release_version}, default is 1\n\n  -doc_root       => 'http://127.0.0.1:3000',\n  -proxy          => 'http://127.0.0.1:3000',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Server in Perl\nDESCRIPTION: This snippet defines the configuration for the Ensembl REST API server. It specifies the name, connection details, plugins to be used, and various server parameters such as default content type and documentation settings.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/qtl_synonym.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  using => ['Catalyst::Plugin::ConfigLoader'],\n\n  'Plugin::Static::Simple' => {\n    dirs => [\n      'static'\n    ],\n    include_path => [\n      __PACKAGE__->path_to('root'),\n    ],\n    debug => 1,\n  },\n\n  'Plugin::Cache' => {\n    backend => {\n      cache_root => '/tmp/ensrest',\n      default_expires_in => '1 day',\n    }\n  },\n\n  service_name => 'Ensembl REST API',\n  service_logo => 'static/img/e-ensembl.png',\n  service_parent  => 'Ensembl',\n  copyright_footer => '<p class=\"center\">Copyright &copy; 1999-2024 EMBL-EBI</p>',\n\n  jsonp => {\n    callback_param => 'callback',\n    allow_callback => 1,\n  },\n\n  enable_cors => 1,\n  default_view => 'HTML',\n\n  # List of allowed content types, using X- prefixed ones means we don't\n  # have to generate Vary header data. Mentioning XML & JSON first forces them\n  # to be preferred when asking for HTML as well\n  map_content_type => {\n    'X-www-form-urlencoded'    => ['application/x-www-form-urlencoded', 'application/x-www-form-urlencoded-urlencoded'],\n    'X-application-javascript'  => ['application/javascript', 'text/javascript', 'application/x-javascript'],\n    'X-text-html'               => ['text/html'],\n    'X-text-plain'              => ['text/plain'],\n    'X-text-xml'                => ['text/xml'],\n    'X-application-xml'         => ['application/xml'],\n    'X-application-json'        => ['application/json'],\n    'X-text-yaml'               => ['text/yaml'],\n  },\n\n  default_content_type => 'application/json',\n\n  # Extend caching time to 24 hours\n  <cache>\n    default_expires '24 hours'\n  </cache>\n\n  # Make maximum use of mod_perl\n  <psgi_config>\n    setup_engine 'PSGI::Engine::Apache2'\n  </psgi_config>\n\n  <Controller::Archive::Sequence>\n    default_format json\n  </Controller::Archive::Sequence>\n\n  <View::GFF3>\n    default_version 3\n  </View::GFF3>\n\n  <Plugin::Cache>\n    <backend>\n      class = CHI\n      driver = Memory\n      global = 1\n    </backend>\n  </Plugin::Cache>\n\n  <Model::Documentation>\n    paths = [root/documentation]\n    directory = root/documentation\n    index = /index.md\n  </Model::Documentation>\n\n  <View::Documentation::HTML>\n    wrapper = wrapper.tt\n    renderer = pod_simple\n    content_type = text/html\n    allow_all_path_traversals = 1\n  </View::Documentation::HTML>\n\n  <Model::Lookup>\n    index_enabled = 0\n  </Model::Lookup>\n\n  <Model::Compara>\n    method_link_type_homologues = ['ENSEMBL_ORTHOLOGUES']\n  </Model::Compara>\n\n  <Model::VEP>\n    rest_max_num_consequences = 1000\n  </Model::VEP>\n\n  <Model::ExternalDB>\n    dbname = ensembl_external_db\n  </Model::ExternalDB>\n\n  <Model::Homo_sapiens>\n    default_viewpoint_species = homo_sapiens\n  </Model::Homo_sapiens>\n\n  <Controller::Overlap>\n    # Set to 1 to enable the /overlap/region/:species/:region endpoint\n    enable_feature_type = 1\n  </Controller::Overlap>\n\n  <Controller::Regulatory>\n    default_microarray = HumanWG_6_V3\n  </Controller::Regulatory>\n\n  <Controller::Ontology>\n    ontology_name = GO\n  </Controller::Ontology>\n\n  <Plugin::Session>\n    expires 3600\n  </Plugin::Session>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Daemontools Log Service for Ensembl REST\nDESCRIPTION: Configuration for setting up the log service for an Ensembl REST microservice using Daemontools, directing main log and error log to appropriate files.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho '#!/bin/bash\nexec setuidgid $DAEMONTOOLS_USER multilog t s10485760 n10 /path/to/logdir' > $SPATH/$SERVICE/log/run\nchmod +x $SPATH/$SERVICE/log/run\n```\n\n----------------------------------------\n\nTITLE: Configuring Caching Options for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets up caching options for the Ensembl REST API. It specifies the cache type as CHI, sets the driver to Memory, and defines the global and default TTLs (Time To Live) for cached data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/operon_transcript_gene.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  use_cache => 1,\n  cache_type => 'CHI',\n  cache_args => {\n    driver => 'Memory',\n    global_expires_in => '1 day',\n    expires_in => '1 hour',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Ensembl REST API Server\nDESCRIPTION: Shell script for starting the Ensembl REST API server. It sets up the environment, configures the server, and starts it using starman.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/marker_feature.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/bash\n\ncd /opt/ensembl-rest\n\nexport PERL5LIB=$PERL5LIB:/opt/ensembl-rest/lib\nexport ENSEMBL_REST_CONFIG=${ENSEMBL_REST_CONFIG:-/opt/ensembl-rest/configurations/production/ensembl_rest.conf}\nexport ENSEMBL_REST_LOG4PERL=${ENSEMBL_REST_LOG4PERL:-/opt/ensembl-rest/configurations/production/log4perl.conf}\n\nplackup -s Starman --workers=10 --max-requests=10000 \\\n  -E production -p 3000 -a /opt/ensembl-rest/ensembl_rest.psgi\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API with Perl\nDESCRIPTION: Perl configuration code for the Ensembl REST API. This snippet sets up the service parameters including the service name, default response format, and database connection details.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/analysis_description.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\n<Model::Lookup>\n  lookup_model = EnsEMBL::REST::Model::Lookup\n</Model::Lookup>\n\n<Model::Taxonomy>\n  taxonomy_model = EnsEMBL::REST::Model::Taxonomy\n  allowed_integrations = [ ga4gh, ensembl_compara, ensembl_bacteria, ensembl_fungi, ensembl_metazoa, ensembl_plants, ensembl_protists ]\n</Model::Taxonomy>\n\n<Model::Blast>\n  blast_model = EnsEMBL::REST::Model::ga4gh::Blast\n</Model::Blast>\n\n<Model::Vep>\n  vep_model = EnsEMBL::REST::Model::VEP\n</Model::Vep>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ensembl REST API Logging Configuration in Perl\nDESCRIPTION: This snippet configures logging settings for the Ensembl REST API. It specifies the log file path, logging level, and log4perl configuration file location.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/associated_group.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\nlog4perl => {\n  config => {\n    file => {__path_to(log4perl.conf)__},\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Logic for Ensembl REST API Requests in Node.js\nDESCRIPTION: This snippet shows how to implement retry logic when making requests to the Ensembl REST API. It uses a recursive function to attempt the request multiple times with increasing delays between attempts, providing better reliability when dealing with network issues or API rate limits.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/species_set_tag.txt#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar request = require('request');\n\nfunction fetchWithRetry(uri, headers, timeout, retries, retryDelay, backoffRate, callback) {\n  if (retries === 0) {\n    callback(new Error('Maximum retries reached'));\n    return;\n  }\n  \n  var requestOptions = {\n    uri: uri,\n    headers: headers,\n    timeout: timeout\n  };\n  \n  request(requestOptions, function(error, response, body) {\n    if (error || response.statusCode !== 200) {\n      console.log(`Attempt failed, retrying in ${retryDelay}ms...`);\n      setTimeout(function() {\n        fetchWithRetry(\n          uri, \n          headers, \n          timeout, \n          retries - 1, \n          retryDelay * backoffRate,\n          backoffRate, \n          callback\n        );\n      }, retryDelay);\n    } else {\n      callback(null, JSON.parse(body));\n    }\n  });\n}\n\n// Example usage\nfetchWithRetry(\n  'https://rest.ensembl.org/sequence/id/ENSG00000157764?content-type=application/json',\n  { 'User-Agent': 'Node.js' },\n  5000,  // timeout in ms\n  3,     // number of retries\n  1000,  // initial retry delay in ms\n  2,     // backoff rate multiplier\n  function(error, data) {\n    if (error) console.error(error);\n    else console.log(data);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Cleaning Species Names in Ensembl REST API (Perl)\nDESCRIPTION: This function cleans up species names by removing underscores and converting to lowercase. It's used to standardize species input for further processing in the API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/stable_id_event.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\nsub _clean_species_name {\n  my ($self, $species) = @_;\n  $species =~ s/[^A-Za-z0-9_]/_/g;\n  $species = lc($species);\n  return $species;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache2 for Ensembl REST API in Debian Pre-installation\nDESCRIPTION: This script configures Apache2 as the web server for the Ensembl REST API during Debian package pre-installation. It sets up the web server type, domain name, and automatic server start configurations.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/density_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nset -e\n\n. /usr/share/debconf/confmodule\n\ndb_input high ensrest/server_type || true\ndb_go\n\ndb_get ensrest/server_type\nSERVER_TYPE=\"$RET\"\n\nif [ \"$SERVER_TYPE\" = \"apache2\" ]; then\n  db_input high ensrest/server_name || true\n  db_go\n\n  db_input high ensrest/server_aliases || true\n  db_go\n\n  db_input high ensrest/start || true\n  db_go\nfi\n```\n\n----------------------------------------\n\nTITLE: Retrieving Variant Data with Python for Ensembl REST API\nDESCRIPTION: This Python example shows how to retrieve variant data from the Ensembl REST API. It uses the requests library to make a GET request to the variant lookup endpoint and processes the JSON response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/homology.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests, sys\n \nserver = \"https://rest.ensembl.org\"\next = \"/variant/human/rs56116432?\"\n \nr = requests.get(server+ext, headers={ \"Content-Type\" : \"application/json\"})\n \nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \ndecoded = r.json()\nprint(repr(decoded))\n\n```\n\n----------------------------------------\n\nTITLE: Inserting Chicken Genome Metadata in SQL\nDESCRIPTION: This SQL snippet inserts metadata entries for the chicken genome, including assembly information, species classification, and various database attributes. It uses the meta table structure common in Ensembl core databases.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/meta.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO meta (meta_id, species_id, meta_key, meta_value) VALUES\n(1, 1, 'assembly.coverage_depth', 'high'),\n(2, 1, 'assembly.date', '2011-11'),\n(3, 1, 'assembly.default', 'Galgal4'),\n(4, 1, 'assembly.name', 'Galgal4'),\n(5, 1, 'genebuild.id', '40'),\n(6, 1, 'genebuild.start_date', '2011-12-Ensembl'),\n(7, 1, 'repeat.analysis', 'repeatmask'),\n(8, 1, 'repeat.analysis', 'dust'),\n(9, 1, 'repeat.analysis', 'trf'),\n(10, 1, 'assembly.accession', 'GCA_000002315.2');\n```\n\n----------------------------------------\n\nTITLE: Creating API version test class in Perl\nDESCRIPTION: Defines a test class for checking API version loading with proper test configurations. It extends the EnsEMBL::REST::Test::Rest class and imports necessary test utilities.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/dnafrag_region.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\npackage LoadingTest;\n\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse Test::Differences;\nuse Test::Deep;\n\nuse JSON;\nuse HTTP::Request;\n\nuse EnsEMBL::REST::Test::Rest;\n\nuse base qw(EnsEMBL::REST::Test::Rest);\n\nsub get_test_config {\n  return {\n    no_catalyst => 1\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Ensembl REST API Server\nDESCRIPTION: This Perl script starts the Ensembl REST API server. It sets up the necessary environment variables and executes the server with specified parameters.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/operon_transcript.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\n#!/usr/bin/env perl\n\nBEGIN {\n  use Cwd;\n  my $root = getcwd;\n  unshift @INC, \"$root/lib\";\n  unshift @INC, \"$root/../ensembl/modules\";\n  unshift @INC, \"$root/../ensembl-variation/modules\";\n  unshift @INC, \"$root/../ensembl-funcgen/modules\";\n  unshift @INC, \"$root/../ensembl-compara/modules\";\n  unshift @INC, \"$root/../ensembl-metadata/modules\";\n}\n\nuse Plack::Runner;\n\nuse strict;\n\nuse warnings;\n\nmy $app = 'EnsEMBL::REST';\nmy $psgi = $app->psgi_app;\n\nmy $runner = Plack::Runner->new();\n$runner->parse_options(@ARGV);\n\nmy $pid_file = '/var/run/ensrest.pid';\n\n$ENV{ENSEMBL_REST_LOG4PERL} = \"$ENV{HOME}/ensembl-rest/log4perl.conf\";\n$ENV{ENS_REST_LOG_ROOT} = $ENV{HOME};\n$ENV{PERL5LIB} = join ':', @INC;\n\nmy $worker_connections = 100;\n$runner->run($psgi);\n```\n\n----------------------------------------\n\nTITLE: Apache2 Configuration for Ensembl REST Microservice\nDESCRIPTION: Virtual host configuration for integrating Ensembl REST with Apache2, including proxy settings, load balancing, and worker configuration.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon.txt#2025-04-22_snippet_3\n\nLANGUAGE: apache\nCODE:\n```\n<VirtualHost *:80>\n  ServerAdmin webmaster@localhost\n  ServerName ${SERVER_NAME}\n\n  DocumentRoot /path/to/ensembl/rest/root\n\n  <Proxy balancer://ensemblrestcluster>\n    BalancerMember http://127.0.0.1:5000\n    BalancerMember http://127.0.0.1:5001\n    BalancerMember http://127.0.0.1:5002\n    BalancerMember http://127.0.0.1:5003\n    BalancerMember http://127.0.0.1:5004\n  </Proxy>\n\n  ProxyPass / balancer://ensemblrestcluster/\n  ProxyPassReverse / balancer://ensemblrestcluster/\n\n  ErrorLog ${APACHE_LOG_DIR}/error.log\n\n  # Possible values include: debug, info, notice, warn, error, crit,\n  # alert, emerg.\n  LogLevel warn\n  \n  CustomLog ${APACHE_LOG_DIR}/access.log combined\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ensembl REST API Environment\nDESCRIPTION: Shell script for setting up the Ensembl REST API environment. It exports necessary environment variables and sets up the PERL5LIB path.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/unmapped_object.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/sh\n\nexport PERL5LIB=$PWD/lib:$PWD/../ensembl/modules:$PWD/../bioperl-live\nexport ENSEMBL_REST_CONFIG=$PWD/configurations/production\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Settings for Ensembl REST API in Perl\nDESCRIPTION: This snippet defines cache settings for the Ensembl REST API. It specifies the default TTL (Time To Live) for cached data and sets up different cache regions with their respective TTLs.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/translation_attrib.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nsub cache_settings {\n  return {\n    default_ttl => 3600,\n    regions => {\n      sequence => {\n        ttl => 86400,\n      },\n      lookup => {\n        ttl => 7200,\n      },\n      info => {\n        ttl => 7200,\n      },\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Memcached on Ubuntu\nDESCRIPTION: Commands for installing Memcached server on Ubuntu systems to support caching functionality in the Ensembl REST API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/dnac.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt-get install memcached\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Server in Perl\nDESCRIPTION: This snippet defines the configuration for the Ensembl REST API server. It includes settings for database connections, caching, and API rate limiting. The configuration uses the Catalyst framework and sets up various plugins and middleware.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/dna_align_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'EnsEMBL::REST',\n  using_frontend_proxy => 1,\n  user_agent => 'EnsemblREST/' . $SiteDefs::ENSEMBL_REST_VERSION,\n  encoding => 'utf-8',\n  default_view => 'HTML',\n  session => { storage => 'Memory', },\n\n  # Order of Serialisers is important. Webpages need to go at the end\n  # because of the Accept header mangling.\n  enable_jsonview => 1,\n  enable_xmlview => 1,\n  enable_seqview => 1,\n  enable_ioview => 1,\n  enable_tsvview => 1,\n  enable_vcfvcfview => 1,\n  enable_vcfgvfview => 1,\n  enable_gffview => 1,\n  enable_gff3view => 1,\n  enable_proteinfeatures_view => 1,\n  enable_phyloxml_view => 1,\n  enable_nhx_view => 1,\n  enable_yaml => 1,\n\n  plugins => [\n    'EnsEMBL::REST::Plugin::Cache',\n    'EnsEMBL::REST::Plugin::Gzip',\n    'EnsEMBL::REST::Plugin::Json',\n    'EnsEMBL::REST::Plugin::Html',\n    'EnsEMBL::REST::Plugin::Cors',\n    'EnsEMBL::REST::Plugin::EnsemblPostrequisite',\n    'EnsEMBL::REST::Plugin::RequestLogger',\n  ],\n\n  # Disable compression by setting to 0\n  compress_body => 1,\n\n  # Set to 1 to force absolute URLs in stash\n  absolute_urls => 0,\n\n  # Enable CORS sharing resources accoss domains\n  cors => {\n   allowed_origins => ['*'],\n   allowed_methods => ['GET', 'POST', 'OPTIONS'],\n   allow_credentials => 0,\n   max_age => 86400,\n  },\n\n  # Enable HTTP request rate limiting\n  'Plugin::RateLimiting' => {\n    enabled => 1,\n    rate => \"100/hour\",\n    blacklist_rate => \"1000/hour\",\n    whitelist_rate => \"1000/hour\",\n    authentication_required_error_message => \"API key is required, obtained from https://www.ensembl.org/account/login\", \n  },\n\n  # Enable caching (memcached)\n  service_cache_memcached_enable => 1,\n  service_cache_memcached_servers => ['127.0.0.1:11211'],\n  service_cache_memcached_serialiser => 'storable',\n  service_cache_memcached_expires => 6 * 60 * 60, # expire key after 6hr\n  service_cache_memcached_compress_threshold => 2000,\n\n  # Override default database settings\n  service_public_dbconnection => {\n    user    => 'ensro',\n    port    => '3306',\n    dbname  => 'ensembl_website',\n    host    => 'ensembldb.ensembl.org',\n    driver  => 'mysql',\n  },\n\n  # Override database adaptor settings\n  service_available_adaptors => {\n    'compara'  => 'Bio::EnsEMBL::Compara::DBSQL::DBAdaptor',\n    'core'     => 'Bio::EnsEMBL::DBSQL::DBAdaptor',\n    'funcgen'  => 'Bio::EnsEMBL::Funcgen::DBSQL::DBAdaptor',\n    'variation'=> 'Bio::EnsEMBL::Variation::DBSQL::DBAdaptor',\n  },\n\n  # Disable server-side caching\n  service_use_cache => 0,\n\n  # Logging configuration\n  log4perl => {\n    category_name => 'ensembl.rest',\n    file_name => $SiteDefs::ENSEMBL_REST_LOGFILE,\n    restart_dispatcher => 1,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Piping Schema into MySQL Database - Bash\nDESCRIPTION: Executes a SQL schema file on the newly created MySQL database, preparing it for the insertion of ontology data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/testdata/ontology.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Pipe schema in\nmysql --host=$MYSQL_HOST --user=$MYSQL_USR --password=$MYSQL_PASS $DB < ensembl/misc-scripts/ontology/sql/tables.sql\n```\n\n----------------------------------------\n\nTITLE: Apache Configuration for Ensembl REST API with Elasticsearch\nDESCRIPTION: Apache configuration that sets up an environment variable for the Elasticsearch host. This allows the REST API to connect to Elasticsearch when run under Apache.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/ditag.txt#2025-04-22_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\n<VirtualHost *:80>\n    SetEnv ELASTICSEARCH_HOST localhost:9200\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Regulatory Features by Region in Ensembl REST API\nDESCRIPTION: This example shows how to retrieve regulatory features that overlap with a specified genomic region. This is useful for identifying regulatory elements such as enhancers, promoters, etc.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature.txt#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://rest.ensembl.org/overlap/region/human/7:140424943-140624564?feature=regulatory;content-type=application/json\"\n```\n\n----------------------------------------\n\nTITLE: Finalizing test class with done_testing call\nDESCRIPTION: Completes the test class implementation with the done_testing statement, which is a common pattern in Perl test files to indicate all tests have been run.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/dnafrag_region.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\n1;    # End of package\n```\n\n----------------------------------------\n\nTITLE: Defining Ensembl REST API Endpoint Tests in Perl\nDESCRIPTION: This code block specifies the structure for testing Ensembl REST API endpoints. It defines expected HTTP status codes, content types, and JSON schemas for various API calls, including gene, transcript, and variation data retrieval.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/prediction_exon.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  endpoints => [\n    {\n      path => '/gene/id/ENSG00000176515',\n      method => 'GET',\n      expected => {\n        code => 200,\n        content_type => 'application/json',\n        json_schema => {type => 'object'},\n        properties => {object_type => 'Gene'}\n      }\n    },\n    {\n      path => '/transcript/id/ENST00000320916',\n      method => 'GET',\n      expected => {\n        code => 200,\n        content_type => 'application/json',\n        json_schema => {type => 'object'},\n        properties => {object_type => 'Transcript'}\n      }\n    },\n    {\n      path => '/variation/homo_sapiens/rs56116432',\n      method => 'GET',\n      expected => {\n        code => 200,\n        content_type => 'application/json',\n        json_schema => {type => 'object'},\n        properties => {name => 'rs56116432'}\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections for Ensembl REST API in Perl\nDESCRIPTION: This snippet defines the database connection parameters for the Ensembl REST API. It specifies the driver, host, port, user, and password for connecting to the database.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/data_file.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nuse strict;\nuse warnings;\n\n{\n  name => 'DatabaseConnection',\n  connection_class => 'Bio::EnsEMBL::Utils::SqlHelper',\n  driver => 'mysql',\n  host => 'ensembldb.ensembl.org',\n  port => 5306,\n  user => 'anonymous',\n  pass => '',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vagrant VM for Ensembl REST API\nDESCRIPTION: Vagrant VM configuration settings for deploying the Ensembl REST API, specifying the VM provider, memory allocation, host-to-guest port forwarding, and shared folder mappings.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/species_tree_root.txt#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"hashicorp/precise64\"\n  config.vm.provider \"virtualbox\" do |v|\n    v.memory = 2048\n  end\n\n  # Configure rest ensembl to bind on 8080 on the host machine\n  config.vm.network \"forwarded_port\", guest: 3000, host: 8080\n  config.vm.network \"forwarded_port\", guest: 80, host: 8000\n\n  # Port used for starman/PSGI\n  config.vm.network \"forwarded_port\", guest: 5000, host: 5000\n\n  # Nice mount plz\n  config.vm.synced_folder \".\", \"/ensembl/ensembl-rest\"\nend\n```\n\n----------------------------------------\n\nTITLE: Querying VEP with POST request using bash curl\nDESCRIPTION: Example of querying the Variant Effect Predictor (VEP) REST API using curl with POST method. Demonstrates how to send a payload of variant data for batch processing.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/external_synonym.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-type:application/json\" -H \"Accept:application/json\" -X POST -d '{ \"hgvs_notations\": [\"ENST00000494142:c.48C>A\", \"ENST00000313050:c.136G>A\"]}' https://rest.ensembl.org/vep/human/hgvs\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Reference DNA Collection Parameters (Perl/Ruby Hash)\nDESCRIPTION: This snippet defines configuration parameters for handling the non-reference species DNA collection, likely for genome alignment processing within the Ensembl pipeline. It uses a hash-like structure (common in Perl or Ruby) specifying chunk size, group set size, masking options (enabling default soft masking), and overlap size.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/method_link_species_set_tag.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n{\"chunk_size\" => 10100000,\"group_set_size\" => 10100000,\"masking_options\" => \"{default_soft_masking => 1}\",\"overlap\" => 100000}\n```\n\n----------------------------------------\n\nTITLE: Daemontools Service Monitoring with Monit\nDESCRIPTION: Monit configuration script for monitoring an Ensembl REST service running under Daemontools, including health checks and restart commands.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncheck process ensrest with pidfile /path/to/ensrest.pid\n   start program = \"/usr/bin/svc -u /service/ensrest\"\n   stop program = \"/usr/bin/svc -d /service/ensrest\"\n   # You should add other checks to monitor memory consumption etc.\n   # See monit documentation for more details\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure from Ensembl API Lookup Endpoint\nDESCRIPTION: This snippet shows the expected JSON response structure when looking up a specific genome ID. The response includes details such as gene description, source, biotype, and related IDs.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/analysis.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": \"ensembl_havana\",\n  \"object_type\": \"Gene\",\n  \"id\": \"ENSG00000157764\",\n  \"display_name\": \"BRAF\",\n  \"species\": \"homo_sapiens\",\n  \"biotype\": \"protein_coding\",\n  \"strand\": -1,\n  \"seq_region_name\": \"7\",\n  \"description\": \"B-Raf proto-oncogene, serine/threonine kinase [Source:HGNC Symbol;Acc:HGNC:1097]\",\n  \"start\": 140719327,\n  \"end\": 140924764,\n  \"version\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing TSV Format Sequence Ontology Data\nDESCRIPTION: Tab-separated values containing sequence ontology IDs, definitions, and metadata. Each row represents a different sequence feature or element with fields for ID, version, namespace, accession, name, definition, obsolescence flag, and other attributes.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/term.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n508\t1\t\\N\tSO:0000561\theptamer_of_recombination_feature_of_vertebrate_immune_system_gene\t\"Seven nucleotide recombination site (e.g. CACAGTG), part of V-gene, D-gene or J-gene recombination feature of an immunoglobulin or T-cell receptor gene.\" [http://www.imgt.org/cgi-bin/IMGTlect.jv?query=7#]\t0\t0\n509\t1\t\\N\tSO:0000562\tnonamer_of_recombination_feature_of_vertebrate_immune_system_gene\t\"\" []\t0\t0\n510\t1\t\\N\tSO:0000563\tvertebrate_immune_system_gene_recombination_spacer\t\"\" []\t0\t0\n```\n\n----------------------------------------\n\nTITLE: Running Elasticsearch Indexer Command in Ensembl REST API\nDESCRIPTION: Command to run the Elasticsearch indexer for the Ensembl REST API. The indexer populates the Elasticsearch indices with genomic data that can be queried through the REST API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/ditag.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\nperl scripts/elasticsearch_indexer.pl -es_host \"localhost:9200\" -species homo_sapiens -index genome -production_name human\n```\n\n----------------------------------------\n\nTITLE: Accessing Ensembl REST API Using Perl with LWP\nDESCRIPTION: This Perl example demonstrates using LWP to interact with the Ensembl REST API. It sets up an HTTP request with proper headers, handles the server response, and includes error checking for failed requests.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/density_type.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nuse strict;\nuse warnings;\nuse LWP::UserAgent;\n\nmy $ua = LWP::UserAgent->new();\n\nmy $server = 'https://rest.ensembl.org';\nmy $ext = '/lookup/id/ENSG00000139618?';\nmy $response = $ua->get($server.$ext, 'Content-type' => 'application/json');\n\ndie \"\" . $response->status_line . \"\\n\" unless $response->is_success;\n\nprint $response->content;\n```\n\n----------------------------------------\n\nTITLE: Specifying Alignment Tool Parameters (Command Line)\nDESCRIPTION: This snippet represents command-line parameters passed to a genome alignment tool (potentially LASTZ, given the parameters like T, K, M, L, H, O, E). It configures settings like temperature (T), seed K-mer size (K), match score matrix parameters (M, L, H), gap penalties (O, E), and how ambiguous bases (IUPAC codes) are handled.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/method_link_species_set_tag.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nT=1 K=3000 M=50 L=3000 H=2200 O=400 E=30 --ambiguous=iupac\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Configuration for Ensembl REST API\nDESCRIPTION: A simple configuration example for the Ensembl REST API server showing basic settings including the name and connection information.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/map.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\\nname: EnsEMBL::REST\\nstarman_config:\\n  port: 5000\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP_PROXY environment variable for command line tools\nDESCRIPTION: Shows how to set the HTTP_PROXY environment variable to route HTTP requests through the EBI proxy server. This is useful for command-line tools that respect this environment variable.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/assembly_exception.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport HTTP_PROXY=http://www-proxy.ebi.ac.uk:3128\n```\n\n----------------------------------------\n\nTITLE: Defining Ensembl REST API Documentation Routes in YAML\nDESCRIPTION: YAML configuration defining the routes for API documentation endpoints. It maps the documentation URLs to their corresponding controller actions and specifies the supported HTTP methods.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/analysis_description.txt#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n'/documentation/info/:id':\n  get:\n    to: 'Documentation#info'\n    params:\n      id:\n        type: 'Str'\n        pattern: '[\\w\\.]+'\n\n'/documentation/info':\n  get:\n    to: 'Documentation#info_root'\n\n'/documentation/routes':\n  get:\n    to: 'Documentation#routes'\n\n'/documentation/versions':\n  get:\n    to: 'Documentation#versions'\n\n'/documentation/resources_by_plugin':\n  get:\n    to: 'Documentation#resources_by_plugin'\n\n'/swagger.json':\n  get:\n    to: 'Documentation#swagger'\n\n'/analysis':\n  get:\n    to: 'GenomeAssembly#list_analyses'\n    description: 'list analyses'\n\n'/assembly/info/:species/:region':\n  get:\n    to: 'GenomeAssembly#info'\n    params:\n      species:\n        type: 'Str'\n        pattern: '[\\w]+'\n      region:\n        type: 'Str'\n        pattern: '[\\w\\.\\:\\-]+'\n    description: 'Return information about the specified toplevel sequence region for the given species'\n    examples:\n      - /assembly/info/homo_sapiens/X\n      - /assembly/info/homo_sapiens/ABBA01004489.1\n```\n\n----------------------------------------\n\nTITLE: Setting up Test Database Connection in Ensembl REST\nDESCRIPTION: This code snippet demonstrates how to set up a test database connection for the Ensembl REST API. It creates a test database using Bio::EnsEMBL::Test::MultiTestDB and configures the registry to use this test database.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/unmapped_object.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\n# Get a DBAdaptor for the test\nmy $multi_db = Bio::EnsEMBL::Test::MultiTestDB->new;\nmy $dba = $multi_db->get_DBAdaptor('core');\n\n# Load registry with test adaptors\nmy $reg = 'Bio::EnsEMBL::Registry';\n$reg->add_DBAdaptor('test', 'core', $dba);\n\n# Set the species adaptor to use the test one\nmy $sa = $dba->get_adaptor('Slice');\nmy $ga = $dba->get_adaptor('Gene');\n```\n\n----------------------------------------\n\nTITLE: AWS CodeBuild Buildspec for Ensembl REST API Deployment\nDESCRIPTION: This buildspec.yml configuration defines the build, test, and deployment process for the Ensembl REST API on Amazon ECS. It includes multiple phases: install, pre-build, build, and post-build, with commands for dependency installation, testing, Docker image creation, and deployment to Amazon ECS.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/transcript.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 0.2\n\nphases:\n  install:\n    runtime-versions:\n      perl: 5.32\n    commands:\n      - echo Entered the install phase...\n      - apt-get update -y\n      - apt-get install -y apt-utils\n      - apt-get install -y jq\n      - apt-get install -y libmodule-install-perl\n      - curl -sL https://deb.nodesource.com/setup_12.x | bash -\n      - apt-get install -y nodejs\n      - npm install -g newman\n      - export PERL5LIB=$PERL5LIB:$CODEBUILD_SRC_DIR/bioperl-live\n  pre_build:\n    commands:\n      - echo Entered the pre_build phase...\n      - echo Logging in to Amazon ECR...\n      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com\n      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME\n      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)\n      - IMAGE_TAG=${COMMIT_HASH:=latest}\n      - perl Makefile.PL\n      - make\n      - make manifest\n      - prove -c\n  build:\n    commands:\n      - echo Entered the build phase...\n      - echo Build started on `date`\n      - echo Building the Docker image...\n      - docker build -t $REPOSITORY_URI:latest .\n      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG\n  post_build:\n    commands:\n      - echo Entered the post_build phase...\n      - echo Build completed on `date`\n      - echo Pushing the Docker images...\n      - docker push $REPOSITORY_URI:latest\n      - docker push $REPOSITORY_URI:$IMAGE_TAG\n      - echo Writing image definitions file...\n      - aws ecs describe-task-definition --task-definition ${ECS_TASK_DEFINITION_FAMILY} --query taskDefinition > taskdef.json\n      - envsubst < appspec_template.yaml > appspec.yaml\n      - envsubst < taskdef_template.json > taskdef.json\n      - cat appspec.yaml\n      - cat taskdef.json\nartifacts:\n  files:\n    - appspec.yaml\n    - taskdef.json\n```\n\n----------------------------------------\n\nTITLE: Querying Ensembl REST Search Endpoint with Basic Text Search\nDESCRIPTION: An example of a basic search request to the Ensembl REST API using curl. This request searches for 'BRCA2' across all Ensembl databases with default parameters.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/meta_coord.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'https://rest.ensembl.org/search/BRCA2' -H 'Content-type:application/json'\n```\n\n----------------------------------------\n\nTITLE: Representing Species Phylogenetic Tree (Newick Format)\nDESCRIPTION: This snippet defines a phylogenetic tree relating three species (Meleagris gallopavo, Gallus gallus, Taeniopygia guttata) using the standard Newick format. It includes branch lengths indicating evolutionary distance between the species.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/method_link_species_set_tag.txt#2025-04-22_snippet_3\n\nLANGUAGE: newick\nCODE:\n```\n((Meleagris_gallopavo:0.0414,Gallus_gallus:0.0414):0.1242,Taeniopygia_guttata:0.1715);\n```\n\n----------------------------------------\n\nTITLE: Ensembl REST API Mapping Table\nDESCRIPTION: Tabular data showing relationships between various IDs in the Ensembl REST API system. Each row contains 7 columns: primary key, object ID, related object ID, relationship type, and additional status flags.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/closure.txt#2025-04-22_snippet_10\n\nLANGUAGE: data\nCODE:\n```\n16721 705 87 1 6 1 0\n16722 708 87 1 6 1 0\n16723 713 87 1 6 1 0\n[...additional rows omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Horizontal Pod Autoscaler for Ensembl REST API\nDESCRIPTION: This HorizontalPodAutoscaler configures automatic scaling for the REST API deployment based on CPU utilization. It sets minimum and maximum replicas and targets 80% CPU utilization as the scaling metric.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/hmm_profile.txt#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: autoscaling/v1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: rest\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: rest\n  minReplicas: 2\n  maxReplicas: 10\n  targetCPUUtilizationPercentage: 80\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sequence Variations for Human Gene with curl\nDESCRIPTION: A shell command to fetch sequence variations for a specific region on human chromosome 9 using the Ensembl REST API. It uses the /overlap/region endpoint with parameters to filter for variations.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/protein_feature.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET \"https://rest.ensembl.org/overlap/region/human/9:22125500-22136000?feature=variation;content-type=application/json\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing Protein Sequence with Identifier EC4C6BCA4433CE3BBF47FC7D14DE167F\nDESCRIPTION: This snippet shows a protein sequence identified by the code EC4C6BCA4433CE3BBF47FC7D14DE167F. The sequence is 537 amino acids long and features various protein motifs, including repeated amino acid stretches.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/peptide_archive.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nMQARYSVSSPNSLGVVPYLGGEQSYYRAAAAAAGGGYTAMPAPMSVYSHPAHAEQYPGGMARAYGPYTPQPQPKDMVKPPYSYIALITMAIQNAPDKKITLNGIYQFIMDRFPFYRDNKQGWQNSIRHNLSLNECFVKVPRDDKKPGKGSYWTLDPDSYNMFENGSFLRRRRRFKKKDAVKDKEEKDRLHLKEPPPPGRQPPPAPPEQADGNAPGPQPPPVRIQDIKTENGTCPSPPQPLSPAAALGSGSAAAVPKIESPDSSSSSLSSGSSPPGSLPSARPLSLDGADSAPPPPAPSAPPPHHSQGFSVDNIMTSLRGSPQSAAAELSSGLLASAAASSRAGIAPPLALGAYSPGQSSLYSSPCSQTSSAGSSGGGGGGAGAAGGAGGAGTYHCNLQAMSLYAAGERGGHLQGAPGGAGGSAVDDPLPDYSLPPVTSSSSSSLSHGGGGGGGGGGQEAGHHPAAHQGRLTSWYLNQAGGDLGHLASAAAAAAAAGYPGQQQNFHSVREMFESQRIGLNNSPVNGNSSCQMAFPSSQSLYRTSGAFVYDCSKF\n```\n\n----------------------------------------\n\nTITLE: Running REST Server with Debug Mode and Large Worker Pool\nDESCRIPTION: Command to start the Ensembl REST server with debugging enabled and an increased number of worker processes (40). This configuration is suitable for higher traffic loads.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon_transcript.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ensembl-rest\nperl scripts/rest_server.pl -debug 1 -host 0.0.0.0 -port 3000 -pid_file rest_ensembl.pid -processes 40\n```\n\n----------------------------------------\n\nTITLE: Registering a Schema with the REST Server in Perl\nDESCRIPTION: Code showing how to register a custom schema with the REST server by adding it to the Plugin list. This enables the server to recognize and use the schema for handling specific API endpoints.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/gene_attrib.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\n__PACKAGE__->config(\n  'Plugin' => [ 'EnsEMBL::REST::Schema' ],\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Ensembl REST API in Production\nDESCRIPTION: Sample configuration showing the required environment variables for running the Ensembl REST API in a production environment, using the default ports.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/external_synonym.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport ENSEMBL_REST_CONFIG=/path/to/ensembl-rest/configurations/production/ensrest.conf\nexport ENSEMBL_REST_PORT=5000\n```\n\n----------------------------------------\n\nTITLE: Sequence Ontology Term Definitions\nDESCRIPTION: Tab-delimited entries containing sequence ontology (SO) terms with their IDs, definitions, and metadata. Each line represents a distinct protein structure feature with detailed geometric and chemical properties.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/term.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n981\t1\tbiosapiens\tSO:0001100\tpolypeptide_molybdenum_ion_contact_site\t\"A binding site that, in the polypeptide molecule, interacts selectively and non-covalently with molybdenum ions.\" [EBIBS:GAR, SO:cb]\t0\t0\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Caching in Perl\nDESCRIPTION: This snippet sets up caching for the Ensembl REST API. It defines the cache type as CHI, specifies the driver as Memory, and sets the global key prefix and time to live (TTL) for cached items.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/associated_group.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\n\"Cache\" => {\n  \"default\" => {\n    \"driver\" => \"Memory\",\n    \"global_key_prefix\" => \"ensrest:\",\n    \"cache_objects\" => {\n      \"default\" => { \"driver\" => \"Memory\", \"max_size\" => 10000, \"expires_in\" => \"24 hours\" },\n      \"long\"    => { \"driver\" => \"Memory\", \"max_size\" => 10000, \"expires_in\" => \"1 week\" },\n    }\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Installing Ensembl REST API Dependencies via cpanm\nDESCRIPTION: Command to install all necessary Perl dependencies for the Ensembl REST API using the cpanm package manager with the --installdeps flag.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/external_synonym.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncpanm --installdeps .\n```\n\n----------------------------------------\n\nTITLE: Running Ensembl REST API tests\nDESCRIPTION: Command to run the test suite for the Ensembl REST API, ensuring that all components are functioning correctly after installation.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/gene_attrib.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nprove -lv t\n```\n\n----------------------------------------\n\nTITLE: Genomic Coordinates and Alignment Data Table\nDESCRIPTION: Tab-separated data containing genomic coordinates, feature mappings, and alignment scores. Each row represents a genomic feature or alignment with columns for IDs, positions, strands, and other metrics.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/repeat_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: tsv\nCODE:\n```\n31017562\t27515\t1765334\t1765388\t0\t770478\t770532\t594541\t7\t0\n31017563\t27515\t1765807\t1765933\t-1\t3\t145\t594553\t2\t236\n31017564\t27515\t1768803\t1769010\t1\t1\t235\t595036\t2\t1195\n```\n\n----------------------------------------\n\nTITLE: Querying Biological Entity Mappings in SQL Format\nDESCRIPTION: Database records showing mappings between biological entities (Translation, Transcript, Gene) and their associated IDs. Each record contains a unique ID, entity ID, type, reference ID, and two additional reference columns with some null values (\\N).\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/object_xref.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n14824205\t725239\tTranslation\t3656213\t\\N\t8278\n14824206\t725239\tTranslation\t3656214\t\\N\t8278\n14824207\t725239\tTranslation\t3656215\t\\N\t8278\n14824208\t725239\tTranslation\t3656216\t\\N\t8278\n[...additional records truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Ensembl REST API\nDESCRIPTION: Command to build and run the Ensembl REST API using Docker Compose, running the services in detached mode.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/external_synonym.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Fetching Overlapping Features with curl\nDESCRIPTION: A shell command that retrieves genomic features that overlap with a specified region on human chromosome 7. It uses the /overlap/region endpoint to get regulatory features in JSON format.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/protein_feature.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET \"https://rest.ensembl.org/overlap/region/human/7:140424943-140624564?feature=regulatory;feature=gene;content-type=application/json\"\n```\n\n----------------------------------------\n\nTITLE: Defining Sequence Ontology Terms in Plain Text Format\nDESCRIPTION: This snippet shows the structure of how Sequence Ontology (SO) terms are defined in a tab-separated format. Each line represents a single SO term with its identifier, name, and definition.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/term.txt#2025-04-22_snippet_3\n\nLANGUAGE: plain text\nCODE:\n```\n1377\t1\t\\N\tSO:0001499\twhole_genome_sequence_status\t\"The status of whole genome sequence.\" [DOI:10.1126]\t0\t0\n1378\t1\t\\N\tSO:0001500\theritable_phenotypic_marker\t\"A biological_region characterized as a single heritable trait in a phenotype screen. The heritable phenotype may be mapped to a chromosome but generally has not been characterized to a specific gene locus.\" [JAX:hdene]\t0\t0\n1379\t1\t\\N\tSO:0001501\tpeptide_collection\t\"A collection of peptide sequences.\" [BBOP:nlw]\t0\t0\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Container for Ensembl REST API\nDESCRIPTION: Command to stop the running Docker container for the Ensembl REST API, which terminates all services started with docker-compose.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/marker_feature.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose down\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Configuration for VEP in Perl\nDESCRIPTION: This snippet defines a Perl scalar variable containing a hash reference for configuring VEP (Variant Effect Predictor) plugins. It specifies a plugins array with a test plugin object (RestTestPlugin) that includes configuration keys for 'key', 'params', 'available', and 'enabled'. Dependencies include a Perl interpreter and the broader VEP infrastructure. Inputs include the plugin's parameter list and activation flags; outputs are determined by how this config is used downstream. This structure enables flexible management of multiple plugins within VEP.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/testdata/vep_plugin_config.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nmy $VEP_PLUGIN_CONFIG = {\n  \"plugins\" => [\n\n    # test\n    {\n      \"key\" => \"RestTestPlugin\",\n      \"params\" => [ '@*' ],\n      \"available\" => 1,\n      \"enabled\" => 0,\n    },    \n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Database Connections in Perl\nDESCRIPTION: This snippet sets up the database connections for the Ensembl REST API. It defines the connection parameters for different species and databases, including the host, port, user, and password.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/translation_attrib.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n  species_dbs => {\n    Multi => {\n      database => 'ensembl_compara_108',\n      host => 'mysql-ens-sta-1',\n      port => 4519,\n      user => 'ensro',\n      pass => '',\n    },\n    Human => {\n      database => 'homo_sapiens_core_108_38',\n      host => 'mysql-ens-sta-1',\n      port => 4519,\n      user => 'ensro',\n      pass => '',\n    },\n    Mouse => {\n      database => 'mus_musculus_core_108_39',\n      host => 'mysql-ens-sta-1',\n      port => 4519,\n      user => 'ensro',\n      pass => '',\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Types for Ensembl REST API in Perl\nDESCRIPTION: This configuration defines mappings between MIME types and Exporter modules for the Ensembl REST API. It specifies how different data formats like JSON, YAML, and various biological data formats are handled, including their file extensions and priority in content negotiation.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/stable_id_event.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\npackage EnsEMBL::REST;\n\nuse strict;\nuse warnings;\n\nuse Config::General;\n\nsub mimetypes {\n  my $c = shift;\n  my $mimes = {\n    'json'          => 'application/json',\n    'xml'           => 'text/xml',\n    'yaml'          => 'text/x-yaml',\n    'text'          => 'text/plain',\n    'nh'            => 'text/x-nh',\n    'phyloxml'      => 'text/x-phyloxml+xml',\n    'orthoxml'      => 'text/x-orthoxml+xml',\n    'fasta'         => 'text/x-fasta',\n    'seqxml'        => 'text/x-seqxml+xml',\n    'bed'           => 'text/x-bed',\n    'gff3'          => 'text/x-gff3',\n    'jsonp'         => 'text/javascript',\n    'vcf'           => 'text/vcf',\n    'bigbed'        => 'application/x-bigbed',\n    'bigwig'        => 'application/x-bigwig',\n  };\n  return $mimes;\n}\n\nsub content_types {\n  my $c = shift;\n  \n  my $mimes = mimetypes($c);\n  my %mime_map = reverse %{$mimes};\n  \n  my %extn_map = reverse %{$mimes};\n  $extn_map{'text/x-seqxml+xml'} = 'xml';\n  $extn_map{'text/x-orthoxml+xml'} = 'xml';\n  $extn_map{'text/x-phyloxml+xml'} = 'xml';\n  \n  my $compressor_to_encoding = {\n    'gzip' => 'gzip',\n  };\n  \n  my $content_types = {\n    'default'    => 'json',\n    'text/html'  => 'html',\n    'map'        => \\%mime_map,\n    'extension'  => \\%extn_map,\n    'compressors'=> $compressor_to_encoding,\n    'compressor_format' => {\n      'gzip' => 'gzip',\n    },\n    'priority' => ['gzip'],\n  };\n  \n  return $content_types;\n}\n\n1;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Healthcheck Endpoint for Ensembl REST API in Perl\nDESCRIPTION: This code configures the healthcheck functionality for the Ensembl REST API. It enables ping checking, database connectivity monitoring, and cache status verification, allowing the system to report on its health status via an endpoint.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/marker_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n{\n  startup_status => {\n    new => 1,\n    allow_missing_extn => 1,\n  },\n  ping => {\n    new => 1\n  },\n  database => {\n    new => 1\n  },\n  cache => {\n    new => 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Ensembl Gene Data in Tabular Format\nDESCRIPTION: This snippet represents a tabular data structure containing gene information from the Ensembl database. Each line represents a gene entry with various attributes separated by tabs. The data includes gene IDs, types, coordinates, descriptions, and other metadata.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/gene.txt#2025-04-22_snippet_0\n\nLANGUAGE: tabular\nCODE:\n```\n430513\tprotein_coding\t8275\t27515\t1080164\t1105181\t1\t3655567\tensembl\tUncharacterized protein; cDNA FLJ34594 fis, clone KIDNE2009109  [Source:UniProtKB/TrEMBL;Acc:Q8NAX6]\t1\t1384969\tENSG00000176515\t1\t2008-04-29 11:17:41\t2008-04-29 11:17:41\n430514\tsnoRNA\t8280\t27515\t1186753\t1186855\t1\t3655577\tensembl\tSmall nucleolar RNA U13 [Source:RFAM;Acc:RF01210]\t1\t1384970\tENSG00000238438\t1\t2010-03-19 11:01:55\t2010-03-19 11:01:55\n430515\tprotein_coding\t8282\t27515\t1312675\t1314992\t1\t3655582\tensembl\tforkhead box Q1 [Source:HGNC Symbol;Acc:20951]\t1\t1384971\tENSG00000164379\t4\t2008-04-29 11:17:41\t2009-05-19 09:47:17\n430516\tantisense\t8294\t27515\t1384025\t1385301\t-1\t3655642\thavana\t\\N\t1\t1384972\tENSG00000261730\t1\t2011-11-11 09:57:43\t2011-11-11 09:57:43\n430517\tprotein_coding\t8282\t27515\t1390069\t1395832\t1\t3655650\tensembl\tforkhead box F2 [Source:HGNC Symbol;Acc:3810]\t1\t1384973\tENSG00000137273\t3\t2008-04-29 11:17:41\t2006-07-03 00:00:00\n430518\tmisc_RNA\t8280\t27515\t1507557\t1507851\t1\t3655700\tensembl\tMetazoan signal recognition particle RNA [Source:RFAM;Acc:RF00017]\t1\t1384974\tENSG00000243439\t2\t2009-08-05 14:27:16\t2012-06-07 23:07:01\n430519\tpseudogene\t8294\t27515\t1513933\t1515524\t-1\t3655704\thavana\t\\N\t1\t1384975\tENSG00000218027\t2\t2008-04-29 11:17:41\t2012-03-20 10:52:24\n430520\tprotein_coding\t8282\t27515\t1610681\t1614127\t1\t3655712\tensembl\tforkhead box C1 [Source:HGNC Symbol;Acc:3800]\t1\t1384976\tENSG00000054598\t5\t2008-04-29 11:17:41\t2012-06-07 23:07:01\n430521\tprotein_coding\t8282\t27515\t1624041\t2245926\t-1\t3655836\tensembl\tGDP-mannose 4,6-dehydratase [Source:HGNC Symbol;Acc:4369]\t1\t1384981\tENSG00000112699\t6\t2008-04-29 11:17:41\t2010-11-01 15:31:55\n430522\tpseudogene\t8294\t27516\t170410\t172712\t1\t3655936\thavana\tlong intergenic non-protein coding RNA 108 [Source:HGNC Symbol;Acc:31847]\t1\t1384987\tENSG00000228572\t1\t2009-05-19 09:47:17\t2009-05-19 09:47:17\n430523\tprotein_coding\t8282\t27516\t192989\t220023\t1\t3655944\tensembl\tphosphatidylinositol-specific phospholipase C, X domain containing 1 [Source:HGNC Symbol;Acc:23148]\t1\t1384988\tENSG00000182378\t8\t2008-04-29 11:17:41\t2011-02-14 13:38:37\n430524\tprotein_coding\t8282\t27516\t220013\t230886\t-1\t3656042\tensembl\tGTP binding protein 6 (putative) [Source:HGNC Symbol;Acc:30189]\t1\t1385001\tENSG00000178605\t7\t2008-04-29 11:17:41\t2011-02-14 13:38:37\n430525\tantisense\t8294\t27516\t281725\t282586\t1\t3656081\thavana\tPPP2R3B antisense RNA 1 [Source:HGNC Symbol;Acc:27560]\t1\t1385002\tENSG00000226179\t1\t2009-05-19 09:47:17\t2009-05-19 09:47:17\n430526\tprotein_coding\t8282\t27516\t294698\t347690\t-1\t3656089\tensembl\tprotein phosphatase 2, regulatory subunit B'', beta [Source:HGNC Symbol;Acc:13417]\t1\t1385003\tENSG00000167393\t12\t2008-04-29 11:17:41\t2011-02-14 13:38:37\n430527\tprotein_coding\t8303\t1000558304\t152831873\t152833658\t1\t3656177\tensembl\t\\N\t1\t1385013\tENSG00000262893\t1\t2012-03-20 10:52:24\t2012-03-20 10:52:24\n430528\tprotein_coding\t8294\t1000558304\t152853377\t152865503\t-1\t3656187\thavana\tfamily with sequence similarity 58, member A [Source:HGNC Symbol;Acc:28434]\t1\t1385014\tENSG00000262919\t2\t2012-03-20 10:52:24\t2012-08-20 17:58:42\n430529\tantisense\t8294\t1000558304\t152864798\t152869811\t1\t3656290\thavana\t\\N\t1\t1385025\tENSG00000261960\t1\t2012-03-20 10:52:24\t2012-03-20 10:52:24\n430530\tpseudogene\t8294\t1000558304\t152869952\t152870806\t-1\t3656303\thavana\t\\N\t1\t1385026\tENSG00000262424\t2\t2012-03-20 10:52:24\t2012-08-20 17:58:42\n430531\tpseudogene\t8294\t1000558304\t152871975\t152872346\t1\t3656310\thavana\t\\N\t1\t1385027\tENSG00000262076\t1\t2012-03-20 10:52:24\t2012-03-20 10:52:24\n430532\tlincRNA\t8294\t1000558304\t152876152\t152878383\t1\t3656318\thavana\t\\N\t1\t1385028\tENSG00000263122\t1\t2012-03-20 10:52:24\t2012-03-20 10:52:24\n651207\tccds_gene\t8359\t27521\t27755388\t28081874\t-1\t\\N\tccds\t\\N\t1\t1489969\tCCDS10020.1\t1\t2016-06-15 11:49:56\t2016-06-15 11:49:56\n651208\tprotein_coding\t8353\t27515\t280129\t389454\t-1\t3613422\tensembl\tlysine demethylase 5A\t1\t1161322\tENSG00000073614\t12\t2008-04-29 11:17:41\t2016-06-03 16:05:49\n```\n\n----------------------------------------\n\nTITLE: Configuring Highlight.js with Custom Class Prefix in HTML\nDESCRIPTION: Example of initializing Highlight.js with custom configuration to suppress the default 'hljs-' class prefix behavior, which was introduced in version 8.0. This allows backward compatibility with older stylesheets.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/root/static/js/highlight/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\">\n  hljs.configure({classPrefix: ''});\n  hljs.initHighlightingOnLoad();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections for Ensembl REST API in Perl\nDESCRIPTION: This snippet defines the database connection parameters for the Ensembl REST API. It specifies the host, port, user, and password for connecting to the Ensembl databases, including core, variation, and regulation databases.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/prediction_exon.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  host => 'localhost',\n  port => 3306,\n  user => 'anonymous',\n  pass => '',\n\n  databases => {\n    homo_sapiens => {\n      core => 'homo_sapiens_core_76_38',\n      funcgen => 'homo_sapiens_funcgen_76_38',\n      variation => 'homo_sapiens_variation_76_38',\n      otherfeatures => 'homo_sapiens_otherfeatures_76_38',\n      rnaseq => 'homo_sapiens_rnaseq_76_38',\n    },\n    mus_musculus => {\n      core => 'mus_musculus_core_76_38',\n      funcgen => 'mus_musculus_funcgen_76_38',\n      variation => 'mus_musculus_variation_76_38',\n      otherfeatures => 'mus_musculus_otherfeatures_76_38',\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Ensembl Database Records Export\nDESCRIPTION: Tab-delimited database export containing gene, transcript and translation records. Each row has a unique ID, object type (Gene/Transcript/Translation), reference IDs and nullable fields represented as \\N.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/object_xref.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n14823740\t430523\tGene\t3655943\t\\N\t8276\n14823741\t430523\tGene\t3655944\t\\N\t8276\n14823742\t430523\tGene\t3655945\t\\N\t8276\n...\n```\n\n----------------------------------------\n\nTITLE: Starting Ensembl REST API server with custom configuration\nDESCRIPTION: Command to start the Ensembl REST API server while specifying a custom configuration file. This allows overriding default configuration with environment-specific settings.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/ditag.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nENSEMBL_REST_CONFIG=mysite_ensembl_rest.conf script/ensembl_rest_server.pl\n```\n\n----------------------------------------\n\nTITLE: Implementing Transcript Exons Endpoint in Perl\nDESCRIPTION: Defines an endpoint for retrieving the exons of a transcript. This returns all exons associated with the given transcript ID.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/dna_align_feature.txt#2025-04-22_snippet_5\n\nLANGUAGE: Perl\nCODE:\n```\nsub exon : Chained('transcript') PathPart('exon') Args(0) ActionClass('REST') {}\n\nsub exon_GET {\n  my ($self, $c) = @_;\n  my $transcript = $c->stash()->{transcript};\n  my $exons = $c->model('Lookup')->get_exons_for_transcript($transcript);\n  $self->status_ok($c, entity => $exons);\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing CIGAR Alignment Records - Text\nDESCRIPTION: This snippet exemplifies a standard line from the file, containing two numeric columns (possibly sequence or position identifiers) and a CIGAR string which specifies a series of match, mismatch, deletion, or insertion operations for genomic alignment. Dependencies may include downstream code or tools capable of reading tab-separated records and parsing standard CIGAR expressions. Main parameters are the numeric IDs and the CIGAR string; inputs must adhere to this format, and outputs typically correspond to parsed CIGAR objects or annotated alignments for downstream analysis.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/gene_align_member.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n40664\\t1467384\\t4D22MD23M3D24M4D14M2D3MD17M3D21M4D9M3D5MD13M11D12M2D4MD36MD15M2D5MD2M3D14M11D13MD9M4D4M3D6MD9M9D7MD10M2D17MD7MD11M3D3M4D21M4D8M3D2MD17MD11MD10M4D57M82D21M3D6M9D23MD2M8D2M2D11MD39M2D18M2D6M2D22M4D17MDMD6M11D27MD2MD30MD13M29D2M2D9M115D12MD7M4D2M6D14M2D7M4D15MD8MD8M7D2MD21M4D12MD21M4D9MD15M5D7MD9MD21M2D22MD9MD11M5D13MD14M14D2M3D42M4D15M11D9M2D8M36D31M8D34M2DM3D8MD6M4D17MD4M8D9MD2M8D7M8D13M11D15M15D3M12D8MD25M5D15M2D10M3D3M5D7M5D30MD2M53D6MD5MD12MD14MD20M166D2MD9MD16MD5MD14M2D25M6D30M11D9M2D8MD5MD24M2D25MD26M2D14MD12MD2M2DMD7M8D34M8D37M2D6M2D7M26D20M4D8M5D51MD8M25D21MD5MD3M2D3M5D16M10DM5D10M5D8M2D3MD21MD9M9D20M5D19M4D8MD4M2D45M7D15MD20M83D33MD17M4D4MD7M2D52MD37M2DM2D11MD13MD17M6D16MD5MD17M8D15MD8MD36M3D14M3D2MD17MD11M2DMD4MD24M2D4M5D15M6D7M3DM3D15MD2MD10MD2MDMD5M3D36MD139MD43M5D7M3D6MD79M2D84M2D15M2D26M2D45MD18MDMDM4D101M12D25M4D20M4D32MD4MD41M5D6M2D32M7D4M7D14MD23MD13MD3MD8M12D4MD9MDMD43M17D5MD11M2D16M3D4M19D6M13D\n```\n\nLANGUAGE: Text\nCODE:\n```\n100000188\\t100000065\\t6M2D10MD19MD4M2D3MDM2D7M11D7M3D4MD8M25D6M\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Ensembl REST API\nDESCRIPTION: Command to build a Docker image for the Ensembl REST API. This creates a containerized version of the application with all dependencies installed.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/marker_feature.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t ensembl-rest .\n```\n\n----------------------------------------\n\nTITLE: Finding Translation Features by ID in Ensembl REST API\nDESCRIPTION: This example demonstrates how to find protein domains and other translation-related features that overlap with a specific translation ID. This is useful for protein structure and function analysis.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature.txt#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://rest.ensembl.org/overlap/translation/ENSP00000288602?type=Superfamily;content-type=application/json\"\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Gene Information Query\nDESCRIPTION: This snippet shows the expected JSON response from the Ensembl REST API when querying for gene information. It includes details such as the gene's ID, biotype, strand, and genomic location.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/qtl_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": \"ensembl_havana\",\n  \"object_type\": \"Gene\",\n  \"logic_name\": \"ensembl_havana_gene\",\n  \"version\": 5,\n  \"species\": \"homo_sapiens\",\n  \"id\": \"ENSG00000157764\",\n  \"biotype\": \"protein_coding\",\n  \"strand\": 1,\n  \"seq_region_name\": \"7\",\n  \"display_name\": \"BRAF\",\n  \"start\": 140719327,\n  \"description\": \"B-Raf proto-oncogene, serine/threonine kinase [Source:HGNC Symbol;Acc:HGNC:1097]\",\n  \"end\": 140924929\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub comment with curl\nDESCRIPTION: Example of how to create a comment on a GitHub issue using curl with authentication. The command demonstrates sending a JSON payload with the comment body to the GitHub API endpoint.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/member_xref.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Authorization: token xxxxx\" https://api.github.com/repos/Ensembl/ensembl-rest/issues/155/comments -d '{\"body\":\"foo\"}'\n```\n\n----------------------------------------\n\nTITLE: Viewing Ensembl API Documentation\nDESCRIPTION: Command to access the built-in documentation for the Ensembl REST API, which provides details about available endpoints and how to use them.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/map.txt#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nperldoc ensembl-rest/lib/EnsEMBL/REST.pm\n```\n\n----------------------------------------\n\nTITLE: Custom jQuery Initialization for Highlight.js\nDESCRIPTION: jQuery implementation for custom initialization of Highlight.js, providing more control over when and what to highlight.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/root/static/js/highlight/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).ready(function() {\n  $('pre code').each(function(i, block) {\n    hljs.highlightBlock(block);\n  });\n};)\n```\n\n----------------------------------------\n\nTITLE: Installing Ensembl REST Server Using CPAN\nDESCRIPTION: Command to install the Ensembl REST server module and its dependencies using CPAN.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature_misc_set.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncpan -i Bio::EnsEMBL::REST\n```\n\n----------------------------------------\n\nTITLE: Displaying Ensembl REST API Database Statistics in Plaintext\nDESCRIPTION: This snippet shows a tabular representation of database statistics for the Ensembl REST API. Each row contains an ID, feature name, count, and last update timestamp. The data covers various genomic features like transcripts, coding/non-coding genes, and structural variations.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/genome_statistics.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n4\tnoncoding_cnt\t22521\t1\t353\t2017-11-15 19:27:19\n6\ttranscript\t200310\t1\t403\t2017-11-15 19:27:19\n9\tref_length\t3096649726\t1\t405\t2017-07-04 17:38:29\n11\ttotal_length\t3554996726\t1\t406\t2017-07-04 17:38:29\n16\tnoncoding_acnt\t1288\t1\t368\t2017-11-15 19:27:19\n25\talt_transcript\t18802\t1\t404\t2017-11-15 19:27:19\n447\tcoding_cnt\t20338\t1\t64\t2017-07-04 17:38:29\n446\tpseudogene_rcnt\t6\t1\t414\t2017-07-04 17:38:29\n436\tnoncoding_cnt_l\t14720\t1\t390\t2017-07-04 17:38:29\n437\tcoding_racnt\t37\t1\t409\t2017-07-04 17:38:29\n438\tnoncoding_rcnt_s\t0\t1\t412\t2017-07-04 17:38:29\n439\tnoncoding_cnt_s\t5363\t1\t389\t2017-07-04 17:38:29\n440\tcoding_acnt\t2750\t1\t369\t2017-07-04 17:38:29\n441\tnoncoding_acnt_m\t169\t1\t388\t2017-07-04 17:38:29\n442\tpseudogene_racnt\t0\t1\t415\t2017-07-04 17:38:29\n443\tnoncoding_rcnt_m\t0\t1\t445\t2017-07-04 17:38:29\n444\tnoncoding_racnt_l\t33\t1\t410\t2017-07-04 17:38:29\n445\tnoncoding_racnt_s\t0\t1\t411\t2017-07-04 17:38:29\n433\tpseudogene_acnt\t1600\t1\t370\t2017-07-04 17:38:29\n434\tnoncoding_cnt_m\t2222\t1\t444\t2017-07-04 17:38:29\n435\tnoncoding_rcnt_l\t238\t1\t413\t2017-07-04 17:38:29\n457\tPredictionTranscript\t50781\t1\t398\t2017-11-15 16:39:58\n448\tnoncoding_acnt_l\t877\t1\t447\t2017-07-04 17:38:29\n449\tnoncoding_racnt_m\t0\t1\t446\t2017-07-04 17:38:29\n450\tpseudogene_cnt\t14638\t1\t67\t2017-07-04 17:38:29\n451\tnoncoding_acnt_s\t242\t1\t387\t2017-07-04 17:38:29\n452\tcoding_rcnt\t562\t1\t408\t2017-07-04 17:38:29\n458\tStructuralVariation\t5955586\t1\t418\t2017-11-15 18:21:24\n459\tSNPCount\t329465985\t1\t10\t2017-11-15 19:27:19\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub comment containing a URL\nDESCRIPTION: Example showing how to create a comment on GitHub that contains a complex URL. The command uses curl with authentication to post a comment with a URL to the GitHub API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/member_xref.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Authorization: token xxxx\" https://api.github.com/repos/Ensembl/ensembl-rest/issues/155/comments -d '{\"body\":\"http://rest.ensembl.org/foo/bar/1/blah\"}'\n```\n\n----------------------------------------\n\nTITLE: Getting all GitHub comments for an issue\nDESCRIPTION: Command showing how to retrieve all comments for a specific GitHub issue using curl. This example fetches comments for issue #155 in the Ensembl REST API repository.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/member_xref.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.github.com/repos/Ensembl/ensembl-rest/issues/155/comments\n```\n\n----------------------------------------\n\nTITLE: BRCA1 Sequence Variant 2\nDESCRIPTION: 3459 base pair sequence representing a BRCA1 variant with checksum adf09d9b73206be7c5707d4aa39debf1\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nMPVEPKERPTFFEIFKARCSNSGDLGPISLNWFEELSLEAPPYNSTTSEDPECKTRSCEPNVFKTPQRKPSTYSQLASTPVIFKNQNVTLPADPSPMKGLDQCSIDPRKDDADNKDSQRSHSMTGTKLQQVNDVPSPFSSFLSESPTVLQRLFTTPQKNKPVICGSLFCTPKLTGFQTPRPISESLGVEVDPDMSWSSSLATPPTLSSTVLLAKDDQVSEAKFADGNTIVSKHKMLQKFLGHGESLRRNGMNTSSGTNVNSETGIMDHELEKILDGSFDDVNSCEDRIEHDSESAWNRSEPQNLEDEVYEAAKDVLPGEGDAHSINYASCKTKEDEGKHFNQIRAAECKDTEHLVENAECAVAHDTEFTSSVAKNKVQQPLESVNDRSSKEEVTSQASEWSQLNLSGFDGTWMEKTPPAHISSLAERLAAKAGGHAASDISLPSTLSPDRAQKVLNIDPLVNTRDDKQCSQPHQDCVLMLKDTTPETFPVASPFQSNRNLMLQKKQDSEKTSEEDFLKSNFLGTNPTDFKDPETPDTRLESHSSLRKDGSRCPPRPDPLAVDSDGNESWPTSDYNPVIWKSTGIISNLKKKTRRFIYAVNSDSSFQEGKTPEHQGSGSPHSSTSSCLEWKSSVDPQTYSRIDPGILFTDLLGASARKECLLPEAHGQILSSPSKVMCGIDCPPPENSFSRSTIVCRELEYNEAKTNDEPHSATSFEACDGSEFQQSHFNDPSKRQRVASIKDKAKAAAGLLARKHSEVEFGKIEHTVHSPEANRTSDVNPSTLGLTPSSKDPPLQSSDIIPRAKESFCKKNLESEFRKNHKVSCVENKASPQLNDIAANNSTGKETEHQTGFSVRILQQAQQRLSDKFTESLRDCQEAISEVTAVKPNYGLNKPLHKDTFLYKALASDTDVMDNTGEICESSYSYLEEPVSESNTSAIYAEMEHKEETQELITQNSFSSKEAPEHFQKGSCSLNQALKMSGEVTLPNKDLNCRNSSSLVLKSKGNNGGNPKKWTRTFEHVLNQSVGCGFQTASNKEIKLSENNLKRSKMLFKDIEEQYPNSIFYAESANTSTTVQEKKLNQNSSRAFDSKPSSTKPNDFLDNISVVNSENTILPLQPLCIQPDLELKHCLTASQKAEITELSTILEETGSQFEFTQFKHQGSTVESNVIALGKNDEDELVNSNNTSDELKGVTFDDSFIPRVRGGNGKFPKQVETSVSSEDKVNIKQQTLYFQKSNSDRNTFADVLGIKENEFRGFHSALGRKMVVSDVALQKAAKLFSDIEEMSDEATSSEAKSKICSSESHISIVSAFETANDKNDKDIEEKGTKSLYKSPTNVENIVSVAKTENWGENMQNKERNDFPFQRPPEISNLRKSTDCNRSEGKYCVHKEGSGVSSIDQHNAVLNMSNQFLNQENTQADEGLSDLTCLEAVKAEEMSSLNISDKVRDVTCNPEWKQMEGTLSSREPQSFQTARGKKILVSTESLKKAHLLFREECPEEESDVFLFPLHQMENRVTNEKMEKYVKEKITTKQSKTPEEAIPGAPENQVMTFQREPNLESERLGEHSIMDFKTASGKNVKISKESLAKVKDIFAEENPTGKQKMSTLQHPETGTSRKRENIPEGFAHTSEALGFPGRIGEEMPDCEDDSNIEKNLFSQNKEELPELLTERGLCNQTIALKTPSTVPLEVKVSGDMEKGTEKNCSASYPELFIGKAKTASALEFCTGHGERISVSEASLFKARKWLSEGDLEGAPRKTDASESMLFSSAADKNMHFKVSPSKNILTLKMNRTDSHERQGSVYPMDGYISKASFSNSKEYAANICNDSVVVNYTAGRKGSTDSQLAFHNLTDANKKYSPVMNEDTNVQSLPDPSEMCSAQNVINIKTSTGKTEFRSTHFELKPATFSPAKTIPISPEAVIKPKEISPTTSNVRLNIGTESEICPTEIVAGNIRTFGSPENITFPHLPDNAAMYIDTAKKEENIADKQALKKTQSLFANTSFEVDLQKSHCQANFRTYDFCQAELGKLPPLGALTRMSQAFNTASGKPVRVSDASLKKAKQVFSAIENHSERLPFVTSFKDTESHPEKVMDESNPNRSEKPQVLQKHSSGFRTGSGKQVRISESALERAKGVLMEFDELDKDDNVAYFSKPNQDVLKASAFHSRVDGDQAEGCILSFPTEKDLSKKLNYSNYYVERKSSEDSRHIQVSRNRDEQLSLVETGQCDNGIAIFKSENLLKIDDGSTLSSRPVQARIDVFPPCSKATESALETEAASSTKAFMEDELMGLGVARPVKQSLFTYPNDEGCIMLHPRTGKRRFEEHDSHGEPSIKRKLLPEFDKTMGKEKSSLKASRSTPEGTMKDRRMCTNHVPLKPVSCGPFSLTKERQEMRNPNLTAPNQEFLSKPNAFQHHTLGRSSSNSPVFRAPFYGVSANKNEKMNPQNISGKPAKVFVPPFKTKAHACTDKQDVSKKCQLQMNKQVNKDGEQKSSLSRHDPGVSGSNTVDAKNDQSHTDSANQETIQAVAEHGEEHSVDTITNLQRARELQEMRIEKKQRQRILPQMGRLYLAKTSGHPRLSLKTAVEGRAPSKYSTKELYMCGVSKHCLRVNSKNAESFQFCSQDCFSRECWSAGNGVQLADGGWLIPTNAGKAGKEEFYRALCDTPGVDSKLISRPWVFNHYRWIIWKLAAMEVTFPKQFANRCLTPERVLLQLKYRYDVEIDKSQRSAIKKITERDDSAAKTLVLCISEIISPSTSAAATASKTNNSVLTQKEGAVIHVTDGWYSLRALLDPPLLVLLQAGKLMVGQKIVLFGAELVGPSNACTPLEAPEDLMLKISANSTRPARWYAKLGFQPDPRPFPLSLSSLFKDGGNVGCVDVVIQRAYPTQWMEKTHTGSYVFRNERAEEKEASKHAESQQKKLEALYAKIQDDFEKQEDAARRQDVKSRVLTRKQVRALQDGAELYEAVKSVPDPAYIEAYFSKEQLKALSSHRQMLSDQKQAQIEMEFRKALELAEEGEEGWARRDVTAIWKLRVVDYRKPGKDAAMLNIWRPLSDMYSLLKEGSRYRIYHTAPSQSKSRSGRASVQLTATKKTQYQLLPASHEILFRIYRPREVLQFGKLLDPALWPPWTEMDLVGFVISVTKRAGLAPLVYLSDECHNLLAIKFWTDLNEDIVKPHALIAASNLQWKSETTSGICTLCAGELSAISANPKEIHFQETFNKLKSTIQDVIQFCSHAENKLRNVLLLSDPSWSHRAADGSLEPPTPHGRFDLVSLPQLQVTVTYSFIQMPPKSEAGPSPAAAASALGSGTLTPQPGWRGAAGPAAPKTCKKRKALEYLSRIPSPPPVSPLCASVSPALKKAFQPPRCCGIRPSTPVQRPSSPREGSAQSPPPLEGDLVTDEELASINTQALLAGLAEDNTVTAGPPGLKADAPDSPLEKGRLSPNCSAGADLAGNHADEARGMATSQQKLRR\n```\n\n----------------------------------------\n\nTITLE: Language-Specific Code Block in HTML\nDESCRIPTION: Example of explicitly specifying a language for syntax highlighting using HTML class attribute.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/root/static/js/highlight/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<pre><code class=\"html\">...</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Finding Features by ID in Ensembl REST API\nDESCRIPTION: This example shows how to find overlapping features for a specific stable ID (e.g., ENSG00000157764). This can be used to determine what other features overlap with a known feature.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature.txt#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://rest.ensembl.org/overlap/id/ENSG00000157764?feature=gene;content-type=application/json\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Ontology File with curl - Bash\nDESCRIPTION: Downloads the Sequence Ontology OBO file version 2.5.1 using curl. This file is required for later steps that involve populating the MySQL database.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/testdata/ontology.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Download ontology\ncurl -s 'http://www.sequenceontology.org/resources/obo_files/release_2.5.1.obo' > so.obo\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Ensembl REST API in Perl\nDESCRIPTION: This snippet configures logging for the Ensembl REST API. It sets up a file appender for logging, specifies the log file path, and defines the logging level and layout pattern.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/operon_transcript_gene.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  config => {\n    file => {\n      class => 'Log::Log4perl::Appender::File',\n      filename => 'log/rest.log',\n      mode => 'append',\n      layout => {\n        class => 'Log::Log4perl::Layout::PatternLayout',\n        ConversionPattern => '%d %p %x %m%n'\n      }\n    }\n  },\n  level => 'warn'\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Genome Sequence Data in Tabular Format\nDESCRIPTION: This snippet represents a tabular dataset of genome sequence information. Each row contains fields such as sequence length, identifier, type, and other attributes. The data includes chromosomes, scaffolds, and ancestral segments.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/dnafrag.txt#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n12160495\t156412533\t2\t87\tchromosome\tNUC\t1\t1\n13055731\t100405168\t3\t112\tchromosome\tNUC\t1\t1\n13777390\t148809762\t2\t142\tchromosome\tNUC\t1\t1\n13783408\t231019\tAADN03027098.1\t142\tscaffold\tNUC\t1\t1\n6410000003551\t4072\tAncestor_641_3551\t63\tancestralsegment\tNUC\t1\t1\n6410000007888\t3317737\tAncestor_641_7888\t63\tancestralsegment\tNUC\t1\t1\n6410000007889\t3679617\tAncestor_641_7889\t63\tancestralsegment\tNUC\t1\t1\n```\n\n----------------------------------------\n\nTITLE: Example Tab-Separated Genomic Feature Data\nDESCRIPTION: This snippet displays data in a tab-separated value (TSV) format. Each line represents a record containing four fields: two numerical identifiers, an Ensembl transcript ID (e.g., ENST00000263025), and a genomic feature type (e.g., 'exon', '3'flank', 'exon/3'flankboundary'). This format is commonly used for storing or exchanging structured genomic annotation data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/probe_feature_transcript.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n3278143\\t1839569\\tENST00000263025\\texon\\t\n9081801\\t1839569\\tENST00000322266\\texon\\t\n48532971\\t1839569\\tENST00000461737\\texon\\t\n50619920\\t1839569\\tENST00000466521\\texon\\t\n58562249\\t1839569\\tENST00000484663\\texon\\t\n58963888\\t1839569\\tENST00000485579\\texon/3'flankboundary\\t\n61061805\\t1839569\\tENST00000490298\\texon\\t\n62996858\\t1839569\\tENST00000494643\\t3'flank\\t\n3278146\\t27576582\\tENST00000263025\\texon\\t\n9081804\\t27576582\\tENST00000322266\\texon\\t\n48532974\\t27576582\\tENST00000461737\\texon\\t\n50619923\\t27576582\\tENST00000466521\\texon\\t\n58562252\\t27576582\\tENST00000484663\\texon\\t\n58963891\\t27576582\\tENST00000485579\\texon/3'flankboundary\\t\n61061808\\t27576582\\tENST00000490298\\texon\\t\n62996861\\t27576582\\tENST00000494643\\t3'flank\n```\n\n----------------------------------------\n\nTITLE: Defining Language Submodes in Highlight.js\nDESCRIPTION: Example of defining language submodes directly under the 'contains' property instead of using named submodes. This allows for auxiliary modes needed only in specific parsing contexts.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/root/static/js/highlight/CHANGES.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncontains: [\n  'string',\n  'number',\n  {begin: '\\\\n', end: hljs.IMMEDIATE_RE}\n]\n```\n\n----------------------------------------\n\nTITLE: Tabular Ancestral Sequence Data Example in TSV Format\nDESCRIPTION: This data snippet shows ancestral sequence entries in a tab-separated values format. Each row contains a numeric identifier, an ancestor identifier with a specific format (Ancestor_X_Y), and genomic coordinates represented as start and end positions.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/seq_region.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n695907\tAncestor_641_3551\t1\t4072\n700244\tAncestor_641_7888\t1\t3317737\n700245\tAncestor_641_7889\t1\t3679617\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API server before startup\nDESCRIPTION: Command to set up a basic configuration for the Ensembl REST API server using the provided configuration script. This ensures the server has the minimum required settings before first launch.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/ditag.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp travisci/ensembl_rest.conf.travisci ensembl_rest.conf\n```\n\n----------------------------------------\n\nTITLE: Extended JSON Configuration with Database Parameters\nDESCRIPTION: A more comprehensive JSON configuration example that includes database connection details along with port specification and additional species-specific database parameters.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/translation.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user\": \"anonymous\",\n  \"password\": \"\",\n  \"host\": \"ensembldb.ensembl.org\",\n  \"port\": 5306,\n  \"databases\": {\n    \"homo_sapiens\": {\n      \"core\": \"homo_sapiens_core_18_34\",\n      \"variation\": \"homo_sapiens_variation_18_34\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ensembl REST API Browser Support in JavaScript\nDESCRIPTION: JavaScript code that controls automatic scrolling behavior in the Ensembl REST API browser interface. The code detects when a user has scrolled to a specific anchor and adjusts the scrolling position to account for fixed header elements.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/analysis_description.txt#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n    // if there's an anchor tag in the URL, then scroll to the proper position\n    // to account for our fixed header\n    $(document).ready(function() {\n      if(document.location.hash) {\n        window.setTimeout(function() {\n          var element = $(document.location.hash);\n          \n          if(element) {\n            $('html, body').animate({\n              scrollTop: element.offset().top - 75\n            }, 10);\n          }\n        }, 1);\n      }\n    });\n```\n\n----------------------------------------\n\nTITLE: Protein Sequence Data in FASTA-like Format\nDESCRIPTION: Collection of five protein sequences represented in standard amino acid single-letter notation. Each sequence is preceded by what appears to be an identifier or accession number, length, and hash value. The sequences share common motifs suggesting they are related proteins or variants.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n949814946\t218\t6466451bbfd25ff6e1c19ec8d9287090\tMWPPCGAMRNLALVLARSQRARACSGNERVSYTQGQSPEPRTREYFYYVDHQGQLFLDDSKMKNFITCFKDLQFLVTFFSRLRPNHSGRYEASFPFLSLCGRERNFLRCEDRPVVFTHLLASDSESPRLSYCGGGEALAIPFEPARLLPLAANGRLYHPAPERAGGVGLVRSALAFELSACFEYGPNSPTVPSHVQWQGRRIALTMDLAPLLLAAPPP\n```\n\nLANGUAGE: text\nCODE:\n```\n801599836\t85\t3a0a808ceba85a6f6a3f6b390d56797d\tMAARLYPGSEVTLFETPDVVAAAARAHFLPPAGEDGAEPRVRFLSGDFFCSPLPPADLYVLARVLHDWADAACVVLLRRVRGALRP\n```\n\nLANGUAGE: text\nCODE:\n```\n903232866\t384\t6c723877d9a0c8a089c00c064aaf0303\tMHRSRSASGPRVSARQERDFRALMDLAHGFMASQVLFAGCALRVFDAAALGPVDAAA LARSSGLSPRGTRLLLDACAGLGLLQRCRGAGPGGPAYTNSPLASTFLVAGSPLSQRSLLLYLAGTTYLCWGHLADGVREGRSQYARAVGVDADDPFTAIYRSEAERLLFMQGLQETWSLCGERILAAFDLSPFRVICDLGGGSGALARMAARLYPGSEVIVFETPDVVAAARTHFPPPADEDGAEPRVRFLSGGCGVGIWAQSPRPGLSDRRDLLLRRVRGALRPGGAVLLVESVLSPGGAGPTRTLLLSLTMLLQAQGRERTEAEYRALTARAGFSRLRLRRPRGPYHAMMAARGGGARARIDIGGGEVTSQTGSGTGSEVGTQD\n```\n\nLANGUAGE: text\nCODE:\n```\n949915701\t432\te78436dd5e68b1913804f38bab4149ee\tMAPGREGELDRDFRVLMSLAHGFMVSQVLFAALDLGIFDLAAQGPVAAEAVAQTGGWSPRGTQLLMDACTRLGLLRGAGDGSYTNSALSSTFLVSGSPQSQRCMLLYLAGTTYGCWAHLAAGVREGRNQYSRAVGISAEDPFSAIYRSEPERLLFMRGLQETWSLCGGRVLTAFDLSRFRVICDLGGGSGALAQEAARLYPGSSVCVFDLPDVIAAARTHFLSPGARPSVRFVAGDFFRSRLPRADLFILARVLHDWADGACVELLGRLHRACRPGGALLLVEAVLAKGGAGPLRSLLLSLNMMLQAEGWERQASDYRNLATRAGFPRLQLRRPGGPYHAMLARRGPRPGIITGVGSNTTGTGSFVTGIRRDVPGARSDAA GTGSGTGNTGSGIMLQGETLESEVSAPQAGSDVGGAGNEPRSGTLKQGDWK\n```\n\nLANGUAGE: text\nCODE:\n```\n951992266\t387\tee978953322a48eb236a2a0a9914bb15\tMHRGRSASARQERDFRALMDLAHGFMASQVLFAGCALRVFDAAALGPVDAAA LARSSGLSPRGTRLLLDACAGLGLLGRRRGAGPRGPAYTNSPLASTFLVAGSPLSQRSLLLYLAGTTYLCWGHLADGVREGRSQYARAVGVDADDPFTAIYRSEAERLLFMRGLQETWSLCGGRVLTAFDLSPFRVICDLGGGSGALARMAARLYPGSEVTVFETPDVVAAARAHFPPPADEDGAEPRVCFLSGDFFRSPLPPADLYVLARVLHDWADAACVELLRRVRGALRPGGAVLLVESVLSPGGAGPTRTLLLSLTMLLQARGRERTEAEYRALTARAGFSRLRLRRPRGPYHAMMAARGGGAGARSDGGGGDATSQTGSGTGSEVGAQD\n```\n\n----------------------------------------\n\nTITLE: Parsing Tab-Separated Ensembl Data in TSV Format\nDESCRIPTION: This snippet represents a single line of tab-separated values containing genomic data from the Ensembl database. It includes fields such as identifiers, coordinates, feature type, and timestamps. The data likely corresponds to a protein-coding gene or transcript.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/transcript.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n32491\t12366\t12\t44631\t50035242\t50038451\t1\t\\N\tensembl\tprotein_coding\t\\N\t1\t16938\tENSGALT00010013238\t2\t0000-00-00 00:00:00\t0000-00-00 00:00:00\n```\n\n----------------------------------------\n\nTITLE: Running REST Server with Custom Host and No Debug Mode\nDESCRIPTION: Command to start the Ensembl REST server with a specific host IP (127.0.0.1) and port, without debug mode enabled. Includes configuration for the PID file and process count.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon_transcript.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ensembl-rest\nperl scripts/rest_server.pl -host 127.0.0.1 -port 3000 -pid_file rest_ensembl.pid -processes 15\n```\n\n----------------------------------------\n\nTITLE: Querying Ensembl Alignment Data\nDESCRIPTION: Database records showing alignment and projection metadata including species comparisons, analysis types, and source information. Each record contains an ID, analysis ID, method link species set ID, description, source, and version number.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/method_link_species_set.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n635\t16\t35144\tG.gal-T.gut lastz-net (on G.gal)\tensembl\t\t80\t\\N\n641\t13\t35263\t3 neognath birds EPO\tensembl\t\t80\t\\N\n642\t11\t35263\tGerp Constrained Elements (3 neognath birds)\tensembl\t\t80\t\\N\n21247\t205\t34871\tM.mus patch projections\tensembl\t\t80\t\\N\n28937\t205\t32416\tH.sap patch projections\tensembl\t\t80\t\\N\n```\n\n----------------------------------------\n\nTITLE: Orthologues Data Records\nDESCRIPTION: Tab-separated data records showing orthologous relationships between species pairs. Each record contains IDs, species pair names, source (ensembl), and additional metadata columns.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/method_link_species_set.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n23931\t201\t31951\tT.bel-T.gut orthologues\tensembl\t\t53\t\\N\n50117\t201\t35339\tF.alb-T.bel orthologues\tensembl\t\t73\t\\N\n27176\t201\t33425\tT.bel-A.car orthologues\tensembl\t\t61\t\\N\n```\n\n----------------------------------------\n\nTITLE: Displaying Genomic Coordinate Mappings in Tab-Delimited Format\nDESCRIPTION: A set of tab-delimited values representing genomic coordinates and mapping information. Each line contains seven fields that likely represent: source ID, target ID, source start, source end, strand information, length, and orientation.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/assembly.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n39878\t22098\t1\t231019\t1\t231019\t1\n41747\t12665\t2712904\t2961365\t1\t248462\t-1\n44631\t12665\t100123171\t100371632\t1\t248462\t-1\n44631\t41747\t97410268\t100374498\t1\t2964231\t1\n```\n\n----------------------------------------\n\nTITLE: Creating Daemontools Service Directory for Ensembl REST\nDESCRIPTION: Commands to create a service directory for Ensembl REST in Daemontools, including setting up the run script and log directory.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $SPATH/$SERVICE/log\necho '#!/bin/bash' > $SPATH/$SERVICE/run\nchmod +x $SPATH/$SERVICE/run\n```\n\n----------------------------------------\n\nTITLE: Parsing Ensembl Gene Data from TSV Format\nDESCRIPTION: This snippet shows a tab-separated values (TSV) representation of Ensembl gene data. Each line represents an exon or transcript, with fields including genomic coordinates, strand information, and unique identifiers.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/exon.txt#2025-04-22_snippet_0\n\nLANGUAGE: TSV\nCODE:\n```\n140180\t44631\t50035242\t50035324\t1\t-1\t-1\t1\t1\tENSGALE00010013238_1\t2\t0000-00-00 00:00:00\t0000-00-00 00:00:00\n140181\t44631\t50037682\t50037837\t1\t-1\t1\t1\t1\tENSGALE00010013238_2\t2\t0000-00-00 00:00:00\t0000-00-00 00:00:00\n140182\t44631\t50038329\t50038451\t1\t1\t1\t1\t1\tENSGALE00010013238_3\t2\t0000-00-00 00:00:00\t0000-00-00 00:00:00\n```\n\n----------------------------------------\n\nTITLE: Setting up PERL5LIB Environment Variable\nDESCRIPTION: Commands to set up the PERL5LIB environment variable, which specifies the paths to the Perl modules required for the REST API to function properly.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/map.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport PERL5LIB=$PERL5LIB:$PWD/ensembl/modules:$PWD/ensembl-rest/lib\nexport PERL5LIB=$PERL5LIB:$PWD/ensembl-io/modules:$PWD/ensembl-variation/modules\nexport PERL5LIB=$PERL5LIB:$PWD/ensembl-funcgen/modules:$PWD/ensembl-compara/modules\n```\n\n----------------------------------------\n\nTITLE: Ontology Data Mapping in TSV Format\nDESCRIPTION: A tab-separated values (TSV) representation of ontology mappings. Each row represents an ontology with its ID, name, type, and version information. The \\N values indicate NULL entries in the database.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/ontology.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n1\tSO\tsequence\t\\N\n2\tUNKNOWN\tunknown ontology\t\\N\n3\tGO\tbiological_process\treleases/2018-04-20\n7\tEFO\tEFO\t\\N\n```\n\n----------------------------------------\n\nTITLE: Displaying Database Records in SQL-like Format\nDESCRIPTION: This snippet shows a portion of a database table dump. Each row represents a record with 8 columns, containing mostly numeric values and some NULL placeholders (\\N). The first column appears to be a sequential identifier.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/variation/allele.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n6372\t1\t\\N\t2\t1\t0\t\\N\t\\N\n6373\t1\t\\N\t3\t1\t0\t\\N\t\\N\n6374\t1\t\\N\t4\t1\t0\t\\N\t\\N\n6375\t1\t\\N\t1\t1\t0\t\\N\t\\N\n6376\t1\t\\N\t2\t1\t0\t\\N\t\\N\n6377\t1\t\\N\t3\t1\t0\t\\N\t\\N\n6378\t1\t\\N\t4\t1\t0\t\\N\t\\N\n6379\t1\t\\N\t1\t1\t0\t\\N\t\\N\n6380\t1\t\\N\t2\t1\t0\t\\N\t\\N\n6381\t1\t\\N\t3\t1\t0\t\\N\t\\N\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Handler Function for Processing REST API Requests in JavaScript\nDESCRIPTION: Main Lambda handler function that processes API requests for genetic information. It validates input parameters, executes database queries, and formats responses based on the result type. Handles GET requests with specific parameters like species and ID.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/object_xref.txt#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.handler = (event, context, callback) => {\n  context.callbackWaitsForEmptyEventLoop = false;\n  var id, species, format, type, fields, result, sql;\n  \n  //species = event.queryStringParameters.species;\n  //id = event.queryStringParameters.id;\n  \n  type = event.queryStringParameters.type;\n  \n  if (type == \"lookup\") {\n    species = event.queryStringParameters.species;\n    id = event.queryStringParameters.id;\n    format = event.queryStringParameters.format || 'full';\n    \n    if (id.indexOf('rs') == 0) {\n      sql = 'select rs.name as id, concat(\"chr\", s.name) as seq_region_name, rs.seq_region_start, rs.seq_region_end, s.coord_system_id, rs.map_weight from variation as rs, seq_region as s where rs.seq_region_id=s.seq_region_id and rs.name=\"' + id + '\"';\n       \n      if (species.includes(\"grch37\")) {\n        var path = `mus_musculus_core_67_37`;\n      }\n      else {\n        var path = event.queryStringParameters.species + \"_variation_XXvepYY_ZZ\";\n      }\n    }\n    else {\n      sql = 'select g.stable_id as id, concat(\"chr\", s.name) as seq_region_name, g.seq_region_start, g.seq_region_end, g.description, g.source, g.biotype, s.coord_system_id from gene as g, seq_region as s where g.seq_region_id=s.seq_region_id and g.stable_id=\"' + id + '\"';\n      var path = event.queryStringParameters.species + \"_core_XXvepYY_ZZ\";\n    }\n    \n    pool.query(sql, function (error, results, fields) {\n      if (error) console.log(error);\n      if (format == 'full') {\n        result = results;\n      }\n      else {\n        result = {};\n        for (var i = 0; i < results.length; i++) {\n          result[results[i].id] = results[i];\n        }\n      }\n      \n      var response = {\n        \"statusCode\": 200,\n        \"headers\": {\n          \"Content-Type\": \"application/json\"\n        },\n        \"isBase64Encoded\": false,\n        \"body\": JSON.stringify(result)\n      };\n      callback(null, response);\n    });\n  }\n  else {\n    callback(null, {\"message\": \"no parameters\"});\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Finding Epigenome by ID in Ensembl REST API\nDESCRIPTION: Implements an endpoint to retrieve a specific epigenome by its ID. The action captures the epigenome ID from the URL path, fetches the corresponding epigenome object, and returns it in the requested format.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/peptide_archive.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\n# Look for a specific epigenome\nsub id :Chained('epigenomes') PathPart('') CaptureArgs(1) {\n  my ($self, $c, $id) = @_;\n  my $epigenome = $self->epigenomes_adaptor($c)->fetch_by_id($id);\n  $c->go('ReturnError', 'custom', [\"No epigenome found for ID $id\"]) unless defined $epigenome;\n  $c->stash->{epigenome} = $epigenome;\n}\n\nsub id_GET :Chained('id') PathPart('') Args(0) ActionClass('REST') {}\n\nsub id_GET_REST {\n  my ($self, $c) = @_;\n  $self->status_ok($c, entity => $c->stash->{epigenome});\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Sequence Data with Ensembl REST API\nDESCRIPTION: This code example illustrates how to fetch sequence data using the Ensembl REST API. It shows a request to retrieve the sequence for a specific genomic region in the human genome.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/ditag.txt#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /sequence/region/human/X:1000000..1000100:1 HTTP/1.1\nHost: rest.ensembl.org\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Genomic Alignment Data Records\nDESCRIPTION: Tab-separated records containing genomic alignment information with fields for coordinates, CIGAR strings, and mapping details. Each line represents a single alignment record with sequence positions and matching operations.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/genomic_align.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n6350000452465\t6350000226232\t635\t12160495\t106039898\t106041463\t1\t165M8D368M3D133M4D56MD12MD62M9D56M5D322M5D119MD21MD51M8D18MD183M\t1\t\\N\n6350001002654\t6350000501327\t635\t12160495\t106040632\t106041520\t1\t73M7D45M5D323M5D118MD23MD49M8D18MD240M\t1\t\\N\n6410000023753\t6410000010710\t641\t12160495\t106019809\t106040400\t1\tt1\t6410000023753\n```\n\n----------------------------------------\n\nTITLE: Defining Ensembl Phylogenetic Tree Nodes in TSV Format\nDESCRIPTION: This TSV data represents nodes within Ensembl's phylogenetic trees. Each line details a node's ID, its parent ID (or '\\\\N' for root nodes of subtrees), the root ID of the tree it belongs to, left and right indices (likely for nested set model representation), a distance/branch length, an NCBI Taxonomy ID, potentially another identifier or version (or '\\\\N' for NULL), and the scientific name of the taxon. This format is likely used for database loading or data exchange within the Ensembl system.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/species_tree_node.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n40101037\t40101031\t40101000\t129\t130\t0.4\t30538\t84\tVicugna pacos\n40101047\t40101027\t40101000\t134\t135\t0.5\t9796\t61\tEquus caballus\n40101022\t40101018\t40101000\t138\t145\t0.1\t311790\t\\\\N\tAfrotheria\n40101023\t40101022\t40101000\t139\t140\t0.4\t9813\t79\tProcavia capensis\n40101083\t40101017\t40101000\t147\t154\t0.1\t9263\t\\\\N\tMarsupialia\n40101086\t40101083\t40101000\t152\t153\t0.5\t13616\t46\tMonodelphis domestica\n40101087\t40101014\t40101000\t159\t184\t0.2\t32561\t\\\\N\tSauria\n40101088\t40101087\t40101000\t160\t181\t0.1\t1329799\t\\\\N\tArchelosauria\n40101090\t40101089\t40101000\t162\t167\t0.1\t9126\t\\\\N\tPasseriformes\n40101092\t40101090\t40101000\t165\t166\t0.5\t59729\t87\tTaeniopygia guttata\n40101095\t40101093\t40101000\t169\t174\t0.2\t9005\t\\\\N\tPhasianidae\n40101096\t40101095\t40101000\t170\t171\t0.3\t9031\t142\tGallus gallus\n40101097\t40101095\t40101000\t172\t173\t0.3\t9103\t112\tMeleagris gallopavo\n40101094\t40101093\t40101000\t175\t176\t0.4\t8839\t144\tAnas platyrhynchos\n40101099\t40101087\t40101000\t182\t183\t1.1\t28377\t111\tAnolis carolinensis\n40101100\t40101013\t40101000\t186\t187\t0.9\t8364\t116\tXenopus tropicalis\n40101102\t40101011\t40101000\t192\t233\t0.3\t41665\t\\\\N\tNeopterygii\n40101103\t40101102\t40101000\t193\t230\t0.3\t186625\t\\\\N\tClupeocephala\n40101104\t40101103\t40101000\t194\t199\t0.3\t186626\t\\\\N\tOtophysi\n40101106\t40101104\t40101000\t197\t198\t0.8\t7994\t146\tAstyanax mexicanus\n40101108\t40101107\t40101000\t201\t226\t0.2\t1489872\t\\\\N\tPercomorphaceae\n40101111\t40101110\t40101000\t204\t205\t0.2\t31033\t4\tTakifugu rubripes\n40101112\t40101110\t40101000\t206\t207\t0.2\t99883\t65\tTetraodon nigroviridis\n40101116\t40101114\t40101000\t213\t222\t0.1\t1489913\t\\\\N\tAtherinomorphae\n40101118\t40101116\t40101000\t214\t219\t0.4\t586240\t\\\\N\tPoeciliinae\n40101119\t40101118\t40101000\t215\t216\t0.2\t8083\t137\tXiphophorus maculatus\n40101120\t40101118\t40101000\t217\t218\t0.2\t48698\t152\tPoecilia formosa\n40101117\t40101116\t40101000\t220\t221\t0.6\t8090\t37\tOryzias latipes\n40101115\t40101114\t40101000\t223\t224\t0.8\t8128\t130\tOreochromis niloticus\n40101121\t40101107\t40101000\t227\t228\t0.8\t8049\t126\tGadus morhua\n40101122\t40101102\t40101000\t231\t232\t0.5\t7918\t148\tLepisosteus oculatus\n40101123\t40101010\t40101000\t235\t236\t0.6\t7757\t120\tPetromyzon marinus\n40101001\t40101000\t40101000\t246\t247\t1\t4932\t127\tSaccharomyces cerevisiae\n4015700000\t\\\\N\t4015700000\t1\t14\t0\t8457\t\\\\N\tSauropsida\n4015700001\t4015700000\t4015700000\t2\t11\t1\t8782\t\\\\N\tAves\n4015700003\t4015700001\t4015700000\t3\t4\t0.1\t9031\t142\tGallus gallus\n4015700011\t4015700001\t4015700000\t9\t10\t1\t8839\t144\tAnas platyrhynchos\n4015700013\t4015700001\t4015700000\t5\t6\t0.1\t9103\t112\tMeleagris gallopavo\n4015700019\t4015700001\t4015700000\t7\t8\t0.1\t59894\t145\tFicedula albicollis\n4015700022\t4015700000\t4015700000\t12\t13\t1\t28377\t111\tAnolis carolinensis\n4015700100\t\\\\N\t4015700100\t1\t14\t0\t8457\t\\\\N\tSauropsida\n4015700101\t4015700100\t4015700100\t2\t11\t1\t8782\t\\\\N\tAves\n4015700103\t4015700101\t4015700100\t3\t4\t0.1\t9031\t142\tGallus gallus\n4015700111\t4015700101\t4015700100\t9\t10\t0.1\t8839\t144\tAnas platyrhynchos\n4015700113\t4015700101\t4015700100\t5\t6\t0.1\t9103\t112\tMeleagris gallopavo\n4015700119\t4015700101\t4015700100\t7\t8\t0.1\t59894\t145\tFicedula albicollis\n4015700122\t4015700100\t4015700100\t12\t13\t1\t28377\t111\tAnolis carolinensis\n```\n\n----------------------------------------\n\nTITLE: Sample Genomic Variation Data in TSV Format\nDESCRIPTION: A block of tab-separated values (TSV) representing genomic variation records. Each row contains fields such as variation ID, chromosome ID, start/end positions, strand, variation name (RSID), alleles, functional consequence terms (e.g., 'intron_variant', 'missense_variant'), population frequency data, and evidence tags (e.g., 'cluster', 'freq', '1000Genome', 'HapMap'). The '\\\\N' likely represents null or missing values.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/variation/variation_feature_bak.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n1874445\t27506\t86442404\t86442404\t1\t1748253\tT/C\trs2299222\t1\t\\N\t1\tcluster,freq,submitter,hapmap,1000Genome\tintron_variant\t\t2\t0\tC\t0.0399449\t87\t1\tMultiple_observations,Frequency,HapMap,1000Genomes\n3416243\t27520\t25997105\t25997105\t1\t2979980\tC/A\trs4492973\t1\t\\N\t1\tcluster,doublehit,1000Genome\tintergenic_variant\t\t2\t0\tC\t0.0528007\t115\t1\tMultiple_observations,Frequency,1000Genomes\n4279031\t27522\t37954967\t37954967\t1\t3776807\tG/A\trs6129257\t1\t\\N\t1\thapmap\tdownstream_gene_variant\t\t2\t0\t\\N\t\\N\t\\N\t1\t\\N\n5296660\t27508\t45411130\t45411130\t1\t4770800\tT/A\trs7569578\t1\t\\N\t1\tcluster,freq,doublehit,hapmap,1000Genome\tnc_transcript_variant,intron_variant,downstream_gene_variant\t\t2\t0\tA\t0.164371\t358\t1\tMultiple_observations,Frequency,HapMap,1000Genomes\n5423644\t27524\t103937974\t103937974\t1\t4897829\tC/A\trs7698608\t1\t\\N\t1\tcluster,freq,doublehit,hapmap,1000Genome\tNMD_transcript_variant,5_prime_UTR_variant,intron_variant,downstream_gene_variant\t\t2\t0\tC\t0.448577\t977\t1\tMultiple_observations,Frequency,HapMap,1000Genomes\n6390520\t27517\t48845481\t48845481\t1\t5808764\tC/T\trs9882584\t1\t\\N\t1\tcluster,freq,doublehit,hapmap,1000Genome\tintron_variant\t\t2\t0\tC\t0.293388\t639\t1\tMultiple_observations,1000Genomes\n6711141\t27508\t192191539\t192191539\t1\t6106976\tT/C\trs10193249\t1\t\\N\t1\tcluster\tnc_transcript_variant,intron_variant\t\t2\t0\t\\N\t\\N\t\\N\t1\tMultiple_observations\n8616242\t27525\t120500599\t120500599\t1\t7930418\tG/A\trs12360064\t1\t\\N\t1\thapmap\tnc_transcript_variant,NMD_transcript_variant,intron_variant\t\t2\t0\t\\N\t\\N\t\\N\t1\t\\N\n9795856\t27524\t32305409\t32305409\t1\t9051025\tG/A\trs17081232\t1\t\\N\t1\tcluster,freq,1000Genome\tintergenic_variant\t\t2\t0\tA\t0.244261\t532\t1\tMultiple_observations,Frequency,1000Genomes\n10891016\t27506\t146988289\t146988289\t1\t10089212\tG/A\trs34490520\t1\t\\N\t1\tcluster,freq,1000Genome\tintron_variant\t\t2\t0\tA\t0.0224977\t49\t0.997766971588135\tMultiple_observations,Frequency,1000Genomes\n15275234\t27504\t6303493\t6303493\t1\t14128071\t-/GT\trs67521280\t1\t\\N\t1\t\\N\tintergenic_variant\t1\t14\t0\t\\N\t\\N\t\\N\t0.978519976139069\t\\N\n20835079\t27517\t190713344\t190713344\t1\t18671529\tT/A\trs77284492\t1\t\\N\t1\tcluster,freq,1000Genome\tintergenic_variant\t\t2\t0\tA\t0.0119376\t26\t1\tMultiple_observations,Frequency,1000Genomes\n27164692\t27515\t1239146\t1239146\t1\t24098261\tG/A\trs114402518\t1\t\\N\t1\tcluster,freq,1000Genome\tintergenic_variant\t\t2\t0\tA\t0.00918274\t20\t1\tMultiple_observations,1000Genomes\n29136727\t27523\t34381884\t34381884\t1\t25992950\tC/G\trs117161559\t1\t\\N\t1\tfreq,1000Genome\tintergenic_variant\t\t2\t0\tG\t0.00688705\t15\t1\t1000Genomes\n29558567\t27506\t117232346\t117232346\t1\t26469702\tC/T\trs121908760\t1\t\\N\t1\t\\N\tstop_gained,downstream_gene_variant\t\t2\t0\t\\N\t\\N\t\\N\t1\tCited\n30157455\t27525\t49973686\t49973686\t1\t27085574\tC/T\trs138574806\t1\t\\N\t1\t1000Genome\tintron_variant\t\t2\t0\tT\t0.000918274\t2\t1\t1000Genomes\n33303674\t27512\t23821095\t23821095\t1\t30220007\tG/A\trs142276873\t1\t\\N\t1\tcluster,1000Genome\tNMD_transcript_variant,intron_variant\t\t2\t0\tA\t0.123049\t268\t1\tMultiple_observations,1000Genomes\n42630412\t27509\t56744087\t56744087\t1\t39404961\tC/T\trs182218163\t1\t\\N\t1\t1000Genome\tNMD_transcript_variant,intron_variant,upstream_gene_variant\t\t2\t0\tT\t0.000459137\t1\t1\t1000Genomes\n43836173\t27516\t112994601\t112994601\t1\t40717093\tC/T\trs183531458\t1\t\\N\t1\t1000Genome\tnc_transcript_variant,intron_variant\t\t2\t0\tT\t0.000604595\t1\t1\t1000Genomes\n67490013\t1000859905\t112994552\t112994552\t1\t40717093\tC/T\trs183531458\t1\t\\N\t1\t1000Genome\tnc_transcript_variant,intron_variant\t\t2\t0\tT\t0.000604595\t0\t1\t1000Genomes\n44015884\t27521\t41312074\t41312074\t1\t40763453\tA/C\trs183577856\t1\t\\N\t1\tcluster,1000Genome\tnc_transcript_variant,NMD_transcript_variant,intron_variant,upstream_gene_variant\t\t2\t0\tC\t0.000918274\t2\t1\tMultiple_observations,1000Genomes\n44269065\t27515\t88478741\t88478741\t1\t41158182\tA/G\trs183972897\t1\t\\N\t1\t1000Genome\tintergenic_variant\t\t2\t0\tG\t0.00137741\t3\t1\t1000Genomes\n47294881\t27523\t60403074\t60403074\t1\t44132876\tG/A/T\trs186950277\t1\t\\N\t1\t1000Genome\tintergenic_variant\t\t2\t0\tA\t0.00137741\t3\t1\t1000Genomes\n47662734\t27514\t4742369\t4742369\t1\t44527501\tC/T\trs187345249\t1\t\\N\t1\tcluster,1000Genome\tdownstream_gene_variant,upstream_gene_variant\t\t2\t0\tT\t0.000459137\t1\t1\tMultiple_observations,1000Genomes\n52711238\t27508\t139024149\t139024149\t1\t49574443\tA/G\trs192396716\t1\t\\N\t1\t1000Genome\tintergenic_variant\t\t2\t0\tG\t0.000459137\t1\t1\t1000Genomes\n59652493\t27512\t40228819\t40228819\t1\t56515594\tA/G\trs371163522\t1\t\\N\t1\t\\N\tnc_transcript_variant,intron_variant\t\t2\t0\t\\N\t\\N\t\\N\t1\t\\N\n60267168\t27514\t66344873\t66344873\t1\t57137110\tG/A\trs371828972\t1\t\\N\t1\t\\N\tintergenic_variant\t\t2\t0\t\\N\t\\N\t\\N\t1\t\\N\n61197138\t27513\t41490275\t41490275\t1\t57993427\tG/A\trs372745831\t1\t\\N\t1\t\\N\tnc_transcript_variant,intron_variant\t\t2\t0\t\\N\t\\N\t\\N\t1\t\\N\n65177138\t27508\t140957003\t140957003\t1\t61997151\tC/G\trs377040510\t1\t\\N\t1\t\\N\tintergenic_variant\t\t2\t0\t\\N\t\\N\t\\N\t1\t\\N\n69175964\t27513\t25744274\t25744274\t1\t63646321\tC/T\tCOSM946275\t1\t\\N\t26\t\\N\tmissense_variant,downstream_gene_variant\t\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\n```\n\n----------------------------------------\n\nTITLE: Genomic Repeat Element Records\nDESCRIPTION: Database records containing genomic repeat elements including repeat IDs, repeat types, classifications and DNA sequences. The data includes tandem repeats, LTR elements, SINEs, tRNAs and various transposons.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/repeat_consensus.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n595268\ttrf\ttrf\tTandem repeats\tAAAAAAAAAAAAAAAAGAAAGAAAAATTAGCCTGGTGTGGTGGTGGGTGCCTGTGGTCCCAGCTGCTCGGGACGCTGAGGTGGGAGGATTGCTTGAGCCCAGGAGTTTGACGCCAGCATGGGCAATATGGTAAGACCCTATTATCTACAAAAAAAA\n```\n\n----------------------------------------\n\nTITLE: First Protein Sequence\nDESCRIPTION: Amino acid sequence containing various protein domains and structural elements\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nMFENFFHQIDRELGPLNPDWFEELNERASRDEGSAESSKAGENESIKAPETSALASQLFSTPRIFKQRHFPQSPDSIPNEKSQNEGANGELSAFPWTESSPCLFGSAKDSPKFDRSSEKPRDCFGLLDTPKRSLARS...\n```\n\n----------------------------------------\n\nTITLE: Analyzing DNA Sequence\nDESCRIPTION: This snippet represents a complete DNA sequence. It contains the four nucleotide bases: Adenine (A), Thymine (T), Cytosine (C), and Guanine (G). The sequence is uninterrupted and may represent a specific gene, genomic region, or entire chromosome.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/dna.txt#2025-04-22_snippet_2\n\nLANGUAGE: DNA\nCODE:\n```\nATCCTAAATGGGGTGTGTTTTTGTTGTCCTGTAGTTCTCCCTCTTACATCACTGTTAGCAAACACCATTTAGCATCACAAAGCCTCCTCAGCAGACTTGCTTTCCCTCATGTACACCTCTTGCCTGCTCCTCAGCCTCAGAATTGAACTTGGTTTCCTAGGCTCTCAGAAAGCAAAGATACGAGTGCTCAGAAAAGAGCTACCTACTAACCGAAGGACAGTTGATGAAAAAGCTAATAGTAAAAAATGACTATTATGACAAATACATGCATGCTTCAAGACCAAGCATTTCCTCCTTTCAAAGCTTGCTTGGCTGAGGAAACCCAGCTAGTGCCTAGAGAAACAAATCAACTGTGTACTTGCAATGCAGTTCAGTTTAATTATTAGAGGATTTATAACAACTTCACATTGAATTTATCTTCGCATTCTTAAATGAAATGAAGATTGAGCTAGAGCATTTTCTGGTATAACTCAATGCTGTTACAAAAAACAACAAAGCAAAACAAGCTGTAACACTGCAATACAATGGAAAACATAACAGTAAAAGCACAGTAGCAAAATTCCTAGGCTACAGCAGCTGAGGACACAAAGACAAGAATCTGCTTACCCTTAGAAGACTACAGGTACATGAGGATCTCCAGCAAGAGAGACCCTCACTTCCACCACCAACCCTTAAATGAGGTCTGGGAAGGGGTGGATCCTGGCTCCAACCCTTCCAGTCACTCAGGGGCATTGCATGCACCTGAGCTTCCCTGGGTTGGCCCTGCCTTCCCACCAGGTGCTCAATCACTGGTTCAAGCTGTGACTTAGCATTTCCACTACACAAGCAGATTTAAGAGGCTTAATATTACAATATGTGGCTATTCATGACTAAGCCTCTGGCCATGAGAAAGAATCCTGAAATTGACTAACACGAGCAGTAGAACATAGTAAGTAATAGCCAATTACTTAAATGAAAAAGTCACTTTGAGACACATCTCACTGAGTAGAAAAGCAATTATGAAAGTTTTTATCCTACTTTGCAGATTCTTTGCACCTGCTTCTAATATATTTCTAGGTATATTACTACAAGAATTCAGATGAAGTAGAGCTAGAAGCCATTTCCAGAATGAAATAAACTATTATTCATTTCAGCTGTGTAATAGTGCAATCATCATTACAGTAAGGGAGCATAAAAGTGAAAGATATATTTATTTAATGTGTATTTTCAGAAATATCATGGATTTCTTCAGCTATATGGAGTAGTTAAAGAATAAGTTCTGCATTACCACCTTAAAGCAGTTCTATTTGAGGTCAATCTATGTGACAATTGCAAATATCTAAAGTCACTTTATGCCCGTCAGGTGAGAAACCTCTACCATGAGAGAATTCAGACACAGTGTATTTCCATCCTTCAAATAGTAATAAAGTCAAAATCTTTTTTTGTAAAGCCACTTCAGTATTCATTTCTGTAAAACAAGTCACAGCAAACTTTCAAAACTGGCATAGCTAGCAAACTCCGTATCAGCACGTCGGTTTCTCTTCTTTCAACATCAAGAAAATTAAAAGGAGTGGTTGAGGCACCAGTGATTTTTGTACAGAAGTTCAGAAGTACTTCAAAATAAGTAGACCAAAACTTCAGCACTTATTTTAACTTCTTAAAAAAAGAGACAAAGATCACAGATCTATGATCACAGTCATAGACCATAGTTGCTGCAAAGTCATAGTGGATGCTTCTCTTTTTTCCAGGATGAAAAAAAAAAAAAAAGGAAAATGGTTCATGGAACATACCAAATCCATTTTACACTGCCATTTCATGTTCATGGTTAATCCATGGTTAATAAAAAAATAAATGACAATCTCATCTCTCAAAGCAGCCTGAGAGCATTCTGCTACACTCAGTAGTAAACTGTTTCTTCTGTGAAGACAGCTTCAGTGAACCCGGTAAGACAGAGGAGAGTCTGGCCAGCTGGCCTGGCAGCAACACTGCATGCAGAACTGACAGGGAAGTGTACTGACAACAAGCTTTGGAAAATAAGTCCATACCATAAGAGCTTGTGCTTGAAACTACCTTTATAGCTATGGTTATTGTTTCTCTTAAGAGGCACTGCATAAATATGGAGTTAGTCATCTAATGCACTTAATATTTTTCAGCCAAGGACTATTGCAGCTTTACTCTATGCCTAGGTGTTGATTATACTTTGGTTTGCTTCACTACAGTAACACGGTGCTAGCAGTACAGCTGATACTAAAGAGAAGGCTGAAATCATGGCAGACGGAAGGATCAATACGAACAAGCTGCTCCTTTACTTTTTTTCATGCTTCTTGGTTAACTTTCCTCTTTCTAGCTGGAGGCTCATGCTGCTGTTTGTTCGCTTCTCCTTTTGTTGGTTCTCCCGAGAAACTTGCTGCACAGCTTGGAGGATAGCAGTCTGCACTATCTGCTTGCTGGCATTCTGCAGCTTAACCTCATCTTGTTCTGGTCCTGGTTTCTCACCTGTCAGAACCAAGCAACAAACAAACAAGCTGATTTAAGCATTTGTGGATACTCTGTGAATGCATGAAGAATAGAAATAGAGAAGGGGGTAGGGAGGGTGGGAGACAGGAGTACTTGAGAACAGCTTATGACATAGAGAACCATAGAAGATGCTGTAGTAGGGTGCAAAATGCCTGCTACATGCTCAGTGTTGTCTGACTGAAGAGGAAGACTGAGTCATAGACCTCAGCTACCCACTTCCCAGCCCCAGGACAGCTGTGTCTTCACAGCTGAAACAAGTACCATTCTATTTTGTGGCATGAGAGGGAAAGAGTGTTTTTTTTTTCTTCATCTCTCTCTGAATCATATCCTTTTTTATTAGATGTGAGCTTTTCTGTGGGGGTTTTGACTTCATTTTGCAGTTCTGATGCATTTTCCTTCATGACCATAAAGGGGAAAAGTTTTCATTAAGTTTTCTATTTACTTGAAATTAAAAGCCTTCACCCATCAAATTCCAATTGGCTTAAAGGTAAACATTTTCTTAAGTGTAAGCTCATTAATCCTTAGCTACATTTTCAAAAGCATTTGAAAAACATTAAGAAATGCTCAGATTGCTACAATTAAAGTAGGAAAACAAATAAACAAAACTACACTATCAATAGCAACCTAAAAATATATATATATACTTCTTATGTGAGGCTTTCTTGTTTTGCCAAAATGCTAAAACCTGGAGGTTAGCAAAGTAATGTTCTGTGACAACTAACGTGGTTTATTAGTAGTAGTAGATTAGAGACTACTTTGCCTCCTATCAGAAAAGATGACTTTGGTAGGACAACAAGGAATGCCGTAAAATGGTCAAGGTTTATCCTGATATAAAAATAATAATTTTGAATCAGTGAGATGTCCACCTATAGGAATTTAAGAAAATATACACTTGCTAATGGAAATACTTTTGGTAGGTGCTTATTTGCATTACTAGATTTGATTTTGAAGGCTTTTGAGATAATCTTCTCAGTTCTTTCTTAATCAACAGTGTTATAGTCAAGTAGCTCATGAAATGGAATTGTATTTCACTGTCCGTTTGAAGCCATTTATTAAGAATTACGTCCTGAGAGAAGTAAAACAGAGTGAATGAAAGATCAGATGTTCTCATAAGAGGTCCATATTTGGAGTTGTGAGCCATGTTGTAGTAGGCGTCTTGTGGGGGCACGGGATATACGGGACAGGCCTCTCCCTAAGCATAGAGAGACAGTGCTATCGTGCTGACCTTGATGCAGAGAAAACAGGAGAAGAAGAAGGATGAGAAAAGAATGTGGAAACGGCCAAATAAGGCACAATGTTATCTGGTGTGAACCAATCAGAGTGGGACATGACAGCACGGTTATGTAGGTAAAAATGTATATAAGCTGTGTTTAGTAGTGAATAGACGCCATTTTGCTGCTCATCATATTGATGTGCGTCTGCAGTCATTTGGCCCTGATCAGGCTACTGGTCAGTGAGCGCAGAGGCCTAACACAGGTGGCTAACATCATTGTTGCAGAAAGCAACAAAGCCATAGTGTTCCTTAAGAAATATCTGGAAGAATATTTTAGATAGAAACAAAAAGTAAAGTAAAATCACCAGTTTGTCTTATGGAAGATACTACAAAGATTTGTGAGACCAAATCAACCACTAGCAAAATAATTAAACCTTAATCTGTAAGAATTAAATAATTCATTATCCAAAATTTATTTGAAAGAAGTTCAAAAATATACTTTTTTTTTCTATCCATGATACACATATTATACAATTTCTGGCTAAAAGTAAAAAAAAAAAAAAAAAAAAAAAAAAAAGCATGTTTTTTTTTCCTATTGAAATAAAATATATGAAATTTAAAAACAACATGCAAGATTACTAGCTTTAGTAATTTAGTGGGTAATAATGGTGATAGGAGGATGGTTGGACTAGATCTTCTAGGTCCTTTTCAACCTTGTGATTTTATGAGTATATTTAACAGTAATGTACAGATACTACTCTACTGCTCAAATATGAACTCAAATTTTTATTACACAATGAACAAGTCTTGCTGGGCTGAAAAGTATCAGCCAACTCAGCTTGTGTTCAGAAGATATATTACCAAAAGTATGGATAAATACAAAATTTTCAATGTGAGTGAATCTGTAAATACAAATGTGTATGCTGGATTCGGGTACAAGGGTATATGAAATGTGATCGATTTACCAACCCCCATGACAAAAAAAAAATCAGATTTTATTTTTAAAAGCACACTGTCTGCAATCATGTTGTTGTTGAAAATTACTGATTTTTCTTTCTTTTGGAGCACTTCATGTTTTATTTTATTGTTTTTAATGTACAAAATCTGAATTTTATATATATATAAATATATATTAGTATGGTTACCTGTGTTTTTCAGTTATTTGTCATGGAGCAAAGCTCACATTTAAATACAATTCATTTAATTGAGACCTTGATTACGTCTACTTATTAGGCAGTGTTGGTGTGTGCTGGGAAAATAAACCAAGCAGATAGAAACCAGAACCTTTGGACTACTTCTGATAGTTTAGGTATGCACAAAAAGGAATTAAAGAAACACAACCAAACATGTAACAACTTTGCATTAATATAACATACTTAGCATGATAGTAACCCAGGCAAAACAATAACAACAAAACAACAACAAAACCAAATGGCTTTGGTTATGAAGAAAGTCAAAGATGTTGGCCTGGGTGTTGTAAGTAATGGGGCCACTGAGAGTTTATGCTGACCAGTTACATTTAAAATTAGCAATCAGAAAATAAGAAGGGCATGAGAGAAGACACAGAAAACTACAGACCCGTTAGTCTACCAACAGTACTTGGAAAAATTATAGAGACAATTATCCTGGATGCTACAGAAAGGCATTTTAAGAACAAAGCTATTATCGTGCATAGTCAACCTGGGTTCATGTAGGGAAAATCCCGCTGTAGTGATATGACCTTATATGATATGATAATCCAATCAGTGGATGTAATACTTCTAGATTTTAGTAAGGCCTTTGATGCTGTCTCTCACAGCATCCTACTAGACAAATTGCCCAGTTGTAGCGTGAGCTTTTCTTTTCTCCTTTTCTTTCCTCTTATCCTTTTCCTTTCACCTTTTGAGCTGGATATCAGACACAGTGCAGAGGTCTGACCCTATAGAGTGATTACCATATGTAGGAGCTGGACTGACATCCAGGATCCAGACACATCAGTCAGTCACATATAAACACCTAGTTCCTCTTGAACTGTAGTGTCTGTCACAGCTGACTCAGAGGAGCAAGAAATTAGTTTGGTGTGTGTTCTCAACAAAATATAGGAAGCCATTGTCAAACATAATCTTTACAATAGAAAACACTATCCACTTATTATGCCCACTCTGATTAACAAATACTCTAACATTTATGGTCACCTTGTGGCATAGTCCTGTCGTGGCTACCACACCCTAAATTCCTCCATGGTGCTACTAAGTCTTTTCTTCACCGTGGAAAAATTAAGAGGAAATCTGCCTTTCTTAGTCTTCCTCTATCCTCTTCACTCTTGATACTATTTTATGTAGGGGTCTGGATGGAGGGATGCTGTCATTTATTAGAAGGAATTAGAATATTCAAGGTAAAAGATGGGATTGCAAATACAACAACTAGAACATCTACACTACACATTTAGCAAAGTGGAAATTGAGAGGCTGTTGGGCATGAAGGGAAGCCCATACTTTGAACTGGAAAACAAGGGGAAGTAAGGTCTGAAATCCCAGCTGCCTCTCAGAACAGTGGCTCTGCTCATGAAGATTTCTAGGACCTAGAGCTATGTGATACTTTTTTTCTTTAAATCTAGAATAAGGCTTTCATTGTATTTTTGTTTCCAATCATGGCTGATAAATGAGGATAAATGCATGTGGGTTTTTGTTTGTTTCTGACCTTACCTCAACTTTTCTTGTACGGCTTAAGCTTTCAATCATAGTTAATGTCATCTTCAGGCTAAATACAGTCAAAATTTTAACTTTTTTTTTCAAATGTCAGAGCTATAGGGTACTTTCAAAAGGATCATCTTCCAATCCATTTGTGAAACTAGGTCATTTTGCCCTAACTCAGATAAAGAATCTTTCACAATTTGTTAAGTCCTAAGAATTTCAGGTATTGAAGTTGCTGTAAAAGGACTCTGCTTCAAGAGGATTACAAAAACAGAAATTTCTTCACTTTTTCCTCTTATCTCTCATCAAATAATGAATGGCTTAATAAAGCTGAACACAGGAAAGTCCAGGAGTAATTCACCTGAGAAATGTGAGTTCGGCTGCCTTCTTGTTTCCAGTGTGTGAAGGCAGGTGATCCTTCCCCTCTCCCCAGCACTGGTGAGACCACTTCTGGGGTACAGTATCCAGTTCTGCCTCACCCTTCCTCATGCAATTGAGATATAAACACATAGGACTGAGTCCACCAAAGGGCCAAAAAGATGATGAAGGACTGGAGCACCTCTCTTAAGGAGAAAGTCAAGAGGCTGAAAGCTGGAACTGTCCAGCCTGGAGGAGGCTCAGCGGGATCTCAAGAATGTCTATAAACACCTGGAAAGTGAAAATAGGATAGAGCCAGGCTCTTTTTACTGGTGCCCAGTGACAGAACAAGAAGCAGTGGACACAAACTGGTACACAGGAGGCTCACTCCGAACACCAGGAAGCACTTCTGTGCTGTGCGAGTGATGAAGCTCTGGCACAGGCTGCCCAGAGAGGCTGTGGAATTTTTTCCCACAGAGATCAACAAAAGCTGCCAAGACGTGGGCCTGGGCACCCTGCTCTGGGTGGCCTGCTTGAAGGGGGTGTTGGACCAGATGACCTCCACAAGTCATTTCCAACCTCAACTGTTCTGTGATTTTATGACTCCATCTGGTGAGGCTGCCATAAAACTCAACTTTTCCACTTCCCGAAGGAGTAAACAGCAGTGACTAGAGGGCTGTTCCCATTATTCCCTCTTTCTTCCAGCTATTCATTTCAAAGGAAACAGCCAGCACAAAGCTGTTCTCTGAGAAGCTCACTTCTTTATTGATATGCTGCACTTAGAAGAGAGGGACTGACTAAGGAAAGCAGCAATGACTCATGCAAGCATCCCAAGGGGACTGAGCTGGAAAATGTCTATCAAACTGCTCCACTTTGCTGAGATACAGACTGTTGTGGACACGAATAAAGGCAGAACACTGAGCGCCTATAGAATTAATGCGGCATTTTAAGGATCACATATTAATACCATTATCAATAAGGTAAAATACAGATCTCTCCCCTGCTGTCTAAGCATTTGGTATTCAGCTAATCAAATCAAGCGTTAATAACATACAGCTAAGATTTATTATTTTTTTAAGGTTTGAAGAATAATTTTAATAAAAATTCCCTAACAAAATTTCAGTTGAACTATTTGCTGGTAAAACATTACATTACTGCAGAAATAGCATTCTGCTTATAAGTTACATTTGTCTAATGACCACATCAAGATGAAAAATCCCCTTCATGTCAGAAAACCCTTTCTAGTTTCTAGTTATTCTCTGCAGTTATACTGCAGTTATACTGCAAACTCCGCTTTGGTTCTGCAATTGATAATACAATTTGAAAGATGTGCAGAACTTCAAAGTCTTAGAATGGCTTTGGGAATCAGTCACATTTTACTTTCATGTAAAATTAGTGCCATATATTAATACCTAAAAATTTCCTTGGCTCTTCTGAAACTTCATGAAGAAAAAATTAAAAAAACAAACAAACAAACAACACACACACACAAAATCCTGAACAAATAAACACATTTAAAGCAAGTTCAAAATACCATTTAAATTCCTAGAATGAATATTAGTTTAAGTCCAAGAATACCTTGTGTGGGGGATCTTATACTCTGATGTTTCTAGACTACGGAATATACCTAGAAAAGTAAACACTGAAATCAATAACTACAGAGAAAGAGTGCTGAACACAGATTAAGTCTTGAAGAACTTCCCTCTGGTTGCACATGGACCTTTTTCTCATTTACTCACTTCACTTTCTTCAGAGCACCAAGATTCACTTCCTTTCCAGCCTGAGATCAAAGCAGTCTCCTGTGCCTTCTCCCTTTCAGTTTACTGCTTGTTAAATTTAATAAGATTTATAAATATTCTTACTAAATAATACTTAGCAACACATCATTTATGTGAATCAGCAGTTCAAAACGTTATCCACCATATATTTTCATAGAACTGGGGGGGATACTATCATGAAGCTACGCAACCACAGACCTTGTTTTTGCAAAGATACAAGTCCATCCCAGATCACCTGATTATGGCAATAAACTGTGGAGGAACAAGGTATCTTTCAATGGATGAAGCATCAATATTTTAAAAGGAAACAGAGGTAAAATTTTTCACATGGAATAAGAGCAGGAAAAGGTAGGAAAGAACTTCAGACTCTTGGAAAGCATAGGCTACAAATCATTTATCCCATACTTTTTGACAAGGTATTAATCACATGTGAGCATGAATGACCATAAATGAACATCTTACCTCTGTAATCTCAACAAATTTCTATTATCTCTGTTATCTTTTTTTGCTTTTTCATCAAGTTTTTTGTTTTTTCCTAGAATCATAGAATTGCTCAGGTTGGAAAAGACCTTAAAGATCATTGAGTCCAACCACAACCTAACTATACTACCCTAACTAACAATCCTCTGCTAAATCATGTCCTTGAGCATCACATCCAAATGGTTTTTAAACACATCCAGGGATGGTGACTCAACCACCTCCCTTAGGAGCCTATTTCAGTGCTTAACAACCTTTCCTGTAAAGAAGTTTTTCCTGATATCCAACCTAAACTTACCCTGGCACAACTTGAGGCCATTTCCCCTCTTCCTGTCAGCTGTCACCAGTGAGAGGAGACCAGCCCCACTCTCACTGTAAGCACCTTTCAGATACTGGAAGAGAGCAATAAGGTCTCCTCTCAGCCTCCTTTTCCCCATACTAAGCAGCCCCGGTTCCTTTAGTCTCTCCTCGTAGGCCATATTCTCCAAACCCTTCACAAGCCTTGTTGCCCTTCTCTGGACCTGCTCCAGCACCTCCTTTCCATAAAGTCCTTTCTGTACTGAGGTGCCCAAAGCTGAACATAGTACTCAAGGTGAGGCCTCACCAGTGCTGAGTACAGGGGCAGGATTCCTTTCCTAGTCCTGCTCACCACAACGTTTCTGATATAAGCCAGGATGCCATTGGCCTTCTTGGCCACCTGGGAACACTGCTGGCTCATATTCAGCTGACTGTACATCAGTACACGAAAGTCCCTTTCCATCAGGCAACTTTTCAGCCACTCTTCCCCAAGCCTGTAGGGTTGCCTGGGGTTGTTGTGACCAAAATGAAGGACCCAACACTTGGCCCTATTGAAACTCATACAGTTTGCCTTGGCCCATCGATCCAGTCTATCCAGGTCCCCCTGTAGTGCCCTTCTCCCCTCTGGCAGATCAACACTCCCTCCCACGTTGGTGTCATCTTCAAACTTACTGAGGGTGCACTCAATCCCCTCATCAAGATCATTAATA\n```\n\n----------------------------------------\n\nTITLE: Storing Genomic Feature Data in TSV\nDESCRIPTION: This snippet displays multiple rows of tab-separated data, likely representing genomic features from the Ensembl project. Each row contains fields such as a feature identifier, sequence region identifier, query start/end coordinates, target start/end coordinates, strand indicator (1 for positive, -1 for negative, 0 for none), an analysis identifier, a type identifier, and potentially phase or score information. This format is standard for storing structured genomic mapping or alignment data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/repeat_feature.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n31019237\t1000558304\t152873782\t152873799\t0\t45573\t45590\t594541\t7\t0\n31019238\t1000558304\t152873800\t152874496\t1\t5454\t6130\t594645\t2\t3746\n31019239\t1000558304\t152874497\t152874504\t0\t46288\t46295\t594541\t7\t0\n31019240\t1000558304\t152874522\t152874606\t-1\t2\t86\t594622\t2\t577\n31019241\t1000558304\t152874622\t152874705\t1\t6258\t6343\t594895\t2\t431\n31019242\t1000558304\t152874739\t152874800\t-1\t363\t425\t595435\t2\t299\n31019243\t1000558304\t152874897\t152875027\t-1\t3\t128\t595435\t2\t481\n31019244\t1000558304\t152875028\t152875233\t-1\t2428\t2661\t594715\t2\t289\n31019245\t1000558304\t152875688\t152875724\t0\t47479\t47515\t594541\t7\t0\n31019246\t1000558304\t152876853\t152876888\t0\t48644\t48679\t594541\t7\t0\n31019247\t1000558304\t152876854\t152876877\t0\t1\t24\t595436\t6\t41\n31019248\t1000558304\t152877644\t152877949\t1\t1\t303\t594588\t2\t2242\n31019249\t1000558304\t152877930\t152877947\t0\t49721\t49738\t594541\t7\t0\n31019250\t1000558304\t152878596\t152878793\t1\t75\t282\t595437\t2\t534\n31019251\t1000558304\t152878679\t152878688\t0\t50470\t50479\t594541\t7\t0\n31019252\t1000558304\t152878992\t152879649\t-1\t222\t950\t595438\t2\t1305\n31019253\t1000558304\t152879580\t152879587\t0\t51371\t51378\t594541\t7\t0\n31019254\t1000558304\t152879651\t152879747\t-1\t87\t190\t595439\t2\t298\n31019255\t1000558304\t152879742\t152879777\t0\t51533\t51568\t594541\t7\t0\n31019256\t1000558304\t152879749\t152880060\t-1\t1\t310\t594698\t2\t1923\n31019257\t1000558304\t152880061\t152880284\t-1\t4532\t4772\t594652\t2\t570\n31019258\t1000558304\t152880303\t152881117\t1\t6181\t6975\t594551\t2\t1435\n31019259\t1000558304\t152880867\t152880962\t0\t52658\t52753\t594541\t7\t0\n31019260\t1000558304\t152880868\t152880923\t0\t1\t56\t594808\t6\t49\n31019261\t1000558304\t152881107\t152881152\t1\t7107\t7153\t594551\t2\t752\n31019262\t1000558304\t152881153\t152881233\t1\t2\t84\t594701\t2\t1706\n31019263\t1000558304\t152881234\t152881521\t-1\t1\t297\t594698\t2\t1673\n31019264\t1000558304\t152881234\t152881248\t0\t53025\t53039\t594541\t7\t0\n31019265\t1000558304\t152881522\t152881779\t1\t85\t348\t594701\t2\t1706\n31019266\t1000558304\t152881780\t152882333\t1\t7154\t7812\t594551\t2\t1236\n31019267\t1000558304\t152882339\t152882499\t-1\t134\t294\t594698\t2\t1022\n31019268\t1000558304\t152882339\t152882350\t0\t54130\t54141\t594541\t7\t0\n31019269\t1000558304\t152882357\t152882717\t0\t1\t361\t595440\t6\t476\n31019270\t1000558304\t152882501\t152882797\t-1\t3\t301\t594698\t2\t1702\n31019271\t1000558304\t152882501\t152882516\t0\t54292\t54307\t594541\t7\t0\n31019272\t1000558304\t152882800\t152883573\t-1\t4724\t5500\t594582\t2\t3455\n31019273\t1000558304\t152883575\t152884205\t-1\t1\t673\t594703\t2\t1101\n31019274\t1000558304\t152884210\t152884596\t-1\t574\t960\t594630\t2\t883\n31019275\t1000558304\t152884597\t152884908\t-1\t1\t308\t594552\t2\t1865\n31019276\t1000558304\t152884597\t152884622\t0\t56388\t56413\t594541\t7\t0\n31019277\t1000558304\t152884597\t152884622\t0\t1\t26\t594674\t6\t52\n31019278\t1000558304\t152884765\t152884780\t0\t56556\t56571\t594541\t7\t0\n31019279\t1000558304\t152884790\t152884801\t0\t56581\t56592\t594541\t7\t0\n31019280\t1000558304\t152884909\t152885060\t-1\t423\t573\t594630\t2\t883\n31019281\t1000558304\t152885154\t152885324\t-1\t1\t181\t594552\t2\t1087\n31019282\t1000558304\t152885329\t152885526\t1\t282\t478\t594630\t2\t408\n31019283\t1000558304\t152885633\t152886110\t0\t57424\t57901\t594541\t7\t0\n31019284\t1000558304\t152885673\t152886104\t0\t1\t432\t595441\t6\t533\n31019285\t1000558304\t152885673\t152886091\t0\t1\t419\t595442\t6\t497\n31019286\t1000558304\t152885673\t152886110\t0\t1\t438\t595443\t6\t426\n31019287\t1000558304\t152886037\t152886145\t1\t1890\t2001\t594630\t2\t353\n31019288\t1000558304\t152886172\t152886273\t1\t5707\t5809\t594623\t2\t351\n31019289\t1000558304\t152886551\t152886729\t1\t134\t312\t594549\t2\t1211\n31019290\t1000558304\t152886700\t152886816\t0\t1\t117\t595420\t6\t134\n31019291\t1000558304\t152886702\t152886816\t0\t58493\t58607\t594541\t7\t0\n31019292\t1000558304\t152886855\t152887147\t-1\t1\t290\t594585\t2\t2100\n31019293\t1000558304\t152886855\t152886862\t0\t58646\t58653\t594541\t7\t0\n31019294\t1000558304\t152887165\t152887407\t1\t6969\t7211\t594623\t2\t518\n31019295\t1000558304\t152887497\t152887717\t1\t5374\t5606\t594895\t2\t771\n31019296\t1000558304\t152887718\t152888009\t1\t6026\t6358\t594895\t2\t483\n31019297\t1000558304\t152887989\t152888045\t0\t59780\t59836\t594541\t7\t0\n31019298\t1000558304\t152888199\t152888272\t-1\t82\t156\t594553\t2\t237\n31019299\t1000558304\t152888366\t152888637\t1\t1756\t2065\t595026\t2\t427\n31019300\t1000558304\t152889270\t152889357\t1\t18\t112\t595091\t2\t234\n31019301\t1000558304\t152889475\t152889640\t1\t284\t464\t595091\t2\t504\n31019302\t1000558304\t152890541\t152890645\t1\t3268\t3387\t594631\t2\t213\n31019303\t1000558304\t152890633\t152890656\t0\t62424\t62447\t594541\t7\t0\n31019304\t1000558304\t152890633\t152890656\t0\t1\t24\t595444\t6\t48\n31019305\t1000558304\t152892060\t152892451\t1\t2\t452\t594557\t2\t444\n31019306\t1000558304\t152892510\t152892522\t0\t64301\t64313\t594541\t7\t0\n31019307\t1000558304\t152893646\t152893701\t0\t1\t56\t595445\t6\t59\n31019308\t1000558304\t152893653\t152893710\t0\t1\t58\t595446\t6\t54\n31019309\t1000558304\t152894523\t152894599\t0\t66314\t66390\t594541\t7\t0\n31019310\t1000558304\t152894523\t152894599\t0\t1\t77\t595447\t6\t77\n31019311\t1000558304\t152894885\t152894898\t1\t2971\t2985\t594631\t2\t263\n31019312\t1000558304\t152894898\t152894928\t0\t66689\t66719\t594541\t7\t0\n31019313\t1000558304\t152894898\t152894927\t0\t1\t30\t595448\t6\t46\n31019314\t1000558304\t152894899\t152895211\t-1\t1\t312\t594585\t2\t2278\n31019315\t1000558304\t152895212\t152895349\t1\t2986\t3129\t594631\t2\t263\n31019316\t1000558304\t152896055\t152896063\t0\t67846\t67854\t594541\t7\t0\n31019317\t1000558304\t152896112\t152896215\t1\t2404\t2511\t594629\t2\t2641\n31019318\t1000558304\t152896216\t152896510\t1\t1\t294\t594698\t2\t1724\n31019319\t1000558304\t152896511\t152896999\t1\t2512\t3017\t594629\t2\t2641\n31019320\t1000558304\t152896894\t152896948\t0\t68685\t68739\t594541\t7\t0\n31019321\t1000558304\t152897177\t152897358\t1\t30\t219\t594564\t2\t296\n31019322\t1000558304\t152897378\t152897609\t-1\t225\t467\t595091\t2\t990\n31019323\t1000558304\t152897672\t152897694\t0\t69463\t69485\t594541\t7\t0\n```\n\n----------------------------------------\n\nTITLE: Database ID Mapping Table\nDESCRIPTION: A tab-separated file containing database ID mappings with columns for source ID, target ID, and configuration parameters. Each row represents a relationship between database entities.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/closure.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n6302\t126\t1116\t393\t2\t1\t0\n6303\t127\t125\t393\t2\t1\t0\n6304\t127\t1116\t393\t2\t1\t0\n```\n\n----------------------------------------\n\nTITLE: Fetching homologues for a gene with curl\nDESCRIPTION: This shell command demonstrates how to use curl to fetch homologues for a specific gene from the Ensembl REST API. It sends a GET request to the homology/id endpoint to retrieve homology information for ENSG00000157764.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon_transcript_gene.txt#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-type:application/json\" \\\nhttps://rest.ensembl.org/homology/id/ENSG00000157764?format=condensed\\;type=orthologues | jq .\n```\n\n----------------------------------------\n\nTITLE: Accessing Ensembl REST API with R httr\nDESCRIPTION: Example of using R's httr package to make requests to the Ensembl REST API. This code demonstrates setting the proper content type and handling the API response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/assembly.txt#2025-04-22_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nlibrary(httr)\n\nserver <- \"https://rest.ensembl.org\"\next <- \"/info/ping\"\n\nr <- GET(paste(server, ext, sep = \"\"), content_type(\"application/json\"))\n\nstop_for_status(r)\n\ncontent(r)\n```\n\n----------------------------------------\n\nTITLE: Configuring API Version and Documentation URL for Ensembl REST API in Perl\nDESCRIPTION: This snippet sets the API version number and documentation URL for the Ensembl REST API. It also specifies the major and minor version numbers separately.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/data_file.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'Controller::Root',\n  documentation_url => 'https://github.com/Ensembl/ensembl-rest/wiki',\n  api_version => 2,\n  api_major_version => 2,\n  api_minor_version => 0,\n}\n```\n\n----------------------------------------\n\nTITLE: Tab-Separated Genomic Data Example\nDESCRIPTION: This snippet showcases rows of tab-separated values (TSV). Each row likely represents a genomic feature or alignment, containing fields such as unique identifiers, sequence identifiers, start/end coordinates, strand (+1/-1/0), optional metadata (like rank or observed/expected ratios 'oe'), type identifiers, and scores or confidence values. This format is common for bioinformatics data exchange.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/simple_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n951143\t27516\t311447\t311448\t1\t\t8306\t0.999\n951144\t27516\t311783\t311902\t1\trank = 1\t8304\t0.837\n951145\t27516\t311837\t312804\t-1\trank = 1\t8304\t0.9143\n951146\t27516\t312987\t313626\t0\toe = 0.91\t8305\t315\n951147\t27516\t313176\t313179\t-1\t\t8306\t0.999\n951148\t27516\t318669\t319908\t0\toe = 0.82\t8305\t687\n951149\t27516\t318832\t319052\t-1\trank = 1\t8304\t0.5375\n951150\t27516\t321363\t322031\t-1\trank = 1\t8304\t0.706\n951151\t27516\t321991\t322415\t0\toe = 1.08\t8305\t278\n951152\t27516\t323954\t324489\t0\toe = 0.78\t8305\t185\n951153\t27516\t328888\t329640\t0\toe = 1.60\t8305\t400\n951154\t27516\t331506\t332418\t0\toe = 0.76\t8305\t258\n951155\t27516\t331589\t332015\t1\trank = 1\t8304\t0.671\n951156\t27516\t333118\t333919\t-1\trank = 1\t8304\t1\n951157\t27516\t333804\t335122\t0\toe = 0.78\t8305\t1346\n951158\t27516\t334145\t334149\t1\t\t8306\t0.999\n951159\t27516\t334286\t334353\t1\trank = 1\t8304\t1\n951160\t27516\t334341\t334345\t1\t\t8306\t0.999\n951161\t27516\t334416\t334418\t1\t\t8306\t0.999\n951162\t27516\t334475\t334480\t-1\t\t8306\t0.999\n951163\t27516\t334498\t334502\t-1\t\t8306\t0.999\n951164\t27516\t346967\t348202\t0\toe = 0.86\t8305\t1645\n951165\t27516\t347103\t347589\t-1\trank = 2\t8304\t1\n951166\t27516\t347506\t347589\t-1\trank = 1\t8304\t1\n951167\t27516\t347523\t347523\t-1\t\t8306\t0.999\n951168\t27516\t347576\t347581\t1\t\t8306\t0.999\n951169\t27516\t347612\t347619\t-1\t\t8306\t0.999\n951170\t27516\t347628\t347632\t1\t\t8306\t0.999\n951171\t27516\t347639\t347646\t-1\t\t8306\t0.999\n951172\t27516\t347666\t347676\t1\t\t8306\t0.999\n951173\t27516\t347694\t347702\t1\t\t8306\t0.999\n951174\t27516\t347712\t347720\t-1\t\t8306\t0.999\n951175\t27516\t347839\t347846\t-1\t\t8306\t0.999\n951176\t27516\t347923\t348025\t1\trank = 1\t8304\t1\n951177\t27516\t347957\t348074\t1\trank = 2\t8304\t1\n951178\t27516\t366385\t366910\t0\toe = 0.95\t8305\t231\n951179\t27516\t367311\t369648\t0\toe = 1.18\t8305\t1389\n951180\t27516\t374650\t374878\t1\trank = 1\t8304\t0.7535\n951181\t27516\t379485\t380371\t0\toe = 0.85\t8305\t374\n951182\t27516\t379959\t380098\t-1\trank = 1\t8304\t0.8088\n951183\t27516\t383040\t383113\t1\trank = 1\t8304\t0.9795\n951184\t27516\t387917\t389097\t0\toe = 1.17\t8305\t422\n951185\t27516\t388706\t388769\t-1\trank = 1\t8304\t0.6167\n951186\t27516\t389098\t389171\t1\trank = 1\t8304\t0.9982\n951187\t27516\t395777\t395861\t-1\trank = 1\t8304\t0.7851\n951188\t27516\t398181\t398704\t0\toe = 0.93\t8305\t161\n951189\t27516\t398691\t398789\t1\trank = 1\t8304\t0.9802\n951190\t1000558304\t152830683\t152830814\t1\trank = 1\t8304\t0.6826\n951191\t1000558304\t152863250\t152864189\t-1\trank = 1\t8304\t1\n951192\t1000558304\t152864044\t152865302\t0\toe = 0.82\t8305\t1514\n951193\t1000558304\t152864088\t152864088\t1\t\t8306\t0.999\n951194\t1000558304\t152864110\t152864117\t1\t\t8306\t0.999\n951195\t1000558304\t152864150\t152864150\t1\t\t8306\t0.999\n951196\t1000558304\t152864523\t152864751\t1\trank = 1\t8304\t1\n951197\t1000558304\t152864523\t152864838\t1\trank = 2\t8304\t1\n951198\t1000558304\t152864523\t152865029\t1\trank = 3\t8304\t1\n951199\t1000558304\t152864581\t152864585\t1\t\t8306\t0.999\n951200\t1000558304\t152864602\t152864609\t1\t\t8306\t0.999\n951201\t1000558304\t152864612\t152864621\t1\t\t8306\t0.999\n951202\t1000558304\t152864685\t152864690\t-1\t\t8306\t0.999\n951203\t1000558304\t152864706\t152864707\t-1\t\t8306\t0.999\n951204\t1000558304\t152864722\t152864723\t-1\t\t8306\t0.999\n951205\t1000558304\t152864747\t152864749\t-1\t\t8306\t0.999\n951206\t1000558304\t152864813\t152864816\t-1\t\t8306\t0.999\n951207\t1000558304\t152875303\t152876148\t0\toe = 0.68\t8305\t379\n951208\t1000558304\t152875456\t152875553\t-1\trank = 1\t8304\t1\n951209\t1000558304\t152875765\t152876544\t1\trank = 1\t8304\t1\n951210\t1000558304\t152875765\t152876453\t1\trank = 2\t8304\t1\n```\n\n----------------------------------------\n\nTITLE: Mapping Patch Files to Schema Versions - Plain Text Index\nDESCRIPTION: This snippet demonstrates a plain text tabular format used to associate database schema version progressions with corresponding SQL patch files and their feature labels. No external dependencies are required beyond file I/O. Each line encodes an index, an unused (possibly reserved) column, a patch identifier, and a reference to the patch file and the schema element or change tracked. Inputs are assumed to be in TSV form; outputs depend on the consumer's interpretation (such as a migration tool). There are no built-in validation, comments, or explicit constraints.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/meta.txt#2025-04-22_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n125\\t\\N\\tschema_version\\t113\\n2\\t\\N\\tschema_type\\tcompara\\n3\\t\\N\\tpatch\\tpatch_84_85_a.sql|schema_version\\n4\\t\\N\\tpatch\\tpatch_84_85_b.sql|gene_tree_root_attr\\n5\\t\\N\\tpatch\\tpatch_84_85_c.sql|not_null\\n6\\t\\N\\tpatch\\tpatch_84_85_d.sql|wga_size_distribution\\n7\\t\\N\\tpatch\\tpatch_84_85_e.sql|md5sum_sequence\\n8\\t\\N\\tpatch\\tpatch_84_85_f.sql|keys\\n9\\t\\N\\tpatch\\tpatch_84_85_g.sql|smaller_datatypes\\n10\\t\\N\\tpatch\\tpatch_84_85_h.sql|homology_member_float\\n11\\t\\N\\tpatch\\tpatch_84_85_i.sql|species_tree_node_attr\\n12\\t\\N\\tpatch\\tpatch_84_85_j.sql|method_link_species_set_attr\\n14\\t\\N\\tpatch\\tpatch_85_86_a.sql|schema_version\\n15\\t\\N\\tpatch\\tpatch_85_86_b.sql|species_tree_root.species_tree\\n16\\t\\N\\tpatch\\tpatch_85_86_c.sql|gene_tree_root.species_tree_root_id\\n17\\t\\N\\tpatch\\tpatch_85_86_d.sql|homology.high_confidence\\n18\\t\\N\\tpatch\\tpatch_85_86_e.sql|gene_member_hom_stats\\n20\\t\\N\\tpatch\\tpatch_86_87_a.sql|schema_version\\n21\\t\\N\\tpatch\\tpatch_86_87_b.sql|gene_member_qc\\n22\\t\\N\\tpatch\\tpatch_86_87_c.sql|msa_stats_to_stn_tag\\n24\\t\\N\\tpatch\\tpatch_87_88_a.sql|schema_version\\n33\\t\\N\\tpatch\\tpatch_87_88_b.sql|dnafrag_name_255\\n34\\t\\N\\tpatch\\tpatch_87_88_c.sql|codon_table_id\\n35\\t\\N\\tpatch\\tpatch_87_88_d.sql|cellular_component\\n36\\t\\N\\tpatch\\tpatch_87_88_e.sql|biotype_group\\n37\\t\\N\\tpatch\\tpatch_87_88_f.sql|has_seq_edits\\n38\\t\\N\\tpatch\\tpatch_87_88_g.sql|genome_db.strain_name\\n39\\t\\N\\tpatch\\tpatch_87_88_h.sql|exon_boundaries\\n40\\t\\N\\tpatch\\tpatch_87_88_i.sql|genome_db.display_name\\n43\\t\\N\\tpatch\\tpatch_88_89_a.sql|schema_version\\n44\\t\\N\\tpatch\\tpatch_88_89_b.sql|genomic_align_tree_parent_id_null\\n45\\t\\N\\tpatch\\tpatch_89_90_a.sql|schema_version\\n46\\t\\N\\tpatch\\tpatch_89_90_b.sql|genomic_align_tree_parent_id_null\\n47\\t\\N\\tpatch\\tpatch_89_90_c.sql|constrained_element_pvalue_not_null\\n48\\t\\N\\tpatch\\tpatch_89_90_d.sql|genomic_align_tree_left_node_id_null\\n49\\t\\N\\tpatch\\tpatch_89_90_e.sql|seq_member_projection\\n50\\t\\N\\tpatch\\tpatch_89_90_f.sql|gene_member_missing_biotype_groups\\n52\\t\\N\\tpatch\\tpatch_90_91_a.sql|schema_version\\n53\\t\\N\\tpatch\\tpatch_90_91_b.sql|gene_member_qc.seq_member_id.unsigned.foreign_key\\n54\\t\\N\\tpatch\\tpatch_90_91_c.sql|gene_member.biotype_group-index\\n55\\t\\N\\tpatch\\tpatch_91_92_c.sql|mapping_session_new_type_hmm\\n56\\t\\N\\tpatch\\tpatch_91_92_c.sql|tag_255\\n58\\t\\N\\tpatch\\tpatch_91_92_a.sql|schema_version\\n59\\t\\N\\tpatch\\tpatch_91_92_c.sql|mapping_session_new_type_hmm\\n60\\t\\N\\tpatch\\tpatch_91_92_c.sql|mapping_session_new_type_hmm\\n61\\t\\N\\tpatch\\tpatch_91_92_b.sql|mapping_session_new_type_hmm\\n63\\t\\N\\tpatch\\tpatch_92_93_a.sql|schema_version\\n64\\t\\N\\tpatch\\tpatch_93_94_a.sql|schema_version\\n65\\t\\N\\tpatch\\tpatch_93_94_b.sql|homology_description_not_null\\n66\\t\\N\\tpatch\\tpatch_93_94_c.sql|method_link_display_name\\n68\\t\\N\\tpatch\\tpatch_94_95_a.sql|schema_version\\n69\\t\\N\\tpatch\\tpatch_94_95_b.sql|remove_unused_indices\\n70\\t\\N\\tpatch\\tpatch_94_95_c.sql|genome_db_is_good_for_alignment\\n71\\t\\N\\tpatch\\tpatch_94_95_d.sql|node_type_within_species_speciation\\n72\\t\\N\\tpatch\\tpatch_95_96_a.sql|schema_version\\n74\\t\\N\\tpatch\\tpatch_96_97_a.sql|schema_version\\n76\\t\\N\\tpatch\\tpatch_97_98_a.sql|schema_version\\n77\\t\\N\\tpatch\\tpatch_97_98_b.sql|division_name\\n78\\t\\N\\tpatch\\tpatch_98_99_a.sql|schema_version\\n80\\t\\N\\tpatch\\tpatch_99_100_a.sql|schema_version\\n81\\t\\N\\tpatch\\tpatch_99_100_b.sql|homology_id_64-bits\\n83\\t\\N\\tpatch\\tpatch_100_101_a.sql|schema_version\\n84\\t\\N\\tpatch\\tpatch_100_101_b.sql|genome_db.strain_name\\n85\\t\\N\\tpatch\\tpatch_100_101_c.sql|mlss_attr.n_goc_null\\n86\\t\\N\\tpatch\\tpatch_100_101_d.sql|gat.node_ids\\n87\\t\\N\\tpatch\\tpatch_100_101_e.sql|positive_int\\n88\\t\\N\\tpatch\\tpatch_100_101_f.sql|gab.direction\\n90\\t\\N\\tpatch\\tpatch_101_102_a.sql|schema_version\\n91\\t\\N\\tpatch\\tpatch_101_102_b.sql|enum_other\\n92\\t\\N\\tpatch\\tpatch_101_102_c.sql|stn_node_id_bigint\\n94\\t\\N\\tpatch\\tpatch_102_103_a.sql|schema_version\\n96\\t\\N\\tpatch\\tpatch_103_104_a.sql|schema_version\\n97\\t\\N\\tpatch\\tpatch_103_104_b.sql|dnafrag_alt_region\\n98\\t\\N\\tpatch\\tpatch_103_104_c.sql|fix_int_types\\n100\\t\\N\\tpatch\\tpatch_104_105_a.sql|schema_version\\n101\\t\\N\\tpatch\\tpatch_104_105_b.sql|genebuild_varchar255\\n103\\t\\N\\tpatch\\tpatch_105_106_a.sql|schema_version\\n105\\t\\N\\tpatch\\tpatch_106_107_a.sql|schema_version\\n106\\t\\N\\tpatch\\tpatch_105_106_b.sql|clusterset_id_varchar50\\n107\\t\\N\\tpatch\\tpatch_106_107_b.sql|case_sensitive_stable_id\\n109\\t\\N\\tpatch\\tpatch_107_108_a.sql|schema_version\\n111\\t\\N\\tpatch\\tpatch_108_109_a.sql|schema_version\\n112\\t\\N\\tpatch\\tpatch_108_109_b.sql|gene_member_qc_key\\n113\\t\\N\\tpatch\\tpatch_108_109_c.sql|stable_id_unique_per_genome\\n114\\t\\N\\tpatch\\tpatch_108_109_d.sql|case_insensitive_stable_id\\n115\\t\\N\\tpatch\\tpatch_108_109_e.sql|case_sensitive_stable_id_again\\n116\\t\\N\\tpatch\\tpatch_108_109_f.sql|stable_id_key_again\\n118\\t\\N\\tpatch\\tpatch_109_110_a.sql|schema_version\\n119\\t\\N\\tpatch\\tpatch_109_110_b.sql|case_insensitive_stable_id_again\\n120\\t\\N\\tpatch\\tpatch_109_110_c.sql|ncbi_taxa_name_varchar500\\n122\\t\\N\\tpatch\\tpatch_110_111_a.sql|schema_version\\n124\\t\\N\\tpatch\\tpatch_111_112_a.sql|schema_version\\n126\\t\\N\\tpatch\\tpatch_112_113_a.sql|schema_version\\n127\\t\\N\\tpatch\\tpatch_112_113_b.sql|meta_key_64\\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Analysis Codes to Methods in Ensembl REST - Text\nDESCRIPTION: This snippet presents a mapping table between numeric analysis codes, method identifiers, and their brief descriptions, which are used as part of the Ensembl REST data pipeline. It helps developers or systems identify which analysis or REST object is associated with a given code, facilitating lookups or conversions in cross-referencing tasks. Inputs are sequences of tab-delimited values, and outputs are the mapped values as referenced; limitations include the lack of programmatic enforcement and the need for additional code to process these mappings.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/method_link.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1\\tBLASTZ_NET\\tGenomicAlignBlock.pairwise_alignment\\tBlastZ\\n7\\tTRANSLATED_BLAT_NET\\tGenomicAlignBlock.pairwise_alignment\\ttranslated Blat\\n10\\tPECAN\\tGenomicAlignBlock.multiple_alignment\\tMercator-Pecan\\n11\\tGERP_CONSTRAINED_ELEMENT\\tConstrainedElement.constrained_element\\tGERP Constrained Elements\\n13\\tEPO\\tGenomicAlignTree.ancestral_alignment\\tEPO\\n14\\tEPO_EXTENDED\\tGenomicAlignTree.tree_alignment\\tEPO-Extended\\n16\\tLASTZ_NET\\tGenomicAlignBlock.pairwise_alignment\\tLastZ\\n19\\tLASTZ_PATCH\\tGenomicAlignBlock.pairwise_alignment\\tLastZ-path\\n101\\tSYNTENY\\tSyntenyRegion.synteny\\tsynteny\\n201\\tENSEMBL_ORTHOLOGUES\\tHomology.homology\\torthologues\\n202\\tENSEMBL_PARALOGUES\\tHomology.homology\\tparalogues\\n205\\tENSEMBL_PROJECTIONS\\tHomology.homology\\tpatch projections\\n401\\tPROTEIN_TREES\\tProteinTree.protein_tree_node\\tprotein-trees\\n402\\tNC_TREES\\tNCTree.nc_tree_node\\tncRNA-trees\\n501\\tGERP_CONSERVATION_SCORE\\tConservationScore.conservation_score\\tGERP Conservation Scores\n```\n\n----------------------------------------\n\nTITLE: Analyzing DNA Sequence\nDESCRIPTION: This snippet contains a long DNA sequence for analysis. It consists of nucleotide bases adenine (A), cytosine (C), guanine (G), and thymine (T). The sequence can be used for various genomic analyses such as gene identification, mutation detection, or comparative genomics.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/dna.txt#2025-04-22_snippet_1\n\nLANGUAGE: DNA\nCODE:\n```\nACACAATCTGCATGTCCCAGTTTTCCTGCCGTTTCAGGAGTCCTACACCATAGCAGCAGTCATACTTGCTCCCTTCCTACAGCAGAGACTGAATTGTCCTGGACTAATGCAAGTCAGTGGGCACAGATTAGGTTATTTGGGGGGAACGTGAATAGTTTGAAGTGCAGAAGCAGTCAGATGAGCTGACTTGTAACCCTGGAAAGCCTATACAAACTGCAGGTTTGCTCTTTACTGCAGCTTTCTTTCACATCAGAAGCAAAGCAGCAGAGGGAAAGCACAGTGTGCTATTCTTATGAGTCATTCCCCTGTTCTGCTGCATCTTTTTTTGCATCTAACATATGACATTAAGGCCCTTTGAGAGCATCTAGAATCACAGAGCAAATTACAATAAAGTCTTATCAAACAGTCTTCCAAGAAGATCTTCAATATCTTCTTTCATACGAGTCTTCCCATAGCATACATTTACACAGGTCACTATAAAGTAATGCCTCCTGTGTATTTCCATGGAAACTACAAACAATACAAAGAGCCTAAGAATTTGACAGTGTACCTGAGAATGTGCTCTATTTTTCCATATAGTCACCACCATTAGCTATGCATTTTCACCAGCCGTGAACAAGAACTGCAAACCACACGCATGAAAACCTGCACCAGTGGAGGTGACCCACTGTCACCACTGCTGAAACACAGCACCCACTGCCTCACTGTGCTCATAGCCACTGTTTGGTCTCCAGAAATGTTCAGCACAAGTTAATGAATGTCAGAAAGTGCAATTTTTTTCCCCTCACGTGGAGGAATTCAAATCCCCCCCCCCGTTTACCTCATATGCACTTCCACATCAGACATCATTCTGTCAGACCGCCTCCCTGCTGCCATCTGTCACATGGCAATGCAATGTAACAGAATATTGGTGGGAAGGTTCAACCGCTACTGTCATATCACCAACATCCACCTCTGACTTTGTGGGCAAACATAATAACATAGAGGTATTAGTTTTGGAGCAGCCCTCATACAGAGCTTTAGAAAAAGCCTATGACTATTTAACTGCCTCGCAGTACTCTTGGAAAACATTGTATGTCTATTCAGGACTCTCAGAAAAGTGTGTGTGAAAGATGAACATGCTGCAAAGCACCTGTTCTCCTGAAGCTACTGGGGACCTAAAGATATTTTTATCTTTTAAAATTTTCTTTTTCTTACTGTTTTTCAGTAGGCCCGTTGTCAGTTTCAGGTTCTCTGTTCTCACACAGAGGCAGCAGTCACCATAGGGCTCTGTTTTACTTTATTTTCAAGCTGTATCCCCGAGCATATTCAGAAGCAAGGGCAAAAGTTATCAAATGGTACAACTGACACTCTTCATCTCAATGAGGCCTGACTATATACAGCAAAAATAGTTCTCTGCCAATGGTAAAAGAAAGCTCTTTTAAACAGAAACCAATTATTTTGCACCAGTTGTAAGAAATTTTGTGAAGTTACTTATGATCTAGCCACCTCTAACCACAGACCACCTTAGTGCCTCACTGTTCAGGCCTATTCAGGTCCTGTAGTCTCCCCATAGCAAGATGAAGCCTGGTGCAAGCAACGTTGTATTCTATTTCACACTGAGTAACTCAGTACAAGAGCTCTTGAGACATGGTGCTCACCAAGAGCCCCACAAAATGGATCCTCCTGGTAAGGGTGACTAAATACATGGGGAGGGGAAGGAGGACACTGTCACACTGAACAGACCTCCTCTTCTGGGGAGCTCCTGCTCTCCCACTCAGAGTAACGTTAGCCAGGCATTGTTAAACCTCGACTCCCAGGCTCCACGGTCTGGCCAGCTCTCAACAATACAGCTTCAACGCATCTTTTCTCATTACCATGATTTTGTTCAACACTCTGTTTATCAAGCTTACCTACACAAACTTCAAAAATCAGAACTTGTGCCACCTCAGGCACTTTGTCTCCAAATCCAGGTGCATGTACCACAGCCCCACAGAAGCAAAACACTAGCTGTTTTATTTTCAAGAGCAACACGCACCATGATTGCCCACAAGATAAAGATTACTACAAGCATTCACATTATGGGAGGGAAGACATGGGGAAAAAAAGAATAAAATCCACATGGCAAATGTTAATGGGCTCTGCTGCCAGCTGCACAGCAGTAGGACAGGCTGAACAGGTAAGGGCCCATTAGTTCATGTGATACCTACACTCGTCTCTGCAAATTTGTTTGGCCCTTGCATGGAGAATATGCAAAAGTTTTGATCACAGTTATCCTCCTCCAGTATAATTTCAGTTTTTAGGTAAATGATACCCAGGAGAGAGATAGCTGAAAATCTGTCTTTACTAATAATAATACGAGAAAAAAAGAATAGAGCCTTTAGAATTTCAGACATTATAGCTGTGAGCTAGGCAGAAGATCTATACCTCTCACCTCAGTAGCTTGCCCAAGGAAGATTTCCAACAATAGTGCGAAATTCAAAACCAATCTGTTACTGCAGAATGCTCAAACCGCTCTGCCTGTCTCTGGTTTTAATGCAATATATAAAGTTTCTTACCTTGCTAAAAAACAGAAGAGATTTCTGTTTAATGGCAACTGTTAATGAAAGTCTGGTGAAAGTCAAATTAGGAGCAAAAACAGAACTTAGGTGTTCACCCAGTTGCTTTTGTGACTTCAGAAGCTGGTCTAGAATATAAAGTTTCAGTTTAATCTCATCTACTACTTTAACTAGTGGTGCAATGATAGTGTCTCAAGACACAGGATGGTGCTATTTGGTACACCTTTATTCTATTATCAGAAGACTCCTACTGATAGTTGTCCCACTTGCTGGATGTGGATCTGGGGCCATTCATTACTTCTGTAGTGTTTTTTAAATGGCCACAGGCTGGCTCCTCAAGAGGTCTTGACCAGGTCAGTAGTTTTAATTCTGCTTTTTAATTCCCTGCAGTCACTGGGGTTTTGACACCTTATTCACTGTAAGCCTTAACACAACTCCGCAGCTTCCTGTGTACTCTGTATGCTGGAATGATGAGGTCAAAGACTAGAATAGCCTGTGAATTTGACATCCTGCTGCTGATCCTGGAGTTCAGAAGCTGCCCTTGTCAAGCCAGAAGGGAGCTGAAAGTAGCAAGTACAGCCGCATCTTCCTGCTGCTTTGGGTAGGGGCTGCAGTGGTGTAACCCAGCCACAGTTCTGCACCACACAATTGATCACTCGCTCCCCCCCCAGATGGGTGGGAAAGCACTCTTTCTTCTCTGGTTGACCAAGAATCTTCAGCCAGATGCCTGCCAACATTCTGCAGTTTGCTGAATATTTATCTGTTAAAAGGAGATGCTGAAAGTCCTGGGAGTAATGCATCAGTTAGAATCATCAGCTCTAACTACACTGTCTTTTAGATAGTGGTATATTTTGGATCAAGACTTCTATTTAGCAATATCTTGTGAAAGCTGACACCCTCCCATGGAAAAAAAAATAAAGCAAGTGAATTGGAGACCATTTGTACAAGTTATTCCAGTCAAAATATAGGAAAGAATAATTGAAACTTGCAATATGCATTTTTTTTTCCTGAAGTGATTTGCATTAACAAGGCAAGGAAGATGCACCAAATATCAGGTATTTTCCACCAAACTGAGTCACATTAAGTCACCCTAGTAGTTCTACATAAGCTGTATCCAGAAAATGGTGCCTGCCTTCATAAATATCTAGGTTTAAATGAAGGAGTCATCAGTAGGTGCTGATGTGACCAAGGTATTCTCTAATCACAAATCCAAGATCTCTGCTGGTACATGTTCATATTTAGCATGTAAAGTCAGTTCACACCACTTTCAAACACCCATTTCTGAAGTTTACTTCATCTTAGAATCAGTATCAGCCAATGGAGAGCCTTCTAGAATTCCCTAGGAATTATGTCTTCCTTAAAATTCAGATCTCATACCTTGATTTGTACTTACTGACCTTCTGTAAAGACAAGATGCACCACCACTCCATTTCCTCTCAAGTTCCTATGTTAAAAAACTCAAATCTCCATTTCTCCCCCTTCCTCACCCTCTTCCAACTCCTGGTCCTTTCTCTTCATGCTCTTTGTCTTCCATTGTTTATTGCACTCCAGCTCTGCTACTTAATGCAATAAAGCACTCCCTTCTGCAACCCTCTGGATTTTAGCACCTTAATTGCAGCTAGGCATCAGTTGAACAAAGCAGGGGAAGGGGGGGTAGGATAAATAAACTTAAAACCATGCTCTGCAGTCTTCAGCCACAGAACTCTCCTCGCACTCTGAAGATGCAGATGGTCACATACGATTTTGATCAGCATGTAGGCACTGAAGGGGAGGAACAGTAGCTTTTCACCACCAGCAGACAGAATATTCTGAGAATTCATCACACATAAGGACATATCCAAGGATATGCAAACAACTTTTTTTTCTTCAGGTATTTAACTAATCTAAGTGAAAACCTTAATTCCCTTTTGAAGCCCATTTTTTGCCTAACTTCCTCAGAATCTTCTTAAAGGAATTATGAGATCCTTCACGCAGGGATGGGGAAAGGGAAACAAAGAGCAAACCAAAAACAAGAACACTCTGACTTACCTTTGCTTTCATCTAACACAGTTCTGCTATTTCTCAAGACAGTCAAAGTCAGTGTAAATAGGTCAACTGGGAAGATCTTACCTTGAACAATTTAAAACTGGAAATATGGTAGATAACTGAAAGTAACGTCTTAAAATTAAAACTGCTGAGTATGCCCAACTGCCAGTGTGCTGTCCAAGTATAATTCCAATCATCACTGCATCAAAGATTTTACCATACATAAATCCAAGCAACATAACGTAACAAAGAGGAAAGTTAAGGCATGAAGTTTTGTTCGGTATTCATTCCTAGTATCCTACCTGGAAGGTCCATTTAAGTAGAGAGGGAAGATCCCTGTGGTTTATTTATGTTCTTCTGAACCAGAAAGTATAATTTATTCTCCCACCAAAAAGCACAACTGCCTACTTCAATCTCAGGTATGCATTAGCAGGAAAAAAAAATGCTTTGAAATGCAGAGAGAAGAAAAATTATGTAAAATATGAATTAATCACCACAACCACATAATCAGATGCTTTTGTGGTCACTCTTATAATTACACACAGTGCCCTGGAGGGCATCCATACAGAAGTGAATACATTTTAGTATGTCATAGGGGTAATATATTGCTAGCTGGAGTGAGAGGATCAGTCTATGACGAAAGTCAATATGGAGCATCTAAATGTTTTTCTTTTTTTAAATCCTGTGTACTGCTCAGGTATATGTGATCAGAAATATCCATCTTAGAAAAGACAGTCTTCCAACATACCAAGATTATTGCTGCCTAAAAATTTTTTTCAATCCCATTTTACTAACAGCTCCTGACAAAGCTAGTGGCAGCCTCATCACAAAGCAGCAGGTAAAACTGCAAGAATTAATTACACGTTATTTGTTTAACTTCTCTTGAAGTCTGCCTCCAGCCCTTCTGTTTGAAAATTCATTGTTTCACCTAAATCATCTTTTCTTCATTCGCACTGTGCTACCCAGCCTCACAAGTGCATTAAGCACTTACTTATTAGGAAAGGAATGAATTTAAACAAATGGAAAACACTTAACATGTTTATGCTCCACTAAACTTAATTCTGCTTTTAATCCTGGGACTAGATTCCTGATAAATTCATTTATACTATTAAGTTGAACTTAAGTCTCTTTCTTCCTGATGAGGCTTACAGAGGAAGAAGATGCTACTCAACACAAGCAGTGGTATCAATTTTTGCTCCTGTTATTTGATTTATTAGACATACTCAAAGCTGTGTTTCATCTTGTAGCTTCCTTCTCAACTTCCTCTCCTTAGCTCAACTGTCACAGCTCACACTTCTAACAGTACACTATGGGCAAGCAATAACTACAAGCAAAAGGTTACTTAGGAAGAAGAAAGTCAAAGGAGAGGCAGATAAGAAACACTCTTCTCTCTGATTAGAACACAGTTGTCTGGCTTAAATATTGCTTCTGTCATGCCTGGTTATCCCTAACTAACCATCAGATCCAACGTACAGATCCAACCATTACTTACCAATAAGCTGCAACACAATAATCCAACCAAAAATAAAAACGGGCAACACACCATATTATGAAAAAAACCTGCCTCAATTGTTTTTCTGAAAGCCTAACATGACTTCAAAAAATCTTACTGTCTAATGACCTGCAAGAACCAACCCTTCCCTTCACACTTTTTAGCCATGAGATGAAGTCACCAGCAACTGAACCCTTTCCCTGTTGAATGAAAGCTGCACTCTGGGCAACCTCACACACAAGACTTTCTGCACTTGGCTCCTAGGGTGTTTGCTCTGAGATCACAAATGAGCATAACCCTTGCATGCTCCCAGCCAGTTGAGCACTGTCCTCTTCCCCTGGTTTTCTGCCATCCAGATAAAAAGTTGTTGTTTCTCTCGTTAAGGGTGGCATGCTGACAGTCAGGATAGCATCTTGCCTGCAAGGCAGGCAGCTGCTCCCACTGCTACAGGAGCTGTGCATCAGAGCCCATTCATCCCTGCTGACCCTGATGCTGCCTGCCTAATCCCAATAAATCATGGGCTCAGACAGCTCCTGCGAACACTCCCTGATGGGCACTAAAAGTAGGAAGCAGAGCACATATTTATTTATTTATCTTTGTCATTCCTGCAATAGTACCAGCTGAGTGCTGCCTGACAATATTCACTCCTGCAAACGTTCTCCTGAGAGGAACATGTACCAAGGAAGATCAAGCTGTGCTTTCTGCTGAGCACAAAAGTCATGCAGGACAACCAGACCTTGACTGCCACACAACTTTCCTTTCAGCAATGTTTTTTTTCCAGGAAAAGCACGGTCTTTTCTTCAGAGCAGCCCCATATAGCAGTGGCCTGATAAAGTCAGCGCCCTGAGCACCTCGTGACGGTGTTTCTTCCACATTGCCCCATGAGATCTCAGGTGCTGCCCAGGACTTGTCTCTGCTTTGCTGCTCAAGAGTGAGTGCAAGAAACATGCACTTCAGCTGTCCCAGGAGGACAAGCCTTGTCTAGAGCTTTTAAAGCATGTCTGCAACATTTAGTTAAGTGTTCACCTGGGCATGGAAAGACAAGTTGCTGCTTTCCCTCCAGCTAGTAGGTGGCAAAATTAAAGGGAAATAAGACAAATGAACTGTGGTCCTTCCAGTAGAAAGTTACCTGGGTTTAAATCTTACCAGTGATGCCTACTCTGTAACATATAAGATTTCTAGTATCCTGCATGACACACATAGAAGCAGCAACATATCCAAACGCAGGCAAGTACCTACAGGTCCAGCTTGTAGTCTCTCAGGCAAGAGTAGCAGAAATTACTCATAGGATAACACATAAATAAGCCCAAATGAGTCCAGAAACAAACTTCTTAGGCATACGTACAAAGGCACTGAGATCCAGGTTGTGGGCTTGTTTTTAGATAACAGAGTCCCATTGATCACTGCTGCAGTATCTATGAAATAATTTGCTTTTCCACTTTAGAATCATGACTGAGCCCATAATTATTTAGCACCACATGCCACCCTCTAAGCAAGTTAGAGATAAGGCACATTCATCAGCACTGCCAGTGGTCTGCTTGTGCAGAATCAATGCTAGCCACACCACCACAGGCTGTGGGTCAGGCAACCTGCAACTCCTTAGCTACACGTTACAGATAAAACAAGCATAGAAACATCTAAAGCAACTATGAATTCAGGAGAGGGGAAAAAGTAAAAATAAAAAGGAAAAGGAAAACCAGCACAATAATATTTGCTGGAAGCAACAGATTGTTTTGGGTCAGGATGATTTATATAATAATTGCATTTTGAGCAAAATCTGCCAGCTGATACATGCAAGACAAATCACAGCTGATTGAACTTGTTTATCAGCAATGGGAAGCTTCCTTCTTGGATAGGGAAGAGAGGGAGAAGCTTATTTCTCTAATAAAGAAGAATTAGAAGTATTTATTGCAGTATGCTCAAAATGCTATCTTTCTTGAAGACAGTATAACACAAGCTTTCTATTAGCACATTTTCTCTTGGATTCATCTACCTTTCTAAGAGATCCATTCCCTTCCATAGTCCCTGTGTGAAACCTCAGCTTCTTTCCACTCTGTTCCCTGCAAATCCTTGCATCCAGCATTACACTAGACACCAAGCAGCTGTTTGCTTTTAATTGATATCAGCAGCAACCAGGACAGGAAAAAAAGAGCATATTCACCAAGCTGCAGCCAGGATGCAGAGCAGGTGACTCTTGGCTGGCCAGGGTCCCTCCATGCTTCCTCCCTGCCCTCAGGGGGCTGTTGGAGATGCATGCAGATGAACACCTTCACGGCAGCCTCACCTTGAGCACTGTGCACAGTTTGGGACACCACAGTACAAAGAGAGCATAAAACTATTACAGAACGTCCAAAGGAAAGCTACAGAGATGGTGAAACACCCAGAAGGCAAGACGAATGAGGAGCAGCTGAGATCCCTGTGTTTGCTCAGCGCAGAGCAGAGGAGCTGAGGGGAGGCCTGATGGCGGCTGCAGCTCCTCACAGGGAGTGGAGGGGCAGCGCTGAGCTCTGCTCTGTGTGACAGCGACAGGGCCCGAGGGAACGGCATGGAGCTGTGTCAGGGGAGGGGCAGCTGGGGGTTAAGGACAGGTGCTGCACCAGAGGGTGGTGGGCATGGAACGGGCTGCCCAGGGCAGTGGGCACAGCCTCAAGTTGCCTGAGTGCAAGGAGCATCTGAACAGCACTATCAGAGCATGTGTCTGAGATTTGGGCAGTGTCGTGTGGAGGCAAAAGTTGGACTCAATAATCCTTATGCATCTCTTCCACCTTGGCATATTCTATGATTTTCCTAAATATCACCAAGTCAGTCATAGCTTGCCTGAATTCCAAATGATGGTGTATTAACTTCACTTTACAAAACACCTACAACTCTACAGAGAAGGGTTGGGGGAAACATGTTCCAAGTATCTGTCTCCAAGCTGTGAATTATCAGGAACATTTGAACACTTATTCAAAAAGGTGAGCTGTTGTAACTTCACACAAAGAAGTTGAAGAGATTTCATTATAACATACTTTTCTTTCAGTCACTACAGTTATTGAATCCTGTATCCAAACAAACTCAGCAGACACAAACAATCCACAGACAAATCCCCAGGGTGATATTTGAAGGCAGGAGCTGTAAATAACACATAGGAATAACAGCTGGAGTCTTTAGCAACACGAGGTGATTCAAGTCCTGCGTTCCCATGCTCTGAATTTGTCCTGCAGAATCTAATTGCAATTTCTGCACCAAGGCATTTGTGACACTTCACTGCCACCAAGAGCTTCCAAAGCCATATTGTGTGTTTTTTTTTTTTTTTTTTTTTAAAGCATACCTTTTTCCTGAGTTCAGGGGAGAAGACACTGAAAAATAACAATGAGGAAATGCTACTTTAGTCTGAGTCATTCTTTTCTCACACCAATGCAAGTTTTCCTCTCTCCCAGCCTGTTCCACCTCGGCAGTCTGGGAAGGCGATGCTTTACTCCTAGGGATTTCTATACTCATTCAATGTCAGTGACTCCTACTGCTAGCGCAGGCTTTATTATGGTTGAAGTGAATCAGAAGTTCAGAAAACAAGCAGAAAGAACACAAGTTATTTGTTCATCAGTATTGTTACAAAAAAAAAAGAACCGATCATATTAATAAAAAAATAATCAGAAGACAAAAGGAAAGTTTGAATTGATGTATATCAGGATGACCAGTAGTAGCTCATACCCAAAGTCAAGAGGTGTTCTATGAAGAGAACTCCTATCACAGACTGTAGGAGTCCGTGACAAACTCTCATCCTAAGCACACATCCAGAAGTTTCTAGAAGACATAATCACCATTTATCTTCAGACATAGCAGCCTCGCATTCCCACCCACTGCATAGCTCTAACATTTCACATGCAAAAAAGGAGCGAGCTGAATCTGCCCCAGAAGGTCTGCTCCCCTACTCCTGCCAGTGCTACCTCCAAGTCATAACATG\n```\n\n----------------------------------------\n\nTITLE: Ortholog Relationship Data in TSV Format\nDESCRIPTION: Tab-separated values containing ortholog mappings between genes. Each row includes identifiers, relationship type (one2one, one2many, many2many), and reference values. NULL values are represented as \\N.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/homology.txt#2025-04-22_snippet_11\n\nLANGUAGE: tsv\nCODE:\n```\n100985085\t50836\tortholog_many2many\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n```\n\n----------------------------------------\n\nTITLE: Parsing Genomic Coordinate Data (TSV)\nDESCRIPTION: Tab-separated values containing genomic coordinate mappings including feature IDs, chromosome positions, strands, and sequence lengths. Each row represents a genomic feature with start/end positions and associated mapping information.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/repeat_feature.txt#2025-04-22_snippet_3\n\nLANGUAGE: tsv\nCODE:\n```\n31019069\t27516\t387922\t388561\t0\t1\t640\t595395\t6\t1015\n31019070\t27516\t388157\t388218\t0\t388157\t388218\t594541\t7\t0\n31019071\t27516\t389197\t389520\t-1\t1\t308\t594698\t2\t1346\n```\n\n----------------------------------------\n\nTITLE: Analyzing Coverage Data for Ensembl REST API Endpoints\nDESCRIPTION: This data represents coverage information for Ensembl REST API endpoints. Each line contains an endpoint ID followed by a coverage percentage. The data spans multiple versions or implementations, showing how coverage varies across different endpoints and versions.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/species_set.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n34860\t136\n34861\t131\n34861\t134\n34862\t131\n34862\t135\n34863\t131\n34863\t136\n34864\t132\n34864\t135\n34865\t132\n34865\t136\n34869\t134\n34869\t136\n34870\t135\n34870\t136\n34872\t135\n34884\t134\n34884\t138\n34890\t4\n34890\t137\n34891\t4\n34891\t138\n...\n```\n\n----------------------------------------\n\nTITLE: Tab-Separated Genomic Data Records\nDESCRIPTION: This snippet displays several lines of tab-separated data. Each row likely represents a record containing multiple fields, including numerical IDs, NULL placeholders ('\\N'), and identifiers for genomic variations (e.g., 'rs17765152', 'rs60739517') or transcript changes (e.g., 'NM_000492.3:c.2125C>T'). This format is common for database dumps or bioinformatics data files.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/variation/variation_synonym.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n228218041\t1748253\t\\N\t2\trs17765152\n228218042\t1748253\t\\N\t2\trs60739517\n230792655\t4770800\t\\N\t2\trs57302278\n230861899\t4897829\t\\N\t2\trs17215092\n230861900\t4897829\t\\N\t2\trs60248177\n231390116\t5808764\t\\N\t2\trs58124753\n236827120\t26469702\t263192992\t3\tNM_000492.3:c.2125C>T\n```\n\n----------------------------------------\n\nTITLE: Configuring Perl LWP::UserAgent with proxy settings\nDESCRIPTION: Example of how to configure the Perl LWP::UserAgent module to use the EBI proxy for making HTTP requests. This allows Perl scripts to access the Ensembl REST API when direct connections are not possible.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/assembly_exception.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse LWP::UserAgent;\n\nmy $ua = LWP::UserAgent->new();\n$ua->proxy('http', 'http://www-proxy.ebi.ac.uk:3128');\n\nmy $response = $ua->get('http://rest.ensembl.org/info/ping?content-type=application/json');\n\nprint $response->decoded_content();\n```\n\n----------------------------------------\n\nTITLE: Starting the Ensembl REST API Server for Testing\nDESCRIPTION: This command demonstrates how to start the Ensembl REST API server in development mode for testing purposes. It uses the ensembl-rest script with specific environment variable configurations.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/repeat_consensus.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ensembl-rest\nENSEMBL_REST_CONFIG_FILE=../ensembl_rest_testing.conf ENSEMBL_REST_LOG4PERL=../ensembl_rest_testing.conf ./script/ensembl_rest_server.pl -p 3000 -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Production Settings\nDESCRIPTION: Production configuration settings for the Ensembl REST API, defining startup parameters, process management, and deployment options. Includes settings for controlling the number of workers, timeouts, and process management.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/operon.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\n\n{\n  species_lookup => undef,\n\n  ## DOCUMENTATION URL is NOT required but you must supply one\n  documentation_url => '/',\n  \n  service_name => 'Ensembl REST API',\n  service_logo => '',\n  service_colours => {},\n  \n  ## Make sure this ends in / otherwise staticdir is not found\n  directurl => 'http://rest.ensembl.org/',\n\n  ## No need to change this unless you're changing where logs go\n  log4perl => {ini_file => './conf/log4perl.conf'},\n  \n  ## Section for controlling start ups of the server\n  startup => {\n    starman => {\n      port => '5000',\n      # The maximum number of worker processes we can support\n      workers => '20',\n      # Should either be inet (tcp) or unix (socket);  \n      listen_type => 'inet',\n      # Only needed if listen_type is unix. This is also required if you run starman directly\n      socket => '', \n      # Always use the config and startup from the code directory\n      config => '$root/conf/production/ensrest.psgi',\n      # We want this to be 1 to avoid zombie processes\n      daemonize => 1,\n      # Where we send the starman log output to\n      access_log => '/nfs/nobackup/ensembl/ens_rest_logs/starman.log',\n      # Setting pid_file means we can track the root process\n      # Relative is interpreted differently by Daemon::Control & Starman\n      pid_file => '/nfs/nobackup/ensembl/ens_rest_logs/ens_rest.pid',\n      prog => 'starman',\n    },\n  },\n\n  # Configure which plugins we want to load here\n  plugin => {\n    'Cache' => 1,\n    'Info' => 1,\n    'AssemblyConverter' => 1,\n    'LDFeatureContainer' => 1,\n    'Sequence' => 1,\n    'Transcript' => 1,\n    'VEP' => 1,\n    'Variation' => 1,\n    'Overlap' => 1,\n    'Taxonomy' => 1,\n    'Cafe' => 1,\n    'GenomicAlignment' => 1,\n    'Homology' => 1,\n    'Assembly' => 1,n\n    'Archive' => 1,\n    'Regulatory' => 1,\n    'Lookup' => 1\n  },\n  \n  # Configure which plugins we want as default on routes here\n  default_view => 'JSON',\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Schema Validation for Ensembl REST API in Perl\nDESCRIPTION: This Perl configuration sets up JSON Schema validation for the Ensembl REST API. It specifies the schema directories to be used and provides an option to disable validation in development environments through an environment variable.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/repeat_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n{  \n  ### JSON schema validation config\n  schema_dir => $ENV{ENSEMBL_REST_SCHEMA_DIR} || $SiteDefs::ENSEMBL_SERVERROOT.'/ensembl-rest/root/documentation/schema',\n  # In the development environment, it may be desirable to disable schema validation for speed\n  disable_schema_validation => $ENV{ENSEMBL_REST_DISABLE_SCHEMA_VALIDATION} || 0,\n}\n```\n\n----------------------------------------\n\nTITLE: Genomic Coordinate Mapping Data in TSV Format\nDESCRIPTION: Tab-separated values file containing genomic coordinate mappings with fields for IDs, start/end positions, strands, and reference coordinates. Each row represents a distinct mapping record with 10 columns of positional and reference data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/repeat_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n31015932\t27515\t1145039\t1145064\t0\t150183\t150208\t594541\t7\t0\n31015933\t27515\t1145379\t1145387\t0\t150523\t150531\t594541\t7\t0\n31015934\t27515\t1146656\t1147147\t0\t151800\t152291\t594541\t7\t0\n```\n\n----------------------------------------\n\nTITLE: Listing Biological Sample Data in TSV Format\nDESCRIPTION: Provides a list of biological samples or individuals in a tab-separated value (TSV) format. Each line represents a record containing fields such as sample ID, internal ID, name/identifier, description/details, and other metadata columns. The '\\\\N' sequence likely indicates NULL or missing data fields.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/variation/sample.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n1592\t1592\tNA12891\tCEPH/UTAH PEDIGREE 1463\t\\N\tUNDISPLAYABLE\t0\t\\N\n2105\t2105\tNA18635\tNA18635\t\\N\tUNDISPLAYABLE\t0\t\\N\n8675\t8675\tNA19122\tGM19122 or NA19122\t\\N\tUNDISPLAYABLE\t0\t\\N\n9739\t9739\tJ. CRAIG VENTER\tIND:HUMANGENOME_JCVI|J. Craig Venter|J. Craig Venter|9606|M|O|Europe, SOURCE:submitter|JCVI|J. Craig Venter|Western & Northern European\t\\N\tUNDISPLAYABLE\t0\t\\N\n15215\t15215\tBEC_516\tSample from the DGVa study estd55\t\\N\tUNDISPLAYABLE\t0\t\\N\n17444\t17444\tGM18507\tSubject from several DGVa studies\t\\N\tUNDISPLAYABLE\t0\t\\N\n101953\t101953\t1000GENOMES:phase_1:NA19625\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n101973\t101973\t1000GENOMES:phase_1:NA19700\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n101974\t101974\t1000GENOMES:phase_1:NA19701\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n101975\t101975\t1000GENOMES:phase_1:NA19703\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n101976\t101976\t1000GENOMES:phase_1:NA19704\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n101977\t101977\t1000GENOMES:phase_1:NA19707\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n101978\t101978\t1000GENOMES:phase_1:NA19711\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n101979\t101979\t1000GENOMES:phase_1:NA19712\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n101980\t101980\t1000GENOMES:phase_1:NA19713\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102028\t102028\t1000GENOMES:phase_1:NA19818\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102029\t102029\t1000GENOMES:phase_1:NA19819\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102030\t102030\t1000GENOMES:phase_1:NA19834\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102031\t102031\t1000GENOMES:phase_1:NA19835\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102032\t102032\t1000GENOMES:phase_1:NA19900\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102033\t102033\t1000GENOMES:phase_1:NA19901\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102034\t102034\t1000GENOMES:phase_1:NA19904\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102035\t102035\t1000GENOMES:phase_1:NA19908\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102036\t102036\t1000GENOMES:phase_1:NA19909\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102037\t102037\t1000GENOMES:phase_1:NA19914\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102038\t102038\t1000GENOMES:phase_1:NA19916\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102039\t102039\t1000GENOMES:phase_1:NA19917\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102040\t102040\t1000GENOMES:phase_1:NA19920\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102041\t102041\t1000GENOMES:phase_1:NA19921\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102042\t102042\t1000GENOMES:phase_1:NA19922\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102043\t102043\t1000GENOMES:phase_1:NA19923\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102044\t102044\t1000GENOMES:phase_1:NA19982\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102045\t102045\t1000GENOMES:phase_1:NA19984\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102046\t102046\t1000GENOMES:phase_1:NA19985\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102047\t102047\t1000GENOMES:phase_1:NA20126\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102048\t102048\t1000GENOMES:phase_1:NA20127\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102049\t102049\t1000GENOMES:phase_1:NA20276\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102050\t102050\t1000GENOMES:phase_1:NA20278\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102051\t102051\t1000GENOMES:phase_1:NA20281\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102052\t102052\t1000GENOMES:phase_1:NA20282\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102053\t102053\t1000GENOMES:phase_1:NA20287\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102054\t102054\t1000GENOMES:phase_1:NA20289\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102055\t102055\t1000GENOMES:phase_1:NA20291\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102056\t102056\t1000GENOMES:phase_1:NA20294\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102057\t102057\t1000GENOMES:phase_1:NA20296\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102058\t102058\t1000GENOMES:phase_1:NA20298\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102059\t102059\t1000GENOMES:phase_1:NA20299\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102060\t102060\t1000GENOMES:phase_1:NA20314\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102061\t102061\t1000GENOMES:phase_1:NA20317\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102062\t102062\t1000GENOMES:phase_1:NA20322\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102063\t102063\t1000GENOMES:phase_1:NA20332\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102064\t102064\t1000GENOMES:phase_1:NA20334\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102065\t102065\t1000GENOMES:phase_1:NA20336\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102066\t102066\t1000GENOMES:phase_1:NA20339\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102067\t102067\t1000GENOMES:phase_1:NA20340\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102068\t102068\t1000GENOMES:phase_1:NA20341\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102069\t102069\t1000GENOMES:phase_1:NA20342\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102070\t102070\t1000GENOMES:phase_1:NA20344\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102071\t102071\t1000GENOMES:phase_1:NA20346\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102072\t102072\t1000GENOMES:phase_1:NA20348\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102073\t102073\t1000GENOMES:phase_1:NA20351\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102074\t102074\t1000GENOMES:phase_1:NA20356\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102075\t102075\t1000GENOMES:phase_1:NA20357\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102076\t102076\t1000GENOMES:phase_1:NA20359\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102077\t102077\t1000GENOMES:phase_1:NA20363\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102078\t102078\t1000GENOMES:phase_1:NA20412\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n102079\t102079\t1000GENOMES:phase_1:NA20414\t\\N\t\\N\tUNDISPLAYABLE\t0\t\\N\n```\n\n----------------------------------------\n\nTITLE: Parsing Tab-Separated Hierarchical Genomic Data in TSV Format\nDESCRIPTION: This snippet represents a structured dataset in TSV (Tab-Separated Values) format. Each line contains multiple fields separated by tabs, representing hierarchical genomic or proteomic data. The fields include identifiers, positions, statistical values, and potentially gene or protein IDs.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/gene_tree_node.txt#2025-04-22_snippet_2\n\nLANGUAGE: tsv\nCODE:\n```\n100455936\t100455914\t100455735\t168\t189\t0.0955050114991218\t\\N\n100455937\t100455936\t100455735\t169\t186\t0.00000124858541091888\t\\N\n100455938\t100455937\t100455735\t170\t183\t0.083004934361359\t\\N\n100455940\t100455938\t100455735\t171\t176\t0.0421135097232543\t\\N\n100455770\t100455940\t100455735\t172\t173\t0.00000124858541091888\t100124975\n100455797\t100455940\t100455735\t174\t175\t0.131599955420634\t100094079\n100455939\t100455938\t100455735\t177\t182\t0.0882333876942336\t\\N\n100455777\t100455939\t100455735\t178\t179\t0.00000124858541091888\t100132105\n100455764\t100455939\t100455735\t180\t181\t0.00000124858541091888\t100153475\n100455753\t100455937\t100455735\t184\t185\t0.00000124858541091888\t100046335\n```\n\n----------------------------------------\n\nTITLE: Mapping Orphanet and GO Identifiers (Plain Text)\nDESCRIPTION: This snippet contains tab-separated data defining relationships. Each line maps an identifier (e.g., 'Orphanet:15', 'GO:0060023') to the numerical value '438' using the relationship 'is'. This format is likely used for data lookups or establishing connections within the ensembl-rest system.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/variation/phenotype_ontology_accession.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1\tOrphanet:15\t438\tis\n3\tOrphanet:130\t438\tis\n58138\tGO:0060023\t438\tis\n```\n\n----------------------------------------\n\nTITLE: Gene Orthology Mapping Data in TSV Format\nDESCRIPTION: Tab-separated values containing ortholog gene mappings with metrics like IDs, relationship type (one2one, one2many), and numerical scores for gene similarity and alignment.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/homology.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n46339607\t29176\tortholog_one2many\t1\t0.1374\t0.4049\t2093.4\t612.6\t-5169.203\t40101041\t14115150\t1024894\t0\t0.00\t\\N\n```\n\n----------------------------------------\n\nTITLE: Tab-Separated Genomic Feature Data (TSV)\nDESCRIPTION: A block of tab-separated values (TSV) representing genomic features or alignments. Each line contains 10 numeric fields, likely including identifiers (e.g., columns 1, 2), start/end coordinates (e.g., columns 3, 4, 6, 7), a strand indicator or flag (column 5), and other metadata. This data format is common in bioinformatics and is associated with the Ensembl project.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/repeat_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n278861\t171547\t49862128\t49862883\t-1\t531\t1310\t9656\t1\t4418\n278862\t171547\t49862874\t49863492\t-1\t3515\t4238\t9\t1\t1744\n278863\t171547\t49863492\t49863963\t-1\t7\t479\t9656\t1\t2609\n673294\t171547\t49864499\t49864507\t0\t49864499\t49864507\t118317\t7\t0\n673296\t171547\t49864587\t49866188\t0\t49864587\t49866188\t118317\t7\t0\n673298\t171547\t49866392\t49866424\t0\t49866392\t49866424\t118317\t7\t0\n278864\t171547\t49868842\t49870679\t-1\t2626\t4503\t416\t1\t11058\n673299\t171547\t49870707\t49870736\t0\t49870707\t49870736\t118317\t7\t0\n156650\t171547\t49870926\t49870967\t0\t1\t42\t8141\t4\t56\n673302\t171547\t49870926\t49870967\t0\t49870926\t49870967\t118317\t7\t0\n156651\t171547\t49870940\t49870964\t0\t1\t25\t1885\t4\t43\n156652\t171547\t49871598\t49871674\t0\t1\t77\t51634\t4\t110\n673304\t171547\t49872000\t49872008\t0\t49872000\t49872008\t118317\t7\t0\n673306\t171547\t49872095\t49872112\t0\t49872095\t49872112\t118317\t7\t0\n673308\t171547\t49873641\t49873685\t0\t49873641\t49873685\t118317\t7\t0\n156653\t171547\t49873650\t49873684\t0\t1\t35\t2640\t4\t42\n673310\t171547\t49874886\t49874951\t0\t49874886\t49874951\t118317\t7\t0\n156654\t171547\t49875408\t49875427\t0\t1\t20\t378\t4\t40\n673313\t171547\t49875408\t49875443\t0\t49875408\t49875443\t118317\t7\t0\n673315\t171547\t49877076\t49877102\t0\t49877076\t49877102\t118317\t7\t0\n156655\t171547\t49877528\t49877552\t0\t1\t25\t51635\t4\t43\n673317\t171547\t49878159\t49878167\t0\t49878159\t49878167\t118317\t7\t0\n156656\t171547\t49878596\t49878631\t0\t1\t36\t51636\t4\t51\n673319\t171547\t49878769\t49878776\t0\t49878769\t49878776\t118317\t7\t0\n673321\t171547\t49878835\t49879593\t0\t49878835\t49879593\t118317\t7\t0\n156657\t171547\t49879594\t49879623\t0\t1\t30\t378\t4\t60\n673323\t171547\t49879865\t49879872\t0\t49879865\t49879872\t118317\t7\t0\n673326\t171547\t49880147\t49880185\t0\t49880147\t49880185\t118317\t7\t0\n673328\t171547\t49880282\t49880309\t0\t49880282\t49880309\t118317\t7\t0\n673330\t171547\t49880651\t49880658\t0\t49880651\t49880658\t118317\t7\t0\n673332\t171547\t49880731\t49880767\t0\t49880731\t49880767\t118317\t7\t0\n278865\t171547\t49881640\t49881698\t1\t833\t891\t12\t1\t417\n673334\t171547\t49882556\t49882563\t0\t49882556\t49882563\t118317\t7\t0\n278866\t171547\t49882649\t49882993\t1\t3776\t4122\t22\t1\t2165\n673336\t171547\t49883540\t49883558\t0\t49883540\t49883558\t118317\t7\t0\n673338\t171547\t49884097\t49884225\t0\t49884097\t49884225\t118317\t7\t0\n278867\t171547\t49884585\t49884785\t-1\t4479\t4805\t13\t1\t1070\n278868\t171547\t49885548\t49885800\t1\t12\t265\t3715\t1\t265\n673340\t171547\t49885845\t49885874\t0\t49885845\t49885874\t118317\t7\t0\n673342\t171547\t49887478\t49887487\t0\t49887478\t49887487\t118317\t7\t0\n673344\t171547\t49887906\t49887915\t0\t49887906\t49887915\t118317\t7\t0\n673346\t171547\t49887936\t49887952\t0\t49887936\t49887952\t118317\t7\t0\n673348\t171547\t49888237\t49888258\t0\t49888237\t49888258\t118317\t7\t0\n156658\t171547\t49888239\t49888258\t0\t1\t20\t347\t4\t40\n156659\t171547\t49889654\t49889680\t0\t1\t27\t470\t4\t40\n673351\t171547\t49889654\t49889681\t0\t49889654\t49889681\t118317\t7\t0\n```\n\n----------------------------------------\n\nTITLE: Database ID Mappings Table\nDESCRIPTION: Tab-separated values showing relationships between database IDs. Each row contains 7 columns with numeric values representing different database cross-references.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/closure.txt#2025-04-22_snippet_9\n\nLANGUAGE: tsv\nCODE:\n```\n16184\t156\t751\t613\t6\t1\t0\n16186\t158\t1\t1291\t6\t1\t0\n16187\t159\t1\t1291\t6\t1\t0\n...\n```\n\n----------------------------------------\n\nTITLE: Schema Patch Data Records\nDESCRIPTION: Database records showing the sequential patch history of schema changes, including version updates, table modifications, and data updates. Records include patch metadata and a few species-related configuration entries.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/meta.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n1822\t\\N\tpatch\tpatch_83_84_c.sql|protein_feature_unique\n1823\t\\N\tpatch\tpatch_83_84_d.sql|longer_synonym\n1824\t\\N\tpatch\tpatch_83_84_e.sql|nullable_versions\n1825\t\\N\tpatch\tpatch_84_85_a.sql|schema_version\n1826\t\\N\tpatch\tpatch_84_85_b.sql|remove_duplicated_key\n[...truncated for brevity...]\n1887\t\\N\tpatch\tpatch_111_112_b.sql|Allow meta_value to be null\n1888\t\\N\tpatch\tpatch_112_113_a.sql|schema_version\n1889\t\\N\tpatch\tpatch_112_113_b.sql|Ensure meta_value is not null\n```\n\n----------------------------------------\n\nTITLE: Configuring GeneCards External Database Reference in Ensembl-REST\nDESCRIPTION: This database record configures the GeneCards external reference in Ensembl-REST. It defines GeneCards as an external cross-reference (XREF) of type MISC with priority 50. The tab-separated values represent database fields such as ID, name, version, type, priority, display name, and other configuration parameters.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/external_db.txt#2025-04-22_snippet_0\n\nLANGUAGE: text/tsv\nCODE:\n```\n1\tGeneCards\t\\N\tXREF\t50\tGeneCards\tMISC\t\\N\t\\N\t\\N\n```\n\n----------------------------------------\n\nTITLE: Translating VEP Identifiers from REST Request Parameters in Perl\nDESCRIPTION: This function extracts and processes ID parameters from a REST request, preparing them for use with the Variant Effect Predictor. It handles different formats including HGVS notation and dbSNP identifiers.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/karyotype.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\nsub _get_id {\n  my ($self, $c) = @_;\n  my $id = $c->request->param('id');\n  unless (defined $id) {\n    Catalyst::Exception->throw(\"No ID given. Please specify a variant ID to retrieve VEP consequences for\");\n  }\n\n  $id =~ s/\\s+//g;\n  my $version = $c->request->param('version');\n  my $is_hgvs = 0;\n\n  if (\n    $id =~ /^COSV/ or ## COSMIC\n    $id =~ /^(rs|RCV|nsv)\\d+$/ or ## dbSNP, ClinVar, dbVar\n    $id =~ /^C(A|G|T)\\d+$/ ## HGMD\n  ) {\n    return [{ id => $id }];\n  }\n  elsif ($id =~ /^COSM\\d+$/) {\n    # Convert COSMIC mutation ID to COSMIC variant ID(s).\n    my @cosmic_ids = split( ',', $self->_get_cosmic_variant_ids($c, $id) );\n    my @variants;\n    foreach my $cosmic_id (@cosmic_ids) {\n       if ($cosmic_id) {\n        push(@variants, { id => $cosmic_id });\n      }\n    }\n    return \\@variants if @variants;\n  }\n  \n  $is_hgvs = 1 if $id =~ /:/;\n  $is_hgvs = 1 if $id =~ /^[A-Z]+_\\d+\\.\\d+:.*$/i;\n  return [$self->_format_hgvs($c, $id, $version)] if $is_hgvs;\n  \n  # Reset the flag for the remaining option because they're all ID's.\n  $is_hgvs = 0;\n  \n  unless($is_hgvs) {\n    Catalyst::Exception->throw(\"Given ID is not a supported format for VEP\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DNA and Protein Alignment Feature Mappings in TSV Format\nDESCRIPTION: Tab-separated data showing mappings between feature IDs (first column), feature types (dna_align_feature or protein_align_feature), and their corresponding alignment IDs (third column). Used for tracking relationships between different types of alignment features in the Ensembl database.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/supporting_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: tsv\nCODE:\n```\n5023016\tdna_align_feature\t28820022\n5023016\tdna_align_feature\t28820023\n5023016\tprotein_align_feature\t62394668\n5023016\tprotein_align_feature\t62394669\n5023016\tprotein_align_feature\t62394670\n...\n```\n\n----------------------------------------\n\nTITLE: Ortholog Relationship Data in TSV Format\nDESCRIPTION: Database table showing ortholog mappings between genes. Each row contains identifiers, relationship type (one2one or one2many), and a confidence score from 0-100. Fields marked as \\N represent NULL values.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/homology.txt#2025-04-22_snippet_1\n\nLANGUAGE: tsv\nCODE:\n```\n46407984\t21058\tortholog_one2one\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t40101032\t14115093\t1024894\t50\t\\N\t\\N\n46408109\t29666\tortholog_one2one\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t40101032\t14115093\t1024894\t25\t\\N\t\\N\n```\n\n----------------------------------------\n\nTITLE: Parsing Genomic Feature Data in TSV Format\nDESCRIPTION: This snippet shows a sample of genomic feature data in tab-separated values (TSV) format. Each line represents a genetic feature with various attributes such as ID, chromosome, start and end positions, and other metadata.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/repeat_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n175391\t44631\t100347515\t100347522\t0\t100347515\t100347522\t136\t8\t0\n1083771\t44631\t100347601\t100348385\t-1\t531\t1309\t43\t1\t4981\n175393\t44631\t100347766\t100347776\t0\t100347766\t100347776\t136\t8\t0\n175395\t44631\t100348002\t100348009\t0\t100348002\t100348009\t136\t8\t0\n1083773\t44631\t100348375\t100348992\t-1\t3515\t4239\t7\t1\t1734\n1083775\t44631\t100348992\t100349463\t-1\t7\t479\t43\t1\t2471\n175398\t44631\t100349434\t100349442\t0\t100349434\t100349442\t136\t8\t0\n175401\t44631\t100349942\t100349949\t0\t100349942\t100349949\t136\t8\t0\n175404\t44631\t100350000\t100350012\t0\t100350000\t100350012\t136\t8\t0\n175406\t44631\t100350418\t100350429\t0\t100350418\t100350429\t136\t8\t0\n```\n\n----------------------------------------\n\nTITLE: Displaying Tabular Homology Data in TSV Format\nDESCRIPTION: Tab-separated values file showing homology relationships between genes. Each row represents a homology relationship with columns for gene IDs, homology type (ortholog_one2one, ortholog_one2many, etc.), confidence scores, and various identifiers.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/homology.txt#2025-04-22_snippet_5\n\nLANGUAGE: tsv\nCODE:\n```\n100976911\t50155\tortholog_one2one\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100462615\t100184217\t\\N\t\\N\t\\N\n100976916\t50144\tortholog_one2one\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100462615\t100184217\t\\N\t\\N\t\\N\n100976922\t50158\tortholog_one2one\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100462615\t100184217\t\\N\t\\N\t\\N\n100976929\t50167\tortholog_one2one\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100462615\t100184217\t\\N\t\\N\t\\N\n100976969\t50404\tortholog_one2one\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100462615\t100184217\t\\N\t\\N\t\\N\n100976974\t51215\tortholog_one2one\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100462615\t100184217\t\\N\t\\N\t\\N\n100976981\t27198\tortholog_one2many\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100462615\t100184217\t\\N\t\\N\t\\N\n```\n\n----------------------------------------\n\nTITLE: Mapping DNA and Protein Alignment Features - Data Format\nDESCRIPTION: Tab-separated data showing mappings between identifier numbers and their corresponding DNA and protein alignment feature IDs. Each line contains an ID (column 1), feature type (column 2), and feature ID (column 3).\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/supporting_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n5022960\tdna_align_feature\t28819795\n5022960\tdna_align_feature\t28819796\n5022960\tdna_align_feature\t28819797\n```\n\n----------------------------------------\n\nTITLE: Analyzing Protein Sequence with Identifier 5f28f96dafb23ec233ba5e5d63cc79c3\nDESCRIPTION: This snippet contains a protein sequence identified by the code 5f28f96dafb23ec233ba5e5d63cc79c3. The sequence is 271 amino acids long and appears to be a truncated or partial version of the previous sequence.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/peptide_archive.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nMQARYSVSSPNSLGVVPYLGGEQSYYRAAAAAAGGGYTAMPAPMSVYSHPAHAEQYPGGMARAYGPYTPQPQPKDMVKPPYSYIALITMAIQNAPDKKITLNGIYQFIMDRFPFYRDNKQGWQNSIRHNLSLNECFVKVPRDDKKPGKGSYWTLDPDSYNMFENGSFLRRRRRFKKKDAVKDKEEKDRPQATRASSRTSTRCGRCSSHRGSA\n```\n\n----------------------------------------\n\nTITLE: Tabular Representation of Ensembl Orthologues\nDESCRIPTION: A table of orthologous gene relationships between species pairs in the Ensembl database. Each row contains numeric identifiers, species pair names (e.g., 'O.ana-O.nil orthologues'), source ('ensembl'), and additional numeric values that likely represent counts or database-specific identifiers.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/method_link_species_set.txt#2025-04-22_snippet_1\n\nLANGUAGE: tabular\nCODE:\n```\n29198\t201\t34505\tO.ana-O.nil orthologues\tensembl\t\t67\t\\N\n21350\t201\t30402\tG.acu-O.ana orthologues\tensembl\t\t42\t\\N\n29971\t201\t34903\tO.ana-X.mac orthologues\tensembl\t\t69\t\\N\n28539\t201\t34160\tO.ana-G.mor orthologues\tensembl\t\t65\t\\N\n22692\t201\t31252\tO.ana-T.nig orthologues\tensembl\t\t50\t\\N\n50398\t201\t35514\tO.ana-L.ocu orthologues\tensembl\t\t74\t\\N\n51003\t201\t35869\tE.eur-P.for orthologues\tensembl\t\t76\t\\N\n51257\t201\t36062\tE.eur-D.rer orthologues\tensembl\t\t80\t\\N\n21505\t201\t30461\tT.rub-E.eur orthologues\tensembl\t\t43\t\\N\n50368\t201\t35485\tA.mex-E.eur orthologues\tensembl\t\t74\t\\N\n```\n\n----------------------------------------\n\nTITLE: Converting XML to JSON in JavaScript\nDESCRIPTION: This function transforms XML data into a JSON object. It processes XML nodes recursively, handling attributes, text content, and nested nodes. The function returns a structured JSON representation of the original XML data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/analysis_description.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction xml2json(xml) {\n    try {\n        var obj = {};\n        if (xml.children.length > 0) {\n            for (var i = 0; i < xml.children.length; i++) {\n                var item = xml.children.item(i);\n                var nodeName = item.nodeName;\n\n                if (typeof (obj[nodeName]) == \"undefined\") {\n                    obj[nodeName] = xml2json(item);\n                } else {\n                    if (typeof (obj[nodeName].push) == \"undefined\") {\n                        var old = obj[nodeName];\n                        obj[nodeName] = [];\n                        obj[nodeName].push(old);\n                    }\n                    obj[nodeName].push(xml2json(item));\n                }\n            }\n        } else {\n            obj = xml.textContent;\n        }\n        return obj;\n    } catch (e) {\n        console.log(e.message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Ontology Closures - Perl\nDESCRIPTION: Calculates closures for the ontology data in the MySQL database using a Perl script. Necessary after loading ontology data to ensure correct hierarchical closures are established.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/testdata/ontology.txt#2025-04-22_snippet_4\n\nLANGUAGE: perl\nCODE:\n```\n# Compute closures\nperl ensembl/misc-scripts/ontology/scripts/compute_closure.pl -host $MYSQL_HOST -user $MYSQL_USR -pass $MYSQL_PASS -name $DB\n```\n\n----------------------------------------\n\nTITLE: Content-Type Specification for Ensembl API Requests\nDESCRIPTION: Example of how to specify the desired response format when making REST API requests to Ensembl. Shows how to set the Content-Type header to request JSON format responses.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/associated_motif_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Sample Variation Data in TSV Format\nDESCRIPTION: This snippet displays sample lines from a tab-separated value (TSV) file containing genetic variation data, likely associated with the Ensembl project. Each row represents a variation, with columns corresponding to internal ID, source ID (e.g., chromosome), variation ID (rsID/COSMIC ID), allele information, frequency, count, clinical significance, source references, and a flag. The '\\N' likely represents NULL or unavailable data. This format is typical for bulk variation data used in bioinformatics databases.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/variation/variation.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n20985957\t1\trs111067473\t0\t18\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t0\n7930418\t1\trs12360064\t0\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n57137110\t1\trs371828972\t0\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n5808764\t1\trs9882584\t0\t2\t0\tC\t0.293388\t639\t\\N\t\\N\t1\n41158182\t1\trs183972897\t0\t2\t0\tG\t0.00137741\t3\t\\N\t\\N\t1\n56515594\t1\trs371163522\t0\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n27085574\t1\trs138574806\t0\t2\t0\tT\t0.000918274\t2\t\\N\t\\N\t1\n1748253\t1\trs2299222\t0\t2\t0\tC\t0.0399449\t87\t\\N\t\\N\t1\n3776807\t1\trs6129257\t0\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n44132876\t1\trs186950277\t0\t2\t0\tA\t0.00137741\t3\t\\N\t\\N\t1\n57993427\t1\trs372745831\t0\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n40717093\t1\trs183531458\t0\t2\t0\tT\t0.000604595\t1\t\\N\t\\N\t1\n4770800\t1\trs7569578\t0\t2\t0\tA\t0.164371\t358\t\\N\t\\N\t1\n44527501\t1\trs187345249\t0\t2\t0\tT\t0.000459137\t1\t\\N\t\\N\t1\n40763453\t1\trs183577856\t0\t2\t0\tC\t0.000918274\t2\t\\N\t\\N\t1\n6106976\t1\trs10193249\t0\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n24098261\t1\trs114402518\t0\t2\t0\tA\t0.00918274\t20\t\\N\t\\N\t1\n9051025\t1\trs17081232\t0\t2\t0\tA\t0.244261\t532\t\\N\t\\N\t1\n30220007\t1\trs142276873\t0\t2\t0\tA\t0.123049\t268\t\\N\t367,370\t1\n18671529\t1\trs77284492\t0\t2\t0\tA\t0.0119376\t26\t\\N\t\\N\t1\n49574443\t1\trs192396716\t0\t2\t0\tG\t0.000459137\t1\t\\N\t\\N\t1\n14128071\t1\trs67521280\t0\t14\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n4897829\t1\trs7698608\t0\t2\t0\tC\t0.448577\t977\t\\N\t\\N\t1\n2979980\t1\trs4492973\t0\t2\t0\tC\t0.0528007\t115\t\\N\t\\N\t1\n10089212\t1\trs34490520\t0\t2\t0\tA\t0.0224977\t49\t\\N\t\\N\t1\n26469702\t1\trs121908760\t0\t2\t0\t\\N\t\\N\t\\N\tpathogenic\t\\N\t1\n25992950\t1\trs117161559\t0\t2\t0\tG\t0.00688705\t15\t\\N\t\\N\t1\n63646321\t26\tCOSM946275\t1\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n39404961\t1\trs182218163\t0\t2\t0\tT\t0.000459137\t1\t\\N\t\\N\t1\n61997151\t1\trs377040510\t0\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n1\t1\ttmp__\t\\N\t1\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n22769929\t1\trs112920828\t0\t2\t0\tT\t0.0390266\t85\t\\N\t367,372\t0\n29481851\t1\trs141404099\t0\t2\t0\tT\t0.000459137\t1\t\\N\t367,372\t0\n30546437\t1\trs142663151\t0\t2\t0\t\\N\t\\N\t\\N\t\\N\t368,372\t0\n31614057\t1\trs143927211\t0\t2\t0\t\\N\t\\N\t\\N\t\\N\t368,372\t0\n32414306\t1\trs144874603\t0\t2\t0\t\\N\t\\N\t\\N\t\\N\t367,372\t0\n32458275\t1\trs144926719\t0\t2\t0\tT\t0.000918274\t2\t\\N\t367,372\t0\n34447159\t1\trs147285778\t0\t2\t0\tT\t0.000459137\t1\t\\N\t367,372\t0\n34829679\t1\trs147740131\t0\t2\t0\tA\t0.000459137\t1\t\\N\t367,370,372\t0\n36815073\t1\trs150100016\t0\t2\t0\tT\t0.00137741\t3\t\\N\t367,370,372\t0\n37504733\t1\trs150920187\t0\t2\t0\tG\t0.000459137\t1\t\\N\t367,372\t0\n51558777\t1\trs200625439\t0\t2\t0\tG\t0.000459137\t1\t\\N\t\\N\t0\n52266830\t1\trs201374642\t0\t2\t0\tA\t0.000459137\t1\t\\N\t\\N\t0\n52992076\t1\trs202143213\t0\t2\t0\t\\N\t\\N\t\\N\t\\N\t367,368\t0\n53666904\t1\trs368117410\t0\t2\t0\t\\N\t\\N\t\\N\t\\N\t372\t0\n55054864\t1\trs369600742\t0\t2\t0\t\\N\t\\N\t\\N\t\\N\t372\t0\n55394947\t1\trs369964265\t0\t2\t0\t\\N\t\\N\t\\N\t\\N\t367,372\t0\n56250357\t1\trs370879507\t0\t2\t0\t\\N\t\\N\t\\N\t\\N\t372\t0\n57376793\t1\trs372085744\t0\t2\t0\t\\N\t\\N\t\\N\t\\N\t372\t0\n60905601\t1\trs375868381\t0\t10\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t0\n64119759\t26\tCOSM300988\t0\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n64119760\t26\tCOSM756564\t0\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n64119761\t26\tCOSM1119124\t0\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n64119762\t26\tCOSM1119126\t0\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n64119763\t26\tCOSM1119128\t0\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n64119765\t26\tCOSM1557311\t0\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n64119766\t26\tCOSM457241\t0\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n64119767\t26\tCOSM756556\t0\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n64119768\t26\tCOSM756554\t0\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n64119769\t26\tCOSM1490785\t0\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n64119770\t26\tCOSM1119150\t0\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n64119771\t26\tCOSM612304\t0\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n64119772\t26\tCOSM1119152\t0\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n64119773\t26\tCOSM1119154\t0\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n64119774\t26\tCOSM756553\t0\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n64119775\t26\tCOSM1119156\t0\t2\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n936135\t1\trs1333047\t0\t2\t0\tA\t0.341598\t744\t\\N\t367,368,369,370,371\t1\n32633975\t1\trs145134970\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t370\t1\n6499767\t1\trs10757279\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t367,368,370,371\t1\n3379920\t1\trs4977575\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t367,368,369,370\t1\n35985982\t1\trs149114363\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t370\t1\n38517888\t1\trs181330262\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t370\t1\n15292318\t1\trs72655407\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t367,368,370\t1\n15939031\t1\trs73443203\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t367,368,370\t1\n16102185\t1\trs73650062\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t367,368,370\t1\n40768405\t1\trs183582810\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t370\t1\n20641511\t1\trs79944118\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t367,370\t1\n45448905\t1\trs188267508\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t370\t1\n936136\t1\trs1333048\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t367,368,369,370,371\t1\n22784039\t1\trs112935422\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t367,370\t1\n936137\t1\trs1333049\t\\N\t2\t0\t\\N\t\\N\t\\N\tpathogenic,other,protective\t367,368,369,370,371\t1\n29674364\t1\trs141631698\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t370\t1\n38148693\t1\trs180960747\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t370\t1\n16102186\t1\trs73650063\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t367,368,370\t1\n26999456\t1\trs138473131\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t370\t1\n44426212\t1\trs187243869\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t370\t1\n49174309\t1\trs191996219\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t370\t1\n38798524\t1\trs181611157\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t370\t1\n44149082\t1\trs186966498\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t370\t1\n31703565\t1\trs144033269\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t370\t1\n936138\t1\trs1333050\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t367,368,369,370,371\t1\n47382962\t1\trs190203239\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t370\t1\n39982579\t1\trs182796288\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t370\t1\n128171301\t1\trs137980927\t0\t2\t0\tA\t0.00119808\t6\t\\N\t367,370\t1\n133885303\t1\trs768052375\t0\t12\t0\t\\N\t\\N\t\\N\t\\N\t368\t1\n136372537\t1\trs147768956\t0\t2\t0\tT\t0.00299521\t15\t\\N\t367,370\t1\n136372538\t1\trs2394878\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n136372539\t1\trs562436031\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n136372540\t1\trs9263526\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n136372541\t1\trs2535284\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n136372542\t1\trs9263509\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n136372543\t1\trs9263525\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n136372544\t1\trs3130548\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n136372545\t1\trs2517556\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n136372546\t1\trs9263529\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n136372547\t1\trs9263513\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n136372548\t1\trs9263537\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n136372549\t1\trs2394877\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n136372550\t1\trs2535282\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n136372551\t1\trs9263566\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n136372552\t1\trs2517558\t\\N\t2\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t1\n```\n\n----------------------------------------\n\nTITLE: Parsing Homology Data from Tab-Separated Values (TSV)\nDESCRIPTION: This snippet represents a table of homology data in TSV format. Each row contains information about a specific homology relationship, including gene IDs, homology type, and various metadata fields. The data is primarily numeric with some text fields for relationship types.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/homology.txt#2025-04-22_snippet_3\n\nLANGUAGE: TSV\nCODE:\n```\n100971771\t27145\twithin_species_paralog\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t40102037\t100462643\t100184217\t\\N\t\\N\t\\N\n100971777\t29953\twithin_species_paralog\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t40102037\t100462643\t100184217\t\\N\t\\N\t\\N\n100971784\t29953\twithin_species_paralog\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t40102037\t100462643\t100184217\t\\N\t\\N\t\\N\n```\n\n----------------------------------------\n\nTITLE: Analyzing Genetic Variant Relationships and Statistics\nDESCRIPTION: This tabular data represents genetic variants and their relationships. Each row contains identifiers, parent-child relationships, positional information, statistical values, and associated gene IDs. The data is structured for analysis of genetic hierarchies and variant significance.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/gene_tree_node.txt#2025-04-22_snippet_1\n\nLANGUAGE: tabular\nCODE:\n```\n100432384\t100432382\t100432259\t9\t58\t0.00000097477839682473\t\\N\n100432385\t100432384\t100432259\t10\t35\t0.00000097477839682473\t\\N\n100432387\t100432385\t100432259\t11\t32\t0.00000097477839682473\t\\N\n100432389\t100432387\t100432259\t12\t25\t0.00000097477839682473\t\\N\n100432391\t100432389\t100432259\t13\t22\t0.00000097477839682473\t\\N\n100432393\t100432391\t100432259\t14\t19\t0.00000097477839682473\t\\N\n100432318\t100432393\t100432259\t15\t16\t0.00000097477839682473\t100285954\n100432298\t100432393\t100432259\t17\t18\t0.00000097477839682473\t100033919\n100432279\t100432391\t100432259\t20\t21\t0.00000097477839682473\t100065013\n100432336\t100432389\t100432259\t23\t24\t0.00000097477839682473\t100248134\n```\n\n----------------------------------------\n\nTITLE: Defining Biological Feature Terms and Synonyms in Plaintext\nDESCRIPTION: This data block lists various biological features, terms, and their synonyms used within the Ensembl system. Each line typically contains an ID, a related ID, the term description, optional references (e.g., RSC, uniprot:feature_type), and a null terminator (\\N). It covers RNA types, gene components, transposable elements, immunoglobulin/T-cell receptor segments, and protein features.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/synonym.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n550\t348\t\"U1 snRNA\" []\t\\N\n551\t349\t\"small nuclear RNA U2\" [RSC:CB]\t\\N\n552\t349\t\"snRNA U2\" [RSC:CB]\t\\N\n553\t349\t\"U2 small nuclear RNA\" [RSC:CB]\t\\N\n554\t349\t\"U2 snRNA\" []\t\\N\n555\t350\t\"small nuclear RNA U4\" [RSC:cb]\t\\N\n556\t350\t\"snRNA U4\" [RSC:cb]\t\\N\n557\t350\t\"U4 small nuclear RNA\" [RSC:cb]\t\\N\n558\t350\t\"U4 snRNA\" []\t\\N\n559\t351\t\"small nuclear RNA U4atac\" [RSC:cb]\t\\N\n560\t351\t\"snRNA U4atac\" [RSC:cb]\t\\N\n561\t351\t\"U4atac small nuclear RNA\" [RSC:cb]\t\\N\n562\t351\t\"U4atac snRNA\" []\t\\N\n563\t352\t\"small nuclear RNA U5\" [RSC:cb]\t\\N\n564\t352\t\"snRNA U5\" [RSC:cb]\t\\N\n565\t352\t\"U5 small nuclear RNA\" [RSC:cb]\t\\N\n566\t352\t\"U5 snRNA\" []\t\\N\n567\t353\t\"small nuclear RNA U6\" [RSC:cb]\t\\N\n568\t353\t\"snRNA U6\" [RSC:cb]\t\\N\n569\t353\t\"U6 small nuclear RNA\" [RSC:cb]\t\\N\n570\t353\t\"U6 snRNA\" []\t\\N\n571\t354\t\"snRNA U6atac\" [RSC:cb]\t\\N\n572\t354\t\"U6atac small nuclear RNA\" [RSC:cb]\t\\N\n573\t354\t\"U6atac snRNA\" [RSC:cb]\t\\N\n574\t355\t\"small nuclear RNA U11\" [RSC:cb]\t\\N\n575\t355\t\"snRNA U11\" [RSC:cb]\t\\N\n576\t355\t\"U11 small nuclear RNA\" [RSC:cb]\t\\N\n577\t355\t\"U11 snRNA\" []\t\\N\n578\t356\t\"small nuclear RNA U12\" [RSC:cb]\t\\N\n579\t356\t\"snRNA U12\" [RSC:cb]\t\\N\n580\t356\t\"U12 small nuclear RNA\" [RSC:cb]\t\\N\n581\t356\t\"U12 snRNA\" []\t\\N\n582\t357\t\"sequence attribute\" []\t\\N\n583\t358\t\"gene attribute\" []\t\\N\n584\t359\t\"small nucleolar RNA U14\" []\t\\N\n585\t359\t\"snoRNA U14\" []\t\\N\n586\t359\t\"U14 small nucleolar RNA\" []\t\\N\n587\t359\t\"U14 snoRNA\" []\t\\N\n588\t360\t\"vault RNA\" []\t\\N\n589\t361\t\"Y RNA\" []\t\\N\n590\t363\t\"18S ribosomal RNA\" []\t\\N\n591\t363\t\"18S rRNA\" []\t\\N\n592\t363\t\"rRNA 18S\" []\t\\N\n593\t364\t\"binding_or_interaction_site\" []\t\\N\n594\t364\t\"site\" []\t\\N\n595\t365\t\"protein binding site\" []\t\\N\n596\t366\t\"rescue fragment\" []\t\\N\n597\t366\t\"rescue region\" []\t\\N\n598\t366\t\"rescue segment\" []\t\\N\n599\t367\t\"restriction fragment\" []\t\\N\n600\t368\t\"sequence difference\" []\t\\N\n601\t369\t\"invalidated by genomic contamination\" []\t\\N\n602\t370\t\"invalidated by genomic polyA primed cDNA\" []\t\\N\n603\t371\t\"invalidated by partial processing\" []\t\\N\n604\t372\t\"ca_bind\" [uniprot:feature_type]\t\\N\n605\t372\t\"DNA_bind\" [uniprot:feature_type]\t\\N\n606\t372\t\"domain\" [uniprot:feature_type]\t\\N\n607\t372\t\"np_bind\" [uniprot:feature_type]\t\\N\n608\t372\t\"polypeptide domain\" []\t\\N\n609\t372\t\"polypeptide_structural_domain\" []\t\\N\n610\t372\t\"structural domain\" []\t\\N\n611\t372\t\"zn_fing\" [uniprot:feature_type]\t\\N\n612\t373\t\"signal\" [uniprot:feature_type]\t\\N\n613\t373\t\"signal peptide\" []\t\\N\n614\t373\t\"signal peptide coding sequence\" []\t\\N\n615\t374\t\"chain\" [uniprot:feature_type]\t\\N\n616\t374\t\"mature peptide\" []\t\\N\n617\t374\t\"mature protein region\" []\t\\N\n618\t375\t\"5' TIR\" []\t\\N\n619\t375\t\"five prime terminal inverted repeat\" []\t\\N\n620\t376\t\"3' TIR\" []\t\\N\n621\t376\t\"three prime terminal inverted repeat\" []\t\\N\n622\t377\t\"U5 long terminal repeat region\" []\t\\N\n623\t377\t\"U5 LTR region\" []\t\\N\n624\t378\t\"R long terminal repeat region\" []\t\\N\n625\t378\t\"R LTR region\" []\t\\N\n626\t379\t\"U3 long terminal repeat region\" []\t\\N\n627\t379\t\"U3 LTR region\" []\t\\N\n628\t380\t\"5' long terminal repeat\" []\t\\N\n629\t380\t\"5' LTR\" []\t\\N\n630\t380\t\"five prime LTR\" []\t\\N\n631\t381\t\"3' long terminal repeat\" []\t\\N\n632\t381\t\"3' LTR\" []\t\\N\n633\t381\t\"three prime LTR\" []\t\\N\n634\t382\t\"R 5' long term repeat region\" []\t\\N\n635\t382\t\"R five prime LTR region\" []\t\\N\n636\t383\t\"U5 5' long terminal repeat region\" []\t\\N\n637\t383\t\"U5 five prime LTR region\" []\t\\N\n638\t384\t\"U3 5' long term repeat region\" []\t\\N\n639\t384\t\"U3 five prime LTR region\" []\t\\N\n640\t385\t\"R 3' long terminal repeat region\" []\t\\N\n641\t385\t\"R three prime LTR region\" []\t\\N\n642\t386\t\"U3 3' long terminal repeat region\" []\t\\N\n643\t386\t\"U3 three prime LTR region\" []\t\\N\n644\t387\t\"U5 3' long terminal repeat region\" []\t\\N\n645\t387\t\"U5 three prime LTR region\" []\t\\N\n646\t388\t\"non LTR retrotransposon polymeric tract\" []\t\\N\n647\t389\t\"target site duplication\" []\t\\N\n648\t390\t\"LTR retrotransposon poly purine tract\" []\t\\N\n649\t390\t\"RR tract\" []\t\\N\n650\t391\t\"autonomously replicating sequence\" []\t\\N\n651\t392\t\"inverted ring chromosome\" []\t\\N\n652\t393\t\"vector\" []\t\\N\n653\t393\t\"vector replicon\" []\t\\N\n654\t394\t\"single strand oligo\" []\t\\N\n655\t394\t\"single strand oligonucleotide\" []\t\\N\n656\t394\t\"single stranded oligonucleotide\" []\t\\N\n657\t394\t\"ss oligo\" []\t\\N\n658\t394\t\"ss oligonucleotide\" []\t\\N\n659\t395\t\"double stranded oligonucleotide\" []\t\\N\n660\t395\t\"ds oligo\" []\t\\N\n661\t395\t\"ds-oligonucleotide\" []\t\\N\n662\t396\t\"polymer attribute\" []\t\\N\n663\t397\t\"three prime noncoding exon\" []\t\\N\n664\t398\t\"5' nc exon\" []\t\\N\n665\t398\t\"5' non coding exon\" []\t\\N\n666\t398\t\"five prime noncoding exon\" []\t\\N\n667\t399\t\"UTR intron\" []\t\\N\n668\t400\t\"five prime UTR intron\" []\t\\N\n669\t401\t\"three prime UTR intron\" []\t\\N\n670\t402\t\"random sequence\" []\t\\N\n671\t403\t\"chromosome interband\" []\t\\N\n672\t404\t\"gene with polyadenylated mRNA\" []\t\\N\n673\t405\t\"chromosomal transposition\" []\t\\N\n674\t405\t\"transposition\" []\t\\N\n675\t406\t\"repeat associated small interfering RNA\" []\t\\N\n676\t407\t\"gene with mRNA with frameshift\" []\t\\N\n677\t408\t\"recombinationally rearranged gene\" []\t\\N\n678\t409\t\"interchromosomal duplication\" []\t\\N\n679\t410\t\"D gene\" []\t\\N\n680\t410\t\"D-GENE\" []\t\\N\n681\t411\t\"gene with trans spliced transcript\" []\t\\N\n682\t412\t\"vertebrate immunoglobulin T cell receptor segment\" []\t\\N\n683\t412\t\"vertebrate_immunoglobulin/T-cell receptor gene\" []\t\\N\n684\t413\t\"inversion derived bipartite deficiency\" []\t\\N\n685\t414\t\"pseudogenic region\" []\t\\N\n686\t415\t\"encodes alternately spliced transcripts\" []\t\\N\n687\t416\t\"decayed exon\" []\t\\N\n688\t417\t\"inversion derived deficiency plus duplication\" []\t\\N\n689\t418\t\"V gene\" []\t\\N\n690\t418\t\"V-GENE\" []\t\\N\n691\t418\t\"variable_gene\" []\t\\N\n692\t419\t\"post translationally regulated by protein stability\" []\t\\N\n693\t419\t\"post-translationally regulated by protein stability\" []\t\\N\n694\t420\t\"golden path fragment\" []\t\\N\n695\t421\t\"post translationally regulated by protein modification\" []\t\\N\n696\t421\t\"post-translationally regulated by protein modification\" []\t\\N\n697\t422\t\"J gene\" []\t\\N\n698\t422\t\"J-GENE\" []\t\\N\n699\t424\t\"tiling path\" []\t\\N\n700\t425\t\"negatively autoregulated\" []\t\\N\n701\t426\t\"tiling path fragment\" []\t\\N\n702\t427\t\"positively autoregulated\" []\t\\N\n703\t428\t\"contig read\" []\t\\N\n704\t429\t\"C gene\" []\t\\N\n705\t429\t\"C_GENE\" []\t\\N\n706\t429\t\"constant gene\" []\t\\N\n707\t430\t\"trans spliced transcript\" []\t\\N\n708\t430\t\"trans-spliced transcript\" []\t\\N\n709\t431\t\"tiling path clone\" []\t\\N\n710\t432\t\"terminal inverted repeat\" []\t\\N\n711\t432\t\"TIR\" []\t\\N\n712\t433\t\"vertebrate immunoglobulin T cell receptor gene cluster\" []\t\\N\n713\t433\t\"vertebrate_immunoglobulin/T-cell receptor gene cluster\" []\t\\N\n714\t434\t\"nc primary transcript\" []\t\\N\n715\t434\t\"noncoding primary transcript\" []\t\\N\n716\t435\t\"three prime coding exon noncoding region\" []\t\\N\n717\t435\t\"three_prime_exon_noncoding_region\" []\t\\N\n718\t436\t\"(DJ)-J-CLUSTER\" []\t\\N\n719\t436\t\"DJ J cluster\" []\t\\N\n720\t437\t\"five prime coding exon noncoding region\" []\t\\N\n721\t437\t\"five_prime_exon_noncoding_region\" []\t\\N\n722\t438\t\"(VDJ)-J-C-CLUSTER\" []\t\\N\n723\t438\t\"VDJ J C cluster\" []\t\\N\n724\t439\t\"(VDJ)-J-CLUSTER\" []\t\\N\n725\t439\t\"VDJ J cluster\" []\t\\N\n726\t440\t\"(VJ)-C-CLUSTER\" []\t\\N\n727\t440\t\"VJ C cluster\" []\t\\N\n728\t441\t\"(VJ)-J-C-CLUSTER\" []\t\\N\n729\t441\t\"VJ J C cluster\" []\t\\N\n730\t442\t\"(VJ)-J-CLUSTER\" []\t\\N\n731\t442\t\"VJ J cluster\" []\t\\N\n732\t443\t\"D gene recombination feature\" []\t\\N\n733\t444\t\"3'D-HEPTAMER\" []\t\\N\n734\t444\t\"three prime D heptamer\" []\t\\N\n735\t445\t\"3'D-NOMAMER\" []\t\\N\n736\t445\t\"three prime D nonamer\" []\t\\N\n737\t446\t\"3'D-SPACER\" []\t\\N\n738\t446\t\"three prime D spacer\" []\t\\N\n739\t447\t\"5'D-HEPTAMER\" []\t\\N\n740\t447\t\"five prime D heptamer\" []\t\\N\n741\t448\t\"5'D-NONAMER\" []\t\\N\n742\t448\t\"five prime D nonamer\" []\t\\N\n743\t449\t\"5'-SPACER\" []\t\\N\n744\t449\t\"five prime D spacer\" []\t\\N\n745\t449\t\"five prime D-spacer\" []\t\\N\n746\t450\t\"virtual sequence\" []\t\\N\n747\t451\t\"Hoogsteen base pair\" []\t\\N\n748\t452\t\"reverse Hoogsteen base pair\" []\t\\N\n749\t453\t\"D DJ C cluster\" []\t\\N\n750\t453\t\"D-(DJ)-C-CLUSTER\" []\t\\N\n751\t454\t\"D DJ cluster\" []\t\\N\n752\t454\t\"D-(DJ)-CLUSTER\" []\t\\N\n753\t455\t\"D DJ J C cluster\" []\t\\N\n754\t455\t\"D-(DJ)-J-C-CLUSTER\" []\t\\N\n755\t456\t\"pseudogenic exon\" []\t\\N\n756\t457\t\"D DJ J cluster\" []\t\\N\n757\t457\t\"D-(DJ)-J-CLUSTER\" []\t\\N\n758\t458\t\"D J C cluster\" []\t\\N\n759\t458\t\"D-J-C-CLUSTER\" []\t\\N\n760\t459\t\"V_D_GENE\" []\t\\N\n761\t459\t\"VD gene\" []\t\\N\n762\t460\t\"J C cluster\" []\t\\N\n763\t460\t\"J-C-CLUSTER\" []\t\\N\n764\t461\t\"inversion derived deficiency plus aneuploid\" []\t\\N\n765\t462\t\"J cluster\" []\t\\N\n766\t462\t\"J-CLUSTER\" []\t\\N\n767\t463\t\"J nonamer\" []\t\\N\n768\t463\t\"J-NONAMER\" []\t\\N\n769\t464\t\"J heptamer\" []\t\\N\n770\t464\t\"J-HEPTAMER\" []\t\\N\n771\t465\t\"pseudogenic transcript\" []\t\\N\n772\t466\t\"J spacer\" []\t\\N\n773\t466\t\"J-SPACER\" []\t\\N\n774\t467\t\"V DJ cluster\" []\t\\N\n775\t467\t\"V-(DJ)-CLUSTER\" []\t\\N\n776\t468\t\"V DJ J cluster\" []\t\\N\n777\t468\t\"V-(DJ)-J-CLUSTER\" []\t\\N\n778\t469\t\"V VDJ C cluster\" []\t\\N\n779\t469\t\"V-(VDJ)-C-CLUSTER\" []\t\\N\n780\t470\t\"V VDJ cluster\" []\t\\N\n781\t470\t\"V-(VDJ)-CLUSTER\" []\t\\N\n782\t471\t\"V VDJ J cluster\" []\t\\N\n783\t471\t\"V-(VDJ)-J-CLUSTER\" []\t\\N\n784\t472\t\"V VJ C cluster\" []\t\\N\n785\t472\t\"V-(VJ)-C-CLUSTER\" []\t\\N\n786\t473\t\"V VJ cluster\" []\t\\N\n787\t473\t\"V-(VJ)-CLUSTER\" []\t\\N\n788\t474\t\"V VJ J cluster\" []\t\\N\n789\t474\t\"V-(VJ)-J-CLUSTER\" []\t\\N\n790\t475\t\"V cluster\" []\t\\N\n791\t475\t\"V-CLUSTER\" []\t\\N\n792\t476\t\"V D DJ C cluster\" []\t\\N\n793\t476\t\"V-D-(DJ)-C-CLUSTER\" []\t\\N\n794\t477\t\"V D DJ cluster\" []\t\\N\n795\t477\t\"V-D-(DJ)-CLUSTER\" []\t\\N\n796\t478\t\"V D DJ J C cluster\" []\t\\N\n797\t478\t\"V-D-(DJ)-J-C-CLUSTER\" []\t\\N\n798\t479\t\"V D DJ J cluster\" []\t\\N\n799\t479\t\"V-D-(DJ)-J-CLUSTER\" []\t\\N\n800\t480\t\"V D J C cluster\" []\t\\N\n801\t480\t\"V-D-J-C-CLUSTER\" []\t\\N\n802\t481\t\"V D J cluster\" []\t\\N\n803\t481\t\"V-D-J-CLUSTER\" []\t\\N\n804\t482\t\"V heptamer\" []\t\\N\n805\t482\t\"V-HEPTAMER\" []\t\\N\n806\t483\t\"V J cluster\" []\t\\N\n807\t483\t\"V-J-CLUSTER\" []\t\\N\n808\t484\t\"V J C cluster\" []\t\\N\n809\t484\t\"V-J-C-CLUSTER\" []\t\\N\n810\t485\t\"V nonamer\" []\t\\N\n811\t485\t\"V-NONAMER\" []\t\\N\n812\t486\t\"V spacer\" []\t\\N\n813\t486\t\"V-SPACER\" []\t\\N\n814\t487\t\"V gene recombination feature\" []\t\\N\n815\t487\t\"V-RS\" []\t\\N\n816\t488\t\"(DJ)-C-CLUSTER\" []\t\\N\n817\t488\t\"DJ C cluster\" []\t\\N\n818\t489\t\"(DJ)-J-C-CLUSTER\" []\t\\N\n819\t489\t\"DJ J C cluster\" []\t\\N\n820\t490\t\"(VDJ)-C-CLUSTER\" []\t\\N\n821\t490\t\"VDJ C cluster\" []\t\\N\n822\t491\t\"V DJ C cluster\" []\t\\N\n823\t491\t\"V-(DJ)-C-CLUSTER\" []\t\\N\n824\t492\t\"ISCR\" []\t\\N\n825\t493\t\"recoding pseudoknot\" []\t\\N\n826\t494\t\"designed sequence\" []\t\\N\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Ensembl REST API Client in Python\nDESCRIPTION: This snippet imports necessary libraries for making HTTP requests and handling JSON data. It uses the requests library for API calls and json for parsing responses.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/protein_align_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\nimport json\n```\n\n----------------------------------------\n\nTITLE: Analyzing Protein Sequence with Identifier A001675BFC954759DCC3B94522674674\nDESCRIPTION: This snippet presents a protein sequence identified by the code A001675BFC954759DCC3B94522674674. The sequence is 531 amino acids long and contains several protein domains and repeated elements.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/peptide_archive.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMKLEVFVPRAAHGDKQGSDLEGAGGSDAPSPLSAAGDDSLGSDGDCAANSPAAGGGARDTQGDGEQSAGGGPGAEEAIPAAAAAAVVAEGAEAGAAGPGAGGAGSGEGARSKPYTRRPKPPYSYIALIAMAIRDSAGGRLTLAEINEYLMGKFPFFRGSYTGWRNSVRHNLSLNDCFVKVLRDPSRPWGKDNYWMLNPNSEYTFADGVFRRRRKRLSHRAPVPAPGLRPEEAPGLPAAPPPAPAAPASPRMRSPARQEERASPAGKFSSSFAIDSILRKPFRSRRLRDTAPGTTLQWGAAPCPPLPAFPALLPAAPCRALLPLCAYGAGEPARLGAREAEVPPTAPPLLLAPLPAAAPAKPLRGPAAGGAHLYCPLRLPAALQAASVRRPGPHLPYPVETLLA\n```\n\n----------------------------------------\n\nTITLE: Retrieving Protein Sequence Data in Plaintext Format\nDESCRIPTION: This snippet shows the structure of protein sequence data, including identifiers, length, and the amino acid sequence. It's likely used for bioinformatics analysis or database operations within the Ensembl REST API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n749466\t3343\tdb0c20d85940fc6874533b0d5f699b6d\tMTVEYKRRPTFWEIFKARCSTADLGPISLNWFEELSSEAPPYNTEPPEESEYKPQGHEPQLFKTPQRNPSYHQFASTPIMFKEQSQTLPLDQSPFKELGNVVANSKRKHHSKKKARKDPVVDVASLPLKACPSESPCTPRCTQVAPQRRKPVVSGSLFYTPKLEETPKHISESLGVEVDPDMSWTSSLATPPTLSSTVLIARDEEAHRNAFPADSPASLKSYFSNHNESLKKNDRFIPSVSDSENKSQQEAFSQGLEKMLGDSSSKINRFRDCLRKPIPNVLEDGETAVDTSGEDSFSLCFPKRRTRNLQKTRMGKMKKKIFSETRTDGLSEEARGQADDKNSFALEIEPRDSEPLDPSVTNQKPLYSQSGDISSEAGQCSDSIWSQPDPSGLNGTQTRKIPLLHISSHKQSILEDFIDMKKEGTGSITFPHISSLPEPEKMFSEETLVDKEHEGQHLESLEDSISGKQMVSGTSQTACLSPSIRKSIVKMREPLEETLDTVFSDSMTSSAFTEELDASAGGLEIHTACSQREDSLCPSSVDTGSWPTTLTDTSATVKNAGLITTLKNKRRKFIYSVSDDASHQGKKLQTQRQSELTNLSAPFEASAFEVPFPFTNVDSGIPDSSIKRSNLPNDPEEPSLSLTNSFVTAASKEISYIHALISQDLNDKEAILSEEKPQPYTALEADFLSCLPERSCENDQKSPKVSDRKEKVLVSACRPSGRLAAAVQLSSISFDSQENPLGSHNVTSTLKLTPSPKTPLSKPVVVSRGKMCKMPEKLQCKSCKDNIELSKNIPLGVNEMCVLSENSETPELLPPLEYITEVSSSVKSQFNQNTKIAVVQKDQKDSTFISEVTVHMNSEELFPEKENNFAFQVTNESNKPNIGSTVEFQEEDLSHTKGHSLKNSPMTVDRDLDDEQAGQVLITEDSDSLAVVHDCTKKSRNTIEQHQKGTADKDFKSNSSLYLKSDGNNDYLDKWSEFLDPLMNHKFGGSFRTASNKEIKLSEDNVKKSKMFFKDIEEQYPTSLDCIDTVSTLQLANKKRLSEPHTFDLKSGTTVSTQCHSQSSVSHEDTHTAPQMLSSKQDFHSSHNLTPSQKAEITELSTILEESGSQFEFTQFKNPSHIAQNNTSAVLGNQMAVVRTASEEWKDVDLHLPLNPSSVGQIDHNKKFECLVGVKQSSSHLLEDTCNQNTSCFLPIKEMEFGGFCSALGTKLSVSNEALRKAMKLFSDIENISEEPSTKVGPRGFSSCAHHDSVASVFKIKKQNTDKSFDEKSSKCQVTVQNNKEMTTCILVDENPENYVKNIKQDNNYTGSQRNAYKLENSDVSKSSTSGTVYINKGDSDLPFAAEKGNKYPESCTQYVREENAQIKESVSDLTCLEVMKAEETCHMKSSDKEQLPSDKMEQNMKEFNISFQTASGKNIRVSKESLNKSVNILDQETEDLTVTSDSLNSKILCGINKDKMHISCHKKSINIKKVFEEHFPIGTVSQLPALQQYPEYEIESIKEPTLLSFHTASGKKVKIMQESLDKVKNLFDETQYVRKTTNFGHQESKPLKDREDYKERLTLAYEKIEVTASKCEEMQNFVSKQTEMLPQQNDHMYRQTENLTSNGSSPKVHGNIENKIEKNPRICCICQSSYFVTEDSALACYTGDSRKTCVGESSLSKGKKWLREQSDKLGTRNTIEIQCVKEHTEDFAGNALYEHSLVIIRTEIDTSHVSENQASTLFSDPNVCHSYLSHSSFCHHDDMHNDSGYFLKDKIDSDVQPDMKNTEGNAIFPKISATKEIKLHPQTVNEECVQKLETNASPYANKNIAIDSAMLDLRNCKVGSPVFITTHSQETVRMKEIFTDNCSKIVEQNRESKPDTCQTSCHKALDNSEDFICPSSSGDVCINSPMAIFYPQSEQILQHNQSVSGLKKAATPPVSLETWDTCKSIRGSPQEVHPSRTYGIFSTASGKAVQVSDASLEKARQVFSEIDGDAKQLASMVSLEGNEKSHHSVKRESSVVHNTHGVLSLRKTLPGNVSSSVFSGFSTAGGKLVTVSESALHKVKGMLEEFDLIRTEHTLQHSPTPEDVSKIPPQPCLESRTPEYSVSSKLQKTYNDKSRSPSNYKESGSSGNTQSLEVSPQLSQMERKQETQSVLGTKVSQRKTNILEKKQNLPQNIKIESNKMETFSDVSMKTNVGEYYSKEPENYFETEAVEIAKAFMEDDELTDSEQTHAKCSLFACPQNEALLNSRTRKRGGMAGVAVGQPPIKRSLLNEFDRIIESKGKSLTPSKSTPDGTIKDRRLFTHHMSLEPVTCGPFCSSKERQETQSPHVTSPAQGLQSKGHPSRHSAVGKSSSNPTVSALRSERTRHSVSDKSTKVFVPPFKVKSRFHRDEHFDSKNVNLEGKNQKSADGVSEDGNDSDFPQFNKDLMSSLQNARDLQDIRIKNKERHHLCPQPGSLYLTKSSTLPRISLQAAVGDSVPSACSPKQLYMYGVSKACISVNSKNAEYFQFAIEDHFGKEALCAGKGFRLADGGWLIPSDDGKAGKEEFYRALCDTPGVDPKLISSVWVSNHYRWIVWKLAAMEFAFPKEFANRCLNPERVLLQLKYRYDVEIDNSSRSALKKILERDDTAAKTLVLCVSDIISLSTNVSETSGSKASSEDSNKVDTIELTDGWYAVKAQLDPPLLALVKSGRLTVGQKIITQGAELVGSPDACAPLEAPDSLRLKISANSTRPARWHSKLGFFHDPRPFPLPLSSLFSDGGNVGCVDVIVQRVYPLQWVEKTVSGSYIFRNEREEEKEALRFAEAQQKKLEALFTKVHTELKEHEEDIAQRRVLSRALTRQQVHALQDGAELYAAVQDASDPEHLETCFSEEQLRALNNYRQMLSDKKQARIQSEFRKALEAAEKEEGLSRDVSTVWKLRVTSYKKREKSALLSIWRPSSDLPSLLTEGQRYRIYHLSVSKSKNKFEWPSIQLTATKRTQYQQLPVSSETLLQLYQPRELLPFSKLSDPAFQPPCSEVDVVGVVVSVVKPIGLAPLVYLSDECLHLLVVKFGIDLNEDIKPRVLIAASNLQWRPESTSRVPTLFAGNFSVFSASPKEAHFQERVTNMKHAIENIDTFYKEAEKKLIQVLKGDSPKWSTPNKDPTREPYPASTCSASDLASGGQLPRSSPTDQQSYRSPLSCCTPTGKSTPLAHSAWMAAKSCSGENEIEDPKTCRKKRALDLLSRLPLPPPLSPVCTFVSPAAQKAFQPPRSCGTKYPTPLKKEGPSSPWSRAPFQKASGVSLLDCDSVADEELALLSTQALVPHSVGGSEQVFPSDSTRTEGPSASTEARPANRSKRESLRDCRDDSDGKLAAETVPDYS\n```\n\n----------------------------------------\n\nTITLE: Coordinate Mapping Data in Tabular Format\nDESCRIPTION: A simple dataset containing coordinate mapping information. The data is structured in three columns, possibly representing position mappings or coordinate transformations used by the Ensembl REST API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/binding_matrix_transcription_factor_complex.txt#2025-04-22_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n1\t1\t1\n804\t1\t468\n805\t1\t469\n806\t1\t470\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections for Ensembl REST API in Perl\nDESCRIPTION: This snippet defines the database connection settings for the Ensembl REST API. It specifies the host, port, and user for connecting to the Ensembl databases.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/intron_supporting_evidence.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\nuse strict;\nuse warnings;\n\nsub connections {\n  my ($self) = @_;\n  return {\n    'ENSEMBL_REST_USER' => {\n      host => 'ensembldb.ensembl.org',\n      port => 5306,\n      user => 'anonymous',\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sequence Data with R for Ensembl REST API\nDESCRIPTION: This R code demonstrates how to retrieve sequence data from a specific genomic region using the Ensembl REST API. It performs a GET request to the sequence endpoint with region parameters and processes the JSON response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/homology.txt#2025-04-22_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nlibrary(httr)\nlibrary(jsonlite)\n\nserver <- \"https://rest.ensembl.org\"\next <- \"/sequence/region/human/X:1000000..1000100:1?\"\n\nr <- GET(paste(server, ext, sep = \"\"), content_type(\"application/json\"))\n\nstop_for_status(r)\n\npretty_json <- jsonlite::prettify(rawToChar(r$content))\ncat(pretty_json)\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Ensembl REST API with Perl Script\nDESCRIPTION: This Perl script is used for deploying the Ensembl REST API. It handles command-line arguments, sets up the environment, and manages the deployment process.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/simple_feature.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse Getopt::Long;\nuse Pod::Usage;\nuse File::Basename;\nuse File::Spec;\nuse Cwd;\n\nmy $root_dir = File::Spec->catdir(dirname(__FILE__), File::Spec->updir());\n\nmy ($help, $man);\nmy $server_type = 'starman';\nmy $init = 0;\nmy $config_file = 'ensembl_rest.conf';\nmy $log = 'ensembl_rest.error.log';\nmy $workers = 10;\nmy $restart = 0;\nmy $sleep = 5;\nmy $port = 3000;\nmy $daemonise = 0;\nmy $max_requests = 10000;\nmy $pidfile = File::Spec->catfile($root_dir, 'ensembl_rest.pid');\nmy $access_log = File::Spec->catfile($root_dir, 'ensembl_rest.access.log');\nmy $user = $ENV{USER};\nmy $group = $ENV{USER};\nmy $force = 0;\n\nGetOptions(\n  'help|?'        => \\$help,\n  'man|m'         => \\$man,\n  'server=s'      => \\$server_type,\n  'config=s'      => \\$config_file,\n  'log=s'         => \\$log,\n  'workers=i'     => \\$workers,\n  'restart'       => \\$restart,\n  'sleep=i'       => \\$sleep,\n  'port=i'        => \\$port,\n  'pid=s'         => \\$pidfile,\n  'init'          => \\$init,\n  'daemon|d'      => \\$daemonise,\n  'max_requests=i'=> \\$max_requests,\n  'access_log=s'  => \\$access_log,\n  'user=s'        => \\$user,\n  'group=s'       => \\$group,\n  'force'         => \\$force,\n) or pod2usage(2);\n\npod2usage(1) if $help;\npod2usage(-exitstatus => 0, -verbose => 2) if $man;\n\nmy $app = File::Spec->catfile($root_dir, 'script', 'ensembl_rest_server.psgi');\nmy $config = File::Spec->catfile($root_dir, 'configurations', $config_file);\n\n#Compile the server command. We are assuming starman but if we support FCGI or CGI this will have to change\n```\n\n----------------------------------------\n\nTITLE: Testing taxonomy name lookup endpoint in Ensembl REST API with Perl\nDESCRIPTION: This test validates the '/taxonomy/name' endpoint, which allows lookup of taxonomic information by scientific name rather than ID. It checks that the endpoint correctly resolves the name to taxonomy records.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/external_db.txt#2025-04-22_snippet_10\n\nLANGUAGE: perl\nCODE:\n```\n  # Taxonomy name endpoint\n  {\n    my $taxon_name = 'Homo sapiens';\n    my $taxonomy_json = RestHelper->get_json(\"taxonomy/name/$taxon_name\");\n    cmp_ok(scalar(@{$taxonomy_json}), '==', 1, 'One result from lookup');\n    cmp_ok($taxonomy_json->[0]->{scientific_name}, 'eq', $taxon_name, 'Scientific name as expected');\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Short Protein Sequence in Text Format\nDESCRIPTION: This snippet contains a short protein sequence with 218 amino acids. It includes various motifs and patterns typical of protein sequences.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_19\n\nLANGUAGE: Text\nCODE:\n```\nMWPPSGAVRNLALVLARSQRARTCSGVERVSYTQGQSPEPRTREYFYYVDHQGQLFLDDSKMKNFITCFKDLQFLVTFFSRLRPNHSGRYEASFPFLSLCGRERNFLRCEDRPVVFTHLLASDSESPRLSYCGGGEALAIPFEPARLLPLAANGRLYHPAPERAGGVGLVRSALAFELSACFEYGPSSPTVPSHVHWQGRRIALTMDLAPLLPAAPPP\n```\n\n----------------------------------------\n\nTITLE: Numeric Relationship Mapping Data\nDESCRIPTION: Tabular data containing relationship mappings with columns for IDs and attribute flags. Each row follows the format: relationship_id, source_id, target_id_1, target_id_2, flag_1, flag_2, flag_3\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/closure.txt#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n8869\t207\t1\t1290\t3\t1\t0\n8870\t209\t930\t80\t3\t1\t0\n8871\t210\t87\t1\t3\t1\t0\n```\n\n----------------------------------------\n\nTITLE: Parsing Genomic Sequence Mapping Data in TSV Format\nDESCRIPTION: This snippet represents genomic sequence mapping data in a tab-separated values (TSV) format. Each line contains an identifier, sequence name, and position information. The data is likely used for mapping genomic sequences in the Ensembl REST API project.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/seq_region.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n12665\tAADN03002665.1\t1\t248462\n22098\tAADN03027098.1\t1\t231019\n39878\tAADN03027098.1\t2\t231019\n41747\tJH374440.1\t2\t2964231\n44631\t2\t3\t148809762\n```\n\n----------------------------------------\n\nTITLE: Biological Feature Type Mappings\nDESCRIPTION: Database table entries mapping biological feature types to their alternative names and references. Each entry contains an ID, reference ID, feature name and optional external reference.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/synonym.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n2650\t1686\t\"non synonymous\" []\t\\N\n2651\t1688\t\"protein altering variant\" []\t\\N\n2652\t1689\t\"coding-synon\" [ftp://ftp.ncbi.nih.gov/snp/specs/docsum_3.1.xsd]\t\\N\n```\n\n----------------------------------------\n\nTITLE: Variant Classification Data Mappings\nDESCRIPTION: Tab-delimited data containing ID mappings, variant/feature names, reference URLs, and null values. Each row represents a unique variant type or genomic feature with its classification information.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/synonym.txt#2025-04-22_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\n2401\t1499\t\"partial_codon\" [http://ensembl.org/info/docs/variation/index.html]\t\\N\n2402\t1500\t\"intron variant\" []\t\\N\n2403\t1500\t\"intron_\" [ftp://ftp.ncbi.nih.gov/snp/specs/docsum_3.1.xsd]\t\\N\n```\n\n----------------------------------------\n\nTITLE: Parsing Ortholog Data in TSV Format\nDESCRIPTION: This snippet represents a tabular dataset of ortholog relationships. Each line contains fields separated by tabs, including gene IDs, ortholog types, and various numeric and null values. The data appears to be in a standardized format for representing gene relationships across species.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/homology.txt#2025-04-22_snippet_8\n\nLANGUAGE: TSV\nCODE:\n```\n100981654\t29637\tortholog_one2one\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n100981659\t29204\tortholog_one2many\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n100981665\t27800\tortholog_one2one\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n```\n\n----------------------------------------\n\nTITLE: Representing Genomic Records (TSV)\nDESCRIPTION: This snippet displays tab-separated numerical data, likely representing genomic features, alignments, or relationships from the Ensembl database, potentially retrieved via the Ensembl REST API. Each row constitutes a distinct record, and the columns probably correspond to specific data fields such as identifiers, coordinates, scores, or strand information. The precise interpretation of each field requires context from the specific data source or API endpoint.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/taeniopygia_guttata/core/assembly.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n124841\t4727\t105991384\t106049864\t1\t58481\t1\n124841\t154672\t100290036\t145099721\t1\t44809686\t1\n154672\t4727\t5701349\t5759829\t1\t58481\t1\n```\n\n----------------------------------------\n\nTITLE: Ortholog Relationship Data Table\nDESCRIPTION: Tab-separated values containing ortholog relationships between genes. Each row contains fields for IDs, relationship type (ortholog_one2one, ortholog_one2many, ortholog_many2many), and additional metadata fields marked with \\N for null values.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/homology.txt#2025-04-22_snippet_12\n\nLANGUAGE: tsv\nCODE:\n```\n100988263\t26875\tortholog_many2many\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n100988270\t100048\tortholog_one2many\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n```\n\n----------------------------------------\n\nTITLE: Configuring Catalyst REST Plugin for Ensembl\nDESCRIPTION: This code configures the Catalyst::Action::REST plugin for the Ensembl REST API. It sets up content types, parsers, and serializers for various formats including JSON, YAML, XML, and text formats.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/unmapped_object.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n{\n  'default'   => 'application/json',\n  'stash_key' => 'rest',\n  'map'       => {\n    'text/html'               => 'YAML::HTML',\n    'text/x-yaml'             => 'YAML',\n    'application/json'        => 'JSON',\n    'text/javascript'         => 'JSONP',\n    'text/plain'              => ['YAML::Text', 'JSONP::Text', 'YAML::File', 'JSONFile'],\n    'application/xml'         => 'XML::Simple',\n    'text/xml'                => 'XML::Simple',\n    'application/x-fasta'     => 'Fasta',\n    'text/x-fasta'            => 'Fasta',\n    'text/x-seqxml+xml'       => 'SeqXML', \n    'application/x-seqxml+xml' => 'SeqXML',\n    'application/x-gff3'     => 'GFF3',\n    'text/x-gff3'             => 'GFF3', \n    'text/x-phyxml+xml'       => 'PhyloXML', \n    'application/x-phyxml+xml' => 'PhyloXML',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Band Overlaps in Ensembl REST API\nDESCRIPTION: This example demonstrates how to check if a genomic region overlaps with any known chromosome bands. This is useful for determining cytogenetic locations of features.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://rest.ensembl.org/overlap/region/human/7:140424943-140624564?feature=band;content-type=application/json\"\n```\n\n----------------------------------------\n\nTITLE: Protein/DNA Sequence #1\nDESCRIPTION: Long sequence of amino acids or nucleotides containing protein/DNA information\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nCPWDPKRGQLFFEIFEMRCSKTDLGPISLNWFEELSSEAPPYISEPAEESGCKISSYEPNLFKTPQRKPFYNHLASTPVIFKEQDLTLPLHQSPLKESEKYIQDIGKDIANRKQRSHRTRRTNVFQANDVTSPPLNSCLNESPGLRFTLETPQREKSVVCGSLFHTPKFMKGQTPKRISESLGAEVDPDMSWSSSLATPPTLSSTVLIVRDEEASETVSPKNTTAILKSYLSNQDEILHKNKPIPSVPGNKNKNQGEALSPELGKIFENSFEEESICEDHFENSVPHALEDEVREPVVDISEEDSFSLCVTKYKIENIQKIKTGKARDQKFSRTITDTLEEAKKEMSENRHSFAPEVEPNDNPLESNMTNQKPVGKSSDKISEEVLPSSGSDWSQLSSNLNRTLMERIPLIRISTCDHNNLGKDLIGTEKECAIFVTSEDSLPHILSLPKTEKISTEEIMVNKRGEEQCLESHKESSLSVEQTISGFSLIASPLQGIKKSIFRIRESPEEPFSSTVFSGNMNDSNSKKELEASANRLEIYAVCSQKESSLCPNSVDNESSPASVKQTYVTLKHTGLISTLKKKTKKFVYAINDKTSYQGEEIQKDQESELINSSAQLDGNAFEVPLTFTKADADLLHSSVKRNCLQNDHEKPTWSLTSSSRRILRNCSNSANIFSHNKIVAQDLDFKEGKISKEELQSFITTKTDHQSILQEGHCEDPKSQRVSDVKENVLAIACHPEIQHSEECSNINVNSQKSFLYDHGNACTLILTSSSKDPPSNPVVISREKESYKMSEKLNDKNCEASFELTKNIPTEEKQEIHVLNENSKEPESLLPEKFVKVASPSMKIQFNQKTNLTVIQKDGEETDLISKITINVNSGELFPENENDSASQITNERDITVLGNTKELHEANLRCVKEPILKNSATVVYADRGNGQAAQALITKDFDSLNVVPHFTEDSNNVKQHLNITLDQDFKTYISLERDMKTNRNKDDLNTWAGLLTPISNDNFGCGFRTASNKEIKLSEHNIKKSKMLFKDIEEQSPDSLAWIEIVNTLPLDNQKKQNKPRTLDSQTVNTVSGDVQSFVSKSENINTSPQNLSLKRGLNSNYNLTPSQKAEITELSTILEESGSQFEFTQFRKPNNILKNNTFELAENQMTVVSNTSEKWKDADPDLTINHPSISQVDSSKELESTVGNKQKTACSLKNNCNRSASSHLTDKNEVEFGGFYSALGTKISVSSDSLQTAVKLFHDIETISKETSGEEDLGSFSSRKCHDSVVSMFKKENSNSDKHLNERNDKCQLTFQHDIEMTPGIFVEENTGSYKRNSENEESKYADTNRSTYNLRDSDGGNSSENDTVYIHKDENGLPCISQHNLYVKISSEYIKEGNTEIKEGLSDLTCLEVVKAEETFTVNTSNEEQLTSNKMGQNGKDSDIFNLPLQTESGKNISVSKESLNNVVNFFDKNCTEELKTSSDSLNSELLSGINNKKDISSHEESNLAKKIHKGSIPVGTENQLPALQIQPECELEKIKEPTMLGFHTASGKKVNITKESLDKVRNLFDEQMQDNITEIANCGHLGTKTLMEREECKEGLELACETFEVNTLPEYEEMQNSLDDNKQNLVFTETTVLPRHLSDNLCGQTEILEASNSISLKVKAHENTEKETKSPATCYADQSICSAIENSNLAFYTGHGRKISVNQTSLFEAKKWLRKGELEDQPVRIIRLNEYHEDCVGNPSFGNSSNSIITEDDKNHFFEKADSILSSNSNMSNTCSYHFCHSDEVYNKSEYLSKNKIDNVDPVVENVKDRRSMSFSEEPSVKEVNTHPQTVNENSCIKKLFSNSSSCKNKNAAFELDLSDSHNFDVGPPAFSTASGKIVCVSHETIKNVREIFTDNHSKIIKQNTESKSDTCQTKIVAGCYETLEDSKDVIFPGSLDCKEHSIRSHENFADIKSEGILQHNQSTPGLEKIAKIPCRTNLKTSDTCQFNIGKLPKSFSSANACGIFSTASGKSVQVSDTSLQKARQIFSETEISAKQFFSKVSFRSNEHSDQFTKEENNMTLSNSLPSSQKGFSCNVVTSSAYSEFSTASGKQVLISKSALHKVKGMLEEFDLIRTEYNIQHSPTSRQEVSEILPLTCVNKRTPKHSENSKLKIAYNKGFKLLHNYNIENGSSENNFPVKASPSLCLYKQDKEQSVLGTKVSLVDTIHPLGKEETLPINGKVDIGKPETFSNLPVEANIEVCSTYSKDAENYFETEAIEIARAFMEDGELTDSERPRHAKHSLFTCQGNEGKVLLNPRSGKKRGNTLVSVGEPPIKRNLLNEFDKIIENQEKTLKASKTTPDGTVKDRRLFMHHISLKPITCGPSCTTKEWQEIQNPTFTSPDQELLSKSHPFIPLTLEKSSSKLSVSGQPFYKVPATGNAKISDSITTSKPTKVFVPPFKTKSHFERDERCASRNINLEETKQTQKNIDELGSGDGENSISDSEIHLFNKNNSNKAATILFTKCGKEPLDFITNLQNARNTQDMRIKKKQRQRICPQPGSLYLAKTSTMPKISLKAAVGGHIPSVYSHKQLYMYGVSKHCIKINSKNAESFQFHAQDYFGKEGLWAGQGIQLADGGWLIPSNDGKAGKEEFYRALCDTPGVDPKLISRSWVYNHYRWIIWKLAAMEFAFPMEFASRCLNPERVLLQLKYRYDMEIDRSRRSAIKKIMERDDTAAKTLVLCISEIISLSTNISETSSSKAASVDPKTVANIELTDGWYALKAQLDLPLLALLKNGRLAVGQKIIMHGAELVGSPEACSPLEAPESLMLKISANSTRPACWYAKLGFFPDPRPFPLRLSSLFSDGGNVACVDVVIQRAYPTQWMEKTSCGLYIFRNERAEEKEAAKYAEAQQKKLEALFTKIQVEFEEQEENATKQCAPSHVLTRQQVRALQDGAELYEAVKNAPDPGYLEGYFSEEQLRALNNHRQILNDKKQAQMHLEFRKAIESAEQRVQGLSRDVTTVWKLRIISYETEEKNSVILSIWRPSSDLYSLLREGKRYRIYHLATSKSKSKSERVNIQLTATKKTQYQQLPTSDEILFQVYQPREPLHFTKLLDPDFQPACSEVDLIGFVVSVVKKIGLAPLVYLSDECYNLLAIKFWVDLNEDIIKPYMLIAASNLQWRPQSKSEIPTLFAGDFSIFSANPKEGHFQETFNKMKNTIENIDIFCHDAEKKLMLILNANDPKWSTPTKDYTSGPHTAQAVLGTGNVFLMSSPINEINYQSPLPLCKPKAKSVPTPVSAQMTSKSCSKEEKEISDPKNCKRRRALDFLSRLPLPPPVSPICTFVSPAAQKAFQPPRSCGTKYETPIKKKDLNFPQMTPPKKFNELSLLEKDSIADEELALINTQILLSGSARENQLISISGSTRTPPTSSKDYLGQKRHCATSMTKEQENPQTSTEECETSLQDIHTTKNRSKRLQRQQKRK\n```\n\n----------------------------------------\n\nTITLE: Protein Sequence 2 - Ensembl REST API\nDESCRIPTION: Another long protein sequence consisting of amino acid codes. This sequence is also likely used for bioinformatics analysis or as part of the Ensembl REST API's functionality for protein sequence queries and comparisons.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_8\n\nLANGUAGE: plain text\nCODE:\n```\nMSVGSKERPTFFEIFKTRCNEADLGPISLNWFEELSSEATPFSSEPVEESEYKIISYESHVFKTPQRKPFYRQLASTPLIFKEQGPTLPLFQSPVKELDKCKLDLGNNIANSKHKSHHTGNAKMDQAGDVTSPLLSSRLSESPVLQYTHVTPQREKSVVCGSLFHTPKFVKGQTQKHISESLGAEVDPDMSWSSSLATPPTLSSTVLIVRSEDASEIVFPNDTTAILKSYFSNRDESLKENDRLISSVTDHENKNEREARSCGLGKILGNSFDEVNSCKEYFGKSVPNILEDKVRKAIADTSEEDSFSLCFKYKTRNLRKVRKDNTRKKVFHETKTGEYEEAKKQIKEKHSIISEMEPNDSDLLDSNEAKQKPFGNESDKISKEIVESCASEWSHLTLSGLSGTQMEKISPLHISCNQNNSEKDLVDTEKECTDFITSENSLPCISNIPKPEKILNEKTVVNKGGEPQHLESYEDSILAVKPAISGIPRTASLFQDINKPIFKIRESSEETSSAVFMGSMTDPNVKEETETSESNLEIYTICSQKEDSLCPSSIDDESRLATIAHTSVPLKNTGLISTLKKKTKKFIYAINDETSYQGKKIQKDQKSEITNCSAQFESNVFQAPLSFTNDNSGLLNSSVKRNCLQNDSEEPALSLTSSCGTLLRKCCHNKSNSPNNPVISQDFDYKEAKINEEKLQPFITSEMDYLSCQQERQCENDPKSENVSAIKEKVLATACYPVVHHSEVECSGMHIQSQKSLLYNHDNTSTLTLSSKDPWSESVVISSKKESYKMSEKERRKSCKVGFELTKNIFAEKNQEVCSLNENSKNAEPLLPENYITASPSVKVQFNQNKNLSMIQKEETTLISKILDNPNSEELFQDNENFVCQVTNGRNNLILGNSKELPEADLSCVKEPFLENSTMVVHADVGDRQAVQVLITKELDSSDTVYDFPEENRNSVKQHLKVTLDQDLKPDTSLVIDKKSNKNDCMDKQAGLLNPISNHNFGGGFRTASNKEIKFSEHNIKKSKMLFKDIEEQYPASLICVESINALELRNQKKLSKPHMLVSESINTVSSYVQSSPFVSNSENNQTPPQMLFSKQNFNSNHNLTPSQKAEITELSTILEESGSQFEFTQFRKPNLIMQSNTFDVPANQMSLLNTTSEERKDVDLNVSSVGQVETSKKFEGAVQVKQKFTCLSENNCNKSASGYLTCENEVEFRGFYSARGKKLNVSSEALQKAVKLFGDIENISEETSTEVDPRSFSSSKCNDSIVSAFKIESHNNTNLNEKNNKCQLVLQNIEMTTDAFVDKSTENCKRNIIENDNKCVAANRKTCNLGESDSSDSGKNDTIYIHKDANDLPCTDQHNVYFKLPSQFVKEGNTQMKASLSDLTCLEIVKEEETCYVDTSNKEQLNASHMDQNRKDFEVFDISFQTASGKNIKVSKESLNKVVNFFDPKTEEELNNFFLNSKLLSGISKNKVDILSHEEIDMFKNEILKESISIDTQNQLSTLQQQPECENKKIKQATLLSFHTASGKKVKVAKESLEKVRNLFDEEKQAISKISLNSQRAKIQKDRGERTCKEGLVLACKTVEITTVPKCEEMNSLGDNVENHVSNPTAVLPKPLSDHFYRQSENISTPNVSLKVKVCENVEKETAKSPATCYTNQSPYSAVENSALAFYTGHGRKISVSQASLFKAKKWLREELGDQPEEINSDKNYVGNPSHGSGSNSIITENGKNHLPEKQDSAYLSFSSMSNYSYHSDFYCSHDSGYLSKNTTDSSIEPVVKNIEDERNINFSEVTSTVREANAYPQTVHKDTCIQKLVTNSSLCTNENTAFKLSVSNSDNFEVETPAFSTASGKIVHVSRETIKKVKEIFTDNCSKVIQMDTKSKSSTCQTRIVSDYYKTLDDSEDSLPNSTDEESSMHSHKIFADIQNVHILRDQSMLGLDKVSTLSPCDVSLKTSSLCNTGKFPELVSSTNPEIFSTASGKSIQVSESSLQQARQVFSEIEEHAKQHFSKVSFKNNEEYSDQFTREEKVIHVPQKLISQKGFSCNVVNSPAFSGFSTASGKQVSVSESALHKVKGMLEEFDLIKTDCTLQHPPTSRPGISKFPSLPCVDKRTAEYSMNSEMKKAYSTEFKLLNNFNIESNTSENNHSIKVPPYMSQFKQDKQQLVLGTKVSLVENIHILGKEQALPKNIKMGIGKTETFPDVPMKTNIEVSSTYYKDSENYFETEAVEIAKAFMEDGELTDSEPLSHAEHTRFTCQENEETVWLNSRIGKRRGDNHVSFGEPSIKRNLLNEFDRILENQEKSLKVSKSTPDGTMKDRRLFMQHVYLEPITCGPFCTTKKRQGIQNPNFTAPGQEFLSKSHFYEHLTSENSSSNLSVLGQPFYKVPATRSKEMRHSISTGKSTKIFVPPFKTKSHFHRDKQCASNTVVEENKQKQNTDEHDSGDSENNNSEIHQLNKNNSNQACEEEPLDLITSLQNARDTQDMRIKKKQRHHISPQPGSLYLAKTSSLPRISLKAAVGGRVPSACSHKQLYMYGVSKHCIKINSKNAESFQFHIQDYFGKEYLWAGKGIQLADGGWLIPSNDGKAGKEEFYRALCDTPGVDPKLISRVWVYNHYRWIIWKLAAMEFAFPKEFANRCLSPERVLLQLKYRYDLEIDRSRRSALKKIMEKDDTAAKTLVLCVSDIISLSANICETSNSKTNSEDTKKVSVIELTDGWYAVKALLDPPLLALLKNGRLSVGQKIIIHGAELLGSPEACTPLEAPQSLMLKISANSTRPARWYTKLGFFPDPRPFPLRLSSLFSDGGNVGCADIIIQRTYPIQWMEKTSSGLYIFRNEREEEKEAAKYAEAQQKRLEALFTKIQAEFEEREDNNNNNFLPFSNVATWTVPVRRYRDVCFLFQYVKWSQCYFSEEQLRALNNHRQMLNDKKQAQIQLEFRKAMESAEQGEQGLSRDVTTVWKLRIISCAKEETDSVTLSIWCPSTELYSLLTEGKRYRIYHLAASKSKIKSEKANIQLAATKKTQYQELPASDEILFQVYQPREPLHFNRLLDPDFQPPCCEVDLIGVVVSVVKKTVLGLAPLVYLSDECHNLLAIKFWIDLNEDIIKLHALIAASNLLWRPESKSGIPTLFAGDFSMFSASPKESHFQETFNKMRNTIENIDIFCKDAENKLIHMLNASDPKWCTPTKDSTSELHTAQTVLGTGNKFLISSPNSEINYQSPSSLCTPKVKLVSTPISAQMTSKSCCKGEKAIDDPKSCKKRRALDFLSRLPLPPPVSPICTFVSPAAQKAFQPPRSIVTKYETPIKKKELNSPQMPSPKKFIEISPLESNLIADEELALINTQALLSSSAGEDQCVSISEPPGTTTTNSKDYLRLKRHCTTSLNKEPKNPQVSTEDCATNMQDTSIIKDIS\n```\n\n----------------------------------------\n\nTITLE: Sample Ensembl Gene Data in TSV Format\nDESCRIPTION: A sample of tab-separated values representing Ensembl gene information. Each line contains fields such as internal IDs, Ensembl Gene IDs, taxonomy IDs, biotype (e.g., 'snoncoding', 'coding'), descriptions (including source like RFAM or HGNC), genomic coordinates (start, end), strand (+1 or -1), and gene symbols (like 'SNORD2' or '\\\\N' for null). This data likely originates from an Ensembl database export.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/gene_member.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n100249719\tENSSSCG00000018621\t0\tENSEMBLGENE\t9823\t132\tsnoncoding\t100255328\tSmall nucleolar RNA SNORD2 [Source:RFAM;Acc:RF01299]\t13702407\t56979313\t56979381\t1\tSNORD2\n100251682\tENSOARG00000022045\t0\tENSEMBLGENE\t9940\t147\tsnoncoding\t100257358\tSmall nucleolar RNA SNORD2 [Source:RFAM;Acc:RF01299]\t13902822\t73593587\t73593655\t-1\tSNORD2\n100263700\tENSRNOG00000053621\t0\tENSEMBLGENE\t10116\t155\tsnoncoding\t100270056\tSmall nucleolar RNA SNORD2 [Source:RFAM;Acc:RF01299]\t14026979\t81378396\t81378464\t-1\tSNORD2\n100277999\tENSG00000176515\t0\tENSEMBLGENE\t9606\t150\tsnoncoding\t100285954\tsmall nucleolar RNA, C/D box 2 [Source:HGNC Symbol;Acc:HGNC:32678]\t13955539\t186784796\t186784864\t1\tSNORD2\n100281324\tENSTSYG00000021671\t0\tENSEMBLGENE\t9478\t82\tsnoncoding\t100289437\tSmall nucleolar RNA SNORD2 [Source:RFAM;Acc:RF01299]\t11302777\t17893\t17961\t1\tSNORD2\n800724672\tENSGALG00010013238\t1\tENSEMBLGENE\t9103\t112\tcoding\t801267248\t\\N\t171547\t76013473\t76021946\t-1\t\\N\n902362807\tENSAPLG00000024671\t1\tENSEMBLGENE\t8839\t144\tcoding\t903805708\t\\N\t13785441\t1377967\t1380217\t-1\t\\N\n915155796\tENSACAG00000068599\t1\tENSEMBLGENE\t28377\t111\tcoding\t951375945\t\\N\t13049254\t108443782\t108446121\t-1\t\\N\n916102739\tENSFALG00000116138\t2\tENSEMBLGENE\t59894\t145\tcoding\t953508295\t\\N\t13862701\t6605665\t6608045\t-1\t\\N\n800904434\tENSGALG00010013238\t2\tENSEMBLGENE\t9031\t142\tcoding\t801599839\t\\N\t44631\t50035242\t50038451\t1\t\\N\n902003283\tENSAPLG00000007671\t1\tENSEMBLGENE\t8839\t144\tcoding\t903236659\t\\N\t13784477\t819\t5394\t1\t\\N\n915207261\tENSACAG00000001324\t7\tENSEMBLGENE\t28377\t111\tcoding\t951476700\t\\N\t13049389\t304719\t309568\t-1\t\\N\n916121289\tENSFALG00000093806\t4\tENSEMBLGENE\t59894\t145\tcoding\t953553350\t\\N\t13862672\t9106356\t9111844\t1\t\\N\n```\n\n----------------------------------------\n\nTITLE: Embedding VBScript in HTML with Highlight.js\nDESCRIPTION: Example showing how Highlight.js supports embedded VBScript within HTML code using the <% %> syntax.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/root/static/js/highlight/CHANGES.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<% .. %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Reference DNA Collection Parameters (Perl/Ruby Hash)\nDESCRIPTION: This snippet defines configuration parameters for handling the reference species DNA collection within the Ensembl pipeline, similar to the non-reference counterpart. It specifies chunk size, masking options (enabling default soft masking), and overlap size using a hash-like structure.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/method_link_species_set_tag.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\n{\"chunk_size\" => 10000000,\"masking_options\" => \"{default_soft_masking => 1}\",\"overlap\" => 0}\n```\n\n----------------------------------------\n\nTITLE: Second Protein Sequence\nDESCRIPTION: Long protein sequence with multiple functional domains and repeating motifs\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nMPIGSKERQTFFEIFKTRCNKADLGPISLNWFEELSSEAPPYNSEPAEESEHKNNNYEPNLFKTPQRKPSYNQLASTPIIFKEQGLTLPLYRSPVNELDKFRLDLGRNVPNSRHKSLHTVKTKMDQADDVSCPLL...\n```\n\n----------------------------------------\n\nTITLE: Analyzing DNA Sequence\nDESCRIPTION: This snippet contains a long DNA sequence for analysis. It consists of nucleotide bases adenine (A), cytosine (C), guanine (G), and thymine (T). The sequence may represent a specific gene, genomic region, or other genetic element.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/dna.txt#2025-04-22_snippet_0\n\nLANGUAGE: DNA\nCODE:\n```\nACACATAGGTAATGAAGTTCACAACAGAGATCCACCCAGTGAACTCTACAGTAAATAAAATGGGATTTTTTTCTCCTTCCAGAGCAACTAAAGCATCCATACAATCGGAAACACACATACTGTGTATTACTTTGGAACAGAGACAAATAGTCTCTTCCCTATCCTATAGATAGGCATTGAGAGTAAGGATTCATTATCATTTCTAGCAGTGTATATTTGACAAGATCGTAATAGTTATCGTTTACATTTTGTAAATTAAAACTTCATTTGACCTAAGTATTTCAGCTAAGAAGCATAATTGTTTTGTAGACTATATGAAAGTCTGACTCATTAAGATTATACATTCTCAGCAAACAACAAAGTAATGAGAGCTCTTGCTCTCCTTTTAGAGAAGCAGACTTCAGATATAGAAATTTTCATGAATCTCTACAACACCACAAAGGATCTCTTGGAGCACTTACCCTCTGTTTTAAAGGTCACTACCTGACCATAGCAGCCTTTGGTAAAATCATAAATCTGCATTAAATCAAGGAAACAATTGAGGGCAAACCTCCCTGTGCACTGATTCTTTTAATCAAAGTACTCGAAGTGTATCAAAACCATAACATTTTCAATTTGAAATGAGTTTAGAACAAATATACACATTTTGCCTGTGGAAGATATCATACCTTGGATATAAAAAAATTAGTAGCAGATATCATTACTTAACCTTAGAGAGAATAGTCCAACAGAACAGAAAGCACTGTCACAGGCTAATTTTTAGGCTTATGATTTACATAAATCATGAATGAGTTAACTTGTGAGAATAAACGGAACAGAAAAATATGCTATAACACTGTCCAGCAACATTCTCCATTTGAATATACATAAGTAGAAGAAACTTCATTTTCCGAAGGAAAGTCACAACAACACAACTTCTAGTCTTCAAAGAAAGGAGACTCTGCTTCCTCTCTAGAGTCTCTTGACAGAAGGATCTTAGAAAAGAAAAAGATGATATCACATTCCAAAACCACAAGATGTAAAGCCTTGCAAACAAATAAGGATTGCAATTGATCATCTGGGTGAGAAAGTACAACAGAGGACAAGAAAAAAAAAAAAACCACAGAAATTAAAATATAGCTTTTTTTCTATGTGACACTTCTAAGAGGGAAAAGAAAATCCGCTCCAATTAAGAAAATATCAACACCTCAAGCGAGGATAACTTTGATCTTATTATTTGCCAGAGAAATTTCATCCCTTTAAAGCTTCAACCAAGTAGAACTAAGTTATTAAGGAGTAAGAAAACTTAAATAAGAACCTTTTAGAGACACCAAGGGCAAATTGACAGGTATACTATTTTGACTGGTTGGCTACATCACAGGAATTAAAATAATAATATATCTTTATTGGTAAAACAGTAGTCACGCATATTCACTTGAGTGTTGAGTGGCATTTTCATAAAAGAAGCACAATTTCTTATCAGTTTCAACCTTTTCAATTTTACTTCACCTTTTAGATTTGCAGTGTCACTTTAAAAAAAAATAACTGTCATCACTTTAAACAATATTAAAAAGTATTTAAAAAGTATTAAATTGTCTCTGAAATCTGAAAGTACATTTAATATTCATTTACAACGTTAGACCGACAGGCACAAAAACTCAGATCACATGTTTATTATTCAAATAAATTACTAGCAAATCTGGAGCAGTATGAGCTTTTGCAGATACGCTGTATATCTTTGATCTTCCATTGTCATGCCACTTAGTATTGAGCTCTCCTAAAAAAGGAGGCACAGACCTCTCCTAAAGTGCTAGGGTATGTGCCACCCAAAGCGGGCTGCAAAGGTCCCCAACTAAATAACTAGAAAGACTTTCCAACAACAGCAGAGTGACAGTCATTTCCCACTGCTGTTGGTGACTGAGCACTATGCAGTAGTGCTCAGAACTCTCCAAGAGGATGACTTACTCCAGTGTTATGCCCTAAACAACTGCAAACTTTTCCATCTTACATGAGTTCAACAATCTTTAGACAAACAACAAGAATAGATTGAAAAACTCAAGAGGTGAAAAGACTTGCCTACAGCAAACCTGAGGTAAAAACAAAAGGGTGTTTTAACCTTTCATACACTAGATATAAGTAGTTAATTTATGTGGTAAGCCTAGTTTTGCCAGCTGATCAGGTCAGTTTTAATGAAGCAAATTGGTGACAGTTCATAGACTTCAGTATCAGCTCTCCATCCTCCACACCATTCAAACAGAAAAGGCTTAAAAGTAAAACAGTTACTCCTAATAGTAAGTGCCACCAGAAAAGATGAACATGAATAAAAGATGTGTAGGCCCTCCAAGATCCAATTGCACCTGTAGATACAGGTGTTAACAGGTGTTAACAGAATTTTAATTTCAAAATCGGGAGCTTCAAGTGTGTTCAATTCTGAGCTGATAGATAAAGATGTGGCTACGCATGCTTGAATTCTAGTACCCCAACTCCATCATATTTCCATGAAACATAATATATACAATGTAGAGTCAATGTAAAATTAATGAACAAAGGAGTCTCTTGCTTACTGAAAGTATATAGTTTGGGCAGCAGCTTGTCTCAAGGTGGGGCATAACATTGTCTGCCGCTGGTCCTTCACGTCTCCAGTTTCTACACTGGTATTAGGTATTTGTATTTATTCATATTTACTATTCTGAGTTGTGCACTGATATTTTACCAGACACAAATAATCAGCAACATGGACCACATGGACCACTGCTAGGTCTACAATATTACGATGCCTATTATACTATTTTATATATATATATAAATAAACTTTTAAATGCTCGTTTTCAACTTATTTGGAAAATCTCAGTAAGGCAATGGGATTAAGCAAAACAGGATGACATTAATCATTCTCTGGTGAAGCTTAGAGTTTAGATTATTAAAAATATTTTCTACAGACAACAGAAGCAAAAAATGCATGACTTCTCACTCTGTGAAATCATCAGTTGTGACTTCTATATTATTAAATCTCTCTTGTAGACAAACTGACACTTATGGACTTAGTCATTCTATAAGCTAATCAGCACCTAAAATATTTTTCATCTGACTTTGAATGATATTTTAACAACTTAATATCAGCTCATATTGAAAGCTTGATTAACAGACCGGTGACAACAGCAATGAATTCTAGTGTGTGTGTGGGACCATTACTATGCTGTTAAAACACAAAAGGAAAATATTACCTCCCACAACTCTTGCTTTTAAAGTTGAGGAAGAGCTCGTGCAAAGAAGTTTTATATGGAATCCAGTTGCACCAACCTTCTCACACCTATAATCAGCACATGCATCTGCACATGAATTAAAACTTTTCACTTCCCCAGCCTATGGCCTAAATTCATATTCACTACAGATTCTGAACCTTAAGTAAGCAAAAAGGCTTGCTATATAATCTATGTCATTTATAACATAAATATTACTTCCAAAGGAGTGTTTCATTTGAATGTTAACTTTTAACTGTCTCATTAGCCATGAGAGAATAATGTGTATATTCCAGGATATTTCTCTGCATTTTGAAGAAGGTCTTTCACTTGTCATAGAATTTATACTAGTGCTGTTCTGCAGATCATAGAACACTAATTCAGTACTTTTTGTGGGAACAAAAATAACTGATTATGAGGAGTCACAAACTGAAGAGCATCAGCCTGTCTCTTCCTCAGATGTTGAAGCCAAACTGCTCTTGATGATAGCAGTATAAACAAAACTCAGTGGAAAAGACTCCTTAGGTCTCTAATTTCAGTATTTATCATAACACTGCCATATTAACAGGATAAACAGTACCAAGGTACTTACATGGAAACTCTAAATAGAGTTATTTTGCAGCAGTAAGTAAGAATGCTTACATCTTGCTTTATAGCAGATGGAAACAATTAATAGAGCCATTGTGCAAGGTGTCTAGGAACACAACTTACAACTCACTAATTAAGGGTGTCCCAATGTAAAGGTGCATTTTAAGGCTATCTATATCTGTTAGACAGCAATTTATATGTTTTTCCTTATGCAGATACTGTCAATTAAAAGAATCTTACTTTTTCATTTCCATTCCCTCTACGTACGTGCTATGCCTCTAGTCATTACCACACTCATTAAAACACAGCAGCATTTTGTCCCATGTCAGCATTTAAATGAAGTATGAGGAGATATAACAATACAATTAACAGAAGTATTCCCAGTGAACAGGACTTTGAAAAACAAAAACAAAGAAGCCTTGATGGGAATGGTTCCGCACTTGAGGCGTATGTACAGAAATCACTAGAGCTTTTCATCTTTCTTTTTTAAAAAAGAAAACTGACAAGCCTAATAGAAGGAGAAAAAGAGAAAAACTACAATTTTAAAGCTTCATTTTTATTCAAGACATAGCACAAGGACATCCAGAAAGGCAGCCTAACAAAAACAAGACACAGTCAGAAACAAAGCCTAAGTTAGTGGAAAAAATGTATTCTTTTTGAGGTTTCTGCATAGCACCTACCAAAAGAACCTCTCTCCTGACTCATGTTTTTTCAAACTTCACAGATAAAAATAGCATGTTCATCTGAACAAGAGTGTCCCAAAAGACAAAACAAACAATAAGGTTATACCCTATATTAAAATTTGTGTACTTTCTGCTCATGCACTAAATACCTTTGTGTATTTCTTTACCCTGGACAAGATGAAAGGTCACTCTTCATATGCATAAGAAGCTAATCTCAACTGTAATTACACTACAGAATAAAACTCTTCACTTGAAGGTTAACTAGATTCGGAATAACCCAGTTCTCAGAGTGTTGCATTTATTTCAATTAAGTCAATCAACTTAACAAGGATTTAATTAAAAACAAGTTAGCAAGTAAGAATAAGTATTTGAAATTTAATTAATAAATACTTTAAATAAGCAAGATATAGCTAAATCAAATATGTAATTGTAAATGTGCTAGCCTATTATTTCTTTTGAGACATCTACTACCAATCAACAATAAAAAACACCCCACATGGGGAATACTACCATGCAGCTTATCCTAGCTTTCTACAGAGACAAATAAACACAGTGCACAGAAGCTAGAATACTGAGATTTCAGTGAATTAGGTAAAGAGATGAGTACCTATTTCCATTTATTTTAACTGGAGGGAGAATTCAAGGTTTGTCCACACTTTCTTTGCTCTATTTCACTCATTGATATTAGTATAAAACAGCCGTTCAAGGCCATTAAACAAAACAAAGAGTCTTTTCACTGAATTGCCATGCTTTGTTAGTTGTGAGGTTTCTTTCCCCCATGAGCACTCTGCAATTTGGTGAGCAGGAAGCACAATGCTAAAGGAAAAAAAACAGACAACTCTTAATATGAAGAGGTACATCAGACTTTCCCAATATGTACCTTTCCACAGTCTTCTGTAAAATTCTGCATCTCATCACTGGCTTTGGAGTCTAACAGCAATGCTTAGATCTCTGCCCTTCCCAGTGCCATTCAGCATTTCTCTTGCATCTCACTCCTATGTAATATCATTATATTCTTTCTCTTCCTTGTTTCTGACATTCCAGCAGGAAAACAATACAAAAAACAAAAAAACAACCCACACAAAACAACCATCTACTTCTTACAAAATAACCAACACCGCCCACAAGCAAGATTCTTTTTCTTCTTATGACACCATTAAAAAAACTTTATTCTCTTGTCACCAAAGACCGATTTAATTACGATACCACAGATCTAAACATATTTCAAGTAAGCACACTTTAATGTTACAGGCTAATATATACCAGAATGAAAATTTCTGCCTACTTCCATTCTTTACAAATGACTGAGCACATCTGCTTTTGTGTATCTGACACATTGAGAACAGGAGCACAAAGATTAAAACAAGAATGATCAAAAGCGTCAGCTCGTTTTGGGCAACCAAGTTTGAGAAGCCCATGCCTGATCTTTCAGATTACTTCACATTATATTACACTTTTCACCTCCAAACCACAGTTCCTGTTGAATTGGCCACGGCTACAATTAAATGCTCCAAAATGAAATTAATCTATCCTAAGTTTTTAGTGTTAAATCTTCAGAAAATAAGTAACATGGACTATAAAGTTATGCTTGAGAACTTTTAGCTATGTTGTTTGCCCAGTATAATTAAAGAATTCTGGTGCAAAGGCAAGGCTGAAACGCAATTAGCCATACCATGACCACAGTTGTCTTGTAGTCCTCTACTTTATGCACTGTCAGTTGACCTCTCTGTGTACAATTCTCAGCTTTTGCACCCATGTCCCTGTCTATAGCCCTGCTCAACTCTTTCTGGTACTTCATGAACTTTATTCAGATTTAGTGAAATTACTTAATCCTTTCCCACAGTAAATACTGGATGGGAAGGGAAGTATTCTTTGAGAGATGTAAAATTTTCAGATGAGTCATTTCAAATAATCTGAAGAATGAGCAAGAACAGGGTATTTTTTATGATACTGATATTCCAGTATCCAGCTGACAAGCTGCAGAGAGCAAGATTTCTCTACAACTAAGACTACCAATCTGTTTCTTATACCTTTTCATCCAGATCACTTTGGGACCCTGCTGTCATAAATTGGCAATAACAATTCGTATTAAAATCTTACTATTTCAGTTCTACTGCAGATCCTCTGCTGGAAGTATTTAGAAAAAAAGAAAAAGAAAAAAAACCACCAACAAAACACTAAGTTGATTTGCAACAAATGACATCTATGCATTTAAAAATGCCAGGTTATGTACGACGATCCTCTAGACTGAAATCTAAAGTTCTGAAAATTTTGGTATCTGTTTATACCTGAAGCACGACAACATGCTGTGAACTTTTCAAGAATTTAAGAAAAAATACTTTCAAATAGTTTAATTAATTAGTGGATGAAACAAAACAAGCAAACAAAGAAATACAAATGGAGAACCCAATACTATTGTGGTAAATGCAGAGACAGGACCAGGAAAGCCAAGACACAGATGGAACTGAACTTGGTGAGGGATGTGAAAAATAACAAGATGGGTTTCTTTAGTTACACTGGTCAAAACAGACAGGCAAAGGAGAATGTACTCCCTCTAATATATGAGAAGGGAGAACTTGCTCCCTCAGACATAGAGAAGGCTGAGGTACTCAATGAGTTCTTTGCCTCAATCCTCGCTGCCAGTCAGGCTTCCCATGCCTCTCATGTCTCTGAACCTCTAGGTGTGGGTTAGGGAGCAATATTCCTCCCATTGTAAGAGTGGAACAGGTCTGAGATCACCTCATGAGGCTGAATATCTATATGCCTATGGAGAGTGACAACACACATCCCAGGGTCTTGATGACACCAGGCTGAGTGGTGCAGTTGACACAATAGAAGGAGGGGATGCCATCCAAAGGGACCTGGACAGGCTCAAAAACCAGGCCCACATGAACCTAATGAGGTTCAAAAAGGCAAAGGGCAAGGTGTTGCACTAGGGTAGAGGCAATCCCAGATATGTGTACAGAGTGGAAGAGGAACTCCTTGAAAGCAGCCCTACAGAGAAGGACTTAGGAGTTCTCATGAATGAAAAGCAGGACATAAGCCAGCAGTGGGTGCTTGCCGCTTAGAAGGGAAAGAGTATCCTGTACTGCATCAAAAGAGGGGTGGCTGGCAGGGAGAGGGAAGAGACTGTACCTTTCTACTCCACCCTTGTGAGGCCCCATGTGAAGTACTGTCTCCAGGGCTGAGGCCCCTCGCACAAGAAAGAAGTAGAGCTGTTGGAGTGAGTCCAGAGGAGGGCCAGAAAGATGCTCAGAGGGCCGGAGCACCTCTCCTATGAAGAAAGGTTGAAGGAGTTGGGCTTGTTCTGTTTGAAGAAGGCTCTAGGGAGACCTCGTTGTGGCCTTCCAGTACTTGAGGAGGGCTTATAAACAGGAGGCAAAACAGATTTTTTACATGGTCTGATACTGACAGGACAAAAGGGAATGCTTTTAAACTAAAAGATTAGAGATTAAGATTAGACATTAGAAAGAAATTATTTACTCAGAGGGTGATGGAGAACTAGAACAGGACACCCAGTGAAGCTGTGGATGCCCCATCCCTGTAGGCATTCAAAGCCAGGTTAGATGGGGGTCTGGGCAGACTGATCCAGTGGGTGGCAACTATACTCATGGCAAGAAGGGGTTGAACTAGATGATCTTTATGGTTCCTTTCAACCTTAAACATTCTATGGTTCTATGTATTATGCAGAAGGCATTCTGCTATTTCTGGGAAGAAAAACAGAGCACTGAACACCTTCTGTTCCCACTCCAAACTTAATCATCTGGACATAGCTGGTATTGTTGTTTGATTTCTTCCTTGCCTTGTAGCAGAAAAAAAACATATTGCCTTGAATCAGACAGACACAGAGCAATCAAAAATGTTTGGATGCAGCATGGAATGTGATTATTTTTCCTTTTACCTCTGATTCGATTTACTGCTGCCTAGCTTCTTTTTCTTTAGGAAAAAAAATAACTATAACCAGTCACCTTTAACCAAGACAACATAGAGTAGTCTAACCAACACAATATAGAGTAGTTCTGATAAAACAATTTGCATAATGAAATATGCAGTGTTTTTAATTGAGTCGTATCTATCAGGCACCAAATCTCTACAGGAAAATTGTTTGAGATTTCAGCTAGTATTTTTTCTATCTTCTATCAGTCTCCATGATGACATCACAATTTCTATTTTGAAGCAAGTTGATGAAAAAATGTTGAATGAGAACAAGCTAAATGAAGGGAGTGGATGTTTGATGGACTGAAGCCACATTTAGTTTTAGTGTTCACTTTACTTCCAGCTGTCAAATATAGTTCATAGATGCAGTAAAACAAAGCTCTGCCTCTCATACAGAGATAATTAAAGATATCCCCAGTACTATGTTCTTATCAACCACAGAAATTCCCAACACTCATGAAAACTCTCTGAAGTGCAACACATTTTTTTATCTGACCTCATGTTCTGCTCACTCTGCCTAAGAAGATTGGTGAAGTCTGCATTAAACACTTCCTCATATCTTTCTCTGAAACATGCAGCTCAGCCTTTTTACAAGAGGACATAAATACCATGTAAAGCTTTTTCAGTAAAATGCTCTCAAGTAGTAAGGATGCTTTTAAGACAAGGCAAAAATATTTTCTTGTAAGGAGCCTCTTAAAAAGCAGGAAGAGATTTTTAAGCACAAAGGATGCCAAAATAAAACACAAAAAGGATATTAAGAAATATGGAGGATTCATATATAGACCATCTTTGAAAAAAGGTTTTTCAAATCTGATGTTTATAATCTCCAGTGAGGAAGACTGCCTTTCTTTTAGCAATATTTTACATAAAGAAATACACTGAATGGACTCAATACTTTAATCCTTTTAAAATTAAATTCTAAATAAATTCATTTTTCCTTTCTCCATAGATAGATTTTCAAACCTCTAACAAATCTTGTGATCCCAAAGAATTTCTTCAACCACTGATTAAAGTACACTGTTCACAATCTAGACGCAACAGTGTATCTGAGACCGGAGTGATGCTTGTTGAGTAGACCAATTACCTCTCAACTGTAACTGTATCGCGTTGTGAGATTTCAGTTCAGCTTCAGATGCAAACAAATAGACTCTGCTATACTGGCTGTACAGCTTGTCATTCCCCATGATGCATTTGTGAAATCTCATATTTCCTAAGAGCAGCACTTCACACTCATGTTACAAGTGCATAAGATTTAATCCTGTTTCCATTTCAATAAACACATCCATTTCTTCACCAAGAGCTATCCTGTCCCTGCTAGATACCACGCAGAGATACTGTAGTATCTGGGAGAGGAGTTGAACTGCTAGTTTCCCACTTACTGCAATGGAGCGTAACAGTTTCTGTTCTTGAGGGGCTGCAGTCATATTTCTTTTACTATGTCAAAGTTAACATATCTAACCGAGCAAAAGCAGTACTGGTGCCATATTTACCTTTAGCTAATGAAGTTGACTAAACAGGAAAGAGAATAGATAATATAGTAATTTAAGAGATAGAGCAAGAGCTGCACAATGATAG\n```\n\n----------------------------------------\n\nTITLE: Storing Protein Sequence Data in Text Format\nDESCRIPTION: Three protein sequence entries in plain text format, each containing an identifier, length, MD5 hash, and amino acid sequence in single-letter code. Each entry follows the same structured format for database storage.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n1125711\t3083\tc03359715d419d7eeb9cd4ad53c4734a\tMENKMADKPVARPTFFEIFKARCSESDLGPISLNWFEELSTEALPYESETSERPEYRAVCLEQSASKTPRGKPFTCSQLASTPVIFKEQSITLPLLSSPIKELGQKKTETGKDSLVNKDHRSSPHFMKTKLDQISPLNTSLSISSAALRGIYRTPQRNNIPVARGSLFCTPKLLEVKTPTCISEGLGAEVDPDMSWSSS...\n```\n\nLANGUAGE: text\nCODE:\n```\n1130876\t3427\t9835f09b1996ba88ec776015ad79160d\tMPIGCKERPTFFDIFKTRCNKADLGPISLNWFEELSSEAPPCNSELSEELEYKISSYETNPFKTPQRKPYHQLASTPVIFKEQSLTLPLYQSPLKELHKFRSDSGKDIANSKHKSCCRVKAKINQANDVISPPPNSSLSESPVVLRCTYVTPQREKSVVCGSLFHTPKLIKGQTPKRISESLGAEVDPDMSWSSS...\n```\n\nLANGUAGE: text\nCODE:\n```\n1130972\t3185\tfadb68153e806b68e45e96b2dcde7140\tMPTGTKERPTLFEIFKMRCNVTDLGPISLNWFEELSSEAPPYNSEPTEESGYKSSNYEPHLFKTPQRKLPYHQLASTPIIFKDRGLSLALYQSALQELSEYRSALGRILPSNEHKSCCKMKAKTERVNAINSPLLNPSESPVIQYTHVTPQRKKSVVCGSLFHTPKLLKGQTQKHISESLAAEVDSDMSWSSS...\n```\n\n----------------------------------------\n\nTITLE: Testing species name search endpoint in Ensembl REST API with Perl\nDESCRIPTION: This test validates the '/info/species/:name' endpoint which provides detailed information about a particular species. It checks for correct taxonomy IDs, aliases, and classification information.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/external_db.txt#2025-04-22_snippet_7\n\nLANGUAGE: perl\nCODE:\n```\n  # Species endpoint\n  {\n    my $species = 'homo_sapiens';\n    my $info_species = RestHelper->get_json(\"info/species/$species\");\n    cmp_ok(scalar(@{$info_species}), '==', 1, 'One result from lookup');\n    cmp_ok($info_species->[0]->{name}, 'eq', $species, 'Name is the one asked for');\n    ok($info_species->[0]->{display_name}, 'Display name available ' . $info_species->[0]->{display_name});\n    ok($info_species->[0]->{aliases}, 'Aliases is available ' . join(q{,}, @{$info_species->[0]->{aliases}}));\n    ok($info_species->[0]->{groups}, 'Groups is available');\n    ok($info_species->[0]->{type}, 'Division available');\n    ok($info_species->[0]->{accession}, 'Accession available');\n    ok($info_species->[0]->{taxon_id}, 'Taxonomy ID available');\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Testing Gene Data Retrieval in Ensembl REST API with Perl\nDESCRIPTION: This script tests the retrieval of gene data using the Ensembl REST API. It validates the response structure and content for various gene-related endpoints.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/alt_allele.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse Test::Differences;\nuse Test::Deep;\nuse JSON;\nuse Bio::EnsEMBL::Test::MultiTestDB;\nuse Bio::EnsEMBL::Test::TestUtils;\n\nmy $dba = Bio::EnsEMBL::Test::MultiTestDB->new('homo_sapiens');\nmy $multi = Bio::EnsEMBL::Test::MultiTestDB->new('multi');\nmy $json = JSON->new->allow_nonref;\n\nmy $base = '/gene/homo_sapiens';\n\n# Test basic gene info\nmy $id = 'ENSG00000176515';\n{\n  my $gene = json_GET(\"$base/$id\", 'Get gene');\n  ok($gene->{id}, 'Gene has ID');\n  is($gene->{id}, $id, 'ID is correct');\n  ok($gene->{start}, 'Gene has start');\n  ok($gene->{end}, 'Gene has end');\n  ok($gene->{strand}, 'Gene has strand');\n  ok($gene->{version}, 'Gene has version');\n  ok($gene->{species}, 'Gene has species');\n  ok($gene->{chromosomes}, 'Gene has chromosome');\n}\n\n# Test gene with transcript info\nmy $id = 'ENSG00000176515';\n{\n  my $gene = json_GET(\"$base/$id?transcripts=1\", 'Get gene with transcripts');\n  ok($gene->{id}, 'Gene has ID');\n  is($gene->{id}, $id, 'ID is correct');\n  ok($gene->{transcripts}, 'Gene has transcripts');\n  cmp_ok(scalar @{$gene->{transcripts}}, '>', 0, 'Gene has at least one transcript');\n  my $transcript = $gene->{transcripts}->[0];\n  ok($transcript->{id}, 'Transcript has ID');\n  ok($transcript->{start}, 'Transcript has start');\n  ok($transcript->{end}, 'Transcript has end');\n  ok($transcript->{strand}, 'Transcript has strand');\n}\n\n# Test gene with protein info\nmy $id = 'ENSG00000176515';\n{\n  my $gene = json_GET(\"$base/$id?protein=1\", 'Get gene with protein info');\n  ok($gene->{id}, 'Gene has ID');\n  is($gene->{id}, $id, 'ID is correct');\n  ok($gene->{protein}, 'Gene has protein info');\n  my $protein = $gene->{protein};\n  ok($protein->{sequence}, 'Protein has sequence');\n  ok($protein->{length}, 'Protein has length');\n}\n\ndone_testing();\n```\n\n----------------------------------------\n\nTITLE: Listing Ensembl Core Feature Identifiers (TSV)\nDESCRIPTION: This snippet presents a tab-separated list of Ensembl identifiers associated with version 61 of the 'core' database. Each row contains an Ensembl ID, the version number (61), the source database ('core'), and the biological feature type (Exon, Gene, Translation, or Transcript). This data format is typical for representing genomic feature information.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/stable_ids/archive_id_lookup.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\nENSE00000450466\\t61\\tcore\\tExon\nENSE00001052325\\t61\\tcore\\tExon\nENSE00001093686\\t61\\tcore\\tExon\nENSE00001096889\\t61\\tcore\\tExon\nENSE00001099261\\t61\\tcore\\tExon\nENSE00001107803\\t61\\tcore\\tExon\nENSE00001322439\\t61\\tcore\\tExon\nENSE00001340979\\t61\\tcore\\tExon\nENSE00001367711\\t61\\tcore\\tExon\nENSE00001447908\\t61\\tcore\\tExon\nENSE00001551058\\t61\\tcore\\tExon\nENSE00001564130\\t61\\tcore\\tExon\nENSE00001588804\\t61\\tcore\\tExon\nENSE00001614198\\t61\\tcore\\tExon\nENSE00001697933\\t61\\tcore\\tExon\nENSE00001749952\\t61\\tcore\\tExon\nENSE00001779972\\t61\\tcore\\tExon\nENSE00001793451\\t61\\tcore\\tExon\nENSE00001810867\\t61\\tcore\\tExon\nENSE00001812053\\t61\\tcore\\tExon\nENSE00001857301\\t61\\tcore\\tExon\nENSE00001859644\\t61\\tcore\\tExon\nENSE00001877117\\t61\\tcore\\tExon\nENSE00001882055\\t61\\tcore\\tExon\nENSE00001882150\\t61\\tcore\\tExon\nENSE00001891686\\t61\\tcore\\tExon\nENSE00001897998\\t61\\tcore\\tExon\nENSE00001911460\\t61\\tcore\\tExon\nENSE00001922500\\t61\\tcore\\tExon\nENSE00001943938\\t61\\tcore\\tExon\nENSE00002022853\\t61\\tcore\\tExon\nENSE00002109323\\t61\\tcore\\tExon\nENSE00002126727\\t61\\tcore\\tExon\nENSE00002190607\\t61\\tcore\\tExon\nENSE00002197074\\t61\\tcore\\tExon\nENSE00002231870\\t61\\tcore\\tExon\nENSE00002289075\\t61\\tcore\\tExon\nENSE00002412669\\t61\\tcore\\tExon\nENSE00002436400\\t61\\tcore\\tExon\nENSE00002503088\\t61\\tcore\\tExon\nENSE00002600529\\t61\\tcore\\tExon\nENSE00002688670\\t61\\tcore\\tExon\nENSE00002689379\\t61\\tcore\\tExon\nENSE00002695400\\t61\\tcore\\tExon\nENSE00002711780\\t61\\tcore\\tExon\nENSE00002798859\\t61\\tcore\\tExon\nENSE00003047970\\t61\\tcore\\tExon\nENSE00003129534\\t61\\tcore\\tExon\nENSE00003139585\\t61\\tcore\\tExon\nENSE00003392046\\t61\\tcore\\tExon\nENSE00003467973\\t61\\tcore\\tExon\nENSE00003473249\\t61\\tcore\\tExon\nENSE00003491227\\t61\\tcore\\tExon\nENSE00003507630\\t61\\tcore\\tExon\nENSE00003514992\\t61\\tcore\\tExon\nENSE00003521887\\t61\\tcore\\tExon\nENSE00003523044\\t61\\tcore\\tExon\nENSE00003534098\\t61\\tcore\\tExon\nENSE00003537294\\t61\\tcore\\tExon\nENSE00003546075\\t61\\tcore\\tExon\nENSE00003550533\\t61\\tcore\\tExon\nENSE00003591022\\t61\\tcore\\tExon\nENSE00003665451\\t61\\tcore\\tExon\nENSE00003675657\\t61\\tcore\\tExon\nENSE00003682623\\t61\\tcore\\tExon\nENSE00003683888\\t61\\tcore\\tExon\nENSE00003684830\\t61\\tcore\\tExon\nENSE00003691719\\t61\\tcore\\tExon\nENSG00000054598\\t61\\tcore\\tGene\nENSG00000112699\\t61\\tcore\\tGene\nENSG00000137273\\t61\\tcore\\tGene\nENSG00000139618\\t61\\tcore\\tGene\nENSG00000164379\\t61\\tcore\\tGene\nENSG00000167393\\t61\\tcore\\tGene\nENSG00000176515\\t61\\tcore\\tGene\nENSG00000182378\\t61\\tcore\\tGene\nENSG00000218027\\t61\\tcore\\tGene\nENSG00000226179\\t61\\tcore\\tGene\nENSG00000228572\\t61\\tcore\\tGene\nENSG00000238438\\t61\\tcore\\tGene\nENSG00000238707\\t61\\tcore\\tGene\nENSG00000243439\\t61\\tcore\\tGene\nENSG00000261730\\t61\\tcore\\tGene\nENSG00000261960\\t61\\tcore\\tGene\nENSG00000262076\\t61\\tcore\\tGene\nENSG00000262424\\t61\\tcore\\tGene\nENSG00000262919\\t61\\tcore\\tGene\nENSG00000263122\\t61\\tcore\\tGene\nENSP00000259806\\t61\\tcore\\tTranslation\nENSP00000296839\\t61\\tcore\\tTranslation\nENSP00000316598\\t61\\tcore\\tTranslation\nENSP00000320396\\t61\\tcore\\tTranslation\nENSP00000370194\\t61\\tcore\\tTranslation\nENSP00000370256\\t61\\tcore\\tTranslation\nENSP00000370275\\t61\\tcore\\tTranslation\nENSP00000371038\\t61\\tcore\\tTranslation\nENSP00000371073\\t61\\tcore\\tTranslation\nENSP00000371079\\t61\\tcore\\tTranslation\nENSP00000375080\\t61\\tcore\\tTranslation\nENSP00000381976\\t61\\tcore\\tTranslation\nENSP00000383537\\t61\\tcore\\tTranslation\nENSP00000394848\\t61\\tcore\\tTranslation\nENSP00000399510\\t61\\tcore\\tTranslation\nENSP00000400904\\t61\\tcore\\tTranslation\nENSP00000405307\\t61\\tcore\\tTranslation\nENSP00000408558\\t61\\tcore\\tTranslation\nENSP00000412018\\t61\\tcore\\tTranslation\nENSP00000414181\\t61\\tcore\\tTranslation\nENSP00000436726\\t61\\tcore\\tTranslation\nENSP00000461135\\t61\\tcore\\tTranslation\nENST00000259806\\t61\\tcore\\tTranscript\nENST00000296839\\t61\\tcore\\tTranscript\nENST00000314040\\t61\\tcore\\tTranscript\nENST00000326153\\t61\\tcore\\tTranscript\nENST00000380805\\t61\\tcore\\tTranscript\nENST00000380815\\t61\\tcore\\tTranscript\nENST00000380874\\t61\\tcore\\tTranscript\nENST00000381625\\t61\\tcore\\tTranscript\nENST00000381657\\t61\\tcore\\tTranscript\nENST00000381663\\t61\\tcore\\tTranscript\nENST00000390665\\t61\\tcore\\tTranscript\nENST00000391707\\t61\\tcore\\tTranscript\nENST00000399012\\t61\\tcore\\tTranscript\nENST00000400701\\t61\\tcore\\tTranscript\nENST00000404600\\t61\\tcore\\tTranscript\nENST00000415337\\t61\\tcore\\tTranscript\nENST00000429181\\t61\\tcore\\tTranscript\nENST00000430923\\t61\\tcore\\tTranscript\nENST00000431238\\t61\\tcore\\tTranscript\nENST00000443019\\t61\\tcore\\tTranscript\nENST00000445062\\t61\\tcore\\tTranscript\nENST00000445792\\t61\\tcore\\tTranscript\nENST00000447472\\t61\\tcore\\tTranscript\nENST00000448477\\t61\\tcore\\tTranscript\nENST00000459140\\t61\\tcore\\tTranscript\nENST00000466002\\t61\\tcore\\tTranscript\nENST00000467288\\t61\\tcore\\tTranscript\nENST00000468169\\t61\\tcore\\tTranscript\nENST00000475859\\t61\\tcore\\tTranscript\nENST00000476972\\t61\\tcore\\tTranscript\nENST00000477110\\t61\\tcore\\tTranscript\nENST00000477636\\t61\\tcore\\tTranscript\nENST00000479438\\t61\\tcore\\tTranscript\nENST00000484364\\t61\\tcore\\tTranscript\nENST00000484611\\t61\\tcore\\tTranscript\nENST00000485332\\t61\\tcore\\tTranscript\nENST00000486793\\t61\\tcore\\tTranscript\nENST00000496630\\t61\\tcore\\tTranscript\nENST00000530075\\t61\\tcore\\tTranscript\nENST00000530459\\t61\\tcore\\tTranscript\nENST00000530927\\t61\\tcore\\tTranscript\nENST00000531690\\t61\\tcore\\tTranscript\nENST00000533279\\t61\\tcore\\tTranscript\nENST00000568244\\t61\\tcore\\tTranscript\nENST00000571758\\t61\\tcore\\tTranscript\nENST00000571856\\t61\\tcore\\tTranscript\nENST00000572027\\t61\\tcore\\tTranscript\nENST00000572688\\t61\\tcore\\tTranscript\nENST00000574069\\t61\\tcore\\tTranscript\nENST00000576892\\t61\\tcore\\tTranscript\n```\n\n----------------------------------------\n\nTITLE: Ortholog Relationship Database Records\nDESCRIPTION: Database records containing ortholog relationship data between genes. Each record includes a unique identifier, gene IDs, relationship type (many2many, one2many, one2one), and additional metadata fields marked with \\N for null values.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/homology.txt#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n100982930\t51077\tortholog_many2many\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n```\n\n----------------------------------------\n\nTITLE: Nucleotide Sequence Data in Text Format\nDESCRIPTION: This snippet contains multiple short nucleotide sequences, likely representing DNA or RNA. Each sequence is associated with a unique identifier and length.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_18\n\nLANGUAGE: Text\nCODE:\n```\nGAGTGATGTGATGCTTAACCATCTTTCGGGACTTACCCATTAATGGGGATACTTTTTTATTTTCACTGATCACTC\n```\n\nLANGUAGE: Text\nCODE:\n```\nGAGTGAAGTGATGCTTTACCATCTTTCGGGACTTACCCAACAATGGGGATACCTTTAATTTCCACTGATCACTC\n```\n\nLANGUAGE: Text\nCODE:\n```\nGAGTGATATGATGGCACACCATCTTTCGGGACTGACTCTTGCAATGGAGAGCCTATAACCTTCACTGATCACTT\n```\n\n----------------------------------------\n\nTITLE: Displaying Tabular Numeric Data in Plain Text\nDESCRIPTION: This snippet shows a table of numeric data with three columns. The first column appears to be sequential, the second column is constant, and the third column is incremental. This format is commonly used in bioinformatics for representing various types of data, such as genetic markers or sequence annotations.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/exon_transcript.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n140180\t32491\t1\n140181\t32491\t2\n140182\t32491\t3\n```\n\n----------------------------------------\n\nTITLE: Database Entity Relationship Mappings\nDESCRIPTION: A structured data format showing relationships between database entities. Each line contains an ID, followed by entity references and metadata flags in a tab-separated format. The columns appear to represent primary key, foreign key relationships and configuration flags.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/closure.txt#2025-04-22_snippet_6\n\nLANGUAGE: data\nCODE:\n```\n11607\t335\t613\t204\t4\t1\t0\n11608\t336\t204\t597\t4\t1\t0\n11609\t337\t1291\t1554\t4\t1\t0\n```\n\n----------------------------------------\n\nTITLE: Protein Sequence Entry 2\nDESCRIPTION: Second protein sequence entry with ID 1463168 and hash f542940e7cb218992cffee539a743821. Contains amino acid sequence with masked regions.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nMPIGCKERPTFFEIFRTRCNKADLGPISLNWFEELSSEAPPYNSEPSEESEYKISSYEPNLFKTPQRKPYHHLASTPIIFKEQGPTLPLYQSPLKEQGKFRLDLGKDVTNSKHKSFCTMKAKVDQANDVTSPPPNSCLSESPVLQYTHETPQREKSVICTLFHTPXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXRDEEASAATFPSDTTAILKGCFSNHDQSLKKNDRFIPSGPDNENQRKAKSHELEKILEESFGNGNSCKDHFEKSMPNVLEDEVHETAADISEEDSFPVCVSKYKRRNIRKVKTGKTRKNIFNKTKTNEYEEAEKQMTENKHSFVSEMGPNDSDPLDSNVTNQKLFGNGADKISQEVIPSSASEWSQLTLSGLNGTQMEKTSLLHISSCDQNNSEEDCIGTEKEFINFITSENYLPHISSLSKTVKILNEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXNFKEEEASKSGLEIQTICSHKEDSLCTSSVDNGSWPATTKNTSVALKNAGLISTLKKKTKRFIYAINDKTSYQGLKMQRDQESELTHSSAQLEADHFETPLTFTNIDSGLLHSSIQKHCLQNDSEDPPLSLTSSFGTILRKCNNKIVSQDLDYKEAKFSKEKLESFPTETDYMSCQGEXXXXXXXXXXXXXXXXXXXXXXXXXXXHSEDCSDTHFQSQELLHDNDNTTVLTTVFNDLSNPVVISRGKESYKMSEKIKPKNSEAGSELTKNISLENSQEACILKEDSRKPELFSPEQYVTAASPLTKIQFNENTNLTVFQKKQETTLISKITVNSNSEELFPDNENNFVFQITSEKSIPILENTKELHEADIICLREPVLKNSATAARTDLGDKQAAKVSITNNFVSSNTVHDLTEKSRNSVKQQPKMTLSQDSKSDVSLDINMKSNRNNDCMDKWARLSDSISSHSFGNGFRTASNKEIKLSEHNIKKSKMFFKDIEEHFPTSLACIETVNTLSLKSQKKPSRPHAVDSQSMNTISGCVQNSAFICDSENSHTAPILSLKEDFNSNHNLTPSQKAEITELSTILEESGSQFEFTQFRKPSDIIQNNPFEMPENQMSVLKTTSEEWKDVDLPLTVNVPSSSQVDSSKEFEDRVGDKQKFACLSTTNCNKSTSGNSTDKNEVEFRGFYSARGTKLSISSEALQKAMKLFSDIENVGGTPAEVDPRIFSLSKCNNSDVSEFKEEDYSNDKNLSEKNNKCQLVVQNNIEMTAGIFVEENTEDYKRNTENEDNECIGFVCNLRESDGGSSSKNDTVSIHKDEDVLPCTDQHNMYLKSSRQYMMEGNSQNKEDLSDLTCLEVVKAEETFHVNMSNKSQSTANKMRQNIKNFDTFGLSFQTASGKNISISKESLNKVVNFFDEKCTEEEMNNFSDSSNSELLSGINTNKIDISSHEELDKVKDKILKESDSIGIENQLLTLQQGQEYEIKKIKEPTMLGFHTASGKKVKIVKESLDKVKNLFDEKKQDNSEVTNFSHQGAKTLMDREVCKEGFELACETVDVTAQKHEEMQNSLEEKKLVSEESAVPPWLLSDHLYRQTENLSITNSISLKVKVHENIEETAKSPMTCYTNQPTCSAIENSALAFYTGHGRKISVSQASLFEAKKWLREGELDDQTEKKNSADYVGNLSCGNHSNRITTENDKNFSEEQDPTYLSNSMSNSYSCHSDFCHSSEVFNKSEYLSKNKMGNSGIEPVVQNVKDRKNISFSEVMSTVREANTYPQAVDESTCVQKLVTNSSPCRNKNTATEMVISDSNNFEIEPPAFGTASDKTKVRERLTDNGGKVIKQNTESKSDTCQTKIVTGSHKALEDSEDITFPDSPESEEHRMRSHDVSPDIQSEPILCHDPGMSGLEKVSEIPPFHINLKTSDICKLNVEKHPRSVSSMNACGVFSTASGKSVHISDAAFQKAKQVFSKIEDDAKQLLSKVSFKSNEEQSDKFSGENTKIHTPQNLLSSAFSGFSTASGKQVPVSESSLCKVKGMFEEFDLIRTERSLQHSPTSRQNESKILPLSCIDKRTPEHSVSSKAEKDYSKEFKLSNNRNVESDSSENNHSIKVFPSLIQCKQDKQQLVLGTKVLLVENFDLLGKEQILPKNIKMEIGKAETFPNLPVKTNTEICSTNSKDLENYFETEAVDIARAFMEDGELTDSELLSHAKHSLFTCQKNEEAVLLNSGIGKRRGGALATVGEPPTKRNLLNEFDRIIENQEKSLKPSKSTPDGTVKDRRLFMHHTSLEPVTCGPFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXKQKNIDERSSGDSENNGSEIHQLNKSNSNQTAAVMFTKGDKEPLDLITNLQNARDIQDKQIKKKQKQRIFPQPGSLYLAKTSTMPRISLKVAVEGRVPSACSHKQYMYGVSKHCVKINSKSAESFQFHTQDYFGKEGLWAGKGIQLADGGWLIPSNDGKAGKEEFYRALCDTPGVDPQLISRVWVYNHYRWIIWKLAAMEFAFPKEFANRCLSPERVLFQLKYRYDVEIDRSRRSAIKKIMEKDDTAAKTLVLCVSEIASLSTDTSETPSSKTSGVDTTKAAVVELTDGWYAIKAQTDPPLSALIKNGRLTVGQKVIIHGAELVGSPDACTPLEAPESLMLKISTNSTRPARWYAKLGFSPDPRPFPLPLSSLFSDGGNVGCVDIIVQRAYPIQWMEKTPSGLYIFRNEREEEKEATKHAEAQQKKLEALFTKLQAEFEEHEDNVTERYIPPRALTRQQVRALQDGAELYEAVKNAADPGYLEGYFSEEQLRALNNHRQMLNDKKQAQIQLEFRKAMASAEQGEQILPRDVTTVWKLRIISYKKKEKDSVILSIWRPSSDLYSLLTEGKRYRIYHLAASKSKSKSERANIQLTATKKTQYQQLPASDEILFQVYQPREPLHFNKLLDPDFQPPCSEVDLIGFVVSVVKKIGLAPLVYLSDECHNLLAIKFWIDLNEDIIKPHMLIAASNLQWRPEYKSGIPTLFAGDFSMFSASPKEGHFQETFHKMKNTIEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXMSSPSEMKYQSPLSLSKPKGKSISTPVSAQMTSKSCCKGEKEIDDPKSCKKRRALDFLSRLPVPPPVSPICTFVSPAAQKAFQPPRSCGTRYETPIKKKELNSPQMTLLKKFNDISLLEDDSIADEELALINTQALLSGSSGEDQRMSINESTRTAPTSAEDHLTLKRHYTTRGIKERENSQARTEEHETNMQDTSTKKYLQ\n```\n\n----------------------------------------\n\nTITLE: Parsing Orthology Relationship Data from TSV\nDESCRIPTION: This snippet represents a sample of orthology relationship data in TSV format. Each line contains information about a gene pair, including IDs, relationship type, and various scores or flags. The '\\N' entries likely represent null or missing values.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/homology.txt#2025-04-22_snippet_6\n\nLANGUAGE: TSV\nCODE:\n```\n100978672\t24041\tortholog_one2many\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n100978680\t50826\tortholog_one2many\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n100978691\t50902\tortholog_one2many\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n```\n\n----------------------------------------\n\nTITLE: Protein Sequence 2\nDESCRIPTION: Alternative protein sequence containing standard amino acid codes and masked regions (marked with X). Shows similarity to first sequence but with distinct variations.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nLGPISLNWFEELSSEAPLYNSETAEDSEYKISSCEPNLFKTPQRKPYQQLASTPVIFKEQDLTLPLYQSPLKGLDKDRLNLGKDVTNSKHESCCTMKTKTDQANDITSPPLNSGLGESPGVPRCTHVTPQREKSAVCGSLFHTPKLMKGQTPKHISESLGAEVDPDMSWSSSLATPPTLSATVLIVRDEEASAAVFPNDTTTILKSYFSNHDESLKKNDVFIPSGPDNENKNQREARSHGWGNSFDKVSSCKDHFRKSVPNVLEDDVHENVADVSEEDSFSLCVSKYKTRNVQKLKTSKTRKNIFSETKTNECEEAKKQVRENKHSFVSEMGPNDSDPLDSSITDQKPFGNGSEAVSEAVLPSSATGWSPLTLSGLNGTQMDKTPLLHISSCDQNNSEKDLVGTGKECTNFVTLENSLPCISSVPKTETLLSEETVVNKRADRQCLESPTRAVKHALAETSLMASPLRGVEKSVLGIRELPEETSSTVFSNNMTDPDFKGELEASEGRSEIHTVCSQKDSSLCSSYVDGSWPATIIHTPVALKNTGLISTLRKKTRKFIYAVNDETSHQGLKMQKCQESGLNNHSAQFEADTFEVPSTVTNASSGLLHSSVKKNCLQNDSEELTLSSTSSLGTIPRKCSNSESNSCNNKIISQDLEYKEAKIYKEKLQSFITTGTDCLSRVQEKHCEDGPKSLRVSDIKETFLPTVCHPAVPQSEVQCSGIHFQSQESFLRDHDDTSILTPSSRDPPSNPAVISKEKESYEVSEKLQYKNCEAGFDLTKNILVEKNQEICVLNENSKKAELLSPEKTTTIASPSVTVQFNQNTNLTLIQKEQEETTSVSKITANSNSKKLFQDSENDFVFEITTEKNMPVLENFKELHEADLGCVRGPVLKSALVVDHKQASKGSVIKGFDSSNKIHDLTEKDRNNVTQQLKMTLSEDSKSDISLDIDEKSSRNDDCMDKWARLSDPISNHNFGNGFRTASNKEIRLSEHNIKKSKVLFKDIEENFCTDLAYVEVVNISSLENQKKLSKPHALNSQSTDIGSGCVQSRAFVSNSEYSHTTPPTLSLKRDFTSDHNLTPSQKAEITELSAILEESGSQFEFTQFRKPSHMIQNNPFEMPESLMPVLNAACEEWKDVDLHLTINAPSIGQAESSREFESKQKFACSLKTNCNKSTSGYLTDKNEAMFRGFYSAHGTKLNVSSEALQKAKKLFSDIENISRETDAEIDPRNLFSNKCDHSVVWMFDLENYNDKSPNEKNNKCQLIQQNNTETTTGVFVEENTVGHKKNTENEDNRCADASRNICNLGESDSSDSSKDGTVYVHEDENGWPRVDQHKVHVKPPSQYTREGNTQVKDSVSDLTCLEAVKAEETRHVNMSAKEQLTANTTGQNIKYLDVLDISFQTASGKKISVSKDSLNKVVNFFDQKCAEELNNFSDALNSELLSGINVNNMDISSHEETDMVKEKTLKESDPVCVNNELPALLPGPKCEIEKIKEPTMLDFHTANGKRVKIAKESLDKVENLFDEKRYNSEATHFSHQGTKMLKDIEECKEGLKVAHETVEITAAPKCKEMQNSLEEKKFVSNKTTMLPGLLSDNLYRQNENLKTSTSTSLKIKVHETIEKETAKSSTTHYVNPSVCSATENSVLAFYTGHGRKISVRQTSLLEARKWLREGEWDDHPEKTNAAYCVENLSCGNHSNSVITKNDKNASDKQDSAYLSNSSMSNSSSYHSDFCHSDEIYNKSESLSKHKMGNSGIEPVVTNVADGKTTGFSEVKSTVIEAHTYPQTVNEDICVQKFVTNSSPRKNKDAATGEAGSNSNDFQIGSPAFSTAGGQVVLASRGMKARERFTDACTKVIKQDSECESGPGQTQTEAGDDSEDIIFPNSPDTVPSYKVFADIQSKRSLQHSQRMLGSEEVPEMSPRWLDSKTSGVCKLNTGPPAKSVSSMQACGVFSTAGGKLVQVSGAALQKARQIFSRLEDSAEQLGARIAFEHDEDHSENATRKDDTVIRTPQMSSLTFSGFSTASGKQVSVSESAFIKVKGMLADFDFNRAECALQRPPSPRQDGSQMPPRSWIDKGAREHSTDSEMEKAYSEEFKLPNNSPTETGPSERIHSTGVSTNPSQLQEDEQRLILRGKASLVEVGHLLGKEQVLPKNMKVEIGKTETCPILPMKNIEISSYSKDPENYFETEAVEIARAFMEDGELTDSELRSRPARALACQNSGETSSLNSRTGKRRGEALFSVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXTINDRRLFMHHVSLEPITCAPFCTSKERRETHTPHFTAPGQEFLSKSHFYEHLTVEKSSSNVSVSRQAFCKVPATRNEKRHSITTGKQMKVFVPPFKTKSHVHEDEQCVSSCTTLEECKQKQKHIGKHNSGVSENNIDDSEICQPNKDNASQAATIMSTKCEEPPLDLIPSLQNARDMQDMRIKKKHGQRVCPQPGSLSLARASGMPRVPLRAAVGGCPPSACPPEQLYMYGVSKHCVKINSKNAESFQFHVQDYFGKESLRAGKGIQLADGGWLVPSDDGKAGKEEFYRALCDTPGVDPKLISRVWVYNHYRWIIWKLAAMEFAFPKEFASRCLNPETVLLQLKHRYDIEIDRSRRSAIKKIMERDDTAAKTLVLCVSEVILSSTHLSETHSGKTSGAEASKAAVVELTDGWYAIRAQLDPPLSALLQTGRLGVGQKVVTHGAELLGPPEACSPLEASETLMLKISANSTRPACWDAKLGFCTDPRPFPVPLSSLFSDGGNTACVDVVIQRAYPVQWVEKTSSGLYIFRNEREEEKEAAKYAETQQRKLEALFTKIQAEFEEQEENISRQCLPSRALTRQQVRALQDGAELYEAVRAAPDPAYLESYFSEEQLRALNNHRQMLNDKKQAQIQLEFRKAVESAEQGDQVSSRDVTTMWKLRIISYEKKGKDSILSIWRPSSDLYSLLREGQRYRIYHLATSKPKNKSGRANLQLTATKRTQYQQLPASDGILVQVYQPRRPLPFPQLSNPDFQPPCAEVDLIGFVISVVRKIGLAPLVYLSDECHNLLAVKFWIDLNEEIIKPHVLIAASNLQWRPDSKSGIPTLFAGDFSMFSASPKEGHFQETFHKMRNAIENVDIFCNEAENKLMQILHANNHQWSTPTKRCTSESHAAQTALGLGSRLLMSSPTNEMNSQSPSALCKAKGKSVPTPPSAQKASKSCCKGEKEVDDPKTCKKRRALDLLGRLPLPPPVSPICTFVSPAAQKAFQPPRSCGPKYETPMKKKELNSPQTTPLKKFNDNSLLESDSIADEELALINTQALLSGSAGENRLAPPGDPTGAANCSKGDLGPPGSPPPCVGRERPHSRASAQELGPHMQDASMITNLPR\n```\n\n----------------------------------------\n\nTITLE: Defining Sequence Ontology Terms - Tabular Data - Tabular Data\nDESCRIPTION: This snippet exemplifies the structure of a sequence ontology annotation row, with fields separated by tabs and each line representing a feature, its SO accession, name, description, and associated references. The table relies on a strictly ordered column sequence and sometimes includes placeholders (\\N) for missing data. Intended for parsing and importing into databases or ontology-driven applications, each field serves a fixed purpose (ID, accession, term name, definition/comment, reference, integer flags), and no explicit header is included in this excerpt. Inputs are expected to be SO feature metadata; output is typically a parsed set of term records interpreted by downstream bioinformatics tools.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/term.txt#2025-04-22_snippet_1\n\nLANGUAGE: Tabular Data\nCODE:\n```\n613\t1\tSOFA\tSO:0000673\ttranscript\t\"An RNA synthesized on a DNA or RNA template by an RNA polymerase.\" [SO:ma]\t0\t0\n614\t1\t\\N\tSO:0000676\tcanonical_three_prime_splice_site\t\"The canonical 3' splice site has the sequence \\\"AG\\\".\" [SO:ke]\t0\t0\n615\t1\t\\N\tSO:0000677\tcanonical_five_prime_splice_site\t\"The canonical 5' splice site has the sequence \\\"GT\\\".\" [SO:ke]\t0\t0\n616\t1\t\\N\tSO:0000678\tnon_canonical_three_prime_splice_site\t\"A 3' splice site that does not have the sequence \\\"AG\\\".\" [SO:ke]\t0\t0\n```\n\n----------------------------------------\n\nTITLE: Hexadecimal Identifier Mapping\nDESCRIPTION: Large mapping of hexadecimal identifiers with specific patterns following format XXXXXXXX where X is a hexadecimal digit. These appear to be system-specific identifiers used for internal mapping or configuration.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/variation/compressed_genotype_var.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n63646322 48292598 818A2A01818A2C01818A2D01818A2905818A2E05818A2B0381B2090181B20C0181B20F0181B2190181B21C0181B2080581B20E0581B2100581B2110581B2120581B2150581B2170581B2180581B21A0581B21B0581B21F0581B2050381B2060381B2070381B20A0381B20D0381B2130381B2140381B2160381B21D0381B21E03...\n```\n\n----------------------------------------\n\nTITLE: Representing Taxon Tree (Newick Format with IDs)\nDESCRIPTION: This snippet represents a phylogenetic tree using taxon identifiers (likely NCBI taxonomy IDs or internal Ensembl IDs) in a Newick-like format. It shows the relationships between taxa represented by IDs 99, 100, 98, 102, and 96.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/method_link_species_set_tag.txt#2025-04-22_snippet_4\n\nLANGUAGE: newick\nCODE:\n```\n((99*,100*)98,102*)96;\n```\n\n----------------------------------------\n\nTITLE: Ortholog Relationship Records TSV\nDESCRIPTION: Tab-separated data containing ortholog relationships between genes. Each row contains an ID, reference numbers, relationship type (one2one, one2many, many2many), and additional metadata fields marked with \\N for null values.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/homology.txt#2025-04-22_snippet_7\n\nLANGUAGE: tsv\nCODE:\n```\n100980576\t29379\tortholog_many2many\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n100980584\t29230\tortholog_many2many\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n```\n\n----------------------------------------\n\nTITLE: Database Query Output - Hexadecimal Reference Codes\nDESCRIPTION: Query results showing ID-reference code mappings, likely from a bioinformatics or genomics database. Output includes NULL values and hexadecimal codes.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/variation/compressed_genotype_var.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n9051025\tNULL\tEC1E0BEC1F0BEC200BEC210BEC220AEC230BEC240BEC2507EC260BEC2707EC280BEC290BEC2A0BEC2B0BEC2C0BEC2D0AEC2E0BEC2F0BEC3007EC310BEC320BEC330AEC340BEC350BEC3607EC3707EC380AEC390BEC3A0BEC3B0BEC3C07EC3D0BEC3E07EC3F0BEC400BEC410AEC4207EC430BEC440BEC450BEC460BEC470BEC480BEC490BEC4A0BEC4B0AEC4C0BEC4D0BEC4E0BEC4F0BEC500BEC510BEC520AEC530BEC540BEC550A...\n```\n\n----------------------------------------\n\nTITLE: Tabulated Genomic Coordinate Data in TSV format\nDESCRIPTION: A structured dataset containing genomic coordinate mapping information. Each row contains numerical identifiers for features, their start and end positions, strand information (indicated by -1, 0, 1), and reference identifiers. This data likely serves as a backend resource for the Ensembl REST API.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/repeat_feature.txt#2025-04-22_snippet_2\n\nLANGUAGE: tsv\nCODE:\n```\n31018687\t27516\t306752\t306824\t0\t1\t73\t595295\t6\t67\n31018688\t27516\t306757\t306897\t0\t306757\t306897\t594541\t7\t0\n31018689\t27516\t306771\t306812\t0\t1\t42\t595296\t6\t63\n31018690\t27516\t306774\t306831\t0\t1\t58\t595297\t6\t72\n31018691\t27516\t306780\t306865\t0\t1\t86\t595298\t6\t73\n31018692\t27516\t306802\t306887\t0\t1\t86\t595299\t6\t78\n31018693\t27516\t306814\t306843\t0\t1\t30\t595300\t6\t53\n31018694\t27516\t306875\t306898\t0\t1\t24\t595301\t6\t41\n31018695\t27516\t307529\t307722\t0\t1\t194\t595302\t6\t251\n31018696\t27516\t307536\t307793\t0\t1\t258\t595303\t6\t270\n31018697\t27516\t307608\t307933\t0\t1\t326\t595304\t6\t515\n31018698\t27516\t307718\t307831\t0\t1\t114\t595305\t6\t179\n31018699\t27516\t307756\t307966\t0\t1\t211\t595306\t6\t345\n31018700\t27516\t307795\t307868\t0\t1\t74\t595307\t6\t106\n31018701\t27516\t307826\t307913\t0\t1\t88\t595308\t6\t127\n31018702\t27516\t307866\t307933\t0\t1\t68\t595309\t6\t108\n31018703\t27516\t308698\t309028\t1\t2844\t3261\t594652\t2\t686\n31018704\t27516\t309029\t309324\t1\t1\t296\t594585\t2\t2295\n31018705\t27516\t309325\t309773\t1\t3262\t3783\t594652\t2\t686\n31018706\t27516\t309770\t309836\t1\t3935\t4008\t594652\t2\t810\n31018707\t27516\t309837\t310139\t1\t1\t362\t594560\t2\t1155\n31018708\t27516\t310140\t310865\t1\t4006\t4766\t594652\t2\t810\n31018709\t27516\t310656\t310704\t0\t1\t49\t595310\t6\t77\n31018710\t27516\t312236\t312504\t0\t1\t269\t595311\t6\t538\n31018711\t27516\t312273\t312351\t-1\t229\t319\t595312\t2\t324\n31018712\t27516\t312353\t312431\t-1\t229\t319\t595312\t2\t324\n31018713\t27516\t312433\t312713\t-1\t17\t303\t594698\t2\t1553\n31018714\t27516\t313248\t313301\t0\t1\t54\t595313\t6\t108\n31018715\t27516\t313665\t313824\t1\t11\t198\t594678\t2\t502\n31018716\t27516\t313827\t314128\t1\t1\t302\t594585\t2\t2205\n31018717\t27516\t314110\t314119\t0\t314110\t314119\t594541\t7\t0\n31018718\t27516\t314141\t314401\t1\t3463\t3730\t594652\t2\t784\n31018719\t27516\t314480\t315024\t0\t1\t545\t595314\t6\t663\n31018720\t27516\t314481\t315026\t0\t1\t546\t595315\t6\t698\n31018721\t27516\t315130\t315300\t1\t3801\t3982\t594652\t2\t582\n31018722\t27516\t315301\t315600\t1\t1\t297\t594552\t2\t1655\n31018723\t27516\t315424\t315436\t0\t315424\t315436\t594541\t7\t0\n31018724\t27516\t315586\t315593\t0\t315586\t315593\t594541\t7\t0\n31018725\t27516\t315601\t316235\t1\t3983\t4656\t594652\t2\t755\n31018726\t27516\t316234\t316308\t1\t5540\t5614\t594652\t2\t280\n31018727\t27516\t316422\t316555\t1\t5866\t5995\t594777\t2\t300\n31018728\t27516\t316449\t316456\t0\t316449\t316456\t594541\t7\t0\n31018729\t27516\t316751\t316942\t1\t5353\t5559\t594777\t2\t329\n31018730\t27516\t316942\t316962\t0\t1\t21\t595316\t6\t42\n31018731\t27516\t316943\t317248\t-1\t3\t308\t594585\t2\t2129\n31018732\t27516\t316943\t316963\t0\t316943\t316963\t594541\t7\t0\n31018733\t27516\t317249\t317494\t1\t5560\t5822\t594777\t2\t369\n31018734\t27516\t317515\t317693\t0\t1\t179\t595317\t6\t307\n31018735\t27516\t317515\t317693\t0\t1\t179\t595318\t6\t253\n31018736\t27516\t317698\t317785\t1\t6200\t6291\t594694\t2\t292\n31018737\t27516\t317780\t318096\t1\t5851\t6168\t594777\t2\t618\n31018738\t27516\t318097\t318472\t1\t3078\t3485\t594582\t2\t368\n31018739\t27516\t318099\t318131\t0\t318099\t318131\t594541\t7\t0\n31018740\t27516\t319526\t319566\t0\t319526\t319566\t594541\t7\t0\n31018741\t27516\t319598\t319672\t0\t1\t75\t595319\t6\t115\n31018742\t27516\t319654\t319760\t0\t1\t107\t595320\t6\t112\n31018743\t27516\t319675\t319733\t0\t319675\t319733\t594541\t7\t0\n31018744\t27516\t319874\t320300\t1\t503\t970\t595321\t2\t1265\n31018745\t27516\t320699\t320985\t1\t3579\t3889\t594582\t2\t799\n31018746\t27516\t320987\t321294\t1\t1\t308\t594585\t2\t2244\n31018747\t27516\t323098\t323380\t0\t1\t283\t595322\t6\t234\n31018748\t27516\t323103\t323377\t0\t1\t275\t595323\t6\t257\n31018749\t27516\t323287\t323372\t0\t1\t86\t595324\t6\t116\n31018750\t27516\t323516\t323753\t0\t1\t238\t595325\t6\t344\n31018751\t27516\t323944\t324454\t0\t1\t511\t595326\t6\t749\n31018752\t27516\t325132\t325266\t1\t14\t143\t594605\t2\t718\n31018753\t27516\t325242\t325303\t0\t325242\t325303\t594541\t7\t0\n31018754\t27516\t325242\t325303\t0\t1\t62\t595327\t6\t68\n31018755\t27516\t325242\t325289\t0\t1\t48\t594578\t6\t61\n31018756\t27516\t325243\t325289\t0\t1\t47\t595328\t6\t73\n31018757\t27516\t325299\t325465\t1\t129\t295\t594549\t2\t1268\n31018758\t27516\t325303\t327771\t0\t1\t2469\t595329\t6\t4567\n31018759\t27516\t325473\t325795\t1\t3\t295\t594585\t2\t1417\n31018760\t27516\t325803\t326125\t1\t3\t295\t594552\t2\t1438\n31018761\t27516\t326133\t326455\t1\t3\t295\t594585\t2\t1433\n31018762\t27516\t326463\t326785\t1\t3\t295\t594585\t2\t1459\n31018763\t27516\t326793\t327115\t1\t3\t295\t594552\t2\t1423\n31018764\t27516\t327123\t327445\t1\t3\t295\t594552\t2\t1428\n31018765\t27516\t327453\t327774\t1\t3\t294\t594585\t2\t1437\n31018766\t27516\t327763\t327774\t0\t327763\t327774\t594541\t7\t0\n31018767\t27516\t327791\t328022\t1\t1572\t1810\t594703\t2\t236\n31018768\t27516\t327968\t328046\t0\t1\t79\t595330\t6\t137\n31018769\t27516\t328040\t328050\t0\t328040\t328050\t594541\t7\t0\n31018770\t27516\t328165\t328297\t-1\t1\t133\t594605\t2\t881\n31018771\t27516\t328165\t328174\t0\t328165\t328174\t594541\t7\t0\n31018772\t27516\t328452\t328787\t1\t2155\t2491\t594703\t2\t355\n31018773\t27516\t328582\t328590\t0\t328582\t328590\t594541\t7\t0\n31018774\t27516\t328829\t329660\t0\t1\t832\t595331\t6\t1340\n31018775\t27516\t329294\t329356\t0\t329294\t329356\t594541\t7\t0\n31018776\t27516\t329711\t329855\t1\t2620\t2767\t594703\t2\t316\n31018777\t27516\t330579\t330613\t0\t1\t35\t595332\t6\t63\n31018778\t27516\t333413\t333685\t1\t1\t307\t594585\t2\t1636\n31018779\t27516\t333661\t333686\t0\t333661\t333686\t594541\t7\t0\n31018780\t27516\t334193\t334231\t0\t1\t39\t595333\t6\t50\n31018781\t27516\t334396\t334457\t0\t1\t62\t595334\t6\t80\n31018782\t27516\t334414\t334473\t0\t334414\t334473\t594541\t7\t0\n31018783\t27516\t334641\t334700\t0\t334641\t334700\t594541\t7\t0\n31018784\t27516\t334793\t334911\t0\t1\t119\t595335\t6\t224\n31018785\t27516\t334960\t334967\t0\t334960\t334967\t594541\t7\t0\n31018786\t27516\t335451\t335748\t-1\t5880\t6195\t594902\t2\t870\n31018787\t27516\t335836\t335872\t0\t1\t37\t595336\t6\t51\n31018788\t27516\t336032\t336370\t0\t1\t339\t595337\t6\t559\n31018789\t27516\t336529\t336594\t0\t1\t66\t595338\t6\t104\n31018790\t27516\t336647\t336951\t1\t1\t308\t594626\t2\t2232\n31018791\t27516\t336927\t336949\t0\t336927\t336949\t594541\t7\t0\n31018792\t27516\t337186\t338824\t0\t1\t1639\t595339\t6\t2660\n31018793\t27516\t337186\t338824\t0\t1\t1639\t595340\t6\t2630\n31018794\t27516\t337186\t338824\t0\t1\t1639\t595341\t6\t2662\n31018795\t27516\t338990\t339114\t-1\t268\t398\t594778\t2\t246\n31018796\t27516\t339745\t340202\t0\t1\t458\t595342\t6\t224\n31018797\t27516\t339758\t340233\t0\t1\t476\t595343\t6\t210\n31018798\t27516\t339758\t339850\t0\t1\t93\t595344\t6\t154\n31018799\t27516\t339764\t340227\t0\t339764\t340227\t594541\t7\t0\n31018800\t27516\t339769\t340162\t0\t1\t394\t595345\t6\t231\n31018801\t27516\t340114\t340233\t0\t1\t120\t595346\t6\t145\n31018802\t27516\t340352\t341228\t1\t4399\t5433\t594582\t2\t871\n31018803\t27516\t340928\t340968\t0\t340928\t340968\t594541\t7\t0\n31018804\t27516\t341239\t341546\t1\t1\t308\t594626\t2\t2289\n31018805\t27516\t341522\t341546\t0\t341522\t341546\t594541\t7\t0\n31018806\t27516\t341522\t341546\t0\t1\t25\t594578\t6\t50\n31018807\t27516\t341665\t341955\t-1\t1\t306\t594552\t2\t1700\n31018808\t27516\t341674\t341687\t0\t341674\t341687\t594541\t7\t0\n31018809\t27516\t342327\t342632\t-1\t1\t306\t594583\t2\t2470\n31018810\t27516\t342329\t342351\t0\t342329\t342351\t594541\t7\t0\n31018811\t27516\t342329\t342351\t0\t1\t23\t594674\t6\t46\n31018812\t27516\t342920\t343232\t-1\t1\t311\t594626\t2\t2289\n31018813\t27516\t342922\t342947\t0\t342922\t342947\t594541\t7\t0\n31018814\t27516\t342922\t342947\t0\t1\t26\t594674\t6\t45\n31018815\t27516\t343472\t343547\t0\t1\t76\t595347\t6\t138\n31018816\t27516\t344294\t344602\t1\t4\t311\t594583\t2\t2636\n31018817\t27516\t344573\t344619\t0\t344573\t344619\t594541\t7\t0\n31018818\t27516\t344573\t344619\t0\t1\t47\t594578\t6\t73\n31018819\t27516\t344603\t344869\t1\t68\t354\t595348\t2\t1043\n31018820\t27516\t344997\t345018\t0\t344997\t345018\t594541\t7\t0\n31018821\t27516\t344997\t345018\t0\t1\t22\t594980\t6\t44\n31018822\t27516\t345035\t345328\t-1\t1\t297\t594585\t2\t1840\n31018823\t27516\t345035\t345049\t0\t345035\t345049\t594541\t7\t0\n31018824\t27516\t345332\t345437\t1\t372\t482\t595348\t2\t1756\n31018825\t27516\t345438\t345741\t1\t1\t306\t594585\t2\t2256\n31018826\t27516\t345718\t345741\t0\t345718\t345741\t594541\t7\t0\n31018827\t27516\t345718\t345741\t0\t1\t24\t594578\t6\t48\n31018828\t27516\t345742\t346051\t1\t483\t806\t595348\t2\t1756\n31018829\t27516\t346040\t346081\t0\t1\t42\t595349\t6\t56\n31018830\t27516\t346044\t346081\t0\t346044\t346081\t594541\t7\t0\n31018831\t27516\t346051\t346081\t0\t1\t31\t594674\t6\t55\n31018832\t27516\t346052\t346186\t-1\t154\t312\t594549\t2\t828\n31018833\t27516\t346272\t346531\t1\t36\t304\t594552\t2\t1146\n31018834\t27516\t346356\t346387\t0\t346356\t346387\t594541\t7\t0\n31018835\t27516\t346358\t346384\t0\t1\t27\t595048\t6\t47\n31018836\t27516\t346534\t346849\t1\t1\t311\t594585\t2\t2062\n31018837\t27516\t346817\t346856\t0\t346817\t346856\t594541\t7\t0\n31018838\t27516\t346958\t346976\t0\t346958\t346976\t594541\t7\t0\n31018839\t27516\t347194\t347253\t0\t347194\t347253\t594541\t7\t0\n31018840\t27516\t347438\t347498\t0\t347438\t347498\t594541\t7\t0\n31018841\t27516\t348648\t348951\t1\t1\t297\t594588\t2\t2187\n31018842\t27516\t348935\t348948\t0\t348935\t348948\t594541\t7\t0\n31018843\t27516\t348953\t349260\t-1\t1\t308\t594585\t2\t2382\n31018844\t27516\t348964\t348978\t0\t348964\t348978\t594541\t7\t0\n31018845\t27516\t349269\t349550\t-1\t4\t297\t594552\t2\t1299\n31018846\t27516\t350256\t350524\t1\t1\t298\t594585\t2\t1248\n31018847\t27516\t350271\t350663\t0\t1\t393\t595350\t6\t570\n31018848\t27516\t350281\t350739\t0\t1\t459\t595351\t6\t464\n31018849\t27516\t350527\t350812\t1\t1\t287\t594698\t2\t1675\n31018850\t27516\t350832\t351167\t0\t1\t336\t595352\t6\t458\n31018851\t27516\t350843\t350965\t1\t12\t135\t594841\t2\t969\n31018852\t27516\t350966\t351276\t1\t1\t312\t594585\t2\t2177\n31018853\t27516\t351248\t351276\t0\t351248\t351276\t594541\t7\t0\n31018854\t27516\t351249\t351276\t0\t1\t28\t595168\t6\t49\n31018855\t27516\t351743\t351784\t0\t351743\t351784\t594541\t7\t0\n31018856\t27516\t351743\t351781\t0\t1\t39\t595353\t6\t64\n31018857\t27516\t351744\t351785\t0\t1\t42\t594543\t6\t54\n31018858\t27516\t351744\t351785\t0\t1\t42\t595354\t6\t63\n31018859\t27516\t351800\t352078\t1\t24\t302\t594595\t2\t1960\n31018860\t27516\t352190\t352482\t1\t1\t291\t594588\t2\t2210\n31018861\t27516\t353546\t353603\t0\t1\t58\t595355\t6\t116\n31018862\t27516\t353606\t353887\t-1\t1\t312\t594626\t2\t1767\n31018863\t27516\t353622\t353634\t0\t353622\t353634\t594541\t7\t0\n31018864\t27516\t354051\t354139\t0\t354051\t354139\t594541\t7\t0\n31018865\t27516\t354060\t354129\t0\t1\t70\t595356\t6\t69\n31018866\t27516\t354061\t354140\t0\t1\t80\t595357\t6\t146\n31018867\t27516\t354111\t354419\t-1\t1\t312\t594552\t2\t1792\n31018868\t27516\t354286\t354300\t0\t354286\t354300\t594541\t7\t0\n31018869\t27516\t354502\t354809\t-1\t1\t310\t594583\t2\t2326\n31018870\t27516\t354508\t354530\t0\t354508\t354530\t594541\t7\t0\n31018871\t27516\t354812\t355096\t-1\t1\t292\t594698\t2\t1708\n31018872\t27516\t354812\t354821\t0\t354812\t354821\t594541\t7\t0\n31018873\t27516\t354970\t354977\t0\t354970\t354977\t594541\t7\t0\n31018874\t27516\t355108\t355224\t-1\t6057\t6173\t595160\t2\t1941\n31018875\t27516\t355225\t355537\t1\t2\t312\t594585\t2\t2175\n31018876\t27516\t355505\t355537\t0\t355505\t355537\t594541\t7\t0\n31018877\t27516\t355538\t355897\t-1\t5698\t6056\t595160\t2\t1941\n31018878\t27516\t355907\t356209\t-1\t7\t312\t594585\t2\t2022\n```\n\n----------------------------------------\n\nTITLE: Entity Relationship Mapping Data\nDESCRIPTION: Tabular data showing relationships between entities with 7 columns. Each row contains IDs and relationship indicators, following a consistent pattern of ID mappings with flags.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/closure.txt#2025-04-22_snippet_5\n\nLANGUAGE: data\nCODE:\n```\n10701\t1602\t1591\t1571\t3\t1\t0\n10702\t1603\t972\t1571\t3\t1\t0\n10703\t1603\t1591\t1571\t3\t1\t0\n...\n```\n\n----------------------------------------\n\nTITLE: Inserting Species Classification Data in SQL\nDESCRIPTION: This SQL snippet inserts species classification data for the chicken (Gallus gallus) into the meta table. It includes various taxonomic ranks and identifiers used in the Ensembl database.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/meta.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO meta (meta_id, species_id, meta_key, meta_value) VALUES\n(319, 1, 'species.taxonomy_id', '9031'),\n(320, 1, 'species.common_name', 'chicken'),\n(322, 1, 'species.classification', 'Gallus gallus'),\n(323, 1, 'species.classification', 'Phasianinae'),\n(324, 1, 'species.classification', 'Phasianidae'),\n(325, 1, 'species.classification', 'Galliformes'),\n(326, 1, 'species.classification', 'Neognathae'),\n(327, 1, 'species.classification', 'Aves'),\n(328, 1, 'species.classification', 'Coelurosauria'),\n(329, 1, 'species.classification', 'Theropoda');\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections for Ensembl REST API in Perl\nDESCRIPTION: This snippet configures the database connections for the Ensembl REST API. It sets up connections to various Ensembl databases, including core, variation, and regulation databases.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/supporting_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nsub database {\n  my ($self) = @_;\n  my $db = {\n    %$DB,\n    driver => 'mysql',\n    host => $self->global_param('ENSEMBL_REST_HOST') || 'ensembldb.ensembl.org',\n    port => $self->global_param('ENSEMBL_REST_PORT') || 5306,\n    user => $self->global_param('ENSEMBL_REST_USER') || 'anonymous',\n    pass => $self->global_param('ENSEMBL_REST_PASS') || '',\n    adaptor => 'Bio::EnsEMBL::DBSQL::DBAdaptor',\n  };\n  return $db;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Orthology Data in TSV Format\nDESCRIPTION: This snippet represents a single line of orthology data in TSV (Tab-Separated Values) format. It includes information such as gene IDs, orthology type, and confidence scores. The data is structured with fields separated by tabs, and missing values are represented by '\\N'.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/homology.txt#2025-04-22_snippet_2\n\nLANGUAGE: TSV\nCODE:\n```\n46433187\t27496\tortholog_one2one\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t40101031\t14115090\t1024894\t25\t\\N\t\\N\n```\n\n----------------------------------------\n\nTITLE: Protein Sequence Data in Text Format\nDESCRIPTION: This snippet contains a long protein sequence with various domains and motifs. It includes information like KDNSQK, YIMKTKLGQ, and other protein-specific patterns.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\nKDNSQKSRYIMKTKLGQANDVTSPPFSACLSESPVVLRGPYRTPQREKPVAYGNLFYTPKLMKVNTSKHISESLGAEVDPEMSWSSSLATPPTLSSTVLIVRDGQTSEARIPNDTTIXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXLEKMIDDSFGDGNNFEDHDGKMMRNMPNVMEDEVCDPDIDIPIEDDALFSFPGYKVGSLRKVKLDKTRKKYFKIKTNECEETKNMKDKYSSTSEAELTDPSISDITKNEIQTHVENVNEELLKDDVPCLATQWSQLNLSDLDVTQIEKTPLPHTSFCDQIQEKDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXGTLDDLSSKKDLNLSHSLTASQKAEITELSTILEETGSQFEFTQFQKQNPIVQTLEISESQMSSLNTYEVQNTVELDVILEKNEIDNNRFEVVINVKQKTVGLPKSNSGQVIFTDSFTENKVEFKGFCSALGRKMNISNEALQKAMKLFSDIEEISKETSAFKNDSLDRNHKSNVVPTFKIAKYNNKILNKDVKYVHKPQNNVENNTDILEENTLNCSREPENKKECTSSHKDNGKLKESIVPNSDNTQREINGLSLIGQQNMHLRKSNQFIKQENYQIKEEFLDLTCLGEAVKDKEVYLYKEQLVSNQKEPKIRENENSCDLQHFQTANGKNIMVSKESFNKVTHLFAEECSVKELSNFSFDFESNVLTMEPSGKKEKNLVESETEEMTLGATKSQLISIQQGPKIENKKLKEHGMVGFHTASGKKVIISKESLAKVKHFFVEENLENDVTSIKNLETELFKEREKVNEKHGQAYEMVKSNNAQVWEEMQSYQGDNGKVLISVTTADLPKITDYSPLKPSNSVLFEEKLSENKEAKKIVYCHTKQSTGLPVEVSALGFYTGHGKSVFLSETSLLAARKCIRERFKSEKADSDVDAKKLVPLNTSNDTSSVEDKNCISDKQDSANLNNSMSNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXPPMKRKLLHEFDRVVENQEKSLPSKSSDGTMKDRRMFMHHISLKPVTCDPFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXLYMYGVSKQCLRINSKNSESFKFHSQDYFSKEYLLDGKGIQLADGGWLIPSDKGKLGKEEFYXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXTNTSTTANSKNSNVDTKRESAVIEVTDGWYAVKALLDIPLSVLLHRGKLTVGQKIITHGAELIGSQEACPPLEAPASLMLKLSANSTRPARWYAKLGFFSDPRPFPLPLSSLFGEGGNVGCVDVVVQRVYPTQWMEKTASGLYIFRNERAEEEALKHAECQQKKLEVLLTKVQQFKHEENSARQYGLSRILTRHQVRALQDGADLYEAVKNAPDPAYIEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXVAPLVYLSDEYYNLLAVKFWIDLNEDIIKLHTLIAASNLQWKAESRSGIPTLFAGEFSSFSASPKESHFQEIFNKLKSSVENINQFCNDAESKLIHLINTYNSKQPNAVKEYNLDSPSPQARLGLVRVISTSHSEPSHHCPEGDSGLITSSVKITPTSDCKGDRKMDDARICKKRRSLDFFSRLPLPPPVSPICTFVSPAAQKAFQPPRSCGNNYSKPIKKSTLNSSQVTTLKTFSGTNMVENDLIADEELALINTQALLSNSPEKLIMDGFTSREPSGSGEHWVLKKDCPKLIEVENISQTSTEETRITRDKNEI\n```\n\n----------------------------------------\n\nTITLE: Documenting Sequential Patch Application History - Plaintext\nDESCRIPTION: This snippet represents a manifest or log of consecutively applied SQL patch scripts within the Ensembl REST project. Each line associates an incrementing identifier, possible metadata, patch file name, and a concise textual summary of the patch's intent. This enables orderly tracking of database upgrades, helps automate migration processes, and provides historical documentation for schema evolution. Input is read by migration tools or administrators, and output is the consistent application and recording of patches.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/taeniopygia_guttata/core/meta.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1263\\t\\N\\tpatch\\tpatch_83_84_c.sql|protein_feature_unique\\n1264\\t\\N\\tpatch\\tpatch_83_84_d.sql|longer_synonym\\n1265\\t\\N\\tpatch\\tpatch_83_84_e.sql|nullable_versions\\n1266\\t\\N\\tpatch\\tpatch_84_85_a.sql|schema_version\\n1267\\t\\N\\tpatch\\tpatch_84_85_b.sql|remove_duplicated_key\\n1268\\t\\N\\tpatch\\tpatch_85_86_a.sql|schema_version\\n1269\\t\\N\\tpatch\\tpatch_85_86_b.sql|add dna_align_feature_attrib table\\n1270\\t\\N\\tpatch\\tpatch_85_86_c.sql|meta_case_insensitive\\n1271\\t\\N\\tpatch\\tpatch_86_87_a.sql|schema_version\\n1272\\t\\N\\tpatch\\tpatch_86_87_b.sql|meta_value_NOT_NULL\\n1273\\t\\N\\tpatch\\tpatch_86_87_c.sql|datetime_default_NULL\\n1274\\t\\N\\tpatch\\tpatch_87_88_a.sql|schema_version\\n1275\\t\\N\\tpatch\\tpatch_87_88_b.sql|seq_region_name_255\\n1277\\t\\N\\tpatch\\tpatch_88_89_a.sql|schema_version\\n1278\\t\\N\\tpatch\\tpatch_89_90_a.sql|schema_version\\n1279\\t\\N\\tpatch\\tpatch_89_90_b.sql|remove_status\\n1280\\t\\N\\tpatch\\tpatch_89_90_c.sql|pf_hit_name_case_sensitive\\n1281\\t\\N\\tpatch\\tpatch_90_91_a.sql|schema_version\\n1282\\t\\N\\tpatch\\tpatch_90_91_b.sql|align_type\\n1283\\t\\N\\tpatch\\tpatch_90_91_c.sql|protein_align_type\\n1284\\t\\N\\tpatch\\tpatch_90_91_d.sql|remove_external_data\\n1285\\t\\N\\tpatch\\tpatch_91_92_a.sql|schema_version\\n1286\\t\\N\\tpatch\\tpatch_91_92_b.sql|add_cigar_line_align_type\\n1287\\t\\N\\tpatch\\tpatch_92_93_a.sql|schema_version\\n1288\\t\\N\\tpatch\\tpatch_92_93_b.sql|biotype_table\\n1289\\t\\N\\tpatch\\tpatch_92_93_c.sql|collate_index_interpro\\n1290\\t\\N\\tpatch\\tpatch_93_94_a.sql|schema_version\\n1292\\t\\N\\tpatch\\tpatch_93_94_b.sql|nullable_ox_analysis\\n1293\\t\\N\\tpatch\\tpatch_93_94_c.sql|default_aln_type\\n1294\\t\\N\\tpatch\\tpatch_94_95_a.sql|schema_version\\n1295\\t\\N\\tpatch\\tpatch_94_95_b.sql|vertebrate_division_rename\\n1296\\t\\N\\tpatch\\tpatch_94_95_c.sql|ox_key_update\\n1297\\t\\N\\tpatch\\tpatch_95_96_a.sql|schema_version\\n1298\\t1\\tspecies.division\\tEnsemblVertebrates\\n1299\\t\\N\\tpatch\\tpatch_96_97_a.sql|schema_version\\n1300\\t\\N\\tpatch\\tpatch_96_97_b.sql|biotype_so_term\\n1301\\t\\N\\tpatch\\tpatch_96_97_c.sql|rnaproduct_tables\\n1302\\t\\N\\tpatch\\tpatch_96_97_d.sql|add_object_type_rnaproduct\\n1303\\t\\N\\tpatch\\tpatch_96_97_e.sql|add_stable_id_event_type_rnaproduct\\n1304\\t\\N\\tpatch\\tpatch_97_98_a.sql|schema_version\\n1305\\t\\N\\tpatch\\tpatch_98_99_a.sql|schema_version\\n1306\\t\\N\\tpatch\\tpatch_99_100_a.sql|schema_version\\n1307\\t\\N\\tpatch\\tpatch_99_100_b.sql|alter_externaldb_type_notnull\\n1308\\t\\N\\tpatch\\tpatch_99_100_c.sql|alter_mapping_session_assembly_length\\n1309\\t\\N\\tpatch\\tpatch_100_101_a.sql|schema_version\\n1310\\t\\N\\tpatch\\tpatch_101_102_a.sql|schema_version\\n1311\\t\\N\\tpatch\\tpatch_102_103_a.sql|schema_version\\n1312\\t\\N\\tpatch\\tpatch_103_104_a.sql|schema_version\\n1313\\t\\N\\tpatch\\tpatch_104_105_a.sql|schema_version\\n1314\\t\\N\\tpatch\\tpatch_105_106_a.sql|schema_version\\n1315\\t\\N\\tpatch\\tpatch_106_107_a.sql|schema_version\\n1316\\t\\N\\tpatch\\tpatch_106_107_b.sql|Added index for seq_region_mapping\\n1317\\t\\N\\tpatch\\tpatch_107_108_a.sql|schema_version\\n1318\\t\\N\\tpatch\\tpatch_108_109_a.sql|schema_version\\n1319\\t\\N\\tpatch\\tpatch_108_109_b.sql|Added xref source GeneCards into external_db\\n1320\\t\\N\\tpatch\\tpatch_109_110_a.sql|schema_version\\n1321\\t\\N\\tpatch\\tpatch_109_110_b.sql|Add IS_PAR relationship to link X- and Y-PAR genes\\n1322\\t\\N\\tpatch\\tpatch_109_110_c.sql|Allow gene id to belong to multiple alt allele groups\\n1323\\t\\N\\tpatch\\tpatch_110_111_a.sql|schema_version\\n1324\\t\\N\\tpatch\\tpatch_111_112_a.sql|schema_version\\n1325\\t\\N\\tpatch\\tpatch_111_112_b.sql|Allow meta_value to be null\\n1326\\t\\N\\tpatch\\tpatch_111_112_c.sql|Extend meta_key length to 64\\n1327\\t\\N\\tpatch\\tpatch_112_113_a.sql|schema_version\\n1328\\t\\N\\tpatch\\tpatch_112_113_b.sql|Ensure meta_value is not null\\n\n```\n\n----------------------------------------\n\nTITLE: Ensembl Data String Representation\nDESCRIPTION: This snippet shows a single line of tab-separated data from the ensembl/ensembl-rest project. It includes a numeric ID (25992950), a NULL value, and a lengthy string composed of concatenated alphanumeric codes (e.g., EC1E10, EC1F10). The exact purpose and encoding of this string are not specified but likely represent biological data or internal identifiers within the Ensembl system.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/variation/compressed_genotype_var.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n25992950\\tNULL\\tn```\n\n----------------------------------------\n\nTITLE: Initializing Perl script for running REST endpoint tests\nDESCRIPTION: This snippet sets up the Perl script, including necessary modules and command line argument handling. It also defines the usage information for the script.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/marker_synonym.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\n\nuse Getopt::Long;\nuse Pod::Usage;\n\nmy $help = 0;\nmy $host = 'http://rest.ensembl.org';\nmy $species = 'homo_sapiens';\nmy $registry;\n\nGetOptions(\n  \"help!\"     => \\$help,\n  \"host=s\"    => \\$host,\n  \"species=s\" => \\$species,\n  \"registry=s\" => \\$registry\n) or pod2usage(2);\n\npod2usage(1) if $help;\n\n__END__\n\n=head1 NAME\n\nrun_rest_endpoints.pl\n\n=head1 SYNOPSIS\n\nrun_rest_endpoints.pl [options]\n\n Options:\n   -help            display help message\n   -host            REST server URL (default: http://rest.ensembl.org)\n   -species         species to use (default: homo_sapiens)\n   -registry        registry file to use\n\n=cut\n```\n\n----------------------------------------\n\nTITLE: Database Relationship Records\nDESCRIPTION: Tabular data showing relationships between database entities. Each row contains an ID, version numbers, and relationship type indicators in a fixed-width format.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/closure.txt#2025-04-22_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\n14046\t265\t1291\t262\t5\t1\t0\n14047\t266\t609\t263\t5\t1\t0\n14048\t267\t1291\t751\t5\t1\t0\n```\n\n----------------------------------------\n\nTITLE: Raw Genetic Sequence Data\nDESCRIPTION: Unformatted DNA/RNA sequence containing nucleotide bases. The sequence uses standard base pairs (A,T,G,C) and appears to be from genomic data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/dna.txt#2025-04-22_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nCTGGTGTCATGTTGCCAATGAATAGTGTTTCCATCAGTCATTGAAAATAGTAGCACTGAATGTGAGGTGGTGTCCTAATTAATAGGAGGGACTTATTTGAACAAGGACTTTTGTAGTCATCATTTCTGAGCCTGGGTACTAGGATGTAGTTCACATATTAAGGTGGTGTAATTTGAACCACTTGCCTGTGTTTCTCTGCTAACTGTAGAGAGAGCCTGTAGAGACTAATCTCCCAGTTCACACACCAAAGTTTGGGCAGTCATGTTGGGCAGCAAGTGAACCTGTGAAATTAGAAACAGAGGGGTCTTTTGGGGTTATTCCAGTCCCAGATGACTGGTAATGCTGGCCCTAATAAAAGAATCCAGCTTTTTTTCAAGGAAGATAGGTGACTGTTATTTAAATGCAATCCTCATGAGATGATGTATATTAGTAGAACCCTACAGTGTTCTGCTCATCTTGGAAAAATGGTATCTTGACTCATTGATATTTTGTTGTTCAAGGCTCAATTCCTGAGCAGATTTTGCCCTGTGCAGAAACTCAGCACTGTTGTTTTATTAGTCTCTGACTGCCAGCGATAAGTTCAACCCTAGCCTGGAAAGAAATTGCAATCACTGTTTCAGAAAATTTGAATAATCTTCCTTGTTAATTCCATAAGCACAGAAAACTATTTGATAGACTGGATGCATTCAACAAATTGTGAAAATCTCATATTTGGACTTCCTAAATGACATAAAGAAGGATCTAAACATTTGTAGGTCAGATCTGCATTTCAGATACCTTAGGAGTGGAATGGTTTAGACAGAAGGCTATCCTGGTACCCCCTCCAAAAGTCAGTCCAAATCTCCTGAAAATTTTCTGCCTAAACAGTCCAGCAACTGTTGAAATAATAATAATAGTAAAAATAAGTTCTGAAACAGTATATGGCTACAAACATTTTTATTGGCTTGTGTCAAATCATTAATTCTCTGTTAGTGAAAATTAGTAAGGTCAACTGCATTTATATCAACATCCTGTCTCCAACAATGACCAAAAATTGAAGCCTAGGAAAACACATAAAAAAGTAGAGTGTTCACAGTTCCACTTTCCATTATATTCCCTCAGGTTCTAATGGCTTCCTTTAGACTAGGTCCATGGACAAGGACTGCATTTGACAGAAGTTCTCTCTGTGTCCAATGAAAGGCTATGTTTTCACCTATGGACATCTTTTGTTTGTTTGTTTGTTACTCTCTTTTTGGACAGAGTATAGACTGCACCATACACAGAATGGAAGGATGTCCGCAATTTAACAACATGTTACGTGAAAAAACACCTCATGTTTCTTTGAATCCTGAACACTGACAACTTCATTTGATGGCCATGTCACTTTGTATCAGAATGTGAAGAAATGATCCATTTTCACACTCTTCATGCCATTATTTCGGGCATCGCAGCTCCCTCCAAGAGTCACTCTTTCAGATTGACAAGTCCTAGACTGTTCGATATCTTCTTCATTAGAAAGCTTTCCAGAATACTGATCGTCCTCATCATTCTTTTCTAGTTCTGACCATTTCATTCTGATATGGCAGAGCAAAGCTATATGCACCATGCTATATTTGAAGGGGCTGTTTAATTTTTTTTAGTGATCTAACGATGTTCTGTCTTGGTCTTCATTCAGTTCCTGATAATTCTTAATACAGCTGATTGCTAAGCAGATGTTTTCCTGGAAAGGTCTGCAACAGCTTAAAGCTGCAGCTGCTAAGTGGTAATAATTTGCTCAGAGGCCATCTTTTCATATGTAAACTTAAGAGTTTTTTCCCCAACTATGTCACATTTTATGTCTTCTACAACCATACGCTGTTCAGTCTGGTAAAATATTTCTGCAGTTTGCCCTCATATTTATTACTTCAATATGAGAACTTTCTTTTTGCTTTTTTTTTTTTTTTTTAACTAACGTTGTATCTGTGCAAGAATCTTCCATTTTATCCTACTTCATTTTCCTCTCATGATGAACACTTTCAGAATCATTTCGGGAATCCAAGTAGAAATTCAGTCGAGTAGATGAATGGATCTTTCTTATCCACATGATCATAGCCGCATTCAAGAAGACATACTGTCTGGTAAAATGTGACTTCCTATTGCAATGCCTGGGTTGACTGTCCCCAGGATGTTATGTTTTATCTTTGCTTCCACTATGTCTCCTCTTACAGGTCTGTAAAATTGTCATGAAATCTTTACAAGTTGTTGTTGTTGCATGCACCATTTTCCAGGCACAGTACTAAGACAGTGCCCTTTGTTTTTTATTTCATACTCCCTAGATCTCCTAAAGTATTTTGTGAAATCAATCATTTTTCTTCTTCCCTAGTAGTCATCTGCCTTCCAGAAAGTGTGCAAAAATTTGCCTTTCACAAATGCTAGAGTAATAGTCCACTCTGCAAGTTGCAAGTCTACTGTATTACATGTCACACCAATTTCACTGTTAAATCTCTCAACAGTGGCTTTATGTTTTTATATAAAAATAGAGCTAGTTATAAAACAGATTTTCTTCCCTGTGCTTTTGTGGGGGGGGGGGGGGGAAGATGAGGTTTTATTTTCACTGGAGTGTCTTAGCCCATGTTACTAGAAAGGAGACTAAGTTATACAAAGCTCCTTCATTTGTGGTAGCTGAGTTTTGTGGTCTATGTTTAAGCAAGCTCAATTATACTGTGGTTGTTTTGTGTGAGCAAGGCTGACGGTGGTAGGCAAGACAGAAAAAGCCTAACATGGCTCATTAAAGTGTGTATCCAGTTTGATGACAGATGGTTGTGGTGGGAGAGGAAATCAATAGCAGTTATCTGTTTTGGACTTTGCTGCATGAGAATAAACATTGAGCGCTACTGTGCCTTTTTTCTTTGTAGAGCAAAGATATACTTGCAGCTGTGATAACAATCATAATTAAAAAAACTGCTCTCCATAAGAATTCTCAAAAGTAAAAATGTGGTTTCTTTGTCACAGCTGCAAAATTACTACTGGTGAAAGGGGGAATATAATTTCAGTTCCCTCAGTGGTAAGTGAAGAACTGGGGCACCATGATCCTTTGATGTTGCTGTTGTGTCAAACAAATTATTTGAGTACATTTTGGTCAGGTCATTTGTGGTTAATAAAATAAATACGTACTGTGTATTAGACCAAAGGAAAACATGTTTGTGCCACTAGTGTAAATTCATGGTTTCTTAAGTAATGTTTATGAACTTATTACATATATTTTGTGTCGTTTCCTGTCAACCAAGCATGTGCCATTCAGTTTGCCATGGTTTCACTGATAGGCTGATCTTCTGCTGGAACGTTTTTATTTAAACTGGTAATATTTGTTACTGTATTCATTAAAATATTTTTCTCTAGAAGAAAAGCTTGGTGAACTAATTAGTTGATAGCAGGTTTAGTTGCTGTCTATTTAAATAAAAGGGTTTTATCGTTTCATAGTTTCAAGATATGTTTCAGATAAGTACCTGTCTTTAAAAAAAATTACAAAAGAACTTTTAAGGGTGACTTAGGGAATATAAACACAAACAAGTATACTTATAGCTGCAACATTCATGTCTGCCCTTTTCTCCTCTCTTTATCAAATCTCAACATGCTCTCAGAAATGAAAATTTACTGAACACAATGTTTTTGCAGCAATGTTTTTCCCTCTCCATCTATACTACATTTTATTTTAAATTGCTTTAAACTGCTGCATTTATAAATCTTTAGGCCATATTAGAGCTTTCGGTCTCGATGCTGCACGGATTTTCTCTATTCTCCCTCCTATAAAGATGGCCTGTGAAAGGATGTGCTCCCTCACCTGGGTTTAGAGGACAGAGTCTGTTCCCTCTGGAAGCCTAGAGTTTGTTTGCATTTTCAACAACAAACATCTAACAAAGACTGTCAAAAGTGTTTAAATGTGTCAACTGTGACAATGTATTGCAAAGGCTTGTCTAGCTCCGTATCCCCAGCATCCATGTTGGTATGGGGAATTTAGGAACCTTGGACTTATTTTCTAACATTGTAGATGTTACAGAACCCTTACAAGTTCAAACTCAGATTTTATTAATGTAAGTCTTCCTTCCATTTAAATTTTATGAAATATTTCTCTGAAGTGTGTACACTGAGTGTAAATAACTATAGAGTTTCTTTCATTCACTTAAAAGAGGAGTTCAAAAATGCATTTTCAGTCATGTCTGTATCATGTTGTTCTTTTTCATATACAGGAGAACCAACAGTAACATAAGAAAAAAAAATATGATAGTTTGGGAGTAGGACTTCTTAGGAAAGTCATTTACTTTTCATATGCATTCAGATGTGGACCATAAACTACAGTAACATTACTACATTTAAAAAGATGGTTTAAGCAACCATGTTTATACAGAAGACAGTTTACTAGAAAACTGTAGCCATCTCTTGAGTGGATGGTAATTCAGGAGTATTTCAAATTCAATTGTCATGGAATATATCCAAAAATTCCGTTTAGGAAATCATAATATATTTTACAAGTGCCCTGTCATGACTTCTTCTAGATGTATTATTTCAAAATGAGCAGTTTATGCAAACATTAGTCTATAATTTTTAAAATCCTTAATTACATCTCTAATATAAATATATTTTAAATATACATTTAAAGACATCCAGACACTGGACTTTAACATAGAAAAAAAAAAAAGCATGGAAGAGACATTACTTTATCACAGACAGACAACTTGAGCTGAATTAAGCATATTGGTTTTCATCCCAAGTGCAAGAGAATCTAAGTGTTAAAAAGAAGTCATGAGAATGTAAATTGCCCTCTTGATAAATGTTTTTATTTTGTTTGTTTGTTTTTTATCCTTTGGTAACATGTAAGTTTGTTCAGCTTTTACAAAATGTTACACCTGTTCAAAGCATTAAAAAAAAAAAAAGCATATTATTTCAGAGGAGCCTTCAAAAGACTTTTAGGAGCAATGAAACAAATATTTCAGAGATTCTTTGTCAAAAACAAGGCTTGTAATAAGAAATCATGTTATCTGTAAATACTTCCTGTTTTATATTACGTGTTAAGTAGCTGATTGTTTTTCTGATATAACAATTCCCTTATCTAATGGAAGAAAGTGTAGTTTGGATGATGCCTAGTACAATCAAGTTATATATATATGTATGTGTGTGTGTATATATACATACAATAATATATATATATATACACATGCATACTAATATATATATGCATGCATGAAGCATGCCTGCAAGCCTGTCTGCTCCCCAGATTTCTTTCCTAAAATGTCTAATTCAAAATTAAAAGAAGCAGCAGAAGAATGAAGTCAACAACAAAGAAAGGAACAAGAAGTTGTTCAAGCTAAACTTGTAATACTTTGGTAGAGCAGGGTTAAAGAGTATCTGCAGATTCAATTTAGCTTTAACAGAAAGGGGCTCACAAACTGCTGAGGGGAAGCTGCTGCTAGAATAGCTCTTTGCTCATATTGGTACAGCTGGAACAGTATGTCTGACTGCTCTTAACTGGGGAGCCAGCTATTAAGAGATAAGGATGAAAATACATTAACTCTTCCTTTATCTTATCATCTGTGATCAGCAACTCAAGGATGTGTTTCTCTGTCTCTTCTCTGCTCATGTGAGACTCTATCTGGAGCACTATGTTCAACTCTGGGGCTGGAGAAGCTCATCTACAAAGAGAGGCTGAGAGAGCTTCTCAGTCTGGAGAAGACTCCAGAAAGAGGCCTAGGAGCCTGCAGTAAATATGGGGACAGACTCTTTACCAGGCAAGGGATAATGGTTTAAAATAAACAGACAAACAAGAAAGGCAGACTAGTATTGGGATTCTTGATTAGTATTAGGAATAAATTCTTCGTTCTAACTGTTGTGAGGTACTGAAGCAGTTTGCCCAGAGAATTCATGAATGCTTCTCCATGAAGGTATTCAAGGTCAGGTTAGATGGGGCTTTGGGCAATGTGATCTTTGGAAGGTGATCCTGCCTAAGGCAGAGGGGTTGGAACTAGGTGATCTTTCAACCCAAACCATTTTATGTTTCCATAATTCATCTGTTGCATTTCTTTCCTTTGAGGATTTGGAGGGGGAGAAAAAAAGAATGAGAGGCCTGAATTCCATTGATCTGGATTGGTGGGAAGATCTGCAAATGGATGCATTTCATTCAGCATTTCCTATCTCTGGCAGCTTCTCACTTCTCTGCAAGACAGACCTAGACCTAGTTCTTAGAACTTCTGGTGCCCAAACAATGTAGGCTTATTAGATTATCTTTTTCCCCATTTCTTCCCTAGGCCATATCTACTGGTGGTTTTGTTTCCAAGGAAATTAGAGTTTGGTCATCTACTTAGGTTTTTGATGACTAAAATGTTGGAATAACATTCTTCCATTCCTTAACCCTCTGTCAGTTGTCCAGAAGATGGCTGCTGCTCAAGGGTTGCTGAGCTTTGGTGAGTGGAGGTGAGACCTTGCAGTGCTAGCAAAGTGTCATATTGTTGCTGTGCATTGGTCAATGGGTGGCAAGTGATTGTGTTGCAGCTATATATATTGTTATAATTGTATTTCTGTTTCCGTTTTTCCTCTTCTGTCTTAGTAAATAGTTTTGAAAATTCAATTTTTGTAAATTCAATTTTGTTTCTAGTTCTGTCCCTCATCCTGTTTTTGGGGAGTGAGCAAACATTTGTGTGGTGCTGAGCTGCTGCTGGGGTAAACAATAACATTGTTCTACTTAGTTCTTCTGAGCAGTATATTGTCTGTTACCATTGGCATTTTTGAAGCTATCAATATTATTTAGGGCTCCTCCCACTAAAACTGCTAGTTCTGACTACGCTATAGTTATTTCTCCACCTGCAAACCAATGCTCACTTTCTTAAGTAGTAGCATAAATTACTTTGTCAACGTGGAACTTGCAGCAGAGTATGTCTCATTGTACCTTGTCTTACCATAACCAAACTATTCTTTACATTCAAAGAATCTCAAGAATACCTACAGTGCACTTCAGTCTATAGTACTGATTGCACTTTAGACAAAACCAATAGCAAGTTTCTCACAAGTTTTAAAAGTTCTGATTGCACTAGCTTACCCTGAACTGAAAGCAAGACCCTTATCTCCTCAATTAAAATGTGTTTCTTCTGATTGCTTGATTGAATTCCCAGTATCATGCTCCACATTTCTTTTCATTCTACCATTTCTGTTATAGCTCTATTTTAATCCAGTTATCTTTCTATTGTCATTTCATCATCCATCACTGCTACTTTCTGAGCTTCTAAAAAGAAGTCACTGGCGTTGCACATAAATTTTCTCTGGCAGGGACTAAAAGTTACATATTTTTCTCTGCATTAATATTGACATTTGAACAGGAAGGTGTATAAACTAGCTAAAAAATGTGAATAGATATATGAAGTGGGTTCGAGGTTCTTTGTGCGTATGTGAGACAATGAAATGCTTATATGTGAGAGCAAGTGGCATGCATGGGCAGCTACAGTACTCTAAACAGCTCTCTACCTTGCCTTGGGCAATTACTTTTTCATCTCAGTATGCACTTCATGACTCTTTACAGCTGTATCTTCCACCAGAAACTGAAAAACTTCTTCATCCATCTTGTGTCAGATAACAATATGGGAGAGGGCTCTGTAAATTGTAAAAATTTTTAAAGGCAAAATAGGGATACTTTTCAATTTGACAGAAACAGTGCAGGAGATGGTATTTGGAATCTTGACATTTGAAGTATTGATTGTAGTATTCCTGAAAGTGAGTGATAGCCAGCATAAAGCACTTTAAACTTCTGATATTGTGCTACAAATCAAGGAAAAGTAAAAATTTACTCAAGATTTTTCACAGCAATACTTCAGCATTCTTTTGGAATAAGCATAGCTATGAATGAAATAGTTATGTGTTAATGTTTGTTAAGAATATGACGTATGAATGACATCAATTTTTGCAAATGTTTAAAGACAGGCAAATTCTATAATAAAGTAATAAAGATCAAGGTCCTTTTCCATGTTTCCTTAGGAAAGAAGATCTTGCATTTATTCCTGGGAAGGTAGCATTTAATGAGACATATAACCTGGTAATTCCTTTTTCAGAAATGAAGAAAGTGTGGAGGAGAGATGGTAAGATTTTTTTAGGCATTCAAACAGAACAGCTCACTAACACTGATCTCAACTGAAATCAAGTGGAGCATTAAGATTTCTCTTTTTTGGTAATTCTGAACAGACTTGCATGTGCTTGCCAGGCTTTTGAAACTCTGGTCTCTGGGCTTTGTGATAAGATGATGATAAAGACTAGGTAAAAATATATCTTTTCTATTGAATCATAATATGAGTGAAATTAACATTCTGAAAGTCCATCTTCTCTGTGGTGAAGAGAGTTTCTTCTAATCCACACTCTGTTTATGTTAAGCATATATTACATTGCCTGAAGCTTAAAAAGTCAAAGGAATGTGTTCTCTTAGAACTACCTAAGAAGGACCGATCACTGTATAATGGAAAAAGATACATTTTGAAAATCAGACTCTGAAGTATTGATTTTGACTAAAGGTAGATATTTTTTCTTCACTTTTTGATTGAAATTTATTTGAATCACAAACATACACATATCGTTATCTCTACAAAAACCTAACATAGCAAGATGAATCCTTGATGAAGCAATACAAAATTAAACTGAAATATCTAACAGATATTCCTACCATTCTTACTCAGTCCTGACTGAATTCCATTGCTTATCCATTTCTTCATCTTGAAGTAAAAGTGAGCTCTGTTGAGGAAGCTCAGGTACATCTGGTATTAAGTATTTCCTGCTTCAGTAGTGTTCTCCCCTGGCCAAGTTTGAATTCTTCTCTCATATGCATGTGCTGTGAATTGGAATTTTGATTCATTCATTTATTGCTATCAAAACAGGGTCCTAATGCTCCTATGGTGCTGCTATTTAACGGAGAGATTGCTGCAGTATGTGGTATGTCCAACCAATAATCAAAATCCTATTGCTTGAGGCATTAAAGAAGTCCCACTATTGAGAATTATTAAAGAAAGGAAACTGTAAAAGTATCTTTTAAGAAATGCAATTCATTCCCCCATTCCCAAGCCCAGCCCTAACATCAGTACTGTCTCGCATGGCAAAAAATAAATGTGTATCTTACCAATACACACAATATCCAGTTCTGTACAGCTGCCTGTGCAGTTAAAGGAACCTAGAATGAATCAAATTGTTTTGTTAAAGGGAAGTTTCGAATTTCTGATCTCTTTATTAGGGTTCTCTGGTAGTCAGATGAAATGAATTGTCAAATTAAACTGTGTAACTTTCTTGCAAATTGTGAAAGCATAACTTACTTAGGAAAGGGAAAAACCAGAAAATTGTTATTACTCATTCTTGGTTGCAGACGCTTGTGCCCTCTGCTGAAGGTGAGATACAAACTTGAGTCTGAAGAGCTTGCTAATCTGAGATTAAAAAAACTAAGACTACATCTTCCCATTTCTGTAGCCTCTGCCACAGCACTCTCACTATCTGCCTAGTTTTTTACTCACAAATATTCAGATTTTAAGTTCAGAAGTATTGTAAATTCATATGGAAGCATATAACTAATTTAAAGTGAAATAGAATGAAAATTGATACTTAGTAGGATTGAAATATCTGTGGTTTTCAGAAATAGGGGTTGTGCAGGTTCTCTGTTGGATATAGAGCAGGCAATGGCCCTGCAATTGACATTAAACTTCAGAGAATCACTACTCAAGTAGATGGTTAAACAAGGAAAATGTGTTCATGCTTCTGTGTTTCAGGGGAAAAAAAAAATGATATTTTGCATAATGTATGTTTTGGGTTCTTTTGCTTTTATTTTCAAGAAGAATGATATTTCATTTTGGAAATTTTTAATTTACTTCATTAGAAAACTCTTTTAACATTGTTGATATGCTTGTAAACAGTGAATAAGCATGGCAGTGTTTCAGAACAAGAGTGGAAAAGTGCACAACAGAAGTTATTTATATACTTTCTTTTTTGCAGCAGAGGGAGAGATCCACAGCTGACAGAGTTAACTCTGTCA\n```\n\n----------------------------------------\n\nTITLE: Parsing Ortholog and Paralog Data in TSV Format\nDESCRIPTION: This snippet represents a sample of the ortholog and paralog data in Tab-Separated Values (TSV) format. It includes gene IDs, relationship types (e.g., ortholog_one2one, within_species_paralog), confidence scores, and other metadata fields.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/homology.txt#2025-04-22_snippet_4\n\nLANGUAGE: TSV\nCODE:\n```\n100973456\t51019\tortholog_one2one\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t40102037\t100462678\t100184217\t\\N\t100.00\t\\N\n100973471\t51066\tortholog_one2one\t1\t\\N\t\\N\t\\N\t\\N\t\\N\t40102037\t100462678\t100184217\t\\N\t100.00\t\\N\n100973501\t50817\tortholog_one2one\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102037\t100462664\t100184217\t\\N\t0.00\t\\N\n```\n\n----------------------------------------\n\nTITLE: Entity Relationship Data Table\nDESCRIPTION: Database table rows showing relationships between entities. Each row contains ID numbers that appear to map relationships between different database objects with type indicators.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/closure.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n10268\t1281\t83\t1118\t3\t1\t0\n10269\t1281\t1291\t1118\t3\t1\t0\n10270\t1282\t83\t1118\t3\t1\t0\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Tab-Separated Sequence Alignment Data with CIGAR-like Strings\nDESCRIPTION: This data snippet presents sequence alignment information in a tab-separated format. Each line contains two numeric identifiers followed by a CIGAR-like string. The CIGAR string uses numbers followed by letters (M for match/mismatch, D for deletion) to describe the alignment of one sequence relative to another. This format is commonly used in bioinformatics, particularly in SAM/BAM files, to represent genomic alignments.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/gene_align_member.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n100000188\t100054945\t6M2D10MD22M5D2MDM2D7M11DM3D3M3D4MD8M25D6M\n100000188\t100054946\t6M2D10MD19M2D3M2D3MDM2D7M11D2M2D3M3D4MD8M25D6M\n100000188\t100065013\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100071636\t6M2D9M2D19M2D3M3D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100086718\t6M2D9M2D19M2D3M2D3MDM2D2MD4M11DM4D2M3D4MD8M25D6M\n100000188\t100086824\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100088181\t6M2D9M2D19M2D3M2D3MDM2D2MD4M11DM4D2M3D4MD8M25D6M\n100000188\t100091903\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100094079\t6M2D10MD19M2D3M2D3MDM2D7M11DM3D3M2D5MD8M25D6M\n100000188\t100100368\t6M2D10MD19M2D3M2D3MDM2D7M11DM4D2M3D4M2D7M25D6M\n100000188\t100100505\t6M2D10MD19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100114678\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100124962\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100124975\t6M2D10MD19M2D3M2D3MDM2D7M11DM3D3M3D4MD8M25D6M\n100000188\t100132105\t6M2D10MD19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100133274\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100138857\t6M2D10MD19M2D8MDM2D7M11D2MD4M3D4MD8M25D6M\n100000188\t100138860\t6M2D10MD24M2D3MDM2D7M11D2MD4M3D4MD8M25D6M\n100000188\t100153475\t6M2D10MD19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100164038\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100166458\t6M2D30M2DM47D36M\n100000188\t100166821\t6M2D10MD19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100167956\t6M2D9M2D19M2D3M2DM3DM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100170436\t10D8MD2M5D12M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100172734\t3D14M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100178494\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100178710\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100185036\t6M2D10MD19M2D3M2D3MDM2D7M11DM3D3M3D4MD8M25D6M\n100000188\t100186963\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100194492\t6M2D9M2D19M2D3M2D3MDM2D7M11DM5DM3D4MD8M25D6M\n100000188\t100199937\t6M2D9M2D10MD8M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100207705\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100220003\t6M2D30M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100220007\t6M2D9M3D18M2D3M2D3MDM2D7M11DM4D9MD8M25D6M\n100000188\t100220025\t6M2D9M2D19M2D3M2D3MDM2D7M11D2MD4M3D4MD8M25D6M\n100000188\t100225049\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100227479\t6M2D9M2D10MD8M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100227949\t6M2D10MD19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100231022\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100240803\t6M2D10MD19M2D3M2D3MDM2D7M11DM4D2M4D3MD8M25D6M\n100000188\t100244296\t6M2D10MD19M2D8MDM2D7M11D7M2D5MD8M25D6M\n100000188\t100244304\t6M2D10MD24M2D3MDM2D9M7D3M4D2M3D4MD8M25D6M\n100000188\t100245823\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100248134\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100250572\t6M2D9M2D19M2D3M2D3MDM2D2M3D2M11DM4D2M3D4MD8M25D6M\n100000188\t100252028\t6M2D9M2D19M2D3M2D3MDM2D6M17D2M3D4MD8M25D6M\n100000188\t100255328\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100257358\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100270056\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n100000188\t100285954\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M26D6M\n100000188\t100289437\t6M2D9M2D19M2D3M2D3MDM2D7M11DM4D2M3D4MD8M25D6M\n1800023899\t801267248\t218M\n1800023899\t903805708\t218M\n1800023899\t951375945\t218M\n1800023899\t953508295\t218M\n1800022978\t801599839\t206D46M5D39M157D\n1800022978\t903236659\t265M9D6M4D86M25D8MD11M16D4M14D4M\n1800022978\t951476700\t5M2D2M5D69M5D148M4D12M5D196M\n1800022978\t953553350\t9M5D238M5D113M25D8MD11M16D4M14D4M\n```\n\n----------------------------------------\n\nTITLE: Defining custom exception classes for specific error types in Perl\nDESCRIPTION: This snippet defines several custom exception classes for specific error types in the Ensembl REST API. Each class inherits from 'EnsEMBL::REST::Exception' and sets specific HTTP status codes and error codes.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/splicing_event_feature.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\npackage EnsEMBL::REST::EnsemblError;\nuse Moose;\nuse namespace::autoclean;\nextends 'EnsEMBL::REST::Exception';\n\nhas '+http_status_code' => ( default => 500 );\nhas '+error_code' => ( default => 114 );\n\n__PACKAGE__->meta->make_immutable;\n\npackage EnsEMBL::REST::NotFoundException;\nuse Moose;\nuse namespace::autoclean;\nextends 'EnsEMBL::REST::Exception';\n\nhas '+http_status_code' => ( default => 404 );\nhas '+error_code' => ( default => 0 );\n\n__PACKAGE__->meta->make_immutable;\n\npackage EnsEMBL::REST::PurlException;\nuse Moose;\nuse namespace::autoclean;\nextends 'EnsEMBL::REST::Exception';\n\nhas '+http_status_code' => ( default => 404 );\nhas '+error_code' => ( default => 110 );\n\n__PACKAGE__->meta->make_immutable;\n\npackage EnsEMBL::REST::LRUException;\nuse Moose;\nuse namespace::autoclean;\nextends 'EnsEMBL::REST::Exception';\n\nhas '+http_status_code' => ( default => 429 );\nhas '+error_code' => ( default => 429 );\n\n__PACKAGE__->meta->make_immutable;\n\npackage EnsEMBL::REST::ContentTypeException;\nuse Moose;\nuse namespace::autoclean;\nextends 'EnsEMBL::REST::Exception';\n\nhas '+http_status_code' => ( default => 400 );\nhas '+error_code' => ( default => 115 );\n\n__PACKAGE__->meta->make_immutable;\n```\n\n----------------------------------------\n\nTITLE: Daemontools Run Script for Ensembl REST Service\nDESCRIPTION: Complete run script for a Daemontools-managed Ensembl REST service, including environment setup, server configuration, and process execution.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/operon.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# description: Rest server\n# Use LSB init info\n#\n#You might want to set up an envdir to control more\n#options\n\nexec 2>&1\n\ncd /path/to/ensembl-rest/root\n\nexec setuidgid www-data plackup -s Starman \\\n--workers=10 --backlog=1024 --max-requests=100000 \\\n-E production -p 5000 -a ./script/ensembl-rest.psgi\n```\n\n----------------------------------------\n\nTITLE: Species Comparison Data Format\nDESCRIPTION: Tab-delimited data format showing species pair comparisons with numeric values. Each line contains an ID, species pair (using three-letter codes), and associated values. The '\\N' represents null values in the last column.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/species_set_header.txt#2025-04-22_snippet_0\n\nLANGUAGE: data\nCODE:\n```\n34771\tP.cap-M.mus\t2\t68\t\\N\n34723\tE.tel-M.mus\t2\t68\t\\N\n34801\tL.afr-M.mus\t2\t68\t\\N\n```\n\n----------------------------------------\n\nTITLE: Protein Sequence Entry 1\nDESCRIPTION: First protein sequence entry with ID 1441144 and hash 8567ec70a51b2be252cf560ed487293a. Contains amino acid sequence with masked regions.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nMPIESPGRPTFFEIFKTQCSKADLGPISLNWFEELSSEAPPYNSEYADESEYKINSYEPNSFKTPQRKPFYQLASTPIAFKEQGQTLRVQPSPLKELGKYLDLGKDIANNEHKNCHTKVEHIIDVTSPSLNSCLTEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXDKKPKHISESLGVEVDPDMSWSSSLATPPTLSSTVLIVRDEETSGTIFPNDPTVILKNYFSKHKESLKKNYHFIPSVTNSENKNQREASSHGFGKVLENSFGKVNSDKDDFRTSMTDTQEDEVHETVADFSEEDSFSLCFSKKRTGNLHKTRLDKTRKKIFCETSTDEFSEKDKQVKEDKYSFASEVEPSDDDPLDTNLGNQNPFGHESNKASKEAVPSSDWEWSQLNLSGLNETQMEKMPLLPISSYDQGNSENNLIDTEKECMTSINTKNSLLPISSLPQSEEILQEETLIDKRDEEQQLESHEDSFLVAKQIVPGTSPTVSPFPSIKKSLFRIRQPSEETSDEVFSGNLTKTNFKEESGTFESGMEIRAICSQKADSLFPSSLDSEKHPATSTHTSVTLKIEGLISSLKKKKKKFIYAIDDETSCQVKKSQKLQKSEPTNHSSQCEAPLIFTDAYSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n```\n\n----------------------------------------\n\nTITLE: IRF4 Binding Motif Data in Tab-Delimited Format\nDESCRIPTION: A tab-delimited line representing an IRF4 transcription factor binding motif. The format includes the motif identifier, a score of 4.4, SELEX as the experimental method, and an Ensembl motif reference ID.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/binding_matrix.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nIRF4_AD_TCAAGG20NCG_NCGAAACCGAAACYN_m1_c3_Cell2013\t4.4\tSELEX\tENSPFM0001\n```\n\n----------------------------------------\n\nTITLE: ID Relationship Mapping Entries\nDESCRIPTION: Tab-delimited data rows containing ID relationships and metadata. Each row has 7 columns representing source ID, target ID, and relationship attributes.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/closure.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n9346\t568\t1116\t299\t3\t1\t0\n9348\t569\t1801\t1550\t3\t1\t0\n9349\t570\t1116\t299\t3\t1\t0\n```\n\n----------------------------------------\n\nTITLE: Database ID Mapping Table\nDESCRIPTION: Table containing mappings between different database identifiers. The table has 7 columns with numeric values representing IDs and relationship metadata. Each row defines a relationship between different database entities.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/closure.txt#2025-04-22_snippet_8\n\nLANGUAGE: data\nCODE:\n```\n14574\t731\t1\t1289\t5\t1\t0\n14575\t732\t1289\t632\t5\t1\t0\n14576\t733\t1289\t632\t5\t1\t0\n...\n```\n\n----------------------------------------\n\nTITLE: BRCA1 Sequence Variant 1\nDESCRIPTION: 3336 base pair sequence representing a BRCA1 variant with checksum e5e86048507a857a831e36c8536cf3f9\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nMSIGSKERPTFFEIFKTRCNKADLGPISLNWFEELSSEAAPYNSEPAEDSEHKNNNYEPNLFKTPQRKPSYNQLASTPIIFKDQGLTLPLYQSPVKELDTFRLDLGRNVPSSKHKSLRTVKAEMHQADDVTCPLLNSCLSESPVVLQCTHVTPQRDKSVVCGSLFHTPKFVKGRQTPKHISESLGAEVDPDMSWSSSLATPPTLSSTVLIVRNEEASETLFPHDTTANVKSYFSNHDKSLKKNDRCIPSVTDSENTNQREATSHRFGRTLGNSFKVNSCKDHIGKSMPNVLEDEVYETVVDTSEEDSFSLCFSKCRTGNLQKVRTSKTRKKIFHEANADECEKSKNQVKEKYSFVSEMESSDTDPLDSNVANQKPFESGSDKISKEVVPSLACEWSQLTLSGLNGTQMEKIPLLHISSCDQNNSEKDLLNTENERKKDFLTSENSLPHISSLPKSEKPLNEETVVNKRDEEQHLESHRDYILAVKQAVSETSPMASSFQGIKKSIFRIRESPKETFSASFSGHVTDPNFKKETEASESGLEIHTVCSRKDDSLCPNSIDNGSWPAATTQTSVASKNAGLISTLKKKTNKFIYAIRDETSYQGKKIPKDQKSELMNCSAQFEANAFEAPLTFANADSGLFHSSVKRSCSQNYSEEPTLSLTSSFGTILRKCSRNETCSSNNTIISQDLDYKEAKCNKEKLQLFITPEAHSLSFPQEGQYENDPKSRKVSDIKEEVLAAAHHPVQHSKAEYSDTDFQSQKSPLYDHENASTLILTPTSKDVLSNLVKISRGKESYKMSDELKGNNYESDFELTKNIPMEKNQDVCALSENSKHVELLPPEKYIRVASPSRKVQFNQNTNLRVIQKDQEETTLIPKITVNPDSEELFSDNENNFVFQVANERNNFALGNTKELHETDLTCVNEPIFKNSTMVLYADIGDKQATQVSIKKDLDSSNTVYDLAEENKNSVKQHLKMTLDNQKKLSKPQSINTVSAHLQSSVVVSDCKNSHITPQMSFSKQDFNSNHNLTPSQKAEITELSTILEESGSQFEFTQFRKPSYILQKNTFEVPENQVTILNTTSEENIEAGLVIMNAPSIGQVDSSKQFEGTVGIKQKFAGLLKNDCNKSASGYLTDENEVEFRGFYSAHGVKLNVSTEALQKAVKLFSDIENISEETSAEVDPISLSSSKFHDSVVSMFKIENHNDKTVSGKNKCQLILQNNIEMTTGTFVEEITENYKINTENEDNKYTAASRNSRNLEFVGSDSSKNDTVCIHKDEKDLPFTDQHNICLKLSGQFMKEGNTQIKEGLSDLTFLEVVKAQETCHGNTSNKEQLTATKTEQNIKDFETFDISFQTASGKNISVTKESFNKIVNFFDPKPEELHNFSLNSKLHSDIRKNKMDILSHEETDTVKNKILKESVPVGTGNQLVTFQERPQGDEKIKEPTLLGFHTASGKKVKITKESLDKVKNLFDEKEQGTSEITSFSHQWAKTLKYREACKDLELACETVEITTAPKCKEMQNSLNNDKNLVSIETVVPPKLLSDHLCRQTENLKTSKSIFLKVKVHENVEKETAKSPATCYTNQSPYSVIENSALAFYTSCSRKRSVSQTSLLEAKQWLREGIFDDQPERINTADYVGNSLYENNSKNTIAESDKNHPSEKQDTTLNNSSMSNSCSYLSDEVYSDSGYLSKNKLDSGIEPVLKKVEDQKNTSFSKVISSVKDANTYPQTVNEGICVEELVTSSSPCKNKNAAIKLSISNCNNFEVGPPAFSTASGKIICVSHETIKKVKEIFTDSFGKVIKENNENKSNICQTKIVAGCYEALDDSEDIFHNSLDSDECSMHSHKVFADIQSEEILQHNQNMSGLEQVSKMSPFDVSLETSDICKCSIGKLPKSVPSTNTCGIFSTASGKSVQVSDASLQKARQVFSEIEDSTKQVFSKVLFKSNEHSDQLTREENTTIHTPKHLISSQKDFSHNVVNSSAFSGFSTASGKQVSISESSLHKVKGMLEEFDIIRTEHSLHYSPTSRQNVSKILPCVDKRTPEHCVNSEMEKACSKEFNLSNNFNVEGGSSENNHSIKVSPSLSQFKQDKQQLVLGTKVSLVENIHVLGKEQASPENVKMEIGKTEAFSDVPVKTNIEVCSTYSKDSENYFETEAVEIAKAFMEDGELTDSELPSHATHSLFTCPQNEEMVLSNSRIGKRRGEALISAGEPPIKRNLLNEFDRIIENQEKSLKPSKSTPDGTIKDRRLFMHHVSLEPITCVPFCTTKERQEIQNPNFTAPGQEFLSKSHLYEHLTLEKSSSNLAVSGHPFYQVSATRNEKMRHLITTGKPTKVFIPPFKTKSHFHRDEQCVRNINLEENKQKQNIDGHGSGDSKNKINDNEIHQFNKNNSNQAATVIFTKCEEEPLDLITSLQNARDIQDMRIKKKQRQRIFPQPGSLYLAKTSTLPRISLKAAVGGQVPSACSHKQLYMYGVSKHCIKINSKNAESFQFYTQDYFGKESLWAGKGIQLADGGWLIPSNDGKAGKEEFYRALCDTPGVDPKLISRIWVYNHYRWIIWKLAAMECAFPKEFANRCLSPERVLLQLKYYDMEIDRSRRSAIKKIMERDDTAAKTLVLCVSDIISLSANISETSSNKTSSADTQKVAIIELTDGWYAIKAQLDPPLLAILKNGRLTVGQKIILHGAELVGSPDACTPLEAPESLMLKISANSTRPARWYTKLGFFPDPRPFPLPLSSLFSDGGNVGCVDVIIQRAYPIQWMEKTSSGLYIFRNEREEEKEAAKYVEAQQKRLEALFTKIQEEFEEHEENTTKPYLPSRALTRQQVRALQDGAELYEAVKNAADPAYLEGYFSEEQLRALNNHRQMLNDKKQAQIQLEIRKAMESAEQKEQGLSRDVTTVWKLRIVSYSKKEKDSVILSIWRPSSDLYSLLTEGKRYRIYHLATSKSKSKSERANIQLAVTKKTQYQQLPVSDEILFQVYQPREPLHFSKFLDPDFQPSCSEVDLIGFVVSVVKKTGLAPFIYLSDECYNLLAIKFWIDLNEDIIKPHMLIAASNLQWRPESKSGLPTLFAGDFSVFSASPKEGHFQETFNKMKNIVENIDILCNEAENKLMHILHANDPKWSTPIKDWTSESYTAQIIPSTGNKLLISSPNCELYYQSPLSLCMAKRKSVSTPISAQITSKSCKGEKEIDDQKNCKRRRALDFLSRLPLPPPVSPICTFVSPAAQKAFQPPRSCGTKNETPIKKKELNSPQMTPFKKFNEISLLESNSIADEELALINTQALLSGSTGEKQFISVSESTRTTPTSSKDYLRLKRRCTTSLIKEQESSHSDKEECENNKQDTITTKKYE\n```\n\n----------------------------------------\n\nTITLE: Controller Method Definition with Chained Dispatch\nDESCRIPTION: This example demonstrates how to define a controller method using Catalyst's chained dispatch system. It shows the proper method signature, including path definition, argument handling, and REST action class integration.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/alt_allele.txt#2025-04-22_snippet_3\n\nLANGUAGE: perl\nCODE:\n```\n# Provided URL template: /sequence/id/{id}\nsub id : Chained('/') PathPart('sequence/id') Args(1) ActionClass('REST') {}\nsub id_GET {\n  # Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Short Protein Sequence Data in Plaintext Format\nDESCRIPTION: This snippet shows a shorter protein sequence with its associated metadata. It follows the same structure as the previous sequences but contains a much shorter amino acid sequence.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n808085\t94\t2ea5628e14296f5117798008620ddc72\tMEKTHTGSYVFRNERAEEKEASKHAESQQKKLEALYAKIQDDFEKQEDAARRQDVKSRVLTRKQVRALQDGAELYEAVKSVPDPAYIEVSGSIR\n```\n\n----------------------------------------\n\nTITLE: Displaying Ortholog Data in TSV Format\nDESCRIPTION: This snippet shows a table of ortholog data in Tab-Separated Values (TSV) format. Each row contains information about a gene pair, including their IDs, ortholog type, and various metadata fields.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/homology.txt#2025-04-22_snippet_10\n\nLANGUAGE: TSV\nCODE:\n```\n100984122\t26875\tortholog_many2many\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n100984129\t50743\tortholog_many2many\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n100984138\t20847\tortholog_many2many\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n100984142\t28104\tortholog_many2many\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n100984149\t29629\tortholog_many2many\t0\t\\N\t\\N\t\\N\t\\N\t\\N\t40102008\t100184217\t100184217\t\\N\t\\N\t\\N\n```\n\n----------------------------------------\n\nTITLE: Protein Sequence 1\nDESCRIPTION: Long protein sequence containing standard amino acid codes and some masked regions (marked with X). Contains multiple domains and structural elements indicated by characteristic amino acid patterns.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nMPVGCKERPSFWEIFQTRCNQADLGPISLNWFEELSLEAPPYNSEIIFPVEESEYKTNSHEPSLFKTPQRKPYQLASTPIIFKEQGLNLPLNQSPSRELHKYRLLLGKDNKHQGYCTVKTKLNHTNEVTSPLPNTCLNESPVGLHCTHVTPQREKSVVCGSLFHTPKLIKGQTPRRISESLGAEVDSDMSWSSSLATPPTLSSTVLIVKEEESRTAVFPNDTAAVLKSYFSNYDECLRKNNRIISSGPINESSQKETTSQELGEIQDNSSWKVNNHKDQFGKSVPNVLKDEIHETVSDVSEEDSFSLYVSKYKTRNLRKIKIGKSRKNIFSESNMNEYEEPKQQLEKNKHLFVSEVEPNYNIPSNTSVTTQKLFGNGSDEISKETVLSSGSQRVQLTPSGENGIQMKKMPTLYTSSCGQSNSAKDCIDTEKDCTSFIILENLLPEILDTSKTENVVDEETVVNKGDVGHCLISHEDSTPVTKPTVANTSLVESPHEGIKKSVFRIRESTEEPLSEVFSNNITDPNFKEETKDSEKELEVNAICLQKEDSLCPNLVDNGSQPASIEHTSAALKSEGLISTLKKKKKKFIYAINDETTCQGEKLLKDRASQLSNYSTQFEANTFEVPLTVTNTDSGLMPFSSKKITEEPAFSLNSSYEVNLRKCSSNESSSSKTKRLPQVLDDKKLQSCIITEAAYFSSLQEQHCMDNPKSHSVSDIKEDFPITYHPGAPNSEVDCSSMLFPSQERFLYDHGNTSILTPNPRAIPSKPAMVSIVKKSNKMPEKLKSKNCEADFELTNNIPMEMSRLCVFSENSQKTELLISKNDITASSIEIQVNENPDSTVIQKDQEETTLISNITINSNSEELFPEYGNNFVFQMTNERKIPALENIEEPYEADLSCVEESILKNSTLIAYGDLDDKQTAKVLIAEDFSSSVIHDFTENINSIKQQVSRTLGQDSESDILNIEVKSNRNNEYVDKQTVSSAPVLDQNFGKGFRTASNKEIKLSEHNVQKSKMLFRDIEEQYPTSFACAEITNTLSSDVEKKQSKPLVLDSQSNNNVSRYVQNSAFASSSKNSHKIPPVLSLKLCLSSNNNLTPSQKAEVNELSTILEESGSQFEFTQFRDPDHIEQNYPLEASENHMILSSTTCEECKDSHHDALNSPSTSQVNSKKYKDTFGDKQNFAHLLKTSCTKNASGCLTDKEVEFKGFYSALGSKLTVSNKALQKAMKLFSDIEKISEETSAELDSESLFSSKYGSIRTENYTSDNINTENKCQLILQNNVEMTTDIFVENTKDYKREKENEDRYIGASINICNIGKSHCSDTSKNDTDSNKNDFPCNNQRNKCLKLSGPCMKEGSIQIKEGLSDLTCLEVVKTEELFYINTSSKEQLTVKKMVPNTKDFYSCDVYFQTASGKNITVSKESLSKVVNLFDEKCTEEESDNLPSSLNSELFSTKHMKKSISSHEETAKIEDKILKEKEPVGNKNQLTLQEQAERETEKSKEPFILGFHTASGKKVKVAKESLDKVKNLFDEEKQCIGEIINTNHEGLKTLKDREEPEVTCETIEIIVPKCEEREKSPEEKRLIPNETAVPPGLLSDHLHTQRENLKISNSISLKVKAHEDTEKQQAEVPITCSTNQSTCSVTGNSTLAFYTGHGRKISVSQASLFEAKKCLREGKLDDQPEAINAAGYVGSPLSENSSSCILTGKSHLSGRKDSAYLSKRSMSNSSSYSESSHSNEVYSKSELLSKNKVDHSGIEPVMKDAKDEKDSSFPEVVSTLREANIYPQTVNGDIYAKKLSNCSPCNNKDAANKLAFSDYFETESPSADGEKDFVSHDTEEIRERLVDSYSKVIKQNSASTSGTCQTKIVAGCHEVLDDLKDPLFSKSLDEECNMHSHKVFTDDQSEQSLQQNQNKSELEKVSKKSPCQLNWKTSDICKLNVGNFSSSVSFKNACGIFSTASGKAVQVSDASLQKARQVFSKVEDNADQPFSEVFKNNREHSDKYTKEKSTVIHSASKSLPAFSGFSTASGRKVSISESALNKVKGMLEEFDSIRTECGLQHSPPSRPDASEILPFSYVAKNTSEDLVNTTMESAYRNKFNHSDNYSIESDSSENSHLTTVLPSLSEFKQDKQQLILGIKASVVENIHCLGEKAIPESTERKIDKTETFSNLPVKTTTELRSTYSGDPGNYLETEAVAIADAFMEDGELTDSELLCHAKHEETISLNSSIGKRRGDASVSVGEPPIKRNLLNEFDRVMEKQEKSLKALKSTPEGTMKDRRLCMHHVSLEPITCGPPCATKKLQEKQSPNFTAPGQEFMSKSQFYEFNLTLEKSSNLSVSEKLFYEVPTTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXLYMFGISKHCLKINIKNAESFQFHIQDYFGKKDLWAEKGIQLADGGYLIPSNDGKAGKEEFYRALCDTPGVDPKLISRLWVYNHYKWIIWKLAAMEFAFPEEFANRCLSPERVLLQLKYRYDMEIDRNRRSAIKKIMEKDDTAAKTLILCVSGITSSGTNIPEASTSKNNSVDTKTVTLIELTDGWYAIKAQLDPPLLALLKNGKLTVGQKIIIHGAELVGSPDACTPLEAPESLMLKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXNARKRCIPSHALTRQQIHALQDGAELYEAVKNAPDPGDLEGYFTEEQLKALNNHRQILNDKKQAQIQLEFKKAMESTEQEEQILSRDVKTVWKLRIISYEKKEKDSVLLSIWRPSSDLYSLLTEGKRYRIYQLITSKSKSKSERTKMQLTATKKTQYQQLMTSDELLFQVYQPRTSVPFNKLLDPDFQPPCSEVDLIGFVVSVVKKIGLLPLVYLSDECHNLLAVKFWIDVNEDIIKPRMLIAASNLQWRPESKSRIPTLFAGDFSMFSANPREEHFQETFHKVKNSVENIDVFCSDAENKLMHMLNADDPKWSTPTKDYTSEPHTVQPVLDTGSKCLMSPISYQSPLLLCKTKGKSVSTPVSAQMTSKFCCQKETDDPKTCKKRRALDFLSRLPLPPPVSPMCTFVSPAAQKAFQPPRRCGIKLNETPIKKLSLNSPQMTPLKKFNDSSFLESDSIADEELALINTQALVSGPAENQLMSTKSARTAPSCSKESLRLKRHHTATAVKDQEDSCDSMEERDISAKKYF\n```\n\n----------------------------------------\n\nTITLE: Inserting Database Patch Information in SQL\nDESCRIPTION: This SQL snippet inserts patch information for the Ensembl core database schema. It records the history of database schema changes and updates applied to the chicken genome database.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/meta.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO meta (meta_id, species_id, meta_key, meta_value) VALUES\n(131, NULL, 'patch', 'patch_65_66_d.sql|add_index_to_ontology_xref_table'),\n(132, NULL, 'patch', 'patch_65_66_e.sql|fix_external_db_id_in_xref'),\n(133, NULL, 'patch', 'patch_65_66_f.sql|drop_default_values'),\n(134, NULL, 'patch', 'patch_66_67_a.sql|schema_version'),\n(135, NULL, 'patch', 'patch_66_67_b.sql|drop_stable_id_views'),\n(136, NULL, 'patch', 'patch_66_67_c.sql|adding_intron_supporting_evidence'),\n(137, NULL, 'patch', 'patch_66_67_d.sql|adding_gene_transcript_annotated'),\n(138, NULL, 'patch', 'patch_66_67_e.sql|index_canonical_transcript_id'),\n(139, NULL, 'patch', 'patch_67_68_a.sql|schema_version'),\n(140, NULL, 'patch', 'patch_67_68_b.sql|xref_uniqueness');\n```\n\n----------------------------------------\n\nTITLE: Microarray Platform ID Mapping in Tabular Format\nDESCRIPTION: A tab-delimited mapping table that correlates different ID systems for microarray platforms. Each line contains paired identifiers that reference the same genomic platform, useful for cross-referencing between different databases or systems.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/array_chip.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n68\tHumanWG_6_V3\t28\tHumanWG_6_V3\n70\tHuEx-1_0-st-v2\t30\tHuEx-1_0-st-v2\n16\tHC-G110\t16\tHC-G110\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression for Ensembl REST API in Perl\nDESCRIPTION: This snippet configures compression settings for the Ensembl REST API responses. It enables Gzip compression and sets the minimum size for compression.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/supporting_feature.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\nsub compress {\n  return {\n    enabled => 1,\n    min_size => 10240,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Protein Sequence 1 - Ensembl REST API\nDESCRIPTION: A long protein sequence consisting of amino acid codes. This sequence is likely used for bioinformatics analysis or as part of the Ensembl REST API's functionality for protein sequence queries and comparisons.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_7\n\nLANGUAGE: plain text\nCODE:\n```\nCFLTDLGPISLNWFEELTSEAPPHNYEISEDHGSKTEIIELNSFKTPQRKPFTYNQLASTPLIFKEQNVNFSLYSSPLRGPDHCKLDLGKDNAVDKELRKSHCLIKTKLGQANDATSPLLSACLSESPVVLRGTYRTPQREKPVAYGNLFYTPKLMKVNTSKHISESLGAEVDPDMSWTSSLATPPTLSSTVLIVRDGQTSGARTPNDTTIMLQKSLSQHGESPKRLDRTTSSVPNIENTHAESSVTSQELEKMINDSFGDGNSFEDLDGKMMKNIPNVMEDEMCGPVIDTPDDDASYSFPDYKIGSLRKVKLDKTRKKYFKMKTNECEETERLNKDRYSNISETELEYCYPSISKVTKNEIQKPIENINEELLKDDVPSSATEWSQLNLSGLNVTQIEKTPLPHLSFCDEDSRERSANSNSECSNLITLKKLEISTCEEDEGKITIPQKETVLLLKKSSPEISPLKSLSQNRKSSTFEMGQTSEKTISVDYSSFCTVNTNITTESKILGNKLENPNSSVNDIVCSGEHSFLYPNTDDKRHCPTITKCNSSSLNSIGIISHFKKKTKKFIYVVNDDSSCQDENIQKSQEIDSMNCSESSHLEMSSSGMHPEFTDAVSDFLDSSVKRKCLQFNPEEETVSLTGCDKTVLEEYFNESSFPQNEVTSQGVDFKEVKIKKGDLESTVTEAEKKDHNNASKNPIVSNIKERALAKKYTEIELGNIGQNIHLTTKNRTLNGSTNSIINTLTQLPQDPPEFSVVTDEEKEPLCKMKQKLRFRRNSDSTFVTNKVNSEFPNSHFKKNQETDILNQISGESQQMSSEKCKEISSISLGTQVNRNTDLFVSLRDQEKTILLTGKTALETYPKEHLPLNKSNFLFQTTEKKHMQIMDSSEELETNFCYLGEPISEKSTEIDCKQTVQELCTEDSFLLKVIPEFTGDSQNKNQSPKLAYEYTAPCKNLYSKRTIDANVKSKTNEDNYLGKWTGNFDPDLNKNFGSGFKTASNKEIILSDNNINKGKLFFKDIEQHDNNCSSVEIMNTSVAENVKIDLDTKNHIKNSTSGWNSEASHAISKDIQDNIFVINKKDTNVTLENLALKKDLDLNHSLTASQKAEITELSTILEETGSQFEFTQFKKQSPTIQILEISTNKTGNQLDNLNTYDVQRTFELDGYFGAKNEISNSRTPDLNVNSEMVINIQQETASLSRQVNSTDTFTENEMEFKGFCSALGRKMTVSNEALQKALKLFSDIEEIGEEVPLQNFRNSSLERSHKSNIVPTFKIANHNNNEDFKGKEAKCVPKPQNNIEDYTDIFVEEKVVNSSRDPENIKSSCPLSISSHEDNCTFKRSVPNSNNGLSLNGQQNIHLKMSNQLMKQENYQIKEELLDLTCLGETVKDEEMFTLNISQVEQLISNQKKQKIRENESLHDLQHFQTASGRNIMVSKESFNKVAHLFAKECSVEELNDFSFPSISKMPNVAHNKLTEPSVKEEQNLLESETEEMPFGITKNQLLSIQQEPKIENKKCKDHSMVGFHTASGKKVTISKESLAKVKHFFVEENLKNDVTNIKNIETEFFQEREKANDGQACEMVELNNAQVWEEMPSYQNDDKKILVPFTTADLSKKLDSALSNESSNDILFERKLSENKKSKENCLLSDTKKSTGLPVEISGLGFYTGHGKRISVSETSLLEARKWLRDRDLQDVGGKTEASDMFVSSVDEAIYLKGDPDVQKEKLVPLNALYKTSSVEDDKNCISEEQDSVNLSNNVSDIKHDLKHDPKRSGFYQSDNADFFLEHISDKGMSYLKARPPTFTTASGKTVHISNEAVQKAREMFINDCDKVLKPNIETKLENNEMEVVKYFSETLGNKKDISLKFDAKKRNISTTDIFISNTKCSNLAQLESMSTSTGLEVNSELSHHKINSQTSDLSKSMGRMPKCSSSVGIFCTANGKPVQVSDNSLKKARQVFSEIESNSEQLLSMVPFKNSESHMETLTKEENTTLHAKTNLLSQKKDYLSDMVNSHNNSGFSTASGKQVLISENALKKVKNMLVEFDLMKNESLEQLPEFTQNVTPKVLSPIHCIDGSKNPENVVNSKNEETCNKEFNLSNNCDVETNYLENCTITKVSCNQFKQDEMQTPLETNLMPDQDFSFLKKKQGGPKNVNIEGDVTLNDFLVKESLQVCVSDSKAPENFLEREAMEIANAFMQDDELTDSELPHNARQNFITYKNKEKCMQLNSRFGKRRMEKGASYGEPPIKRKLLHEFDRVVENQEKSLKPSKSSPDGTMKDRRMFMHHIPLKPLICDPFSTTKERQEMRHPNFTAPDQGFTSKSPFFKRQTLGNSSYKSFLGSPLYKIFSTNDGKIQPNTVVNKPSKVFVPPFKTKSNSFTDEQYVSKRLKLKVKDHIQENEKQKYIDGHNTRDSENNENYLTDKDNYNQATTDVFEEFGDSTLVEMNKNLQNARELQDMRIKKKQTQQIYPQAGSLYLTKTSTIPRISLKVAVEGRVPSTYSSKQLYMYGVSKQCSRINSKNAESFQFHSQDYFSKEYLLDGNGIQLADGGWLIPTDEGKLGKEEFYRALCDTPGVDPKLITKTWVYNHYRWIIWKLAAMEFTFPKEFASRCLTPERVLLQLKYRYDIEIDKSRRSAIKKIMERDETAAKTLVLCVSEIISSGTNMSIAANNKNSKVDTKKESAVIEVTDGWYAIKALLDIPLLALLHRGKLTVGQKIITHGAELIGSQEACTPFEAPPSLMLKLSANSTRPACWYTKLGFFSDPRPFPLPLSSLFSEGGSVGCVDIVVQRVYPTQWMEKTLSGLYIFRNERAEEKEALKHAECQQKKLEALLTKIQAEFEKHEEENSATQHGLSRILTRQQVRALQDGADLYEAVKNAPDPAYIESQGCFSKEQLRALNNHRQMLNDKKQAQLQSEFRKAVAAAEMEEQGLSKRDVTMVWKLRVINYGKQEKDSVILSIWRPLSDIYSLLKEGNRYRIYHLAASPSKSKSDSTHIRLTATKKTQYQQLPVSHETLFQVYQPREALPLSKLVDPSFQPSFAEVDIVGFVIFITKKPGIAPLVYLSDEYYNVLAIKFWIDLNEDVIKLNTLIAASNLQWRTESRSGIPTLFAGEFSSFSASPKESHFQEAFSKLKSSVENIDLFCNDAESKLTHLHNIHNSKQPNTVKEYNLDSPSPQAKLGLEHVITTSHSEPSHLCPEGNSGLTTSSDKITPTSDCRGNRKMDDPKICKKRRSLDFFSRLPLPPPISPICTFVSPAAQKAFQPPRSCGNNYSSKPNKKNTLNSPPMTTLKTLSGTNMVENDLIADEELALINTQALLSNSSE\n```\n\n----------------------------------------\n\nTITLE: Analyzing Protein Sequence with Identifier 5BF671FA4A510816EAE0C8E299605D6D\nDESCRIPTION: This snippet contains a protein sequence identified by the code 5BF671FA4A510816EAE0C8E299605D6D. The sequence is 538 amino acids long and includes various protein motifs and repeats.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/peptide_archive.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMTTEGGPPPAPLRRACSPVPGALQAALMSPPPAAAAAAAAAPETTSSSSSSSSASCASSSSSSNSASAPSAACKSAGGGGAGAGSGGAKKASSGLRRPEKPPYSYIALIVMAIQSSPSKRLTLSEIYQFLQARFPFFRGAYQGWKNSVRHNLSLNECFIKLPKGLGRPGKGHYWTIDPASEFMFEEGSFRRRPRGFRRKCQALKPMYHRVVSGLGFGASLLPQGFDFQAPPSAPLGCHSQGGYGGLDMMPAGYDAGAGAPSHAHPHHHHHHHVPHMSPNPGSTYMASCPVPAGPGGVGAAGGGGGGDYGPDSSSSPVPSSPAMASAIECHSPYTSPAAHWSSPGASPYLKQPPALTPSSNPAASAGLHSSMSSYSLEQSYLHQNAREDLSVGLPRYQHHSTPVCDRKDFVLNFNGISSFHPSASGSYYHHHHQSVCQDIKPCVM\n```\n\n----------------------------------------\n\nTITLE: Database ID Mappings List\nDESCRIPTION: A tabular listing of database relationship IDs and their associated source/target mappings, likely representing foreign key relationships between database tables. Each row contains an ID followed by source/target table IDs and additional attributes.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/closure.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n6738\t464\t837\t266\t2\t1\t0\n6739\t465\t1291\t414\t2\t1\t0\n6740\t465\t1291\t295\t2\t1\t0\n...\n```\n\n----------------------------------------\n\nTITLE: EFO Database Reference Entry\nDESCRIPTION: Database record showing the mapping of ID 50831 to EFO (Experimental Factor Ontology) with associated metadata including description and linkage type. This reference data defines how EFO terms are handled within the Ensembl system.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/external_db.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n50831\tEFO\tNULL\tKNOWNXREF\t1\t0\tExperimental Factor Ontology MISC NULL NULL The Experimental Factor Ontology provides a systematic description of many experimental variables available in EBI databases, and for external projects such as the NHGRI GWAS catalog. It combines parts of several biological ontologies, such as UBERON anatomy, ChEBI chemical compounds, and Cell Ontology.\n```\n\n----------------------------------------\n\nTITLE: Numerical Mapping Table for Ensembl REST API\nDESCRIPTION: This snippet shows a portion of a large numerical table, likely used for mapping or defining relationships in the Ensembl REST API. Each row contains 6 columns of integer values, possibly representing IDs, references, or other numerical attributes.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/relation.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2479\t1867\t946\t25\t0\t1\n2480\t1867\t1291\t25\t0\t1\n2481\t1868\t1910\t25\t0\t1\n2483\t1869\t1861\t25\t0\t1\n2482\t1869\t1866\t21\t0\t1\n2484\t1869\t1868\t25\t0\t1\n2485\t1870\t1907\t25\t0\t1\n2486\t1871\t1907\t25\t0\t1\n2487\t1872\t170\t21\t0\t1\n2489\t1872\t405\t25\t0\t1\n// ... (truncated for brevity)\n14132\t56655\t70098\t31\t0\t7\n14140\t56660\t70098\t25\t0\t3\n```\n\n----------------------------------------\n\nTITLE: Tab-Separated Data Records\nDESCRIPTION: A collection of tab-separated data lines, potentially representing configuration or identifiers within the Ensembl REST project. Each record includes an ID, a type ('default' or 'aves'), and various numerical parameters.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/gene_member_hom_stats.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n7213\tdefault\t1\t1\t1\t63\t0\t0\n27806\tdefault\t1\t1\t1\t63\t0\t0\n35171\tdefault\t1\t1\t1\t63\t0\t0\n77622\tdefault\t1\t1\t1\t63\t0\t0\n83742\tdefault\t1\t1\t1\t63\t0\t0\n104518\tdefault\t1\t1\t1\t63\t0\t0\n106449\tdefault\t1\t1\t1\t63\t0\t0\n110878\tdefault\t1\t1\t1\t63\t0\t0\n129606\tdefault\t1\t1\t1\t63\t0\t0\n134448\tdefault\t1\t1\t1\t63\t0\t0\n154150\tdefault\t1\t1\t1\t63\t0\t0\n167411\tdefault\t1\t1\t1\t62\t0\t0\n179191\tdefault\t1\t1\t1\t63\t0\t0\n221707\tdefault\t1\t1\t1\t63\t0\t0\n230440\tdefault\t1\t1\t1\t63\t0\t0\n277389\tdefault\t1\t1\t1\t63\t0\t0\n398066\tdefault\t1\t1\t1\t63\t0\t0\n404005\tdefault\t1\t1\t1\t63\t0\t0\n429639\tdefault\t1\t1\t1\t63\t0\t0\n432925\tdefault\t1\t1\t1\t63\t0\t0\n436516\tdefault\t1\t1\t1\t63\t0\t0\n450593\tdefault\t1\t1\t1\t63\t0\t0\n461657\tdefault\t1\t1\t1\t63\t0\t0\n491147\tdefault\t1\t1\t1\t63\t0\t0\n512234\tdefault\t1\t1\t1\t63\t0\t0\n591114\tdefault\t1\t1\t1\t63\t0\t0\n596746\tdefault\t1\t1\t1\t63\t0\t0\n627639\tdefault\t1\t1\t1\t63\t0\t0\n640198\tdefault\t1\t1\t1\t62\t1\t0\n641360\tdefault\t1\t1\t1\t63\t0\t0\n654475\tdefault\t1\t1\t1\t63\t0\t0\n655059\tdefault\t1\t1\t1\t63\t0\t0\n672377\tdefault\t1\t1\t1\t63\t0\t0\n719343\tdefault\t1\t1\t1\t63\t0\t0\n765471\tdefault\t1\t1\t1\t63\t0\t0\n770516\tdefault\t1\t1\t1\t63\t0\t0\n819864\tdefault\t1\t1\t1\t63\t0\t0\n823961\tdefault\t1\t1\t1\t63\t0\t0\n831622\tdefault\t1\t1\t1\t63\t0\t0\n905872\tdefault\t1\t1\t1\t63\t0\t0\n910391\tdefault\t1\t1\t1\t62\t0\t0\n910475\tdefault\t1\t1\t1\t63\t0\t0\n917929\tdefault\t1\t1\t1\t63\t0\t0\n923728\tdefault\t1\t1\t1\t63\t0\t0\n973005\tdefault\t1\t1\t1\t63\t0\t0\n984486\tdefault\t1\t1\t1\t63\t0\t0\n1009734\tdefault\t1\t1\t1\t63\t0\t0\n1093702\tdefault\t1\t1\t1\t63\t0\t0\n1093876\tdefault\t1\t1\t1\t63\t0\t0\n1097862\tdefault\t1\t1\t1\t62\t0\t0\n1097959\tdefault\t1\t1\t1\t60\t0\t0\n1120964\tdefault\t1\t1\t1\t63\t0\t0\n1121555\tdefault\t1\t1\t1\t63\t0\t0\n1140292\tdefault\t1\t1\t1\t63\t0\t0\n1148699\tdefault\t1\t1\t1\t63\t0\t0\n1151843\tdefault\t1\t1\t1\t63\t0\t0\n1169934\tdefault\t1\t1\t1\t63\t0\t0\n1173808\tdefault\t1\t1\t1\t62\t1\t0\n1178278\tdefault\t1\t1\t1\t63\t0\t0\n1200329\tdefault\t1\t1\t1\t63\t0\t0\n1222684\tdefault\t1\t1\t1\t63\t0\t0\n1225400\tdefault\t1\t1\t1\t63\t0\t0\n1238827\tdefault\t1\t1\t1\t63\t0\t0\n1251219\tdefault\t1\t1\t1\t63\t0\t0\n100000065\tdefault\t0\t1\t1\t57\t2\t0\n100002261\tdefault\t0\t1\t1\t58\t1\t0\n100002264\tdefault\t0\t1\t1\t48\t1\t0\n100003686\tdefault\t0\t1\t1\t48\t2\t0\n100003687\tdefault\t0\t1\t1\t57\t2\t0\n100006075\tdefault\t0\t1\t1\t45\t1\t0\n100008184\tdefault\t0\t1\t1\t58\t1\t0\n100008186\tdefault\t0\t1\t1\t48\t1\t0\n100009977\tdefault\t0\t1\t1\t45\t1\t0\n100016849\tdefault\t0\t1\t1\t58\t1\t0\n100016850\tdefault\t0\t1\t1\t48\t1\t0\n100029371\tdefault\t0\t1\t1\t33\t3\t0\n100032620\tdefault\t0\t1\t1\t44\t3\t0\n100033919\tdefault\t0\t1\t1\t44\t3\t0\n100042937\tdefault\t0\t1\t1\t33\t3\t0\n100046335\tdefault\t0\t1\t1\t58\t0\t0\n100047101\tdefault\t0\t1\t1\t58\t0\t0\n100048212\tdefault\t0\t1\t1\t44\t0\t0\n100054945\tdefault\t0\t1\t1\t49\t1\t0\n100054946\tdefault\t0\t1\t1\t58\t1\t0\n100065013\tdefault\t0\t1\t1\t47\t0\t0\n100071636\tdefault\t0\t1\t1\t45\t1\t0\n100086337\tdefault\t0\t1\t1\t32\t2\t0\n100086436\tdefault\t0\t1\t1\t41\t2\t0\n100087720\tdefault\t0\t1\t1\t45\t2\t0\n100091330\tdefault\t0\t1\t1\t45\t1\t0\n100093454\tdefault\t0\t1\t1\t58\t0\t0\n100099604\tdefault\t0\t1\t1\t45\t0\t0\n100099742\tdefault\t0\t1\t1\t49\t0\t0\n100113582\tdefault\t0\t1\t1\t45\t1\t0\n100123406\tdefault\t0\t1\t1\t45\t1\t0\n100123418\tdefault\t0\t1\t1\t58\t0\t0\n100130549\tdefault\t0\t1\t1\t58\t0\t0\n100131718\tdefault\t0\t1\t1\t45\t0\t0\n100137301\tdefault\t0\t1\t1\t58\t1\t0\n100137304\tdefault\t0\t1\t1\t48\t1\t0\n100151878\tdefault\t0\t1\t1\t58\t0\t0\n100162160\tdefault\t0\t1\t1\t45\t5\t0\n100164542\tdefault\t0\t1\t1\t32\t5\t0\n100164895\tdefault\t0\t1\t1\t58\t0\t0\n100165988\tdefault\t0\t1\t1\t37\t5\t0\n100168406\tdefault\t0\t1\t1\t31\t5\t0\n100170614\tdefault\t0\t1\t1\t41\t5\t0\n100176264\tdefault\t0\t1\t1\t45\t1\t0\n100176479\tdefault\t0\t1\t1\t38\t5\t0\n100182621\tdefault\t0\t1\t1\t58\t0\t0\n100184508\tdefault\t0\t1\t1\t44\t2\t0\n100191757\tdefault\t0\t1\t1\t45\t0\t0\n100197000\tdefault\t0\t1\t1\t45\t1\t0\n100204308\tdefault\t0\t1\t1\t45\t1\t0\n100215815\tdefault\t0\t1\t1\t48\t2\t0\n100215819\tdefault\t0\t1\t1\t42\t2\t0\n100215833\tdefault\t0\t1\t1\t58\t2\t0\n100220485\tdefault\t0\t1\t1\t33\t2\t0\n100222799\tdefault\t0\t1\t1\t45\t2\t0\n100223263\tdefault\t0\t1\t1\t58\t0\t0\n100226195\tdefault\t0\t1\t1\t47\t1\t0\n100235573\tdefault\t0\t1\t1\t58\t0\t0\n100238959\tdefault\t0\t1\t1\t58\t1\t0\n100238967\tdefault\t0\t1\t1\t48\t1\t0\n100240462\tdefault\t0\t1\t1\t42\t1\t0\n100242730\tdefault\t0\t1\t1\t45\t2\t0\n100245082\tdefault\t0\t1\t1\t42\t2\t0\n100246488\tdefault\t0\t1\t1\t45\t1\t0\n100249719\tdefault\t0\t1\t1\t39\t2\t0\n100251682\tdefault\t0\t1\t1\t42\t1\t0\n100263700\tdefault\t0\t1\t1\t45\t0\t0\n100277999\tdefault\t0\t1\t1\t45\t1\t0\n100281324\tdefault\t0\t1\t1\t45\t0\t0\n800724672\taves\t0\t1\t0\t3\t0\t0\n800904434\taves\t0\t1\t0\t3\t0\t0\n902003283\taves\t0\t1\t0\t3\t0\t0\n902362807\taves\t0\t1\t0\t3\t0\t0\n915155796\taves\t0\t1\t0\t3\t0\t0\n915207261\taves\t0\t1\t0\t3\t0\t0\n916102739\taves\t0\t1\t0\t3\t0\t0\n916121289\taves\t0\t1\t0\t3\t0\t0\n```\n\n----------------------------------------\n\nTITLE: Third Protein Sequence\nDESCRIPTION: Complex protein sequence with multiple structural elements and binding domains\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nMPIGCKERPTFFEIFETRCSQADLGPISINWFEELSSEAPPYNSETAEESEYKSSSYEPNPFKTPQRKPYHQLASTPVIFKEHGLTLPLYQSPLKELDMDRLDLGKHVTNSKYKSCCTMKAKMDQANDVIIPPL...\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Docker Image\nDESCRIPTION: Dockerfile for setting up the Ensembl REST API environment. It installs necessary dependencies, sets up the application directory, and configures the entry point.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/unmapped_object.txt#2025-04-22_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM ensemblorg/ensembl-vep-base:1.0.0\n\nRUN apt-get update && apt-get install -y \\\n    cpanminus \\\n    libmysqlclient-dev \\\n    libpng-dev \\\n    libssl-dev \\\n    zlib1g-dev \\\n    libbz2-dev \\\n    liblzma-dev \\\n    libexpat1-dev \\\n    graphviz \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN cpanm --installdeps .\n\nWORKDIR /opt/ensembl-rest\n\nCOPY . /opt/ensembl-rest\n\nENV PERL5LIB=/opt/ensembl-rest/lib:/opt/ensembl-vep/modules:/opt/ensembl/modules:/opt/bioperl-live\n\nCMD [\"perl\", \"script/ensembl_rest_server.pl\", \"-p\", \"3000\", \"-d\", \"-m\", \"production\"]\n\n```\n\n----------------------------------------\n\nTITLE: Listing Genomic Repeat Features (TSV)\nDESCRIPTION: This snippet displays tab-separated data detailing genomic repeat features. Columns likely represent: Identifier, Name, Class, Type, and Additional Info/Sequence. It includes examples of LINEs (Long Interspersed Nuclear Elements like CR1), Tandem Repeats (trf), and low-complexity regions (dust). This format is common for bioinformatics data exchange.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/taeniopygia_guttata/core/repeat_consensus.txt#2025-04-22_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\n318468\tCR1AVI\tLINE/CR1\tType I Transposons/LINE\tN\n318489\ttrf\ttrf\tTandem repeats\tT\n319112\ttrf\ttrf\tTandem repeats\tTTG\n346047\ttrf\ttrf\tTandem repeats\tTTTTTGTTGGGTTTGGT\n346048\ttrf\ttrf\tTandem repeats\tTTTTTGTTGGGTTTGGTTTTTGG\n346049\ttrf\ttrf\tTandem repeats\tTTCACTTTG\n346050\ttrf\ttrf\tTandem repeats\tTATATTCAATATTAAAATA\n346051\ttrf\ttrf\tTandem repeats\tTATAGCATACACATTT\n574100\tdust\tdust\tDust\tN\n593461\tCR1-E\tLINE/CR1\tType I Transposons/LINE\tN\n593466\tCR1-X2\tLINE/CR1\tType I Transposons/LINE\tN\n593467\tCR1-Y4\tLINE/CR1\tType I Transposons/LINE\tN\n593468\tCR1-C4\tLINE/CR1\tType I Transposons/LINE\tN\n593536\ttaeniopygia_guttata_4_2\tLINE/CR1\tType I Transposons/LINE\tN\n593540\ttaeniopygia_guttata_64\tLINE/CR1\tType I Transposons/LINE\tN\n593545\ttaeniopygia_guttata_9_2\tUnknown\tUnknown\tN\n593546\ttaeniopygia_guttata_249\tLINE/CR1\tType I Transposons/LINE\tN\n593549\ttaeniopygia_guttata_58\tLINE/CR1\tType I Transposons/LINE\tN\n593556\ttaeniopygia_guttata_33\tLINE/CR1\tType I Transposons/LINE\tN\n```\n\n----------------------------------------\n\nTITLE: Processing Encoded Data Sequences\nDESCRIPTION: A structured sequence of hexadecimal-like codes that appear to be identifiers or reference values used in genomic data processing. The values follow a consistent pattern with specific prefixes and lengths.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/variation/compressed_genotype_var.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n63646322 52086087 81895203818954038189550381895603818968038...\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Routes in Perl\nDESCRIPTION: This code snippet defines the routes for the Ensembl REST API using the Catalyst web framework. It sets up various endpoints for different genomic data queries and specifies the corresponding controllers and actions to handle these requests.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/seq_region_synonym.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nuse strict;\nuse warnings;\n\nsub to_json { return {format => 'json'} }\n\n# Auto-add format to json routes\nmy $json_formats = {map {$_ => to_json()} qw/json jsonp/};\n\n# Auto-add format to compara routes\nmy $compara_formats = {map {$_ => {format => $_}} qw/xml json nh phyloxml orthoxml/};\n\n# Auto-add format to genetree routes\nmy $genetree_formats = {map {$_ => {format => $_}} qw/xml json nh phyloxml/};\n\n# Auto-add format to GFF3 & BED routes\nmy $gff3_formats = {map {$_ => {format => $_}} qw/gff3 bed/};\n\n# Auto-add format to RDF, Turtle and N-Triples routes\nmy $rdf_formats = {map {$_ => {format => $_}} qw/rdf ttl nt json/};\n\nsub fixed {\n  my ($self, $content_type) = @_;\n  return sub {\n    my ($c) = @_;\n    $c->res->headers->content_type($content_type) if $content_type;\n    $c->forward('ReturnStatus'); # ReturnStatus action detects format & renders\n  };\n}\n\nsub static {\n  my ($self, $content_type) = @_;\n  return sub {\n    my ($c) = @_;\n    $c->res->headers->content_type($content_type) if $content_type;\n    $c->res->body($c->stash()->{content});\n    $c->detach();\n  };\n}\n\n__PACKAGE__->config(\n  'Controller::Root' => {\n    # API Definition files\n    'swagger2_json' => '/spec/ensembl.json',\n    'swagger2_yaml' => '/spec/ensembl.yaml',\n    'openapi_json' => '/spec/openapi.json',\n    'openapi_yaml' => '/spec/openapi.yaml',\n  },\n  'Plugin::Cache' => {\n    'backend' => {\n      'class' => 'CHI',\n      'driver' => 'Memory',\n      'global' => 1,\n    }\n  },\n  'Controller::Ga4gh' => {\n    'reference_name_map' => {\n      'GRCh37' => {\n        'x' => 'X', 'y' => 'Y', 'mt' => 'MT'\n      },\n      'GRCh38' => {\n        'x' => 'X', 'y' => 'Y', 'mt' => 'MT'\n      }\n    }\n  },\n);\n\n# Routes for the various endpoints\n__PACKAGE__->add_routes(\n  # Info & Documentation\n  '/api' => 'Documentation',\n  '/documentation' => 'Documentation',\n  '/documentation/info' => 'Info',\n  '/swagger.json' => {action => 'swagger_file', controller => 'Documentation', contenttype => 'application/json', default_file => '/spec/ensembl.json'},\n  '/swagger.yaml' => {action => 'swagger_file', controller => 'Documentation', contenttype => 'application/yaml', default_file => '/spec/ensembl.yaml'},\n  '/openapi.json' => {action => 'swagger_file', controller => 'Documentation', contenttype => 'application/json', default_file => '/spec/openapi.json'},\n  '/openapi.yaml' => {action => 'swagger_file', controller => 'Documentation', contenttype => 'application/yaml', default_file => '/spec/openapi.yaml'},\n  '/metrics' => 'Metrics',\n  \n  # /info\n  '/info/ping'         => 'Info->ping',    \n  '/info/species'      => {action => 'get_species', controller => 'Info', formats => $json_formats},\n  '/info/software'     => {action => 'get_software', controller => 'Info', formats => $json_formats},\n  '/info/rest'         => {action => 'get_rest', controller => 'Info', formats => $json_formats},\n  '/info/analysis/:species' => {action => 'get_analysis', controller => 'Info', formats => $json_formats},\n  '/info/external_dbs/:species' => {action => 'get_external_dbs', controller => 'Info', formats => $json_formats},\n  '/info/biotypes/:species' => {action => 'get_biotypes', controller => 'Info', formats => $json_formats},\n  '/info/compara/methods'      => {action => 'methods', controller => 'Info::Compara', formats => $json_formats},\n  '/info/compara/species_sets/:method' => {action => 'species_sets', controller => 'Info::Compara', formats => $json_formats},\n  '/info/comparas'    => {action => 'comparas', controller => 'Info::Compara', formats => $json_formats},\n  '/info/data' => {action => 'get_data', controller => 'Info', formats => $json_formats},\n  '/info/divisions' => {action => 'get_divisions', controller => 'Info', formats => $json_formats},\n  '/info/genomes/accession/:accession' => {action => 'get_by_accession', controller => 'Info::Genomes', formats => $json_formats},\n  '/info/genomes/assembly/:assembly_id' => {action => 'get_by_assembly', controller => 'Info::Genomes', formats => $json_formats},\n  '/info/genomes/taxonomy/:taxon_name' => {action => 'get_by_taxonomy', controller => 'Info::Genomes', formats => $json_formats},\n  '/info/genomes/division/:division' => {action => 'get_by_division', controller => 'Info::Genomes', formats => $json_formats},\n  \n  # /lookup\n  '/lookup/id'          => {action => 'id', controller => 'Lookup', formats => $json_formats},\n  '/lookup/symbol/:species/:symbol' => {action => 'symbol', controller => 'Lookup', formats => $json_formats},\n  \n  # /overlap\n  '/overlap/id/:id' => {action => 'id', controller => 'Overlap', formats => $json_formats},\n  '/overlap/region/:species/:region' => {action => 'region', controller => 'Overlap', formats => $json_formats},\n  '/overlap/translation/:id' => {action => 'translation', controller => 'Overlap', formats => $json_formats},\n  \n  # Deprecated /phenotype routes\n  '!deprecated_phenotype_routes' => [\n    '/phenotype/term/:species/:term' => {action => 'feature_accession', controller => 'Phenotype'},\n    '/phenotype/region/:species/:region' => {action => 'region', controller => 'Phenotype'},\n    '/phenotype/gene/:species/:gene' => {action => 'gene', controller => 'Phenotype'},\n  ],\n  \n  # /phenotype\n  '/phenotype/gene/:species/:gene' => {action => 'gene', controller => 'Phenotype', formats => $json_formats},\n  '/phenotype/region/:species/:region' => {action => 'region', controller => 'Phenotype', formats => $json_formats},\n  '/phenotype/accession/:species/:accession' => {action => 'feature_accession', controller => 'Phenotype', formats => $json_formats},\n  \n  # /variation\n  '/variation/:species/:id' => {action => 'region', controller => 'Variation', formats => $json_formats},\n  '/variation/:species/pmcid/:id' => {action => 'pmcid', controller => 'Variation', formats => $json_formats},\n  '/variation/:species/pmid/:id' => {action => 'pmid', controller => 'Variation', formats => $json_formats},\n  \n  # /vep routes moved to custom VEP controller\n  '/vep/:species/region' => {action => 'region_post', controller => 'VEP'},\n  '/vep/:species/id' => {action => 'id_post', controller => 'VEP'},\n  '/vep/:species/hgvs' => {action => 'hgvs_post', controller => 'VEP'},\n  \n  # /ga4gh\n  '/ga4gh/features/search' => {action => 'search_features', controller => 'ga4gh::features', methods => ['POST']},\n  '/ga4gh/featuresets/search' => {action => 'search_featuresets', controller => 'ga4gh::featuresets', methods => ['POST']},\n  '/ga4gh/references/search' => {action => 'search_references', controller => 'ga4gh::references', methods => ['POST']},\n  '/ga4gh/callsets/search' => {action => 'search_callsets', controller => 'ga4gh::callsets', methods => ['POST']},\n  '/ga4gh/variants/search' => {action => 'search_variants', controller => 'ga4gh::variants', methods => ['POST']},\n  '/ga4gh/variantsets/search' => {action => 'search_variantsets', controller => 'ga4gh::variantsets', methods => ['POST']},\n  '/ga4gh/datasets/search' => {action => 'search_datasets', controller => 'ga4gh::datasets', methods => ['POST']},\n  '/ga4gh/referencesets/search' => {action => 'search_referencesets', controller => 'ga4gh::referencesets', methods => ['POST']},\n  \n  # These are slightly different routes as they have an ID in the URL\n  '/ga4gh/callsets/:id' => {action => 'get_callset', controller => 'ga4gh::callsets'},\n  '/ga4gh/datasets/:id' => {action => 'get_dataset', controller => 'ga4gh::datasets'},\n  '/ga4gh/features/:id' => {action => 'get_feature', controller => 'ga4gh::features'},\n  '/ga4gh/featuresets/:id' => {action => 'get_featureset', controller => 'ga4gh::featuresets'},\n  '/ga4gh/references/:id' => {action => 'get_reference', controller => 'ga4gh::references'},\n  '/ga4gh/referencesets/:id' => {action => 'get_referenceset', controller => 'ga4gh::referencesets'},\n  '/ga4gh/variants/:id' => {action => 'get_variant', controller => 'ga4gh::variants'},\n  '/ga4gh/variantsets/:id' => {action => 'get_variantset', controller => 'ga4gh::variantsets'},\n\n  # /ld\n  '/ld/:species/region/:region/:d_prime/:r2/:population_name' => {action => 'region', controller => 'LD', formats => $json_formats},\n  '/ld/:species/pairwise/:id1/:id2/:population_name' => {action => 'pairwise', controller => 'LD', formats => $json_formats},\n\n  # /sequence\n  '/sequence/id/:id'        => {action => 'id', controller => 'Sequence', formats => $json_formats},\n  '/sequence/region/:species/:region' => {action => 'region', controller => 'Sequence', formats => $json_formats},\n  \n  # /xrefs\n  '/xrefs/id/:id'           => {action => 'id', controller => 'XRefs', formats => $json_formats},\n  '/xrefs/name/:species/:name' => {action => 'name', controller => 'XRefs', formats => $json_formats},\n  '/xrefs/symbol/:species/:symbol' => {action => 'symbol', controller => 'XRefs', formats => $json_formats},\n\n  # /archive\n  '/archive/id/:id'          => {action => 'id', controller => 'Archive', formats => $json_formats},\n  \n  # /ontology\n  '/ontology/ancestors/:id'    => {action => 'ancestors', controller => 'Ontology', formats => $json_formats},\n  '/ontology/ancestors/chart/:id' => {action => 'ancestors_chart', controller => 'Ontology', formats => $json_formats},\n  '/ontology/descendants/:id'  => {action => 'descendants', controller => 'Ontology', formats => $json_formats},\n  '/ontology/id/:id'           => {action => 'id', controller => 'Ontology', formats => $json_formats},\n  '/ontology/name/:name'       => {action => 'name', controller => 'Ontology', formats => $json_formats},\n\n  # /taxonomy\n  '/taxonomy/id/:id'           => {action => 'id', controller => 'Taxonomy', formats => $json_formats},\n  '/taxonomy/name/:name'       => {action => 'name', controller => 'Taxonomy', formats => $json_formats},\n  '/taxonomy/classification/:id' => {action => 'classification', controller => 'Taxonomy', formats => $json_formats},\n  '/taxonomy/classificationtree/:id' => {action => 'classificationtree', controller => 'Taxonomy', formats => $json_formats},\n\n  # /genetree\n  '/genetree/id/:id'         => {action => 'get_by_id', controller => 'GeneTree', formats => $genetree_formats},\n  '/genetree/member/id/:id'  => {action => 'get_by_member_id', controller => 'GeneTree', formats => $genetree_formats},\n  '/genetree/member/symbol/:species/:symbol' => {action => 'get_by_member_symbol', controller => 'GeneTree', formats => $genetree_formats},\n\n  # /alignment\n  '/alignment/region/:species/:region' => {action => 'get_by_region', controller => 'Alignment', formats => $compara_formats},\n  '/alignment/block_region/:method/:species/:region' => {action => 'get_by_block_region', controller => 'Alignment', formats => $compara_formats},\n\n  # /homology\n  '/homology/id/:id'         => {action => 'get_by_id', controller => 'Homology', formats => $compara_formats},\n  '/homology/symbol/:species/:symbol' => {action => 'get_by_symbol', controller => 'Homology', formats => $compara_formats},\n\n  # /family\n  '/family/id/:id'           => {action => 'get_by_id', controller => 'Family', formats => $compara_formats},\n  '/family/member/id/:id'    => {action => 'get_by_member', controller => 'Family', formats => $compara_formats},\n  '/family/member/symbol/:species/:symbol' => {action => 'get_by_symbol', controller => 'Family', formats => $compara_formats},\n\n  # /map\n  '/map/translation/:id'   => {action => 'translation', controller => 'Map', formats => $json_formats},\n  '/map/cdna/:id'    => {action => 'cdna', controller => 'Map', formats => $json_formats},\n  \n  # /assembly\n  '/assembly/info/:species' => {action => 'info', controller => 'Assembly', formats => $json_formats},\n  '/assembly/info/:species/:region_name' => {action => 'info', controller => 'Assembly', formats => $json_formats},\n\n  # /variant\n  '/variant_recoder/:species/id'           => {action => 'id_post', controller => 'VariantRecoder' },\n  '/variant_recoder/:species/hgvs'         => {action => 'hgvs_post', controller => 'VariantRecoder' },\n  '/variant_recoder/:species/region'       => {action => 'region_post', controller => 'VariantRecoder' },\n  '/variant_recoder/:species/dbSNP'        => {action => 'dbSNP_post', controller => 'VariantRecoder' },\n  '/variant_recoder/:species/mutdb'        => {action => 'mutdb_post', controller => 'VariantRecoder' },\n  '/variant_recoder/:species/rsID'         => {action => 'rsID_post', controller => 'VariantRecoder' },\n\n  # /eqtl\n  '/eqtl/variant_name/:species/:variant_name' => {action => 'variant_name', controller => 'Eqtl', formats => $json_formats},\n  '/eqtl/tissue/:species/:tissue_name' => {action => 'tissue', controller => 'Eqtl', formats => $json_formats},\n  '/eqtl/feature_name/:species/:feature_name' => {action => 'feature_name', controller => 'Eqtl', formats => $json_formats},\n\n  # /regulatory\n  '/regulatory/species/:species/id/:id' => {action => 'features_for_id', controller => 'Regulatory', formats => $json_formats},\n  '/regulatory/species/:species/accession/:accession' => {action => 'features_for_accession', controller => 'Regulatory', formats => $json_formats},\n);\n\n```\n\n----------------------------------------\n\nTITLE: Schema Metadata and Patch History - SQL Records\nDESCRIPTION: SQL data entries documenting the schema type (core), version numbers, and complete history of database patches. Includes patches for schema upgrades, structural changes, and feature additions from version 75 to 113.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/meta.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n1\t\\N\tschema_type\tcore\n2\t\\N\tschema_version\t113\n3\t\\N\tpatch\tpatch_77_78_a.sql|schema_version\n4\t\\N\tpatch\tpatch_77_78_b.sql|source_column_increase\n5\t\\N\tpatch\tpatch_77_78_c.sql|Change unmapped_reason_id from smallint to int\n[...additional patch entries...]\n```\n\n----------------------------------------\n\nTITLE: Database Record IDs and References\nDESCRIPTION: Two database records containing ID values and hexadecimal reference strings used for internal data mapping in the Ensembl REST API system. The data appears to be from a database table with three columns containing IDs and reference values.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/variation/compressed_genotype_var.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n63646323\\tNULL\\t86955E018695...\n63646322\\t16339032\\tEB1401EB1103...\n```\n\n----------------------------------------\n\nTITLE: Running Ensembl REST Server in Development Mode\nDESCRIPTION: Command for running the Ensembl REST API server in development mode with debugging enabled, which automatically restarts the server when code changes are detected.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature_misc_set.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nENSEMBL_REST_CONFIG=conf/ensembl_rest.conf plackup -l :3000 bin/app.psgi\n```\n\n----------------------------------------\n\nTITLE: DNA Sequence from Ensembl Database\nDESCRIPTION: This snippet contains a long DNA sequence, likely from the Ensembl database. It consists of the nucleotide bases A, C, G, and T, and represents a portion of a genome. This sequence can be used for various genomic analyses, including gene identification, mutation detection, or comparative genomics.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/dna.txt#2025-04-22_snippet_4\n\nLANGUAGE: DNA\nCODE:\n```\nAGCAAAGGGGTGCCATTGGATTCTTCCATATGGAAAAAATGGCACCCAGGGACATTCATCAACACTTGCTGAACATTTATGGAGACCAACCTGTTGATGTAAGCACAGTGAGGAAGTGGGTGGTGCATTTCAGCAGTGGCAACAGTGGGTCACCTCTGCTGATGCAGATATCTATGAGCATGGCATGCAGGCTCTTGTTAATTACTGGTGAAAATGCACAGCTAATGGTGGTGATTATGTTGAAAAATAGCATTTTTTAGCCCAGATTTTGCTCTATCAAATAGAGTTATTGTGTTCTTTGTATCTGTTGTACATTCCATAGAAATAAATAGGAAGCATTACTTTTGGAAAACAACCTATGTGTATTTTTCATTTGAAATGAAAGCTTTGTGATTAATCCATACAATAAAAAGGAAAATAATATTCAATAAATTTAAATAATAAATACATTAAATATCTGTAAACTGTTGGATAACCATATTTATGCTATTCACTTAGTTCTAGTGAAAGGGCATTTAGAGCTTCTTCTGGGATTATCATTTAATATTCCCATGTGCCTGAAGAGCAGTTTAAATAAGAGAGGAACAGTCTCAAACTCTTCCTCAAATCCAAATTCCTGATGAAATTTTGCAGCCTGTTTTTCTAAGCTAAGTGTTGGTTCCCTGTTTAGATTCACTGTAAAGCTTGTATGGTTGCTGCCAGTCACTGTAAAGTGCTTCTTCCTCAGAGACCCCTGCAGAGAGGAATAATCACTTCCCTGCTCCTGCTGGCCACACTATTTCTGACAAAGCCAGTATGCCATTGGTCTTCCTGGCCCCCTTGGCACACTGCTGGCTCATGTTCAGCTGAGCACTGATCAACACCCCCAGGTCTGCTTCTTCCACACAGTCTTCTAACCACTTTGCCCCAAGCCTATAGCTTGCCTGGGGTTGCTGTGAACAAAGTGAAGGACCCGGCACTTGGCCTTGTTGAACATCATCCCATTGGCCTCAGCCCAGCAATCCAGTCTGACCAGATCCCTCTGTAGGGCCTTCCTACTCTCAAGCATATTGACACTTCCCCTCAACTTGATATCATCTGCAAACTTACTGAGGGTGCAATCAATCCCCTCGTCCAGGTCATCAATAAAGATACTGAATAGAACCAGACCCAACACTAACTCCTGGGGAGCACCACTCACGACCAGTCACCAGCTGGATTTAACTACACTCACCACCACTCTCTGGGCCTGCCCATCCAGCCAGCTCTTTACCCAGCAAAGAGTGTACCTGTCCAAGCCAGGGGCTGTCAGCTTCTCTGGGAGAATGCTGTGGGAGTGTCAAAGTCTTTGCTAAAATCTTGGTAGACTATTATTGGCCTTTCCCTCATCCACTAGGCTGGTCACCCGCTCGATAGAAAGAAAGGAGGTTGGTCAAACAGGACCTGCTTTTCATCAACCCACGTTGGCTGAGCCTTGTCCCACACGTGCTGTGTGATCACACTATAGATGATCTGCTCCATATCCTTTCCTGGCACCAAGGTCAGGCTGATGGGCCTGTAGTTCCCCGGACTGTTTTTACACCCCTTCTTGTAGATGGGAGTCATACTGGCAAGCTACCAGTCCTCTAGGACCTCTGCAGATGACCAGGATTGCTGATAGATGGTGCAAAGCAGCTTGGCAATCACATCCATCAGTTCCCTCATTACCCTCAGGTGAATCCCATCTGGCCCCATGGACTTGTGACAGTTTAGATGGAGTAGTAGGTCTCAAACTGTTTCCATCTGAATCATGGGGAGTTTATTCTGCTCCCCACTCCCAACTTCAAAGTCAGTGCGTAGAGTACCCTGAGGATAATTGGTCTGACTTTTAATAACAGATGTAGAGAAGGCATTGATAACCTCAGCCTTTTCCTGATGATCACCTTACTTGCAGAAACAAAAATGTTTGTTCTGTATCTGCTCATCTGGCTTAGCTTCTGTACGAGAACTGTTAGGTCAGGGCTTGAGCTGGTGATGGAGCACCTGGTGAAGGGTTGTGCATGAGCACAGGCACATTGTTTGTACCTGTGCTCCCTGTGTGCCCAGAAAGGGTGGACCCAGGGTGGAGCCATGCTGGGCTCATATAAGGGCCCAACACTGAAAGGAGAATATTTCTTGGGCCTAGGCTGCTTCATGAGAAGAAGTACTGTGTGGTTAGATAGCTTTTTTATCAGTTGGGTGTGTTCCACTCTTTCTTCTACATATGACTATTGGCCTGCCCACAAATGCTTTACCTGGTATTGTCAAGAACCTGTCAGAACTGATTTTGCTTCTTTGTGAGCACAACAGCTTCACACAACATTTTGCTTTATTCTAAACGTGGTTACAGTTAAAAAGAGGACTTCCAGTTTTTTAGCTTCTTTCAGTTAACTCCTCTAAGATTTTGTTCATTTTAGAGCAAATGATTCAAGCCCATCCCCTCATCTGTTTCATAAGTCAATCTCTTGCTATACTTTATGGGTATAATGGGCACCTTGAGGGCTTACTTTCAGAAACCATAATCAGTGAACCAAGATGTGCTTTTCAGTCATCTCTTTCAGGGTGTAGTTTTTATGTACCCTCCGTGTAGATGTACAAAATAGGTTTTGTTTACTTCCTGCCCTACTTCTGCCCACCTACTGAAAAAGCTGCCTCAGAAAGAAAATTAATCATATCCAGTGGGGACAGGAGAAGGAATGCTGCCTCAGACTGCAAAGACATAAGCAAGCTAGATGTTAGAAAAATTTTTGTAATGGTAATGATAGTTAAGAGCTGGAGTGGATTGCCAAGAGAAATCACTTCACTGGACATCTTGAAGAATAGGTTAGAAAATGTCTGTCAGGAATAATTTAGGTATTGCTAATCTCGCTCTAGGGTAGAAGGAGGGACCAAATGATCCCATGAAGTCCCCTCCAGACCAATCTTATATGATTCTATTTTTCTCAGGCTACTGAATATATCCAGTATCATCATTCTTACTTCCTTTCTTTAACTTATTTTTTTGAATATATAGATAAAAACCCTCATCAGGACCAAACTATTCCTGCTGGCCTACTGTTGGATAGTAAATATAGATATCCTACCCACAGCAGCACTGCACAATTCTTTAATGCATTCTAAATGTTATTTCATTGTTAGCATTTTGAAATCACGTTGTGCATGCTGCCAGCCATACCATGCTTGGATCTCAGTATGTGATCTTGTACTATCTGGTTTAGTTTACTAAGGGGAGCTCAGCTGATGTATTAAACCTGCCATGCAGAAAATGCACAGGCATAAAAAGAGATATGCACTTGCACAGAATTCAGCGTGGAGTCCTTAATGTCCAACATAACAAGACAAGTAAACGGACAATGATAATGAAGTCAATTATTCATGATAATTTTCTGTTCTGATCAGCTAGAAGTGCGCTGTTCTTCTACCATGAAATGTTGGAGCCCCTTGAGATTAAAAATAGAACAATTTAAAATAGTGTATTTTTGGTTTAGTTTTAATGTGAAATTCCAAGAGGAACAGTAGCATGTTTCTTCTGCTGACTAATGCTTTGGTATCTTCTGCCAGCTTGCATTGTGTTGAGGTGAGAGAGAGACATGGAAGCGAGTAATGGTTCTGTCCTCACAAATAGAAGAAACTATTAGTAAGTCATGTCAATTCTCAGCCTTTTGTTTCTCACACTTTCTTGTGTTTGTTTTACTCTTAAGATGGAGTAACTTTCAGCTCATTTCAGTAGTGTTCTGCTAGTTTGGGTGCAGTGCGGGGGAAGGCTGGAGGCAGCCCATTGGCCCCTGGCAGCCCAGGTGCCGAAGCAGGGCACCATCAAATACCAGTCTGCTCCCACGTGAATAAAAGCTCTCCTGATGAGTTGTGACCTTTTTAGATCCCTCCTCCTCCTTACTGAGTTGCAAATCTTTTCTGGAGGAGATAAATTAGGGAAAACACTTCAAGGCTTTCTTACGTTGTGCTTGTTCTCTTAATCATTGCTTGCCACAAAGATACGGAAACATCATATGATCACTGCTACTGCCATTTACTGATATGAAAAATTATTTTTCTTGAAAACACCATTGTATCAGCTACCAAGTTGCTGTGAGGGATTTCTGTGATGGCAGCTGCAGCTGAGTTGCATGGCAATTCCCAGCTCCCCTCTGCTACCCTGGCAGCATGTGCCCCAGCTGCCAGCAGCTTGGCCTGAAGCAATGCCAGGGACTGCAGAAAGCACTAACTTGTTCTGTCACCCATGAATGCCTGCAGCAATATCCAGAGCACCCAAATCCTTCCTTCTATTTCCCTGGCAGCCATACTTGTTTTGTGCCTGCACAGCTCTGCACTGTGACGGTGATGTATCATGATGAAGGCAAGCTCAAGATCTTTCAGGGCTAGTCCATAAATCTTTCCTGTTTTACATCTGTCAATTGCTATTGCAAATCTGCTCTAAGCCTTCATTACTTTTACAGTTGAAACTGAAAATCTCCCTTTGAAAGATACTCCTCTGTGGGCCAGTCACCAGAATATTCTTAGTTATTACTTATGGCTTCATCACACAAAATAGGCATAAATTAGTAGATTAAAAAGACAGAAGTTTGTTAAAACTCCTTTAATAGTTAATGTTTATTATGGTCTACATGACAAAAATTTAAAAAGGTAATAGAATGCAAAATAATACAAGTCTCACTTCATTTATTATTTATGCTCCTTGCTTTTGAAAACTTAAAAATACTACTTTATTTTAACCACATTTAGAGAAAAAATTTCCTTCTAAACATGGCGTAAGTCTCAAAACCTCAGGTAACACTGATTTTACTACTGATATTACTGATATACTGATTTTACACTGATATAACTACTGTAGGTGAAATGGTGTCAACCAATGAGGTCAAAAGAGTCAAGACTTCATCTCACAGTACTTATTTCTATAGTGGTGATAGAAATTGTATTTATAAAAGCTGGAATTTCAGTGGTGGAGGTGTTACTTTTTGACTTTGAAAAGGTCATTTACCTTATCCTGGTGATGTGTAGTCAACGTGGCATTCCCCCATCCTCCTGAAGTGGTAGTCAAAGATGTTAAAAACTGCAGAAATGTTGGCATTGTCTAGTCAGAGGGGCCCAATCTAAATGTCTGGTCATCAATTTGACTGTTGCAGAATCTTTTGGCCTCATATAAGTCACATGACTCTAAGAGCTGTGAGACAACAGTGCTTTGGCAGAGATTTGTTGCTCAGACTCGCTTGAAATTCTGGTGAGTCAGGCTGTGCCTCTGCAGTTGTTCAGTCATCAACTGTTGGGTAGAATGTAATTTCTGGCATAGCAGTAACTCTGCCTATTTACTTTTCTGAGATTGTTTGATTTGTGGCACAAATTGATTGCTGTTTGCTTGTGAATAACAAAGGAATTTGAACTGATAAGGAGTGGATGATGTCATATTCATGTTAGACTGATAAGAGTTGGAATGAGGGTTAGCGTTGTGACATTATTTCTGTTGTCCTTTTCCTTCTTTTCCTTACTCCTGTTTTTTGTTTGTTTGTTTGTTTGTTTTGTTTGTTTTGTTCTTTGGTTTTTTTTAAGTAATTCCTTAATAATTCTGAATCATGATTCTCAGTAATGAGATAAGTGTCCACCCTCAATTATAAGCCAAGGTGCGCAGGAAGAATACTATATTTAGACTCACTGTCCTCTCACACAACAAAACAACTTTCTGACTGCATAGGAACTGTTGAGTCATGGCCTGAACCACTGGTTGATCACCTGAGGCAAGCACTGAGTCAGCCGCAGGAGCACAGGTGAAGGCAATTCACCTGTGTGACTGGAAGGGGTGGAGCCTGGATCCACCTCTCCTAGACCTCCCTTTGTAAGGGCTGATTGCCACTGGGGAAGGGTCTTTTTCTGGAAATTGCTCCCTTTAGAGTTCTTCTGTGAGCCTAGGAGGACATGGGTTAGCACATCTGTTTATTTTTGATTATCTCTTTTCACCGTGATAATCCTTCTAGTTATACGACCTGTAAAATACCAGCCTAACCACACCACTCTGATAATTGTACATCTGTTGACTGTACACTGACTATCAACCATTTCTCTATTTCTACCTTCATACGGATTATTTCTTTTTCAACATATTTCATACCTTTGAAAATAAAAATGGTGTAGCATGCATTTATTATATTTCTGGTCTTACTCATGCTAAGACTTTCTTCACTAGTGATTTGATTATTAACCTTTTTCACTTGTCCTGTTACTAATATCGCCACTGGGAGTCTTCCACGGGTCTTTAGTCCTGCAGTTTCCAGGCCCCAACCAGAGCTGCTCTGCTGCTAACACTCCTGCAGTCTTCTCTCTGTATGCATTTATTGACCAGAGGCATGCAGTTTGCACTGAAAAAAATGGCTCTGCCTGTCTTTATTTCATGGCTCTACACACAGTGGCTAGTTTCACTGAGTTAGCTGTCTTTGGAGTTATTTTTTGGGCAACTGGGTCTACTGCCCTTGCTCGTGACCAATGACCAAGCAAGTCCTTGTGCAGTCCTGGTGAAAAATCATGAACTGGCTCTCTCCTATCATCTCTAATTGTCCTTTCTTCAGATTCATTATACCTTTGTGAGGACTCTGGTATCTGCCTGTGTGTTTTGCCTCCGACAAAAGACTGACTAGTCCTTGTGTTCCACTGAAATTACATGTTACAGCTGTATTTCCTGCCATTCTTCTTGCAAGCAGGATGTCCACATAAGGGTAGTCCGTTAATTAATTAATTCCCTTAGGGGAAACAACCCAAAGAACAGCAAAATGATCAATTTTGAAGTCATACAAAGCCTCAATCACCTGAAAAGCTGTTTGTTTAAAAACAGGGCAGTAGTTTTGATGTTGATGTTACAGACATTGTTAGTCTTTTGGGTATGTTTTCAGATTTTGTTTTGTTATGTACTTTCTTAGATGATGTATGTAGTAGACAGTAGTGATAAATAACACATAGATAAAGAATCTTTATTTGTAAGAAGTGTAGGGTGAAACAAAATAGACCTGAGATGGATGCCACTCCTCTGCCTTAACACTGGGCTGCCCAATGACCCCAGCATAGGCCTGAGACAGAGCTTTGGAAAGCATCTCACCCCTGGACAGAGTAGGCAAAGCACTCCAAATCTACACTAAGCTTGATGCTTGTTTTTTTTTTTTTTAATTATTATTTTTATTCTGAAGCATGAGACTTAGTAGGAATATGACACAGAAAAATGATTGTGAGGCTGTTTCTCATAATGTTCTTGAGAATGCTAGGCAACTAGGATCTGAATCTTCAGTGTGCTGTTTACAAGTCTCAAGTGTAGCATACAAAATCTGAGCTCTGGAGGGTGTGCTGGCTGTTGTTTTTTATCTCTGAGAAAGTACATGTGGAGTTCTAAATGTCGGCCTCCTACCCAACACAACTGGATGATAACCTTAGCCATGAATTAAAAAGGCTGCTTGTTAAAAACATTATGTTGCCAGCATTCTTCCAAGTTTTTTGTGGTTTTTGTTTTTTTTTTTTCAATTCAGGCAAATCTAACAGCTTCCTCTGCCTTGAAATGATACACTAAGGTTAATTATAGCTCTGGAACACCCTAAGGTATGGTTTGGCTGCTTGGGTACGAGAAGAGCATAAGCAGTGCACCTGGAGAGGGATCTTGACTTGCAGTGTTCATGTAGGTGTGAGAAGAGCCAAACAAGCACATTGCCTGGTATTCATCAAGGTGCTTGGGGAGAGCCCCATCACACTGCATGAGGCAGAAGCTGCATCTTCCATGTATTTCCCCACTGGTGCTCCCCACAACCTGTGAATGCTGCTCTTTGGAGTAGCAGTAACTCATGTTGCATTTTGCTGCCTGTTGAAATCCATACCTACAACCGTCCCATTCCTTGACACCTCTCCCCCTCTCTTCCTGCCATCCAGCCCACACCCATTGCTAACATATGTCCCAGAGGTGGTTCAGATGCTTTCATAGGGGGTAGATGACAGCTAGGCAGCCTTCCCTCCAGCTAATCCTACCTCTCCCCATCCCTCTGTGCCCTACCCATGCATGCTAACACATTGCTTCCCACTCACTTCTCTATAAAGGGAATTTGTTACCCTTCACACCATAGCAGAAGGAAATCTTAAAATGTTTTTTTTTTTTTTTTTAATCCCATAGGGAAGGCCTTCAGAGATAGAAAAGATATTTTAATATATCTCAGAGATGGAGGTGCTATGGAATAGGCTGCATAGAGAAGTGAGCTCACAGGCTGACAATTACAGTCTGGCTGGCTAGTGGGGGTTCCCACTGCATCCTCTGTGCAAGCCTATTCCTGGAAAACCTGTGAATTTGCTGATGGAAAGCCATTTGGAAGGCTGTGAGGAACACTTGTTTCTGTTAAGGTCTCATTTCTCCTCTTTGGAGAATCAAAGAATAGAATTATTTGAGTTGGAAGGGACCCTCAAAGGCCATTTTTTCCAATTTGCCTGCAATAAGCAGGGGCACCTACAGCTAGAGCAGGTTGTTCAGAGCCCTGTCCAGCCTGACCTTGAGTGTTTCCAGGGATGGGGCATCCACCACCTCTCCAGGCAATATGTTCCTGTGCTTCCCCACTCTTACCGTTTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACACCTCCTTCCTTATATCCAATCTAAATCTCTCCTCTAAAGAGGATAAAAAACAGCAGCACCAATGGCCCTGTGCTGATAGCAACCCAATCCACTGAGAGTCAGGGACAGAAAAACCCATCTGATCTTACATAGGATCAGTTTCCTGCTTACAGCCCCCAAGATGTAAGAGCTCACAATAGAGATAATTTTTGAGCTTTCCATAGTATTTGATGAGGAATTACTGATTAATCTTCTCCTGCTAAAGCTAGTATTTAGAAGGGGGGAGAGGGACTGGGCCCATTAATGTAAGCAGAATTTGTTTAAGTTGAGGGGAAAAAATGCAGCTCAGATTTTCCCCTTGACAGACCTTCAGCAAAACTCAGGATATGATCAACTGAATGTGTAGCAAATGCCTAATTAATTCCTTGCCTGCCTTCAGATAAAAAACAACTTTTTAATTTTTAGTGTTTTCTCATTACTGAATAGTTCTCATCAGTGAATAGTGAATAGCTGTACACACAAATATCTGCCTTCTGATGTCAGAATTGCTTCCTTACTGCTATAAATGGATATTTAGCATAGTTATCTGTAGTGAAACAAGCAAGATTGGCAATGCAAGCATTGTATAGTGTAAATGTATTACTGTGCTGGGCTTTTCCTTGTTTTCTGCTTTCAAATATCTTCATCTTAAAAAATGTGAAAGTAACTTTTTTTAGCAAGTTTCCCATTGCTGTAGAGAAGGACAATTCCTTTTTCAACTGCAGTGCTGACCTGTCCTTTCCAGTCACTAAGGAAAGTGCTTTCCTTCATGAAAAGCACATTAAAAAGCTTTAAATCCTACCACTTCTGTAATGATGTGACGAATGCTGTGAAAGCAAATTGCTCTATGAATCCTAATTAGTTGGAAGTCGGGTCCCCAATTCATCTGGGCTGTAAAAATCAGAATATATTCTAAGAGGTGATAGATGTGTCACATTTTTATATATCCTCTCTGTTTCTTGAGTCCTTGAACTTTGTGTGCTTTCTTCACCAACTGTGAAAACTAGAGGGTTTTTCCTTTAACTGAAAAGGTTTTTTCAAGCCTCATGAGGGGAGATTTAAAAAAAAAAAAAAAAAAAAGTAATGTATTGCAGAAGTGTAATAAATTGCAATCTGTGGCAGCACTACGTTATTCCTCCCTCTAGTGGCTGGCTGGCTCCAGGGAGAATAACCAGAGCTCTTTATTAACGTCTCATTGAATTATTTCATTAGTTTAGCTACTGGGAACTTAAGTTTTTCAGGCTAACATCCTCCAATGCCCTGCCCACTTGGTAATCCTTGGTGCCCCTGTATATGTGGCTGTGACTGTGTGACATATGATGGGCCTTGAAATTTTTCAAGGGTACC\n```\n\n----------------------------------------\n\nTITLE: Querying Gene Information from Ensembl REST API in Python\nDESCRIPTION: This code demonstrates how to retrieve gene information using the Ensembl REST API. It queries for the BRCA2 gene and prints its location and description.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/transcript_intron_supporting_evidence.txt#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ngene = client.symbol_lookup('human', 'BRCA2')\nprint(f\"Gene: {gene['display_name']}\")\nprint(f\"Location: {gene['seq_region_name']}:{gene['start']}-{gene['end']}\")\nprint(f\"Description: {gene['description']}\")\n```\n\n----------------------------------------\n\nTITLE: Processing Hexadecimal Data\nDESCRIPTION: Large sequence of hexadecimal values, potentially representing binary data or encoded information\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/variation/compressed_genotype_var.txt#2025-04-22_snippet_2\n\nLANGUAGE: hex\nCODE:\n```\n86955E0486955F028695600686956106869562068695630C8695640486956504869566048695670C86956806869569068695\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Docker Image\nDESCRIPTION: This Dockerfile sets up a Docker image for the Ensembl REST API. It installs system dependencies, Perl modules, and configures the application environment. The image is based on ensemblorg/ensembl-base and includes steps for installing additional tools and setting up the application.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/transcript_intron_supporting_evidence.txt#2025-04-22_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM ensemblorg/ensembl-base:release-111\n\nLABEL maintainer=\"ensembl-webteam@ebi.ac.uk\"\n\nUSER root\nRUN apt-get update && apt-get install -y \\\n    libdevel-graph-perl \\\n    libcustom-installers-perl \\\n    libio-socket-ssl-perl \\\n    libjson-xs-perl \\\n    libjson-perl \\\n    libplack-perl \\\n    libwww-perl \\\n    libserver-starter-perl \\\n    libcarp-clan-perl \\\n    libstd-storable-perl \\\n    libnet-openssh-perl \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN cpanm -n \\\n    Catalyst::Engine::PSGI \\\n    Catalyst::Devel \\\n    Catalyst::Plugin::Cache::FastMmap \\\n    Catalyst::Plugin::ConfigLoader \\\n    Catalyst::Plugin::Static::Simple \\\n    CHI::Driver::Memcached \\\n    XML::Atom \\\n    XML::RSS \\\n    Readonly \\\n    File::Slurp \\\n    Digest::MD5::File \\\n    Package::DeprecationManager \\\n    Sereal::Encoder \\\n    Sereal::Decoder \\\n    Cache::Memcached \\\n    DBI \\\n    DBD::mysql\n\nRUN mkdir -p /opt/ensembl-rest && chown -R tools /opt/ensembl-rest\n\nUSER tools\n\nWORKDIR /opt/ensembl-rest\n\nCOPY --chown=tools:tools . /opt/ensembl-rest\n\nRUN cpanm -n --installdeps .\n\nRUN mkdir -p /opt/ensembl-rest/logs\n\nEXPOSE 3000\n\nCMD [\"/opt/ensembl-rest/ensembl_rest_entrypoint.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Querying Variant Consequences with Ensembl REST API\nDESCRIPTION: This code snippet demonstrates how to use the Ensembl REST API to retrieve variant consequences. It shows an example GET request to the /vep/human/id endpoint with a specific variant ID.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/density_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://rest.ensembl.org/vep/human/id/rs56116432?content-type=application/json' | json_pp\n```\n\n----------------------------------------\n\nTITLE: Creating URL Building Functions in JavaScript for Ensembl REST API\nDESCRIPTION: This module provides functions for building properly formatted URLs for the Ensembl REST API. It includes methods to set hostname, path components, and format parameters, as well as utility functions for URL manipulation.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/dependent_xref.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nEnsembl.Url = (function() {\n  var _locationHost = (typeof window !== 'undefined' ? window.location.host : '');\n  var _enabled = true;\n\n  var defaultHostname = function() { return 'www.ensembl.org'; };\n  \n  var reset = function() {\n    _enabled = true;\n  };\n\n  var disable = function() {\n    _enabled = false;\n  };\n\n  var formatParams = function (paramObj) {\n    if (!paramObj || Object.keys(paramObj).length === 0) {\n      return '';\n    }\n    var params = Object.keys(paramObj).map(function(key) {\n      return key + '=' + encodeURIComponent(paramObj[key]);\n    }).join('&');\n    return '?' + params;\n  };\n\n  var formatBaseUrl = function (hostname) {\n    _enabled = _enabled || false;\n    \n    if (!_enabled) {\n      return '';\n    }\n    \n    if (hostname === undefined) {\n      hostname = defaultHostname();\n    }\n    \n    /*\n      The reason we're doing this rather than returning a fully formed URL with\n      the protocol attached is because we want URLs to work over both HTTP and\n      HTTPS, and relative URLs are protocol agnostic. Hence, when on ensembl.org\n      and linking to www.ensembl.org we want to output //www.ensembl.org/foo, not\n      http://www.ensembl.org/foo.\n    */\n    if (hostname.match(/^https?:\\/\\//)) {\n      return hostname;\n    } else if (hostname === _locationHost) {\n      return '';\n    } else {\n      return '//' + hostname;\n    }\n  };\n\n  var construct = function (args) {\n    args = args || {};\n    var url = formatBaseUrl(args.hostname);\n    var path = args.path || '';\n    \n    // Strip leading slashes from path if URL is non-empty\n    url += ((url !== '' && path.indexOf('/') === 0) ? path.substr(1) : path);\n    url += formatParams(args.params);\n    \n    return url;\n  };\n  \n  return {\n    formatBaseUrl: formatBaseUrl,\n    formatParams: formatParams,\n    defaultHostname: defaultHostname,\n    construct: construct,\n    reset: reset,\n    disable: disable\n  };\n})();\n```\n\n----------------------------------------\n\nTITLE: Implementing Transcript Info Endpoint in Perl\nDESCRIPTION: Defines an endpoint for fetching transcript information by ID. This handler extracts the transcript object from the database and processes request parameters like expand_3prime_utr and expand_5prime_utr.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/dna_align_feature.txt#2025-04-22_snippet_2\n\nLANGUAGE: Perl\nCODE:\n```\nsub id : Chained('transcript') PathPart('') Args(0) ActionClass('REST') {}\n\nsub id_GET {\n  my ($self, $c) = @_;\n  my $transcript = $c->stash()->{transcript};\n  $self->status_ok( $c, entity => $transcript );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transcript Haplotype Module for Ensembl REST API in Perl\nDESCRIPTION: A module that handles transcript haplotype operations in the Ensembl REST API. It defines how to retrieve CDSHaplotype and ProteinHaplotype information for a specified transcript and includes logic for population filtering.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/seq_region_attrib.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\npackage EnsEMBL::REST::Model::ga4gh::TranscriptHaplotypes;\n\nsub fetch_by_transcript {\n  my ($self, $stable_id, $population_name) = @_;\n  my $c = $self->context();\n  my $species = $c->stash->{species};\n  \n  # Fetch transcript\n  my $transcript = $c->model('Lookup')->find_object_by_stable_id($stable_id);\n  Catalyst::Exception->throw(\"Could not find transcript with ID $stable_id\") if ! defined $transcript;\n  \n  # Some processing and filtering on the transcript based on population\n  \n  my $cdsh = {};\n  my $proth = {};\n  \n  try {\n    # Get CDSHaplotypes and ProteinHaplotypes\n    # Business logic here\n  } catch {\n    my $error = $_;\n    Catalyst::Exception->throw($error);\n  };\n  \n  return {\n    cdsHaplotypes => $cdsh,\n    proteinHaplotypes => $proth\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Caching in Perl\nDESCRIPTION: This snippet sets up the caching configuration for the Ensembl REST API. It defines the cache time and size for different types of data, such as VEP results and sequence data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/meleagris_gallopavo/core/translation_attrib.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\n  cache => {\n    default => {\n      driver => 'CHI',\n      driver_options => {\n        chi_class => 'CHI::Driver::Memory',\n        global => 1,\n        expires_in => '24 hours',\n        expires_variance => 0.2,\n        key_prefix => 'ens_rest',\n      },\n    },\n    vep => {\n      driver => 'CHI',\n      driver_options => {\n        chi_class => 'CHI::Driver::Memory',\n        global => 1,\n        max_size => 2000000000,\n        expires_in => '24 hours',\n        expires_variance => 0.2,\n        key_prefix => 'ens_rest_vep',\n      },\n    },\n    sequence => {\n      driver => 'CHI',\n      driver_options => {\n        chi_class => 'CHI::Driver::Memory',\n        global => 1,\n        max_size => 6000000000,\n        expires_in => '24 hours',\n        expires_variance => 0.2,\n        key_prefix => 'ens_rest_sequence',\n      },\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Generating Ensembl API URL with Parameters in Perl\nDESCRIPTION: This function constructs a URL for the Ensembl API, incorporating various parameters. It handles different data types, including arrays and hashes, and formats them appropriately for the URL.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/splicing_event.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nsub _url {\n  my ($self, $path, $params) = @_;\n  my $url = $self->rest_server() . $path;\n  if ($params) {\n    my @params;\n    foreach my $key (keys %$params) {\n      my $value = $params->{$key};\n      next unless defined $value;\n      if (ref($value) eq 'ARRAY') {\n        push @params, $key . '=' . join(',',@{$value});\n      }\n      elsif (ref($value) eq 'HASH') {\n        while (my($k,$v) = each %{$value}) {\n          push @params, $key . '=' . $k . ':' . $v;\n        }\n      }\n      else {\n        push @params, $key . '=' . $value;\n      }\n    }\n    $url .= '?' . join(';', @params) if @params;\n  }\n  return $url;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Ensembl Database Configuration with Server URL Option\nDESCRIPTION: This code loads the Ensembl database configuration from a server URL or specified configuration file. It parses options for database configuration, recognizing short forms like -ASSEMBLY and determining the appropriate database connection based on the provided parameters.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/species_tree_node_tag.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nsub load_registry_for_opts {\n  my ($self, $opts) = @_;\n  \n  my $reg = 'Bio::EnsEMBL::Registry';\n  \n  # Process options\n  my $db_opts = { host => $opts->{host}, port => $opts->{port}, user => $opts->{user}, pass => $opts->{pass} };\n  \n  # connect to databases\n  if ($opts->{db_url}) {\n    $reg->load_registry_from_url($opts->{db_url});\n  } elsif ($opts->{config}) {\n    $reg->load_all($opts->{config});\n  } elsif ($opts->{reg_file}){  \n    $reg->load_all($opts->{reg_file});\n  } else {\n    # Using DB params\n    my $args = {%{$db_opts}};\n    \n    # Look for any options of form SPECIES_OPT\n    foreach my $o (keys %{$opts}) {\n      my ($species, $opt) = $o =~ /^(\\w+?)_(host|port|user|pass|db)$/;\n      next unless $species;\n      $species = lc($species);\n      $self->{_species}->{$species}->{$opt} = $opts->{$o};\n    }\n\n    # Look for any options of form -OPT\n    foreach my $o (keys %{$opts}) {\n      my ($opt) = $o =~ /^-(\\w+)$/;\n      next unless $opt;\n      $opt = lc($opt);\n      $self->{_species}->{$opt}->{db} = $opts->{$o};\n    }\n    \n    $reg->load_registry_from_db(%{$args});\n  }\n  \n  return $reg;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Type Mappings for Ensembl REST API in Perl\nDESCRIPTION: This configuration snippet defines content-type mappings for various response formats in the Ensembl REST API. It specifies the MIME types for JSON, XML, YAML, and other formats.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/data_file.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\n{\n  name => 'View::Custom::ContentType',\n  content_type_map => {\n    'text/x-yaml'         => 'YAML',\n    'text/yaml'           => 'YAML',\n    'application/yaml'    => 'YAML',\n    'application/json'    => 'JSON',\n    'text/javascript'     => 'JSONP',\n    'text/x-fasta'        => 'Fasta',\n    'text/plain'          => 'Text',\n    'text/x-seqxml+xml'   => 'SeqXML',\n    'text/x-orthoxml+xml' => 'OrthoXML',\n    'text/x-phyloxml+xml' => 'PhyloXML',\n    'text/xml'            => 'XML',\n    'application/xml'     => 'XML',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable References in YAML Configuration\nDESCRIPTION: Demonstrates how to use environment variables in the YAML configuration for the Ensembl REST API. The example shows setting a port from an environment variable with a default fallback value.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/map.txt#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\\nname: EnsEMBL::REST\\nstarman_config:\\n  port: ${PORT-5000}\n```\n\n----------------------------------------\n\nTITLE: Handling Cache Exceptions in Ensembl REST\nDESCRIPTION: Implementation showing how to handle exceptions when working with the cache in the Ensembl REST API, allowing the application to continue functioning even if the cache is unavailable.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/dnac.txt#2025-04-22_snippet_3\n\nLANGUAGE: Perl\nCODE:\n```\nsub get_gene : Chained('/') Args(1) {\n  my ($self, $c, $id) = @_;\n  my $key = 'get_gene:'.$id;\n  my $cached_content;\n  try {\n    $cached_content = $c->cache->get($key);\n  } catch {\n    $c->log->warn(\"Could not get cache for $key: $_\");\n  };\n  \n  if ($cached_content) {\n    $c->stash->{data} = $cached_content;\n  } else {\n    my $gene = $c->model('Gene')->get($id);\n    $c->stash->{data} = $gene;\n    try {\n      $c->cache->set($key, $gene);\n    } catch {\n      $c->log->warn(\"Could not set cache for $key: $_\");\n    };\n  }\n  $self->status_ok($c);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ensembl REST API Controller for Homology Endpoints in Perl\nDESCRIPTION: A controller module for the Ensembl REST API that handles homology-related endpoints. It includes configuration for URL paths and defines the RESTful actions for retrieving homology data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/seq_region_attrib.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\npackage EnsEMBL::REST::Controller::Homology;\nuse Moose;\nuse namespace::autoclean;\nuse Try::Tiny;\n\n__PACKAGE__->config(\n  map => {\n    'text/x-yaml' => 'YAML',\n    'text/yaml' => 'YAML',\n    'application/json' => 'JSON',\n  }\n);\n\nbegin : Private {\n  my ($self, $c) = @_;\n  $c->stash->{no_content_type} = 1;\n}\n\n# URL mappings\nsub homology_symbol : Chained('/') PathPart('homology/symbol') Args(2) ActionClass('REST') {\n  my ($self, $c, $species, $symbol) = @_;\n  $c->stash->{species} = $species;\n  $c->stash->{stable_id} = $symbol;\n  $c->log->debug(\"Working with species $species and symbol $symbol\");\n  my $lookup = $c->model('Lookup');\n}\n```\n\n----------------------------------------\n\nTITLE: Querying VEP with HTTP::Tiny in Perl\nDESCRIPTION: Example of using Perl with HTTP::Tiny to query the Variant Effect Predictor REST API. Demonstrates sending a GET request with headers and parsing the JSON response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/external_synonym.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\nuse strict;\nuse warnings;\nuse HTTP::Tiny;\nuse JSON;\n\nmy $http = HTTP::Tiny->new();\n\nmy $server = 'https://rest.ensembl.org';\nmy $ext = '/vep/human/hgvs/ENST00000494142:c.48C>A?';\nmy $response = $http->get($server.$ext, {\n  headers => { 'Content-type' => 'application/json' }\n});\n\ndie \"Failed!\\n\" unless $response->{success};\n\nif(length $response->{content}) {\n  my $hash = decode_json($response->{content});\n  print $hash->[0]{most_severe_consequence}, \"\\n\";\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Ensembl REST API\nDESCRIPTION: Apache configuration for setting environment variables used by the Ensembl REST API. These variables define paths, configuration files, and other settings necessary for the API's operation.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/CAFE_gene_family.txt#2025-04-22_snippet_1\n\nLANGUAGE: Apache\nCODE:\n```\nSetEnv ENSEMBL_REST_CONFIG /ensembl/ensembl-rest/configurations/production/ensrest.conf\nSetEnv ENSEMBL_REST_LOG4PERL /ensembl/ensembl-rest/configurations/production/log4perl.conf\nSetEnv PERL5LIB /ensembl/ensembl-rest/lib:/ensembl/ensembl/modules:/ensembl/ensembl-compara/modules:/ensembl/ensembl-funcgen/modules:/ensembl/ensembl-variation/modules:/ensembl/ensembl-io/modules:/ensembl/ensembl-vep/modules\nSetEnv ENSEMBL_SERVERROOT /ensembl\nSetEnv ENSEMBL_REST_DOC_URL http://rest.ensembl.org/documentation\nSetEnv CATALYST_SCRIPT_GEN HTTP\nAddHandler fcgid-script .fcgi\nFcgidPassHeader Authorization\n```\n\n----------------------------------------\n\nTITLE: Database ID Mapping Records\nDESCRIPTION: Tabular data showing relationships between different IDs and versions. Each row contains 7 columns of numeric values representing IDs and version numbers.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/ontology/closure.txt#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n20597\t1780\t947\t1415\t9\t1\t0\n20598\t1783\t1\t1291\t9\t1\t0\n20599\t1791\t87\t1\t9\t1\t0\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Database Connections in Perl\nDESCRIPTION: Sets up database connection parameters for the Ensembl REST API, including the host, port, and user credentials. It also configures the database search path and connection timeout.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/splicing_transcript_pair.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n  name => 'ensembl_rest',\n  # Config for REST server\n  service_name => 'Ensembl REST API',\n  service_logo => 'ensembl_logo.png',\n  service_colour => 'indigo',\n  default_content_type => 'application/json',\n\n  # Database connection\n  databases => {\n    homo_sapiens => {\n      host => \"ensembldb.ensembl.org\",\n      port => 3306,\n      user => \"anonymous\",\n      pass => \"\",\n      species => \"homo_sapiens\",\n    },\n  },\n\n  # Database search path\n  db_search_path => [qw/homo_sapiens/],\n\n  # Connection timeout in seconds\n  connection_timeout => 30,\n```\n\n----------------------------------------\n\nTITLE: Retrieving Species Information with Perl\nDESCRIPTION: A Perl script that retrieves and displays information about species in Ensembl using the REST API. It makes an HTTP request to the /info/species endpoint and parses the JSON response.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/protein_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nuse strict;\nuse warnings;\nuse LWP::UserAgent;\nuse JSON;\nmy $ua = LWP::UserAgent->new;\nmy $server = 'https://rest.ensembl.org';\nmy $ext = '/info/species';\nmy $response = $ua->get($server.$ext, 'Content-Type' => 'application/json');\ndie \"\" if $response->is_error;\nmy $info = decode_json($response->content);\nfor my$sp (@{$info->{'species'}}){print $sp->{'display_name'}.\"\\n\";}\n```\n\n----------------------------------------\n\nTITLE: Protein Sequence Analysis in Ensembl REST API\nDESCRIPTION: This snippet contains two protein sequences, likely from related genes or proteins. The sequences are represented in single-letter amino acid code and are of considerable length, suggesting they are full-length protein sequences.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nMSIGSKERPTFFEIFKTRCNKADLGPISLNWFEELSSEAAPYNSEPAEDSEHKNNNYEPNLFKTPQRKPSYNQLASTPIIFKDQGLTLPLYQSPVKELDTFRLDLGRNVPSSRHKSLRIVKAEMHQADDVTCPLLNSCLSESPVVLQCTHVTPQRDKSVVCGSLFHTPKFVKGRQTPKHISESLGAEVDPDMSWSSSLATPPTLSSTVLIVRNEESSETLFPHDTTANVKSYFSNHDKSLKKNDRCIPSVTDSENTNQREATSHRFGRTLGNSFKVNSCKDHIGKSMPNVLEDEVCETVVDTSEEDSFSLCFSKCRTGNLQKVRTSKTRKKIFHEANADECEKSKNQVKEKYSFVSEMESSDTDPLDSNVANQKPFESGSDKISKEVVPSLACEWSQLTLSGLNGTQMEKIPLLHISSCDQNNSEKDLLSTENERKKDFLTSENSLPHISSLPKSEKPLNEETVVNKRDEEQHLESQRDYILAVKQAVSETSPIASSFQGIKKSIFRIRESPKETFSASFSGHVTDPNFKKETEASESGLEIHTVCSRKDDSLCPNSIDNGSWPAATTQTSVASKNAGLISTLKKKTKFIYAIHDETSYQGKKIPKDQKSELMNCSAQFEANAFEAPLTFANADSGLFHSSVKRSCSQNYSEEPTLSLTSSFGTILRKCSRNETCSSNNTIISQDLDYKEAKCNKEKLQLFITPEADSLSFLQEGQYENDPKSRKVSDIKEEVLAAAHHPVQHSKAEYSDTDFQSQKSPLYDHENASTLILTPTSKDVLSNLLMISRGKESYKMSDEIKGNNYESDFELTKNIPMEKNQDVCALSENSKHVELLPPEKYIRGASPSRKVQFSQNTNLRVIQKDQEETTLIPKITVHPDSEELFSDNENNFLFQVANERNNFALGNTKELHETDLTCVNEPIFKNSTMVLYADIGDKQATQVSIKKDLDSSNIVYDLAEENKNSVKQHLKMTLGQDLQPDILNIDKIPDKIDDCMDKWAGPLDPISNHSFGGSFRTASNKEIKVSEHNIKKSKMFFKDIEEQYPTSLACVEIVNTLALDNQKKLSKPQSINTVSAHLQSSVVVSDCKNSHITPQMSFSKQDFNSNHNLTPSQKAEITELSTILEESGSQFEFTQFRKPSYILQKNTFEVPENQVTILNTTSEENRDAGLVIMNAPSIGQVNSSKQFEGTVGIKQKFAGLLKSDCNKSASGYLTDENEVEFRGFYSAHGVKLNVSTEALQKAVKLFSDIENISEETSAEVDPISLSSSKFHDSVVSVFKIENHNDKTVSEKNKCQLMLQNNIEMTTGTFVEEITENYKINTENEDNKYTAASRNSRNLEFVSSDSSKNDTVCIHKDEKDLPFTDQRNICLKLSGQLMKEGNTQIKEGLSDLTFLEVVKAQETCHGNTSNKEQLTATKTEQNIKDFETFGISFQTASGKNISVTKESFNKIVNFFDPKPEELHNFSLNSKLHSDIRKNKMDILSHEETDTVKNKILKESVPVGTGNQLVTFQERPQGDEEIKEPTLLGFHTASGKKVKITKESLDKVKNLFDEKEQGTSEITSSSHQWAKTLKYREACQDLELACETVEMTTAPKCKEMQNSLNNDKNLVCIETVVPPKLLSDNLCRQTENLKTSKSIFLKVKVHENVEKETAKSPTTCYTNQSPYSVIENSALAFYTSCSRKRSVSQTSLLEAKQWLREGIFDDQPERINTADYVGNSLYENNSKNTIAESDKNHPSEKQDTTLNNSSMSNSYSYLSDEVYSDSGYLSKNKLDSGIEPVLKKVEDQKNTSFSKVISSVKDANTYPQTVNEGICVEELVTSSSPCKNKNAAIKLSISNCNNFEVGPPAFSTASGKIICVSHETIKKVKEIFTDSFGKVIKENNENKSNICQTKIVAGCYEALDDSEDIFHNSLDSDECSMHSHKVFADIQSDEILQRNQNMSGLEQVSKMSPCDVSLETSDICKCSIGKLPKSVPSTNTCGIFSTASGKSVQVSDASLQKARQVFSEIEDSTKQVFSKVLFKSNEHSDQLTREENTTIHTPKHLISSQKDFSYNVVNSSAFSGFSTASGKQVSISESSLHKVKGMLEEFDIIRTEHSLHYSPTSRQNVSKILPCVDKRTPEHCVNSEMEKACSKEFNLSNNFNVEGGSSENNHSIKVSPSLSQFKQDKQQLVLGTKVSLVENIHVLGKEQASPENVKMEIGKTEAFSDVPVKTNIEVCSTYSKDSENYFETEAVEIAKAFMEDGELTDSELPSHATHSLFTCPQNEEMVLSNSRIGKRRGEALISAGEPPIKRNLLNEFDRIIENQEKSLKPSKSTPDGTIKDRRLFMHHVSLEPITCVPFCTTKERQEIQNPNFTAPGQEFLSKSHLYEHLTLEKSSSNVAVSGHPFYQVSATRNEKMRHLITTGKPTKVFIPPFKTKSHFHRDEQCVRNINLEENKQKQNIDGHGSGDSKNKINDNEIHQFNKNNSNQAATVIFTMCEEEPLDLITSLQNARDIQDMRIKKKQRQRIFPQPGSLYLAKTSTLPRISLKAAVGGQVPSACSHKQLYMYGVSKHCIKISSKNAESFQFYTQDYFGKESLWAGKGIQLADGGWLIPSNDGKAGKEEFYRALCDTPGVDPKLISRIWVYNHYRWIIWKLAAMECAFPKEFANRCLSPERVLLQLKYRYDMEIDRSRRSAIKKIMERDDTAAKTLVLCVSDIISLSANISETSSNKTSSADTQKVAIIELTDGWYAVKAQLDPPLIALLKNGRLTVGQKIILHGAELVGSPDACTPLEAPESLMLKISANSTRPARWYTKLGFFPDPRPFPLPLSSLFSDGGNVGCVDVIIQRAYPIQWMEKTSSGLYIFRNEREEEKEAAKYVEAQQKRLEALFTKIQEEFEEHEEDTTKPYLPSRALTRQQVRALQDGAELYEAVKNAADPAYLEGNFSEEQLRALNNHRQMLNDKKQAQIQLEIRKAMESAEQKEQGLSRDVTTVWKLRIVSYSKKEKDSVILSIWRPSSDLYSLLTEGKRYRIYHLATSKSKSKSERANIQLAVTKKTQYQQLPVSDEILFQVYQPREPLHFSKFLEPDFQPSCSEVDLIGFVVSVVKKTGLAPFIYLSDECYNLLAIKFWIDLNEDIIKPHMLIAASNLQWRPESKSGLPTLFAGDFSVFSASPKEGHFQETFNKMKNTVENIDILCNEAENKLMHILHANDPKWSTPIKDCTSESYTAQIIPGTGNKLLISSPNCELYYQSPLSLCMAKRKSVSTPVSAQITSKSCKGEKEIDDQKNCKRRRALDFLSRLPLPPPVSPICTFVSPAAQKAFQPPRSCGTKYETPIKKKELNSPQMTPFKKFNEISLLESNSIADEELALINTQALLSGSTGEKQFISVNESTRTTPTSSKDYLRLKRRCTTSLIKEQESSHSGKEECENNKQDTIITKKY\n```\n\nLANGUAGE: text\nCODE:\n```\nMPIGCKERPTFFEIFKTRCNEADLGPISLNWFEELSLEAPSYNSEPTEESGYKISYEPNLFKTPQRKPYHQLASTPIIFQEQGLIVPMYQQSPLKELGRNRLDSGKDITNSKHKSFCTMKSKMDQTNDVTSPPLNSCLSESPFLRCTHVTPQREKSVVCGSLFHTPKLMKGQTPKRISESLGAEVDPDMSWSSSLATPPTLSSTVLIVRDEEASAAVFPNDTTAICKSCSPKHDDSLKKNDRCIPSGPDKENKNQREAKSQGLGKMLGNSFGKVNSCKDHFGKSTPNVLEDEVCETVADVSEEDSFSLCVPKYKTRNLPKIKTSKTRKNIFNETKTNECEETKKQMKENKHSFLSEMEPNDSDPLDWCVTKPKPFGNGNEKISKEFIPSSASEWSHLTLSGLSGTQMEKTPLLHSSSCDQSNSEKDFTITEKESTNFITLGNSSPQISSVPKYSEITLNKETVVNKIDEEQCLGSHEDSVLSGKRTISETTIIHSPLHGIRKSIFRIRESPEEMSSAMFSNHMTDLNSKGEIDTPESTLEKYTICSQKEDSLGSIDNGSWPATIRRTSGALKTSGLISTLKKKTKKFIYVINDETSYQGLKTQKDQELGLTNHSDQSEANAFEAPLTFTNADSGLLHSSSVKKNCSQNDSEEPALSLISSFGTILRKVSNNGTSSVNNKTVPQDLDYKETKINKEKLQSFITTETDCLSSLQEKHCEDDAKSQRVSDTKEKVLTAVSYPPVPHSEVEGCGIHFQSPESFSSEHDNTSLTPSSRDPPSNPVMTCRGKESYKISEKLKCKNHEGGFELIKNIPMEKNQEMHVLNANSKNTEVLSTEKYVIVASPSMKVQFNQNTNLATIQKDQKETTLISKIAVNPNSEELFPNDENNFVLEITNESHIPVLGNIKELHDADLCCVREPVLKNSTMMVYTDMDDKQAAKLSIMKDFDSSNIDDLTEKNGNSIKQQLKMTLDQDSKSDITLDVVRKSNGNNDYMNNWARLSDPVSNHSFGNGFRTASNKEIKLSEHNIKKSKMLFKDIEEHYPTNLACIEIVNTSSLESQKKLSKPLTLDPQSINSVSVFVQSSAYVSDSESGHIAPPTSSLKQDFNSNHNLTPSQKAEITELSTILEESGSQFEFTQFRKPSYIIEKNPFEMPENQLTILNRTSEECRNTDLHLTINAPSIIQVDSSKKFEGILGGNQRSACLSRTNCNRSACGSLADKNEVKFRGFYSARGTKLNVGSEALQKAKQLFRDLENIIEEPSVEVDTRSFSSGKCNDSAVSMIQIEDCNNDKNFNEKNNKNQLILQNNIEMTAGIFVEENTEGYKGNTENEDNQRTDASGNTHNLESVSSDSNKNDIVYIHEENSLPCIDQHNIDQKLSSQLMKEGNTQIKECLSDLTCLEVAKAEETFHVNTSNKQQFTANTMGQNIKDFDIFDLSFQTASGKNIRVSKESLNKVINLFDQKWTEEELNNFSDSLNSELLSGVDINKIDISSYEKTENSERKNKIMKESDLIGTENKLLTLQQRPESEIKKIKEPTMLGFHTASGKKIEIAKESLDKVKNLFDEKEQGDSGVTNFSHQGAKMSKDREKCEDGLELACETIELTAPKYEEMQNSIKEKKLVSSEIVVAPRLLSGNLYKQTENLKISDQDSLKVKVHENTEKETAKNHMIYTNQFTYSAIENSPLAFYTGHGRKISVSETSLFEAKKRLREGELDDKPEKINTATVICLKEYPDDCVENPSCGNSSSSTISENDKNPPSEKQGLTYLSNSTVSNRYSYHLDFCHSSEVYKKSEYLSKNKGDNSVIEPVVKNVRENTIFSEITSTVREADTDPQIINEDICAQKLVTNSLCKNENTAIKVAICDSNNFNSIQKLNSDSNNAIPAYSTASSKRVFVAHQTKATEGFTNNCSMIIKQNPKSKSDTCHMRIVAGYPNTLDDSEDIIFPDSLDDAEHQSSSQKVLADIQSEHTLQLNQSISGLEKVSEIPTCQNNSKTSDTCKLNTGKLPKSVSCTNACGIFSTASGKSVQVSDAALQKARQVFSKIEDSAKELFPKVFKNSEHSDKFTNEENAMLQTSQNLLSSTFSGFSTASGKQVPVSESALCKVKGMLEEFDLIRTECGLQHSSTSRQDVSKIPPPSCIDKRTPEQCGNSKLEKAYNKEFKLSSHCNIERESSENHHSIKVSPCQSQLKQDKQQLLLGSKVSLVENIHLLGKEQDLPKNIKTEIGKTETFPNLPVKRNIEICSTYSRDPENYLETETVEIAKAFMEDGELTDSELLSHAKHSLFTCQSTEEMVLLNSRIGKRRGDALVSVGEPPIKRNLLNEFDRIIKNQEKSLKASKSTPDGILKDRSLFMHHISLEPITSGPLRTSKERHEMQNPNFTISGQEFLSKSRFYEHLALEKSSSNLSVSGQPFCTVPATRNEKRRHLNTPAKPVKVFVPPFKTKSHFHRDEQCISKNTNLEENKQNPEKIDEHGPGESETNINDGGIHQLKKNNSSQAATIIFTKCEKEPLDLITNLQNARDIQDMRIKKKQRQHIFPQPGSLYLAKTSTVPRISLRGAVEGRVPSPCSHKQLYMYGVSEHCVKINSKNAESFQFHTEDYFGKEELWSGEGIQLADGGWLIPSNDGKAGKEEFYRALCDTPGVDPNLISRVWVYNHYRWIIWKLAAMEFAFPKEFANRCLSPERVLLQLKYRYDVEIDRSRRSALKKIMERDDTAAKTLVLCISEIISSSVDISETSSSKTNSMGTKKVGIIELTDGWYAVKAQLDPPLSALVKNGKLTVGQKIIIHGAELVGSPDACTPLEAPESLMLKIAANSTRRARWYAKLGFSPDPRPFPLSLSSLFSDGGNVGCIDVVVQRAYPIQWMERTPSGLCIFRNEREEEKEATKYAEAQQKKLEVLFNKIQGEFEKHDENITKQCRPSCALTRQQVCALQDGAELYEAVANAPDPAYLEGYFSEEQLRALNNHRQMLNDKKQAQIQLEFRKAMESAEQGEQILSRNVTTVWKLRIISYGKKEKDSVTLSIWRPSSDLYSLLTEGKRYRIYHLATSQSKSKSEKVNIQLTATKKTQYQQLQASDEILCQIYQPREPLNFNKLLSPDFQPPCSEVDLVGFVISVVKKIGPSLLHPKDFEPGLAPLVYLSDECHNLLAIKFWIDLNEDIIKPHTLIAASNLQWRPEAKSRIPTLFAGDFSRFSASPKEGHFQEIFHKMKNTIENIGMFCNDAENKLMHILDTNGPMLSTPTKDYASEPYTAQTVLGMGNKFLMSSPSGEMNYQSPLSLSKPKEKSVPTTGSAQMTSKSYHKGEKEMDDPKNCKKRKALDFLSRLPLPPPVSPICTFVSPAAQKAFQPPRACGTKYETPIRKKEFNSPQMTPLKFNDLSLLESDSIADEELALINTQALLSGSAGENQLMSLSDSTKTAPENLKDYFRPKRHSLASGATGCWSPQAHTEERETNVQDASSMKRASVRLQRRQKQK\n```\n\n----------------------------------------\n\nTITLE: Querying Ensembl REST API for Gene Homology in Python\nDESCRIPTION: This code uses Python to access the Ensembl REST API endpoint for retrieving homology data for a gene. It includes the target species 'human' and formats the response as JSON.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/associated_group.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nserver = \"https://rest.ensembl.org\"\nextension = \"/homology/id/ENSG00000157764?\"\n\nr = requests.get(server+extension, headers={ \"Content-Type\" : \"application/json\"})\n \nif not r.ok:\n  r.raise_for_status()\n  sys.exit()\n \ndecoded = r.json()\nprint(repr(decoded))\n```\n\n----------------------------------------\n\nTITLE: Testing completion of Ensembl REST API tests\nDESCRIPTION: This snippet shows the end of the test suite, closing the SKIP block and marking the end of the test file.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/multi/compara/external_db.txt#2025-04-22_snippet_15\n\nLANGUAGE: perl\nCODE:\n```\n} # End of SKIP\n\ndone_testing();\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Ensembl REST API Database Connections in Perl\nDESCRIPTION: This snippet sets up the database connections for the Ensembl REST API server. It defines the species databases, compara databases, and other specialized databases required for the API to function.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/data_file.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n    species_dbs => [\n      Bio::EnsEMBL::Registry->get_DBAdaptor('human', 'core'),\n      Bio::EnsEMBL::Registry->get_DBAdaptor('mouse', 'core'),\n    ],\n    \n    # The following are populated at runtime\n    compara_dbs => [],\n    ontology_dbs => [],\n    variation_dbs => [],\n    funcgen_dbs => [],\n    metadata_dbs => [],\n    adaptor_base => 'Bio::EnsEMBL::DBSQL::DBAdaptor'\n```\n\n----------------------------------------\n\nTITLE: Posting Multiple IDs to Lookup Endpoint in Ensembl REST API\nDESCRIPTION: This example shows how to post multiple IDs to the lookup endpoint to retrieve information about multiple features in a single request. The request includes a JSON object with an array of IDs and optional parameters.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -H \"Accept: application/json\" -d '{ \"ids\" : [\"ENSG00000157764\", \"ENSG00000248378\" ] }' http://rest.ensembl.org/lookup/id\n```\n\n----------------------------------------\n\nTITLE: Querying Ensembl REST API using httr in R\nDESCRIPTION: This snippet shows how to use the httr package in R to make a GET request to the Ensembl REST API. It retrieves information about the human BRCA2 gene and prints the response content.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/prediction_transcript.txt#2025-04-22_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nlibrary(httr)\nserver <- \"http://rest.ensembl.org\"\next <- \"/lookup/symbol/homo_sapiens/BRCA2?\"\nr <- GET(paste(server, ext, sep = \"\"), content_type(\"application/json\"))\nstop_for_status(r)\nprint(content(r))\n```\n\n----------------------------------------\n\nTITLE: Querying Ensembl REST API for Transcript Information with cURL\nDESCRIPTION: This cURL command retrieves transcript information from the Ensembl REST API. It specifies the response format as JSON and makes a GET request to obtain transcript details for a specific gene ID.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/analysis.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-type:application/json\" -H \"Accept:application/json\" \\\nhttp://rest.ensembl.org/lookup/id/ENST00000342066?\n```\n\n----------------------------------------\n\nTITLE: Requesting Feature IDs by Species and Stable ID in Ensembl REST API\nDESCRIPTION: This example demonstrates how to request feature information by providing a species name and stable ID. The endpoint returns information about the feature including its location, version, and other relevant data.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://rest.ensembl.org/lookup/id/ENSG00000157764?content-type=application/json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Ensembl MySQL Database Servers in Perl\nDESCRIPTION: Perl configuration block showing how to set up multiple Ensembl MySQL database servers with different priorities in the REST API configuration.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/marker_feature.txt#2025-04-22_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\n{\n  -DESC => 'Ensembl MySQL Databases',\n  -HOST => \"ensembldb.ensembl.org\",\n  -PORT => 3306,\n  -USER => 'anonymous',\n  -PASS => '',\n  -PRIORITY => 0,\n},\n{\n  -DESC => 'Ensembl Genomes MySQL Databases',\n  -HOST => \"mysql-eg-publicsql.ebi.ac.uk\",\n  -PORT => 4157,\n  -USER => 'anonymous',\n  -PASS => '',\n  -PRIORITY => 10,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transcript Controller with Package Structure in Perl\nDESCRIPTION: Sets up the Perl package for the transcript controller, including necessary dependencies and method declaration for the REST API controller.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/gallus_gallus/core/dna_align_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\npackage EnsEMBL::REST::Controller::Transcript;\n\nuse Moose;\nuse namespace::autoclean;\nuse Try::Tiny;\nrequire EnsEMBL::REST;\nEnsEMBL::REST->turn_on_config_serialisers(__PACKAGE__);\n\n__PACKAGE__->config(\n  map => {\n    'text/plain' => ['YAML'],\n  }\n);\n\nwith 'EnsEMBL::REST::Role::Content';\n\nbegin {extends 'Catalyst::Controller::REST';};\n```\n\n----------------------------------------\n\nTITLE: Accessing Ensembl REST API Endpoints\nDESCRIPTION: Example URL endpoint paths for accessing the Ensembl REST API. Shows the production server URL and beta server URL formats that users can request to retrieve data from Ensembl databases.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/funcgen/associated_motif_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttp://rest.ensembl.org/\nhttp://beta.rest.ensembl.org/\n```\n\n----------------------------------------\n\nTITLE: Sample Ensembl REST Server Configuration\nDESCRIPTION: Configuration file for the Ensembl REST server specifying database connections, caching settings, and service-specific parameters. This sample shows how to configure database access and various runtime settings.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/misc_feature_misc_set.txt#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nname = EnsEMBL::REST\ndescription = Ensembl REST API\n\n[Model::Registry]\nhost = ensembldb.ensembl.org\nport = 3306\nuser = anonymous\nverbose = 0\nvalidate_user = 1\n\n#Enable this option if you want to have a different default species for comparas\n[Model::Registry::MULTI]\nhost = ensembldb.ensembl.org\nport = 3306\nuser = anonymous\nverbose = 0\n\n[Model::Lookup]\n\n[Model::Documentation]\n\n[Model::Sequence]\nmax_slice_length = 1e7\nmax_post_slice_length = 1e7\n\n[Model::Overlap]\nmax_slice_length = 5e6\n\n[Model::Info]\nspecies_set = core\n\n# Control how we deal with REST requests and responses\n[Plugin::Cache]\ndefault = CHI\n\n<Plugin::Cache::Backend>\nclass = CHI\ndrivers = Memory\ncompression = 0\n#debug = 1\n</Plugin::Cache::Backend>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Additional Protein Sequence Data in Plaintext Format\nDESCRIPTION: This snippet shows another protein sequence with its associated metadata. It follows the same structure as the previous sequence, providing identifiers, length, and the amino acid sequence.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homology/compara/sequence.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n790770\t3176\tb0d04c60fa02f1c670bdb2d25b6e5e27\tLGPISLNWFDELSSEAPPYNSEPAEESEYKISSYEPHLFKTPQRKPSYRQLASTPIIFKEQGPTLSLYQSPVKELDKCRLDLGNNVANSKHKSRHTVKAKMDQADAVTSPLLNSCLSEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXGQTQKHISESLGAEVDPDMSWSSS...\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Configuration Example\nDESCRIPTION: A simple JSON configuration file showing the structure of a database connection setup with user, password, host and name fields.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/translation.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user\": \"anonymous\",\n  \"password\": \"\",\n  \"host\": \"ensembldb.ensembl.org\",\n  \"name\": \"homo_sapiens_core_18_34\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Content Type Function in Perl for REST API\nDESCRIPTION: Function that returns the default content type for the Ensembl REST API. This function is used when no specific content type is requested, providing a fallback content type for API responses.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/homo_sapiens/core/unconventional_transcript_association.txt#2025-04-22_snippet_3\n\nLANGUAGE: Perl\nCODE:\n```\nsub default_content_type {\n  my ($class) = @_;\n  return 'text/plain';\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Dependencies for Ensembl REST API\nDESCRIPTION: Commands to install Docker and Docker Compose which are required for setting up the Ensembl REST API development environment.\nSOURCE: https://github.com/ensembl/ensembl-rest/blob/release/113/t/test-genome-DBs/ancestral_sequences/core/marker_feature.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install docker\nsudo apt-get install docker-compose\n```"
  }
]