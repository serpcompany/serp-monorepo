[
  {
    "owner": "moses-palmer",
    "repo": "pynput",
    "content": "TITLE: Controlling the keyboard with pynput\nDESCRIPTION: This snippet demonstrates how to use the pynput.keyboard.Controller class to simulate key presses and releases. It shows how to type both lower case and upper case characters, as well as how to use the type method for typing strings. The code imports the Key and Controller classes from pynput.keyboard.\nSOURCE: https://github.com/moses-palmer/pynput/blob/master/docs/keyboard-usage.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pynput.keyboard import Key, Controller\n\nkeyboard = Controller()\n\n# Press and release space\nkeyboard.press(Key.space)\nkeyboard.release(Key.space)\n\n# Type a lower case A; this will work even if no key on the\n# physical keyboard is labelled 'A'\nkeyboard.press('a')\nkeyboard.release('a')\n\n# Type two upper case As\nkeyboard.press('A')\nkeyboard.release('A')\nwith keyboard.pressed(Key.shift):\n    keyboard.press('a')\n    keyboard.release('a')\n\n# Type 'Hello World' using the shortcut type method\nkeyboard.type('Hello World')\n```\n\n----------------------------------------\n\nTITLE: Controlling Mouse with Controller - Python\nDESCRIPTION: This snippet demonstrates how to use the pynput.mouse.Controller class to control the mouse. It shows how to read the pointer position, set the pointer position, move the pointer relative to the current position, press and release mouse buttons, perform a double click, and scroll the mouse wheel. It requires the pynput library to be installed.\nSOURCE: https://github.com/moses-palmer/pynput/blob/master/docs/mouse-usage.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pynput.mouse import Button, Controller\n\nmouse = Controller()\n\n# Read pointer position\nprint('The current pointer position is {}'.format(\n    mouse.position))\n\n# Set pointer position\nmouse.position = (10, 20)\nprint('Now we have moved it to {}'.format(\n    mouse.position))\n\n# Move pointer relative to current position\nmouse.move(5, -5)\n\n# Press and release\nmouse.press(Button.left)\nmouse.release(Button.left)\n\n# Double click; this is different from pressing and releasing\n# twice on macOS\nmouse.click(Button.left, 2)\n\n# Scroll two steps down\nmouse.scroll(0, 2)\n```\n\n----------------------------------------\n\nTITLE: Monitoring the keyboard with pynput\nDESCRIPTION: This snippet demonstrates how to use the pynput.keyboard.Listener class to monitor keyboard events. It defines callback functions for key presses and releases, and shows how to stop the listener.  The code also demonstrates both blocking and non-blocking listener implementations.\nSOURCE: https://github.com/moses-palmer/pynput/blob/master/docs/keyboard-usage.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pynput import keyboard\n\ndef on_press(key, injected):\n    try:\n        print('alphanumeric key {} pressed; it was {}'.format(\n            key.char, 'faked' if injected else 'not faked'))\n    except AttributeError:\n        print('special key {} pressed'.format(\n            key))\n\ndef on_release(key, injected):\n    print('{} released; it was {}'.format(\n        key, 'faked' if injected else 'not faked'))\n    if key == keyboard.Key.esc:\n        # Stop listener\n        return False\n\n# Collect events until released\nwith keyboard.Listener(\n        on_press=on_press,\n        on_release=on_release) as listener:\n    listener.join()\n\n# ...or, in a non-blocking fashion:\nlistener = keyboard.Listener(\n    on_press=on_press,\n    on_release=on_release)\nlistener.start()\n```\n\n----------------------------------------\n\nTITLE: Monitoring Mouse Events with Listener - Python\nDESCRIPTION: This snippet shows how to use the pynput.mouse.Listener class to monitor mouse events. It defines callback functions for mouse movement, button clicks, and scrolling. The listener is started in both a blocking and non-blocking manner. The listener captures events until the program is terminated or a callback returns False.\nSOURCE: https://github.com/moses-palmer/pynput/blob/master/docs/mouse-usage.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pynput import mouse\n\ndef on_move(x, y, injected):\n    print('Pointer moved to {}; it was {}'.format(\n        (x, y, 'faked' if injected else 'not faked')))\n\ndef on_click(x, y, button, pressed, injected):\n    print('{} at {}; it was {}'.format(\n        'Pressed' if pressed else 'Released',\n        (x, y, 'faked' if injected else 'not faked')))\n    if not pressed:\n        # Stop listener\n        return False\n\ndef on_scroll(x, y, dx, dy, injected):\n    print('Scrolled {} at {}; it was {}'.format(\n        'down' if dy < 0 else 'up',\n        (x, y, 'faked' if injected else 'not faked')))\n\n# Collect events until released\nwith mouse.Listener(\n        on_move=on_move,\n        on_click=on_click,\n        on_scroll=on_scroll) as listener:\n    listener.join()\n\n# ...or, in a non-blocking fashion:\nlistener = mouse.Listener(\n    on_move=on_move,\n    on_click=on_click,\n    on_scroll=on_scroll)\nlistener.start()\n```\n\n----------------------------------------\n\nTITLE: Registering multiple global hotkeys\nDESCRIPTION: This snippet demonstrates how to use the convenience class pynput.keyboard.GlobalHotKeys to register multiple global hotkeys. It defines a callback function for each hotkey and associates them using a dictionary.\nSOURCE: https://github.com/moses-palmer/pynput/blob/master/docs/keyboard-usage.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pynput import keyboard\n\ndef on_activate_h():\n    print('<ctrl>+<alt>+h pressed')\n\ndef on_activate_i():\n    print('<ctrl>+<alt>+i pressed')\n\nwith keyboard.GlobalHotKeys({\n        '<ctrl>+<alt>+h': on_activate_h,\n        '<ctrl>+<alt>+i': on_activate_i}) as h:\n    h.join()\n```\n\n----------------------------------------\n\nTITLE: Implementing global hotkeys\nDESCRIPTION: This snippet demonstrates how to implement global hotkeys using pynput.keyboard.HotKey and pynput.keyboard.Listener. It defines a callback function that is invoked when the hotkey is activated. The code also shows how to parse shortcut strings to key collections.\nSOURCE: https://github.com/moses-palmer/pynput/blob/master/docs/keyboard-usage.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pynput import keyboard\n\ndef on_activate():\n    print('Global hotkey activated!')\n\ndef for_canonical(f):\n    return lambda k: f(l.canonical(k))\n\nhotkey = keyboard.HotKey(\n    keyboard.HotKey.parse('<ctrl>+<alt>+h'),\n    on_activate)\nwith keyboard.Listener(\n        on_press=for_canonical(hotkey.press),\n        on_release=for_canonical(hotkey.release)) as l:\n    l.join()\n```\n\n----------------------------------------\n\nTITLE: Synchronous event listening for keyboard\nDESCRIPTION: This snippet demonstrates how to use synchronous event listening with the pynput.keyboard.Events utility class. It includes code for reading single events in a non-blocking fashion and iterating over all keyboard events. The code imports the keyboard module from pynput.\nSOURCE: https://github.com/moses-palmer/pynput/blob/master/docs/keyboard-usage.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pynput import keyboard\n\n# The event listener will be running in this block\nwith keyboard.Events() as events:\n    # Block at most one second\n    event = events.get(1.0)\n    if event is None:\n        print('You did not press a key within one second')\n    else:\n        print('Received event {}'.format(event))\n\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom pynput import keyboard\n\n# The event listener will be running in this block\nwith keyboard.Events() as events:\n    for event in events:\n        if event.key == keyboard.Key.esc:\n            break\n        else:\n            print('Received event {}'.format(event))\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Mouse Events - Python\nDESCRIPTION: This snippet shows how to iterate over mouse events using the pynput.mouse.Events class. The code captures mouse events in a blocking fashion, printing information about each event until the right mouse button is clicked, at which point the loop breaks. This illustrates how to use the Events class as an iterator.\nSOURCE: https://github.com/moses-palmer/pynput/blob/master/docs/mouse-usage.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pynput import mouse\n\n# The event listener will be running in this block\nwith mouse.Events() as events:\n    for event in events:\n        if event.button == mouse.Button.right:\n            break\n        else:\n            print('Received event {}'.format(event))\n```\n\n----------------------------------------\n\nTITLE: Synchronous Mouse Event Listening - Python\nDESCRIPTION: This snippet shows how to use pynput.mouse.Events for synchronous event listening. It demonstrates reading a single event with a timeout and iterating over events until a specific button is pressed. The Events class simplifies scripting by providing blocking event retrieval.\nSOURCE: https://github.com/moses-palmer/pynput/blob/master/docs/mouse-usage.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pynput import mouse\n\n# The event listener will be running in this block\nwith mouse.Events() as events:\n    # Block at most one second\n    event = events.get(1.0)\n    if event is None:\n        print('You did not interact with the mouse within one second')\n    else:\n        print('Received event {}'.format(event))\n```\n\n----------------------------------------\n\nTITLE: Handling keyboard listener errors\nDESCRIPTION: This snippet demonstrates how to handle exceptions raised by the callback handlers in keyboard listeners. It uses a try-except block to catch a custom exception raised when the escape key is pressed, and prints a message indicating which key was pressed. It imports the keyboard module from pynput.\nSOURCE: https://github.com/moses-palmer/pynput/blob/master/docs/keyboard-usage.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pynput import keyboard\n\nclass MyException(Exception): pass\n\ndef on_press(key):\n    if key == keyboard.Key.esc:\n        raise MyException(key)\n\n# Collect events until released\nwith keyboard.Listener(\n        on_press=on_press) as listener:\n    try:\n        listener.join()\n    except MyException as e:\n        print('{} was pressed'.format(e.args[0]))\n```\n\n----------------------------------------\n\nTITLE: Filtering Keyboard Events on Windows with pynput\nDESCRIPTION: This code shows how to filter and suppress keyboard events on Windows using the `win32_event_filter` function with pynput. The filter function examines the `vkCode` (virtual key code) of the event and suppresses the event if it matches a specific key (e.g., 0x58 for 'x') by calling `listener.suppress_event()`.\nSOURCE: https://github.com/moses-palmer/pynput/blob/master/docs/faq.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef win32_event_filter(msg, data):\n    if data.vkCode == 0x58:\n        # Suppress x\n        listener.suppress_event()\n```\n\n----------------------------------------\n\nTITLE: Intercepting Keyboard Events on macOS with pynput\nDESCRIPTION: This code snippet demonstrates how to intercept and potentially suppress keyboard events on macOS using the `darwin_intercept` function with pynput. The interceptor function checks for specific key presses (e.g., 'x' to suppress or 'a' to transform) and either suppresses the event by returning `None` or modifies the event before returning it.\nSOURCE: https://github.com/moses-palmer/pynput/blob/master/docs/faq.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef darwin_intercept(event_type, event):\n    import Quartz\n    length, chars = Quartz.CGEventKeyboardGetUnicodeString(\n        event, 100, None, None)\n    if length > 0 and chars == 'x':\n        # Suppress x\n        return None\n    elif length > 0 and chars == 'a':\n        # Transform a to b\n        Quartz.CGEventKeyboardSetUnicodeString(event, 1, 'b')\n    else:\n        return event\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Listener Errors - Python\nDESCRIPTION: This code demonstrates how to handle exceptions raised in mouse listener callbacks. The listener is started within a try-except block to catch exceptions raised by the callback function, specifically a custom MyException. The listener.join() method is used to wait for the listener thread to finish and re-raise any exceptions.\nSOURCE: https://github.com/moses-palmer/pynput/blob/master/docs/mouse-usage.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pynput import mouse\n\nclass MyException(Exception): pass\n\ndef on_click(x, y, button, pressed):\n    if button == mouse.Button.left:\n        raise MyException(button)\n\n# Collect events until released\nwith mouse.Listener(\n        on_click=on_click) as listener:\n    try:\n        listener.join()\n    except MyException as e:\n        print('{} was clicked'.format(e.args[0]))\n```\n\n----------------------------------------\n\nTITLE: Setting DPI Awareness on Windows - Python\nDESCRIPTION: This code demonstrates how to set DPI awareness for a Python application on Windows using ctypes. This ensures consistent coordinate handling between the mouse listener and controller when system scaling is enabled. Setting DPI awareness is a process-global setting and needs to be done explicitly.\nSOURCE: https://github.com/moses-palmer/pynput/blob/master/docs/mouse-usage.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport ctypes\n\n\nPROCESS_PER_MONITOR_DPI_AWARE = 2\n\nctypes.windll.shcore.SetProcessDpiAwareness(PROCESS_PER_MONITOR_DPI_AWARE)\n```\n\n----------------------------------------\n\nTITLE: Importing mouse and keyboard modules in pynput - Python\nDESCRIPTION: This snippet demonstrates how to import the mouse and keyboard modules from the pynput package. This import statement is necessary to use the classes within those modules for controlling and monitoring input devices.\nSOURCE: https://github.com/moses-palmer/pynput/blob/master/docs/index.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pynput import mouse, keyboard\n```\n\n----------------------------------------\n\nTITLE: Setting DISPLAY Variable for Pynput on Linux\nDESCRIPTION: This bash command demonstrates how to set the DISPLAY environment variable before running a pynput script on Linux. This is necessary when running pynput over SSH to ensure the script can connect to the X server. Replace `:0` with the actual value obtained from your desktop environment's terminal.\nSOURCE: https://github.com/moses-palmer/pynput/blob/master/docs/limitations.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ DISPLAY=:0 python -c 'import pynput'\n```"
  }
]