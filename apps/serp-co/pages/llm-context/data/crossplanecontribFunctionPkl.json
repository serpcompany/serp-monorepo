[
  {
    "owner": "crossplane-contrib",
    "repo": "function-pkl",
    "content": "TITLE: Configuring Composition with Function-Pkl in YAML\nDESCRIPTION: This YAML snippet shows how to use the function-pkl in a Crossplane Composition. It defines a pipeline step that references the function and provides input specifying the Pkl file to be used.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: function-pkl\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: XR\n  mode: Pipeline\n  pipeline:\n  - step: run-the-template\n    functionRef:\n      name: function-pkl\n    input:\n      apiVersion: pkl.fn.crossplane.io/v1beta1\n      kind: Pkl\n      spec:\n        type: uri\n        # This pkl file is at `pkl/crossplane.contrib.example/compositions/steps/full.pkl` in this repo\n        uri: \"package://pkg.pkl-lang.org/github.com/crossplane-contrib/function-pkl/crossplane.contrib.example@0.0.1#/compositions/steps/full.pkl\"\n```\n\n----------------------------------------\n\nTITLE: Installing Function-Pkl Composition Function in YAML\nDESCRIPTION: This YAML snippet demonstrates how to install the function-pkl composition function using a Function resource. It specifies the package source and version to be used.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: Function\nmetadata:\n  name: function-pkl\nspec:\n  package: xpkg.upbound.io/crossplane-contrib/function-pkl:v0.0.1\n```\n\n----------------------------------------\n\nTITLE: Testing Crossplane PKL Function with Example Manifests\nDESCRIPTION: Command to test the function using crossplane beta render command with example manifest files including XR, composition, and functions configurations.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta render xr.yaml composition.yaml functions.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Request Processing in PKL\nDESCRIPTION: PKL code for importing and configuring custom resource templates for processing Crossplane requests, including XRD definitions.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/pkl/crossplane.contrib.example/DEVELOP.md#2025-04-22_snippet_3\n\nLANGUAGE: pkl\nCODE:\n```\nimport \"@crossplane.contrib/crossplane.pkl\"\nimport \"crds/XR.pkl\"\nlocal request = new crossplane {\n  customResourceTemplates = new {\n    [\"XR\"] {\n      [\"example.crossplane.io/v1\"] = XR\n    }\n  }\n}.Request\n```\n\n----------------------------------------\n\nTITLE: Deploying Composition using PKL and kubectl\nDESCRIPTION: This command evaluates a PKL package to generate a Composition and applies it to the Kubernetes cluster using kubectl.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/pkl/crossplane.contrib.example/DEPLOY.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npkl eval package://pkg.pkl-lang.org/github.com/crossplane-contrib/function-pkl/crossplane.contrib.example@0.0.1#/compositions/uri.pkl | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Deploying XRD using PKL and kubectl\nDESCRIPTION: This command evaluates a PKL package to generate an XRD (Composite Resource Definition) and applies it to the Kubernetes cluster using kubectl.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/pkl/crossplane.contrib.example/DEPLOY.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npkl eval package://pkg.pkl-lang.org/github.com/crossplane-contrib/function-pkl/crossplane.contrib.example@0.0.1#/xrds/ExampleXR.pkl | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Deploying XR using PKL and kubectl\nDESCRIPTION: This command evaluates a PKL package to generate an XR (Composite Resource) and applies it to the Kubernetes cluster using kubectl.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/pkl/crossplane.contrib.example/DEPLOY.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npkl eval package://pkg.pkl-lang.org/github.com/crossplane-contrib/function-pkl/crossplane.contrib.example@0.0.1#/xrs/uri.pkl | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Development Commands for Function-Pkl Project\nDESCRIPTION: This shell script snippet provides various commands for developing, testing, building, and releasing the function-pkl project. It includes commands for code generation, running tests, building Docker images, and managing Pkl packages.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Run code generation - see input/generate.go\n$ make generate\n\n# Run tests - see fn_test.go\n$ go test ./...\n\n# Build the function's runtime image and package it - see Dockerfile and package/crossplane.yaml\n$ make build-image\n\n# Push the Package to a registry\n$ crossplane xpkg push -f function-pkl*.xpkg ghcr.io/crossplane-contrib/function-pkl\n\n# Resolve Pkl Project Dependencies\n$ make pkl-resolve\n\n# Release a Pkl Project\n$ git tag crossplane.contrib@x.y.z\n$ git push --tags\n\n# Packages the Pkl Projects. Uses the latest existing git tags to version them.\n$ make pkl-package\n\n# Manually release a Pkl Package on github\n$ make pkl-release TAG=crossplane.contrib@x.y.z\n\n# Debugging this function\n# While a Debugging session is running run on the same host:\n$ crossplane beta render xr.yaml composition.yaml functions.yaml --verbose\n```\n\n----------------------------------------\n\nTITLE: Running Local Crossplane PKL Function\nDESCRIPTION: Command to run a Crossplane PKL function locally in debug mode with insecure settings.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run . --insecure --debug\n```\n\n----------------------------------------\n\nTITLE: Defining XRD Base in PKL\nDESCRIPTION: Base configuration for creating an XRD in PKL, showing how to amend the CompositeResourceDefinition from the package.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/pkl/crossplane.contrib.example/DEVELOP.md#2025-04-22_snippet_0\n\nLANGUAGE: pkl\nCODE:\n```\namends \"package://pkg.pkl-lang.org/github.com/crossplane-contrib/function-pkl/crospslane.contrib.xrd@<version>#/CompositeResourceDefinition.pkl\"\n```\n\n----------------------------------------\n\nTITLE: Tracing XR using Crossplane Beta Command\nDESCRIPTION: This command uses the Crossplane beta trace feature to analyze the 'uri-example' XR, providing detailed information about its state and related resources.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/pkl/crossplane.contrib.example/DEPLOY.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace xrs uri-example\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies Using Raw Git References in Pkl\nDESCRIPTION: This snippet demonstrates how to declare dependencies using raw Git references instead of the standard package notation in Pkl. It shows the difference between referencing a package directly from GitHub and using a local package reference.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/example/git/README.md#2025-04-22_snippet_0\n\nLANGUAGE: pkl\nCODE:\n```\n// e.g.\namends \"package://pkg.pkl-lang.org/github.com/crossplane-contrib/function-pkl/crossplane.contrib@0.0.1#/CompositionResponse.pkl\"\n\n// instead of\namends \"@crossplane.contrib/CompositionResponse.pkl\"\n```\n\n----------------------------------------\n\nTITLE: Generating Pkl Modules for Crossplane\nDESCRIPTION: Commands to evaluate and generate two Pkl modules: crd2module.pkl and crd2module-composition-fix.pkl using the pkl eval tool. The modules are generated from the crossplane-contrib directory.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/hack/pklcrd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npkl eval -m ../../pkl/crossplane-contrib crd2module.pkl\npkl eval -m ../../pkl/crossplane-contrib crd2module-composition-fix.pkl\n```\n\n----------------------------------------\n\nTITLE: Converting XRD to Module using PKL\nDESCRIPTION: Command to evaluate and convert an XRD definition to a module in the specified output directory.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/pkl/crossplane.contrib.example/DEVELOP.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npkl eval xrds/xrd2module.pkl -m crds\n```\n\n----------------------------------------\n\nTITLE: Converting CRD to Managed Resource Module\nDESCRIPTION: Command to convert Custom Resource Definitions to PKL modules for managed resources.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/pkl/crossplane.contrib.example/DEVELOP.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npkl eval crds/crd2module.pkl -m crds\n```\n\n----------------------------------------\n\nTITLE: Checking XR Resource using kubectl\nDESCRIPTION: This command retrieves the details of the deployed XR named 'uri-example' in YAML format using kubectl.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/pkl/crossplane.contrib.example/DEPLOY.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get xrs.example.crossplane.io uri-example -oyaml\n```\n\n----------------------------------------\n\nTITLE: Defining Apache License 2.0 Header in Plaintext\nDESCRIPTION: This snippet contains the full text of the Apache License 2.0 header. It informs users about the licensing terms, including permissions, conditions, and disclaimers for using the software.\nSOURCE: https://github.com/crossplane-contrib/function-pkl/blob/main/hack/boilerplate.go.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/*\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n```"
  }
]