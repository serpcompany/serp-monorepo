[
  {
    "owner": "spatie",
    "repo": "laravel-query-builder",
    "content": "TITLE: Basic Filtering in Laravel Query Builder\nDESCRIPTION: Demonstrates how to use basic filtering with allowed filters for name and email fields. It also shows how to filter using multiple comma-separated values.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/filtering.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// GET /users?filter[name]=john&filter[email]=gmail\n\n$users = QueryBuilder::for(User::class)\n    ->allowedFilters(['name', 'email'])\n    ->get();\n\n// $users will contain all users with \"john\" in their name AND \"gmail\" in their email address\n```\n\nLANGUAGE: php\nCODE:\n```\n// GET /users?filter[name]=seb,freek\n\n$users = QueryBuilder::for(User::class)\n    ->allowedFilters(['name'])\n    ->get();\n\n// $users will contain all users that contain \"seb\" OR \"freek\" in their name\n```\n\n----------------------------------------\n\nTITLE: Including Relations with Laravel Query Builder\nDESCRIPTION: Shows how to include related models in the query results based on request parameters. This example loads posts relation when receiving a request like /users?include=posts.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = QueryBuilder::for(User::class)\n    ->allowedIncludes('posts')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Filtering Users with Laravel Query Builder\nDESCRIPTION: Demonstrates how to filter users based on request parameters using QueryBuilder. This example filters users by name when receiving a request like /users?filter[name]=John.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\QueryBuilder\\QueryBuilder;\n\n$users = QueryBuilder::for(User::class)\n    ->allowedFilters('name')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Filtering Records in Laravel Query Builder\nDESCRIPTION: Demonstrates how to filter records using the Laravel Query Builder. It shows examples of filtering by exact match, partial match, and using custom filters.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Filter by exact match\nQueryBuilder::for(User::class)\n    ->allowedFilters('name')\n    ->get();\n\n// ?filter[name]=John\n\n// Filter by partial match\nQueryBuilder::for(User::class)\n    ->allowedFilters([\n        AllowedFilter::partial('name'),\n    ])\n    ->get();\n\n// ?filter[name]=oh\n\n// Use custom filters\nQueryBuilder::for(User::class)\n    ->allowedFilters([\n        AllowedFilter::callback('name', function (Builder $query, $value) {\n            $query->where('name', 'LIKE', \"%{$value}%\");\n        })\n    ])\n    ->get();\n\n// ?filter[name]=John\n```\n\n----------------------------------------\n\nTITLE: Exact Filtering in Laravel Query Builder\nDESCRIPTION: Shows how to use exact filters for properties like IDs or boolean values. It demonstrates filtering by exact name and handling boolean and array values.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/filtering.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\QueryBuilder\\AllowedFilter;\n\n// GET /users?filter[name]=John%20Doe\n$users = QueryBuilder::for(User::class)\n    ->allowedFilters([AllowedFilter::exact('name')])\n    ->get();\n\n// only users with the exact name \"John Doe\"\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\QueryBuilder\\AllowedFilter;\n\n// GET /users?filter[id]=1,2,3,4,5&filter[admin]=true\n\n$users = QueryBuilder::for(User::class)\n    ->allowedFilters([\n        AllowedFilter::exact('id'),\n        AllowedFilter::exact('admin'),\n    ])\n    ->get();\n\n// $users will contain all admin users with id 1, 2, 3, 4 or 5\n```\n\n----------------------------------------\n\nTITLE: Sorting Results with Laravel Query Builder\nDESCRIPTION: Demonstrates how to sort query results based on request parameters. This example sorts users by ID when receiving a request like /users?sort=id.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$users = QueryBuilder::for(User::class)\n    ->allowedSorts('id')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Sorting Records in Laravel Query Builder\nDESCRIPTION: Shows how to implement sorting functionality using the Laravel Query Builder. It includes examples of sorting by a single field and allowing multiple sort fields.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Sort by a single field\nQueryBuilder::for(User::class)\n    ->allowedSorts('name')\n    ->get();\n\n// ?sort=name\n\n// Sort by multiple fields\nQueryBuilder::for(User::class)\n    ->allowedSorts(['name', 'email'])\n    ->get();\n\n// ?sort=name,-email\n```\n\n----------------------------------------\n\nTITLE: Basic Include Usage in Laravel Query Builder\nDESCRIPTION: Demonstrates how to load a basic relationship using the include query parameter. Shows loading posts for users via GET request.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/including-relationships.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// GET /users?include=posts\n\n$users = QueryBuilder::for(User::class)\n    ->allowedIncludes(['posts'])\n    ->get();\n\n// $users will have all their their `posts()` related models loaded\n```\n\n----------------------------------------\n\nTITLE: Including Relations in Laravel Query Builder\nDESCRIPTION: Demonstrates how to include related models in the query results using the Laravel Query Builder. It shows examples of including a single relation and multiple relations.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Include a single relation\nQueryBuilder::for(User::class)\n    ->allowedIncludes('posts')\n    ->get();\n\n// ?include=posts\n\n// Include multiple relations\nQueryBuilder::for(User::class)\n    ->allowedIncludes(['posts', 'permissions'])\n    ->get();\n\n// ?include=posts,permissions\n```\n\n----------------------------------------\n\nTITLE: Operator Filtering in Laravel Query Builder\nDESCRIPTION: Demonstrates how to use operator filters for comparing values. It includes examples of greater than comparison and dynamic operator usage.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/filtering.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\QueryBuilder\\AllowedFilter;\nuse Spatie\\QueryBuilder\\Enums\\FilterOperator;\n\n// GET /users?filter[salary]=3000\n$users = QueryBuilder::for(User::class)\n    ->allowedFilters([\n        AllowedFilter::operator('salary', FilterOperator::GREATER_THAN),\n    ])\n    ->get();\n\n// $users will contain all users with a salary greater than 3000\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\QueryBuilder\\AllowedFilter;\nuse Spatie\\QueryBuilder\\Enums\\FilterOperator;\n\n// GET /users?filter[salary]=>3000\n$users = QueryBuilder::for(User::class)\n    ->allowedFilters([\n        AllowedFilter::operator('salary', FilterOperator::DYNAMIC),\n    ])\n    ->get();\n\n// $users will contain all users with a salary greater than 3000\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields in a Laravel Query Builder (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to use `QueryBuilder::for()` with the `allowedFields()` method to specify which columns (`id`, `name`) can be selected via the `fields[users]` query parameter in the request URL (e.g., `GET /users?fields[users]=id,name`). The `toSql()` method is used here to illustrate the resulting SQL query without executing it.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/selecting-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\n// GET /users?fields[users]=id,name\n\n$users = QueryBuilder::for(User::class)\n    ->allowedFields(['id', 'name'])\n    ->toSql();\n```\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields in Laravel Query Builder\nDESCRIPTION: Shows how to select only specific fields from the database using the Laravel Query Builder. It includes an example of selecting multiple fields.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nQueryBuilder::for(User::class)\n    ->allowedFields(['name', 'email'])\n    ->get();\n\n// ?fields[users]=name,email\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Filters in Laravel Query Builder\nDESCRIPTION: This snippet demonstrates how to define a callback filter using the spatie/laravel-query-builder package in PHP. It allows developers to specify a callable function that modifies the Builder object based on the given parameters. The example showcases filtering users who have associated posts.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/filtering.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nQueryBuilder::for(User::class)\n    ->allowedFilters([\n        AllowedFilter::callback('has_posts', function (Builder $query, $value) {\n            $query->whereHas('posts');\n        }),\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Nested Relationship Loading in Laravel\nDESCRIPTION: Shows how to load nested relationships using dot notation in the include parameter.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/including-relationships.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// GET /users?include=posts.comments,permissions\n\n$users = QueryBuilder::for(User::class)\n    ->allowedIncludes(['posts.comments', 'permissions'])\n    ->get();\n\n// $users will contain all users with their posts, comments on their posts and permissions loaded\n```\n\n----------------------------------------\n\nTITLE: Shortened Callback Filters with PHP 7.4\nDESCRIPTION: This code illustrates a more concise way to define callback filters in Laravel using the arrow function syntax introduced in PHP 7.4. The functionality remains the same as traditional callbacks, focusing on filtering users based on associated posts.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/filtering.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nQueryBuilder::for(User::class)\n    ->allowedFilters([\n        AllowedFilter::callback('has_posts', fn (Builder $query) => $query->whereHas('posts')),\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Utilizing Filter Aliases in Laravel\nDESCRIPTION: This snippet demonstrates how to create filter aliases to improve readability and avoid exposing database column names. By using the AllowedFilter::exact method, users can query based on more user-friendly filter names.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/filtering.md#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Spatie\\QueryBuilder\\AllowedFilter;\n\n// GET /users?filter[name]=John\n\n$users = QueryBuilder::for(User::class)\n    ->allowedFilters(AllowedFilter::exact('name', 'user_passport_full_name')) // will filter by the `user_passport_full_name` column\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Filters in Laravel\nDESCRIPTION: This snippet demonstrates how to create a custom filter in Laravel by implementing the \\Spatie\\QueryBuilder\\Filters\\Filter interface. The custom filter class FiltersUserPermission is used to filter users based on their permissions and can be plugged into the query using the AllowedFilter::custom() method.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/filtering.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Spatie\\QueryBuilder\\Filters\\Filter;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass FiltersUserPermission implements Filter\n{\n    public function __invoke(Builder $query, $value, string $property)\n    {\n        $query->whereHas('permissions', function (Builder $query) use ($value) {\n            $query->where('name', $value);\n        });\n    }\n}\n\n// In your controller for the following request:\n// GET /users?filter[permission]=createPosts\n\n$users = QueryBuilder::for(User::class)\n    ->allowedFilters([\n        AllowedFilter::custom('permission', new FiltersUserPermission),\n    ])\n    ->get();\n\n// $users will contain all users that have the `createPosts` permission\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields with Laravel Query Builder\nDESCRIPTION: Shows how to select specific fields from the database based on request parameters. This example selects only id and email fields when receiving a request like /users?fields[users]=id,email.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$users = QueryBuilder::for(User::class)\n    ->allowedFields(['id', 'email'])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Custom Include Implementation in Laravel\nDESCRIPTION: Shows how to implement custom includes using the AllowedInclude::custom method and IncludeInterface interface.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/including-relationships.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\QueryBuilder\\Includes\\IncludeInterface;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse App\\Models\\Post;\n\nclass AggregateInclude implements IncludeInterface\n{\n    protected string $column;\n\n    protected string $function;\n\n    public function __construct(string $column, string $function)\n    {\n        $this->column = $column;\n\n        $this->function = $function;\n    }\n\n    public function __invoke(Builder $query, string $relations)\n    {\n        $query->withAggregate($relations, $this->column, $this->function);\n    }\n}\n\n// In your controller for the following request:\n// GET /posts?include=comments_sum_votes\n\n$posts = QueryBuilder::for(Post::class)\n    ->allowedIncludes([\n        AllowedInclude::custom('comments_sum_votes', new AggregateInclude('votes', 'sum'), 'comments'),\n    ])\n    ->get();\n\n// every post in $posts will contain a `comments_sum_votes` property\n```\n\n----------------------------------------\n\nTITLE: Callback Includes in Laravel Query Builder\nDESCRIPTION: Demonstrates how to use callback includes for simple custom include functionality using closures.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/including-relationships.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nQueryBuilder::for(User::class)\n    ->allowedIncludes([\n        AllowedInclude::callback('latest_post', function (Builder $query) {\n            $query->latestOfMany();\n        }),\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Filtering Users with Laravel Query Builder\nDESCRIPTION: Demonstrates how to filter users based on a name parameter in the request URL. This example allows filtering on the 'name' field and returns all Users that contain the specified string in their name.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\QueryBuilder\\QueryBuilder;\n\n$users = QueryBuilder::for(User::class)\n    ->allowedFilters('name')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filter in Laravel Query Builder\nDESCRIPTION: This snippet shows how to create a custom filter class that implements the `Spatie\\QueryBuilder\\Filters\\Filter` interface. The custom filter allows for complex filtering logic beyond simple column comparisons.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/advanced-usage/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Spatie\\QueryBuilder\\Filters\\Filter;\n\nclass FiltersUserPermission implements Filter\n{\n    public function __invoke(Builder $query, $value, string $property)\n    {\n        $query->whereHas('permissions', function (Builder $query) use ($value) {\n            $query->where('name', $value);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sort in Laravel Query Builder\nDESCRIPTION: This snippet illustrates how to create a custom sort class that implements the `Spatie\\QueryBuilder\\Sorts\\Sort` interface. The custom sort allows for complex sorting logic beyond simple column ordering.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/advanced-usage/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Spatie\\QueryBuilder\\Sorts\\Sort;\n\nclass SortBySubRelation implements Sort\n{\n    protected $relationName;\n    protected $columnName;\n\n    public function __construct(string $relationName, string $columnName)\n    {\n        $this->relationName = $relationName;\n        $this->columnName = $columnName;\n    }\n\n    public function __invoke(Builder $query, bool $descending, string $property)\n    {\n        $direction = $descending ? 'DESC' : 'ASC';\n\n        $query->orderBy(\n            $this->relationName\n                ::select($this->columnName)\n                ->whereColumn(\n                    \"{$this->relationName}.user_id\",\n                    'users.id'\n                ),\n            $direction\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Include in Laravel Query Builder\nDESCRIPTION: This snippet demonstrates how to create a custom include class that implements the `Spatie\\QueryBuilder\\Includes\\IncludeInterface` interface. The custom include allows for complex inclusion logic beyond simple relation loading.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/advanced-usage/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Spatie\\QueryBuilder\\Includes\\IncludeInterface;\n\nclass IncludePostCount implements IncludeInterface\n{\n    public function __invoke(Builder $query, string $include)\n    {\n        return $query->withCount('posts');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scope Filtering in Laravel Query Builder\nDESCRIPTION: Explains how to use scope filters to add local scopes to the query. It includes examples of basic scope usage and passing multiple parameters to scopes.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/filtering.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function scopeStartsBefore(Builder $query, $date): Builder\n{\n    return $query->where('starts_at', '<=', Carbon::parse($date));\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nQueryBuilder::for(Event::class)\n    ->allowedFilters([\n        AllowedFilter::scope('starts_before'),\n    ])\n    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function scopeInvitedUsers(Builder $query,  ...$users): Builder\n{\n    return $query->whereIn('id', $users);\n}\n```\n\n----------------------------------------\n\nTITLE: Trashed Filtering in Laravel Query Builder\nDESCRIPTION: Shows how to use the trashed filter for querying soft-deleted models. It explains the different values that can be used with the trashed filter.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/filtering.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nQueryBuilder::for(Booking::class)\n    ->allowedFilters([\n        AllowedFilter::trashed(),\n    ]);\n\n// GET /bookings?filter[trashed]=only will only return soft deleted models\n```\n\n----------------------------------------\n\nTITLE: Including Related Model Count in Laravel\nDESCRIPTION: Demonstrates how to include relationship counts using the Count suffix and AllowedInclude::count method.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/including-relationships.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// GET /users?include=postsCount,friendsCount\n\n$users = QueryBuilder::for(User::class)\n    ->allowedIncludes([\n        'posts', // allows including `posts` or `postsCount` or `postsExists`\n        AllowedInclude::count('friendsCount'), // only allows include the number of `friends()` related models\n    ]); \n// every user in $users will contain a `posts_count` and `friends_count` property\n```\n\n----------------------------------------\n\nTITLE: Including Related Model Exists Check in Laravel\nDESCRIPTION: Shows how to include relationship existence checks using the Exists suffix and AllowedInclude::exists method.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/including-relationships.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// GET /users?include=postsExists,friendsExists\n\n$users = QueryBuilder::for(User::class)\n    ->allowedIncludes([\n        'posts', // allows including `posts` or `postsCount` or `postsExists`\n        AllowedInclude::exists('friendsExists'), // only allows include the existence of `friends()` related models\n    ]); \n// every user in $users will contain a `posts_exists` and `friends_exists` property\n```\n\n----------------------------------------\n\nTITLE: Include Aliases in Laravel Query Builder\nDESCRIPTION: Demonstrates how to create aliases for relationship includes using AllowedInclude::relationship method.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/including-relationships.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\QueryBuilder\\AllowedInclude;\n\n// GET /users?include=profile\n\n$users = QueryBuilder::for(User::class)\n    ->allowedIncludes(AllowedInclude::relationship('profile', 'userProfile')) // will include the `userProfile` relationship\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Setting Default Filter Values in Laravel\nDESCRIPTION: This snippet explores how developers can set default values for filters using the spatie/laravel-query-builder package. The examples illustrate default behavior when no specific filter value is present in the request, particularly useful for boolean filters.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/filtering.md#2025-04-22_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nQueryBuilder::for(User::class)\n    ->allowedFilters([\n        AllowedFilter::exact('name')->default('Joe'),\n        AllowedFilter::scope('deleted')->default(false),\n        AllowedFilter::scope('permission')->default(null),\n    ])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Applying Ignored Filter Values in Laravel\nDESCRIPTION: This code snippet shows how to specify a set of ignored values for filters, allowing developers to skip filters when specific values are submitted. The ignore method can take multiple values, and if all values are ignored, the filter is not applied.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/filtering.md#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nQueryBuilder::for(User::class)\n    ->allowedFilters([\n        AllowedFilter::exact('name')->ignore(null),\n    ])\n    ->get();\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// GET /user?filter[name]=forbidden,John%20Doe\n\nQueryBuilder::for(User::class)\n    ->allowedFilters([\n        AllowedFilter::exact('name')->ignore('forbidden'),\n    ])\n    ->get();\n// Returns only users where name matches 'John Doe'\n\n// GET /user?filter[name]=ignored,ignored_too\n\nQueryBuilder::for(User::class)\n    ->allowedFilters([\n        AllowedFilter::exact('name')->ignore(['ignored', 'ignored_too']),\n    ])\n    ->get();\n// Filter does not get applied because all requested values are ignored.\n```\n\n----------------------------------------\n\nTITLE: Making Filters Nullable in Laravel\nDESCRIPTION: This example demonstrates how to designate filters as nullable in order to retrieve entities where the filtered value is null. A nullable filter can be applied even when the filter value is empty.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/filtering.md#2025-04-22_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n// GET /user?filter[name]=&filter[permission]=\n\nQueryBuilder::for(User::class)\n    ->allowedFilters([\n        AllowedFilter::exact('name')->nullable(),\n        AllowedFilter::scope('permission')->nullable(),\n    ])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields for Included Relations in Laravel Query Builder (PHP)\nDESCRIPTION: This PHP example demonstrates how to select specific fields (`id`, `name`) for an included relationship (`author`) using the `fields[author]` query parameter (e.g., `GET /posts?include=author&fields[author]=id,name`). It uses `allowedFields` with dot notation (`author.id`, `author.name`) to specify the allowed fields for the relation and `allowedIncludes` to enable the inclusion of the relation. Note that `allowedFields` must be called before `allowedIncludes`, and necessary relationship keys (like `author.id`) must be explicitly included in the allowed fields.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/selecting-fields.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n```php\nGET /posts?include=author&fields[author]=id,name\n\nQueryBuilder::for(Post::class)\n    ->allowedFields('author.id', 'author.name')\n    ->allowedIncludes('author');\n\n// All posts will be fetched including _only_ the name of the author. \n```\n```\n\n----------------------------------------\n\nTITLE: Appending Attributes in Laravel Query Builder\nDESCRIPTION: Demonstrates how to append computed attributes to the query results using the Laravel Query Builder. It shows an example of appending a single attribute.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nQueryBuilder::for(User::class)\n    ->allowedAppends('full_name')\n    ->get();\n\n// ?append=full_name\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Specific Field Selection (SQL)\nDESCRIPTION: This SQL query shows the result of using `allowedFields` in the Laravel Query Builder as demonstrated in the preceding PHP example. It confirms that only the explicitly allowed fields (`id`, `name`) are included in the `SELECT` statement for the `users` table.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/selecting-fields.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nSELECT \"id\", \"name\" FROM \"users\"\n```\n```\n\n----------------------------------------\n\nTITLE: Combining Query Builder with Existing Queries\nDESCRIPTION: Shows how to use QueryBuilder with existing query constraints and scopes. Demonstrates chaining multiple query conditions and includes.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$query = User::where('active', true);\n\n$userQuery = QueryBuilder::for($query) // start from an existing Builder instance\n    ->withTrashed() // use your existing scopes\n    ->allowedIncludes('posts', 'permissions')\n    ->where('score', '>', 42);\n```\n\n----------------------------------------\n\nTITLE: Including Relations with Laravel Query Builder\nDESCRIPTION: Shows how to include related posts for users based on an 'include' parameter in the request URL. This example allows including the 'posts' relation and returns all Users with their posts loaded.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = QueryBuilder::for(User::class)\n    ->allowedIncludes('posts')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Sorting Users with Laravel Query Builder\nDESCRIPTION: Illustrates how to sort users based on a 'sort' parameter in the request URL. This example allows sorting by the 'id' field and returns all Users sorted by ascending id.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$users = QueryBuilder::for(User::class)\n    ->allowedSorts('id')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Combining Laravel Query Builder with Existing Queries\nDESCRIPTION: Demonstrates how to use Laravel Query Builder with existing query conditions and scopes. It starts from an existing query, adds allowed includes, and chains additional query conditions.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/introduction.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$query = User::where('active', true);\n\n$userQuery = QueryBuilder::for($query) // start from an existing Builder instance\n    ->withTrashed() // use your existing scopes\n    ->allowedIncludes('posts', 'permissions')\n    ->where('score', '>', 42); // chain on any of Laravel's query builder methods\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields with Laravel Query Builder\nDESCRIPTION: Shows how to select only specific fields for users based on a 'fields' parameter in the request URL. This example allows selecting 'id' and 'email' fields and returns Users with only these fields set.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/introduction.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$users = QueryBuilder::for(User::class)\n    ->allowedFields(['id', 'email'])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Initializing QueryBuilder with a Base Query and Chaining Methods in PHP\nDESCRIPTION: This PHP snippet demonstrates initializing the `QueryBuilder` with a specific Eloquent base query (`User::where('id', 42)`) instead of the model's fully qualified class name. It also shows how to chain standard Laravel query builder methods like `where()` and result retrieval methods like `first()` onto the `QueryBuilder` instance after defining allowed includes.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/advanced-usage/extending-query-builder.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nQueryBuilder::for(User::where('id', 42)) // base query instead of model\n    ->allowedIncludes(['posts'])\n    ->where('activated', true) // chain on any of Laravel's query methods\n    ->first(); // we only need one specific user\n```\n```\n\n----------------------------------------\n\nTITLE: Appending Query Parameters to Pagination Results with Laravel Query Builder\nDESCRIPTION: This code example demonstrates how to use the Laravel Query Builder with pagination while appending the original request query parameters to the pagination result. It uses the allowedFilters method to define filterable fields and the appends method to include the query parameters in the pagination JSON.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/advanced-usage/pagination.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$users = QueryBuilder::for(User::class)\n    ->allowedFilters(['name', 'email'])\n    ->paginate()\n    ->appends(request()->query());\n```\n\n----------------------------------------\n\nTITLE: Setting Global Multi-Value Delimiter in Laravel Query Builder (PHP)\nDESCRIPTION: This snippet demonstrates how to set a custom delimiter (in this case, '|') globally for all multi-value query parameters (filters, includes, sorts) using `QueryBuilderRequest::setArrayValueDelimiter()`. The example shows a URL with pipe-delimited values and the resulting filter array after parsing.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/advanced-usage/multi-value-delimiter.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// GET /api/endpoint?filter=12,4V|4,7V|2,1V\n\nQueryBuilderRequest::setArrayValueDelimiter('|');\n\nQueryBuilder::for(Model::class)\n    ->allowedFilters(AllowedFilter::exact('voltage'))\n    ->get();\n\n// filters: [ 'voltage' => [ '12,4V', '4,7V', '2,1V' ]]\n```\n\n----------------------------------------\n\nTITLE: Applying Delimiter Globally via Service Provider or Middleware in PHP\nDESCRIPTION: This snippet shows two common approaches for applying a custom multi-value delimiter (';') globally across a Laravel application using the spatie/laravel-query-builder. The first method involves setting the delimiter in a Service Provider's `boot` method, ensuring it's applied early in the application lifecycle. The second method uses a dedicated middleware, allowing the delimiter change to be applied selectively to specific routes or groups.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/advanced-usage/multi-value-delimiter.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// YourServiceProvider.php\npublic function boot() {\n    QueryBuilderRequest::setArrayValueDelimiter(';');\n}\n\n// ApplySemicolonDelimiterMiddleware.php\npublic function handle($request, $next) {\n    QueryBuilderRequest::setArrayValueDelimiter(';');\n    return $next($request);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Feature-Specific Delimiters in Laravel Query Builder (PHP)\nDESCRIPTION: This snippet illustrates how to configure custom delimiters for specific query builder features independently using dedicated static methods on the `QueryBuilderRequest` class. This allows for fine-grained control over how multi-value parameters are parsed for includes, appends, fields, sorts, and filters separately, using ';' as the delimiter in this example.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/advanced-usage/multi-value-delimiter.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nQueryBuilderRequest::setIncludesArrayValueDelimiter(';'); // Includes\nQueryBuilderRequest::setAppendsArrayValueDelimiter(';');  // Appends\nQueryBuilderRequest::setFieldsArrayValueDelimiter(';');   // Fields\nQueryBuilderRequest::setSortsArrayValueDelimiter(';');    // Sorts\nQueryBuilderRequest::setFilterArrayValueDelimiter(';');   // Filter\n```\n\n----------------------------------------\n\nTITLE: Overriding Delimiter for a Single Filter in Laravel Query Builder (PHP)\nDESCRIPTION: This snippet demonstrates how to override the default or globally configured delimiter for a single specific filter when defining allowed filters. The `AllowedFilter::exact` method accepts an optional fourth boolean parameter (set to true to enable custom delimiter) and a fifth string parameter (';') to specify the delimiter to use exclusively for parsing the values of the 'id' filter (mapped to 'ref_id' column). This is useful when a particular filter's values might contain the standard delimiter.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/advanced-usage/multi-value-delimiter.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// GET /api/endpoint?filter[id]=h4S4MG3(+>azv4z/I<o>,>XZII/Q1On\nAllowedFilter::exact('id', 'ref_id', true, ';');\n```\n\n----------------------------------------\n\nTITLE: Multiple Relationship Includes in Laravel\nDESCRIPTION: Shows how to include multiple relationships by separating them with commas in the query parameter.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/including-relationships.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// GET /users?include=posts,permissions\n$users = QueryBuilder::for(User::class)\n    ->allowedIncludes(['posts', 'permissions'])\n    ->get();\n\n// $users will contain all users with their posts and permissions loaded\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Query Builder via Composer\nDESCRIPTION: Command to install the Laravel Query Builder package using Composer package manager.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spatie/laravel-query-builder\n```\n\n----------------------------------------\n\nTITLE: Default Relationship Loading in Laravel\nDESCRIPTION: Demonstrates how to set default relationship includes using Laravel's built-in with() method alongside allowed includes.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/including-relationships.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$users = QueryBuilder::for(User::class)\n    ->allowedIncludes(['friends'])\n    ->with('posts') // posts will always by included, friends can be requested\n    ->withCount('posts')\n    ->withExists('posts')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Handling Disallowed Field Selection in Laravel Query Builder (PHP)\nDESCRIPTION: This PHP code illustrates error handling when a disallowed field is requested. If a request (e.g., `GET /users?fields[users]=email`) tries to select a field (`email`) not listed in `allowedFields('name')`, the `spatie/laravel-query-builder` package throws an `InvalidFieldQuery` exception.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/features/selecting-fields.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n```php\n$users = QueryBuilder::for(User::class)\n    ->allowedFields('name')\n    ->get();\n\n// GET /users?fields[users]=email will throw an `InvalidFieldQuery` exception as `email` is not an allowed field.\n```\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Filter in Laravel Query Builder\nDESCRIPTION: This code demonstrates how to register a custom filter with the QueryBuilder. It uses the `allowedFilters` method to specify which filters are allowed, including the custom `FiltersUserPermission` filter.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/advanced-usage/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filters\\FiltersUserPermission;\n\n$users = QueryBuilder::for(User::class)\n    ->allowedFilters([\n        AllowedFilter::custom('permission', new FiltersUserPermission),\n        AllowedFilter::exact('id'),\n        'name',\n        'email',\n    ])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Sort in Laravel Query Builder\nDESCRIPTION: This code shows how to register a custom sort with the QueryBuilder. It uses the `allowedSorts` method to specify which sorts are allowed, including the custom `SortBySubRelation` sort.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/advanced-usage/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Sorts\\SortBySubRelation;\n\n$users = QueryBuilder::for(User::class)\n    ->allowedSorts([\n        AllowedSort::custom('street', new SortBySubRelation(Address::class, 'street')),\n        'name',\n        'email',\n    ])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Include in Laravel Query Builder\nDESCRIPTION: This code illustrates how to register a custom include with the QueryBuilder. It uses the `allowedIncludes` method to specify which includes are allowed, including the custom `IncludePostCount` include.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/advanced-usage/_index.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Includes\\IncludePostCount;\n\n$users = QueryBuilder::for(User::class)\n    ->allowedIncludes([\n        AllowedInclude::custom('postCount', new IncludePostCount),\n        'posts',\n        'permissions'\n    ])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Querying API with Includes, Filters, and Fields in Laravel\nDESCRIPTION: This snippet demonstrates how to structure a GET request to an API endpoint using Laravel Query Builder. It includes examples of including relationships, filtering by nested attributes, and selecting specific fields.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/UPGRADING.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/users\n        ?include=latestPosts,friendRequests\n        &filter[homeAddress.city]=Antwerp\n        &fields[related_models.test_models]=id,name\n```\n\n----------------------------------------\n\nTITLE: Configuring QueryBuilder for Laravel API Requests\nDESCRIPTION: This PHP code snippet shows how to set up a QueryBuilder instance for a User model in Laravel. It demonstrates allowing specific includes, filters, and fields to match the structure of the API request.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/UPGRADING.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\QueryBuilder\\QueryBuilder;\n\nQueryBuilder::for(User::class)\n    ->allowedIncludes(['latestPosts', 'friendRequests'])\n    ->allowedFilters(['homeAddress.city'])\n    ->allowedFields(['related_models.test_models.id', 'related_models.test_models.name']);\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Query Builder Package via Composer\nDESCRIPTION: Command to install the Spatie Laravel Query Builder package through Composer dependency manager.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/installation-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spatie/laravel-query-builder\n```\n\n----------------------------------------\n\nTITLE: Publishing Laravel Query Builder Configuration File\nDESCRIPTION: Artisan command to publish the package configuration file to allow customization of query parameters and behavior.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/installation-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\QueryBuilder\\QueryBuilderServiceProvider\" --tag=\"query-builder-config\"\n```\n\n----------------------------------------\n\nTITLE: Default Configuration for Laravel Query Builder\nDESCRIPTION: The default configuration file for Laravel Query Builder that allows customization of query parameters, relationship suffixes, exception behavior, and relationship name formatting.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/docs/installation-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n\n    /*\n     * By default the package will use the `include`, `filter`, `sort`\n     * and `fields` query parameters as described in the readme.\n     *\n     * You can customize these query string parameters here.\n     */\n    'parameters' => [\n        'include' => 'include',\n\n        'filter' => 'filter',\n\n        'sort' => 'sort',\n\n        'fields' => 'fields',\n\n        'append' => 'append',\n    ],\n\n    /*\n     * Related model counts are included using the relationship name suffixed with this string.\n     * For example: GET /users?include=postsCount\n     */\n    'count_suffix' => 'Count',\n\n    /*\n     * Related model exists are included using the relationship name suffixed with this string.\n     * For example: GET /users?include=postsExists\n     */\n    'exists_suffix' => 'Exists',\n\n    /*\n     * By default the package will throw an `InvalidFilterQuery` exception when a filter in the\n     * URL is not allowed in the `allowedFilters()` method.\n     */\n    'disable_invalid_filter_query_exception' => false,\n\n    /*\n     * By default the package will throw an `InvalidSortQuery` exception when a sort in the\n     * URL is not allowed in the `allowedSorts()` method.\n     */\n    'disable_invalid_sort_query_exception' => false,\n\n    /*\n     * By default the package will throw an `InvalidIncludeQuery` exception when an include in the\n     * URL is not allowed in the `allowedIncludes()` method.\n     */\n    'disable_invalid_includes_query_exception' => false,\n\n    /*\n     * By default, the package expects relationship names to be snake case plural when using fields[relationship].\n     * For example, fetching the id and name for a userOwner relation would look like this:\n     * GET /users?fields[user_owner]=id,name\n     *\n     * Set this to `false` if you don't want that and keep the requested relationship names as-is and allows you to\n     * request the fields using a camelCase relationship name:\n     * GET /users?fields[userOwner]=id,name\n     */\n    'convert_relation_names_to_snake_case_plural' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Security Warning for Laravel Query Builder Versions 1.0-1.7\nDESCRIPTION: A security notice present across all versions warning about SQL injection vulnerabilities in the package versions from 1.0.0 through 1.7.0.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**DO NOT USE: THIS VERSION ALLOWS SQL INJECTION ATTACKS**\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Laravel Query Builder\nDESCRIPTION: Command to run the test suite for the Laravel Query Builder package.\nSOURCE: https://github.com/spatie/laravel-query-builder/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncomposer test\n```"
  }
]