[
  {
    "owner": "streamingfast",
    "repo": "substreams-sink-sql",
    "content": "TITLE: Sink Configuration in YAML\nDESCRIPTION: YAML configuration for the Substreams sink module specifying the output module, service type, and schema location\nSOURCE: https://github.com/streamingfast/substreams-sink-sql/blob/develop/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsink:\n   module: db_out\n   type: sf.substreams.sink.sql.v1.Service\n   config:\n      schema: \"./schema.sql\"\n```\n\n----------------------------------------\n\nTITLE: Database Setup Commands\nDESCRIPTION: Environment setup and database initialization commands for both Postgres and Clickhouse\nSOURCE: https://github.com/streamingfast/substreams-sink-sql/blob/develop/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport DSN=\"postgres://dev-node:insecure-change-me-in-prod@localhost:5432/dev-node?sslmode=disable\"\nsubstreams-sink-sql setup $DSN docs/tutorial/substreams.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport DSN=\"clickhouse://default:@localhost:9000/default\"\nsubstreams-sink-sql setup $DSN docs/tutorial/substreams.yaml\n```\n\n----------------------------------------\n\nTITLE: Batch CSV Injection into PostgreSQL\nDESCRIPTION: Bash loop to iterate through generated CSV files and inject them into PostgreSQL database using substreams-sink-sql inject-csv command. Includes error checking to break on failure.\nSOURCE: https://github.com/streamingfast/substreams-sink-sql/blob/develop/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfor i in `ls ./data/tables | grep -v state.yaml`; do \\\n  substreams-sink-sql inject-csv \"psql://dev-node:insecure-change-me-in-prod@localhost:5432/dev-node?sslmode=disable\" ./data/tables \"$i\" :14490000; \\\n  if [[ $? != 0 ]]; then break; fi; \\\ndone\n```\n\n----------------------------------------\n\nTITLE: Generating CSV Files from Substreams Data\nDESCRIPTION: Command to generate block-segmented CSV files from Substreams data into a specified output directory. Uses PostgreSQL connection string and stops at block 14490000.\nSOURCE: https://github.com/streamingfast/substreams-sink-sql/blob/develop/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams-sink-sql generate-csv \"psql://dev-node:insecure-change-me-in-prod@localhost:5432/dev-node?sslmode=disable\" --output-dir ./data/tables :14490000\n```\n\n----------------------------------------\n\nTITLE: Starting Live Streaming\nDESCRIPTION: Command to start normal streaming operation after CSV injection, continuing from the last written block using the established cursor.\nSOURCE: https://github.com/streamingfast/substreams-sink-sql/blob/develop/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams-sink-sql run \"psql://dev-node:insecure-change-me-in-prod@localhost:5432/dev-node?sslmode=disable\" <spkg>\n```\n\n----------------------------------------\n\nTITLE: Verifying Cursor State\nDESCRIPTION: Command to verify the proper population of the cursors table by reading the current cursor state. Essential for validating the handoff point between CSV injection and live streaming.\nSOURCE: https://github.com/streamingfast/substreams-sink-sql/blob/develop/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsubstreams-sink-sql tools --dsn=\"psql://dev-node:insecure-change-me-in-prod@localhost:5432/dev-node?sslmode=disable\" cursor read\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Schema from Substreams Protobuf in Bash\nDESCRIPTION: This script generates SQL schema files from Substreams protobuf definitions. It uses protoc to compile the protobuf files and a custom Go binary 'substreams-sink-sql' to create SQL table definitions. The script handles file paths, command execution, and error checking.\nSOURCE: https://github.com/streamingfast/substreams-sink-sql/blob/develop/pb/last_generate.txt#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/bash\n\nset -e\n\ncd \"$(dirname \"$0\")\"\n\nPROTO_DIR=\"../proto\"\nOUT_DIR=\"../schema\"\n\nrm -rf \"${OUT_DIR}\"\nmkdir -p \"${OUT_DIR}\"\n\nfor proto in $(find \"${PROTO_DIR}\" -name '*.proto'); do\n    protoc -I${PROTO_DIR} \\\n        --go_out=${OUT_DIR} --go_opt=paths=source_relative \\\n        --go-grpc_out=${OUT_DIR} --go-grpc_opt=paths=source_relative \\\n        \"${proto}\"\ndone\n\nfor file in $(find \"${OUT_DIR}\" -name '*.pb.go'); do\n    go run ../cmd/substreams-sink-sql/main.go generate-schema \"${file}\" > \"${file%.pb.go}.sql\"\ndone\n\necho \"Done generating SQL schema files in ${OUT_DIR}\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Clickhouse Database in SQL\nDESCRIPTION: Examples of connection strings for connecting to a Clickhouse database, both unencrypted and encrypted. Demonstrates how to specify host, port, database, username and password.\nSOURCE: https://github.com/streamingfast/substreams-sink-sql/blob/develop/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nclickhouse://<host>:9000/<database>?username=<user>&password=<password>\n```\n\nLANGUAGE: sql\nCODE:\n```\nclickhouse://<host>:9440/<database>?secure=true&skip_verify=true&username=<user>&password=<password>\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Substreams Tutorial\nDESCRIPTION: Commands for building the Substreams tutorial project from source using Cargo\nSOURCE: https://github.com/streamingfast/substreams-sink-sql/blob/develop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd docs/tutorial\ncargo build --target wasm32-unknown-unknown --release\ncd ../..\n```\n\n----------------------------------------\n\nTITLE: Setting Substreams Parameters in Shell\nDESCRIPTION: Example of using the --params or -p flag to set Substreams module parameters when running the sink. Shows how to specify multiple parameters.\nSOURCE: https://github.com/streamingfast/substreams-sink-sql/blob/develop/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-p <module>=<value>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers in Shell\nDESCRIPTION: Example of using the --header or -H flag to add custom headers when connecting to the Substreams server. Shows how to specify multiple headers.\nSOURCE: https://github.com/streamingfast/substreams-sink-sql/blob/develop/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--header, -H\n```"
  }
]