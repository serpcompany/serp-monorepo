[
  {
    "owner": "omnisat",
    "repo": "lasereyes-mono",
    "content": "TITLE: React Bitcoin Wallet Integration Example\nDESCRIPTION: Example of implementing Bitcoin wallet integration in a React application using LaserEyesProvider and useLaserEyes hook. Shows how to configure the provider with mainnet and create a basic wallet connection interface.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LaserEyesProvider, useLaserEyes, UNISAT, MAINNET } from '@omnisat/lasereyes-react';\n\nfunction App() {\n  return (\n    <LaserEyesProvider config={{network: MAINNET}}>\n      <WalletInfo />\n    </LaserEyesProvider>\n  );\n}\n\nfunction WalletInfo() {\n  const { address, connect } = useLaserEyes();\n\n  return (\n    <div>\n      {address ? (\n        <p>Connected: {address}</p>\n      ) : (\n        <button onClick={() => connect(UNISAT)}>Connect Wallet</button>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic LaserEyes Usage Examples\nDESCRIPTION: Examples of common wallet operations including connecting, requesting accounts, getting balance, sending Bitcoin, signing messages, and disconnecting.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-core/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Connect to a wallet\nawait client.connect(XVERSE);\n\n// Request wallet accounts\nconst accounts = await client.requestAccounts();\nconsole.log('Accounts:', accounts);\n\n// Get wallet balance\nconst balance = await client.getBalance();\nconsole.log('Balance:', balance.toString());\n\n// Send Bitcoin\nconst txId = await client.sendBTC('recipient-address', 10000); // 10,000 satoshis\nconsole.log('Transaction ID:', txId);\n\n// Sign a message\nconst signature = await client.signMessage('Hello, LaserEyes!');\nconsole.log('Signature:', signature);\n\n// Disconnect\nclient.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Using useLaserEyes Hook for Wallet Interaction in React\nDESCRIPTION: Shows how to use the useLaserEyes hook to access the connected wallet and its state within a React component. It displays the wallet address if connected, or a connect button if not.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-react/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// must be a child of a component that is wrapped with LaserEyesProvider\n\nimport { useLaserEyes } from '@omnisat/lasereyes-react';\n\nfunction WalletInfo() {\n  const { address, connect } = useLaserEyes();\n\n  return (\n    <div>\n      {address ? (\n        <p>Connected: {address}</p>\n      ) : (\n        <button onClick={connect}>Connect Wallet</button>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LaserEyes Client\nDESCRIPTION: Example of initializing the LaserEyes client with stores and configuration, then connecting to a wallet.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-core/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LaserEyesClient, createStores, createConfig, XVERSE } from '@omnisat/lasereyes-core';\n\n// Create stores for state management\nconst stores = createStores();\n\n// Optional: Create configuration with network setting\nconst config = createConfig({ network: 'mainnet' });\n\n// Initialize the client\nconst client = new LaserEyesClient(stores, config);\nclient.initialize();\n\n// Connect to a wallet (e.g., Xverse)\nclient.connect(XVERSE).then(() => {\n  console.log('Connected to Xverse wallet');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Lasereyes Modal Implementation\nDESCRIPTION: Complete example showing how to implement the Lasereyes Modal with a ConnectWalletButton in a React application.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-ui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectWalletButton, LaserEyesModalProvider } from '@omnisat/lasereyes/ui';\nimport '@omnisat/lasereyes/ui/style.css';\n\nfunction App() {\n  return (\n    <LaserEyesModalProvider>\n      <div>\n        <h1>Welcome</h1>\n        <ConnectWalletButton />\n      </div>\n    </LaserEyesModalProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up LaserEyesProvider in React\nDESCRIPTION: Demonstrates how to wrap a React application with the LaserEyesProvider component to provide wallet functionality throughout the app via React context. The network parameter is set to 'mainnet'.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LaserEyesProvider } from '@omnisat/lasereyes-react';\n\nfunction App() {\n  return (\n    <LaserEyesProvider network=\"mainnet\">\n      {/* Rest of your application */}\n    </LaserEyesProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Runes Example\nDESCRIPTION: Example demonstrating rune transactions and balance checking.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-core/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RUNES } from '@omnisat/lasereyes-core';\n\n// Send runes\nconst txId = await client.send(RUNES, {\n  runeId: '123456:78',\n  fromAddress: 'senderAddress',\n  toAddress: 'recipientAddress',\n  amount: 100,\n  network: 'mainnet'\n});\n\n// Get rune balances\nconst runeBalances = await client.getMetaBalances(RUNES);\n```\n\n----------------------------------------\n\nTITLE: Working with Inscriptions Example\nDESCRIPTION: Example showing how to create inscriptions and retrieve wallet inscriptions.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-core/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Create an inscription\nconst content = Buffer.from('Hello, Ordinals!').toString('base64');\nconst txId = await client.inscribe(content, TEXT_PLAIN);\nconsole.log('Inscription transaction ID:', txId);\n\n// Get all inscriptions for the connected wallet\nconst inscriptions = await client.getInscriptions();\nconsole.log('Inscriptions:', inscriptions);\n```\n\n----------------------------------------\n\nTITLE: Custom Modal Implementation with Hook\nDESCRIPTION: Example of using the useLaserEyesModal hook to create a custom wallet connection button.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-ui/README.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLaserEyesModal } from '@omnisat/lasereyes/ui';\n\nfunction CustomWalletButton() {\n  const { showModal } = useLaserEyesModal();\n\n  return <button onClick={showModal}>Connect Wallet</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Bitcoin Example\nDESCRIPTION: Example implementation of a Bitcoin sending interface with error handling.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-core/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndocument.getElementById('send-button').addEventListener('click', async () => {\n  const recipient = document.getElementById('recipient').value;\n  const amountSats = parseInt(document.getElementById('amount').value);\n  \n  try {\n    const txId = await client.sendBTC(recipient, amountSats);\n    document.getElementById('tx-display').textContent = `Transaction sent: ${txId}`;\n  } catch (error) {\n    console.error('Send error:', error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Inscriptions with LaserEyes Core in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an inscription using LaserEyes Core. It listens for a button click event, encodes the inscription text as base64, and uses a client object to inscribe the content with a plain text content type.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-core/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndocument.getElementById('inscribe-button').addEventListener('click', async () => {\n  const text = document.getElementById('inscription-text').value;\n  const contentBase64 = Buffer.from(text).toString('base64');\n  \n  try {\n    const txId = await client.inscribe(contentBase64, TEXT_PLAIN);\n    document.getElementById('inscription-display').textContent = `Inscription created: ${txId}`;\n  } catch (error) {\n    console.error('Inscription error:', error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Modal Control Implementation\nDESCRIPTION: Example showing how to manually control the ConnectWalletModal component using React state.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-ui/README.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport { ConnectWalletModal } from '@omnisat/lasereyes/ui';\n\nfunction ManualModalExample() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <button onClick={() => setIsOpen(true)}>Connect</button>\n      <ConnectWalletModal open={isOpen} onClose={() => setIsOpen(false)} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Wallet Connection Example\nDESCRIPTION: Example showing how to implement a basic wallet connection UI with error handling.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-core/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LaserEyesClient, createStores, UNISAT } from '@omnisat/lasereyes-core';\n\nconst client = new LaserEyesClient(createStores());\nclient.initialize();\n\ndocument.getElementById('connect-button').addEventListener('click', async () => {\n  try {\n    await client.connect(UNISAT);\n    const address = client.$store.get().address;\n    document.getElementById('address-display').textContent = address;\n  } catch (error) {\n    console.error('Connection error:', error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Working with PSBTs Example\nDESCRIPTION: Example demonstrating how to sign and broadcast Partially Signed Bitcoin Transactions (PSBTs).\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-core/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Sign a PSBT\nconst { signedPsbtHex, signedPsbtBase64, txId } = await client.signPsbt(\n  psbtHex,   // PSBT in hex format\n  true,      // finalize\n  true       // broadcast\n);\n\n// If not broadcasting immediately, push the PSBT later\nif (!txId) {\n  const broadcastTxId = await client.pushPsbt(signedPsbtHex);\n  console.log('Broadcast transaction ID:', broadcastTxId);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing LaserEyes Core via Package Managers\nDESCRIPTION: Commands for installing the @omnisat/lasereyes-core package using various package managers including NPM, Yarn, PNPM, and Bun.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpm install @omnisat/lasereyes-core\n\n# Yarn\nyarn add @omnisat/lasereyes-core\n\n# PNPM\npnpm install @omnisat/lasereyes-core\n\n# Bun\nbun install @omnisat/lasereyes-core\n```\n\n----------------------------------------\n\nTITLE: Installing Lasereyes Packages\nDESCRIPTION: Commands for installing either the complete Lasereyes package or just the UI package using npm or yarn.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @omnisat/lasereyes\n# OR\nyarn add @omnisat/lasereyes\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @omnisat/lasereyes-ui\n# OR\nyarn add @omnisat/lasereyes-ui\n```\n\n----------------------------------------\n\nTITLE: Using WalletIcon Component for Multiple Wallet Icons in React\nDESCRIPTION: Shows how to use the WalletIcon component to display multiple wallet icons based on wallet names. It maps through an array of wallet names (UNISAT and XVERSE) to render icons with specified size and className.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-react/README.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WalletIcon, UNISAT, XVERSE } from '@omnisat/lasereyes-react';\n\nconst WalletConnectPage = () => {\n  return (\n    <div>\n      {[UNISAT, XVERSE].map((walletName) => (\n        <WalletIcon key={walletName} walletName={walletName} size={45} className={\"mx-4\"} />\n      ))}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Laser Eyes Package with Yarn\nDESCRIPTION: Command to install the @omnisat/lasereyes package using Yarn package manager.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @omnisat/lasereyes\n```\n\n----------------------------------------\n\nTITLE: Updating LaserEyes React Usage Example\nDESCRIPTION: This snippet demonstrates the updated usage of LaserEyes with React, replacing useWallet with useLaserEyes and showing how to connect using the UNISAT parameter.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/RELEASE_NOTES.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useLaserEyes } from '@omnisat/lasereyes'\n\nconst { connect, address } = useLaserEyes()\n\nconst handleConnect = () => {\n  connect('UNISAT')\n}\n\nreturn (\n  <div>\n    {address ? (\n      <p>Connected: {address}</p>\n    ) : (\n      <button onClick={handleConnect}>Connect</button>\n    )}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Importing LaserEyesModalProvider\nDESCRIPTION: Example of importing the LaserEyesModalProvider component from the UI package.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-ui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LaserEyesModalProvider } from '@omnisat/lasereyes/ui';\n```\n\n----------------------------------------\n\nTITLE: Displaying Wallet Icon using UnisatLogo Component in React\nDESCRIPTION: Demonstrates how to use the UnisatLogo component, which is an SVG wallet icon exported as a React component. It allows customization of size, className, and variant.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-react/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UnisatLogo } from '@omnisat/lasereyes-react';\n\nfunction WalletDisplay() {\n  return <UnisatLogo size={size} className={className} variant={variant} />;\n}\n```\n\n----------------------------------------\n\nTITLE: LaserEyesModal Context Interface\nDESCRIPTION: TypeScript interface definition for the LaserEyesModal context, showing available properties and methods.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-ui/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LaserEyesModalContext {\n  isOpen: boolean;\n  isLoading: boolean;\n  showModal: () => void;\n  hideModal: () => void;\n  config: LaserEyesModalConfig;\n  setConfig: (config: LaserEyesModalConfig) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing LaserEyes Package with PNPM\nDESCRIPTION: Command to install the main @omnisat/lasereyes package using PNPM package manager. This is the primary installation method for adding the library to your project.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/prompts/lasereyes.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @omnisat/lasereyes\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for LaserEyes Demo\nDESCRIPTION: This command installs all necessary dependencies for the LaserEyes demo application using pnpm package manager. It should be run in the project root directory before starting the application.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/apps/demo.lasereyes.build/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Development Setup Commands\nDESCRIPTION: Commands for setting up the development environment in the monorepo using pnpm package manager.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running React App in Development Mode\nDESCRIPTION: Starts the React application in development mode, making it accessible at localhost:3000 with hot-reloading support and lint error reporting.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/apps/react-ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog\nDESCRIPTION: Detailed changelog entries showing version history with patch changes, minor updates, and dependency modifications for the lasereyes-core package.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-core/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @omnisat/lasereyes-core\n\n## 0.0.69-next.5\n\n### Patch Changes\n\n- e61e794: testing\n- e8bf235: buildn\n- 8902f2a: changes test\n- 897d3d3: test changesets\n\n## 0.0.69-next.1\n\n### Patch Changes\n\n- 6c0eb50: testing\n\n## 0.0.69-next.0\n\n### Patch Changes\n\n- 4546fa5: testing\n\n## 0.0.0-next-20250417121819\n\n### Patch Changes\n\n- 6fbc528: release testing\n\n## 0.0.0-next-20250417120840\n\n### Patch Changes\n\n- a19fea3: release testing\n\n## 0.0.0-next-20250417115249\n\n### Patch Changes\n\n- 4ed5339: working through changesets\n\n## 0.0.69\n\n### Patch Changes\n\n- bbbc320: Patch release for development version (maintaining 0.0.x versioning)\n\n## 0.2.1\n\n### Patch Changes\n\n- 9ebd105: Patch release for development version\n\n## 0.2.0\n\n### Minor Changes\n\n- 55417a2: Development updates for next release\n\n### Patch Changes\n\n- Patch updates for stable release\n\n## 0.2.0-next.0\n\n### Minor Changes\n\n- Development updates for next release\n\n## 0.1.0\n\n### Minor Changes\n\n- Update packages with latest development changes\n\n## 0.0.66\n\n### Patch Changes\n\n- 2c5f480: disable xverse inscription fetch\n- b7cc8e8: fix errors related to lagging state\n- 70db360: bump to publish xverse bypass to fight problems w inscription fetching.\n\n## 0.0.66-next.7\n\n### Patch Changes\n\n- 2c5f480: disable xverse inscription fetch\n- 70db360: bump to publish xverse bypass to fight problems w inscription fetching.\n\n## 0.0.66-next.6\n\n### Patch Changes\n\n- 70db360: bump to publish xverse bypass to fight problems w inscription fetching.\n\n## 0.0.66-next.5\n\n### Patch Changes\n\n- 2c5f480: disable xverse inscription fetch\n\n## 0.0.66-next.4\n\n### Patch Changes\n\n- 46cdbd4: bump to trigger deployment\n\n## 0.0.66-next.3\n\n### Patch Changes\n\n- fix errors related to lagging state\n\n## 0.0.66-next.2\n\n### Patch Changes\n\n- Export `MaestroDataSource`, `MempoolSpaceDataSource`, `DataSourceManager`, and `SandshrewDataSource` from `lasereyes-core`.\n\n## 0.0.66-next.1\n\n### Patch Changes\n\n- d76e9f1: chore: update dependencies and refactor input handling in signPsbt method\n\n  - Upgrade `sats-connect` to version 3.3.0\n  - Modify `inputsToSign` to accept an array of objects for better structure\n  - Refactor various provider implementations to accommodate new input structure\n  - Adjust React peer dependencies to support versions >=17\n\n## 0.0.66-next.0\n\n### Patch Changes\n\n- 4ec0930: - add `inputsToSign` to signPsbt method as an option\n  - use stored data in leather provider rather than repeated pop-ups\n\n## 0.0.65\n\n### Patch Changes\n\n- 13a6ff9: bug fix, config\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production\nDESCRIPTION: Builds the React application for production deployment, creating optimized bundles with hashed filenames in the build folder.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/apps/react-ui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Updating LaserEyes Package Versions in package.json\nDESCRIPTION: This snippet shows the version updates for LaserEyes packages in the package.json file. It includes updates for lasereyes-core, lasereyes-react, and lasereyes packages.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/RELEASE_NOTES.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@omnisat/lasereyes-core\": \"0.0.47-rc.5\",\n  \"@omnisat/lasereyes-react\": \"0.0.42-rc.4\",\n  \"@omnisat/lasereyes-vue\": \"0.0.8-rc.1\",\n  \"@omnisat/lasereyes\": \"0.0.123-rc.6\"\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Detailed changelog entries documenting version changes, patches, and dependency updates for the @omnisat/lasereyes-ui package\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/lasereyes-ui/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @omnisat/lasereyes-ui\n\n## 0.0.6-next.5\n\n### Patch Changes\n\n- Updated dependencies [328c4dd]\n  - @omnisat/lasereyes-react@0.0.64-next.5\n\n## 0.0.6-next.4\n\n### Patch Changes\n\n- e61e794: testing\n- 8902f2a: changes test\n- 897d3d3: test changesets\n- Updated dependencies [e61e794]\n- Updated dependencies [e8bf235]\n- Updated dependencies [8902f2a]\n- Updated dependencies [897d3d3]\n  - @omnisat/lasereyes-react@0.0.64-next.4\n  - @omnisat/lasereyes-core@0.0.69-next.5\n```\n\n----------------------------------------\n\nTITLE: Running React Tests in Watch Mode\nDESCRIPTION: Launches the test runner in interactive watch mode, which automatically reruns tests when changes are made to the codebase.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/apps/react-ui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Updates in Release Notes\nDESCRIPTION: Documents version changes for lasereyes packages including core, react and main versions, with updates to release candidate versions.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/RELEASE_NOTES.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nlasereyes-core: \"0.0.38-rc.6\"\nlasereyes-react: \"0.0.30-rc.7\"\nlasereyes: \"0.0.113-rc.18\"\n```\n\n----------------------------------------\n\nTITLE: Package Version Changes\nDESCRIPTION: Lists the package version updates across different lasereyes components showing transitions from older to newer versions.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/RELEASE_NOTES.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- lasereyes-core: \"0.0.34-rc.0\" from \"0.0.33\"\n- lasereyes-react: \"0.0.27-rc.2\" from \"0.0.26\"\n- lasereyes: \"0.0.104-rc.2\" from \"0.0.103\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Version History in Markdown\nDESCRIPTION: This snippet shows the structure of documenting version history and dependency updates using Markdown. It includes multiple version entries with patch changes and dependency updates.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/apps/lasereyes-docs/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# lasereyes-docs\n\n## 0.0.0-next.3\n\n### Patch Changes\n\n- Updated dependencies [328c4dd]\n  - @omnisat/lasereyes-react@0.0.64-next.5\n\n## 0.0.0-next.2\n\n### Patch Changes\n\n- Updated dependencies [e61e794]\n- Updated dependencies [e8bf235]\n- Updated dependencies [8902f2a]\n- Updated dependencies [897d3d3]\n  - @omnisat/lasereyes-react@0.0.64-next.4\n  - @omnisat/lasereyes-core@0.0.69-next.5\n\n## 0.0.0-next.1\n\n### Patch Changes\n\n- Updated dependencies [6c0eb50]\n  - @omnisat/lasereyes-react@0.0.64-next.1\n  - @omnisat/lasereyes-core@0.0.69-next.1\n\n## 0.0.0-next.0\n\n### Patch Changes\n\n- Updated dependencies [4546fa5]\n  - @omnisat/lasereyes-react@0.0.64-next.0\n  - @omnisat/lasereyes-core@0.0.69-next.0\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Standard changelog format showing version numbers, change types, and dependency updates using semantic versioning.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/apps/demo.lasereyes.build/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.0-next.3\n\n### Patch Changes\n\n- @omnisat/lasereyes@0.0.147-next.5\n```\n\n----------------------------------------\n\nTITLE: Creating .npmrc File in GitHub Actions Workflow\nDESCRIPTION: This snippet creates an .npmrc file in a GitHub Actions workflow. It writes the NPM_TOKEN secret to the file for authentication with the npm registry.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/RELEASE_NOTES.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Create .npmrc file\n  run: |\n    echo \"//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}\" > .npmrc\n  env:\n    NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Workspace Dependency Configuration\nDESCRIPTION: Shows the workspace dependency configuration change from specific versions to workspace wildcards for local development.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/RELEASE_NOTES.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n@omnisat/lasereyes-core: workspace:*\n@omnisat/lasereyes-react: workspace:*\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App\nDESCRIPTION: Removes the single build dependency and copies all configuration files and transitive dependencies directly into the project for full control. This is a one-way operation and cannot be reversed.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/apps/react-ui/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules\nDESCRIPTION: Defines default access rules for web crawlers using the standard robots.txt format. This configuration allows unrestricted access to all user agents by specifying a wildcard user-agent (*) with no disallow rules.\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/apps/react-ui/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Package Title Definition in Markdown\nDESCRIPTION: Package name definition using markdown code block syntax\nSOURCE: https://github.com/omnisat/lasereyes-mono/blob/main/packages/eslint-config/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@turbo/eslint-config`\n```"
  }
]