[
  {
    "owner": "openai-php",
    "repo": "client",
    "content": "TITLE: Initializing OpenAI Client and Making a Chat Request in PHP\nDESCRIPTION: Example of how to initialize the OpenAI client using an API key and make a simple chat request using the GPT-4 model.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$yourApiKey = getenv('YOUR_API_KEY');\n$client = OpenAI::client($yourApiKey);\n\n$result = $client->chat()->create([\n    'model' => 'gpt-4o',\n    'messages' => [\n        ['role' => 'user', 'content' => 'Hello!'],\n    ],\n]);\n\necho $result->choices[0]->message->content; // Hello! How can I assist you today?\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom OpenAI Client in PHP\nDESCRIPTION: Demonstrates how to create a custom configured OpenAI client with various options such as API key, organization, base URI, HTTP client, headers, and query parameters.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$yourApiKey = getenv('YOUR_API_KEY');\n\n$client = OpenAI::factory()\n    ->withApiKey($yourApiKey)\n    ->withOrganization('your-organization') // default: null\n    ->withProject('Your Project') // default: null\n    ->withBaseUri('openai.example.com/v1') // default: api.openai.com/v1\n    ->withHttpClient($httpClient = new \\GuzzleHttp\\Client([])) // default: HTTP client found using PSR-18 HTTP Client Discovery\n    ->withHttpHeader('X-My-Header', 'foo')\n    ->withQueryParam('my-param', 'bar')\n    ->withStreamHandler(fn (RequestInterface $request): ResponseInterface => $httpClient->send($request, [\n        'stream' => true // Allows to provide a custom stream handler for the http client.\n    ]))\n    ->make();\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI PHP Client via Composer\nDESCRIPTION: Command to install the OpenAI PHP client package using Composer package manager. Also includes an optional step to install Guzzle HTTP client if a PSR-18 client is not already integrated.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require openai-php/client\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require guzzlehttp/guzzle\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Completions with OpenAI PHP Client\nDESCRIPTION: Demonstrates how to create chat completions using the OpenAI PHP client. Shows basic usage with the GPT-3.5-turbo model, including response handling and accessing various properties of the response object.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->chat()->create([\n    'model' => 'gpt-3.5-turbo',\n    'messages' => [\n        ['role' => 'user', 'content' => 'Hello!'],\n    ],\n]);\n\n$response->id; // 'chatcmpl-6pMyfj1HF4QXnfvjtfzvufZSQq6Eq'\n$response->object; // 'chat.completion'\n$response->created; // 1677701073\n$response->model; // 'gpt-3.5-turbo-0301'\n\nforeach ($response->choices as $choice) {\n    $choice->index; // 0\n    $choice->message->role; // 'assistant'\n    $choice->message->content; // '\\n\\nHello there! How can I assist you today?'\n    $choice->logprobs; // null\n    $choice->finishReason; // 'stop'\n}\n\n$response->usage->promptTokens; // 9,\n$response->usage->completionTokens; // 12,\n$response->usage->totalTokens; // 21\n\n$response->toArray(); // ['id' => 'chatcmpl-6pMyfj1HF4QXnfvjtfzvufZSQq6Eq', ...]\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Completions with Tool Calls\nDESCRIPTION: Shows how to create chat completions with tool calls functionality. Includes example of defining a weather-checking tool and handling the response.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->chat()->create([\n    'model' => 'gpt-3.5-turbo-0613',\n    'messages' => [\n        ['role' => 'user', 'content' => 'What\\'s the weather like in Boston?'],\n    ],\n    'tools' => [\n        [\n            'type' => 'function',\n            'function' => [\n                'name' => 'get_current_weather',\n                'description' => 'Get the current weather in a given location',\n                'parameters' => [\n                    'type' => 'object',\n                    'properties' => [\n                        'location' => [\n                            'type' => 'string',\n                            'description' => 'The city and state, e.g. San Francisco, CA',\n                        ],\n                        'unit' => [\n                            'type' => 'string',\n                            'enum' => ['celsius', 'fahrenheit']\n                        ],\n                    ],\n                    'required' => ['location'],\n                ],\n            ],\n        ]\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Streamed Chat Completions\nDESCRIPTION: Demonstrates how to create and handle streamed chat completions, including usage reporting functionality.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$stream = $client->chat()->createStreamed([\n    'model' => 'gpt-4o',\n    'messages' => [\n        ['role' => 'user', 'content' => 'Hello!'],\n    ],\n]);\n\nforeach($stream as $response){\n    $response->choices[0]->toArray();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI Service Client in PHP\nDESCRIPTION: Demonstrates how to configure the OpenAI PHP client to use Azure OpenAI Service by specifying the base URI, API key header, and API version query parameter.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$client = OpenAI::factory()\n    ->withBaseUri('{your-resource-name}.openai.azure.com/openai/deployments/{deployment-id}')\n    ->withHttpHeader('api-key', '{your-api-key}')\n    ->withQueryParam('api-version', '{version}')\n    ->make();\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Timeout for OpenAI API in PHP\nDESCRIPTION: Shows how to increase the HTTP client timeout using the factory method by configuring a custom Guzzle client with a specific timeout value.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nOpenAI::factory()\n    ->withApiKey($apiKey)\n    ->withOrganization($organization)\n    ->withHttpClient(new \\GuzzleHttp\\Client(['timeout' => $timeout]))\n    ->make();\n```\n\n----------------------------------------\n\nTITLE: Listing Available Models using OpenAI PHP Client\nDESCRIPTION: Example of how to use the models()->list() method to retrieve a list of available models from the OpenAI API.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->models()->list();\n\n$response->object; // 'list'\n\nforeach ($response->data as $result) {\n    $result->id; // 'gpt-3.5-turbo-instruct'\n    $result->object; // 'model'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', 'data' => [...]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model Information using OpenAI PHP Client\nDESCRIPTION: Demonstrates how to use the models()->retrieve() method to get detailed information about a specific model from the OpenAI API.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->models()->retrieve('gpt-3.5-turbo-instruct');\n\n$response->id; // 'gpt-3.5-turbo-instruct'\n$response->object; // 'model'\n$response->created; // 1642018370\n$response->ownedBy; // 'openai'\n\n$response->toArray(); // ['id' => 'gpt-3.5-turbo-instruct', ...]\n```\n\n----------------------------------------\n\nTITLE: Basic Azure OpenAI Service Completion Request in PHP\nDESCRIPTION: Shows how to make a basic completion request with Azure OpenAI Service where the model is already specified in the base URI as part of the deployment ID.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n$result = $client->completions()->create([\n    'prompt' => 'PHP is'\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Embeddings with OpenAI API\nDESCRIPTION: Creates an embedding vector representing input text using the text-similarity-babbage-001 model. Returns embedding vectors and token usage information.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->embeddings()->create([\n    'model' => 'text-similarity-babbage-001',\n    'input' => 'The food was delicious and the waiter...', \n]);\n\n$response->object; // 'list'\n\nforeach ($response->embeddings as $embedding) {\n    $embedding->object; // 'embedding'\n    $embedding->embedding; // [0.018990106880664825, -0.0073809814639389515, ...]\n    $embedding->index; // 0\n}\n\n$response->usage->promptTokens; // 8,\n$response->usage->totalTokens; // 8\n\n$response->toArray(); // ['data' => [...], ...]\n```\n\n----------------------------------------\n\nTITLE: Creating a Run in PHP using OpenAI Client\nDESCRIPTION: Creates a new run within a thread using the OpenAI PHP client. It demonstrates how to set the thread ID and assistant ID, and how to access various properties of the response.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->threads()->runs()->create(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868', \n    parameters: [\n        'assistant_id' => 'asst_gxzBkD1wkKEloYqZ410pT5pd',\n    ],\n);\n\n$response->id; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->object; // 'thread.run'\n$response->createdAt; // 1623936000\n$response->assistantId; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->status; // 'queued'\n$response->startedAt; // null\n$response->expiresAt; // 1699622335\n$response->cancelledAt; // null\n$response->failedAt; // null\n$response->completedAt; // null\n$response->incompleteDetails; // null\n$response->lastError; // null\n$response->model; // 'gpt-4o'\n$response->instructions; // null\n$response->tools; // []\n$response->metadata; // []\n$response->usage->total_tokens; // 579\n$response->temperature; // null\n$response->topP; // null\n$response->maxPromptTokens; // 1000\n$response->maxCompletionTokens; // 1000\n$response->truncationStrategy->type; // 'auto'\n$response->toolChoice; // 'auto'\n$response->responseFormat; // 'auto'\n\n$response->toArray(); // ['id' => 'run_4RCYyYzX9m41WQicoJtUQAb8', ...]\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a Thread using OpenAI PHP Client\nDESCRIPTION: Shows how to create a thread with an initial message and immediately run it with an assistant.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->threads()->createAndRun(\n    [\n        'assistant_id' => 'asst_gxzBkD1wkKEloYqZ410pT5pd',\n        'thread' => [\n            'messages' =>\n                [\n                    [\n                        'role' => 'user',\n                        'content' => 'Explain deep learning to a 5 year old.',\n                    ],\n                ],\n        ],\n    ],\n);\n\n$response->id; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->object; // 'thread.run'\n$response->createdAt; // 1623936000\n$response->assistantId; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->status; // 'queued'\n$response->requiredAction; // null\n$response->lastError; // null\n$response->startedAt; // null\n$response->expiresAt; // 1699622335\n$response->cancelledAt; // null\n$response->failedAt; // null\n$response->completedAt; // null\n$response->incompleteDetails; // null\n$response->lastError; // null\n$response->model; // 'gpt-4o'\n$response->instructions; // null\n$response->tools; // []\n$response->metadata; // []\n$response->usage->total_tokens; // 579\n$response->temperature; // null\n$response->topP; // null\n$response->maxPromptTokens; // 1000\n$response->maxCompletionTokens; // 1000\n$response->truncationStrategy->type; // 'auto'\n$response->responseFormat; // 'auto'\n$response->toolChoice; // 'auto'\n\n$response->toArray(); // ['id' => 'run_4RCYyYzX9m41WQicoJtUQAb8', ...]\n```\n\n----------------------------------------\n\nTITLE: Creating a Thread Message using OpenAI PHP Client\nDESCRIPTION: Shows how to create a new message within a thread, including setting the role and content.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->threads()->messages()->create('thread_tKFLqzRN9n7MnyKKvc1Q7868', [\n    'role' => 'user',\n    'content' => 'What is the sum of 5 and 7?',\n]);\n\n$response->id; // 'msg_SKYwvF3zcigxthfn6F4hnpdU'\n$response->object; // 'thread.message'\n$response->createdAt; // 1623936000\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->status; // 'in_progress'\n$response->incompleteDetails; // null\n$response->completedAt; // null\n$response->incompleteAt; // null\n$response->role; // 'user'\n$response->content[0]->type; // 'text'\n$response->content[0]->text->value; // 'What is the sum of 5 and 7?'\n$response->content[0]->text->annotations; // []\n$response->assistantId; // null\n$response->runId; // null\n$response->attachments; // []\n$response->metadata; // []\n\n$response->toArray(); // ['id' => 'msg_SKYwvF3zcigxthfn6F4hnpdU', ...]\n```\n\n----------------------------------------\n\nTITLE: Generating and Processing Audio with OpenAI\nDESCRIPTION: Demonstrates audio-related functionality including text-to-speech, transcription, and translation features.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$client->audio()->speech([\n    'model' => 'tts-1',\n    'input' => 'The quick brown fox jumped over the lazy dog.',\n    'voice' => 'alloy',\n]); // audio file content as string\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Run in PHP using OpenAI Client\nDESCRIPTION: Retrieves a specific run within a thread using the OpenAI PHP client. It shows how to access various properties of the retrieved run.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->threads()->runs()->retrieve(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    runId: 'run_4RCYyYzX9m41WQicoJtUQAb8',\n);\n\n$response->id; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->object; // 'thread.run'\n$response->createdAt; // 1623936000\n$response->assistantId; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->status; // 'queued'\n$response->startedAt; // null\n$response->expiresAt; // 1699622335\n$response->cancelledAt; // null\n$response->failedAt; // null\n$response->completedAt; // null\n$response->incompleteDetails; // null\n$response->lastError; // null\n$response->model; // 'gpt-4o'\n$response->instructions; // null\n$response->tools; // []\n$response->metadata; // []\n$response->usage->promptTokens; // 25,\n$response->usage->completionTokens; // 32,\n$response->usage->totalTokens; // 57\n$response->temperature; // null\n$response->topP; // null\n$response->maxPromptTokens; // 1000\n$response->maxCompletionTokens; // 1000\n$response->truncationStrategy->type; // 'auto'\n$response->toolChoice; // 'auto'\n$response->responseFormat; // 'auto'\n\n$response->toArray(); // ['id' => 'run_4RCYyYzX9m41WQicoJtUQAb8', ...]\n```\n\n----------------------------------------\n\nTITLE: Searching Vector Store Content in PHP\nDESCRIPTION: Performs semantic search across vector store content based on query and filters. Returns relevant document chunks with scores and metadata.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->vectorStores()->search(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n    parameters: [\n        'query' => 'What is the return policy?',\n        'max_num_results' => 5,\n        'filters' => [],\n        'rewrite_query' => false\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Assistant using OpenAI PHP Client\nDESCRIPTION: Demonstrates how to retrieve an existing assistant and access its properties including ID, name, instructions, and other configuration settings.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->assistants()->retrieve('asst_gxzBkD1wkKEloYqZ410pT5pd');\n\n$response->id; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->object; // 'assistant'\n$response->createdAt; // 1623936000\n$response->name; // 'Math Tutor'\n$response->instructions; // 'You are a personal math tutor. When asked a question, write and run Python code to answer the question.'\n$response->model; // 'gpt-4o'\n$response->description; // null\n$response->tools[0]->type; // 'code_interpreter'\n$response->toolResources; // []\n$response->metadata; // []\n$response->temperature: // null\n$response->topP: // null\n$response->format: // 'auto'\n\n$response->toArray(); // ['id' => 'asst_gxzBkD1wkKEloYqZ410pT5pd', ...]\n```\n\n----------------------------------------\n\nTITLE: Creating a Streamed Run with Function Calls in PHP using OpenAI Client\nDESCRIPTION: Shows how to create a streamed run with function calls using the OpenAI PHP client. It includes handling different events and submitting tool outputs when required.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$stream = $client->threads()->runs()->createStreamed(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    parameters: [\n        'assistant_id' => 'asst_gxzBkD1wkKEloYqZ410pT5pd',\n    ],\n);\n\n\ndo{\n    foreach($stream as $response){\n        $response->event // 'thread.run.created' | 'thread.run.in_progress' | .....\n        $response->response // ThreadResponse | ThreadRunResponse | ThreadRunStepResponse | ThreadRunStepDeltaResponse | ThreadMessageResponse | ThreadMessageDeltaResponse\n\n        switch($response->event){\n            case 'thread.run.created':\n            case 'thread.run.queued':\n            case 'thread.run.completed':\n            case 'thread.run.cancelling':\n                $run = $response->response;\n                break;\n            case 'thread.run.expired':\n            case 'thread.run.cancelled':\n            case 'thread.run.failed':\n                $run = $response->response;\n                break 3;\n            case 'thread.run.requires_action':\n                // Overwrite the stream with the new stream started by submitting the tool outputs\n                $stream = $client->threads()->runs()->submitToolOutputsStreamed(\n                    threadId: $run->threadId,\n                    runId: $run->id,\n                    parameters: [\n                        'tool_outputs' => [\n                            [\n                                'tool_call_id' => 'call_KSg14X7kZF2WDzlPhpQ168Mj',\n                                'output' => '12',\n                            ]\n                        ],\n                    ]\n                );\n                break;\n        }\n    }\n} while ($run->status != \"completed\")\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Modifying a Vector Store with OpenAI PHP Client\nDESCRIPTION: Shows how to update properties of an existing vector store. This example demonstrates changing the name of the vector store.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->vectorStores()->modify(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n    parameters:  [\n        'name' => 'New name',\n    ],\n);\n\n$response->id; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->object; // 'vector_store'\n$response->createdAt; // 1717703267\n$response->name; // 'New name'\n$response->usageBytes; // 0\n$response->fileCounts->inProgress; // 1\n$response->fileCounts->completed; // 0\n$response->fileCounts->failed; // 0\n$response->fileCounts->cancelled; // 0\n$response->fileCounts->total; // 1\n$response->status; // 'in_progress'\n$response->expiresAfter; // null\n$response->expiresAt; // null\n$response->lastActiveAt; // 1717703267\n\n$response->toArray(); // ['id' => 'vs_vzfQhlTWVUl38QGqQAoQjeDF', ...]\n```\n\n----------------------------------------\n\nTITLE: Creating a Streamed Run in PHP using OpenAI Client\nDESCRIPTION: Demonstrates how to create a streamed run within a thread using the OpenAI PHP client. It shows how to handle different events in the stream response.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$stream = $client->threads()->runs()->createStreamed(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    parameters: [\n        'assistant_id' => 'asst_gxzBkD1wkKEloYqZ410pT5pd',\n    ],\n);\n\nforeach($stream as $response){\n    $response->event // 'thread.run.created' | 'thread.run.in_progress' | .....\n    $response->response // ThreadResponse | ThreadRunResponse | ThreadRunStepResponse | ThreadRunStepDeltaResponse | ThreadMessageResponse | ThreadMessageDeltaResponse\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Deleting a Vector Store with OpenAI PHP Client\nDESCRIPTION: Demonstrates how to delete a vector store by its ID. The response confirms the deletion with a deleted status.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->vectorStores()->delete(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n);\n\n$response->id; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->object; // 'vector_store.deleted'\n$response->deleted; // true\n\n$response->toArray(); // ['id' => 'vs_vzfQhlTWVUl38QGqQAoQjeDF', ...]\n```\n\n----------------------------------------\n\nTITLE: Modifying an Assistant using OpenAI PHP Client\nDESCRIPTION: Shows how to modify an existing assistant's properties, specifically changing its name while maintaining other configuration settings.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->assistants()->modify('asst_gxzBkD1wkKEloYqZ410pT5pd', [\n        'name' => 'New Math Tutor',\n    ]);\n\n$response->id; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->object; // 'assistant'\n$response->createdAt; // 1623936000\n$response->name; // 'New Math Tutor'\n$response->instructions; // 'You are a personal math tutor. When asked a question, write and run Python code to answer the question.'\n$response->model; // 'gpt-4o'\n$response->description; // null\n$response->tools[0]->type; // 'code_interpreter'\n$response->toolResources; // []\n$response->metadata; // []\n$response->temperature: // null\n$response->topP: // null\n$response->format: // 'auto'\n\n$response->toArray(); // ['id' => 'asst_gxzBkD1wkKEloYqZ410pT5pd', ...]\n```\n\n----------------------------------------\n\nTITLE: Creating a Vector Store File with OpenAI PHP Client\nDESCRIPTION: Demonstrates how to attach a file to a vector store. The response includes details about the file and its processing status within the vector store.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->vectorStores()->files()->create(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n    parameters: [\n        'file_id' => 'file-fUU0hFRuQ1GzhOweTNeJlCXG',\n    ]\n);\n\n$response->id; // 'file-fUU0hFRuQ1GzhOweTNeJlCXG'\n$response->object; // 'vector_store.file'\n$response->usageBytes; // 4553\n$response->createdAt; // 1717703267\n$response->vectorStoreId; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->status; // 'completed'\n$response->lastError; // null\n$response->chunkingStrategy->type; // 'static'\n$response->chunkingStrategy->maxChunkSizeTokens; // 800\n$response->chunkingStrategy->chunkOverlapTokens; // 400\n\n$response->toArray(); // ['id' => 'file-fUU0hFRuQ1GzhOweTNeJlCXG', ...]\n```\n\n----------------------------------------\n\nTITLE: Creating a Thread using OpenAI PHP Client\nDESCRIPTION: Demonstrates how to create a new thread with minimal configuration.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->threads()->create([]);\n\n$response->id; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->object; // 'thread'\n$response->createdAt; // 1623936000\n$response->toolResources; // null\n$response->metadata; // []\n\n$response->toArray(); // ['id' => 'thread_tKFLqzRN9n7MnyKKvc1Q7868', ...]\n```\n\n----------------------------------------\n\nTITLE: Listing Vector Store Files in PHP\nDESCRIPTION: Retrieves a paginated list of vector store files with optional limit parameter. Returns file IDs and pagination metadata.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->vectorStores()->files()->list(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n    parameters: [\n        'limit' => 10,\n    ],\n);\n\n$response->object; // 'list'\n$response->firstId; // 'file-fUU0hFRuQ1GzhOweTNeJlCXG'\n$response->lastId; // 'file-D5DPOgBxSoEBTmYBgUESdPpa'\n$response->hasMore; // true\n\nforeach ($response->data as $result) {\n    $result->id; // 'file-fUU0hFRuQ1GzhOweTNeJlCXG'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', ...]]\n```\n\n----------------------------------------\n\nTITLE: Submitting Tool Outputs for a Run in PHP using OpenAI Client\nDESCRIPTION: Submits tool outputs for a run that requires action using the OpenAI PHP client. It demonstrates how to provide outputs for tool calls and handle the response.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->threads()->runs()->submitToolOutputs(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    runId: 'run_4RCYyYzX9m41WQicoJtUQAb8',\n    parameters: [\n        'tool_outputs' => [\n            [\n                'tool_call_id' => 'call_KSg14X7kZF2WDzlPhpQ168Mj',\n                'output' => '12',\n            ],\n        ],\n    ]\n);\n\n$response->id; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->object; // 'thread.run'\n$response->createdAt; // 1623936000\n$response->assistantId; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->status; // 'in_progress'\n$response->startedAt; // null\n$response->expiresAt; // 1699622335\n$response->cancelledAt; // null\n$response->failedAt; // null\n$response->completedAt; // null\n$response->incompleteDetails; // null\n$response->lastError; // null\n$response->model; // 'gpt-4o'\n$response->instructions; // null\n$response->usage->total_tokens; // 579\n$response->temperature; // null\n$response->topP; // null\n$response->maxPromptTokens; // 1000\n$response->maxCompletionTokens; // 1000\n$response->truncationStrategy->type; // 'auto'\n$response->responseFormat; // 'auto'\n$response->tools[0]->type; // 'function'\n$response->toolChoice; // 'auto'\n$response->metadata; // []\n\n$response->toArray(); // ['id' => 'run_4RCYyYzX9m41WQicoJtUQAb8', ...]\n```\n\n----------------------------------------\n\nTITLE: Creating Fake Client for Testing OpenAI API in PHP\nDESCRIPTION: Demonstrates how to create a fake client implementation for testing OpenAI API responses without making actual API calls, using the ClientFake class with predefined fake responses.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nuse OpenAI\\Testing\\ClientFake;\nuse OpenAI\\Responses\\Completions\\CreateResponse;\n\n$client = new ClientFake([\n    CreateResponse::fake([\n        'choices' => [\n            [\n                'text' => 'awesome!',\n            ],\n        ],\n    ]),\n]);\n\n$completion = $client->completions()->create([\n    'model' => 'gpt-3.5-turbo-instruct',\n    'prompt' => 'PHP is ',\n]);\n\nexpect($completion['choices'][0]['text'])->toBe('awesome!');\n```\n\n----------------------------------------\n\nTITLE: Accessing Meta Information from API Responses in PHP\nDESCRIPTION: Demonstrates how to access meta information returned by the OpenAI API response using the meta() method, including request ID, model details, organization information, version, processing time, and rate limits.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->completions()->create([\n    'model' => 'gpt-3.5-turbo-instruct',\n    'prompt' => 'Say this is a test',\n]);\n\n$meta = $response->meta();\n\n$meta->requestId; // '574a03e2faaf4e9fd703958e4ddc66f5'\n\n$meta->openai->model; // 'gpt-3.5-turbo-instruct'\n$meta->openai->organization; // 'org-jwe45798ASN82s'\n$meta->openai->version; // '2020-10-01'\n$meta->openai->processingMs; // 425\n\n$meta->requestLimit->limit; // 3000\n$meta->requestLimit->remaining; // 2999\n$meta->requestLimit->reset; // '20ms'\n\n$meta->tokenLimit->limit; // 250000\n$meta->tokenLimit->remaining; // 249984\n$meta->tokenLimit->reset; // '3ms'\n```\n\n----------------------------------------\n\nTITLE: Testing Error Responses with OpenAI PHP\nDESCRIPTION: Shows how to test scenarios where API requests should fail by providing a Throwable object as the response in the ClientFake constructor.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n$client = new ClientFake([\n    new \\OpenAI\\Exceptions\\ErrorException([\n        'message' => 'The model `gpt-1` does not exist',\n        'type' => 'invalid_request_error',\n        'code' => null,\n    ])\n]);\n\n// the `ErrorException` will be thrown\n$completion = $client->completions()->create([\n    'model' => 'gpt-3.5-turbo-instruct',\n    'prompt' => 'PHP is ',\n]);\n```\n\n----------------------------------------\n\nTITLE: Listing Files with OpenAI API\nDESCRIPTION: Returns a list of files belonging to the user's organization. Provides file metadata including IDs and objects.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->files()->list();\n\n$response->object; // 'list'\n\nforeach ($response->data as $result) {\n    $result->id; // 'file-XjGxS3KTG0uNmNOK362iJua3'\n    $result->object; // 'file'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', 'data' => [...]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Vector Store with OpenAI PHP Client\nDESCRIPTION: Shows how to create a vector store by providing file IDs and a name. The response includes details about the created vector store such as ID, status, and file counts.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->vectorStores()->create([\n    'file_ids' => [\n        'file-fUU0hFRuQ1GzhOweTNeJlCXG',\n    ],\n    'name' => 'My first Vector Store',\n]);\n\n$response->id; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->object; // 'vector_store'\n$response->createdAt; // 1717703267\n$response->name; // 'My first Vector Store'\n$response->usageBytes; // 0\n$response->fileCounts->inProgress; // 1\n$response->fileCounts->completed; // 0\n$response->fileCounts->failed; // 0\n$response->fileCounts->cancelled; // 0\n$response->fileCounts->total; // 1\n$response->status; // 'in_progress'\n$response->expiresAfter; // null\n$response->expiresAt; // null\n$response->lastActiveAt; // 1717703267\n\n$response->toArray(); // ['id' => 'vs_vzfQhlTWVUl38QGqQAoQjeDF', ...]\n```\n\n----------------------------------------\n\nTITLE: Listing Assistants using OpenAI PHP Client\nDESCRIPTION: Shows how to retrieve a list of assistants with pagination support and iterate through the results.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->assistants()->list([\n    'limit' => 10,\n]);\n\n$response->object; // 'list'\n$response->firstId; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->lastId; // 'asst_reHHtAM0jKLDIxanM6gP6DaR'\n$response->hasMore; // true\n\nforeach ($response->data as $result) {\n    $result->id; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', ...]]\n```\n\n----------------------------------------\n\nTITLE: Listing Vector Stores with OpenAI PHP Client\nDESCRIPTION: Shows how to retrieve a list of vector stores with pagination support. The response includes a collection of vector store objects along with pagination information.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->vectorStores()->list(\n    parameters: [\n        'limit' => 10,\n    ],\n);\n\n$response->object; // 'list'\n$response->firstId; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->lastId; // 'vs_D5DPOgBxSoEBTmYBgUESdPpa'\n$response->hasMore; // true\n\nforeach ($response->data as $result) {\n    $result->id; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', ...]]\n```\n\n----------------------------------------\n\nTITLE: Converting Meta Information to Array in PHP\nDESCRIPTION: Shows how to convert the meta information object to an array format that represents the original API response headers using the toArray() method.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n$meta->toArray();\n\n// [ \n//   'x-request-id' => '574a03e2faaf4e9fd703958e4ddc66f5',\n//   'openai-model' => 'gpt-3.5-turbo-instruct',\n//   'openai-organization' => 'org-jwe45798ASN82s',\n//   'openai-processing-ms' => 402,\n//   'openai-version' => '2020-10-01',\n//   'x-ratelimit-limit-requests' => 3000,\n//   'x-ratelimit-remaining-requests' => 2999,\n//   'x-ratelimit-reset-requests' => '20ms',\n//   'x-ratelimit-limit-tokens' => 250000,\n//   'x-ratelimit-remaining-tokens' => 249983,\n//   'x-ratelimit-reset-tokens' => '3ms',\n// ]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Fine-tuned Model using OpenAI PHP Client\nDESCRIPTION: Shows how to use the models()->delete() method to remove a fine-tuned model from the OpenAI API.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->models()->delete('curie:ft-acmeco-2021-03-03-21-44-20');\n\n$response->id; // 'curie:ft-acmeco-2021-03-03-21-44-20'\n$response->object; // 'model'\n$response->deleted; // true\n\n$response->toArray(); // ['id' => 'curie:ft-acmeco-2021-03-03-21-44-20', ...]\n```\n\n----------------------------------------\n\nTITLE: Listing Runs in PHP using OpenAI Client\nDESCRIPTION: Retrieves a list of runs belonging to a thread using the OpenAI PHP client. It shows how to set parameters like limit and iterate through the results.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->threads()->runs()->list(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    parameters: [\n        'limit' => 10,\n    ],\n);\n\n$response->object; // 'list'\n$response->firstId; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->lastId; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->hasMore; // false\n\nforeach ($response->data as $result) {\n    $result->id; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', ...]]\n```\n\n----------------------------------------\n\nTITLE: Parsing OpenAI Chat Completion Stream Chunks in JSON\nDESCRIPTION: This code snippet represents a series of JSON objects that form a streamed chat completion response from the OpenAI API. Each chunk contains information about the completion, including the model used, creation timestamp, and the content being generated.\nSOURCE: https://github.com/openai-php/client/blob/main/src/Testing/Responses/Fixtures/Chat/CreateStreamedResponseFixture.txt#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\ndata: {\"id\":\"chatcmpl-6yo21W6LVo8Tw2yBf7aGf2g17IeIl\",\"object\":\"chat.completion.chunk\",\"created\":1679432086,\"model\":\"gpt-4-0314\",\"choices\":[{\"delta\":{\"role\":\"assistant\"},\"index\":0,\"finish_reason\":null}]}\ndata: {\"id\":\"chatcmpl-6yo21W6LVo8Tw2yBf7aGf2g17IeIl\",\"object\":\"chat.completion.chunk\",\"created\":1679432086,\"model\":\"gpt-4-0314\",\"choices\":[{\"delta\":{\"content\":\"Hello\"},\"index\":0,\"finish_reason\":null}]}\ndata: {\"id\":\"chatcmpl-6yo21W6LVo8Tw2yBf7aGf2g17IeIl\",\"object\":\"chat.completion.chunk\",\"created\":1679432086,\"model\":\"gpt-4-0314\",\"choices\":[{\"delta\":{\"content\":\"!\"},\"index\":0,\"finish_reason\":null}]}\ndata: {\"id\":\"chatcmpl-6yo21W6LVo8Tw2yBf7aGf2g17IeIl\",\"object\":\"chat.completion.chunk\",\"created\":1679432086,\"model\":\"gpt-4-0314\",\"choices\":[{\"delta\":{\"content\":\" This\"},\"index\":0,\"finish_reason\":null}]}\ndata: {\"id\":\"chatcmpl-6yo21W6LVo8Tw2yBf7aGf2g17IeIl\",\"object\":\"chat.completion.chunk\",\"created\":1679432086,\"model\":\"gpt-4-0314\",\"choices\":[{\"delta\":{\"content\":\" is\"},\"index\":0,\"finish_reason\":null}]}\ndata: {\"id\":\"chatcmpl-6yo21W6LVo8Tw2yBf7aGf2g17IeIl\",\"object\":\"chat.completion.chunk\",\"created\":1679432086,\"model\":\"gpt-4-0314\",\"choices\":[{\"delta\":{\"content\":\" a\"},\"index\":0,\"finish_reason\":null}]}\ndata: {\"id\":\"chatcmpl-6yo21W6LVo8Tw2yBf7aGf2g17IeIl\",\"object\":\"chat.completion.chunk\",\"created\":1679432086,\"model\":\"gpt-4-0314\",\"choices\":[{\"delta\":{\"content\":\" fake\"},\"index\":0,\"finish_reason\":null}]}\ndata: {\"id\":\"chatcmpl-6yo21W6LVo8Tw2yBf7aGf2g17IeIl\",\"object\":\"chat.completion.chunk\",\"created\":1679432086,\"model\":\"gpt-4-0314\",\"choices\":[{\"delta\":{\"content\":\" chat\"},\"index\":0,\"finish_reason\":null}]}\ndata: {\"id\":\"chatcmpl-6yo21W6LVo8Tw2yBf7aGf2g17IeIl\",\"object\":\"chat.completion.chunk\",\"created\":1679432086,\"model\":\"gpt-4-0314\",\"choices\":[{\"delta\":{\"content\":\" response\"},\"index\":0,\"finish_reason\":null}]}\ndata: {\"id\":\"chatcmpl-6yo21W6LVo8Tw2yBf7aGf2g17IeIl\",\"object\":\"chat.completion.chunk\",\"created\":1679432086,\"model\":\"gpt-4-0314\",\"choices\":[{\"delta\":{\"content\":\".\"},\"index\":0,\"finish_reason\":null}]}\ndata: {\"id\":\"chatcmpl-6yo21W6LVo8Tw2yBf7aGf2g17IeIl\",\"object\":\"chat.completion.chunk\",\"created\":1679432086,\"model\":\"gpt-4-0314\",\"choices\":[{\"delta\":{},\"index\":0,\"finish_reason\":\"stop\"}]}\ndata: [DONE]\n```\n\n----------------------------------------\n\nTITLE: Creating a Batch Operation with OpenAI PHP Client\nDESCRIPTION: Demonstrates how to create a batch operation by first uploading a file and then using the file ID to create the batch. The method requires parameters like input file ID, endpoint, and completion window.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$fileResponse = $client->files()->upload(\n     parameters: [\n          'purpose' => 'batch',\n          'file' => fopen('commands.jsonl', 'r'),\n    ]\n);\n\n$fileId = $fileResponse->id;\n\n$response = $client->batches()->create(\n    parameters: [\n        'input_file_id' => $fileId,\n        'endpoint' => '/v1/chat/completions',\n        'completion_window' => '24h'\n    ]\n );\n\n$response->id; // 'batch_abc123'\n$response->object; // 'batch'\n$response->endpoint; // /v1/chat/completions\n$response->errors; // null\n$response->completionWindow; // '24h'\n$response->status; // 'validating'\n$response->outputFileId; // null\n$response->errorFileId; // null\n$response->createdAt; // 1714508499\n$response->inProgressAt; // null\n$response->expiresAt; // 1714536634\n$response->completedAt; // null\n$response->failedAt; // null\n$response->expiredAt; // null\n$response->requestCounts; // null\n$response->metadata; // ['name' => 'My batch name']\n\n$response->toArray(); // ['id' => 'batch_abc123', ...]\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Batch Operation with OpenAI PHP Client\nDESCRIPTION: Shows how to retrieve details of a specific batch operation by its ID. The response includes information about the batch's status, request counts, and metadata.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->batches()->retrieve(id: 'batch_abc123');\n\n$response->id; // 'batch_abc123'\n$response->object; // 'batch'\n$response->endpoint; // /v1/chat/completions\n$response->errors; // null\n$response->completionWindow; // '24h'\n$response->status; // 'validating'\n$response->outputFileId; // null\n$response->errorFileId; // null\n$response->createdAt; // 1714508499\n$response->inProgressAt; // null\n$response->expiresAt; // 1714536634\n$response->completedAt; // null\n$response->failedAt; // null\n$response->expiredAt; // null\n$response->requestCounts->total; // 100\n$response->requestCounts->completed; // 95\n$response->requestCounts->failed; // 5\n$response->metadata; // ['name' => 'My batch name']\n\n$response->toArray(); // ['id' => 'batch_abc123', ...]\n```\n\n----------------------------------------\n\nTITLE: Streaming OpenAI Text Completion Responses in JSON Format\nDESCRIPTION: A series of JSON data packets from OpenAI's completion API showing how a response is streamed token by token. Each packet contains metadata like ID, creation timestamp, model used, and the text token being returned, with a final [DONE] marker indicating the end of the stream.\nSOURCE: https://github.com/openai-php/client/blob/main/src/Testing/Responses/Fixtures/Completions/CreateStreamedResponseFixture.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ndata: {\"id\": \"cmpl-6ynJi2uZZnKntnEZreDcjGyoPbVAn\", \"object\": \"text_completion\", \"created\": 1679430847, \"choices\": [{\"text\": \" everyone\", \"index\": 0, \"logprobs\": null, \"finish_reason\": null}], \"model\": \"gpt-3.5-turbo-instruct\"}\ndata: {\"id\": \"cmpl-6ynJi2uZZnKntnEZreDcjGyoPbVAn\", \"object\": \"text_completion\", \"created\": 1679430847, \"choices\": [{\"text\": \"!\", \"index\": 0, \"logprobs\": null, \"finish_reason\": null}], \"model\": \"gpt-3.5-turbo-instruct\"}\ndata: {\"id\": \"cmpl-6ynJi2uZZnKntnEZreDcjGyoPbVAn\", \"object\": \"text_completion\", \"created\": 1679430847, \"choices\": [{\"text\": \"\\n\", \"index\": 0, \"logprobs\": null, \"finish_reason\": null}], \"model\": \"gpt-3.5-turbo-instruct\"}\ndata: {\"id\": \"cmpl-6ynJi2uZZnKntnEZreDcjGyoPbVAn\", \"object\": \"text_completion\", \"created\": 1679430847, \"choices\": [{\"text\": \"\\n\", \"index\": 0, \"logprobs\": null, \"finish_reason\": null}], \"model\": \"gpt-3.5-turbo-instruct\"}\ndata: {\"id\": \"cmpl-6ynJi2uZZnKntnEZreDcjGyoPbVAn\", \"object\": \"text_completion\", \"created\": 1679430847, \"choices\": [{\"text\": \"This\", \"index\": 0, \"logprobs\": null, \"finish_reason\": null}], \"model\": \"gpt-3.5-turbo-instruct\"}\ndata: {\"id\": \"cmpl-6ynJi2uZZnKntnEZreDcjGyoPbVAn\", \"object\": \"text_completion\", \"created\": 1679430847, \"choices\": [{\"text\": \" is\", \"index\": 0, \"logprobs\": null, \"finish_reason\": null}], \"model\": \"gpt-3.5-turbo-instruct\"}\ndata: {\"id\": \"cmpl-6ynJi2uZZnKntnEZreDcjGyoPbVAn\", \"object\": \"text_completion\", \"created\": 1679430847, \"choices\": [{\"text\": \" a\", \"index\": 0, \"logprobs\": null, \"finish_reason\": null}], \"model\": \"gpt-3.5-turbo-instruct\"}\ndata: {\"id\": \"cmpl-6ynJi2uZZnKntnEZreDcjGyoPbVAn\", \"object\": \"text_completion\", \"created\": 1679430847, \"choices\": [{\"text\": \" fake\", \"index\": 0, \"logprobs\": null, \"finish_reason\": null}], \"model\": \"gpt-3.5-turbo-instruct\"}\ndata: {\"id\": \"cmpl-6ynJi2uZZnKntnEZreDcjGyoPbVAn\", \"object\": \"text_completion\", \"created\": 1679430847, \"choices\": [{\"text\": \" completion\", \"index\": 0, \"logprobs\": null, \"finish_reason\": null}], \"model\": \"gpt-3.5-turbo-instruct\"}\ndata: {\"id\": \"cmpl-6ynJi2uZZnKntnEZreDcjGyoPbVAn\", \"object\": \"text_completion\", \"created\": 1679430847, \"choices\": [{\"text\": \" response.\", \"index\": 0, \"logprobs\": null, \"finish_reason\": \"length\"}], \"model\": \"gpt-3.5-turbo-instruct\"}\ndata: [DONE]\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Vector Store with OpenAI PHP Client\nDESCRIPTION: Demonstrates how to retrieve details of a specific vector store by its ID. The response includes information about the vector store's status, files, and usage.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->vectorStores()->retrieve(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n);\n\n$response->id; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->object; // 'vector_store'\n$response->createdAt; // 1717703267\n$response->name; // 'My first Vector Store'\n$response->usageBytes; // 0\n$response->fileCounts->inProgress; // 1\n$response->fileCounts->completed; // 0\n$response->fileCounts->failed; // 0\n$response->fileCounts->cancelled; // 0\n$response->fileCounts->total; // 1\n$response->status; // 'in_progress'\n$response->expiresAfter; // null\n$response->expiresAt; // null\n$response->lastActiveAt; // 1717703267\n\n$response->toArray(); // ['id' => 'vs_vzfQhlTWVUl38QGqQAoQjeDF', ...]\n```\n\n----------------------------------------\n\nTITLE: Deleting an Assistant using OpenAI PHP Client\nDESCRIPTION: Demonstrates how to delete an existing assistant and handle the deletion response.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->assistants()->delete('asst_gxzBkD1wkKEloYqZ410pT5pd');\n\n$response->id; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->object; // 'assistant.deleted'\n$response->deleted; // true\n\n$response->toArray(); // ['id' => 'asst_gxzBkD1wkKEloYqZ410pT5pd', ...]\n```\n\n----------------------------------------\n\nTITLE: Streaming Thread Events - OpenAI API JSON Events\nDESCRIPTION: A series of server-sent events showing the complete flow of an OpenAI thread conversation, including thread creation, run execution, message generation and completion. The events include detailed metadata about tools, model configuration, and usage statistics.\nSOURCE: https://github.com/openai-php/client/blob/main/src/Testing/Responses/Fixtures/Threads/Runs/ThreadRunStreamResponseFixture.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nevent: thread.created\ndata: {\"id\":\"thread_sSbvUX4J1FqlUZBv6BaBbOj4\",\"object\":\"thread\",\"created_at\":1720104398,\"metadata\":{\"user\":\"John Doe\"},\"tool_resources\":{\"code_interpreter\":{\"file_ids\":[]}}}\n\nevent: thread.run.created\ndata: {\"id\":\"run_s1X8yAjuUBlwhGrqiahzfnH7\",\"object\":\"thread.run\",\"created_at\":1720104398,\"assistant_id\":\"asst_JA9Pc6eQ744nbec10slSz5BU\",\"thread_id\":\"thread_sSbvUX4J1FqlUZBv6BaBbOj4\",\"status\":\"queued\",\"started_at \":null,\"expires_at \":1720104998,\"cancelled_at \":null,\"failed_at \":null,\"completed_at \":null,\"required_action \":null,\"last_error \":null,\"model\":\"gpt-4 o\",\"instructions\":\"You are a very useful assistant\",\"tools\":[{\"type\":\"code_interpreter\"},{\"type\":\"file_search\",\"file_search\":{\"max_num_results\":50}},{\"type\":\"function\",\"function\":{\"name\":\"get_weather\",\"description\":\"Determine weather in my location\",\"parameters\":{\"type\":\"object\",\"properties\":{\"location\":{\"type\":\"string\",\"description\":\"The city and state e.g. San Francisco, CA\"},\"unit\":{\"type\":\"string\",\"enum\":[\"c\",\"f\"]}},\"required\":[\"location\"]}}}],\"tool_resources\":{\"code_interpreter\":{\"file_ids\":[]}},\"metadata\":{\"user\":\"John Doe\"},\"temperature\":0.7,\"top_p\":1.0,\"max_completion_tokens\":null,\"max_prompt_tokens\":null,\"truncation_strategy\":{\"type\":\"auto\",\"last_messages\":null},\"incomplete_details\":null,\"usage\":null,\"response_format\":\"auto\",\"tool_choice\":\"auto\",\"parallel_tool_calls\":true}\n\n[...subsequent events omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Listing Thread Run Steps with OpenAI PHP Client\nDESCRIPTION: Shows how to retrieve a list of run steps for a specific run within a thread. The method supports pagination parameters and returns a collection of run step objects with their respective details.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->threads()->runs()->steps()->list(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    runId: 'run_4RCYyYzX9m41WQicoJtUQAb8',\n    parameters: [\n        'limit' => 10,\n    ],\n);\n\n$response->object; // 'list'\n$response->firstId; // 'step_1spQXgbAabXFm1YXrwiGIMUz'\n$response->lastId; // 'step_1spQXgbAabXFm1YXrwiGIMUz'\n$response->hasMore; // false\n\nforeach ($response->data as $result) {\n    $result->id; // 'step_1spQXgbAabXFm1YXrwiGIMUz'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', ...]]\n```\n\n----------------------------------------\n\nTITLE: Listing Batch Operations with OpenAI PHP Client\nDESCRIPTION: Demonstrates how to retrieve a list of batches with pagination support. The response includes a collection of batch objects along with pagination information.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->batches()->list(\n    parameters: [\n        'limit' => 10, \n    ],\n);\n\n$response->object; // 'list'\n$response->firstId; // 'batch_abc123'\n$response->lastId; // 'batch_abc456'\n$response->hasMore; // true\n\nforeach ($response->data as $result) {\n    $result->id; // 'batch_abc123'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', ...]]\n```\n\n----------------------------------------\n\nTITLE: Parsing ChatGPT API Response Chunks in JSON\nDESCRIPTION: This snippet shows the structure of individual data chunks returned by the ChatGPT API during a streaming response. Each chunk contains metadata about the completion and the generated content.\nSOURCE: https://github.com/openai-php/client/blob/main/tests/Fixtures/Streams/ChatCompletionCreate.txt#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\ndata: {\"id\":\"chatcmpl-6wdIE4DsUtqf1srdMTsfkJp0VWZgz\",\"object\":\"chat.completion.chunk\",\"created\":1679432086,\"model\":\"gpt-4-0314\",\"choices\":[{\"delta\":{\"content\":\"Hello\"},\"index\":0,\"finish_reason\":null}]}\n```\n\n----------------------------------------\n\nTITLE: Accessing Meta Information from Streaming Responses in PHP\nDESCRIPTION: Demonstrates how to access meta information from streaming responses by calling the meta() method on the response stream object.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$stream = $client->completions()->createStreamed([\n    'model' => 'gpt-3.5-turbo-instruct',\n    'prompt' => 'Say this is a test',\n]);\n    \n$stream->meta();\n```\n\n----------------------------------------\n\nTITLE: Parsing OpenAI API Streaming Response in JSON\nDESCRIPTION: This snippet demonstrates the structure of a streaming response from the OpenAI API for a chat completion request. It includes multiple data chunks, each containing partial information about the generated response, as well as metadata like message ID, model used, and timestamps.\nSOURCE: https://github.com/openai-php/client/blob/main/tests/Fixtures/Streams/ChatCompletionPing.txt#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\ndata: {\"id\":\"msg_0111RgCFCqN68mJbev6Rq1cz\",\"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\"}}],\"created\":1744469024,\"model\":\"claude-3-7-sonnet-20250219\",\"object\":\"chat.completion.chunk\"}\ndata: {\"type\": \"ping\"}\ndata: {\"id\":\"msg_0111RgCFCqN68mJbev6Rq1cz\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"Hello!\"}}],\"created\":1744469024,\"model\":\"claude-3-7-sonnet-20250219\",\"object\":\"chat.completion.chunk\"}\ndata: {\"id\":\"msg_0111RgCFCqN68mJbev6Rq1cz\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" How can I assist you today? I'm here to help\"}}],\"created\":1744469024,\"model\":\"claude-3-7-sonnet-20250219\",\"object\":\"chat.completion.chunk\"}\ndata: {\"id\":\"msg_0111RgCFCqN68mJbev6Rq1cz\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" with information, answer questions, or discuss\"}}],\"created\":1744469024,\"model\":\"claude-3-7-sonnet-20250219\",\"object\":\"chat.completion.chunk\"}\ndata: {\"id\":\"msg_0111RgCFCqN68mJbev6Rq1cz\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" various topics. Feel free to let me know what you're\"}}],\"created\":1744469024,\"model\":\"claude-3-7-sonnet-20250219\",\"object\":\"chat.completion.chunk\"}\ndata: {\"id\":\"msg_0111RgCFCqN68mJbev6Rq1cz\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" interested in talking about.\"}}],\"created\":1744469024,\"model\":\"claude-3-7-sonnet-20250219\",\"object\":\"chat.completion.chunk\"}\ndata: {\"id\":\"msg_0111RgCFCqN68mJbev6Rq1cz\",\"choices\":[{\"index\":0,\"delta\":{},\"finish_reason\":\"stop\"}],\"created\":1744469024,\"model\":\"claude-3-7-sonnet-20250219\",\"object\":\"chat.completion.chunk\"}\ndata: [DONE]\n```\n\n----------------------------------------\n\nTITLE: Modifying a Run in PHP using OpenAI Client\nDESCRIPTION: Modifies an existing run within a thread using the OpenAI PHP client. It demonstrates how to update the metadata of a run.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->threads()->runs()->modify(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    runId: 'run_4RCYyYzX9m41WQicoJtUQAb8',\n    parameters:  [\n        'metadata' => [\n            'name' => 'My new run name',\n        ],\n    ],\n);\n\n$response->id; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->object; // 'thread.run'\n$response->createdAt; // 1623936000\n$response->assistantId; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->status; // 'queued'\n$response->startedAt; // null\n$response->expiresAt; // 1699622335\n$response->cancelledAt; // null\n$response->failedAt; // null\n$response->completedAt; // null\n$response->incompleteDetails; // null\n$response->lastError; // null\n$response->model; // 'gpt-4o'\n$response->instructions; // null\n$response->tools; // []\n$response->usage->total_tokens; // 579\n$response->temperature; // null\n$response->topP; // null\n$response->maxPromptTokens; // 1000\n$response->maxCompletionTokens; // 1000\n$response->truncationStrategy->type; // 'auto'\n$response->toolChoice; // 'auto'\n$response->responseFormat; // 'auto'\n$response->metadata; // ['name' => 'My new run name']\n\n$response->toArray(); // ['id' => 'run_4RCYyYzX9m41WQicoJtUQAb8', ...]\n```\n\n----------------------------------------\n\nTITLE: Parsing OpenAI Thread Message Completed Event in JSON\nDESCRIPTION: This JSON object represents the data received when a thread message is completed in the OpenAI API. It includes various identifiers, timestamps, and the message content.\nSOURCE: https://github.com/openai-php/client/blob/main/tests/Fixtures/Streams/ThreadRunStreamMessageResponse.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"msg_zKgPBqNcqb7qYP2bBA3tVyTd\",\n  \"object\": \"thread.message\",\n  \"created_at\": 1720104399,\n  \"assistant_id\": \"asst_JA9Pc6eQ744nbec10slSz5BU\",\n  \"thread_id\": \"thread_sSbvUX4J1FqlUZBv6BaBbOj4\",\n  \"run_id\": \"run_s1X8yAjuUBlwhGrqiahzfnH7\",\n  \"status\": \"completed\",\n  \"incomplete_details\": null,\n  \"incomplete_at\": null,\n  \"completed_at\": 1720104399,\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": {\n        \"value\": \"Hello! How can I assist you today?\",\n        \"annotations\": []\n      }\n    }\n  ],\n  \"attachments\": [],\n  \"metadata\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Vector Store File with OpenAI PHP Client\nDESCRIPTION: Shows how to retrieve details about a specific file within a vector store. The response includes file information and its processing status.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->vectorStores()->files()->retrieve(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n    fileId: 'file-fUU0hFRuQ1GzhOweTNeJlCXG',\n);\n\n$response->id; // 'file-fUU0hFRuQ1GzhOweTNeJlCXG'\n$response->object; // 'vector_store.file'\n$response->usageBytes; // 4553\n$response->createdAt; // 1717703267\n$response->vectorStoreId; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->status; // 'completed'\n$response->lastError; // null\n$response->chunkingStrategy->type; // 'static'\n$response->chunkingStrategy->maxChunkSizeTokens; // 800\n$response->chunkingStrategy->chunkOverlapTokens; // 400\n\n$response->toArray(); // ['id' => 'file-fUU0hFRuQ1GzhOweTNeJlCXG', ...]\n```\n\n----------------------------------------\n\nTITLE: Parsing Thread Message Delta Event Stream\nDESCRIPTION: Server-sent event data showing a thread message delta containing a partial text update. The event contains metadata and message content with text value \"Hello\".\nSOURCE: https://github.com/openai-php/client/blob/main/tests/Fixtures/Streams/ThreadRunStreamMessageDeltaResponse.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nevent: thread.message.delta\ndata: {\"id\":\"msg_zKgPBqNcqb7qYP2bBA3tVyTd\",\"object\":\"thread.message.delta\",\"delta\":{\"content\":[{\"index\":0,\"type\":\"text\",\"text\":{\"value\":\"Hello\",\"annotations\":[]}}]}}\n```\n\n----------------------------------------\n\nTITLE: Canceling a Run in PHP using OpenAI Client\nDESCRIPTION: Cancels an in-progress run within a thread using the OpenAI PHP client. It shows how to cancel a run and access the updated run status.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->threads()->runs()->cancel(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    runId: 'run_4RCYyYzX9m41WQicoJtUQAb8',\n);\n\n$response->id; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->object; // 'thread.run'\n$response->createdAt; // 1623936000\n$response->assistantId; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->status; // 'cancelling'\n$response->startedAt; // null\n$response->expiresAt; // 1699622335\n$response->cancelledAt; // null\n$response->failedAt; // null\n$response->completedAt; // null\n$response->incompleteDetails; // null\n$response->lastError; // null\n$response->model; // 'gpt-4o'\n$response->instructions; // null\n$response->tools; // []\n$response->usage?->total_tokens; // 579\n$response->temperature; // null\n$response->topP; // null\n$response->maxPromptTokens; // 1000\n$response->maxCompletionTokens; // 1000\n$response->truncationStrategy->type; // 'auto'\n$response->toolChoice; // 'auto'\n$response->responseFormat; // 'auto'\n$response->metadata; // []\n\n$response->toArray(); // ['id' => 'run_4RCYyYzX9m41WQicoJtUQAb8', ...]\n```\n\n----------------------------------------\n\nTITLE: Parsing Thread Run Step Creation Event in JSON\nDESCRIPTION: This JSON object represents a 'thread.run.step.created' event in the OpenAI system. It includes details such as the step ID, run ID, assistant ID, thread ID, step type, status, and various timestamps. The step is specifically for message creation within a thread run.\nSOURCE: https://github.com/openai-php/client/blob/main/tests/Fixtures/Streams/ThreadRunStreamStepRunCreatedResponse.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"step_3P1u5J5Rs95lypEfvQ3rMdPL\",\n  \"object\": \"thread.run.step\",\n  \"created_at\": 1720104399,\n  \"run_id\": \"run_s1X8yAjuUBlwhGrqiahzfnH7\",\n  \"assistant_id\": \"asst_JA9Pc6eQ744nbec10slSz5BU\",\n  \"thread_id\": \"thread_sSbvUX4J1FqlUZBv6BaBbOj4\",\n  \"type\": \"message_creation\",\n  \"status\": \"in_progress\",\n  \"cancelled_at\": null,\n  \"completed_at\": null,\n  \"expires_at\": 1720104998,\n  \"failed_at\": null,\n  \"last_error\": null,\n  \"step_details\": {\n    \"type\": \"message_creation\",\n    \"message_creation\": {\n      \"message_id\": \"msg_zKgPBqNcqb7qYP2bBA3tVyTd\"\n    }\n  },\n  \"usage\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Thread Run Step with OpenAI PHP Client\nDESCRIPTION: Demonstrates how to retrieve details of a specific run step within a thread. The method returns information about the step including its ID, type, status, and other properties.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->threads()->runs()->steps()->retrieve(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    runId: 'run_4RCYyYzX9m41WQicoJtUQAb8',\n    stepId: 'step_1spQXgbAabXFm1YXrwiGIMUz',\n);\n\n$response->id; // 'step_1spQXgbAabXFm1YXrwiGIMUz'\n$response->object; // 'thread.run.step'\n$response->createdAt; // 1699564106\n$response->runId; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->assistantId; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->type; // 'message_creation'\n$response->status; // 'completed'\n$response->cancelledAt; // null\n$response->completedAt; // 1699564119\n$response->expiresAt; // null\n$response->failedAt; // null\n$response->lastError; // null\n$response->stepDetails->type; // 'message_creation'\n$response->stepDetails->messageCreation->messageId; // 'msg_i404PxKbB92d0JAmdOIcX7vA'\n\n$response->toArray(); // ['id' => 'step_1spQXgbAabXFm1YXrwiGIMUz', ...]\n```\n\n----------------------------------------\n\nTITLE: Parsing OpenAI Event Stream Data in JSON\nDESCRIPTION: This snippet shows the structure of event data in a stream from OpenAI's API. It includes various events such as thread creation, run status updates, and message deltas.\nSOURCE: https://github.com/openai-php/client/blob/main/tests/Fixtures/Streams/ThreadRunStreamResponse.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nevent: thread.created\ndata: {\"id\":\"thread_sSbvUX4J1FqlUZBv6BaBbOj4\",\"object\":\"thread\",\"created_at\":1720104398,\"metadata\":{\"user\":\"John Doe\"},\"tool_resources\":{\"code_interpreter\":{\"file_ids\":[]}}}\n```\n\nLANGUAGE: json\nCODE:\n```\nevent: thread.run.created\ndata: {\"id\":\"run_s1X8yAjuUBlwhGrqiahzfnH7\",\"object\":\"thread.run\",\"created_at\":1720104398,\"assistant_id\":\"asst_JA9Pc6eQ744nbec10slSz5BU\",\"thread_id\":\"thread_sSbvUX4J1FqlUZBv6BaBbOj4\",\"status\":\"queued\",\"started_at\":null,\"expires_at\":1720104998,\"cancelled_at\":null,\"failed_at\":null,\"completed_at\":null,\"required_action\":null,\"last_error\":null,\"model\":\"gpt-4 o\",\"instructions\":\"You are a very useful assistant\",\"tools\":[{\"type\":\"code_interpreter\"},{\"type\":\"file_search\",\"file_search\":{\"max_num_results\":50}},{\"type\":\"function\",\"function\":{\"name\":\"get_weather\",\"description\":\"Determine weather in my location\",\"parameters\":{\"type\":\"object\",\"properties\":{\"location\":{\"type\":\"string\",\"description\":\"The city and state e.g. San Francisco, CA\"},\"unit\":{\"type\":\"string\",\"enum\":[\"c\",\"f\"]}},\"required\":[\"location\"]}}}],\"tool_resources\":{\"code_interpreter\":{\"file_ids\":[]}},\"metadata\":{\"user\":\"John Doe\"},\"temperature\":0.7,\"top_p\":1.0,\"max_completion_tokens\":null,\"max_prompt_tokens\":null,\"truncation_strategy\":{\"type\":\"auto\",\"last_messages\":null},\"incomplete_details\":null,\"usage\":null,\"response_format\":\"auto\",\"tool_choice\":\"auto\",\"parallel_tool_calls\":true}\n```\n\nLANGUAGE: json\nCODE:\n```\nevent: thread.message.delta\ndata: {\"id\":\"msg_zKgPBqNcqb7qYP2bBA3tVyTd\",\"object\":\"thread.message.delta\",\"delta\":{\"content\":[{\"index\":0,\"type\":\"text\",\"text\":{\"value\":\"Hello\",\"annotations\":[]}}]}}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Vector Store File with OpenAI PHP Client\nDESCRIPTION: Demonstrates how to remove a file from a vector store. This operation only removes the file association from the vector store but doesn't delete the original file.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->vectorStores()->files()->delete(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n    fileId: 'file-fUU0hFRuQ1GzhOweTNeJlCXG',\n);\n\n$response->id; // 'file-fUU0hFRuQ1GzhOweTNeJlCXG'\n$response->object; // 'vector_store.file.deleted'\n$response->deleted; // true\n\n$response->toArray(); // ['id' => 'file-fUU0hFRuQ1GzhOweTNeJlCXG', ...]\n```\n\n----------------------------------------\n\nTITLE: Parsing OpenAI Assistant Message Event Data\nDESCRIPTION: JSON payload for a completed assistant message containing response text, metadata, and status information. Shows the structure of a message event in a thread conversation.\nSOURCE: https://github.com/openai-php/client/blob/main/tests/Fixtures/Streams/ThreadRunStreamInvalidEventResponse.txt#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nevent: this.is.invalid\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"id\":\"msg_zKgPBqNcqb7qYP2bBA3tVyTd\",\"object\":\"thread.message\",\"created_at\":1720104399,\"assistant_id\":\"asst_JA9Pc6eQ744nbec10slSz5BU\",\"thread_id\":\"thread_sSbvUX4J1FqlUZBv6BaBbOj4\",\"run_id\":\"run_s1X8yAjuUBlwhGrqiahzfnH7\",\"status\":\"completed\",\"incomplete_details\":null,\"incomplete_at\":null,\"completed_at\":1720104399,\"role\":\"assistant\",\"content\":[{\"type\":\"text\",\"text\":{\"value\":\"Hello! How can I assist you today?\",\"annotations\":[]}}],\"attachments\":[],\"metadata\":{}}\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Store File Batch in PHP\nDESCRIPTION: Creates a new batch operation for processing multiple files in a vector store. Tracks progress and status of file processing.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->vectorStores()->batches()->create(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n    parameters: [\n        'file_ids' => [\n            'file-fUU0hFRuQ1GzhOweTNeJlCXG',\n        ],\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Batch Operation with OpenAI PHP Client\nDESCRIPTION: Demonstrates how to cancel an ongoing batch operation. The response includes the updated status of the batch operation showing it as 'cancelling'.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->batches()->cancel(id: 'batch_abc123');\n\n$response->id; // 'batch_abc123'\n$response->object; // 'batch'\n$response->endpoint; // /v1/chat/completions\n$response->errors; // null\n$response->completionWindow; // '24h'\n$response->status; // 'cancelling'\n$response->outputFileId; // null\n$response->errorFileId; // null\n$response->createdAt; // 1711471533\n$response->inProgressAt; // 1711471538\n$response->expiresAt; // 1711557933\n$response->cancellingAt; // 1711475133\n$response->cancelledAt; // null\n$response->requestCounts->total; // 100\n$response->requestCounts->completed; // 23\n$response->requestCounts->failed; // 1\n$response->metadata; // ['name' => 'My batch name']\n\n$response->toArray(); // ['id' => 'batch_abc123', ...]\n```\n\n----------------------------------------\n\nTITLE: Asserting API Requests in Testing with OpenAI PHP\nDESCRIPTION: Demonstrates various assertion methods for testing API requests, including assertSent, assertNotSent, and assertNothingSent to verify that expected requests were sent correctly.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n// assert completion create request was sent\n$client->assertSent(Completions::class, function (string $method, array $parameters): bool {\n    return $method === 'create' &&\n        $parameters['model'] === 'gpt-3.5-turbo-instruct' &&\n        $parameters['prompt'] === 'PHP is ';\n});\n// or\n$client->completions()->assertSent(function (string $method, array $parameters): bool {\n    // ...\n});\n\n// assert 2 completion create requests were sent\n$client->assertSent(Completions::class, 2);\n\n// assert no completion create requests were sent\n$client->assertNotSent(Completions::class);\n// or\n$client->completions()->assertNotSent();\n\n// assert no requests were sent\n$client->assertNothingSent();\n```\n\n----------------------------------------\n\nTITLE: Creating Legacy Completions\nDESCRIPTION: Shows how to use the legacy completions endpoint with the GPT-3.5-turbo-instruct model. This endpoint is marked as legacy by OpenAI.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->completions()->create([\n    'model' => 'gpt-3.5-turbo-instruct',\n    'prompt' => 'Say this is a test',\n    'max_tokens' => 6,\n    'temperature' => 0\n]);\n```\n\n----------------------------------------\n\nTITLE: Parsing OpenAI Fine-Tune Error Event in JSON\nDESCRIPTION: This snippet shows an error event during the fine-tuning process. It includes details about the failure, specifically an invalid JSON format in one of the training examples.\nSOURCE: https://github.com/openai-php/client/blob/main/tests/Fixtures/Streams/FineTuneEvents.txt#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"object\": \"fine-tune-event\", \"level\": \"error\", \"message\": \"Fine-tune failed. Errors:\\nError with file-OGHjVIyNB7svNc6vaUXNgR87: Invalid file format. Example 1273 cannot be parsed. Error: line contains invalid json: Expecting ',' delimiter: line 1 column 79 (char 78) (line 1273)\", \"created_at\": 1678253655}\n```\n\n----------------------------------------\n\nTITLE: Creating Fake Streaming Responses for Testing in PHP\nDESCRIPTION: Shows how to create fake streaming responses for testing by providing a resource containing the fake response data to the CreateStreamedResponse::fake() method.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nuse OpenAI\\Testing\\ClientFake;\nuse OpenAI\\Responses\\Chat\\CreateStreamedResponse;\n\n$client = new ClientFake([\n    CreateStreamedResponse::fake(fopen('file.txt', 'r'););\n]);\n\n$completion = $client->chat()->createStreamed([\n        'model' => 'gpt-3.5-turbo',\n        'messages' => [\n            ['role' => 'user', 'content' => 'Hello!'],\n        ],\n]);\n\nexpect($response->getIterator()->current())\n        ->id->toBe('chatcmpl-6yo21W6LVo8Tw2yBf7aGf2g17IeIl');\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for OpenAI PHP Client\nDESCRIPTION: This command installs the development dependencies required for contributing to the OpenAI PHP client project. It should be run after cloning your fork of the repository.\nSOURCE: https://github.com/openai-php/client/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Checking Code Quality for OpenAI PHP Client\nDESCRIPTION: This command runs tests specifically focused on code quality and refactoring for the OpenAI PHP client project.\nSOURCE: https://github.com/openai-php/client/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer test:refactor\n```\n\n----------------------------------------\n\nTITLE: Refactoring Code for OpenAI PHP Client\nDESCRIPTION: This command runs the code refactoring process for the OpenAI PHP client project. It helps maintain code quality and consistency.\nSOURCE: https://github.com/openai-php/client/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer refactor\n```\n\n----------------------------------------\n\nTITLE: Linting Code for OpenAI PHP Client\nDESCRIPTION: This command runs the linting process to check for coding style issues in the OpenAI PHP client project. It ensures adherence to the project's coding standards.\nSOURCE: https://github.com/openai-php/client/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer lint\n```\n\n----------------------------------------\n\nTITLE: Running All Tests for OpenAI PHP Client\nDESCRIPTION: This command executes all tests for the OpenAI PHP client project, including unit tests, type checks, and code quality tests.\nSOURCE: https://github.com/openai-php/client/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer test\n```\n\n----------------------------------------\n\nTITLE: Checking Types for OpenAI PHP Client\nDESCRIPTION: This command performs type checking for the OpenAI PHP client project, ensuring type consistency and correctness.\nSOURCE: https://github.com/openai-php/client/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer test:types\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for OpenAI PHP Client\nDESCRIPTION: This command executes the unit tests for the OpenAI PHP client project, verifying the functionality of individual components.\nSOURCE: https://github.com/openai-php/client/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncomposer test:unit\n```\n\n----------------------------------------\n\nTITLE: Text Editing with OpenAI API in PHP (Deprecated)\nDESCRIPTION: Creates edits for provided text based on instructions using the deprecated Edits API. Will be discontinued after January 4, 2024.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->edits()->create([\n    'model' => 'text-davinci-edit-001',\n    'input' => 'What day of the wek is it?',\n    'instruction' => 'Fix the spelling mistakes',\n]);\n```\n\n----------------------------------------\n\nTITLE: Parsing a thread.run.created Event from OpenAI API\nDESCRIPTION: This JSON represents the data payload of a thread.run.created event from the OpenAI API. It contains details about a run including its ID, status, associated assistant and thread IDs, available tools, and configuration parameters.\nSOURCE: https://github.com/openai-php/client/blob/main/tests/Fixtures/Streams/ThreadRunStreamThreadCreatedResponse.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"id\":\"run_s1X8yAjuUBlwhGrqiahzfnH7\",\"object\":\"thread.run\",\"created_at\":1720104398,\"assistant_id\":\"asst_JA9Pc6eQ744nbec10slSz5BU\",\"thread_id\":\"thread_sSbvUX4J1FqlUZBv6BaBbOj4\",\"status\":\"queued\",\"started_at\":null,\"expires_at\":1720104998,\"cancelled_at\":null,\"failed_at\":null,\"completed_at\":null,\"required_action\":null,\"last_error\":null,\"model\":\"gpt-4 o\",\"instructions\":\"You are a very useful assistant\",\"tools\":[{\"type\":\"code_interpreter\"},{\"type\":\"file_search\",\"file_search\":{\"max_num_results\":50}},{\"type\":\"function\",\"function\":{\"name\":\"get_weather\",\"description\":\"Determine weather in my location\",\"parameters\":{\"type\":\"object\",\"properties\":{\"location\":{\"type\":\"string\",\"description\":\"The city and state e.g. San Francisco, CA\"},\"unit\":{\"type\":\"string\",\"enum\":[\"c\",\"f\"]}},\"required\":[\"location\"]}}}],\"tool_resources\":{\"code_interpreter\":{\"file_ids\":[]}},\"metadata\":{\"user\":\"John Doe\"},\"temperature\":0.7,\"top_p\":1.0,\"max_completion_tokens\":null,\"max_prompt_tokens\":null,\"truncation_strategy\":{\"type\":\"auto\",\"last_messages\":null},\"incomplete_details\":null,\"usage\":null,\"response_format\":\"auto\",\"tool_choice\":\"auto\",\"parallel_tool_calls\":true}\n```\n\n----------------------------------------\n\nTITLE: Parsing OpenAI Fine-Tuning Event Stream Data in JSON\nDESCRIPTION: Sample output from an OpenAI fine-tuning job showing the complete lifecycle of events. Events include creation confirmation, cost information, queue status, training epochs, model upload details, and final success status. Each data line contains structured JSON with event details and timestamps.\nSOURCE: https://github.com/openai-php/client/blob/main/src/Testing/Responses/Fixtures/FineTunes/RetrieveStreamedResponseEventFixture.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ndata: {\"object\": \"fine-tune-event\", \"level\": \"info\", \"message\": \"Created fine-tune: ft-y3OpNlc8B5qBVGCCVsLZsDST\", \"created_at\": 1668021917}\ndata: {\"object\": \"fine-tune-event\", \"level\": \"info\", \"message\": \"Fine-tune costs $0.00\", \"created_at\": 1668021926}\ndata: {\"object\": \"fine-tune-event\", \"level\": \"info\", \"message\": \"Fine-tune enqueued. Queue number: 0\", \"created_at\": 1668021927}\ndata: {\"object\": \"fine-tune-event\", \"level\": \"info\", \"message\": \"Fine-tune started\", \"created_at\": 1668021929}\ndata: {\"object\": \"fine-tune-event\", \"level\": \"info\", \"message\": \"Completed epoch 1/4\", \"created_at\": 1668021976}\ndata: {\"object\": \"fine-tune-event\", \"level\": \"info\", \"message\": \"Completed epoch 2/4\", \"created_at\": 1668021977}\ndata: {\"object\": \"fine-tune-event\", \"level\": \"info\", \"message\": \"Completed epoch 3/4\", \"created_at\": 1668021978}\ndata: {\"object\": \"fine-tune-event\", \"level\": \"info\", \"message\": \"Completed epoch 4/4\", \"created_at\": 1668021978}\ndata: {\"object\": \"fine-tune-event\", \"level\": \"info\", \"message\": \"Uploaded model: curie:ft-gehri-dev-2022-11-09-19-26-40\", \"created_at\": 1668022001}\ndata: {\"object\": \"fine-tune-event\", \"level\": \"info\", \"message\": \"Uploaded result file: file-ajLKUCMsFPrT633zqwr0eI4l\", \"created_at\": 1668022002}\ndata: {\"object\": \"fine-tune-event\", \"level\": \"info\", \"message\": \"Fine-tune succeeded\", \"created_at\": 1668022002}\ndata: [DONE]\n```\n\n----------------------------------------\n\nTITLE: Streaming GPT-3.5 Response JSON Format\nDESCRIPTION: Shows the structure of individual data chunks in a streamed API response from OpenAI's text completion endpoint. Each chunk contains an ID, timestamp, model name, and a single token of generated text with its metadata.\nSOURCE: https://github.com/openai-php/client/blob/main/tests/Fixtures/Streams/CompletionCreate.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ndata: {\"id\": \"cmpl-6wcyFqMKXiZffiydSfWHhjcgsf3KD\", \"object\": \"text_completion\", \"created\": 1679430847, \"choices\": [{\"text\": \" everyone\", \"index\": 0, \"logprobs\": null, \"finish_reason\": null}], \"model\": \"gpt-3.5-turbo-instruct\"}\n```\n\nLANGUAGE: json\nCODE:\n```\ndata: {\"id\": \"cmpl-6wcyFqMKXiZffiydSfWHhjcgsf3KD\", \"object\": \"text_completion\", \"created\": 1679430847, \"choices\": [{\"text\": \"!\", \"index\": 0, \"logprobs\": null, \"finish_reason\": null}], \"model\": \"gpt-3.5-turbo-instruct\"}\n```\n\nLANGUAGE: json\nCODE:\n```\ndata: [DONE]\n```\n\n----------------------------------------\n\nTITLE: Parsing OpenAI Fine-Tune Creation Event in JSON\nDESCRIPTION: This snippet represents a successful fine-tune creation event. It includes the object type, event level, a message with the fine-tune ID, and a timestamp.\nSOURCE: https://github.com/openai-php/client/blob/main/tests/Fixtures/Streams/FineTuneEvents.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"object\": \"fine-tune-event\", \"level\": \"info\", \"message\": \"Created fine-tune: ft-MaoEAULREoazpupm8uB7qoIl\", \"created_at\": 1678253295}\n```\n\n----------------------------------------\n\nTITLE: Fine-Tuning Models with OpenAI API in PHP (Deprecated)\nDESCRIPTION: Manages fine-tuning jobs for custom model training. API will be discontinued after January 4, 2024.\nSOURCE: https://github.com/openai-php/client/blob/main/README.md#2025-04-21_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->fineTunes()->create([\n    'training_file' => 'file-ajSREls59WBbvgSzJSVWxMCB',\n    'validation_file' => 'file-XjSREls59WBbvgSzJSVWxMCa',\n    'model' => 'curie',\n    'n_epochs' => 4,\n    'batch_size' => null,\n    'learning_rate_multiplier' => null,\n    'prompt_loss_weight' => 0.01,\n    'compute_classification_metrics' => false,\n    'classification_n_classes' => null,\n    'classification_positive_class' => null,\n    'classification_betas' => [],\n    'suffix' => null,\n]);\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Standard format for documenting version changes following Keep a Changelog and Semantic Versioning conventions.\nSOURCE: https://github.com/openai-php/client/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [version] (YYYY-MM-DD)\n### Added\n- New feature\n\n### Fixed\n- Bug fix\n\n### Changed\n- Changes in existing functionality\n\n### Removed\n- Removed features\n```"
  }
]