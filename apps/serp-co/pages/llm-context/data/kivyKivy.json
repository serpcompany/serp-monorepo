[
  {
    "owner": "kivy",
    "repo": "kivy",
    "content": "TITLE: Handling Touch Events in Kivy Widget\nDESCRIPTION: Enhanced paint widget that prints touch information to the console. This demonstrates how to capture and handle touch events in a Kivy widget using the on_touch_down method.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials/firstwidget.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.app import App\nfrom kivy.uix.widget import Widget\n\n\nclass PaintWidget(Widget):\n    def on_touch_down(self, touch):\n        print(touch)\n\n\nclass PaintApp(App):\n    def build(self):\n        return PaintWidget()\n\n\nif __name__ == '__main__':\n    PaintApp().run()\n```\n\n----------------------------------------\n\nTITLE: Accessing Widget IDs in Python with Kivy\nDESCRIPTION: Demonstrates how to access widgets with IDs in a Kivy application using Python. It shows the use of self.ids dictionary and alternative syntax for accessing widgets.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass Marvel(BoxLayout):\n\n    def hulk_smash(self):\n        self.ids.hulk.text = \"hulk: puny god!\"\n        self.ids[\"loki\"].text = \"loki: >_<!!!\"  # alternative syntax\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Kivy Application in Python\nDESCRIPTION: This snippet demonstrates how to create a minimal Kivy application that displays a 'Hello World' label. It shows the basic structure of a Kivy app, including subclassing App and implementing the build method.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/basic.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport kivy\nkivy.require('2.1.0') # replace with your current kivy version !\n\nfrom kivy.app import App\nfrom kivy.uix.label import Label\n\n\nclass MyApp(App):\n\n    def build(self):\n        return Label(text='Hello world')\n\n\nif __name__ == '__main__':\n    MyApp().run()\n```\n\n----------------------------------------\n\nTITLE: Declaring a Property in a Kivy Widget\nDESCRIPTION: This example demonstrates how to declare a StringProperty in a custom Kivy widget class and properly initialize it.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/events.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyWidget(Widget):\n    text = StringProperty('')\n\n    def __init__(self, **kwargs):\n        super(MyWidget, self).__init__(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Complete Kivy Application with Custom Property and Binding\nDESCRIPTION: This is a complete Kivy application that demonstrates custom property definition, event handling, and property binding. It includes a custom button widget and a root widget that uses this custom button.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/events.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.app import App\nfrom kivy.uix.widget import Widget\nfrom kivy.uix.button import Button\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.properties import ListProperty\n\nclass RootWidget(BoxLayout):\n\n    def __init__(self, **kwargs):\n        super(RootWidget, self).__init__(**kwargs)\n        self.add_widget(Button(text='btn 1'))\n        cb = CustomBtn()\n        cb.bind(pressed=self.btn_pressed)\n        self.add_widget(cb)\n        self.add_widget(Button(text='btn 2'))\n\n    def btn_pressed(self, instance, pos):\n        print('pos: printed from root widget: {pos}'.format(pos=pos))\n\nclass CustomBtn(Widget):\n\n    pressed = ListProperty([0, 0])\n\n    def on_touch_down(self, touch):\n        if self.collide_point(*touch.pos):\n            self.pressed = touch.pos\n            # we consumed the touch. return False here to propagate\n            # the touch further to the children.\n            return True\n        return super(CustomBtn, self).on_touch_down(touch)\n\n    def on_pressed(self, instance, pos):\n        print('pressed at {pos}'.format(pos=pos))\n\nclass TestApp(App):\n\n    def build(self):\n        return RootWidget()\n\n\nif __name__ == '__main__':\n    TestApp().run()\n```\n\n----------------------------------------\n\nTITLE: Drawing Circles on Touch in Kivy\nDESCRIPTION: Paint widget that draws a yellow circle at each touch point. This code demonstrates using the Canvas object with Color and Ellipse instructions to create visual elements at touch coordinates.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials/firstwidget.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.app import App\nfrom kivy.uix.widget import Widget\nfrom kivy.graphics import Color, Ellipse\n\n\nclass PaintWidget(Widget):\n    def on_touch_down(self, touch):\n        with self.canvas:\n            Color(1, 1, 0)\n            d = 30.\n            Ellipse(pos=(touch.x - d / 2, touch.y - d / 2), size=(d, d))\n\n\nclass PaintApp(App):\n    def build(self):\n        return PaintWidget()\n\n\nif __name__ == '__main__':\n    PaintApp().run()\n```\n\n----------------------------------------\n\nTITLE: Declaring Properties in Python (Traditional vs Kivy)\nDESCRIPTION: Demonstrates the difference between traditional Python attribute declaration and Kivy's property system. The Kivy approach uses the EventDispatcher class and NumericProperty for improved functionality.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/properties.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyClass(object):\n    def __init__(self):\n        super(MyClass, self).__init__()\n        self.numeric_var = 1\n```\n\nLANGUAGE: python\nCODE:\n```\nclass MyClass(EventDispatcher):\n    numeric_var = NumericProperty(1)\n```\n\n----------------------------------------\n\nTITLE: Creating Paint Widget with HSV Colors and Clear Button in Python/Kivy\nDESCRIPTION: Implementation of a paint application with a clear button functionality. The code demonstrates widget hierarchy setup, touch event handling, HSV color space usage for consistent brightness, and canvas clearing functionality.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials/firstwidget.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.app import App\nfrom kivy.uix.widget import Widget\nfrom kivy.graphics import Color, Ellipse, Line\nfrom kivy.uix.button import Button\nfrom random import random\n\nclass MyPaintWidget(Widget):\n    def on_touch_down(self, touch):\n        with self.canvas:\n            color = (random(), 1., 1.)\n            Color(*color, mode='hsv')\n            d = 30.\n            Ellipse(pos=(touch.x - d/2, touch.y - d/2), size=(d, d))\n            touch.ud['line'] = Line(points=(touch.x, touch.y))\n\n    def on_touch_move(self, touch):\n        touch.ud['line'].points += [touch.x, touch.y]\n\n\nclass MyPaintApp(App):\n    def build(self):\n        parent = Widget()\n        painter = MyPaintWidget()\n        clearbtn = Button(text='Clear')\n        clearbtn.bind(on_release=self.clear_canvas)\n        parent.add_widget(painter)\n        parent.add_widget(clearbtn)\n        return parent\n\n    def clear_canvas(self, obj):\n        self.painter.canvas.clear()\n```\n\n----------------------------------------\n\nTITLE: Defining GUI Layout in Kivy Language\nDESCRIPTION: This snippet demonstrates the basic structure of a Kivy language file. It shows how to define a LoginScreen class with a GridLayout, setting properties like the number of rows. The code illustrates the simplicity of GUI design in Kivy.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/rules.rst#2025-04-21_snippet_0\n\nLANGUAGE: kv\nCODE:\n```\n<LoginScreen>:  # every class in your app can be represented by a rule like\n                    # this in the kv file\n    GridLayout: # this is how you add your widget/layout to the parent\n                # (note the indentation).\n        rows: 2 # this how you set each property of your widget/layout\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Properties in Kv Language\nDESCRIPTION: Shows how to set properties of widgets directly in Kv language rules.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_7\n\nLANGUAGE: kv\nCODE:\n```\nGridLayout:\n    cols: 3\n```\n\n----------------------------------------\n\nTITLE: Adding a Button to a BoxLayout in Kivy\nDESCRIPTION: Demonstrates how to create a BoxLayout, instantiate a Button, and add the Button as a child of the layout. Also shows how to remove the Button from the layout.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/widgets.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlayout = BoxLayout(padding=10)\nbutton = Button(text='My first button')\nlayout.add_widget(button)\n\n# To remove the button from the layout:\nlayout.remove_widget(button)\n```\n\n----------------------------------------\n\nTITLE: Loading Kv File by Convention in Kivy\nDESCRIPTION: Demonstrates how Kivy automatically loads a Kv file based on the App class name. The file should be named in lowercase, minus 'App' if the class name ends with it.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMyApp -> my.kv\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Login Screen with Kivy in Python\nDESCRIPTION: This snippet shows how to create a more complex Kivy application with a custom login screen. It demonstrates the use of GridLayout, Label, and TextInput widgets to create a username and password input form.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/basic.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom kivy.app import App\nfrom kivy.uix.gridlayout import GridLayout\nfrom kivy.uix.label import Label\nfrom kivy.uix.textinput import TextInput\n\n\nclass LoginScreen(GridLayout):\n\n    def __init__(self, **kwargs):\n        super(LoginScreen, self).__init__(**kwargs)\n        self.cols = 2\n        self.add_widget(Label(text='User Name'))\n        self.username = TextInput(multiline=False)\n        self.add_widget(self.username)\n        self.add_widget(Label(text='password'))\n        self.password = TextInput(password=True, multiline=False)\n        self.add_widget(self.password)\n\n\nclass MyApp(App):\n\n    def build(self):\n        return LoginScreen()\n\n\nif __name__ == '__main__':\n    MyApp().run()\n```\n\n----------------------------------------\n\nTITLE: Using size_hint and pos_hint in Kivy Layouts\nDESCRIPTION: Demonstrates how to use size_hint and pos_hint properties to control widget size and position within Kivy layouts. size_hint defines the widget size as a fraction of parent size (0.0 to 1.0), while pos_hint places the widget relative to the parent. Setting these to None allows direct specification of x, y, width, and height in screen coordinates.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/layouts.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwidget.size_hint = (0.5, 0.5)  # 50% of parent width and height\nwidget.pos_hint = {'center_x': 0.5, 'center_y': 0.5}  # centered in parent\n\n# Or for manual positioning:\nwidget.size_hint = (None, None)\nwidget.pos = (100, 100)\nwidget.size = (200, 200)\n```\n\n----------------------------------------\n\nTITLE: Initializing Canvas Instructions in Kivy Widget\nDESCRIPTION: Demonstrates how to add canvas instructions to a Kivy widget using the canvas context. It shows the usage of main canvas, canvas.before, and canvas.after groups.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/graphics.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyWidget(Widget):\n    def __init__(self, **kwargs):\n        super(MyWidget, self).__init__(**kwargs)\n        with self.canvas:\n            # add your instruction for main canvas here\n\n        with self.canvas.before:\n            # you can use this to add instructions rendered before\n\n        with self.canvas.after:\n            # you can use this to add instructions rendered after\n```\n\n----------------------------------------\n\nTITLE: Implementing Touch Event Handler in Kivy Widget\nDESCRIPTION: Example showing how to properly override the on_touch_down event handler in a Kivy widget while preserving base class behavior. The handler checks for touch collision and prints a message when touched.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/events.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_touch_down(self, touch):\n    if super().on_touch_down(touch):\n        return True\n    if not self.collide_point(touch.x, touch.y):\n        return False\n    print('you touched me!')\n    return True\n```\n\n----------------------------------------\n\nTITLE: Implementing Ball Movement in Kivy Pong Game\nDESCRIPTION: Defines the PongGame class with ball movement logic and bounce handling off screen edges. Uses ObjectProperty to reference the ball widget.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials/pong.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass PongGame(Widget):\n    ball = ObjectProperty(None)\n\n    def update(self, dt):\n        self.ball.move()\n\n        # bounce off top and bottom\n        if (self.ball.y < 0) or (self.ball.top > self.height):\n            self.ball.velocity_y *= -1\n\n        # bounce off left and right\n        if (self.ball.x < 0) or (self.ball.right > self.width):\n            self.ball.velocity_x *= -1\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Event Dispatcher in Python\nDESCRIPTION: This example demonstrates how to create a custom event dispatcher class with a custom event type and how to dispatch the event.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/events.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyEventDispatcher(EventDispatcher):\n    def __init__(self, **kwargs):\n        self.register_event_type('on_test')\n        super(MyEventDispatcher, self).__init__(**kwargs)\n\n    def do_something(self, value):\n        self.dispatch('on_test', value)\n\n    def on_test(self, *args):\n        print(\"I am dispatched\", args)\n```\n\n----------------------------------------\n\nTITLE: Implementing Paddle Collision and Ball Bouncing\nDESCRIPTION: Defines the PongPaddle class with scoring and ball bounce physics. Includes velocity adjustments based on hit position.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials/pong.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass PongPaddle(Widget):\n\n    score = NumericProperty(0)\n\n    def bounce_ball(self, ball):\n        if self.collide_widget(ball):\n            speedup  = 1.1\n            offset = 0.02 * Vector(0, ball.center_y-self.center_y)\n            ball.velocity =  speedup * (offset - ball.velocity)\n```\n\n----------------------------------------\n\nTITLE: Using a ListProperty in a Custom Kivy Button\nDESCRIPTION: This snippet shows how to use a ListProperty in a custom button class to track touch positions and respond to property changes.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/events.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass CustomBtn(Widget):\n    pressed = ListProperty([0, 0])\n\n    def on_touch_down(self, touch):\n        if self.collide_point(*touch.pos):\n            self.pressed = touch.pos\n            return True\n        return super(CustomBtn, self).on_touch_down(touch)\n\n    def on_pressed(self, instance, pos):\n        print('pressed at {pos}'.format(pos=pos))\n```\n\n----------------------------------------\n\nTITLE: Implementing Touch Event Handling in Kivy Widget\nDESCRIPTION: This snippet overrides the on_touch_down method to handle touch events within a custom button widget. It updates the 'pressed' property when a touch occurs within the widget's bounds.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/events.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef on_touch_down(self, touch):\n    if self.collide_point(*touch.pos):\n        self.pressed = touch.pos\n        return True\n    return super(CustomBtn, self).on_touch_down(touch)\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Repetitive Event with Clock in Python\nDESCRIPTION: This snippet demonstrates how to schedule a function to be called repeatedly using Kivy's Clock.schedule_interval method. It also shows how to unschedule the event.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/events.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef my_callback(dt):\n    print('My callback is called', dt)\nevent = Clock.schedule_interval(my_callback, 1 / 30)\n\n# Unscheduling\nevent.cancel()\n\n# or\nClock.unschedule(event)\n```\n\n----------------------------------------\n\nTITLE: Updating Canvas Instructions in Kivy Widget\nDESCRIPTION: Shows how to keep a reference to canvas instructions and update them when widget properties change. This is considered best practice for efficiency.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/graphics.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyWidget(Widget):\n    def __init__(self, **kwargs):\n        super(MyWidget, self).__init__(**kwargs)\n        with self.canvas:\n            self.rect = Rectangle(pos=self.pos, size=self.size)\n\n        self.bind(pos=self.update_rect)\n        self.bind(size=self.update_rect)\n\n    def update_rect(self, *args):\n        self.rect.pos = self.pos\n        self.rect.size = self.size\n```\n\n----------------------------------------\n\nTITLE: Binding to Events in Kv Language\nDESCRIPTION: Demonstrates how to bind callbacks to widget events using the ':' syntax in Kv language.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_8\n\nLANGUAGE: kv\nCODE:\n```\nWidget:\n    on_size: my_callback()\n```\n\nLANGUAGE: kv\nCODE:\n```\nTextInput:\n    on_text: app.search(args[1])\n```\n\n----------------------------------------\n\nTITLE: Drawing Continuous Lines in Kivy\nDESCRIPTION: Enhanced paint widget that draws continuous lines following touch movement. This code uses touch.ud dictionary to store line references and updates them as the touch moves across the screen.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials/firstwidget.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.app import App\nfrom kivy.uix.widget import Widget\nfrom kivy.graphics import Color, Ellipse, Line\n\n\nclass PaintWidget(Widget):\n    def on_touch_down(self, touch):\n        with self.canvas:\n            Color(1, 1, 0)\n            d = 30.\n            Ellipse(pos=(touch.x - d / 2, touch.y - d / 2), size=(d, d))\n            touch.ud['line'] = Line(points=(touch.x, touch.y))\n\n    def on_touch_move(self, touch):\n        touch.ud['line'].points += [touch.x, touch.y]\n\n\nclass PaintApp(App):\n    def build(self):\n        return PaintWidget()\n\n\nif __name__ == '__main__':\n    PaintApp().run()\n```\n\n----------------------------------------\n\nTITLE: Defining a Button in a BoxLayout using Kivy Language\nDESCRIPTION: Kivy Language (KV) code snippet showing how to define a Button within a BoxLayout, demonstrating the use of size_hint property.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/widgets.rst#2025-04-21_snippet_3\n\nLANGUAGE: kivy\nCODE:\n```\nBoxLayout:\n    Button:\n        text: 'Button 1'\n        # default size_hint is 1, 1, we don't need to specify it explicitly\n        # however it's provided here to make things clear\n        size_hint: 1, 1\n```\n\n----------------------------------------\n\nTITLE: Checking Touch Shape in Kivy\nDESCRIPTION: Example showing how to check and handle rectangular touch shapes in a touch event handler.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/inputs.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.input.shape import ShapeRect\n\ndef on_touch_move(self, touch):\n    if isinstance(touch.shape, ShapeRect):\n        print('My touch have a rectangle shape of size',\n            (touch.shape.width, touch.shape.height))\n```\n\n----------------------------------------\n\nTITLE: Complete Kivy App with Background using KV Language\nDESCRIPTION: Full implementation of a Kivy application with a green background and centered Hello World button using KV language.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/widgets.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.app import App\nfrom kivy.lang import Builder\n\nroot = Builder.load_string('''\nFloatLayout:\n    canvas.before:\n        Color:\n            rgba: 0, 1, 0, 1\n        Rectangle:\n            pos: self.pos\n            size: self.size\n    Button:\n        text: 'Hello World!!'\n        size_hint: .5, .5\n        pos_hint: {'center_x':.5, 'center_y': .5}\n''')\n\nclass MainApp(App):\n    def build(self):\n        return root\n\nif __name__ == '__main__':\n    MainApp().run()\n```\n\n----------------------------------------\n\nTITLE: Touch Event Handler Implementation in Python using Kivy\nDESCRIPTION: Implementation of touch event handlers showing how to grab, handle, and release touch events in a Kivy widget. Includes both touch up and initial touch handling.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/inputs.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# if the touch collides with our widget, let's grab it\ntouch.grab(self)\n\n# and accept the touch.\nreturn True\n\ndef on_touch_up(self, touch):\n    # here, you don't check if the touch collides or things like that.\n    # you just need to check if it's a grabbed touch event\n    if touch.grab_current is self:\n\n        # ok, the current touch is dispatched for us.\n        # do something interesting here\n        print('Hello world!')\n\n        # don't forget to ungrab ourself, or you might have side effects\n        touch.ungrab(self)\n\n        # and accept the last up\n        return True\n```\n\n----------------------------------------\n\nTITLE: Referencing Widgets with IDs in Kv Language\nDESCRIPTION: Demonstrates how to use IDs to reference widgets within Kv language rules.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_10\n\nLANGUAGE: kv\nCODE:\n```\n<MyFirstWidget>:\n    Button:\n        id: f_but\n    TextInput:\n        text: f_but.state\n```\n\n----------------------------------------\n\nTITLE: Handling Double Tap Events in Kivy\nDESCRIPTION: Example showing how to detect and handle double tap events, including checking timing and distance information.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/inputs.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef on_touch_down(self, touch):\n    if touch.is_double_tap:\n        print('Touch is a double tap !')\n        print(' - interval is', touch.double_tap_time)\n        print(' - distance between previous is', touch.double_tap_distance)\n```\n\n----------------------------------------\n\nTITLE: Drawing Line and Rectangle in Kivy Canvas\nDESCRIPTION: Demonstrates drawing a line and a semi-transparent red rectangle on the canvas. It uses Line and Rectangle instructions along with Color context instruction.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/graphics.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith self.canvas:\n    # draw a line using the default color\n    Line(points=(x1, y1, x2, y2, x3, y3))\n\n    # lets draw a semi-transparent red square\n    Color(1, 0, 0, .5, mode='rgba')\n    Rectangle(pos=self.pos, size=self.size)\n```\n\n----------------------------------------\n\nTITLE: Custom Layout with Background Implementation\nDESCRIPTION: Implementation of a custom layout class with built-in background color support using both Python and KV language approaches.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/widgets.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.app import App\nfrom kivy.uix.floatlayout import FloatLayout\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.lang import Builder\n\nBuilder.load_string('''\n<CustomLayout>\n    canvas.before:\n        Color:\n            rgba: 0, 1, 0, 1\n        Rectangle:\n            pos: self.pos\n            size: self.size\n''')\n\nclass CustomLayout(FloatLayout):\n    pass\n\nclass RootWidget(BoxLayout):\n    pass\n\nclass MainApp(App):\n    def build(self):\n        return RootWidget()\n\nif __name__ == '__main__':\n    MainApp().run()\n```\n\n----------------------------------------\n\nTITLE: Defining Canvas Instructions in Kv Language\nDESCRIPTION: Shows how to define canvas instructions for widgets using Kv language syntax.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_9\n\nLANGUAGE: kv\nCODE:\n```\nMyWidget:\n    canvas:\n        Color:\n            rgba: 1, .3, .8, .5\n        Line:\n            points: zip(self.data.x, self.data.y)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Kivy Application Structure\nDESCRIPTION: Initial skeleton code for a Kivy paint application. Sets up the basic structure with a custom widget class that inherits from Widget and a main application class that inherits from App.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials/firstwidget.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.app import App\nfrom kivy.uix.widget import Widget\n\n\nclass PaintWidget(Widget):\n    pass\n\n\nclass PaintApp(App):\n    def build(self):\n        return PaintWidget()\n\n\nif __name__ == '__main__':\n    PaintApp().run()\n```\n\n----------------------------------------\n\nTITLE: Attaching Callbacks to Custom Events in Python\nDESCRIPTION: This snippet shows how to bind a callback function to a custom event and trigger the event.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/events.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef my_callback(value, *args):\n    print(\"Hello, I got an event!\", args)\n\nev = MyEventDispatcher()\nev.bind(on_test=my_callback)\nev.do_something('test')\n```\n\n----------------------------------------\n\nTITLE: Widget Touch Event Handling in Python\nDESCRIPTION: Base Widget class implementation showing how touch events are propagated through the widget tree. The method iterates through child widgets and dispatches touch down events, returning True if any child handles the event.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/architecture.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_touch_down(self, touch):\n    for child in self.children[:]:\n        if child.dispatch('on_touch_down', touch):\n            return True\n```\n\n----------------------------------------\n\nTITLE: Static Background in Kivy\nDESCRIPTION: Shows how to create a Kivy app with a static background using BorderImage and GridLayout. The app displays three labels with different text alignments.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/widgets.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.app import App\nfrom kivy.uix.floatlayout import FloatLayout\nfrom kivy.lang import Builder\n\nBuilder.load_string('''\n<GridLayout>\n    canvas.before:\n        BorderImage:\n            # BorderImage behaves like the CSS BorderImage\n            border: 10, 10, 10, 10\n            source: '../examples/widgets/sequenced_images/data/images/button_white.png'\n            pos: self.pos\n            size: self.size\n\n<RootWidget>\n    GridLayout:\n        size_hint: .9, .9\n        pos_hint: {'center_x': .5, 'center_y': .5}\n        rows:1\n        Label:\n            text: \"I don't suffer from insanity, I enjoy every minute of it\"\n            text_size: self.width-20, self.height-20\n            valign: 'top'\n        Label:\n            text: \"When I was born I was so surprised; I didn't speak for a year and a half.\"\n            text_size: self.width-20, self.height-20\n            valign: 'middle'\n            halign: 'center'\n        Label:\n            text: \"A consultant is someone who takes a subject you understand and makes it sound confusing\"\n            text_size: self.width-20, self.height-20\n            valign: 'bottom'\n            halign: 'justify'\n''')\n\nclass RootWidget(FloatLayout):\n    pass\n\nclass MainApp(App):\n    def build(self):\n        return RootWidget()\n\nif __name__ == '__main__':\n    MainApp().run()\n```\n\n----------------------------------------\n\nTITLE: Importing Python Modules in Kv Language\nDESCRIPTION: Demonstrates how to import Python modules and classes for use in Kv files using the #:import directive.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_4\n\nLANGUAGE: kv\nCODE:\n```\n#:import name x.y.z\n#:import isdir os.path.isdir\n#:import np numpy\n```\n\n----------------------------------------\n\nTITLE: Basic Kivy Button Layout with Position Hints\nDESCRIPTION: Demonstrates using FloatLayout with multiple buttons positioned using pos_hint and size_hint attributes.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/widgets.rst#2025-04-21_snippet_4\n\nLANGUAGE: kivy\nCODE:\n```\nFloatLayout:\n    Button:\n        text: \"We Will\"\n        pos: 100, 100\n        size_hint: .2, .4\n    Button:\n        text: \"Wee Wiill\"\n        pos: 200, 200\n        size_hint: .4, .2\n    Button:\n        text: \"ROCK YOU!!\"\n        pos_hint: {'x': .3, 'y': .6}\n        size_hint: .5, .2\n```\n\n----------------------------------------\n\nTITLE: Defining UI Layout in Kivy Language\nDESCRIPTION: Illustrates how to define the user interface layout for a Kivy application using the Kivy language. It creates a simple layout with a label and a button, binding them to the controller's properties and methods.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_16\n\nLANGUAGE: kv\nCODE:\n```\n<Controller>:\n    label_wid: my_custom_label\n\n    BoxLayout:\n        orientation: 'vertical'\n        padding: 20\n\n        Button:\n            text: 'My controller info is: ' + root.info\n            on_press: root.do_action()\n\n        Label:\n            id: my_custom_label\n            text: 'My label before button press'\n```\n\n----------------------------------------\n\nTITLE: Instantiating Child Widgets in Kv Language\nDESCRIPTION: Demonstrates how to declare child widgets within a parent widget using Kv language syntax.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_6\n\nLANGUAGE: kv\nCODE:\n```\nMyRootWidget:\n    BoxLayout:\n        Button:\n        Button:\n```\n\n----------------------------------------\n\nTITLE: Setting Global Values in Kv Language\nDESCRIPTION: Shows how to set global values in Kv files using the #:set directive.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_5\n\nLANGUAGE: kv\nCODE:\n```\n#:set name value\n```\n\n----------------------------------------\n\nTITLE: Complete Kivy App with Background in Python\nDESCRIPTION: Full implementation of a Kivy application with a green background and centered Hello World button using pure Python.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/widgets.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.app import App\nfrom kivy.graphics import Color, Rectangle\nfrom kivy.uix.floatlayout import FloatLayout\nfrom kivy.uix.button import Button\n\nclass RootWidget(FloatLayout):\n    def __init__(self, **kwargs):\n        super(RootWidget, self).__init__(**kwargs)\n        self.add_widget(\n            Button(\n                text=\"Hello World\",\n                size_hint=(.5, .5),\n                pos_hint={'center_x': .5, 'center_y': .5}))\n\nclass MainApp(App):\n    def build(self):\n        self.root = root = RootWidget()\n        root.bind(size=self._update_rect, pos=self._update_rect)\n        with root.canvas.before:\n            Color(0, 1, 0, 1)\n            self.rect = Rectangle(size=root.size, pos=root.pos)\n        return root\n\n    def _update_rect(self, instance, value):\n        self.rect.pos = instance.pos\n        self.rect.size = instance.size\n\nif __name__ == '__main__':\n    MainApp().run()\n```\n\n----------------------------------------\n\nTITLE: Creating Kivy Root Widget with Property Binding\nDESCRIPTION: This code creates a RootWidget class that adds buttons and a custom button to a BoxLayout. It demonstrates how to bind to a property of the custom button.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/events.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass RootWidget(BoxLayout):\n\n    def __init__(self, **kwargs):\n        super(RootWidget, self).__init__(**kwargs)\n        self.add_widget(Button(text='btn 1'))\n        cb = CustomBtn()\n        cb.bind(pressed=self.btn_pressed)\n        self.add_widget(cb)\n        self.add_widget(Button(text='btn 2'))\n\n    def btn_pressed(self, instance, pos):\n        print('pos: printed from root widget: {pos}'.format(pos=.pos))\n```\n\n----------------------------------------\n\nTITLE: Defining Class Rule in Kv Language\nDESCRIPTION: Shows how to define a class rule in Kv, which sets the appearance and behavior for all instances of that class.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_3\n\nLANGUAGE: kv\nCODE:\n```\n<MyWidget>:\n```\n\n----------------------------------------\n\nTITLE: Defining Root Widget in Kv Language\nDESCRIPTION: Demonstrates how to define the root widget in a Kv file, which will be set as the root attribute of the App instance.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_2\n\nLANGUAGE: kv\nCODE:\n```\nWidget:\n```\n\n----------------------------------------\n\nTITLE: Creating Local Kivy Configuration in Python\nDESCRIPTION: Demonstrates how to create and modify a local Kivy configuration file using Python. This is useful for application-specific or testing configurations.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/config.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.config import Config\n\nConfig.read(<file>)\n# set config\nConfig.write()\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Touch Controls in Kivy Pong\nDESCRIPTION: Handles touch input for moving player paddles. Implements on_touch_move to control paddle positions based on touch location.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials/pong.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef on_touch_move(self, touch):\n    if touch.x < self.width/3:\n        self.player1.center_y = touch.y\n    if touch.x > self.width - self.width/3:\n        self.player2.center_y = touch.y\n```\n\n----------------------------------------\n\nTITLE: Scheduling a One-time Event with Clock in Python\nDESCRIPTION: This snippet shows how to schedule a function to be called once after a specified delay using Kivy's Clock.schedule_once method.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/events.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef my_callback(dt):\n    print('My callback is called !')\nClock.schedule_once(my_callback, 1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Function for Property Binding in Kivy\nDESCRIPTION: This snippet shows how to use a local function for property binding in Kivy. It defines a function to handle the 'pressed' event and binds it to a CustomBtn instance.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/events.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncb = CustomBtn()\n\ndef _local_func(instance, pos):\n    print('pos: printed from root widget: {pos}'.format(pos=pos))\n\ncb.bind(pressed=_local_func)\nself.add_widget(cb)\n```\n\n----------------------------------------\n\nTITLE: Animated Background in Kivy\nDESCRIPTION: Demonstrates how to create an animated background in Kivy using BorderImage with a custom texture. Uses an animated zip file as the source and updates the texture automatically.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/widgets.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.app import App\nfrom kivy.uix.floatlayout import FloatLayout\nfrom kivy.uix.gridlayout import GridLayout\nfrom kivy.uix.image import Image\nfrom kivy.properties import ObjectProperty\nfrom kivy.lang import Builder\n\nBuilder.load_string('''\n<CustomLayout>\n    canvas.before:\n        BorderImage:\n            # BorderImage behaves like the CSS BorderImage\n            border: 10, 10, 10, 10\n            texture: self.background_image.texture\n            pos: self.pos\n            size: self.size\n\n<RootWidget>\n    CustomLayout:\n        size_hint: .9, .9\n        pos_hint: {'center_x': .5, 'center_y': .5}\n        rows:1\n        Label:\n            text: \"I don't suffer from insanity, I enjoy every minute of it\"\n            text_size: self.width-20, self.height-20\n            valign: 'top'\n        Label:\n            text: \"When I was born I was so surprised; I didn't speak for a year and a half.\"\n            text_size: self.width-20, self.height-20\n            valign: 'middle'\n            halign: 'center'\n        Label:\n            text: \"A consultant is someone who takes a subject you understand and makes it sound confusing\"\n            text_size: self.width-20, self.height-20\n            valign: 'bottom'\n            halign: 'justify'\n''')\n\nclass CustomLayout(GridLayout):\n    background_image = ObjectProperty(\n        Image(\n            source='../examples/widgets/sequenced_images/data/images/button_white_animated.zip',\n            anim_delay=.1))\n\nclass RootWidget(FloatLayout):\n    pass\n\nclass MainApp(App):\n    def build(self):\n        return RootWidget()\n\nif __name__ == '__main__':\n    MainApp().run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Twisted Echo Server with Kivy (Python)\nDESCRIPTION: Example of a Kivy application implementing a Twisted echo server. The server logs incoming messages and sends back echo responses. This snippet demonstrates the integration of Twisted server functionality within a Kivy app.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/other-frameworks.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom kivy.app import App\nfrom kivy.uix.label import Label\nfrom kivy.uix.textinput import TextInput\nfrom kivy.uix.boxlayout import BoxLayout\n\n# A Simple Server that echoes back any input received\nfrom twisted.internet import protocol\n\nclass EchoServer(protocol.Protocol):\n    def dataReceived(self, data):\n        response = self.factory.app.handle_message(data)\n        if response:\n            self.transport.write(response)\n\nclass EchoServerFactory(protocol.Factory):\n    protocol = EchoServer\n    def __init__(self, app):\n        self.app = app\n\nfrom kivy.support import install_twisted_reactor\ninstall_twisted_reactor()\n\nclass TwistedServerApp(App):\n    def build(self):\n        self.label = Label(text=\"server started\\n\")\n        self.textbox = TextInput(size_hint_y=.1, multiline=False)\n        self.textbox.bind(on_text_validate=self.send_message)\n        layout = BoxLayout(orientation='vertical')\n        layout.add_widget(self.label)\n        layout.add_widget(self.textbox)\n        return layout\n\n    def send_message(self, *args):\n        msg = self.textbox.text\n        self.textbox.text = \"\"\n        self.label.text += (\"Sent: \" + msg + \"\\n\")\n\n    def handle_message(self, msg):\n        self.label.text += (\"Received: \" + msg + \"\\n\")\n        msg = msg.strip().lower()\n        if msg == \"hello\":\n            msg = \"Hey there!\"\n        return msg\n\n    def on_start(self):\n        self.label.text = \"Server started\\n\"\n        # start server\n        from twisted.internet import reactor\n        reactor.listenTCP(8000, EchoServerFactory(self))\n\nif __name__ == '__main__':\n    TwistedServerApp().run()\n```\n\n----------------------------------------\n\nTITLE: Auto-unscheduling a Repetitive Event in Python\nDESCRIPTION: This example shows how to automatically unschedule a repetitive event by returning False from the callback function after a certain condition is met.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/events.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncount = 0\ndef my_callback(dt):\n    global count\n    count += 1\n    if count == 10:\n        print('Last call of my callback, bye bye !')\n        return False\n    print('My callback is called')\nClock.schedule_interval(my_callback, 1 / 30)\n```\n\n----------------------------------------\n\nTITLE: Kivy Ball Widget Configuration\nDESCRIPTION: KV language configuration for the PongGame widget, setting up ball properties and positioning.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials/pong.rst#2025-04-21_snippet_6\n\nLANGUAGE: kv\nCODE:\n```\n<PongGame>:\n    ball: pong_ball\n\n    # ... (canvas and Labels)\n\n    PongBall:\n        id: pong_ball\n        center: self.parent.center\n```\n\n----------------------------------------\n\nTITLE: Implementing PongBall Class (Python)\nDESCRIPTION: Creates a PongBall widget class with velocity properties and movement logic for the game ball.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials/pong.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass PongBall(Widget):\n    velocity_x = NumericProperty(0)\n    velocity_y = NumericProperty(0)\n    velocity = ReferenceListProperty(velocity_x, velocity_y)\n\n    def move(self):\n        self.pos = Vector(*self.velocity) + self.pos\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Kivy Application (Python)\nDESCRIPTION: Sets up the basic Kivy application structure with a PongGame widget class and PongApp class that serves as the entry point.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials/pong.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.app import App\nfrom kivy.widget import Widget\n\nclass PongGame(Widget):\n    pass\n\nclass PongApp(App):\n    def build(self):\n        return PongGame()\n```\n\n----------------------------------------\n\nTITLE: Implementing Twisted Echo Client with Kivy (Python)\nDESCRIPTION: Example of a Kivy application implementing a Twisted echo client. The client can send messages to the server and display the server's response. This snippet shows how to integrate Twisted client functionality within a Kivy app.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/other-frameworks.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom kivy.app import App\nfrom kivy.uix.label import Label\nfrom kivy.uix.textinput import TextInput\nfrom kivy.uix.boxlayout import BoxLayout\n\n# A simple Client that send messages to the echo server and display responses\nfrom twisted.internet import reactor, protocol\n\nclass EchoClient(protocol.Protocol):\n    def connectionMade(self):\n        self.factory.app.on_connection(self.transport)\n\n    def dataReceived(self, data):\n        self.factory.app.print_message(data)\n\nclass EchoFactory(protocol.ClientFactory):\n    protocol = EchoClient\n    def __init__(self, app):\n        self.app = app\n\n    def clientConnectionLost(self, conn, reason):\n        self.app.print_message(\"connection lost\")\n\n    def clientConnectionFailed(self, conn, reason):\n        self.app.print_message(\"connection failed\")\n\nfrom kivy.support import install_twisted_reactor\ninstall_twisted_reactor()\n\nclass TwistedClientApp(App):\n    connection = None\n\n    def build(self):\n        root = self.setup_gui()\n        self.connect_to_server()\n        return root\n\n    def setup_gui(self):\n        self.textbox = TextInput(size_hint_y=.1, multiline=False)\n        self.label = Label(text='connecting...\\n')\n        self.textbox.bind(on_text_validate=self.send_message)\n        layout = BoxLayout(orientation='vertical')\n        layout.add_widget(self.label)\n        layout.add_widget(self.textbox)\n        return layout\n\n    def connect_to_server(self):\n        reactor.connectTCP('localhost', 8000, EchoFactory(self))\n\n    def on_connection(self, connection):\n        self.print_message(\"connected succesfully!\")\n        self.connection = connection\n\n    def send_message(self, *args):\n        msg = self.textbox.text\n        if msg and self.connection:\n            self.connection.write(str(self.textbox.text))\n            self.textbox.text = \"\"\n\n    def print_message(self, msg):\n        self.label.text += msg + \"\\n\"\n\nif __name__ == '__main__':\n    TwistedClientApp().run()\n```\n\n----------------------------------------\n\nTITLE: Clearing All Children from a Kivy Widget\nDESCRIPTION: Shows how to remove all child widgets from a parent widget using the clear_widgets() method.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/widgets.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlayout.clear_widgets()\n```\n\n----------------------------------------\n\nTITLE: Traversing the Kivy Widget Tree\nDESCRIPTION: Demonstrates how to iterate through a widget's children. Includes a warning about modifying the children list while iterating.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/widgets.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nroot = BoxLayout()\n# ... add widgets to root ...\nfor child in root.children:\n    print(child)\n\n# When modifying the tree:\nfor child in root.children[:]:\n    # manipulate the tree. For example here, remove all widgets that have a\n    # width < 100\n    if child.width < 100:\n        root.remove_widget(child)\n```\n\n----------------------------------------\n\nTITLE: Setting Color Context Instruction in Kivy Canvas\nDESCRIPTION: Shows how to set a color context instruction in the canvas.before group. This affects the color of subsequent drawing instructions.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/graphics.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith self.canvas.before:\n    Color(1, 0, .4, mode='rgb')\n```\n\n----------------------------------------\n\nTITLE: Adding Game Update Logic (Python)\nDESCRIPTION: Implements the game update loop using Kivy's Clock scheduler to animate the ball movement at 60 FPS.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials/pong.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass PongGame(Widget):\n    def update(self, dt):\n        # call ball.move and other stuff\n        pass\n\nclass PongApp(App):\n    def build(self):\n        game = PongGame()\n        Clock.schedule_interval(game.update, 1.0/60.0)\n        return game\n```\n\n----------------------------------------\n\nTITLE: Running Graphical Unit Test with Manual Setup in Kivy\nDESCRIPTION: Demonstrates how to set up and run a graphical unit test in Kivy using manual initialization. It creates a Button widget, runs the app, and performs assertions on the window and button properties.\nSOURCE: https://github.com/kivy/kivy/blob/master/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.tests.common import GraphicUnitTest\n\nclass MyTestCase(GraphicUnitTest):\n\n    def test_runtouchapp(self):\n        # non-integrated approach\n        from kivy.app import runTouchApp\n        from kivy.uix.button import Button\n\n        button = Button()\n        runTouchApp(button)\n\n        # get your Window instance safely\n        from kivy.base import EventLoop\n        EventLoop.ensure_window()\n        window = EventLoop.window\n\n        # your asserts\n        self.assertEqual(window.children[0], button)\n        self.assertEqual(\n            window.children[0].height,\n            window.height\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Compound AliasProperty in Kivy\nDESCRIPTION: This snippet demonstrates how to define a compound AliasProperty in Kivy. It creates a read-only 'cursor_pos' property that depends on multiple other properties and uses a custom getter function.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/events.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ncursor_pos = AliasProperty(_get_cursor_pos, None,\n                           bind=('cursor', 'padding', 'pos', 'size',\n                                 'focus', 'scroll_x', 'scroll_y',\n                                 'line_height', 'line_spacing'),\n                           cache=True)\n'''Current position of the cursor, in (x, y).\n\n:attr:`cursor_pos` is an :class:`~kivy.properties.AliasProperty`,\nread-only.\n'''\n```\n\n----------------------------------------\n\nTITLE: Defining Property Event Handler in Kivy\nDESCRIPTION: This snippet defines an on_pressed event handler that is called whenever the 'pressed' property value changes. It prints the new position of the press.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/events.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef on_pressed(self, instance, pos):\n    print('pressed at {pos}'.format(pos=pos))\n```\n\n----------------------------------------\n\nTITLE: Scatter Touch Event Coordinate Transformation in Kivy\nDESCRIPTION: Implementation showing how to handle touch coordinates with matrix transformations in a Scatter widget, including pushing/popping transformations.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/inputs.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef on_touch_down(self, touch):\n    touch.push()\n    touch.apply_transform_2d(self.to_local)\n    ret = super(..., self).on_touch_down(touch)\n    touch.pop()\n    return ret\n```\n\n----------------------------------------\n\nTITLE: Writing GL Unit Test for Ellipse Rendering in Kivy\nDESCRIPTION: Illustrates how to create a GL unit test in Kivy for rendering an Ellipse. It sets up a root widget with graphics instructions and demonstrates different ways to capture the rendered output.\nSOURCE: https://github.com/kivy/kivy/blob/master/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.tests.common import GraphicUnitTest\n\nclass VertexInstructionTestCase(GraphicUnitTest):\n\n    def test_ellipse(self):\n        from kivy.uix.widget import Widget\n        from kivy.graphics import Ellipse, Color\n        r = self.render\n\n        # create a root widget\n        wid = Widget()\n\n        # put some graphics instruction on it\n        with wid.canvas:\n            Color(1, 1, 1)\n            self.e = Ellipse(pos=(100, 100), size=(200, 100))\n\n        # render, and capture it directly\n        r(wid)\n\n        # as alternative, you can capture in 2 frames:\n        r(wid, 2)\n\n        # or in 10 frames\n        r(wid, 10)\n```\n\n----------------------------------------\n\nTITLE: Handling Touch Move with Angle Profile in Kivy\nDESCRIPTION: Example demonstrating how to check for and use the angle profile in touch events while handling basic position information.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/inputs.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef on_touch_move(self, touch):\n    print('The touch is at position', touch.pos)\n    if 'angle' in touch.profile:\n        print('The touch angle is', touch.a)\n```\n\n----------------------------------------\n\nTITLE: Adding Background Color to Layout in Python\nDESCRIPTION: Shows how to add a green background color to a layout using Python with proper size and position binding.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/widgets.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith layout_instance.canvas.before:\n    Color(0, 1, 0, 1) # green; colors range from 0-1 instead of 0-255\n    self.rect = Rectangle(size=layout_instance.size,\n                           pos=layout_instance.pos)\n\ndef update_rect(instance, value):\n    instance.rect.pos = instance.pos\n    instance.rect.size = instance.size\n\n# listen to size and position changes\nlayout_instance.bind(pos=update_rect, size=update_rect)\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller Logic in Python for Kivy\nDESCRIPTION: Shows the Python implementation of a Controller class for a Kivy application. It defines properties and methods that will be used in conjunction with a Kivy language file.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.app import App\nfrom kivy.uix.floatlayout import FloatLayout\nfrom kivy.properties import ObjectProperty, StringProperty\n\n\nclass Controller(FloatLayout):\n    '''Create a controller that receives a custom widget from the kv lang file.\n\n    Add an action to be called from the kv lang file.\n    '''\n    label_wid = ObjectProperty(None)\n    info = StringProperty('')\n\n    def do_action(self):\n        self.label_wid.text = 'My label after button press'\n        self.info = 'New info text'\n\n\nclass ControllerApp(App):\n    def build(self):\n        return Controller(info='Hello world')\n\n\nif __name__ == '__main__':\n    ControllerApp().run()\n```\n\n----------------------------------------\n\nTITLE: Listing Topics Covered in Kivy Crash Course using reStructuredText\nDESCRIPTION: This code snippet uses reStructuredText to create a bulleted list of topics covered in the Kivy Crash Course. It includes various Kivy widgets, Android app building, event handling, and advanced UI concepts.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials/crashcourse.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nTopics covered by the Crash Course include:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    * Use of the basic Kivy widgets such as the Label, Button, Scatter and\n      TextInput\n    * Building an app for android with python-for-android's `old\n      toolchain <https://github.com/kivy/python-for-android/tree/old_toolchain>`_\n    * Binding functions to events\n    * Using changes in variables on the go\n    * Smart user interface (`Kv language\n      <https://kivy.org/docs/guide/lang.html>`_)\n    * Properties\n    * Canvas and drawing\n    * Label with scrolling\n    * Positioning and layouts\n    * Animation and Clock\n    * Accessing android API (`pyjnius <https://github.com/kivy/pyjnius>`_,\n      `plyer <https://github.com/kivy/plyer>`_)\n    * Settings panel (and building your own options)\n    * ScreenManager\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Classes in Kivy Language\nDESCRIPTION: Shows how to create a dynamic class in Kivy language to avoid repeating the same properties for multiple widgets. It defines a custom button class with preset properties.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_13\n\nLANGUAGE: kv\nCODE:\n```\n<MyBigButton@Button>:\n    text_size: self.size\n    font_size: '25sp'\n    markup: True\n\n<MyWidget>:\n    MyBigButton:\n        text: \"Hello world, watch this text wrap inside the button\"\n    MyBigButton:\n        text: \"Even absolute is relative to itself\"\n    MyBigButton:\n        text: \"repeating the same thing over and over in a comp = fail\"\n    MyBigButton:\n```\n\n----------------------------------------\n\nTITLE: Handling Triple Tap Events in Kivy\nDESCRIPTION: Example showing how to detect and handle triple tap events, including checking timing and distance information.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/inputs.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef on_touch_down(self, touch):\n    if touch.is_triple_tap:\n        print('Touch is a triple tap !')\n        print(' - interval is', touch.triple_tap_time)\n        print(' - distance between previous is', touch.triple_tap_distance)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Python Before Kivy Import\nDESCRIPTION: Demonstrates how to set Kivy environment variables programmatically before importing the Kivy library.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/environment.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nos.environ['KIVY_TEXT'] = 'pil'\nimport kivy\n```\n\n----------------------------------------\n\nTITLE: Installing Python on Ubuntu\nDESCRIPTION: Commands to update package list and install Python3 and pip on Ubuntu Linux\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-linux.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\n\nsudo apt-get install -y \\\n    python3-pip \\\n    python3\n```\n\n----------------------------------------\n\nTITLE: Bundling Data Files in Kivy Application Package\nDESCRIPTION: Python code to include and locate bundled data files in a packaged Kivy application.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-windows.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys\nfrom kivy.resources import resource_add_path, resource_find\n\nif __name__ == '__main__':\n    if hasattr(sys, '_MEIPASS'):\n        resource_add_path(os.path.join(sys._MEIPASS))\n    TouchtracerApp().run()\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenGL Context before using graphics in Kivy\nDESCRIPTION: Shows two methods to ensure an OpenGL context is available before using graphics-related code in Kivy. This is crucial to prevent 'Segmentation Fault' errors when loading images, atlases, or using graphics instructions without a Window.\nSOURCE: https://github.com/kivy/kivy/blob/master/FAQ.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.base import EventLoop\nEventLoop.ensure_window()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.core.window import Window\n```\n\n----------------------------------------\n\nTITLE: Configuring Kivy Arguments Through Environment Variable\nDESCRIPTION: Shows how to disable Kivy's command line argument parsing to use custom arguments in your application.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/environment.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nos.environ[\"KIVY_NO_ARGS\"] = \"1\"\nimport kivy\n```\n\n----------------------------------------\n\nTITLE: Installing Python and pip on Raspberry Pi OS Bullseye/Bookworm\nDESCRIPTION: Commands to install Python and pip using apt package manager on Raspberry Pi OS Bullseye/Bookworm.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-rpi.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install python3 python3-pip\n```\n\n----------------------------------------\n\nTITLE: Clearing and Redrawing Canvas in Kivy Widget\nDESCRIPTION: Demonstrates how to clear the canvas and redraw instructions when widget properties change. This approach is less efficient than updating existing instructions.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/graphics.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyWidget(Widget):\n    def __init__(self, **kwargs):\n        super(MyWidget, self).__init__(**kwargs)\n        self.draw_my_stuff()\n\n        self.bind(pos=self.draw_my_stuff)\n        self.bind(size=self.draw_my_stuff)\n\n    def draw_my_stuff(self, *args):\n        self.canvas.clear()\n\n        with self.canvas:\n            self.rect = Rectangle(pos=self.pos, size=self.size)\n```\n\n----------------------------------------\n\nTITLE: Loading Kv File Manually in Kivy\nDESCRIPTION: Shows how to manually load a Kv file or string using the Builder class in Kivy.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nBuilder.load_file('path/to/file.kv')\n```\n\nLANGUAGE: python\nCODE:\n```\nBuilder.load_string(kv_string)\n```\n\n----------------------------------------\n\nTITLE: Installing Twisted Reactor in Kivy (Python)\nDESCRIPTION: Demonstrates how to install a Twisted reactor that runs inside the Kivy event loop using the kivy.support.install_twisted_reactor function. It notes that arguments passed to this function are forwarded to the threadedselect reactor's interleave function.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/other-frameworks.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom kivy.support import install_twisted_reactor\n\ninstall_twisted_reactor()\n```\n\n----------------------------------------\n\nTITLE: Installing Python and pip on Arch Linux ARM\nDESCRIPTION: Commands to install Python, setuptools, and pip on Arch Linux ARM using pacman and a bootstrap script.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-rpi.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -Syu\nsudo pacman -S python-setuptools\nwget https://bootstrap.pypa.io/get-pip.py\nsudo python get-pip.py\n```\n\n----------------------------------------\n\nTITLE: Building Kivy Application Package with PyInstaller\nDESCRIPTION: Command to build the Kivy application package using the modified spec file.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-windows.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython -m PyInstaller touchtracer.spec\n```\n\n----------------------------------------\n\nTITLE: Vibration Control Using Plyer\nDESCRIPTION: Simple example of using Plyer to trigger device vibration in a platform-independent way.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/android.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom plyer import vibrator\nvibrator.vibrate(10)  # vibrate for 10 seconds\n```\n\n----------------------------------------\n\nTITLE: Kivy Joystick Event Binding Example\nDESCRIPTION: Example showing how to bind and handle joystick axis events in a Kivy application using Window events.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/inputs.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nWindow.bind(on_joy_axis=self.on_joy_axis)\n\ndef on_joy_axis(self, win, stickid, axisid, value):\n    print(win, stickid, axisid, value)\n```\n\n----------------------------------------\n\nTITLE: Installing Python via MacPorts on macOS\nDESCRIPTION: Commands to install Python 3.8 and set it as default, along with pip installation using MacPorts package manager.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-osx.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nport install python38\nport select --set python python38\n\nport install py38-pip\nport select --set pip py38-pip\n```\n\n----------------------------------------\n\nTITLE: Building Kivy for iOS using kivy-ios Toolchain\nDESCRIPTION: This code snippet demonstrates how to install the kivy-ios toolchain and build Kivy for iOS using the toolchain command.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-ios.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install kivy-ios\n$ toolchain build kivy\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Touch Move Profile Check in Kivy\nDESCRIPTION: Example showing how to check available motion event profiles in a touch_move handler and print the touch position.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/inputs.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef on_touch_move(self, touch):\n    print(touch.profile)\n    return super(..., self).on_touch_move(touch)\n```\n\n----------------------------------------\n\nTITLE: Device Vibration Using Pyjnius\nDESCRIPTION: Example demonstrating direct Java API access through Pyjnius to control device vibration by accessing the Android system services.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/android.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# 'autoclass' takes a java class and gives it a Python wrapper\nfrom jnius import autoclass\n\n# Context is a normal java class in the Android API\nContext = autoclass('android.content.Context')\n\n# PythonActivity is provided by the Kivy bootstrap app in python-for-android\nPythonActivity = autoclass('org.renpy.android.PythonActivity')\n\n# The PythonActivity stores a reference to the currently running activity\n# We need this to access the vibrator service\nactivity = PythonActivity.mActivity\n\n# This is almost identical to the java code for the vibrator\nvibrator = activity.getSystemService(Context.VIBRATOR_SERVICE)\n\nvibrator.vibrate(10000)  # The value is in milliseconds - this is 10s\n```\n\n----------------------------------------\n\nTITLE: Installing Python via Homebrew on macOS\nDESCRIPTION: Command to install Python 3 using the Homebrew package manager on macOS.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-osx.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install python3\n```\n\n----------------------------------------\n\nTITLE: Configuring Kivy for Official Raspberry Pi Touch Display\nDESCRIPTION: Configuration snippet to add to the Kivy config file for using the official Raspberry Pi touch display as an input source.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-rpi.rst#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nmouse = mouse\nmtdev_%(name)s = probesysfs,provider=mtdev\nhid_%(name)s = probesysfs,provider=hidinput\n```\n\n----------------------------------------\n\nTITLE: Reusing Styles in Multiple Widgets with Kivy\nDESCRIPTION: Demonstrates how to reuse styles across multiple widgets in Kivy by declaring multiple classes in a single rule. This approach reduces code duplication in the Kivy language file.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_14\n\nLANGUAGE: kv\nCODE:\n```\n<MyFirstWidget,MySecondWidget>:\n    Button:\n        on_press: root.text(txt_inpt.text)\n    TextInput:\n        id: txt_inpt\n```\n\n----------------------------------------\n\nTITLE: Running Graphical Unit Test with Automatic Setup in Kivy\nDESCRIPTION: Shows how to use GraphicUnitTest.render() for automatic setup of a Kivy graphical unit test. It creates a Button, simulates a touch event, and tests the button's response.\nSOURCE: https://github.com/kivy/kivy/blob/master/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.tests.common import GraphicUnitTest, UnitTestTouch\n\nclass MyTestCase(GraphicUnitTest):\n\n    def test_render(self):\n        from kivy.uix.button import Button\n\n        # with GraphicUnitTest.render() you basically do this:\n        # runTouchApp(Button()) + some setup before\n        button = Button()\n        self.render(button)\n\n        # get your Window instance safely\n        from kivy.base import EventLoop\n        EventLoop.ensure_window()\n        window = EventLoop.window\n\n        touch = UnitTestTouch(\n            *[s / 2.0 for s in window.size]\n        )\n\n        # bind something to test the touch with\n        button.bind(\n            on_release=lambda instance: setattr(\n                instance, 'test_released', True\n            )\n        )\n\n        # then let's touch the Window's center\n        touch.touch_down()\n        touch.touch_up()\n        self.assertTrue(button.test_released)\n\n\nif __name__ == '__main__':\n    import unittest\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Fedora\nDESCRIPTION: Commands to install EPEL repository and build dependencies for Kivy source installation on Fedora\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-linux.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install epel-release\n\nyum -y install autoconf automake cmake gcc gcc-c++ git make pkgconfig \\\n        ninja-build alsa-lib-devel pulseaudio-libs-devel \\\n        libX11-devel libXext-devel libXrandr-devel libXcursor-devel libXfixes-devel \\\n        libXi-devel libXScrnSaver-devel dbus-devel ibus-devel fcitx-devel \\\n        systemd-devel mesa-libGL-devel libxkbcommon-devel mesa-libGLES-devel \\\n        mesa-libEGL-devel wayland-devel wayland-protocols-devel \\\n        libdrm-devel mesa-libgbm-devel libsamplerate-devel\n\nsudo dnf install -y xclip\n```\n\n----------------------------------------\n\nTITLE: Kivy App Directory Structure\nDESCRIPTION: Required directory structure for Kivy applications on Android external storage\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-android.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/sdcard/kivy/<yourapplication>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pong Game Interface (Kivy)\nDESCRIPTION: Defines the UI layout for the Pong game using Kivy's KV language, including the center line and score labels.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials/pong.rst#2025-04-21_snippet_1\n\nLANGUAGE: kivy\nCODE:\n```\n#:kivy 1.0.9\n\n<PongGame>:\n    canvas:\n        Rectangle:\n            pos: self.center_x - 5, 0\n            size: 10, self.height\n\n    Label:\n        font_size: 70\n        center_x: root.width / 4\n        top: root.top - 50\n        text: \"0\"\n\n    Label:\n        font_size: 70\n        center_x: root.width * 3 / 4\n        top: root.top - 50\n        text: \"0\"\n```\n\n----------------------------------------\n\nTITLE: Setting PIL Text Rendering in Kivy\nDESCRIPTION: Example showing how to restrict text rendering to PIL implementation via environment variable before running the application.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/environment.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ KIVY_TEXT=pil python main.py\n```\n\n----------------------------------------\n\nTITLE: Installing RPM Fusion Repository on Fedora\nDESCRIPTION: Command to install the RPM Fusion free repository on Fedora Linux\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-linux.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install -y https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm\n```\n\n----------------------------------------\n\nTITLE: Updating Xcode Project with New Libraries\nDESCRIPTION: This command updates the Xcode project with newly built libraries and frameworks necessary for the compiled recipes.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-ios.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ toolchain update touchtracer-ios\n```\n\n----------------------------------------\n\nTITLE: Setting KIVY_HOME Environment Variable in Python\nDESCRIPTION: Shows how to change the KIVY_HOME environment variable in Python to use a custom configuration folder.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/config.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nos.environ['KIVY_HOME'] = <folder>\n```\n\n----------------------------------------\n\nTITLE: Locating Kivy Configuration File Path\nDESCRIPTION: Shows the default path for the Kivy configuration file (config.ini) using the KIVY_HOME environment variable.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/config.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<KIVY_HOME>/config.ini\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling Kivy Wheels for Raspberry Pi OS\nDESCRIPTION: Commands to generate cross-compiled Kivy wheels for Raspberry Pi OS Bullseye and Bookworm using Docker images.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-rpi.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsource .ci/ubuntu_ci.sh\n\n# Generate wheels for Raspberry Pi OS Bullseye (32 bit, Python 3.9)\ngenerate_rpi_wheels balenalib/raspberrypi3-debian-python:3.9-bullseye\n\n# Generate wheels for Raspberry Pi OS Bookworm (32 bit, Python 3.11)\ngenerate_rpi_wheels balenalib/raspberrypi3-debian-python:3.11-bookworm\n```\n\n----------------------------------------\n\nTITLE: Installing Kivy and PyInstaller\nDESCRIPTION: Commands for installing Cython, Kivy, and PyInstaller using pip\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-osx.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install |cython_install|\\n$ pip install -U kivy\\n$ pip install -U pyinstaller\n```\n\n----------------------------------------\n\nTITLE: Creating Single File Kivy Application with PyInstaller\nDESCRIPTION: Command and spec file modification for creating a single file executable for a Kivy application.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-windows.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython -m PyInstaller --onefile --name touchtracer examples-path\\demo\\touchtracer\\main.py\n```\n\nLANGUAGE: python\nCODE:\n```\nexe = EXE(pyz, Tree('examples-path\\\\demo\\\\touchtracer\\\\'),\n     a.scripts,\n     a.binaries,\n     a.zipfiles,\n     a.datas,\n     *[Tree(p) for p in (sdl3.dep_bins + glew.dep_bins)],\n     upx=True,\n     name='touchtracer')\n```\n\n----------------------------------------\n\nTITLE: Configuring Kivy Debug Logging\nDESCRIPTION: Configuration snippet showing how to enable debug level logging in Kivy by modifying the config.ini file in the user directory\nSOURCE: https://github.com/kivy/kivy/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n[kivy]\nlog_level = debug\n```\n\n----------------------------------------\n\nTITLE: Enabling Hardware Acceleration for Kivy on Raspberry Pi\nDESCRIPTION: Command to add the current user to the render group, enabling hardware acceleration for Kivy applications.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-rpi.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo adduser \"$USER\" render\n```\n\n----------------------------------------\n\nTITLE: Migrating Video Player State Control in Python\nDESCRIPTION: Example demonstrating the migration from the deprecated .play property to the new state property for video control in Kivy 3.x\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/migration.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvideo = Video(source='video.mp4')\n\n# Play the video\nvideo.play = True\n\n# Stop the video\nvideo.play = False\n```\n\nLANGUAGE: python\nCODE:\n```\nvideo = Video(source='video.mp4')\n\n# Play the video\nvideo.state = 'play'\n\n# Stop the video\nvideo.state = 'stop'\n\n# Pause the video\nvideo.state = 'pause'\n```\n\n----------------------------------------\n\nTITLE: Customizing PyInstaller Hooks for Kivy\nDESCRIPTION: Python code to use custom PyInstaller hooks for Kivy, allowing fine-grained control over included modules and dependencies.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-windows.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.tools.packaging.pyinstaller_hooks import get_deps_minimal, get_deps_all, hookspath, runtime_hooks\n\na = Analysis(['examples-path\\\\demo\\\\touchtracer\\\\main.py'],\n             ...\n             hookspath=hookspath(),\n             runtime_hooks=runtime_hooks(),\n             ...\n             **get_deps_all())\n```\n\n----------------------------------------\n\nTITLE: Initializing Buildozer Project\nDESCRIPTION: Command to create initial buildozer.spec configuration file for Android app packaging\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-android.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbuildozer init\n```\n\n----------------------------------------\n\nTITLE: Running Kivy Demo on Windows\nDESCRIPTION: Command to run the Kivy showcase demo application on Windows after installation, which helps verify that Kivy is working properly.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npython kivy_venv\\share\\kivy-examples\\demo\\showcase\\main.py\n```\n\n----------------------------------------\n\nTITLE: Setting Kivy Configuration Through Environment Variables\nDESCRIPTION: Example showing how to set Kivy configuration options using environment variables with the KCFG prefix.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/environment.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nos.environ[\"KCFG_KIVY_LOG_LEVEL\"] = \"warning\"\nimport kivy\n```\n\n----------------------------------------\n\nTITLE: Installing Kivy from Source\nDESCRIPTION: Installs Kivy from source code when pre-compiled wheels are not available or not working.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install \"kivy[base]\" kivy_examples --no-binary kivy\n```\n\n----------------------------------------\n\nTITLE: Modifying PyInstaller Spec File for Kivy Dependencies\nDESCRIPTION: Python code to add Kivy dependencies to the PyInstaller spec file, including SDL2 and GLEW.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-windows.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy_deps import sdl3, glew\n\ncoll = COLLECT(exe, Tree('examples-path\\\\demo\\\\touchtracer\\\\'),\n               a.binaries,\n               a.zipfiles,\n               a.datas,\n               *[Tree(p) for p in (sdl3.dep_bins + glew.dep_bins)],\n               strip=False,\n               upx=True,\n               name='touchtracer')\n```\n\n----------------------------------------\n\nTITLE: Using Make to Recompile Kivy\nDESCRIPTION: Alternative command using make to recompile Kivy after changes, which is available in bash or Linux environments.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-release Kivy Using Pip\nDESCRIPTION: Commands to install pre-release or development versions of Kivy using pip. The first command installs the latest pre-release from PyPi, while the second approach installs the cutting-edge nightly builds from Kivy's download server.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install --pre \"kivy[base]\" kivy_examples\n```\n\n----------------------------------------\n\nTITLE: PyInstaller DLL Dependencies with Tree\nDESCRIPTION: Example showing how to include DLL dependencies for SDL3, GLEW, and GStreamer using PyInstaller's Tree class with wheel-based installation.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-windows.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n*[Tree(p) for p in (sdl3.dep_bins + glew.dep_bins + gstreamer.dep_bins)]\n```\n\n----------------------------------------\n\nTITLE: Installing Kivy from PyPI\nDESCRIPTION: Installs Kivy and example applications using pip with pre-compiled wheels.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install \"kivy[base]\" kivy_examples\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx with apt-get for Kivy Documentation\nDESCRIPTION: Uses apt-get to install the Python Sphinx package on Debian-based systems.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt-get install python-sphinx\n```\n\n----------------------------------------\n\nTITLE: Creating DMG Package\nDESCRIPTION: Commands for creating a DMG package from the built application\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-osx.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pushd dist\\n$ hdiutil create ./Touchtracer.dmg -srcfolder touchtracer.app -ov\\n$ popd\n```\n\n----------------------------------------\n\nTITLE: Accessing Minimal Kivy Dependencies\nDESCRIPTION: Example showing how to get minimal Kivy dependencies by excluding audio and video providers using get_deps_minimal function.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-windows.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nget_deps_minimal(video=None, audio=None)\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment for Kivy\nDESCRIPTION: Creates a new virtual environment named kivy_venv to isolate the Kivy installation and its dependencies.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m venv kivy_venv\n```\n\n----------------------------------------\n\nTITLE: Changing Default Screen for Kivy on Raspberry Pi\nDESCRIPTION: Example of setting an environment variable to change the display used by Kivy, forcing it to use HDMI.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-rpi.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nKIVY_BCM_DISPMANX_ID=2 python3 main.py\n```\n\n----------------------------------------\n\nTITLE: Defining PongBall Appearance (Kivy)\nDESCRIPTION: Specifies the visual appearance of the ball using Kivy's KV language, rendering it as a white circle.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials/pong.rst#2025-04-21_snippet_3\n\nLANGUAGE: kivy\nCODE:\n```\n<PongBall>:\n    size: 50, 50\n    canvas:\n        Ellipse:\n            pos: self.pos\n            size: self.size\n```\n\n----------------------------------------\n\nTITLE: Building Additional Libraries for iOS Project\nDESCRIPTION: This snippet shows how to build additional libraries, such as numpy, for an iOS project using the kivy-ios toolchain.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-ios.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ toolchain build numpy\n```\n\n----------------------------------------\n\nTITLE: Accessing Android Logs via ADB\nDESCRIPTION: Commands to view application logs, stdout and stderr through Android's logcat system using ADB or Buildozer.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/android.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nadb logcat\n```\n\nLANGUAGE: shell\nCODE:\n```\nbuildozer android logcat\n```\n\n----------------------------------------\n\nTITLE: Running ImageLoader Tests in Kivy\nDESCRIPTION: Commands to run the test_imageloader.py script to verify image loading functionality. The first command shows all output for detailed debugging, while the second filters results to only show summary reports.\nSOURCE: https://github.com/kivy/kivy/blob/master/kivy/tools/image-testsuite/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd kivy/tests\npython test_imageloader.py | less\n```\n\nLANGUAGE: bash\nCODE:\n```\npython test_imageloader.py | grep REPORT | less\n```\n\n----------------------------------------\n\nTITLE: Updating Audio Module Import in Python\nDESCRIPTION: Example showing how to update the import statement for the renamed audio module in Kivy 3.x\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/migration.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.core.audio import SoundLoader\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy.core.audio_output import SoundLoader\n```\n\n----------------------------------------\n\nTITLE: Creating PyInstaller Spec File for Kivy Application\nDESCRIPTION: Command to create a PyInstaller spec file for a Kivy application, with options for naming and adding an icon.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-windows.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m PyInstaller --name touchtracer --icon examples-path\\demo\\touchtracer\\icon.ico examples-path\\demo\\touchtracer\\main.py\n```\n\n----------------------------------------\n\nTITLE: Installing PyInstaller for Kivy Packaging on Windows\nDESCRIPTION: Command to install the required version of PyInstaller for packaging Kivy applications on Windows.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-windows.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --upgrade pyinstaller\n```\n\n----------------------------------------\n\nTITLE: Installing GIMP Plugin for Kivy Test Suite Generation\nDESCRIPTION: Instructions for installing the GIMP plugin to generate comprehensive image test suites. The plugin needs to be copied to the user's GIMP plugins directory.\nSOURCE: https://github.com/kivy/kivy/blob/master/kivy/tools/image-testsuite/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp gimp28-testsuite.py ~/.gimp-2.8/plug-ins\n```\n\n----------------------------------------\n\nTITLE: Setting KIVY_HOME in Windows Command Prompt\nDESCRIPTION: Command to set the KIVY_HOME environment variable in Windows command prompt for a custom configuration folder.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/config.rst#2025-04-21_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nset KIVY_HOME=<folder>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for iOS Packaging with Homebrew\nDESCRIPTION: This snippet shows how to install the necessary dependencies for iOS packaging using Homebrew and pip. It includes autoconf, automake, libtool, pkg-config, and Cython.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-ios.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install autoconf automake libtool pkg-config\n$ brew link libtool\n$ pip install |cython_install|\n```\n\n----------------------------------------\n\nTITLE: Installing Kivy with Conda\nDESCRIPTION: Command to install Kivy using the Conda package manager from the conda-forge channel, which is an alternative to pip installation for Anaconda users.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nconda install kivy -c conda-forge\n```\n\n----------------------------------------\n\nTITLE: Providing Links to Kivy Crash Course Resources using reStructuredText\nDESCRIPTION: This code snippet uses reStructuredText to create a bulleted list of links to Kivy Crash Course resources, including YouTube videos, articles, and source code on GitHub.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials/crashcourse.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\nLinks:\n~~~~~~\n\n    * `Videos <https://www.youtube.com/watch?v=F7UKmK9eQLY&\n      list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq>`_\n    * `Articles <http://inclem.net/pages/kivy-crash-course>`_\n    * `Code <https://github.com/inclement/kivycrashcourse>`_\n```\n\n----------------------------------------\n\nTITLE: Installing Kivy iOS Dependencies with Homebrew and pip\nDESCRIPTION: This snippet shows the commands to install required dependencies for Kivy iOS development using Homebrew package manager and pip. It includes autoconf, automake, libtool, pkg-config, and Cython.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-ios-prerequisites.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install autoconf automake libtool pkg-config\n$ brew link libtool\n$ pip install |cython_install|\n```\n\n----------------------------------------\n\nTITLE: Configuring Python File Associations in Windows\nDESCRIPTION: Two methods are described for running Python files: the double-click method which associates .py files with Python directly, and the send-to method which creates a shortcut in the Windows SendTo menu. Both approaches allow easy execution of Python scripts.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-windows.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nshell:sendto\n```\n\n----------------------------------------\n\nTITLE: Complete PyInstaller Spec File\nDESCRIPTION: Full example of a PyInstaller spec file for packaging a Kivy application\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-osx.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# -*- mode: python -*-\\n\\nblock_cipher = None\\nfrom kivy.tools.packaging.pyinstaller_hooks import get_deps_all, hookspath, runtime_hooks\\n\\na = Analysis(['/path/to/yout/folder/containing/examples/demo/touchtracer/main.py'],\\n             pathex=['/path/to/yout/folder/containing/testpackaging'],\\n             binaries=None,\\n             win_no_prefer_redirects=False,\\n             win_private_assemblies=False,\\n             cipher=block_cipher,\\n             hookspath=hookspath(),\\n             runtime_hooks=runtime_hooks(),\\n             **get_deps_all())\\npyz = PYZ(a.pure, a.zipped_data,\\n             cipher=block_cipher)\\nexe = EXE(pyz,\\n          a.scripts,\\n          exclude_binaries=True,\\n          name='touchtracer',\\n          debug=False,\\n          strip=False,\\n          upx=True,\\n          console=False )\\ncoll = COLLECT(exe, Tree('../kivy/examples/demo/touchtracer/'),\\n               Tree('/Library/Frameworks/SDL3_ttf.framework/Versions/A/Frameworks/FreeType.framework'),\\n               a.binaries,\\n               a.zipfiles,\\n               a.datas,\\n               strip=False,\\n               upx=True,\\n               name='touchtracer')\\napp = BUNDLE(coll,\\n             name='touchtracer.app',\\n             icon=None,\\n         bundle_identifier=None)\n```\n\n----------------------------------------\n\nTITLE: Specifying Frozen Sphinx Requirements for Kivy Documentation\nDESCRIPTION: This snippet lists the exact versions of Sphinx and related packages required for building Kivy's documentation. It includes Sphinx itself, various Sphinx extensions, and related tools like Pygments and docutils.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/doc-requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n# Frozen Sphinx requirements for easier pip installation\n```\n\n----------------------------------------\n\nTITLE: Activating Kivy Virtual Environment on macOS\nDESCRIPTION: Commands to activate the Kivy virtual environment and set up the required environment variables.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-osx.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npushd /Applications/Kivy.app/Contents/Resources/venv/bin\nsource activate\nsource kivy_activate\npopd\n```\n\n----------------------------------------\n\nTITLE: Installing Kivy Dependencies on Raspberry Pi OS Bullseye/Bookworm\nDESCRIPTION: Commands to install required dependencies for building Kivy from source on Raspberry Pi OS Bullseye/Bookworm.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-rpi.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\napt-get -y install build-essential git make autoconf automake libtool \\\n      pkg-config cmake ninja-build libasound2-dev libpulse-dev libaudio-dev \\\n      libjack-dev libsndio-dev libsamplerate0-dev libx11-dev libxext-dev \\\n      libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev \\\n      libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \\\n      libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev\n\napt-get install xorg wget libxrender-dev lsb-release libraspberrypi-dev raspberrypi-kernel-headers\n```\n\n----------------------------------------\n\nTITLE: PyInstaller Command for Packaging\nDESCRIPTION: Command to package a Kivy application using PyInstaller with specific exclusions\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-osx.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pyinstaller -y --clean --windowed --name touchtracer \\n  --exclude-module _tkinter \\n  --exclude-module Tkinter \\n  --exclude-module enchant \\n  --exclude-module twisted \\n  /usr/local/share/kivy-examples/demo/touchtracer/main.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Touchtracer Application Settings in Kivy\nDESCRIPTION: This configuration snippet defines the basic settings for a Touchtracer application built with the Kivy framework. It sets the application title, specifies the author as the Kivy team, and sets the screen orientation to landscape mode.\nSOURCE: https://github.com/kivy/kivy/blob/master/examples/demo/touchtracer/android.txt#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntitle=Touchtracer\nauthor=Kivy team\norientation=landscape\n```\n\n----------------------------------------\n\nTITLE: Installing Command Line Tools on macOS\nDESCRIPTION: Command to install Xcode Command Line Tools required for building Kivy from source.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-osx.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Environment for Kivy Installation\nDESCRIPTION: Updates pip and installation dependencies to their latest versions. This is a prerequisite step before installing Kivy.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install --upgrade pip setuptools virtualenv\n```\n\n----------------------------------------\n\nTITLE: Installing Kivy as an Editable Package\nDESCRIPTION: Commands to install Kivy as an editable package for development. This approach allows you to modify the Kivy source code and have those changes immediately available in your environment.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd kivy\npython -m pip install -e \".[dev,full]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kivy Showcase Application Settings in INI Format\nDESCRIPTION: This INI-style configuration snippet sets up basic parameters for a Kivy showcase application. It defines the project title, author, and screen orientation.\nSOURCE: https://github.com/kivy/kivy/blob/master/examples/demo/showcase/android.txt#2025-04-21_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\ntitle=Showcase\nauthor=Kivy team\norientation=landscape\n```\n\n----------------------------------------\n\nTITLE: Running Kivy Demo on Linux and macOS\nDESCRIPTION: Command to run the Kivy showcase demo application on Linux and macOS after installation.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npython kivy_venv/share/kivy-examples/demo/showcase/main.py\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Android Debug APK\nDESCRIPTION: Command to build, deploy and run debug APK on connected Android device using Buildozer\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-android.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbuildozer android debug deploy run\n```\n\n----------------------------------------\n\nTITLE: Cloning Kivy Repository for Development\nDESCRIPTION: Command to clone the Kivy repository from GitHub for development purposes. This is the first step for contributing to Kivy or testing specific fixes.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/kivy/kivy.git\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Configuration in INI Format for Kivy\nDESCRIPTION: Basic keyboard configuration settings specified in INI format. Defines the keyboard title, author, and orientation parameters for a Kivy application's keyboard implementation.\nSOURCE: https://github.com/kivy/kivy/blob/master/examples/keyboard/android.txt#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntitle=Keyboard\nauthor=ZenCODE\norientation=landscape\n```\n\n----------------------------------------\n\nTITLE: Running Kivy Test Suite with Make\nDESCRIPTION: Alternative command using make to run the Kivy test suite in bash or Linux environments.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Python Docstring Example\nDESCRIPTION: Example showing proper docstring formatting with version annotations and warning notes.\nSOURCE: https://github.com/kivy/kivy/blob/master/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef my_new_feature(self, arg):\n    \"\"\"\n    New feature is awesome\n\n    .. versionadded:: 1.1.4\n\n    .. note:: This new feature will likely blow your mind\n\n    .. warning:: Please take a seat before trying this feature\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Packaging Kivy Video Application with GStreamer\nDESCRIPTION: PyInstaller spec file modification to include GStreamer dependencies for a Kivy video application.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-windows.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom kivy_deps import sdl3, glew, gstreamer\n\ncoll = COLLECT(exe, Tree('examples-path\\\\widgets'),\n               a.binaries,\n               a.zipfiles,\n               a.datas,\n               *[Tree(p) for p in (sdl3.dep_bins + glew.dep_bins + gstreamer.dep_bins)],\n               strip=False,\n               upx=True,\n               name='gstvideo')\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Kivy Application Properties in INI Format\nDESCRIPTION: This configuration snippet defines three fundamental properties for a Kivy application: the title that will appear in the window or application header, the author of the application, and the screen orientation set to landscape mode.\nSOURCE: https://github.com/kivy/kivy/blob/master/examples/settings/android.txt#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntitle=Settings\nauthor=Kivy team\norientation=landscape\n```\n\n----------------------------------------\n\nTITLE: Installing Python Wheel Package with Pip\nDESCRIPTION: Command to install a specific wheel file using pip package manager. The example shows installation of a Kivy wheel file for Python 2.7 on Windows 64-bit.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install C:\\Kivy-1.9.1.dev-cp27-none-win_amd64.whl\n```\n\n----------------------------------------\n\nTITLE: Installing Kivy Build Dependencies on macOS\nDESCRIPTION: Command to install required dependencies (pkg-config, cmake, ninja) for building Kivy from source using Homebrew.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-osx.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pkg-config cmake ninja\n```\n\n----------------------------------------\n\nTITLE: Installing Kivy Dependencies on Raspberry Pi OS Lite\nDESCRIPTION: Installs required system dependencies for Kivy on headless Raspberry Pi systems.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\napt-get install libgl1-mesa-glx libgles2-mesa libegl1-mesa libmtdev1\n```\n\n----------------------------------------\n\nTITLE: Configuring Kivy Project Settings in INI Format\nDESCRIPTION: This snippet defines key project settings for a Kivy application. It sets the main title, specifies the author as 'seesaw', and sets the orientation to portrait mode.\nSOURCE: https://github.com/kivy/kivy/blob/master/examples/widgets/sequenced_images/android.txt#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntitle=main\nauthor=seesaw\norientation=portrait\n```\n\n----------------------------------------\n\nTITLE: Building Kivy Dependencies Script Setup\nDESCRIPTION: Downloads and prepares the build script for compiling Kivy dependencies from source.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir kivy-deps-build && cd kivy-deps-build\ncurl -O https://raw.githubusercontent.com/kivy/kivy/master/tools/build_macos_dependencies.sh -o build_kivy_deps.sh\nchmod +x build_kivy_deps.sh\n./build_kivy_deps.sh\n```\n\n----------------------------------------\n\nTITLE: Setting KIVY_HOME in Linux and macOS Terminal\nDESCRIPTION: Command to set the KIVY_HOME environment variable in Linux and macOS terminal for a custom configuration folder.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/config.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport KIVY_HOME=<folder>\n```\n\n----------------------------------------\n\nTITLE: Creating an Xcode Project for Kivy Application\nDESCRIPTION: This command creates an initial Xcode project for a Kivy application. It requires the project title and the full path to the application directory.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-ios.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ toolchain create <title> <app_directory>\n$ toolchain create Touchtracer ~/code/kivy/examples/demo/touchtracer\n```\n\n----------------------------------------\n\nTITLE: Unit Test Template\nDESCRIPTION: Basic template for creating unit tests in the Kivy framework using Python's unittest module.\nSOURCE: https://github.com/kivy/kivy/blob/master/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\n\nclass XXXTestCase(unittest.TestCase):\n\n    def setUp(self):\n        # import class and prepare everything here.\n        pass\n\n    def test_YYY(self):\n        # place your test case here\n        a = 1\n        self.assertEqual(a, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: Compiling Cython Files After Changes\nDESCRIPTION: Commands to recompile Kivy after changing Cython files. Both the Python setup.py approach and the make command for Linux/bash environments are shown.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py build_ext --inplace\n```\n\n----------------------------------------\n\nTITLE: Opening the Generated Xcode Project\nDESCRIPTION: This command opens the Xcode project that was generated by the toolchain create command.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-ios.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ open touchtracer-ios/touchtracer.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Git Feature Branch Workflow Commands\nDESCRIPTION: Git commands for creating feature branches, pulling upstream changes, and pushing to remote repository.\nSOURCE: https://github.com/kivy/kivy/blob/master/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b new_feature\ngit pull kivy master\ngit push origin new_feature\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Homebrew\nDESCRIPTION: Commands for installing Python and required dependencies using Homebrew package manager\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-osx.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install python\\n$ brew reinstall --build-from-source sdl3 sdl3_image sdl3_ttf sdl3_mixer\n```\n\n----------------------------------------\n\nTITLE: Android Configuration File\nDESCRIPTION: Required content for android.txt configuration file specifying basic app metadata\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-android.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ntitle=<Application Title>\nauthor=<Your Name>\norientation=<portrait|landscape>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Pre-commit Hook\nDESCRIPTION: Command to set up git pre-commit hooks for automated style checking of code before commits in the Kivy framework\nSOURCE: https://github.com/kivy/kivy/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake hook\n```\n\n----------------------------------------\n\nTITLE: Git Repository Setup Commands\nDESCRIPTION: Basic git commands for cloning your fork and setting up the Kivy remote repository.\nSOURCE: https://github.com/kivy/kivy/blob/master/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/username/kivy.git\ngit remote add kivy https://github.com/kivy/kivy.git\n```\n\n----------------------------------------\n\nTITLE: PyInstaller Spec File Configuration\nDESCRIPTION: Example of a COLLECT section in PyInstaller spec file for including application assets\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-osx.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncoll = COLLECT(exe, Tree('/usr/local/share/kivy-examples/demo/touchtracer/'),\\n               a.binaries,\\n               a.zipfiles,\\n               a.datas,\\n               strip=None,\\n               upx=True,\\n               name='touchtracer')\n```\n\n----------------------------------------\n\nTITLE: Documentation Branch Creation\nDESCRIPTION: Git command for creating a new branch for documentation updates.\nSOURCE: https://github.com/kivy/kivy/blob/master/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my_docs_update\n```\n\n----------------------------------------\n\nTITLE: Checking Homebrew Health Status\nDESCRIPTION: This command runs a diagnostic check on the Homebrew installation to ensure it's in a healthy state and functioning properly.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging-ios-prerequisites.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew doctor\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Ubuntu\nDESCRIPTION: Commands to install all required build dependencies for Kivy source installation on Ubuntu\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-linux.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\n\nsudo apt-get -y install python3-dev build-essential git make autoconf automake libtool \\\n      pkg-config cmake ninja-build libasound2-dev libpulse-dev libaudio-dev \\\n      libjack-dev libsndio-dev libsamplerate0-dev libx11-dev libxext-dev \\\n      libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev \\\n      libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \\\n      libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx with MacPorts for Kivy Documentation\nDESCRIPTION: Uses MacPorts to install Sphinx for Python 3.4 on macOS systems.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nport install py34-sphinx\n```\n\n----------------------------------------\n\nTITLE: Creating Kivy Symlink on macOS\nDESCRIPTION: Command to create a symbolic link for the Kivy executable in the system path.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-osx.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nln -s /Applications/Kivy.app/Contents/Resources/script /usr/local/bin/kivy\n```\n\n----------------------------------------\n\nTITLE: Running Kivy Test Suite\nDESCRIPTION: Commands to run the Kivy test suite using pytest or make, which helps ensure your changes don't break existing functionality.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npytest kivy/tests\n```\n\n----------------------------------------\n\nTITLE: Defining Tutorials Table of Contents in reStructuredText\nDESCRIPTION: Creates a table of contents tree with a maximum depth of 2 that links to three Kivy tutorials: pong game implementation, first widget creation, and a framework crash course.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/tutorials-index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    tutorials/pong\n    tutorials/firstwidget\n    tutorials/crashcourse\n```\n\n----------------------------------------\n\nTITLE: Configuring Kivy TakePicture Project Settings in INI format\nDESCRIPTION: This INI configuration snippet defines the basic settings for a Kivy project. It sets the project title as 'TakePicture', specifies the author as 'Mathieu Virbel', and sets the screen orientation to 'portrait'.\nSOURCE: https://github.com/kivy/kivy/blob/master/examples/android/takepicture/android.txt#2025-04-21_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\ntitle=TakePicture\nauthor=Mathieu Virbel\norientation=portrait\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Kivy Getting Started Guide in reStructuredText\nDESCRIPTION: This snippet creates a table of contents using reStructuredText directives. It sets up a toctree with a maximum depth of 1 and lists various topics covered in the Getting Started guide for Kivy.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    intro\n    installation\n    first_app\n    properties\n    rules\n    events\n    framework\n    layouts\n    drawing\n    packaging\n    diving\n```\n\n----------------------------------------\n\nTITLE: Configuring Kivy Application Properties in INI Format\nDESCRIPTION: This configuration snippet defines essential properties for a Kivy application including the title 'Pictures', the author 'Kivy team', and sets the orientation to 'landscape' mode. These settings control how the application will appear when deployed.\nSOURCE: https://github.com/kivy/kivy/blob/master/examples/demo/pictures/android.txt#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntitle=Pictures\nauthor=Kivy team\norientation=landscape\n```\n\n----------------------------------------\n\nTITLE: Configuring Kivy Compass App Properties in INI Format\nDESCRIPTION: This INI configuration snippet defines basic properties for a Kivy compass application. It sets the app title to 'Compass', assigns authorship to 'Nik Klever', and specifies a portrait orientation for the mobile interface.\nSOURCE: https://github.com/kivy/kivy/blob/master/examples/android/compass/android.txt#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntitle=Compass\nauthor=Nik Klever\norientation=portrait\n```\n\n----------------------------------------\n\nTITLE: Running Kivy Demo on BSD Unix\nDESCRIPTION: Command to run the Kivy showcase demo application on BSD Unix systems after installation.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npython3 kivy_venv/share/kivy-examples/demo/showcase/main.py\n```\n\n----------------------------------------\n\nTITLE: Accessing Kv-defined Widgets in Python Code\nDESCRIPTION: Shows how to access widgets defined in Kv language from Python code using ObjectProperty.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/lang.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass MyFirstWidget(BoxLayout):\n\n    txt_inpt = ObjectProperty(None)\n\n    def check_status(self, btn):\n        print('button state is: {state}'.format(state=btn.state))\n        print('text input text is: {txt}'.format(txt=self.txt_inpt))\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents for Kivy Packaging Documentation\nDESCRIPTION: ReStructuredText markup defining a table of contents for Kivy packaging documentation. Sets a reference label and includes links to platform-specific packaging guides.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide/packaging.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _packaging:\n\nPackaging your application\n==========================\n\n.. toctree::\n    :maxdepth: 2\n\n    packaging-windows\n    packaging-android\n    android\n    packaging-osx\n    packaging-ios-prerequisites\n    packaging-ios\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx with pip for Kivy Documentation\nDESCRIPTION: Uses pip to install Sphinx, a documentation generation tool required for Kivy.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install sphinx\n```\n\n----------------------------------------\n\nTITLE: Building Kivy HTML Documentation with make\nDESCRIPTION: Command to generate HTML documentation for Kivy using make. The resulting documentation will be available in the build/html/ directory.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Installing pip and Kivy Documentation Dependencies on Windows\nDESCRIPTION: Instructions for installing pip and required dependencies for Kivy documentation on Windows or in a virtualenv.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py install\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install -r doc-requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Table of Contents\nDESCRIPTION: A ReStructuredText directive that creates a table of contents for the Kivy programming guide documentation with a maximum depth of 2 levels.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/guide-index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _guide-index:\n\nProgramming Guide\n=================\n\n.. toctree::\n    :maxdepth: 2\n\n    guide/basic\n    guide/environment\n    guide/config\n    guide/architecture\n    guide/events\n    guide/inputs\n    guide/widgets\n    guide/graphics\n    guide/lang\n    guide/other-frameworks\n    guide/packaging\n    guide/licensing\n```\n\n----------------------------------------\n\nTITLE: Installing Kivy on Gentoo\nDESCRIPTION: Commands to install Kivy and related packages on Gentoo Linux using the raiagent overlay\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/installation/installation-linux.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\neselect repository enable raiagent\nemerge --sync raiagent\nemerge --ask --autounmask Kivy kivymd buildozer python-for-android\nequery u Kivy kivymd buildozer python-for-android\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Documentation Link in RST\nDESCRIPTION: ReStructuredText markup that creates a reference anchor and provides a link to the Kivy project's contact information page on GitHub.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/contact.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _contact:\n\nContact Us\n==========\n\nIf you are looking to contact us, including looking for support, please see our\n`latest contact details <https://github.com/kivy/kivy/blob/master/CONTACT.md>`_.\n```\n\n----------------------------------------\n\nTITLE: Installing Cutting-edge Nightly Kivy Builds\nDESCRIPTION: Two-step process to install the latest nightly builds of Kivy from the Kivy download server. This approach bypasses PyPi to get the most recent development version.\nSOURCE: https://github.com/kivy/kivy/blob/master/doc/sources/gettingstarted/installation.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install kivy --pre --no-deps --index-url  https://kivy.org/downloads/simple/\npython -m pip install \"kivy[base]\" --pre --extra-index-url https://kivy.org/downloads/simple/\n```"
  }
]