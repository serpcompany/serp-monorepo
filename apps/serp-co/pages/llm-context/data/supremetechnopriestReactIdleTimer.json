[
  {
    "owner": "supremetechnopriest",
    "repo": "react-idle-timer",
    "content": "TITLE: Comprehensive useIdleTimer Hook Example in JavaScript\nDESCRIPTION: Provides a detailed example of initializing the `useIdleTimer` hook with numerous configuration properties set to their default values. It demonstrates defining callbacks for various events (`onPresenceChange`, `onPrompt`, `onIdle`, `onActive`, `onAction`) and destructuring all available methods and state properties returned by the hook (e.g., `start`, `reset`, `isIdle`, `getRemainingTime`).\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/use-idle-timer.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIdleTimer } from 'react-idle-timer' \n\nexport const App = () => {\n  const onPresenceChange = (presence) => {\n    // Handle state changes in one function\n  }\n\n  const onPrompt = () => {\n    // Fire a Modal Prompt\n  }\n\n  const onIdle = () => {\n    // Close Modal Prompt\n    // Do some idle action like log out your user\n  }\n\n  const onActive = (event) => {\n    // Close Modal Prompt\n    // Do some active action\n  }\n\n  const onAction = (event) => {\n    // Do something when a user triggers a watched event\n  }\n\n  const {\n    start,\n    reset,\n    activate,\n    pause,\n    resume,\n    isIdle,\n    isPrompted,\n    isLeader,\n    isLastActiveTab,\n    getTabId,\n    getRemainingTime,\n    getElapsedTime,\n    getLastIdleTime,\n    getLastActiveTime,\n    getIdleTime,\n    getTotalIdleTime,\n    getActiveTime,\n    getTotalActiveTime\n  } = useIdleTimer({\n    onPresenceChange,\n    onPrompt,\n    onIdle,\n    onActive,\n    onAction,\n    timeout: 1000 * 60 * 20,\n    promptBeforeIdle: 0,\n    events: [\n      'mousemove',\n      'keydown',\n      'wheel',\n      'DOMMouseScroll',\n      'mousewheel',\n      'mousedown',\n      'touchstart',\n      'touchmove',\n      'MSPointerDown',\n      'MSPointerMove',\n      'visibilitychange',\n      'focus'\n    ],\n    immediateEvents: [],\n    debounce: 0,\n    throttle: 0,\n    eventsThrottle: 200,\n    element: document,\n    startOnMount: true,\n    startManually: false,\n    stopOnIdle: false,\n    crossTab: false,\n    name: 'idle-timer',\n    syncTimers: 0,\n    leaderElection: false\n  })\n  return (\n    <HomePage />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal useIdleTimer Hook Implementation in JavaScript\nDESCRIPTION: Demonstrates the basic usage of the `useIdleTimer` hook within a functional React component. It initializes the hook with a single configuration option, `onPresenceChange`, which is a callback function to handle changes in user presence state (idle, active, prompted).\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/use-idle-timer.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIdleTimer } from 'react-idle-timer'\n\nexport const App = () => {\n  const onPresenceChange = (presence) => {\n    // Handle state changes in one function\n  }\n\n  const idleTimer = useIdleTimer({ onPresenceChange })\n\n  return (\n    <HomePage />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using IdleTimerProvider with Functional Components in React\nDESCRIPTION: Example showing how to implement the IdleTimerProvider with functional components using the useIdleTimerContext hook to access the idle timer state and methods in child components.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/idle-timer-provider.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { IdleTimerProvider, useIdleTimerContext } from 'react-idle-timer'\n\nexport function Child () {\n  const idleTimer = useIdleTimerContext()\n  return (\n    <h1>{idleTimer.isIdle()}</h1>\n  )\n}\n\nexport function App () {\n  const onPresenceChange = (presence) => {\n    // Handle state changes in one function\n  }\n\n  const onPrompt = () => {\n    // Fire a Modal Prompt\n  }\n\n  const onIdle = () => {\n    // Close Modal Prompt\n    // Do some idle action like log out your user\n  }\n\n  const onActive = (event) => {\n    // Close Modal Prompt\n    // Do some active action\n  }\n\n  const onAction = (event) => {\n    // Do something when a user triggers a watched event\n  }\n\n  return (\n    <IdleTimerProvider\n      timeout={1000 * 60}\n      onPresenceChange={onPresenceChange}\n      onPrompt={onPrompt}\n      onIdle={onIdle} \n      onActive={onActive}\n      onAction={onAction}\n    >\n      <Child />\n    </IdleTimerProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Example onPresenceChange Implementation (TypeScript)\nDESCRIPTION: Provides an example implementation of the `onPresenceChange` prop for `react-idle-timer`. It shows how to consume the `PresenceType` argument and determine the current state (idle, active, or prompted) using type checking. This function is called whenever the user's presence state changes. Requires importing `PresenceType`.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/props.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { PresenceType } from 'react-idle-timer'\n\nconst onPresenceChange = (presence: PresenceType) => {\n  const isIdle = presence.type === 'idle'\n  const isActive = presence.type === 'active' && !presence.prompted\n  const isPrompted = presence.type === 'active' && presence.prompted\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useIdleTimer Hook in JavaScript\nDESCRIPTION: This snippet shows how to import the `useIdleTimer` hook from the 'react-idle-timer' package into a JavaScript module, typically a React component file.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/use-idle-timer.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIdleTimer } from 'react-idle-timer'\n```\n\n----------------------------------------\n\nTITLE: Importing React Idle Timer Context Components in TypeScript\nDESCRIPTION: Demonstrates how to import the IdleTimerProvider, IdleTimerConsumer, context types, and hooks from the react-idle-timer package.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/idle-timer-provider.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  IdleTimerProvider, \n  IdleTimerConsumer, \n  IIdleTimerContext, \n  IdleTimerContext,\n  useIdleTimerContext\n} from 'react-idle-timer'\n```\n\n----------------------------------------\n\nTITLE: Using IdleTimerProvider with Class Components via IdleTimerConsumer\nDESCRIPTION: Example showing how to implement the IdleTimerProvider with class components using the IdleTimerConsumer component to access the idle timer state and methods in child components' render method.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/idle-timer-provider.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component } from 'react'\nimport { IdleTimerProvider, IdleTimerConsumer } from 'react-idle-timer'\n\nexport class Child extends Component {\n  render () {\n    return (\n      <IdleTimerConsumer>\n        {idleTimer => (\n          <h1>{idleTimer.isIdle()}</h1>\n        )}\n      </IdleTimerConsumer>\n    )\n  }\n}\n\nexport class App extends Component {\n  onPresenceChange (presence) {\n    // Handle state changes in one function\n  }\n\n  onPrompt () {\n    // Fire a Modal Prompt\n  }\n\n  onIdle () {\n    // Close Modal Prompt\n    // Do some idle action like log out your user\n  }\n\n  onActive (event) {\n    // Close Modal Prompt\n    // Do some active action\n  }\n\n  onAction (event) {\n    // Do something when a user triggers a watched event\n  }\n\n  render () {\n    return (\n      <IdleTimerProvider\n        timeout={1000 * 60}\n        onPresenceChange={this.onPresenceChange}\n        onPrompt={this.onPrompt}\n        onIdle={this.onIdle} \n        onActive={this.onActive}\n        onAction={this.onAction}\n      >\n      <Child />\n    </IdleTimerProvider>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using IdleTimerProvider with TypeScript in Class Components\nDESCRIPTION: Example showing how to implement the IdleTimerProvider with TypeScript in class components, including properly typing the context for TypeScript support.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/idle-timer-provider.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Component, ContextType } from 'react'\nimport { IIdleTimerContext, IdleTimerContext } from 'react-idle-timer'\n\nexport class Child extends Component<{}, {}> {\n  // Set the context type to the IdleTimerContext\n  // The IIdleTimer interface will be available on this.context\n  static contextType = IdleTimerContext\n\n  // Declare a type for context to preserve typescript types\n  context!: ContextType<typeof IIdleTimerContext>\n  \n  render () {\n    return (\n      <h1>{this.context.isIdle()}</h1>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unified Presence State Handler in react-idle-timer (TypeScript)\nDESCRIPTION: This snippet demonstrates how to handle all presence state changes (active, idle, prompted) using the `onPresenceChange` event handler with a defined `PresenceType`. It provides a centralized approach to managing user presence states, replacing individual event handlers.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { PresenceType } from 'react-idle-timer'\n\nconst onPresenceChange = (presence: PresenceType) => {\n  const isIdle = presence.type === 'idle'\n  const isActive = presence.type === 'active' && !presence.prompted\n  const isPrompted = presence.type === 'active' && presence.prompted\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prompt and Timeout V5 React Idle Timer JavaScript\nDESCRIPTION: This snippet demonstrates the recommended v5 configuration for setting the main idle `timeout` and the `promptBeforeIdle` duration. `timeout` specifies the time until the `onIdle` event, while `promptBeforeIdle` specifies how many milliseconds before that the `onPrompt` event should fire. This replaces the deprecated `promptTimeout` property.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst idleTimer = useIdleTimer({\n  timeout: 1000 * 60 * 30,\n  promptBeforeIdle: 1000 * 30\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Timer Prop V5 React Idle Timer JavaScript\nDESCRIPTION: This snippet shows the simplified v5 approach using the new `disabled` prop to control the timer's active state. By binding the `disabled` prop directly to a boolean state (e.g., `!loggedIn`), the timer is automatically enabled/disabled, eliminating the need for explicit `start` and `pause` calls in `useEffect`.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelector } from 'react-redux'\nimport { useIdleTimer } from 'react-idle-timer'\n\nexport const App = () => {\n  const loggedIn = useSelector(state => state.user !== undefined)\n  useIdleTimer({ disabled: !loggedIn })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Idle User Prompting in React Using react-idle-timer (JavaScript)\nDESCRIPTION: This snippet shows how to configure IdleTimer for prompting users before they become idle. It includes setting timeout values, handling the prompt event (`onPrompt`), and responding to user activity (`onActive`). The example also demonstrates managing prompt states within a React component using hooks and updating UI accordingly.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function App () {\n  const timeout = 1000 * 60 * 30\n  const promptBeforeIdle = 1000 * 30\n\n  const [open, setOpen] = useState(false)\n  const [remaining, setRemaining] = useState(0)\n\n  const onPrompt = () => {\n    setOpen(true)\n    setRemaining(promptTimeout)\n  }\n\n  const onIdle = () => {\n    setOpen(false)\n    setRemaining(0)\n  }\n\n  const onActive = () => {\n    setOpen(false)\n    setRemaining(0)\n  }\n\n  const { getRemainingTime, isPrompted, activate } = useIdleTimer({\n    timeout,\n    promptBeforeIdle,\n    onPrompt,\n    onIdle,\n    onActive\n  })\n\n  const handleStillHere = () => {\n    setOpen(false)\n    activate()\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (isPrompted()) {\n        setRemaining(Math.ceil(getRemainingTime() / 1000))\n      }\n    }, 1000)\n    return () => {\n      clearInterval(interval)\n    }\n  }, [getRemainingTime, isPrompted])\n\n  return (\n    <div className='modal' style={{ display: open ? 'block': 'none' }}>\n      <p>Logging you out in {remaining} seconds</p>\n      <button onClick={handleStillHere}>Im Still Here</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PresenceType for React Idle Timer (TypeScript)\nDESCRIPTION: Defines the `PresenceType` discriminated union type used by `react-idle-timer` callbacks like `onPresenceChange`. It represents the user's state as either 'idle' or 'active', with the 'active' state optionally including a `prompted` flag. This type helps ensure type safety when handling presence state changes.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/props.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype PresenceType = { type: 'idle' } | { type: 'active', prompted: boolean }\n```\n\n----------------------------------------\n\nTITLE: Resetting and Activating User State in react-idle-timer Methods (JavaScript)\nDESCRIPTION: This description explains the `reset()` and `activate()` methods. `reset()` resets the timer state without triggering `onActive`, while `activate()` manually activates the user, resets timers, and triggers `onActive` if the user was idle. These methods provide control over user activity state management.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Methods usage\n// reset(): resets the timer state without calling onActive\n// activate(): manually activates user, resets timers, triggers onActive if idle\n```\n\n----------------------------------------\n\nTITLE: Configuring Immediate Event Triggers in react-idle-timer (TypeScript)\nDESCRIPTION: This snippet explains how to use the `immediateEvents` property to allow certain events to instantly change the user's idle or prompted state, bypassing the timeout delay. It illustrates overriding default event handling, especially for events like `pagehide`, enabling more responsive user state updates.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IEventsType {\n  // event type definitions\n}\n\n// Configuration example\nconst idleTimerConfig = {\n  immediateEvents: ['pagehide']\n  // other event configurations\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using New Callback Parameters V5 React Idle Timer TypeScript\nDESCRIPTION: This snippet illustrates how callback functions (`onAction`, `onActive`, etc.) in v5 now receive the `IIdleTimer` interface as a second parameter. This allows direct access to timer methods (`isPrompted`, `activate`) within the callback scope without relying on external variables or hoisting, simplifying timer interaction during events.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst onAction = (event: Event, idleTimer: IIdleTimer) => {\n  if (idleTimer.isPrompted()) {\n    idleTimer.activate()\n  }\n}\n\nconst onActive = (event: Event, idleTimer: IIdleTimer) => {\n  if (idleTimer.isPrompted()) {\n    setOpen(false)\n  }\n}\n\nconst onPrompt = () => {\n  setOpen(true)\n}\n\nconst onIdle = () => {\n  setOpen(false)\n  history.replace('/logout')\n}\n\nuseIdleTimer({\n  timeout: 1000 * 60 * 5,\n  promptBeforeIdle: 1000 * 30,\n  onAction,\n  onActive,\n  onPrompt,\n  onIdle\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing IdleTimer API via IdleTimerProvider in React (JavaScript)\nDESCRIPTION: This snippet suggests using `IdleTimerProvider` to supply Idle Timer functions and state to nested components without prop drilling. It is useful for complex component trees requiring access to Idle Timer methods and events, promoting cleaner architecture.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Usage example (not explicitly provided in code)\nimport { IdleTimerProvider } from 'react-idle-timer'\n\n<IdleTimerProvider>\n  {/* nested components */}\n</IdleTimerProvider>\n```\n\n----------------------------------------\n\nTITLE: Using withIdleTimer Higher Order Component for Class Components (JavaScript/TypeScript)\nDESCRIPTION: This example indicates how to use the `withIdleTimer` higher order component as an alternative to the deprecated `IdleTimer` React component, particularly useful for class components. It wraps a component to inject Idle Timer props for managing user activity on class-based React components.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Usage example not provided explicitly, but typically:\nimport { withIdleTimer } from 'react-idle-timer'\n\nclass MyComponent extends React.Component {\n  // class implementation\n}\n\nexport default withIdleTimer(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Implementing Leader Election V5 React Idle Timer JavaScript\nDESCRIPTION: This snippet shows how to enable leader election in v5 using the `leaderElection` prop and use the `isLeader()` method within a callback like `onIdle`. This allows you to perform specific actions (e.g., remote logout) only on the designated leader tab while other tabs might perform local actions.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIdleTimer } from 'react-idle-timer'\n\nconst App = () => {\n  const { isLeader } = useIdleTimer({\n    crossTab: true,\n    leaderElection: true,\n    onIdle: () => {\n      if (isLeader()) {\n        // I am the leader, perform remote action\n      } else {\n        // I am not the leader, perform local action\n      }\n    }\n  })\n\n  return <></>\n}\n```\n\n----------------------------------------\n\nTITLE: Differentiating Between Resettable Time Getters in react-idle-timer (JavaScript/TypeScript)\nDESCRIPTION: This explanation covers the addition of `getIdleTime` and `getActiveTime`, which are resettable, differentiating from `getTotalIdleTime` and `getTotalActiveTime` that are non-resettable and measure total elapsed time since mount. These methods facilitate precise control over activity duration metrics.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Usage of getIdleTime() and getActiveTime() to retrieve resettable activity durations\n// They are reset when reset() is called, unlike getTotal*Time() methods\n```\n\n----------------------------------------\n\nTITLE: Using React Idle Timer with Web Worker Timers in React (JavaScript)\nDESCRIPTION: This code demonstrates the initialization of React Idle Timer with web worker timers enabled to maintain timer accuracy during browser throttling. It imports necessary hooks and timers, then uses the `useIdleTimer` hook to set up timers with worker support in a React functional component.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useIdleTimer, workerTimers } from 'react-idle-timer'\n\nexport const App = () => {\n  const idleTimer = useIdleTimer({ timers: workerTimers })\n\n  return (\n    <h1>Using web worker timers!</h1>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross Tab V5 Sync Timers React Idle Timer JavaScript/JSX\nDESCRIPTION: This snippet shows how to enable the cross-tab feature in v5 along with the new `syncTimers` property. `syncTimers` accepts a number representing a throttle value in milliseconds, controlling how often user actions are replicated across tabs to synchronize timers. A value of 0 disables sync.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Hook\nconst idleTimer = useIdleTimer({\n  crossTab: true,\n  syncTimers: 200\n})\n\n// Higher Order Component Wrapped\n<IdleTimer crossTab syncTimers={200} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross Tab V5 Multiple Instances React Idle Timer JavaScript/JSX\nDESCRIPTION: This snippet demonstrates how to use the `name` prop when using multiple `useIdleTimer` or HOC-wrapped instances on the same page with `crossTab` enabled. Providing a unique `name` for each instance ensures that cross-tab events are isolated and only affect the corresponding timer instance.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Hook\nconst logoutTimer = useIdleTimer({\n  timeout: 1000 * 60 * 30,\n  crossTab: true,\n  syncTimers: 200,\n  name: 'logout-timer'\n})\n\nconst activityTimer = useIdleTimer({\n  timeout: 1000 * 60 * 5,\n  crossTab: true,\n  syncTimers: 200,\n  name: 'activity-timer'\n})\n\n// Higher Order Component Wrapped\n<IdleTimer crossTab timeout={1000 * 60 * 30} syncTimers={200} name='logout-timer' />\n<IdleTimer crossTab timeout={1000 * 60 * 5} syncTimers={200} name='activity-timer' />\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross Tab V5 Simple React Idle Timer JavaScript/JSX\nDESCRIPTION: This snippet demonstrates the simplified v5 configuration for enabling the cross-tab feature. The `crossTab` prop now only accepts a boolean value (`true` to enable, `false` to disable). The detailed configuration options from v4 have been removed or set to sensible defaults.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Hook\nconst idleTimer = useIdleTimer({\n  crossTab: true\n})\n\n// Higher Order Component Wrapped\n<IdleTimer crossTab />\n```\n\n----------------------------------------\n\nTITLE: Importing Legacy Bundle React Idle Timer TypeScript\nDESCRIPTION: This snippet shows how to import the legacy bundle of `react-idle-timer` to ensure compatibility with older browser environments. Use this import path when targeting browsers that do not fully support modern JavaScript features.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useIdleTimer } from 'react-idle-timer/legacy'\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross Tab V4 React Idle Timer JavaScript/JSX\nDESCRIPTION: This snippet shows the v4 configuration for the `crossTab` feature. In v4, `crossTab` could accept a boolean or a configuration object with various options like `type`, `channelName`, `fallbackInterval`, `responseTime`, `removeTimeout`, and `emitOnAllTabs`. This verbose object configuration has been simplified in v5.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Hook\nconst idleTimer = useIdleTimer({\n  crossTab: {\n    type: undefined,\n    channelName: 'idle-timer',\n    fallbackInterval: 2000,\n    responseTime: 100,\n    removeTimeout: 1000 * 60,\n    emitOnAllTabs: true\n  }\n})\n\n// Component\n<IdleTimer crossTab={{\n  type: undefined,\n  channelName: 'idle-timer',\n  fallbackInterval: 2000,\n  responseTime: 100,\n  removeTimeout: 1000 * 60,\n  emitOnAllTabs: false\n}} />\n```\n\n----------------------------------------\n\nTITLE: Using the Custom IdleTimer Component in a React Application\nDESCRIPTION: Shows how to use a custom IdleTimer component in a React application with events like onPresenceChange, onPrompt, onIdle, onActive, and onAction.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/with-idle-timer.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from 'react'\nimport { IdleTimer } from './IdleTimer'\n\nexport class App extends Component {\n  constructor (props) {\n    super(props)\n    this.idleTimer = null\n    this.onPresenceChange = this.onPresenceChange.bind(this)\n    this.onPrompt = this.onPrompt.bind(this)\n    this.onIdle = this.onIdle.bind(this)\n    this.onAction = this.onAction.bind(this)\n    this.onActive = this.onActive.bind(this)\n  }\n\n  onPresenceChange (presence) {\n    // Handle state changes in one function\n  }\n\n  onPrompt () {\n    // Fire a Modal Prompt\n  }\n\n  onIdle () {\n    // Close Modal Prompt\n    // Do some idle action like logging out your user\n  }\n\n  onActive (event) {\n    // Close Modal Prompt\n    // Do some active action\n  }\n\n  onAction (event) {\n    // Do something when a user triggers a watched event\n  }\n\n  componentDidMount () {\n    // IIdleTimer interface available on the reference to\n    // the IdleTimer component instance\n    this.idleTimer.start()\n  }\n\n  render () {\n    return (\n      <>\n        <IdleTimer\n          ref={ref => { this.idleTimer = ref }}\n          timeout={1000 * 60 * 15}\n          promptTimeout={1000 * 30}\n          onPresenceChange={this.onPresenceChange}\n          onPrompt={this.onPrompt}\n          onIdle={this.onIdle}\n          onAction={this.onAction}\n          onActive={this.onActive}\n          startManually\n        />\n        <HomePage />\n      </>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the IdleTimer Injector Component in React\nDESCRIPTION: Shows how to use an IdleTimer injector component with configuration properties for timeout and promptTimeout.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/with-idle-timer.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render } from 'react-dom'\nimport { App } from './App'\n\nconst element = document.getElementById('root')\nrender((\n  <App \n    timeout={1000 * 60 * 15}\n    promptTimeout={1000 * 30}\n    startManually\n  />\n), element)\n```\n\n----------------------------------------\n\nTITLE: Dynamically Configuring IdleTimer Properties with a Parent Component\nDESCRIPTION: Shows how to dynamically supply and update IdleTimer properties through state in a parent component.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/with-idle-timer.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from 'react'\nimport { App } from './App'\n\nexport class Root extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      timeout: 1000 * 60 * 15,\n      promptTimeout: 1000 * 30\n    }\n  }\n\n  render () {\n    return (\n      <App \n        timeout={this.state.timeout}\n        promptTimeout={this.state.promptTimeout}\n        startManually\n      />\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using withIdleTimer with TypeScript and Generic Types\nDESCRIPTION: Demonstrates how to use withIdleTimer with TypeScript generics to preserve type information for custom props that extend the IIdleTimer interface.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/with-idle-timer.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, ReactNode } from 'react'\nimport { withIdleTimer, IdleTimerComponent, IIdleTimer } from 'react-idle-timer'\n\ninterface IAppProps extends IIdleTimer {\n  foo: string\n}\n\ninterface IAppState {\n  bar: string\n}\n\nclass AppComponent extends IdleTimerComponent<IAppProps, IAppState> {\n  onPresenceChange (presence) {\n    // Handle state changes in one function\n  }\n  \n  onPrompt (): void {\n    // Fire a Modal Prompt\n  }\n\n  onIdle (): void {\n    // Close Modal Prompt\n    // Do some idle action like logging out your user\n  }\n\n  onActive (event: Event): void {\n    // Close Modal Prompt\n    // Do some active action\n  }\n\n  onAction (event: Event): void {\n    // Do something when a user triggers a watched event\n  }\n\n  componentDidMount (): void {\n    // The IIdleTimer interface is supplied via props to your component\n    this.props.start()\n  }\n\n  render (): ReactNode {\n    return (\n      <h1>{this.props.foo}</h1>\n    )\n  }\n}\n\nexport const IdleTimer = withIdleTimer<IAppProps>(AppComponent)\n```\n\n----------------------------------------\n\nTITLE: Creating an IdleTimer Injector using withIdleTimer HOC\nDESCRIPTION: Demonstrates how to create a component that directly uses the withIdleTimer HOC to inject the IdleTimer functionality and make the API available via props.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/with-idle-timer.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withIdleTimer, IdleTimerComponent } from 'react-idle-timer'\n\nclass AppComponent extends IdleTimerComponent {\n  onPresenceChange (presence) {\n    // Handle state changes in one function\n  }\n  \n  onPrompt () {\n    // Fire a Modal Prompt\n  }\n\n  onIdle () {\n    // Close Modal Prompt\n    // Do some idle action like logging out your user\n  }\n\n  onActive (event) {\n    // Close Modal Prompt\n    // Do some active action\n  }\n\n  onAction (event) {\n    // Do something when a user triggers a watched event\n  }\n\n  componentDidMount () {\n    // The IIdleTimer interface is supplied via props to your component\n    this.props.start()\n  }\n\n  render () {\n    return <HomePage />\n  }\n}\n\nexport const App = withIdleTimer(AppComponent)\n```\n\n----------------------------------------\n\nTITLE: Rendering a TypeScript IdleTimer Component with Custom Props\nDESCRIPTION: Shows how to render a TypeScript IdleTimer component with custom props merged with the IIdleTimer interface.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/with-idle-timer.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, ReactNode } from 'react'\nimport { render } from 'react-dom'\nimport { App } from './App'\n\nclass Root extends Component<{}, {}> {\n  render (): ReactNode {\n    <App\n      foo='bar'\n      timeout={1000 * 60 * 15}\n      promptTimeout={1000 * 30}\n    />\n  }\n}\n\nconst element = document.getElementById('root')\nrender(<Root />, element)\n```\n\n----------------------------------------\n\nTITLE: Cross Tab Messaging with React Idle Timer (TypeScript / JavaScript)\nDESCRIPTION: This example illustrates how to leverage IdleTimer's cross-tab messaging capabilities to broadcast events across multiple tab instances. It sets up an `onMessage` handler that performs actions like logging out users based on received messages, and a message emitter that sends commands to all tabs, facilitating synchronized behaviors such as logout.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useIdleTimer } from 'react-idle-timer'\nimport { useDispatch } from 'react-redux'\nimport { logAction } from './Actions'\n\nexport function App () {\n  const dispatch = useDispatch()\n\n  const onMessage = data => {\n    switch (data.action) {\n      case 'LOGOUT_USER':\n        dispatch(logoutAction())\n        break\n      default:\n        // no op\n    }\n  }\n\n  const { message } = useIdleTimer({ onMessage })\n\n  const onLogoutClick = () => {\n    message({ action: 'LOGOUT_USER' }, true)\n  }\n\n  return (\n    <button onClick={onLogoutClick}>Logout</button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing withIdleTimer HOC in React\nDESCRIPTION: Shows how to import the withIdleTimer higher order component from the react-idle-timer package.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/with-idle-timer.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withIdleTimer } from 'react-idle-timer'\n```\n\n----------------------------------------\n\nTITLE: Mocking Timers for IdleTimer - JavaScript\nDESCRIPTION: This code snippet mocks worker thread timers using the `createMocks` function from `react-idle-timer`. This ensures that tests use main thread timers for testing purposes.  It should be placed in the `test.setup.js` file.  The `beforeAll` hook ensures this runs before all tests.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/testing.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMocks } from 'react-idle-timer'\nbeforeAll(createMocks)\n```\n\n----------------------------------------\n\nTITLE: Full Mock Setup for IdleTimer Testing - JavaScript\nDESCRIPTION: This snippet demonstrates the complete mock setup for testing IdleTimer, including mocking timers and MessageChannel. It imports necessary modules, mocks timers using `createMocks`, and assigns the `MessageChannel` to the global scope. The `cleanup` function is called after all tests. This provides a comprehensive testing environment for IdleTimer.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/testing.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMocks } from 'react-idle-timer'\nimport { MessageChannel } from 'worker_threads'\nimport { cleanup } from '@testing-library/react'\n\nbeforeAll(() => {\n  createMocks()\n  global.MessageChannel = MessageChannel\n})\n\nafterAll(cleanup)\n```\n\n----------------------------------------\n\nTITLE: Mocking MessageChannel for IdleTimer - JavaScript\nDESCRIPTION: This code snippet mocks the `MessageChannel` object, which is used internally by IdleTimer for cross-tab messaging. It's necessary when testing the cross-tab feature because `js-dom` doesn't mock it by default. It also includes a cleanup function to run after all tests. A typescript ignore is added to allow global assignment.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/testing.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageChannel } from 'worker_threads'\nimport { cleanup } from '@testing-library/react'\n\nbeforeAll(() => {\n  // @ts-ignore\n  global.MessageChannel = MessageChannel\n})\n\nafterAll(cleanup)\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration for IdleTimer Testing - JavaScript\nDESCRIPTION: This snippet shows how to configure Jest to use the `test.setup.js` file, ensuring that the mocks for timers and MessageChannel are applied before running any tests. It is important for setting up the testing environment correctly.  `...otherOptions` refers to existing Jest options.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/testing.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  ...otherOptions,\n  setupFilesAfterEnv: [\n    './test.setup.js'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-idle-timer via npm (Bash)\nDESCRIPTION: Use this command in your project directory to install the react-idle-timer package as a project dependency using the npm package manager.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i react-idle-timer\n```\n\n----------------------------------------\n\nTITLE: Installing react-idle-timer via Yarn (Bash)\nDESCRIPTION: Use this command in your project directory to add the react-idle-timer package as a project dependency using the Yarn package manager.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-idle-timer\n```\n\n----------------------------------------\n\nTITLE: Importing useIdleTimer for Legacy Browsers with Modern Node (TypeScript)\nDESCRIPTION: Import the useIdleTimer hook using this path when targeting legacy browsers in a modern Node.js environment that supports package.json exports. This utilizes the dedicated legacy build.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/installation.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useIdleTimer } from 'react-idle-timer/legacy'\n```\n\n----------------------------------------\n\nTITLE: Importing useIdleTimer via Full ESM Path for Older Node/Legacy Browsers (JavaScript)\nDESCRIPTION: Use this full ES Module path to import the useIdleTimer hook. This is necessary when targeting legacy browsers in older Node.js environments that do not support package.json exports.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/installation.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIdleTimer } from 'react-idle-timer/dist/index.legacy.esm.js'\n```\n\n----------------------------------------\n\nTITLE: Importing useIdleTimer via Full CJS Path for Older Node/Legacy Browsers (JavaScript)\nDESCRIPTION: Use this full CommonJS path to import the useIdleTimer hook. This is necessary when targeting legacy browsers in older Node.js environments that do not support package.json exports.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/installation.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useIdleTimer } from 'react-idle-timer/dist/index.legacy.cjs.js'\n```\n\n----------------------------------------\n\nTITLE: Using IdleTimerProvider with Class Components via contextType\nDESCRIPTION: Example showing how to implement the IdleTimerProvider with class components using the contextType static property to access the idle timer context outside of JSX.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/idle-timer-provider.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component } from 'react'\nimport {\n  IdleTimerContext,\n  IdleTimerProvider\n} from 'react-idle-timer'\n\nexport class Child extends Component {\n  // Set the context type to the IdleTimerContext\n  // The IIdleTimer interface will be available on this.context\n  static contextType = IdleTimerContext\n  \n  render () {\n    return (\n      <h1>{this.context.isIdle()}</h1>\n    )\n  }\n}\n\nexport class App extends Component {\n  onPresenceChange (presence) {\n    // Handle state changes in one function\n  }\n\n  onPrompt () {\n    // Fire a Modal Prompt\n  }\n\n  onIdle () {\n    // Close Modal Prompt\n    // Do some idle action like log out your user\n  }\n\n  onActive (event) {\n    // Close Modal Prompt\n    // Do some active action\n  }\n\n  onAction (event) {\n    // Do something when a user triggers a watched event\n  }\n\n  render () {\n    return (\n      <IdleTimerProvider\n        timeout={1000 * 60 * 30}\n        onPresenceChange={this.onPresenceChange}\n        onPrompt={this.onPrompt}\n        onIdle={this.onIdle} \n        onActive={this.onActive}\n        onAction={this.onAction}\n      >\n        <Child />\n      </IdleTimerProvider>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing npm dependencies\nDESCRIPTION: This command installs the dependencies required by the IdleTimer project, as specified in the `package.json` file. It ensures that all necessary libraries and tools are available for development, testing, and building the project.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing nps globally\nDESCRIPTION: This command installs the `nps` (npm package scripts) tool globally, allowing the execution of custom scripts defined in the project's `package-scripts.js` file. This is useful for streamlining common development tasks.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g nps\n```\n\n----------------------------------------\n\nTITLE: Docs Environment Variables\nDESCRIPTION: These environment variables are required to run the documentation locally. Replace `[your_token]` with a GitHub personal access token with appropriate permissions.  GOOGLE_ANALYTICS is for tracking in the documentation site.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nGOOGLE_ANALYTICS=G-XXXXXXXXXX\nGITHUB_TOKEN=[your_token]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom IdleTimer Component with HOC\nDESCRIPTION: Demonstrates how to create a custom IdleTimer component that extends IdleTimerComponent and uses the withIdleTimer HOC.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/with-idle-timer.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from 'react'\nimport { withIdleTimer } from 'react-idle-timer'\n\nclass IdleTimerComponent extends Component {\n  render () {\n    return this.props.children\n  }\n}\n\nexport const IdleTimer = withIdleTimer(IdleTimerComponent)\n```\n\n----------------------------------------\n\nTITLE: Manually Controlling Timer V4 React Idle Timer JavaScript\nDESCRIPTION: This snippet demonstrates the older approach (pre-v5) for conditionally starting and pausing the idle timer based on a state value like user login status. It requires manual control using `start` and `pause` methods within a `useEffect` hook, responding to state changes.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/getting-started/new.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useIdleTimer } from 'react-idle-timer'\n\nexport const App = () => {\n  const loggedIn = useSelector(state => state.user !== undefined)\n  const { start, pause } = useIdleTimer({ startManually: true })\n\n  useEffect(() => {\n    if (loggedIn) {\n      start()\n    } else {\n      pause()\n    }\n  }, [ loggedIn ])\n}\n```\n\n----------------------------------------\n\nTITLE: Importing EventsType in JavaScript/TypeScript\nDESCRIPTION: Shows how to import the EventsType type, which contains all valid DOM Event values that can be passed to the 'events' and 'immediateEvents' properties.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/types.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { EventsType } from 'react-idle-timer'\n```\n\n----------------------------------------\n\nTITLE: Importing IIdleTimer Type in JavaScript/TypeScript\nDESCRIPTION: Shows how to import the IIdleTimer interface, which contains all methods that can be called on an IdleTimer instance after initialization.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/types.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { IIdleTimer } from 'react-idle-timer'\n```\n\n----------------------------------------\n\nTITLE: Importing IIdleTimerProps Type in JavaScript/TypeScript\nDESCRIPTION: Shows how to import the IIdleTimerProps interface, which defines all available properties that the IdleTimer component accepts.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/types.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { IIdleTimerProps } from 'react-idle-timer'\n```\n\n----------------------------------------\n\nTITLE: Importing ITimers Type in JavaScript/TypeScript\nDESCRIPTION: Shows how to import the ITimers interface, which is used by the 'timers' property in the IdleTimer component.\nSOURCE: https://github.com/supremetechnopriest/react-idle-timer/blob/master/docs/pages/docs/api/types.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { ITimers } from 'react-idle-timer'\n```"
  }
]