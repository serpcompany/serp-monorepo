[
  {
    "owner": "seleniumhq",
    "repo": "seleniumhq.github.io",
    "content": "TITLE: Initializing a Selenium Session\nDESCRIPTION: This snippet demonstrates how to initialize a Selenium WebDriver session in various programming languages. It shows the instantiation of the WebDriver object, which is the entry point for interacting with the browser. This is a fundamental step in any Selenium automation script.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Chrome()\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Element with Selenium WebDriver in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to locate an element and send keys to it using Selenium WebDriver. The element is located by its name, and the keys 'admin@localhost.dev' are sent to it.  The snippet assumes a `driver` instance is already initialized.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.find_element(name: 'email_input').send_keys('admin@localhost.dev')\n\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium using NPM (JavaScript)\nDESCRIPTION: Installs the selenium-webdriver package locally using npm, the Node Package Manager. This downloads and installs the package and its dependencies into the 'node_modules' directory within the project.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.ja.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: Relative Locator - Above in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate an element above another element using Relative Locators in Selenium.  It locates an input element above the element with the id 'password'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet emailLocator = locateWith(By.tagName('input')).above(By.id('password'));\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait (JavaScript)\nDESCRIPTION: This Javascript snippet shows an explicit wait using the `WebDriverWait` class.  It waits up to 10 seconds for an element located by ID to be present on the page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.ja.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await new WebDriverWait(driver, { timeout: 10000 })\n  .until(until.elementLocated(By.id('myDynamicElement')));\n```\n\n----------------------------------------\n\nTITLE: Transforming Response via CDP in Java\nDESCRIPTION: This Java code snippet demonstrates how to intercept and modify network responses using Chrome DevTools Protocol (CDP) with Selenium.  It intercepts responses based on URL and modifies the response body. This snippet depends on the Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nsession.addListener(Network.requestIntercepted(event -> {\n  if (event.getRequest().getUrl().contains(\"example\")) {\n    String newContent = \"<h1>This is modified content</h1>\";\n    session.sendCommand(Network.continueInterceptedRequest(\n        ContinueInterceptedRequest.create(event.getInterceptionId(),\n            Optional.of(newContent), Optional.empty(), Optional.empty(),\n            Optional.empty(), Optional.empty())));\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Title with Selenium\nDESCRIPTION: This snippet retrieves the title of the current webpage loaded in the browser. It uses the `Title` property of the WebDriver instance.  Dependencies include a properly initialized WebDriver and a loaded webpage.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nstring title = driver.Title;\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Web Page\nDESCRIPTION: This snippet shows how to navigate the browser to a specific URL using Selenium.  It uses the `get` or `navigate().to()` method of the WebDriver to load a web page. The target URL is a required parameter.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.get 'https://www.google.com/'\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot in Selenium\nDESCRIPTION: This code takes a screenshot of the current browser window using Selenium WebDriver and saves it as a PNG file. It demonstrates how to initialize a ChromeDriver, navigate to a URL, take the screenshot, and save it to a file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_78\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\n\ndriver = webdriver.Chrome()\n\ndriver.get(\"http://www.example.com\")\n\n    # Returns and base64 encoded string into image\ndriver.save_screenshot('./image.png')\n\ndriver.quit()\n\n```\n\n----------------------------------------\n\nTITLE: Python Context Manager - Selenium\nDESCRIPTION: Demonstrates the use of a Python context manager (`with` statement) to automatically quit the WebDriver instance at the end of its execution block. This ensures proper resource management without explicitly calling `driver.quit()`. Simplifies code and avoids potential resource leaks.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nwith webdriver.Firefox() as driver:\n  # WebDriver 代码…\n\n# 在此缩进位置后 WebDriver 会自动退出\n```\n\n----------------------------------------\n\nTITLE: Maximize Window in Selenium\nDESCRIPTION: This code maximizes the browser window using Selenium WebDriver. It makes the window fill the screen, excluding OS menus and toolbars. The method is available across different programming languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_63\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.manage().window().maximize();\n```\n\n----------------------------------------\n\nTITLE: Java: WebDriver Initialization with Selenium Manager\nDESCRIPTION: This Java code snippet demonstrates how to initialize a WebDriver using Selenium Manager.  It automatically manages the driver setup, eliminating the need to manually specify the driver path. It simplifies the driver management process and reduces the risk of compatibility issues between the driver and the browser.  It depends on the `org.openqa.selenium.chrome.ChromeDriver` class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.en.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\n        options.addArguments(\"--remote-allow-origins=*\");\n        WebDriver driver = new ChromeDriver(options);\n        driver.get(\"https://www.selenium.dev/\");\n```\n\n----------------------------------------\n\nTITLE: Quitting Browser Session: Selenium WebDriver (Java)\nDESCRIPTION: This snippet shows how to properly quit a Selenium WebDriver browser session in Java. It calls the `driver.quit()` method, which closes all associated windows, tabs, the browser process, and the background driver process, releasing resources for subsequent sessions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Quitting Browser Session: Selenium WebDriver (Python)\nDESCRIPTION: This snippet shows how to properly quit a Selenium WebDriver browser session in Python. It calls the `driver.quit()` method, which closes all associated windows, tabs, the browser process, and the background driver process, releasing resources for subsequent sessions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Alert in Java\nDESCRIPTION: This Java code snippet demonstrates how to interact with a JavaScript alert using Selenium WebDriver. It finds an element that triggers the alert, waits for the alert to be present, retrieves the alert text, and then accepts the alert. The code uses the `Alert` interface and `ExpectedConditions` to handle the alert.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nAlert alert = wait.until(ExpectedConditions.alertIsPresent());\nString text = alert.getText();\nalert.accept();\n```\n\n----------------------------------------\n\nTITLE: Initializing a Selenium Session\nDESCRIPTION: This snippet demonstrates how to initialize a Selenium WebDriver session in various programming languages. It shows the instantiation of the WebDriver object, which is the entry point for interacting with the browser. This is a fundamental step in any Selenium automation script.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :chrome\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to a New Tab in Selenium (Javascript)\nDESCRIPTION: Opens a new tab using Selenium 4's `newWindow` functionality and switches the driver's focus to it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.switchTo().newWindow('tab');\nawait driver.get('https://www.selenium.dev/');\n```\n\n----------------------------------------\n\nTITLE: Find Element within a DOM Subset\nDESCRIPTION: This snippet shows how to find an element within a specific DOM subset. It first locates the parent element with the ID \"fruits\", and then searches within that element for the first element with the class name \"tomatoes\". This approach is useful when there are multiple elements with the same locator, but you want to target a specific one.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nWebElement fruits = driver.findElement(By.id(\"fruits\"));\nWebElement fruit = fruits.findElement(By.className(\"tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver Session in Selenium\nDESCRIPTION: This snippet initializes a WebDriver session, which is the starting point for interacting with a browser using Selenium. It creates an instance of the WebDriver (e.g., ChromeDriver) to control the browser. Dependencies include the Selenium WebDriver library and the corresponding browser driver executable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Name with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a web element on a page using its NAME attribute with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.Name()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_13\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.Name(\"newsletter\"));\n```\n\n----------------------------------------\n\nTITLE: File Upload with sendKeys in Kotlin\nDESCRIPTION: Uses the sendKeys method to upload a file by specifying its path to the file input element. Requires Selenium WebDriver and a file input element with type=\"file\". Verifies if file uploaded successfully.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.en.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport org.openqa.selenium.By\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    driver.get(\"https://the-internet.herokuapp.com/upload\")\n    driver.findElement(By.id(\"file-upload\")).sendKeys(\"selenium-snapshot.jpg\")\n    driver.findElement(By.id(\"file-submit\")).submit()\n    if(driver.pageSource.contains(\"File Uploaded!\")) {\n        println(\"file uploaded\")\n    }\n    else{\n        println(\"file not uploaded\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies - Java\nDESCRIPTION: This code snippet demonstrates how to delete all cookies from the current browsing context using Selenium WebDriver in Java. It adds cookies and then deletes all using `driver.manage().deleteAllCookies()`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\ndriver.get(\"https://www.example.com\");\nCookie cookie1 = new Cookie(\"test1\", \"cookie1\");\nCookie cookie2 = new Cookie(\"test2\", \"cookie2\");\ndriver.manage().addCookie(cookie1);\ndriver.manage().addCookie(cookie2);\ndriver.manage().deleteAllCookies();\n```\n\n----------------------------------------\n\nTITLE: Maximize Window in Selenium\nDESCRIPTION: This code maximizes the browser window using Selenium WebDriver. It makes the window fill the screen, excluding OS menus and toolbars. The method is available across different programming languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_60\n\nLANGUAGE: Python\nCODE:\n```\ndriver.maximize_window()\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to a New Window/Tab in Selenium\nDESCRIPTION: Demonstrates how to create a new window or tab using Selenium 4's `new_window` functionality and switch the driver's focus to it. The `new_window` method accepts a type argument ('tab' or 'window') to specify whether to create a new tab or a new window. Requires Selenium 4 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_10\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.SwitchTo().NewWindow(WindowType.Tab);\ndriver.Navigate().GoToUrl(\"https://www.google.com\");\n\ndriver.SwitchTo().NewWindow(WindowType.Window);\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev\");\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element w/ Offset using Selenium Wheel (Kotlin)\nDESCRIPTION: Scrolls from a specified element with an offset, by a given amount. Requires the element, x offset, y offset, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"idOfMyElement\"))\nActions(driver)\n  .scrollFromOrigin(WheelInput.Origin.fromElement(element, 15, 25), 20, 50)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Relative Locator - Above in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate an element above another element using Relative Locators in Selenium.  It locates an input element above the element with the id 'password'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_41\n\nLANGUAGE: Kotlin\nCODE:\n```\nval emailLocator = RelativeLocator.with(By.tagName(\"input\")).above(By.id(\"password\"))\n```\n\n----------------------------------------\n\nTITLE: Locating Element by XPath in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate a web element using an XPath expression in Selenium WebDriver. It initializes a ChromeDriver instance and uses the `findElement` method with `By.xpath` to find an input element with the attribute `value` equal to 'f', representing the female radio button.  The XPath expression `//input[@value='f']` is a relative XPath.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.xpath(\"//input[@value='f']\"));\n```\n\n----------------------------------------\n\nTITLE: Python Selenium Setup with Selenium Manager\nDESCRIPTION: This Python code snippet demonstrates the simplified Selenium setup using Selenium Manager.  Selenium Manager automates the driver discovery, eliminating the need to specify the driver executable path manually.  The example navigates to a URL and quits the webdriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.pt-br.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\n\ndriver = webdriver.Chrome()\ndriver.get(\"https://www.selenium.dev\")\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Status - Java\nDESCRIPTION: Demonstrates how to check if a web element is enabled on a webpage using Java and Selenium WebDriver. The `isEnabled()` method returns a boolean indicating whether the element is enabled. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"button_input\"));\nboolean enabled = element.isEnabled();\nassertThat(enabled).isFalse();\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver Session in Selenium\nDESCRIPTION: This snippet initializes a WebDriver session, which is the starting point for interacting with a browser using Selenium. It creates an instance of the WebDriver (e.g., Chrome) to control the browser. Dependencies include the Selenium WebDriver library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndriver = Chrome()\n```\n\n----------------------------------------\n\nTITLE: Context Manager: Selenium WebDriver (Python)\nDESCRIPTION: This Python snippet demonstrates the use of a context manager with `webdriver.Firefox()`. The WebDriver instance is automatically quit at the end of the `with` block, ensuring proper resource cleanup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nwith webdriver.Firefox() as driver:\n  # WebDriver code here...\n\n# WebDriver will automatically quit after indentation\n```\n\n----------------------------------------\n\nTITLE: Navigating to a URL in Selenium WebDriver (CSharp)\nDESCRIPTION: Demonstrates how to open a website using Selenium WebDriver in C#. The driver.Navigate().GoToUrl() method navigates to the specified URL. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/\");\n```\n\n----------------------------------------\n\nTITLE: Create New Window/Tab - Selenium WebDriver\nDESCRIPTION: Demonstrates how to create a new browser window or tab and switch the WebDriver focus to it. This feature is available in Selenium 4 and later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n    # Opens a new tab and switches to new tab\ndriver.switch_to.new_window('tab')\n\n    # Opens a new window and switches to new window\ndriver.switch_to.new_window('window')\n\n```\n\n----------------------------------------\n\nTITLE: Gemfile Dependency Ruby\nDESCRIPTION: This snippet shows how to add the Selenium WebDriver gem to a Gemfile in a Ruby project. It allows Bundler to manage the Selenium WebDriver dependency, ensuring the correct version of the gem is used in the project.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.pt-br.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'selenium-webdriver'\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver Session in Selenium\nDESCRIPTION: This snippet initializes a WebDriver session, which is the starting point for interacting with a browser using Selenium. It creates an instance of the WebDriver (e.g., ChromeDriver) to control the browser. Dependencies include the Selenium WebDriver library and the corresponding browser driver executable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n```\n\n----------------------------------------\n\nTITLE: Navigating to a URL with Selenium\nDESCRIPTION: This snippet demonstrates how to navigate to a specific URL using Selenium WebDriver. It utilizes the `get()` method to load the desired webpage in the browser. The driver must be initialized prior to navigation. No specific dependencies other than the Selenium WebDriver setup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\ndriver.get(\"https://www.google.com\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to a New Window/Tab in Selenium\nDESCRIPTION: Demonstrates how to create a new window or tab using Selenium 4's `new_window` functionality and switch the driver's focus to it. The `new_window` method accepts a type argument ('tab' or 'window') to specify whether to create a new tab or a new window. Requires Selenium 4 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\ndriver.switchTo().newWindow(WindowType.TAB);\ndriver.get(\"https://www.google.com\");\n\ndriver.switchTo().newWindow(WindowType.WINDOW);\ndriver.get(\"https://www.selenium.dev\");\n```\n\n----------------------------------------\n\nTITLE: File Upload using SendKeys Python\nDESCRIPTION: This Python snippet demonstrates how to upload a file by finding the file input element and using the send_keys method to specify the file path. This method bypasses the native file upload dialog.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.pt-br.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://the-internet.herokuapp.com/upload\");\nfile_input = driver.find_element(By.ID, \"file-upload\")\nfile_input.send_keys(\"selenium-snapshot.jpg\")\n```\n\n----------------------------------------\n\nTITLE: Create New Window/Tab - Selenium WebDriver\nDESCRIPTION: Demonstrates how to create a new browser window or tab and switch the WebDriver focus to it. This feature is available in Selenium 4 and later.  It uses `NewWindowType.Tab` or `NewWindowType.Window` to specify the type of new window to create.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_15\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.SwitchTo().NewWindow(NewWindowType.Tab);\n\n\ndriver.SwitchTo().NewWindow(NewWindowType.Window);\n\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its visible text using Selenium WebDriver. The `selectByVisibleText()` method is used to select the option based on the provided text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait select.selectByVisibleText('One');\n```\n\n----------------------------------------\n\nTITLE: Navigating to a URL with Selenium\nDESCRIPTION: This snippet demonstrates how to navigate to a specific URL using Selenium WebDriver. It utilizes the `get()` method to load the desired webpage in the browser. The driver must be initialized prior to navigation. No specific dependencies other than the Selenium WebDriver setup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.get('https://www.google.com/');\n```\n\n----------------------------------------\n\nTITLE: Login Test using Page Object Model in Java\nDESCRIPTION: This code demonstrates a login test using the Page Object Model. It uses the SignInPage and HomePage objects to interact with the UI.  This approach improves code maintainability and reduces duplication.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.en.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n/***\n * Tests login feature\n */\npublic class TestLogin {\n\n  @Test\n  public void testLogin() {\n    SignInPage signInPage = new SignInPage(driver);\n    HomePage homePage = signInPage.loginValidUser(\"userName\", \"password\");\n    assertThat(homePage.getMessageText(), is(\"Hello userName\"));\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Quitting Driver Session - Java\nDESCRIPTION: This Java snippet shows how to quit a Selenium driver session using the `driver.quit()` method. This ensures that the browser process is properly terminated and all associated resources are released.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.en.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Create New Window/Tab - Selenium WebDriver\nDESCRIPTION: Demonstrates how to create a new browser window or tab and switch the WebDriver focus to it. This feature is available in Selenium 4 and later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nOpens a new tab and switches to new tab\nawait driver.switchTo().newWindow('tab');\n\nOpens a new window and switches to new window:\nawait driver.switchTo().newWindow('window');\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium - C#\nDESCRIPTION: This snippet demonstrates how to set an implicit wait in Selenium using C#. The implicit wait is a global setting that tells the WebDriver to wait for a certain amount of time when trying to find an element or elements if they are not immediately available. It uses a TimeSpan to define the duration and applies to the entire session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);\n```\n\n----------------------------------------\n\nTITLE: Evaluate Shadow DOM - CSharp\nDESCRIPTION: This snippet demonstrates how to access and interact with elements within a Shadow DOM using Selenium WebDriver with C#. It finds the shadow host, gets the shadow root, and then finds an element within the shadow root.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_12\n\nLANGUAGE: CSharp\nCODE:\n```\nvar shadowHost = _driver.FindElement(By.CssSelector(\"#shadow_host\"));\nvar shadowRoot = shadowHost.GetShadowRoot();\nvar shadowContent = shadowRoot.FindElement(By.CssSelector(\"#shadow_content\"));\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait - Ruby\nDESCRIPTION: This code snippet shows how to use explicit waits in Ruby. Explicit waits allow you to wait for a specific condition to be true before proceeding with the next command. This example waits up to 10 seconds for the element with ID 'message' to be displayed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.zh-cn.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nWebDriver::Wait.new(timeout: 10).until { driver.find_element(id: 'message').displayed? }\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot in Selenium\nDESCRIPTION: This code takes a screenshot of the current browser window using Selenium WebDriver and saves it as a PNG file. It demonstrates how to initialize a ChromeDriver, navigate to a URL, take the screenshot, and save it to a file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_80\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://example.com/'\n\n    # Takes and Stores the screenshot in specified path\n  driver.save_screenshot('./image.png')\n\nend\n```\n\n----------------------------------------\n\nTITLE: Switching to New Window - Selenium WebDriver\nDESCRIPTION: Demonstrates how to switch the focus of Selenium WebDriver to a new window or tab. It retrieves all available window handles, identifies the new window by comparing with the original, and switches the WebDriver context to it.  It uses selenium and selenium.webdriver.support libraries.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\nwith webdriver.Firefox() as driver:\n    # Open URL\n    driver.get(\"https://seleniumhq.github.io\")\n\n    # Setup wait for later\n    wait = WebDriverWait(driver, 10)\n\n    # Store the ID of the original window\n    original_window = driver.current_window_handle\n\n    # Check we don't have other windows open already\n    assert len(driver.window_handles) == 1\n\n    # Click the link which opens in a new window\n    driver.find_element(By.LINK_TEXT, \"new window\").click()\n\n    # Wait for the new window or tab\n    wait.until(EC.number_of_windows_to_be(2))\n\n    # Loop through until we find a new window handle\n    for window_handle in driver.window_handles:\n        if window_handle != original_window:\n            driver.switch_to.window(window_handle)\n            break\n\n    # Wait for the new tab to finish loading content\n    wait.until(EC.title_is(\"SeleniumHQ Browser Automation\"))\n\n```\n\n----------------------------------------\n\nTITLE: Initializing a Selenium Session\nDESCRIPTION: This snippet demonstrates how to initialize a Selenium WebDriver session in various programming languages. It shows the instantiation of the WebDriver object, which is the entry point for interacting with the browser. This is a fundamental step in any Selenium automation script.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n```\n\n----------------------------------------\n\nTITLE: Click Element Python\nDESCRIPTION: This code snippet demonstrates how to click a web element using Selenium WebDriver in Python. It finds an element by its name attribute ('color_input') and then performs a click action on it. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\nelement = driver.find_element(By.NAME, \"color_input\")\nelement.click()\n\ncolor = element.get_attribute(\"value\")\nassert color == \"#ff0000\"\n```\n\n----------------------------------------\n\nTITLE: Java Selenium Setup with Selenium Manager\nDESCRIPTION: This Java code snippet demonstrates how to use Selenium Manager to manage the ChromeDriver automatically.  With Selenium Manager, the `webdriver.chrome.driver` system property is no longer required, as the tool handles driver discovery and setup.  The example creates a ChromeOptions object, instantiates a ChromeDriver object, navigates to a URL, and then closes the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.pt-br.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\nWebDriver driver = new ChromeDriver(options);\ndriver.get(\"https://www.selenium.dev/\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Tag Name in Selenium\nDESCRIPTION: This code demonstrates how to locate a web element using its HTML tag name in Selenium WebDriver. It initializes a ChromeDriver instance and uses the `findElement` method with `By.tagName(\"a\")` to find the first link element on the page. The example is provided in multiple languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.tagName('a'));\n```\n\n----------------------------------------\n\nTITLE: Setting up WebDriver in Python\nDESCRIPTION: This code snippet demonstrates how to set up a WebDriver instance using ChromeDriver in Python. It initializes the driver and navigates to a specific URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nimport pytest\n\n@pytest.fixture\ndef driver():\n    driver = webdriver.Chrome()\n    driver.get(\"https://www.selenium.dev\")\n    yield driver\n    driver.quit()\n```\n\n----------------------------------------\n\nTITLE: BrowserType deprecation in Selenium Java\nDESCRIPTION: This snippet shows how to replace `BrowserType` with the new `Browser` enum in Selenium 4.  The `BrowserType` interface is deprecated, and the recommended approach is to use the `Browser` enum for specifying the browser name in capabilities. This improves type safety and provides a more modern API.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nMutableCapabilities capabilities = new MutableCapabilities();\ncapabilities.setCapability(\"browserVersion\", \"92\");\ncapabilities.setCapability(\"browserName\", BrowserType.FIREFOX);\n```\n\nLANGUAGE: Java\nCODE:\n```\nMutableCapabilities capabilities = new MutableCapabilities();\ncapabilities.setCapability(\"browserVersion\", \"92\");\ncapabilities.setCapability(\"browserName\", Browser.FIREFOX);\n```\n\n----------------------------------------\n\nTITLE: Python Executable Path (After)\nDESCRIPTION: Demonstrates initializing a Chrome WebDriver instance using a Service object. This is the recommended approach in Selenium 4 to avoid deprecation warnings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service as ChromeService\noptions = webdriver.ChromeOptions()\nservice = ChromeService(executable_path=CHROMEDRIVER_PATH)\ndriver = webdriver.Chrome(service=service, options=options)\n```\n\n----------------------------------------\n\nTITLE: Minimize Window in Selenium\nDESCRIPTION: This code minimizes the browser window using Selenium WebDriver. The exact behavior depends on the window manager and it typically hides the window in the system tray. Requires Selenium 4 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_70\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.manage().window().minimize()\n```\n\n----------------------------------------\n\nTITLE: Create and Switch to New Window - Selenium\nDESCRIPTION: Opens a new window or tab and automatically switches the WebDriver's focus to the newly created window. This simplifies the process of working with new windows/tabs. It utilizes the `new_window` method, available in Selenium 4 and later. It accepts a parameter, 'tab' or 'window', to define the type of the new window to be created. This feature removes the necessity to manually handle window handles.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n    # 打开新标签页并切换到新标签页\ndriver.switch_to.new_window('tab')\n\n    # 打开一个新窗口并切换到新窗口\ndriver.switch_to.new_window('window')\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium - Python\nDESCRIPTION: This snippet demonstrates how to set an implicit wait in Selenium using Python. The implicit wait is a global setting that tells the WebDriver to wait for a certain amount of time when trying to find an element or elements if they are not immediately available. It accepts a numerical duration in seconds, and applies to the entire session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver.implicitly_wait(10)\n```\n\n----------------------------------------\n\nTITLE: File Upload with sendKeys in Python\nDESCRIPTION: This Python snippet shows how to upload a file in Selenium by finding a file input element and using the send_keys method to send the complete path of the file. This avoids the need to interact directly with the file upload dialog. Dependencies: selenium\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.ja.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfile_input = driver.find_element(By.ID, \"file-upload\")\nfile_input.send_keys(\"/path/to/file.txt\")\ndriver.find_element(By.ID, \"upload-button\").click()\n```\n\n----------------------------------------\n\nTITLE: Executing Selenium Manager to Manage Chrome Beta and ChromeDriver\nDESCRIPTION: This command executes Selenium Manager to automatically manage Chrome beta and its corresponding ChromeDriver. It queries the Chrome for Testing (CfT) endpoints, downloads both the Chrome beta and ChromeDriver versions to the local cache, and then provides the paths to both the ChromeDriver and the Chrome browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.ja.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ ./selenium-manager --browser chrome --browser-version beta --debug\nDEBUG   chromedriver not found in PATH\nDEBUG   chrome not found in PATH\nDEBUG   chrome beta not found in the system\nDEBUG   Discovering versions from https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json\nDEBUG   Required browser: chrome 117.0.5938.22\nDEBUG   Downloading chrome 117.0.5938.22 from https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/117.0.5938.22/win64/chrome-win64.zip\nDEBUG   chrome 117.0.5938.22 has been downloaded at C:\\Users\\boni\\.cache\\selenium\\chrome\\win64\\117.0.5938.22\\chrome.exe\nDEBUG   Discovering versions from https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json\nDEBUG   Required driver: chromedriver 117.0.5938.22\nDEBUG   Downloading chromedriver 117.0.5938.22 from https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/117.0.5938.22/win64/chromedriver-win64.zip\nINFO    Driver path: C:\\Users\\boni\\.cache\\selenium\\chromedriver\\win64\\117.0.5938.22\\chromedriver.exe\nINFO    Browser path: C:\\Users\\boni\\.cache\\selenium\\chrome\\win64\\117.0.5938.22\\chrome.exe\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element by Offset - Selenium\nDESCRIPTION: Drags an element by a specified offset. The action presses the left mouse button on the source element, moves the element by the specified x and y offsets, and then releases the mouse button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nsource = @driver.find_element(id: 'draggable')\n@driver.action.click_and_hold(source).move_by(150, 50).release.perform\n```\n\n----------------------------------------\n\nTITLE: Find All Matching Elements by Tag Name - Kotlin\nDESCRIPTION: This snippet demonstrates how to find all elements with a specific tag name using the Selenium WebDriver in Kotlin. It uses the `findElements` method with `By.tagName` to locate all matching elements and returns them as a `List` of `WebElement` objects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nval plants: List<WebElement> = driver.findElements(By.tagName(\"li\"))\n```\n\n----------------------------------------\n\nTITLE: Refresh Page with Selenium (Ruby)\nDESCRIPTION: This snippet demonstrates how to refresh the current page using Selenium WebDriver in Ruby. It calls the `refresh` method on the `navigate` object of the driver instance. This requires an initialized Selenium WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.navigate.refresh\n```\n\n----------------------------------------\n\nTITLE: Find Elements within an Element - CSharp\nDESCRIPTION: This C# code demonstrates finding child elements within a parent element. It retrieves a 'div' element, and then finds all child elements with the tag name 'p' within that element, printing the text of each. The code initializes a ChromeDriver, navigates to a URL, finds the parent element using `driver.FindElement`, finds the child elements using `element.FindElements` and prints the text of each child element in a loop.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_31\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\nusing System.Collections.Generic;\n\nnamespace FindElementsFromElement {\n class FindElementsFromElement {\n  public static void Main(string[] args) {\n   IWebDriver driver = new ChromeDriver();\n   try {\n    driver.Navigate().GoToUrl(\"https://example.com\");\n\n    // Obtém o elemento com o nome da tag 'div'\n    IWebElement element = driver.FindElement(By.TagName(\"div\"));\n\n    // Obtém todos os elementos disponíveis com o nome da tag 'p'\n    IList < IWebElement > elements = element.FindElements(By.TagName(\"p\"));\n    foreach(IWebElement e in elements) {\n     System.Console.WriteLine(e.Text);\n    }\n   } finally {\n    driver.Quit();\n   }\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigate Back with Selenium (JavaScript)\nDESCRIPTION: This snippet shows how to navigate back in the browser's history using Selenium WebDriver in JavaScript. It uses the `back()` method of the WebDriver's navigation interface. It requires an initialized WebDriver instance and a browser history.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.navigate().back();\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Chrome Options\nDESCRIPTION: This code demonstrates how to add command-line arguments to Chrome options for customizing the browser's behavior.  Common arguments include `--start-maximized`, `--headless=new`, and `--user-data-dir=...`. These arguments are passed to the Chrome browser instance when it is launched.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.add_argument('--start-maximized')\n```\n\n----------------------------------------\n\nTITLE: Relative Locators: Locating Element Above\nDESCRIPTION: This code demonstrates how to locate an element above another element using Relative Locators in Selenium 4. It uses the `RelativeLocator.with(By.tagName(\"input\")).above(By.id(\"password\"))` to find an input element that is located above the element with the ID \"password\". This is helpful when direct locators are difficult to create.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_37\n\nLANGUAGE: Java\nCODE:\n```\nBy emailLocator = RelativeLocator.with(By.tagName(\"input\")).above(By.id(\"password\"));\n```\n\n----------------------------------------\n\nTITLE: Add Network Intercept in Java\nDESCRIPTION: This code snippet demonstrates how to add a network intercept using Selenium's BiDi API in Java. It requires the Selenium WebDriver and BiDi dependencies. The snippet intercepts all network requests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nNetwork.addIntercept(devTools, Pattern.compile(\".*\"),\n        new AddInterceptParameters().withPhase(Event.BEFORE_REQUEST_SENT));\n```\n\n----------------------------------------\n\nTITLE: Get Current Window Handle - Selenium WebDriver\nDESCRIPTION: Retrieves the unique identifier (window handle) of the current browser window or tab within a Selenium WebDriver session.  This handle can be used later to switch back to this window.  The window handle is persistent throughout the session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nString originalWindow = driver.getWindowHandle();\n\nassertNotNull(originalWindow);\n\nSystem.out.println(originalWindow);\n\n```\n\n----------------------------------------\n\nTITLE: Refresh Page with Selenium (Java)\nDESCRIPTION: This snippet demonstrates how to refresh the current page using Selenium WebDriver in Java. It calls the `navigate().refresh()` method. The code assumes that the WebDriver has already been initialized and a page is currently loaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\ndriver.navigate().refresh();\n```\n\n----------------------------------------\n\nTITLE: Printing Page in Python with Selenium\nDESCRIPTION: This snippet demonstrates how to print a page using Selenium in Python.  It sets print options for page ranges and then uses the `print_page` method to get a base64 encoded string representation of the page. Requires the PrintOptions class from selenium.webdriver.common.print_page_options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_93\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.common.print_page_options import PrintOptions\n\n    print_options = PrintOptions()\n    print_options.page_ranges = ['1-2']\n\n    driver.get(\"printPage.html\")\n\n    base64code = driver.print_page(print_options)\n```\n\n----------------------------------------\n\nTITLE: File Upload with sendKeys in Java\nDESCRIPTION: Uses the sendKeys method to upload a file by specifying its path to the file input element. Requires Selenium WebDriver and a file input element with type=\"file\".\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.en.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver.findElement(By.id(\"file-upload\")).sendKeys(\"/path/to/your/file.txt\");\ndriver.findElement(By.id(\"upload-button\")).click();\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver Session\nDESCRIPTION: This snippet shows how to initialize a WebDriver session, which is the starting point for interacting with a browser using Selenium. It creates an instance of a specific browser driver (e.g., ChromeDriver, FirefoxDriver).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n```\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Chrome()\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebDriver driver = new ChromeDriver();\n```\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :chrome\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndriver = await new Builder().forBrowser('chrome').build();\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element in DOM - Python\nDESCRIPTION: This snippet finds the first element with the class name \"tomatoes\" in the entire DOM using Selenium WebDriver with Python. It uses the `find_element` method with `By.CLASS_NAME` locator. The returned element represents the first matching element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nvegetable = driver.find_element(By.CLASS_NAME, \"tomatoes\")\n```\n\n----------------------------------------\n\nTITLE: Navigating to a URL with Selenium\nDESCRIPTION: This snippet demonstrates how to navigate to a specific URL using Selenium WebDriver. It utilizes the `Navigate().GoToUrl()` method to load the desired webpage in the browser. The driver must be initialized prior to navigation. No specific dependencies other than the Selenium WebDriver setup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.google.com\");\n```\n\n----------------------------------------\n\nTITLE: Relative Locators: Locating Element Above\nDESCRIPTION: This code demonstrates how to locate an element above another element using Relative Locators in Selenium 4. It uses the `RelativeLocator.with(By.tagName(\"input\")).above(By.id(\"password\"))` to find an input element that is located above the element with the ID \"password\". This is helpful when direct locators are difficult to create.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_39\n\nLANGUAGE: CSharp\nCODE:\n```\nvar emailLocator = RelativeBy.WithLocator(By.TagName(\"input\")).Above(By.Id(\"password\"));\n```\n\n----------------------------------------\n\nTITLE: C# Additional Capability (After)\nDESCRIPTION: Demonstrates adding an additional option using `AddAdditionalOption` in C#. This is the recommended approach in Selenium 4.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_32\n\nLANGUAGE: CS\nCODE:\n```\nvar browserOptions = new ChromeOptions();\nbrowserOptions.PlatformName = \"Windows 10\";\nbrowserOptions.BrowserVersion = \"latest\";\nvar cloudOptions = new Dictionary<string, object>();\nbrowserOptions.AddAdditionalOption(\"cloud:options\", cloudOptions);\n```\n\n----------------------------------------\n\nTITLE: Navigate Back with Selenium (Java)\nDESCRIPTION: This snippet demonstrates how to navigate back in the browser's history using Selenium WebDriver in Java. It calls the `navigate().back()` method. The code assumes that the WebDriver has already been initialized and the browser has a history.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\ndriver.navigate().back();\n```\n\n----------------------------------------\n\nTITLE: Create New Window/Tab - Selenium WebDriver\nDESCRIPTION: Demonstrates how to create a new browser window or tab and switch the WebDriver focus to it. This feature is available in Selenium 4 and later.  It uses `WindowType.TAB` or `WindowType.WINDOW` to specify the type of new window to create.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Opens a new tab and switches to new tab\ndriver.switchTo().newWindow(WindowType.TAB)\n\n// Opens a new window and switches to new window\ndriver.switchTo().newWindow(WindowType.WINDOW)\n\n```\n\n----------------------------------------\n\nTITLE: Find Element with Optimized Locator (CSS) - Kotlin\nDESCRIPTION: This snippet finds an element with a specific CSS selector in a single command using Selenium WebDriver with Kotlin, improving performance compared to nested lookups. It uses the `findElement` method with `By.cssSelector` locator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\nval fruit = driver.findElement(By.cssSelector(\"#fruits .tomatoes\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Firefox Options\nDESCRIPTION: This code snippet demonstrates how to add arguments to Firefox options, commonly used for setting headless mode or specifying a profile. The `AddArgument` method is used to pass command-line switches to the Firefox browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\noptions.AddArgument(\"--headless\");\n```\n\n----------------------------------------\n\nTITLE: Starting Distributed Selenium Grid (PostgreSQL)\nDESCRIPTION: This Bash script starts a distributed Selenium Grid with the session map backed by a PostgreSQL database. It defines variables for the Selenium version, JAR name, and event bus addresses, then starts the event bus, session queue, session map (using JdbcBackedSessionMap), distributor, router, and node. It uses coursier to fetch the selenium-session-map-jdbc and postgresql dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.en.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nSE_VERSION=<current_selenium_version>\nJAR_NAME=selenium-server-${SE_VERSION}.jar\nPUBLISH=\"--publish-events tcp://localhost:4442\"\nSUBSCRIBE=\"--subscribe-events tcp://localhost:4443\"\nSESSIONS=\"--sessions http://localhost:5556\"\nSESSIONS_QUEUE=\"--sessionqueue http://localhost:5559\"\necho 'Starting Event Bus'\njava -jar $JAR_NAME event-bus $PUBLISH $SUBSCRIBE --port 5557 &\necho 'Starting New Session Queue'\njava -jar $JAR_NAME sessionqueue --port 5559 &\necho 'Starting Sessions Map'\njava -jar $JAR_NAME \\\n--ext $(coursier fetch -p org.seleniumhq.selenium:selenium-session-map-jdbc:${SE_VERSION} org.postgresql:postgresql:42.3.1) \\\nsessions $PUBLISH $SUBSCRIBE --port 5556 --config sessions.toml &\necho 'Starting Distributor'\njava -jar $JAR_NAME  distributor $PUBLISH $SUBSCRIBE $SESSIONS $SESSIONS_QUEUE --port 5553 --bind-bus false &\necho 'Starting Router'\njava -jar $JAR_NAME router $SESSIONS --distributor http://localhost:5553 $SESSIONS_QUEUE --port 4444 &\necho 'Starting Node'\njava -jar $JAR_NAME node $PUBLISH $SUBSCRIBE &\n```\n\n----------------------------------------\n\nTITLE: Pip Install Selenium Python\nDESCRIPTION: This snippet shows the command to install Selenium using pip, the Python package installer. This command downloads and installs the latest version of the Selenium library along with its dependencies, enabling the user to start automating web browsers with Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.pt-br.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install selenium\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium Java\nDESCRIPTION: This snippet demonstrates how to check if a disabled option can be selected in Java. It attempts to select a disabled option and asserts that an exception is thrown. Requires Selenium 4.5 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_36\n\nLANGUAGE: Java\nCODE:\n```\nAssertions.assertThrows(InvalidElementStateException.class, () ->\n  select.selectByVisibleText(\"disabled\"));\n```\n\n----------------------------------------\n\nTITLE: Exception Handling: Selenium WebDriver (Java)\nDESCRIPTION: This Java snippet demonstrates how to use a `try...finally` block to ensure that the WebDriver instance is always quit, even if an exception occurs during the WebDriver interaction.  The `driver.quit()` call in the `finally` block guarantees resource cleanup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_30\n\nLANGUAGE: java\nCODE:\n```\ntry {\n    //WebDriver code here...\n} finally {\n    driver.quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Find All Matching Elements - CSharp\nDESCRIPTION: This snippet finds all elements with the tag name \"li\" on the page and returns them as a read-only list of `IWebElement` objects using Selenium WebDriver with C#. If no matches are found, an empty list is returned.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_21\n\nLANGUAGE: CSharp\nCODE:\n```\nIReadOnlyList<IWebElement> plants = driver.FindElements(By.TagName(\"li\"));\n```\n\n----------------------------------------\n\nTITLE: File Upload with sendKeys in Java\nDESCRIPTION: This Java snippet demonstrates how to upload a file in Selenium by locating a file input element and using the sendKeys method to send the full path of the file to be uploaded.  It assumes you have a WebDriver instance and have navigated to the page containing the file input. Dependencies: org.openqa.selenium\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver.findElement(By.id(\"file-upload\")).sendKeys(\"/path/to/file.txt\");\ndriver.findElement(By.id(\"upload-button\")).click();\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Chrome Options\nDESCRIPTION: This code demonstrates how to add command-line arguments to Chrome options for customizing the browser's behavior.  Common arguments include `--start-maximized`, `--headless=new`, and `--user-data-dir=...`. These arguments are passed to the Chrome browser instance when it is launched.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\noptions.add_argument(\"--start-maximized\")\n```\n\n----------------------------------------\n\nTITLE: Locate Element in Shadow DOM\nDESCRIPTION: This snippet demonstrates how to access and locate an element within a Shadow DOM using Selenium. It first finds the shadow host element using CSS selector, then obtains the shadow root, and finally locates the desired element within the shadow root using another CSS selector. Requires Selenium 4.0 or greater.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\nshadow_host = @driver.find_element(css: '#shadow_host')\nshadow_root = shadow_host.shadow_root\nshadow_content = shadow_root.find_element(css: '#shadow_content')\n```\n\n----------------------------------------\n\nTITLE: Click Element with Selenium WebDriver in Python\nDESCRIPTION: This Python code snippet demonstrates how to locate an element by its name and then simulate a click on that element using Selenium WebDriver. Before clicking, Selenium ensures the element is interactable, scrolling it into view if necessary. This snippet requires a WebDriver instance already initialized and a web page loaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\nelement = driver.find_element(By.NAME, \"color_input\")\nelement.click()\n\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait with Lambda - Python\nDESCRIPTION: This code snippet shows how to use explicit waits with a lambda expression in Python. Explicit waits allow you to wait for a specific condition to be true before proceeding with the next command. This example waits up to 10 seconds for the element with ID 'message' to be displayed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.zh-cn.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nWebDriverWait(driver, 10).until(lambda d: d.find_element(By.ID, \"message\").is_displayed())\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use an explicit wait to verify if an element is displayed on a page. It uses `WebDriverWait` to wait for the element with the ID `message` to be displayed. This prevents the code from attempting to interact with the element before it is fully loaded and visible.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.pt-br.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.wait(until.elementIsVisible(By.id('message')), 10000);\n```\n\n----------------------------------------\n\nTITLE: Quitting Selenium WebDriver Session\nDESCRIPTION: This snippet shows how to properly close the WebDriver session using the `quit` method (or equivalent). This closes all browser windows and ends the WebDriver process, releasing resources.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.zh-cn.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\ndriver.quit();\n```\n\nLANGUAGE: Python\nCODE:\n```\ndriver.quit()\n```\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Quit();\n```\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.quit\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.quit();\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy in JavaScript\nDESCRIPTION: This JavaScript code configures a proxy server for Selenium WebDriver. It uses selenium-webdriver and selenium-webdriver/chrome.  Replace '<HOST:PORT>' with the actual proxy address.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet webdriver = require('selenium-webdriver');\nlet chrome = require('selenium-webdriver/chrome');\nlet proxy = require('selenium-webdriver/proxy');\nlet opts = new chrome.Options();\n\n(async function example() {\nopts.setProxy(proxy.manual({http: '<HOST:PORT>'}));\nlet driver = new webdriver.Builder()\n.forBrowser('chrome')\n.setChromeOptions(opts)\n.build();\ntry {\nawait driver.get(\"https://selenium.dev\");\n}\nfinally {\nawait driver.quit();\n}\n}());\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtualAuthenticatorOptions in Python\nDESCRIPTION: This code snippet illustrates how to initialize VirtualAuthenticatorOptions in Python. It sets the protocol, domain, cross-origin setting, and resident key requirement, configuring the behavior of the emulated authenticator.  This code relies on the Selenium WebDriver library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\noptions = VirtualAuthenticatorOptions(\n    protocol=VirtualAuthenticatorOptions.Protocol.HTTPS,\n    domain=\"example.com\",\n    cross_origin=False,\n    resident_key_required=True)\n```\n\n----------------------------------------\n\nTITLE: Maximize Window in Selenium\nDESCRIPTION: This code maximizes the browser window using Selenium WebDriver. It makes the window fill the screen, excluding OS menus and toolbars. The method is available across different programming languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_59\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().window().maximize();\n```\n\n----------------------------------------\n\nTITLE: Getting All Options in Selenium Ruby\nDESCRIPTION: This snippet shows how to retrieve all options from a Select element in Ruby. It uses the `options` method of the Select object, returning a list of WebElements representing each option.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = select.options\n```\n\n----------------------------------------\n\nTITLE: Locating Element by XPath in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate a web element using XPath in Selenium.  It initializes a WebDriver and uses `By.xpath()` to locate an input element with the attribute `value` set to 'f', representing a female radio button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_31\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.xpath('//input[@value=\\'f\\']'))\n```\n\n----------------------------------------\n\nTITLE: Locating Element by CSS Selector with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a web element using a CSS selector with Selenium WebDriver. It assumes a ChromeDriver instance is created and uses the `By.css()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.css('#fname'));\n```\n\n----------------------------------------\n\nTITLE: Maximize Window - Selenium WebDriver - Java\nDESCRIPTION: This snippet maximizes the browser window using the Selenium WebDriver API in Java. Maximizing typically expands the window to fill the screen without obstructing OS menus. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_35\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().window().maximize();\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options from Select Element\nDESCRIPTION: This code retrieves all selected options from a <select> element using Selenium's Select class. The `all_selected_options` attribute returns a list of WebElements representing the selected options within the select list.  For single selects, this will be a list with one element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nselected_options = select.all_selected_options\n```\n\n----------------------------------------\n\nTITLE: Find Element by ID - C#\nDESCRIPTION: This snippet demonstrates locating a web element using its ID in C#. It initializes a ChromeDriver and uses the `FindElement` method with `By.Id` to locate the element with the ID 'lname'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_9\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.Id(\"lname\"));\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium Java\nDESCRIPTION: This snippet shows how to select an option in a Select element by its value attribute in Java. It uses the `selectByValue()` method of the Select object.  It throws NoSuchElementException if no matching option is found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nselect.selectByValue(\"two\");\n```\n\n----------------------------------------\n\nTITLE: Navigating to a URL in Selenium WebDriver (Python)\nDESCRIPTION: Demonstrates how to open a website using Selenium WebDriver in Python. This uses the `get` method to navigate to the specified URL. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://selenium.dev\")\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium (JavaScript)\nDESCRIPTION: Demonstrates how to perform a copy and paste action using the Actions API in JavaScript. It checks the OS to determine the correct key for copy/paste.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst element = await driver.findElement(By.tagName('input'));\nawait element.sendKeys('Selenium');\nconst selectAll = process.platform === 'darwin' ? Key.COMMAND + 'a' : Key.CONTROL + 'a';\nconst copy = process.platform === 'darwin' ? Key.COMMAND + 'c' : Key.CONTROL + 'c';\nconst paste = process.platform === 'darwin' ? Key.COMMAND + 'v' : Key.CONTROL + 'v';\nawait element.sendKeys(selectAll);\nawait element.sendKeys(copy);\nawait element.sendKeys(paste);\nawait element.sendKeys(Key.chord(Key.SHIFT, '1'));\n```\n\n----------------------------------------\n\nTITLE: Start Selenium Grid Node with Custom Capabilities\nDESCRIPTION: Starts a Selenium Grid Node with custom capabilities. The `--detect-drivers false` flag disables automatic driver detection, `--driver-configuration` sets the display name, `max-sessions` limits the number of concurrent sessions, and `stereotype` defines the browser and custom capability. The `--port` specifies the port for the node.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.zh-cn.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njava -jar selenium-server-<version>.jar node --detect-drivers false --driver-configuration display-name=\"Chrome (custom capability true)\" max-sessions=1 stereotype='{\"browserName\":\"chrome\",\"gsg:customcap\":true}' --port 6161\n```\n\n----------------------------------------\n\nTITLE: Iterating Through WebElements Collection - Java\nDESCRIPTION: This code snippet demonstrates how to retrieve a collection of web elements using `driver.findElements` and iterate through them to extract and print the text content of each element. It initializes a `List` of `WebElement` objects, then iterates through the elements, printing each one's text using `element.getText()`. The example finds all `<li>` elements on the page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nList<WebElement> elements = driver.findElements(By.tagName(\"li\"));\n\nfor (WebElement element : elements) {\n    System.out.println(\"Paragraph text:\" + element.getText());\n}\n```\n\n----------------------------------------\n\nTITLE: Printing with PrintOptions - C#\nDESCRIPTION: This C# snippet prints a page using IPrint with configured PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_23\n\nLANGUAGE: CSharp\nCODE:\n```\nIPrint print = (IPrint)driver;\nPrintOptions printOptions = new PrintOptions();\nprintOptions.Orientation = PrintOrientation.Landscape;\nvar pdf = Convert.FromBase64String(print.Print(printOptions));\nFile.WriteAllBytes(\"test.pdf\", pdf);\n```\n\n----------------------------------------\n\nTITLE: Switching to New Window - Selenium WebDriver\nDESCRIPTION: Demonstrates how to switch the focus of Selenium WebDriver to a new window or tab. It retrieves all available window handles, identifies the new window by comparing with the original, and switches the WebDriver context to it. Requires selenium-webdriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\n    # Store the ID of the original window\noriginal_window = driver.window_handle\n\n    # Check we don't have other windows open already\nassert(driver.window_handles.length == 1, 'Expected one window')\n\n    # Click the link which opens in a new window\ndriver.find_element(link: 'new window').click\n\n    # Wait for the new window or tab\nwait.until { driver.window_handles.length == 2 }\n\n    #Loop through until we find a new window handle\ndriver.window_handles.each do |handle|\n    if handle != original_window\n        driver.switch_to.window handle\n        break\n    end\nend\n\n    #Wait for the new tab to finish loading content\nwait.until { driver.title == 'Selenium documentation'}\n\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element in DOM - Java\nDESCRIPTION: This snippet finds the first element with the class name \"tomatoes\" in the entire DOM using Selenium WebDriver with Java. It uses the `findElement` method with `By.className` locator. The returned `WebElement` represents the first matching element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebElement vegetable = driver.findElement(By.className(\"tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Get Element Text in Java\nDESCRIPTION: This code snippet demonstrates how to retrieve the text of a web element using Selenium WebDriver in Java. It uses the `getText()` method of the WebElement interface. The method returns the visible text of the element as a String.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_36\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"justanotherlink\"));\nString text = element.getText();\nassertThat(text).isEqualTo(\"just another link\");\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its `value` attribute using Selenium WebDriver. The `selectByValue()` method is used to select the option based on the provided value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nselect.selectByValue(\"one\")\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Element with Selenium WebDriver in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to navigate to a URL, locate an element, clear its content, and then send keys to it using Selenium WebDriver. It assumes `driver` is a WebDriver instance initialized with a browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.selenium.dev/selenium/web/inputs.html')\nconst emailInput = await driver.findElement(By.name('email_input'))\nawait emailInput.clear()\nawait emailInput.sendKeys('admin@localhost.dev')\n\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Web Page\nDESCRIPTION: This snippet shows how to navigate the browser to a specific URL using Selenium.  It uses the `get` or `navigate().to()` method of the WebDriver to load a web page. The target URL is a required parameter.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.google.com/');\n```\n\n----------------------------------------\n\nTITLE: BiDi Java Imports (After 4.19)\nDESCRIPTION: These import statements are required to access Selenium BiDi APIs in Java from version 4.19 onwards. The classes are now located within the `org.openqa.selenium.bidi.module` package. This change was implemented to resolve a circular dependency issue.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2024/bidi-java-breaking-change.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.bidi.module.LogInspector;\nimport org.openqa.selenium.bidi.module.BrowsingContextInspector;\nimport org.openqa.selenium.bidi.module.Input;\nimport org.openqa.selenium.bidi.module.Script;\nimport org.openqa.selenium.bidi.module.Network;\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - Selenium WebDriver - JavaScript\nDESCRIPTION: This snippet sets the size of the browser window to 1024x768 pixels using the Selenium WebDriver API in JavaScript. It uses the setRect method and requires an await since it is asynchronous. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.manage().window().setRect({width: 1024, height: 768});\n```\n\n----------------------------------------\n\nTITLE: Getting Current URL with Selenium\nDESCRIPTION: This snippet retrieves the current URL of the webpage loaded in the browser using Selenium WebDriver. It demonstrates how to access the current URL in different programming languages. Dependencies: Selenium WebDriver library for the respective language.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.zh-cn.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.current_url\n```\n\n----------------------------------------\n\nTITLE: Click and Hold with Selenium\nDESCRIPTION: Moves the mouse to the center of an element and presses the left mouse button, useful for focusing an element. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(:id, 'clickable')\n@driver.action.move_to(element).click_and_hold.perform\n\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel Java\nDESCRIPTION: This snippet demonstrates how to scroll to a specific element within a web page using Selenium's Wheel actions in Java. It takes a WebElement as input and scrolls the viewport such that the bottom of the element is at the bottom of the screen. This is often needed before interacting with an element that might not be initially visible in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"target\"));\nnew Actions(driver)\n  .scroll(element, 0, 0)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait with Lambda - Python\nDESCRIPTION: This Python snippet demonstrates how to implement an explicit wait using a lambda expression. It waits for a maximum of 10 seconds for the condition specified within the lambda to become true. The lambda checks if the element's text content is 'Selenium'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.en.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nelement = WebDriverWait(driver, 10).until(lambda d: d.find_element(By.TAG_NAME, \"p\")\n    .text.startswith(\"Selenium\"))\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to Eager in Python\nDESCRIPTION: This snippet shows how to set the page load strategy to 'eager' in Python using Selenium. WebDriver waits until the DOMContentLoaded event is fired.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\noptions = Options()\noptions.page_load_strategy = \"eager\"\ndriver = webdriver.Chrome(options=options)\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's Select class, specifically by matching the visible text of the option. The `select_by(:text, 'text')` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nselect.select_by(:text, 'Four')\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop on Element with Selenium\nDESCRIPTION: This code performs a drag-and-drop operation from one element to another using Selenium WebDriver. It first clicks and holds the source element, then moves to the target element's location, and finally releases the mouse. It leverages the `drag_and_drop` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsource = driver.find_element(By.ID, \"draggable\")\ntarget = driver.find_element(By.ID, \"droppable\")\nActionChains(driver).drag_and_drop(source, target).perform()\n```\n\n----------------------------------------\n\nTITLE: Failing Button Click (No Frame Switch)\nDESCRIPTION: This code snippet shows an example of how an attempt to click a button within an IFrame will fail without first switching to the IFrame. It demonstrates the need to change the driver's focus to the frame before interacting with the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# This Wont work\ndriver.find_element(By.TAG_NAME, 'button').click()\n```\n\n----------------------------------------\n\nTITLE: Find All Matching Elements - Python\nDESCRIPTION: This snippet finds all elements with the tag name \"li\" on the page and returns them as a list using Selenium WebDriver with Python. If no matches are found, an empty list is returned.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nplants = driver.find_elements(By.TAG_NAME, \"li\")\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Timeout in Java\nDESCRIPTION: This code snippet demonstrates how to set the page load timeout in Java. This specifies the maximum time the WebDriver will wait for a page to load. If the page does not load within the specified time, a TimeoutException is thrown.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_34\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));\n```\n\n----------------------------------------\n\nTITLE: Switching to a New Window/Tab in Selenium\nDESCRIPTION: This code demonstrates how to switch the WebDriver's focus to a newly opened window or tab. It first stores the original window handle, then iterates through all available window handles to find the new window, and switches to it. It depends on the Selenium WebDriver library and requires having a link that opens in a new window.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n    # Start the driver\nwith webdriver.Firefox() as driver:\n    # Open URL\n    driver.get(\"https://seleniumhq.github.io\")\n\n    # Setup wait for later\n    wait = WebDriverWait(driver, 10)\n\n    # Store the ID of the original window\n    original_window = driver.current_window_handle\n\n    # Check we don't have other windows open already\n    assert len(driver.window_handles) == 1\n\n    # Click the link which opens in a new window\n    driver.find_element(By.LINK_TEXT, \"new window\").click()\n\n    # Wait for the new window or tab\n    wait.until(EC.number_of_windows_to_be(2))\n\n    # Loop through until we find a new window handle\n    for window_handle in driver.window_handles:\n        if window_handle != original_window:\n            driver.switch_to.window(window_handle)\n            break\n\n    # Wait for the new tab to finish loading content\n    wait.until(EC.title_is(\"SeleniumHQ Browser Automation\"))\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its visible text using Selenium WebDriver. The `selectByVisibleText()` method is used to select the option based on the provided text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nselect.selectByVisibleText(\"One\");\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium (Ruby)\nDESCRIPTION: This Ruby code demonstrates a copy and paste operation using Selenium's Actions API. It types 'Selenium', selects all text (using CTRL+A or CMD+A), copies the text (CTRL+C or CMD+C), moves to the end of the line, pastes the copied text (CTRL+V or CMD+V), and then adds an exclamation mark. The final result should be 'SeleniumSelenium!'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nif OS.mac?\n  select_all = Selenium::WebDriver::Keys::COMMAND + 'a'\n  copy = Selenium::WebDriver::Keys::COMMAND + 'c'\n  paste = Selenium::WebDriver::Keys::COMMAND + 'v'\nelse\n  select_all = Selenium::WebDriver::Keys::CONTROL + 'a'\n  copy = Selenium::WebDriver::Keys::CONTROL + 'c'\n  paste = Selenium::WebDriver::Keys::CONTROL + 'v'\nend\n\nactions = driver.action\nactions.send_keys('Selenium')\n  .key_down(select_all).key_up(select_all)\n  .key_down(copy).key_up(copy)\n  .send_keys(Selenium::WebDriver::Keys::END)\n  .key_down(paste).key_up(paste)\n  .send_keys('!')\n  .perform\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium in CSharp\nDESCRIPTION: This snippet demonstrates how to start a Selenium WebDriver session in C#, navigate to a webpage, and close the browser. It requires the Selenium WebDriver package to be installed via NuGet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\npublic class HelloSelenium\n{\n    public static void Main(string[] args)\n    {\n        using (IWebDriver driver = new ChromeDriver())\n        {\n            driver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/index.html\");\n            driver.Quit();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Waits - C#\nDESCRIPTION: This code snippet illustrates how to customize waits in C# by specifying the polling interval and ignoring specific exceptions. It waits up to 10 seconds, polls every 100 milliseconds, and ignores NoSuchElementException.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.zh-cn.md#_snippet_12\n\nLANGUAGE: CSharp\nCODE:\n```\nDefaultWait<IWebDriver> wait = new DefaultWait<IWebDriver>(driver);\nwait.Timeout = TimeSpan.FromSeconds(10);\nwait.PollingInterval = TimeSpan.FromMilliseconds(100);\nwait.IgnoreExceptionTypes(typeof(NoSuchElementException));\nIWebElement element = wait.Until(x => x.FindElement(By.Id(\"foo\")));\n```\n\n----------------------------------------\n\nTITLE: HomePage Page Object - Java\nDESCRIPTION: This snippet defines a Page Object for the home page. It encapsulates the page's elements (welcome message) using By locators and provides a method to get the text of the welcome message. It requires WebDriver and By from Selenium. The constructor verifies the driver is on the expected home page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.pt-br.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\n\n/**\n * Page Object encapsula a Página Inicial\n */\npublic class HomePage {\n  protected WebDriver driver;\n\n  // <h1>Hello userName</h1>\n  private By messageBy = By.tagName(\"h1\");\n\n  public HomePage(WebDriver driver){\n    this.driver = driver;\n    if (!driver.getTitle().equals(\"Home Page of logged in user\")) {\n      throw new IllegalStateException(\"This is not Home Page of logged in user,\" +\n            \" current page is: \" + driver.getCurrentUrl());\n    }\n  }\n\n  /**\n    * Obtém a mensagem (tag h1)\n    * \n    * @return String da mensagem de texto\n    */\n  public String getMessageText() {\n    return driver.findElement(messageBy).getText();\n  }\n\n  public HomePage manageProfile() {\n    // Encapsulamento da página para gerenciar a funcionalidade do perfil\n    return new HomePage(driver);\n  }\n  /* Mais métodos que oferecem os serviços representados pela Página inicial do usuário logado. Estes métodos por sua vez podem retornar mais Page Object, por exemplo, clicar no botão \"Compor email\" pode retornar um objeto da classe ComposeMail */\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Elements From Element in C#\nDESCRIPTION: This C# code snippet demonstrates how to locate child elements within a specified parent element using Selenium WebDriver. It initializes a ChromeDriver, navigates to a URL, finds an element with the tag name 'div', then finds all 'p' elements within that 'div', and prints their text content. It relies on the Selenium WebDriver and ChromeDriver NuGet packages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_31\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\nusing System.Collections.Generic;\n\nnamespace FindElementsFromElement {\n class FindElementsFromElement {\n  public static void Main(string[] args) {\n   IWebDriver driver = new ChromeDriver();\n   try {\n    driver.Navigate().GoToUrl(\"https://example.com\");\n\n    // Get element with tag name 'div'\n    IWebElement element = driver.FindElement(By.TagName(\"div\"));\n\n    // Get all the elements available with tag name 'p'\n    IList < IWebElement > elements = element.FindElements(By.TagName(\"p\"));\n    foreach(IWebElement e in elements) {\n     System.Console.WriteLine(e.Text);\n    }\n   } finally {\n    driver.Quit();\n   }\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Log Truncation in Firefox with Selenium (Java)\nDESCRIPTION: This snippet shows how to disable log truncation in Firefox when using Selenium WebDriver in Java. This is useful when the driver logs large binaries that are being truncated by default. It uses FirefoxOptions to set the preference `GeckoDriverService.GECKO_DRIVER_LOG_NO_TRUNCATE` to `true`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_26\n\nLANGUAGE: java\nCODE:\n```\noptions.setPreference(\"GeckoDriverService.GECKO_DRIVER_LOG_NO_TRUNCATE\", true);\nWebDriver driver = new FirefoxDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Querying Max Session Count in Grid\nDESCRIPTION: This example demonstrates how to query the maximum session count in the Selenium Grid. The `curl` command is used to send the GraphQL query to the appropriate endpoint.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.en.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ grid { maxSession } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Find Element by Class Name - C#\nDESCRIPTION: This snippet demonstrates how to locate a web element using its class name in C#. It initializes a ChromeDriver and uses the `FindElement` method with `By.ClassName` to find the element with the class 'information'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.ClassName(\"information\"));\n```\n\n----------------------------------------\n\nTITLE: Locating Element by XPath in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate a web element using an XPath expression in Selenium WebDriver. It initializes a ChromeDriver instance and uses the `findElement` method with `By.xpath` to find an input element with the attribute `value` equal to 'f', representing the female radio button.  The XPath expression `//input[@value='f']` is a relative XPath.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.xpath('//input[@value='f']'));\n```\n\n----------------------------------------\n\nTITLE: Getting Element Tag Name with Selenium\nDESCRIPTION: This snippet demonstrates how to retrieve the tag name of an HTML element using Selenium WebDriver. The `getTagName()` method is called on the identified element. This returns the HTML tag (e.g., 'input', 'div', 'a').  Dependencies include an initialized WebDriver instance, a loaded webpage, and a found element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nString tagName = searchBox.getTagName();\n```\n\n----------------------------------------\n\nTITLE: HomePage Page Object in Java\nDESCRIPTION: This code demonstrates a Page Object for the Home page using Selenium WebDriver. It encapsulates the locators and actions related to the Home page. The constructor verifies the page is loaded correctly. The `getMessageText` method retrieves the message text from the page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.en.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\n\n/**\n * Page Object encapsulates the Home Page\n */\npublic class HomePage {\n  protected WebDriver driver;\n\n  // <h1>Hello userName</h1>\n  private By messageBy = By.tagName(\"h1\");\n\n  public HomePage(WebDriver driver){\n    this.driver = driver;\n    if (!driver.getTitle().equals(\"Home Page of logged in user\")) {\n      throw new IllegalStateException(\"This is not Home Page of logged in user,\" +\n            \" current page is: \" + driver.getCurrentUrl());\n    }\n  }\n\n  /**\n    * Get message (h1 tag)\n    *\n    * @return String message text\n    */\n  public String getMessageText() {\n    return driver.findElement(messageBy).getText();\n  }\n\n  public HomePage manageProfile() {\n    // Page encapsulation to manage profile functionality\n    return new HomePage(driver);\n  }\n  /* More methods offering the services represented by Home Page\n  of Logged User. These methods in turn might return more Page Objects\n  for example click on Compose mail button could return ComposeMail class object */\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Keys to an Element\nDESCRIPTION: This snippet demonstrates how to simulate typing text into an input field using Selenium. The `sendKeys` method is used to send a sequence of characters to the specified element. The `Keys.ENTER` parameter simulates pressing the Enter key.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\nsearchBox.sendKeys(\"Selenium\", Keys.ENTER);\n```\n\n----------------------------------------\n\nTITLE: Setting unhandledPromptBehavior in Python\nDESCRIPTION: This Python code shows how to set the `unhandledPromptBehavior` capability in Selenium. The `unhandledPromptBehavior` defines how the browser handles user prompts. The option selected should be a string value of 'dismiss', 'accept', 'dismiss and notify', 'accept and notify', or 'ignore'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\noptions = Options()\noptions.unhandled_prompt_behavior = 'accept'\n```\n\n----------------------------------------\n\nTITLE: Click Element with Selenium WebDriver in CSharp\nDESCRIPTION: This CSharp code snippet demonstrates how to locate an element by its name and then simulate a click on that element using Selenium WebDriver. Before clicking, Selenium ensures the element is interactable, scrolling it into view if necessary. This snippet requires a WebDriver instance already initialized and a web page loaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/inputs.html\");\nIWebElement element = driver.FindElement(By.Name(\"color_input\"));\nelement.Click();\n\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Web Page with Selenium\nDESCRIPTION: This code snippet demonstrates how to navigate to a specific URL using the WebDriver's `get` method.  This action loads the specified webpage in the browser controlled by Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.zh-cn.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/index.html\");\n```\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/index.html\")\n```\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/index.html\");\n```\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.get 'https://www.selenium.dev/selenium/web/index.html'\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.selenium.dev/selenium/web/index.html');\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/index.html\")\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait with Selenium Java\nDESCRIPTION: This code snippet demonstrates how to set an implicit wait in Selenium using Java. The implicit wait tells the WebDriver to wait for a certain amount of time when trying to find an element or elements if they are not immediately available. The `implicitlyWait` method is called on the `driver.manage().timeouts()` object with a duration and a time unit.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Python\nDESCRIPTION: Demonstrates how to select an option in a Select element by its visible text in Python. It uses the select_by_visible_text() method. Throws NoSuchElementException if matching option is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nselect.select_by_visible_text(\"One\")\n```\n\n----------------------------------------\n\nTITLE: Quitting WebDriver Session in Selenium\nDESCRIPTION: This snippet ends the WebDriver session, closing the browser instance and releasing associated resources.  It is essential to call this method at the end of a test to avoid resource leaks. Dependencies: Initialized WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.quit\n```\n\n----------------------------------------\n\nTITLE: Finding Elements From Element - C#\nDESCRIPTION: This code snippet demonstrates how to find child elements within a parent element using Selenium WebDriver in C#.  It retrieves a parent 'div' element and then finds all 'p' elements within that div, printing their text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_31\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\nusing System.Collections.Generic;\n\nnamespace FindElementsFromElement {\n class FindElementsFromElement {\n  public static void Main(string[] args) {\n   IWebDriver driver = new ChromeDriver();\n   try {\n    driver.Navigate().GoToUrl(\"https://example.com\");\n\n    // Get element with tag name 'div'\n    IWebElement element = driver.FindElement(By.TagName(\"div\"));\n\n    // Get all the elements available with tag name 'p'\n    IList < IWebElement > elements = element.FindElements(By.TagName(\"p\"));\n    foreach(IWebElement e in elements) {\n     System.Console.WriteLine(e.Text);\n    }\n   } finally {\n    driver.Quit();\n   }\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox Driver with Options\nDESCRIPTION: This code snippet demonstrates how to initialize a Firefox driver with basic options in Java and Python. It shows the essential steps to create a FirefoxOptions object and use it when instantiating the FirefoxDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\noptions = FirefoxOptions()\ndriver = FirefoxDriver(options=options)\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox Driver with Options\nDESCRIPTION: This code snippet demonstrates how to initialize a Firefox driver with basic options in Java and Python. It shows the essential steps to create a FirefoxOptions object and use it when instantiating the FirefoxDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxOptions options = new FirefoxOptions();\nWebDriver driver = new FirefoxDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Getting Active Element in Python\nDESCRIPTION: This Python code snippet shows how to get the currently active element using Selenium WebDriver. It navigates to Google, types \"webElement\" into the search box, and then prints the 'title' attribute of the active element. It depends on the Selenium library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Chrome()\ndriver.get(\"https://www.google.com\")\ndriver.find_element(By.CSS_SELECTOR, '[name=\"q\"]').send_keys(\"webElement\")\n\n    # Get attribute of current active element\nattr = driver.switch_to.active_element.get_attribute(\"title\")\nprint(attr)\n```\n\n----------------------------------------\n\nTITLE: Take Element Screenshot in Selenium\nDESCRIPTION: This code takes a screenshot of a specific element on the page using Selenium WebDriver and saves it as a PNG file. It demonstrates how to find an element by CSS selector, and then take the element's screenshot, and saves it to a file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_83\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Chrome()\n\ndriver.get(\"http://www.example.com\")\n\nele = driver.find_element(By.CSS_SELECTOR, 'h1')\n\n    # Returns and base64 encoded string into image\nele.screenshot('./image.png')\n\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element in Python\nDESCRIPTION: This Python snippet performs a drag and drop operation from a source element to a target element. It uses the ActionChains class and requires a WebDriver instance, along with WebElement instances for the source and target.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nsource = driver.find_element(By.ID, \"draggable\")\ntarget = driver.find_element(By.ID, \"droppable\")\n\naction = ActionChains(driver)\naction.drag_and_drop(source, target).perform()\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox Driver with Options\nDESCRIPTION: This code snippet demonstrates how to initialize a Firefox driver with basic options in C#. It shows the essential steps to create a FirefoxOptions object and use it when instantiating the FirefoxDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nvar options = new FirefoxOptions();\nvar driver = new FirefoxDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Navigating to a URL with Selenium\nDESCRIPTION: This snippet demonstrates how to navigate to a specific URL using Selenium WebDriver. It utilizes the `get` method to load the desired webpage in the browser. The driver must be initialized prior to navigation. No specific dependencies other than the Selenium WebDriver setup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.get 'https://www.google.com/'\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Configuration TOML\nDESCRIPTION: Configures basic authentication for the Selenium Grid router, requiring a username and password to access the Grid UI or start new sessions.  This TOML snippet sets the `username` and `password` in the `router` section.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.zh-cn.md#_snippet_5\n\nLANGUAGE: TOML\nCODE:\n```\n[router]\nusername = \"admin\"\npassword = \"myStrongPassword\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies via CDP in C#\nDESCRIPTION: This C# code snippet demonstrates how to set cookies using Chrome DevTools Protocol (CDP) with Selenium. It sets a cookie with a specific name, value, domain and path. This snippet depends on Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nawait session.Network.Enable(new NetworkEnableParameters());\nawait session.Network.SetCookie(new NetworkSetCookieParameters\n{\n    Name = \"foo\",\n    Value = \"bar\",\n    Domain = \"localhost\",\n    Path = \"/\"\n});\n```\n\n----------------------------------------\n\nTITLE: Finding an Element by Name\nDESCRIPTION: This snippet shows how to locate a specific element on a web page using its name attribute. The `findElement` method with `By.name` locator is used for this purpose. The `name` parameter specifies the value of the name attribute to search for.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nWebElement searchBox = driver.findElement(By.name(\"q\"));\n```\n\n----------------------------------------\n\nTITLE: Initializing Chrome Driver with Options in CSharp\nDESCRIPTION: This C# code snippet showcases the initialization of a ChromeDriver with headless options for automated testing.  The options are set within the `Setup` method, which is commonly used in test frameworks like NUnit or xUnit to configure the test environment before each test case execution.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.pt-br.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace SeleniumDocs;\n\n[TestClass]\npublic class BaseTest\n{\n    public IWebDriver driver;\n    [TestInitialize]\n    public void Setup()\n    {\n        ChromeOptions options = new ChromeOptions();\n        options.AddArgument(\"--headless=new\");\n        driver = new ChromeDriver(options);\n    }\n    [TestCleanup]\n    public void TearDown()\n    {\n        driver.Quit();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait with Expected Condition (Python)\nDESCRIPTION: This code snippet demonstrates how to use explicit waits in Selenium using Python with an Expected Condition. It waits for a specific element to be present on the page, with a timeout of 10 seconds. It uses `WebDriverWait` and `presence_of_element_located` to define the condition to wait for.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.ja.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nelement = WebDriverWait(driver, 10).until(\n    EC.presence_of_element_located((By.ID, \"myDynamicElement\"))\n)\n```\n\n----------------------------------------\n\nTITLE: File Upload with sendKeys in Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to upload a file in Selenium by locating the file input element and using the send_keys method to pass the full path of the file to it. This eliminates the need to interact with the system's file upload dialog. Dependencies: selenium-webdriver\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.ja.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.find_element(id: 'file-upload').send_keys('/path/to/file.txt')\ndriver.find_element(id: 'upload-button').click\n```\n\n----------------------------------------\n\nTITLE: Switching to New Window - Selenium WebDriver\nDESCRIPTION: Demonstrates how to switch the focus of Selenium WebDriver to a new window or tab. It retrieves all available window handles, identifies the new window by comparing with the original, and switches the WebDriver context to it.  Requires Selenium WebDriver and related dependencies for JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n//Store the ID of the original window\nconst originalWindow = await driver.getWindowHandle();\n\n//Check we don't have other windows open already\nassert((await driver.getAllWindowHandles()).length === 1);\n\n//Click the link which opens in a new window\nawait driver.findElement(By.linkText('new window')).click();\n\n//Wait for the new window or tab\nawait driver.wait(\n    async () => (await driver.getAllWindowHandles()).length === 2,\n    10000\n  );\n\n//Loop through until we find a new window handle\nconst windows = await driver.getAllWindowHandles();\nwindows.forEach(async handle => {\n  if (handle !== originalWindow) {\n    await driver.switchTo().window(handle);\n  }\n});\n\n//Wait for the new tab to finish loading content\nawait driver.wait(until.titleIs('Selenium documentation'), 10000);\n\n```\n\n----------------------------------------\n\nTITLE: Find Elements within an Element - Python\nDESCRIPTION: This Python code demonstrates finding child elements within a parent element using both tag name and XPath. The first part finds a 'div' element and then locates all 'p' elements within it by tag name.  The second part locates a 'ul' element and then finds all 'li' children using XPath. The '.' prefix in the XPath indicates that the search should be relative to the current element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\n##get elements from parent element using TAG_NAME\n\n    # Obtém o elemento com o nome da tag 'div'\nelement = driver.find_element(By.TAG_NAME, 'div')\n\n    # Obtém todos os elementos disponíveis com o nome da tag 'p'\nelements = element.find_elements(By.TAG_NAME, 'p')\nfor e in elements:\n    print(e.text)\n\n##get elements from parent element using XPATH\n##NOTE: in order to utilize XPATH from current element, you must add \".\" to beginning of path\n\n    # Get first element of tag 'ul'\nelement = driver.find_element(By.XPATH, '//ul')\n\n    # get children of tag 'ul' with tag 'li'\nelements  = driver.find_elements(By.XPATH, './/li')\nfor e in elements:\n    print(e.text)\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Router (Shell)\nDESCRIPTION: This command starts the Selenium Router, which redirects new session requests to the queue and redirects session requests to the Node that is executing the session. It uses port 4444 by default and interacts with the New Session Queue, Session Map, and Distributor.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.pt-br.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-<version>.jar router --sessions http://<sessions-ip>:5556 --distributor http://<distributor-ip>:5553 --sessionqueue http://<new-session-queue-ip>:5559 --port 4444\n```\n\n----------------------------------------\n\nTITLE: Navigating to a URL with Selenium\nDESCRIPTION: This snippet demonstrates how to navigate to a specific URL using Selenium WebDriver. It utilizes the `get()` method to load the desired webpage in the browser. The driver must be initialized prior to navigation. No specific dependencies other than the Selenium WebDriver setup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://www.google.com\")\n```\n\n----------------------------------------\n\nTITLE: Finding Element by Name with Selenium\nDESCRIPTION: This snippet demonstrates how to find an HTML element by its 'name' attribute using Selenium WebDriver. The `find_element` method with the `:name` locator is used. The `name` attribute is \"q\" in this case, commonly used in search input fields.  Dependencies: initialized WebDriver instance and a loaded webpage containing the target element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nsearch_box = driver.find_element(:name, 'q')\nsearch_box.send_keys 'Selenium'\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's Select class, specifically by matching the value attribute of the option. The `selectByValue()` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nselect.selectByValue(\"one\")\n```\n\n----------------------------------------\n\nTITLE: Base Page Class in Java\nDESCRIPTION: This Java code defines a base page class that initializes the WebDriver instance. It serves as a parent class for other page objects, providing a common constructor for setting up the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.en.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class BasePage {\n    protected WebDriver driver;\n\n    public BasePage(WebDriver driver) {\n        this.driver = driver;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload using sendKeys CSharp\nDESCRIPTION: This C# snippet demonstrates how to upload a file by sending its path to the file input element using the SendKeys method. It assumes the element is an input of type 'file'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.zh-cn.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement uploadElement = driver.FindElement(By.Id(\"file-upload\"));\nuploadElement.SendKeys(\"/path/to/file.txt\");\ndriver.FindElement(By.Id(\"upload\")).Click();\n```\n\n----------------------------------------\n\nTITLE: Closing Browser Session: Using driver.quit() - Java\nDESCRIPTION: Demonstrates how to properly close a browser session in Java using `driver.quit()` instead of `driver.close()`. This ensures that all associated windows, tabs, and background processes are terminated, preventing potential resource leaks. This snippet represents the correct way of exiting a Selenium controlled browser in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_15\n\nLANGUAGE: java\nCODE:\n```\ndriver.close();\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Find All Matching Elements - Kotlin\nDESCRIPTION: This snippet finds all elements with the tag name \"li\" on the page and returns them as a list of `WebElement` objects using Selenium WebDriver with Kotlin. If no matches are found, an empty list is returned.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nval plants: List<WebElement> = driver.findElements(By.tagName(\"li\"))\n```\n\n----------------------------------------\n\nTITLE: Adding a Cookie with Selenium WebDriver (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to add a cookie to the current browser context using Selenium WebDriver in JavaScript. It assumes the webdriver is already initiated. The code navigates to a specific URL and then adds a cookie with the name 'key' and the value 'value'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.example.com/');\nawait driver.manage().addCookie({name: 'key', value: 'value'});\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium - Java\nDESCRIPTION: This snippet demonstrates how to set an implicit wait in Selenium using Java.  The implicit wait is a global setting that tells the WebDriver to wait for a certain amount of time when trying to find an element or elements if they are not immediately available. It takes a duration as input, and applies to the entire session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait Timeout in Java\nDESCRIPTION: This code snippet demonstrates how to set the implicit wait timeout in Java. This specifies how long the WebDriver should wait when searching for an element if it is not immediately present. The default timeout is 0 seconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_37\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Element Python\nDESCRIPTION: This code snippet demonstrates how to send keys (enter text) to a web element using Selenium WebDriver in Python. It finds an element by its name attribute ('email_input') and sends the string 'admin@localhost.dev' to it. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\nelement = driver.find_element(By.NAME, \"email_input\")\nelement.clear()\nelement.send_keys(\"admin@localhost.dev\")\n\nvalue = element.get_attribute(\"value\")\nassert value == \"admin@localhost.dev\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium Java\nDESCRIPTION: This snippet shows how to initialize a Select object in Java using a WebElement representing the select element.  It requires the Selenium WebDriver dependency. The `findElement` method is used to locate the select element before creating the Select object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebElement selectElement = driver.findElement(By.name(\"selectomatic\"));\nSelect select = new Select(selectElement);\n```\n\n----------------------------------------\n\nTITLE: Find First Element by Class Name in Kotlin\nDESCRIPTION: This snippet finds the first web element with the class name 'tomatoes' within the entire DOM using Selenium WebDriver in Kotlin. It uses the `findElement` method with `By.className` to locate the element. The result is a `WebElement` object representing the located element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nval vegetable: WebElement = driver.findElement(By.className(\"tomatoes\"))\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver Session in Selenium\nDESCRIPTION: This snippet initializes a WebDriver session, which is the starting point for interacting with a browser using Selenium. It creates an instance of the WebDriver (e.g., ChromeDriver) to control the browser. Dependencies include the Selenium WebDriver library and the corresponding browser driver executable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval driver: WebDriver = ChromeDriver()\n```\n\n----------------------------------------\n\nTITLE: Find Element by ID - Kotlin\nDESCRIPTION: This snippet demonstrates locating a web element using its ID in Kotlin. It initializes a ChromeDriver and uses the `findElement` method with `By.id` to locate the element with the ID 'lname'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.id(\"lname\"))\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value - Java\nDESCRIPTION: This snippet demonstrates how to get a CSS property value of a web element using Selenium WebDriver in Java. It finds an element by ID and uses the getCssValue() method to retrieve the value of the 'background-color' property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nWebElement link = driver.findElement(By.id(\"namedColor\"));\nString attributeValue = link.getCssValue(\"background-color\");\n```\n\n----------------------------------------\n\nTITLE: Kubernetes PreStop Hook Configuration (YAML)\nDESCRIPTION: This YAML configuration snippet shows how to define a `PreStop` hook in a Kubernetes pod specification. The `PreStop` hook executes a command before the container is terminated. In this example, it sends a POST request to the Selenium Grid node to drain it (preventing new sessions) and then waits for the node to finish its current task before terminating. A `terminationGracePeriodSeconds` is also specified to allow for graceful termination.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/scaling-grid-with-keda.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nspec:\n  template:\n    spec:\n      terminationGracePeriodSeconds: 3600\n      ...\n      ...\n      containers:\n        lifecycle:\n          preStop:\n            exec:\n              command: [\"/bin/sh\", \"-c\", \"curl --request POST 'localhost:5555/se/grid/node/drain' --header 'X-REGISTRATION-SECRET;'; tail --pid=$(pgrep -f '[n]ode --bind-host false --config /opt/selenium/config.toml') -f /dev/null; sleep 30s\"]\n```\n\n----------------------------------------\n\nTITLE: SignInPage Page Object - Java\nDESCRIPTION: This snippet defines a Page Object for the sign-in page. It encapsulates the page's elements (username, password, sign-in button) using By locators and provides a method to log in a valid user. It requires WebDriver and By from Selenium.  The constructor checks if the driver is on the correct page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.pt-br.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\n\n/**\n * Page Object encapsula a página de login.\n */\npublic class SignInPage {\n  protected WebDriver driver;\n\n  // <input name=\"user_name\" type=\"text\" value=\"\">\n  private By usernameBy = By.name(\"user_name\");\n  // <input name=\"password\" type=\"password\" value=\"\">\n  private By passwordBy = By.name(\"password\");\n  // <input name=\"sign_in\" type=\"submit\" value=\"SignIn\">\n  private By signinBy = By.name(\"sign_in\");\n\n  public SignInPage(WebDriver driver){\n    this.driver = driver;\n     if (!driver.getTitle().equals(\"Sign In Page\")) {\n      throw new IllegalStateException(\"This is not Sign In Page,\" +\n            \" current page is: \" + driver.getCurrentUrl());\n    }\n  }\n\n  /**\n    * Faz login como um usuário válido\n    * \n    * @param userName\n    * @param password\n    * @return pbjeto da Pagina Inicial\n    */\n  public HomePage loginValidUser(String userName, String password) {\n    driver.findElement(usernameBy).sendKeys(userName);\n    driver.findElement(passwordBy).sendKeys(password);\n    driver.findElement(signinBy).click();\n    return new HomePage(driver);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Element Tag Name with Selenium\nDESCRIPTION: This snippet demonstrates how to retrieve the tag name of an HTML element using Selenium WebDriver. The `tagName` property is called on the identified element. This returns the HTML tag (e.g., 'input', 'div', 'a').  Dependencies include an initialized WebDriver instance, a loaded webpage, and a found element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_41\n\nLANGUAGE: kotlin\nCODE:\n```\nval tagName = searchBox.tagName\n```\n\n----------------------------------------\n\nTITLE: Chaining Relative Locators (CSharp)\nDESCRIPTION: This snippet demonstrates how to chain relative locators to locate a button element that is below the element with the ID 'email' and to the right of the element with the ID 'cancel' using Selenium's relative locators in C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_64\n\nLANGUAGE: CSharp\nCODE:\n```\nvar submitLocator = RelativeBy.WithLocator(By.tagName(\"button\")).Below(By.Id(\"email\")).RightOf(By.Id(\"cancel\"));\n```\n\n----------------------------------------\n\nTITLE: Terminating Driver Session - Python\nDESCRIPTION: This Python snippet shows how to terminate a Selenium WebDriver session using the `quit()` method. It closes all browser windows and ends the WebDriver session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.ja.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its `value` attribute using Selenium WebDriver. The `select_by_value()` method is used to select the option based on the provided value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nselect.select_by_value(\"one\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis session map in TOML\nDESCRIPTION: This TOML file configures the Redis-backed session map for Selenium Grid.  It specifies the scheme, implementation class, hostname, and port to connect to a Redis instance. It requires the `selenium-session-map-redis` dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.ja.md#_snippet_6\n\nLANGUAGE: TOML\nCODE:\n```\n[sessions]\nscheme = \"redis\"\nimplementation = \"org.openqa.selenium.grid.sessionmap.redis.RedisBackedSessionMap\"\nhostname = \"localhost\"\nport = 6379\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver Session in Selenium\nDESCRIPTION: This snippet initializes a WebDriver session, which is the starting point for interacting with a browser using Selenium. It creates an instance of the WebDriver (e.g., ChromeDriver) to control the browser. Dependencies include the Selenium WebDriver library and the corresponding browser driver executable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :chrome\n```\n\n----------------------------------------\n\nTITLE: Fetch Element Attribute Selenium Python\nDESCRIPTION: This Python code snippet uses Selenium WebDriver to retrieve the value attribute of an element and asserts that it equals the expected value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\nemail_input = driver.find_element(By.NAME, \"email_input\")\nassert email_input.get_attribute(\"value\") == \"\"\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies in Kotlin\nDESCRIPTION: This code snippet demonstrates how to retrieve all cookies from the current browser context using Selenium WebDriver in Kotlin. It navigates to a website, adds two cookies, and then retrieves all available cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://example.com\")\n        driver.manage().addCookie(Cookie(\"test1\", \"cookie1\"))\n        driver.manage().addCookie(Cookie(\"test2\", \"cookie2\"))\n\n        // Get All available cookies\n        val cookies = driver.manage().cookies\n        println(cookies)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Click Element with Selenium WebDriver in Java\nDESCRIPTION: This Java code snippet demonstrates how to locate an element by its name and then simulate a click on that element using Selenium WebDriver. Before clicking, Selenium ensures the element is interactable, scrolling it into view if necessary. This snippet requires a WebDriver instance already initialized and a web page loaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\");\nWebElement element = driver.findElement(By.name(\"color_input\"));\nelement.click();\n\n\n```\n\n----------------------------------------\n\nTITLE: Execute Script in Selenium\nDESCRIPTION: This code executes JavaScript code within the context of the browser using Selenium WebDriver. It shows how to use JavascriptExecutor to click on an element, get its innerText, and execute arbitrary JavaScript code, such as logging to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_87\n\nLANGUAGE: Java\nCODE:\n```\n    //Creating the JavascriptExecutor interface object by Type casting\n      JavascriptExecutor js = (JavascriptExecutor)driver;\n    //Button Element\n      WebElement button =driver.findElement(By.name(\"btnLogin\"));\n    //Executing JavaScript to click on element\n      js.executeScript(\"arguments[0].click();\", button);\n    //Get return value from script\n      String text = (String) js.executeScript(\"return arguments[0].innerText\", button);\n    //Executing JavaScript directly\n      js.executeScript(\"console.log('hello world')\");\n```\n\n----------------------------------------\n\nTITLE: Locating Element by ID with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a web element on a page using its ID attribute with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.id()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.id(\"lname\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a Resident Credential in Python\nDESCRIPTION: This Python snippet creates a resident credential with a user ID and user name using the WebAuthn domain via DevTools. It facilitates testing Web Authentication flows by simulating credential creation. It requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\ndevtools.add_credential({\n    'id': b64encode(os.urandom(16)).decode(),\n    'publicKey': b64encode(os.urandom(32)).decode(),\n    'algorithm': -7,\n    'signCount': 0,\n    'userId': b64encode(os.urandom(16)).decode(),\n    'userName': 'test',\n})\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Class Name in Selenium (By Class)\nDESCRIPTION: This code snippet demonstrates how to locate a web element using its class name with the `By` class in Selenium.  It initializes a WebDriver and uses `By.className()` to locate an element with the class 'information'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.className('information'));\n```\n\n----------------------------------------\n\nTITLE: Initializing Chrome Driver with Options in Python\nDESCRIPTION: This Python snippet demonstrates how to initialize a Chrome driver with options using the `selenium` library. It sets the browser to run in headless mode, which is useful for automated testing and CI/CD environments, and verifies the title of the webpage after navigating to Google.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport pytest\n\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options as ChromeOptions\n\n\ndef test_basic_chrome_options():\n    chrome_options = ChromeOptions()\n    chrome_options.add_argument(\"--headless=new\")\n    driver = webdriver.Chrome(options=chrome_options)\n\n    driver.get(\"https://www.google.com\")\n    assert \"Google\" in driver.title\n\n    driver.quit()\n```\n\n----------------------------------------\n\nTITLE: Creating New Window/Tab - Selenium WebDriver (CSharp)\nDESCRIPTION: Demonstrates creating a new tab and window using Selenium WebDriver in C# and switching to them.  This feature is available in Selenium 4 and later. Dependencies include Selenium WebDriver and NUnit for assertions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.SwitchTo().NewWindow(WindowType.Tab);\n\ndriver.SwitchTo().NewWindow(WindowType.Window);\n\n```\n\n----------------------------------------\n\nTITLE: File Upload using SendKeys Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to upload a file by finding the file input element and using the sendKeys method to specify the file path. This method bypasses the native file upload dialog.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.pt-br.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport org.openqa.selenium.By\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    driver.get(\"https://the-internet.herokuapp.com/upload\")\n    driver.findElement(By.id(\"file-upload\")).sendKeys(\"selenium-snapshot.jpg\")\n    driver.findElement(By.id(\"file-submit\")).submit()\n    if(driver.pageSource.contains(\"File Uploaded!\")) {\n        println(\"file uploaded\")\n    }\n    else{\n        println(\"file not uploaded\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Element Submission with Selenium\nDESCRIPTION: This snippet demonstrates how to submit an HTML form element using Selenium WebDriver. The 'submit()' method is called on the identified element. Dependencies include an initialized WebDriver instance, a loaded webpage, and a found element (e.g., a search box).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nsearchBox.submit();\n```\n\n----------------------------------------\n\nTITLE: Defining a basic Page Object in Selenium with Java\nDESCRIPTION: This code defines a basic Page Object for editing an issue on GitHub. It uses WebDriver to interact with the page elements and provides methods to set the title, body, and other fields of the issue form. It includes a submit method that navigates to the IssueList page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.en.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.webdriver;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\n\npublic class EditIssue {\n\n  private final WebDriver driver;\n\n  public EditIssue(WebDriver driver) {\n    this.driver = driver;\n  }\n\n  public void setTitle(String title) {\n    WebElement field = driver.findElement(By.id(\"issue_title\"));\n    clearAndType(field, title);\n  }\n\n  public void setBody(String body) {\n    WebElement field = driver.findElement(By.id(\"issue_body\"));\n    clearAndType(field, body);\n  }\n\n  public void setHowToReproduce(String howToReproduce) {\n    WebElement field = driver.findElement(By.id(\"issue_form_repro-command\"));\n    clearAndType(field, howToReproduce);\n  }\n\n  public void setLogOutput(String logOutput) {\n    WebElement field = driver.findElement(By.id(\"issue_form_logs\"));\n    clearAndType(field, logOutput);\n  }\n\n  public void setOperatingSystem(String operatingSystem) {\n    WebElement field = driver.findElement(By.id(\"issue_form_operating-system\"));\n    clearAndType(field, operatingSystem);\n  }\n\n  public void setSeleniumVersion(String seleniumVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_selenium-version\"));\n    clearAndType(field, logOutput);\n  }\n\n  public void setBrowserVersion(String browserVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_browser-versions\"));\n    clearAndType(field, browserVersion);\n  }\n\n  public void setDriverVersion(String driverVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_browser-driver-versions\"));\n    clearAndType(field, driverVersion);\n  }\n\n  public void setUsingGrid(String usingGrid) {\n    WebElement field = driver.findElement(By.id(\"issue_form_selenium-grid-version\"));\n    clearAndType(field, usingGrid);\n  }\n\n  public IssueList submit() {\n    driver.findElement(By.cssSelector(\"button[type='submit']\")).click();\n    return new IssueList(driver);\n  }\n\n  private void clearAndType(WebElement field, String text) {\n    field.clear();\n    field.sendKeys(text);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Find All Matching Elements - JavaScript\nDESCRIPTION: This snippet finds all elements with the tag name \"li\" on the page and returns them as an array using Selenium WebDriver with JavaScript. If no matches are found, an empty array is returned.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst plants = await driver.findElements(By.tagName('li'));\n```\n\n----------------------------------------\n\nTITLE: Maximize Window in Selenium\nDESCRIPTION: This code maximizes the browser window using Selenium WebDriver. It makes the window fill the screen, excluding OS menus and toolbars. The method is available across different programming languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_64\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.manage().window().maximize()\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookie Attribute\nDESCRIPTION: This JavaScript snippet demonstrates setting a SameSite cookie attribute.  It utilizes Selenium WebDriver to add a cookie to the browser, configuring the SameSite attribute to either 'Strict' or 'Lax'. Requires Selenium 4+ and a compatible browser driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n//it('can add a cookie with SameSite', async () => {\n//  await driver.manage().addCookie({name: 'foo', value: 'bar', sameSite: 'Strict'})\n//})\n```\n\n----------------------------------------\n\nTITLE: Navigate Forward with Selenium (Kotlin)\nDESCRIPTION: This snippet demonstrates how to navigate forward in the browser's history using Selenium WebDriver in Kotlin. It calls the `navigate().forward()` method. It requires an initialized WebDriver instance and a browser forward history.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.navigate().forward()\n```\n\n----------------------------------------\n\nTITLE: File Upload with sendKeys in Python\nDESCRIPTION: Uses the send_keys method to upload a file by specifying its path to the file input element. Requires Selenium WebDriver and a file input element with type=\"file\".\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.en.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfile_input = driver.find_element(By.ID, \"file-upload\")\nfile_input.send_keys(\"/path/to/your/file.txt\")\ndriver.find_element(By.ID, \"upload-button\").click()\n```\n\n----------------------------------------\n\nTITLE: Executing Gradle Tests\nDESCRIPTION: This command shows how to execute the tests in Java using Gradle.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ngradle clean test\n```\n\n----------------------------------------\n\nTITLE: Locating Element to the Right of Another (Kotlin)\nDESCRIPTION: This snippet demonstrates how to locate a button element to the right of the element with the ID 'cancel' using Selenium's RelativeLocator in Kotlin.  It uses `RelativeLocator.with` and `toRightOf` functions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_56\n\nLANGUAGE: Kotlin\nCODE:\n```\nval submitLocator = RelativeLocator.with(By.tagName(\"button\")).toRightOf(By.id(\"cancel\"))\n```\n\n----------------------------------------\n\nTITLE: Find Element within a Subset of DOM - Python\nDESCRIPTION: This snippet first locates the element with the ID \"fruits\" and then finds the first element within it that has the class name \"tomatoes\". It demonstrates how to narrow the search scope using Selenium WebDriver with Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfruits = driver.find_element(By.ID, \"fruits\")\nfruit = fruits.find_element(By.CLASS_NAME,\"tomatoes\")\n```\n\n----------------------------------------\n\nTITLE: Find Element by Link Text - JavaScript\nDESCRIPTION: This snippet shows how to locate a link element using its exact link text in JavaScript. It initializes a ChromeDriver and uses the `findElement` method with `By.linkText` to find the link with the text 'Selenium Official Page'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.linkText('Selenium Official Page'));\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Chrome Options\nDESCRIPTION: This code demonstrates how to add command-line arguments to Chrome options for customizing the browser's behavior.  Common arguments include `--start-maximized`, `--headless=new`, and `--user-data-dir=...`. These arguments are passed to the Chrome browser instance when it is launched.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\noptions.addArguments('--start-maximized');\nlet service = new chrome.ServiceBuilder(pathToChromeDriver).build();\nlet driver = await new Builder()\n  .setChromeOptions(options)\n```\n\n----------------------------------------\n\nTITLE: Find Element by Link Text - Java\nDESCRIPTION: This snippet shows how to locate a link element using its exact link text in Java. It initializes a ChromeDriver and uses the `findElement` method with `By.linkText` to find the link with the text 'Selenium Official Page'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.linkText(\"Selenium Official Page\"));\n```\n\n----------------------------------------\n\nTITLE: Switching to New Window - Selenium WebDriver\nDESCRIPTION: Demonstrates how to switch the focus of Selenium WebDriver to a new window or tab. It retrieves all available window handles, identifies the new window by comparing with the original, and switches the WebDriver context to it. Requires selenium-webdriver and related dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nString originalWindow = driver.getWindowHandle();\n\n\ndriver.findElement(By.linkText(\"new window\")).click();\n\nwait.until(numberOfWindowsToBe(2));\n\nfor (String windowHandle : driver.getWindowHandles()) {\n    if(!originalWindow.contentEquals(windowHandle)) {\n        driver.switchTo().window(windowHandle);\n        break;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Edge Driver with Default Options - Python\nDESCRIPTION: Demonstrates initializing the Edge driver with basic, predefined options using Python.\nThis snippet provides the fundamental way to start an Edge session with Selenium.\nDependencies: Selenium WebDriver, EdgeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver = Edge()\n```\n\n----------------------------------------\n\nTITLE: Find Element within Element in Python\nDESCRIPTION: This snippet demonstrates how to find a web element within another web element using Selenium WebDriver in Python. First, it finds an element with the ID 'fruits', and then it finds a child element within that element with the class name 'tomatoes'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfruits = driver.find_element(By.ID, \"fruits\")\nfruit = fruits.find_element(By.CLASS_NAME,\"tomatoes\")\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Element Kotlin\nDESCRIPTION: This code snippet demonstrates how to send keys to a web element using Selenium WebDriver in Kotlin. It navigates to a URL, finds an element by its name attribute ('email_input'), clears the element and then sends the string 'admin@localhost.dev' to it. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n// Navigate to Url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n\t//Clear field to empty it from any previous data\n\tdriver.findElement(By.name(\"email_input\")).clear()\n\t\n    // Enter text \n    driver.findElement(By.name(\"email_input\")).sendKeys(\"admin@localhost.dev\")\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait with Lambda - Java\nDESCRIPTION: This Java snippet demonstrates how to implement an explicit wait using a lambda expression. It waits for a maximum of 10 seconds for the condition specified within the lambda to become true.  The lambda checks if the element's text content is 'Selenium'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.en.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = new WebDriverWait(driver, Duration.ofSeconds(10))\n        .until(d -> d.findElement(By.tagName(\"p\")).getText().startsWith(\"Selenium\")) ;\n```\n\n----------------------------------------\n\nTITLE: Quitting WebDriver Session in Selenium\nDESCRIPTION: This snippet ends the WebDriver session, closing the browser instance and releasing associated resources.  It is essential to call this method at the end of a test to avoid resource leaks. Dependencies: Initialized WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Quit();\n```\n\n----------------------------------------\n\nTITLE: Getting a Named Cookie with Selenium WebDriver (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to retrieve a cookie by name using Selenium WebDriver in JavaScript. It assumes the webdriver is already initiated. The code navigates to a specific URL, adds a cookie named 'foo' with the value 'bar', and then retrieves the cookie by name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.example.com/');\nawait driver.manage().addCookie({name: 'foo', value: 'bar'});\nconst cookie = await driver.manage().getCookie('foo');\n```\n\n----------------------------------------\n\nTITLE: Initializing a Selenium Session\nDESCRIPTION: This snippet demonstrates how to initialize a Selenium WebDriver session in various programming languages. It shows the instantiation of the WebDriver object, which is the entry point for interacting with the browser. This is a fundamental step in any Selenium automation script.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n```\n\n----------------------------------------\n\nTITLE: Get Active Element Attribute - JavaScript\nDESCRIPTION: This JavaScript code snippet retrieves the `title` attribute of the currently active element after navigating to Google and entering \"webElement\" into the search box. It uses Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {Builder, By} = require('selenium-webdriver');\n\n  (async function example() {\n      let driver = await new Builder().forBrowser('chrome').build();\n      await driver.get('https://www.google.com');\n      await  driver.findElement(By.css('[name=\"q\"]')).sendKeys(\"webElement\");\n\n      // Get attribute of current active element\n      let attr = await driver.switchTo().activeElement().getAttribute(\"title\");\n      console.log(`${attr}`)\n  })();\n```\n\n----------------------------------------\n\nTITLE: Find All Elements by Tag Name\nDESCRIPTION: This snippet demonstrates how to find all elements on a page that match a specific tag name. It uses the `find_elements` method with `By.TAG_NAME` to locate all `<li>` elements. The result is a list of WebElement objects, representing all the list items on the page. If no elements are found it returns an empty list.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nplants = driver.find_elements(By.TAG_NAME, \"li\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Chrome Driver with Options in Java\nDESCRIPTION: This Java snippet demonstrates how to initialize a ChromeDriver with specific options. It imports necessary classes from the org.openqa.selenium and org.openqa.selenium.chrome packages and sets up ChromeOptions to configure the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.remote.RemoteWebDriver;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class OptionsTest {\n\n    //Example of how to use ChromeOptions\n    //@Test\n    public void basicChromeOptions() throws MalformedURLException {\n        ChromeOptions options = new ChromeOptions();\n        options.addArguments(\"--headless=new\");\n        RemoteWebDriver driver = new ChromeDriver(options);\n\n        driver.get(\"https://www.google.com\");\n        assertThat(driver.getTitle()).isEqualTo(\"Google\");\n        driver.quit();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Locate Element in Shadow DOM\nDESCRIPTION: This snippet demonstrates how to access and locate an element within a Shadow DOM using Selenium. It first finds the shadow host element using CSS selector, then obtains the shadow root, and finally locates the desired element within the shadow root using another CSS selector. Requires Selenium 4.0 or greater.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nshadow_host = driver.find_element(By.CSS_SELECTOR, '#shadow_host')\nshadow_root = shadow_host.shadow_root\nshadow_content = shadow_root.find_element(By.CSS_SELECTOR, '#shadow_content')\n```\n\n----------------------------------------\n\nTITLE: Docker Integration Configuration\nDESCRIPTION: Configures a Selenium Node to run sessions within Docker containers. It disables driver detection, limits the number of concurrent sessions, and specifies Docker images to be used for different browser stereotypes.  It also shows how to optionally define device files for the Docker containers.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.en.md#_snippet_5\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\ndetect-drivers = false\nmax-sessions = 2\n\n[docker]\nconfigs = [\n    \"selenium/standalone-chrome:93.0\", \"{\\\"browserName\\\": \\\"chrome\\\", \\\"browserVersion\\\": \\\"91\\\"}\", \n    \"selenium/standalone-firefox:92.0\", \"{\\\"browserName\\\": \\\"firefox\\\", \\\"browserVersion\\\": \\\"92\\\"}\"\n]\n#Optionally define all device files that should be mapped to docker containers\n#devices = [\n#    \"/dev/kvm:/dev/kvm\"\n#]\nurl = \"http://localhost:2375\"\nvideo-image = \"selenium/video:latest\"\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates sending keys to a specific element using Selenium's Actions API. It first locates the element using a CSS selector, then creates an Actions object and uses the sendKeys method with the element and the string \"Selenium!\", and finally calls perform() to execute the action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nval element = driver.findElement(By.cssSelector(\"selector\"))\nval actions = Actions(driver)\nactions.sendKeys(element, \"Selenium!\").perform()\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium\nDESCRIPTION: This code snippet demonstrates how to initialize a Select object in Selenium WebDriver. It first locates a <select> element using a locator strategy (e.g., by ID) and then creates a Select object using the found element.  Note that as of Selenium 4.5, you can't create a `Select` object if the `<select>` element is disabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebElement selectElement = driver.findElement(By.id(\"selectomatic\"));\nSelect select = new Select(selectElement);\n```\n\n----------------------------------------\n\nTITLE: Exception Handling: Selenium WebDriver (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates how to use a `try...finally` block to ensure that the WebDriver instance is always quit, even if an exception occurs during the WebDriver interaction.  The `driver.quit()` call in the `finally` block guarantees resource cleanup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    //WebDriver code here...\n} finally {\n    driver.quit()\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload using sendKeys Python\nDESCRIPTION: This Python snippet shows how to upload a file by sending its path to the file input element using the send_keys method.  It assumes the element is an input of type 'file'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.zh-cn.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfile_input = driver.find_element(By.ID, \"file-upload\")\nfile_input.send_keys(\"/path/to/picture.png\")\ndriver.find_element(By.ID, \"upload\").click()\n```\n\n----------------------------------------\n\nTITLE: Listening for All JS Logs with BiDi API in Java\nDESCRIPTION: This Java code snippet demonstrates how to listen for all JavaScript logs at all levels using the Selenium BiDi API. It registers a callback function to process the log entries and prints the log message and level to the console. This requires Selenium version 4.8 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.en.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nBiDi bidi = ((HasDevTools) driver).getDevTools();\nbidi.getDomains().log().addLogListener(log -> {\n  System.out.println(\"Message: \" + log.getText());\n  System.out.println(\"Level: \" + log.getLevel());\n});\nbidi.getDomains().log().enable();\ndriver.get(\"https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html\");\n```\n\n----------------------------------------\n\nTITLE: File Upload with sendKeys in JavaScript\nDESCRIPTION: Uses the sendKeys method to upload a file by specifying its path to the file input element. Requires Selenium WebDriver and a file input element with type=\"file\".\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.en.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.findElement(By.id('file-upload')).sendKeys('/path/to/your/file.txt');\nawait driver.findElement(By.id('upload-button')).click();\n```\n\n----------------------------------------\n\nTITLE: Executing CDP commands with Selenium in CSharp\nDESCRIPTION: This CSharp snippet demonstrates how to execute a CDP command using Selenium's `ExecuteCdpCommand` method. It requires a WebDriver instance connected to a Chrome or Edge browser. The example retrieves the browser version using the 'Browser.getVersion' command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/_index.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nDictionary<string, object> version = driver.ExecuteCdpCommand(\"Browser.getVersion\", new Dictionary<string, object>());\n\nAssert.NotNull(version);\nAssert.IsNotEmpty(version);\n\nConsole.WriteLine(version[\"userAgent\"]);\n```\n\n----------------------------------------\n\nTITLE: Find Element using CSS Selector (Optimized)\nDESCRIPTION: This snippet demonstrates how to locate an element using a single CSS selector that combines the ID of the parent element and the class name of the target element. This approach is more efficient than nested lookups because it issues a single command to the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\nval fruit = driver.findElement(By.cssSelector(\"#fruits .tomatoes\"))\n```\n\n----------------------------------------\n\nTITLE: Locating Element Near Another (JavaScript)\nDESCRIPTION: This snippet demonstrates how to locate an input element near the element with the ID 'lbl-email' using Selenium's relative locators in JavaScript.  It makes use of `locateWith` and `near` methods.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet emailLocator = locateWith(By.tagName('input')).near(By.id('lbl-email'));\n```\n\n----------------------------------------\n\nTITLE: Displaying PATH environment variable in Windows\nDESCRIPTION: This snippet shows how to display the current PATH environment variable in a Windows Command Prompt. It uses the `echo` command to print the value of the PATH variable, allowing users to see the directories currently included in the search path for executables.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.en.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\necho %PATH%\n```\n\n----------------------------------------\n\nTITLE: Closing Window and Switching Back - Selenium WebDriver\nDESCRIPTION: Illustrates how to close the current window or tab and switch back to the previously active window using Selenium WebDriver. It's crucial to switch back to a valid window handle to avoid a 'No Such Window Exception'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_9\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Close();\n\ndriver.SwitchTo().Window(originalWindow);\n\n```\n\n----------------------------------------\n\nTITLE: File Upload using sendKeys Java\nDESCRIPTION: This Java snippet demonstrates how to upload a file by sending its path to the file input element using the sendKeys method. It assumes that the element is an input of type 'file'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.zh-cn.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver.findElement(By.id(\"file-upload\")).sendKeys(\"/path/to/file.ext\");\n    driver.findElement(By.id(\"upload\")).click();\n```\n\n----------------------------------------\n\nTITLE: Refresh Page with Selenium (JavaScript)\nDESCRIPTION: This snippet demonstrates how to refresh the current page using Selenium WebDriver in JavaScript. It calls the `refresh()` method of the WebDriver's navigation interface. It requires an initialized WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.navigate().refresh();\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Alert in Python\nDESCRIPTION: This Python code snippet demonstrates how to interact with a JavaScript alert using Selenium WebDriver. It finds an element that triggers the alert, switches to the alert, retrieves the alert text, and then accepts the alert. It uses `switch_to.alert` to interact with the alert.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nalert = wait.until(expected_conditions.alert_is_present())\ntext = alert.text\nalert.accept()\n```\n\n----------------------------------------\n\nTITLE: Updating Java Waits using Duration\nDESCRIPTION: This snippet shows how to update `WebDriverWait` and `FluentWait` settings in Java to use `Duration` objects instead of `long` and `TimeUnit`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\nnew WebDriverWait(driver, 3)\n.until(ExpectedConditions.elementToBeClickable(By.cssSelector(\"#id\")));\n\nWait<WebDriver> wait = new FluentWait<WebDriver>(driver)\n  .withTimeout(30, TimeUnit.SECONDS)\n  .pollingEvery(5, TimeUnit.SECONDS)\n  .ignoring(NoSuchElementException.class);\n```\n\nLANGUAGE: Java\nCODE:\n```\nnew WebDriverWait(driver, Duration.ofSeconds(3))\n  .until(ExpectedConditions.elementToBeClickable(By.cssSelector(\"#id\")));\n\n  Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)\n  .withTimeout(Duration.ofSeconds(30))\n  .pollingEvery(Duration.ofSeconds(5))\n  .ignoring(NoSuchElementException.class);\n```\n\n----------------------------------------\n\nTITLE: Initializing Driver Options - Python\nDESCRIPTION: This Python snippet demonstrates how to initialize driver options to configure the browser.  In this case, it initializes `ChromeOptions` and sets them to be headless. It creates a new ChromeDriver instance using these options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\noptions = Options()\noptions.add_argument(\"--headless=new\")\ndriver = webdriver.Chrome(options=options)\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium - JavaScript\nDESCRIPTION: This snippet demonstrates how to set an implicit wait in Selenium using JavaScript. The implicit wait is a global setting that tells the WebDriver to wait for a certain amount of time when trying to find an element or elements if they are not immediately available. It accepts a numerical duration in milliseconds, and applies to the entire session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.en.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.manage().setTimeouts({ implicit: 10000 });\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies with Selenium WebDriver (Java)\nDESCRIPTION: This code snippet demonstrates how to delete all cookies in the current browser context using Selenium WebDriver in Java. It requires the Selenium WebDriver dependency and assumes a WebDriver instance is already initialized. The code navigates to a specific URL, adds two cookies, and then deletes all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.example.com\");\nCookie cookie1 = new Cookie(\"test1\", \"cookie1\");\ndriver.manage().addCookie(cookie1);\nCookie cookie2 = new Cookie(\"test2\", \"cookie2\");\ndriver.manage().addCookie(cookie2);\n\n// deletes all cookies\ndriver.manage().deleteAllCookies();\n```\n\n----------------------------------------\n\nTITLE: Find Element with Optimized Locator (CSS) - JavaScript\nDESCRIPTION: This snippet finds an element with a specific CSS selector in a single command using Selenium WebDriver with JavaScript, improving performance compared to nested lookups. It uses the `findElement` method with `By.css` locator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fruit = await driver.findElement(By.css('#fruits .tomatoes'));\n```\n\n----------------------------------------\n\nTITLE: Getting Window Handle - Selenium WebDriver (Java)\nDESCRIPTION: Retrieves the unique identifier of the current browser window using Selenium WebDriver in Java. This handle is persistent throughout a single session and allows for switching between windows. No specific dependencies other than Selenium WebDriver are required. The returned value is a String representing the window handle.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nString originalWindow = driver.getWindowHandle();\n\nassertNotNull(originalWindow);\n\nSystem.out.println(originalWindow);\n\n\n```\n\n----------------------------------------\n\nTITLE: Finding Element by Name with Selenium\nDESCRIPTION: This snippet demonstrates how to find an HTML element by its 'name' attribute using Selenium WebDriver. The 'find_element' method with the 'By.NAME' locator is used. The `name` attribute is \"q\" in this case, commonly used in search input fields.  Dependencies: initialized WebDriver instance and a loaded webpage containing the target element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nsearch_box = driver.find_element(By.NAME, 'q')\nsearch_box.send_keys('Selenium')\n```\n\n----------------------------------------\n\nTITLE: Creating a Pause in Actions API - Java\nDESCRIPTION: This Java snippet demonstrates how to create a pause between actions using the Actions API in Selenium. It initializes a WebDriver, navigates to a webpage, creates an Actions object, performs a pause using pause(Duration.ofSeconds(5)), and then performs the actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://selenium.dev/selenium/web/mouse_interaction.html\");\n\nActions actions = new Actions(driver);\nactions.pause(Duration.ofSeconds(5))\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Key Down Action in Selenium (Python)\nDESCRIPTION: This Python code snippet shows how to perform a key down action using the Actions API in Selenium. It creates an ActionChains object, performs a key_down action on the Keys.CONTROL key, sends the \"c\" key, and then calls perform() to execute the actions. This keeps the control key pressed down.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nactions = ActionChains(driver)\nactions.key_down(Keys.CONTROL)\n    .send_keys(\"c\")\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Getting a Named Cookie with Selenium WebDriver (Python)\nDESCRIPTION: This code snippet demonstrates how to retrieve a cookie by name using Selenium WebDriver in Python. It requires the Selenium WebDriver library.  The code navigates to a specific URL, adds a cookie named 'foo' with the value 'bar', and then retrieves the cookie by name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://www.example.com\")\ndriver.add_cookie({\"name\": \"foo\",\n                 \"value\": \"bar\"})\n\n# Get cookie details with named cookie 'foo'\ncookie = driver.get_cookie(\"foo\")\nprint(cookie)\n```\n\n----------------------------------------\n\nTITLE: LoginPage Object in Java\nDESCRIPTION: This Java code shows an example of a LoginPage object that can handle both successful and unsuccessful login attempts. It demonstrates different methods for different outcomes, allowing for assertions to be made in the tests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.en.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class LoginPage {\n    public HomePage loginAs(String username, String password) {\n        // ... clever magic happens here\n    }\n    \n    public LoginPage loginAsExpectingError(String username, String password) {\n        //  ... failed login here, maybe because one or both of the username and password are wrong\n    }\n    \n    public String getErrorMessage() {\n        // So we can verify that the correct error is shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in CSharp\nDESCRIPTION: Demonstrates how to select an option in a Select element by its value attribute in C#. It uses the SelectByValue() method. Throws NoSuchElementException if matching option is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nselect.SelectByValue(\"one\");\n```\n\n----------------------------------------\n\nTITLE: Get Attribute Value JavaScript\nDESCRIPTION: This JavaScript code retrieves the 'value' attribute of an email input element using Selenium WebDriver. It locates the element using `By.name`, then retrieves the attribute's value using `getAttribute`. Asserts that the attribute matches the expected value. Requires Selenium WebDriver and Chai assertions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('should get the element attribute', async () => {\n  let attribute = await driver.findElement(By.name('email_input')).getAttribute('value');\n  expect(attribute).to.equal('diana.prince@selenium.dev');\n});\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value - Python\nDESCRIPTION: Demonstrates how to retrieve the computed CSS value of a web element using Python and Selenium WebDriver.  The `value_of_css_property()` method returns the value of the specified CSS property as a string. A WebDriver instance, an element locator, and the CSS property name are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nlink = driver.find_element(By.ID, \"namedColor\")\nbackground_colour = link.value_of_css_property(\"background-color\")\n\n```\n\n----------------------------------------\n\nTITLE: Quitting the Selenium Session\nDESCRIPTION: This snippet demonstrates how to properly close the Selenium WebDriver session. The `quit()` method closes all browser windows and ends the WebDriver process. It is important to call this method at the end of the script to release resources.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_45\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.quit\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element Selenium\nDESCRIPTION: This code snippet demonstrates how to perform a drag and drop operation from one element to another using Selenium WebDriver. The action is performed by clicking and holding the source element, moving to the target element, and then releasing the mouse. It is available in Java, Python, C#, Ruby, JavaScript and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_60\n\nLANGUAGE: Java\nCODE:\n```\nWebElement source = driver.findElement(By.id(\"draggable\"));\nWebElement target = driver.findElement(By.id(\"droppable\"));\n\nnew Actions(driver)\n  .dragAndDrop(source, target)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Getting All Options from Select in Selenium\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of all options available in a <select> element using Selenium WebDriver. The `getOptions()` method is used to obtain the list of WebElement objects representing the options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = await select.getOptions();\n```\n\n----------------------------------------\n\nTITLE: Adding a Cookie to Browser Context - Ruby\nDESCRIPTION: This Ruby snippet shows how to add a cookie to the browser context using Selenium WebDriver. It navigates to a URL and then uses `driver.manage.add_cookie` to add a cookie with a specified name and value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  \n  # Adds the cookie into current browser context\n  driver.manage.add_cookie(name: \"key\", value: \"value\")\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Directing Logger Output to a File in Java\nDESCRIPTION: This code snippet demonstrates how to direct Selenium logs to a file in Java by adding a FileHandler to the root logger. This overrides the default behavior of sending logs to System.err. No specific dependencies are required beyond the standard Java logging API.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nFileHandler handler = new FileHandler(\"selenium.log\");\nLogger.getLogger(\"\").addHandler(handler);\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Link Text with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a link element on a page using its exact link text with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.linkText()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.linkText(\"Selenium Official Page\"))\n```\n\n----------------------------------------\n\nTITLE: Locating Element Near Another (Python)\nDESCRIPTION: This snippet demonstrates how to locate an input element that is near the element with the ID 'lbl-email' using Selenium's relative locator in Python.  It uses `locate_with` for relative location.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_58\n\nLANGUAGE: Python\nCODE:\n```\nemail_locator = locate_with(By.TAG_NAME, \"input\").near({By.ID: \"lbl-email\"})\n```\n\n----------------------------------------\n\nTITLE: Deleting a Cookie with Selenium WebDriver (Ruby)\nDESCRIPTION: This code snippet demonstrates how to delete a cookie by name using Selenium WebDriver in Ruby. It requires the 'selenium-webdriver' gem. The code navigates to a specific URL, adds two cookies, and then deletes the cookie named 'test1'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  driver.manage.add_cookie(name: \"test1\", value: \"cookie1\")\n  driver.manage.add_cookie(name: \"test2\", value: \"cookie2\")\n\n  # delete a cookie with name 'test1'\n  driver.manage.delete_cookie('test1')\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Shadow DOM Elements - Python\nDESCRIPTION: This snippet shows how to access elements within a Shadow DOM in Python using Selenium. It first locates the shadow host element, then accesses its shadow root using the `shadow_root` property, and finally finds the desired element within the shadow root.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nshadow_host = driver.find_element(By.CSS_SELECTOR, '#shadow_host')\nshadow_root = shadow_host.shadow_root\nshadow_content = shadow_root.find_element(By.CSS_SELECTOR, '#shadow_content')\n```\n\n----------------------------------------\n\nTITLE: Login Test Using Page Objects - Java\nDESCRIPTION: This code snippet demonstrates a login test using the Page Object Model. It utilizes the SignInPage and HomePage objects to interact with the sign-in and home pages. This approach isolates the test logic from UI element locators, improving maintainability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.ja.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n/***\n * Tests login feature\n */\npublic class TestLogin {\n\n  @Test\n  public void testLogin() {\n    SignInPage signInPage = new SignInPage(driver);\n    HomePage homePage = signInPage.loginValidUser(\"userName\", \"password\");\n    assertThat(homePage.getMessageText(), is(\"Hello userName\"));\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait - CSharp\nDESCRIPTION: This C# snippet shows how to implement an explicit wait. It creates a `WebDriverWait` instance and then uses the `Until` method to wait for a specified condition. The condition in this example waits for an element with the ID 'message' to be displayed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.pt-br.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nvar wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));\nvar element = wait.Until(e => e.FindElement(By.Id(\"message\")));\n```\n\n----------------------------------------\n\nTITLE: Using try/finally for driver.quit() - Python\nDESCRIPTION: This Python code snippet demonstrates how to use a `try/finally` block to ensure that `driver.quit()` is always called, even if an exception occurs in the `try` block. This is a robust way to guarantee that the browser session is properly closed, preventing resource leaks in various scenarios. This is used outside of a test context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    #WebDriver code here...\nfinally:\n    driver.quit()\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait with Expected Condition (Java)\nDESCRIPTION: This code snippet demonstrates how to use explicit waits in Selenium using Java with an Expected Condition. It waits for a specific element to be present on the page, with a timeout of 10 seconds. It uses `WebDriverWait` and `ExpectedConditions` to define the condition to wait for.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.ja.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = new WebDriverWait(driver, Duration.ofSeconds(10))\n    .until(ExpectedConditions.presenceOfElementLocated(By.id(\"myDynamicElement\")));\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium\nDESCRIPTION: Demonstrates sending keys to a specific element using Selenium's Actions API. This involves locating the element, creating an Actions object, and using the sendKeys method to send a string of characters to the element. It ensures keys are sent to a specific element, not just the active one.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst element = await driver.findElement(By.tagName('textarea'));\nconst actions = driver.actions();\nawait actions.sendKeys(element, 'text').perform();\n```\n\n----------------------------------------\n\nTITLE: Quitting WebDriver Session in Selenium\nDESCRIPTION: This snippet ends the WebDriver session, closing the browser instance and releasing associated resources.  It is essential to call this method at the end of a test to avoid resource leaks. Dependencies: Initialized WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_42\n\nLANGUAGE: java\nCODE:\n```\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to a New Window/Tab in Selenium\nDESCRIPTION: Demonstrates how to create a new window or tab using Selenium 4's `new_window` functionality and switch the driver's focus to it. The `new_window` method accepts a type argument ('tab' or 'window') to specify whether to create a new tab or a new window. Requires Selenium 4 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n    # Opens a new tab and switches to new tab\ndriver.switch_to.new_window('tab')\n\n    # Opens a new window and switches to new window\ndriver.switch_to.new_window('window')\n```\n\n----------------------------------------\n\nTITLE: Standalone Server Configuration\nDESCRIPTION: Configures a standalone Selenium server to run on port 4449 and sets the session request timeout to 500 seconds. It defines the `server` section for port configuration and the `sessionqueue` section for the session timeout.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.en.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[server]\nport = 4449\n\n[sessionqueue]\nsession-request-timeout = 500\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element with Selenium (Python)\nDESCRIPTION: This code snippet demonstrates how to scroll until the target element is visible in the viewport using Selenium's Actions API. The target element is passed as an argument to the `scroll_to_element` method. This ensures the element is in view before further actions are performed. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"id-of-element\")\naction = ActionChains(driver)\naction.scroll_to_element(element).perform()\n```\n\n----------------------------------------\n\nTITLE: Displaying PATH Environment Variable in Bash\nDESCRIPTION: This snippet displays the current directories listed in the PATH environment variable using the `echo` command in a Bash terminal. This allows users to check if the directory containing their browser driver is already included in the system's PATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.zh-cn.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho $PATH\n```\n\n----------------------------------------\n\nTITLE: Find Element by CSS Selector in JavaScript\nDESCRIPTION: This snippet uses a CSS selector to find a specific web element in JavaScript with Selenium WebDriver. It finds the element with class 'tomatoes' that is a descendant of the element with id 'fruits'. This is done using a single command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fruit = await driver.findElement(By.css('#fruits .tomatoes'));\n```\n\n----------------------------------------\n\nTITLE: Customizing Waits with FluentWait (Java)\nDESCRIPTION: This Java code snippet demonstrates how to customize waits using the FluentWait class in Selenium. It configures the wait to poll every 300 milliseconds, ignore `NoSuchElementException`, and define a custom timeout message.  The `ignoring` method allows specifying exceptions to be ignored during the wait.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.ja.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nWait<WebDriver> wait = new FluentWait<>(driver)\n    .withTimeout(Duration.ofSeconds(10))\n    .pollingEvery(Duration.ofMillis(300))\n    .ignoreAll(Collections.singletonList(NoSuchElementException.class))\n    .withMessage(\"Element never loaded\");\n\nWebElement element = wait.until(driver -> driver.findElement(By.id(\"myDynamicElement\")));\n```\n\n----------------------------------------\n\nTITLE: Switching to New Window - Selenium WebDriver (Java)\nDESCRIPTION: Demonstrates how to switch to a new window or tab in Selenium WebDriver using Java. It stores the original window handle, opens a new window by clicking a link, and iterates through all window handles to find the new one. Dependencies include Selenium WebDriver and JUnit for assertions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nString originalWindow = driver.getWindowHandle();\nassertNotNull(originalWindow);\ndriver.findElement(By.linkText(\"new window\")).click();\nwait.until(ExpectedConditions.numberOfWindowsToBe(2));\nfor (String windowHandle : driver.getWindowHandles()) {\n  if(!originalWindow.contentEquals(windowHandle)) {\n    driver.switchTo().window(windowHandle);\n    break;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies - Python\nDESCRIPTION: Demonstrates how to set cookies using Selenium and CDP in Python. It sets a cookie named 'foo' with value 'bar' for the 'localhost' domain and verifies it. Requires Selenium WebDriver and CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\ndriver.execute_cdp_cmd('Network.setCookie', {\n    'name': 'foo',\n    'value': 'bar',\n    'domain': 'localhost'\n})\ndriver.get(\"http://localhost:8080/cookie\")\nprint(driver.get_cookie('foo'))\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Element CSharp\nDESCRIPTION: This code snippet demonstrates how to send keys (enter text) to a web element using Selenium WebDriver in C#. It finds an element by its name attribute ('email_input') and sends the string 'admin@localhost.dev' to it. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().GoToUrl(inputPage);\nIWebElement element = driver.FindElement(By.Name(\"email_input\"));\nelement.Clear();\nelement.SendKeys(\"admin@localhost.dev\");\n\nAssert.That(element.GetAttribute(\"value\"), Is.EqualTo(\"admin@localhost.dev\"));\n```\n\n----------------------------------------\n\nTITLE: Deleting a Cookie with Selenium WebDriver (Python)\nDESCRIPTION: This code snippet demonstrates how to delete a cookie by name using Selenium WebDriver in Python. It requires the Selenium WebDriver library.  The code navigates to a specific URL, adds two cookies, and then deletes the cookie named 'test1'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://www.example.com\")\ndriver.add_cookie({\"name\": \"test1\",\n                 \"value\": \"cookie1\"})\ndriver.add_cookie({\"name\": \"test2\",\n                 \"value\": \"cookie2\"})\n\n# delete a cookie with name 'test1'\ndriver.delete_cookie(\"test1\")\n```\n\n----------------------------------------\n\nTITLE: WebDriver Quit with Context Manager - Python\nDESCRIPTION: This Python snippet utilizes the `with` statement (context manager) to ensure the WebDriver session is automatically closed upon exiting the `with` block, regardless of exceptions.  It implicitly calls `driver.quit()` when the block is exited.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nwith webdriver.Firefox() as driver:\n  # WebDriver code here...\n\n# WebDriver will automatically quit after indentation\n```\n\n----------------------------------------\n\nTITLE: Exception Handling: Selenium WebDriver (Ruby)\nDESCRIPTION: This Ruby snippet shows how to use a `begin...ensure` block to ensure that the WebDriver instance is always quit, even if an exception occurs during the WebDriver interaction. The `driver.quit` call in the `ensure` block guarantees resource cleanup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nbegin\n    #WebDriver code here...\nensure\n    driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies - Python\nDESCRIPTION: This code snippet demonstrates how to delete all cookies using Selenium WebDriver in Python. It adds cookies and then deletes all of them using the `delete_all_cookies` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://www.example.com\")\ncookie1 = { 'name' : 'test1', 'value' : 'cookie1' }\ncookie2 = { 'name' : 'test2', 'value' : 'cookie2' }\ndriver.add_cookie(cookie1)\ndriver.add_cookie(cookie2)\n\ndriver.delete_all_cookies()\n\nprint(driver.get_cookies())\n```\n\n----------------------------------------\n\nTITLE: Execute Script in Selenium\nDESCRIPTION: This code executes JavaScript code within the context of the browser using Selenium WebDriver.  It shows how to use IJavaScriptExecutor to click on an element, get its innerText, and execute arbitrary JavaScript code, such as logging to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_89\n\nLANGUAGE: CSharp\nCODE:\n```\n\t//creating Chromedriver instance\n\tIWebDriver driver = new ChromeDriver();\n\t//Creating the JavascriptExecutor interface object by Type casting\n\tIJavaScriptExecutor js = (IJavaScriptExecutor) driver;\n\t//Button Element\n\tIWebElement button = driver.FindElement(By.Name(\"btnLogin\"));\n\t//Executing JavaScript to click on element\n\tjs.ExecuteScript(\"arguments[0].click();\", button);\n\t//Get return value from script\n\tString text = (String)js.ExecuteScript(\"return arguments[0].innerText\", button);\n\t//Executing JavaScript directly\n\tjs.ExecuteScript(\"console.log('hello world')\");\n```\n\n----------------------------------------\n\nTITLE: Adding a Cookie to Browser Context - CSharp\nDESCRIPTION: This code snippet demonstrates how to add a cookie to the current browser context using Selenium WebDriver in C#.  It creates a new `Cookie` object and adds it to the browser's cookie collection.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\nCookie cookie = new Cookie(\"key\", \"value\");\ndriver.Manage().Cookies.AddCookie(cookie);\n```\n\n----------------------------------------\n\nTITLE: Quitting Browser Session: Selenium WebDriver (Ruby)\nDESCRIPTION: This snippet shows how to properly quit a Selenium WebDriver browser session in Ruby. It calls the `driver.quit` method, which closes all associated windows, tabs, the browser process, and the background driver process, releasing resources for subsequent sessions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.quit\n```\n\n----------------------------------------\n\nTITLE: Java Selenium Login DSL Method\nDESCRIPTION: This Java method encapsulates the login process using Selenium WebDriver. It takes a username and password as input, fills out the corresponding fields, clicks the login button, and returns an instance of the AccountPage. It abstracts the UI elements from the test code, enhancing maintainability. Dependencies include Selenium WebDriver and PageFactory.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/domain_specific_language.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * Takes a username and password, fills out the fields, and clicks \"login\".\n * @return An instance of the AccountPage\n */\npublic AccountPage loginAsUser(String username, String password) {\n  WebElement loginField = driver.findElement(By.id(\"loginField\"));\n  loginField.clear();\n  loginField.sendKeys(username);\n\n  // Fill out the password field. The locator we're using is \"By.id\", and we should\n  // have it defined elsewhere in the class.\n  WebElement passwordField = driver.findElement(By.id(\"password\"));\n  passwordField.clear();\n  passwordField.sendKeys(password);\n\n  // Click the login button, which happens to have the id \"submit\".\n  driver.findElement(By.id(\"submit\")).click();\n\n  // Create and return a new instance of the AccountPage (via the built-in Selenium\n  // PageFactory).\n  return PageFactory.newInstance(AccountPage.class);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Firefox Options\nDESCRIPTION: This code snippet demonstrates how to add arguments to Firefox options, commonly used for setting headless mode or specifying a profile. The `add_argument` method is used to pass command-line switches to the Firefox browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\noptions.add_argument(\"-headless\")\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait Timeout in Python\nDESCRIPTION: This Python snippet shows how to set the implicit wait timeout, specifying the duration WebDriver should wait when searching for elements. If an element is not found immediately, it will wait up to this duration.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\ndriver.implicitly_wait(10)\n```\n\n----------------------------------------\n\nTITLE: Finding Elements by Tag Name in C#\nDESCRIPTION: This C# code snippet demonstrates how to find all elements with a specified tag name on a web page. It initializes a FirefoxDriver, navigates to a URL, finds elements with the tag name 'p', and prints the text of each element to the console.  It uses the OpenQA.Selenium and OpenQA.Selenium.Firefox NuGet packages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing System.Collections.Generic;\n\nnamespace FindElementsExample {\n class FindElementsExample {\n  public static void Main(string[] args) {\n   IWebDriver driver = new FirefoxDriver();\n   try {\n    // Navigate to Url\n    driver.Navigate().GoToUrl(\"https://example.com\");\n\n    // Get all the elements available with tag name 'p'\n    IList < IWebElement > elements = driver.FindElements(By.TagName(\"p\"));\n    foreach(IWebElement e in elements) {\n     System.Console.WriteLine(e.Text);\n    }\n\n   } finally {\n    driver.Quit();\n   }\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Take Element Screenshot in Selenium\nDESCRIPTION: This code takes a screenshot of a specific element on the page using Selenium WebDriver and saves it as a PNG file. It demonstrates how to find an element by CSS selector, take the element's screenshot, and save it to a file. Requires the org.apache.commons.io.FileUtils dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_82\n\nLANGUAGE: Java\nCODE:\n```\nimport org.apache.commons.io.FileUtils;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class SeleniumelementTakeScreenshot {\n  public static void main(String args[]) throws IOException {\n    WebDriver driver = new ChromeDriver();\n    driver.get(\"https://www.example.com\");\n    WebElement element = driver.findElement(By.cssSelector(\"h1\"));\n    File scrFile = element.getScreenshotAs(OutputType.FILE);\n    FileUtils.copyFile(scrFile, new File(\"./image.png\"));\n    driver.quit();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Title in Java\nDESCRIPTION: Retrieves the title of the current web page using Selenium's WebDriver. The WebDriver instance must be initialized and navigated to the desired page before calling this method. The method returns a string containing the page title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/web-form.html\");\nString title = driver.getTitle();\nassertThat(title).isEqualTo(\"Web form\");\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window - Selenium WebDriver - JavaScript\nDESCRIPTION: This snippet sets the browser window to fullscreen mode using the Selenium WebDriver API in JavaScript. It requires an await since it is asynchronous. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.manage().window().fullscreen();\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium (Python)\nDESCRIPTION: This Python code demonstrates a copy and paste operation using Selenium's ActionChains API. It sends the keys 'Selenium', selects all text (using CTRL+A or CMD+A), copies the text (CTRL+C or CMD+C), moves to the end of the line, pastes the copied text (CTRL+V or CMD+V), and then adds an exclamation mark. The final result should be 'SeleniumSelenium!'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom sys import platform\n\nif platform == \"darwin\":\n    select_all = Keys.COMMAND + \"a\"\n    copy = Keys.COMMAND + \"c\"\n    paste = Keys.COMMAND + \"v\"\nelse:\n    select_all = Keys.CONTROL + \"a\"\n    copy = Keys.CONTROL + \"c\"\n    paste = Keys.CONTROL + \"v\"\n\nactions = ActionChains(driver)\nactions.send_keys(\"Selenium\")\n    .key_down(select_all).key_up(select_all)\n    .key_down(copy).key_up(copy)\n    .send_keys(Keys.END)\n    .key_down(paste).key_up(paste)\n    .send_keys(\"!\")\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Get Page Title with Selenium\nDESCRIPTION: Retrieves the title of the current web page loaded in the browser using Selenium WebDriver. This functionality is demonstrated in Java, Python, C#, Ruby, and JavaScript. The `driver.title` property or method is used to access the title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.ja.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Title\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium JavaScript\nDESCRIPTION: This snippet shows how to select an option in a Select element by its value attribute in JavaScript. It uses the `selectByValue()` method of the Select object.  It throws NoSuchElementException if no matching option is found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait select.selectByValue('two');\n```\n\n----------------------------------------\n\nTITLE: Quitting a Selenium Driver Session in CSharp\nDESCRIPTION: This C# code snippet demonstrates the use of `driver.Quit()` to close the browser and end the WebDriver session after the test execution. The method is typically called within a `TearDown` or `TestCleanup` method in testing frameworks such as MSTest, NUnit, or xUnit to ensure proper resource cleanup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.pt-br.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\npublic class FirstScript\n{\n    public static void Main(string[] args)\n    {\n        IWebDriver driver = new ChromeDriver();\n\n        driver.Navigate().GoToUrl(\"https://www.google.com/\");\n\n        Console.WriteLine(driver.Title);\n\n        driver.Quit();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CDP Connection in Java\nDESCRIPTION: This Java code snippet demonstrates how to establish a connection to the Chrome DevTools Protocol (CDP) using Selenium. It initializes a ChromeDriver, gets the DevTools, and then creates a session. This snippet is crucial for interacting with the browser at a lower level than typical WebDriver commands allow.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/_index.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nChromeDriver driver = (ChromeDriver) new ChromeDriver();\nDevTools devTools = driver.getDevTools();\ndevTools.createSessionIfNecessary();\ndevTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));\ndevTools.addListener(Network.requestWillBeSent(), request -> {\n  request.getRequest().getUrl();\n});\n```\n\n----------------------------------------\n\nTITLE: Using RemoteWebDriverBuilder in Java\nDESCRIPTION: Demonstrates the use of RemoteWebDriverBuilder in Java. This builder automatically augments the driver to retrieve all browser-specific functions, offering a convenient method for enabling these features. Using this is the best way to retrieve functionality.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_25\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = RemoteWebDriver.builder()\n        .address(new URL(\"http://localhost:4444\"))\n        .capabilities(new ChromeOptions())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies with Selenium WebDriver (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to retrieve all cookies in the current browser context using Selenium WebDriver in JavaScript. It assumes the webdriver is already initiated. The code navigates to a specific URL, adds two cookies, and then retrieves all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.example.com/');\nconst cookies = await driver.manage().getCookies();\n```\n\n----------------------------------------\n\nTITLE: Find Elements within an Element - Java\nDESCRIPTION: This Java code retrieves a specific element (a div), and then finds all child elements with the tag name 'p' within that element, printing the text of each child. It initializes a ChromeDriver, navigates to a URL, finds the parent element using `driver.findElement`, finds child elements using `element.findElements`, and iterates to print the text content of each child element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_29\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.By;\n  import org.openqa.selenium.WebDriver;\n  import org.openqa.selenium.WebElement;\n  import org.openqa.selenium.chrome.ChromeDriver;\n  import java.util.List;\n\n  public class findElementsFromElement {\n      public static void main(String[] args) {\n          WebDriver driver = new ChromeDriver();\n          try {\n              driver.get(\"https://example.com\");\n\n              // Obtém o elemento com o nome da tag 'div'\n              WebElement element = driver.findElement(By.tagName(\"div\"));\n\n              // Obtém todos os elementos disponiveis com o nome da tag 'p'\n              List<WebElement> elements = element.findElements(By.tagName(\"p\"));\n              for (WebElement e : elements) {\n                  System.out.println(e.getText());\n              }\n          } finally {\n              driver.quit();\n          }\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel Kotlin\nDESCRIPTION: This snippet demonstrates how to scroll to a specific element within a web page using Selenium's Wheel actions in Kotlin. It takes a WebElement as input and scrolls the viewport such that the bottom of the element is at the bottom of the screen. This is often needed before interacting with an element that might not be initially visible in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element = driver.findElement(By.id(\"target\"))\nActions(driver)\n  .scroll(element, 0, 0)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Transforming Responses using CDP in C#\nDESCRIPTION: This C# code demonstrates transforming network responses using the Chrome DevTools Protocol (CDP) in Selenium. It intercepts network requests, modifies the response body, and then fulfills the request with the modified content. The code navigates to a specified URL and asserts that the page title has been successfully transformed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.ExecuteCdpCommand(\"Network.enable\", new Dictionary<string, object>());\nstring requestId = (string)((Dictionary<string, object>)driver.ExecuteCdpCommand(\"Network.getRequestId\", new Dictionary<string, object>()))[\"requestId\"];\nstring newResponse = \"<h1>Target Page</h1>\";\ndriver.ExecuteCdpCommand(\"Network.fulfillRequest\", new Dictionary<string, object>()\n{\n    {\"requestId\", requestId},\n    {\"statusCode\", 200},\n    {\"body\", newResponse}\n});\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Driver with Options - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set up a ChromeDriver with specified options and the Chrome service. It showcases how to use `setDefaultService` to configure the driver before instantiation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.ja.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst service = new ChromeService();\nChrome.setDefaultService(service);\nconst driver = await new Chrome();\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset with Selenium\nDESCRIPTION: This code performs a drag-and-drop operation by a specified offset using Selenium WebDriver. It first clicks and holds the source element, moves the mouse by the offset, and then releases the mouse. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nWebElement source = driver.findElement(By.id(\"draggable\"));\nnew Actions(driver)\n  .clickAndHold(source)\n  .moveByOffset(50, 50)\n  .release()\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Element Java\nDESCRIPTION: This code snippet demonstrates how to send keys (enter text) to a web element using Selenium WebDriver in Java. It finds an element by its name attribute ('email_input') and then sends the string 'admin@localhost.dev' to it. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\");\nWebElement element = driver.findElement(By.name(\"email_input\"));\nelement.clear();\nelement.sendKeys(\"admin@localhost.dev\");\nString value = element.getAttribute(\"value\");\nassertThat(value).isEqualTo(\"admin@localhost.dev\");\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookies in Ruby with Selenium\nDESCRIPTION: This Ruby code demonstrates setting both Strict and Lax SameSite cookies using Selenium. It navigates to a URL, adds two cookies with different SameSite attributes, and prints the cookie information to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_33\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  # Adds the cookie into current browser context with sameSite 'Strict' (or) 'Lax'\n  driver.manage.add_cookie(name: \"foo\", value: \"bar\", same_site: \"Strict\")\n  driver.manage.add_cookie(name: \"foo1\", value: \"bar\", same_site: \"Lax\")\n  puts driver.manage.cookie_named('foo')\n  puts driver.manage.cookie_named('foo1')\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookie Attribute\nDESCRIPTION: This Java snippet demonstrates setting a SameSite cookie attribute.  It uses the Selenium WebDriver to add a cookie to the browser with the SameSite attribute configured to either 'Strict' or 'Lax'. Requires Selenium 4+ and Chrome 80+.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_30\n\nLANGUAGE: java\nCODE:\n```\n//driver.manage().deleteAllCookies();\n//\n//        Cookie cookie = new Cookie.Builder(\"key\", \"value\")\n//                .domain(\"localhost\")\n//                .sameSite(\"Strict\")\n//                .isSecure(true)\n//                .path(\"/\")\n//                .build();\n//\n//        driver.manage().addCookie(cookie)\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait with Lambda (Ruby)\nDESCRIPTION: This code snippet demonstrates explicit waits in Selenium using Ruby, waiting for an element with the ID 'myDynamicElement' to be present within 10 seconds.  It uses `Selenium::WebDriver::Wait` and passes a block to the `until` method to define the waiting condition.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.ja.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nwait = Selenium::WebDriver::Wait.new(:timeout => 10)\nelement = wait.until { driver.find_element(:id => \"myDynamicElement\") }\n```\n\n----------------------------------------\n\nTITLE: Maximize Window - Ruby\nDESCRIPTION: Demonstrates how to maximize the browser window in Ruby using Selenium WebDriver. The `maximize` method expands the window to fill the screen without blocking the operating system's menu and toolbars.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.manage.window.maximize\n```\n\n----------------------------------------\n\nTITLE: Execute Script in Selenium\nDESCRIPTION: This code executes JavaScript code within the context of the browser using Selenium WebDriver. It demonstrates how to execute JavaScript to capture the innerText of an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_88\n\nLANGUAGE: Python\nCODE:\n```\n    # Stores the header element\nheader = driver.find_element(By.CSS_SELECTOR, \"h1\")\n\n    # Executing JavaScript to capture innerText of header element\ndriver.execute_script('return arguments[0].innerText', header)\n```\n\n----------------------------------------\n\nTITLE: Python: WebDriver Initialization with Selenium Manager\nDESCRIPTION: This Python code snippet demonstrates how to initialize a WebDriver using Selenium Manager directly, without the need for external packages like `webdriver_manager`. Selenium Manager handles the driver setup automatically. The snippet depends on the `selenium` package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.en.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\n\ndriver = webdriver.Chrome()\ndriver.get(\"https://www.selenium.dev/\")\n```\n\n----------------------------------------\n\nTITLE: Find Element using CSS Selector (Optimized)\nDESCRIPTION: This snippet demonstrates how to locate an element using a single CSS selector that combines the ID of the parent element and the class name of the target element. This approach is more efficient than nested lookups because it issues a single command to the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fruit = await driver.findElement(By.css('#fruits .tomatoes'));\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's Select class, specifically by matching the value attribute of the option. The `selectByValue()` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait select.selectByValue('one');\n```\n\n----------------------------------------\n\nTITLE: Tearing Down WebDriver in Java\nDESCRIPTION: This code snippet demonstrates how to tear down the WebDriver instance after the tests are complete in Java using JUnit. It quits the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's Select class, specifically by matching the value attribute of the option. The `select_by(:value, 'value')` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\nselect.select_by(:value, 'one')\n```\n\n----------------------------------------\n\nTITLE: Setting Page Ranges using PrintOptions in Java\nDESCRIPTION: This code snippet shows how to set the page ranges to print using the PrintOptions class in Java.  The `setPageRanges()` method is used to set the desired page range. The `getPageRanges()` is used to confirm the setting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setPageRanges(\"2-4\");\n\nassertThat(printOptions.getPageRanges()).isEqualTo(\"2-4\");\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins using PrintOptions in Java\nDESCRIPTION: This code snippet demonstrates how to set the page margins using the PrintOptions class in Java. The `setPageMargin()` method is used to specify the desired margin sizes (top, bottom, left, right). The `getPageMargin()` is used to confirm the setting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nPrintOptions.PageMargin pageMargin = new PrintOptions.PageMargin(10, 20, 30, 40, PrintOptions.Units.MM);\nprintOptions.setPageMargin(pageMargin);\n\nassertThat(printOptions.getPageMargin()).isEqualTo(pageMargin);\n```\n\n----------------------------------------\n\nTITLE: Finding Element by Name with Selenium\nDESCRIPTION: This snippet demonstrates how to find an HTML element by its 'name' attribute using Selenium WebDriver. The 'findElement' method with the 'By.name' locator is used. The `name` attribute is \"q\" in this case, commonly used in search input fields.  Dependencies: initialized WebDriver instance and a loaded webpage containing the target element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nval searchBox = driver.findElement(By.name(\"q\"))\nsearchBox.sendKeys(\"Selenium\")\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Class Name in Selenium\nDESCRIPTION: This code demonstrates how to locate a web element using its class name in Selenium WebDriver. It initializes a ChromeDriver instance and uses the `findElement` method with `By.className(\"information\")` to find the element with the specified class. The example is provided in multiple languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.common.by import By\n driver = webdriver.Chrome()\n\tdriver.find_element(By.CLASS_NAME, \"information\")\n```\n\n----------------------------------------\n\nTITLE: Extending LoadableComponent in Java\nDESCRIPTION: This code demonstrates extending the `LoadableComponent` class in Java to create a more robust Page Object. By extending this class, the `EditIssue` class inherits methods for ensuring the page is loaded correctly before interacting with its elements, reducing boilerplate code.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.en.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class EditIssue extends LoadableComponent<EditIssue> {\n  // rest of class ignored for now\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait - C#\nDESCRIPTION: This C# snippet demonstrates an explicit wait. It waits up to 10 seconds for the element with the tag name \"p\" to have text that starts with \"Selenium\".\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.en.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = new WebDriverWait(driver, TimeSpan.FromSeconds(10))\n    .Until(d => d.FindElement(By.TagName(\"p\")).Text.StartsWith(\"Selenium\"));\n```\n\n----------------------------------------\n\nTITLE: Customized Wait - C#\nDESCRIPTION: This C# snippet demonstrates a customized wait.  It sets a timeout of 30 seconds, polling interval of 5 seconds, ignoring specific exceptions and waits for an element to be displayed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.en.md#_snippet_12\n\nLANGUAGE: CSharp\nCODE:\n```\nDefaultWait<IWebDriver> wait = new DefaultWait<IWebDriver>(driver);\nwait.Timeout = TimeSpan.FromSeconds(30);\nwait.PollingInterval = TimeSpan.FromSeconds(5);\nwait.IgnoreExceptionTypes(typeof(NoSuchElementException), typeof(ElementNotInteractableException));\nwait.Message = \"Element is not interactable\";\n\nIWebElement element = wait.Until(d =>\n{\n    IWebElement ele = d.FindElement(By.TagName(\"p\"));\n    Console.WriteLine(ele.Text);\n    return ele.Displayed;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium\nDESCRIPTION: This code snippet demonstrates how to initialize a Select object in Selenium after locating a <select> element. It covers multiple languages and shows the basic usage pattern. Note that the <select> element cannot be disabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement selectElement = driver.FindElement(By.Name(\"selectomatic\"));\nSelectElement select = new(selectElement);\n```\n\n----------------------------------------\n\nTITLE: Add Network Intercept - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates adding a network intercept using Selenium BiDi.  It requires the Selenium WebDriver and establishes a network intercept to monitor and potentially modify network traffic to the specified URL pattern.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.addNetworkInterceptor('https://www.selenium.dev/');\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Viewport Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse cursor to a specific offset from the top-left corner of the current viewport using Selenium WebDriver. The action is performed using the `moveByOffset` method of the Actions class, and it's available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_53\n\nLANGUAGE: Kotlin\nCODE:\n```\nActions(driver)\n  .moveByOffset(15, 20)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Quitting a Selenium Driver Session in Ruby\nDESCRIPTION: This Ruby snippet illustrates how to quit a Selenium WebDriver session. It ensures that the browser instance is properly closed and all associated resources are released after the test. The `driver.quit` method is called in the `ensure` block to guarantee its execution, even if exceptions occur during the test.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.pt-br.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\n# frozen_string_literal: true\n\nrequire 'selenium-webdriver'\nrequire 'rspec'\n\ndescribe 'Driver Options' do\n  it 'basic chrome options' do\n    options = Selenium::WebDriver::Chrome::Options.new\n    options.add_argument('--headless=new')\n    driver = Selenium::WebDriver.for :chrome, options: options\n    driver.get 'https://www.google.com'\n    expect(driver.title).to include('Google')\n  ensure\n    driver.quit\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Click Element Java\nDESCRIPTION: This code snippet demonstrates how to click a web element using Selenium WebDriver in Java. It finds an element by its name attribute ('color_input') and then performs a click action on it. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\");\nWebElement element = driver.findElement(By.name(\"color_input\"));\nelement.click();\nString value = element.getAttribute(\"value\");\nassertThat(value).isEqualTo(\"#ff0000\");\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium Python\nDESCRIPTION: This snippet demonstrates how to select an option in a Select element by its value attribute in Python. It uses the `select_by_value()` method of the Select object. It raises NoSuchElementException if no matching option is found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nselect.select_by_value(\"two\")\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name Selenium Java\nDESCRIPTION: This Java code snippet shows how to retrieve the tag name of an element using Selenium WebDriver. It finds an element by name and then retrieves its tag name using the `getTagName()` method, asserting the tag name is input.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\");\nWebElement element = driver.findElement(By.name(\"email_input\"));\nassertThat(element.getTagName()).isEqualTo(\"input\");\n```\n\n----------------------------------------\n\nTITLE: Add Directory to PATH (Bash)\nDESCRIPTION: This command appends a new directory containing the driver to the PATH environment variable in the user's .bash_profile. It ensures that the system can locate the driver executable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.pt-br.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho 'export PATH=$PATH:/path/to/driver' >> ~/.bash_profile\nsource ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Relative Locator - Below in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate an element below another element using Relative Locators in Selenium.  It locates an input element below the element with the id 'email'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet passwordLocator = locateWith(By.tagName('input')).below(By.id('email'));\n```\n\n----------------------------------------\n\nTITLE: Relative Locators: Locating Element Below\nDESCRIPTION: This code demonstrates how to locate an element below another element using Relative Locators in Selenium 4. It uses `RelativeLocator.with(By.tagName(\"input\")).below(By.id(\"email\"))` to locate an input element below the element with the ID 'email'. This technique is valuable when direct element identification is challenging.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_42\n\nLANGUAGE: Java\nCODE:\n```\nBy passwordLocator = RelativeLocator.with(By.tagName(\"input\")).below(By.id(\"email\"));\n```\n\n----------------------------------------\n\nTITLE: Switching to IFrame by WebElement - Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to switch to an IFrame using a WebElement. It finds the IFrame element using CSS selector, then switches the driver's focus to that frame, and finally clicks the button inside the IFrame.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\n//Store the web element\nval iframe = driver.findElement(By.cssSelector(\"#modal>iframe\"))\n\n//Switch to the frame\ndriver.switchTo().frame(iframe)\n\n//Now we can click the button\ndriver.findElement(By.tagName(\"button\")).click()\n```\n\n----------------------------------------\n\nTITLE: Locating Element Near Another - Java\nDESCRIPTION: Locates an input element near the element with ID 'lbl-email'. This approach is beneficial when dealing with form elements that lack easily constructed locators, but their associated label elements are readily identifiable. It leverages the `near` relative locator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_57\n\nLANGUAGE: Java\nCODE:\n```\nBy emailLocator = RelativeLocator.with(By.tagName(\"input\")).near(By.id(\"lbl-email\"));\n```\n\n----------------------------------------\n\nTITLE: Installing Add-ons in Firefox with Selenium (Python)\nDESCRIPTION: This Python snippet installs a signed Firefox add-on from a given file path. The `install_addon` method of the `driver` object is used to perform the installation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ndriver.install_addon(os.abspath(\"/path/to/extension.xpi\"))\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Confirm in Python\nDESCRIPTION: This Python code snippet demonstrates how to interact with a JavaScript confirm dialog using Selenium WebDriver. It waits for the alert, gets the alert text, and then dismisses the alert.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nalert = wait.until(expected_conditions.alert_is_present())\ntext = alert.text\nalert.dismiss()\n```\n\n----------------------------------------\n\nTITLE: Closing Window and Switching Back - Selenium WebDriver\nDESCRIPTION: Illustrates how to close the current window or tab and switch back to the previously active window using Selenium WebDriver. It's crucial to switch back to a valid window handle to avoid a 'No Such Window Exception'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n//Close the tab or window\nawait driver.close();\n\n//Switch back to the old tab or window\nawait driver.switchTo().window(originalWindow);\n\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot - Selenium\nDESCRIPTION: This C# snippet demonstrates how to capture a screenshot of the current browser window using Selenium WebDriver. It navigates to a website, takes a screenshot, saves it as a PNG image, and then closes the browser. Requires the Selenium.WebDriver and Selenium.Chrome NuGet packages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_74\n\nLANGUAGE: CSharp\nCODE:\n```\n  using OpenQA.Selenium;\n  using OpenQA.Selenium.Chrome;\n  using OpenQA.Selenium.Support.UI;\n\n  var driver = new ChromeDriver();\n  driver.Navigate().GoToUrl(\"http://www.example.com\");\n  Screenshot screenshot = (driver as ITakesScreenshot).GetScreenshot();\n  screenshot.SaveAsFile(\"screenshot.png\", ScreenshotImageFormat.Png); // Format values are Bmp, Gif, Jpeg, Png, Tiff\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies with Selenium WebDriver (CSharp)\nDESCRIPTION: This code snippet demonstrates how to retrieve all cookies in the current browser context using Selenium WebDriver in C#. It requires the Selenium WebDriver NuGet package. The code navigates to a specific URL, adds two cookies, and then retrieves all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\ndriver.Manage().Cookies.AddCookie(new Cookie(\"test1\", \"cookie1\"));\ndriver.Manage().Cookies.AddCookie(new Cookie(\"test2\", \"cookie2\"));\n\n// Get all available cookies\nvar cookies = driver.Manage().Cookies.AllCookies;\n```\n\n----------------------------------------\n\nTITLE: Accessing Shadow DOM in Python\nDESCRIPTION: This snippet shows how to access elements inside a shadow DOM using Selenium in Python. It finds the shadow host element, gets the shadow root, and then finds an element within the shadow root.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nshadow_host = driver.find_element(By.CSS_SELECTOR, '#shadow_host')\nshadow_root = shadow_host.shadow_root\nshadow_content = shadow_root.find_element(By.CSS_SELECTOR, '#shadow_content')\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its index (position) using Selenium WebDriver. The `selectByIndex()` method is used to select the option based on its index, starting from 0.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\nselect.selectByIndex(0)\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Content - JavaScript\nDESCRIPTION: This snippet demonstrates how to get the text content of a web element using Selenium WebDriver in JavaScript. It finds an element by ID and uses the getText() method to retrieve its text content as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst link = await driver.findElement(By.id('justanotherlink'))\nexpect(await link.getText()).toBe('Just another link')\n```\n\n----------------------------------------\n\nTITLE: Navigate to URL with Selenium (CSharp)\nDESCRIPTION: This snippet shows how to navigate to a specific URL using Selenium WebDriver in C#. It uses the `Navigate().GoToUrl()` method to open the specified URL. The code assumes the WebDriver instance has already been created.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://selenium.dev\");\n```\n\n----------------------------------------\n\nTITLE: Deselecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to deselect an option in a multiple select element by its `value` attribute using Selenium WebDriver. The `deselect_by_value()` method is used to deselect the option based on the provided value. This method only applies to multiple select lists.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\nselect.deselect_by_value(\"eggs\")\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Prompt in CSharp\nDESCRIPTION: This C# code snippet demonstrates how to interact with a JavaScript prompt dialog using Selenium WebDriver. It clicks a link to trigger the prompt, waits for the alert to appear using `ExpectedConditions.AlertIsPresent()`, stores the alert in the `IAlert` interface, sends the string \"Selenium\" to the prompt, and then accepts the alert (clicks OK).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n//Click the link to activate the alert\ndriver.FindElement(By.LinkText(\"See a sample prompt\")).Click();\n\n//Wait for the alert to be displayed and store it in a variable\nIAlert alert = wait.Until(ExpectedConditions.AlertIsPresent());\n\n//Type your message\nalert.SendKeys(\"Selenium\");\n\n//Press the OK button\nalert.Accept();\n```\n\n----------------------------------------\n\nTITLE: Find All Elements by Tag Name\nDESCRIPTION: This snippet demonstrates how to find all elements on a page that match a specific tag name. It uses the `findElements` method with `By.tagName` to locate all `<li>` elements. The result is a list of WebElement objects, representing all the list items on the page. If no elements are found it returns an empty list.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\nList<WebElement> plants = driver.findElements(By.tagName(\"li\"));\n```\n\n----------------------------------------\n\nTITLE: Exception Handling: Selenium WebDriver (Python)\nDESCRIPTION: This Python snippet shows how to use a `try...finally` block to ensure that the WebDriver instance is always quit, even if an exception occurs during the WebDriver interaction. The `driver.quit()` call in the `finally` block guarantees resource cleanup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    #WebDriver code here...\nfinally:\n    driver.quit()\n```\n\n----------------------------------------\n\nTITLE: Node Configuration TOML (Docker Integration)\nDESCRIPTION: Configures a Selenium Grid node to run sessions in Docker containers, disabling driver detection and setting a maximum of 2 concurrent sessions. The configuration maps stereotypes to Docker images and specifies the Docker daemon URL, as well as an optional video recording image. Also includes optional device mappings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.pt-br.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[node]\ndetect-drivers = false\nmax-sessions = 2\n\n[docker]\nconfigs = [\n    \"selenium/standalone-chrome:93.0\", \"{\\\"browserName\\\": \\\"chrome\\\", \\\"browserVersion\\\": \\\"91\\\"}\", \n    \"selenium/standalone-firefox:92.0\", \"{\\\"browserName\\\": \\\"firefox\\\", \\\"browserVersion\\\": \\\"92\\\"}\"\n]\n#Optionally define all device files that should be mapped to docker containers\n#devices = [\n#    \"/dev/kvm:/dev/kvm\"\n#]\nurl = \"http://localhost:2375\"\nvideo-image = \"selenium/video:latest\"\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Alert in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to interact with a JavaScript alert using Selenium WebDriver. It finds an element that triggers the alert, waits for the alert to be displayed, retrieves the alert text, and then accepts the alert.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n//Click the link to activate the alert\ndriver.findElement(By.linkText(\"See an example alert\")).click()\n\n//Wait for the alert to be displayed and store it in a variable\nval alert = wait.until(ExpectedConditions.alertIsPresent())\n\n//Store the alert text in a variable\nval text = alert.getText()\n\n//Press the OK button\nalert.accept()\n```\n\n----------------------------------------\n\nTITLE: Fetching Attribute Value Java\nDESCRIPTION: This Java snippet demonstrates how to fetch the 'value' attribute of an element using Selenium's `getAttribute` method.  It assumes that a WebDriver instance (`driver`) is initialized and pointing to a webpage containing the element. The `getAttribute` method returns the string value of the specified attribute.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_42\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"email_input\"));\nString attribute = element.getAttribute(\"value\");\nassertThat(attribute).isEqualTo(\"\");\nSystem.out.println(attribute);\n```\n\n----------------------------------------\n\nTITLE: Print Page in Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to print a page using Selenium WebDriver. This feature requires Chromium in headless mode. The code sets up print options, specifies page ranges, and retrieves the content as a PDF in base64 encoded format. Dependencies: org.openqa.selenium.print.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_68\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.print.PrintOptions;\n\ndriver.get(\"https://www.selenium.dev\");\nprinter = (PrintsPage) driver;\n\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setPageRanges(\"1-2\");\n\nPdf pdf = printer.print(printOptions);\nString content = pdf.getContent();\n```\n\n----------------------------------------\n\nTITLE: Installing Unsigned Add-ons (Temporary) in Firefox with Selenium (CSharp)\nDESCRIPTION: This snippet demonstrates how to install an unsigned Firefox add-on as a temporary add-on in C#. It uses the `InstallAddon` method, specifying a directory containing the add-on and setting `temporary` to `true`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\nstring id = ((IHasExtensions)driver).InstallAddon(Path.Combine(TestContext.CurrentContext.TestDirectory, \"webextensions-selenium-example\"), true);\n```\n\n----------------------------------------\n\nTITLE: Customizing Wait - CSharp\nDESCRIPTION: This C# snippet demonstrates customizing a wait by ignoring specific exceptions, in this case, `NoSuchElementException`. It instantiates `WebDriverWait` with a timeout, sets the polling interval, and ignores the specified exception during the waiting process.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.pt-br.md#_snippet_12\n\nLANGUAGE: CSharp\nCODE:\n```\nvar wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10))\n{\n    PollingInterval = TimeSpan.FromMilliseconds(500)\n};\nwait.IgnoreExceptionTypes(typeof(NoSuchElementException));\nvar element = wait.Until(e => e.FindElement(By.Id(\"foo\")));\n```\n\n----------------------------------------\n\nTITLE: Finding Element by Name with Selenium\nDESCRIPTION: This snippet demonstrates how to find an HTML element by its 'name' attribute using Selenium WebDriver. The 'findElement' method with the 'By.name' locator is used. The `name` attribute is \"q\" in this case, commonly used in search input fields.  Dependencies: initialized WebDriver instance and a loaded webpage containing the target element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nWebElement searchBox = driver.findElement(By.name(\"q\"));\nsearchBox.sendKeys(\"Selenium\");\n```\n\n----------------------------------------\n\nTITLE: Clear Element Kotlin\nDESCRIPTION: This code snippet demonstrates how to clear the content of a text field using Selenium WebDriver in Kotlin. It navigates to a URL, finds an element by its name attribute ('email_input'), and then clears it. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\n// Navigate to Url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n\t//Clear field to empty it from any previous data\n\tdriver.findElement(By.name(\"email_input\")).clear()\n```\n\n----------------------------------------\n\nTITLE: Getting Current URL in JavaScript\nDESCRIPTION: Retrieves the current URL from the browser's address bar using Selenium WebDriver in JavaScript. Requires the WebDriver to be initialized and navigated to a page. The URL is extracted and compared against expected value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.en.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.selenium.dev/selenium/web/web-form.html');\nconst url = await driver.getCurrentUrl();\nassert.strictEqual(url, 'https://www.selenium.dev/selenium/web/web-form.html');\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait - JavaScript\nDESCRIPTION: This code snippet shows how to implement an explicit wait in JavaScript. Explicit waits allow you to wait for a specific condition to be true before proceeding with the next command. This snippet waits up to 10 seconds for the element with ID 'message' to be displayed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.zh-cn.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.wait(() => driver.findElement(By.id('message')).isDisplayed(), { timeout: 10000 });\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium\nDESCRIPTION: Demonstrates sending keys to a specific element using Selenium's Actions API. This involves locating the element, creating an Actions object, and using the sendKeys method to send a string of characters to the element. It ensures keys are sent to a specific element, not just the active one.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nWebElement element = driver.findElement(By.tagName(\"textarea\"));\nActions actions = new Actions(driver);\nactions.sendKeys(element, \"text\").perform();\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element by Class Name\nDESCRIPTION: This snippet demonstrates how to find the first element matching a specific class name within the entire DOM using Selenium WebDriver. It uses the `FindElement` method with `By.ClassName` to locate the first element with the class \"tomatoes\". The result is an IWebElement object representing the located element, which can be used for further actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nvar vegetable = driver.FindElement(By.ClassName(\"tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium - CSharp\nDESCRIPTION: This snippet demonstrates how to set an implicit wait in Selenium using C#. The `ImplicitWait` property of the `Timeout` property on the `driver` object is used to set the duration. This ensures the driver waits a specified amount of time before throwing an exception when searching for elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.pt-br.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium Ruby\nDESCRIPTION: This snippet demonstrates how to select an option in a Select element by its visible text in Ruby. It uses the `select_by` method with `:text` option. It raises NoSuchElementException if no matching option is found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nselect.select_by(:text, 'Four')\n```\n\n----------------------------------------\n\nTITLE: Implementing load and isLoaded methods in Java\nDESCRIPTION: This code shows the implementation of the `load` and `isLoaded` methods required when extending `LoadableComponent`. The `load` method navigates to the issue creation page, and the `isLoaded` method asserts that the driver is on the correct page by checking the URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.en.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  @Override\n  protected void load() {\n    driver.get(\"https://github.com/SeleniumHQ/selenium/issues/new?assignees=&labels=I-defect%2Cneeds-triaging&projects=&template=bug-report.yml&title=%5B%F0%9F%90%9B+Bug%5D%3A+\");\n  }\n\n  @Override\n  protected void isLoaded() throws Error {\n    String url = driver.getCurrentUrl();\n    assertTrue(\"Not on the issue entry page: \" + url, url.endsWith(\"/new\"));\n  }\n```\n\n----------------------------------------\n\nTITLE: Click and Release with Selenium\nDESCRIPTION: Moves to the center of an element, presses, and releases the left mouse button, simulating a standard click.  It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"clickable\"));\nActions actions = new Actions(driver);\nactions.MoveToElement(element).Click().Perform();\n```\n\n----------------------------------------\n\nTITLE: Locating Element Near Another (Kotlin)\nDESCRIPTION: This snippet demonstrates how to locate an input element near the element with the ID 'lbl-email' using Selenium's RelativeLocator in Kotlin.  It uses `RelativeLocator.with` and `near` functions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_61\n\nLANGUAGE: Kotlin\nCODE:\n```\nval emailLocator = RelativeLocator.with(By.tagName(\"input\")).near(By.id(\"lbl-email\"));\n```\n\n----------------------------------------\n\nTITLE: Find All Elements by Tag Name\nDESCRIPTION: This snippet demonstrates how to find all elements on a page that match a specific tag name. It uses the `findElements` method with `By.tagName` to locate all `li` elements. The result is a list of WebElement objects, representing all the list items on the page. If no elements are found it returns an empty list.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst plants = await driver.findElements(By.tagName('li'));\n```\n\n----------------------------------------\n\nTITLE: Deselecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to deselect an option in a multiple select element by its `value` attribute using Selenium WebDriver. The `deselectByValue()` method is used to deselect the option based on the provided value.  This method only applies to multiple select lists.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_42\n\nLANGUAGE: Java\nCODE:\n```\nselect.deselectByValue(\"eggs\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox Driver with Options\nDESCRIPTION: This code snippet demonstrates how to initialize a Firefox driver with basic options in JavaScript. It shows the essential steps to create a FirefoxOptions object and use it when instantiating the FirefoxDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { Builder } = require('selenium-webdriver');\nconst firefox = require('selenium-webdriver/firefox');\n\nlet options = new firefox.Options();\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop on Element with Selenium\nDESCRIPTION: This code performs a drag-and-drop operation from one element to another using Selenium WebDriver. It first clicks and holds the source element, then moves to the target element's location, and finally releases the mouse. It leverages the `DragAndDrop` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement source = driver.FindElement(By.Id(\"draggable\"));\nIWebElement target = driver.FindElement(By.Id(\"droppable\"));\nnew Actions(driver)\n    .DragAndDrop(source, target)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Display PATH Environment Variable (Bash/Zsh)\nDESCRIPTION: This snippet displays the directories listed in the PATH environment variable. This is helpful for determining if the directory containing the driver executable is already included in the PATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.ja.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho $PATH\n```\n\n----------------------------------------\n\nTITLE: Adding Pause in Actions - Python\nDESCRIPTION: This Python snippet demonstrates adding a pause between actions. It utilizes the `pause` method of the `ActionChains` class to insert a 100 millisecond delay.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nActionChains(driver)\n    .pause(0.1)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method - Selenium\nDESCRIPTION: This code snippet demonstrates how to use a teardown method to ensure that the WebDriver session is properly closed after each test, preventing resource leaks. This snippet shows how the teardown method can be implemented to call the quit method to end the session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n    # unittest teardown\n    # https://docs.python.org/3/library/unittest.html?highlight=teardown#unittest.TestCase.tearDown\ndef tearDown(self):\nself.driver.quit()\n```\n\n----------------------------------------\n\nTITLE: Getting a Named Cookie - CSharp\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific cookie by its name using Selenium WebDriver in C#. It adds a cookie first and then retrieves it using `driver.Manage().Cookies.GetCookieNamed()`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\nCookie cookie = new Cookie(\"foo\", \"bar\");\ndriver.Manage().Cookies.AddCookie(cookie);\nCookie namedCookie = driver.Manage().Cookies.GetCookieNamed(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Execute JavaScript - Selenium\nDESCRIPTION: This Kotlin snippet demonstrates how to execute JavaScript code within the current browser context using Selenium WebDriver. It finds an element by CSS selector, retrieves its innerText using JavaScript, and executes an alert.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_86\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Stores the header element\nval header = driver.findElement(By.cssSelector(\"h1\"))\n\n// Get return value from script\nval result = driver.executeScript(\"return arguments[0].innerText\", header)\n\n// Executing JavaScript directly\ndriver.execute_script(\"alert('hello world')\")\n```\n\n----------------------------------------\n\nTITLE: Get Window Size: Selenium WebDriver (Java)\nDESCRIPTION: This Java snippet demonstrates how to fetch the size of the browser window in pixels using Selenium WebDriver. It shows accessing each dimension individually and storing the dimensions for later use.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_37\n\nLANGUAGE: java\nCODE:\n```\n//Access each dimension individually\nint width = driver.manage().window().getSize().getWidth();\nint height = driver.manage().window().getSize().getHeight();\n\n//Or store the dimensions and query them later\nDimension size = driver.manage().window().getSize();\nint width1 = size.getWidth();\nint height1 = size.getHeight();\n```\n\n----------------------------------------\n\nTITLE: Evaluate Shadow DOM - Python\nDESCRIPTION: This snippet demonstrates how to access and interact with elements within a Shadow DOM using Selenium WebDriver with Python. It finds the shadow host, gets the shadow root, and then finds an element within the shadow root.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nshadow_host = driver.find_element(By.CSS_SELECTOR, '#shadow_host')\nshadow_root = shadow_host.shadow_root\nshadow_content = shadow_root.find_element(By.CSS_SELECTOR, '#shadow_content')\n```\n\n----------------------------------------\n\nTITLE: Find Element within a Subset of DOM - Kotlin\nDESCRIPTION: This snippet first locates the element with the ID \"fruits\" and then finds the first element within it that has the class name \"tomatoes\". It demonstrates how to narrow the search scope using Selenium WebDriver with Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nval fruits = driver.findElement(By.id(\"fruits\"))\nval fruit = fruits.findElement(By.className(\"tomatoes\"))\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's Select class, specifically by matching the visible text of the option. The `selectByVisibleText()` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait select.selectByVisibleText('Four');\n```\n\n----------------------------------------\n\nTITLE: Forward Click with Selenium\nDESCRIPTION: Performs a forward click by pressing and releasing mouse button 4.  It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"clickable\")\nactions = ActionChains(driver)\nactions.move_to_element(element)\nactions.click(MouseButton.FORWARD).perform()\n```\n\n----------------------------------------\n\nTITLE: Initializing Driver Service - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates setting up a ChromeDriver service and ensuring it's properly configured before initializing the driver. It waits for the service to be ready and then creates a new ChromeDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.en.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('checks basic service configuration', async () => {\n    const service = new ChromeServiceBuilder().build();\n    await service.start();\n    await service.stop();\n  });\n```\n\n----------------------------------------\n\nTITLE: Failing Button Click (No Frame Switch)\nDESCRIPTION: This code snippet shows an example of how an attempt to click a button within an IFrame will fail without first switching to the IFrame. It demonstrates the need to change the driver's focus to the frame before interacting with the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\n//This won't work\ndriver.FindElement(By.TagName(\"button\")).Click();\n```\n\n----------------------------------------\n\nTITLE: Navigate to URL with Selenium (Python)\nDESCRIPTION: This snippet demonstrates how to navigate to a specific URL using Selenium WebDriver in Python. It utilizes the `get()` method of the WebDriver instance to load the desired web page. The snippet assumes the WebDriver instance is already initialized and available.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://selenium.dev\")\n```\n\n----------------------------------------\n\nTITLE: Minimize Window in Selenium\nDESCRIPTION: This code minimizes the browser window using Selenium WebDriver. The exact behavior depends on the window manager and it typically hides the window in the system tray. Requires Selenium 4 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_67\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Manage().Window.Minimize();\n```\n\n----------------------------------------\n\nTITLE: Find Element by CSS Selector in Kotlin\nDESCRIPTION: This snippet uses a CSS selector to find a specific web element in Kotlin with Selenium WebDriver. It finds the element with class 'tomatoes' that is a descendant of the element with id 'fruits'. This is done using a single command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\nval fruit = driver.findElement(By.cssSelector(\"#fruits .tomatoes\"))\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium (Java)\nDESCRIPTION: This Java snippet demonstrates how to send keys to a specific element using Selenium's Actions API. It first locates the element using a CSS selector, then creates an Actions object and uses the sendKeys method with the element and the string \"Selenium!\", and finally calls perform() to execute the action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nWebElement element = driver.findElement(By.cssSelector(\"selector\"));\nActions actions = new Actions(driver);\nactions.sendKeys(element, \"Selenium!\").perform();\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element Selenium\nDESCRIPTION: This code snippet demonstrates how to perform a drag and drop operation from one element to another using Selenium WebDriver. The action is performed by clicking and holding the source element, moving to the target element, and then releasing the mouse. It is available in Java, Python, C#, Ruby, JavaScript and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_63\n\nLANGUAGE: Ruby\nCODE:\n```\nsource = driver.find_element(id: 'draggable')\ntarget = driver.find_element(id: 'droppable')\n\ndriver.action.drag_and_drop(source, target).perform\n```\n\n----------------------------------------\n\nTITLE: Relative Locator - Left of in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate an element to the left of another element using Relative Locators in Selenium.  It locates a button element to the left of the element with the id 'submit'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_47\n\nLANGUAGE: Java\nCODE:\n```\nBy cancelLocator = RelativeLocator.with(By.tagName(\"button\")).toLeftOf(By.id(\"submit\"));\n```\n\n----------------------------------------\n\nTITLE: Relative Locator - Below in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate an element below another element using Relative Locators in Selenium.  It locates an input element below the element with the id 'email'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_44\n\nLANGUAGE: CSharp\nCODE:\n```\nvar passwordLocator = RelativeBy.WithLocator(By.TagName(\"input\")).Below(By.Id(\"email\"));\n```\n\n----------------------------------------\n\nTITLE: Locating Element by XPath in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate a web element using XPath in Selenium.  It initializes a WebDriver and uses `By.xpath()` to locate an input element with the attribute `value` set to 'f', representing a female radio button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.xpath('//input[@value=\\'f\\']'));\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium Python\nDESCRIPTION: This snippet shows how to select an option in a Select element by its index in Python. It uses the `select_by_index()` method of the Select object. The index is zero-based. It raises NoSuchElementException if the index is out of bounds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nselect.select_by_index(2)\n```\n\n----------------------------------------\n\nTITLE: Customized Wait - Python\nDESCRIPTION: This Python snippet demonstrates a customized wait using `WebDriverWait`.  It ignores the `StaleElementReferenceException` and retrieves an element until it is displayed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.en.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nwait = WebDriverWait(driver, 30, poll_frequency=5, ignored_exceptions=[StaleElementReferenceException])\nelement = wait.until(lambda x: x.find_element(By.TAG_NAME, \"p\"))\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Status - Kotlin\nDESCRIPTION: Demonstrates how to check if a web element is enabled on a webpage using Kotlin and Selenium WebDriver. The `isEnabled()` method returns a boolean indicating whether the element is enabled. A WebDriver instance and an element locator are required.  First navigate to the target URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\n//navigates to url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n//returns true if element is enabled else returns false\nval attr = driver.findElement(By.name(\"button_input\")).isEnabled()\n```\n\n----------------------------------------\n\nTITLE: Navigate to URL with Selenium (Ruby)\nDESCRIPTION: This snippet demonstrates how to navigate to a specific URL using Selenium WebDriver in Ruby.  It calls the `get` method on the driver instance with the URL to load. This requires an initialized Selenium WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.get 'https://selenium.dev'\n```\n\n----------------------------------------\n\nTITLE: Getting a Named Cookie with Selenium WebDriver (Java)\nDESCRIPTION: This code snippet demonstrates how to retrieve a cookie by name using Selenium WebDriver in Java. It requires the Selenium WebDriver dependency and assumes a WebDriver instance is already initialized. The code navigates to a specific URL, adds a cookie named 'foo' with the value 'bar', and then retrieves the cookie by name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.example.com\");\nCookie cookie = new Cookie(\"foo\", \"bar\");\ndriver.manage().addCookie(cookie);\nCookie retrievedCookie = driver.manage().getCookieNamed(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Switching to New Window - Selenium WebDriver\nDESCRIPTION: Demonstrates how to switch the focus of Selenium WebDriver to a new window or tab. It retrieves all available window handles, identifies the new window by comparing with the original, and switches the WebDriver context to it. Requires Selenium WebDriver Kotlin bindings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\n//Store the ID of the original window\nval originalWindow = driver.getWindowHandle()\n\n//Check we don't have other windows open already\nassert(driver.getWindowHandles().size() === 1)\n\n//Click the link which opens in a new window\ndriver.findElement(By.linkText(\"new window\")).click()\n\n//Wait for the new window or tab\nwait.until(numberOfWindowsToBe(2))\n\n//Loop through until we find a new window handle\nfor (windowHandle in driver.getWindowHandles()) {\n    if (!originalWindow.contentEquals(windowHandle)) {\n        driver.switchTo().window(windowHandle)\n        break\n    }\n}\n\n//Wait for the new tab to finish loading content\nwait.until(titleIs(\"Selenium documentation\"))\n\n```\n\n----------------------------------------\n\nTITLE: Drain Node\nDESCRIPTION: This snippet gracefully shuts down a node in the Selenium Grid.  The node will stop accepting new session requests and will terminate after all ongoing sessions have completed. Requires the registration secret.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.zh-cn.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request POST 'http://localhost:4444/se/grid/distributor/node/<node-id>/drain' --header 'X-REGISTRATION-SECRET: <secret> '\n```\n\n----------------------------------------\n\nTITLE: Setting Page Ranges using PrintOptions in Python\nDESCRIPTION: This code snippet shows how to set the page ranges to print using the PrintOptions class in Python. The `page_ranges` attribute is set to the desired page range. The `page_ranges` attribute is retrieved and confirmed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.page_ranges = \"2-4\"\nassert print_options.page_ranges == \"2-4\"\n```\n\n----------------------------------------\n\nTITLE: Find Element by CSS Selector in C#\nDESCRIPTION: This snippet uses a CSS selector to find a specific web element in C# with Selenium WebDriver. It finds the element with class 'tomatoes' that is a descendant of the element with id 'fruits'. This is done using a single command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_16\n\nLANGUAGE: CSharp\nCODE:\n```\nvar fruit = driver.FindElement(By.CssSelector(\"#fruits .tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Print Page PrintsPage() Java\nDESCRIPTION: This code snippet demonstrates how to print a page using PrintsPage in Java with Selenium and save the output as a PDF file.  It utilizes PrintsPage for printing.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setPageRanges(\"1-2\");\nbyte[] pdf = ((PrintsPage) driver).print(printOptions);\nFile pdfFile = new File(\"test.pdf\");\nFileUtils.writeByteArrayToFile(pdfFile, pdf);\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element by Offset - Selenium\nDESCRIPTION: Drags an element by a specified offset. The action presses the left mouse button on the source element, moves the element by the specified x and y offsets, and then releases the mouse button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait actions.dragAndDrop(draggable, {x: 150, y: 50}).perform();\n```\n\n----------------------------------------\n\nTITLE: Closing Window and Switching Back - Selenium (Java)\nDESCRIPTION: Closes the current window and switches back to the original window in Selenium WebDriver using Java. It requires the original window handle to be stored beforehand. The code handles the transition back to the intended window after closing another one. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\ndriver.close();\ndriver.switchTo().window(originalWindow);\n\n```\n\n----------------------------------------\n\nTITLE: Get security configuration details for Selenium Grid\nDESCRIPTION: This command retrieves detailed information about configuring the Grid server for secure communication and node registration. It is useful for setting up a secure Selenium Grid environment.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.ja.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar info security\n```\n\n----------------------------------------\n\nTITLE: Install Selenium with .NET CLI in C#\nDESCRIPTION: This command demonstrates how to install the Selenium.WebDriver package in a C# project using the .NET CLI.  It adds the Selenium WebDriver dependency to the project file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.en.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Selenium.WebDriver\n```\n\n----------------------------------------\n\nTITLE: Find Element with Optimized Locator (CSS) - CSharp\nDESCRIPTION: This snippet finds an element with a specific CSS selector in a single command using Selenium WebDriver with C#, improving performance compared to nested lookups. It uses the `FindElement` method with `By.CssSelector` locator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_16\n\nLANGUAGE: CSharp\nCODE:\n```\nvar fruit = driver.FindElement(By.CssSelector(\"#fruits .tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Adding a Virtual Authenticator in Python\nDESCRIPTION: This snippet demonstrates how to add a virtual authenticator using the configured options in Python. It retrieves the DevTools interface, gets the domains, and calls add_virtual_authenticator to create and register a new virtual authenticator instance for WebAuthn testing.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndevtools = driver.devtools\ndevtools.security.add_virtual_authenticator(options)\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Standalone Server with Options (Java)\nDESCRIPTION: This snippet demonstrates how to start a Selenium standalone server using Java, setting the maximum sessions and port number via command-line flags. It shows the basic structure for passing options to the Selenium server.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar standalone --max-sessions 4 --port 4444\n```\n\n----------------------------------------\n\nTITLE: Products Page Object in Java\nDESCRIPTION: This Java code defines the ProductsPage object, extending the BasePage. It includes methods to retrieve a list of products and a specific product based on a condition, demonstrating how to interact with the products page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.en.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Page Object\npublic class ProductsPage extends BasePage {\n    public ProductsPage(WebDriver driver) {\n        super(driver);\n        // No assertions, throws an exception if the element is not loaded\n        new WebDriverWait(driver, Duration.ofSeconds(3))\n            .until(d -> d.findElement(By.className​(\"header_container\")));\n    }\n\n    // Returning a list of products is a service of the page\n    public List<Product> getProducts() {\n        return driver.findElements(By.className​(\"inventory_item\"))\n            .stream()\n            .map(e -> new Product(e)) // Map WebElement to a product component\n            .toList();\n    }\n\n    // Return a specific product using a boolean-valued function (predicate)\n    // This is the behavioral Strategy Pattern from GoF\n    public Product getProduct(Predicate<Product> condition) {\n        return getProducts()\n            .stream()\n            .filter(condition) // Filter by product name or price\n            .findFirst()\n            .orElseThrow();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name - Java\nDESCRIPTION: Demonstrates how to retrieve the tag name of a web element using Java and Selenium WebDriver. The `getTagName()` method returns the tag name as a string. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"email_input\"));\nString tagName = element.getTagName();\nassertThat(tagName).isEqualTo(\"input\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium Python\nDESCRIPTION: This snippet demonstrates how to initialize a Select object in Python using a WebElement representing the select element. It requires the Selenium WebDriver library. The `find_element` method is used to locate the select element before creating the Select object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nselect_element = driver.find_element(By.NAME, \"selectomatic\")\nselect = Select(select_element)\n```\n\n----------------------------------------\n\nTITLE: Getting a Named Cookie - Ruby\nDESCRIPTION: This Ruby snippet shows how to get a specific cookie by name using Selenium WebDriver. It adds a cookie and then uses `driver.manage.cookie_named` to retrieve it, printing the cookie details.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  driver.manage.add_cookie(name: \"foo\", value: \"bar\")\n\n  # Get cookie details with named cookie 'foo'\n  puts driver.manage.cookie_named('foo')\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Products Test in Java\nDESCRIPTION: This Java code shows example tests for the Products page, utilizing both the ProductsPage object and the Product component object. It tests the number of products and their prices, showcasing how to use these objects in a testing context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.en.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class ProductsTest {\n    @Test\n    public void testProductInventory() {\n        var productsPage = new ProductsPage(driver); // page object\n        var products = productsPage.getProducts();\n        assertEquals(6, products.size()); // expected, actual\n    }\n    \n    @Test\n    public void testProductPrices() {\n        var productsPage = new ProductsPage(driver);\n\n        // Pass a lambda expression (predicate) to filter the list of products\n        // The predicate or \"strategy\" is the behavior passed as parameter\n        var backpack = productsPage.getProduct(p -> p.getName().equals(\"Backpack\")); // page component object\n        var bikeLight = productsPage.getProduct(p -> p.getName().equals(\"Bike Light\"));\n\n        assertEquals(new BigDecimal(\"29.99\"), backpack.getPrice());\n        assertEquals(new BigDecimal(\"9.99\"), bikeLight.getPrice());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Window Size: Selenium WebDriver (Python)\nDESCRIPTION: This Python snippet demonstrates how to fetch the size of the browser window in pixels using Selenium WebDriver. It shows accessing each dimension individually and storing the dimensions for later use.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n    # Access each dimension individually\nwidth = driver.get_window_size().get(\"width\")\nheight = driver.get_window_size().get(\"height\")\n\n    # Or store the dimensions and query them later\nsize = driver.get_window_size()\nwidth1 = size.get(\"width\")\nheight1 = size.get(\"height\")\n```\n\n----------------------------------------\n\nTITLE: Maximize Window - C#\nDESCRIPTION: Demonstrates how to maximize the browser window in C# using Selenium WebDriver. The `Maximize()` method expands the window to fill the screen without blocking the operating system's menu and toolbars.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_56\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Manage().Window.Maximize();\n```\n\n----------------------------------------\n\nTITLE: Find Elements from Element in Selenium WebDriver - Python\nDESCRIPTION: This Python code demonstrates how to find elements within a parent element using Selenium WebDriver. It first finds a 'div' element and then finds all 'p' elements within that 'div' using the TAG_NAME locator. It then demonstrates finding elements by XPath starting from a parent 'ul' element. Note that the XPATH search uses \".//\" to signify searching from current context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Chrome()\ndriver.get(\"https://www.example.com\")\n##get elements from parent element using TAG_NAME\n\n    # Get element with tag name 'div'\nelement = driver.find_element(By.TAG_NAME, 'div')\n\n    # Get all the elements available with tag name 'p'\nelements = element.find_elements(By.TAG_NAME, 'p')\nfor e in elements:\n    print(e.text)\n\n##get elements from parent element using XPATH\n##NOTE: in order to utilize XPATH from current element, you must add \".\" to beginning of path\n\n    # Get first element of tag 'ul'\nelement = driver.find_element(By.XPATH, '//ul')\n\n    # get children of tag 'ul' with tag 'li'\nelements  = driver.find_elements(By.XPATH, './/li')\nfor e in elements:\n    print(e.text)\n```\n\n----------------------------------------\n\nTITLE: Check Element Selection Status - JavaScript\nDESCRIPTION: Demonstrates how to check if a web element is selected on a webpage using JavaScript and Selenium WebDriver. The `isSelected()` method returns a boolean indicating whether the element is selected (e.g., checkbox, radio button). A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst checkboxInput = await driver.findElement(By.name('checkbox_input'))\nexpect(await checkboxInput.isSelected()).toBe(true)\n```\n\n----------------------------------------\n\nTITLE: Install Selenium with NPM in JavaScript\nDESCRIPTION: This command shows how to install the Selenium WebDriver package in a JavaScript project using npm, the Node Package Manager. It adds the Selenium WebDriver as a project dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.en.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: SignInPage Page Object - Java\nDESCRIPTION: This code defines a Page Object for a sign-in page. It encapsulates the locators and actions related to the sign-in page, providing a layer of abstraction between the tests and the UI. The constructor validates that the correct page is loaded. It depends on Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.ja.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\n\n/**\n * Page Object encapsulates the Sign-in page.\n */\npublic class SignInPage {\n  protected WebDriver driver;\n\n  // <input name=\"user_name\" type=\"text\" value=\"\">\n  private By usernameBy = By.name(\"user_name\");\n  // <input name=\"password\" type=\"password\" value=\"\">\n  private By passwordBy = By.name(\"password\");\n  // <input name=\"sign_in\" type=\"submit\" value=\"SignIn\">\n  private By signinBy = By.name(\"sign_in\");\n\n  public SignInPage(WebDriver driver){\n    this.driver = driver;\n     if (!driver.getTitle().equals(\"Sign In Page\")) {\n      throw new IllegalStateException(\"This is not Sign In Page,\" +\n            \" current page is: \" + driver.getCurrentUrl());\n    }\n  }\n\n  /**\n    * Login as valid user\n    * @param userName\n    * @param password\n    * @return HomePage object\n    */\n  public HomePage loginValidUser(String userName, String password) {\n    driver.findElement(usernameBy).sendKeys(userName);\n    driver.findElement(passwordBy).sendKeys(password);\n    driver.findElement(signinBy).click();\n    return new HomePage(driver);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Cookie to Browser Context - Java\nDESCRIPTION: This code snippet demonstrates how to add a cookie to the current browser context using Selenium WebDriver in Java. It uses the `Cookie` class to create a new cookie and the `driver.manage().addCookie()` method to add it to the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver.get(\"https://www.example.com\");\nCookie cookie = new Cookie(\"key\", \"value\");\ndriver.manage().addCookie(cookie);\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies - Java\nDESCRIPTION: This code snippet demonstrates how to retrieve all cookies associated with the current browsing context using Selenium WebDriver in Java. It adds two cookies and then retrieves all of them using `driver.manage().getCookies()`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\ndriver.get(\"https://www.example.com\");\nCookie cookie1 = new Cookie(\"test1\", \"cookie1\");\nCookie cookie2 = new Cookie(\"test2\", \"cookie2\");\ndriver.manage().addCookie(cookie1);\ndriver.manage().addCookie(cookie2);\nSet<Cookie> cookies = driver.manage().getCookies();\n\nfor (Cookie cookie : cookies) {\n    System.out.println(cookie.getName() + \": \" + cookie.getValue());\n}\n```\n\n----------------------------------------\n\nTITLE: Get Current Window Handle - Selenium\nDESCRIPTION: Retrieves the current window handle, which is a unique identifier for the window within the current session. This identifier can be used to switch back to the window later. This code snippet shows how to retrieve the current window handle in different languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.CurrentWindowHandle;\n```\n\n----------------------------------------\n\nTITLE: Try Finally Block - Selenium\nDESCRIPTION: This code snippet demonstrates how to use a try/finally block to ensure that the WebDriver session is properly closed even if an exception occurs, preventing resource leaks. This guarantees the quit method gets called.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ntry:\n    #WebDriver 代码…\nfinally:\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method (unittest): Selenium WebDriver (Python)\nDESCRIPTION: This Python snippet showcases a `tearDown` method within a `unittest.TestCase` that quits the WebDriver instance after each test. This is crucial for preventing resource leaks and ensuring a clean testing environment.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n    # unittest teardown\n    # https://docs.python.org/3/library/unittest.html?highlight=teardown#unittest.TestCase.tearDown\ndef tearDown(self):\n    self.driver.quit()\n```\n\n----------------------------------------\n\nTITLE: Find Element Using CSS Selector - C#\nDESCRIPTION: This snippet demonstrates how to find an element using a CSS selector in C# with Selenium WebDriver. It uses the `FindElement` method with `By.CssSelector` to locate the element based on the provided CSS selector string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_16\n\nLANGUAGE: CSharp\nCODE:\n```\nvar fruit = driver.FindElement(By.CssSelector(\"#fruits .tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait Timeout in Java\nDESCRIPTION: This Java snippet demonstrates how to set the implicit wait timeout using Selenium. The implicit wait defines the maximum time WebDriver waits when locating an element that is not immediately available.  The duration is set in seconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_37\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\nDuration duration = Duration.ofSeconds(50);\noptions.setImplicitWaitTimeout(duration);\n```\n\n----------------------------------------\n\nTITLE: Check Element Displayed Status - Java\nDESCRIPTION: Demonstrates how to check if a web element is displayed on a webpage using Java and Selenium WebDriver.  The `isDisplayed()` method returns a boolean indicating the visibility of the element.  A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"email_input\"));\nboolean displayed = element.isDisplayed();\nassertThat(displayed).isTrue();\n\n```\n\n----------------------------------------\n\nTITLE: File Upload using SendKeys Java\nDESCRIPTION: This Java snippet demonstrates how to upload a file by finding the file input element and using the sendKeys method to specify the file path. This method bypasses the native file upload dialog.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.pt-br.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver.get(\"https://the-internet.herokuapp.com/upload\");\ndriver.findElement(By.id(\"file-upload\")).sendKeys(\"selenium-snapshot.jpg\");\ndriver.findElement(By.id(\"file-submit\")).submit();\n```\n\n----------------------------------------\n\nTITLE: Adding Cookie to Browser Context in Java\nDESCRIPTION: This code snippet demonstrates how to add a cookie to the current browser context using Selenium WebDriver in Java. It navigates to a website and then adds a cookie with the name 'key' and value 'value'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver.get(\"https://www.example.com\");\nCookie cookie = new Cookie(\"key\", \"value\");\ndriver.manage().addCookie(cookie);\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window in Selenium\nDESCRIPTION: This code puts the browser window into fullscreen mode using Selenium WebDriver, similar to pressing F11 in most browsers. This will fill the entire screen.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_76\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.manage().window().fullscreen()\n```\n\n----------------------------------------\n\nTITLE: Locating Element Near Another (CSharp)\nDESCRIPTION: This snippet demonstrates how to locate an input element near the element with the ID 'lbl-email' using Selenium's relative locators in C#. It utilizes `RelativeBy.WithLocator` and `Near` methods.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_59\n\nLANGUAGE: CSharp\nCODE:\n```\nvar emailLocator = RelativeBy.WithLocator(By.tagName(\"input\")).Near(By.Id(\"lbl-email\"));\n```\n\n----------------------------------------\n\nTITLE: Deleting a Cookie with Selenium WebDriver (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to delete a cookie by name using Selenium WebDriver in JavaScript. It assumes the webdriver is already initiated. The code navigates to a specific URL, adds two cookies, and then deletes the cookie named 'test1'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.example.com/');\nawait driver.manage().deleteCookie('test1');\n```\n\n----------------------------------------\n\nTITLE: Find Element within Element in Java\nDESCRIPTION: This snippet demonstrates how to find a web element within another web element using Selenium WebDriver in Java. First, it finds an element with the ID 'fruits', and then it finds a child element within that element with the class name 'tomatoes'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nWebElement fruits = driver.findElement(By.id(\"fruits\"));\nWebElement fruit = fruits.findElement(By.className(\"tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium - Python\nDESCRIPTION: This snippet demonstrates how to set an implicit wait in Selenium using Python. The `implicitly_wait` method is called on the driver object, specifying the duration in seconds. This makes the driver wait for the specified amount of time when searching for elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver.implicitly_wait(10)\n```\n\n----------------------------------------\n\nTITLE: Find Element by Class Name - Java\nDESCRIPTION: This snippet demonstrates how to locate a web element using its class name in Java. It initializes a ChromeDriver and uses the `findElement` method with `By.className` to find the element with the class 'information'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.className(\"information\"));\n```\n\n----------------------------------------\n\nTITLE: Relative Locators: Locating Element Below\nDESCRIPTION: This code demonstrates how to locate an element below another element using Relative Locators in Selenium 4. It uses `RelativeLocator.with(By.tagName(\"input\")).below(By.id(\"email\"))` to locate an input element below the element with the ID 'email'. This technique is valuable when direct element identification is challenging.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_44\n\nLANGUAGE: CSharp\nCODE:\n```\nvar passwordLocator = RelativeBy.WithLocator(By.TagName(\"input\")).Below(By.Id(\"email\"));\n```\n\n----------------------------------------\n\nTITLE: Gathering Performance Metrics using CDP in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to gather performance metrics using the Chrome DevTools Protocol (CDP) in Selenium. It enables the Performance domain and retrieves metrics such as CPU usage, memory usage, and frame rate.  This allows you to monitor and analyze the performance of your web applications.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n@driver.execute_cdp 'Performance.enable'\nmetrics = @driver.execute_cdp 'Performance.getMetrics'\n```\n\n----------------------------------------\n\nTITLE: Check Element Selection Status - Python\nDESCRIPTION: Demonstrates how to check if a web element is selected on a webpage using Python and Selenium WebDriver. The `is_selected()` method returns a boolean indicating whether the element is selected (e.g., checkbox, radio button). A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ncheckbox_input = driver.find_element(By.NAME, \"checkbox_input\")\nassert checkbox_input.is_selected() is True\n```\n\n----------------------------------------\n\nTITLE: Removing JavaScript Exception Handler in WebDriver BiDi with Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to remove a previously added Javascript exception handler. It leverages the handler ID obtained during the handler's initial creation, enabling dynamic control over JavaScript exception monitoring.  This requires a WebDriver BiDi-enabled browser session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.en.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\ncontext = driver.browsing_context\nlog.off_exception(context)\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies with Selenium WebDriver (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to retrieve all cookies in the current browser context using Selenium WebDriver in Kotlin. It requires the Selenium WebDriver dependency. The code navigates to a specific URL, adds two cookies, and then retrieves all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://example.com\")\n        driver.manage().addCookie(Cookie(\"test1\", \"cookie1\"))\n        driver.manage().addCookie(Cookie(\"test2\", \"cookie2\"))\n\n        // Get All available cookies\n        val cookies = driver.manage().cookies\n        println(cookies)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Check Element Selected Status - C#\nDESCRIPTION: This snippet demonstrates how to check if a web element is selected on the page using Selenium WebDriver in C#. It finds an element by name and uses the Selected property to determine if it is selected, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"checkbox_input\"));\nAssert.That(element.Selected, Is.True);\nConsole.WriteLine(\"Element is selected: \" + element.Selected);\n```\n\n----------------------------------------\n\nTITLE: Capturing Console Logs in Python\nDESCRIPTION: This Python code snippet showcases capturing console logs using Selenium and CDP.  It sets up the driver and uses `execute_cdp_cmd` to enable the 'Log' domain.  It retrieves console logs from the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.zh-cn.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndriver.execute_cdp_cmd('Log.enable', {})\nprint(driver.execute_cdp_cmd('Log.getEntries', {}))\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Web Page\nDESCRIPTION: This snippet shows how to navigate the browser to a specific URL using Selenium.  It uses the `get` or `navigate().to()` method of the WebDriver to load a web page. The target URL is a required parameter.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.google.com\");\n```\n\n----------------------------------------\n\nTITLE: Getting Active Element in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to get the currently active element's 'title' attribute on a webpage using Selenium WebDriver. It navigates to Google, enters \"webElement\" into the search box, and prints the title attribute of the currently focused element. It requires the selenium-webdriver npm package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {Builder, By} = require('selenium-webdriver');\n\n  (async function example() {\n      let driver = await new Builder().forBrowser('chrome').build();\n      await driver.get('https://www.google.com');\n      await  driver.findElement(By.css('[name=\"q\"]')).sendKeys(\"webElement\");\n\n      // Get attribute of current active element\n      let attr = await driver.switchTo().activeElement().getAttribute(\"title\");\n      console.log(`${attr}`)\n  })();\n```\n\n----------------------------------------\n\nTITLE: Getting All Options in Selenium Java\nDESCRIPTION: This snippet shows how to retrieve all options from a Select element in Java. It uses the `getOptions()` method of the Select object, returning a list of WebElements representing each option.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nList<WebElement> options = select.getOptions();\n```\n\n----------------------------------------\n\nTITLE: Find First Element by Class Name in C#\nDESCRIPTION: This snippet finds the first web element with the class name 'tomatoes' within the entire DOM using the Selenium WebDriver in C#. It uses the `FindElement` method with `By.ClassName` to locate the element. The result is an `IWebElement` object representing the located element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nvar vegetable = driver.FindElement(By.ClassName(\"tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element Selenium\nDESCRIPTION: This code snippet demonstrates how to perform a drag and drop operation from one element to another using Selenium WebDriver. The action is performed by clicking and holding the source element, moving to the target element, and then releasing the mouse. It is available in Java, Python, C#, Ruby, JavaScript and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_64\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst draggable = await driver.findElement(By.id('draggable'));\nconst droppable = await driver.findElement(By.id('droppable'));\nawait driver.actions().dragAndDrop(draggable, droppable).perform();\n```\n\n----------------------------------------\n\nTITLE: Getting Page Title\nDESCRIPTION: This snippet demonstrates how to retrieve the title of the currently loaded web page using Selenium. The `getTitle()` method returns a string containing the page title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nString title = driver.getTitle();\n```\n\n----------------------------------------\n\nTITLE: Locating Element by XPath in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate a web element using XPath in Selenium.  It initializes a WebDriver and uses `By.Xpath()` to locate an input element with the attribute `value` set to 'f', representing a female radio button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_29\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.Xpath(\"//input[@value='f']\"));\n```\n\n----------------------------------------\n\nTITLE: Locating Element by CSS Selector with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a web element using a CSS selector with Selenium WebDriver. It assumes a ChromeDriver instance is created and uses the `By.css()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.css(\"#fname\"))\n```\n\n----------------------------------------\n\nTITLE: Relative Locator - Left of in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate an element to the left of another element using Relative Locators in Selenium.  It locates a button element to the left of the element with the id 'submit'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_49\n\nLANGUAGE: CSharp\nCODE:\n```\nvar cancelLocator = RelativeBy.WithLocator(By.TagName(\"button\")).LeftOf(By.Id(\"submit\"));\n```\n\n----------------------------------------\n\nTITLE: Get Element Location and Size - JavaScript\nDESCRIPTION: This snippet demonstrates how to get the location and size of a web element using Selenium WebDriver in JavaScript. It finds an element by name and uses the getRect() method to retrieve a Rectangle object containing its x, y, width, and height.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst rangeInput = await driver.findElement(By.name('range_input'))\nexpect((await rangeInput.getRect()).x).toBe(8)\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Location - CSharp\nDESCRIPTION: This code snippet shows how to set the path to the ChromeDriver executable in C#. It is useful when the driver executable is not in the system's PATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.ja.md#_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\nvar service = ChromeDriverService.CreateDefaultService(\"/path/to/directory\");\n```\n\n----------------------------------------\n\nTITLE: Getting Active Element in Java\nDESCRIPTION: This Java code snippet demonstrates how to retrieve the currently active element on a web page using Selenium WebDriver. It initializes a ChromeDriver, navigates to the Google homepage, enters text into the search box, and then retrieves the 'title' attribute of the active element.  It relies on the Selenium WebDriver and ChromeDriver dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_34\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class activeElementTest {\n    public static void main(String[] args) {\n      WebDriver driver = new ChromeDriver();\n      try {\n        driver.get(\"http://www.google.com\");\n        driver.findElement(By.cssSelector(\"[name='q']\")).sendKeys(\"webElement\");\n\n        // Get attribute of current active element\n        String attr = driver.switchTo().activeElement().getAttribute(\"title\");\n        System.out.println(attr);\n      } finally {\n        driver.quit();\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Switch to New Window - Selenium\nDESCRIPTION: This code demonstrates how to switch to a new window or tab after opening one using Selenium WebDriver. It retrieves all available window handles, iterates through them to find the new window, and then switches the WebDriver's focus to that window. Requires a WebDriver instance and knowledge of the original window handle. It also requires the Selenium library and the webdriver manager for your specific browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n    # 启动驱动程序\nwith webdriver.Firefox() as driver:\n    # 打开网址\ndriver.get(\"https://seleniumhq.github.io\")\n\n    # 设置等待\n    wait = WebDriverWait(driver, 10)\n\n    # 存储原始窗口的 ID\n    original_window = driver.current_window_handle\n\n    # 检查一下，我们还没有打开其他的窗口\n    assert len(driver.window_handles) == 1\n\n    # 单击在新窗口中打开的链接\n    driver.find_element(By.LINK_TEXT, \"new window\").click()\n\n    # 等待新窗口或标签页\n    wait.until(EC.number_of_windows_to_be(2))\n\n    # 循环执行，直到找到一个新的窗口句柄\n    for window_handle in driver.window_handles:\n        if window_handle != original_window:\n            driver.switch_to.window(window_handle)\n            break\n\n    # 等待新标签页完成加载内容\n    wait.until(EC.title_is(\"SeleniumHQ Browser Automation\"))\n```\n\n----------------------------------------\n\nTITLE: Working with Firefox Profiles\nDESCRIPTION: This example demonstrates how to use Firefox profiles with Selenium.  It shows how to create a FirefoxProfile object and associate it with the FirefoxOptions. The profile can be an empty one or point to an existing profile directory.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\noptions = FirefoxOptions()\nprofile = FirefoxProfile()\noptions.profile = profile\ndriver = FirefoxDriver(options=options)\n```\n\n----------------------------------------\n\nTITLE: Check Element Selected Selenium Java\nDESCRIPTION: This Java code snippet utilizes Selenium WebDriver to verify if a checkbox input element is selected, using the `isSelected()` method and asserting that it returns true.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\");\nWebElement element = driver.findElement(By.name(\"checkbox_input\"));\nassertThat(element.isSelected()).isTrue();\n```\n\n----------------------------------------\n\nTITLE: Switching to New Window - Selenium WebDriver\nDESCRIPTION: Demonstrates how to switch the focus of Selenium WebDriver to a new window or tab. It retrieves all available window handles, identifies the new window by comparing with the original, and switches the WebDriver context to it. Requires Selenium WebDriver .NET bindings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\nstring originalWindow = driver.CurrentWindowHandle;\n\nAssert.That(driver.WindowHandles.Count, Is.EqualTo(1));\n\n\ndriver.FindElement(By.LinkText(\"new window\")).Click();\n\nwait.Until(wd => wd.WindowHandles.Count == 2);\n\nforeach (string window in driver.WindowHandles) {\n    if (originalWindow != window) {\n        driver.SwitchTo().Window(window);\n        break;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Move By Offset from Element\nDESCRIPTION: Moves the mouse to the center point of the element, and then moves by the specified offset. It requires a WebDriver instance and a target WebElement that must be in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"clickable\")\nactions = ActionChains(driver)\nactions.move_to_element(element, xoffset=10, yoffset=20).perform()\n```\n\n----------------------------------------\n\nTITLE: Quitting WebDriver Session - Kotlin\nDESCRIPTION: This snippet demonstrates how to properly quit a WebDriver session in Kotlin using the `driver.quit()` method.  This ensures that all browser windows and associated processes are closed. It is recommended to use this at the end of a test or session to avoid resource leaks.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Closing Window and Switching Back - Selenium WebDriver\nDESCRIPTION: Illustrates how to close the current window or tab and switch back to the previously active window using Selenium WebDriver. It's crucial to switch back to a valid window handle to avoid a 'No Such Window Exception'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\n    #Close the tab or window\ndriver.close\n\n    #Switch back to the old tab or window\ndriver.switch_to.window original_window\n\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium (Ruby)\nDESCRIPTION: Demonstrates how to perform a copy and paste action using the Actions API in Ruby. It checks the OS to determine the correct key for copy/paste.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nelement = @driver.find_element(tag_name: 'input')\nelement.send_keys('Selenium')\nif Selenium::Platform.mac?\n  select_all = :command, 'a'\n  copy = :command, 'c'\n  paste = :command, 'v'\nelse\n  select_all = :control, 'a'\n  copy = :control, 'c'\n  paste = :control, 'v'\nend\nelement.send_keys(select_all)\nelement.send_keys(copy)\nelement.send_keys(paste)\nelement.send_keys(:shift, '1')\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookie Attribute to Lax in Java\nDESCRIPTION: This snippet demonstrates how to set the SameSite attribute of a cookie to Lax in Java using Selenium WebDriver. It creates a cookie with the name 'test1', value 'cookie1', and SameSite attribute set to 'Lax', and then adds it to the current browser context. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"http://www.example.com\");\nCookie cookie = new Cookie.Builder(\"test1\", \"cookie1\")\n  .domain(\"www.example.com\")\n  .sameSite(\"Lax\")\n  .build();\ndriver.manage().addCookie(cookie);\n\nCookie retrievedCookie = driver.manage().getCookieNamed(\"test1\");\nassertThat(retrievedCookie.getSameSite(), equalTo(\"Lax\"));\n```\n\n----------------------------------------\n\nTITLE: Listening for Console Logs with BiDi API in Java\nDESCRIPTION: This Java code snippet demonstrates how to listen for console.log events using the Selenium BiDi API. It registers a callback function to process the log events and prints the log message to the console. This requires Selenium version 4.8 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.en.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBiDi bidi = ((HasDevTools) driver).getDevTools();\nbidi.getDomains().log().addConsoleListener(console -> {\n  System.out.println(\"Message: \" + console.getMessages().get(0).getText());\n});\nbidi.getDomains().log().enable();\ndriver.get(\"https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html\");\n```\n\n----------------------------------------\n\nTITLE: Selenium Java Example\nDESCRIPTION: This Java code snippet demonstrates a basic Selenium test setup. It shows how to initialize a WebDriver instance, navigate to a webpage, and perform basic interactions with elements on the page. The snippet requires the Selenium WebDriver dependency to be included in the project.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_48\n\nLANGUAGE: java\nCODE:\n```\ndriver = new ChromeDriver();\ndriver.get(\"https://www.selenium.dev/selenium/web/web-form.html\");\n\nWebElement textBox = driver.findElement(By.name(\"my-text\"));\nWebElement submitButton = driver.findElement(By.cssSelector(\"button\"));\n\ntextBox.sendKeys(\"Selenium\");\nsubmitButton.click();\n\nWebElement message = driver.findElement(By.id(\"message\"));\nString value = message.getText();\nassertEquals(\"Received!\", value);\n\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Fail Request in Java\nDESCRIPTION: This Java code demonstrates how to fail a network request using Selenium BiDi's Network.failRequest. It requires the requestId and an error reason.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nNetwork.failRequest(devTools, req.getEvent().getRequest().getRequestId(),\n        ErrorReason.FAILED);\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element in DOM - CSharp\nDESCRIPTION: This snippet finds the first element with the class name \"tomatoes\" in the entire DOM using Selenium WebDriver with C#. It uses the `FindElement` method with `By.ClassName` locator. The returned `IWebElement` represents the first matching element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nvar vegetable = driver.FindElement(By.ClassName(\"tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium (JavaScript)\nDESCRIPTION: This JavaScript snippet uses Selenium's Actions API to send the keys \"Selenium!\" to the currently active element. It creates an Actions object, uses the sendKeys method to input the string, and then calls perform() to execute the action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = driver.actions();\nactions.sendKeys('Selenium!').perform();\n```\n\n----------------------------------------\n\nTITLE: Handle Confirm Popup in JavaScript\nDESCRIPTION: This JavaScript code shows handling of JavaScript confirm popup using Selenium WebDriver. The example dismisses the confirm. A link click triggers the confirm.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.pt-br.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.findElement(By.linkText('See a sample confirm')).click();\nawait driver.wait(until.alertIsPresent(), 10000);\nawait driver.switchTo().alert().dismiss();\n```\n\n----------------------------------------\n\nTITLE: Closing Window and Switching Back - Selenium WebDriver\nDESCRIPTION: Illustrates how to close the current window or tab and switch back to the previously active window using Selenium WebDriver. It's crucial to switch back to a valid window handle to avoid a 'No Such Window Exception'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\ndriver.close();\n\ndriver.switchTo().window(originalWindow);\n\n```\n\n----------------------------------------\n\nTITLE: Switching to a New Window/Tab in Selenium\nDESCRIPTION: This code demonstrates how to switch the WebDriver's focus to a newly opened window or tab. It first stores the original window handle, then iterates through all available window handles to find the new window, and switches to it. It depends on the Selenium WebDriver library and requires having a link that opens in a new window.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\nstring originalWindow = driver.CurrentWindowHandle;\nAssert.IsNotNull(originalWindow);\n\ndriver.FindElement(By.LinkText(\"new window\")).Click();\nwait.Until(wd => driver.WindowHandles.Count == 2);\n\nforeach (string windowHandle in driver.WindowHandles)\n{\n    if (originalWindow != windowHandle)\n    {\n        driver.SwitchTo().Window(windowHandle);\n        break;\n    }\n}\nwait.Until(wd => driver.Title == \"SeleniumHQ Browser Automation\");\n```\n\n----------------------------------------\n\nTITLE: Capturing Console Logs in C#\nDESCRIPTION: This C# snippet demonstrates how to capture console logs using Selenium's CDP. It involves creating a DevTools instance, enabling the Log domain and attaching a handler that prints console log details when they occur. It retrieves console logs from the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.zh-cn.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n    [Test]\n    public async Task CanListenToConsoleLogs()\n    {\n        var devTools = ((IHasDevTools)driver).GetDevToolsSession();\n        await devTools.Log.Enable(new LogEnableCommandSettings());\n        devTools.Log.EntryAdded += (sender, eventArgs) => { Console.WriteLine(eventArgs.Entry.Text); };\n        driver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Alert in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to interact with a JavaScript alert using Selenium WebDriver. It waits for the alert to be present, gets the text, and then accepts the alert.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.wait(until.alertIsPresent());\nlet alert = await driver.switchTo().alert();\nawait alert.accept();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Timeout with Java\nDESCRIPTION: This code snippet demonstrates how to set the page load timeout in Java using Selenium WebDriver's Options class.  The `pageLoadTimeout` method is used to specify the maximum time a page is allowed to load before a TimeoutException is thrown. The timeout is set to 30 seconds in this example.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_34\n\nLANGUAGE: java\nCODE:\n```\ndriver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));\n```\n\n----------------------------------------\n\nTITLE: Find Element using CSS Selector (Optimized)\nDESCRIPTION: This snippet demonstrates how to locate an element using a single CSS selector that combines the ID of the parent element and the class name of the target element. This approach is more efficient than nested lookups because it issues a single command to the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nfruit = driver.find_element(By.CSS_SELECTOR,\"#fruits .tomatoes\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy with JavaScript\nDESCRIPTION: This JavaScript code snippet configures a proxy for Selenium WebDriver using ChromeOptions. It utilizes selenium-webdriver's proxy module to set a manual HTTP proxy and then builds the WebDriver instance with these options. The configured proxy is then used for all browser traffic.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nlet webdriver = require('selenium-webdriver');\nlet chrome = require('selenium-webdriver/chrome');\nlet proxy = require('selenium-webdriver/proxy');\nlet opts = new chrome.Options();\n\n(async function example() {\nopts.setProxy(proxy.manual({http: '<HOST:PORT>'}));\nlet driver = new webdriver.Builder()\n.forBrowser('chrome')\n.setChromeOptions(opts)\n.build();\ntry {\nawait driver.get(\"https://selenium.dev\");\n}\nfinally {\nawait driver.quit();\n}\n}());\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options from Select Element\nDESCRIPTION: This code retrieves all selected options from a <select> element using Selenium's Select class. The `getAllSelectedOptions()` method returns a list of WebElements representing the selected options within the select list. For single selects, this will be a list with one element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst selectedOptions = await select.getAllSelectedOptions();\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait - JavaScript\nDESCRIPTION: This Javascript snippet demonstrates how to implement an explicit wait. It waits up to 10 seconds for the element with the tag name \"p\" to be present.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.en.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait new WebDriverWait(driver, 10).until(async () => await driver.findElement(By.tagName('p')));\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium - Ruby\nDESCRIPTION: This snippet demonstrates how to set an implicit wait in Selenium using Ruby.  The `manage.timeouts.implicit_wait` method is called on the driver object, specifying the duration in seconds. This makes the driver wait for the specified amount of time when searching for elements before raising an error.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.pt-br.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.timeouts.implicit_wait = 10\n```\n\n----------------------------------------\n\nTITLE: WebDriver Quit with try/finally - Python\nDESCRIPTION: This Python snippet uses a `try/finally` block to ensure that the WebDriver session is always closed, even if an exception occurs within the `try` block. The `driver.quit()` method is called in the `finally` block.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    #WebDriver code here...\nfinally:\n    driver.quit()\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium Java\nDESCRIPTION: This snippet demonstrates how to select an option in a Select element by its index in Java. It uses the `selectByIndex()` method of the Select object. The index is zero-based. It throws NoSuchElementException if the index is out of bounds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\nselect.selectByIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Quitting Driver Session - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to quit a Selenium driver session using the `driver.quit()` method. This is important to ensure resources are released and the browser process is terminated.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.en.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n  after(() => driver.quit());\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies - CSharp\nDESCRIPTION: This code snippet demonstrates how to get all cookies from the current browsing context using Selenium WebDriver in C#. It adds two cookies and retrieves them using `driver.Manage().Cookies.AllCookies`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\nCookie cookie1 = new Cookie(\"test1\", \"cookie1\");\nCookie cookie2 = new Cookie(\"test2\", \"cookie2\");\ndriver.Manage().Cookies.AddCookie(cookie1);\ndriver.Manage().Cookies.AddCookie(cookie2);\n\nvar allCookies = driver.Manage().Cookies.AllCookies;\n```\n\n----------------------------------------\n\nTITLE: Scroll From Offset of Origin using Selenium Wheel (JavaScript)\nDESCRIPTION: Scrolls from a specified offset of the viewport origin by a given amount. Requires x offset, y offset, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.actions()\n  .scroll(20, 50, WheelInput.Origin.viewport(15, 25), 0, 0)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait with Lambda - Java\nDESCRIPTION: This code snippet shows how to use explicit waits with a lambda expression in Java. Explicit waits allow you to wait for a specific condition to be true before proceeding with the next command.  This example waits up to 10 seconds for the element with ID 'message' to be displayed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.zh-cn.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nnew WebDriverWait(driver, Duration.ofSeconds(10))\n    .until(d -> d.findElement(By.id(\"message\")).isDisplayed());\n```\n\n----------------------------------------\n\nTITLE: Click and Release with Selenium\nDESCRIPTION: Moves to the center of an element, presses, and releases the left mouse button, simulating a standard click.  It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"clickable\"))\nval actions = Actions(driver)\nactions.moveToElement(element).click().perform()\n```\n\n----------------------------------------\n\nTITLE: Execute JavaScript in Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to execute JavaScript code within the current browsing context using Selenium WebDriver in Ruby. It utilizes the `execute_script` method to execute JavaScript code, retrieves the innerText of the header element, and executes alert function. Dependencies: selenium-webdriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_66\n\nLANGUAGE: Ruby\nCODE:\n```\n    # Stores the header element\nheader = driver.find_element(css: 'h1')\n\n    # Get return value from script\nresult = driver.execute_script(\"return arguments[0].innerText\", header)\n\n    # Executing JavaScript directly\ndriver.execute_script(\"alert('hello world')\")\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element in C#\nDESCRIPTION: This C# snippet performs a drag and drop operation from a source element to a target element. It uses the Actions class and requires a WebDriver instance, along with IWebElement instances for the source and target.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_62\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement source = driver.FindElement(By.Id(\"draggable\"));\nIWebElement target = driver.FindElement(By.Id(\"droppable\"));\n\nActions actions = new Actions(driver);\nactions.DragAndDrop(source, target).Perform();\n```\n\n----------------------------------------\n\nTITLE: File Upload with sendKeys in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to upload a file in Selenium by finding the file input element and using the sendKeys method to pass the full path of the file.  It assumes you have a WebDriver instance and have navigated to the page containing the file input. Dependencies: selenium-webdriver\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.ja.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.findElement(By.id('file-upload')).sendKeys('/path/to/file.txt');\nawait driver.findElement(By.id('upload-button')).click();\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates sending keys to a specific element using Selenium's Actions API. It finds the element using a CSS selector, creates an Actions object, and uses the sendKeys method on the element, sending the string 'Selenium!'. It then calls perform() to execute the action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst element = await driver.findElement(By.css('selector'));\nconst actions = driver.actions({async: true});\nawait actions.sendKeys(element, 'Selenium!')\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Handling IllegalStateException in Selenium (Java)\nDESCRIPTION: This code snippet shows the common 'IllegalStateException' that users face when setting up Selenium due to missing or misconfigured browser drivers. It indicates the need to set the 'webdriver.chrome.driver' system property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/introducing-selenium-manager.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njava.lang.IllegalStateException: The path to the driver executable must be set by the webdriver.chrome.driver \nsystem property; for more information, see https://chromedriver.chromium.org/. The latest version can be \ndownloaded from https://chromedriver.chromium.org/downloads\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client in Java\nDESCRIPTION: This Java code snippet demonstrates how to configure the HTTP client used by Selenium WebDriver. It shows how to set timeouts and proxy settings for the client to customize its behavior.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/http_client.en.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n{{< gh-codeblock path=\"examples/java/src/test/java/dev/selenium/drivers/HttpClientTest.java\" >}}\n```\n\n----------------------------------------\n\nTITLE: Find All Matching Elements by Tag Name - Java\nDESCRIPTION: This snippet demonstrates how to find all elements with a specific tag name using the Selenium WebDriver in Java. It uses the `findElements` method with `By.tagName` to locate all matching elements and returns them as a `List` of `WebElement` objects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\nList<WebElement> plants = driver.findElements(By.tagName(\"li\"));\n```\n\n----------------------------------------\n\nTITLE: Set Window Size: Selenium WebDriver (C#)\nDESCRIPTION: This C# snippet demonstrates how to set the size of the browser window to 1024x768 pixels using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Manage().Window.Size = new Size(1024, 768);\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to retrieve the dimensions (width and height) of the browser window using Selenium WebDriver. It shows two approaches: accessing each dimension individually and storing the dimensions in a `Dimension` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\n//Access each dimension individually\nval width = driver.manage().window().size.width\nval height = driver.manage().window().size.height\n\n//Or store the dimensions and query them later\nval size = driver.manage().window().size\nval width1 = size.width\nval height1 = size.height\n```\n\n----------------------------------------\n\nTITLE: Add Network Intercept in JavaScript\nDESCRIPTION: This code snippet demonstrates how to add a network intercept using Selenium's BiDi API in JavaScript.  It requires the Selenium WebDriver and BiDi dependencies. The snippet intercepts all network requests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait bidiSession.network.addIntercept({\n  urlPattern: '*'\n});\n```\n\n----------------------------------------\n\nTITLE: Get Window Position: Selenium WebDriver (Java)\nDESCRIPTION: This Java snippet demonstrates how to fetch the position of the browser window using Selenium WebDriver. It accesses the x and y coordinates individually, and also shows how to retrieve them through the Point object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_48\n\nLANGUAGE: java\nCODE:\n```\n// Access each dimension individually\nint x = driver.manage().window().getPosition().getX();\nint y = driver.manage().window().getPosition().getY();\n\n// Or store the dimensions and query them later\nPoint position = driver.manage().window().getPosition();\nint x1 = position.getX();\nint y1 = position.getY();\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium\nDESCRIPTION: Demonstrates sending keys to the currently active element using Selenium's Actions API. This involves creating an Actions object, using the sendKeys method to send a string of characters, and then performing the action. This action sends the characters to whichever element currently has focus.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nActions actions = new Actions(driver);\nactions.SendKeys(\"text\").Perform();\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - Java\nDESCRIPTION: This Java snippet demonstrates how to retrieve the dimensions (width and height) of the browser window using Selenium WebDriver. It shows two approaches: accessing each dimension individually and storing the dimensions in a `Dimension` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_27\n\nLANGUAGE: java\nCODE:\n```\n//Access each dimension individually\nint width = driver.manage().window().getSize().getWidth();\nint height = driver.manage().window().getSize().getHeight();\n\n//Or store the dimensions and query them later\nDimension size = driver.manage().window().getSize();\nint width1 = size.getWidth();\nint height1 = size.getHeight();\n```\n\n----------------------------------------\n\nTITLE: Enable Logs - Ruby\nDESCRIPTION: This snippet shows how to enable logging using Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_62\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.logs.get(:browser)\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium\nDESCRIPTION: This code snippet demonstrates how to handle disabled options in a select element using Selenium WebDriver. It attempts to select a disabled option and verifies that a `NoSuchElementException` is thrown. This feature is available from Selenium 4.5 and later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait assertThrows(async () => {\n  await select.selectByValue('disabled');\n}, NoSuchElementException);\n```\n\n----------------------------------------\n\nTITLE: Find Element by CSS Selector - Kotlin\nDESCRIPTION: This snippet shows how to locate a web element using a CSS selector in Kotlin. It initializes a ChromeDriver and utilizes the `findElement` method with `By.css` to find the element with the id 'fname'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.css(\"#fname\"))\n```\n\n----------------------------------------\n\nTITLE: Find Element within a Subset of DOM - Java\nDESCRIPTION: This snippet first locates the element with the ID \"fruits\" and then finds the first element within it that has the class name \"tomatoes\".  It demonstrates how to narrow the search scope using Selenium WebDriver with Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nWebElement fruits = driver.findElement(By.id(\"fruits\"));\nWebElement fruit = fruits.findElement(By.className(\"tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Set Window Position: Selenium WebDriver (Python)\nDESCRIPTION: This Python snippet demonstrates how to move the browser window to the top-left corner of the primary monitor using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_54\n\nLANGUAGE: python\nCODE:\n```\n    # Move the window to the top left of the primary monitor\ndriver.set_window_position(0, 0)\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium (Java)\nDESCRIPTION: Demonstrates how to perform a copy and paste action using the Actions API in Java.  It checks the OS to determine the correct key for copy/paste.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nWebElement input = driver.findElement(By.tagName(\"input\"));\ninput.sendKeys(\"Selenium\");\nString selectAll = System.getProperty(\"os.name\").startsWith(\"Mac\") ? Keys.COMMAND + \"a\" : Keys.CONTROL + \"a\";\nString copy = System.getProperty(\"os.name\").startsWith(\"Mac\") ? Keys.COMMAND + \"c\" : Keys.CONTROL + \"c\";\nString paste = System.getProperty(\"os.name\").startsWith(\"Mac\") ? Keys.COMMAND + \"v\" : Keys.CONTROL + \"v\";\ninput.sendKeys(selectAll);\ninput.sendKeys(copy);\ninput.sendKeys(paste);\ninput.sendKeys(Keys.chord(Keys.SHIFT, \"1\"));\n```\n\n----------------------------------------\n\nTITLE: Network Conditions - Java\nDESCRIPTION: This snippet demonstrates how to simulate various network conditions for local webdrivers using Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_53\n\nLANGUAGE: Java\nCODE:\n```\nChromeDriver driver = new ChromeDriver();\nDevTools devTools = driver.getDevTools();\ndevTools.createSessionIfNecessary();\nNetwork network = devTools.getDomains().network();\nnetwork.enable(Optional.empty(), Optional.empty(), Optional.empty());\nnetwork.emulateNetworkConditions(false, 50, 2000, 2000, Optional.of(ConnectionType.CELLULAR3G));\n```\n\n----------------------------------------\n\nTITLE: Get Active Element Attribute in Selenium WebDriver - Java\nDESCRIPTION: This Java code demonstrates how to retrieve an attribute from the currently active element using Selenium WebDriver. It navigates to Google, types \"webElement\" into the search box (making it the active element), and then retrieves the 'title' attribute of the active element. The retrieved attribute value is printed to the console. It depends on the Selenium WebDriver Java bindings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_34\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class activeElementTest {\n    public static void main(String[] args) {\n      WebDriver driver = new ChromeDriver();\n      try {\n        driver.get(\"http://www.google.com\");\n        driver.findElement(By.cssSelector(\"[name='q']\")).sendKeys(\"webElement\");\n\n        // Get attribute of current active element\n        String attr = driver.switchTo().activeElement().getAttribute(\"title\");\n        System.out.println(attr);\n      } finally {\n        driver.quit();\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's Select class, specifically by matching the value attribute of the option. The `selectByValue()` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nselect.selectByValue(\"one\");\n```\n\n----------------------------------------\n\nTITLE: Locating Element Near Another - Python\nDESCRIPTION: Locates an input element near the element with ID 'lbl-email' in Python using `locate_with` and the `near` relative locator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_58\n\nLANGUAGE: Python\nCODE:\n```\nemail_locator = locate_with(By.TAG_NAME, \"input\").near({By.ID: \"lbl-email\"})\n```\n\n----------------------------------------\n\nTITLE: Closing Browser Session: Using driver.quit() - C#\nDESCRIPTION: Demonstrates how to properly close a browser session in C# using `driver.Quit()` instead of `driver.Close()`. This ensures that all associated windows, tabs, and background processes are terminated, preventing potential resource leaks. The `Quit()` method is crucial for a clean exit in Selenium C# tests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Close();\ndriver.Quit();\n```\n\n----------------------------------------\n\nTITLE: Find Element using CSS Selector (Optimized)\nDESCRIPTION: This snippet demonstrates how to locate an element using a single CSS selector that combines the ID of the parent element and the class name of the target element. This approach is more efficient than nested lookups because it issues a single command to the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nWebElement fruit = driver.findElement(By.cssSelector(\"#fruits .tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Get Element Text in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve the text of a web element using Selenium WebDriver in Python. It uses the `text` attribute of the WebElement class. The attribute returns the visible text of the element as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\njust_another_link = driver.find_element(By.ID, \"justanotherlink\")\nassert just_another_link.text == \"just another link\"\n```\n\n----------------------------------------\n\nTITLE: Find Element by CSS Selector - JavaScript\nDESCRIPTION: This snippet shows how to locate a web element using a CSS selector in JavaScript. It initializes a ChromeDriver and utilizes the `findElement` method with `By.css` to find the element with the id 'fname'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.css('#fname'));\n```\n\n----------------------------------------\n\nTITLE: Clear Element Python\nDESCRIPTION: This code snippet demonstrates how to clear the content of a text field using Selenium WebDriver in Python. It finds an element by its name attribute ('email_input') and then calls the clear() method to remove any existing text. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\ndriver.find_element(By.NAME, \"email_input\").clear()\n```\n\n----------------------------------------\n\nTITLE: Clear Element CSharp\nDESCRIPTION: This code snippet demonstrates how to clear the content of a text field using Selenium WebDriver in C#. It finds an element by its name attribute ('email_input') and clears the field. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().GoToUrl(inputPage);\nIWebElement element = driver.FindElement(By.Name(\"email_input\"));\nelement.Clear();\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Service Instance in CSharp\nDESCRIPTION: Illustrates how to start a driver with a default service instance in C#. The service class is initialized and used to start the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nvar service = ChromeDriverService.CreateDefaultService();\ndriver = new ChromeDriver(service);\n```\n\n----------------------------------------\n\nTITLE: Create New Window/Tab - Selenium WebDriver\nDESCRIPTION: Demonstrates how to create a new browser window or tab and switch the WebDriver focus to it. This feature is available in Selenium 4 and later.  It uses `WindowType.TAB` or `WindowType.WINDOW` to specify the type of new window to create.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\ndriver.switchTo().newWindow(WindowType.TAB);\n\n\ndriver.switchTo().newWindow(WindowType.WINDOW);\n\n```\n\n----------------------------------------\n\nTITLE: Creating New Window/Tab - Selenium WebDriver (Java)\nDESCRIPTION: Demonstrates creating a new tab and window using Selenium WebDriver in Java and switching to them.  This feature is available in Selenium 4 and later. Dependencies include Selenium WebDriver and JUnit for assertions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\ndriver.switchTo().newWindow(WindowType.TAB);\n\ndriver.switchTo().newWindow(WindowType.WINDOW);\n\n```\n\n----------------------------------------\n\nTITLE: Click Element JavaScript\nDESCRIPTION: This code snippet shows how to click an element using Selenium WebDriver in JavaScript. It finds an element by its ID and clicks it. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.findElement(By.id('submit')).click()\n```\n\n----------------------------------------\n\nTITLE: Initializing Chrome Driver with Default Options\nDESCRIPTION: This code snippet demonstrates how to initialize a Chrome browser session using Selenium with default options in different programming languages. It showcases the basic setup required to start a Chrome browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Chrome::Options.new\ndriver = Selenium::WebDriver.for :chrome, options: options\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Confirm in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to interact with a JavaScript confirm dialog using Selenium WebDriver. It waits for the alert, gets the text, and then dismisses the alert.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.wait(until.alertIsPresent());\nlet alert = await driver.switchTo().alert();\nawait alert.dismiss();\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Title with Selenium\nDESCRIPTION: This snippet retrieves the title of the current webpage loaded in the browser. It uses the `getTitle()` method of the WebDriver instance.  Dependencies include a properly initialized WebDriver and a loaded webpage.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nlet title = await driver.getTitle();\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Service Instance in Ruby\nDESCRIPTION: Explains how to start a driver with a default service instance in Ruby. The service class is initialized and passed to the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.chrome\ndriver = Selenium::WebDriver.for :chrome, service: service\n```\n\n----------------------------------------\n\nTITLE: Adding a Virtual Authenticator in Java\nDESCRIPTION: This snippet demonstrates how to add a virtual authenticator using the configured options in Java. It uses the addVirtualAuthenticator method on the WebDriver's DevTools interface to create and register the virtual authenticator for testing WebAuthn flows.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nDevTools devTools = driver.getDevTools();\ndevTools.createSessionIfNecessary();\n\nVirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions();\n\ndevTools.getDomains().security().addVirtualAuthenticator(options);\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - Python\nDESCRIPTION: Demonstrates how to set the browser window's size to a specific width and height in Python using Selenium WebDriver.  The code directly calls the `set_window_size` method with the desired width and height as arguments.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ndriver.set_window_size(1024, 768)\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - C#\nDESCRIPTION: Demonstrates how to retrieve the browser window's size in C# using Selenium WebDriver.  The code retrieves the width and height individually, and also demonstrates storing the dimensions in a `System.Drawing.Size` object for later use. Provides equivalent approaches to accessing the browser window's size.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\n//Access each dimension individually\nint width = driver.Manage().Window.Size.Width;\nint height = driver.Manage().Window.Size.Height;\n\n//Or store the dimensions and query them later\nSystem.Drawing.Size size = driver.Manage().Window.Size;\nint width1 = size.Width;\nint height1 = size.Height;\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium JavaScript\nDESCRIPTION: This snippet shows how to select an option in a Select element by its visible text in JavaScript. It uses the `selectByVisibleText()` method of the Select object. It throws NoSuchElementException if no matching option is found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait select.selectByVisibleText('Four');\n```\n\n----------------------------------------\n\nTITLE: Installing Add-ons in Firefox with Selenium (Java)\nDESCRIPTION: This snippet shows how to install a Firefox add-on (.xpi file) using Selenium WebDriver in Java. The `installAddon` method installs the specified add-on and returns its ID.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_32\n\nLANGUAGE: java\nCODE:\n```\nString id = ((HasExtensions) driver).installAddon(new File(\"add.xpi\"));\n```\n\n----------------------------------------\n\nTITLE: Quitting a Selenium Driver Session in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates the `driver.quit()` method to terminate a Selenium WebDriver session, ensuring that the browser instance is properly closed and resources are released after the test. This practice avoids resource leaks and ensures a clean testing environment.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.pt-br.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {Browser, Builder} = require('selenium-webdriver');\n\ndescribe('First script', function () {\n  it('should open google', async function () {\n    let driver = await new Builder().forBrowser(Browser.CHROME).build();\n\n    await driver.get('https://www.google.com/');\n\n    console.log(await driver.getTitle());\n\n    await driver.quit();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset - Python\nDESCRIPTION: This Python code snippet demonstrates how to scroll from an offset of the viewport using Selenium's Actions API and Wheel class. It takes an x offset, a y offset, delta x and delta y values. It scrolls from the origin point which is the upper left corner of the current viewport, offset by given x and y values. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nactions = ActionBuilder(driver)\nactions.scroll_from_origin(origin=WheelInput.VIEWPORT, x=25, y=25, delta_x=50, delta_y=100).perform()\n```\n\n----------------------------------------\n\nTITLE: Setting Log Truncation in Firefox with Selenium (Java)\nDESCRIPTION: This Java code snippet demonstrates how to disable log truncation in Firefox using Selenium.  It sets the `log.truncate` preference to `false` within the Firefox options. The log level can also be set using a System Property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_26\n\nLANGUAGE: java\nCODE:\n```\noptions.setPreference(\"log.truncate\", false);\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element by Class Name - Python\nDESCRIPTION: This snippet demonstrates how to find the first element with a specific class name using the Selenium WebDriver in Python. It uses the `find_element` method with `By.CLASS_NAME` to locate the element. The result is stored in a variable for further interaction.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nvegetable = driver.find_element(By.CLASS_NAME, \"tomatoes\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Driver Options - Java\nDESCRIPTION: This Java snippet demonstrates how to initialize driver options, specifically setting headless mode. This is a common practice to run tests without a visible browser window, which can be useful for CI/CD environments. It uses the `ChromeOptions` class to configure the ChromeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.addArguments(\"--headless=new\");\ndriver = new ChromeDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Link Text with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a link element on a page using its exact link text with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.linkText()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.linkText(\"Selenium Official Page\"));\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Kotlin\nDESCRIPTION: Demonstrates how to select an option in a Select element by its visible text in Kotlin. It uses the selectByVisibleText() method. Throws NoSuchElementException if matching option is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nselect.selectByVisibleText(\"One\")\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium - Java\nDESCRIPTION: This code snippet demonstrates how to set an implicit wait in Selenium using Java. Implicit waits are a global setting that applies to all element location calls during the session. The driver will wait for the specified duration before throwing an error if the element is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox Driver with Options\nDESCRIPTION: This snippet demonstrates how to initialize a Firefox WebDriver instance with basic options. It showcases the common approach across multiple languages. The core functionality involves creating FirefoxOptions and using them to instantiate a RemoteWebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { Builder } = require('selenium-webdriver');\nconst firefox = require('selenium-webdriver/firefox');\n\nlet driver = new Builder().forBrowser('firefox').setFirefoxOptions(new firefox.Options()).build();\n```\n\n----------------------------------------\n\nTITLE: Click Element Kotlin\nDESCRIPTION: This code snippet demonstrates how to click a web element using Selenium WebDriver in Kotlin. It navigates to a URL, finds an element by its name attribute ('color_input'), and then clicks the element. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// Navigate to Url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n// Click the element\ndriver.findElement(By.name(\"color_input\")).click();\n```\n\n----------------------------------------\n\nTITLE: Get Page Title with Selenium\nDESCRIPTION: Retrieves the title of the current web page loaded in the browser using Selenium WebDriver. This functionality is demonstrated in Java, Python, C#, Ruby, and JavaScript. The `driver.title` property or method is used to access the title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver.getTitle();\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid New Session Queue (Shell)\nDESCRIPTION: This command starts the New Session Queue component, which adds new session requests to a queue that will be queried by the Distributor in a Distributed Grid setup. The default port is 5559.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.en.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar sessionqueue --port 5559\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Element with Selenium WebDriver in Java\nDESCRIPTION: This Java code snippet demonstrates how to locate an element and send keys to it using Selenium WebDriver. The `clear()` method is called before sending keys to ensure the input field is empty.  This snippet requires a WebDriver instance already initialized and a web page loaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\");\nWebElement element = driver.findElement(By.name(\"email_input\"));\nelement.clear();\nelement.sendKeys(\"admin@localhost.dev\");\n\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element w/ Offset using Selenium Wheel (CSharp)\nDESCRIPTION: Scrolls from a specified element with an offset, by a given amount. Requires the element, x offset, y offset, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"idOfMyElement\"));\nnew Actions(driver)\n    .ScrollFromOrigin(WheelInput.Origin.FromElement(element, 15, 25), 20, 50)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Alert in CSharp\nDESCRIPTION: This C# code snippet demonstrates how to interact with a JavaScript alert using Selenium WebDriver. It clicks a link to trigger the alert, waits for the alert to be displayed using `ExpectedConditions.AlertIsPresent()`, stores the alert in an `IAlert` interface, retrieves the text of the alert, and then accepts the alert (clicks the OK button).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n//Click the link to activate the alert\ndriver.FindElement(By.LinkText(\"See an example alert\")).Click();\n\n//Wait for the alert to be displayed and store it in a variable\nIAlert alert = wait.Until(ExpectedConditions.AlertIsPresent());\n\n//Store the alert text in a variable\nstring text = alert.Text;\n\n//Press the OK button\nalert.Accept();\n```\n\n----------------------------------------\n\nTITLE: Adding Cookie to Browser Context in JavaScript\nDESCRIPTION: This code snippet demonstrates how to add a cookie to the current browser context using Selenium WebDriver in JavaScript. It navigates to a website and then adds a cookie with the name 'key' and value 'value'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.get('https://www.example.com/');\nawait driver.manage().addCookie({name: 'key', value: 'value'});\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name - JavaScript\nDESCRIPTION: Demonstrates how to retrieve the tag name of a web element using JavaScript and Selenium WebDriver. The `getTagName()` method returns the tag name as a string. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst emailInput = await driver.findElement(By.name('email_input'))\nexpect(await emailInput.getTagName()).toBe('input')\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot in Selenium\nDESCRIPTION: This code takes a screenshot of the current browser window using Selenium WebDriver and saves it as a PNG file. It demonstrates how to initialize a ChromeDriver, navigate to a URL, take the screenshot, and save it to a file. Requires the com.oracle.tools.packager.IOUtils.copyFile dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_81\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport com.oracle.tools.packager.IOUtils.copyFile\nimport org.openqa.selenium.*\nimport org.openqa.selenium.chrome.ChromeDriver\nimport java.io.File\n\nfun main(){\n    val driver =  ChromeDriver()\n    driver.get(\"https://www.example.com\")\n    val scrFile = (driver as TakesScreenshot).getScreenshotAs<File>(OutputType.FILE)\n    copyFile(scrFile, File(\"./image.png\"))\n    driver.quit()\n}\n```\n\n----------------------------------------\n\nTITLE: Context Click with Selenium\nDESCRIPTION: Moves to the center of an element and performs a right-click (context click). It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(:id, 'clickable')\n@driver.action.context_click(element).perform\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox Driver with Options - Python\nDESCRIPTION: Demonstrates how to initialize a Firefox WebDriver instance with basic options using Python.  It requires the Selenium library. The `webdriver.FirefoxOptions` class is used to set browser-specific configurations.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\noptions = webdriver.FirefoxOptions()\ndriver = webdriver.Firefox(options=options)\n```\n\n----------------------------------------\n\nTITLE: Clear Element JavaScript\nDESCRIPTION: This code snippet demonstrates how to clear a text field using Selenium WebDriver in JavaScript. It finds an element by its name and clears the text field. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.findElement(By.name('search')).clear()\n```\n\n----------------------------------------\n\nTITLE: SignInPage Page Object in Java\nDESCRIPTION: This code demonstrates a Page Object for the Sign-in page using Selenium WebDriver. It encapsulates the locators and actions related to the Sign-in page.  The constructor verifies the page is loaded correctly. The `loginValidUser` method performs the login action and returns a HomePage object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.en.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\n\n/**\n * Page Object encapsulates the Sign-in page.\n */\npublic class SignInPage {\n  protected WebDriver driver;\n\n  // <input name=\"user_name\" type=\"text\" value=\"\">\n  private By usernameBy = By.name(\"user_name\");\n  // <input name=\"password\" type=\"password\" value=\"\">\n  private By passwordBy = By.name(\"password\");\n  // <input name=\"sign_in\" type=\"submit\" value=\"SignIn\">\n  private By signinBy = By.name(\"sign_in\");\n\n  public SignInPage(WebDriver driver){\n    this.driver = driver;\n     if (!driver.getTitle().equals(\"Sign In Page\")) {\n      throw new IllegalStateException(\"This is not Sign In Page,\" +\n            \" current page is: \" + driver.getCurrentUrl());\n    }\n  }\n\n  /**\n    * Login as valid user\n    *\n    * @param userName\n    * @param password\n    * @return HomePage object\n    */\n  public HomePage loginValidUser(String userName, String password) {\n    driver.findElement(usernameBy).sendKeys(userName);\n    driver.findElement(passwordBy).sendKeys(password);\n    driver.findElement(signinBy).click();\n    return new HomePage(driver);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Displayed in Java\nDESCRIPTION: This code snippet demonstrates how to check if a web element is displayed on a webpage using Selenium WebDriver in Java. It uses the `isDisplayed()` method of the WebElement interface. The method returns `true` if the element is displayed, and `false` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"email_input\"));\nboolean isDisplayed = element.isDisplayed();\nassertThat(isDisplayed).isTrue();\n```\n\n----------------------------------------\n\nTITLE: Handle Alert Popup in JavaScript\nDESCRIPTION: This code snippet illustrates handling a JavaScript alert using Selenium WebDriver in JavaScript.  It focuses on accepting the alert. A link is clicked to trigger the alert.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.pt-br.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.findElement(By.linkText('See an example alert')).click();\nawait driver.wait(until.alertIsPresent(), 10000);\nawait driver.switchTo().alert().accept();\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait with Lambda (C#)\nDESCRIPTION: This C# code snippet demonstrates explicit wait functionality in Selenium, waiting up to 10 seconds for the presence of an element located by its ID. It utilizes a lambda expression within `WebDriverWait` to dynamically check if the element is present before proceeding.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.ja.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nvar wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));\nvar element = wait.Until(driver => driver.FindElement(By.Id(\"myDynamicElement\")));\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates a copy and paste operation using Selenium's Actions API. It checks if the platform is macOS, defines keys for select all, copy, and paste accordingly. It then sends 'Selenium', selects all text, copies the text, moves to the end, pastes the copied text, and adds an exclamation mark. The final result should be 'SeleniumSelenium!'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst isMac = process.platform === 'darwin';\nconst selectAll = isMac ? Key.COMMAND + 'a' : Key.CONTROL + 'a';\nconst copy = isMac ? Key.COMMAND + 'c' : Key.CONTROL + 'c';\nconst paste = isMac ? Key.COMMAND + 'v' : Key.CONTROL + 'v';\n\nconst actions = driver.actions({async: true});\nawait actions\n  .sendKeys('Selenium')\n  .sendKeys(selectAll)\n  .sendKeys(copy)\n  .sendKeys(Key.END)\n  .sendKeys(paste)\n  .sendKeys('!')\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Get Attribute Value Python\nDESCRIPTION: This Python code snippet demonstrates how to fetch the 'value' attribute of an email input element using Selenium WebDriver. It finds the element using `find_element(By.NAME)` and then uses the `get_attribute` method to retrieve the attribute's value. The value is then asserted to match the expected value. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\nemail = driver.find_element(By.NAME, \"email_input\")\nattribute = email.get_attribute(\"value\")\nassert attribute == \"diana.prince@selenium.dev\"\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies with Selenium WebDriver (CSharp)\nDESCRIPTION: This code snippet demonstrates how to delete all cookies in the current browser context using Selenium WebDriver in C#. It requires the Selenium WebDriver NuGet package. The code navigates to a specific URL, adds two cookies, and then deletes all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\ndriver.Manage().Cookies.AddCookie(new Cookie(\"test1\", \"cookie1\"));\ndriver.Manage().Cookies.AddCookie(new Cookie(\"test2\", \"cookie2\"));\n\n// deletes all cookies\ndriver.Manage().Cookies.DeleteAllCookies();\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium - Ruby\nDESCRIPTION: This snippet demonstrates how to set an implicit wait in Selenium using Ruby. The implicit wait is a global setting that tells the WebDriver to wait for a certain amount of time when trying to find an element or elements if they are not immediately available.  It accepts a numerical duration in seconds, and applies to the entire session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.timeouts.implicit_wait = 10\n```\n\n----------------------------------------\n\nTITLE: Adding Console Message Handler in Python\nDESCRIPTION: This snippet demonstrates how to add a handler for console messages using WebDriver BiDi in Python. It uses the `add_event_listener` method to listen for console log events.  It requires a WebDriver BiDi enabled Selenium driver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.pt-br.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndriver.add_event_listener(\n    Console.ConsoleEvent, lambda msg: print(f\"Console {msg.messages[0].level} message: {msg.messages[0].text}\"))\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium\nDESCRIPTION: Demonstrates sending keys to the currently active element using Selenium's Actions API. This involves creating an Actions object, using the sendKeys method to send a string of characters, and then performing the action. This action sends the characters to whichever element currently has focus.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = driver.actions();\nawait actions.sendKeys('text').perform();\n```\n\n----------------------------------------\n\nTITLE: Initialize Selenium WebDriver in Python\nDESCRIPTION: This Python code snippet initializes a Selenium WebDriver instance using ChromeDriver. It navigates to the SeleniumHQ website and prints the title of the page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.pt-br.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\n\n\ndef test_eight_components() -> None:\n    service = Service()\n    options = webdriver.ChromeOptions()\n    driver = webdriver.Chrome(service=service, options=options)\n\n    driver.get(\"https://www.selenium.dev/\")\n\n    assert \"Selenium\" in driver.title\n\n    driver.quit()\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium\nDESCRIPTION: Demonstrates sending keys to the currently active element using Selenium's Actions API. This involves creating an Actions object, using the sendKeys method to send a string of characters, and then performing the action. This action sends the characters to whichever element currently has focus.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nactions = ActionChains(driver)\nactions.send_keys(\"text\").perform()\n```\n\n----------------------------------------\n\nTITLE: File Upload Kotlin Example\nDESCRIPTION: This Kotlin code demonstrates uploading a file using Selenium. It navigates to a web page, locates the file input field, sends the file path, submits the form, and verifies the upload.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.zh-cn.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport org.openqa.selenium.By\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    driver.get(\"https://the-internet.herokuapp.com/upload\")\n    driver.findElement(By.id(\"file-upload\")).sendKeys(\"selenium-snapshot.jpg\")\n    driver.findElement(By.id(\"file-submit\")).submit()\n    if(driver.pageSource.contains(\"File Uploaded!\")) {\n        println(\"file uploaded\")\n    }\n    else{\n        println(\"file not uploaded\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Window Handle in Selenium\nDESCRIPTION: This snippet demonstrates how to retrieve the unique identifier (window handle) of the currently active browser window or tab using Selenium WebDriver. The window handle is a string that persists for the duration of the session and can be used to switch back to the window later. No specific dependencies are required beyond the standard Selenium WebDriver library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nString originalWindow = driver.getWindowHandle();\nassertNotNull(originalWindow);\n\nSystem.out.println(originalWindow);\n\n```\n\n----------------------------------------\n\nTITLE: Move To Element with Selenium\nDESCRIPTION: Moves the mouse to the center of the element, simulating a hover. Requires a WebDriver instance and that the element is in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_41\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"clickable\"))\nval actions = Actions(driver)\nactions.moveToElement(element).perform()\n```\n\n----------------------------------------\n\nTITLE: Adding a Cookie with Selenium WebDriver (Java)\nDESCRIPTION: This code snippet demonstrates how to add a cookie to the current browser context using Selenium WebDriver in Java. It requires the Selenium WebDriver dependency and assumes a WebDriver instance is already initialized. The code navigates to a specific URL and then adds a cookie with the name 'key' and the value 'value'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.example.com\");\nCookie cookie = new Cookie(\"key\", \"value\");\ndriver.manage().addCookie(cookie);\n```\n\n----------------------------------------\n\nTITLE: Check Element Displayed Status - JavaScript\nDESCRIPTION: Demonstrates how to check if a web element is displayed on a webpage using JavaScript and Selenium WebDriver. The `isDisplayed()` method returns a boolean indicating the visibility of the element. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst emailInput = await driver.findElement(By.name('email_input'))\nexpect(await emailInput.isDisplayed()).toBe(true)\n```\n\n----------------------------------------\n\nTITLE: Closing a Window/Tab and Switching Back in Selenium\nDESCRIPTION: This snippet shows how to close the current window/tab and switch the WebDriver's focus back to the original window/tab. It assumes that the original window handle has been stored in a variable. It requires the Selenium WebDriver library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\ndriver.close();\ndriver.switchTo().window(originalWindow);\n\n```\n\n----------------------------------------\n\nTITLE: Quitting Browser Session: Selenium WebDriver (Kotlin)\nDESCRIPTION: This snippet shows how to properly quit a Selenium WebDriver browser session in Kotlin. It calls the `driver.quit()` method, which closes all associated windows, tabs, the browser process, and the background driver process, releasing resources for subsequent sessions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Initializing Edge Driver with Default Options - Java\nDESCRIPTION: Demonstrates initializing the Edge driver with basic, predefined options using Java.\nThis snippet showcases the most straightforward way to start an Edge session with Selenium.\nDependencies: Selenium WebDriver, EdgeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nEdgeDriver driver = new EdgeDriver();\n```\n\n----------------------------------------\n\nTITLE: Execute JavaScript - Selenium\nDESCRIPTION: This Ruby snippet demonstrates how to execute JavaScript code within the current browser context using Selenium WebDriver. It finds an element by CSS selector, retrieves its innerText using JavaScript, and executes an alert.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_85\n\nLANGUAGE: Ruby\nCODE:\n```\n    # Stores the header element\nheader = driver.find_element(css: 'h1')\n\n    # Get return value from script\nresult = driver.execute_script(\"return arguments[0].innerText\", header)\n\n    # Executing JavaScript directly\ndriver.execute_script(\"alert('hello world')\")\n```\n\n----------------------------------------\n\nTITLE: Context Click with Selenium\nDESCRIPTION: Moves to the center of an element and performs a right-click (context click). It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"clickable\")\nactions = ActionChains(driver)\nactions.context_click(element).perform()\n```\n\n----------------------------------------\n\nTITLE: Distributed Grid Startup Script (PostgreSQL)\nDESCRIPTION: This bash script starts a distributed Selenium Grid with the session information stored in PostgreSQL. It defines variables, starts the event bus, session queue, session map, distributor, router and node.  It uses coursier to fetch the required JDBC driver and selenium-session-map-jdbc dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.zh-cn.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nSE_VERSION=<current_selenium_version>\nJAR_NAME=selenium-server-${SE_VERSION}.jar\nPUBLISH=\"--publish-events tcp://localhost:4442\"\nSUBSCRIBE=\"--subscribe-events tcp://localhost:4443\"\nSESSIONS=\"--sessions http://localhost:5556\"\nSESSIONS_QUEUE=\"--sessionqueue http://localhost:5559\"\necho 'Starting Event Bus'\njava -jar $JAR_NAME event-bus $PUBLISH $SUBSCRIBE --port 5557 &\necho 'Starting New Session Queue'\njava -jar $JAR_NAME sessionqueue --port 5559 &\necho 'Starting Sessions Map'\njava -jar $JAR_NAME \\\n--ext $(coursier fetch -p org.seleniumhq.selenium:selenium-session-map-jdbc:${SE_VERSION} org.postgresql:postgresql:42.3.1) \\\nsessions $PUBLISH $SUBSCRIBE --port 5556 --config sessions.toml &\necho 'Starting Distributor'\njava -jar $JAR_NAME  distributor $PUBLISH $SUBSCRIBE $SESSIONS $SESSIONS_QUEUE --port 5553 --bind-bus false &\necho 'Starting Router'\njava -jar $JAR_NAME router $SESSIONS --distributor http://localhost:5553 $SESSIONS_QUEUE --port 4444 &\necho 'Starting Node'\njava -jar $JAR_NAME node $PUBLISH $SUBSCRIBE &\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot - Selenium WebDriver - Python\nDESCRIPTION: This snippet takes a screenshot of the current browser window using the Selenium WebDriver API in Python and saves it to a file. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_54\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\n\ndriver = webdriver.Chrome()\n\n    # Navigate to url\ndriver.get(\"http://www.example.com\")\n\n    # Returns and base64 encoded string into image\ndriver.save_screenshot('./image.png')\n\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Locating Element Near Another - CSharp\nDESCRIPTION: Locates an input element near the element with ID 'lbl-email' in C#. Utilizes `RelativeBy.WithLocator` and `Near`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_59\n\nLANGUAGE: CSharp\nCODE:\n```\nvar emailLocator = RelativeBy.WithLocator(By.tagName(\"input\")).Near(By.Id(\"lbl-email\"));\n```\n\n----------------------------------------\n\nTITLE: Set Permissions - CSharp\nDESCRIPTION: This snippet is a placeholder as there is no code provided. The goal is to show how to set permissions with C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_67\n\nLANGUAGE: CSharp\nCODE:\n```\n// No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Open a new tab using WebDriver BiDi in JavaScript\nDESCRIPTION: This snippet demonstrates how to open a new browsing context in a new tab using the WebDriver BiDi API in JavaScript. It uses the `BrowsingContext` to create a new tab and asserts that a context ID is returned. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await browsingContext.create({\n  type: 'tab'\n});\n```\n\n----------------------------------------\n\nTITLE: Click Element with Selenium WebDriver in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to locate an element and click it using Selenium WebDriver. The element is located by its name. The snippet assumes a `driver` instance is already initialized.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.find_element(name: 'color_input').click\n\n```\n\n----------------------------------------\n\nTITLE: Locating Element to the Right of Another (Python)\nDESCRIPTION: This snippet demonstrates how to locate a button element that is positioned to the right of the element with the ID 'cancel' using Selenium's relative locator in Python. It uses `locate_with` for relative location.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_53\n\nLANGUAGE: Python\nCODE:\n```\nsubmit_locator = locate_with(By.TAG_NAME, \"button\").to_right_of({By.ID: \"cancel\"})\n```\n\n----------------------------------------\n\nTITLE: Add Network Intercept - Selenium BiDi - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to add a network intercept using Selenium's BiDi API. It enables network interception using `Network.addIntercept` and provides a URL pattern to match. Requires Selenium 4.18 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait bidiNetwork.addIntercept({\n  urlPattern: url\n});\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name - CSharp\nDESCRIPTION: Demonstrates how to retrieve the tag name of a web element using C# and Selenium WebDriver. The `TagName` property returns the tag name as a string. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"email_input\"));\nAssert.That(element.TagName, Is.EqualTo(\"input\"));\n\n```\n\n----------------------------------------\n\nTITLE: Removing a Virtual Authenticator in Python\nDESCRIPTION: This snippet demonstrates how to remove a virtual authenticator in Python. It leverages the DevTools interface to remove a virtual authenticator, identified by its authenticator ID. It depends on Selenium WebDriver and the DevTools enabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ndevtools = driver.devtools\ndevtools.remove_virtual_authenticator(authenticator_id)\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookie Attribute\nDESCRIPTION: This Python snippet showcases how to set the SameSite attribute for a cookie.  It uses Selenium WebDriver to add cookies with the SameSite attribute set to either 'Strict' or 'Lax'. This requires Selenium 4+ and Chrome 80+ or Firefox 79+.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n# def test_setting_samesite_attribute_to_a_cookie(driver, pages):\n#     pages.navigate_to(\"/cookie\")\n#\n#     driver.delete_all_cookies()\n#\n#     driver.add_cookie({\"name\": \"name\", \"value\": \"value\", \"sameSite\": \"Strict\"})\n#     cookie = driver.get_cookie(\"name\")\n#     assert cookie[\"sameSite\"] == \"Strict\"\n#\n#     driver.delete_all_cookies()\n#\n#     driver.add_cookie({\"name\": \"name\", \"value\": \"value\", \"sameSite\": \"Lax\"})\n#     cookie = driver.get_cookie(\"name\")\n#     assert cookie[\"sameSite\"] == \"Lax\"\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver with Default Service - Java\nDESCRIPTION: This snippet demonstrates initializing a WebDriver instance using the default service instance in Java. It shows the basic setup required to start a browser session with Selenium's default configurations.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nChromeDriver driver = new ChromeDriver();\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Hub with Options (Java)\nDESCRIPTION: This snippet shows how to start a Selenium hub using Java, configuring the session request timeout, port, and disabling tracing. It illustrates how to customize the hub's behavior through command-line arguments.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar hub --session-request-timeout 500 --port 3333 --tracing false\n```\n\n----------------------------------------\n\nTITLE: Initializing Edge Driver with Default Options - Ruby\nDESCRIPTION: Demonstrates initializing the Edge driver with basic, predefined options using Ruby.\nThis snippet showcases the most straightforward way to start an Edge session with Selenium.\nDependencies: Selenium WebDriver, EdgeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :edge\n```\n\n----------------------------------------\n\nTITLE: Quitting a WebDriver Session - Ruby\nDESCRIPTION: This Ruby snippet shows how to properly terminate a WebDriver session by using the `quit` method. This ensures the browser process is completely shut down.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.zh-cn.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\n@driver.quit\n```\n\n----------------------------------------\n\nTITLE: Java Login DSL Method\nDESCRIPTION: This Java method demonstrates a DSL approach to logging in a user. It takes a username and password as input, fills out the login form, clicks the submit button, and returns an instance of the AccountPage. This abstracts the UI interactions from the test code.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/domain_specific_language.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * Takes a username and password, fills out the fields, and clicks \"login\".\n * @return An instance of the AccountPage\n */\npublic AccountPage loginAsUser(String username, String password) {\n  WebElement loginField = driver.findElement(By.id(\"loginField\"));\n  loginField.clear();\n  loginField.sendKeys(username);\n\n  // Fill out the password field. The locator we're using is \"By.id\", and we should\n  // have it defined elsewhere in the class.\n  WebElement passwordField = driver.findElement(By.id(\"password\"));\n  passwordField.clear();\n  passwordField.sendKeys(password);\n\n  // Click the login button, which happens to have the id \"submit\".\n  driver.findElement(By.id(\"submit\")).click();\n\n  // Create and return a new instance of the AccountPage (via the built-in Selenium\n  // PageFactory).\n  return PageFactory.newInstance(AccountPage.class);\n}\n```\n\n----------------------------------------\n\nTITLE: Browsing Context Loaded Event in Java\nDESCRIPTION: This code snippet demonstrates how to listen for the 'browsingContext.load' event using Selenium WebDriver's BiDi API in Java. It subscribes to the event and prints the context ID and URL when the browsing context is fully loaded. Requires Selenium version 4.10 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_48\n\nLANGUAGE: Java\nCODE:\n```\nWebDriverBiDi bidi = (WebDriverBiDi) driver;\n    BiDiSubscription<BrowsingContextModule.LoadEvent> subscription = new BiDiSubscription<>(\n        BrowsingContextModule.EVENT_CONTEXT_LOADED,\n        e -> System.out.println(\"Context \" + e.getContext().getId() + \" loaded \" + e.getUrl()));\n\n    bidi.subscribe(subscription);\n    driver.get(\"https://www.google.com\");\n    bidi.unsubscribe(subscription);\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options from Select in Selenium\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of selected options in a <select> element using Selenium WebDriver. The `getAllSelectedOptions()` method is used to get the currently selected options.  For a single select list this will be a list with one element; for a multiple select list, it can contain zero or many elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst selectedOptions = await select.getAllSelectedOptions();\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Status - Java\nDESCRIPTION: This snippet demonstrates how to check if a web element is enabled on the page using Selenium WebDriver in Java. It finds an element by name and uses the isEnabled() method to determine if it is enabled, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"button_input\"));\nboolean isEnabled = element.isEnabled();\nassertThat(isEnabled).isTrue()\n```\n\n----------------------------------------\n\nTITLE: Get Active Element Attribute in Selenium WebDriver - CSharp\nDESCRIPTION: This C# code demonstrates how to retrieve an attribute from the currently active element using Selenium WebDriver. It navigates to Google, enters text in the search box, and retrieves the 'title' attribute of the active element.  It uses the OpenQA.Selenium and OpenQA.Selenium.Chrome namespaces.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_36\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace ActiveElement {\n class ActiveElement {\n  public static void Main(string[] args) {\n   IWebDriver driver = new ChromeDriver();\n   try {\n    // Navigate to Url\n    driver.Navigate().GoToUrl(\"https://www.google.com\");\n    driver.FindElement(By.CssSelector(\"[name='q']\")).SendKeys(\"webElement\");\n\n    // Get attribute of current active element\n    string attr = driver.SwitchTo().ActiveElement().GetAttribute(\"title\");\n    System.Console.WriteLine(attr);\n   } finally {\n    driver.Quit();\n   }\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Kotlin\nDESCRIPTION: Demonstrates how to select an option in a Select element by its index in Kotlin. It uses the selectByIndex() method. Index starts from 0. Throws NoSuchElementException if index is out of range.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nselect.selectByIndex(0)\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Content - Kotlin\nDESCRIPTION: Demonstrates how to retrieve the text content of a web element using Kotlin and Selenium WebDriver. The `getText()` method returns the rendered text of the element. A WebDriver instance and an element locator are required. First navigate to the target URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_41\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Navigate to URL\ndriver.get(\"https://www.selenium.dev/selenium/web/linked_image.html\")\n\n// retrieves the text of the element\nval text = driver.findElement(By.id(\"justanotherlink\")).getText()\n\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - Normal - Java\nDESCRIPTION: This Java snippet demonstrates setting the page load strategy to 'normal' using ChromeOptions. It initializes ChromeOptions and sets the page load strategy.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setPageLoadStrategy(PageLoadStrategy.NORMAL);\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve all cookies from the current browser context using Selenium WebDriver in Python. It navigates to a website, adds two cookies, and then retrieves all available cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://www.example.com\")\ncookie1 = { 'name' : 'test1', 'value' : 'cookie1' }\ndriver.add_cookie(cookie1)\ncookie2 = { 'name' : 'test2', 'value' : 'cookie2' }\ndriver.add_cookie(cookie2)\n\n#Get All available cookies\nprint(driver.get_cookies())\n```\n\n----------------------------------------\n\nTITLE: Disable Chrome Build Check - Kotlin\nDESCRIPTION: This snippet is a placeholder as there is no code provided. The goal is to disable Chrome build check by setting ChromeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_46\n\nLANGUAGE: Kotlin\nCODE:\n```\n// No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox Driver with Options\nDESCRIPTION: This snippet demonstrates how to initialize a Firefox WebDriver instance with basic options. It showcases the common approach across multiple languages. The core functionality involves creating FirefoxOptions and using them to instantiate a RemoteWebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxOptions options = new FirefoxOptions();\nWebDriver driver = new FirefoxDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Finding Element by Name with Selenium\nDESCRIPTION: This snippet demonstrates how to find an HTML element by its 'name' attribute using Selenium WebDriver. The 'findElement' method with the 'By.name' locator is used. The `name` attribute is \"q\" in this case, commonly used in search input fields.  Dependencies: initialized WebDriver instance and a loaded webpage containing the target element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nlet searchBox = await driver.findElement(By.name('q'));\nawait searchBox.sendKeys('Selenium');\n```\n\n----------------------------------------\n\nTITLE: Press Key Action in Selenium\nDESCRIPTION: Demonstrates how to simulate pressing a specific key using Selenium's Actions API. This involves creating an Actions object, using the keyDown method to press a key, and then performing the action. The key to press is specified using the Keys enum/class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = driver.actions();\nawait actions.keyDown(Key.SHIFT)\n  .sendKeys('text')\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Find Element within Another Element - Java\nDESCRIPTION: This snippet demonstrates how to find an element within another element in Java using Selenium WebDriver. First, it locates the parent element by its ID. Then, it uses the `findElement` method on the parent element to find the desired element by its class name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nWebElement fruits = driver.findElement(By.id(\"fruits\"));\nWebElement fruit = fruits.findElement(By.className(\"tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Content - Kotlin\nDESCRIPTION: This snippet demonstrates how to retrieves the text of an element with id \"justanotherlink\" using Selenium WebDriver in Kotlin after navigating to a specific URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_41\n\nLANGUAGE: kotlin\nCODE:\n```\n// Navigate to URL\ndriver.get(\"https://www.selenium.dev/selenium/web/linked_image.html\")\n\n// retrieves the text of the element\nval text = driver.findElement(By.id(\"justanotherlink\")).getText()\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium Kotlin\nDESCRIPTION: This snippet demonstrates how to select an option in a Select element by its visible text in Kotlin. It uses the `selectByVisibleText()` method of the Select object. It throws NoSuchElementException if no matching option is found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nselect.selectByVisibleText(\"Four\")\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to None in Java\nDESCRIPTION: This snippet shows how to set the page load strategy to 'none' in Java using Selenium. WebDriver waits until the initial page is downloaded.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setPageLoadStrategy(PageLoadStrategy.NONE);\nWebDriver driver = new ChromeDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Web Page\nDESCRIPTION: This snippet shows how to navigate the browser to a specific URL using Selenium.  It uses the `get` or `navigate().to()` method of the WebDriver to load a web page. The target URL is a required parameter.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://www.google.com\")\n```\n\n----------------------------------------\n\nTITLE: Clear Element with Selenium WebDriver in Python\nDESCRIPTION: This Python code snippet demonstrates how to locate an element by its name and clear its content using Selenium WebDriver. It requires a WebDriver instance already initialized and a web page loaded. The element must be editable and resettable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\nelement = driver.find_element(By.NAME, \"email_input\")\nelement.clear()\n\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - Kotlin\nDESCRIPTION: Demonstrates how to retrieve the browser window's size in Kotlin using Selenium WebDriver. The code retrieves the width and height individually and also demonstrates storing the dimensions in a `size` object for later use, allowing for flexible access to the window's dimensions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\n//Access each dimension individually\nval width = driver.manage().window().size.width\nval height = driver.manage().window().size.height\n\n//Or store the dimensions and query them later\nval size = driver.manage().window().size\nval width1 = size.width\nval height1 = size.height\n```\n\n----------------------------------------\n\nTITLE: Locating Element by XPath in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate a web element using XPath in Selenium.  It initializes a WebDriver and uses `By.xpath()` to locate an input element with the attribute `value` set to 'f', representing a female radio button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.xpath(\"//input[@value='f']\"));\n```\n\n----------------------------------------\n\nTITLE: Get Element Attribute - JavaScript\nDESCRIPTION: This snippet demonstrates how to get an attribute value of a web element using Selenium WebDriver in JavaScript. It finds an element by name and uses the getAttribute() method to retrieve the value of the 'value' attribute.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst emailInput = await driver.findElement(By.name('email_input'))\nexpect(await emailInput.getAttribute('value')).toBe('')\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to a New Tab in Selenium (Ruby)\nDESCRIPTION: Opens a new tab using Selenium 4's `new_window` functionality and switches the driver's focus to it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.switch_to.new_window(:tab)\ndriver.get('https://www.selenium.dev/')\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in CSharp\nDESCRIPTION: Demonstrates how to select an option in a Select element by its index in C#. It uses the SelectByIndex() method. Index starts from 0. Throws NoSuchElementException if index is out of range.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nselect.SelectByIndex(0);\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name - C#\nDESCRIPTION: This snippet demonstrates how to get the tag name of a web element using Selenium WebDriver in C#. It finds an element by name and uses the TagName property to retrieve its tag name as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"email_input\"));\nAssert.That(element.TagName, Is.EqualTo(\"input\"));\nConsole.WriteLine(\"Tag Name is: \" + element.TagName);\n```\n\n----------------------------------------\n\nTITLE: File Upload with sendKeys in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to upload a file in Selenium by locating a file input element and using the sendKeys method to send the full path of the file to be uploaded. It includes a check to verify if the file was uploaded successfully.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.ja.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport org.openqa.selenium.By\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    driver.get(\"https://the-internet.herokuapp.com/upload\")\n    driver.findElement(By.id(\"file-upload\")).sendKeys(\"selenium-snapshot.jpg\")\n    driver.findElement(By.id(\"file-submit\")).submit()\n    if(driver.pageSource.contains(\"File Uploaded!\")) {\n        println(\"file uploaded\")\n    }\n    else{\n        println(\"file not uploaded\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Click Element Ruby\nDESCRIPTION: This code snippet demonstrates how to click a web element using Selenium WebDriver in Ruby. It finds an element by its name attribute ('color_input') and then clicks on that element. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nexpect {driver.find_element(name: 'color_input').click}.to change {driver.find_element(name: 'color_input')[:value]}.from('').to('#ff0000')\n```\n\n----------------------------------------\n\nTITLE: Executing Selenium Manager with Chrome and Debug Mode (Shell)\nDESCRIPTION: This snippet demonstrates how to execute Selenium Manager to automatically manage the ChromeDriver for the Chrome browser, with debugging enabled. The `--debug` flag provides verbose output to understand the tool's actions, such as browser detection, driver discovery, and downloading the appropriate ChromeDriver version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.pt-br.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ ./selenium-manager --browser chrome --debug\n```\n\n----------------------------------------\n\nTITLE: Install Selenium with Packet Manager in C#\nDESCRIPTION: This command shows how to install the Selenium.WebDriver package in a C# project using the Packet Manager Console. It retrieves and adds the Selenium WebDriver to the project.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.en.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nInstall-Package Selenium.WebDriver\n```\n\n----------------------------------------\n\nTITLE: Get Current Window Handle - Selenium\nDESCRIPTION: Retrieves the current window handle, which is a unique identifier for the window within the current session. This identifier can be used to switch back to the window later. This code snippet shows how to retrieve the current window handle in different languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver.current_window_handle\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Class Name in Selenium\nDESCRIPTION: This code demonstrates how to locate a web element using its class name in Selenium WebDriver. It initializes a ChromeDriver instance and uses the `findElement` method with `By.className(\"information\")` to find the element with the specified class. The example is provided in multiple languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_34\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.ClassName(\"information\"));\n```\n\n----------------------------------------\n\nTITLE: Intercepting Request via CDP in Ruby\nDESCRIPTION: This Ruby code snippet shows how to intercept network requests using the Chrome DevTools Protocol (CDP) in Selenium.  It checks the request URL and modifies the HTTP method to `POST` if the URL contains \"example\".  This snippet depends on Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nsession.on(:request_intercepted) do |event|\n  if event['request']['url'].include?('example')\n    session.send('Network.continueInterceptedRequest', interceptionId: event['interceptionId'], request: { method: 'POST' })\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Quitting WebDriver Session - Java\nDESCRIPTION: This snippet demonstrates how to properly quit a WebDriver session in Java using the `driver.quit()` method.  This ensures that all browser windows and associated processes are closed. It is recommended to use this at the end of a test or session to avoid resource leaks.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Firefox Options\nDESCRIPTION: This code snippet demonstrates how to add arguments to Firefox options, commonly used for setting headless mode or specifying a profile. The `addArguments` method is used to pass command-line switches to the Firefox browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\noptions.addArguments(\"--headless\");\n```\n\n----------------------------------------\n\nTITLE: Click and Release with Selenium\nDESCRIPTION: Moves to the center of an element, presses, and releases the left mouse button, simulating a standard click.  It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('clickable'));\nawait actions.move({origin: element}).click().perform();\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium\nDESCRIPTION: This code snippet demonstrates how to initialize a Select object in Selenium after locating a <select> element. It covers multiple languages and shows the basic usage pattern. Note that the <select> element cannot be disabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebElement selectElement = driver.findElement(By.name(\"selectomatic\"));\nSelect select = new Select(selectElement);\n```\n\n----------------------------------------\n\nTITLE: Quitting WebDriver Session - CSharp\nDESCRIPTION: This snippet demonstrates how to properly quit a WebDriver session in C# using the `driver.Quit()` method.  This ensures that all browser windows and associated processes are closed. It is recommended to use this at the end of a test or session to avoid resource leaks.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Quit();\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Viewport Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse cursor to a specific offset from the top-left corner of the current viewport using Selenium WebDriver. The action is performed using the `move_by_offset` method of the ActionChains class, and it's available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_49\n\nLANGUAGE: Python\nCODE:\n```\nActionChains(driver)\n    .move_by_offset(15, 20)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Get Element Rectangle in Java\nDESCRIPTION: This code snippet demonstrates how to retrieve the rectangle (dimensions and coordinates) of a web element using Selenium WebDriver in Java. It uses the `getRect()` method of the WebElement interface. The method returns a `Rectangle` object containing the element's x, y, width, and height.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"range_input\"));\nRectangle rect = element.getRect();\nassertThat(rect.getHeight()).isEqualTo(15);\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element Selenium\nDESCRIPTION: This code snippet demonstrates how to perform a drag and drop operation from one element to another using Selenium WebDriver. The action is performed by clicking and holding the source element, moving to the target element, and then releasing the mouse. It is available in Java, Python, C#, Ruby, JavaScript and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_61\n\nLANGUAGE: Python\nCODE:\n```\nsource = driver.find_element(By.ID, \"draggable\")\ntarget = driver.find_element(By.ID, \"droppable\")\n\nActionChains(driver).drag_and_drop(source, target).perform()\n```\n\n----------------------------------------\n\nTITLE: Move To Element with Selenium\nDESCRIPTION: Moves the mouse to the center of the element, simulating a hover. Requires a WebDriver instance and that the element is in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('clickable'));\nawait actions.move({origin: element}).perform();\n```\n\n----------------------------------------\n\nTITLE: Fetch Element Attribute Selenium CSharp\nDESCRIPTION: This C# code snippet uses Selenium WebDriver to navigate to a page with an email input, retrieves the value attribute, and asserts that it's an empty string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_44\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/inputs.html\");\nIWebElement element = driver.FindElement(By.Name(\"email_input\"));\nString value = element.GetAttribute(\"value\");\n\nAssert.That(value, Is.EqualTo(String.Empty));\n```\n\n----------------------------------------\n\nTITLE: Chaining Relative Locators (Java)\nDESCRIPTION: This snippet demonstrates how to chain relative locators to locate a button element that is below the element with the ID 'email' and to the right of the element with the ID 'cancel' using Selenium's RelativeLocator in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_62\n\nLANGUAGE: Java\nCODE:\n```\nBy submitLocator = RelativeLocator.with(By.tagName(\"button\")).below(By.id(\"email\")).toRightOf(By.id(\"cancel\"));\n```\n\n----------------------------------------\n\nTITLE: Key Up Action in Selenium (Java)\nDESCRIPTION: This Java code snippet demonstrates how to perform a key up action using the Actions API in Selenium. It involves creating an Actions object, performing a keyDown action on the Keys.SHIFT key, sending the \"a\" key (resulting in an uppercase 'A'), and then performing a keyUp action on the Keys.SHIFT key, followed by sending the \"a\" key again (resulting in a lowercase 'a'). The actions are executed using perform().\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nActions actions = new Actions(driver);\nactions.keyDown(Keys.SHIFT)\n  .sendKeys(\"a\")\n  .keyUp(Keys.SHIFT)\n  .sendKeys(\"a\")\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: File Upload with sendKeys in Ruby\nDESCRIPTION: Uses the send_keys method to upload a file by specifying its path to the file input element. Requires Selenium WebDriver and a file input element with type=\"file\".\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.en.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.find_element(id: 'file-upload').send_keys('/path/to/your/file.txt')\ndriver.find_element(id: 'upload-button').click\n```\n\n----------------------------------------\n\nTITLE: Quitting WebDriver Session - Ruby\nDESCRIPTION: This snippet demonstrates how to properly quit a WebDriver session in Ruby using the `driver.quit` method.  This ensures that all browser windows and associated processes are closed. It is recommended to use this at the end of a test or session to avoid resource leaks.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.quit\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Confirm in CSharp\nDESCRIPTION: This C# code snippet demonstrates how to interact with a JavaScript confirm dialog using Selenium WebDriver. It clicks a link, waits for the alert, switches the driver to the alert, gets the alert text and then dismisses the alert, effectively clicking the 'Cancel' button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n//Click the link to activate the alert\ndriver.FindElement(By.LinkText(\"See a sample confirm\")).Click();\n\n//Wait for the alert to be displayed\nwait.Until(ExpectedConditions.AlertIsPresent());\n\n//Store the alert in a variable\nIAlert alert = driver.SwitchTo().Alert();\n\n//Store the alert in a variable for reuse\nstring text = alert.Text;\n\n//Press the Cancel button\nalert.Dismiss();\n```\n\n----------------------------------------\n\nTITLE: Execute Script in Selenium\nDESCRIPTION: This code executes JavaScript code within the context of the browser using Selenium WebDriver. It demonstrates how to execute JavaScript to capture the innerText of an element and execute an alert.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_90\n\nLANGUAGE: Ruby\nCODE:\n```\n    # Stores the header element\nheader = driver.find_element(css: 'h1')\n\n    # Get return value from script\nresult = driver.execute_script(\"return arguments[0].innerText\", header)\n\n    # Executing JavaScript directly\ndriver.execute_script(\"alert('hello world')\")\n```\n\n----------------------------------------\n\nTITLE: Adding Virtual Authenticator in Java\nDESCRIPTION: This snippet demonstrates how to add a virtual authenticator to the WebDriver in Java using the VirtualAuthenticatorOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nDevTools devTools = ((HasDevTools) driver).getDevTools();\ndevTools.createSessionIfPossible();\nVirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions();\noptions.setProtocol(Protocol.CTAP2);\ndevTools.getDomains().webAuthn().addVirtualAuthenticator(options);\n\n```\n\n----------------------------------------\n\nTITLE: Adding Selenium to requirements.txt\nDESCRIPTION: Adds Selenium to the `requirements.txt` file for a Python project. This ensures that Selenium is installed when dependencies are managed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.zh-cn.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nselenium\n```\n\n----------------------------------------\n\nTITLE: Drain Node Directly (No Secret)\nDESCRIPTION: This snippet directly drains a node, waiting for ongoing sessions to complete before stopping the node.  Used when no registration secret is configured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.zh-cn.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request POST 'http://<node-URL>/se/grid/node/drain' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Initializing Chrome Driver with Default Options\nDESCRIPTION: This code snippet demonstrates how to initialize a Chrome browser session using Selenium with default options in different programming languages. It showcases the basic setup required to start a Chrome browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nChromeOptions options = new ChromeOptions();\nWebDriver driver = new ChromeDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Iterate and Extract Text from Elements\nDESCRIPTION: This snippet demonstrates how to iterate through a list of WebElements obtained using `FindElements` and extract the text content of each element. It navigates to a webpage, retrieves all `<p>` elements, and then prints the text of each element to the console. Dependencies: OpenQA.Selenium, OpenQA.Selenium.Firefox.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing System.Collections.Generic;\n\nnamespace FindElementsExample {\n class FindElementsExample {\n  public static void Main(string[] args) {\n   IWebDriver driver = new FirefoxDriver();\n   try {\n    // Navigate to Url\n    driver.Navigate().GoToUrl(\"https://example.com\");\n\n    // Get all the elements available with tag name 'p'\n    IList < IWebElement > elements = driver.FindElements(By.TagName(\"p\"));\n    foreach(IWebElement e in elements) {\n     System.Console.WriteLine(e.Text);\n    }\n\n   } finally {\n    driver.Quit();\n   }\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Maximize Window in Selenium\nDESCRIPTION: This code maximizes the browser window using Selenium WebDriver. It makes the window fill the screen, excluding OS menus and toolbars. The method is available across different programming languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_61\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Manage().Window.Maximize();\n```\n\n----------------------------------------\n\nTITLE: Find Element within a Subset of DOM - CSharp\nDESCRIPTION: This snippet first locates the element with the ID \"fruits\" and then finds the first element within it that has the class name \"tomatoes\". It demonstrates how to narrow the search scope using Selenium WebDriver with C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement fruits = driver.FindElement(By.Id(\"fruits\"));\nIWebElement fruit = fruits.FindElement(By.ClassName(\"tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Page Scale using PrintOptions in Python\nDESCRIPTION: This code snippet shows how to set the page scale using the PrintOptions class in Python. The `scale` attribute is set to the desired scale. The `scale` attribute is retrieved and confirmed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.scale = 0.5\nassert print_options.scale == 0.5\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Link Text with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a link element on a page using its exact link text with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.LinkText()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_17\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.LinkText(\"Selenium Official Page\"));\n```\n\n----------------------------------------\n\nTITLE: Find All Matching Elements by Tag Name - C#\nDESCRIPTION: This snippet demonstrates how to find all elements with a specific tag name using the Selenium WebDriver in C#. It uses the `FindElements` method with `By.TagName` to locate all matching elements and returns them as an `IReadOnlyList` of `IWebElement` objects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_21\n\nLANGUAGE: CSharp\nCODE:\n```\nIReadOnlyList<IWebElement> plants = driver.FindElements(By.TagName(\"li\"));\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Confirm in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to interact with a JavaScript confirm dialog using Selenium WebDriver. It clicks a link that triggers the alert, waits for the alert to be present, switches the driver context to the alert, gets the text of the alert, and then dismisses the alert, which is the equivalent of pressing the 'Cancel' button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n//Click the link to activate the alert\ndriver.findElement(By.linkText(\"See a sample confirm\")).click()\n\n//Wait for the alert to be displayed\nwait.until(ExpectedConditions.alertIsPresent())\n\n//Store the alert in a variable\nval alert = driver.switchTo().alert()\n\n//Store the alert in a variable for reuse\nval text = alert.text\n\n//Press the Cancel button\nalert.dismiss()\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait for Selenium Elements\nDESCRIPTION: This code sets an implicit wait time for the WebDriver. Implicit waits tell the driver to wait for a certain amount of time when trying to find an element if it is not immediately available.  This helps to synchronize tests with the asynchronous loading of web pages. Not recommended for complex cases.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.zh-cn.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));\n```\n\nLANGUAGE: Python\nCODE:\n```\ndriver.implicitly_wait(5)\n```\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);\n```\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.timeouts.implicit_wait = 5\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndriver.manage().setTimeouts({ implicit: 5000 });\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5))\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Displayed in C#\nDESCRIPTION: This code snippet demonstrates how to check if a web element is displayed on a webpage using Selenium WebDriver in C#. It uses the `Displayed` property of the IWebElement interface. The property returns `true` if the element is displayed, and `false` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"email_input\"));\nAssert.That(element.Displayed, Is.True);\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Authentication using CDP in Python\nDESCRIPTION: This Python code snippet demonstrates how to set basic authentication credentials using the Chrome DevTools Protocol (CDP) within Selenium. It uses the `Network.enable` and `Network.setExtraHTTPHeaders` methods to insert the credentials into the header of network requests. This is useful for accessing pages that require authentication.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nheaders = {\"Authorization\": f\"Basic {base64.b64encode(b'user:password').decode()}\"}\ncdp.execute_cdp(\"Network.enable\", {})\ncdp.execute_cdp(\"Network.setExtraHTTPHeaders\", {\"headers\": headers})\n```\n\n----------------------------------------\n\nTITLE: Quitting WebDriver Session - JavaScript\nDESCRIPTION: This snippet demonstrates how to properly quit a WebDriver session in JavaScript using the `await driver.quit()` method.  This ensures that all browser windows and associated processes are closed. It is recommended to use this at the end of a test or session to avoid resource leaks. Asynchronous execution is required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.quit();\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element by Amount - Java\nDESCRIPTION: This Java code snippet demonstrates how to scroll from an element by a given amount using Selenium's Actions API and Wheel class. It takes an element, delta x, and delta y values as input. If the element is out of the viewport, it will first be scrolled into view. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"food\"));\nnew Actions(driver).scrollFromOrigin(WheelInput.ScrollOrigin.fromElement(element, 0, 0), 50, 100)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Double Click with Selenium\nDESCRIPTION: Moves to the center of an element and performs a double click. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('clickable'));\nawait actions.doubleClick(element).perform();\n```\n\n----------------------------------------\n\nTITLE: Merging Capabilities in Selenium Java\nDESCRIPTION: This example demonstrates the modification needed when merging capabilities in Selenium 4.  In previous versions, the merge operation modified the calling object directly. Now, the result of the merge operation must be explicitly assigned to an object. This ensures immutability and avoids unexpected side effects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\nMutableCapabilities capabilities = new MutableCapabilities();\ncapabilities.setCapability(\"platformVersion\", \"Windows 10\");\nFirefoxOptions options = new FirefoxOptions();\noptions.setHeadless(true);\noptions.merge(capabilities);\n\n//作为结果, `options` 对象被修改\n```\n\nLANGUAGE: Java\nCODE:\n```\nMutableCapabilities capabilities = new MutableCapabilities();\ncapabilities.setCapability(\"platformVersion\", \"Windows 10\");\nFirefoxOptions options = new FirefoxOptions();\noptions.setHeadless(true);\noptions = options.merge(capabilities);\n\n// `merge` 调用的结果需要分配给一个对象.\n```\n\n----------------------------------------\n\nTITLE: Removing All Credentials in C#\nDESCRIPTION: This code snippet shows how to remove all credentials from the virtual authenticator using C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nbyte[] bytes = new byte[16];\nRandom rand = new Random();\nrand.NextBytes(bytes);\nCredential cred = new Credential()\n{\n    Id = bytes,\n    Algorithm = Algorithm.Es256,\n    UserHandle = bytes,\n    ResidentKey = true\n};\n((IHasAuthentication)driver).AddVirtualAuthenticatorCredential(authenticator, cred);\n((IHasAuthentication)driver).RemoveVirtualAuthenticatorCredentials(authenticator);\n```\n\n----------------------------------------\n\nTITLE: Listening to Console Logs in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to listen to `console.log` events using the BiDirectional API in Selenium. It sets up a listener to capture console log messages and then triggers a console log on the webpage.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.pt-br.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('Listen to console logs', async () => {\n  let logs = [];\n  await bidiSession.on('log.entryAdded', (event) => {\n    logs.push(event.params.entry.text);\n  });\n\n  await driver.get(url);\n  await driver.findElement(By.id('consoleLog')).click();\n  await expect(logs).toEqual(['Hello, world!']);\n});\n```\n\n----------------------------------------\n\nTITLE: Execute JavaScript in Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to execute JavaScript code within the current browsing context using Selenium WebDriver. It utilizes the `JavascriptExecutor` interface to execute JavaScript code. The example shows how to click on an element, retrieve text from an element, and execute JavaScript directly. Dependencies: org.openqa.selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_63\n\nLANGUAGE: Java\nCODE:\n```\n//Creating the JavascriptExecutor interface object by Type casting\nJavascriptExecutor js = (JavascriptExecutor)driver;\n//Button Element\nWebElement button =driver.findElement(By.name(\"btnLogin\"));\n//Executing JavaScript to click on element\njs.executeScript(\"arguments[0].click();\", button);\n//Get return value from script\nString text = (String) js.executeScript(\"return arguments[0].innerText\", button);\n//Executing JavaScript directly\njs.executeScript(\"console.log('hello world')\");\n```\n\n----------------------------------------\n\nTITLE: Get Current URL with Selenium\nDESCRIPTION: Retrieves the current URL from the browser's address bar using Selenium WebDriver. Examples are provided in Java, Python, C#, Ruby, and JavaScript, demonstrating how to access the `driver.getCurrentUrl()` method or equivalent property to get the URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.ja.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\ndriver.getCurrentUrl();\n```\n\n----------------------------------------\n\nTITLE: Click Element with Selenium WebDriver in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to navigate to a URL, locate an element, and click it using Selenium WebDriver. It assumes `driver` is a WebDriver instance initialized with a browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.selenium.dev/selenium/web/inputs.html')\nconst colorInput = await driver.findElement(By.name('color_input'))\nawait colorInput.click()\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Attribute Value Python\nDESCRIPTION: This Python snippet shows how to retrieve the 'value' attribute of a web element using Selenium. It finds an element by its name attribute and then calls `get_attribute` to get the attribute's value. Assumes the driver is initialized.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\nemail = driver.find_element(By.NAME, \"email_input\")\nattribute = email.get_attribute(\"value\")\n```\n\n----------------------------------------\n\nTITLE: Setting Page Orientation using PrintOptions in C#\nDESCRIPTION: This code snippet demonstrates how to set the page orientation to landscape using the PrintOptions class in C#. The `Orientation` property is set to `PrintOrientation.Landscape`. The `Orientation` property is retrieved and confirmed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.Orientation = PrintOrientation.Landscape;\n\nAssert.AreEqual(PrintOrientation.Landscape, printOptions.Orientation);\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Element with Selenium WebDriver in Python\nDESCRIPTION: This Python code snippet demonstrates how to locate an element and send keys to it using Selenium WebDriver. The `clear()` method is called before sending keys to ensure the input field is empty. This snippet requires a WebDriver instance already initialized and a web page loaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\nelement = driver.find_element(By.NAME, \"email_input\")\nelement.clear()\nelement.send_keys(\"admin@localhost.dev\")\n\n```\n\n----------------------------------------\n\nTITLE: Setting User Verification in Java\nDESCRIPTION: This Java code snippet sets the user verification status on the virtual authenticator, simulating a successful or failed user verification. It either confirms or denies user verification for authentication testing.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_35\n\nLANGUAGE: java\nCODE:\n```\ndevTools.getDomains().security().setUserVerified(true);\n```\n\n----------------------------------------\n\nTITLE: Adding a Cookie with Selenium WebDriver (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to add a cookie to the current browser context using Selenium WebDriver in Kotlin. It requires the Selenium WebDriver dependency. The code navigates to a specific URL and then adds a cookie with the name 'key' and the value 'value'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://example.com\")\n\n        // Adds the cookie into current browser context\n        driver.manage().addCookie(Cookie(\"key\", \"value\"))\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Title in CSharp\nDESCRIPTION: Retrieves the title of the current web page in C# using Selenium. Requires an initialized WebDriver that has navigated to the desired page. Returns the page title as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/web-form.html\");\nString title = driver.Title;\nAssert.That(title, Is.EqualTo(\"Web form\"));\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element with Offset - Java\nDESCRIPTION: This Java code snippet demonstrates how to scroll from an element with an offset using Selenium's Actions API and Wheel class. It takes an element, x offset, y offset, delta x, and delta y values as input. It scrolls from the origin point calculated from the center of the specified element, offset by given x and y values. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"meal\"));\nnew Actions(driver).scrollFromOrigin(WheelInput.ScrollOrigin.fromElement(element, 25, 25), 50, 100)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Setting Local File Detector in Java\nDESCRIPTION: Sets a local file detector for a RemoteWebDriver instance in Java to enable file uploads. This is necessary because the remote driver searches for files on its own file system. Requires using the LocalFileDetector class. The LocalFileDetector packages and transfers the files to the remote machine.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nRemoteWebDriver driver = new RemoteWebDriver(new URL(\"http://localhost:4444\"), new ChromeOptions());\n        driver.setFileDetector(new LocalFileDetector());\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Class Name with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a web element on a page using its class name attribute with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.className()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.className(\"information\"));\n```\n\n----------------------------------------\n\nTITLE: Set Page Margins Python\nDESCRIPTION: This code snippet demonstrates how to set the page margins for printing in Python with Selenium, using PrintOptions and PageMargin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nmargins = PageMargin(top=10, bottom=5, left=5, right=10)\nprint_options = PrintOptions()\nprint_options.page_margins = margins\npdf = driver.print_page(print_options)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Cookie with Selenium WebDriver (Java)\nDESCRIPTION: This code snippet demonstrates how to delete a cookie by name using Selenium WebDriver in Java. It requires the Selenium WebDriver dependency and assumes a WebDriver instance is already initialized. The code navigates to a specific URL, adds two cookies, and then deletes the cookie named 'test1'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.example.com\");\nCookie cookie1 = new Cookie(\"test1\", \"cookie1\");\ndriver.manage().addCookie(cookie1);\nCookie cookie2 = new Cookie(\"test2\", \"cookie2\");\ndriver.manage().addCookie(cookie2);\ndriver.manage().deleteCookieNamed(\"test1\");\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element by Offset - Selenium\nDESCRIPTION: Drags an element by a specified offset. The action presses the left mouse button on the source element, moves the element by the specified x and y offsets, and then releases the mouse button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nval source = driver.findElement(By.id(\"draggable\"))\nactions.clickAndHold(source)\n    .moveByOffset(150, 50)\n    .release()\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Press Key Action in Selenium\nDESCRIPTION: Demonstrates how to simulate pressing a specific key using Selenium's Actions API. This involves creating an Actions object, using the keyDown method to press a key, and then performing the action. The key to press is specified using the Keys enum/class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nactions = ActionChains(driver)\nactions.key_down(Keys.SHIFT)\n    .send_keys(\"text\")\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Set Permissions - Kotlin\nDESCRIPTION: This snippet is a placeholder as there is no code provided. The goal is to show how to set permissions with Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_70\n\nLANGUAGE: Kotlin\nCODE:\n```\n// No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value - Kotlin\nDESCRIPTION: This snippet demonstrates how to retrieve the computed style property 'color' of a linktext using Selenium WebDriver in Kotlin. It navigates to a specific URL and retrieves the 'background-color' CSS value of the element with id \"namedColor\".\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\n// Navigate to Url\ndriver.get(\"https://www.selenium.dev/selenium/web/colorPage.html\")\n\n// Retrieves the computed style property 'color' of linktext\nval cssValue = driver.findElement(By.id(\"namedColor\")).getCssValue(\"background-color\")\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium (Java)\nDESCRIPTION: This Java code demonstrates a copy and paste operation using Selenium's Actions API. It types 'Selenium', selects all text (using CTRL+A or CMD+A), copies the text (CTRL+C or CMD+C), moves to the end of the line, pastes the copied text (CTRL+V or CMD+V), and then adds an exclamation mark.  The final result in the element should be 'SeleniumSelenium!'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nString selectAll = Platform.getCurrent().is(Platform.MAC) ? Keys.COMMAND + \"a\" : Keys.CONTROL + \"a\";\nString copy = Platform.getCurrent().is(Platform.MAC) ? Keys.COMMAND + \"c\" : Keys.CONTROL + \"c\";\nString paste = Platform.getCurrent().is(Platform.MAC) ? Keys.COMMAND + \"v\" : Keys.CONTROL + \"v\";\n\nActions actions = new Actions(driver);\nactions.sendKeys(\"Selenium\")\n  .sendKeys(selectAll)\n  .sendKeys(copy)\n  .sendKeys(Keys.END)\n  .sendKeys(paste)\n  .sendKeys(\"!\")\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Link Text with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a link element on a page using its exact link text with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.linkText()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.linkText('Selenium Official Page'));\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to None in Ruby\nDESCRIPTION: This snippet shows how to set the page load strategy to 'none' in Ruby using Selenium. WebDriver waits until the initial page is downloaded.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nit 'none' do\n  expect { options.page_load_strategy = 'none' }.to_not raise_error\nend\n```\n\n----------------------------------------\n\nTITLE: Minimize Window in Selenium\nDESCRIPTION: This code minimizes the browser window using Selenium WebDriver. The exact behavior depends on the window manager and it typically hides the window in the system tray. Requires Selenium 4 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_69\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.manage().window().minimize();\n```\n\n----------------------------------------\n\nTITLE: Relative Locator - Below in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate an element below another element using Relative Locators in Selenium.  It locates an input element below the element with the id 'email'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_46\n\nLANGUAGE: Kotlin\nCODE:\n```\nval passwordLocator = RelativeLocator.with(By.tagName(\"input\")).below(By.id(\"email\"))\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies with Selenium WebDriver (Ruby)\nDESCRIPTION: This code snippet demonstrates how to retrieve all cookies in the current browser context using Selenium WebDriver in Ruby. It requires the 'selenium-webdriver' gem. The code navigates to a specific URL, adds two cookies, and then retrieves all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  driver.manage.add_cookie(name: \"test1\", value: \"cookie1\")\n  driver.manage.add_cookie(name: \"test2\", value: \"cookie2\")\n\n  # Get all available cookies\n  puts driver.manage.all_cookies\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookie Attribute C#\nDESCRIPTION: This C# code demonstrates setting SameSite cookie attribute with Selenium. The program navigates to a website, creates two cookies with 'Strict' and 'Lax' SameSite values, adds them, and prints the SameSite value of each cookie. Requires Selenium and Chrome driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace SameSiteCookie {\n  class SameSiteCookie {\n    static void Main(string[] args) {\n      IWebDriver driver = new ChromeDriver();\n      try {\n        driver.Navigate().GoToUrl(\"http://www.example.com\");\n\n        var cookie1Dictionary = new System.Collections.Generic.Dictionary<string, object>() {\n          { \"name\", \"test1\" }, { \"value\", \"cookie1\" }, { \"sameSite\", \"Strict\" } };\n        var cookie1 = Cookie.FromDictionary(cookie1Dictionary);\n\n        var cookie2Dictionary = new System.Collections.Generic.Dictionary<string, object>() {\n          { \"name\", \"test2\" }, { \"value\", \"cookie2\" }, { \"sameSite\", \"Lax\" } };\n        var cookie2 = Cookie.FromDictionary(cookie2Dictionary);\n\n        driver.Manage().Cookies.AddCookie(cookie1);\n        driver.Manage().Cookies.AddCookie(cookie2);\n\n        System.Console.WriteLine(cookie1.SameSite);\n        System.Console.WriteLine(cookie2.SameSite);\n      } finally {\n        driver.Quit();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium (Python)\nDESCRIPTION: This Python snippet uses Selenium's ActionChains API to send the keys \"Selenium!\" to the currently active element. It creates an ActionChains object, uses the send_keys method to input the string, and then calls perform() to execute the action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nactions = ActionChains(driver)\nactions.send_keys(\"Selenium!\").perform()\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait with Lambda - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to implement an explicit wait using a lambda expression. It waits for a maximum of 10 seconds for the condition specified within the lambda to become true. The lambda checks if the element's text content is 'Selenium'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.en.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = Selenium::WebDriver::Wait.new(timeout: 10).until do |driver|\n  driver.find_element(tag_name: 'p').text.start_with? 'Selenium'\nend\n```\n\n----------------------------------------\n\nTITLE: Setting User Verified in Java\nDESCRIPTION: Sets whether the authenticator will simulate success or failure for user verification in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_35\n\nLANGUAGE: java\nCODE:\n```\nauthenticator.setUserVerified(true);\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Firefox Options\nDESCRIPTION: This code snippet demonstrates how to add arguments to Firefox options, commonly used for setting headless mode or specifying a profile. The `add_argument` method is used to pass command-line switches to the Firefox browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.add_argument('--headless')\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Exception Handler with WebDriver BiDi in Python\nDESCRIPTION: This code snippet demonstrates how to add a handler for JavaScript exceptions using WebDriver BiDi in Python. It uses the `add_event_listener` method to listen for 'script.exception' events and prints the exception details.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.ja.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nbidi.script.add_event_listener(\n    event='script.exception',\n    callback=lambda exception: print(f\"Javascript exception: {exception}\"))\n```\n\n----------------------------------------\n\nTITLE: Find Element by Name - Java\nDESCRIPTION: This snippet shows how to locate a web element using its name attribute in Java.  It initializes a ChromeDriver and uses the `findElement` method with `By.name` to find the element with the name 'newsletter'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.name(\"newsletter\"));\n```\n\n----------------------------------------\n\nTITLE: Initializing Safari Driver with Options - Kotlin\nDESCRIPTION: This code initializes a SafariDriver in Kotlin, making use of the SafariOptions class. This enables the configuration of Safari-specific settings before starting the browser session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.pt-br.md#_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nval options = SafariOptions()\nval driver = SafariDriver(options)\n```\n\n----------------------------------------\n\nTITLE: Initializing Chrome Driver with Default Options\nDESCRIPTION: This code snippet demonstrates how to initialize a Chrome browser session using Selenium with default options in different programming languages. It showcases the basic setup required to start a Chrome browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\noptions = ChromeOptions()\ndriver = webdriver.Chrome(options=options)\n```\n\n----------------------------------------\n\nTITLE: Adding a Cookie to Browser Context - Python\nDESCRIPTION: This code snippet demonstrates how to add a cookie to the current browser context using Selenium WebDriver in Python. It navigates to a specific URL and then adds a cookie using the `add_cookie` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://www.example.com\")\ncookie = { 'name' : 'key', 'value' : 'value' }\ndriver.add_cookie(cookie)\n\nprint(driver.get_cookies())\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop on Element with Selenium\nDESCRIPTION: This code performs a drag-and-drop operation from one element to another using Selenium WebDriver. It first clicks and holds the source element, then moves to the target element's location, and finally releases the mouse. It leverages the `drag_and_drop` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nsource = @driver.find_element(id: 'draggable')\ntarget = @driver.find_element(id: 'droppable')\n@driver.action.drag_and_drop(source, target).perform\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Chrome Options\nDESCRIPTION: This code demonstrates how to add command-line arguments to Chrome options for customizing the browser's behavior.  Common arguments include `--start-maximized`, `--headless=new`, and `--user-data-dir=...`. These arguments are passed to the Chrome browser instance when it is launched.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\noptions.AddArguments(\"--start-maximized\");\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Content - Java\nDESCRIPTION: Demonstrates how to retrieve the text content of a web element using Java and Selenium WebDriver.  The `getText()` method returns the rendered text of the element. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_36\n\nLANGUAGE: Java\nCODE:\n```\nWebElement link = driver.findElement(By.id(\"justanotherlink\"));\nString text = link.getText();\nassertThat(text).isEqualTo(\"Another link\");\n```\n\n----------------------------------------\n\nTITLE: Quitting Browser Session: Selenium WebDriver (C#)\nDESCRIPTION: This snippet shows how to properly quit a Selenium WebDriver browser session in C#. It calls the `driver.Quit()` method, which closes all associated windows, tabs, the browser process, and the background driver process, releasing resources for subsequent sessions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Quit();\n```\n\n----------------------------------------\n\nTITLE: Click and Hold with Selenium\nDESCRIPTION: Moves the mouse to the center of an element and presses the left mouse button, useful for focusing an element. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"clickable\"));\nActions actions = new Actions(driver);\nactions.MoveToElement(element).ClickAndHold().Perform();\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method (JUnit): Selenium WebDriver (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates how to use the `@AfterAll` annotation from JUnit to define a tear down function that quits the WebDriver instance after all tests have been executed. This ensures proper resource cleanup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\n/**\n * Example using JUnit\n * https://junit.org/junit5/docs/current/api/org/junit/jupiter/api/AfterAll.html\n */\n@AfterAll\nfun tearDown() {\n    driver.quit()\n}\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Content - C#\nDESCRIPTION: This snippet demonstrates how to get the text content of a web element using Selenium WebDriver in C#. It finds an element by ID and uses the Text property to retrieve its text content as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement link = driver.FindElement(By.Id(\"justanotherlink\"));\nAssert.That(link.Text, Is.EqualTo(\"Just another link\"));\nConsole.WriteLine(\"Link text is: \" + link.Text);\n```\n\n----------------------------------------\n\nTITLE: Navigate to URL with Selenium (JavaScript)\nDESCRIPTION: This snippet shows how to navigate to a specific URL using Selenium WebDriver in JavaScript. It employs the `get()` method of the WebDriver to load the specified URL. It requires an initialized WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://selenium.dev');\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium (Python)\nDESCRIPTION: Demonstrates sending keys to a specific element using the Actions API in Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nelement = driver.find_element(By.TAG_NAME, \"input\")\nactions = ActionChains(driver)\nactions.send_keys_to_element(element, \"text\")\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Deleting a Named Cookie - Ruby\nDESCRIPTION: This Ruby snippet shows how to delete a cookie by name using Selenium WebDriver. It adds two cookies and then uses `driver.manage.delete_cookie` to delete a cookie with a specified name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  driver.manage.add_cookie(name: \"test1\", value: \"cookie1\")\n  driver.manage.add_cookie(name: \"test2\", value: \"cookie2\")\n\n  # delete a cookie with name 'test1'\n  driver.manage.delete_cookie('test1')\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting Named Cookie in Java\nDESCRIPTION: This code snippet demonstrates how to delete a cookie by its name using Selenium WebDriver in Java. It navigates to a website, adds two cookies, and then deletes a cookie with the name 'test1'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\ndriver.get(\"https://www.example.com\");\nCookie cookie1 = new Cookie(\"test1\", \"cookie1\");\ndriver.manage().addCookie(cookie1);\ndriver.manage().deleteCookieNamed(\"test1\");\n```\n\n----------------------------------------\n\nTITLE: Capturing Response Information using CDP in Java\nDESCRIPTION: This Java code snippet showcases how to capture response information using the Chrome DevTools Protocol (CDP) in Selenium. It enables network interception and sets up a listener for `Network.responseReceived` events to gather details about the responses. The code then navigates to a specific URL and retrieves the response information.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ncdp.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));\ncdp.addListener(Network.responseReceived(), response -> {\n    Response res = response.getResponse();\n    if (res.getUrl().contains(\"example\")) {\n        System.out.println(res.getStatus());\n    }\n});\ndriver.get(\"https://www.example.com\");\n```\n\n----------------------------------------\n\nTITLE: Auth Required Event - Java\nDESCRIPTION: This Java code snippet demonstrates how to listen for the 'authRequired' network event using Selenium BiDi. It prints the response URL when authentication is required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\nNetwork network = new Network(driver.getDevTools());\nnetwork.onAuthRequired(event -> {\n  System.out.println(event.getResponse().getUrl());\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Named Cookie in JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve a cookie by its name using Selenium WebDriver in JavaScript. It navigates to a website, adds a cookie named 'foo', and then retrieves the cookie by its name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.get('https://www.example.com/');\nawait driver.manage().addCookie({name: 'foo', value: 'bar'});\nconst cookie = await driver.manage().getCookie('foo');\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Class Name with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a web element on a page using its class name attribute with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.className()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.className(\"information\"))\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Web Page\nDESCRIPTION: This snippet shows how to navigate the browser to a specific URL using Selenium.  It uses the `get` or `navigate().to()` method of the WebDriver to load a web page. The target URL is a required parameter.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.get(\"https://www.google.com\")\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium (JavaScript)\nDESCRIPTION: Demonstrates sending keys to the currently active element using the Actions API in JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = driver.actions({async: true});\nawait actions.sendKeys('text')\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Deselecting Options in CSharp\nDESCRIPTION: Demonstrates how to deselect all selected options in a multi-select element using C#. It calls the DeselectAll() method on the SelectElement object. This only works for multi-select lists.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\nselect.DeselectAll();\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's SelectElement class, specifically by its index (position) within the list of options. The `SelectByIndex()` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_32\n\nLANGUAGE: CSharp\nCODE:\n```\nselect.SelectByIndex(2);\n```\n\n----------------------------------------\n\nTITLE: File Upload using SendKeys Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to upload a file by finding the file input element and using the send_keys method to specify the file path. This method bypasses the native file upload dialog.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.pt-br.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.get 'https://the-internet.herokuapp.com/upload'\nfile_field = driver.find_element(id: 'file-upload')\nfile_field.send_keys('selenium-snapshot.jpg')\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value - C#\nDESCRIPTION: This snippet demonstrates how to get a CSS property value of a web element using Selenium WebDriver in C#. It finds an element by ID and uses the GetCssValue() method to retrieve the value of the 'background-color' property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement link = driver.FindElement(By.Id(\"namedColor\"));\nString attributeValue = link.GetCssValue(\"background-color\");\n```\n\n----------------------------------------\n\nTITLE: Relative Locator - Left of in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate an element to the left of another element using Relative Locators in Selenium.  It locates a button element to the left of the element with the id 'submit'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_48\n\nLANGUAGE: Python\nCODE:\n```\ncancel_locator = locate_with(By.TAG_NAME, \"button\").to_left_of({By.ID: \"submit\"})\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its index (position) using Selenium WebDriver. The `selectByIndex()` method is used to select the option based on its index, starting from 0.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\nselect.selectByIndex(0);\n```\n\n----------------------------------------\n\nTITLE: Removing All Credentials in C#\nDESCRIPTION: This C# code removes all credentials from the virtual authenticator. It retrieves the list of credentials and then iterates through the list, calling RemoveCredential for each credential.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nIReadOnlyCollection<CredentialMetadata> credentials = await session.Security.GetCredentials();\n\nforeach (CredentialMetadata credential in credentials)\n{\n    await session.Security.RemoveCredential(credential.CredentialId);\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium Java\nDESCRIPTION: This snippet demonstrates how to select an option in a Select element by its visible text in Java. It uses the `selectByVisibleText()` method of the Select object. It throws NoSuchElementException if no matching option is found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nselect.selectByVisibleText(\"Four\");\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's Select class, specifically by matching the visible text of the option. The `selectByVisibleText()` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nselect.selectByVisibleText(\"Four\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium\nDESCRIPTION: This code snippet demonstrates how to initialize a Select object in Selenium WebDriver. It first locates a <select> element using a locator strategy (e.g., by ID) and then creates a Select object using the found element.  Note that as of Selenium 4.5, you can't create a `Select` object if the `<select>` element is disabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst selectElement = await driver.findElement(By.id('selectomatic'));\nconst select = await new Select(selectElement);\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - Kotlin\nDESCRIPTION: Demonstrates how to set the browser window's size to a specific width and height in Kotlin using Selenium WebDriver. The code creates a `Dimension` object and assigns it to the `window.size` property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_41\n\nLANGUAGE: kotlin\nCODE:\n```\ndriver.manage().window().size = Dimension(1024, 768)\n```\n\n----------------------------------------\n\nTITLE: Key Down Action in Selenium (C#)\nDESCRIPTION: This C# code snippet demonstrates performing a key down action using Selenium's Actions API. An Actions object is created, a keyDown action is performed on the Control key, then the 'c' key is sent. Finally, perform() is called to execute these actions, effectively holding down the Control key while sending 'c'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nActions actions = new Actions(driver);\nactions.KeyDown(Keys.Control)\n    .SendKeys(\"c\")\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Getting All Options from Select Element\nDESCRIPTION: This code retrieves all options from a <select> element using Selenium's Select class. The `options` attribute returns a list of WebElements representing each option within the select list.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\noptions = select.options\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Binary Location - Python\nDESCRIPTION: Demonstrates setting the binary location for the Edge browser in Python.\nThis is useful for specifying a custom path to the Edge executable.\nDependencies: Selenium WebDriver, Edge, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\noptions.binary_location = \"/path/to/edge/msedge\"\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Prompt in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to interact with a JavaScript prompt dialog using Selenium WebDriver. It clicks a link that triggers the prompt, waits for the alert to appear, and then sends \"Selenium\" to the prompt before accepting the alert (clicking OK).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\n//Click the link to activate the alert\ndriver.findElement(By.linkText(\"See a sample prompt\")).click()\n\n//Wait for the alert to be displayed and store it in a variable\nval alert = wait.until(ExpectedConditions.alertIsPresent())\n\n//Type your message\nalert.sendKeys(\"Selenium\")\n\n//Press the OK button\nalert.accept()\n```\n\n----------------------------------------\n\nTITLE: Quitting Driver Session - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to quit a Selenium driver session using the `driver.quit()` method. This closes all browser windows and terminates the WebDriver session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.en.md#_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Importing Color Class - Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to import the Color class in various programming languages to use it within Selenium WebDriver tests.  This is a necessary first step to utilize the Color class's functionalities.  The package/module location varies depending on the language.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\ninclude Selenium::WebDriver::Support\n```\n\n----------------------------------------\n\nTITLE: Move to Element Action with Selenium\nDESCRIPTION: This snippet demonstrates how to move the mouse to the center of an element using Selenium. This is often used for hovering over an element. The element must be within the viewport. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"my-element\")\nactions = ActionChains(driver)\nactions.move_to_element(element).perform()\n```\n\n----------------------------------------\n\nTITLE: Setting ShrinkToFit using PrintOptions in C#\nDESCRIPTION: This code snippet demonstrates how to set whether the page will shrink-to-fit content on the page using the PrintOptions class in C#. The `ShrinkToFit` property is set. The `ShrinkToFit` property is retrieved and confirmed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.ShrinkToFit = false;\n\nAssert.AreEqual(false, printOptions.ShrinkToFit);\n```\n\n----------------------------------------\n\nTITLE: Click and Hold Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a click and hold action on an element using Selenium. It combines moving the mouse to the center of an element with pressing the left mouse button. This is useful for focusing on a specific element without releasing the click immediately. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'my-element')\n@driver.action.click_and_hold(element).perform\n```\n\n----------------------------------------\n\nTITLE: Navigate to URL with Selenium (Java)\nDESCRIPTION: This snippet demonstrates how to navigate to a specific URL using Selenium WebDriver in Java. It initializes the WebDriver and then uses the `get()` and `navigate().to()` methods to open the specified URL. The code assumes that the WebDriver has already been initialized.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://selenium.dev\");\n\n//Longer way\ndriver.navigate().to(\"https://selenium.dev\");\n```\n\n----------------------------------------\n\nTITLE: Quitting a Selenium Driver Session in Python\nDESCRIPTION: This Python snippet shows how to properly close a Selenium WebDriver session using the `driver.quit()` method. This method ensures that the browser instance is closed and all associated resources are released, leading to a clean exit of the program.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.pt-br.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport pytest\n\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options as ChromeOptions\n\n\ndef test_basic_chrome_options():\n    chrome_options = ChromeOptions()\n    chrome_options.add_argument(\"--headless=new\")\n    driver = webdriver.Chrome(options=chrome_options)\n\n    driver.get(\"https://www.google.com\")\n    assert \"Google\" in driver.title\n\n    driver.quit()\n```\n\n----------------------------------------\n\nTITLE: Get Window Size: Selenium WebDriver (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates how to fetch the size of the browser window in pixels using Selenium WebDriver. It shows accessing each dimension individually and storing the dimensions for later use.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_41\n\nLANGUAGE: kotlin\nCODE:\n```\n//Access each dimension individually\nval width = driver.manage().window().size.width\nval height = driver.manage().window().size.height\n\n//Or store the dimensions and query them later\nval size = driver.manage().window().size\nval width1 = size.width\nval height1 = size.height\n```\n\n----------------------------------------\n\nTITLE: Switching to IFrame by WebElement - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to switch to an IFrame using a WebElement. It finds the IFrame element using CSS selector, then switches the driver's focus to that frame, and finally clicks the button inside the IFrame.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Store the web element\nconst iframe = driver.findElement(By.css('#modal > iframe'));\n\n// Switch to the frame\nawait driver.switchTo().frame(iframe);\n\n// Now we can click the button\nawait driver.findElement(By.css('button')).click();\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method with unittest - Python\nDESCRIPTION: This Python snippet shows an example of a tear down method using Python's `unittest` framework. The `tearDown` method calls `self.driver.quit()` to close the browser session after each test has run. Requires the `unittest` module.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n    # unittest teardown\n    # https://docs.python.org/3/library/unittest.html?highlight=teardown#unittest.TestCase.tearDown\ndef tearDown(self):\n    self.driver.quit()\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium (C#)\nDESCRIPTION: Demonstrates sending keys to the currently active element using the Actions API in C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nActions actions = new Actions(driver);\nactions.SendKeys(\"text\")\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name in Java\nDESCRIPTION: This code snippet demonstrates how to retrieve the tag name of a web element using Selenium WebDriver in Java. It uses the `getTagName()` method of the WebElement interface. The method returns the tag name as a String.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"email_input\"));\nString tagName = element.getTagName();\nassertThat(tagName).isEqualTo(\"input\");\n```\n\n----------------------------------------\n\nTITLE: Relaying Commands Configuration TOML\nDESCRIPTION: Configures a Selenium Grid node to relay commands to an external WebDriver service (e.g., Appium server).  It specifies the URL of the external service, a status endpoint, the protocol version, and the supported configurations (stereotypes) with their session limits.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.zh-cn.md#_snippet_4\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\ndetect-drivers = false\n\n[relay]\n# Default Appium/Cloud server endpoint\nurl = \"http://localhost:4723/wd/hub\"\nstatus-endpoint = \"/status\"\n# Optional, enforce a specific protocol version in HttpClient when communicating with the endpoint service status (e.g. HTTP/1.1, HTTP/2)\nprotocol-version = \"HTTP/1.1\"\n# Stereotypes supported by the service. The initial number is \"max-sessions\", and will allocate \n# that many test slots to that particular configuration\nconfigs = [\n  \"5\", \"{\\\"browserName\\\": \\\"chrome\\\", \\\"platformName\\\": \\\"android\\\", \\\"appium:platformVersion\\\": \\\"11\\\"}\"\n]\n```\n\n----------------------------------------\n\nTITLE: Taking Full Page Screenshots in Firefox with Selenium (Ruby)\nDESCRIPTION: This snippet shows how to take a full page screenshot using Selenium WebDriver in Ruby. The `save_screenshot` method is used.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\n@driver.save_screenshot('screen.png')\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Port in Java\nDESCRIPTION: Demonstrates how to specify the port on which the driver should run in Java, useful for avoiding port conflicts.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.en.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nChromeDriverService service = new ChromeDriverService.Builder().usingPort(1234).build();\n```\n\n----------------------------------------\n\nTITLE: Handle Alert Popup in Python\nDESCRIPTION: This code snippet shows how to interact with a JavaScript alert popup using Selenium WebDriver in Python. It locates the alert, extracts its text, and accepts it. A link click triggers the alert.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.pt-br.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndriver.find_element(By.LINK_TEXT, \"See an example alert\").click()\nWebDriverWait(driver, 10).until(EC.alert_is_present())\nalert = driver.switch_to.alert\ntext = alert.text\nalert.accept()\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Content - Python\nDESCRIPTION: This snippet demonstrates how to get the text content of a web element using Selenium WebDriver in Python. It finds an element by ID and uses the text property to retrieve its text content as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nlink = driver.find_element(By.ID, \"justanotherlink\")\nassert link.text == \"Just another link\"\n```\n\n----------------------------------------\n\nTITLE: Setting Safari Logging (Java)\nDESCRIPTION: This code snippet shows how to set Safari driver logging to true in Java using the SafariDriverService. This enables logging for debugging purposes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.zh-cn.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nSystem.setProperty(SafariDriverService.SAFARI_DRIVER_LOGGING, \"true\");\n```\n\n----------------------------------------\n\nTITLE: Adding Credential in JavaScript\nDESCRIPTION: This JavaScript code adds a credential with several predefined properties. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait devtools.addCredential({\n  id: CREDENTIAL_ID,\n  publicKey: PUBLIC_KEY,\n  algorithm: -7,\n  signCount: 0,\n  userId: USER_ID,\n  userName: USER_NAME\n})\n```\n\n----------------------------------------\n\nTITLE: Execute JavaScript in Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to execute JavaScript code within the current browsing context using Selenium WebDriver in Kotlin. It utilizes the `executeScript` method to execute JavaScript code. It retrieves the innerText of a header element and executes an alert function. Dependencies: selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_67\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Stores the header element\nval header = driver.findElement(By.cssSelector(\"h1\"))\n\n// Get return value from script\nval result = driver.executeScript(\"return arguments[0].innerText\", header)\n\n// Executing JavaScript directly\ndriver.executeScript(\"alert('hello world')\")\n```\n\n----------------------------------------\n\nTITLE: Get configuration help for Selenium Grid\nDESCRIPTION: This command provides a quick overview and help for configuring Selenium Grid. It displays information based on the current code implementation, offering accurate and up-to-date configuration guidance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.ja.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar info config\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Chrome Options\nDESCRIPTION: This code demonstrates how to add command-line arguments to Chrome options for customizing the browser's behavior.  Common arguments include `--start-maximized`, `--headless=new`, and `--user-data-dir=...`. These arguments are passed to the Chrome browser instance when it is launched.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\noptions.addArguments(\"--start-maximized\");\n```\n\n----------------------------------------\n\nTITLE: Move to Element Action with Selenium\nDESCRIPTION: This snippet demonstrates how to move the mouse to the center of an element using Selenium. This is often used for hovering over an element. The element must be within the viewport. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_36\n\nLANGUAGE: Java\nCODE:\n```\nActions actions = new Actions(driver);\nWebElement element = driver.findElement(By.id(\"my-element\"));\nactions.moveToElement(element)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Selenium CSharp\nDESCRIPTION: This C# snippet shows how to check if an element is enabled on a web page using Selenium WebDriver, and then asserts if the button is enabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/inputs.html\");\nIWebElement element = driver.FindElement(By.Name(\"button_input\"));\n\nAssert.That(element.Enabled, Is.False);\n```\n\n----------------------------------------\n\nTITLE: Excluding Switches in Chrome Options\nDESCRIPTION: This code snippet shows how to exclude specific command-line switches from being added to Chrome's launch arguments. This can be useful for preventing unwanted behavior or conflicts.  A common use case is to disable the popup blocker.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\noptions.add_experimental_option(\"excludeSwitches\", ['enable-automation'])\n```\n\n----------------------------------------\n\nTITLE: Setting Log Output to Console\nDESCRIPTION: This code snippet configures the GeckoDriverService to direct log output to the console (either STDOUT or STDERR). This allows you to view the driver logs directly in your terminal.  The `withLogOutput` method is used with `System.out` or `System.err`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nGeckoDriverService service = new GeckoDriverService.Builder().withLogOutput(System.out).build();\nWebDriver driver = new FirefoxDriver(service, new FirefoxOptions());\n```\n\n----------------------------------------\n\nTITLE: Getting Page Title\nDESCRIPTION: This snippet demonstrates how to retrieve the title of the currently loaded web page using Selenium. The `title` property returns a string containing the page title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ntitle = driver.title\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Specification Java\nDESCRIPTION: This snippet shows how to specify the Selenium dependency in the `pom.xml` file when using Maven for Java projects. It includes the groupId, artifactId, and version of the Selenium Java library, allowing Maven to manage the dependency and its transitive dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.pt-br.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.seleniumhq.selenium</groupId>\n  <artifactId>selenium-java</artifactId>\n  <version>4.18.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Clear Element Java\nDESCRIPTION: This code snippet demonstrates how to clear the content of a text field using Selenium WebDriver in Java. It finds an element by its name attribute ('email_input') and then calls the clear() method to remove any existing text. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\");\nWebElement element = driver.findElement(By.name(\"email_input\"));\nelement.clear();\n```\n\n----------------------------------------\n\nTITLE: Deselecting Options in Java\nDESCRIPTION: Demonstrates how to deselect all selected options in a multi-select element using Java. It calls the deselectAll() method on the Select object. This only works for multi-select lists.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_42\n\nLANGUAGE: java\nCODE:\n```\nselect.deselectAll();\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel - CSharp\nDESCRIPTION: This code snippet demonstrates how to scroll to a specific web element using Selenium's Actions API and Wheel class in C#. It takes a WebElement as input and scrolls the viewport until the bottom of the element is at the bottom of the screen. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"cheese\"));\nnew Actions(driver)\n    .ScrollToElement(element)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Using try/finally for driver.Quit() - C#\nDESCRIPTION: This C# code snippet demonstrates how to use a `try/finally` block to ensure that `driver.Quit()` is always called, even if an exception occurs in the `try` block. This is a robust way to guarantee that the browser session is properly closed, preventing resource leaks in various scenarios. This is used outside of a test context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\ntry {\n    //WebDriver code here...\n} finally {\n    driver.Quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Context in Firefox with Selenium (Ruby)\nDESCRIPTION: This Ruby snippet shows how to set the context of the driver in Firefox. The `context` method is used to set the context to 'chrome'. Note that geckodriver needs to be started with the argument `--allow-system-access` to switch to `CHROME` context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.context = 'chrome'\n```\n\n----------------------------------------\n\nTITLE: Scroll By Amount using Selenium Wheel (CSharp)\nDESCRIPTION: Scrolls the viewport by a specified amount in the x and y directions. Takes delta x and delta y values as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\nnew Actions(driver)\n    .ScrollFromOrigin(WheelInput.Origin.Viewport, 20, 50)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Content - Ruby\nDESCRIPTION: Demonstrates how to retrieve the text content of a web element using Ruby and Selenium WebDriver. The `text` method returns the rendered text of the element. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_39\n\nLANGUAGE: Ruby\nCODE:\n```\nexpect(driver.find_element(id: 'justanotherlink').text).to eq 'Another link'\n```\n\n----------------------------------------\n\nTITLE: Getting Current URL with Selenium\nDESCRIPTION: This snippet retrieves the current URL of the webpage loaded in the browser using Selenium WebDriver. It demonstrates how to access the current URL in different programming languages. Dependencies: Selenium WebDriver library for the respective language.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.zh-cn.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndriver.getCurrentUrl()\n```\n\n----------------------------------------\n\nTITLE: Check Element Selected Status - Python\nDESCRIPTION: This snippet demonstrates how to check if a web element is selected on the page using Selenium WebDriver in Python. It finds an element by name and uses the is_selected() method to determine if it is selected, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ncheckbox_input = driver.find_element(By.NAME, \"checkbox_input\")\nassert checkbox_input.is_selected() is True\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox Driver with Options\nDESCRIPTION: This snippet demonstrates how to initialize a Firefox WebDriver instance with basic options. It showcases the common approach across multiple languages. The core functionality involves creating FirefoxOptions and using them to instantiate a RemoteWebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nvar options = new FirefoxOptions();\nvar driver = new RemoteWebDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Using try/finally for driver.quit() - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use a `try/finally` block to ensure that `await driver.quit()` is always called, even if an exception occurs in the `try` block. This is a robust way to guarantee that the browser session is properly closed, preventing resource leaks in various scenarios. This is used outside of a test context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n    //WebDriver code here...\n} finally {\n    await driver.quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Finding an Element by Name\nDESCRIPTION: This snippet shows how to locate a specific element on a web page using its name attribute. The `findElement` method with `By.name` locator is used for this purpose. The `name` parameter specifies the value of the name attribute to search for.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet searchBox = await driver.findElement(By.name('q'));\n```\n\n----------------------------------------\n\nTITLE: Get Attribute Value Java\nDESCRIPTION: This Java code snippet demonstrates how to fetch the 'value' attribute of an email input element using Selenium WebDriver. It first navigates to a specific URL and then locates the element by its name. The `getAttribute` method is used to retrieve the attribute's value, which is then printed to the console. Requires Selenium WebDriver and JUnit for testing.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_42\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"email_input\"));\nString value = element.getAttribute(\"value\");\nassertThat(value).isEqualTo(\"diana.prince@selenium.dev\");\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait - C#\nDESCRIPTION: This code snippet shows how to implement an explicit wait in C#. Explicit waits allow you to wait for a specific condition to be true before proceeding with the next command.  This snippet waits up to 10 seconds for the element with ID 'message' to be displayed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.zh-cn.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nnew WebDriverWait(driver, TimeSpan.FromSeconds(10))\n    .Until(d => d.FindElement(By.Id(\"message\")).Displayed);\n```\n\n----------------------------------------\n\nTITLE: Find Element with Optimized Locator (CSS) - Python\nDESCRIPTION: This snippet finds an element with a specific CSS selector in a single command using Selenium WebDriver with Python, improving performance compared to nested lookups. It uses the `find_element` method with `By.CSS_SELECTOR` locator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nfruit = driver.find_element(By.CSS_SELECTOR,\"#fruits .tomatoes\")\n```\n\n----------------------------------------\n\nTITLE: Getting Active Element in C#\nDESCRIPTION: This C# code snippet demonstrates retrieving the currently active element on a web page using Selenium WebDriver. It navigates to Google, enters text into the search box, and retrieves the 'title' attribute of the active element. It uses the OpenQA.Selenium and OpenQA.Selenium.Chrome NuGet packages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_36\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace ActiveElement {\n class ActiveElement {\n  public static void Main(string[] args) {\n   IWebDriver driver = new ChromeDriver();\n   try {\n    // Navigate to Url\n    driver.Navigate().GoToUrl(\"https://www.google.com\");\n    driver.FindElement(By.CssSelector(\"[name='q']\")).SendKeys(\"webElement\");\n\n    // Get attribute of current active element\n    string attr = driver.SwitchTo().ActiveElement().GetAttribute(\"title\");\n    System.Console.WriteLine(attr);\n   } finally {\n    driver.Quit();\n   }\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium\nDESCRIPTION: This code snippet demonstrates how to initialize a Select object in Selenium after locating a <select> element. It covers multiple languages and shows the basic usage pattern. Note that the <select> element cannot be disabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nselect_element = @driver.find_element(name: 'selectomatic')\nselect = Selenium::WebDriver::Support::Select.new(select_element)\n```\n\n----------------------------------------\n\nTITLE: Check Element Display Selenium Python\nDESCRIPTION: This Python code snippet shows how to verify if a web element is displayed using Selenium WebDriver. It navigates to a URL, finds an element by name, and asserts that the element is displayed on the page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\nemail_input = driver.find_element(By.NAME, \"email_input\")\nassert email_input.is_displayed() is True\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element by Class Name - Kotlin\nDESCRIPTION: This snippet demonstrates how to find the first element with a specific class name using the Selenium WebDriver in Kotlin. It uses the `findElement` method with `By.className` to locate the element. The result is stored in a `WebElement` object for further interaction.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nval vegetable: WebElement = driver.findElement(By.className(\"tomatoes\"))\n```\n\n----------------------------------------\n\nTITLE: Back Click with Selenium\nDESCRIPTION: Performs a back click by pressing and releasing mouse button 3.  It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"clickable\")\nactions = ActionChains(driver)\nactions.move_to_element(element)\nactions.click(MouseButton.BACK).perform()\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Title with Selenium\nDESCRIPTION: This snippet retrieves the title of the current webpage loaded in the browser. It uses the `getTitle()` method of the WebDriver instance.  Dependencies include a properly initialized WebDriver and a loaded webpage.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nString title = driver.getTitle();\n```\n\n----------------------------------------\n\nTITLE: Preferred Locator Method with By Object in Selenium Python\nDESCRIPTION: This snippet shows the recommended way to locate elements in Selenium Python using the `find_element` method along with the `By` object.  This is the preferred and eventually required approach. The `By` object provides constants for different locator strategies like `By.ID`, `By.CSS_SELECTOR`, etc. It enhances code readability and maintainability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/python-locators-se4.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndriver.find_element(By.ID, \"submit_button\").click()\ndriver.find_element(By.CSS_SELECTOR, '.myelement child').text\n```\n\n----------------------------------------\n\nTITLE: Setting ChromeOptions Headless After - Python\nDESCRIPTION: This Python snippet shows how to set headless mode using the `--headless=new` argument in Selenium. It initializes ChromeOptions, adds the argument for headless mode, creates a ChromeDriver instance with the options, navigates to selenium.dev, and closes the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/headless-is-going-away.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\noptions = ChromeOptions()\noptions.add_argument(\"--headless=new\")\ndriver = webdriver.Chrome(options=options)\ndriver.get('http://selenium.dev')\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates moving the mouse by a relative offset from its current position. It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nawait actions.move({x: 30, y: -10, duration: 0}).perform();\n```\n\n----------------------------------------\n\nTITLE: User Prompt Closed Event in Java\nDESCRIPTION: This code snippet demonstrates how to listen for the 'browsingContext.userPromptClosed' event using Selenium WebDriver's BiDi API in Java. It subscribes to the event and prints information about the prompt that was closed. Requires Selenium version 4.15 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_54\n\nLANGUAGE: Java\nCODE:\n```\nWebDriverBiDi bidi = (WebDriverBiDi) driver;\n\n    BiDiSubscription<BrowsingContextModule.UserPromptClosedEvent> subscription =\n        new BiDiSubscription<>(BrowsingContextModule.EVENT_USER_PROMPT_CLOSED,\n            e -> {\n              System.out.println(\"Context \" + e.getContext().getId() +\n                  \" prompt is \" + e.getUserPrompt());\n              System.out.println(\" user choice \" + e.getUserChoice());\n            });\n\n    bidi.subscribe(subscription);\n    driver.get(\"https://www.selenium.dev/selenium4/demos/blank.html#fragment\");\n    bidi.unsubscribe(subscription);\n```\n\n----------------------------------------\n\nTITLE: Removing All Credentials in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to remove all credentials from a virtual authenticator. It first gets all existing credentials, then iterates through them and calls removeCredential for each one.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst credentials = await devtools.security.getCredentials();\n\nfor (const credential of credentials) {\n  await devtools.security.removeCredential(credential.credentialId);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Distributor (Java)\nDESCRIPTION: This command starts the Distributor component in a distributed Grid setup. The Distributor queries the New Session Queue for new session requests and assigns them to available Nodes. It interacts with the New Session Queue, Session Map, Event Bus, and Nodes. The default port is 5553.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.zh-cn.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar distributor --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443 --sessions http://<sessions-ip>:5556 --sessionqueue http://<new-session-queue-ip>:5559 --port 5553 --bind-bus false\n```\n\n----------------------------------------\n\nTITLE: Capturing Console Logs CSharp\nDESCRIPTION: This C# snippet demonstrates capturing console logs using Chrome DevTools Protocol (CDP) in Selenium. It enables the 'Log' domain and attaches a listener to the 'LogEntryAdded' event, printing log entries to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.ja.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\n        using (var devTools = session.GetDevToolsSession())\n        {\n            await devTools.Log.Enable(new LogEnableCommandSettings());\n            devTools.Log.EntryAdded += (sender, e) =>\n            {\n                Console.WriteLine(e.Entry.Text);\n            };\n        }\n```\n\n----------------------------------------\n\nTITLE: Retrieve Downloaded File using cURL\nDESCRIPTION: Uses `curl` to send a POST request with a JSON payload to the Selenium Grid endpoint for retrieving a specific downloaded file.  The `Content-Type` and `Accept` headers are set to `application/json`.  Requires `curl` to be installed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.zh-cn.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Accept: application/json\" \\\n-H \"Content-Type: application/json; charset=utf-8\" \\\n-X POST -d '{\"name\":\"Red-blue-green-channel.jpg\"}' \\\n\"http://localhost:4444/session/18033434-fa4f-4d11-a7df-9e6d75920e19/se/files\"\n```\n\n----------------------------------------\n\nTITLE: Getting All Options from Select Element\nDESCRIPTION: This code retrieves all options from a <select> element using Selenium's Select class. The `options` method returns a list of WebElements representing each option within the select list.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nval options = select.options\n```\n\n----------------------------------------\n\nTITLE: Get Element Size and Position - Python\nDESCRIPTION: Demonstrates how to retrieve the size and position of a web element using Python and Selenium WebDriver. The `rect` property returns a dictionary-like object containing the element's x, y coordinates, width, and height. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nrange_input = driver.find_element(By.NAME, \"range_input\")\nprint(range_input.rect)\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Status - Kotlin\nDESCRIPTION: This snippet demonstrates how to check if a web element is enabled on the page using Selenium WebDriver in Kotlin. It navigates to a URL, finds an element by name, and uses the isEnabled() method to determine if it is enabled, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n//navigates to url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n//returns true if element is enabled else returns false\nval attr = driver.findElement(By.name(\"button_input\")).isEnabled()\n```\n\n----------------------------------------\n\nTITLE: Sending Keys to an Element\nDESCRIPTION: This snippet demonstrates how to simulate typing text into an input field using Selenium. The `sendKeys` method is used to send a sequence of characters to the specified element. The `Keys.ENTER` parameter simulates pressing the Enter key.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\nsearchBox.sendKeys(\"Selenium\", Keys.ENTER)\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects - Selenium WebDriver\nDESCRIPTION: This snippet shows how to create Color objects from string representations of various color formats such as HEX, RGB, RGBA, HSL, and HSLA in Java.  The `Color.fromString()` method is used to parse the color string. This allows for a standard way to work with colors regardless of their initial representation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nprivate final Color HEX_COLOUR = Color.fromString(\"#2F7ED8\");\nprivate final Color RGB_COLOUR = Color.fromString(\"rgb(255, 255, 255)\");\nprivate final Color RGB_COLOUR = Color.fromString(\"rgb(40%, 20%, 40%)\");\nprivate final Color RGBA_COLOUR = Color.fromString(\"rgba(255, 255, 255, 0.5)\");\nprivate final Color RGBA_COLOUR = Color.fromString(\"rgba(40%, 20%, 40%, 0.5)\");\nprivate final Color HSL_COLOUR = Color.fromString(\"hsl(100, 0%, 50%)\");\nprivate final Color HSLA_COLOUR = Color.fromString(\"hsla(100, 0%, 50%, 0.5)\");\n```\n\n----------------------------------------\n\nTITLE: Querying Status of Each Node\nDESCRIPTION: This example shows how to query the status of each node in the Selenium Grid using a GraphQL query. The status typically indicates if a node is UP, DRAINING or UNAVAILABLE.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.en.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\": \"{ nodesInfo { nodes { status } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Navigate Forward with Selenium (CSharp)\nDESCRIPTION: This snippet demonstrates how to navigate forward in the browser's history using Selenium WebDriver in C#. It uses the `Navigate().Forward()` method. The code assumes that the WebDriver instance has already been created and there is a forward history available.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().Forward();\n```\n\n----------------------------------------\n\nTITLE: Launching Selenium Session Map with Redis\nDESCRIPTION: This Bash command launches the Selenium Session Map component, configured to use a Redis-backed session map.  It utilizes Coursier to fetch the required `selenium-session-map-redis` dependency and specifies the publish and subscribe events along with port and configuration file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.pt-br.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport SE_VERSION=<current_selenium_version>\njava -jar selenium-server-${SE_VERSION}.jar \\\n--ext $(coursier fetch -p org.openqa.selenium:selenium-session-map-redis:${SE_VERSION}) \\\nsessions --publish-events tcp://localhost:4442 \\\n--subscribe-events tcp://localhost:4443 \\\n--port 5556 --config sessions.toml \n```\n\n----------------------------------------\n\nTITLE: Click and Release Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a click and release action (a standard click) on an element using Selenium. It combines moving the mouse to the center of an element with pressing and then releasing the left mouse button. This is the standard way to click an element. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"my-element\")\nactions = ActionChains(driver)\nactions.click(element).perform()\n```\n\n----------------------------------------\n\nTITLE: File Upload with sendKeys in CSharp\nDESCRIPTION: This C# snippet illustrates how to upload a file in Selenium by finding a file input element and using the SendKeys method to send the full path of the file to be uploaded. This method bypasses interacting with the native file upload dialog. Dependencies: OpenQA.Selenium\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.ja.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.FindElement(By.Id(\"file-upload\")).SendKeys(\"/path/to/file.txt\");\ndriver.FindElement(By.Id(\"upload-button\")).Click();\n```\n\n----------------------------------------\n\nTITLE: Listening for JavaScript Exceptions with BiDi API in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to listen for JavaScript exceptions using Selenium's BiDi API. It registers a listener for the `log.entryAdded` event, filters for exception events, and asserts the exception text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.en.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('should get all the js exceptions', async () => {\n  let messages = [];\n  await bidi.on('log.entryAdded', (entry) => {\n    if (entry.params.entry.level === 'error') {\n      messages.push(entry.params.entry);\n    }\n  });\n  await driver.get(testPage);\n  await driver.findElement(By.id('jsException')).click();\n  await expect(messages.length).toBe(1);\n  await expect(messages[0].text).toBe('oh no!');\n});\n```\n\n----------------------------------------\n\nTITLE: Simulating Network Conditions in Edge with Java\nDESCRIPTION: This Java snippet shows how to simulate various network conditions in Edge using the DevTools protocol. It disables network throttling and then sets a specific network condition.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\nDevTools devTools = driver.getDevTools();\ndevTools.createSessionIfThereIsNotOne();\ndevTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));\ndevTools.send(Network.emulateNetworkConditions(false, 150, 25, 0, Optional.empty()));\n```\n\n----------------------------------------\n\nTITLE: Switching to IFrame by Index - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to switch to an IFrame using its index. It switches to the second frame (index 1).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Switches to the second frame\nawait driver.switchTo().frame(1);\n```\n\n----------------------------------------\n\nTITLE: Get Attribute Value CSharp\nDESCRIPTION: This C# code snippet shows how to retrieve the 'value' attribute of an email input element using Selenium WebDriver. It locates the element by its name and then calls the `GetAttribute` method to fetch the attribute value. The returned value is then asserted to be equal to the expected value. Requires Selenium WebDriver and NUnit for testing.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_44\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement email = driver.FindElement(By.Name(\"email_input\"));\nstring attribute = email.GetAttribute(\"value\");\nAssert.That(attribute, Is.EqualTo(\"diana.prince@selenium.dev\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy with Java\nDESCRIPTION: This Java code snippet demonstrates how to configure a proxy server in Selenium WebDriver using ChromeOptions.  It creates a Proxy object, sets the HTTP proxy address, and then sets the proxy capability in ChromeOptions. This allows directing browser traffic through the specified proxy server.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_49\n\nLANGUAGE: java\nCODE:\n```\nimport org.openqa.selenium.Proxy;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\n\npublic class ProxyTest {\n  public static void main(String[] args) {\n    Proxy proxy = new Proxy();\n    proxy.setHttpProxy(\"<HOST:PORT>\");\n    ChromeOptions options = new ChromeOptions();\n    options.setCapability(\"proxy\", proxy);\n    WebDriver driver = new ChromeDriver(options);\n    driver.get(\"https://www.google.com/\");\n    driver.manage().window().maximize();\n    driver.quit();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Quitting Browser Session: Selenium WebDriver (JavaScript)\nDESCRIPTION: This snippet shows how to properly quit a Selenium WebDriver browser session in JavaScript. It asynchronously calls the `await driver.quit()` method, which closes all associated windows, tabs, the browser process, and the background driver process, releasing resources for subsequent sessions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.quit();\n```\n\n----------------------------------------\n\nTITLE: Find Element Using CSS Selector - Kotlin\nDESCRIPTION: This snippet demonstrates how to find an element using a CSS selector in Kotlin with Selenium WebDriver. It uses the `findElement` method with `By.cssSelector` to locate the element based on the provided CSS selector string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\nval fruit = driver.findElement(By.cssSelector(\"#fruits .tomatoes\"))\n```\n\n----------------------------------------\n\nTITLE: Click and Hold with Selenium\nDESCRIPTION: Moves the mouse to the center of an element and presses the left mouse button, useful for focusing an element. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('clickable'));\nawait actions.move({origin: element}).clickAndHold().perform();\n\n```\n\n----------------------------------------\n\nTITLE: Release Key Action in Selenium\nDESCRIPTION: Demonstrates how to simulate releasing a pressed key using Selenium's Actions API. This involves creating an Actions object, using the keyUp method to release a key, and then performing the action.  It shows how to press and hold Shift key while typing some text, and then release the Shift key.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = driver.actions();\nawait actions.keyDown(Key.SHIFT)\n  .sendKeys('text')\n  .keyUp(Key.SHIFT)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a Select object in JavaScript using a WebElement representing the select element.  It requires the Selenium WebDriver. The `findElement` method is used to locate the select element before creating the Select object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst selectElement = await driver.findElement(By.name('selectomatic'));\nconst select = await new Select(selectElement);\n```\n\n----------------------------------------\n\nTITLE: Setting Page Size in Selenium Java\nDESCRIPTION: This Java code snippet demonstrates how to set the page size to \"A4\" using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setPageSize(\"A4\");\n\nassertThat(printOptions.getPageSize()).isEqualTo(\"A4\");\n```\n\n----------------------------------------\n\nTITLE: Get Current Window Handle - Selenium\nDESCRIPTION: Retrieves the current window handle, which is a unique identifier for the window within the current session. This identifier can be used to switch back to the window later. This code snippet shows how to retrieve the current window handle in different languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.window_handle\n```\n\n----------------------------------------\n\nTITLE: Fetching Attribute Value CSharp\nDESCRIPTION: This C# snippet demonstrates how to retrieve the 'value' attribute of an element using Selenium's `GetAttribute` method. The code finds an element identified by its name and retrieves its 'value' attribute. Requires an initialized WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_44\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"email_input\"));\nString attribute = element.GetAttribute(\"value\");\nAssert.That(attribute, Is.EqualTo(String.Empty));\nConsole.WriteLine(attribute);\n```\n\n----------------------------------------\n\nTITLE: Finding Elements From Element in Python\nDESCRIPTION: This Python code demonstrates how to find elements within an element using Selenium WebDriver. It first finds a 'div' element and then finds all 'p' elements within that 'div'.  It also shows how to find 'li' elements within a 'ul' element using XPath. It requires the Selenium library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Chrome()\ndriver.get(\"https://www.example.com\")\n##get elements from parent element using TAG_NAME\n\n    # Get element with tag name 'div'\nelement = driver.find_element(By.TAG_NAME, 'div')\n\n    # Get all the elements available with tag name 'p'\nelements = element.find_elements(By.TAG_NAME, 'p')\nfor e in elements:\n    print(e.text)\n\n##get elements from parent element using XPATH\n##NOTE: in order to utilize XPATH from current element, you must add \".\" to beginning of path\n\n    # Get first element of tag 'ul'\nelement = driver.find_element(By.XPATH, '//ul')\n\n    # get children of tag 'ul' with tag 'li'\nelements  = driver.find_elements(By.XPATH, './/li')\nfor e in elements:\n    print(e.text)\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Python\nDESCRIPTION: Demonstrates how to select an option in a Select element by its value attribute in Python. It uses the select_by_value() method. Throws NoSuchElementException if matching option is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nselect.select_by_value(\"one\")\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Class Name in Selenium (By Class)\nDESCRIPTION: This code snippet demonstrates how to locate a web element using its class name with the `By` class in Selenium.  It initializes a WebDriver and uses `By.CLASS_NAME` to locate an element with the class 'information'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.common.by import By\n    driver = webdriver.Chrome()\n\tdriver.find_element(By.CLASS_NAME, \"information\")\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element with Offset - Selenium Wheel Python\nDESCRIPTION: This snippet demonstrates how to scroll from a specific element with an offset using Selenium's Wheel actions in Python. The origin of the scroll will be determined by adding the offset to the coordinates of the center of the element, and then page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\ntarget = driver.find_element(By.ID, \"target\")\nactions = ActionBuilder(driver)\nactions.scroll_from_element(target, x=10, y=10)\nactions.perform()\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Current Position in Selenium\nDESCRIPTION: This code snippet shows how to move the mouse pointer from its current position by a specified offset using Selenium WebDriver. It uses the `moveByOffset` method. The position will be in the upper-left corner of the viewport if the mouse hasn't moved before. Note that pointer position does not change when the page is scrolled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nnew Actions(driver).moveByOffset(30, -10).perform();\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium\nDESCRIPTION: Demonstrates how to perform a copy and paste action using Selenium's Actions API. It involves pressing and releasing control/command keys along with 'a', 'c', and 'v'. This example shows how to copy all text, and then paste it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nelement = driver.find_element(tag_name: 'textarea')\nif Selenium::Platform.mac?\n  select_all = :command\n  copy = :command\n  paste = :command\nelse\n  select_all = :control\n  copy = :control\n  paste = :control\nend\nelement.send_keys('Selenium')\nelement.send_keys([select_all, 'a'])\nelement.send_keys([copy, 'c'])\nelement.send_keys([paste, 'v'])\nelement.send_keys('!')\n```\n\n----------------------------------------\n\nTITLE: Getting a Named Cookie - Java\nDESCRIPTION: This code snippet shows how to retrieve a cookie by its name using Selenium WebDriver in Java. It first adds a cookie and then retrieves it using `driver.manage().getCookieNamed()`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ndriver.get(\"https://www.example.com\");\nCookie cookie = new Cookie(\"key\", \"value\");\ndriver.manage().addCookie(cookie);\nCookie namedCookie = driver.manage().getCookieNamed(\"key\");\n```\n\n----------------------------------------\n\nTITLE: Call Function in Sandbox - JavaScript\nDESCRIPTION: This snippet demonstrates how to call a function within a sandbox using JavaScript and the WebDriver BiDi API. It utilizes the `script.callFunction` method to execute a JavaScript function within a specific sandbox and verifies the result. The sandbox has to be created previously.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('call function in sandbox', async () => {\n  let result = await connection.script.callFunction({\n    functionDeclaration: '() => { return window.document.title }',\n    target: { context: contextId, sandbox: 'sandbox' },\n  });\n  expect(result.result.value).toBe('');\n});\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Prompt in Python\nDESCRIPTION: This Python code snippet demonstrates how to interact with a JavaScript prompt dialog using Selenium WebDriver. It waits for the alert to appear, sends keys to the alert, and then accepts the alert.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nalert = wait.until(expected_conditions.alert_is_present())\nalert.send_keys(\"Selenium\")\nalert.accept()\n```\n\n----------------------------------------\n\nTITLE: Take Element Screenshot in Selenium\nDESCRIPTION: This code takes a screenshot of a specific element on the page using Selenium WebDriver and saves it as a PNG file. It demonstrates how to find an element by CSS selector, take the element's screenshot, and save it to a file. Requires the org.apache.commons.io.FileUtils dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_86\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.apache.commons.io.FileUtils\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.*\nimport java.io.File\n\nfun main() {\n    val driver = ChromeDriver()\n    driver.get(\"https://www.example.com\")\n    val element = driver.findElement(By.cssSelector(\"h1\"))\n    val scrFile: File = element.getScreenshotAs(OutputType.FILE)\n    FileUtils.copyFile(scrFile, File(\"./image.png\"))\n    driver.quit()\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Current Pointer Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse cursor by a specified offset from its current position using Selenium WebDriver.  It's available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_55\n\nLANGUAGE: Python\nCODE:\n```\nActionChains(driver)\n    .move_by_offset(30, -10)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Handle Alert Popup in Ruby\nDESCRIPTION: This code snippet explains how to interact with a JavaScript alert using Selenium WebDriver in Ruby.  It retrieves the alert text and accepts the alert.  The alert is shown after clicking a link.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.pt-br.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.find_element(:link_text, 'See an example alert').click\nwait = Selenium::WebDriver::Wait.new(:timeout => 10)\nalert = wait.until { driver.switch_to.alert }\ntext = alert.text\nalert.accept\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot in Selenium\nDESCRIPTION: This code takes a screenshot of the current browser window using Selenium WebDriver and saves it as a PNG file. It demonstrates how to initialize a ChromeDriver, navigate to a URL, take the screenshot, and save it to a file. Requires the org.apache.commons.io.FileUtils dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_77\n\nLANGUAGE: Java\nCODE:\n```\nimport org.apache.commons.io.FileUtils;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport java.io.*;\nimport org.openqa.selenium.*;\n\npublic class SeleniumTakeScreenshot {\n    public static void main(String args[]) throws IOException {\n        WebDriver driver = new ChromeDriver();\n        driver.get(\"http://www.example.com\");\n        File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);\n        FileUtils.copyFile(scrFile, new File(\"./image.png\"));\n        driver.quit();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium - C#\nDESCRIPTION: This code snippet demonstrates how to set an implicit wait in Selenium using C#. Implicit waits are a global setting that applies to all element location calls during the session. The driver will wait for the specified duration before throwing an error if the element is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.zh-cn.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);\n```\n\n----------------------------------------\n\nTITLE: Router Configuration TOML (Basic Authentication)\nDESCRIPTION: Enables basic authentication on a Selenium Grid router by configuring a username and password. This protects the Grid UI and new session creation with authentication credentials.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.pt-br.md#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[router]\nusername = \"admin\"\npassword = \"myStrongPassword\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Cookie with Selenium WebDriver (Python)\nDESCRIPTION: This code snippet demonstrates how to add a cookie to the current browser context using Selenium WebDriver in Python. It requires the Selenium WebDriver library.  The code navigates to a specific URL and then adds a cookie with the name 'key' and the value 'value'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://www.example.com\")\n# Adds the cookie into current browser context\ndriver.add_cookie({\"name\": \"key\",\n                 \"value\": \"value\"})\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Status - CSharp\nDESCRIPTION: Demonstrates how to check if a web element is enabled on a webpage using C# and Selenium WebDriver. The `Enabled` property returns a boolean indicating whether the element is enabled. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"button_input\"));\nAssert.That(element.Enabled, Is.False);\n\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Prompt in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to interact with a JavaScript prompt dialog using Selenium WebDriver. It waits for the alert to be present, sends keys to the alert and then accepts it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.wait(until.alertIsPresent());\nlet alert = await driver.switchTo().alert();\nawait alert.sendKeys('Selenium');\nawait alert.accept();\n```\n\n----------------------------------------\n\nTITLE: File Upload using sendKeys Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to upload a file by sending its path to the file input element using the send_keys method. It assumes the element is an input of type 'file'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.zh-cn.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nfile_field = driver.find_element(:id, 'file-upload')\nfile_field.send_keys('/path/to/your/file')\ndriver.find_element(:id, 'upload').click\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies in C#\nDESCRIPTION: This code snippet demonstrates how to delete all cookies from the current browser context using Selenium WebDriver in C#. It navigates to a website, adds two cookies, and then deletes all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\ndriver.Manage().Cookies.AddCookie(new Cookie(\"test1\", \"cookie1\"));\ndriver.Manage().Cookies.AddCookie(new Cookie(\"test2\", \"cookie2\"));\n\n// deletes all cookies\ndriver.Manage().Cookies.DeleteAllCookies();\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element by Offset - Selenium\nDESCRIPTION: Drags an element by a specified offset. The action presses the left mouse button on the source element, moves the element by the specified x and y offsets, and then releases the mouse button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nsource = driver.find_element(By.ID, \"draggable\")\nActionChains(driver).click_and_hold(source).move_by_offset(150, 50).release().perform()\n```\n\n----------------------------------------\n\nTITLE: Double Click with Selenium\nDESCRIPTION: Moves to the center of an element and performs a double click. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"clickable\")\nactions = ActionChains(driver)\nactions.double_click(element).perform()\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Authentication via CDP in Java\nDESCRIPTION: This Java code snippet demonstrates how to set basic authentication credentials for a Chrome browser session using the Chrome DevTools Protocol (CDP).  It uses `addListener` to intercept network requests and sets the `Authorization` header with the provided username and password. The driver instance and network domain are essential for executing this code.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n((HasAuthentication) driver).register(\n    UsernameAndPassword.of(\"test\", \"test\"));\n```\n\n----------------------------------------\n\nTITLE: Double Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a double click action on an element using Selenium. It combines moving the mouse to the center of an element with pressing and releasing the left mouse button twice. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"my-element\")\nactions = ActionChains(driver)\nactions.double_click(element).perform()\n```\n\n----------------------------------------\n\nTITLE: Setting up Selenium RemoteWebDriver with Download Capability in Java\nDESCRIPTION: This code snippet sets up a RemoteWebDriver instance with ChromeOptions, enabling automatic management of downloaded files by setting the 'se:downloadsEnabled' capability. It initializes the driver to connect to a Selenium Grid running locally.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.common.collect.ImmutableMap;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.io.Zip;\nimport org.openqa.selenium.json.Json;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.http.HttpClient;\nimport org.openqa.selenium.remote.http.HttpRequest;\nimport org.openqa.selenium.remote.http.HttpResponse;\n\nimport java.io.File;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.concurrent.TimeUnit;\n\nimport static org.openqa.selenium.remote.http.Contents.asJson;\nimport static org.openqa.selenium.remote.http.Contents.string;\nimport static org.openqa.selenium.remote.http.HttpMethod.GET;\nimport static org.openqa.selenium.remote.http.HttpMethod.POST;\n\npublic class DownloadsSample {\n\n  public static void main(String[] args) throws Exception {\n    // Assuming the Grid is running locally.\n    URL gridUrl = new URL(\"http://localhost:4444\");\n    ChromeOptions options = new ChromeOptions();\n    options.setCapability(\"se:downloadsEnabled\", true);\n    RemoteWebDriver driver = new RemoteWebDriver(gridUrl, options);\n    try {\n      demoFileDownloads(driver, gridUrl);\n    } finally {\n      driver.quit();\n    }\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Proxy with ChromeOptions in CSharp\nDESCRIPTION: This C# code snippet demonstrates how to configure a Chrome browser to use an HTTP proxy server. It sets the proxy kind to manual, disables auto-detect, and sets the SSL proxy. It adds arguments to ignore certificate errors. Then opens selenium.dev site.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_50\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\npublic class ProxyTest{\npublic static void Main() {\nChromeOptions options = new ChromeOptions();\nProxy proxy = new Proxy();\nproxy.Kind = ProxyKind.Manual;\nproxy.IsAutoDetect = false;\nproxy.SslProxy = \"<HOST:PORT>\";\noptions.Proxy = proxy;\noptions.AddArgument(\"ignore-certificate-errors\");\nIWebDriver driver = new ChromeDriver(options);\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/\");\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Navigate Forward with Selenium (Java)\nDESCRIPTION: This snippet demonstrates how to navigate forward in the browser's history using Selenium WebDriver in Java. It calls the `navigate().forward()` method. The code assumes that the WebDriver has already been initialized and the browser has a forward history.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\ndriver.navigate().forward();\n```\n\n----------------------------------------\n\nTITLE: Set User Verified in C#\nDESCRIPTION: This C# code configures the virtual authenticator to simulate success or failure during user verification.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\nawait session.WebAuthn.SetUserVerifiedAsync(true);\n\n```\n\n----------------------------------------\n\nTITLE: Using Pen Actions in Selenium - Ruby\nDESCRIPTION: This code snippet demonstrates how to use the Pen class in Selenium with Ruby to simulate stylus input. It initializes a new Actions object, moves to an element, performs a pen down action, moves by a specified offset, and then performs a pen up action. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.zh-cn.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'example')\n\n@driver.action.move_to(element)\n  .pointer_down(:left)\n  .move_by(50, 50)\n  .pointer_up(:left)\n  .perform\n```\n\n----------------------------------------\n\nTITLE: Scrolling element into view using JavaScript - Selenium\nDESCRIPTION: This JavaScript code snippet demonstrates how to scroll an element into view using Selenium's `executeScript()` method. It's useful when dealing with elements that may be obscured or outside the current viewport. Requires a `WebDriver` instance and an `element` (WebElement) object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/_index.ja.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nWebDriver.executeScript('window.scrollBy(0,-250)')\n```\n\n----------------------------------------\n\nTITLE: Querying maxSession and sessionCount in Grid\nDESCRIPTION: This example demonstrates how to query the `maxSession` and `sessionCount` values from the Selenium Grid using a GraphQL query. The `curl` command sends a POST request with a JSON payload containing the GraphQL query to the GraphQL endpoint.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.en.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\": \"{ grid { maxSession, sessionCount } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi - CSharp\nDESCRIPTION: This code snippet demonstrates how to enable BiDi in C# by setting the `UseWebSocketUrl` property to `true`.  This enables the use of a WebSocket connection for bidirectional communication, allowing full utilization of the WebDriver BiDi protocol within Selenium tests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.pt-br.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nUseWebSocketUrl = true,\n```\n\n----------------------------------------\n\nTITLE: Scroll by Amount with Selenium (Python)\nDESCRIPTION: This Python snippet shows how to scroll by a specific amount horizontally (x_delta) and vertically (y_delta) using Selenium. Requires Selenium WebDriver and ActionChains.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\naction = ActionChains(driver)\naction.scroll_by_amount(100, 200).perform()\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Authentication - Java\nDESCRIPTION: Demonstrates how to set basic authentication credentials using Selenium and CDP in Java. This involves setting the Authorization header to bypass browser authentication prompts. It depends on Selenium WebDriver and CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nString encodedCredentials = Base64.getEncoder().encodeToString(\"username:password\".getBytes());\n        Map<String, Object> headers = ImmutableMap.of(\"headers\", ImmutableMap.of(\"Authorization\", \"Basic \" + encodedCredentials));\n        ((HasAuthentication) driver).register(Predicate.matchAllRequests(), new AddHeaders(headers));\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Timeout in Java\nDESCRIPTION: This Java snippet sets the page load timeout for a Selenium session. The page load timeout defines how long WebDriver waits for a page to load. Exceeding this timeout throws a TimeoutException. The duration is set in seconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_34\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\nDuration duration = Duration.ofSeconds(50);\noptions.setPageLoadTimeout(duration);\n```\n\n----------------------------------------\n\nTITLE: Click and Hold with Selenium\nDESCRIPTION: Moves the mouse to the center of an element and presses the left mouse button, useful for focusing an element. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"clickable\"));\nActions actions = new Actions(driver);\nactions.moveToElement(element).clickAndHold().perform();\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Cookie with Selenium WebDriver (CSharp)\nDESCRIPTION: This code snippet demonstrates how to delete a cookie by name using Selenium WebDriver in C#. It requires the Selenium WebDriver NuGet package. The code navigates to a specific URL, adds two cookies, and then deletes the cookie named 'test1'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\ndriver.Manage().Cookies.AddCookie(new Cookie(\"test1\", \"cookie1\"));\ndriver.Manage().Cookies.AddCookie(new Cookie(\"test2\", \"cookie2\"));\n\n// delete a cookie with name 'test1'\ndriver.Manage().Cookies.DeleteCookie(\"test1\");\n```\n\n----------------------------------------\n\nTITLE: Relative Locators: Locating Element Left Of\nDESCRIPTION: This code demonstrates how to locate an element to the left of another element using Relative Locators in Selenium 4.  It uses `RelativeLocator.with(By.tagName(\"button\")).toLeftOf(By.id(\"submit\"))` to find a button element located to the left of the element with ID 'submit'. This is useful when spatial relationships between elements are known.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_48\n\nLANGUAGE: Python\nCODE:\n```\ncancel_locator = locate_with(By.TAG_NAME, \"button\").to_left_of({By.ID: \"submit\"})\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel CSharp\nDESCRIPTION: This snippet demonstrates how to scroll to a specific element within a web page using Selenium's Wheel actions in C#. It takes a WebElement as input and scrolls the viewport such that the bottom of the element is at the bottom of the screen. This is often needed before interacting with an element that might not be initially visible in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"target\"));\nnew Actions(driver)\n    .ScrollToElement(element)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Switch to Context (Python)\nDESCRIPTION: This Python code shows how to switch to a specific context in Firefox using Selenium.  Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_50\n\nLANGUAGE: python\nCODE:\n```\ndriver.execute_script(\"Services.prefs.setStringPref('browser.content.context', arguments[0]);\", \"CHROME\")\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Firefox Options - CSharp\nDESCRIPTION: Demonstrates how to add command-line arguments to Firefox options in C#.  This is useful for configuring browser behavior like running in headless mode. Requires the Selenium WebDriver and FirefoxOptions classes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\noptions.AddArgument(\"--headless\");\n```\n\n----------------------------------------\n\nTITLE: Excluding Switches in Chrome Options\nDESCRIPTION: This code snippet shows how to exclude specific command-line switches from being added to Chrome's launch arguments. This can be useful for preventing unwanted behavior or conflicts.  A common use case is to disable the popup blocker.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_23\n\nLANGUAGE: Java\nCODE:\n```\noptions.setExperimentalOption(\"excludeSwitches\", Collections.singletonList(\"enable-automation\"));\n```\n\n----------------------------------------\n\nTITLE: Evaluate Script in Sandbox - Java\nDESCRIPTION: This snippet shows how to evaluate a script within a sandbox using Java and the WebDriver BiDi API. It leverages the `Script.evaluate` method to execute a JavaScript expression in the designated sandbox. The sandbox must be defined.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nBiDi bidi = ((HasBiDi) driver).getBiDi();\n\n        BrowsingContext browsingContext = new BrowsingContext(contextId);\n        Script.EvaluateOptions options = new Script.EvaluateOptions();\n        options.setSandbox(\"sandbox\");\n\n        Script.EvaluateResult result = bidi.script().evaluate(browsingContext, \"1+1\", options);\n\n        assertEquals(2, result.getResult().getValue());\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Service Instance - CSharp\nDESCRIPTION: This snippet demonstrates how to initialize a driver using the default service instance in C#. It relies on Selenium's driver management to locate the driver executable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.zh-cn.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar driver = new ChromeDriver();\ndriver.Quit();\n```\n\n----------------------------------------\n\nTITLE: Driver Initialization After Selenium 4 (Python)\nDESCRIPTION: This code shows the recommended way to initialize the Chrome driver in Selenium 4 using the Service object to specify the executable path.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service as ChromeService\noptions = webdriver.ChromeOptions()\nservice = ChromeService(executable_path=CHROMEDRIVER_PATH)\ndriver = webdriver.Chrome(service=service, options=options)\n```\n\n----------------------------------------\n\nTITLE: Listening to Console Logs in Java\nDESCRIPTION: This Java code snippet demonstrates how to listen to `console.log` events using the BiDirectional API in Selenium. It registers a callback to process the event when a console log is generated. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.pt-br.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBiDi bidi = ((HasBiDi) driver).getBiDi();\nbidi.getLog().addConsoleListener(System.out::println);\n\ndriver.get(\"https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html\");\n\nWebElement element = driver.findElement(By.id(\"consoleLog\"));\nelement.click();\n```\n\n----------------------------------------\n\nTITLE: Press Key Action in Selenium\nDESCRIPTION: Demonstrates how to simulate pressing a specific key using Selenium's Actions API. This involves creating an Actions object, using the keyDown method to press a key, and then performing the action. The key to press is specified using the Keys enum/class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nActions actions = new Actions(driver);\nactions.keyDown(Keys.SHIFT)\n    .sendKeys(\"text\")\n    .perform();\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Edge Options - C#\nDESCRIPTION: Demonstrates how to add command-line arguments to Edge options in C#.\nThis enables customization of the Edge browser's behavior when launched via Selenium.\nDependencies: Selenium WebDriver, EdgeDriver, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\noptions.AddArguments(\"--start-maximized\");\n```\n\n----------------------------------------\n\nTITLE: Disown handles in browsing context (Java)\nDESCRIPTION: This Java snippet demonstrates how to disown handles within a browsing context using Selenium BiDi. It uses the `script.disown` command to release ownership of specified handles.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\n            bidi.script().disown(new DisownParameters(browsingContext.getId(), List.of()));\n```\n\n----------------------------------------\n\nTITLE: Switching to IFrame by Name/ID - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to switch to an IFrame using its name or ID. It switches the driver's focus to the frame using the IFrame's ID 'buttonframe', and then clicks the button inside the IFrame.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\n# Switch by ID\ndriver.switch_to.frame 'buttonframe'\n\n    # Now, Click on the button\ndriver.find_element(:tag_name,'button').click\n```\n\n----------------------------------------\n\nTITLE: Move By Offset from Element\nDESCRIPTION: Moves the mouse to the center point of the element, and then moves by the specified offset. It requires a WebDriver instance and a target WebElement that must be in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_44\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"clickable\"));\nActions actions = new Actions(driver);\nactions.MoveToElement(element, new Point(10, 20)).Perform();\n```\n\n----------------------------------------\n\nTITLE: Adding a Cookie with Selenium WebDriver (CSharp)\nDESCRIPTION: This code snippet demonstrates how to add a cookie to the current browser context using Selenium WebDriver in C#. It requires the Selenium WebDriver NuGet package. The code navigates to a specific URL and then adds a cookie with the name 'key' and the value 'value'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\n// Adds the cookie into current browser context\ndriver.Manage().Cookies.AddCookie(new Cookie(\"key\", \"value\"));\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name in Ruby\nDESCRIPTION: This code snippet demonstrates how to retrieve the tag name of a web element using Selenium WebDriver in Ruby. It uses the `tag_name` method of the WebElement class. The method returns the tag name as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'get tag name' do\n  expect(driver.find_element(name: 'email_input').tag_name).to eq 'input'\nend\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value - CSharp\nDESCRIPTION: Demonstrates how to retrieve the computed CSS value of a web element using C# and Selenium WebDriver. The `GetCssValue()` method returns the value of the specified CSS property as a string. A WebDriver instance, an element locator, and the CSS property name are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_32\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement link = driver.FindElement(By.Id(\"namedColor\"));\nstring backgroundColour = link.GetCssValue(\"background-color\");\n```\n\n----------------------------------------\n\nTITLE: Converting and Comparing Colors in Python\nDESCRIPTION: This Python snippet shows how to convert a Color object to different formats (Hex, RGBA, RGB) and then compare the string representation with a static value. It converts the login button background color to hex, rgba and rgb format and makes static assertions. This allows for explicit format checking.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nassert login_button_background_colour.hex == '#ff69b4'\nassert login_button_background_colour.rgba == 'rgba(255, 105, 180, 1)'\nassert login_button_background_colour.rgb == 'rgb(255, 105, 180)'\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element - Selenium\nDESCRIPTION: Drags an element from its original location and drops it onto another target element. The action involves pressing the left mouse button on the source element, moving to the target element, and then releasing the mouse button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nsource = @driver.find_element(id: 'draggable')\ntarget = @driver.find_element(id: 'droppable')\n@driver.action.drag_and_drop(source, target).perform\n```\n\n----------------------------------------\n\nTITLE: Install Firefox Extension (C#)\nDESCRIPTION: This C# code snippet demonstrates how to install a Firefox extension after the driver has been initialized. This example requires casting the driver to ISupportsAddArguments to access the install addon function. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\n((IAddsExtensions)driver).InstallExtension(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"extension.xpi\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Up WebDriver in Java\nDESCRIPTION: This code shows how to setup a WebDriver before running a test in Java using JUnit. It initializes the ChromeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ndriver = new ChromeDriver();\ndriver.get(\"https://www.selenium.dev/selenium/web/web-form.html\");\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies - CSharp\nDESCRIPTION: Demonstrates setting cookies using Selenium and CDP in C#. This sets a cookie named 'foo' with a value of 'bar' for the domain 'localhost'. Requires Selenium WebDriver with CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_19\n\nLANGUAGE: CSharp\nCODE:\n```\nDictionary<string, object> parameters = new Dictionary<string, object>()\n            {\n                { \"name\", \"foo\" },\n                { \"value\", \"bar\" },\n                { \"domain\", \"localhost\" }\n            };\n            ((IHasCdp)driver).ExecuteCdpCommand(\"Network.setCookie\", parameters);\n            driver.Navigate().GoToUrl(\"http://localhost:8080/cookie\");\n```\n\n----------------------------------------\n\nTITLE: Define EditIssue PageObject\nDESCRIPTION: This Java code defines a basic PageObject for editing an issue on a website. It includes methods for setting the title and body of the issue, as well as a method for submitting the form. It uses Selenium WebDriver to interact with the web elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.zh-cn.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.webdriver;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\n\npublic class EditIssue {\n\n  private final WebDriver driver;\n\n  public EditIssue(WebDriver driver) {\n    this.driver = driver;\n  }\n\n  public void setTitle(String title) {\n    WebElement field = driver.findElement(By.id(\"issue_title\"));\n    clearAndType(field, title);\n  }\n\n  public void setBody(String body) {\n    WebElement field = driver.findElement(By.id(\"issue_body\"));\n    clearAndType(field, body);\n  }\n\n  public void setHowToReproduce(String howToReproduce) {\n    WebElement field = driver.findElement(By.id(\"issue_form_repro-command\"));\n    clearAndType(field, howToReproduce);\n  }\n\n  public void setLogOutput(String logOutput) {\n    WebElement field = driver.findElement(By.id(\"issue_form_logs\"));\n    clearAndType(field, logOutput);\n  }\n\n  public void setOperatingSystem(String operatingSystem) {\n    WebElement field = driver.findElement(By.id(\"issue_form_operating-system\"));\n    clearAndType(field, operatingSystem);\n  }\n\n  public void setSeleniumVersion(String seleniumVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_selenium-version\"));\n    clearAndType(field, logOutput);\n  }\n\n  public void setBrowserVersion(String browserVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_browser-versions\"));\n    clearAndType(field, browserVersion);\n  }\n\n  public void setDriverVersion(String driverVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_browser-driver-versions\"));\n    clearAndType(field, driverVersion);\n  }\n\n  public void setUsingGrid(String usingGrid) {\n    WebElement field = driver.findElement(By.id(\"issue_form_selenium-grid-version\"));\n    clearAndType(field, usingGrid);\n  }\n\n  public IssueList submit() {\n    driver.findElement(By.cssSelector(\"button[type='submit']\")).click();\n    return new IssueList(driver);\n  }\n\n  private void clearAndType(WebElement field, String text) {\n    field.clear();\n    field.sendKeys(text);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait\nDESCRIPTION: This snippet demonstrates how to set an implicit wait in Selenium.  The `implicitlyWait` (Java/Kotlin/JavaScript) or `implicitly_wait` (Python/Ruby) or `Manage().Timeouts().ImplicitWait` (C#) method sets the amount of time the driver should wait when searching for an element if it is not immediately present.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\n```\n\n----------------------------------------\n\nTITLE: Initializing Chrome Driver with Default Options\nDESCRIPTION: This code snippet demonstrates how to initialize a Chrome browser session using Selenium with default options in different programming languages. It showcases the basic setup required to start a Chrome browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\nWebDriver driver = new ChromeDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Key Down Action in Selenium (Java)\nDESCRIPTION: This code snippet demonstrates how to perform a key down action using the Actions API in Selenium with Java. It involves creating an Actions object, performing a keyDown action on the Keys.CONTROL key, and then calling perform() to execute the actions. This keeps the control key pressed down.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nActions actions = new Actions(driver);\nactions.keyDown(Keys.CONTROL)\n  .sendKeys(\"c\")\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Fetching Attribute Value Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to retrieve the 'value' attribute of a textbox element using Selenium WebDriver. It navigates to a specific URL, finds the element by name, and uses the `getAttribute` method to retrieve the attribute's value. Requires an initialized WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_47\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Navigate to URL\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n//fetch the value property associated with the textbox\nval attr = driver.findElement(By.name(\"email_input\")).getAttribute(\"value\")\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies in Ruby\nDESCRIPTION: This code snippet demonstrates how to retrieve all cookies from the current browser context using Selenium WebDriver in Ruby.  It navigates to a website, adds two cookies, and then retrieves all available cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  driver.manage.add_cookie(name: \"test1\", value: \"cookie1\")\n  driver.manage.add_cookie(name: \"test2\", value: \"cookie2\")\n\n  # Get all available cookies\n  puts driver.manage.all_cookies\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel - Python\nDESCRIPTION: This code snippet demonstrates how to scroll to a specific web element using Selenium's Actions API and Wheel class in Python.  It takes a WebElement as input and scrolls the viewport until the bottom of the element is at the bottom of the screen. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.NAME, \"cheese\")\nactions = ActionBuilder(driver)\nactions.scroll_to_element(element).perform()\n```\n\n----------------------------------------\n\nTITLE: Importing Color Class - Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to import the Color class in various programming languages to use it within Selenium WebDriver tests.  This is a necessary first step to utilize the Color class's functionalities.  The package/module location varies depending on the language.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.support.Color;\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set the position of the browser window to the top-left corner of the primary monitor (0, 0) using Selenium WebDriver. The `setRect` method is called with the desired x and y coordinates within an object. Asynchronous execution is required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// Move the window to the top left of the primary monitor\nawait driver.manage().window().setRect({ x: 0, y: 0 });\n```\n\n----------------------------------------\n\nTITLE: Move By Offset from Element\nDESCRIPTION: Moves the mouse to the center point of the element, and then moves by the specified offset. It requires a WebDriver instance and a target WebElement that must be in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_47\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"clickable\"))\nval actions = Actions(driver)\nactions.moveToElement(element, 10, 20).perform()\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to Normal in Python\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'normal' in Python. The WebDriver waits until the 'load' event fires, meaning all resources are downloaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\noptions = Options()\noptions.page_load_strategy = PageLoadStrategy.NORMAL\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window - Selenium\nDESCRIPTION: This snippet demonstrates how to set the browser window to fullscreen mode using Selenium WebDriver, similar to pressing F11 in most browsers.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_71\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.manage().window().fullscreen()\n```\n\n----------------------------------------\n\nTITLE: Disable Chrome Build Check - CSharp\nDESCRIPTION: This snippet demonstrates how to disable the Chrome build check in C# using ChromeOptions. Disabling the build check is an unsupported configuration that allows forcing driver to work with any Chrome version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_43\n\nLANGUAGE: CSharp\nCODE:\n```\n// No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Get Element Rectangle Selenium Kotlin\nDESCRIPTION: This Kotlin code snippet uses Selenium WebDriver to navigate to a URL and retrieve the rectangle (dimensions and coordinates) of a range input element, then prints its x coordinate.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Navigate to url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n// Returns height, width, x and y coordinates referenced element\nval res = driver.findElement(By.name(\"range_input\")).rect\n\n// Rectangle class provides getX,getY, getWidth, getHeight methods\nprintln(res.getX())\n```\n\n----------------------------------------\n\nTITLE: Check Element Displayed Status - Kotlin\nDESCRIPTION: Demonstrates how to check if a web element is displayed on a webpage using Kotlin and Selenium WebDriver. The `isDisplayed()` method returns a boolean indicating the visibility of the element. A WebDriver instance and an element locator are required.  First navigate to the target URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\n//navigates to url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n//returns true if element is displayed else returns false\nval flag = driver.findElement(By.name(\"email_input\")).isDisplayed()\n\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium\nDESCRIPTION: Demonstrates sending keys to a specific element using Selenium's Actions API. This involves locating the element, creating an Actions object, and using the sendKeys method to send a string of characters to the element. It ensures keys are sent to a specific element, not just the active one.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nelement = driver.find_element(tag_name: 'textarea')\nactions = driver.action\nactions.send_keys(element, 'text').perform\n```\n\n----------------------------------------\n\nTITLE: Sending Keys and Clicking Elements with Selenium\nDESCRIPTION: This snippet demonstrates how to interact with web elements. It shows how to send text to an input field (using `sendKeys` or equivalent) and how to click a button (using `click`). These are common actions in web automation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.zh-cn.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\ntextBox.sendKeys(\"Selenium\");\nsubmitButton.click();\n```\n\nLANGUAGE: Python\nCODE:\n```\ntext_box.send_keys(\"Selenium\")\nsubmit_button.click()\n```\n\nLANGUAGE: CSharp\nCODE:\n```\ntextBox.SendKeys(\"Selenium\");\nsubmitButton.Click();\n```\n\nLANGUAGE: Ruby\nCODE:\n```\ntext_box.send_keys('Selenium')\nsubmit_button.click\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait textBox.sendKeys('Selenium');\nawait submitButton.click();\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ntextBox.sendKeys(\"Selenium\")\nsubmitButton.click()\n```\n\n----------------------------------------\n\nTITLE: Get Active Element Attribute - Java\nDESCRIPTION: This Java code snippet finds the currently active element on a webpage, gets its 'title' attribute, and prints it. It first navigates to Google, enters text into the search box, and then retrieves the attribute.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_34\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class activeElementTest {\n    public static void main(String[] args) {\n      WebDriver driver = new ChromeDriver();\n      try {\n        driver.get(\"http://www.google.com\");\n        driver.findElement(By.cssSelector(\"[name='q']\")).sendKeys(\"webElement\");\n\n        // Get attribute of current active element\n        String attr = driver.switchTo().activeElement().getAttribute(\"title\");\n        System.out.println(attr);\n      } finally {\n        driver.quit();\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Node Status with cURL\nDESCRIPTION: This snippet retrieves the status of a specific Node, providing information about its availability, sessions, and slots. It serves as a health-check for the Node. The default Node URL is http://localhost:5555.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://localhost:5555/status'\n```\n\n----------------------------------------\n\nTITLE: Setting Downloads Enabled Capability - Java\nDESCRIPTION: This Java code snippet shows how to set the `se:downloadsEnabled` capability to `true` in ChromeOptions. This enables the managed downloads feature, allowing tests to access files downloaded by the browser on the node.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.pt-br.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\noptions.setCapability(\"se:downloadsEnabled\", true);\n```\n\n----------------------------------------\n\nTITLE: Getting All Options from Select Element\nDESCRIPTION: This code retrieves all options from a <select> element using Selenium's Select class. The `getOptions()` method returns a list of WebElements representing each option within the select list.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = await select.getOptions();\n```\n\n----------------------------------------\n\nTITLE: Quitting a WebDriver Session - Java\nDESCRIPTION: This Java snippet shows how to properly close a WebDriver session using the `quit()` method. It's recommended to use `quit()` instead of `close()` to ensure the browser process is completely terminated.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.zh-cn.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookie Attribute Ruby\nDESCRIPTION: This Ruby code shows how to set the SameSite attribute for cookies in Selenium. It navigates to a website, adds two cookies with 'Strict' and 'Lax' SameSite values, and prints the cookies' details.  Requires the 'selenium-webdriver' gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  # Adds the cookie into current browser context with sameSite 'Strict' (or) 'Lax'\n  driver.manage.add_cookie(name: \"foo\", value: \"bar\", same_site: \"Strict\")\n  driver.manage.add_cookie(name: \"foo1\", value: \"bar\", same_site: \"Lax\")\n  puts driver.manage.cookie_named('foo')\n  puts driver.manage.cookie_named('foo1')\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Adding a Cookie to Browser Context - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to add a cookie to the current browser context using Selenium WebDriver.  It uses the `Cookie` class to create a cookie and `driver.manage().addCookie()` to add it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://example.com\")\n\n        // Adds the cookie into current browser context\n        driver.manage().addCookie(Cookie(\"key\", \"value\"))\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's Select class, specifically by matching the value attribute of the option. The `select_by_value()` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nselect.select_by_value(\"one\")\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Selenium Kotlin\nDESCRIPTION: This Kotlin code snippet uses Selenium WebDriver to navigate to a URL and check if a button input element is enabled, returning true if enabled and false otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\n//navigates to url\n driver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n //returns true if element is enabled else returns false \n val attr = driver.findElement(By.name(\"button_input\")).isEnabled()\n```\n\n----------------------------------------\n\nTITLE: Find Element Using CSS Selector - Python\nDESCRIPTION: This snippet demonstrates how to find an element using a CSS selector in Python with Selenium WebDriver. It uses the `find_element` method with `By.CSS_SELECTOR` to locate the element based on the provided CSS selector string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nfruit = driver.find_element(By.CSS_SELECTOR,\"#fruits .tomatoes\")\n```\n\n----------------------------------------\n\nTITLE: Uninstall Firefox Extension (Java)\nDESCRIPTION: This Java code snippet uninstalls a Firefox extension using its ID. The extension ID is typically obtained during installation. The driver is cast to `AddHasExtensions` to uninstall the extension. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_36\n\nLANGUAGE: java\nCODE:\n```\n((AddHasExtensions) driver).uninstallExtension(\"extension@example.com\");\n```\n\n----------------------------------------\n\nTITLE: Check Element Displayed Status - Python\nDESCRIPTION: This snippet demonstrates how to check if a web element is displayed on the page using Selenium WebDriver in Python. It finds an element by name and uses the is_displayed() method to determine its visibility, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nemail_input = driver.find_element(By.NAME, \"email_input\")\nassert email_input.is_displayed() is True\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins using PrintOptions in Python\nDESCRIPTION: This code snippet demonstrates how to set the page margins using the PrintOptions class in Python. The `margin` attribute is set with desired margin sizes. The top, bottom, left, and right margin values are defined. The `margin` is confirmed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nprint_options = PrintOptions()\nmargin = Margin(top=10, bottom=20, left=30, right=40)\nprint_options.margin = margin\nassert print_options.margin == margin\n```\n\n----------------------------------------\n\nTITLE: Navigate Back with Selenium (Python)\nDESCRIPTION: This snippet shows how to navigate back in the browser's history using Selenium WebDriver in Python. It calls the `back()` method on the driver. This requires an initialized Selenium WebDriver instance and a browser history.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndriver.back()\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency Configuration for Selenium (Java)\nDESCRIPTION: Specifies the Selenium dependency using Gradle in the 'build.gradle' file.  It adds the Selenium Java library as a test implementation dependency. This ensures the Selenium library is available during testing.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.ja.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'org.seleniumhq.selenium:selenium-java:4.18.1'\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium\nDESCRIPTION: Demonstrates sending keys to a specific element using Selenium's Actions API. This involves locating the element, creating an Actions object, and using the sendKeys method to send a string of characters to the element. It ensures keys are sent to a specific element, not just the active one.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.TagName(\"textarea\"));\nActions actions = new Actions(driver);\nactions.SendKeys(element, \"text\").Perform();\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium (C#)\nDESCRIPTION: Demonstrates how to perform a copy and paste action using the Actions API in C#. It checks the OS to determine the correct key for copy/paste.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement input = driver.FindElement(By.TagName(\"input\"));\ninput.SendKeys(\"Selenium\");\nstring selectAll = OperatingSystem.IsMacOS() ? Keys.Command + \"a\" : Keys.Control + \"a\";\nstring copy = OperatingSystem.IsMacOS() ? Keys.Command + \"c\" : Keys.Control + \"c\";\nstring paste = OperatingSystem.IsMacOS() ? Keys.Command + \"v\" : Keys.Control + \"v\";\ninput.SendKeys(selectAll);\ninput.SendKeys(copy);\ninput.SendKeys(paste);\ninput.SendKeys(Keys.Chord(Keys.Shift, \"1\"));\n```\n\n----------------------------------------\n\nTITLE: Move By Offset from Element\nDESCRIPTION: Moves the mouse to the center point of the element, and then moves by the specified offset. It requires a WebDriver instance and a target WebElement that must be in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_42\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"clickable\"));\nActions actions = new Actions(driver);\nactions.moveToElement(element, 10, 20).perform();\n```\n\n----------------------------------------\n\nTITLE: Check Element Displayed Status - Java\nDESCRIPTION: This snippet demonstrates how to check if a web element is displayed on the page using Selenium WebDriver in Java. It finds an element by name and uses the isDisplayed() method to determine its visibility, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"email_input\"));\nboolean isDisplayed = element.isDisplayed();\nassertThat(isDisplayed).isTrue();\nSystem.out.println(\"Element is displayed: \" + isDisplayed);\n\n```\n\n----------------------------------------\n\nTITLE: Querying Element Color - Selenium WebDriver\nDESCRIPTION: This snippet retrieves the 'color' and 'background-color' CSS properties of an element with the ID 'login' using Selenium WebDriver in Kotlin, and converts them to Color objects. This demonstrates how to get the color of an element as a Color object for further analysis or comparison.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nval loginButtonColour = Color.fromString(driver.findElement(By.id(\"login\")).getCssValue(\"color\"))\n\nval loginButtonBackgroundColour = Color.fromString(driver.findElement(By.id(\"login\")).getCssValue(\"background-color\"))\n```\n\n----------------------------------------\n\nTITLE: Context Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a context click action (right-click) on an element using Selenium. It combines moving the mouse to the center of an element with pressing and releasing the right mouse button (button 2). This opens the context menu. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"my-element\")\nactions = ActionChains(driver)\nactions.context_click(element).perform()\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies with Selenium WebDriver (Python)\nDESCRIPTION: This code snippet demonstrates how to delete all cookies in the current browser context using Selenium WebDriver in Python. It requires the Selenium WebDriver library.  The code navigates to a specific URL, adds two cookies, and then deletes all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://www.example.com\")\ndriver.add_cookie({\"name\": \"test1\",\n                 \"value\": \"cookie1\"})\ndriver.add_cookie({\"name\": \"test2\",\n                 \"value\": \"cookie2\"})\n\n# deletes all cookies\ndriver.delete_all_cookies()\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Selected in Python\nDESCRIPTION: This code snippet demonstrates how to check if a web element is selected on a webpage using Selenium WebDriver in Python. It uses the `is_selected()` method of the WebElement class. The method returns `True` if the element is selected, and `False` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ncheckbox_input = driver.find_element(By.NAME, \"checkbox_input\")\nassert checkbox_input.is_selected() is True\n```\n\n----------------------------------------\n\nTITLE: Custom Driver Configuration TOML\nDESCRIPTION: Configures a Selenium Grid node with custom driver configurations, allowing the use of specific browser versions (Firefox Nightly, Chrome Beta, Chrome Dev) with corresponding browser binaries and WebDriver executables.  `detect-drivers` is set to false to prevent automatic driver detection.  The stereotype defines the capabilities for each driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.zh-cn.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\ndetect-drivers = false\n[[node.driver-configuration]]\nmax-sessions = 100\ndisplay-name = \"Firefox Nightly\"\nstereotype = \"{\\\"browserName\\\": \\\"firefox\\\", \\\"browserVersion\\\": \\\"93\\\", \\\"platformName\\\": \\\"MAC\\\", \\\"moz:firefoxOptions\\\": {\\\"binary\\\": \\\"/Applications/Firefox Nightly.app/Contents/MacOS/firefox-bin\\\"}}\"\n[[node.driver-configuration]]\ndisplay-name = \"Chrome Beta\"\nstereotype = \"{\\\"browserName\\\": \\\"chrome\\\", \\\"browserVersion\\\": \\\"94\\\", \\\"platformName\\\": \\\"MAC\\\", \\\"goog:chromeOptions\\\": {\\\"binary\\\": \\\"/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta\\\"}}\"\n[[node.driver-configuration]]\ndisplay-name = \"Chrome Dev\"\nstereotype = \"{\\\"browserName\\\": \\\"chrome\\\", \\\"browserVersion\\\": \\\"95\\\", \\\"platformName\\\": \\\"MAC\\\", \\\"goog:chromeOptions\\\": {\\\"binary\\\": \\\"/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev\\\"}}\"\nwebdriver-executable = '/path/to/chromedriver/95/chromedriver'\n```\n\n----------------------------------------\n\nTITLE: Key Down Action in Selenium (Python)\nDESCRIPTION: Demonstrates how to simulate pressing a key using the Actions API in Python. This example shows how to press the SHIFT key on an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nelement = driver.find_element(By.TAG_NAME, \"input\")\nactions = ActionChains(driver)\nactions.key_down(Keys.SHIFT, element)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Web Page\nDESCRIPTION: This snippet shows how to navigate the browser to a specific URL using Selenium.  It uses the `get` or `navigate().to()` method of the WebDriver to load a web page. The target URL is a required parameter.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.google.com\");\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium - Python\nDESCRIPTION: This code snippet demonstrates how to set an implicit wait in Selenium using Python. Implicit waits are a global setting that applies to all element location calls during the session. The driver will wait for the specified duration before throwing an error if the element is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver.implicitly_wait(10)\n```\n\n----------------------------------------\n\nTITLE: Selenium Grid Managed Downloads Example in Java\nDESCRIPTION: This Java code demonstrates how to use Selenium Grid's managed downloads feature. It sets the `se:downloadsEnabled` capability, triggers file downloads in the browser, lists the downloaded files, and retrieves one of the files from the remote node, unzipping and reading its contents. Requires selenium-java and guava dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.zh-cn.md#_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.common.collect.ImmutableMap;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.io.Zip;\nimport org.openqa.selenium.json.Json;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.http.HttpClient;\nimport org.openqa.selenium.remote.http.HttpRequest;\nimport org.openqa.selenium.remote.http.HttpResponse;\n\nimport java.io.File;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.concurrent.TimeUnit;\n\nimport static org.openqa.selenium.remote.http.Contents.asJson;\nimport static org.openqa.selenium.remote.http.Contents.string;\nimport static org.openqa.selenium.remote.http.HttpMethod.GET;\nimport static org.openqa.selenium.remote.http.HttpMethod.POST;\n\npublic class DownloadsSample {\n\n  public static void main(String[] args) throws Exception {\n    // Assuming the Grid is running locally.\n    URL gridUrl = new URL(\"http://localhost:4444\");\n    ChromeOptions options = new ChromeOptions();\n    options.setCapability(\"se:downloadsEnabled\", true);\n    RemoteWebDriver driver = new RemoteWebDriver(gridUrl, options);\n    try {\n      demoFileDownloads(driver, gridUrl);\n    } finally {\n      driver.quit();\n    }\n  }\n\n\tprivate static void demoFileDownloads(RemoteWebDriver driver, URL gridUrl) throws Exception {\n\t\tdriver.get(\"https://www.selenium.dev/selenium/web/downloads/download.html\");\n\t\t// Download the two available files on the page\n\t\tdriver.findElement(By.id(\"file-1\")).click();\n\t\tdriver.findElement(By.id(\"file-2\")).click();\n\n\t\t// The download happens in a remote Node, which makes it difficult to know when the file\n\t\t// has been completely downloaded. For demonstration purposes, this example uses a\n\t\t// 10-second sleep which should be enough time for a file to be downloaded.\n\t\t// We strongly recommend to avoid hardcoded sleeps, and ideally, to modify your\n\t\t// application under test, so it offers a way to know when the file has been completely\n\t\t// downloaded.\n\t\tTimeUnit.SECONDS.sleep(10);\n\n\t\t//This is the endpoint which will provide us with list of files to download and also to\n\t\t//let us download a specific file.\n\t\tString downloadsEndpoint = String.format(\"/session/%s/se/files\", driver.getSessionId());\n\n\t\tString fileToDownload;\n\n\t\ttry (HttpClient client = HttpClient.Factory.createDefault().createClient(gridUrl)) {\n\t\t\t// To list all files that are were downloaded on the remote node for the current session\n\t\t\t// we trigger GET request.\n\t\t\tHttpRequest request = new HttpRequest(GET, downloadsEndpoint);\n\t\t\tHttpResponse response = client.execute(request);\n\t\t\tMap<String, Object> jsonResponse = new Json().toType(string(response), Json.MAP_TYPE);\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tMap<String, Object> value = (Map<String, Object>) jsonResponse.get(\"value\");\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tList<String> names = (List<String>) value.get(\"names\");\n\t\t\t// Let's say there were \"n\" files downloaded for the current session, we would like\n\t\t\t// to retrieve ONLY the first file.\n\t\t\tfileToDownload = names.get(0);\n\t\t}\n\n\t\t// Now, let's download the file\n\t\ttry (HttpClient client = HttpClient.Factory.createDefault().createClient(gridUrl)) {\n\t\t\t// To retrieve a specific file from one or more files that were downloaded by the current session\n\t\t\t// on a remote node, we use a POST request.\n\t\t\tHttpRequest request = new HttpRequest(POST, downloadsEndpoint);\n\t\t\trequest.setContent(asJson(ImmutableMap.of(\"name\", fileToDownload)));\n\t\t\tHttpResponse response = client.execute(request);\n\t\t\tMap<String, Object> jsonResponse = new Json().toType(string(response), Json.MAP_TYPE);\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tMap<String, Object> value = (Map<String, Object>) jsonResponse.get(\"value\");\n\t\t\t// The returned map would contain 2 keys,\n\t\t\t// filename - This represents the name of the file (same as what was provided by the test)\n\t\t\t// contents - Base64 encoded String which contains the zipped file.\n\t\t\tString zippedContents = value.get(\"contents\").toString();\n\t\t\t// The file contents would always be a zip file and has to be unzipped.\n\t\t\tFile downloadDir = Zip.unzipToTempDir(zippedContents, \"download\", \"\");\n\t\t\t// Read the file contents\n\t\t\tFile downloadedFile = Optional.ofNullable(downloadDir.listFiles()).orElse(new File[]{})[0];\n\t\t\tString fileContent = String.join(\"\", Files.readAllLines(downloadedFile.toPath()));\n\t\t\tSystem.out.println(\"The file which was \"\n\t\t\t\t\t+ \"downloaded in the node is now available in the directory: \"\n\t\t\t\t\t+ downloadDir.getAbsolutePath() + \" and has the contents: \" + fileContent);\n\t\t}\n\t}\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Get Current Window Handle - Selenium\nDESCRIPTION: Retrieves the current window handle, which is a unique identifier for the window within the current session. This identifier can be used to switch back to the window later. This code snippet shows how to retrieve the current window handle in different languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.getWindowHandle();\n```\n\n----------------------------------------\n\nTITLE: Getting All Options in Selenium Python\nDESCRIPTION: This snippet demonstrates how to retrieve all options from a Select element in Python. It uses the `options` property of the Select object, returning a list of WebElements representing each option.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\noptions = select.options\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Driver Log Level\nDESCRIPTION: This code demonstrates how to set the logging level for the ChromeDriver service. The available levels are: ALL, DEBUG, INFO, WARNING, SEVERE, and OFF. Setting the log level allows for filtering the verbosity of the logs.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_35\n\nLANGUAGE: Java\nCODE:\n```\nChromeDriverService service = new ChromeDriverService.Builder()\n    .withLogLevel(ChromiumDriverLogLevel.DEBUG)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Find Elements from Element in Selenium WebDriver - CSharp\nDESCRIPTION: This C# code demonstrates how to find elements within a parent element using Selenium WebDriver. It initializes a ChromeDriver, navigates to a website, finds a parent 'div' element, and then retrieves all 'p' elements within that 'div'. The text content of each 'p' element is then printed to the console. It uses the OpenQA.Selenium and OpenQA.Selenium.Chrome namespaces.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_31\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\nusing System.Collections.Generic;\n\nnamespace FindElementsFromElement {\n class FindElementsFromElement {\n  public static void Main(string[] args) {\n   IWebDriver driver = new ChromeDriver();\n   try {\n    driver.Navigate().GoToUrl(\"https://example.com\");\n\n    // Get element with tag name 'div'\n    IWebElement element = driver.FindElement(By.TagName(\"div\"));\n\n    // Get all the elements available with tag name 'p'\n    IList < IWebElement > elements = element.FindElements(By.TagName(\"p\"));\n    foreach(IWebElement e in elements) {\n     System.Console.WriteLine(e.Text);\n    }\n   } finally {\n    driver.Quit();\n   }\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Alert in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to interact with a JavaScript alert using Selenium WebDriver. It waits for an alert to be present, gets the text from the alert, and then accepts the alert.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nalert = wait.until { driver.switch_to.alert }\ntext = alert.text\nalert.accept\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Resident Credential in Java\nDESCRIPTION: This snippet demonstrates how to create a non-resident (stateless) credential in Java. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\ndevTools.getDomains().getWebAuthn().addCredential(Credential.builder().build());\n```\n\n----------------------------------------\n\nTITLE: Get Current URL - JavaScript\nDESCRIPTION: This JavaScript snippet retrieves the current URL of the web page using Selenium WebDriver. It needs an existing WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.pt-br.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\ndriver.getCurrentUrl()\n```\n\n----------------------------------------\n\nTITLE: Find Element within a DOM Subset\nDESCRIPTION: This snippet shows how to find an element within a specific DOM subset. It first locates the parent element with the ID 'fruits', and then searches within that element for the first element with the class name 'tomatoes'. This approach is useful when there are multiple elements with the same locator, but you want to target a specific one.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fruits = await driver.findElement(By.id('fruits'));\nconst fruit = fruits.findElement(By.className('tomatoes'));\n```\n\n----------------------------------------\n\nTITLE: Move To Element with Selenium\nDESCRIPTION: Moves the mouse to the center of the element, simulating a hover. Requires a WebDriver instance and that the element is in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"clickable\")\nactions = ActionChains(driver)\nactions.move_to_element(element).perform()\n```\n\n----------------------------------------\n\nTITLE: Quitting the Selenium Session\nDESCRIPTION: This snippet demonstrates how to properly close the Selenium WebDriver session. The `Quit()` method closes all browser windows and ends the WebDriver process. It is important to call this method at the end of the script to release resources.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_44\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Quit();\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Class Name in Selenium\nDESCRIPTION: This code demonstrates how to locate a web element using its class name in Selenium WebDriver. It initializes a ChromeDriver instance and uses the `findElement` method with `By.className(\"information\")` to find the element with the specified class. The example is provided in multiple languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_36\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.By\n val driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.className(\"information\"))\n```\n\n----------------------------------------\n\nTITLE: Print Page Python\nDESCRIPTION: This code snippet demonstrates how to print a webpage to PDF in Python with Selenium using the `print_page` method and `PrintOptions`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.page_ranges = [\"1-2\"]\npdf = driver.print_page(print_options)\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Selenium Java\nDESCRIPTION: This Java code snippet shows how to check if an element is enabled using Selenium WebDriver. The `isEnabled()` method returns true if the element is enabled; otherwise, it returns false.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\");\nWebElement element = driver.findElement(By.name(\"button_input\"));\nassertThat(element.isEnabled()).isFalse();\n```\n\n----------------------------------------\n\nTITLE: Find Element with Optimized Locator (CSS) - Java\nDESCRIPTION: This snippet finds an element with a specific CSS selector in a single command using Selenium WebDriver with Java, improving performance compared to nested lookups. It uses the `findElement` method with `By.cssSelector` locator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nWebElement fruit = driver.findElement(By.cssSelector(\"#fruits .tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset in Kotlin\nDESCRIPTION: This Kotlin snippet performs a drag and drop operation by a specified offset. It uses the Actions class and requires a WebDriver instance and the source element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_71\n\nLANGUAGE: kotlin\nCODE:\n```\nval source = driver.findElement(By.id(\"draggable\"))\n\nval actions = Actions(driver)\nactions.dragAndDropBy(source, 50, 20).perform()\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies with Selenium WebDriver (Python)\nDESCRIPTION: This code snippet demonstrates how to retrieve all cookies in the current browser context using Selenium WebDriver in Python. It requires the Selenium WebDriver library. The code navigates to a specific URL, adds two cookies, and then retrieves all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://www.example.com\")\ndriver.add_cookie({\"name\": \"test1\",\n                 \"value\": \"cookie1\"})\ndriver.add_cookie({\"name\": \"test2\",\n                 \"value\": \"cookie2\"})\n\n# Get all available cookies\ncookies = driver.get_cookies()\nprint(cookies)\n```\n\n----------------------------------------\n\nTITLE: Add Network Intercept - Java\nDESCRIPTION: This Java snippet demonstrates how to add a network intercept using Selenium BiDi. It requires the Selenium WebDriver BiDi dependency and establishes a network intercept to monitor network traffic. The intercept allows the user to observe and potentially modify network requests and responses.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver.getDevTools().createSession();\nNetwork network = new Network(driver.getDevTools());\nnetwork.addIntercept(\"*.example.com/*\", new AddInterceptParameters());\n```\n\n----------------------------------------\n\nTITLE: Creating a Resident Credential in Java\nDESCRIPTION: This Java code snippet creates a resident credential using the WebAuthn domain through DevTools. It specifies the user ID and user name for the new credential. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\ndevTools.getDomains().getWebAuthn().addCredential(\n    Credential.builder()\n        .userId(USER_ID)\n        .userName(USER_NAME)\n        .build());\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi in JavaScript\nDESCRIPTION: This snippet demonstrates how to enable BiDi in JavaScript using the `enableBidi()` method on the `Options` object. This function configures the driver to allow bidirectional communication. Requires Selenium WebDriver and browser-specific driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.en.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nOptions().enableBidi();\n```\n\n----------------------------------------\n\nTITLE: Configuring EdgeDriver Log File in Java\nDESCRIPTION: This Java snippet demonstrates how to configure EdgeDriver to write logs to a file, append to the log file, and use readable timestamps.  This requires specifying both the log path and log level.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nEdgeDriverService service = new EdgeDriverService.Builder()\n  .withAppendLog(true).withReadableTimestamps(true)\n  .withLogFile(new File(\"edge.log\"))\n  .withLogLevel(EdgeDriverLogLevel.ALL).build();\n```\n\n----------------------------------------\n\nTITLE: Find Element Using CSS Selector - JavaScript\nDESCRIPTION: This snippet demonstrates how to find an element using a CSS selector in JavaScript with Selenium WebDriver. It leverages the `findElement` method with `By.css` to locate the element. This is an asynchronous operation, so it uses `await`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fruit = await driver.findElement(By.css('#fruits .tomatoes'));\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium CSharp\nDESCRIPTION: This snippet illustrates how to select an option in a Select element by its value attribute in C#. It uses the `SelectByValue()` method of the SelectElement object. It throws NoSuchElementException if no matching option is found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nselect.SelectByValue(\"two\");\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve the value of a CSS property of a web element using Selenium WebDriver in Python. It uses the `value_of_css_property()` method of the WebElement class. The method takes the name of the CSS property as a parameter and returns its value as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nlink = driver.find_element(By.ID, \"namedColor\")\nassert link.value_of_css_property(\"background-color\") == \"rgba(0, 0, 255, 1)\"\n```\n\n----------------------------------------\n\nTITLE: LoginPage Class in Java (Login Example)\nDESCRIPTION: This Java code snippet illustrates a LoginPage class with methods for handling both successful and unsuccessful login attempts.  It demonstrates how a Page Object should handle different outcomes and expose services rather than implementation details.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.pt-br.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class LoginPage {\n    public HomePage loginAs(String username, String password) {\n        // ... mágica inteligente acontece aqui\n    }\n    \n    public LoginPage loginAsExpectingError(String username, String password) {\n        //  ... falha no login aqui, talvez porque o nome de usuário e/ou a senha estão incorretos\n    }\n    \n    public String getErrorMessage() {\n        // Para que possamos verificar se o erro correto é mostrado\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Context Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a context click action (right-click) on an element using Selenium. It combines moving the mouse to the center of an element with pressing and releasing the right mouse button (button 2). This opens the context menu. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'my-element')\n@driver.action.context_click(element).perform\n```\n\n----------------------------------------\n\nTITLE: Removing Virtual Authenticator in Python\nDESCRIPTION: This snippet demonstrates removing a virtual authenticator in Python using Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\noptions = VirtualAuthenticatorOptions(\n    protocol=Protocol.CTAP2,\n    domain=\"localhost\",\n    user_verified=True\n)\noptions.add_transport(Transport.USB)\nauthenticator = driver.add_virtual_authenticator(options)\ndriver.remove_virtual_authenticator(authenticator)\n```\n\n----------------------------------------\n\nTITLE: Listening to console logs - JavaScript\nDESCRIPTION: Registers a listener for console.log events using the BiDi API in Selenium with JavaScript. It logs the level and text of each console entry to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.ja.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('should listen to the console logs', async () => {\n  let logInspector = await new LogInspector(driver);\n  await logInspector.onConsoleEntry(entry => {\n    console.log('----------------------------');\n    console.log('Level: ' + entry.level);\n    console.log('Text: ' + entry.text);\n    console.log('----------------------------');\n  });\n  await driver.get(url);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies - Java\nDESCRIPTION: Demonstrates how to set cookies using Selenium and CDP in Java. The code navigates to a URL and sets a new cookie with a specified name, value, domain, and other properties. It relies on Selenium WebDriver and CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\ndevTools.send(new Network.setCookie(\"foo\", \"bar\", Optional.of(\"localhost\"), Optional.of(\"/\"), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty()));\ndriver.get(\"http://localhost:8080/cookie\");\nCookie cookie = driver.manage().getCookieNamed(\"foo\");\nassertThat(cookie.getValue()).isEqualTo(\"bar\");\n```\n\n----------------------------------------\n\nTITLE: Print Page in Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to print a page using Selenium WebDriver in Python. It utilizes the `print_page` method and PrintOptions to define the page settings. Dependencies: selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_69\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.common.print_page_options import PrintOptions\n\n    print_options = PrintOptions()\n    print_options.page_ranges = ['1-2']\n\n    driver.get(\"printPage.html\")\n\n    base64code = driver.print_page(print_options)\n```\n\n----------------------------------------\n\nTITLE: Products Page Object in Java\nDESCRIPTION: This Java code implements the ProductsPage object, extending BasePage. It includes methods to retrieve a list of products and a specific product based on a condition (predicate). The constructor waits for the page to load.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.ja.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Page Object\npublic class ProductsPage extends BasePage {\n    public ProductsPage(WebDriver driver) {\n        super(driver);\n        // No assertions, throws an exception if the element is not loaded\n        new WebDriverWait(driver, Duration.ofSeconds(3))\n            .until(d -> d.findElement(By.className​(\"header_container\")));\n    }\n\n    // Returning a list of products is a service of the page\n    public List<Product> getProducts() {\n        return driver.findElements(By.className​(\"inventory_item\"))\n            .stream()\n            .map(e -> new Product(e)) // Map WebElement to a product component\n            .toList();\n    }\n\n    // Return a specific product using a boolean-valued function (predicate)\n    // This is the behavioral Strategy Pattern from GoF\n    public Product getProduct(Predicate<Product> condition) {\n        return getProducts()\n            .stream()\n            .filter(condition) // Filter by product name or price\n            .findFirst()\n            .orElseThrow();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium JavaScript\nDESCRIPTION: This snippet shows how to select an option in a Select element by its index in JavaScript. It uses the `selectByIndex()` method of the Select object. The index is zero-based. It throws NoSuchElementException if the index is out of bounds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait select.selectByIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's SelectElement class, specifically by matching the value attribute of the option. The `SelectByValue()` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nselect.SelectByValue(\"one\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Shadow DOM Elements - Java\nDESCRIPTION: This snippet shows how to access elements within a Shadow DOM in Java using Selenium. It first locates the shadow host element, then accesses its shadow root using `getShadowRoot()`, and finally finds the desired element within the shadow root.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nWebElement shadowHost = driver.findElement(By.cssSelector(\"#shadow_host\"));\nSearchContext shadowRoot = shadowHost.getShadowRoot();\nWebElement shadowContent = shadowRoot.findElement(By.cssSelector(\"#shadow_content\"));\n```\n\n----------------------------------------\n\nTITLE: Get Element Size and Position - JavaScript\nDESCRIPTION: Demonstrates how to retrieve the size and position of a web element using JavaScript and Selenium WebDriver. The `getRect()` method returns a `DOMRect` object containing the element's x, y coordinates, width, and height. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst rangeInput = await driver.findElement(By.name('range_input'))\nconsole.log(await rangeInput.getRect())\n```\n\n----------------------------------------\n\nTITLE: Intercepting Response Information - Ruby\nDESCRIPTION: Demonstrates intercepting response information using Selenium and CDP in Ruby. It captures the response body for requests matching a specific URL. It relies on Selenium WebDriver and CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\n@driver.register(url: %r{simple_page}) do |event|\n  body = @driver.execute_cdp 'Fetch.getResponseBody', requestId: event['requestId']\n  puts body\n  @driver.execute_cdp 'Fetch.continueRequest', requestId: event['requestId']\nend\n```\n\n----------------------------------------\n\nTITLE: Selenium Client Configuration (Python)\nDESCRIPTION: This Python code snippet demonstrates how to configure a Selenium client to connect to a Selenium Grid.  It sets the `platformName` capability and creates a `webdriver.Remote` instance, specifying the Grid's URL as the `command_executor`. The `ChromeOptions` class is used to specify Chrome-specific configurations.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/scaling-grid-with-keda.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\noptions = ChromeOptions()\noptions.set_capability('platformName', 'Linux')\ndriver = webdriver.Remote(options=options, command_executor='http://selenium-grid-url-or-ip:4444/wd/hub')\n```\n\n----------------------------------------\n\nTITLE: Evaluate Shadow DOM - Java\nDESCRIPTION: This snippet demonstrates how to access and interact with elements within a Shadow DOM using Selenium WebDriver with Java. It finds the shadow host, gets the shadow root, and then finds an element within the shadow root.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nWebElement shadowHost = driver.findElement(By.cssSelector(\"#shadow_host\"));\nSearchContext shadowRoot = shadowHost.getShadowRoot();\nWebElement shadowContent = shadowRoot.findElement(By.cssSelector(\"#shadow_content\"));\n```\n\n----------------------------------------\n\nTITLE: Getting All Options in Python\nDESCRIPTION: Demonstrates how to retrieve all options from a Select element in Python. It uses the options attribute to return a list of WebElements representing the options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\noptions = select.options\n```\n\n----------------------------------------\n\nTITLE: Take Element Screenshot in Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to capture a screenshot of a specific element on a webpage using Selenium WebDriver in Ruby. It utilizes the `save_screenshot` method to save the screenshot to a file. The element is located using `find_element` method. Dependencies: selenium-webdriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_61\n\nLANGUAGE: Ruby\nCODE:\n```\n    # Works with Selenium4-alpha7 Ruby bindings and above\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\ndriver.get 'https://example.com/'\nele = driver.find_element(:css, 'h1')\n\n    # Takes and Stores the element screenshot in specified path\nele.save_screenshot('./image.jpg')\nend\n```\n\n----------------------------------------\n\nTITLE: Relative Locators: Locating Element Left Of\nDESCRIPTION: This code demonstrates how to locate an element to the left of another element using Relative Locators in Selenium 4.  It uses `RelativeLocator.with(By.tagName(\"button\")).toLeftOf(By.id(\"submit\"))` to find a button element located to the left of the element with ID 'submit'. This is useful when spatial relationships between elements are known.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet cancelLocator = locateWith(By.tagName('button')).toLeftOf(By.id('submit'));\n```\n\n----------------------------------------\n\nTITLE: Key Down Action in Selenium (C#)\nDESCRIPTION: Demonstrates how to simulate pressing a key using the Actions API in C#. This example shows how to press the SHIFT key on an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement input = driver.FindElement(By.TagName(\"input\"));\nActions actions = new Actions(driver);\nactions.KeyDown(input, Keys.Shift)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Call Function in Sandbox - Java\nDESCRIPTION: This snippet showcases how to call a function within a sandbox using Java and the WebDriver BiDi API. It leverages the `Script.callFunction` method to execute a JavaScript function within a designated sandbox and fetch the result. The sandbox must be created beforehand.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nBiDi bidi = ((HasBiDi) driver).getBiDi();\n\n        BrowsingContext browsingContext = new BrowsingContext(contextId);\n        Script.CallFunctionOptions options = new Script.CallFunctionOptions();\n        options.setSandbox(\"sandbox\");\n\n        Script.EvaluateResult result = bidi.script().callFunction(\n            browsingContext, \"() => { return window.document.title }\", options);\n        assertEquals(\"\", result.getResult().getValue());\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium\nDESCRIPTION: This code snippet demonstrates how to handle disabled options in a select element using Selenium WebDriver. It attempts to select a disabled option and verifies that a `NoSuchElementException` is thrown. This feature is available from Selenium 4.5 and later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\nwith pytest.raises(NoSuchElementException):\n    select.select_by_value(\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Root in Firefox with Selenium (Python)\nDESCRIPTION: This Python code snippet shows how to set a custom profile root directory for Firefox using Selenium. It sets the `profile_root` preference using `set_preference` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\noptions.set_preference(\"profile_root\", 'path to profile root directory')\n```\n\n----------------------------------------\n\nTITLE: Setting Script Timeout with Java\nDESCRIPTION: This code snippet demonstrates how to set the script timeout in Java using Selenium WebDriver's Options class. The `setScriptTimeout` method is used to specify the maximum time a script can execute before being terminated. The timeout is set to 30 seconds in this example.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_31\n\nLANGUAGE: java\nCODE:\n```\ndriver.manage().timeouts().scriptTimeout(Duration.ofSeconds(30));\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium CSharp\nDESCRIPTION: This snippet illustrates how to select an option in a Select element by its visible text in C#. It uses the `SelectByText()` method of the SelectElement object. It throws NoSuchElementException if no matching option is found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\nselect.SelectByText(\"Four\");\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window in Selenium\nDESCRIPTION: This code puts the browser window into fullscreen mode using Selenium WebDriver, similar to pressing F11 in most browsers. This will fill the entire screen.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_72\n\nLANGUAGE: Python\nCODE:\n```\ndriver.fullscreen_window()\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid in Standalone Mode (Shell)\nDESCRIPTION: This command starts the Selenium Grid in standalone mode, combining all components into a single process. It is useful for local development, debugging, and quick test runs. The Grid listens for RemoteWebDriver requests on http://localhost:4444 by default.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.en.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar standalone\n```\n\n----------------------------------------\n\nTITLE: Waiting for Downloads - Java\nDESCRIPTION: Demonstrates how to wait for a download to complete using Selenium and CDP in Java. It sets up a download behavior and verifies the download path.  It requires Selenium WebDriver and CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\nString downloadDir = System.getProperty(\"user.dir\") + \"/target\";\n        devTools.send(new Browser.setDownloadBehavior(Optional.of(downloadDir), Optional.of(downloadDir), Optional.of(true)));\n        driver.get(\"http://localhost:8080/download\");\n        Path path = Paths.get(downloadDir, \"download.txt\");\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element w/ Offset (Java)\nDESCRIPTION: This Java code snippet shows how to scroll from an element with a specific offset by a given amount using Selenium's Actions API. Requires Selenium WebDriver and Actions class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"id-of-element\"));\nnew Actions(driver)\n  .scrollFromOrigin(element, 25, 25, 100, 200)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies using CDP in Python\nDESCRIPTION: This Python code demonstrates how to set cookies using the Chrome DevTools Protocol (CDP) in Selenium. It constructs a cookie object with specified name, value, domain, and path, and then uses the `Network.setCookie` method to set the cookie in the browser. This is useful for managing cookies for testing purposes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ncookie = {\"name\": \"foo\", \"value\": \"bar\", \"domain\": \".example.com\", \"path\": \"/\"}\ncdp.execute_cdp(\"Network.enable\", {})\ncdp.execute_cdp(\"Network.setCookie\", cookie)\nadded_cookie = driver.get_cookie(\"foo\")\n```\n\n----------------------------------------\n\nTITLE: Get Active Element Attribute - Kotlin\nDESCRIPTION: This Kotlin code snippet shows how to get the `title` attribute of the currently active element after entering text into Google's search box using Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_38\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.By\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://www.google.com\")\n        driver.findElement(By.cssSelector(\"[name='q']\")).sendKeys(\"webElement\")\n\n        // Get attribute of current active element\n        val attr = driver.switchTo().activeElement().getAttribute(\"title\")\n        print(attr)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Levels in JavaScript\nDESCRIPTION: This snippet demonstrates how to set the logger level in JavaScript. The example sets the level to INFO, which ensures messages of INFO level and above are logged.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.setLevel(logging.Level.INFO)\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium using .NET CLI (C#)\nDESCRIPTION: Installs the Selenium.WebDriver package using the .NET Command Line Interface (CLI). This adds the package as a dependency to the project. This is a command-line alternative to the Package Manager Console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.ja.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Selenium.WebDriver\n```\n\n----------------------------------------\n\nTITLE: Customized Wait - Ruby\nDESCRIPTION: This Ruby snippet demonstrates customizing the wait with a timeout, polling interval, and ignored exceptions, waiting for an element to be displayed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.en.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\nwait = Selenium::WebDriver::Wait.new(timeout: 20, interval: 0.5, ignore: Selenium::WebDriver::Error::NoSuchElementError)\nelement = wait.until do\n  element = driver.find_element(tag_name: 'p')\n  element if element.displayed?\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Node with Specific Port (Java)\nDESCRIPTION: These commands start multiple Node components on the same machine, each listening on a different port. This allows for running multiple browser instances concurrently on a single machine.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.zh-cn.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --port 5555\n```\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --port 6666\n```\n\n----------------------------------------\n\nTITLE: Key Down Action in Selenium (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates performing a key down action using Selenium's Actions API. An Actions object is created, a keyDown action is performed on the Control key, then the 'c' key is sent. Finally, perform() is called to execute these actions, effectively holding down the Control key while sending 'c'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = driver.actions();\nactions.keyDown(Key.CONTROL)\n  .sendKeys('c')\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Initializing Safari Driver with Options (Java)\nDESCRIPTION: This code initializes the Safari driver with basic options. It creates a `SafariOptions` object and passes it to the `SafariDriver` constructor. It requires the Selenium Java dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.ja.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nSafariOptions options = new SafariOptions();\nWebDriver driver = new SafariDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element with Selenium (Ruby)\nDESCRIPTION: This Ruby code snippet demonstrates scrolling to a specific element to bring it into view using Selenium's Actions API. The target element is specified using its ID. Requires Selenium WebDriver and appropriate setup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'id-of-element')\n@driver.action.scroll_to(element).perform\n```\n\n----------------------------------------\n\nTITLE: Getting Element Tag Name with Selenium\nDESCRIPTION: This snippet demonstrates how to retrieve the tag name of an HTML element using Selenium WebDriver. The `tag_name` property is called on the identified element. This returns the HTML tag (e.g., 'input', 'div', 'a').  Dependencies include an initialized WebDriver instance, a loaded webpage, and a found element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ntag_name = search_box.tag_name\n```\n\n----------------------------------------\n\nTITLE: Listening for JavaScript Exceptions with BiDi API in Java\nDESCRIPTION: This Java code snippet demonstrates how to listen for JavaScript exceptions using the Selenium BiDi API. It registers a callback function to process the exception details and prints the exception text to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.en.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nBiDi bidi = ((HasDevTools) driver).getDevTools();\nbidi.getDomains().log().addJavascriptExceptionListener(exception -> {\n  System.out.println(\"Message: \" + exception.getText());\n});\nbidi.getDomains().log().enable();\ndriver.get(\"https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html\");\n```\n\n----------------------------------------\n\nTITLE: Setting Context in Firefox with Selenium (Java)\nDESCRIPTION: This Java snippet shows how to switch to a specific context in Firefox using Selenium.  It switches to the 'chrome' context. Note that geckodriver needs to be started with the argument `--allow-system-access` to switch to `CHROME` context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_50\n\nLANGUAGE: java\nCODE:\n```\n((JavascriptExecutor) driver).executeScript(\"return window\");\ndriver.context(\"chrome\");\n```\n\n----------------------------------------\n\nTITLE: Relative Locators: Locating Element Above\nDESCRIPTION: This code demonstrates how to locate an element above another element using Relative Locators in Selenium 4. It uses the `RelativeLocator.with(By.tagName(\"input\")).above(By.id(\"password\"))` to find an input element that is located above the element with the ID \"password\". This is helpful when direct locators are difficult to create.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet emailLocator = locateWith(By.tagName('input')).above(By.id('password'));\n```\n\n----------------------------------------\n\nTITLE: Check Element Display Selenium Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to check if a specific element is displayed on a webpage using Selenium WebDriver. It uses the `isDisplayed()` method to determine the visibility of the element and returns a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\n//navigates to url\n driver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n //returns true if element is displayed else returns false \n val flag = driver.findElement(By.name(\"email_input\")).isDisplayed()\n```\n\n----------------------------------------\n\nTITLE: Capturing Response Information using CDP in Ruby\nDESCRIPTION: This Ruby code snippet showcases how to capture response information using the Chrome DevTools Protocol (CDP) in Selenium. It enables network interception and sets up a listener for `Network.responseReceived` events to gather details about the responses. The code then navigates to a specific URL and retrieves the response information.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n@driver.execute_cdp 'Network.enable'\n@driver.execute_cdp 'Network.responseReceived', url: 'https://www.example.com'\n@driver.get 'https://www.example.com'\n```\n\n----------------------------------------\n\nTITLE: Exception Handling: Selenium WebDriver (C#)\nDESCRIPTION: This C# snippet demonstrates how to use a `try...finally` block to ensure that the WebDriver instance is always quit, even if an exception occurs during the WebDriver interaction.  The `driver.Quit()` call in the `finally` block guarantees resource cleanup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\ntry {\n    //WebDriver code here...\n} finally {\n    driver.Quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current URL in Ruby\nDESCRIPTION: Retrieves the current URL from the browser's address bar using Selenium WebDriver in Ruby. The WebDriver instance must be initialized and pointed to the desired URL. The URL is then asserted against the expected value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.en.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.get 'https://www.selenium.dev/selenium/web/web-form.html'\nurl = driver.current_url\nexpect(url).to eq('https://www.selenium.dev/selenium/web/web-form.html')\n```\n\n----------------------------------------\n\nTITLE: Move Mouse by Offset - Selenium\nDESCRIPTION: Moves the mouse cursor from its current position by a specified offset. Positive X values move the cursor right, positive Y values move the cursor down. The origin is the top-left corner of the viewport if the cursor hasn't been moved before.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nactions.moveByOffset(30, -10)\n    .pause(Duration.ofSeconds(1))\n    .perform();\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Driver Service Log Level\nDESCRIPTION: This code snippet demonstrates how to set the log level for the Firefox driver service, allowing control over the verbosity of the logs.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_25\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.firefox(log_level: :debug)\n```\n\n----------------------------------------\n\nTITLE: Adding Virtual Authenticator in JavaScript\nDESCRIPTION: This code demonstrates how to add a virtual authenticator to the WebDriver instance using JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  protocol: 'ctap2',\n  domain: 'localhost',\n  userVerified: true,\n  transport: ['usb']\n};\nconst authenticator = await driver.addVirtualAuthenticator(options);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Cookie with Selenium WebDriver (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to delete a cookie by name and by cookie object using Selenium WebDriver in Kotlin. It requires the Selenium WebDriver dependency. The code navigates to a specific URL, adds two cookies, and then deletes the cookie named 'test1' and cookie object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://www.example.com\")\n        driver.manage().addCookie(Cookie(\"test1\", \"cookie1\"))\n        val cookie1 = Cookie(\"test2\", \"cookie2\")\n        driver.manage().addCookie(cookie1)\n\n        // delete a cookie with name 'test1'\n        driver.manage().deleteCookieNamed(\"test1\")\n        \n        // delete cookie by passing cookie object of current browsing context.\n        driver.manage().deleteCookie(cookie1)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Wait - Python\nDESCRIPTION: This Python snippet demonstrates customizing a wait by catching exceptions. It waits for a maximum of 10 seconds, polling every 0.5 seconds, and ignoring `NoSuchElementException`. This makes the wait more robust by handling expected exceptions during the waiting process.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.pt-br.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nwait = WebDriverWait(driver, 10, poll_frequency=0.5, ignored_exceptions=[NoSuchElementException])\nelement = wait.until(lambda x: x.find_element(By.ID, \"foo\"))\n```\n\n----------------------------------------\n\nTITLE: JavaScript Assertion Example\nDESCRIPTION: This snippet demonstrates how to perform an assertion in JavaScript using Mocha and Chai to check if the title of a webpage is as expected.  It verifies the title against an expected value using `expect`. Mocha and Chai are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nit('works', async function() {\n  expect(await driver.getTitle()).to.eq('SeleniumHQ Browser Automation');\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Driver Options - CSharp\nDESCRIPTION: This C# snippet demonstrates initializing ChromeOptions, setting headless mode, and creating a new ChromeDriver instance with these options. This configures the browser to run without a GUI, typically for automated testing.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nvar options = new ChromeOptions();\noptions.AddArgument(\"--headless=new\");\ndriver = new ChromeDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Removing All Credentials in Python\nDESCRIPTION: This Python code removes all credentials from the virtual authenticator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ndevtools.security.remove_all_credentials()\n```\n\n----------------------------------------\n\nTITLE: Directing Logger Output - Python\nDESCRIPTION: This snippet demonstrates how to redirect Selenium logs in Python using a StreamHandler or a FileHandler, overriding the default output to sys.stderr. It involves creating a handler and adding it to the logger.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogger = logging.getLogger('selenium')\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel - Java\nDESCRIPTION: This code snippet demonstrates how to scroll to a specific web element using Selenium's Actions API and Wheel class in Java. It takes a WebElement as input and scrolls the viewport until the bottom of the element is at the bottom of the screen. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"cheese\"));\nnew Actions(driver)\n  .scrollToElement(element)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Driver Service Log File Output\nDESCRIPTION: This code snippet demonstrates how to configure the Firefox driver service to output logs to a specific file. This is useful for debugging and troubleshooting issues with the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.firefox(log: 'geckodriver.log')\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options in Selenium Python\nDESCRIPTION: This snippet demonstrates how to retrieve the selected options from a Select element in Python. It uses the `all_selected_options` property of the Select object, returning a list of WebElements representing the selected options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nselected_options = select.all_selected_options\n```\n\n----------------------------------------\n\nTITLE: Closing Window and Switching Back - Selenium (CSharp)\nDESCRIPTION: Closes the current window and switches back to the original window in Selenium WebDriver using C#. It requires the original window handle to be stored beforehand. The code handles the transition back to the intended window after closing another one. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Close();\ndriver.SwitchTo().Window(originalWindow);\n\n```\n\n----------------------------------------\n\nTITLE: Execute JavaScript - Selenium\nDESCRIPTION: This Python snippet demonstrates how to execute JavaScript code within the current browser context using Selenium WebDriver. It finds an element by CSS selector and then executes JavaScript to retrieve its innerText.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_83\n\nLANGUAGE: Python\nCODE:\n```\n    # Stores the header element\nheader = driver.find_element(By.CSS_SELECTOR, \"h1\")\n\n    # Executing JavaScript to capture innerText of header element\ndriver.execute_script('return arguments[0].innerText', header)\n```\n\n----------------------------------------\n\nTITLE: Inbox Test Assertion Examples in Java\nDESCRIPTION: This Java code provides examples of how assertions can be made in tests using the Inbox page object. It shows how to check if a message with a specific subject is read or unread, emphasizing that tests should be responsible for assertions, not page objects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.en.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic void testMessagesAreReadOrUnread() {\n    Inbox inbox = new Inbox(driver);\n    assertTrue(inbox.isMessageWithSubjectIsUnread(\"I like cheese\"));\n    assertFalse(inbox.isMessageWithSubjectIsUnread(\"I'm not fond of tofu\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Partial Link Text with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a link element on a page using partial link text with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.partialLinkText()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.partialLinkText(\"Official Page\"))\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element by Class Name - Java\nDESCRIPTION: This snippet demonstrates how to find the first element with a specific class name using the Selenium WebDriver in Java. It uses the `findElement` method with `By.className` to locate the element. The result is stored in a `WebElement` object for further interaction.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebElement vegetable = driver.findElement(By.className(\"tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Key Down Action in Selenium (Ruby)\nDESCRIPTION: Demonstrates how to simulate pressing a key using the Actions API in Ruby. This example shows how to press the SHIFT key on an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nelement = @driver.find_element(tag_name: 'input')\nactions = Selenium::WebDriver::Interactions.new(@driver)\nactions.key_down(element, :shift)\nactions.perform\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - JavaScript\nDESCRIPTION: Demonstrates how to retrieve the browser window's position (top-left corner coordinates) in JavaScript using Selenium WebDriver. The code snippets show how to access the x and y coordinates individually and store the dimensions for later use, providing flexibility in obtaining window position information.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nAccess each dimension individually\nawait driver.manage().window().getRect().then(rect => {\n  console.log(rect.x);\n  console.log(rect.y);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n(or) store the dimensions and query them later\nawait driver.manage().window().getRect().then(rect => {\n  let position = rect\n  console.log(position.x);\n  console.log(position.y);\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium Ruby\nDESCRIPTION: This snippet demonstrates how to select an option in a Select element by its index in Ruby. It uses the `select_by` method with `:index` option. The index is zero-based. It raises NoSuchElementException if the index is out of bounds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_33\n\nLANGUAGE: Ruby\nCODE:\n```\nselect.select_by(:index, 2)\n```\n\n----------------------------------------\n\nTITLE: Using try/finally for driver.quit() - Java\nDESCRIPTION: This Java code snippet demonstrates how to use a `try/finally` block to ensure that `driver.quit()` is always called, even if an exception occurs in the `try` block. This is a robust way to guarantee that the browser session is properly closed, preventing resource leaks in various scenarios. This is used outside of a test context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_23\n\nLANGUAGE: java\nCODE:\n```\ntry {\n    //WebDriver code here...\n} finally {\n    driver.quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid in Standalone Mode (Shell)\nDESCRIPTION: This command starts the Selenium Grid in standalone mode, combining all components into a single process. It allows the grid to function fully with a single command, listening for RemoteWebDriver requests on http://localhost:4444 and detecting available drivers in the PATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.pt-br.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-<version>.jar standalone\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Exceptions in C#\nDESCRIPTION: This C# snippet demonstrates how to capture JavaScript exceptions using Selenium's CDP.  It subscribes to the `ExceptionThrown` event, allowing the code to react when JavaScript exceptions are thrown by the browser and prints the exception details.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.zh-cn.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n    [Test]\n    public async Task CanListenToJavaScriptExceptions()\n    {\n        var devTools = ((IHasDevTools)driver).GetDevToolsSession();\n        await devTools.Runtime.Enable(new RuntimeEnableCommandSettings());\n        devTools.Runtime.ExceptionThrown += (sender, eventArgs) => { Console.WriteLine(eventArgs.ExceptionDetails.Text); };\n        driver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Selenium Java\nDESCRIPTION: This Java code snippet retrieves the text of an element with the ID 'justanotherlink' using Selenium WebDriver and asserts that the text equals 'link to a page with images'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_36\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/linked_image.html\");\nWebElement link = driver.findElement(By.id(\"justanotherlink\"));\nassertThat(link.getText()).isEqualTo(\"link to a page with images\");\n```\n\n----------------------------------------\n\nTITLE: Navigate Forward in JavaScript\nDESCRIPTION: This code snippet demonstrates how to navigate forward in the browsing history using Selenium WebDriver's BiDi API in JavaScript. It uses the `browsingContext.forward` method. Requires Selenium version 4.17 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('navigate forward', async () => {\n  const browsingContext = await getBrowsingContext(driver);\n  await browsingContext.forward();\n});\n```\n\n----------------------------------------\n\nTITLE: Example se-config.toml Configuration\nDESCRIPTION: This is an example of the `se-config.toml` file used to configure Selenium Manager. It shows how to set various parameters such as browser versions, driver versions, and mirror URLs. This file allows users to customize Selenium Manager's behavior without using command-line arguments or environment variables.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.en.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[settings]\n# avoid-stats = true\n# trace = true\n# debug = true\n# offline = true\n# timeout = 300\n# proxy = 'myproxy:8080'\n# cache-path = '/custom/cache'\n# ttl = 3600\n# os = 'linux'\n# arch = 'x64'\n\n[browser_drivers]\n# chromedriver-version = '115.0.5795.96'\n# chrome-version = '115'\n# chrome-path = '/opt/homebrew/bin/chromedriver'\n# chromedriver-mirror-url = 'https://chromedriver.storage.googleapis.com'\n\n```\n\n----------------------------------------\n\nTITLE: Closing a Window/Tab and Switching Back in Selenium\nDESCRIPTION: This snippet shows how to close the current window/tab and switch the WebDriver's focus back to the original window/tab. It assumes that the original window handle has been stored in a variable. It requires the Selenium WebDriver library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n    #Close the tab or window\ndriver.close()\n\n    #Switch back to the old tab or window\ndriver.switch_to.window(original_window)\n```\n\n----------------------------------------\n\nTITLE: File Upload using SendKeys JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to upload a file by finding the file input element and using the sendKeys method to specify the file path. This method bypasses the native file upload dialog.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.pt-br.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.get('https://the-internet.herokuapp.com/upload');\nawait driver.findElement(By.id('file-upload')).sendKeys('selenium-snapshot.jpg');\n```\n\n----------------------------------------\n\nTITLE: Chaining Relative Locators (JavaScript)\nDESCRIPTION: This snippet demonstrates how to chain relative locators to locate a button element that is below the element with the ID 'email' and to the right of the element with the ID 'cancel' using Selenium's relative locators in JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_65\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet submitLocator = locateWith(By.tagName('button')).below(By.id('email')).toRightOf(By.id('cancel'));\n```\n\n----------------------------------------\n\nTITLE: Creating a Pause in Actions API - Ruby\nDESCRIPTION: This Ruby snippet demonstrates creating a pause between actions in Selenium using the Actions API.  It navigates to a web page, creates an action chain, adds a pause of 5 seconds, and performs the action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.ja.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.navigate.to 'https://selenium.dev/selenium/web/mouse_interaction.html'\n\naction = driver.action\naction.pause(5)\naction.perform\n```\n\n----------------------------------------\n\nTITLE: Initializing Safari Driver with Options (Ruby)\nDESCRIPTION: This Ruby code initializes the Safari driver with basic options. It creates a `Selenium::WebDriver::Options` object and passes it to the `Selenium::WebDriver.for` method. It requires the Selenium Ruby gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.ja.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Options.safari\ndriver = Selenium::WebDriver.for :safari, options: options\n```\n\n----------------------------------------\n\nTITLE: Clear Element Ruby\nDESCRIPTION: This code snippet demonstrates how to clear a text field using Selenium WebDriver in Ruby. It finds an element by its name attribute ('email_input') and then clears the field. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.find_element(name: 'email_input').clear\n```\n\n----------------------------------------\n\nTITLE: Setting up WebDriver in Java\nDESCRIPTION: This code snippet demonstrates how to set up a WebDriver instance using ChromeDriver in Java.  It initializes the driver and navigates to a specific URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate WebDriver driver;\nprivate final String url = \"https://www.selenium.dev/\";\n\n@BeforeEach\npublic void setup() {\n    driver = new ChromeDriver();\n    driver.get(url);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current URL with Selenium\nDESCRIPTION: This snippet retrieves the current URL of the webpage loaded in the browser using Selenium WebDriver. It demonstrates how to access the current URL in different programming languages. Dependencies: Selenium WebDriver library for the respective language.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.zh-cn.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ndriver.getCurrentUrl();\n```\n\n----------------------------------------\n\nTITLE: Find Element Using CSS Selector - Java\nDESCRIPTION: This snippet demonstrates how to find an element using a CSS selector in Java with Selenium WebDriver. It leverages the `findElement` method with `By.cssSelector` to locate the element based on the provided CSS selector string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nWebElement fruit = driver.findElement(By.cssSelector(\"#fruits .tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Element Submission with Selenium\nDESCRIPTION: This snippet demonstrates how to submit an HTML form element using Selenium WebDriver. The 'submit()' method is called on the identified element. Dependencies include an initialized WebDriver instance, a loaded webpage, and a found element (e.g., a search box).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nsearch_box.submit()\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to Eager in CSharp\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'eager' in C#. The WebDriver waits until the 'DOMContentLoaded' event fires.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_16\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace pageLoadStrategy {\n  class pageLoadStrategy {\n    public static void Main(string[] args) {\n      var chromeOptions = new ChromeOptions();\n      chromeOptions.PageLoadStrategy = PageLoadStrategy.Eager;\n      IWebDriver driver = new ChromeDriver(chromeOptions);\n      try {\n        driver.Navigate().GoToUrl(\"https://example.com\");\n      } finally {\n        driver.Quit();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Quitting Driver Session - Python\nDESCRIPTION: This Python snippet demonstrates how to quit a Selenium driver session. It uses the `driver.quit()` method to close all browser windows and terminate the WebDriver session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.en.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Driver Log to Console Output\nDESCRIPTION: This code configures the ChromeDriver service to output logs to the console's standard output. This allows real-time monitoring of ChromeDriver's activity and can be useful for debugging.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nservice = Service(log_output=sys.stdout)\n```\n\n----------------------------------------\n\nTITLE: Getting All Options in Selenium Kotlin\nDESCRIPTION: This snippet shows how to retrieve all options from a Select element in Kotlin. It uses the `options` property of the Select object, returning a list of WebElements representing each option.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nval options: List<WebElement> = select.options\n```\n\n----------------------------------------\n\nTITLE: Finding Elements From Element - Python\nDESCRIPTION: This code snippet demonstrates finding elements within a parent element in Python using Selenium. It retrieves a parent 'div' and then finds its child 'p' elements. It also shows an example to retrieve children of 'ul' with tag 'li' using XPATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Chrome()\ndriver.get(\"https://www.example.com\")\n##get elements from parent element using TAG_NAME\n\n    # Get element with tag name 'div'\nelement = driver.find_element(By.TAG_NAME, 'div')\n\n    # Get all the elements available with tag name 'p'\nelements = element.find_elements(By.TAG_NAME, 'p')\nfor e in elements:\n    print(e.text)\n\n##get elements from parent element using XPATH\n##NOTE: in order to utilize XPATH from current element, you must add \".\" to beginning of path\n\n    # Get first element of tag 'ul'\nelement = driver.find_element(By.XPATH, '//ul')\n\n    # get children of tag 'ul' with tag 'li'\nelements  = driver.find_elements(By.XPATH, './/li')\nfor e in elements:\n    print(e.text)\n```\n\n----------------------------------------\n\nTITLE: Setting Log Output to File - Java\nDESCRIPTION: Demonstrates setting the log output to a file in Java using EdgeDriverService.\nThis allows capturing the Edge driver logs for debugging and analysis.\nDependencies: Selenium WebDriver, EdgeDriverService, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_26\n\nLANGUAGE: Java\nCODE:\n```\nEdgeDriverService service = new EdgeDriverService.Builder()\n    .withLogFile(new File(\"edge.log\"))\n    .build();\nEdgeDriver driver = new EdgeDriver(service, options);\n```\n\n----------------------------------------\n\nTITLE: Asserting Title with Selenium\nDESCRIPTION: This code snippet demonstrates how to assert the title of a webpage using Selenium and pytest in Python. It retrieves the title and checks if it matches the expected value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntitle = driver.title\nassert title == \"SeleniumHQ Browser Automation\"\n```\n\n----------------------------------------\n\nTITLE: WebDriver Quit with try/finally - JavaScript\nDESCRIPTION: This JavaScript snippet uses a `try/finally` block to ensure that the WebDriver session is always closed, even if an exception occurs within the `try` block. The `await driver.quit()` method is called in the `finally` block. Asynchronous execution is required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n    //WebDriver code here...\n} finally {\n    await driver.quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - Selenium WebDriver - Java\nDESCRIPTION: This snippet sets the size of the browser window to 1024x768 pixels using the Selenium WebDriver API in Java.  It uses the Dimension class to specify the new window size. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().window().setSize(new Dimension(1024, 768));\n```\n\n----------------------------------------\n\nTITLE: Initializing CDP Connection in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates establishing a connection to CDP using Selenium. It initializes a driver, accesses the devtools and creates a session. This is a prerequisite for sending commands directly to the browser via CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/_index.zh-cn.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'works with a block' do\n  @driver.devtools.create_session do |devtools|\n    expect(devtools).to be_a Selenium::DevTools\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Python Pytest Requirement\nDESCRIPTION: This snippet demonstrates how to add pytest as a dependency to a Python project.  It should be added to the `requirements.txt` file to manage project dependencies. Use `pip install -r requirements.txt` to install.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Refactoring Page Object with LoadableComponent and PageFactory in Java\nDESCRIPTION: This code refactors the Page Object using `LoadableComponent` and `PageFactory` to improve maintainability. It uses `@FindBy` annotations to locate elements and encapsulates the navigation logic within the `load` method.  `PageFactory.initElements` initializes the WebElement fields.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.en.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.webdriver;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\nimport org.openqa.selenium.support.PageFactory;\n\nimport static junit.framework.Assert.assertTrue;\n\npublic class EditIssue extends LoadableComponent<EditIssue> {\n\n  private final WebDriver driver;\n  \n  // By default the PageFactory will locate elements with the same name or id\n  // as the field. Since the issue_title element has an id attribute of \"issue_title\"\n  // we don't need any additional annotations.\n  private WebElement issue_title;\n  \n  // But we'd prefer a different name in our code than \"issue_body\", so we use the\n  // FindBy annotation to tell the PageFactory how to locate the element.\n  @FindBy(id = \"issue_body\") private WebElement body;\n  \n  public EditIssue(WebDriver driver) {\n    this.driver = driver;\n    \n    // This call sets the WebElement fields.\n    PageFactory.initElements(driver, this);\n  }\n\n  @Override\n  protected void load() {\n    driver.get(\"https://github.com/SeleniumHQ/selenium/issues/new?assignees=&labels=I-defect%2Cneeds-triaging&projects=&template=bug-report.yml&title=%5B%F0%9F%90%9B+Bug%5D%3A+\");\n  }\n\n  @Override\n  protected void isLoaded() throws Error {\n    String url = driver.getCurrentUrl();\n    assertTrue(\"Not on the issue entry page: \" + url, url.endsWith(\"/new\"));\n  }\n\n  public void setHowToReproduce(String howToReproduce) {\n    WebElement field = driver.findElement(By.id(\"issue_form_repro-command\"));\n    clearAndType(field, howToReproduce);\n  }\n\n  public void setLogOutput(String logOutput) {\n    WebElement field = driver.findElement(By.id(\"issue_form_logs\"));\n    clearAndType(field, logOutput);\n  }\n\n  public void setOperatingSystem(String operatingSystem) {\n    WebElement field = driver.findElement(By.id(\"issue_form_operating-system\"));\n    clearAndType(field, operatingSystem);\n  }\n\n  public void setSeleniumVersion(String seleniumVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_selenium-version\"));\n    clearAndType(field, logOutput);\n  }\n\n  public void setBrowserVersion(String browserVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_browser-versions\"));\n    clearAndType(field, browserVersion);\n  }\n\n  public void setDriverVersion(String driverVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_browser-driver-versions\"));\n    clearAndType(field, driverVersion);\n  }\n\n  public void setUsingGrid(String usingGrid) {\n    WebElement field = driver.findElement(By.id(\"issue_form_selenium-grid-version\"));\n    clearAndType(field, usingGrid);\n  }\n\n  public IssueList submit() {\n    driver.findElement(By.cssSelector(\"button[type='submit']\")).click();\n    return new IssueList(driver);\n  }\n\n  private void clearAndType(WebElement field, String text) {\n    field.clear();\n    field.sendKeys(text);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigate Back with Selenium (Kotlin)\nDESCRIPTION: This snippet demonstrates how to navigate back in the browser's history using Selenium WebDriver in Kotlin. It calls the `navigate().back()` method. It requires an initialized WebDriver instance and a browser history.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.navigate().back()\n```\n\n----------------------------------------\n\nTITLE: Key Up Action in Selenium (JavaScript)\nDESCRIPTION: Demonstrates how to simulate releasing a key using the Actions API in JavaScript. This example shows how to release the SHIFT key on an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst element = await driver.findElement(By.tagName('input'));\nconst actions = driver.actions({async: true});\nawait actions.keyDown(Key.SHIFT, element).sendKeys('text').keyUp(Key.SHIFT, element)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Resident Credential in Python\nDESCRIPTION: This snippet demonstrates how to create a non-resident (stateless) credential in Python. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\ndevtools.add_credential()\n```\n\n----------------------------------------\n\nTITLE: Closing Window and Switching Back - Selenium WebDriver\nDESCRIPTION: Illustrates how to close the current window or tab and switch back to the previously active window using Selenium WebDriver. It's crucial to switch back to a valid window handle to avoid a 'No Such Window Exception'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n    #Close the tab or window\ndriver.close()\n\n    #Switch back to the old tab or window\ndriver.switch_to.window(original_window)\n\n```\n\n----------------------------------------\n\nTITLE: Custom Capabilities Configuration TOML\nDESCRIPTION: Configures a Selenium Grid node with custom capabilities to match specific node requirements. These capabilities must be set on all nodes and included in all session requests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.ja.md#_snippet_8\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\ndetect-drivers = false\n\n[[node.driver-configuration]]\ndisplay-name = \"firefox\"\nstereotype = '{\"browserName\": \"firefox\", \"platformName\": \"macOS\", \"browserVersion\":\"96\", \"networkname:applicationName\":\"node_1\", \"nodename:applicationName\":\"app_1\" }'\nmax-sessions = 5\n```\n\n----------------------------------------\n\nTITLE: Executing CDP commands in Python\nDESCRIPTION: This Python snippet demonstrates how to execute CDP commands using the `execute_cdp_cmd` method in Selenium. It initializes a Chrome WebDriver and retrieves browser performance metrics. Requires Selenium and Chrome driver dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/_index.ja.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Chrome()\n        performance_metrics = driver.execute_cdp_cmd(\n            'Performance.getMetrics',\n            {}\n        )\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Displayed in Python\nDESCRIPTION: This code snippet demonstrates how to check if a web element is displayed on a webpage using Selenium WebDriver in Python. It uses the `is_displayed()` method of the WebElement class. The method returns `True` if the element is displayed, and `False` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nemail_input = driver.find_element(By.NAME, \"email_input\")\nassert email_input.is_displayed() is True\n```\n\n----------------------------------------\n\nTITLE: Going Back in Browser History (Kotlin)\nDESCRIPTION: Demonstrates how to navigate back in the browser history using Selenium WebDriver in Kotlin. The driver.navigate().back() method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\ndriver.navigate().back()\n```\n\n----------------------------------------\n\nTITLE: Switching to New Window - Selenium WebDriver (CSharp)\nDESCRIPTION: Demonstrates how to switch to a new window or tab in Selenium WebDriver using C#. It stores the original window handle, opens a new window by clicking a link, and iterates through all window handles to find the new one. Dependencies include Selenium WebDriver and NUnit for assertions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\nstring originalWindow = driver.CurrentWindowHandle;\nAssert.That(originalWindow, Is.Not.Null);\ndriver.FindElement(By.LinkText(\"new window\")).Click();\nwait.Until(d => d.WindowHandles.Count == 2);\nforeach (var window in driver.WindowHandles)\n{\n    if (originalWindow != window)\n    {\n        driver.SwitchTo().Window(window);\n        break;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Get Active Element Attribute in Selenium WebDriver - JavaScript\nDESCRIPTION: This JavaScript code retrieves the 'title' attribute of the active element after navigating to Google and entering text into the search box. It uses the 'selenium-webdriver' npm package. This code initializes a ChromeDriver, navigates to a website, finds the search input using CSS selector, and types text. Finally it fetches attribute.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {Builder, By} = require('selenium-webdriver');\n\n  (async function example() {\n      let driver = await new Builder().forBrowser('chrome').build();\n      await driver.get('https://www.google.com');\n      await  driver.findElement(By.css('[name=\"q\"]')).sendKeys(\"webElement\");\n\n      // Get attribute of current active element\n      let attr = await driver.switchTo().activeElement().getAttribute(\"title\");\n      console.log(`${attr}`)\n  })();\n```\n\n----------------------------------------\n\nTITLE: Get Element Text in C#\nDESCRIPTION: This code snippet demonstrates how to retrieve the text of a web element using Selenium WebDriver in C#. It uses the `Text` property of the IWebElement interface. The property returns the visible text of the element as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_38\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"justanotherlink\"));\nstring text = element.Text;\nAssert.That(text, Is.EqualTo(\"just another link\"));\n```\n\n----------------------------------------\n\nTITLE: GraphQL: Querying Grid maxSession and sessionCount (curl)\nDESCRIPTION: This curl command sends a GraphQL query to the Selenium Grid endpoint to retrieve the `maxSession` and `sessionCount` values from the `grid` object. It requires the `curl` command-line tool and access to the Grid's GraphQL endpoint. The response will contain the maximum number of sessions and the current session count.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.ja.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\": \"{ grid { maxSession, sessionCount } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Creating a Pause in Actions API - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates creating a pause between actions in Selenium using the Actions API.  It navigates to a webpage, creates an actions object, adds a pause of 5 seconds, and then performs the action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.ja.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://selenium.dev/selenium/web/mouse_interaction.html');\n\nconst actions = driver.actions();\nawait actions.pause(5000).perform();\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window - Selenium\nDESCRIPTION: This snippet demonstrates how to set the browser window to fullscreen mode using Selenium WebDriver, similar to pressing F11 in most browsers.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_70\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.manage().window().fullscreen();\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method with driver.quit() - unittest (Python)\nDESCRIPTION: This Python code snippet demonstrates how to define a `tearDown` method in a unittest TestCase to call `self.driver.quit()`. This ensures that the browser session is properly closed after each test, preventing resource leaks. Python's unittest module is a standard testing framework.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n    # unittest teardown\n    # https://docs.python.org/3/library/unittest.html?highlight=teardown#unittest.TestCase.tearDown\ndef tearDown(self):\n    self.driver.quit()\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Content - JavaScript\nDESCRIPTION: Demonstrates how to retrieve the text content of a web element using JavaScript and Selenium WebDriver. The `getText()` method returns the rendered text of the element. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst link = await driver.findElement(By.id('justanotherlink'))\nexpect(await link.getText()).toBe('Another link')\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Java\nDESCRIPTION: Demonstrates how to initialize a Select object in Java using a WebElement representing the select element. Requires org.openqa.selenium.WebElement and org.openqa.selenium.support.ui.Select dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nWebElement selectElement = driver.findElement(By.name(\"selectomatic\"));\nSelect select = new Select(selectElement);\n```\n\n----------------------------------------\n\nTITLE: Comparing Color Objects - Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to directly compare Color objects in Ruby using the `==` operator. It checks if the background color of a login button is equal to the predefined HOTPINK color.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_22\n\nLANGUAGE: Ruby\nCODE:\n```\nassert(login_button_background_colour == HOTPINK)\n```\n\n----------------------------------------\n\nTITLE: Getting Current URL in Java\nDESCRIPTION: Retrieves the current URL from the browser's address bar using Selenium's WebDriver. Requires a WebDriver instance to be initialized and navigated to the desired page. Returns the URL as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.en.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/web-form.html\");\nString url = driver.getCurrentUrl();\nassertThat(url).isEqualTo(\"https://www.selenium.dev/selenium/web/web-form.html\");\n```\n\n----------------------------------------\n\nTITLE: Getting Performance Metrics - Java\nDESCRIPTION: Demonstrates how to retrieve performance metrics using Selenium and CDP in Java. It gets the metrics and prints them to the console after navigating to a page. Requires Selenium WebDriver and CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\nList<Performance.Metric> metrics = devTools.send(new Performance.GetMetrics());\n        metrics.forEach(metric -> System.out.println(metric.getName() + \" = \" + metric.getValue()));\n```\n\n----------------------------------------\n\nTITLE: Get Attribute Value Ruby\nDESCRIPTION: This Ruby code demonstrates retrieving the 'value' attribute of an email input field using Selenium WebDriver. It finds the element using its name, retrieves the attribute's value with `attribute('value')`, and then asserts the value to match the expected string. Requires Selenium WebDriver and RSpec for testing.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_45\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'should get the element attribute' do\n  attribute = driver.find_element(name: 'email_input').attribute('value')\n  expect(attribute).to eq('diana.prince@selenium.dev')\nend\n```\n\n----------------------------------------\n\nTITLE: Refreshing the Current Page (Java)\nDESCRIPTION: Demonstrates how to refresh the current page using Selenium WebDriver in Java. The driver.navigate().refresh() method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\ndriver.navigate().refresh();\n```\n\n----------------------------------------\n\nTITLE: Response Started Event - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to listen for the 'network.responseStarted' event and log information about the response.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.on('network.responseStarted', params => {\n  console.log(params.response);\n});\n```\n\n----------------------------------------\n\nTITLE: Intercepting Request - CSharp\nDESCRIPTION: Demonstrates how to intercept requests using Selenium and CDP in C#. It captures and prints the URL of each request intercepted by the `Fetch.requestPaused` event. Requires Selenium WebDriver with CDP support.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_11\n\nLANGUAGE: CSharp\nCODE:\n```\nEventHandler<Fetch.RequestPausedEventArgs> requestPausedHandler = (sender, e) =>\n            {\n                Console.WriteLine(e.Request.Url);\n                ((IHasCdp)driver).ExecuteCdpCommand(\"Fetch.continueRequest\", new Dictionary<string, object>() { { \"requestId\", e.RequestId } });\n            };\n            session.Fetch.RequestPaused += requestPausedHandler;\n```\n\n----------------------------------------\n\nTITLE: Get Active Element Attribute - Java\nDESCRIPTION: This Java code retrieves the 'title' attribute of the currently active element on a webpage.  It initializes a ChromeDriver, navigates to Google, enters \"webElement\" into the search field, and then retrieves the 'title' attribute of the active element. The title is then printed to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_34\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.*;\n  import org.openqa.selenium.chrome.ChromeDriver;\n\n  public class activeElementTest {\n    public static void main(String[] args) {\n      WebDriver driver = new ChromeDriver();\n      try {\n        driver.get(\"http://www.google.com\");\n        driver.findElement(By.cssSelector(\"[name='q']\")).sendKeys(\"webElement\");\n\n        // Obter atributo do elemento atualmente ativo\n        String attr = driver.switchTo().activeElement().getAttribute(\"title\");\n        System.out.println(attr);\n      } finally {\n        driver.quit();\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Content - Java\nDESCRIPTION: This snippet demonstrates how to get the text content of a web element using Selenium WebDriver in Java. It finds an element by ID and uses the getText() method to retrieve its text content as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nWebElement link = driver.findElement(By.id(\"justanotherlink\"));\nString text = link.getText();\nassertThat(text).isEqualTo(\"Just another link\");\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Location - Python\nDESCRIPTION: This snippet shows how to specify the driver location using Python. It uses the `service` argument in `webdriver.Chrome` to point to the ChromeDriver executable. Requires the Selenium library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.pt-br.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Chrome(service=Service(executable_path=\"/path/to/chromedriver\"))\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait with Lambda - Java\nDESCRIPTION: This Java snippet shows how to implement an explicit wait using a lambda expression.  It creates a `WebDriverWait` instance with a specified timeout and then uses the `until` method to wait for a condition defined by the lambda.  The lambda checks if the element with ID 'message' is displayed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.pt-br.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = new WebDriverWait(driver, Duration.ofSeconds(10))\n                .until(d -> d.findElement(By.id(\"message\")).isDisplayed());\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Current Pointer Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse cursor by a specified offset from its current position using Selenium WebDriver.  It's available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_58\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.actions().move({x: 30, y: -10}).perform();\n```\n\n----------------------------------------\n\nTITLE: Check Element Selected Selenium CSharp\nDESCRIPTION: This C# snippet demonstrates how to check if a checkbox element is selected using Selenium WebDriver, asserting that the element is selected.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/inputs.html\");\nIWebElement element = driver.FindElement(By.Name(\"checkbox_input\"));\n\nAssert.That(element.Selected, Is.True);\n```\n\n----------------------------------------\n\nTITLE: Navigate Forward with Selenium (Ruby)\nDESCRIPTION: This snippet demonstrates how to navigate forward in the browser's history using Selenium WebDriver in Ruby.  It calls the `forward` method on the driver instance. This requires an initialized Selenium WebDriver instance and a browser forward history.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.navigate.forward\n```\n\n----------------------------------------\n\nTITLE: Navigate Forward with Selenium (JavaScript)\nDESCRIPTION: This snippet demonstrates how to navigate forward in the browser's history using Selenium WebDriver in JavaScript. It utilizes the `forward()` method of the WebDriver's navigation interface. It requires an initialized WebDriver instance and a browser forward history.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.navigate().forward();\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium - JavaScript\nDESCRIPTION: This snippet demonstrates how to set an implicit wait in Selenium using JavaScript. The `implicitlyWait` method of the `driver.manage().setTimeouts()` object is called, specifying the duration in milliseconds. This configures the driver to wait for the designated time period when attempting to locate elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.pt-br.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.manage().setTimeouts({ implicit: 10000 });\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Current Position in Selenium\nDESCRIPTION: This code snippet shows how to move the mouse pointer from its current position by a specified offset using Selenium WebDriver. It uses the `move_by_offset` method. The position will be in the upper-left corner of the viewport if the mouse hasn't moved before. Note that pointer position does not change when the page is scrolled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nActionChains(driver).move_by_offset(30, -10).perform()\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel Python\nDESCRIPTION: This snippet demonstrates how to scroll to a specific element within a web page using Selenium's Wheel actions in Python. It takes a WebElement as input and scrolls the viewport such that the bottom of the element is at the bottom of the screen. This is often needed before interacting with an element that might not be initially visible in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ntarget = driver.find_element(By.ID, \"target\")\nactions = ActionBuilder(driver)\nactions.scroll_to_element(target)\nactions.perform()\n```\n\n----------------------------------------\n\nTITLE: Find Element by Partial Link Text - Kotlin\nDESCRIPTION: This snippet shows how to locate a link element using a partial match of its link text in Kotlin. It initializes a ChromeDriver and uses the `findElement` method with `By.partialLinkText` to find the link containing the text 'Official Page'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.partialLinkText(\"Official Page\"))\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - Selenium WebDriver - Python\nDESCRIPTION: This snippet retrieves the width and height of the browser window using the Selenium WebDriver API in Python. It shows two ways to get the dimensions: getting each dimension separately using the get method on the dictionary returned by get_window_size or storing the dimensions in a variable and querying them later. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n    # 分别获取每个尺寸\nwidth = driver.get_window_size().get(\"width\")\nheight = driver.get_window_size().get(\"height\")\n\n    # 或者存储尺寸并在以后查询它们\nsize = driver.get_window_size()\nwidth1 = size.get(\"width\")\nheight1 = size.get(\"height\")\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Element Ruby\nDESCRIPTION: This code snippet demonstrates how to send keys to a web element using Selenium WebDriver in Ruby. It finds an element by its name attribute ('email_input') and sends the string 'admin@localhost.dev' to it. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.find_element(name: 'email_input').send_keys('admin@localhost.dev')\n```\n\n----------------------------------------\n\nTITLE: Handle Confirm Popup in Ruby\nDESCRIPTION: This Ruby code demonstrates interacting with a JavaScript confirm using Selenium WebDriver. It retrieves the confirm text and dismisses it. A link click triggers the confirm.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.pt-br.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.find_element(:link_text, 'See a sample confirm').click\nwait = Selenium::WebDriver::Wait.new(:timeout => 10)\nalert = wait.until { driver.switch_to.alert }\ntext = alert.text\nalert.dismiss\n```\n\n----------------------------------------\n\nTITLE: Get Credential in Java\nDESCRIPTION: This Java code gets the credential owned by the authenticator and verifies the User Id.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nList<GetCredentialResponse> credentials = devTools.getDomains().webAuthn().getCredentials();\nboolean found = false;\nfor (GetCredentialResponse credential : credentials) {\n  if (credential.getUserId().equals(Base64.getEncoder().encodeToString(\"user4\".getBytes(StandardCharsets.UTF_8)))) {\n    found = true;\n    break;\n  }\n}\nassertThat(found).isTrue();\n\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Content - Python\nDESCRIPTION: Demonstrates how to retrieve the text content of a web element using Python and Selenium WebDriver. The `text` attribute returns the rendered text of the element. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\nlink = driver.find_element(By.ID, \"justanotherlink\")\nassert link.text == \"Another link\"\n```\n\n----------------------------------------\n\nTITLE: Navigate Forward with Selenium (Python)\nDESCRIPTION: This snippet demonstrates how to navigate forward in the browser's history using Selenium WebDriver in Python. It calls the `forward()` method on the driver. This requires an initialized Selenium WebDriver instance and a browser forward history.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ndriver.forward()\n```\n\n----------------------------------------\n\nTITLE: Pausing Actions API in Kotlin\nDESCRIPTION: This code snippet demonstrates how to pause between actions using the Actions API in Kotlin. It creates an Actions object, moves to an element, pauses for a specified duration, and then performs the actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.pt-br.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval actions = Actions(driver)\nactions.moveToElement(element)\n    .pause(Duration.ofSeconds(1))\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - Selenium WebDriver - Kotlin\nDESCRIPTION: This snippet sets the size of the browser window to 1024x768 pixels using the Selenium WebDriver API in Kotlin.  It uses the Dimension class to specify the new window size. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.manage().window().size = Dimension(1024, 768)\n```\n\n----------------------------------------\n\nTITLE: Getting a Named Cookie with Selenium WebDriver (CSharp)\nDESCRIPTION: This code snippet demonstrates how to retrieve a cookie by name using Selenium WebDriver in C#. It requires the Selenium WebDriver NuGet package. The code navigates to a specific URL, adds a cookie named 'foo' with the value 'bar', and then retrieves the cookie by name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\ndriver.Manage().Cookies.AddCookie(new Cookie(\"foo\", \"bar\"));\n\n// Get cookie details with named cookie 'foo'\nCookie cookie = driver.Manage().Cookies.GetCookieNamed(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: WebDriver Quit with try/finally - CSharp\nDESCRIPTION: This C# snippet uses a `try/finally` block to ensure that the WebDriver session is always closed, even if an exception occurs within the `try` block. The `driver.Quit()` method is called in the `finally` block.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\ntry {\n    //WebDriver code here...\n} finally {\n    driver.Quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Element Submission with Selenium\nDESCRIPTION: This snippet demonstrates how to submit an HTML form element using Selenium WebDriver. The 'submit()' method is called on the identified element. Dependencies include an initialized WebDriver instance, a loaded webpage, and a found element (e.g., a search box).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nsearch_box.submit\n```\n\n----------------------------------------\n\nTITLE: Maximize Window in Selenium\nDESCRIPTION: This code maximizes the browser window using Selenium WebDriver. It makes the window fill the screen, excluding OS menus and toolbars. The method is available across different programming languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_62\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.window.maximize\n```\n\n----------------------------------------\n\nTITLE: Quitting the Selenium Session\nDESCRIPTION: This snippet demonstrates how to properly close the Selenium WebDriver session. The `quit()` method closes all browser windows and ends the WebDriver process. It is important to call this method at the end of the script to release resources.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_47\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Directing Logger Output to a File - Java\nDESCRIPTION: This snippet shows how to add a file handler to direct Selenium logs to a file in Java. It overrides the default behavior of sending logs to System.err.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.IOException;\nimport java.util.logging.*;\n```\n\n----------------------------------------\n\nTITLE: Disabling EdgeDriver Build Check in Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to disable the build check for EdgeDriver. Note that this is an unsupported feature.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :edge, service_args: ['--disable-build-check']\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Current Position in Selenium\nDESCRIPTION: This code snippet shows how to move the mouse pointer from its current position by a specified offset using Selenium WebDriver. It uses the `moveByOffset` method. The position will be in the upper-left corner of the viewport if the mouse hasn't moved before. Note that pointer position does not change when the page is scrolled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nActions(driver).moveByOffset(30, -10).perform()\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy in Kotlin\nDESCRIPTION: This Kotlin code configures a proxy server for Selenium WebDriver. Replace <HOST:PORT> with your actual proxy server address.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_54\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.Proxy\nimport org.openqa.selenium.WebDriver\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.chrome.ChromeOptions\n\nclass proxyTest {\nfun main() {\n\n        val proxy = Proxy()\n        proxy.setHttpProxy(\"<HOST:PORT>\")\n        val options = ChromeOptions()\n        options.setCapability(\"proxy\", proxy)\n        val driver: WebDriver = ChromeDriver(options)\n        driver[\"https://www.google.com/\"]\n        driver.manage().window().maximize()\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Check Element Display Selenium Java\nDESCRIPTION: This code snippet demonstrates how to check if a specific element is displayed on a webpage using Selenium WebDriver in Java. It uses the `isDisplayed()` method to determine the visibility of the element and returns a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\");\nWebElement element = driver.findElement(By.name(\"email_input\"));\nBoolean displayed = element.isDisplayed();\n\nassertThat(displayed).isTrue();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Orientation using PrintOptions in Python\nDESCRIPTION: This code snippet demonstrates how to set the page orientation to landscape using the PrintOptions class in Python. The `orientation` attribute is set to `Orientation.LANDSCAPE`. The `orientation` attribute is retrieved and confirmed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.orientation = Orientation.LANDSCAPE\nassert print_options.orientation == Orientation.LANDSCAPE\n```\n\n----------------------------------------\n\nTITLE: Creating a Permanent Credential in Java\nDESCRIPTION: This snippet shows how to create a permanent (resident) credential using the virtual authenticator in Java. It calls addCredential with the parameters for creating a permanent credential.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\ndevTools.getDomains().security().addCredential(\n    new Credential(\"rpId\", \"user1\", PublicKeyCredentialType.PUBLIC_KEY));\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Viewport in Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse pointer from the upper-left corner of the current viewport by a specified offset using Selenium WebDriver. It utilizes the `moveByOffset` method to achieve this. No specific dependencies beyond the Selenium WebDriver library are needed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nnew Actions(driver)\n  .moveByOffset(30, 40)\n  .pause(Duration.ofSeconds(1))\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Press Key Action in Selenium\nDESCRIPTION: Demonstrates how to simulate pressing a specific key using Selenium's Actions API. This involves creating an Actions object, using the keyDown method to press a key, and then performing the action. The key to press is specified using the Keys enum/class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval actions = Actions(driver)\nactions.keyDown(Keys.SHIFT)\n    .sendKeys(\"text\")\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium Python\nDESCRIPTION: This snippet shows how to select an option in a Select element by its visible text in Python. It uses the `select_by_visible_text()` method of the Select object. It raises NoSuchElementException if no matching option is found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nselect.select_by_visible_text(\"Four\")\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Node with Firefox and Edge\nDESCRIPTION: This command starts a Selenium node with a maximum of 4 sessions, sets the log level to fine, specifies port 7777, and restricts driver implementations to Firefox and Edge.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar node --max-sessions 4 --log-level \"fine\" --port 7777 --driver-implementation \"firefox\" --driver-implementation \"edge\"\n```\n\n----------------------------------------\n\nTITLE: Locating Element Near Another - JavaScript\nDESCRIPTION: Locates an input element near the element with ID 'lbl-email' in JavaScript. Uses `locateWith` and `near`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet emailLocator = locateWith(By.tagName('input')).near(By.id('lbl-email'));\n```\n\n----------------------------------------\n\nTITLE: Setting Detach Option to Keep Browser Open - Ruby\nDESCRIPTION: Demonstrates setting the detach option in Ruby to keep the Edge browser open after the script finishes.\nThis allows inspecting the browser state after the test.\nDependencies: Selenium WebDriver, Edge, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\noptions['detach'] = true\n```\n\n----------------------------------------\n\nTITLE: Verifying Unicorn Existence - CSharp\nDESCRIPTION: This CSharp snippet demonstrates how to verify the existence of a Unicorn using the `Exists()` method on the `unicornConfirmationPage` object. It takes the `sparkles` object as input, which specifies the attributes to check. `Assert.True()` is used to assert that the Unicorn exists with all specified attributes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\n// The exists() method from UnicornConfirmationPage will take the Sparkles \n// object--a specification of the attributes you want to see, and compare\n// them with the fields on the page.\nAssert.True(unicornConfirmationPage.Exists(sparkles), \"Sparkles should have been created, with all attributes intact\");\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium (Java)\nDESCRIPTION: Demonstrates sending keys to a specific element using the Actions API in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nWebElement input = driver.findElement(By.tagName(\"input\"));\nActions actions = new Actions(driver);\nactions.sendKeys(input, \"text\")\n    .perform();\n```\n\n----------------------------------------\n\nTITLE: Find Element by Partial Link Text - C#\nDESCRIPTION: This snippet shows how to locate a link element using a partial match of its link text in C#. It initializes a ChromeDriver and uses the `FindElement` method with `By.PartialLinkText` to find the link containing the text 'Official Page'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_21\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.PartialLinkText(\"Official Page\"));\n```\n\n----------------------------------------\n\nTITLE: Pausing Actions in Selenium (Python)\nDESCRIPTION: This code snippet shows how to pause between actions using Python. It uses the `ActionChains` class to create a chain of actions with pauses. Requires a WebDriver instance and ActionChains class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver import ActionChains\nfrom selenium.webdriver.common.actions import pause\nfrom datetime import timedelta\n\nactions = ActionChains(driver)\nactions.pause(pause(timedelta(seconds=2)))\nactions.send_keys(\"First\")\nactions.pause(pause(timedelta(seconds=2)))\nactions.send_keys(\"Second\")\nactions.perform()\n```\n\n----------------------------------------\n\nTITLE: Remove Credential in Python\nDESCRIPTION: This python code removes a credential from the authenticator based on the passed credential id.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndev_tools.webauthn.remove_credential(credential_id='credential_id')\n\n```\n\n----------------------------------------\n\nTITLE: Call function in realm - Java\nDESCRIPTION: This Java code illustrates how to call a function within a specific realm. It retrieves realm information and then calls a function within that realm using the realm's ID.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void callFunctionInRealm() {\n        String url = getHtmlPage();\n        driver.get(url);\n\n        BrowsingContext browsingContext = new BrowsingContext(driver, driver.getWindowHandle());\n        List<RealmInfo> realmInfo = browsingContext.getRealms();\n\n        FunctionRealmInfo info = browsingContext.callFunction(\"() => {return 1}\", false, realmInfo.get(0).getRealm());\n        assertEquals(info.getResult().getNumber(), 1);\n    }\n```\n\n----------------------------------------\n\nTITLE: Key Up Action in Selenium (Python)\nDESCRIPTION: Demonstrates how to simulate releasing a key using the Actions API in Python. This example shows how to release the SHIFT key on an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nelement = driver.find_element(By.TAG_NAME, \"input\")\nactions = ActionChains(driver)\nactions.key_down(Keys.SHIFT, element).send_keys(\"text\").key_up(Keys.SHIFT, element)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Creating a Pause in Actions API - Python\nDESCRIPTION: This Python snippet demonstrates creating a pause between actions in Selenium using the Actions API. It initializes a WebDriver, navigates to a webpage, creates an ActionChains object, pauses for 5 seconds using pause(5), and then performs the actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.ja.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://selenium.dev/selenium/web/mouse_interaction.html\")\n\naction = ActionChains(driver)\naction.pause(5)\naction.perform()\n```\n\n----------------------------------------\n\nTITLE: Initializing Driver with Default Service - Java\nDESCRIPTION: This snippet demonstrates how to start a driver with a default service instance in Java. It creates a new ChromeDriver instance without explicitly configuring the service. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nChromeDriver driver = new ChromeDriver();\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Getting Element Colors in Python\nDESCRIPTION: This Python snippet demonstrates how to retrieve the color and background color of a web element using Selenium WebDriver and the Color class. It gets the CSS value of the 'color' and 'background-color' properties and converts them into Color objects for further comparison or conversion.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nlogin_button_colour = Color.from_string(driver.find_element(By.ID,'login').value_of_css_property('color'))\n\nlogin_button_background_colour = Color.from_string(driver.find_element(By.ID,'login').value_of_css_property('background-color'))\n```\n\n----------------------------------------\n\nTITLE: Starting a Safari Session (JavaScript)\nDESCRIPTION: This code shows how to start a Safari session in JavaScript with basic defined options. It initializes options and then creates a Safari driver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.en.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet options = new safari.Options();\nlet service = new safari.ServiceBuilder().build();\nlet driver = new safari.Driver(options, service);\n```\n\n----------------------------------------\n\nTITLE: Setting W3C Capabilities After Upgrade - Python\nDESCRIPTION: Shows how to define capabilities in Python for Selenium 4 using FirefoxOptions and vendor prefixing. It initializes FirefoxOptions, sets the browser_version, platform_name, and 'cloud:options' with build and name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.firefox.options import Options as FirefoxOptions\noptions = FirefoxOptions()\noptions.browser_version = '92'\noptions.platform_name = 'Windows 10'\ncloud_options = {}\ncloud_options['build'] = my_test_build\ncloud_options['name'] = my_test_name\noptions.set_capability('cloud:options', cloud_options)\ndriver = webdriver.Remote(cloud_url, options=options)\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options from Select in Selenium\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of selected options in a <select> element using Selenium WebDriver. The `AllSelectedOptions` property is used to get the currently selected options.  For a single select list this will be a list with one element; for a multiple select list, it can contain zero or many elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\nvar selectedOptions = select.AllSelectedOptions;\n```\n\n----------------------------------------\n\nTITLE: Click and Release Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a click and release action (a standard click) on an element using Selenium. It combines moving the mouse to the center of an element with pressing and then releasing the left mouse button. This is the standard way to click an element. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"my-element\"))\nActions(driver).click(element)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Accessing Browser Logs in Edge with Java\nDESCRIPTION: This Java snippet shows how to retrieve browser logs from Edge using `getLogs` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().logs().getAvailableLogTypes();\n```\n\n----------------------------------------\n\nTITLE: Maximize Window - Python\nDESCRIPTION: Demonstrates how to maximize the browser window in Python using Selenium WebDriver. The `maximize_window()` method expands the window to fill the screen without blocking the operating system's menu and toolbars.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_55\n\nLANGUAGE: python\nCODE:\n```\ndriver.maximize_window()\n```\n\n----------------------------------------\n\nTITLE: Browsing Context Loaded Event in JavaScript\nDESCRIPTION: This code snippet demonstrates how to listen for the 'browsingContext.load' event using Selenium WebDriver's BiDi API in JavaScript. It subscribes to the event and asserts that the URL is defined when the event is triggered. Requires Selenium version 4.9.2 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('browsingContext.load', async () => {\n  let contextId;\n  let url;\n\n  await driver.on('browsingContext.load', (event) => {\n    contextId = event.context.context;\n    url = event.navigation;\n  });\n\n  await driver.get('https://www.selenium.dev/selenium4/demos/blank.html');\n\n  expect(url).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Named Cookie in JavaScript\nDESCRIPTION: This code snippet demonstrates how to delete a cookie by its name using Selenium WebDriver in JavaScript. It navigates to a website, adds two cookies, and then deletes a cookie with the name 'test1'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.get('https://www.example.com/');\nawait driver.manage().addCookie({name: 'test1', value: 'cookie1'});\nawait driver.manage().deleteCookie('test1');\n```\n\n----------------------------------------\n\nTITLE: Listen for Realm Created events (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates listening for the `script.realmCreated` event using Selenium BiDi. It subscribes to the event and waits for a realm to be created.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('realm created event', async () => {\n    let browsingContext = await getBrowsingContext(driver);\n\n    let handle = await session.subscribe({\n      events: ['script.realmCreated']\n    });\n\n    await driver.get(Pages.formPage);\n\n    let realm = await handle.once('script.realmCreated');\n\n    expect(realm.realm).toBeDefined();\n\n    await session.unsubscribe(handle);\n  });\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Status - Python\nDESCRIPTION: Demonstrates how to check if a web element is enabled on a webpage using Python and Selenium WebDriver.  The `is_enabled()` method returns a boolean indicating whether the element is enabled. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nbutton_input = driver.find_element(By.NAME, \"button_input\")\nassert button_input.is_enabled() is False\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to delete all cookies using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.get('https://www.example.com/');\nawait driver.manage().deleteAllCookies();\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Element with Selenium WebDriver in CSharp\nDESCRIPTION: This CSharp code snippet demonstrates how to locate an element and send keys to it using Selenium WebDriver. The `Clear()` method is called before sending keys to ensure the input field is empty. This snippet requires a WebDriver instance already initialized and a web page loaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/inputs.html\");\nIWebElement element = driver.FindElement(By.Name(\"email_input\"));\nelement.Clear();\nelement.SendKeys(\"admin@localhost.dev\");\n\n```\n\n----------------------------------------\n\nTITLE: NPM Install Selenium-Webdriver JavaScript\nDESCRIPTION: This snippet shows the command to install Selenium WebDriver using npm, the Node Package Manager. It installs the Selenium WebDriver package locally within the project, making it available for use in JavaScript files.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.pt-br.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Selenium Python\nDESCRIPTION: This Python code snippet uses Selenium WebDriver to retrieve the text of an element and asserts that it equals the expected text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\nassert driver.find_element(By.ID, \"justanotherlink\").text == \"link to a page with images\"\n```\n\n----------------------------------------\n\nTITLE: Call function in browsing context - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to call a function in a browsing context. It navigates to a webpage, defines a function, and then uses `script.callFunction` to execute it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('call function in browsing context', async () => {\n    await driver.get(url);\n    const browsingContext = await new BrowsingContext(driver, tabId);\n    const functionDefinition =\n        '() => {' +\n        '  window.testVariable = \\'here I am\\';' +\n        '  return window.testVariable;' +\n        '}';\n    const result = await browsingContext.script.callFunction({\n      functionDeclaration: functionDefinition,\n      target: {context: browsingContext.context},\n      awaitPromise: true,\n    });\n\n    expect(result.result.value).toBe('here I am');\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium Hub with Session Timeout, Port, and Tracing\nDESCRIPTION: This command configures the Selenium Hub with a session request timeout of 500 seconds, sets the port to 3333, and disables tracing. These settings allow control over session management, the Hub's communication port, and request tracing.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.pt-br.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar hub --session-request-timeout 500 --port 3333 --tracing false\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Selected in JavaScript\nDESCRIPTION: This code snippet demonstrates how to check if a web element is selected on a webpage using Selenium WebDriver in JavaScript. It uses the `isSelected()` method. The method returns `true` if the element is selected, and `false` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('element is selected', async () => {\n  expect(await driver.findElement(By.name('checkbox_input')).isSelected()).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: File Upload using SendKeys CSharp\nDESCRIPTION: This CSharp snippet demonstrates how to upload a file by finding the file input element and using the SendKeys method to specify the file path. This method bypasses the native file upload dialog.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.pt-br.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://the-internet.herokuapp.com/upload\");\nvar fileInput = driver.FindElement(By.Id(\"file-upload\"));\nfileInput.SendKeys(\"selenium-snapshot.jpg\");\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset - Selenium Wheel Python\nDESCRIPTION: This snippet demonstrates how to scroll from an offset of the viewport using Selenium's Wheel actions in Python. An offset is specified from the upper left corner of the current viewport. After the origin point is determined, the page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nactions = ActionBuilder(driver)\nactions.scroll_from_origin(origin=Origin.viewport, x=10, y=10)\nactions.perform()\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - Ruby\nDESCRIPTION: Demonstrates how to retrieve the browser window's size in Ruby using Selenium WebDriver. The code retrieves the width and height individually, and also demonstrates storing the dimensions in a `size` object for later use. Provides equivalent approaches to accessing the browser window's size.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\n    # Access each dimension individually\nwidth = driver.manage.window.size.width\nheight = driver.manage.window.size.height\n\n    # Or store the dimensions and query them later\nsize = driver.manage.window.size\nwidth1 = size.width\nheight1 = size.height\n```\n\n----------------------------------------\n\nTITLE: Getting CSS Color Values\nDESCRIPTION: This snippet retrieves the color and background color of a login button using Selenium WebDriver in Ruby, then converts them to Color objects using the from_string method. It demonstrates how to fetch color values from web elements for testing purposes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\nlogin_button_colour = Color.from_string(driver.find_element(id: 'login').css_value('color'))\n\nlogin_button_background_colour = Color.from_string(driver.find_element(id: 'login').css_value('background-color'))\n```\n\n----------------------------------------\n\nTITLE: Forward Button Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to simulate a click on the forward button of a mouse (button X2) using Selenium. It involves pressing and releasing mouse button 4 on the target element. Requires Selenium WebDriver and version 4.5.0 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('selectable'));\nawait actions.moveToElement(element).click(MouseButton.FORWARD).perform();\n```\n\n----------------------------------------\n\nTITLE: Navigating to a URL in Selenium WebDriver (Java)\nDESCRIPTION: Demonstrates how to open a website using Selenium WebDriver in Java.  The driver.get() method is a convenient way, while driver.navigate().to() is another approach. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver.get(\"https://selenium.dev\");\ndriver.navigate().to(\"https://selenium.dev\");\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait - Ruby\nDESCRIPTION: This Ruby snippet shows how to implement an explicit wait.  It creates a `Selenium::WebDriver::Wait` instance with a timeout and uses the `until` method to wait for a condition. The condition in this example waits for an element with the ID 'message' to be displayed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.pt-br.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nwait = Selenium::WebDriver::Wait.new(:timeout => 10)\nelement = wait.until { driver.find_element(:id => \"message\").displayed? }\n```\n\n----------------------------------------\n\nTITLE: Installing Add-ons in Firefox with Selenium (Python)\nDESCRIPTION: This snippet demonstrates how to install a Firefox add-on (.xpi file) using Selenium WebDriver in Python. The `install_addon` method is used to install the add-on from a file path.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ndriver.install_addon(path='add.xpi')\n```\n\n----------------------------------------\n\nTITLE: Setting Log Output to Console\nDESCRIPTION: This code snippet configures the FirefoxDriver service to direct log output to the console. This allows you to view the driver logs directly in your terminal.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_22\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.firefox(log: $stdout)\ndriver = Selenium::WebDriver.for :firefox, service: service\n```\n\n----------------------------------------\n\nTITLE: Intercepting Request - Ruby\nDESCRIPTION: Demonstrates intercepting requests using Selenium and CDP in Ruby.  It logs the URL of all requests that are intercepted by the fetch domain. Requires Selenium WebDriver and CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\n@driver.register do |event|\n  puts event\n  @driver.execute_cdp 'Fetch.continueRequest', requestId: event['requestId']\nend\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Confirm in Java\nDESCRIPTION: This Java code snippet demonstrates how to interact with a JavaScript confirm dialog using Selenium WebDriver.  It retrieves the alert, gets the text, and then dismisses the alert, which is equivalent to clicking 'Cancel'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nAlert alert = driver.switchTo().alert();\nString text = alert.getText();\nalert.dismiss();\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options in Selenium Ruby\nDESCRIPTION: This snippet shows how to retrieve the selected options from a Select element in Ruby. It uses the `all_selected_options` method of the Select object, returning a list of WebElements representing the selected options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nselected_options = select.all_selected_options\n```\n\n----------------------------------------\n\nTITLE: Get Window Position: Selenium WebDriver (C#)\nDESCRIPTION: This C# snippet demonstrates how to fetch the position of the browser window using Selenium WebDriver. It accesses the x and y coordinates individually, and also shows how to retrieve them through the Point object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_50\n\nLANGUAGE: csharp\nCODE:\n```\n//Access each dimension individually\nint x = driver.Manage().Window.Position.X;\nint y = driver.Manage().Window.Position.Y;\n\n//Or store the dimensions and query them later\nPoint position = driver.Manage().Window.Position;\nint x1 = position.X;\nint y1 = position.Y;\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy in Python\nDESCRIPTION: This Python code configures a proxy for Selenium WebDriver. Replace '<HOST:PORT>' with the actual proxy address. It uses ChromeOptions to set the proxy capability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_50\n\nLANGUAGE: Python\nCODE:\n```\noptions = Options()\noptions.add_argument('--proxy-server=http://<HOST:PORT>')\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - Java\nDESCRIPTION: This Java snippet demonstrates how to set the size of the browser window to 1024x768 pixels using Selenium WebDriver. A new `Dimension` object is created with the desired width and height, and then passed to the `setSize()` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_33\n\nLANGUAGE: java\nCODE:\n```\ndriver.manage().window().setSize(new Dimension(1024, 768));\n```\n\n----------------------------------------\n\nTITLE: Locating Element to the Right of Another (Java)\nDESCRIPTION: This snippet demonstrates how to locate a button element that is positioned to the right of the element with the ID 'cancel' using Selenium's RelativeLocator in Java. This is helpful when the target element is not easily identifiable but its relative position to a known element is consistent.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_52\n\nLANGUAGE: Java\nCODE:\n```\nBy submitLocator = RelativeLocator.with(By.tagName(\"button\")).toRightOf(By.id(\"cancel\"));\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Name with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a web element on a page using its NAME attribute with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.name()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.name(\"newsletter\"))\n```\n\n----------------------------------------\n\nTITLE: Set Page Scale Python\nDESCRIPTION: This code snippet demonstrates how to set the page scale (zoom) for printing in Python with Selenium, using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.scale = 0.5\npdf = driver.print_page(print_options)\n```\n\n----------------------------------------\n\nTITLE: Close Window and Switch Back - Selenium\nDESCRIPTION: Closes the current window or tab and then switches the WebDriver's focus back to the original window. Requires that the original window handle was stored before the new window/tab was opened. This prevents errors due to attempting actions on a closed window.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n    #关闭标签页或窗口\ndriver.close()\n\n    #切回到之前的标签页或窗口\ndriver.switch_to.window(original_window)\n```\n\n----------------------------------------\n\nTITLE: Releasing Actions with Selenium BiDi\nDESCRIPTION: This Java snippet shows how to release actions performed by the Selenium BiDi API. It specifically focuses on releasing modifier keys.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/input.en.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n    KeyboardActions actions = new KeyboardActions(input);\n    actions.keyDown(Keys.SHIFT).keyUp(Keys.SHIFT);\n    input.perform(actions);\n\n    input.release(List.of(InputSource.Kind.KEYBOARD.toJson()));\n```\n\n----------------------------------------\n\nTITLE: Clear Element with Selenium WebDriver in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to navigate to a URL and clear an element using Selenium WebDriver. It retrieves the element by its name and clears any existing content.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Navigate to Url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n\t//Clear field to empty it from any previous data\n\tdriver.findElement(By.name(\"email_input\")).clear()\n\t\n  \n\n```\n\n----------------------------------------\n\nTITLE: Setting Timeouts with Duration API Java\nDESCRIPTION: This snippet illustrates the change in Selenium 4 for setting timeouts.  The old method used `long` and `TimeUnit`, while the new method utilizes `Duration` objects. This requires updating timeout configurations to use the Duration API, improving code clarity and reducing potential errors.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\ndriver.manage().timeouts().setScriptTimeout(2, TimeUnit.MINUTES);\ndriver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);\n```\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\ndriver.manage().timeouts().scriptTimeout(Duration.ofMinutes(2));\ndriver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(10));\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Authentication - Python\nDESCRIPTION: Demonstrates how to set basic authentication credentials using Selenium and CDP in Python. The Authorization header is set to bypass browser authentication prompts using `network.setExtraHTTPHeaders`. It requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nheaders = {\n    'Authorization': 'Basic %s' % base64.b64encode(f'{creds}'.encode()).decode('utf-8')\n}\ndriver.execute_cdp_cmd('Network.setExtraHTTPHeaders', {'headers': headers})\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop on Element with Selenium\nDESCRIPTION: This code performs a drag-and-drop operation from one element to another using Selenium WebDriver. It first clicks and holds the source element, then moves to the target element's location, and finally releases the mouse. It leverages the `dragAndDrop` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nval source = driver.findElement(By.id(\"draggable\"))\nval target = driver.findElement(By.id(\"droppable\"))\nActions(driver)\n  .dragAndDrop(source, target)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Check Element Displayed Status - C#\nDESCRIPTION: This snippet demonstrates how to check if a web element is displayed on the page using Selenium WebDriver in C#. It finds an element by name and uses the Displayed property to determine its visibility, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"email_input\"));\nAssert.That(element.Displayed, Is.True);\nConsole.WriteLine(\"Element is displayed: \" + element.Displayed);\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's SelectElement class, specifically by matching the visible text of the option. The `SelectByText()` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\nselect.SelectByText(\"Four\");\n```\n\n----------------------------------------\n\nTITLE: Click and Hold with Selenium\nDESCRIPTION: Moves the mouse to the center of an element and presses the left mouse button, useful for focusing an element. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"clickable\"))\nval actions = Actions(driver)\nactions.moveToElement(element).clickAndHold().perform()\n\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Get grid, nodes, and session details\nDESCRIPTION: This command uses curl to query details of grid, nodes and sessions. It retrieves URI, maxSession, sessionCount from grid and also retrieves details of each node like id, uri, status and associated sessions. All this information is fetched using GraphQL query.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.zh-cn.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ grid { uri, maxSession, sessionCount }, nodesInfo { nodes { id, uri, status, sessions { id, capabilities, startTime, uri, nodeId, nodeUri, sessionDurationMillis, slot { id, stereotype, lastStarted } }, slotCount, sessionCount }} }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Retrieving JavaScript Exceptions using CDP - CSharp\nDESCRIPTION: This C# code snippet demonstrates how to retrieve JavaScript exceptions using Selenium's integration with Chrome DevTools Protocol (CDP). It requires Selenium WebDriver and CDP support in the Selenium version being used. The code is located at examples/dotnet/SeleniumDocs/BiDi/CDP/LoggingTest.cs#L41-L47\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.pt-br.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// This example is located at examples/dotnet/SeleniumDocs/BiDi/CDP/LoggingTest.cs#L41-L47\n```\n\n----------------------------------------\n\nTITLE: Get Element Attribute - Python\nDESCRIPTION: This snippet demonstrates how to get an attribute value of a web element using Selenium WebDriver in Python. It finds an element by name and uses the get_attribute() method to retrieve the value of the 'value' attribute.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nemail_input = driver.find_element(By.NAME, \"email_input\")\nattribute_value = email_input.get_attribute(\"value\")\nassert attribute_value == ''\n```\n\n----------------------------------------\n\nTITLE: Set Window Size: Selenium WebDriver (Java)\nDESCRIPTION: This Java snippet demonstrates how to set the size of the browser window to 1024x768 pixels using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_42\n\nLANGUAGE: java\nCODE:\n```\ndriver.manage().window().setSize(new Dimension(1024, 768));\n```\n\n----------------------------------------\n\nTITLE: Setting platformName Capability in Python\nDESCRIPTION: This code snippet shows how to set the 'platformName' capability in Selenium using Python.  The 'platformName' capability identifies the operating system at the remote end. This is frequently used to specify the operating system in cloud-based testing environments.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\noptions = Options()\noptions.platform_name = \"linux\"\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies - JavaScript\nDESCRIPTION: This JavaScript snippet retrieves all cookies using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.get('https://www.example.com/');\nawait driver.manage().getCookies();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Named Cookie - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to delete a cookie using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.get('https://www.example.com/');\nawait driver.manage().deleteCookie('test1');\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to Eager in Java\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'eager' in Java. The WebDriver waits until the 'DOMContentLoaded' event fires.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setPageLoadStrategy(PageLoadStrategy.EAGER);\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Title with Selenium\nDESCRIPTION: This snippet retrieves the title of the current webpage loaded in the browser using Selenium WebDriver. It shows how to access the 'title' property in different programming languages.  Dependencies: Selenium WebDriver library for the respective language.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.zh-cn.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.title\n```\n\n----------------------------------------\n\nTITLE: Adding Console Message Handler with WebDriver BiDi in Python\nDESCRIPTION: This code snippet demonstrates how to add a handler for console messages using WebDriver BiDi in Python. It utilizes the `add_event_listener` method to listen for 'script.message' events and prints the received messages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.ja.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nbidi.script.add_event_listener(\n    event='script.message',\n    callback=lambda message: print(f\"console.log: {message}\"))\n```\n\n----------------------------------------\n\nTITLE: Enable WebSocket URL in Ruby for BiDi\nDESCRIPTION: This code snippet demonstrates how to enable the WebSocket URL in Ruby when setting browser options to enable BiDi (Bidirectional) communication. Setting the 'web_socket_url' attribute to 'true' allows Selenium to establish a WebSocket connection for two-way communication with the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.zh-cn.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.web_socket_url = true\n```\n\n----------------------------------------\n\nTITLE: Double Click with Selenium\nDESCRIPTION: Moves to the center of an element and performs a double click. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"clickable\"))\nval actions = Actions(driver)\nactions.doubleClick(element).perform()\n```\n\n----------------------------------------\n\nTITLE: Configuring EdgeDriver Log File in Python\nDESCRIPTION: This Python snippet demonstrates how to configure EdgeDriver to write logs to a file and append to it.  This requires specifying both the log path and log level.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndriver = Edge(service_log_path='log.txt', service_log_level='DEBUG')\n```\n\n----------------------------------------\n\nTITLE: Locating Element Near Another - Kotlin\nDESCRIPTION: Locates an input element near the element with ID 'lbl-email' in Kotlin. Uses `RelativeLocator.with` and `near` methods.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_61\n\nLANGUAGE: Kotlin\nCODE:\n```\nval emailLocator = RelativeLocator.with(By.tagName(\"input\")).near(By.id(\"lbl-email\"));\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi - Python\nDESCRIPTION: This snippet demonstrates how to enable BiDi in Python using the `enable_bidi` property of the options object. Setting `options.enable_bidi` to `True` enables the WebDriver BiDi protocol, allowing for bidirectional communication with the browser during Selenium automation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\noptions.enable_bidi = True\n```\n\n----------------------------------------\n\nTITLE: Check Element Selected Status - JavaScript\nDESCRIPTION: This snippet demonstrates how to check if a web element is selected on the page using Selenium WebDriver in JavaScript. It finds an element by name and uses the isSelected() method to determine if it is selected, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst checkboxInput = await driver.findElement(By.name('checkbox_input'))\nexpect(await checkboxInput.isSelected()).toBe(true)\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel (Ruby)\nDESCRIPTION: Scrolls the viewport so the bottom of the specified web element is at the bottom of the screen.  This method takes a web element as the sole argument. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'idOfMyElement')\n@driver.action.scroll_from(::Selenium::WebDriver::WheelInput::Origin.viewport, 0, element.rect.y).perform\n```\n\n----------------------------------------\n\nTITLE: Check Element Selection Status - Ruby\nDESCRIPTION: Demonstrates how to check if a web element is selected on a webpage using Ruby and Selenium WebDriver. The `selected?` method returns a boolean indicating whether the element is selected (e.g., checkbox, radio button). A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nexpect(driver.find_element(name: 'checkbox_input').selected?).to be true\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element by Class Name\nDESCRIPTION: This snippet demonstrates how to find the first element matching a specific class name within the entire DOM using Selenium WebDriver. It uses the `findElement` method with `By.className` to locate the first element with the class \"tomatoes\". The result is a WebElement object representing the located element, which can be used for further actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nval vegetable: WebElement = driver.findElement(By.className(\"tomatoes\"))\n```\n\n----------------------------------------\n\nTITLE: Scroll From Offset of Origin using Selenium Wheel (CSharp)\nDESCRIPTION: Scrolls from a specified offset of the viewport origin by a given amount. Requires x offset, y offset, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nnew Actions(driver)\n    .ScrollFromOrigin(WheelInput.Origin.Viewport(15, 25), 20, 50)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Asserting Title with Selenium\nDESCRIPTION: This code snippet demonstrates how to assert the title of a webpage using Selenium and JUnit. It retrieves the title and checks if it matches the expected value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nString title = driver.getTitle();\nassertEquals(\"SeleniumHQ Browser Automation\", title);\n```\n\n----------------------------------------\n\nTITLE: Asserting with Selenium in Ruby\nDESCRIPTION: This code snippet demonstrates how to make assertions within a Selenium test using RSpec in Ruby. It retrieves the title of a webpage and asserts that it matches the expected title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ntitle = driver.title\nexpect(title).to eq(\"SeleniumHQ Browser Automation\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Capabilities After Selenium 4 - Python\nDESCRIPTION: This Python code demonstrates how to configure browser options and capabilities using FirefoxOptions in Selenium 4.  It sets the browser version, platform name, and cloud options for a remote WebDriver session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.firefox.options import Options as FirefoxOptions\noptions = FirefoxOptions()\noptions.browser_version = '92'\noptions.platform_name = 'Windows 10'\ncloud_options = {}\ncloud_options['build'] = my_test_build\ncloud_options['name'] = my_test_name\noptions.set_capability('cloud:options', cloud_options)\ndriver = webdriver.Remote(cloud_url, options=options)\n```\n\n----------------------------------------\n\nTITLE: Setting ignoreZoomSetting for Internet Explorer\nDESCRIPTION: This code snippet illustrates how to set the `ignoreZoomSetting` capability for Internet Explorer using Selenium.  By default, the Internet Explorer driver expects the browser's zoom level to be 100%. Setting `ignoreZoomSetting` to `true` disables this check.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\noptions = webdriver.IeOptions()\noptions.ignore_zoom_level = True\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its `value` attribute using Selenium WebDriver. The `selectByValue()` method is used to select the option based on the provided value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait select.selectByValue('one');\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies - CSharp\nDESCRIPTION: This code snippet demonstrates how to delete all cookies from the current browsing context using Selenium WebDriver in C#. It adds cookies and then deletes all using `driver.Manage().Cookies.DeleteAllCookies()`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\nCookie cookie1 = new Cookie(\"test1\", \"cookie1\");\nCookie cookie2 = new Cookie(\"test2\", \"cookie2\");\ndriver.Manage().Cookies.AddCookie(cookie1);\ndriver.Manage().Cookies.AddCookie(cookie2);\ndriver.Manage().Cookies.DeleteAllCookies();\n```\n\n----------------------------------------\n\nTITLE: Setting acceptInsecureCerts Capability in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set the `acceptInsecureCerts` capability to true in JavaScript using ChromeOptions.  This is done by adding an argument. The browser will now trust insecure certificates.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet opts = new chrome.Options();\nopts.addArguments('--acceptInsecureCerts=true');\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element with Offset - Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to scroll from an element with an offset using Selenium's Actions API and Wheel class. It takes an element, x offset, y offset, delta x, and delta y values as input. It scrolls from the origin point calculated from the center of the specified element, offset by given x and y values. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.name(\"meal\"))\nActions(driver).scrollFromOrigin(WheelInput.ScrollOrigin.fromElement(element, 25, 25), 50, 100)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Click and Release with Selenium\nDESCRIPTION: Moves to the center of an element, presses, and releases the left mouse button, simulating a standard click.  It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"clickable\")\nactions = ActionChains(driver)\nactions.move_to_element(element).click().perform()\n```\n\n----------------------------------------\n\nTITLE: Setting Local File Detector in CSharp\nDESCRIPTION: Sets a local file detector for a RemoteWebDriver instance in C# to enable file uploads. .NET includes a local file detector by default, but the user can implement their own version. Requires Selenium WebDriver NuGet package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\nRemoteWebDriver driver = new RemoteWebDriver(new Uri(\"http://localhost:4444\"), new ChromeOptions());\n        driver.FileDetector = new UselessFileDetector();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Timeout in Python\nDESCRIPTION: This Python code shows how to set the page load timeout in Selenium. The page load timeout specifies the amount of time WebDriver will wait for a page to load completely. The duration is set in seconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\noptions = Options()\noptions.page_load_timeout = 50\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its visible text using Selenium WebDriver. The `select_by_visible_text()` method is used to select the option based on the provided text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nselect.select_by_visible_text(\"One\")\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options from Select Element\nDESCRIPTION: This code retrieves all selected options from a <select> element using Selenium's SelectElement class. The `AllSelectedOptions` property returns a list of IWebElements representing the selected options within the select list. For single selects, this will be a list with one element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\nIList<IWebElement> selectedOptions = select.AllSelectedOptions;\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Binary Location - Python\nDESCRIPTION: Demonstrates how to set the specific binary location for Firefox in Python. This is useful when you need to use a specific version of Firefox (e.g., nightly build). Requires the Selenium library and `webdriver.FirefoxOptions`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\noptions.binary = r'/Applications/Firefox Nightly.app/Contents/MacOS/firefox'\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Binary Location\nDESCRIPTION: This snippet shows how to set the binary location for the Firefox browser, allowing you to specify a particular Firefox installation. This is useful when you have multiple Firefox versions installed and want to use a specific one for testing. The path to the Firefox executable is passed to the `BrowserBinaryLocation` property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_12\n\nLANGUAGE: CSharp\nCODE:\n```\noptions.BrowserBinaryLocation = \"/Applications/Firefox Nightly.app/Contents/MacOS/firefox\";\n```\n\n----------------------------------------\n\nTITLE: Check Element Selected Selenium JavaScript\nDESCRIPTION: This JavaScript code snippet utilizes Selenium WebDriver to verify if a checkbox element is selected, asserting that the `isSelected` method returns true.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.selenium.dev/selenium/web/inputs.html')\n    expect(await driver.findElement(By.name('checkbox_input')).isSelected()).toBe(true)\n```\n\n----------------------------------------\n\nTITLE: Capturing Response Information via CDP in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to intercept and capture response information using Chrome DevTools Protocol (CDP) with Selenium. It uses `on` to capture network responses and prints the URL of each response. This snippet depends on the Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nsession.on(:response_received) do |event|\n  puts event['response']['url']\nend\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method with JUnit - Kotlin\nDESCRIPTION: This Kotlin snippet shows an example of a tear down method using JUnit's `@AfterAll` annotation. The `tearDown` method calls `driver.quit()` to close the browser session after all tests in the class have run. Requires JUnit 5.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\n/**\n * Example using JUnit\n * https://junit.org/junit5/docs/current/api/org/junit/jupiter/api/AfterAll.html\n */\n@AfterAll\nfun tearDown() {\n    driver.quit()\n}\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Element with Selenium WebDriver in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to navigate to a URL and send keys to an element using Selenium WebDriver. It clears any existing content in the element before sending the keys.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Navigate to Url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n\t//Clear field to empty it from any previous data\n\tdriver.findElement(By.name(\"email_input\")).clear()\n\t\n    // Enter text \n    driver.findElement(By.name(\"email_input\")).sendKeys(\"admin@localhost.dev\")\n\n```\n\n----------------------------------------\n\nTITLE: Setting unhandledPromptBehavior in Python\nDESCRIPTION: This example sets the `unhandledPromptBehavior` capability in Python, configuring how the driver handles user prompts. This can be set to 'dismiss', 'accept', 'dismiss and notify', 'accept and notify', or 'ignore'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_41\n\nLANGUAGE: Python\nCODE:\n```\noptions = Options()\noptions.unhandled_prompt_behavior = 'accept'\n```\n\n----------------------------------------\n\nTITLE: Enabling Managed Downloads in Java\nDESCRIPTION: Enables managed downloads for a RemoteWebDriver instance in Java, allowing Selenium to handle the location of downloaded files. This requires setting the 'se:downloadsEnabled' capability to true. Requires using ChromeOptions or FirefoxOptions and setting capabilities before initializing the RemoteWebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setCapability(\"se:downloadsEnabled\", true);\n```\n\n----------------------------------------\n\nTITLE: Click and Hold Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a click and hold action on an element using Selenium. It combines moving the mouse to the center of an element with pressing the left mouse button. This is useful for focusing on a specific element without releasing the click immediately. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('my-element'));\nawait actions.clickAndHold(element).perform();\n```\n\n----------------------------------------\n\nTITLE: Creating Named Color Objects - Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to create Color objects from named color strings like \"black\", \"chocolate\", and \"hotpink\" in Ruby. The `Color.from_string()` method is used to parse these predefined color names.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nBLACK = Color.from_string('black')\nCHOCOLATE = Color.from_string('chocolate')\nHOTPINK = Color.from_string('hotpink')\n```\n\n----------------------------------------\n\nTITLE: Getting All Options in Selenium JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve all options from a Select element in JavaScript. It uses the `getOptions()` method of the Select object, returning a list of WebElements representing each option.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = await select.getOptions();\n```\n\n----------------------------------------\n\nTITLE: Handle Confirm Popup in Java\nDESCRIPTION: This Java code snippet shows how to handle a JavaScript confirmation popup using Selenium WebDriver. It retrieves the confirm text and dismisses it.  Clicking a link triggers the confirm.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.pt-br.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ndriver.findElement(By.linkText(\"See a sample confirm\")).click();\nWait<WebDriver> wait = new FluentWait<>(driver).withTimeout(Duration.ofSeconds(10));\nAlert alert = wait.until(ExpectedConditions.alertIsPresent());\nString text = alert.getText();\nalert.dismiss();\n```\n\n----------------------------------------\n\nTITLE: Switching to IFrame by WebElement - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to switch to an IFrame using a WebElement. It first finds the IFrame element using CSS selector, then switches the driver's focus to that frame, and finally clicks the button inside the IFrame.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\n# Store iframe web element\niframe = driver.find_element(:css,'#modal > iframe')\n\n    # Switch to the frame\ndriver.switch_to.frame iframe\n\n    # Now, Click on the button\ndriver.find_element(:tag_name,'button').click\n```\n\n----------------------------------------\n\nTITLE: Relative Locator - Left of in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate an element to the left of another element using Relative Locators in Selenium.  It locates a button element to the left of the element with the id 'submit'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_51\n\nLANGUAGE: Kotlin\nCODE:\n```\nval cancelLocator = RelativeLocator.with(By.tagName(\"button\")).toLeftOf(By.id(\"submit\"))\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - CSharp\nDESCRIPTION: This C# snippet demonstrates how to retrieve the position (x and y coordinates) of the browser window using Selenium WebDriver. It shows two approaches: accessing each coordinate individually and storing the position in a `Point` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\n//Access each dimension individually\nint x = driver.Manage().Window.Position.X;\nint y = driver.Manage().Window.Position.Y;\n\n//Or store the dimensions and query them later\nPoint position = driver.Manage().Window.Position;\nint x1 = position.X;\nint y1 = position.Y;\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait\nDESCRIPTION: This snippet demonstrates how to set an implicit wait in Selenium.  The `implicitlyWait` (Java/Kotlin/JavaScript) or `implicitly_wait` (Python/Ruby) or `Manage().Timeouts().ImplicitWait` (C#) method sets the amount of time the driver should wait when searching for an element if it is not immediately present.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.timeouts.implicit_wait = 10\n```\n\n----------------------------------------\n\nTITLE: Initializing Browser Name Option in Ruby\nDESCRIPTION: This snippet demonstrates how to initialize the browser name option in Ruby using Selenium. The browser name is set by default when using option classes.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nit 'browser name' do\n  expect(options.browser_name).to eq 'chrome'\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions to Edge Options - C#\nDESCRIPTION: Demonstrates adding extensions to the Edge options in C#.\nThis allows loading extensions when launching Edge with Selenium.\nDependencies: Selenium WebDriver, EdgeDriver, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_16\n\nLANGUAGE: CSharp\nCODE:\n```\noptions.AddExtensions(\"/path/to/extension.crx\");\n```\n\n----------------------------------------\n\nTITLE: Set Page Size CSharp\nDESCRIPTION: This code snippet demonstrates how to set the page size for printing in C# with Selenium, using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.PageSize = \"A4\";\n\nvar print = (IPrintsPage)driver;\nstring base64Pdf = print.Print(printOptions);\n```\n\n----------------------------------------\n\nTITLE: Take Element Screenshot in Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to capture a screenshot of a specific element on a webpage using Selenium WebDriver in Python. It utilizes the `screenshot` method to save the screenshot to a file. The `find_element` method is used to locate the desired element based on CSS selector. Dependencies: selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_59\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Chrome()\n\n    # Navigate to url\ndriver.get(\"http://www.example.com\")\n\nele = driver.find_element(By.CSS_SELECTOR, 'h1')\n\n    # Returns and base64 encoded string into image\nele.screenshot('./image.png')\n\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Set Window Size: Selenium WebDriver (Python)\nDESCRIPTION: This Python snippet demonstrates how to set the size of the browser window to 1024x768 pixels using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\ndriver.set_window_size(1024, 768)\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait with Selenium Python\nDESCRIPTION: This code snippet shows how to set an implicit wait in Selenium using Python.  The `implicitly_wait` method is called on the WebDriver instance, specifying the number of seconds to wait for elements to become available.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.ja.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver.implicitly_wait(10)\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset with Selenium\nDESCRIPTION: This code performs a drag-and-drop operation by a specified offset using Selenium WebDriver. It first clicks and holds the source element, moves the mouse by the offset, and then releases the mouse. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nsource = driver.find_element(By.ID, \"draggable\")\nActionChains(driver).click_and_hold(source).move_by_offset(50, 50).release().perform()\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium - Java\nDESCRIPTION: This snippet demonstrates how to set an implicit wait in Selenium using Java.  The `implicitlyWait` method is called on the `driver.manage().timeouts()` object, specifying the duration and the time unit. This tells Selenium to wait for a specified amount of time when trying to find an element before throwing an exception.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Driver with Options - Python\nDESCRIPTION: This Python snippet shows how to initialize a local Chrome WebDriver with ChromeOptions. It imports the webdriver and ChromeOptions classes and then instantiates a Chrome driver with the specified options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.ja.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\noptions = Options()\ndriver = webdriver.Chrome(options=options)\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid with Coursier (Shell)\nDESCRIPTION: This command starts Selenium Grid in standalone mode, using Coursier to download the `selenium-http-jdk-client` JAR file and adding it to the classpath using the `--ext` flag.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.ja.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\njava -Dwebdriver.http.factory=jdk-http-client -jar selenium-server-<version>.jar --ext $(coursier fetch -p org.seleniumhq.selenium:selenium-http-jdk-client:<version>) standalone\n```\n\n----------------------------------------\n\nTITLE: Relative Locators: Locating Element Above\nDESCRIPTION: This code demonstrates how to locate an element above another element using Relative Locators in Selenium 4. It uses the `RelativeLocator.with(By.tagName(\"input\")).above(By.id(\"password\"))` to find an input element that is located above the element with the ID \"password\". This is helpful when direct locators are difficult to create.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_41\n\nLANGUAGE: Kotlin\nCODE:\n```\nval emailLocator = RelativeLocator.with(By.tagName(\"input\")).above(By.id(\"password\"))\n```\n\n----------------------------------------\n\nTITLE: Handle Confirm Popup in Python\nDESCRIPTION: This Python code snippet demonstrates how to handle a JavaScript confirm popup using Selenium WebDriver. It fetches the text of the confirm and dismisses it by clicking Cancel. The confirmation is triggered by a link click.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.pt-br.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndriver.find_element(By.LINK_TEXT, \"See a sample confirm\").click()\nWebDriverWait(driver, 10).until(EC.alert_is_present())\nalert = driver.switch_to.alert\ntext = alert.text\nalert.dismiss()\n```\n\n----------------------------------------\n\nTITLE: Setting IE Driver Log Level - Java\nDESCRIPTION: This Java snippet demonstrates how to set the log level for the InternetExplorerDriver using InternetExplorerOptions. It sets the log level to DEBUG to capture detailed logs for debugging purposes. Note that the log level can also be set using a System Property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_32\n\nLANGUAGE: Java\nCODE:\n```\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.setLogLevel(InternetExplorerDriverLogLevel.DEBUG);\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy in Java\nDESCRIPTION: This Java code configures a proxy server for Selenium WebDriver. It creates a Proxy object, sets the HTTP proxy, and then applies it to ChromeOptions, which are then used to instantiate a ChromeDriver. Replace <HOST:PORT> with your actual proxy server address.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_49\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.Proxy;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\n\npublic class ProxyTest {\n  public static void main(String[] args) {\n    Proxy proxy = new Proxy();\n    proxy.setHttpProxy(\"<HOST:PORT>\");\n    ChromeOptions options = new ChromeOptions();\n    options.setCapability(\"proxy\", proxy);\n    WebDriver driver = new ChromeDriver(options);\n    driver.get(\"https://www.google.com/\");\n    driver.manage().window().maximize();\n    driver.quit();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refresh Page with Selenium (Python)\nDESCRIPTION: This snippet demonstrates how to refresh the current page using Selenium WebDriver in Python. It calls the `refresh()` method on the driver. This requires an initialized Selenium WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\ndriver.refresh()\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium\nDESCRIPTION: Demonstrates sending keys to the currently active element using Selenium's Actions API. This involves creating an Actions object, using the sendKeys method to send a string of characters, and then performing the action. This action sends the characters to whichever element currently has focus.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nActions actions = new Actions(driver);\nactions.sendKeys(\"text\").perform();\n```\n\n----------------------------------------\n\nTITLE: Running Selenium tests in JavaScript\nDESCRIPTION: This command is used to execute Selenium tests written in JavaScript using Mocha, a testing framework for JavaScript. Requires Mocha installed and tests configured with Mocha.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Driver Log to Console Output\nDESCRIPTION: This code configures the ChromeDriver service to output logs to the console's standard output. This allows real-time monitoring of ChromeDriver's activity and can be useful for debugging.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_34\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.chrome(log_output: $stdout)\n```\n\n----------------------------------------\n\nTITLE: Setting Detach Option in Chrome\nDESCRIPTION: This code snippet demonstrates how to set the `detach` option to `true` in Chrome options, which keeps the browser open after the WebDriver session is closed. This is useful for debugging purposes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\noptions['detach'] = true\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookie Attribute in Kotlin\nDESCRIPTION: This Kotlin code shows how to set the SameSite attribute of cookies using Selenium WebDriver. It creates two cookies, one with SameSite 'Strict' and another with SameSite 'Lax', and adds them to the current browser context. Requires Selenium WebDriver and ChromeDriver dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"http://www.example.com\")\n        val cookie = Cookie.Builder(\"key\", \"value\").sameSite(\"Strict\").build()\n        val cookie1 = Cookie.Builder(\"key\", \"value\").sameSite(\"Lax\").build()\n        driver.manage().addCookie(cookie)\n        driver.manage().addCookie(cookie1)\n        println(cookie.getSameSite())\n        println(cookie1.getSameSite())\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to delete all cookies using Selenium WebDriver. It adds two cookies and then calls `driver.manage.delete_all_cookies` to remove all of them.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  driver.manage.add_cookie(name: \"test1\", value: \"cookie1\")\n  driver.manage.add_cookie(name: \"test2\", value: \"cookie2\")\n\n  # deletes all cookies\n  driver.manage.delete_all_cookies\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Page Orientation in Selenium C#\nDESCRIPTION: This C# code snippet demonstrates how to set the page orientation to landscape using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.Orientation = PrintOrientation.Landscape;\n\nAssert.That(printOptions.Orientation, Is.EqualTo(PrintOrientation.Landscape));\nAssert.That(printOptions.Orientation.ToString(), Is.EqualTo(\"landscape\").IgnoreCase());\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait with Selenium JavaScript\nDESCRIPTION: This code snippet demonstrates how to set an implicit wait in Selenium using JavaScript. The `implicitlyWait` method is called on the `driver.manage().setTimeouts()` object with the duration in milliseconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.ja.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.manage().setTimeouts({ implicit: 10000 });\n```\n\n----------------------------------------\n\nTITLE: Installing Add-ons in Firefox with Selenium (Ruby)\nDESCRIPTION: This snippet demonstrates how to install a Firefox add-on using Selenium WebDriver in Ruby. The `install_addon` method is used to install the addon.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nid = @driver.install_addon('add.xpi')\n```\n\n----------------------------------------\n\nTITLE: Fragment Navigated Event in Java\nDESCRIPTION: This code snippet demonstrates how to listen for the 'browsingContext.fragmentNavigated' event using Selenium WebDriver's BiDi API in Java. It navigates to a URL and subscribes to the event to print the context ID and URL when the fragment is navigated. Requires Selenium version 4.15 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_51\n\nLANGUAGE: Java\nCODE:\n```\nWebDriverBiDi bidi = (WebDriverBiDi) driver;\n\n    BiDiSubscription<BrowsingContextModule.FragmentNavigatedEvent> subscription =\n        new BiDiSubscription<>(BrowsingContextModule.EVENT_FRAGMENT_NAVIGATED,\n            e -> System.out.println(\"Context \" + e.getContext().getId() +\n                \" navigated to \" + e.getUrl()));\n\n    bidi.subscribe(subscription);\n    driver.get(\"https://www.selenium.dev/selenium4/demos/blank.html#fragment\");\n    bidi.unsubscribe(subscription);\n```\n\n----------------------------------------\n\nTITLE: Querying Capabilities of Each Node\nDESCRIPTION: This example demonstrates querying the capabilities of each node in the Selenium Grid.  A `curl` command with a GraphQL query is sent to the Selenium Grid's GraphQL endpoint.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.en.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\": \"{ nodesInfo { nodes { stereotypes } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to Normal in Kotlin\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'normal' in Kotlin. The WebDriver waits until the 'load' event fires, meaning all resources are downloaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.PageLoadStrategy\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.chrome.ChromeOptions\n\nfun main() {\n  val chromeOptions = ChromeOptions()\n  chromeOptions.setPageLoadStrategy(PageLoadStrategy.NORMAL)\n  val driver = ChromeDriver(chromeOptions)\n  try {\n    driver.get(\"https://www.google.com\")\n  }\n  finally {\n    driver.quit()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Color Objects in Ruby\nDESCRIPTION: This snippet shows how to directly compare two Color objects in Ruby using the == operator. In this case, it compares the background color of a login button with a predefined 'HOTPINK' color.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_22\n\nLANGUAGE: Ruby\nCODE:\n```\nassert(login_button_background_colour == HOTPINK)\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its `value` attribute using Selenium WebDriver. The `SelectByValue()` method is used to select the option based on the provided value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nselect.SelectByValue(\"one\");\n```\n\n----------------------------------------\n\nTITLE: Double Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a double click action on an element using Selenium. It combines moving the mouse to the center of an element with pressing and releasing the left mouse button twice. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\nActions actions = new Actions(driver);\nWebElement element = driver.findElement(By.id(\"my-element\"));\nactions.doubleClick(element)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium (Ruby)\nDESCRIPTION: Demonstrates sending keys to a specific element using the Actions API in Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nelement = @driver.find_element(tag_name: 'input')\nactions = Selenium::WebDriver::Interactions.new(@driver)\nactions.send_keys(element, 'text')\nactions.perform\n```\n\n----------------------------------------\n\nTITLE: Release All Actions - C#\nDESCRIPTION: This C# snippet releases all currently depressed keys and pointer buttons by calling the ReleaseAllActions() method on the IWebDriver object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.ja.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.ReleaseAllActions();\n```\n\n----------------------------------------\n\nTITLE: Initializing Safari Driver with Options (Python)\nDESCRIPTION: This code initializes the Safari driver with basic options in Python. It imports the `webdriver` and `SafariOptions` modules. Requires the Selenium Python package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.ja.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.safari.options import Options as SafariOptions\n```\n\n----------------------------------------\n\nTITLE: Adding Console Message Handler in WebDriver BiDi with Ruby\nDESCRIPTION: This Ruby code snippet adds a handler for console messages using WebDriver BiDi. It establishes a listener to capture and process console log events generated by the browser. This functionality requires a WebDriver BiDi-enabled browser session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.en.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\ncontext = driver.browsing_context\nlog.on_console(context) { |params| $messages << params }\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve the tag name of a web element using Selenium WebDriver in Python. It uses the `tag_name` attribute of the WebElement class. The attribute returns the tag name as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nemail_input = driver.find_element(By.NAME, \"email_input\")\nassert email_input.tag_name == \"input\"\n```\n\n----------------------------------------\n\nTITLE: Handle Prompt Popup in Python\nDESCRIPTION: This Python code snippet shows how to handle a JavaScript prompt popup in Selenium WebDriver. It types text into the prompt, and then accepts the prompt. A link click triggers the prompt.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.pt-br.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndriver.find_element(By.LINK_TEXT, \"See a sample prompt\").click()\nWebDriverWait(driver, 10).until(EC.alert_is_present())\nalert = driver.switch_to.alert\nalert.send_keys(\"Selenium\")\ntext = alert.text\nalert.accept()\n```\n\n----------------------------------------\n\nTITLE: Scroll By Amount using Selenium Wheel (Ruby)\nDESCRIPTION: Scrolls the viewport by a specified amount in the x and y directions. Takes delta x and delta y values as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\n@driver.action.scroll_from(::Selenium::WebDriver::WheelInput::Origin.viewport, 20, 50).perform\n```\n\n----------------------------------------\n\nTITLE: Adding Gradle Dependency\nDESCRIPTION: Adds Selenium dependency to a Java project's `build.gradle` file using Gradle.  This snippet shows how to include Selenium as a test implementation dependency within a Gradle project.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.zh-cn.md#_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\ntestImplementation 'org.seleniumhq.selenium:selenium-java:4.18.1'\n```\n\n----------------------------------------\n\nTITLE: Displaying PATH Environment Variable in Windows\nDESCRIPTION: This snippet displays the current directories listed in the PATH environment variable using the `echo` command in a Windows Command Prompt. This allows users to check if the directory containing their browser driver is already included in the system's PATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.zh-cn.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\necho %PATH%\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset Selenium\nDESCRIPTION: This code snippet demonstrates how to perform a drag and drop operation by a specified offset using Selenium WebDriver.  The action starts with a click-and-hold on the source element, then moves the mouse by the given offset, and finally releases the mouse button. It is available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_68\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement source = driver.FindElement(By.Id(\"draggable\"));\n\nnew Actions(driver)\n    .ClickAndHold(source)\n    .MoveByOffset(100, 50)\n    .Release()\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Verifying Color Formats\nDESCRIPTION: This code converts a Color object to HEX, RGBA, and RGB formats and then compares the resulting strings with expected values using the equality operator (==) in Python. This approach allows for static verification of color values in specific formats.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nassert login_button_background_colour.hex == '#ff69b4'\nassert login_button_background_colour.rgba == 'rgba(255, 105, 180, 1)'\nassert login_button_background_colour.rgb == 'rgb(255, 105, 180)'\n```\n\n----------------------------------------\n\nTITLE: Simulating Network Conditions in Edge with Python\nDESCRIPTION: This Python snippet shows how to simulate various network conditions in Edge using the DevTools protocol. It disables network throttling and then sets a specific network condition.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\ndriver.execute_cdp_cmd('Network.enable', {})\ndriver.execute_cdp_cmd('Network.emulateNetworkConditions', {\n    'offline': False,\n    'latency': 150,\n    'downloadThroughput': 780,\n    'uploadThroughput': 330,\n    'connectionType': 'cellular3g'\n})\n```\n\n----------------------------------------\n\nTITLE: Matching Node A using ChromeOptions\nDESCRIPTION: This Java code snippet demonstrates how to set a custom capability using `ChromeOptions` to match Node A.  It creates `ChromeOptions`, sets the `gsg:customcap` capability to `true`, and then creates a `RemoteWebDriver` instance to connect to the Selenium Grid hub.  Finally, it opens a URL, and closes the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setCapability(\"gsg:customcap\", true);\nWebDriver driver = new RemoteWebDriver(new URL(\"http://localhost:4444\"), options);\ndriver.get(\"https://selenium.dev\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Removing a Credential in Java\nDESCRIPTION: This Java code removes a specific credential from the virtual authenticator by its credential ID.  It gets a list of credentials, retrieves the credential ID from the first credential, and then removes that credential using the removeCredential function.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nList<CredentialMetadata> credentials = devTools.getDomains().security().getCredentials();\n\nString credentialId = credentials.get(0).credentialId();\ndevTools.getDomains().security().removeCredential(credentialId);\n```\n\n----------------------------------------\n\nTITLE: Creating Transparent Color Object - Selenium WebDriver\nDESCRIPTION: This snippet shows how to create a Color object representing the \"transparent\" color in Java. This handles cases where no color is explicitly set on an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nprivate final Color TRANSPARENT = Color.fromString(\"transparent\");\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects - Selenium WebDriver\nDESCRIPTION: This snippet shows how to create Color objects from string representations of various color formats such as HEX, RGB, RGBA, HSL, and HSLA in Kotlin.  The `Color.fromString()` method is used to parse the color string.  It also includes percentage-based RGB and RGBA values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nprivate val HEX_COLOUR = Color.fromString(\"#2F7ED8\")\nprivate val RGB_COLOUR = Color.fromString(\"rgb(255, 255, 255)\")\nprivate val RGB_COLOUR_PERCENT = Color.fromString(\"rgb(40%, 20%, 40%)\")\nprivate val RGBA_COLOUR = Color.fromString(\"rgba(255, 255, 255, 0.5)\")\nprivate val RGBA_COLOUR_PERCENT = Color.fromString(\"rgba(40%, 20%, 40%, 0.5)\")\nprivate val HSL_COLOUR = Color.fromString(\"hsl(100, 0%, 50%)\")\nprivate val HSLA_COLOUR = Color.fromString(\"hsla(100, 0%, 50%, 0.5)\")\n```\n\n----------------------------------------\n\nTITLE: Enabling FINE level logging for Selenium Grid Standalone\nDESCRIPTION: This command starts the Selenium Grid in standalone mode and sets the log level to FINE. This will output all traces and their included spans to the console, which are normally logged at the FINE level. This allows for detailed debugging information.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/observability.en.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-4.0.0-<selenium-version>.jar standalone --log-level FINE\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Proxy with ChromeOptions in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to configure a Chrome browser to use an HTTP proxy server by setting the proxy capability in ChromeOptions. It uses the `org.openqa.selenium.Proxy` class to define the proxy and the `org.openqa.selenium.chrome.ChromeOptions` class to set the browser options. It navigates to google.com and then closes the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_52\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.Proxy\nimport org.openqa.selenium.WebDriver\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.chrome.ChromeOptions\n\nclass proxyTest {\nfun main() {\n\n        val proxy = Proxy()\n        proxy.setHttpProxy(\"<HOST:PORT>\")\n        val options = ChromeOptions()\n        options.setCapability(\"proxy\", proxy)\n        val driver: WebDriver = ChromeDriver(options)\n        driver[\"https://www.google.com/\"]\n        driver.manage().window().maximize()\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Logger Output - Java\nDESCRIPTION: This snippet demonstrates how to manage Java logging on a per-class level. Instead of using the root logger, it sets the logging level on a per-class basis for more granular control.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nimport org.junit.jupiter.api.TestInfo;\nimport java.util.logging.Logger;\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait Timeout with Python\nDESCRIPTION: This code snippet demonstrates how to set the implicit wait timeout in Python using Selenium WebDriver's Options class. The `implicitly_wait` method is used to specify the amount of time the driver should wait when searching for an element if it is not immediately present. The timeout is set to 10 seconds in this example.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ndriver.implicitly_wait(10)\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium Ruby\nDESCRIPTION: This snippet demonstrates how to check if a disabled option can be selected in Ruby. It attempts to select a disabled option and asserts that an exception is thrown. Requires Selenium 4.5 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_39\n\nLANGUAGE: Ruby\nCODE:\n```\nexpect { select.select_by(:text, 'disabled') }.to raise_error(\nSelenium::WebDriver::Error::InvalidElementStateError)\n```\n\n----------------------------------------\n\nTITLE: Minimize Window in Selenium\nDESCRIPTION: This code minimizes the browser window using Selenium WebDriver. The exact behavior depends on the window manager and it typically hides the window in the system tray. Requires Selenium 4 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_65\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().window().minimize();\n```\n\n----------------------------------------\n\nTITLE: Find All Elements by Tag Name in Python\nDESCRIPTION: This snippet retrieves all web elements with the tag name 'li' in Python using Selenium WebDriver. The `find_elements` method returns a list of all matching elements. An empty list is returned if no matching elements are found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nplants = driver.find_elements(By.TAG_NAME, \"li\")\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Firefox Options - Python\nDESCRIPTION: Demonstrates how to add command-line arguments to Firefox options in Python. This allows configuring browser behavior, such as running in headless mode. Requires the Selenium library and `webdriver.FirefoxOptions`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\noptions.add_argument(\"-headless\")\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects with from_string\nDESCRIPTION: This snippet demonstrates how to create Color objects from different string representations of colors (HEX, RGB, RGBA, HSL, HSLA) using the from_string method in Python. The Color class supports various color formats for creating color objects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nHEX_COLOUR = Color.from_string('#2F7ED8')\nRGB_COLOUR = Color.from_string('rgb(255, 255, 255)')\nRGB_COLOUR = Color.from_string('rgb(40%, 20%, 40%)')\nRGBA_COLOUR = Color.from_string('rgba(255, 255, 255, 0.5)')\nRGBA_COLOUR = Color.from_string('rgba(40%, 20%, 40%, 0.5)')\nHSL_COLOUR = Color.from_string('hsl(100, 0%, 50%)')\nHSLA_COLOUR = Color.from_string('hsla(100, 0%, 50%, 0.5)')\n```\n\n----------------------------------------\n\nTITLE: Scroll By Amount using Selenium Wheel (JavaScript)\nDESCRIPTION: Scrolls the viewport by a specified amount in the x and y directions. Takes delta x and delta y values as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.actions()\n  .scroll(20, 50, WheelInput.Origin.viewport, 0, 0)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium (Kotlin)\nDESCRIPTION: This Kotlin code demonstrates a copy and paste operation using Selenium's Actions API. It types 'Selenium', selects all text (using CTRL+A or CMD+A), copies the text (CTRL+C or CMD+C), moves to the end of the line, pastes the copied text (CTRL+V or CMD+V), and then adds an exclamation mark. The final result in the element should be 'SeleniumSelenium!'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nval selectAll = if (Platform.getCurrent().is(Platform.MAC)) Keys.COMMAND + \"a\" else Keys.CONTROL + \"a\"\nval copy = if (Platform.getCurrent().is(Platform.MAC)) Keys.COMMAND + \"c\" else Keys.CONTROL + \"c\"\nval paste = if (Platform.getCurrent().is(Platform.MAC)) Keys.COMMAND + \"v\" else Keys.CONTROL + \"v\"\n\nval actions = Actions(driver)\nactions.sendKeys(\"Selenium\")\n    .sendKeys(selectAll)\n    .sendKeys(copy)\n    .sendKeys(Keys.END)\n    .sendKeys(paste)\n    .sendKeys(\"!\")\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Set Download Capability in Selenium Options\nDESCRIPTION: Sets the `se:downloadsEnabled` capability to `true` in the ChromeOptions, indicating that the test requires automatic managing of downloaded files.  This is required for using managed downloads feature on selenium grid nodes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.zh-cn.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\noptions.setCapability(\"se:downloadsEnabled\", true);\n```\n\n----------------------------------------\n\nTITLE: Get Browsing Context Realms - JavaScript\nDESCRIPTION: This snippet retrieves realms associated with a browsing context using JavaScript and the WebDriver BiDi API. It leverages the `script.getRealms` method, specifying the context, to fetch the realms. The browsing context ID is required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('get browsing context realms', async () => {\n  let realms = await connection.script.getRealms({ context: contextId });\n  expect(realms.realms.length).toBeGreaterThan(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot - Selenium WebDriver - Ruby\nDESCRIPTION: This snippet takes a screenshot of the current browser window using the Selenium WebDriver API in Ruby and saves it to a file. Requires the selenium-webdriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_56\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\ndriver.get 'https://example.com/'\n\n    # Takes and Stores the screenshot in specified path\ndriver.save_screenshot('./image.png')\n\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Standalone with Custom Max Sessions and Port\nDESCRIPTION: This snippet shows how to start the Selenium Standalone server with a custom maximum number of sessions and a specific port number.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.zh-cn.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava -jar selenium-server-<version>.jar standalone --max-sessions 4 --port 4444\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium (Ruby)\nDESCRIPTION: This Ruby snippet uses Selenium's Actions API to send the keys \"Selenium!\" to the currently active element. It creates an Actions object, uses the send_keys method to input the string, and then calls perform to execute the action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nactions = driver.action\nactions.send_keys('Selenium!').perform\n```\n\n----------------------------------------\n\nTITLE: Key Up Action in Selenium (Python)\nDESCRIPTION: This Python code snippet shows how to perform a key up action using the Actions API in Selenium. It creates an ActionChains object, performs a key_down action on the Keys.SHIFT key, sends the \"a\" key, then performs a key_up action on the Keys.SHIFT key, and sends \"a\" key again. Finally, it calls perform() to execute the actions, resulting in \"Aa\".\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nactions = ActionChains(driver)\nactions.key_down(Keys.SHIFT)\n    .send_keys(\"a\")\n    .key_up(Keys.SHIFT)\n    .send_keys(\"a\")\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Getting a Named Cookie - Python\nDESCRIPTION: This code snippet demonstrates how to retrieve a cookie by name using Selenium WebDriver in Python.  It adds a cookie and then retrieves it using `get_cookie` method and verifies its name and value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://www.example.com\")\ncookie = { 'name' : 'foo', 'value' : 'bar' }\ndriver.add_cookie(cookie)\n\nprint(driver.get_cookie(\"foo\"))\n\nfound_cookie = driver.get_cookie(\"foo\")\nassert found_cookie['name'] == 'foo'\nassert found_cookie['value'] == 'bar'\n```\n\n----------------------------------------\n\nTITLE: Check Element Displayed Status - Python\nDESCRIPTION: Demonstrates how to check if a web element is displayed on a webpage using Python and Selenium WebDriver. The `is_displayed()` method returns a boolean indicating the visibility of the element. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nemail_input = driver.find_element(By.NAME, \"email_input\")\nassert email_input.is_displayed() is True\n```\n\n----------------------------------------\n\nTITLE: Set Page Margins Java\nDESCRIPTION: This code snippet demonstrates how to set the page margins for printing in Java with Selenium, using PrintOptions and PageMargin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nPageMargin pageMargin = new PageMargin();\npageMargin.setTop(10);\nprintOptions.setPageMargins(pageMargin);\n\nbyte[] pdfContent = ((PrintsPage) driver).print(printOptions);\n```\n\n----------------------------------------\n\nTITLE: Take Element Screenshot in Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to capture a screenshot of a specific element on a webpage using Selenium WebDriver in Kotlin. It uses the `getScreenshotAs` method to get the screenshot and `FileUtils.copyFile` to save the file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_62\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.apache.commons.io.FileUtils\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.*\nimport java.io.File\n\nfun main() {\nval driver = ChromeDriver()\ndriver.get(\"https://www.example.com\")\nval element = driver.findElement(By.cssSelector(\"h1\"))\nval scrFile: File = element.getScreenshotAs(OutputType.FILE)\nFileUtils.copyFile(scrFile, File(\"./image.png\"))\ndriver.quit()\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Responses using CDP in Ruby\nDESCRIPTION: This Ruby code demonstrates transforming network responses using the Chrome DevTools Protocol (CDP) in Selenium. It intercepts network requests, modifies the response body, and then fulfills the request with the modified content. The code navigates to a specified URL and asserts that the page title has been successfully transformed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n@driver.execute_cdp 'Network.enable'\nrequest_id = @driver.execute_cdp('Network.getRequestId')['requestId']\nnew_response = '<h1>Target Page</h1>'\n@driver.execute_cdp 'Network.fulfillRequest', requestId: request_id, statusCode: 200, body: new_response\n```\n\n----------------------------------------\n\nTITLE: Get Element Location and Size - Java\nDESCRIPTION: This snippet demonstrates how to get the location and size of a web element using Selenium WebDriver in Java. It finds an element by name and uses the getRect() method to retrieve a Rectangle object containing its x, y, width, and height.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"range_input\"));\nRectangle rect = element.getRect();\nSystem.out.println(\"X: \" + rect.getX() + \", Y: \" + rect.getY() + \", Width: \" + rect.getWidth() + \", Height: \" + rect.getHeight());\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Confirm in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to interact with a JavaScript confirm dialog using Selenium WebDriver. It switches to the alert, gets the text, and then dismisses the alert.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nalert = wait.until { driver.switch_to.alert }\ntext = alert.text\nalert.dismiss\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Exception Handler with WebDriver BiDi in Ruby\nDESCRIPTION: This code snippet shows how to add a handler for JavaScript exceptions using WebDriver BiDi in Ruby. It uses the `add_event_listener` method to listen for 'script.exception' events and prints the exception details.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.ja.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.bidi.script.add_event_listener(\n  event: 'script.exception',\n  callback: lambda { |params, context| puts \"Javascript exception: #{params}\" }\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Virtual Authenticator in C#\nDESCRIPTION: This snippet removes a previously added virtual authenticator, identifying it by its ID in C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nIDevTools devTools = ((IHasDevTools)driver).GetDevTools();\nDevToolsSession session = devTools.GetDevToolsSession();\nVirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions()\n{\n    ProtocolType = Protocol.Ctap2\n};\nstring authenticatorId = (await session.WebAuthn.AddVirtualAuthenticatorAsync(options)).AuthenticatorId;\nawait session.WebAuthn.RemoveVirtualAuthenticatorAsync(authenticatorId);\n\n```\n\n----------------------------------------\n\nTITLE: Find Element by Name - C#\nDESCRIPTION: This snippet shows how to locate a web element using its name attribute in C#. It initializes a ChromeDriver and uses the `FindElement` method with `By.Name` to find the element with the name 'newsletter'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_13\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.Name(\"newsletter\"));\n```\n\n----------------------------------------\n\nTITLE: Adding Virtual Authenticator in Python\nDESCRIPTION: This snippet shows how to add a virtual authenticator in Python, configuring the protocol for the authenticator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndev_tools = driver.devtools\ndev_tools.create_session()\noptions = VirtualAuthenticatorOptions(protocol=Protocol.CTAP2)\ndev_tools.webauthn.add_virtual_authenticator(options)\n\n```\n\n----------------------------------------\n\nTITLE: Find Element using CSS Selector (Optimized)\nDESCRIPTION: This snippet demonstrates how to locate an element using a single CSS selector that combines the ID of the parent element and the class name of the target element. This approach is more efficient than nested lookups because it issues a single command to the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_16\n\nLANGUAGE: CSharp\nCODE:\n```\nvar fruit = driver.FindElement(By.CssSelector(\"#fruits .tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Node with Custom Capability - Java\nDESCRIPTION: This command starts another Selenium Grid Node with a custom capability.  The `--detect-drivers false` flag disables automatic driver detection, and `--driver-configuration` sets the display name and stereotype, defining the browser capabilities. The `gsg:customcap` is set to `false` in this node.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.pt-br.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar node --detect-drivers false --driver-configuration display-name=\"Chrome (custom capability true)\" max-sessions=1 stereotype='{\"browserName\":\"chrome\",\"gsg:customcap\":false}' --port 6262\n```\n\n----------------------------------------\n\nTITLE: Getting Active Element in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to retrieve the 'title' attribute of the currently active element on a web page using Selenium WebDriver. It initializes a ChromeDriver, navigates to Google, enters text into the search box, and then retrieves and prints the 'title' attribute of the active element. It requires the Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_38\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.By\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://www.google.com\")\n        driver.findElement(By.cssSelector(\"[name='q']\")).sendKeys(\"webElement\")\n\n        // Get attribute of current active element\n        val attr = driver.switchTo().activeElement().getAttribute(\"title\")\n        print(attr)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Output in C#\nDESCRIPTION: This snippet shows how to configure logger output to a file in C# using the `OpenQA.Selenium.Internal.Logging` namespace and `FileLogHandler`. It adds a handler to direct logs to a specific file. Requires the `OpenQA.Selenium.Internal.Logging` namespace.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nLog.AddHandler(new FileLogHandler(\"selenium.log\"));\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to a New Window in Selenium (Ruby)\nDESCRIPTION: Opens a new window using Selenium 4's `new_window` functionality and switches the driver's focus to it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.switch_to.new_window(:window)\ndriver.get('https://www.selenium.dev/')\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - Selenium WebDriver - C#\nDESCRIPTION: This snippet sets the size of the browser window to 1024x768 pixels using the Selenium WebDriver API in C#. It uses the Size struct to specify the new window size. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Manage().Window.Size = new Size(1024, 768);\n```\n\n----------------------------------------\n\nTITLE: Get Element Attribute - Kotlin\nDESCRIPTION: This snippet demonstrates how to fetch the value property associated with the textbox having name \"email_input\" after navigating to a specific URL using Selenium WebDriver in Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_47\n\nLANGUAGE: kotlin\nCODE:\n```\n// Navigate to URL\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n//fetch the value property associated with the textbox\nval attr = driver.findElement(By.name(\"email_input\")).getAttribute(\"value\")\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options from Select in Selenium\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of selected options in a <select> element using Selenium WebDriver. The `allSelectedOptions` method is used to get the currently selected options.  For a single select list this will be a list with one element; for a multiple select list, it can contain zero or many elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nval selectedOptions = select.allSelectedOptions\n```\n\n----------------------------------------\n\nTITLE: Double Click with Selenium\nDESCRIPTION: Moves to the center of an element and performs a double click. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_32\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"clickable\"));\nActions actions = new Actions(driver);\nactions.DoubleClick(element).Perform();\n```\n\n----------------------------------------\n\nTITLE: Displaying Distributor Component Help\nDESCRIPTION: This command displays configuration help specific to the Distributor component of the Selenium Grid. Replace `<version>` with the actual Selenium server version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.pt-br.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar distributor --help\n```\n\n----------------------------------------\n\nTITLE: Get Page Title with Selenium\nDESCRIPTION: Retrieves the title of the current web page loaded in the browser using Selenium WebDriver. This functionality is demonstrated in Java, Python, C#, Ruby, and JavaScript. The `driver.title` property or method is used to access the title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.ja.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver.title\n```\n\n----------------------------------------\n\nTITLE: Find Element by Class Name - Kotlin\nDESCRIPTION: This snippet demonstrates how to locate a web element using its class name in Kotlin. It initializes a ChromeDriver and uses the `findElement` method with `By.className` to find the element with the class 'information'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.className(\"information\"))\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Authentication via CDP in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to set basic authentication credentials for a Chrome browser session using the Chrome DevTools Protocol (CDP). It uses `register` to configure authentication with a username and password. The driver instance is essential for executing this code.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.register(Selenium::WebDriver::Bidi::UsernameAndPassword.new('test', 'test'))\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to Eager in Python\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'eager' in Python. The WebDriver waits until the 'DOMContentLoaded' event fires.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\noptions = Options()\noptions.page_load_strategy = PageLoadStrategy.EAGER\n```\n\n----------------------------------------\n\nTITLE: Printing a Page using BrowsingContext in Java\nDESCRIPTION: This code snippet shows how to print a webpage using the `BrowsingContext` interface in Java and retrieve the PDF in base64 format. It first casts the WebDriver to `BrowsingContext`, creates `PrintOptions`, and then calls `print()`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nBrowsingContext context = (BrowsingContext) driver;\nPrintOptions options = new PrintOptions();\nString pdf = context.print(options);\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium\nDESCRIPTION: Demonstrates how to perform a copy and paste action using Selenium's Actions API. It involves pressing and releasing control/command keys along with 'a', 'c', and 'v'. This example shows how to copy all text, and then paste it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst element = await driver.findElement(By.tagName('textarea'));\nconst selectAll = os.platform() === 'darwin' ? Key.COMMAND + 'a' : Key.CONTROL + 'a';\nconst copy = os.platform() === 'darwin' ? Key.COMMAND + 'c' : Key.CONTROL + 'c';\nconst paste = os.platform() === 'darwin' ? Key.COMMAND + 'v' : Key.CONTROL + 'v';\n\nawait element.sendKeys('Selenium');\nawait element.sendKeys(selectAll);\nawait element.sendKeys(copy);\nawait element.sendKeys(paste);\nawait element.sendKeys('!');\n```\n\n----------------------------------------\n\nTITLE: Setting Shrink To Fit in Selenium Java\nDESCRIPTION: This Java code snippet demonstrates how to enable shrink-to-fit using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setShrinkToFit(true);\n\nassertThat(printOptions.getShrinkToFit()).isTrue();\n```\n\n----------------------------------------\n\nTITLE: Setting up WebDriver in Ruby\nDESCRIPTION: This code snippet demonstrates how to set up a WebDriver instance using ChromeDriver in Ruby.  It initializes the driver and navigates to a specific URL.  It makes use of RSpec's `before` hook.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'selenium-webdriver'\nrequire 'rspec'\n\nRSpec.describe 'Using Selenium' do\n  it 'works' do\n    driver = Selenium::WebDriver.for :chrome\n    driver.get 'https://www.selenium.dev'\n\n    title = driver.title\n    expect(title).to eq('SeleniumHQ Browser Automation')\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Title with Selenium\nDESCRIPTION: This snippet retrieves the title of the current webpage loaded in the browser. It uses the `title` property of the WebDriver instance.  Dependencies include a properly initialized WebDriver and a loaded webpage.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntitle = driver.title\n```\n\n----------------------------------------\n\nTITLE: Python Teardown Example (pytest)\nDESCRIPTION: This Python snippet shows the teardown process to close the WebDriver instance after each test, using pytest's fixture finalization. This ensures that the browser is closed after each test function. `driver.quit()` closes all browser windows.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef driver():\n    driver = webdriver.Chrome()\n    yield driver\n    driver.quit()\n```\n\n----------------------------------------\n\nTITLE: Setting Script Timeout with Ruby\nDESCRIPTION: This code snippet demonstrates how to set the script timeout in Ruby using Selenium WebDriver's Options class. The `script_timeout=` method is used to specify the maximum time a script can execute before being terminated. The timeout is set to 30 seconds in this example.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.manage.timeouts.script_timeout = 30\n```\n\n----------------------------------------\n\nTITLE: Setting Page Ranges - Java\nDESCRIPTION: This Java snippet demonstrates setting the page ranges to print using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setPageRanges(ImmutableList.of(\"1-2\"));\n\nassertThat(printOptions.getPageRanges()).containsExactly(\"1-2\");\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions to Chrome Options\nDESCRIPTION: This code snippet demonstrates how to add Chrome extensions to the browser options. The `add_extension` method takes the path to a `.crx` file as input. For unpacked directories, the `load-extension` argument should be used instead, as described in the linked ChromeDriver documentation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_17\n\nLANGUAGE: CSharp\nCODE:\n```\noptions.AddExtension(\"/path/to/extension.crx\");\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium (Kotlin)\nDESCRIPTION: This Kotlin snippet uses Selenium's Actions API to send the keys \"Selenium!\" to the currently active element. It creates an Actions object, uses the sendKeys method to input the string, and then calls perform() to execute the action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nval actions = Actions(driver)\nactions.sendKeys(\"Selenium!\").perform()\n```\n\n----------------------------------------\n\nTITLE: Setting W3C Capabilities After Upgrade - Java\nDESCRIPTION: Demonstrates the updated approach for setting capabilities in Selenium 4 using Java, incorporating vendor prefixes. It uses FirefoxOptions and sets the platformName, browserVersion, and 'cloud:options' with build and name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxOptions browserOptions = new FirefoxOptions();\nbrowserOptions.setPlatformName(\"Windows 10\");\nbrowserOptions.setBrowserVersion(\"92\");\nMap<String, Object> cloudOptions = new HashMap<>();\ncloudOptions.put(\"build\", myTestBuild);\ncloudOptions.put(\"name\", myTestName);\nbrowserOptions.setCapability(\"cloud:options\", cloudOptions);\nWebDriver driver = new RemoteWebDriver(new URL(cloudUrl), browserOptions);\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method (UnitTest): Selenium WebDriver (Ruby)\nDESCRIPTION: This Ruby snippet shows a `teardown` method within a `Test::Unit::TestCase` that quits the WebDriver instance after each test.  The `@driver.quit` call ensures the browser is closed to free resources and prevent interference between tests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\n    # UnitTest Teardown\n    # https://www.rubydoc.info/github/test-unit/test-unit/Test/Unit/TestCase\ndef teardown\n    @driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Hub (Java)\nDESCRIPTION: This command starts the Hub component of the Selenium Grid. The Hub manages the distribution of tests to the Nodes. By default, the server will listen for RemoteWebDriver requests on http://localhost:4444.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.zh-cn.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar hub\n```\n\n----------------------------------------\n\nTITLE: HomePage Page Object - Java\nDESCRIPTION: This code defines a Page Object for a home page. It encapsulates the locator for the welcome message and provides methods to interact with elements on the home page. The constructor validates that the correct page is loaded. It depends on Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.ja.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\n\n/**\n * Page Object encapsulates the Home Page\n */\npublic class HomePage {\n  protected WebDriver driver;\n\n  // <h1>Hello userName</h1>\n  private By messageBy = By.tagName(\"h1\");\n\n  public HomePage(WebDriver driver){\n    this.driver = driver;\n    if (!driver.getTitle().equals(\"Home Page of logged in user\")) {\n      throw new IllegalStateException(\"This is not Home Page of logged in user,\" +\n            \" current page is: \" + driver.getCurrentUrl());\n    }\n  }\n\n  /**\n    * Get message (h1 tag)\n    * @return String message text\n    */\n  public String getMessageText() {\n    return driver.findElement(messageBy).getText();\n  }\n\n  public HomePage manageProfile() {\n    // Page encapsulation to manage profile functionality\n    return new HomePage(driver);\n  }\n  /* More methods offering the services represented by Home Page\n  of Logged User. These methods in turn might return more Page Objects\n  for example click on Compose mail button could return ComposeMail class object */\n}\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element - Selenium\nDESCRIPTION: Drags an element from its original location and drops it onto another target element. The action involves pressing the left mouse button on the source element, moving to the target element, and then releasing the mouse button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nval source = driver.findElement(By.id(\"draggable\"))\nval target = driver.findElement(By.id(\"droppable\"))\nactions.dragAndDrop(source, target).perform()\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - Java\nDESCRIPTION: Demonstrates how to retrieve the browser window's position (top-left corner coordinates) in Java using Selenium WebDriver. The code retrieves the x and y coordinates individually and also demonstrates storing the position in a `Point` object for later use. This example shows two equivalent ways to access window position.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_42\n\nLANGUAGE: java\nCODE:\n```\n// Access each dimension individually\nint x = driver.manage().window().getPosition().getX();\nint y = driver.manage().window().getPosition().getY();\n\n// Or store the dimensions and query them later\nPoint position = driver.manage().window().getPosition();\nint x1 = position.getX();\nint y1 = position.getY();\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait Timeout with Java\nDESCRIPTION: This code snippet demonstrates how to set the implicit wait timeout in Java using Selenium WebDriver's Options class. The `implicitlyWait` method is used to specify the amount of time the driver should wait when searching for an element if it is not immediately present. The timeout is set to 10 seconds in this example.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_37\n\nLANGUAGE: java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\n```\n\n----------------------------------------\n\nTITLE: Login Test using DSL in Java\nDESCRIPTION: This Java code demonstrates how to use the `loginAsUser` DSL method in a test. It shows how to abstract away UI details and focus on the user's intent. It uses assertions to verify the outcome of the actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/domain_specific_language.pt-br.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic void loginTest() {\n    loginAsUser(\"cbrown\", \"cl0wn3\");\n\n    // Agora que estamos logados, fazemos alguma outra coisa--como usamos uma DSL para suportar\n    // nossos testadores, é apenas escolher um dos métodos disponíveis.\n    do.something();\n    do.somethingElse();\n    Assert.assertTrue(\"Algo deveria ter sido feito!\", something.wasDone());\n\n    // Note que ainda não nos referimos a nenhum botão ou web control nesse\n    // script...\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's Select class, specifically by its index (position) within the list of options. The `selectByIndex()` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\nselect.selectByIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Installing Unsigned Add-ons in Firefox with Selenium (Java)\nDESCRIPTION: This Java snippet installs an unsigned Firefox add-on from a directory. The `installExtension` method is used to install the temporary addon.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_42\n\nLANGUAGE: java\nCODE:\n```\ndriver.installExtension(new File(\"/path/to/unpacked/extension\"));\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium (Python)\nDESCRIPTION: Demonstrates how to perform a copy and paste action using the Actions API in Python. It checks the OS to determine the correct key for copy/paste.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nelement = driver.find_element(By.TAG_NAME, \"input\")\nelement.send_keys(\"Selenium\")\nif platform.system() == \"Darwin\":\n    selectAll = Keys.COMMAND + \"a\"\n    copy = Keys.COMMAND + \"c\"\n    paste = Keys.COMMAND + \"v\"\nelse:\n    selectAll = Keys.CONTROL + \"a\"\n    copy = Keys.CONTROL + \"c\"\n    paste = Keys.CONTROL + \"v\"\nelement.send_keys(selectAll)\nelement.send_keys(copy)\nelement.send_keys(paste)\nelement.send_keys(Keys.SHIFT, \"1\")\n```\n\n----------------------------------------\n\nTITLE: Installing Unsigned Add-ons (Temporary) in Firefox with Selenium (Java)\nDESCRIPTION: This snippet demonstrates how to install an unsigned Firefox add-on (as a temporary add-on) using Selenium WebDriver in Java. The addon is installed from a directory.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_42\n\nLANGUAGE: java\nCODE:\n```\nString id = ((HasExtensions) driver).installAddon(new File(\"webextensions-selenium-example\"));\n```\n\n----------------------------------------\n\nTITLE: Getting a Named Cookie - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to retrieve a cookie by name using Selenium WebDriver. It adds a cookie and then retrieves it using `driver.manage().getCookieNamed()`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://example.com\")\n        driver.manage().addCookie(Cookie(\"foo\", \"bar\"))\n\n        // Get cookie details with named cookie 'foo'\n        val cookie = driver.manage().getCookieNamed(\"foo\")\n        println(cookie)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Browser Name Option in Java\nDESCRIPTION: This snippet demonstrates how to initialize the browser name option in Java using Selenium.  The browser name is set by default when using option classes.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.getBrowserName();\n```\n\n----------------------------------------\n\nTITLE: Asserting Title with Selenium\nDESCRIPTION: This code snippet shows how to assert the title of a webpage using Selenium with Kotest in Kotlin. It retrieves the title and asserts that it matches the expected value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval title = driver.title\ntitle shouldBe \"SeleniumHQ Browser Automation\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL: Querying Slot Information for All Sessions (curl)\nDESCRIPTION: This curl command fetches slot information (ID, stereotype, last started) for all sessions within the Selenium Grid. It relies on the GraphQL API and requires the `curl` tool to execute.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.ja.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ sessionsInfo { sessions { id, slot { id, stereotype, lastStarted } } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Binary Location\nDESCRIPTION: This code snippet shows how to specify the path to the Chrome binary to use a specific Chrome installation or a Chromium-based browser. This allows you to drive different Chromium-based browsers with ChromeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\noptions.setBinary(\"/path/to/chrome/binary\");\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its visible text using Selenium WebDriver. The `SelectByText()` method is used to select the option based on the provided text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\nselect.SelectByText(\"One\");\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait Timeout in Python\nDESCRIPTION: This Python code illustrates setting the implicit wait timeout in Selenium. Implicit wait dictates the maximum duration WebDriver waits while searching for elements that are not immediately present. Time is specified in seconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\noptions = Options()\noptions.implicitly_wait_timeout = 50\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel (CSharp)\nDESCRIPTION: Scrolls the viewport so the bottom of the specified web element is at the bottom of the screen.  This method takes a web element as the sole argument. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"idOfMyElement\"));\nnew Actions(driver)\n    .ScrollFromOrigin(WheelInput.Origin.Viewport, 0, element.Rect.Y)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium (C#)\nDESCRIPTION: This C# code demonstrates a copy and paste operation using Selenium's Actions API. It types 'Selenium', selects all text (using CTRL+A or CMD+A), copies the text (CTRL+C or CMD+C), moves to the end of the line, pastes the copied text (CTRL+V or CMD+V), and then adds an exclamation mark. The final result should be 'SeleniumSelenium!'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nstring selectAll = OperatingSystem.IsMacOS() ? Keys.Command + \"a\" : Keys.Control + \"a\";\nstring copy = OperatingSystem.IsMacOS() ? Keys.Command + \"c\" : Keys.Control + \"c\";\nstring paste = OperatingSystem.IsMacOS() ? Keys.Command + \"v\" : Keys.Control + \"v\";\n\nActions actions = new Actions(driver);\nactions.SendKeys(\"Selenium\")\n    .SendKeys(selectAll)\n    .SendKeys(copy)\n    .SendKeys(Keys.End)\n    .SendKeys(paste)\n    .SendKeys(\"!\")\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Listening to JS Exceptions - JavaScript\nDESCRIPTION: Listens for JavaScript exceptions using the BiDi API in Selenium with JavaScript, logging the exception text to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.ja.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('should listen to the js exceptions', async () => {\n  let logInspector = await new LogInspector(driver);\n  await logInspector.onJsException(exception => {\n    console.log('----------------------------');\n    console.log('Text: ' + exception.text);\n    console.log('----------------------------');\n  });\n  await driver.get(url);\n});\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - Python\nDESCRIPTION: Demonstrates how to retrieve the browser window's position (top-left corner coordinates) in Python using Selenium WebDriver. The code retrieves the x and y coordinates individually using dictionary access, and also demonstrates storing the position in a dictionary for later use. Offers two approaches for retrieving browser window position.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\n    # Access each dimension individually\nx = driver.get_window_position().get('x')\ny = driver.get_window_position().get('y')\n\n    # Or store the dimensions and query them later\nposition = driver.get_window_position()\nx1 = position.get('x')\ny1 = position.get('y')\n```\n\n----------------------------------------\n\nTITLE: Listening to JS Exceptions in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to listen to JavaScript exceptions using the BiDirectional API in Selenium. It sets up a listener to capture JavaScript exception messages and then triggers a JS exception on the webpage.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.pt-br.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('Listen to js exceptions', async () => {\n  let logs = [];\n  await bidiSession.on('log.entryAdded', (event) => {\n    logs.push(event.params.entry.text);\n  });\n\n  await driver.get(url);\n  await driver.findElement(By.id('jsException')).click();\n  await expect(logs).toEqual(['ReferenceError: Not defined is not defined']);\n});\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium\nDESCRIPTION: Demonstrates how to perform a copy and paste action using Selenium's Actions API. It involves pressing and releasing control/command keys along with 'a', 'c', and 'v'. This example shows how to copy all text, and then paste it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nelement = driver.find_element(By.TAG_NAME, \"textarea\")\nif platform.system() == \"Darwin\":\n    select_all = Keys.COMMAND + \"a\"\n    copy = Keys.COMMAND + \"c\"\n    paste = Keys.COMMAND + \"v\"\nelse:\n    select_all = Keys.CONTROL + \"a\"\n    copy = Keys.CONTROL + \"c\"\n    paste = Keys.CONTROL + \"v\"\nelement.send_keys(\"Selenium\")\nelement.send_keys(select_all)\nelement.send_keys(copy)\nelement.send_keys(paste)\nelement.send_keys(\"!\")\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Driver Service Log File Output\nDESCRIPTION: This code snippet demonstrates how to configure the Firefox driver service to output logs to a specific file. This is useful for debugging and troubleshooting issues with the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\nGeckoDriverService service = new GeckoDriverService.Builder()\n    .usingFileOutput(new File(\"geckodriver.log\"))\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Capturing Console Logs in Ruby\nDESCRIPTION: This Ruby snippet demonstrates capturing console logs using Chrome DevTools Protocol (CDP) with Selenium. It assumes that a browser instance is already available.  It listens for the `log.entryAdded` event and retrieves the log message.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'listens to console logs', exclusive: :true do\n  driver.get(\"https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html\")\n```\n\n----------------------------------------\n\nTITLE: Setting unhandledPromptBehavior in Java\nDESCRIPTION: This code snippet demonstrates how to set the `unhandledPromptBehavior` capability in Java.  This defines how user prompts are handled. Options are 'dismiss', 'accept', 'dismiss and notify', 'accept and notify', and 'ignore'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_40\n\nLANGUAGE: Java\nCODE:\n```\noptions.setUnhandledPromptBehavior(UnexpectedAlertBehaviour.ACCEPT);\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's Select class, specifically by its index (position) within the list of options. The `selectByIndex()` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait select.selectByIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Printing Page in Ruby\nDESCRIPTION: This Ruby snippet navigates to a given URL and then prints the current page with landscape orientation, saving the base64 encoded content.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_53\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.navigate_to 'https://www.selenium.dev'\n\n    base64encodedContent = driver.print_page(orientation: 'landscape')\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Logs in Python\nDESCRIPTION: This Python code retrieves browser logs from the Edge driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_50\n\nLANGUAGE: python\nCODE:\n```\ndriver.get_log('browser')\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookie Attribute to Lax in Python\nDESCRIPTION: This snippet shows how to set the SameSite attribute of a cookie to Lax in Python using Selenium WebDriver. It creates a cookie dictionary with the name 'foo', value 'bar', and SameSite attribute set to 'Lax', and then adds it to the current browser context. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"http://www.example.com\")\ncookie = {\"name\": \"foo\", \"value\": \"bar\", \"sameSite\": \"Lax\"}\ndriver.add_cookie(cookie)\n\nretrieved_cookie = driver.get_cookie(\"foo\")\nassert retrieved_cookie['sameSite'] == 'Lax'\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Router (Shell)\nDESCRIPTION: This command starts the Router component, which redirects new session requests to the queue and redirects running session requests to the Node running that session in a Distributed Grid setup. The default port is 4444.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.en.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar router --sessions http://<sessions-ip>:5556 --distributor http://<distributor-ip>:5553 --sessionqueue http://<new-session-queue-ip>:5559 --port 4444\n```\n\n----------------------------------------\n\nTITLE: De-selecting Option by Value in Select List - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to de-select an option in a multiple select list by its value using Selenium WebDriver. It assumes that you have already initialized the WebDriver and located the select element. The code creates a `Select` object from the `WebElement` and calls `deselectByValue()` with the value of the option to de-select. Before de-selecting, all options are cleared.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_47\n\nLANGUAGE: kotlin\nCODE:\n```\nselect.deselectAll()\nselect.deselectByValue(\"Volvo\")\n```\n\n----------------------------------------\n\nTITLE: Move To Element with Selenium\nDESCRIPTION: Moves the mouse to the center of the element, simulating a hover. Requires a WebDriver instance and that the element is in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_38\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"clickable\"));\nActions actions = new Actions(driver);\nactions.MoveToElement(element).Perform();\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium\nDESCRIPTION: This code snippet demonstrates how to initialize a Select object in Selenium WebDriver. It first locates a <select> element using a locator strategy (e.g., by ID) and then creates a Select object using the found element.  Note that as of Selenium 4.5, you can't create a `Select` object if the `<select>` element is disabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.support.ui import Select\nselect = Select(driver.find_element(By.ID, \"selectomatic\"))\n```\n\n----------------------------------------\n\nTITLE: Check Element Displayed Status - Ruby\nDESCRIPTION: Demonstrates how to check if a web element is displayed on a webpage using Ruby and Selenium WebDriver. The `displayed?` method returns a boolean indicating the visibility of the element. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nexpect(driver.find_element(name: 'email_input').displayed?).to be true\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to set the position of the browser window to the top-left corner of the primary monitor (0, 0) using Selenium WebDriver. A new `Point` object is created with the coordinates and then assigned to the `position` property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_50\n\nLANGUAGE: kotlin\nCODE:\n```\n// Move the window to the top left of the primary monitor\ndriver.manage().window().position = Point(0,0)\n```\n\n----------------------------------------\n\nTITLE: Enable BiDi in Python\nDESCRIPTION: This code snippet demonstrates how to enable BiDi in Python when setting browser options. Setting the 'enable_bidi' attribute to 'True' enables the necessary functionality for bidirectional communication with the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\noptions.enable_bidi = True\n```\n\n----------------------------------------\n\nTITLE: Getting Element Colors in Java\nDESCRIPTION: This Java snippet demonstrates how to retrieve the color and background color of a web element using Selenium WebDriver and the Color class. It gets the CSS value of the 'color' and 'background-color' properties and converts them into Color objects for further comparison or conversion.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nColor loginButtonColour = Color.fromString(driver.findElement(By.id(\"login\")).getCssValue(\"color\"));\n\nColor loginButtonBackgroundColour = Color.fromString(driver.findElement(By.id(\"login\")).getCssValue(\"background-color\"));\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Proxy with ChromeOptions in Java\nDESCRIPTION: This Java code snippet demonstrates how to configure a Chrome browser to use an HTTP proxy server by setting the proxy capability in ChromeOptions. It uses the `org.openqa.selenium.Proxy` class to define the proxy and the `org.openqa.selenium.chrome.ChromeOptions` class to set the browser options. The code navigates to google.com and then closes the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_49\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.Proxy;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\n\npublic class ProxyTest {\n  public static void main(String[] args) {\n    Proxy proxy = new Proxy();\n    proxy.setHttpProxy(\"<HOST:PORT>\");\n    ChromeOptions options = new ChromeOptions();\n    options.setCapability(\"proxy\", proxy);\n    WebDriver driver = new ChromeDriver(options);\n    driver.get(\"https://www.google.com/\");\n    driver.manage().window().maximize();\n    driver.quit();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid in Standalone Mode (Java)\nDESCRIPTION: This command starts the Selenium Grid in standalone mode, which combines all Grid components into a single process. It requires Java 11 or higher and a Selenium Server jar file. The server listens for RemoteWebDriver requests on http://localhost:4444 by default.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.zh-cn.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar standalone\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value Selenium Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to use Selenium WebDriver to retrieve the computed style property 'color' of a link text element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Navigate to Url\ndriver.get(\"https://www.selenium.dev/selenium/web/colorPage.html\")\n\n// Retrieves the computed style property 'color' of linktext\nval cssValue = driver.findElement(By.id(\"namedColor\")).getCssValue(\"background-color\")\n```\n\n----------------------------------------\n\nTITLE: Listening to Console Logs with BiDi API in Java\nDESCRIPTION: This code snippet demonstrates how to listen to console.log events using the BiDirectional API in Java and register callbacks to process these events. Requires Selenium 4.8 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.zh-cn.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBiDi biDi = new BiDi((HasDevTools) driver);\nbiDi.getBidi().log().addConsoleListener(event -> {\n  System.out.println(event.getText());\n  System.out.println(event.getRealm());\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options from Select in Selenium\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of selected options in a <select> element using Selenium WebDriver. The `all_selected_options` property is used to get the currently selected options.  For a single select list this will be a list with one element; for a multiple select list, it can contain zero or many elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nselected_options = select.all_selected_options\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element by Class Name - C#\nDESCRIPTION: This snippet demonstrates how to find the first element with a specific class name using the Selenium WebDriver in C#. It uses the `FindElement` method with `By.ClassName` to locate the element. The result is stored in an `IWebElement` object for further interaction.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nvar vegetable = driver.FindElement(By.ClassName(\"tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Edge Options - Java\nDESCRIPTION: Shows how to add command-line arguments to the Edge options in Java.\nThis allows customization of the Edge browser's behavior.\nDependencies: Selenium WebDriver, EdgeDriver, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\noptions.addArguments(\"--start-maximized\");\n```\n\n----------------------------------------\n\nTITLE: Handle Prompt Popup in Java\nDESCRIPTION: This Java code snippet illustrates handling a JavaScript prompt popup with Selenium WebDriver. It sends keys to the prompt, retrieves its text, and accepts it. A link click triggers the prompt.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.pt-br.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\ndriver.findElement(By.linkText(\"See a sample prompt\")).click();\nWait<WebDriver> wait = new FluentWait<>(driver).withTimeout(Duration.ofSeconds(10));\nAlert alert = wait.until(ExpectedConditions.alertIsPresent());\nalert.sendKeys(\"Selenium\");\nString text = alert.getText();\nalert.accept();\n```\n\n----------------------------------------\n\nTITLE: Click and Release with Selenium\nDESCRIPTION: Moves to the center of an element, presses, and releases the left mouse button, simulating a standard click.  It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(:id, 'clickable')\n@driver.action.move_to(element).click.perform\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi: Setting WebSocket URL in C#\nDESCRIPTION: This code snippet illustrates how to enable BiDi in C# by setting the `UseWebSocketUrl` property to `true`. This establishes the WebSocket connection required for bidirectional communication with the browser, enabling the WebDriver BiDi protocol.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.ja.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nUseWebSocketUrl = true,\n```\n\n----------------------------------------\n\nTITLE: Response Completed Event in JavaScript\nDESCRIPTION: This JavaScript code snippet listens for the 'responseCompleted' event and logs the response body size using Selenium BiDi.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nbidiSession.network.onResponseCompleted(event => {\n  console.log(event.response.bodySize);\n});\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window in Selenium\nDESCRIPTION: This code puts the browser window into fullscreen mode using Selenium WebDriver, similar to pressing F11 in most browsers. This will fill the entire screen.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_73\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Manage().Window.FullScreen();\n```\n\n----------------------------------------\n\nTITLE: Set Window Size: Selenium WebDriver (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to set the size of the browser window to 1024x768 pixels using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.manage().window().setRect({ width: 1024, height: 768 });\n```\n\n----------------------------------------\n\nTITLE: Locating Element by ID with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a web element on a page using its ID attribute with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.Id()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_9\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.Id(\"lname\"));\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset Selenium\nDESCRIPTION: This code snippet demonstrates how to perform a drag and drop operation by a specified offset using Selenium WebDriver.  The action starts with a click-and-hold on the source element, then moves the mouse by the given offset, and finally releases the mouse button. It is available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_66\n\nLANGUAGE: Java\nCODE:\n```\nWebElement source = driver.findElement(By.id(\"draggable\"));\n\nnew Actions(driver)\n  .clickAndHold(source)\n  .moveByOffset(100, 50)\n  .release()\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Excluding Switches in Chrome Options\nDESCRIPTION: This code snippet shows how to exclude specific command-line switches from being added to Chrome's launch arguments. This can be useful for preventing unwanted behavior or conflicts.  A common use case is to disable the popup blocker.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_25\n\nLANGUAGE: CSharp\nCODE:\n```\noptions.AddExcludedArgument(\"enable-automation\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in JavaScript\nDESCRIPTION: Demonstrates how to initialize a Select object in JavaScript using a WebElement representing the select element. Requires selenium-webdriver npm package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst selectElement = await driver.findElement(By.name('selectomatic'));\nconst select = await new Select(selectElement);\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookie Attribute in C#\nDESCRIPTION: This C# code demonstrates how to set the SameSite attribute of cookies using Selenium WebDriver. It creates two cookies, one with SameSite 'Strict' and another with SameSite 'Lax', and adds them to the current browser context. Requires Selenium WebDriver and ChromeDriver dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_32\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace SameSiteCookie {\n  class SameSiteCookie {\n    static void Main(string[] args) {\n      IWebDriver driver = new ChromeDriver();\n      try {\n        driver.Navigate().GoToUrl(\"http://www.example.com\");\n\n        var cookie1Dictionary = new System.Collections.Generic.Dictionary<string, object>() {\n          { \"name\", \"test1\" }, { \"value\", \"cookie1\" }, { \"sameSite\", \"Strict\" } };\n        var cookie1 = Cookie.FromDictionary(cookie1Dictionary);\n\n        var cookie2Dictionary = new System.Collections.Generic.Dictionary<string, object>() {\n          { \"name\", \"test2\" }, { \"value\", \"cookie2\" }, { \"sameSite\", \"Lax\" } };\n        var cookie2 = Cookie.FromDictionary(cookie2Dictionary);\n\n        driver.Manage().Cookies.AddCookie(cookie1);\n        driver.Manage().Cookies.AddCookie(cookie2);\n\n        System.Console.WriteLine(cookie1.SameSite);\n        System.Console.WriteLine(cookie2.SameSite);\n      } finally {\n        driver.Quit();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Size using PrintOptions in Python\nDESCRIPTION: This code snippet demonstrates how to set the page size to A4 using the PrintOptions class in Python. The `page_size` attribute is set to the desired page size. The `page_size` attribute is retrieved and confirmed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.page_size = \"A4\"\nassert print_options.page_size == \"A4\"\n```\n\n----------------------------------------\n\nTITLE: Getting Credentials in C#\nDESCRIPTION: This C# code retrieves the list of credentials from the virtual authenticator and iterates over them to print out their properties.  It gets the RP ID, user ID, and credential ID for each credential.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nIReadOnlyCollection<CredentialMetadata> credentials = await session.Security.GetCredentials();\n\nforeach (CredentialMetadata credential in credentials)\n{\n    Console.WriteLine($\"Rp Id = {credential.RpId}\");\n    Console.WriteLine($\"User Id = {credential.UserId}\");\n    Console.WriteLine($\"Credential Id = {credential.CredentialId}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Selected in Java\nDESCRIPTION: This code snippet demonstrates how to check if a web element is selected on a webpage using Selenium WebDriver in Java. It uses the `isSelected()` method of the WebElement interface. The method returns `true` if the element is selected, and `false` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"checkbox_input\"));\nboolean isSelected = element.isSelected();\nassertThat(isSelected).isTrue();\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Resident Credential in C#\nDESCRIPTION: This snippet demonstrates how to create a non-resident (stateless) credential in C#. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_17\n\nLANGUAGE: CSharp\nCODE:\n```\nawait session.SendCommand(new AddCredentialCommandSettings()\n{\n    Credential = new Credential()\n});\n```\n\n----------------------------------------\n\nTITLE: Getting All Options from Select in Selenium\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of all options available in a <select> element using Selenium WebDriver. The `options` method is used to obtain the list of WebElement objects representing the options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nval options = select.options\n```\n\n----------------------------------------\n\nTITLE: Key Down Action in Selenium (Ruby)\nDESCRIPTION: This Ruby code snippet demonstrates performing a key down action using Selenium's Actions API. An Actions object is created, a key_down action is performed on the Control key, then the 'c' key is sent. Finally, perform is called to execute these actions, effectively holding down the Control key while sending 'c'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nactions = driver.action\nactions.key_down(Selenium::WebDriver::Keys::CONTROL)\n  .send_keys('c')\n  .perform\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Timeout with Python\nDESCRIPTION: This code snippet demonstrates how to set the page load timeout in Python using Selenium WebDriver's Options class. The `set_page_load_timeout` method is used to specify the maximum time a page is allowed to load before a TimeoutException is thrown. The timeout is set to 30 seconds in this example.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ndriver.set_page_load_timeout(30)\n```\n\n----------------------------------------\n\nTITLE: Registering a Node with a Hub on a Different Machine (Shell)\nDESCRIPTION: This command registers a Node with a Hub running on a different machine, specifying the Hub's IP address and port.  It assumes the Hub is using the default port 4444.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.en.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --hub http://<hub-ip>:4444\n```\n\n----------------------------------------\n\nTITLE: Getting CSS Color Values\nDESCRIPTION: This snippet retrieves the color and background color of a login button using Selenium WebDriver in Python, then converts them to Color objects using the from_string method. It demonstrates how to fetch color values from web elements for testing purposes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nlogin_button_colour = Color.from_string(driver.find_element(By.ID,'login').value_of_css_property('color'))\n\nlogin_button_background_colour = Color.from_string(driver.find_element(By.ID,'login').value_of_css_property('background-color'))\n```\n\n----------------------------------------\n\nTITLE: Start Selenium Grid Hub\nDESCRIPTION: Starts the Selenium Grid Hub, which is the central point for managing and distributing test sessions. This command initializes the Hub and makes it available for nodes to register and receive test requests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.zh-cn.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\njava -jar selenium-server-<version>.jar hub\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Location in Java\nDESCRIPTION: Demonstrates how to specify the driver location in Java using the ChromeDriverService builder. This is useful when the driver is not in the system's PATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.en.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nChromeDriverService service = new ChromeDriverService.Builder().usingDriverExecutable(new File(\"/path/to/chromedriver\")).build();\n```\n\n----------------------------------------\n\nTITLE: Java Selenium Login Test Example\nDESCRIPTION: This Java code demonstrates how to use the `loginAsUser` DSL method in a test case. It calls the method with sample credentials and then performs other actions on the logged-in page.  It illustrates the ease of use and abstraction provided by the DSL, where the test focuses on the desired outcome rather than the UI interactions.  It depends on the previously defined `loginAsUser` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/domain_specific_language.zh-cn.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic void loginTest() {\n    loginAsUser(\"cbrown\", \"cl0wn3\");\n\n    // Now that we're logged in, do some other stuff--since we used a DSL to support\n    // our testers, it's as easy as choosing from available methods.\n    do.something();\n    do.somethingElse();\n    Assert.assertTrue(\"Something should have been done!\", something.wasDone());\n\n    // Note that we still haven't referred to a button or web control anywhere in this\n    // script...\n}\n```\n\n----------------------------------------\n\nTITLE: AddAdditionalOption After Selenium 4 (C#)\nDESCRIPTION: This code shows the recommended replacement for AddAdditionalCapability in C# with AddAdditionalOption in Selenium 4.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_30\n\nLANGUAGE: CS\nCODE:\n```\nvar browserOptions = new ChromeOptions();\nbrowserOptions.PlatformName = \"Windows 10\";\nbrowserOptions.BrowserVersion = \"latest\";\nvar cloudOptions = new Dictionary<string, object>();\nbrowserOptions.AddAdditionalOption(\"cloud:options\", cloudOptions);\n```\n\n----------------------------------------\n\nTITLE: Adding Credential in Python\nDESCRIPTION: This python code adds a credential. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\ndevtools.add_credential()\n```\n\n----------------------------------------\n\nTITLE: Get Router Component Help\nDESCRIPTION: This command displays configuration options specific to the 'router' component of Selenium Grid. It uses the '--help' flag with the 'router' argument.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.zh-cn.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar router --help\n```\n\n----------------------------------------\n\nTITLE: Iterate and Extract Text from Elements\nDESCRIPTION: This snippet demonstrates how to iterate through a list of WebElements obtained using `findElements` and extract the text content of each element. It retrieves all `<li>` elements and then prints the text of each element to the console. This allows for accessing the content of multiple elements identified by a common locator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nList<WebElement> elements = driver.findElements(By.tagName(\"li\"));\n\nfor (WebElement element : elements) {\n    System.out.println(\"Paragraph text:\" + element.getText());\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Waits (C#)\nDESCRIPTION: This C# code snippet shows how to customize explicit waits. It specifies a timeout, polling interval, and exceptions to ignore during the wait.  It makes use of `DefaultWait`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.ja.md#_snippet_12\n\nLANGUAGE: CSharp\nCODE:\n```\nDefaultWait<IWebDriver> wait = new DefaultWait<IWebDriver>(driver);\nwait.Timeout = TimeSpan.FromSeconds(10);\nwait.PollingInterval = TimeSpan.FromMilliseconds(500);\nwait.IgnoreExceptionTypes(typeof(NoSuchElementException));\nIWebElement element = wait.Until(d => d.FindElement(By.Id(\"myDynamicElement\")));\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to retrieve the dimensions (width and height) of the browser window using Selenium WebDriver. It shows two approaches: accessing each dimension individually and storing the dimensions in a `size` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\n    # Access each dimension individually\nwidth = driver.manage.window.size.width\nheight = driver.manage.window.size.height\n\n    # Or store the dimensions and query them later\nsize = driver.manage.window.size\nwidth1 = size.width\nheight1 = size.height\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi with WebSocket URL Capability in Kotlin\nDESCRIPTION: This snippet shows how to enable BiDi in Kotlin by setting the 'webSocketUrl' capability to true in the browser options. This establishes a WebSocket connection for bidirectional communication, enabling access to the WebDriver BiDi protocol. Requires Selenium WebDriver and browser-specific driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.en.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\noptions.setCapability(\"webSocketUrl\", true);\n```\n\n----------------------------------------\n\nTITLE: Switching back to Default Content - Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to switch back to the main document content after interacting with an IFrame.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Return to the top level\ndriver.switchTo().defaultContent()\n```\n\n----------------------------------------\n\nTITLE: Check Element Selection Status - Kotlin\nDESCRIPTION: Demonstrates how to check if a web element is selected on a webpage using Kotlin and Selenium WebDriver. The `isSelected()` method returns a boolean indicating whether the element is selected. A WebDriver instance and an element locator are required. First navigate to the target URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\n//navigates to url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n//returns true if element is checked else returns false\nval attr =  driver.findElement(By.name(\"checkbox_input\")).isSelected()\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to set the size of the browser window to 1024x768 pixels using Selenium WebDriver. A new `Dimension` object is created with the desired width and height, and then assigned to the `size` property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_38\n\nLANGUAGE: kotlin\nCODE:\n```\ndriver.manage().window().size = Dimension(1024, 768)\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to retrieve the position (x and y coordinates) of the browser window using Selenium WebDriver. It shows two approaches: accessing each coordinate individually and storing the position in a `Point` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_44\n\nLANGUAGE: kotlin\nCODE:\n```\n// Access each dimension individually\nval x = driver.manage().window().position.x\nval y = driver.manage().window().position.y\n\n// Or store the dimensions and query them later\nval position = driver.manage().window().position\nval x1 = position.x\nval y1 = position.y\n\n```\n\n----------------------------------------\n\nTITLE: Transforming Response - Java\nDESCRIPTION: Demonstrates transforming the response content using Selenium and CDP in Java. It intercepts the response for a specific URL, modifies the content, and returns the altered response. It requires Selenium WebDriver and CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n((HasAuthentication) driver).register(Predicate.match(req -> req.getUri().contains(\"simple_page\")),\n        new FetchHandler() {\n          @Override\n          public Optional<Fetch.ContinueResponseRequest> apply(Fetch.Request request) {\n            Fetch.GetResponseBodyResponse body = driver.getDevTools().send(new Fetch.GetResponseBody(request.getRequestId()));\n            String newBody = \"Altered content\";\n            String base64NewBody = Base64.getEncoder().encodeToString(newBody.getBytes(StandardCharsets.UTF_8));\n            return Optional.of(new Fetch.ContinueResponseRequest(request.getRequestId(), Optional.empty(), Optional.empty(), Optional.of(base64NewBody), Optional.empty()));\n          }\n        });\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value in Java\nDESCRIPTION: This code snippet demonstrates how to retrieve the value of a CSS property of a web element using Selenium WebDriver in Java. It uses the `getCssValue()` method of the WebElement interface. The method takes the name of the CSS property as a parameter and returns its value as a String.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"namedColor\"));\nString cssValue = element.getCssValue(\"background-color\");\nassertThat(cssValue).isEqualTo(\"rgba(0, 0, 255, 1)\");\n```\n\n----------------------------------------\n\nTITLE: Find Element within Another Element - Kotlin\nDESCRIPTION: This snippet demonstrates how to find an element within another element in Kotlin using Selenium WebDriver. First, it locates the parent element by its ID. Then, it uses the `findElement` method on the parent element to find the desired element by its class name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nval fruits = driver.findElement(By.id(\"fruits\"))\nval fruit = fruits.findElement(By.className(\"tomatoes\"))\n```\n\n----------------------------------------\n\nTITLE: Comparing Color Objects - Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to directly compare Color objects in Kotlin using the `equals()` method. It checks if the background color of a login button is equal to the predefined HOTPINK color.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nassert(loginButtonBackgroundColour.equals(HOTPINK))\n```\n\n----------------------------------------\n\nTITLE: Enable WebSocket URL in CSharp for BiDi\nDESCRIPTION: This code snippet shows how to enable the WebSocket URL in C# to use WebDriver BiDi. Setting 'UseWebSocketUrl' to 'true' enables the required functionality for two-way communication with the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.zh-cn.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nUseWebSocketUrl = true,\n```\n\n----------------------------------------\n\nTITLE: Setting Log Output to File - Python\nDESCRIPTION: Demonstrates how to configure the GeckoDriver service to output logs to a specific file in Python. This facilitates debugging Selenium tests. Requires the Selenium library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nservice = FirefoxService(log_path=\"geckodriver.log\")\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi in Python\nDESCRIPTION: This snippet shows how to enable BiDi in Python by setting the `enable_bidi` option to `True`.  This allows for bidirectional communication with the browser. Requires Selenium WebDriver and browser-specific driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\noptions.enable_bidi = True\n```\n\n----------------------------------------\n\nTITLE: Get all realms - Java\nDESCRIPTION: This Java snippet gets all available realms using the BiDi API.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void getAllRealms() {\n        BrowsingContext browsingContext = new BrowsingContext(driver, driver.getWindowHandle());\n        List<RealmInfo> realmInfo = browsingContext.getRealms();\n        assertTrue(realmInfo.size() > 0);\n    }\n```\n\n----------------------------------------\n\nTITLE: Removing Console Message Handler in Python\nDESCRIPTION: This snippet shows how to remove a previously added console message handler in Python using WebDriver BiDi. It uses the `remove_event_listener` method with the stored listener ID.  It assumes that `add_event_listener` method was used before and returned handler_id.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nhandler_id = driver.add_event_listener(\n    Console.ConsoleEvent, lambda msg: print(f\"Console {msg.messages[0].level} message: {msg.messages[0].text}\"))\ndriver.remove_event_listener(handler_id)\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to None in JavaScript\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'none' in JavaScript. The WebDriver waits until the initial page is downloaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = new Options();\noptions.setPageLoadStrategy('none');\nlet driver = await new Builder()\n  .forBrowser('chrome')\n  .setChromeOptions(options)\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Ranges using PrintOptions in C#\nDESCRIPTION: This code snippet shows how to set the page ranges to print using the PrintOptions class in C#. The `PageRanges` property is set to the desired page range. The `PageRanges` property is retrieved and confirmed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.PageRanges = \"2-4\";\n\nAssert.AreEqual(\"2-4\", printOptions.PageRanges);\n```\n\n----------------------------------------\n\nTITLE: Casting with Edge in Python\nDESCRIPTION: This Python snippet demonstrates how to initiate casting from Edge using the Edge DevTools protocol. It shows how to get casting sinks and start/stop casting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get_cast_sinks()\ndriver.start_casting(driver.get_cast_sinks()[0])\ndriver.stop_casting()\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element - Selenium\nDESCRIPTION: Drags an element from its original location and drops it onto another target element. The action involves pressing the left mouse button on the source element, moving to the target element, and then releasing the mouse button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nsource = driver.find_element(By.ID, \"draggable\")\ntarget = driver.find_element(By.ID, \"droppable\")\nActionChains(driver).drag_and_drop(source, target).perform()\n```\n\n----------------------------------------\n\nTITLE: Safari Driver Logging (Java)\nDESCRIPTION: This code demonstrates how to enable Safari driver logging in Java using SafariDriverService. It creates a SafariDriverService with logging enabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.en.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nSafariDriverService service = new SafariDriverService.Builder().withLog(Paths.get(\"safaridriver.log\")).build();\n```\n\n----------------------------------------\n\nTITLE: Add Network Intercept - Selenium BiDi - Java\nDESCRIPTION: This Java snippet demonstrates how to add a network intercept using Selenium's BiDi API.  It sets up an intercept to monitor and potentially modify network requests. Requires Selenium 4.18 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nNetwork network = driver.getDevTools().getDomains().network();\nnetwork.addIntercept(\"https://example.com\",\n    new AddInterceptParameters());\n```\n\n----------------------------------------\n\nTITLE: De-selecting Option in Select List - Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to de-select an option from a multiple select list using Selenium WebDriver. It uses the `Select` class and `deselectByVisibleText` function. Assumes you already have an instance of Select.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_47\n\nLANGUAGE: Kotlin\nCODE:\n```\nselect.deselectByVisibleText(\"Cheese\")\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium\nDESCRIPTION: Demonstrates sending keys to a specific element using Selenium's Actions API. This involves locating the element, creating an Actions object, and using the sendKeys method to send a string of characters to the element. It ensures keys are sent to a specific element, not just the active one.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nelement = driver.find_element(By.TAG_NAME, \"textarea\")\nactions = ActionChains(driver)\nactions.send_keys_to_element(element, \"text\").perform()\n```\n\n----------------------------------------\n\nTITLE: Set Up Tracing with OpenTelemetry and Jaeger in Selenium Grid\nDESCRIPTION: This command provides instructions on how to export traces and visualize them using Jaeger. It uses the `info tracing` arguments to display the necessary setup steps.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.en.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar info tracing\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Enabled in Ruby\nDESCRIPTION: This code snippet demonstrates how to check if a web element is enabled on a webpage using Selenium WebDriver in Ruby. It uses the `enabled?` method of the WebElement class. The method returns `true` if the element is enabled, and `false` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'element is enabled' do\n  expect(driver.find_element(name: 'button_input').enabled?).to be true\nend\n```\n\n----------------------------------------\n\nTITLE: Executing CDP commands in Java\nDESCRIPTION: This Java snippet shows how to execute CDP commands using the `executeCdpCommand` method in Selenium. It sets up ChromeOptions to enable performance metrics and retrieves performance metrics after navigating to a specific URL. Requires Selenium WebDriver and Chrome driver dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/_index.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nChromeDriver driver = new ChromeDriver();\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"enableNetwork\", true);\n        parameters.put(\"enablePage\", true);\n        driver.executeCdpCommand(\"Performance.enable\", parameters);\n        driver.get(\"https://www.selenium.dev/selenium/web/blank.html\");\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name Selenium Ruby\nDESCRIPTION: This Ruby code snippet uses Selenium WebDriver to navigate to a webpage, locate an email input element, and assert that the tag name of the element is 'input'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.get 'https://www.selenium.dev/selenium/web/inputs.html'\nemail_input = driver.find_element(name: 'email_input')\nexpect(email_input.tag_name).to eq('input')\n```\n\n----------------------------------------\n\nTITLE: Initializing CDP Connection in CSharp\nDESCRIPTION: This C# code snippet illustrates how to establish a CDP connection using Selenium. It sets up a ChromeDriver, retrieves the DevTools, and creates a session.  This provides the capability to execute low-level browser commands through the CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/_index.zh-cn.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium.DevTools;\nusing OpenQA.Selenium.Chrome;\n\n        [Test]\n        public async Task BasicUsage()\n        {\n            using var driver = new ChromeDriver();\n            IDevTools devTools = driver as IDevTools;\n            DevToolsSession session = devTools.GetDevToolsSession();\n```\n\n----------------------------------------\n\nTITLE: Setting acceptInsecureCerts Capability in JavaScript\nDESCRIPTION: This Javascript code snippet shows how to set the 'acceptInsecureCerts' capability to true when starting a selenium webdriver session, which will enable testing on sites with invalid or self-signed certificates. It is crucial to pass options when creating the driver, ensuring that the setting is applied correctly from the beginning.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nlet options = new chrome.Options();\noptions.setAcceptInsecureCerts(true);\nlet driver = await new Builder()\n  .setChromeOptions(options).build();\n```\n\n----------------------------------------\n\nTITLE: File Upload with sendKeys in CSharp\nDESCRIPTION: Uses the SendKeys method to upload a file by specifying its path to the file input element. Requires Selenium WebDriver and a file input element with type=\"file\".\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.en.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.FindElement(By.Id(\"file-upload\")).SendKeys(\"/path/to/your/file.txt\");\ndriver.FindElement(By.Id(\"upload-button\")).Click();\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium\nDESCRIPTION: Demonstrates how to perform a copy and paste action using Selenium's Actions API. It involves pressing and releasing control/command keys along with 'a', 'c', and 'v'. This example shows how to copy all text, and then paste it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nWebElement element = driver.findElement(By.tagName(\"textarea\"));\nString selectAll = System.getProperty(\"os.name\").startsWith(\"Mac\") ? Keys.COMMAND + \"a\" : Keys.CONTROL + \"a\";\nString copy = System.getProperty(\"os.name\").startsWith(\"Mac\") ? Keys.COMMAND + \"c\" : Keys.CONTROL + \"c\";\nString paste = System.getProperty(\"os.name\").startsWith(\"Mac\") ? Keys.COMMAND + \"v\" : Keys.CONTROL + \"v\";\nelement.sendKeys(\"Selenium\");\nelement.sendKeys(selectAll);\nelement.sendKeys(copy);\nelement.sendKeys(paste);\nelement.sendKeys(\"!\");\n```\n\n----------------------------------------\n\nTITLE: Getting Credentials in JavaScript\nDESCRIPTION: This JavaScript code retrieves and logs the credentials stored in the virtual authenticator. It fetches the credential list and then iterates through it, displaying credentialId, userId, and rpId for each credential.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst credentials = await devtools.security.getCredentials();\n\ncredentials.forEach(credential => {\n  console.log(credential.credentialId);\n  console.log(credential.userId);\n  console.log(credential.rpId);\n});\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value in Kotlin\nDESCRIPTION: This code snippet demonstrates how to retrieve the value of a CSS property of a web element using Selenium WebDriver in Kotlin. It uses the `getCssValue()` method of the WebElement interface. The method takes the name of the CSS property as a parameter and returns its value as a String.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Navigate to Url\ndriver.get(\"https://www.selenium.dev/selenium/web/colorPage.html\")\n\n// Retrieves the computed style property 'color' of linktext\nval cssValue = driver.findElement(By.id(\"namedColor\")).getCssValue(\"background-color\")\n```\n\n----------------------------------------\n\nTITLE: Find Element within Another Element - JavaScript\nDESCRIPTION: This snippet demonstrates how to find an element within another element in JavaScript using Selenium WebDriver. First, it locates the parent element by its ID. Then, it uses the `findElement` method on the parent element to find the desired element by its class name. This is an asynchronous operation, so it uses `await`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fruits = await driver.findElement(By.id('fruits'));\nconst fruit = await fruits.findElement(By.className('tomatoes'));\n```\n\n----------------------------------------\n\nTITLE: Standalone Server Configuration TOML\nDESCRIPTION: Configures a standalone Selenium server to run on port 4449 with a session request timeout of 500 seconds. This configuration is suitable for simple, single-server Selenium Grid setups.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.ja.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[server]\nport = 4449\n\n[sessionqueue]\nsession-request-timeout = 500\n```\n\n----------------------------------------\n\nTITLE: Remove Credential in C#\nDESCRIPTION: This C# code gets credential by User ID and removes a credential from the authenticator based on the passed credential id.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nList<GetCredentialResponse> credentials = await session.WebAuthn.GetCredentialsAsync();\nstring credId = null;\nforeach (GetCredentialResponse credential in credentials)\n{\n    if (credential.UserId.Equals(Convert.ToBase64String(Encoding.UTF8.GetBytes(\"user4\"))))\n    {\n        credId = credential.CredentialId;\n        break;\n    }\n}\nawait session.WebAuthn.RemoveCredentialAsync(credId);\n\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options from Select Element\nDESCRIPTION: This code retrieves all selected options from a <select> element using Selenium's Select class. The `allSelectedOptions` method returns a list of WebElements representing the selected options within the select list. For single selects, this will be a list with one element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nval selectedOptions = select.allSelectedOptions\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Enabled in C#\nDESCRIPTION: This code snippet demonstrates how to check if a web element is enabled on a webpage using Selenium WebDriver in C#. It uses the `Enabled` property of the IWebElement interface. The property returns `true` if the element is enabled, and `false` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"button_input\"));\nAssert.That(element.Enabled, Is.True);\n```\n\n----------------------------------------\n\nTITLE: Node Browser and Session Limit TOML\nDESCRIPTION: Configures a Selenium Grid node to only allow Chrome and Firefox drivers and limits the maximum number of concurrent sessions to 3. This is useful for controlling resource usage and browser availability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.ja.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\ndrivers = [\"chrome\", \"firefox\"]\nmax-sessions = 3\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Node with Options (Java)\nDESCRIPTION: This snippet demonstrates how to start a Selenium node using Java, setting the maximum sessions, log level, port, and specifying driver implementations. It illustrates how to configure the node's capabilities and logging.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar node --max-sessions 4 --log-level \"fine\" --port 7777 --driver-implementation \"firefox\" --driver-implementation \"edge\"\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions to Chrome Options\nDESCRIPTION: This code snippet demonstrates how to add Chrome extensions to the browser options. The `add_extension` method takes the path to a `.crx` file as input. For unpacked directories, the `load-extension` argument should be used instead, as described in the linked ChromeDriver documentation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.add_extension('/path/to/extension.crx')\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window - Selenium WebDriver - Python\nDESCRIPTION: This snippet sets the browser window to fullscreen mode using the Selenium WebDriver API in Python. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_48\n\nLANGUAGE: Python\nCODE:\n```\ndriver.fullscreen_window()\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Port - Python\nDESCRIPTION: This snippet shows how to set the port for the ChromeDriver service in Python.  This allows you to control which port the driver listens on.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.ja.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nservice = Service(port=1234)\n```\n\n----------------------------------------\n\nTITLE: Context Manager for driver.quit() - Python\nDESCRIPTION: This Python code snippet demonstrates the use of a context manager (`with` statement) to automatically call `driver.quit()` when the `with` block is exited, ensuring that the browser session is properly closed, regardless of exceptions. Python's context managers provide a clean and reliable way to manage resources.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nwith webdriver.Firefox() as driver:\n  # WebDriver code here...\n\n# WebDriver will automatically quit after indentation\n```\n\n----------------------------------------\n\nTITLE: Context Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a context click action (right-click) on an element using Selenium. It combines moving the mouse to the center of an element with pressing and releasing the right mouse button (button 2). This opens the context menu. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('my-element'));\nawait actions.contextClick(element).perform();\n```\n\n----------------------------------------\n\nTITLE: Terminating Driver Session - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to terminate a Selenium WebDriver session using the `quit` method. It's crucial for cleaning up resources after the test.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.ja.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n@driver.quit\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name Selenium CSharp\nDESCRIPTION: This C# code snippet demonstrates how to get the tag name of an element using Selenium WebDriver. It asserts that the tag name of element is input.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/inputs.html\");\nIWebElement element = driver.FindElement(By.Name(\"email_input\"));\n\nAssert.That(element.TagName, Is.EqualTo(\"input\"));\n```\n\n----------------------------------------\n\nTITLE: User Creation and Login with Selenium (JavaScript)\nDESCRIPTION: This JavaScript snippet shows user creation using userFactory.createCommonUser() (assumed to be defined elsewhere) and login via loginAs(), which returns an AccountPage object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create a user who has read-only permissions--they can configure a unicorn,\n// but they do not have payment information set up, nor do they have\n// administrative privileges. At the time the user is created, its email\n// address and password are randomly generated--you don't even need to\n// know them.\nvar user = userFactory.createCommonUser(); //This method is defined elsewhere.\n\n// Log in as this user.\n// Logging in on this site takes you to your personal \"My Account\" page, so the\n// AccountPage object is returned by the loginAs method, allowing you to then\n// perform actions from the AccountPage.\nvar accountPage = loginAs(user.email, user.password);\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel (Kotlin)\nDESCRIPTION: Scrolls the viewport so the bottom of the specified web element is at the bottom of the screen.  This method takes a web element as the sole argument. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"idOfMyElement\"))\nActions(driver)\n  .scrollFromOrigin(WheelInput.Origin.viewport(), 0, element.rect.y.toInt())\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Get Element Location and Size - Python\nDESCRIPTION: This snippet demonstrates how to get the location and size of a web element using Selenium WebDriver in Python. It finds an element by name and uses the rect property to retrieve a dictionary-like object containing its x, y, width, and height.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nrange_input = driver.find_element(By.NAME, \"range_input\")\nassert range_input.rect['x'] == 8\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - Python\nDESCRIPTION: This Python snippet demonstrates how to set the size of the browser window to 1024x768 pixels using Selenium WebDriver. The `set_window_size()` method is called with the desired width and height as arguments.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ndriver.set_window_size(1024, 768)\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset in C#\nDESCRIPTION: This C# code snippet demonstrates moving the mouse by a relative offset from its current position. It uses the Actions class and requires a WebDriver instance. The MoveByOffset method takes x and y coordinates as parameters.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_56\n\nLANGUAGE: csharp\nCODE:\n```\nActions actions = new Actions(driver);\nactions.MoveByOffset(30, -10).Perform();\n```\n\n----------------------------------------\n\nTITLE: Getting Element Color Values\nDESCRIPTION: This code retrieves the 'color' and 'background-color' CSS values from a web element with the ID 'login' using Selenium's driver.find_element() and value_of_css_property() methods, and then converts these values into Color objects in Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nlogin_button_colour = Color.from_string(driver.find_element(By.ID,'login').value_of_css_property('color'))\n\nlogin_button_background_colour = Color.from_string(driver.find_element(By.ID,'login').value_of_css_property('background-color'))\n```\n\n----------------------------------------\n\nTITLE: Setting Up WebDriver in Python\nDESCRIPTION: This Python code snippet demonstrates how to set up a WebDriver using pytest fixtures. It initializes the ChromeDriver and navigates to a specific URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/web-form.html\")\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - C#\nDESCRIPTION: Demonstrates how to retrieve the browser window's position (top-left corner coordinates) in C# using Selenium WebDriver. The code retrieves the x and y coordinates individually and also demonstrates storing the position in a `Point` object for later use. Provides equivalent methods to retrieve window position data.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\n//Access each dimension individually\nint x = driver.Manage().Window.Position.X;\nint y = driver.Manage().Window.Position.Y;\n\n//Or store the dimensions and query them later\nPoint position = driver.Manage().Window.Position;\nint x1 = position.X;\nint y1 = position.Y;\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element in DOM - JavaScript\nDESCRIPTION: This snippet finds the first element with the class name \"tomatoes\" in the entire DOM using Selenium WebDriver with JavaScript. It uses the `findElement` method with `By.className` locator. The returned `WebElement` represents the first matching element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst vegetable = await driver.findElement(By.className('tomatoes'));\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name - Java\nDESCRIPTION: This snippet demonstrates how to get the tag name of a web element using Selenium WebDriver in Java. It finds an element by name and uses the getTagName() method to retrieve its tag name as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"email_input\"));\nString tagName = element.getTagName();\nassertThat(tagName).isEqualTo(\"input\");\n```\n\n----------------------------------------\n\nTITLE: Find Element within Another Element - Python\nDESCRIPTION: This snippet demonstrates how to find an element within another element in Python using Selenium WebDriver. First, it locates the parent element by its ID. Then, it uses the `find_element` method on the parent element to find the desired element by its class name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfruits = driver.find_element(By.ID, \"fruits\")\nfruit = fruits.find_element(By.CLASS_NAME,\"tomatoes\")\n```\n\n----------------------------------------\n\nTITLE: Directing Logger Output to a File in Ruby\nDESCRIPTION: This code snippet demonstrates how to direct Selenium logs to a file in Ruby.  It requires Selenium version 4.10 or higher.  The default output is stdout.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nSelenium::WebDriver.logger.output = 'selenium.log'\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions in Edge with Python\nDESCRIPTION: This Python snippet shows how to set permissions for Edge using the DevTools protocol. This example sets the permission for microphone.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\ndriver.execute_cdp_cmd('Browser.grantPermissions', {\n    'permissions': ['microphone'],\n    'origin': url\n})\n```\n\n----------------------------------------\n\nTITLE: Navigating to a URL with Selenium\nDESCRIPTION: This snippet demonstrates how to navigate to a specific URL using Selenium WebDriver. It utilizes the `get()` method to load the desired webpage in the browser. The driver must be initialized prior to navigation. No specific dependencies other than the Selenium WebDriver setup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ndriver.get(\"https://www.google.com\");\n```\n\n----------------------------------------\n\nTITLE: Setting User Verified in JavaScript\nDESCRIPTION: This javascript code sets the user to verified. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait devtools.setUserVerified(true)\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - Java\nDESCRIPTION: This Java snippet demonstrates how to set the position of the browser window to the top-left corner of the primary monitor (0, 0) using Selenium WebDriver. A new `Point` object is created with the coordinates, and then passed to the `setPosition()` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_45\n\nLANGUAGE: java\nCODE:\n```\n// Move the window to the top left of the primary monitor\ndriver.manage().window().setPosition(new Point(0, 0));\n```\n\n----------------------------------------\n\nTITLE: Using Safari Technology Preview - Python\nDESCRIPTION: This Python code shows how to configure Selenium to use the Safari Technology Preview browser. It attempts to locate the Safari Technology Preview binary, and if found, sets the browser binary location in the Safari options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.pt-br.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.safari.options import Options as SafariOptions\n\noptions = SafariOptions()\noptions.browser_version = \"technology preview\"\n\ndriver = webdriver.Safari(options=options)\n```\n\n----------------------------------------\n\nTITLE: Navigate to URL with Selenium (Kotlin)\nDESCRIPTION: This snippet demonstrates how to navigate to a specific URL using Selenium WebDriver in Kotlin. It uses both the `get()` and `navigate().to()` methods. It requires an initialized WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\n//Convenient\ndriver.get(\"https://selenium.dev\")\n\n//Longer way\ndriver.navigate().to(\"https://selenium.dev\")\n```\n\n----------------------------------------\n\nTITLE: Display PATH Variable (Bash/Zsh)\nDESCRIPTION: This command displays the directories currently included in the PATH environment variable. It helps identify whether the desired driver location is already included in the system's PATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.pt-br.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho $PATH\n```\n\n----------------------------------------\n\nTITLE: Find Element within a DOM Subset\nDESCRIPTION: This snippet shows how to find an element within a specific DOM subset. It first locates the parent element with the ID \"fruits\", and then searches within that element for the first element with the class name \"tomatoes\". This approach is useful when there are multiple elements with the same locator, but you want to target a specific one.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement fruits = driver.FindElement(By.Id(\"fruits\"));\nIWebElement fruit = fruits.FindElement(By.ClassName(\"tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Adding Cookie to Browser Context in Python\nDESCRIPTION: This code snippet demonstrates how to add a cookie to the current browser context using Selenium WebDriver in Python.  It navigates to a website and then adds a cookie with the name 'key' and value 'value'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://www.example.com\")\ncookie = { 'name' : 'key', 'value' : 'value' }\ndriver.add_cookie(cookie)\n\nprint(driver.get_cookies())\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options from Select in Selenium\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of selected options in a <select> element using Selenium WebDriver. The `all_selected_options` method is used to get the currently selected options.  For a single select list this will be a list with one element; for a multiple select list, it can contain zero or many elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nselected_options = select.all_selected_options\n```\n\n----------------------------------------\n\nTITLE: Relative Locator - Above in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate an element above another element using Relative Locators in Selenium.  It locates an input element above the element with the id 'password'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_37\n\nLANGUAGE: Java\nCODE:\n```\nBy emailLocator = RelativeLocator.with(By.tagName(\"input\")).above(By.id(\"password\"));\n```\n\n----------------------------------------\n\nTITLE: Intercepting Requests using CDP in C#\nDESCRIPTION: This C# code demonstrates intercepting network requests using the Chrome DevTools Protocol (CDP) in Selenium. It sets up a network intercept to capture requests matching a specific pattern, modifies the request URL, and continues the request with the modified URL. This allows you to control and manipulate outgoing network requests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.ExecuteCdpCommand(\"Network.enable\", new Dictionary<string, object>());\ndriver.ExecuteCdpCommand(\"Network.setRequestInterception\", new Dictionary<string, object>()\n{\n    {\"patterns\", new[] { new Dictionary<string, object> {{\"urlPattern\", \"*.example.com*\"}, {\"resourceType\", \"Document\"}, {\"interceptionStage\", \"HeadersReceived\"} } } }\n});\ndriver.ExecuteCdpCommand(\"Network.requestIntercepted\", new Dictionary<string, object>()\n{\n    {\"url\", \"https://www.example.com\"},\n    {\"newUrl\", \"https://www.selenium.dev\"}\n});\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\n```\n\n----------------------------------------\n\nTITLE: Quitting Driver Session - CSharp\nDESCRIPTION: This C# snippet demonstrates how to properly end a Selenium driver session. Calling `driver.Quit()` ensures the browser process and associated resources are cleaned up.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.en.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Quit();\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Location - Python\nDESCRIPTION: This snippet demonstrates how to set the location of the driver executable in Python by creating a Service object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.zh-cn.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nservice = Service(executable_path=\"/path/to/chromedriver\")\n```\n\n----------------------------------------\n\nTITLE: Executing Selenium Manager to Manage ChromeDriver\nDESCRIPTION: This command executes Selenium Manager to automatically manage ChromeDriver. It detects the locally installed Chrome browser, uses its version to query the Chrome for Testing (CfT) endpoints, downloads the corresponding ChromeDriver version to the local cache, and then provides the paths to both the ChromeDriver and the Chrome browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.ja.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ./selenium-manager --browser chrome --debug\nDEBUG   chromedriver not found in PATH\nDEBUG   chrome detected at C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nDEBUG   Running command: wmic datafile where name='C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe' get Version /value\nDEBUG   Output: \"\\r\\r\\n\\r\\r\\nVersion=116.0.5845.111\\r\\r\\n\\r\\r\\n\\r\\r\\n\\r\"\nDEBUG   Detected browser: chrome 116.0.5845.111\nDEBUG   Discovering versions from https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json\nDEBUG   Required driver: chromedriver 116.0.5845.96\nDEBUG   Downloading chromedriver 116.0.5845.96 from https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/116.0.5845.96/win64/chromedriver-win64.zip\nINFO    Driver path: C:\\Users\\boni\\.cache\\selenium\\chromedriver\\win64\\116.0.5845.96\\chromedriver.exe\nINFO    Browser path: C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Location - Java\nDESCRIPTION: This snippet demonstrates how to specify the driver location in Java. It uses ChromeService.Builder to set the path to the ChromeDriver executable. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.pt-br.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nChromeService service = new ChromeService.Builder().usingDriverExecutable(new File(\"/path/to/chromedriver\")).build();\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client with Python\nDESCRIPTION: This Python snippet illustrates the HTTP client configuration in Selenium using Python. It enables customization of HTTP request behavior. It uses test_http_client.py file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/http_client.zh-cn.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{{< gh-codeblock path=\"examples/python/tests/drivers/test_http_client.py\" >}}\n```\n\n----------------------------------------\n\nTITLE: Adding Pause in Actions - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to add a pause between actions using the `pause` method with a specified duration in milliseconds. It uses the Actions API to perform a pause of 100 milliseconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.en.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.actions()\n  .pause(100)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Executing CDP commands with Selenium in Python\nDESCRIPTION: This Python snippet demonstrates how to execute a CDP command using Selenium's `execute_cdp_cmd` method. It requires a WebDriver instance connected to a Chrome or Edge browser.  The example retrieves the browser version using the 'Browser.getVersion' command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/_index.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nresult = driver.execute_cdp_cmd('Browser.getVersion', {})\n\nassert result is not None\nassert 'userAgent' in result\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's Select class, specifically by matching the visible text of the option. The `selectByVisibleText()` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nselect.selectByVisibleText(\"Four\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Shadow DOM in C#\nDESCRIPTION: This snippet shows how to access elements inside a shadow DOM using Selenium in C#. It finds the shadow host element, gets the shadow root, and then finds an element within the shadow root.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_12\n\nLANGUAGE: CSharp\nCODE:\n```\nvar shadowHost = _driver.FindElement(By.CssSelector(\"#shadow_host\"));\nvar shadowRoot = shadowHost.GetShadowRoot();\nvar shadowContent = shadowRoot.FindElement(By.CssSelector(\"#shadow_content\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Log Output to File\nDESCRIPTION: This code snippet shows how to configure the FirefoxDriver service to output logs to a specific file.  This is useful for debugging and troubleshooting. The `log_path` argument is passed to the `service` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nservice = FirefoxService(log_path=\"geckodriver.log\")\ndriver = FirefoxDriver(service=service, options=options)\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Tests (Java)\nDESCRIPTION: This code snippet demonstrates how to add metadata to Selenium tests using ChromeOptions. Metadata can be added as a capability with the `se:` prefix.  This metadata can be viewed in the Grid UI or queried via GraphQL. The example sets browserVersion, platformName, se:name, and se:sampleMetadata capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.pt-br.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions chromeOptions = new ChromeOptions();\nchromeOptions.setCapability(\"browserVersion\", \"100\");\nchromeOptions.setCapability(\"platformName\", \"Windows\");\n// Mostrando na Grid UI o nome de um teste ao invés de uma session id\nchromeOptions.setCapability(\"se:name\", \"My simple test\"); \n// Outros tipos de metadara podem ser visualizados na Grid UI \n// ao clicar na informação de sessão ou via GraphQL\nchromeOptions.setCapability(\"se:sampleMetadata\", \"Valor exemplo de Metadata\"); \nWebDriver driver = new RemoteWebDriver(new URL(\"http://gridUrl:4444\"), chromeOptions);\ndriver.get(\"http://www.google.com\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Viewport Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse cursor to a specific offset from the top-left corner of the current viewport using Selenium WebDriver. The action is performed using the `move_by` method of the Selenium::WebDriver::ActionBuilder class, and it's available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_51\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.action.move_by(15, 20).perform\n```\n\n----------------------------------------\n\nTITLE: Custom Capabilities Configuration\nDESCRIPTION: Illustrates how to set custom capabilities in the Node configuration to match specific Nodes for session requests. These custom capabilities need to be set in all Nodes and included in every session request to ensure proper matching.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.en.md#_snippet_9\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\ndetect-drivers = false\n\n[[node.driver-configuration]]\ndisplay-name = \"firefox\"\nstereotype = '{\"browserName\": \"firefox\", \"platformName\": \"macOS\", \"browserVersion\":\"96\", \"networkname:applicationName\":\"node_1\", \"nodename:applicationName\":\"app_1\" }'\nmax-sessions = 5\n```\n\n----------------------------------------\n\nTITLE: Drain Node\nDESCRIPTION: Initiates the draining process for a Selenium Grid node, preventing new sessions from being created while allowing existing sessions to complete. This facilitates a graceful shutdown of the node. Requires distributor URL and registration secret.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request POST 'http://localhost:4444/se/grid/distributor/node/<node-id>/drain' --header 'X-REGISTRATION-SECRET: <secret> '\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Output in Python\nDESCRIPTION: This snippet shows how to configure logger output to a file in Python using the `logging` module. It adds a `FileHandler` to direct logs to a specified file path. Requires the `logging` module from Python's standard library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nlog_path = '/path/to/log'\nhandler = logging.FileHandler(log_path)\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Tag Name in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate a web element using its HTML tag name in Selenium. It initializes a WebDriver instance and uses the `By.tagName()` method to find the first element with the specified tag.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.tagName(\"a\"));\n```\n\n----------------------------------------\n\nTITLE: Initializing RemoteWebDriver in Python\nDESCRIPTION: Initializes a RemoteWebDriver instance in Python, specifying the URL of the Selenium Grid and the desired browser capabilities. This enables running tests on a remote machine.  Requires the selenium library. URL specifies the grid and capabilities the browser to initiate.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Remote(command_executor='http://localhost:4444', options=webdriver.ChromeOptions())\n```\n\n----------------------------------------\n\nTITLE: Deleting Named Cookie in C#\nDESCRIPTION: This code snippet demonstrates how to delete a cookie by its name using Selenium WebDriver in C#. It navigates to a website, adds two cookies, and then deletes a cookie with the name 'test1'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\ndriver.Manage().Cookies.AddCookie(new Cookie(\"test1\", \"cookie1\"));\ndriver.Manage().Cookies.AddCookie(new Cookie(\"test2\", \"cookie2\"));\n\n// delete a cookie with name 'test1'\ndriver.Manage().Cookies.DeleteCookieNamed(\"test1\");\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions - CSharp\nDESCRIPTION: This CSharp snippet showcases how to release all currently depressed keys and pointer buttons using the `ReleaseActions` method. It resets the state of input devices.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.en.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\nnew Actions(driver).ReleaseActions();\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - Ruby\nDESCRIPTION: Demonstrates how to retrieve the browser window's position (top-left corner coordinates) in Ruby using Selenium WebDriver. The code retrieves the x and y coordinates individually, and also demonstrates storing the dimensions in a `rect` object for later use. Provides two ways to get the current browser window position.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\n    #Access each dimension individually\nx = driver.manage.window.position.x\ny = driver.manage.window.position.y\n\n    # Or store the dimensions and query them later\nrect  = driver.manage.window.rect\nx1 = rect.x\ny1 = rect.y\n```\n\n----------------------------------------\n\nTITLE: Refreshing the Current Page (Ruby)\nDESCRIPTION: Demonstrates how to refresh the current page using Selenium WebDriver in Ruby. The `refresh` method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.refresh\n```\n\n----------------------------------------\n\nTITLE: Going Back in Browser History (Python)\nDESCRIPTION: Demonstrates how to navigate back in the browser history using Selenium WebDriver in Python.  The driver.back() method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndriver.back()\n```\n\n----------------------------------------\n\nTITLE: Refreshing the Current Page (CSharp)\nDESCRIPTION: Demonstrates how to refresh the current page using Selenium WebDriver in C#. The driver.Navigate().Refresh() method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().Refresh();\n```\n\n----------------------------------------\n\nTITLE: Going Back in Browser History (Java)\nDESCRIPTION: Demonstrates how to navigate back in the browser history using Selenium WebDriver in Java.  The driver.navigate().back() method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ndriver.navigate().back();\n```\n\n----------------------------------------\n\nTITLE: Set Page Ranges Python\nDESCRIPTION: This code snippet shows how to set the page ranges for printing in Python with Selenium, using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.page_ranges = [\"1-2\"]\npdf = driver.print_page(print_options)\n```\n\n----------------------------------------\n\nTITLE: Terminating Driver Session - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to terminate a Selenium WebDriver session using the `quit()` method. The `await` keyword ensures the session is completely closed before proceeding.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.ja.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.quit();\n```\n\n----------------------------------------\n\nTITLE: Message event - Java\nDESCRIPTION: This Java code snippet demonstrates listening for script messages using BiDi. It sets up a listener for script.message events, sends a message from the browser, and asserts that the message is received.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void messageEvent() throws InterruptedException {\n        CountDownLatch countDownLatch = new CountDownLatch(1);\n        String url = getHtmlPage();\n        driver.get(url);\n        BrowsingContext browsingContext = new BrowsingContext(driver, driver.getWindowHandle());\n\n        listener =\n            new ScriptEventListener(driver)\n                .onScriptMessage(message -> countDownLatch.countDown());\n\n        browsingContext.evaluateFunction(\"window.dispatchEvent(new CustomEvent('message', {detail: 'hello'}));\", false, null);\n\n        countDownLatch.await(5, TimeUnit.SECONDS);\n        assertEquals(0, countDownLatch.getCount());\n    }\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi: Enabling BiDi in Python\nDESCRIPTION: This code snippet shows how to enable BiDi in Python using Selenium's options. By setting the `enable_bidi` attribute to True, you activate the WebSocket connection, which is essential for bidirectional communication using the WebDriver BiDi protocol.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.ja.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\noptions.enable_bidi = True\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - C#\nDESCRIPTION: Demonstrates how to set the browser window's size to a specific width and height in C# using Selenium WebDriver. The code creates a `Size` object with the desired dimensions and then assigns it to the `Window.Size` property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Manage().Window.Size = new Size(1024, 768);\n```\n\n----------------------------------------\n\nTITLE: Relative Locators: Locating Element Left Of\nDESCRIPTION: This code demonstrates how to locate an element to the left of another element using Relative Locators in Selenium 4.  It uses `RelativeLocator.with(By.tagName(\"button\")).toLeftOf(By.id(\"submit\"))` to find a button element located to the left of the element with ID 'submit'. This is useful when spatial relationships between elements are known.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_49\n\nLANGUAGE: CSharp\nCODE:\n```\nvar cancelLocator = RelativeBy.WithLocator(By.TagName(\"button\")).LeftOf(By.Id(\"submit\"));\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Node in Distributed Mode (Shell)\nDESCRIPTION: This command starts a Selenium Grid Node in distributed mode, specifying the Event Bus for communication. It publishes and subscribes to events on the Event Bus.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.ja.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - Selenium WebDriver - Java\nDESCRIPTION: This snippet retrieves the width and height of the browser window using the Selenium WebDriver API in Java. It shows two ways to get the dimensions: getting each dimension separately or storing the dimensions in a Dimension object and querying them later. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\n// 分别获取每个尺寸\nint width = driver.manage().window().getSize().getWidth();\nint height = driver.manage().window().getSize().getHeight();\n\n// 或者存储尺寸并在以后查询它们\nDimension size = driver.manage().window().getSize();\nint width1 = size.getWidth();\nint height1 = size.getHeight();\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Element JavaScript\nDESCRIPTION: This code snippet demonstrates how to send keys (enter text) to a web element using Selenium WebDriver in JavaScript. It finds an element by its name and sends keys to it. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait element.sendKeys('Sending some text!')\n```\n\n----------------------------------------\n\nTITLE: Switching back to Default Content - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to switch back to the main document content after interacting with an IFrame.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Return to the top level\nawait driver.switchTo().defaultContent();\n```\n\n----------------------------------------\n\nTITLE: Navigating to a URL in Selenium WebDriver (Kotlin)\nDESCRIPTION: Demonstrates how to open a website using Selenium WebDriver in Kotlin.  The driver.get() method is a convenient way, while driver.navigate().to() is another approach. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n//Convenient\ndriver.get(\"https://selenium.dev\")\n\n//Longer way\ndriver.navigate().to(\"https://selenium.dev\")\n```\n\n----------------------------------------\n\nTITLE: Waiting for Downloads via CDP in Java\nDESCRIPTION: This Java code snippet demonstrates how to wait for downloads using Chrome DevTools Protocol (CDP) with Selenium. It listens for the `Network.loadingFinished` event to determine when a download is complete. This snippet depends on Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nCompletableFuture<String> future = new CompletableFuture<>();\nsession.addListener(Network.loadingFinished(event -> {\n  future.complete(event.getRequestId());\n}));\n```\n\n----------------------------------------\n\nTITLE: Setting Script Timeout in Python\nDESCRIPTION: This Python code snippet demonstrates how to set the script timeout using Selenium. This timeout defines the maximum time a script can execute before it is interrupted. Timeouts are specified in seconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\noptions = Options()\noptions.script_timeout = 50\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - None - CSharp\nDESCRIPTION: This C# code snippet sets the page load strategy to None for Chrome, navigating to example.com.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace pageLoadStrategy {\n  class pageLoadStrategy {\n    public static void Main(string[] args) {\n      var chromeOptions = new ChromeOptions();\n      chromeOptions.PageLoadStrategy = PageLoadStrategy.None;\n      IWebDriver driver = new ChromeDriver(chromeOptions);\n      try {\n        driver.Navigate().GoToUrl(\"https://example.com\");\n      } finally {\n        driver.Quit();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Safari Session (CSharp)\nDESCRIPTION: This code shows how to start a Safari session in CSharp with basic defined options. It initializes options and then creates a Safari driver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.en.md#_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\nvar options = new SafariOptions();\nvar driver = new SafariDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Class Name in Selenium\nDESCRIPTION: This code demonstrates how to locate a web element using its class name in Selenium WebDriver. It initializes a ChromeDriver instance and uses the `findElement` method with `By.className(\"information\")` to find the element with the specified class. The example is provided in multiple languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.className('information'));\n```\n\n----------------------------------------\n\nTITLE: Quit Browser - Selenium\nDESCRIPTION: Closes all browser windows, ends the WebDriver session, and terminates the browser process along with any associated driver processes. This is the recommended way to end a Selenium session to avoid resource leaks. It ensures that all related processes are terminated.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Installing Unsigned Add-ons in Firefox with Selenium (Ruby)\nDESCRIPTION: This Ruby snippet installs an unsigned Firefox add-on from a directory. The `install_addon` method is used with the `temporary: true` option to install the temporary addon.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.install_addon('/path/to/unpacked/extension', temporary: true)\n```\n\n----------------------------------------\n\nTITLE: Preload a script (JavaScript)\nDESCRIPTION: This Javascript snippet demonstrates how to preload a script into a browsing context using Selenium BiDi.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\n    let result = await session.execute({\n      method: 'script.preload',\n      params: { target: { browsingContext: browsingContext.context }, function: '() => { 1 + 1 }', sandbox: 'test' },\n    });\n```\n\n----------------------------------------\n\nTITLE: Get Window Size: Selenium WebDriver (C#)\nDESCRIPTION: This C# snippet demonstrates how to fetch the size of the browser window in pixels using Selenium WebDriver. It shows accessing each dimension individually and storing the dimensions for later use.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\n//Access each dimension individually\nint width = driver.Manage().Window.Size.Width;\nint height = driver.Manage().Window.Size.Height;\n\n//Or store the dimensions and query them later\nSystem.Drawing.Size size = driver.Manage().Window.Size;\nint width1 = size.Width;\nint height1 = size.Height;\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Service Instance - Java\nDESCRIPTION: This snippet demonstrates how to initialize a driver using the default service instance in Java. It relies on Selenium's driver management to locate the driver executable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.zh-cn.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nChromeDriver driver = new ChromeDriver();\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Java\nDESCRIPTION: Demonstrates how to select an option in a Select element by its visible text in Java. It uses the selectByVisibleText() method. Throws NoSuchElementException if matching option is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nselect.selectByVisibleText(\"One\");\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - Normal - JavaScript\nDESCRIPTION: This JavaScript code configures ChromeOptions to use the 'normal' page load strategy and then creates a ChromeDriver instance to navigate to a URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('should wait for full page load', async () => {\n  let opts = new chrome.Options().setPageLoadStrategy('normal');\n  let driver = await new ChromeDriver(opts).build();\n\n  await driver.get('https://google.com');\n  await driver.quit();\n});\n```\n\n----------------------------------------\n\nTITLE: Switching Context in Firefox with Selenium (Python)\nDESCRIPTION: This snippet demonstrates how to switch context to CHROME in Firefox using Selenium WebDriver in Python.  As of Firefox 138, the geckodriver needs to be started with the argument `--allow-system-access`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_51\n\nLANGUAGE: python\nCODE:\n```\ndriver.execute_script(\"return window.context\")\ndriver.execute_script(\"window.context = 'CHROME'\")\n```\n\n----------------------------------------\n\nTITLE: Quitting the Selenium Session\nDESCRIPTION: This snippet demonstrates how to properly close the Selenium WebDriver session. The `quit()` method closes all browser windows and ends the WebDriver process. It is important to call this method at the end of the script to release resources.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.quit();\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Port - Java\nDESCRIPTION: This snippet shows how to specify the port the ChromeDriver should listen on using ChromeService in Java.  This is useful to avoid port conflicts.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.ja.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nChromeService service = new ChromeService.Builder().usingPort(1234).build();\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Server Standalone with Max Sessions and Port Configuration\nDESCRIPTION: This command starts the Selenium server in standalone mode, configuring the maximum number of sessions to 4 and setting the port to 4444. This allows for a limited number of concurrent browser sessions and specifies the port the server will listen on.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.pt-br.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar standalone --max-sessions 4 --port 4444\n```\n\n----------------------------------------\n\nTITLE: Move by Offset from Element with Selenium\nDESCRIPTION: This snippet demonstrates how to move the mouse by a specified offset from the center of an element using Selenium. The initial mouse position is the center of the element. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_42\n\nLANGUAGE: Java\nCODE:\n```\nActions actions = new Actions(driver);\nWebElement element = driver.findElement(By.id(\"my-element\"));\nactions.moveToElement(element, 10, 20)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Evaluate script in realm - Java\nDESCRIPTION: This Java code evaluates a script within a specific realm. It retrieves the realm id and then uses that to execute the `1+1` script.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void evaluateScriptInRealm() {\n        String url = getHtmlPage();\n        driver.get(url);\n        BrowsingContext browsingContext = new BrowsingContext(driver, driver.getWindowHandle());\n\n        List<RealmInfo> realmInfo = browsingContext.getRealms();\n        ScriptResult result = browsingContext.evaluateFunction(\"1+1\", false, realmInfo.get(0).getRealm());\n        assertEquals(result.getResult().getNumber(), 2);\n    }\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - C#\nDESCRIPTION: Demonstrates how to set the browser window's position (top-left corner) to a specific x and y coordinate in C# using Selenium WebDriver.  The code creates a `Point` object with the desired coordinates and then assigns it to the `Window.Position` property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_50\n\nLANGUAGE: csharp\nCODE:\n```\n// Move the window to the top left of the primary monitor\ndriver.Manage().Window.Position = new Point(0, 0);\n```\n\n----------------------------------------\n\nTITLE: Get Element Rectangle Selenium CSharp\nDESCRIPTION: This C# code snippet demonstrates how to retrieve the dimensions and coordinates of an element using Selenium WebDriver. It navigates to a URL, finds a range input element, and then retrieves and asserts its height and width.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/inputs.html\");\nIWebElement element = driver.FindElement(By.Name(\"range_input\"));\n\nAssert.That(element.Rect.Height, Is.GreaterThan(0));\nAssert.That(element.Rect.Width, Is.GreaterThan(0));\n```\n\n----------------------------------------\n\nTITLE: Response Completed Event - Java\nDESCRIPTION: This Java code snippet demonstrates how to listen for the 'responseCompleted' network event using Selenium BiDi. It prints the response URL when the event is triggered.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\nNetwork network = new Network(driver.getDevTools());\nnetwork.onResponseCompleted(event -> {\n  System.out.println(event.getResponse().getUrl());\n});\n```\n\n----------------------------------------\n\nTITLE: Deselecting Options in Python\nDESCRIPTION: Demonstrates how to deselect all selected options in a multi-select element using Python. It calls the deselect_all() method on the Select object. This only works for multi-select lists.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nselect.deselect_all()\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value in C#\nDESCRIPTION: This code snippet demonstrates how to retrieve the value of a CSS property of a web element using Selenium WebDriver in C#. It uses the `GetCssValue()` method of the IWebElement interface. The method takes the name of the CSS property as a parameter and returns its value as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_32\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"namedColor\"));\nstring cssValue = element.GetCssValue(\"background-color\");\nAssert.That(cssValue, Is.EqualTo(\"rgba(0, 0, 255, 1)\"));\n```\n\n----------------------------------------\n\nTITLE: Login Functionality Test With Page Object - Java\nDESCRIPTION: This snippet demonstrates a test of login functionality using Page Objects. It instantiates the SignInPage and HomePage Page Objects and uses their methods to log in and verify the welcome message. This approach centralizes UI interactions, improving maintainability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.pt-br.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n/***\n * Testes da funcionalidade de login\n */\npublic class TestLogin {\n\n  @Test\n  public void testLogin() {\n    SignInPage signInPage = new SignInPage(driver);\n    HomePage homePage = signInPage.loginValidUser(\"userName\", \"password\");\n    assertThat(homePage.getMessageText(), is(\"Hello userName\"));\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects from Strings in Kotlin\nDESCRIPTION: This snippet demonstrates how to create Color objects in Kotlin from various string representations, including HEX, RGB, RGBA, HSL, and HSLA color formats. These color objects can then be used for comparison and conversion in Selenium tests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nprivate val HEX_COLOUR = Color.fromString(\"#2F7ED8\")\nprivate val RGB_COLOUR = Color.fromString(\"rgb(255, 255, 255)\")\nprivate val RGB_COLOUR_PERCENT = Color.fromString(\"rgb(40%, 20%, 40%)\")\nprivate val RGBA_COLOUR = Color.fromString(\"rgba(255, 255, 255, 0.5)\")\nprivate val RGBA_COLOUR_PERCENT = Color.fromString(\"rgba(40%, 20%, 40%, 0.5)\")\nprivate val HSL_COLOUR = Color.fromString(\"hsl(100, 0%, 50%)\")\nprivate val HSLA_COLOUR = Color.fromString(\"hsla(100, 0%, 50%, 0.5)\")\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Location in Ruby\nDESCRIPTION: Explains how to set the driver location in Ruby when initializing the Service. This is needed if the driver is not in the system's default path.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.en.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.chrome(path: '/path/to/chromedriver')\n```\n\n----------------------------------------\n\nTITLE: Evaluate Script in Sandbox - JavaScript\nDESCRIPTION: This snippet shows how to evaluate a script within a sandbox using JavaScript and the WebDriver BiDi API.  It utilizes the `script.evaluate` method to execute a JavaScript expression in a sandbox. It requires a BiDi connection, a valid browsing context ID, and a sandbox name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('evaluate script in sandbox', async () => {\n  let result = await connection.script.evaluate({\n    expression: '1+1',\n    target: { context: contextId, sandbox: 'sandbox' },\n  });\n  expect(result.result.value).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by Module in Python\nDESCRIPTION: This Python code snippet demonstrates how to set different log levels for different modules, allowing fine-grained control over logging verbosity. Instead of working with just the root 'selenium' logger, specific module levels can be defined. The 'logging' module is required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nlogger = logging.getLogger('selenium.webdriver.common.selenium_manager')\nlogger.setLevel(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - Eager - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates setting the page load strategy to 'eager' and navigates to example.com.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('should not wait for images to load', async () => {\n  let opts = new chrome.Options().setPageLoadStrategy('eager');\n  let driver = await new ChromeDriver(opts).build();\n\n  await driver.get('https://example.com');\n  await driver.quit();\n});\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name Selenium JavaScript\nDESCRIPTION: This JavaScript code snippet retrieves the tag name of an email input element using Selenium WebDriver and asserts that it matches the expected tag name, 'input'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.selenium.dev/selenium/web/inputs.html')\n    expect(await driver.findElement(By.name('email_input')).getTagName()).toEqual('input')\n```\n\n----------------------------------------\n\nTITLE: Creating a Pen Input Source Java\nDESCRIPTION: This code snippet demonstrates how to create a Pen input source and use it to interact with a web element. It involves defining a Pen, moving it to a specific element, and then performing a down and up action, simulating a tap or click. Requires Selenium version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.pt-br.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nPen pen = new Pen(driver, \"pen1\");\nWebElement element = driver.findElement(By.id(\"my-element\"));\n\nnew Actions(driver)\n  .tick(pen.moveTo(element))\n  .tick(pen.down(LEFT))\n  .tick(pen.up(LEFT))\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Sending Keys to an Element\nDESCRIPTION: This snippet demonstrates how to simulate typing text into an input field using Selenium. The `SendKeys` method is used to send a sequence of characters to the specified element. The `Keys.Enter` parameter simulates pressing the Enter key.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_32\n\nLANGUAGE: CSharp\nCODE:\n```\nsearchBox.SendKeys(\"Selenium\");\nsearchBox.SendKeys(Keys.Enter);\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium\nDESCRIPTION: This snippet sets an implicit wait time for the WebDriver instance.  This tells the driver to wait a specified amount of time when trying to find an element if it is not immediately available.  Requires an initialized WebDriver instance. Not recommended as best practice for waiting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10))\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions in Selenium (JavaScript)\nDESCRIPTION: This code shows how to release all currently pressed keys and pointer buttons in Selenium using JavaScript.  It calls the `releaseActions()` method on the WebDriver.  This method does not use perform().\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.zh-cn.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.releaseActions();\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox Driver with Options\nDESCRIPTION: This snippet demonstrates how to initialize a Firefox WebDriver instance with basic options. It showcases the common approach across multiple languages. The core functionality involves creating FirefoxOptions and using them to instantiate a RemoteWebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Firefox::Options.new\ndriver = Selenium::WebDriver.for :firefox, options: options\n```\n\n----------------------------------------\n\nTITLE: Evaluate script in realm - JavaScript\nDESCRIPTION: This JavaScript code evaluates a script in a realm using its id. It fetches available realms and then executes the simple math expression.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('evaluate script in a realm', async () => {\n    const browsingContext = await new BrowsingContext(driver, tabId);\n\n    let realms = await browsingContext.script.getRealms({context: browsingContext.context});\n\n    const result = await browsingContext.script.evaluate({\n      expression: '1+1',\n      target: {realm: realms[0].realm},\n      awaitPromise: true,\n    });\n\n    expect(result.result.value).toBe(2);\n  });\n```\n\n----------------------------------------\n\nTITLE: Forward Button Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to simulate a click on the forward button of a mouse (button X2) using Selenium. It involves pressing and releasing mouse button 4 on the target element. Requires Selenium WebDriver and version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"my-element\"))\nval actions = Actions(driver)\nactions.moveToElement(element)\n  .press(MouseButton.FORWARD)\n  .release(MouseButton.FORWARD)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Getting All Options from Select in Selenium\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of all options available in a <select> element using Selenium WebDriver. The `getOptions()` method is used to obtain the list of WebElement objects representing the options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nList<WebElement> options = select.getOptions();\n```\n\n----------------------------------------\n\nTITLE: Initializing Edge Driver with Default Options - JavaScript\nDESCRIPTION: Demonstrates initializing the Edge driver with basic, predefined options using JavaScript.\nThis snippet showcases the most straightforward way to start an Edge session with Selenium.\nDependencies: Selenium WebDriver, EdgeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { Builder } = require('selenium-webdriver');\nconst { Options: EdgeOptions } = require('selenium-webdriver/edge');\n\nlet opts = new EdgeOptions();\nlet driver = new Builder().forBrowser('edge').setEdgeOptions(opts).build();\n```\n\n----------------------------------------\n\nTITLE: Get Browser Title - Ruby\nDESCRIPTION: This Ruby snippet gets the title of the current web page using Selenium WebDriver. It uses a `driver` instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.pt-br.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.title\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Node with Managed Downloads Enabled (Java)\nDESCRIPTION: This snippet demonstrates how to start a Selenium node with managed downloads enabled using the command-line argument `--enable-managed-downloads true`. This setting allows tests to access files downloaded by the browser during the session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar node --enable-managed-downloads true\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Proxy with ChromeOptions in JavaScript\nDESCRIPTION: This JavaScript code snippet configures a Chrome browser to use an HTTP proxy server using `selenium-webdriver`. It defines a proxy object with the HTTP proxy set to '<HOST:PORT>' and then sets this proxy in ChromeOptions. It then navigates to selenium.dev and closes the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet webdriver = require('selenium-webdriver');\nlet chrome = require('selenium-webdriver/chrome');\nlet proxy = require('selenium-webdriver/proxy');\nlet opts = new chrome.Options();\n\n(async function example() {\nopts.setProxy(proxy.manual({http: '<HOST:PORT>'}));\nlet driver = new webdriver.Builder()\n.forBrowser('chrome')\n.setChromeOptions(opts)\n.build();\ntry {\nawait driver.get(\"https://selenium.dev\");\n}\nfinally {\nawait driver.quit();\n}\n}());\n```\n\n----------------------------------------\n\nTITLE: Simulating Network Conditions in Java\nDESCRIPTION: This Java code shows how to simulate various network conditions using the Edge DevTools protocol.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_46\n\nLANGUAGE: java\nCODE:\n```\nDevTools devTools = ((HasDevTools) driver).getDevTools();\ndevTools.createSession();\ndevTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));\ndevTools.send(Network.emulateNetworkConditions(\n    false, Optional.of(150), Optional.of(2500), Optional.of(20), Optional.empty()));\n```\n\n----------------------------------------\n\nTITLE: Product Component Object in Java\nDESCRIPTION: This Java code implements the Product component object, extending BaseComponent. It includes methods to get the product name and price, and to add the product to the cart. It operates within the context of the root WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.ja.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// Page Component Object\npublic class Product extends BaseComponent {\n    // The root element contains the entire component\n    public Product(WebElement root) {\n        super(root); // inventory_item\n    }\n\n    public String getName() {\n        // Locating an element begins at the root of the component\n        return root.findElement(By.className(\"inventory_item_name\")).getText();\n    }\n\n    public BigDecimal getPrice() {\n        return new BigDecimal(\n                root.findElement(By.className(\"inventory_item_price\"))\n                    .getText()\n                    .replace(\"$\", \"\")\n            ).setScale(2, RoundingMode.UNNECESSARY); // Sanitation and formatting\n    }\n\n    public void addToCart() {\n        root.findElement(By.id(\"add-to-cart-backpack\")).click();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel - Ruby\nDESCRIPTION: This code snippet demonstrates how to scroll to a specific web element using Selenium's Actions API and Wheel class in Ruby. It takes a WebElement as input and scrolls the viewport until the bottom of the element is at the bottom of the screen. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(name: 'cheese')\n@driver.action.scroll_to(element).perform\n```\n\n----------------------------------------\n\nTITLE: Back Button Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to simulate a click on the back button of a mouse (button X1) using Selenium. It involves pressing and releasing mouse button 3 on the target element. Requires Selenium WebDriver and version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"my-element\"))\nval actions = Actions(driver)\nactions.moveToElement(element)\n  .press(MouseButton.BACK)\n  .release(MouseButton.BACK)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Using a Pen with Selenium - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to use the Pen class in Selenium to simulate a pen stylus interaction, moving the pen to a clickable element. It requires Selenium 4.2 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.en.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element = driver.findElement(By.id(\"clickable\"))\n\nval pen = Pen(driver, \"pen1\")\n\nActions(driver).moveToElement(element).tick(pen).perform()\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Exception Handler in WebDriver BiDi with Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to add a handler for JavaScript exceptions using WebDriver BiDi. It configures a listener to capture and process JavaScript exception events from the browser. This requires a WebDriver BiDi-enabled browser session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.en.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\ncontext = driver.browsing_context\nlog.on_exception(context) { |params| $exceptions << params }\n```\n\n----------------------------------------\n\nTITLE: Setting acceptInsecureCerts Capability in Python\nDESCRIPTION: This code snippet shows how to set the 'acceptInsecureCerts' capability in Selenium using Python.  The 'acceptInsecureCerts' capability determines if an expired or invalid TLS certificate should be accepted. Setting it to true will trust invalid certificates.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\noptions = Options()\noptions.accept_insecure_certs = True\n```\n\n----------------------------------------\n\nTITLE: Docker Integration Configuration TOML\nDESCRIPTION: Configures a Selenium Grid node to run each session in a Docker container. `detect-drivers` is set to `false` and limits the number of concurrent sessions to 2. Docker images for Chrome and Firefox are defined in the `configs` array.  Optionally devices can be configured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.zh-cn.md#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\ndetect-drivers = false\nmax-sessions = 2\n\n[docker]\nconfigs = [\n    \"selenium/standalone-chrome:93.0\", \"{\\\"browserName\\\": \\\"chrome\\\", \\\"browserVersion\\\": \\\"91\\\"}\", \n    \"selenium/standalone-firefox:92.0\", \"{\\\"browserName\\\": \\\"firefox\\\", \\\"browserVersion\\\": \\\"92\\\"}\"\n]\n#Optionally define all device files that should be mapped to docker containers\n#devices = [\n#    \"/dev/kvm:/dev/kvm\"\n#]\nurl = \"http://localhost:2375\"\nvideo-image = \"selenium/video:latest\"\n```\n\n----------------------------------------\n\nTITLE: Finding Element by Name with Selenium\nDESCRIPTION: This snippet demonstrates how to find an HTML element by its 'name' attribute using Selenium WebDriver. The 'FindElement' method with the 'By.Name' locator is used. The `name` attribute is \"q\" in this case, commonly used in search input fields.  Dependencies: initialized WebDriver instance and a loaded webpage containing the target element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement searchBox = driver.FindElement(By.Name(\"q\"));\nsearchBox.SendKeys(\"Selenium\");\n```\n\n----------------------------------------\n\nTITLE: Handle user prompt in Java\nDESCRIPTION: This snippet shows how to handle a user prompt using WebDriver BiDi in Java. Requires Selenium 4.13.0 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(driver, null);\nbrowsingContext.handleUserPrompt(UserPrompt.ACCEPT);\n\nbrowsingContext.handleUserPrompt(UserPrompt.ACCEPT, \"text\");\n\nbrowsingContext.handleUserPrompt(UserPrompt.DISMISS);\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Timeout in Python\nDESCRIPTION: This example sets the page load timeout in Python, dictating how long the driver will wait for a page to load. If the page fails to load within this duration, a TimeoutException is raised.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\ndriver.set_page_load_timeout(30)\n```\n\n----------------------------------------\n\nTITLE: Move to Element Action with Selenium\nDESCRIPTION: This snippet demonstrates how to move the mouse to the center of an element using Selenium. This is often used for hovering over an element. The element must be within the viewport. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_38\n\nLANGUAGE: CSharp\nCODE:\n```\nActions actions = new Actions(driver);\nIWebElement element = driver.FindElement(By.Id(\"my-element\"));\nactions.MoveToElement(element).Perform();\n```\n\n----------------------------------------\n\nTITLE: Remove Node from Grid with cURL\nDESCRIPTION: This snippet removes a Node from the Selenium Grid using its Node ID.  It does not stop ongoing sessions on the Node, but prevents new sessions from being routed to it. An `X-REGISTRATION-SECRET` header is required for authorization. The Grid URL depends on the deployment mode (Standalone, Hub-Node, or Router).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://localhost:4444/se/grid/distributor/node/<node-id>' --header 'X-REGISTRATION-SECRET: <secret> '\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Root Directory in Firefox with Selenium (Python)\nDESCRIPTION: This snippet demonstrates how to set a custom profile root directory for Firefox when using Selenium WebDriver in Python. It sets the `profile_root` to a custom directory.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\noptions = FirefoxOptions()\noptions.profile_root = '/tmp/profiles'\ndriver = Firefox(options=options)\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset - Selenium Wheel JavaScript\nDESCRIPTION: This snippet demonstrates how to scroll from an offset of the viewport using Selenium's Wheel actions in JavaScript. An offset is specified from the upper left corner of the current viewport. After the origin point is determined, the page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.actions().scroll({\n  x: 10,\n  y: 10,\n  deltaX: 0,\n  deltaY: 0,\n  origin: 'viewport'\n}).perform();\n```\n\n----------------------------------------\n\nTITLE: WebDriver Quit with try/finally - Kotlin\nDESCRIPTION: This Kotlin snippet uses a `try/finally` block to ensure that the WebDriver session is always closed, even if an exception occurs within the `try` block. The `driver.quit()` method is called in the `finally` block.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    //WebDriver code here...\n} finally {\n    driver.quit()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Driver with Service - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize a ChromeDriver using a Service object.  The Service object allows configuring the chromedriver process itself. The driver object is created with both the options and the service.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.zh-cn.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet service = new ChromeServiceBuilder(pathToChromedriver).build();\nlet options = new chrome.Options();\ndriver = await new ChromeDriver(options, service).build();\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox Driver with Options - JavaScript\nDESCRIPTION: Demonstrates how to initialize a Firefox WebDriver instance with basic options using JavaScript. It requires the Selenium WebDriver library. The `firefox.Options` class is used to configure Firefox-specific settings before building the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { Builder } = require('selenium-webdriver');\nconst firefox = require('selenium-webdriver/firefox');\n\nlet driver = new Builder().forBrowser('firefox').setFirefoxOptions(new firefox.Options()).build();\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium (Java)\nDESCRIPTION: Demonstrates sending keys to the currently active element using the Actions API in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nActions actions = new Actions(driver);\nactions.sendKeys(\"text\")\n    .perform();\n```\n\n----------------------------------------\n\nTITLE: Node Configuration TOML (Specific Browsers, Max Sessions)\nDESCRIPTION: Configures a Selenium Grid node to only use Chrome and Firefox drivers, limiting the maximum number of concurrent sessions to 3. This demonstrates how to restrict the available drivers and limit session concurrency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.pt-br.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[node]\ndrivers = [\"chrome\", \"firefox\"]\nmax-sessions = 3\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Displayed in JavaScript\nDESCRIPTION: This code snippet demonstrates how to check if a web element is displayed on a webpage using Selenium WebDriver in JavaScript. It uses the `isDisplayed()` method. The method returns `true` if the element is displayed, and `false` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('element is displayed', async () => {\n  expect(await driver.findElement(By.name('email_input')).isDisplayed()).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Set Shrink to Fit CSharp\nDESCRIPTION: This code snippet demonstrates how to set whether to shrink the page to fit the content in C# with Selenium, using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_19\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.ShrinkToFit = true;\n\nvar print = (IPrintsPage)driver;\nstring base64Pdf = print.Print(printOptions);\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium\nDESCRIPTION: Demonstrates sending keys to the currently active element using Selenium's Actions API. This involves creating an Actions object, using the sendKeys method to send a string of characters, and then performing the action. This action sends the characters to whichever element currently has focus.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nval actions = Actions(driver)\nactions.sendKeys(\"text\").perform()\n```\n\n----------------------------------------\n\nTITLE: Registering Selenium Grid Node with Hub using --hub (Java)\nDESCRIPTION: This command registers a Node with a Hub, specifying the Hub's address using the `--hub` parameter. This is used when the Hub is using the default port.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.zh-cn.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --hub http://<hub-ip>:4444\n```\n\n----------------------------------------\n\nTITLE: Move Mouse by Offset - Selenium\nDESCRIPTION: Moves the mouse cursor from its current position by a specified offset. Positive X values move the cursor right, positive Y values move the cursor down. The origin is the top-left corner of the viewport if the cursor hasn't been moved before.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nActionChains(driver)\n    .move_by_offset(30, -10)\n    .pause(1)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Displayed in Ruby\nDESCRIPTION: This code snippet demonstrates how to check if a web element is displayed on a webpage using Selenium WebDriver in Ruby. It uses the `displayed?` method of the WebElement class. The method returns `true` if the element is displayed, and `false` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'element is displayed' do\n  expect(driver.find_element(name: 'email_input').displayed?).to be true\nend\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value - Java\nDESCRIPTION: Demonstrates how to retrieve the computed CSS value of a web element using Java and Selenium WebDriver. The `getCssValue()` method returns the value of the specified CSS property as a string. A WebDriver instance, an element locator, and the CSS property name are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\nWebElement link = driver.findElement(By.id(\"namedColor\"));\nString backgroundColour = link.getCssValue(\"background-color\");\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options from Select Element\nDESCRIPTION: This code retrieves all selected options from a <select> element using Selenium's Select class. The `all_selected_options` method returns a list of WebElements representing the selected options within the select list. For single selects, this will be a list with one element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nselected_options = select.all_selected_options\n```\n\n----------------------------------------\n\nTITLE: Find Elements from Element in Selenium WebDriver - Kotlin\nDESCRIPTION: This Kotlin code demonstrates how to find elements within a parent element using Selenium WebDriver. It initializes a ChromeDriver, navigates to a website, finds a parent 'div' element, and then retrieves all 'p' elements within that 'div'. The text content of each 'p' element is then printed to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_33\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.By\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://example.com\")\n\n        // Get element with tag name 'div'\n        val element = driver.findElement(By.tagName(\"div\"))\n\n        // Get all the elements available with tag name 'p'\n        val elements = element.findElements(By.tagName(\"p\"))\n        for (e in elements) {\n            println(e.text)\n        }\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name - Kotlin\nDESCRIPTION: This snippet demonstrates how to get the tag name of a web element using Selenium WebDriver in Kotlin. It navigates to a URL, finds an element by name, and uses the getTagName() method to retrieve its tag name as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\n//navigates to url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n//returns TagName of the element \nval attr =  driver.findElement(By.name(\"email_input\")).getTagName()\n```\n\n----------------------------------------\n\nTITLE: Scroll by Amount using Selenium Wheel - Python\nDESCRIPTION: This Python code snippet demonstrates how to scroll by a given amount using Selenium's Actions API and Wheel class. It takes delta x and delta y values as input, which represent the amount to scroll horizontally and vertically, respectively. Negative values indicate scrolling left and up. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nactions = ActionBuilder(driver)\nactions.scroll_by(x=50, y=100).perform()\n```\n\n----------------------------------------\n\nTITLE: Transforming Response via CDP in C#\nDESCRIPTION: This C# code snippet demonstrates how to intercept and modify network responses using Chrome DevTools Protocol (CDP) with Selenium.  It intercepts responses based on URL and modifies the response body. This snippet depends on the Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nsession.Network.RequestIntercepted += (sender, e) =>\n{\n    if (e.Request.Url.Contains(\"example\"))\n    {\n        string newContent = \"<h1>This is modified content</h1>\";\n        session.Network.ContinueInterceptedRequest(new NetworkContinueInterceptedRequestParameters\n        { InterceptionId = e.InterceptionId, RawResponse = Convert.ToBase64String(Encoding.UTF8.GetBytes(newContent)) });\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Page Orientation in Selenium Python\nDESCRIPTION: This Python code snippet demonstrates how to set the page orientation to landscape using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.orientation = \"landscape\"\n```\n\n----------------------------------------\n\nTITLE: Working with Firefox Profiles\nDESCRIPTION: Demonstrates how to work with Firefox profiles. This includes creating a new profile and setting preferences.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\nprofile = Selenium::WebDriver::Firefox::Profile.new\nprofile['dom.disable_beforeunload'] = true\noptions.profile = profile\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtualAuthenticatorOptions in C#\nDESCRIPTION: This code snippet shows how to initialize VirtualAuthenticatorOptions in C#. It sets the protocol, domain, cross-origin setting, and resident key requirement. This configuration is crucial for accurately emulating an authenticator with specific properties. It depends on the Selenium WebDriver library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nVirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions()\n    .SetProtocol(VirtualAuthenticatorOptions.ProtocolType.Https)\n    .SetDomain(\"example.com\")\n    .SetCrossOrigin(false)\n    .SetResidentKeyRequired(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Up WebDriver in JavaScript\nDESCRIPTION: This code snippet shows how to set up a WebDriver before the test execution in JavaScript using Mocha. It initializes the ChromeDriver and navigates to a specific URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndriver = await new Builder().forBrowser(Browser.CHROME).build();\nawait driver.get('https://www.selenium.dev/selenium/web/web-form.html');\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element in DOM - Kotlin\nDESCRIPTION: This snippet finds the first element with the class name \"tomatoes\" in the entire DOM using Selenium WebDriver with Kotlin. It uses the `findElement` method with `By.className` locator. The returned `WebElement` represents the first matching element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nval vegetable: WebElement = driver.findElement(By.className(\"tomatoes\"))\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium\nDESCRIPTION: This code snippet demonstrates how to initialize a Select object in Selenium after locating a <select> element. It covers multiple languages and shows the basic usage pattern. Note that the <select> element cannot be disabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nselect_element = driver.find_element(By.NAME, \"selectomatic\")\nselect = Select(select_element)\n```\n\n----------------------------------------\n\nTITLE: Customizing Waits (Python)\nDESCRIPTION: This Python code snippet shows how to customize explicit waits using `WebDriverWait`.  It catches a specific exception `ElementNotVisibleException` and retries until successful.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.ja.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nwait = WebDriverWait(driver, 10, poll_frequency=1, ignored_exceptions=[ElementNotVisibleException])\nelement = wait.until(lambda x: x.find_element(By.ID, \"myDynamicElement\"))\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Status - C#\nDESCRIPTION: This snippet demonstrates how to check if a web element is enabled on the page using Selenium WebDriver in C#. It finds an element by name and uses the Enabled property to determine if it is enabled, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"button_input\"));\nAssert.That(element.Enabled, Is.True);\nConsole.WriteLine(\"Element is enabled: \" + element.Enabled);\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions in Selenium (C#)\nDESCRIPTION: This code snippet demonstrates how to release all currently pressed keys and pointer buttons in Selenium using C#. It calls the `ReleaseActions()` method on the WebDriver. This method does not use perform().\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.zh-cn.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.ReleaseActions();\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium (Python)\nDESCRIPTION: Demonstrates sending keys to the currently active element using the Actions API in Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nactions = ActionChains(driver)\nactions.send_keys(\"text\")\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Locating Element by CSS Selector with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a web element using a CSS selector with Selenium WebDriver. It assumes a ChromeDriver instance is created and uses the `By.CssSelector()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.CssSelector(\"#fname\"));\n```\n\n----------------------------------------\n\nTITLE: Adding Console Message Handler using WebDriver BiDi in Python\nDESCRIPTION: This snippet demonstrates how to add a handler for console messages using WebDriver BiDi in Python. It enables the user to record or take actions on `console.log` events within the browser. The code requires a WebDriver instance with BiDi enabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.zh-cn.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nhandler = bidi.script.add_console_listener(print)\n```\n\n----------------------------------------\n\nTITLE: Dom Content Loaded Event in JavaScript\nDESCRIPTION: This code snippet demonstrates how to listen for the 'browsingContext.domContentLoaded' event using Selenium WebDriver's BiDi API in JavaScript. It subscribes to the event and asserts that the URL is defined when the event is triggered. Requires Selenium version 4.9.2 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('browsingContext.domContentLoaded', async () => {\n  let contextId;\n  let url;\n\n  await driver.on('browsingContext.domContentLoaded', (event) => {\n    contextId = event.context.context;\n    url = event.navigation;\n  });\n\n  await driver.get('https://www.selenium.dev/selenium4/demos/blank.html');\n\n  expect(url).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Listening for Realm Destroyed Event - Java\nDESCRIPTION: This Java snippet demonstrates how to listen for 'realm destroyed' events using Selenium's WebDriver BiDi API. It creates a browsing context, adds a listener for 'realm.destroyed' events, destroys the realm, and verifies that the listener is triggered. This example requires Selenium 4.16 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_32\n\nLANGUAGE: Java\nCODE:\n```\n        try (BrowsingContext browsingContext = driver.getDevTools().getDomains().browsingContext()\n            .create(BrowsingContext.CreateType.TAB)) {\n          EventStream<RealmDestroyed> realmEvents = driver.getDevTools().getDomains().script()\n              .onRealmDestroyed();\n\n          browsingContext.close();\n\n          RealmDestroyed realm = realmEvents.next();\n          assertThat(realm.getRealm().getContext(), notNullValue());\n        }\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Selenium CSharp\nDESCRIPTION: This C# code snippet retrieves the text from a specific element using Selenium WebDriver and asserts the text matches the expected value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_38\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/linked_image.html\");\nIWebElement link = driver.FindElement(By.Id(\"justanotherlink\"));\n\nAssert.That(link.Text, Is.EqualTo(\"link to a page with images\"));\n```\n\n----------------------------------------\n\nTITLE: Key Down Action in Selenium (Kotlin)\nDESCRIPTION: This Kotlin code snippet demonstrates performing a key down action using Selenium's Actions API. An Actions object is created, a keyDown action is performed on the Control key, then the 'c' key is sent. Finally, perform() is called to execute these actions, effectively holding down the Control key while sending 'c'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval actions = Actions(driver)\nactions.keyDown(Keys.CONTROL)\n    .sendKeys(\"c\")\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Status - Python\nDESCRIPTION: This snippet demonstrates how to check if a web element is enabled on the page using Selenium WebDriver in Python. It finds an element by name and uses the is_enabled() method to determine if it is enabled, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbutton_input = driver.find_element(By.NAME, \"button_input\")\nassert button_input.is_enabled() is True\n```\n\n----------------------------------------\n\nTITLE: Setting Silent Mode for Internet Explorer in C#\nDESCRIPTION: This code snippet shows how to set the 'silent' capability for Internet Explorer in C#. This suppresses the IEDriverServer diagnostic output by adding an additional option to InternetExplorerOptions before initializing the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_17\n\nLANGUAGE: CSharp\nCODE:\n```\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.AddAdditionalInternetExplorerOption(\"silent\", true);\nIWebDriver driver = new InternetExplorerDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Creating a Resident Credential in C#\nDESCRIPTION: This C# snippet creates a resident credential with a given user ID and name using the WebAuthn API through DevTools. It allows simulating the creation of credentials within a virtual authenticator. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_13\n\nLANGUAGE: CSharp\nCODE:\n```\nawait session.SendCommand(new AddCredentialCommandSettings()\n{\n    Credential = new Credential()\n    { UserId = USER_ID, UserName = USER_NAME }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to Normal in CSharp\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'normal' in C#. The WebDriver waits until the 'load' event fires, meaning all resources are downloaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_10\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace pageLoadStrategy {\n  class pageLoadStrategy {\n    public static void Main(string[] args) {\n      var chromeOptions = new ChromeOptions();\n      chromeOptions.PageLoadStrategy = PageLoadStrategy.Normal;\n      IWebDriver driver = new ChromeDriver(chromeOptions);\n      try {\n        driver.Navigate().GoToUrl(\"https://example.com\");\n      } finally {\n        driver.Quit();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Hub (Shell)\nDESCRIPTION: This command starts the Hub component of Selenium Grid, which manages and distributes test sessions to available nodes. The Hub listens for RemoteWebDriver requests on http://localhost:4444 by default.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.en.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar hub\n```\n\n----------------------------------------\n\nTITLE: Simple Error Log Event Example in Selenium Grid\nDESCRIPTION: This JSON represents a sample error log event in Selenium Grid. It includes details about an exception that occurred, such as the exception type, message, and stack trace. This log is recorded at the WARN level.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/observability.pt-br.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\nWARN [LoggingOptions$1.lambda$export$1] - {\n  \"traceId\": \"7efa5ea57e02f89cdf8de586fe09f564\",\n  \"spanId\": \"914df6bc9a1f6e2b\",\n  \"spanKind\": \"INTERNAL\",\n  \"eventTime\": 1597820253450580272,\n  \"eventName\": \"exception\",\n  \"attributes\": {\n    \"exception.type\": \"org.openqa.selenium.ScriptTimeoutException\",\n    \"exception.message\": \"Unable to execute request: java.sql.SQLSyntaxErrorException: Table 'mysql.sessions_mappa' doesn't exist ...\" (full message will be printed),\n    \"exception.stacktrace\": \"org.openqa.selenium.ScriptTimeoutException: java.sql.SQLSyntaxErrorException: Table 'mysql.sessions_mappa' doesn't exist\\nBuild info: version: '4.0.0-alpha-7', revision: 'Unknown'\\nSystem info: host: 'XYZ-MacBook-Pro.local', ip: 'fe80:0:0:0:10d5:b63a:bdc6:1aff%en0', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.13.6', java.version: '11.0.7'\\nDriver info: driver.version: unknown ....\" (full stack will be printed),\n    \"http.handler_class\": \"org.openqa.selenium.grid.distributor.remote.RemoteDistributor\",\n    \"http.url\": \"\\u002fsession\",\n    \"http.method\": \"POST\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Move by Offset from Element with Selenium\nDESCRIPTION: This snippet demonstrates how to move the mouse by a specified offset from the center of an element using Selenium. The initial mouse position is the center of the element. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_44\n\nLANGUAGE: CSharp\nCODE:\n```\nActions actions = new Actions(driver);\nIWebElement element = driver.FindElement(By.Id(\"my-element\"));\nactions.MoveToElement(element, 10, 20).Perform();\n```\n\n----------------------------------------\n\nTITLE: Scroll by Amount with Selenium (Ruby)\nDESCRIPTION: This Ruby code snippet shows how to scroll by a specified amount (x_offset and y_offset) using Selenium's Actions API.  It scrolls horizontally by 100 pixels and vertically by 200 pixels.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\n@driver.action.scroll_by(100, 200).perform\n```\n\n----------------------------------------\n\nTITLE: Disabling Build Check for Edge in Java\nDESCRIPTION: This Java code disables the build check for EdgeDriverService, allowing the driver to be used with mismatched versions of the Edge browser and msedgedriver. This is generally not recommended and unsupported.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_39\n\nLANGUAGE: java\nCODE:\n```\nEdgeDriverService service = new EdgeDriverService.Builder()\n  .withBuildCheckDisabled(true).build();\n```\n\n----------------------------------------\n\nTITLE: Scroll By Amount using Selenium Wheel (Python)\nDESCRIPTION: Scrolls the viewport by a specified amount in the x and y directions. Takes delta x and delta y values as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nactions = ActionBuilder(driver)\nactions.scroll_from_origin(WheelInput.ORIGIN_VIEWPORT, 20, 50)\nactions.perform()\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects with fromString\nDESCRIPTION: This snippet demonstrates how to create Color objects from different string representations of colors (HEX, RGB, RGBA, HSL, HSLA) using the fromString method in Java. The Color class supports various color formats for creating color objects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nprivate final Color HEX_COLOUR = Color.fromString(\"#2F7ED8\");\nprivate final Color RGB_COLOUR = Color.fromString(\"rgb(255, 255, 255)\");\nprivate final Color RGB_COLOUR = Color.fromString(\"rgb(40%, 20%, 40%)\");\nprivate final Color RGBA_COLOUR = Color.fromString(\"rgba(255, 255, 255, 0.5)\");\nprivate final Color RGBA_COLOUR = Color.fromString(\"rgba(40%, 20%, 40%, 0.5)\");\nprivate final Color HSL_COLOUR = Color.fromString(\"hsl(100, 0%, 50%)\");\nprivate final Color HSLA_COLOUR = Color.fromString(\"hsla(100, 0%, 50%, 0.5)\");\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its `value` attribute using Selenium WebDriver. The `selectByValue()` method is used to select the option based on the provided value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nselect.selectByValue(\"one\");\n```\n\n----------------------------------------\n\nTITLE: Getting tracing info from Selenium Grid\nDESCRIPTION: This command retrieves detailed instructions on visualizing traces using Jaeger UI from a running Selenium Grid server. The output provides the necessary steps to configure and use Jaeger for trace visualization.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/observability.en.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-4.0.0-<selenium-version>.jar info tracing\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Selenium Tests (Java)\nDESCRIPTION: This Java code snippet demonstrates how to add metadata to Selenium tests using ChromeOptions. Metadata can be added by prefixing a capability with 'se:'. The 'se:name' capability sets a test name, which is displayed in the Grid UI. 'se:sampleMetadata' shows another type of metadata that can be retrieved via the Grid UI or GraphQL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.en.md#_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions chromeOptions = new ChromeOptions();\nchromeOptions.setCapability(\"browserVersion\", \"100\");\nchromeOptions.setCapability(\"platformName\", \"Windows\");\n// Showing a test name instead of the session id in the Grid UI\nchromeOptions.setCapability(\"se:name\", \"My simple test\"); \n// Other type of metadata can be seen in the Grid UI by clicking on the \n// session info or via GraphQL\nchromeOptions.setCapability(\"se:sampleMetadata\", \"Sample metadata value\"); \nWebDriver driver = new RemoteWebDriver(new URL(\"http://gridUrl:4444\"), chromeOptions);\ndriver.get(\"http://www.google.com\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: De-selecting Option in Select List - Python\nDESCRIPTION: This Python code snippet demonstrates how to de-select an option from a multiple select list using Selenium WebDriver. It uses the `Select` class and the `deselect_by_visible_text` method. The code requires a Selenium WebDriver instance and a Select element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\nselect.deselect_by_visible_text(\"Cheese\")\n```\n\n----------------------------------------\n\nTITLE: Get all realms (Java)\nDESCRIPTION: This Java code demonstrates how to retrieve all realms using Selenium BiDi's `script.getRealms` command.  The method returns a list of all existing realms.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\n            List<RealmInfo> allRealms = bidi.script().getRealms(GetRealmsParameters.builder().build());\n```\n\n----------------------------------------\n\nTITLE: Chaining Relative Locators - Python\nDESCRIPTION: Chains relative locators in Python to locate a button element below the element with ID 'email' and to the right of the element with ID 'cancel'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_63\n\nLANGUAGE: Python\nCODE:\n```\nsubmit_locator = locate_with(By.TAG_NAME, \"button\").below({By.ID: \"email\"}).to_right_of({By.ID: \"cancel\"})\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions to Chrome Options\nDESCRIPTION: This code snippet demonstrates how to add Chrome extensions to the browser options. The `add_extension` method takes the path to a `.crx` file as input. For unpacked directories, the `load-extension` argument should be used instead, as described in the linked ChromeDriver documentation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\noptions.add_extension(\"/path/to/extension.crx\")\n```\n\n----------------------------------------\n\nTITLE: Customized Node Example\nDESCRIPTION: This Java code demonstrates a customized Selenium Grid Node that extends the `Node` class and overrides methods to add logging before and after key operations, such as creating sessions, executing WebDriver commands, and stopping sessions. It provides a template for adding custom behavior to a Selenium Grid Node.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/customize_node.pt-br.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage org.seleniumhq.samples;\n\nimport java.net.URI;\nimport java.util.UUID;\nimport org.openqa.selenium.Capabilities;\nimport org.openqa.selenium.NoSuchSessionException;\nimport org.openqa.selenium.WebDriverException;\nimport org.openqa.selenium.grid.config.Config;\nimport org.openqa.selenium.grid.data.CreateSessionRequest;\nimport org.openqa.selenium.grid.data.CreateSessionResponse;\nimport org.openqa.selenium.grid.data.NodeId;\nimport org.openqa.selenium.grid.data.NodeStatus;\nimport org.openqa.selenium.grid.data.Session;\nimport org.openqa.selenium.grid.log.LoggingOptions;\nimport org.openqa.selenium.grid.node.HealthCheck;\nimport org.openqa.selenium.grid.node.Node;\nimport org.openqa.selenium.grid.node.local.LocalNodeFactory;\nimport org.openqa.selenium.grid.security.Secret;\nimport org.openqa.selenium.grid.security.SecretOptions;\nimport org.openqa.selenium.grid.server.BaseServerOptions;\nimport org.openqa.selenium.internal.Either;\nimport org.openqa.selenium.remote.SessionId;\nimport org.openqa.selenium.remote.http.HttpRequest;\nimport org.openqa.selenium.remote.http.HttpResponse;\nimport org.openqa.selenium.remote.tracing.Tracer;\n\npublic class DecoratedLoggingNode extends Node {\n\n  private Node node;\n\n  protected DecoratedLoggingNode(Tracer tracer, NodeId nodeId, URI uri, Secret registrationSecret, Duration sessionTimeout) {\n    super(tracer, nodeId, uri, registrationSecret, sessionTimeout);\n  }\n\n  public static Node create(Config config) {\n    LoggingOptions loggingOptions = new LoggingOptions(config);\n    BaseServerOptions serverOptions = new BaseServerOptions(config);\n    URI uri = serverOptions.getExternalUri();\n    SecretOptions secretOptions = new SecretOptions(config);\n    NodeOptions nodeOptions = new NodeOptions(config);\n    Duration sessionTimeout = nodeOptions.getSessionTimeout();\n\n    // Refer to the foot notes for additional context on this line.\n    Node node = LocalNodeFactory.create(config);\n\n    DecoratedLoggingNode wrapper = new DecoratedLoggingNode(loggingOptions.getTracer(),\n        node.getId(),\n        uri,\n        secretOptions.getRegistrationSecret(),\n        sessionTimeout);\n    wrapper.node = node;\n    return wrapper;\n  }\n\n  @Override\n  public Either<WebDriverException, CreateSessionResponse> newSession(\n      CreateSessionRequest sessionRequest) {\n    System.out.println(\"Before newSession()\");\n    try {\n      return this.node.newSession(sessionRequest);\n    } finally {\n      System.out.println(\"After newSession()\");\n    }\n  }\n\n  @Override\n  public HttpResponse executeWebDriverCommand(HttpRequest req) {\n    try {\n      System.out.println(\"Before executeWebDriverCommand(): \" + req.getUri());\n      return node.executeWebDriverCommand(req);\n    } finally {\n      System.out.println(\"After executeWebDriverCommand()\");\n    }\n  }\n\n  @Override\n  public Session getSession(SessionId id) throws NoSuchSessionException {\n    try {\n      System.out.println(\"Before getSession()\");\n      return node.getSession(id);\n    } finally {\n      System.out.println(\"After getSession()\");\n    }\n  }\n\n  @Override\n  public HttpResponse uploadFile(HttpRequest req, SessionId id) {\n    try {\n      System.out.println(\"Before uploadFile()\");\n      return node.uploadFile(req, id);\n    } finally {\n      System.out.println(\"After uploadFile()\");\n    }\n  }\n\n  @Override\n  public void stop(SessionId id) throws NoSuchSessionException {\n    try {\n      System.out.println(\"Before stop()\");\n      node.stop(id);\n    } finally {\n      System.out.println(\"After stop()\");\n    }\n  }\n\n  @Override\n  public boolean isSessionOwner(SessionId id) {\n    try {\n      System.out.println(\"Before isSessionOwner()\");\n      return node.isSessionOwner(id);\n    } finally {\n      System.out.println(\"After isSessionOwner()\");\n    }\n  }\n\n  @Override\n  public boolean isSupporting(Capabilities capabilities) {\n    try {\n      System.out.println(\"Before isSupporting\");\n      return node.isSupporting(capabilities);\n    } finally {\n      System.out.println(\"After isSupporting()\");\n    }\n  }\n\n  @Override\n  public NodeStatus getStatus() {\n    try {\n      System.out.println(\"Before getStatus()\");\n      return node.getStatus();\n    } finally {\n      System.out.println(\"After getStatus()\");\n    }\n  }\n\n  @Override\n  public HealthCheck getHealthCheck() {\n    try {\n      System.out.println(\"Before getHealthCheck()\");\n      return node.getHealthCheck();\n    } finally {\n      System.out.println(\"After getHealthCheck()\");\n    }\n  }\n\n  @Override\n  public void drain() {\n    try {\n      System.out.println(\"Before drain()\");\n      node.drain();\n    } finally {\n      System.out.println(\"After drain()\");\n    }\n\n  }\n\n  @Override\n  public boolean isReady() {\n    try {\n      System.out.println(\"Before isReady()\");\n      return node.isReady();\n    } finally {\n      System.out.println(\"After isReady()\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding an Element by Name\nDESCRIPTION: This snippet shows how to locate a specific element on a web page using its name attribute. The `findElement` method with `By.name` locator is used for this purpose. The `name` parameter specifies the value of the name attribute to search for.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nval searchBox = driver.findElement(By.name(\"q\"))\n```\n\n----------------------------------------\n\nTITLE: Find All Elements by Tag Name\nDESCRIPTION: This snippet demonstrates how to find all elements on a page that match a specific tag name. It uses the `FindElements` method with `By.TagName` to locate all `<li>` elements. The result is an IReadOnlyList of IWebElement objects, representing all the list items on the page. If no elements are found it returns an empty list.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_21\n\nLANGUAGE: CSharp\nCODE:\n```\nIReadOnlyList<IWebElement> plants = driver.FindElements(By.TagName(\"li\"));\n```\n\n----------------------------------------\n\nTITLE: Base Component Class in Java\nDESCRIPTION: This Java code defines an abstract base component class that holds a WebElement instance representing the root of the component.  It serves as a base for all page component objects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.ja.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class BaseComponent {\n    protected WebElement root;\n\n    public BaseComponent(WebElement root) {\n        this.root = root;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Console Logs in Python\nDESCRIPTION: This Python snippet shows how to capture console logs using Chrome DevTools Protocol (CDP) with Selenium. It requires the Selenium library and a configured ChromeDriver instance. The code sets up a listener for console events and prints the log messages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef test_console_logs(driver):\n    driver.get(\"https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Service Instance - Python\nDESCRIPTION: This snippet demonstrates how to initialize a driver using the default service instance in Python. It relies on Selenium's driver management to locate the driver executable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.zh-cn.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndriver = webdriver.Chrome()\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Status - JavaScript\nDESCRIPTION: Demonstrates how to check if a web element is enabled on a webpage using JavaScript and Selenium WebDriver. The `isEnabled()` method returns a boolean indicating whether the element is enabled. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst buttonInput = await driver.findElement(By.name('button_input'))\nexpect(await buttonInput.isEnabled()).toBe(false)\n```\n\n----------------------------------------\n\nTITLE: Take Element Screenshot in Selenium\nDESCRIPTION: This code takes a screenshot of a specific element on the page using Selenium WebDriver and saves it as a PNG file. It demonstrates how to find an element by CSS selector, and take the element's screenshot, and save it to a file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_84\n\nLANGUAGE: CSharp\nCODE:\n```\n    using OpenQA.Selenium;\n    using OpenQA.Selenium.Chrome;\n    using OpenQA.Selenium.Support.UI;\n\n    // Webdriver\n    var driver = new ChromeDriver();\n    driver.Navigate().GoToUrl(\"http://www.example.com\");\n\n    // Fetch element using FindElement\n    var webElement = driver.FindElement(By.CssSelector(\"h1\"));\n\n    // Screenshot for the element\n    var elementScreenshot = (webElement as ITakesScreenshot).GetScreenshot();\n    elementScreenshot.SaveAsFile(\"screenshot_of_element.png\");\n```\n\n----------------------------------------\n\nTITLE: Open a window with a reference browsing context in Java\nDESCRIPTION: This snippet demonstrates how to open a new window with a reference browsing context using WebDriver BiDi in Java.  It creates a new window based on an existing top-level browsing context. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(driver, null);\nString id = browsingContext.getId();\n\nBrowsingContext newBrowsingContext = new BrowsingContext(driver, id);\nString newId = newBrowsingContext.getId();\n```\n\n----------------------------------------\n\nTITLE: Get Active Element Attribute - Kotlin\nDESCRIPTION: This Kotlin code retrieves the 'title' attribute of the currently active element on Google's homepage.  It initializes a ChromeDriver, navigates to the Google webpage, enters \"webElement\" into the search field, and retrieves the 'title' attribute of the active element using `driver.switchTo().activeElement().getAttribute`.  The retrieved title is then printed to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_38\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.By\n  import org.openqa.selenium.chrome.ChromeDriver\n\n  fun main() {\n      val driver = ChromeDriver()\n      try {\n          driver.get(\"https://www.google.com\")\n          driver.findElement(By.cssSelector(\"[name='q']\")).sendKeys(\"webElement\")\n\n          // Obter atributo do elemento atualmente ativo\n          val attr = driver.switchTo().activeElement().getAttribute(\"title\")\n          print(attr)\n      } finally {\n          driver.quit()\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtualAuthenticatorOptions in Python\nDESCRIPTION: This snippet illustrates the initialization of VirtualAuthenticatorOptions in Python, specifying protocol, domain, user verification, and transport preferences.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\noptions = VirtualAuthenticatorOptions(\n    protocol=Protocol.CTAP2,\n    domain=\"localhost\",\n    user_verified=True\n)\noptions.add_transport(Transport.USB)\n```\n\n----------------------------------------\n\nTITLE: Setting Capabilities Before Upgrade - CSharp\nDESCRIPTION: This C# code shows how to set desired capabilities before upgrading to Selenium 4. It sets the browser name, platform, version, build, and test name. These capabilities are used to initiate a RemoteWebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nDesiredCapabilities caps = new DesiredCapabilities();\ncaps.SetCapability(\"browserName\", \"firefox\");\ncaps.SetCapability(\"platform\", \"Windows 10\");\ncaps.SetCapability(\"version\", \"92\");\ncaps.SetCapability(\"build\", myTestBuild);\ncaps.SetCapability(\"name\", myTestName);\nvar driver = new RemoteWebDriver(new Uri(CloudURL), caps);\n```\n\n----------------------------------------\n\nTITLE: Scroll By Amount using Selenium Wheel Kotlin\nDESCRIPTION: This snippet demonstrates how to scroll by a specific amount (deltaX and deltaY) using Selenium's Wheel actions in Kotlin. Positive deltaX values scroll to the right, and positive deltaY values scroll down. Negative values scroll left and up respectively.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nActions(driver)\n  .scroll(0, 100, 0, 0)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait\nDESCRIPTION: This snippet demonstrates how to set an implicit wait in Selenium.  The `implicitlyWait` (Java/Kotlin/JavaScript) or `implicitly_wait` (Python/Ruby) or `Manage().Timeouts().ImplicitWait` (C#) method sets the amount of time the driver should wait when searching for an element if it is not immediately present.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.manage().setTimeouts({ implicit: 10000 });\n```\n\n----------------------------------------\n\nTITLE: Getting All Options from Select Element\nDESCRIPTION: This code retrieves all options from a <select> element using Selenium's Select class. The `options` method returns a list of WebElements representing each option within the select list.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = select.options\n```\n\n----------------------------------------\n\nTITLE: Removing a Virtual Authenticator in Java\nDESCRIPTION: This snippet demonstrates how to remove a previously added virtual authenticator in Java. It retrieves the DevTools interface and calls removeVirtualAuthenticator with the authenticator ID to delete the virtual authenticator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\ndevTools.getDomains().security().removeVirtualAuthenticator(authenticatorId);\n```\n\n----------------------------------------\n\nTITLE: Listening to JS Logs with BiDi API in Java\nDESCRIPTION: This code snippet demonstrates how to listen to all JS logs at all levels using the BiDirectional API in Java and register callbacks to process the log. Requires Selenium 4.8 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.zh-cn.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nBiDi biDi = new BiDi((HasDevTools) driver);\nbiDi.getBidi().log().addLogListener(event -> {\n  System.out.println(event.getText());\n  System.out.println(event.getLevel());\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to JS Exceptions in Java\nDESCRIPTION: This Java code snippet demonstrates how to listen to JavaScript exceptions using the BiDirectional API in Selenium. It registers a callback to process the exception details when a JS exception occurs. It requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.pt-br.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nBiDi bidi = ((HasBiDi) driver).getBiDi();\nbidi.getLog().addJavascriptExceptionListener(System.out::println);\n\ndriver.get(\"https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html\");\nWebElement element = driver.findElement(By.id(\"jsException\"));\nelement.click();\n```\n\n----------------------------------------\n\nTITLE: Find First Element by Class Name in Java\nDESCRIPTION: This snippet finds the first web element with the class name 'tomatoes' within the entire DOM using the Selenium WebDriver in Java. It utilizes the `findElement` method with `By.className` to locate the element. The result is a `WebElement` object representing the located element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebElement vegetable = driver.findElement(By.className(\"tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Window Rectangle with Java\nDESCRIPTION: This code snippet demonstrates how to set the window rectangle (position and size) in Java using Selenium WebDriver's Options class. The `window().setPosition()` and `window().setSize()` methods are used to adjust the window's location and dimensions. This enables control over the browser window's display.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_43\n\nLANGUAGE: java\nCODE:\n```\ndriver.manage().window().setPosition(new Point(0, 0));\n```\n\n----------------------------------------\n\nTITLE: Evaluate script in sandbox - JavaScript\nDESCRIPTION: This JavaScript code evaluates a script within a specified sandbox. It sets the sandbox name and then evaluates the `1+1` expression.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('evaluate script in a sandbox', async () => {\n    const browsingContext = await new BrowsingContext(driver, tabId);\n    const result = await browsingContext.script.evaluate({\n      expression: '1+1',\n      target: {context: browsingContext.context, sandbox: 'test'},\n      awaitPromise: true,\n    });\n\n    expect(result.result.value).toBe(2);\n  });\n```\n\n----------------------------------------\n\nTITLE: Response Started Event - Java\nDESCRIPTION: This Java code snippet demonstrates how to listen for the 'responseStarted' network event using Selenium BiDi.  It prints the response URL when the event is triggered, allowing you to monitor incoming responses.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\nNetwork network = new Network(driver.getDevTools());\nnetwork.onResponseStarted(event -> {\n  System.out.println(event.getResponse().getUrl());\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level for EdgeDriver in Python\nDESCRIPTION: This snippet shows how to set the log level for the EdgeDriver in Python using the `service_log_level` argument. This allows you to control the verbosity of the driver's output.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver = Edge(service_log_level='DEBUG')\n```\n\n----------------------------------------\n\nTITLE: Selenium Grid Session Configuration (PostgreSQL)\nDESCRIPTION: This TOML configuration file sets up Selenium Grid to use a JDBC-backed session map, which stores session data in a relational database. The configuration includes the JDBC URL, username, and password required to connect to the PostgreSQL database.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.zh-cn.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[sessions]\nimplementation = \"org.openqa.selenium.grid.sessionmap.jdbc.JdbcBackedSessionMap\"\njdbc-url = \"jdbc:postgresql://localhost:5432/selenium_sessions\"\njdbc-user = \"seluser\"\njdbc-password = \"seluser\"\n```\n\n----------------------------------------\n\nTITLE: Capturing Response Information via CDP in C#\nDESCRIPTION: This C# code snippet demonstrates how to intercept and capture response information using Chrome DevTools Protocol (CDP) with Selenium. It uses `Network.ResponseReceived` to capture network responses and prints the URL of each response. This snippet depends on the Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nsession.Network.ResponseReceived += (sender, e) =>\n{\n    Console.WriteLine(e.Response.Url);\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium\nDESCRIPTION: This code shows how to handle disabled options. Since Selenium 4.5, you cannot create a Select object from a disabled <select> element, and you cannot select a disabled <option>. Attempting to do so will result in an exception.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_39\n\nLANGUAGE: Ruby\nCODE:\n```\ndisabled_select_element = @driver.find_element(name: 'single_disabled')\ndriver.find_element(id: 'sinlge_disabled_1').click\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Browser Logs in Edge with Python\nDESCRIPTION: This Python snippet shows how to retrieve browser logs from Edge using the `get_log` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get_log('browser')\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value - Ruby\nDESCRIPTION: Demonstrates how to retrieve the computed CSS value of a web element using Ruby and Selenium WebDriver. The `css_value` method returns the value of the specified CSS property as a string. A WebDriver instance, an element locator, and the CSS property name are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_33\n\nLANGUAGE: Ruby\nCODE:\n```\nputs(driver.find_element(id: 'namedColor').css_value('background-color'))\n```\n\n----------------------------------------\n\nTITLE: Setting Page Scale in Selenium C#\nDESCRIPTION: This C# code snippet demonstrates how to set the page scale to 0.5 using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_13\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.Scale = 0.5;\n\nAssert.That(printOptions.Scale, Is.EqualTo(0.5));\n```\n\n----------------------------------------\n\nTITLE: Working with Firefox Profiles - Python\nDESCRIPTION: Demonstrates how to create and use Firefox profiles in Python.  This involves creating a `FirefoxProfile` object and assigning it to the `FirefoxOptions`. Requires the Selenium library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\noptions = webdriver.FirefoxOptions()\nprofile = webdriver.FirefoxProfile()\n# Add custom preferences to the profile here\noptions.profile = profile\ndriver = webdriver.Firefox(options=options)\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element By Amount - Selenium Wheel JavaScript\nDESCRIPTION: This snippet demonstrates how to scroll from a specific element by a given amount using Selenium's Wheel actions in JavaScript. The viewport will be scrolled so the bottom of the element is at the bottom of the screen, then the page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('target'));\nawait driver.actions().scroll(element, 0, 0, 0, 100).perform();\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client in Python\nDESCRIPTION: This Python code snippet shows how to configure the HTTP client in Selenium. It's intended to demonstrate setting up timeouts or proxy configurations within the Python bindings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/http_client.en.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{{< gh-codeblock path=\"examples/python/tests/drivers/test_http_client.py\" >}}\n```\n\n----------------------------------------\n\nTITLE: Enable Managed Downloads TOML\nDESCRIPTION: Configures a Selenium Grid node to automatically manage downloads by saving files to a temporary directory, which can later be retrieved from the node.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.ja.md#_snippet_10\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\nenable-managed-downloads = true\n```\n\n----------------------------------------\n\nTITLE: Removing a Virtual Authenticator in Python\nDESCRIPTION: This snippet shows how to remove a previously added virtual authenticator in Python. It calls remove_virtual_authenticator on the DevTools security domain, passing the authenticator ID to delete it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndevtools.security.remove_virtual_authenticator(authenticator_id)\n```\n\n----------------------------------------\n\nTITLE: Finding Elements By Tag Name - JavaScript\nDESCRIPTION: This code snippet demonstrates how to find all elements with a specific tag name using Selenium WebDriver in JavaScript. It initializes a WebDriver instance, navigates to a URL, finds all 'p' elements using CSS selector, and prints their text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {Builder, By} = require('selenium-webdriver');\n(async function example() {\n    let driver = await new Builder().forBrowser('firefox').build();\n    try {\n        // Navigate to Url\n        await driver.get('https://www.example.com');\n\n        // Get all the elements available with tag 'p'\n        let elements = await driver.findElements(By.css('p'));\n        for(let e of elements) {\n            console.log(await e.getText());\n        }\n    }\n    finally {\n        await driver.quit();\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Printing with print_page() - Python\nDESCRIPTION: This Python snippet demonstrates printing a page using the print_page method with configured PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.print_options import PrintOptions\n\nprint_options = PrintOptions()\npdf = driver.print_page(print_options)\n```\n\n----------------------------------------\n\nTITLE: Switching to a New Window/Tab in Selenium\nDESCRIPTION: This code demonstrates how to switch the WebDriver's focus to a newly opened window or tab. It first stores the original window handle, then iterates through all available window handles to find the new window, and switches to it. It depends on the Selenium WebDriver library and requires having a link that opens in a new window.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nString originalWindow = driver.getWindowHandle();\nassertNotNull(originalWindow);\n\ndriver.findElement(By.linkText(\"new window\")).click();\nwait.until(numberOfWindowsToBe(2));\n\nfor (String windowHandle : driver.getWindowHandles()) {\n  if(!originalWindow.contentEquals(windowHandle)) {\n    driver.switchTo().window(windowHandle);\n    break;\n  }\n}\nwait.until(titleIs(\"SeleniumHQ Browser Automation\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Level in JavaScript\nDESCRIPTION: This snippet shows how to set the logger level in JavaScript using the `selenium-webdriver/lib/logging` package.  It configures the verbosity of logs. Requires the `selenium-webdriver` package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.setLevel(logging.Level.INFO)\n```\n\n----------------------------------------\n\nTITLE: Minimize Window - Selenium\nDESCRIPTION: This snippet demonstrates how to minimize the current browser window using Selenium WebDriver. The exact behavior of this command is specific to the individual window manager. Requires Selenium 4 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_64\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.manage().window().minimize();\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element - Selenium\nDESCRIPTION: Drags an element from its original location and drops it onto another target element. The action involves pressing the left mouse button on the source element, moving to the target element, and then releasing the mouse button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement source = driver.FindElement(By.Id(\"draggable\"));\nIWebElement target = driver.FindElement(By.Id(\"droppable\"));\nnew Actions(driver).DragAndDrop(source, target).Perform();\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium\nDESCRIPTION: This code snippet demonstrates how to initialize a Select object in Selenium WebDriver. It first locates a <select> element using a locator strategy (e.g., by ID) and then creates a Select object using the found element.  Note that as of Selenium 4.5, you can't create a `Select` object if the `<select>` element is disabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nselect_element = @driver.find_element(:id, 'selectomatic')\nselect = Selenium::WebDriver::Support::Select.new(select_element)\n```\n\n----------------------------------------\n\nTITLE: Key Up Action in Selenium (C#)\nDESCRIPTION: Demonstrates how to simulate releasing a key using the Actions API in C#. This example shows how to release the SHIFT key on an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement input = driver.FindElement(By.TagName(\"input\"));\nActions actions = new Actions(driver);\nactions.KeyDown(input, Keys.Shift)\n    .SendKeys(input, \"text\")\n    .KeyUp(input, Keys.Shift)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: DOM Mutation Handlers in Ruby with Selenium CDP\nDESCRIPTION: This Ruby snippet demonstrates how to handle DOM mutations using the Chrome DevTools Protocol (CDP) within Selenium. It fetches a request using the Fetch domain of CDP and then prints it. Requires a running Selenium WebDriver instance connected to a Chrome browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.ja.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nrequest = cdp.fetch.get_request(request_id: interception_id)['result']['body']\n```\n\n----------------------------------------\n\nTITLE: Get Active Element Attribute - CSharp\nDESCRIPTION: This C# code retrieves the 'title' attribute of the currently active element on a webpage. It initializes a ChromeDriver, navigates to Google, enters \"webElement\" into the search field, and retrieves the 'title' attribute of the currently active element. The title is printed to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_36\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\n    using OpenQA.Selenium.Chrome;\n\n    namespace ActiveElement {\n     class ActiveElement {\n      public static void Main(string[] args) {\n       IWebDriver driver = new ChromeDriver();\n       try {\n        // Navegar até a URL\n        driver.Navigate().GoToUrl(\"https://www.google.com\");\n        driver.FindElement(By.CssSelector(\"[name='q']\")).SendKeys(\"webElement\");\n\n        // Obter atributo do elemento atualmente ativo\n        string attr = driver.SwitchTo().ActiveElement().GetAttribute(\"title\");\n        System.Console.WriteLine(attr);\n       } finally {\n        driver.Quit();\n       }\n      }\n     }\n    }\n```\n\n----------------------------------------\n\nTITLE: Preload script - Java\nDESCRIPTION: This Java code preloads a script using BiDi.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void preloadScript() {\n        BrowsingContext browsingContext = new BrowsingContext(driver, driver.getWindowHandle());\n        browsingContext.preloadScript(\"test\", null);\n    }\n```\n\n----------------------------------------\n\nTITLE: Downloading a File in Python\nDESCRIPTION: Downloads a specified file for a RemoteWebDriver session in Python, retrieving the file from the remote directory and downloading it to a defined local directory. Requires the filename to download, and the local directory target to download into.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\ndownloaded_file = driver.download_file(\"file_name\", target_dir)\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Class Name with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a web element on a page using its class name attribute with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.className()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.ClassName(\"information\"));\n```\n\n----------------------------------------\n\nTITLE: Chrome Casting - Python\nDESCRIPTION: This snippet demonstrates how to drive Chrome Cast devices including sharing tabs using Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_48\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Chrome(options=chrome_options)\ndev_tools = driver.devtools\ndev_tools.cast.start_desktop_mirroring(sink_name='screen')\ndev_tools.cast.start_tab_mirroring(sink_name='tab')\n```\n\n----------------------------------------\n\nTITLE: Context Click with Selenium\nDESCRIPTION: Moves to the center of an element and performs a right-click (context click). It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"clickable\"))\nval actions = Actions(driver)\nactions.contextClick(element).perform()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Color Objects with from_string\nDESCRIPTION: This snippet shows how to create Color objects using basic color names in Python with the from_string method. It covers creating color objects for black, chocolate, and hotpink.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nBLACK = Color.from_string('black')\nCHOCOLATE = Color.from_string('chocolate')\nHOTPINK = Color.from_string('hotpink')\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse from Viewport Origin in Java\nDESCRIPTION: This Java snippet moves the mouse pointer relative to the top-left corner of the current viewport by a specified offset. It uses the Actions class to perform the move and requires a WebDriver instance to interact with the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_48\n\nLANGUAGE: java\nCODE:\n```\nActions actions = new Actions(driver);\nactions.moveByOffset(20, 100).perform();\n\nPoint location = driver.manage().window().getPosition();\nactions.moveByOffset(location.x + 20, location.y + 100).perform();\n```\n\n----------------------------------------\n\nTITLE: Scroll By Amount using Selenium Wheel JavaScript\nDESCRIPTION: This snippet demonstrates how to scroll by a specific amount (deltaX and deltaY) using Selenium's Wheel actions in JavaScript. Positive deltaX values scroll to the right, and positive deltaY values scroll down. Negative values scroll left and up respectively.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.actions().scroll(0, 0, 0, 100).perform();\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Binary Location - Ruby\nDESCRIPTION: Demonstrates how to set the specific binary location for Firefox in Ruby. This is useful when you need to use a specific version of Firefox (e.g., nightly build). Requires the Selenium WebDriver gem and `Selenium::WebDriver::Firefox::Options`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.binary = '/Applications/Firefox Nightly.app/Contents/MacOS/firefox'\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium (JavaScript)\nDESCRIPTION: Demonstrates sending keys to a specific element using the Actions API in JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst element = await driver.findElement(By.tagName('input'));\nconst actions = driver.actions({async: true});\nawait actions.sendKeys(element, 'text')\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Script Pinning in CSharp\nDESCRIPTION: This C# snippet demonstrates how to pin a script using the Chrome DevTools Protocol (CDP) through Selenium. It's a test case and relies on a running Selenium WebDriver instance for Chrome.  It makes use of `ExecuteCdpCommand` to send a 'Debugger.enable' command before pinning a script.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.zh-cn.md#_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.ExecuteCdpCommand(\"Debugger.enable\", new Dictionary<string, object>());\ndriver.ExecuteCdpCommand(\"Debugger.setScriptSource\", new Dictionary<string, object>() { { \"scriptId\", \"\" }, { \"scriptSource\", \"\" } });\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Session, Node and Grid Details\nDESCRIPTION: This curl command queries GraphQL to fetch detailed information about the Grid, Nodes, and Sessions including URI, session counts, status, and session details.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.pt-br.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ grid { uri, maxSession, sessionCount }, nodesInfo { nodes { id, uri, status, sessions { id, capabilities, startTime, uri, nodeId, nodeUri, sessionDurationMillis, slot { id, stereotype, lastStarted } }, slotCount, sessionCount }} }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Products Test Class in Java\nDESCRIPTION: This Java code demonstrates how to use the ProductsPage object and the Product component object in tests. It includes tests for product inventory size and product prices using JUnit assertions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.ja.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class ProductsTest {\n    @Test\n    public void testProductInventory() {\n        var productsPage = new ProductsPage(driver); // page object\n        var products = productsPage.getProducts();\n        assertEquals(6, products.size()); // expected, actual\n    }\n    \n    @Test\n    public void testProductPrices() {\n        var productsPage = new ProductsPage(driver);\n\n        // Pass a lambda expression (predicate) to filter the list of products\n        // The predicate or \"strategy\" is the behavior passed as parameter\n        var backpack = productsPage.getProduct(p -> p.getName().equals(\"Backpack\")); // page component object\n        var bikeLight = productsPage.getProduct(p -> p.getName().equals(\"Bike Light\"));\n\n        assertEquals(new BigDecimal(\"29.99\"), backpack.getPrice());\n        assertEquals(new BigDecimal(\"9.99\"), bikeLight.getPrice());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting acceptInsecureCerts - Java\nDESCRIPTION: This Java snippet demonstrates how to set the acceptInsecureCerts capability to true. This allows the browser to accept insecure TLS certificates during the session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_27\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setAcceptInsecureCerts(true);\n```\n\n----------------------------------------\n\nTITLE: Removing All Credentials in Java\nDESCRIPTION: This Java code snippet removes all credentials from the authenticator. This is achieved using the WebAuthn API through the DevTools interface. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_31\n\nLANGUAGE: Java\nCODE:\n```\ndevTools.getDomains().getWebAuthn().removeAllCredentials();\n```\n\n----------------------------------------\n\nTITLE: Refreshing the Current Page (JavaScript)\nDESCRIPTION: Demonstrates how to refresh the current page using Selenium WebDriver in JavaScript. The `refresh` method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.refresh()\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Location in Python\nDESCRIPTION: Shows how to specify the driver location in Python when initializing the Service. It requires the path to the driver executable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.en.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nservice = Service(executable_path=\"/path/to/chromedriver\")\n```\n\n----------------------------------------\n\nTITLE: Get Element Size and Position - CSharp\nDESCRIPTION: Demonstrates how to retrieve the size and position of a web element using C# and Selenium WebDriver. The `Rect` property returns a `Rect` struct containing the element's x, y coordinates, width, and height. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"range_input\"));\nRectangle rect = element.Rect;\nConsole.WriteLine(rect.ToString());\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Internet Explorer with Options in Selenium\nDESCRIPTION: This code snippet demonstrates how to start a Microsoft Edge browser in Internet Explorer Compatibility mode with basic defined options using Selenium in various programming languages. It sets up the InternetExplorerOptions and uses them to create an InternetExplorerDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::IE::Options.new\noptions.attach_to_edge_chrome = true\noptions.edge_executable_path = 'C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe'\nSelenium::WebDriver.for :internet_explorer, options: options\n```\n\n----------------------------------------\n\nTITLE: Product Component Object in Java\nDESCRIPTION: This Java code defines the Product component object, extending the BaseComponent. It includes methods to get the name and price of the product, and to add the product to the cart, demonstrating how to interact with the product component.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.en.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// Page Component Object\npublic class Product extends BaseComponent {\n    // The root element contains the entire component\n    public Product(WebElement root) {\n        super(root); // inventory_item\n    }\n\n    public String getName() {\n        // Locating an element begins at the root of the component\n        return root.findElement(By.className(\"inventory_item_name\")).getText();\n    }\n\n    public BigDecimal getPrice() {\n        return new BigDecimal(\n                root.findElement(By.className(\"inventory_item_price\"))\n                    .getText()\n                    .replace(\"$\", \"\")\n            ).setScale(2, RoundingMode.UNNECESSARY); // Sanitation and formatting\n    }\n\n    public void addToCart() {\n        root.findElement(By.id(\"add-to-cart-backpack\")).click();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Page Object Model in Selenium Java\nDESCRIPTION: This Java code demonstrates a basic Page Object model for interacting with the GitHub new issue page. It includes methods for setting various fields and submitting the form, illustrating how to abstract UI elements into a reusable class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.pt-br.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.webdriver;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\n\npublic class EditIssue {\n\n  private final WebDriver driver;\n\n  public EditIssue(WebDriver driver) {\n    this.driver = driver;\n  }\n\n  public void setTitle(String title) {\n    WebElement field = driver.findElement(By.id(\"issue_title\"));\n    clearAndType(field, title);\n  }\n\n  public void setBody(String body) {\n    WebElement field = driver.findElement(By.id(\"issue_body\"));\n    clearAndType(field, body);\n  }\n\n  public void setHowToReproduce(String howToReproduce) {\n    WebElement field = driver.findElement(By.id(\"issue_form_repro-command\"));\n    clearAndType(field, howToReproduce);\n  }\n\n  public void setLogOutput(String logOutput) {\n    WebElement field = driver.findElement(By.id(\"issue_form_logs\"));\n    clearAndType(field, logOutput);\n  }\n\n  public void setOperatingSystem(String operatingSystem) {\n    WebElement field = driver.findElement(By.id(\"issue_form_operating-system\"));\n    clearAndType(field, operatingSystem);\n  }\n\n  public void setSeleniumVersion(String seleniumVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_selenium-version\"));\n    clearAndType(field, logOutput);\n  }\n\n  public void setBrowserVersion(String browserVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_browser-versions\"));\n    clearAndType(field, browserVersion);\n  }\n\n  public void setDriverVersion(String driverVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_browser-driver-versions\"));\n    clearAndType(field, driverVersion);\n  }\n\n  public void setUsingGrid(String usingGrid) {\n    WebElement field = driver.findElement(By.id(\"issue_form_selenium-grid-version\"));\n    clearAndType(field, usingGrid);\n  }\n\n  public IssueList submit() {\n    driver.findElement(By.cssSelector(\"button[type='submit']\")).click();\n    return new IssueList(driver);\n  }\n\n  private void clearAndType(WebElement field, String text) {\n    field.clear();\n    field.sendKeys(text);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Move by Offset from Element with Selenium\nDESCRIPTION: This snippet demonstrates how to move the mouse by a specified offset from the center of an element using Selenium. The initial mouse position is the center of the element. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"my-element\")\nactions = ActionChains(driver)\nactions.move_to_element(element, 10, 20).perform()\n```\n\n----------------------------------------\n\nTITLE: Activate a browsing context in JavaScript\nDESCRIPTION: This snippet shows how to activate a browsing context using WebDriver BiDi in JavaScript. It switches to a browsing context then gets its tree.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nawait browsingContext.activate();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait browsingContext.getTree()\n```\n\n----------------------------------------\n\nTITLE: Printing Page in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates printing a webpage using Selenium and sets the page range to 1-2. It retrieves the content as a PDF object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_54\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.get(\"https://www.selenium.dev\")\n    val printer = driver as PrintsPage\n\n    val printOptions = PrintOptions()\n    printOptions.setPageRanges(\"1-2\")\n    \n    val pdf: Pdf = printer.print(printOptions)\n    val content = pdf.content\n```\n\n----------------------------------------\n\nTITLE: Transforming Responses using CDP in Java\nDESCRIPTION: This Java code demonstrates transforming network responses using the Chrome DevTools Protocol (CDP) in Selenium. It intercepts network requests, modifies the response body, and then fulfills the request with the modified content. The code navigates to a specified URL and asserts that the page title has been successfully transformed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\ncdp.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));\nString requestId = cdp.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty())).getRequestId();\ncdp.send(Network.getResponseBody(new RequestId(requestId))).getBody();\nString newResponse = \"<h1>Target Page</h1>\";\ncdp.send(Network.fulfillRequest(new RequestId(requestId), 200, Optional.empty(), Optional.empty(), Optional.of(newResponse), Optional.empty()));\ndriver.get(\"https://www.example.com\");\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects - Selenium WebDriver\nDESCRIPTION: This snippet shows how to create Color objects from string representations of various color formats such as HEX, RGB, RGBA, HSL, and HSLA in Ruby. The `Color.from_string()` method is used to parse the color string. This allows for a standard way to work with colors regardless of their initial representation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nHEX_COLOUR = Color.from_string('#2F7ED8')\nRGB_COLOUR = Color.from_string('rgb(255, 255, 255)')\nRGB_COLOUR = Color.from_string('rgb(40%, 20%, 40%)')\nRGBA_COLOUR = Color.from_string('rgba(255, 255, 255, 0.5)')\nRGBA_COLOUR = Color.from_string('rgba(40%, 20%, 40%, 0.5)')\nHSL_COLOUR = Color.from_string('hsl(100, 0%, 50%)')\nHSLA_COLOUR = Color.from_string('hsla(100, 0%, 50%, 0.5)')\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Node (Distributed) (Shell)\nDESCRIPTION: This command starts a Selenium Node in a Distributed Grid setup, specifying the Event Bus for communication. It uses port 5555 by default.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.pt-br.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium Ruby\nDESCRIPTION: This snippet demonstrates how to select an option in a Select element by its value attribute in Ruby. It uses the `select_by` method with `:value` option. It raises NoSuchElementException if no matching option is found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\nselect.select_by(:value, 'two')\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Get maxSession and sessionCount\nDESCRIPTION: This command uses curl to send a GraphQL query to the Selenium Grid to retrieve the `maxSession` and `sessionCount` values from the `grid` object. It posts a JSON payload containing the GraphQL query to the specified GraphQL endpoint.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.zh-cn.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\": \"{ grid { maxSession, sessionCount } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Get Current URL - Java\nDESCRIPTION: This Java snippet shows how to retrieve the current URL of the web page using Selenium WebDriver.  It requires an existing WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.pt-br.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\ndriver.getCurrentUrl();\n```\n\n----------------------------------------\n\nTITLE: Using Safari Technology Preview - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to use Safari Technology Preview. Sets the `technology_preview` option to true.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.pt-br.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Safari::Options.new(technology_preview: true)\ndriver = Selenium::WebDriver.for :safari, options: options\n```\n\n----------------------------------------\n\nTITLE: Open a new window using WebDriver BiDi in Java\nDESCRIPTION: This snippet demonstrates how to open a new browsing context in a new window using the WebDriver BiDi API in Java. It utilizes the `BrowsingContext` class to create a new window and retrieves the browsing context ID. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(driver, null);\nString id = browsingContext.getId();\n\nassertThat(id).isNotBlank();\n```\n\n----------------------------------------\n\nTITLE: Setting Capabilities After Upgrade - CSharp\nDESCRIPTION: This C# code shows how to set browser options and custom options after upgrading to Selenium 4.  It sets the PlatformName and BrowserVersion directly.  Additional custom cloud options are wrapped in an additional option.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\nvar browserOptions = new FirefoxOptions();\nbrowserOptions.PlatformName = \"Windows 10\";\nbrowserOptions.BrowserVersion = \"92\";\nvar cloudOptions = new Dictionary<string, object>();\ncloudOptions.Add(\"build\", myTestBuild);\ncloudOptions.Add(\"name\", myTestName);\nbrowserOptions.AddAdditionalOption(\"cloud:options\", cloudOptions);\nvar driver = new RemoteWebDriver(new Uri(CloudURL), browserOptions);\n```\n\n----------------------------------------\n\nTITLE: Move to Element Action with Selenium\nDESCRIPTION: This snippet demonstrates how to move the mouse to the center of an element using Selenium. This is often used for hovering over an element. The element must be within the viewport. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('my-element'));\nawait actions.moveToElement(element).perform();\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - CSharp\nDESCRIPTION: This C# snippet demonstrates how to set the position of the browser window to the top-left corner of the primary monitor (0, 0) using Selenium WebDriver. A new `Point` object is created with the coordinates, and then assigned to the `Position` property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\n// Move the window to the top left of the primary monitor\ndriver.Manage().Window.Position = new Point(0, 0);\n```\n\n----------------------------------------\n\nTITLE: Setting Shrink To Fit - Java\nDESCRIPTION: This Java snippet sets the shrink-to-fit setting to false using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setShrinkToFit(false);\n\nassertThat(printOptions.getShrinkToFit()).isFalse();\n```\n\n----------------------------------------\n\nTITLE: Adding Test Metadata to Capabilities (Java)\nDESCRIPTION: This Java code snippet demonstrates how to add metadata to test capabilities using the `se:` prefix. This metadata can be used by GraphQL or visualized in the Selenium Grid UI.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.ja.md#_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions chromeOptions = new ChromeOptions();\nchromeOptions.setCapability(\"browserVersion\", \"100\");\nchromeOptions.setCapability(\"platformName\", \"Windows\");\n// Showing a test name instead of the session id in the Grid UI\nchromeOptions.setCapability(\"se:name\", \"My simple test\");\n// Other type of metadata can be seen in the Grid UI by clicking on the\n// session info or via GraphQL\nchromeOptions.setCapability(\"se:sampleMetadata\", \"Sample metadata value\");\nWebDriver driver = new RemoteWebDriver(new URL(\"http://gridUrl:4444\"), chromeOptions);\ndriver.get(\"http://www.google.com\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Hub for Managed Downloads (Java)\nDESCRIPTION: This snippet shows how to start the hub for managed downloads.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar hub\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Driver Service Log Console Output\nDESCRIPTION: This code snippet shows how to configure the GeckoDriverService to send log output to the console in Java, Python, and Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_22\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.firefox(log: $stdout)\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window - Selenium WebDriver - Kotlin\nDESCRIPTION: This snippet sets the browser window to fullscreen mode using Selenium WebDriver in Kotlin. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_52\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.manage().window().fullscreen()\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Node with Managed Downloads Enabled - Java\nDESCRIPTION: This command starts a Selenium Grid Node with managed downloads enabled using the `--enable-managed-downloads true` flag. This allows the node to manage and provide access to files downloaded during test sessions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.pt-br.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar node --enable-managed-downloads true\n```\n\n----------------------------------------\n\nTITLE: Starting a custom Node with Uber Jar\nDESCRIPTION: This command demonstrates how to start a Selenium Grid Node using an uber JAR, specifying the custom node implementation class. It requires a pre-built uber JAR file containing the custom node implementation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/customize_node.pt-br.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -jar custom_node-server.jar node \\\n--node-implementation org.seleniumhq.samples.DecoratedLoggingNode\n```\n\n----------------------------------------\n\nTITLE: Selenium Login Test with DSL - Java\nDESCRIPTION: This Java method demonstrates how to use the `loginAsUser` DSL method to perform a login test. It calls the method with a username and password, then performs other actions on the AccountPage, and asserts that a certain condition is met. This showcases the readability and maintainability benefits of using DSL in Selenium tests by abstracting UI interactions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/domain_specific_language.en.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void loginTest() {\n    loginAsUser(\"cbrown\", \"cl0wn3\");\n\n    // Now that we're logged in, do some other stuff--since we used a DSL to support\n    // our testers, it's as easy as choosing from available methods.\n    do.something();\n    do.somethingElse();\n    Assert.assertTrue(\"Something should have been done!\", something.wasDone());\n\n    // Note that we still haven't referred to a button or web control anywhere in this\n    // script...\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse from Viewport Origin in Kotlin\nDESCRIPTION: This Kotlin code moves the mouse pointer relative to the top-left corner of the current viewport by a specified offset. It uses the Actions class to perform the move and requires a WebDriver instance to interact with the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_53\n\nLANGUAGE: kotlin\nCODE:\n```\nval actions = Actions(driver)\nactions.moveByOffset(20, 100).perform()\n\nval location = driver.manage().window().position\nactions.moveByOffset(location.x + 20, location.y + 100).perform()\n```\n\n----------------------------------------\n\nTITLE: Get New Session Queue\nDESCRIPTION: Retrieves the current requests in the new session queue. The response includes the number of requests and their payloads.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.ja.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://localhost:4444/se/grid/newsessionqueue/queue'\n```\n\n----------------------------------------\n\nTITLE: Navigate Back in Java\nDESCRIPTION: This code snippet demonstrates how to navigate back in the browsing history using Selenium WebDriver's BiDi API in Java.  It creates a browsing context and navigates to a URL before navigating back. Requires Selenium version 4.16.0 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_38\n\nLANGUAGE: Java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(((HasDevTools) driver).getDevTools(),\n                                         ((RemoteWebDriver) driver).getWindowHandle());\n\n    browsingContext.navigate(\"https://www.selenium.dev/\", WaitUntil.LOAD);\n    browsingContext.back(WaitUntil.LOAD);\n```\n\n----------------------------------------\n\nTITLE: Getting Named Cookie in C#\nDESCRIPTION: This code snippet demonstrates how to retrieve a cookie by its name using Selenium WebDriver in C#. It navigates to a website, adds a cookie named 'foo', and then retrieves the cookie by its name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\ndriver.Manage().Cookies.AddCookie(new Cookie(\"foo\", \"bar\"));\n\n// Get cookie details with named cookie 'foo'\nvar cookie = driver.Manage().Cookies.GetCookieNamed(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Get Current Window Handle - Selenium\nDESCRIPTION: Retrieves the current window handle, which is a unique identifier for the window within the current session. This identifier can be used to switch back to the window later. This code snippet shows how to retrieve the current window handle in different languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.windowHandle\n```\n\n----------------------------------------\n\nTITLE: Starting a Distributed Selenium Grid with PostGreSQL\nDESCRIPTION: This Bash script starts a distributed Selenium Grid with components like Event Bus, Session Queue, Sessions Map, Distributor, Router, and Node.  It uses Coursier to fetch the necessary JDBC driver and the `selenium-session-map-jdbc` dependency. The Sessions Map component is configured to use PostGreSQL for session storage using the `sessions.toml` file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.pt-br.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSE_VERSION=<current_selenium_version>\nJAR_NAME=selenium-server-${SE_VERSION}.jar\nPUBLISH=\"--publish-events tcp://localhost:4442\"\nSUBSCRIBE=\"--subscribe-events tcp://localhost:4443\"\nSESSIONS=\"--sessions http://localhost:5556\"\nSESSIONS_QUEUE=\"--sessionqueue http://localhost:5559\"\necho 'Starting Event Bus'\njava -jar $JAR_NAME event-bus $PUBLISH $SUBSCRIBE --port 5557 &\necho 'Starting New Session Queue'\njava -jar $JAR_NAME sessionqueue --port 5559 &\necho 'Starting Sessions Map'\njava -jar $JAR_NAME \\\n--ext $(coursier fetch -p org.seleniumhq.selenium:selenium-session-map-jdbc:${SE_VERSION} org.postgresql:postgresql:42.3.1) \\\nsessions $PUBLISH $SUBSCRIBE --port 5556 --config sessions.toml &\necho 'Starting Distributor'\njava -jar $JAR_NAME  distributor $PUBLISH $SUBSCRIBE $SESSIONS $SESSIONS_QUEUE --port 5553 --bind-bus false &\necho 'Starting Router'\njava -jar $JAR_NAME router $SESSIONS --distributor http://localhost:5553 $SESSIONS_QUEUE --port 4444 &\necho 'Starting Node'\njava -jar $JAR_NAME node $PUBLISH $SUBSCRIBE &\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Viewport in Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse pointer from the upper-left corner of the current viewport by a specified offset using Selenium WebDriver. It utilizes the `move_by_offset` method to achieve this. No specific dependencies beyond the Selenium WebDriver library are needed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nActionChains(driver)\n    .move_by_offset(30, 40)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Setting Script Timeout with Python\nDESCRIPTION: This code snippet demonstrates how to set the script timeout in Python using Selenium WebDriver's Options class.  The `set_script_timeout` method is used to specify the maximum time a script can execute before being terminated. The timeout is set to 30 seconds in this example.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndriver.set_script_timeout(30)\n```\n\n----------------------------------------\n\nTITLE: Get Page Title with Selenium\nDESCRIPTION: Retrieves the title of the current web page loaded in the browser using Selenium WebDriver. This functionality is demonstrated in Java, Python, C#, Ruby, and JavaScript. The `driver.title` property or method is used to access the title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.ja.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ndriver.getTitle()\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins - C#\nDESCRIPTION: This C# snippet shows how to set the page margins using PrintOptions and PageMargin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_10\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nPageMargin margin = new PageMargin();\nmargin.Top = 1.0;\nmargin.Bottom = 1.0;\nmargin.Left = 1.0;\nmargin.Right = 1.0;\nprintOptions.PageMargin = margin;\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - Java\nDESCRIPTION: Demonstrates how to set the browser window's position (top-left corner) to a specific x and y coordinate in Java using Selenium WebDriver. The code creates a `Point` object with the desired coordinates and then uses the `setPosition` method to move the window.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_48\n\nLANGUAGE: java\nCODE:\n```\n// Move the window to the top left of the primary monitor\ndriver.manage().window().setPosition(new Point(0, 0));\n```\n\n----------------------------------------\n\nTITLE: Click and Release Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a click and release action (a standard click) on an element using Selenium. It combines moving the mouse to the center of an element with pressing and then releasing the left mouse button. This is the standard way to click an element. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'my-element')\n@driver.action.click(element).perform\n```\n\n----------------------------------------\n\nTITLE: Click Element CSharp\nDESCRIPTION: This code snippet demonstrates how to click a web element using Selenium WebDriver in C#. It navigates to a URL, finds an element by its name attribute ('color_input'), and then clicks the element. Requires Selenium WebDriver setup and a running browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.en.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().GoToUrl(inputPage);\nIWebElement element = driver.FindElement(By.Name(\"color_input\"));\nelement.Click();\n\nAssert.That(element.GetAttribute(\"value\"), Is.EqualTo(\"#ff0000\"));\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium\nDESCRIPTION: Demonstrates sending keys to a specific element using Selenium's Actions API. This involves locating the element, creating an Actions object, and using the sendKeys method to send a string of characters to the element. It ensures keys are sent to a specific element, not just the active one.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nval element = driver.findElement(By.tagName(\"textarea\"))\nval actions = Actions(driver)\nactions.sendKeys(element, \"text\").perform()\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Java\nDESCRIPTION: Demonstrates how to select an option in a Select element by its value attribute in Java. It uses the selectByValue() method. Throws NoSuchElementException if matching option is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nselect.selectByValue(\"one\");\n```\n\n----------------------------------------\n\nTITLE: Registering a Selenium Node with a Hub on a Different Machine (Shell)\nDESCRIPTION: This command registers a Selenium Node with a Hub running on a different machine, specifying the Hub's IP address and port.  It requires that the Hub's Event Bus ports (4442 and 4443 by default) are exposed. The Hub is assumed to be using the default port 4444.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.pt-br.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --hub http://<hub-ip>:4444\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait\nDESCRIPTION: This snippet demonstrates how to set an implicit wait in Selenium.  The `implicitlyWait` (Java/Kotlin/JavaScript) or `implicitly_wait` (Python/Ruby) or `Manage().Timeouts().ImplicitWait` (C#) method sets the amount of time the driver should wait when searching for an element if it is not immediately present.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10))\n```\n\n----------------------------------------\n\nTITLE: Getting All Options in CSharp\nDESCRIPTION: Demonstrates how to retrieve all options from a Select element in C#. It uses the Options property to return a list of IWebElements representing the options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nReadOnlyCollection<IWebElement> options = select.Options;\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Binary Location\nDESCRIPTION: This code snippet shows how to specify the path to the Chrome binary to use a specific Chrome installation or a Chromium-based browser. This allows you to drive different Chromium-based browsers with ChromeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\noptions.binary = \"/path/to/chrome/binary\"\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel - Kotlin\nDESCRIPTION: This code snippet demonstrates how to scroll to a specific web element using Selenium's Actions API and Wheel class in Kotlin. It takes a WebElement as input and scrolls the viewport until the bottom of the element is at the bottom of the screen. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.name(\"cheese\"))\nActions(driver)\n  .scrollToElement(element)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy with C#\nDESCRIPTION: This C# code snippet demonstrates how to configure a proxy in Selenium using ChromeOptions. It creates a Proxy object, sets the kind, disables auto-detection, sets the SSL proxy address, and assigns the Proxy object to the options. This configures Selenium to use the specified proxy server for all traffic.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_51\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\npublic class ProxyTest{\npublic static void Main() {\nChromeOptions options = new ChromeOptions();\nProxy proxy = new Proxy();\nproxy.Kind = ProxyKind.Manual;\nproxy.IsAutoDetect = false;\nproxy.SslProxy = \"<HOST:PORT>\";\noptions.Proxy = proxy;\noptions.AddArgument(\"ignore-certificate-errors\");\nIWebDriver driver = new ChromeDriver(options);\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/\");\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's Select class, specifically by its index (position) within the list of options. The `selectByIndex()` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\nselect.selectByIndex(2)\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Status - Ruby\nDESCRIPTION: Demonstrates how to check if a web element is enabled on a webpage using Ruby and Selenium WebDriver. The `enabled?` method returns a boolean indicating whether the element is enabled. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nexpect(driver.find_element(name: 'button_input').enabled?).to be false\n```\n\n----------------------------------------\n\nTITLE: Performing Actions in Selenium BiDi (Java)\nDESCRIPTION: This snippet demonstrates how to perform actions using Selenium's BiDirectional API in Java.  It requires Selenium version 4.17 or later. The code sends a series of pointer events to simulate user interaction.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/input.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nnew Actions(driver)\n  .moveToElement(element, 10, 5)\n  .clickAndHold()\n  .moveByOffset(15, 20)\n  .release()\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Get New Session Queue Requests\nDESCRIPTION: Retrieves the pending new session requests in the Selenium Grid's session queue. Returns the total number of requests in the queue. Requires queue URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://localhost:4444/se/grid/newsessionqueue/queue'\n```\n\n----------------------------------------\n\nTITLE: Setting Page Size using PrintOptions in Java\nDESCRIPTION: This code snippet demonstrates how to set the page size to A4 using the PrintOptions class in Java. The `setPageSize()` method is used to specify the desired page size.  The `getPageSize()` is used to confirm the setting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setPageSize(\"A4\");\n\nassertThat(printOptions.getPageSize()).isEqualTo(\"A4\");\n```\n\n----------------------------------------\n\nTITLE: Getting All Options from Select in Selenium\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of all options available in a <select> element using Selenium WebDriver. The `Options` property is used to obtain the list of WebElement objects representing the options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\nvar options = select.Options;\n```\n\n----------------------------------------\n\nTITLE: Running Hub with session timeout, port, and tracing configuration\nDESCRIPTION: This example demonstrates how to start a Selenium Grid hub, set the session request timeout to 500 seconds, configure the port to 3333, and disable tracing. It shows the use of command-line flags to configure different parameters.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar hub --session-request-timeout 500 --port 3333 --tracing false\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium JavaScript\nDESCRIPTION: This snippet demonstrates how to check if a disabled option can be selected in JavaScript. It attempts to select a disabled option and asserts that an exception is thrown. Requires Selenium 4.5 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait expect(async () => {\n  await select.selectByVisibleText('disabled');\n}).rejects.toThrow(Error);\n```\n\n----------------------------------------\n\nTITLE: Check Element Display Selenium CSharp\nDESCRIPTION: This C# code snippet shows how to check if an element is displayed using Selenium WebDriver. It navigates to a web page and then verifies the display status of the identified element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/inputs.html\");\nIWebElement element = driver.FindElement(By.Name(\"email_input\"));\n\nAssert.That(element.Displayed, Is.True);\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Location in CSharp\nDESCRIPTION: Illustrates how to set the driver location in C#. This is helpful when the driver isn't in the default PATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.en.md#_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\nvar service = ChromeDriverService.CreateDefaultService(\"/path/to/chromedriver\");\n```\n\n----------------------------------------\n\nTITLE: Move By Offset from Element\nDESCRIPTION: Moves the mouse to the center point of the element, and then moves by the specified offset. It requires a WebDriver instance and a target WebElement that must be in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_45\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(:id, 'clickable')\n@driver.action.move_to(element, x: 10, y: 20).perform\n```\n\n----------------------------------------\n\nTITLE: Adding Virtual Authenticator in C#\nDESCRIPTION: This code snippet demonstrates how to add a virtual authenticator to the WebDriver in C# using the VirtualAuthenticatorOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nIDevTools devTools = ((IHasDevTools)driver).GetDevTools();\nDevToolsSession session = devTools.GetDevToolsSession();\nVirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions()\n{\n    ProtocolType = Protocol.Ctap2\n};\nawait session.WebAuthn.AddVirtualAuthenticatorAsync(options);\n\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - Selenium WebDriver - Kotlin\nDESCRIPTION: This snippet sets the browser window's position to (0, 0) using Selenium WebDriver in Kotlin, effectively moving it to the top-left corner of the screen. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_34\n\nLANGUAGE: Kotlin\nCODE:\n```\n// 将窗口移动到主显示器的左上角\ndriver.manage().window().position = Point(0,0)\n```\n\n----------------------------------------\n\nTITLE: Open a tab with a reference browsing context in Java\nDESCRIPTION: This snippet demonstrates how to open a new tab with a reference browsing context using WebDriver BiDi in Java. It creates a new tab based on an existing top-level browsing context. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(driver, null);\nString id = browsingContext.getId();\n\nBrowsingContext newBrowsingContext = new BrowsingContext(driver, id, BrowsingContext.TypeHint.TAB);\nString newId = newBrowsingContext.getId();\n```\n\n----------------------------------------\n\nTITLE: Releasing Actions in Browsing Context - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates releasing actions within a browsing context using Selenium's BiDi API.  It releases all actions. Requires Selenium 4.17 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/input.pt-br.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.execute(input.release(context, actions));\n```\n\n----------------------------------------\n\nTITLE: Switching Context in Firefox with Selenium (Ruby)\nDESCRIPTION: This snippet demonstrates how to switch context in Firefox using Selenium WebDriver in Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\n@driver.execute_script('window.context = \"CHROME\"')\n```\n\n----------------------------------------\n\nTITLE: Clear Element with Selenium WebDriver in CSharp\nDESCRIPTION: This CSharp code snippet demonstrates how to locate an element by name and clear its content using Selenium WebDriver. It requires a WebDriver instance already initialized and a web page loaded. The element must be editable and resettable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/inputs.html\");\nIWebElement element = driver.FindElement(By.Name(\"email_input\"));\nelement.Clear();\n\n```\n\n----------------------------------------\n\nTITLE: Java Selenium Manager Usage (With)\nDESCRIPTION: This Java code snippet shows how to use Selenium Manager for ChromeDriver setup.  Selenium Manager automatically handles the driver discovery and setup. This simplifies the process, removing the need to manually specify the driver path.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.ja.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\nWebDriver driver = new ChromeDriver(options);\ndriver.get(\"https://www.selenium.dev/\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - Selenium WebDriver - C#\nDESCRIPTION: This snippet retrieves the x and y coordinates of the top-left corner of the browser window using the Selenium WebDriver API in C#. It demonstrates accessing each coordinate individually and storing the position in a Point object. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\n// 分别获取每个尺寸\nint x = driver.Manage().Window.Position.X;\nint y = driver.Manage().Window.Position.Y;\n\n// 或者存储尺寸并在以后查询它们\nPoint position = driver.Manage().Window.Position;\nint x1 = position.X;\ny1 = position.Y;\n```\n\n----------------------------------------\n\nTITLE: Capturing JavaScript Exceptions in C#\nDESCRIPTION: This C# snippet demonstrates capturing Javascript Exceptions using Chrome DevTools Protocol (CDP) with Selenium.  It requires the Selenium WebDriver and Chrome driver.  The code attaches to the `LogEntryAdded` event filtering to those of javascript exceptions and outputs the error messages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.en.md#_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\n[Test]\npublic async Task CanListenToJsExceptions()\n{\n    await driver.GoToUrl(\"https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html\");\n    var tcs = new TaskCompletionSource<ConsoleEntry>();\n```\n\n----------------------------------------\n\nTITLE: Get Active Element Attribute in Selenium WebDriver - Python\nDESCRIPTION: This Python code retrieves an attribute from the currently active element using Selenium WebDriver. It navigates to Google, types \"webElement\" into the search box (making it the active element), and then retrieves the 'title' attribute of the active element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Chrome()\ndriver.get(\"https://www.google.com\")\ndriver.find_element(By.CSS_SELECTOR, '[name=\"q\"]').send_keys(\"webElement\")\n\n    # Get attribute of current active element\nattr = driver.switch_to.active_element.get_attribute(\"title\")\nprint(attr)\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Binary Location\nDESCRIPTION: This code snippet demonstrates how to set the binary location of the Firefox browser. This is useful when you want to use a specific version of Firefox, such as Firefox Nightly, instead of the default installation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_12\n\nLANGUAGE: CSharp\nCODE:\n```\noptions.BinaryLocation = \"/Applications/Firefox Nightly.app/Contents/MacOS/firefox\";\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element with Selenium (Kotlin)\nDESCRIPTION: This Kotlin code snippet shows how to scroll to a specific element to make it visible using Selenium's Actions API. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"id-of-element\"))\nActions(driver)\n    .scrollToElement(element)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Java - Starting a Session with Basic Authentication\nDESCRIPTION: Shows a Java example of how to start a Selenium session with basic authentication credentials when the Grid is protected with a username and password. It uses the `ClientConfig` and `UsernameAndPassword` classes to set up the authentication.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.pt-br.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nClientConfig clientConfig = ClientConfig.defaultConfig()\n  .baseUrl(new URL(\"http://localhost:4444\"))\n  .authenticateAs(new UsernameAndPassword(\"admin\", \"myStrongPassword\"));\nHttpCommandExecutor executor = new HttpCommandExecutor(clientConfig);\nRemoteWebDriver driver = new RemoteWebDriver(executor, new ChromeOptions());\n```\n\n----------------------------------------\n\nTITLE: Simulating Network Conditions in Python\nDESCRIPTION: This Python code shows how to simulate various network conditions using the Edge DevTools protocol.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ndevtools = driver.devtools\ndevtools.send(Network.enable())\ndevtools.send(Network.emulate_network_conditions(\n    offline=False, latency=150, download_throughput=2500, upload_throughput=2500))\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Viewport Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse cursor to a specific offset from the top-left corner of the current viewport using Selenium WebDriver. The action is performed using the `moveByOffset` method of the Actions class, and it's available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_48\n\nLANGUAGE: Java\nCODE:\n```\nnew Actions(driver)\n  .moveByOffset(15, 20)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Execute JavaScript - Selenium\nDESCRIPTION: This Java snippet demonstrates how to execute JavaScript code within the current browser context using Selenium WebDriver. It finds an element by name, clicks it using JavaScript, retrieves its innerText, and executes a console log statement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_82\n\nLANGUAGE: Java\nCODE:\n```\n    //Creating the JavascriptExecutor interface object by Type casting\n      JavascriptExecutor js = (JavascriptExecutor)driver;\n    //Button Element\n      WebElement button =driver.findElement(By.name(\"btnLogin\"));\n    //Executing JavaScript to click on element\n      js.executeScript(\"arguments[0].click();\", button);\n    //Get return value from script\n      String text = (String) js.executeScript(\"return arguments[0].innerText\", button);\n    //Executing JavaScript directly\n      js.executeScript(\"console.log('hello world')\");\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes (Java)\nDESCRIPTION: This Java code snippet demonstrates how to add custom pointer event attributes to a Pen action in Selenium. It sets attributes like width, height, pressure, tangential pressure, tiltX, and tiltY to simulate more realistic pen behavior.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.ja.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nPen pen = new Pen(\"pen1\");\nMap<String, Object> attributes = new HashMap<>();\nattributes.put(\"width\", 18);\nattributes.put(\"height\", 20);\nattributes.put(\"pressure\", 0.4);\nattributes.put(\"tangentialPressure\", -0.8);\nattributes.put(\"tiltX\", 70);\nattributes.put(\"tiltY\", -60);\n\nWebElement element = driver.findElement(By.id(\"example\"));\n\nnew Actions(driver)\n  .moveToElement(element)\n  .tick(pen.createPointerMove(Duration.ofMillis(1), PointerInput.Origin.fromElement(element), 0, 0, attributes))\n  .tick(pen.createPointerDown(PointerInput.MouseButton.LEFT.asArg()))\n  .tick(pen.createPointerUp(PointerInput.MouseButton.LEFT.asArg()))\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to Normal in Java\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'normal' in Java. The WebDriver waits until the 'load' event fires, meaning all resources are downloaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setPageLoadStrategy(PageLoadStrategy.NORMAL);\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluent API in GoogleSearchPage with Java\nDESCRIPTION: This code shows the implementation of a GoogleSearchPage class that extends a BasePage and uses a Fluent API.  The setSearchString method returns the GoogleSearchPage instance, enabling method chaining.  It depends on Selenium WebDriver and WebDriverWait for element handling and waiting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/consider_using_a_fluent_api.en.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class BasePage {\n    protected WebDriver driver;\n\n    public BasePage(WebDriver driver) {\n        this.driver = driver;\n    }\n}\n\npublic class GoogleSearchPage extends BasePage {\n    public GoogleSearchPage(WebDriver driver) {\n        super(driver);\n        // Generally do not assert within pages or components.\n        // Effectively throws an exception if the lambda condition is not met.\n        new WebDriverWait(driver, Duration.ofSeconds(3)).until(d -> d.findElement(By.id(\"logo\")));\n    }\n\n    public GoogleSearchPage setSearchString(String sstr) {\n        driver.findElement(By.id(\"gbqfq\")).sendKeys(sstr);\n        return this;\n    }\n\n    public void clickSearchButton() {\n        driver.findElement(By.id(\"gbqfb\")).click();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset Selenium\nDESCRIPTION: This code snippet demonstrates how to perform a drag and drop operation by a specified offset using Selenium WebDriver.  The action starts with a click-and-hold on the source element, then moves the mouse by the given offset, and finally releases the mouse button. It is available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_70\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst draggable = await driver.findElement(By.id('draggable'));\nawait driver.actions().dragAndDrop(draggable, { x: 100, y: 50 }).perform();\n```\n\n----------------------------------------\n\nTITLE: Call function in sandbox (JavaScript)\nDESCRIPTION: This JavaScript snippet showcases calling a function within a sandbox using Selenium BiDi. It first creates a sandbox within a browsing context and then calls a simple function inside that sandbox, asserting that the returned value is 1.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('call function in sandbox', async () => {\n    let browsingContext = await getBrowsingContext(driver);\n\n    let sandbox = await session.execute({\n      method: 'script.createSandbox',\n      params: { browsingContext: browsingContext.context },\n    });\n\n    let result = await session.execute({\n      method: 'script.callFunction',\n      params: {\n        functionDeclaration: '() => 1',\n        target: { sandbox: sandbox.result.sandbox },\n        arguments: [],\n      },\n    });\n\n    expect(result.result.result.value).toBe(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Get all realms (JavaScript)\nDESCRIPTION: This JavaScript code shows how to get all realms using Selenium BiDi by calling the `script.getRealms` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n    let allRealms = await session.execute({ method: 'script.getRealms', params: {} });\n```\n\n----------------------------------------\n\nTITLE: Listen for Message events (JavaScript)\nDESCRIPTION: This Javascript snippet demonstrates how to listen for `script.message` events in JavaScript using Selenium BiDi.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('message event', async () => {\n    let browsingContext = await getBrowsingContext(driver);\n\n    let handle = await session.subscribe({\n      events: ['script.message']\n    });\n\n    await driver.executeScript('console.log(\"Hello, world!\")');\n\n    let message = await handle.once('script.message');\n\n    expect(message.realm).toBeDefined();\n\n    await session.unsubscribe(handle);\n  });\n```\n\n----------------------------------------\n\nTITLE: Realm Destroyed Event Handler - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to listen for the 'script.realmDestroyed' event using Selenium's BiDi API. It logs information about the destroyed realm to the console. The example creates a realm, navigates to a URL, and then closes the browser window, triggering the realm destruction event.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n    await bidi.script.listen(\n      { event: 'script.realmDestroyed' },\n      async (event, context) => {\n        expect(event.realm).toBeDefined();\n        console.log(event.realm);\n      }\n    );\n\n    await driver.get('https://www.selenium.dev/selenium/web/blank.html');\n    await driver.close();\n```\n\n----------------------------------------\n\nTITLE: Adding a Credential in Python\nDESCRIPTION: This Python code adds a new credential to the virtual authenticator using the `add_credential` method. The credential parameters include the Relying Party ID, User ID, and the Public Key Credential Type.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndevtools.security.add_credential(Credential('rp', 'user', PublicKeyCredentialType.PUBLIC_KEY))\n```\n\n----------------------------------------\n\nTITLE: Continue Auth Required Request Without Credentials in Java\nDESCRIPTION: This Java code shows how to continue a request blocked at the authRequired phase without providing credentials. It calls Network.continueRequest with an empty ContinueRequestParameters.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nNetwork.addIntercept(devTools, Pattern.compile(\".*\"),\n        new AddInterceptParameters().withPhase(Event.AUTH_REQUIRED))\n    .then(interceptId -> devTools.addListener(Network.authRequired, req -> {\n      Network.continueRequest(devTools, req.getEvent().getRequest().getRequestId(),\n          new ContinueRequestParameters());\n    }));\n```\n\n----------------------------------------\n\nTITLE: Working with Firefox Profiles - Java\nDESCRIPTION: Demonstrates how to create and use Firefox profiles in Java. This involves creating a `FirefoxProfile` object and assigning it to the `FirefoxOptions`. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxOptions options = new FirefoxOptions();\nFirefoxProfile profile = new FirefoxProfile();\n// Add custom preferences to the profile here\noptions.setProfile(profile);\nWebDriver driver = new FirefoxDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Base Page Class in Java\nDESCRIPTION: This Java code defines an abstract base page class that holds a WebDriver instance.  It provides a base for all page object classes to inherit from, allowing for common driver functionality.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.ja.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class BasePage {\n    protected WebDriver driver;\n\n    public BasePage(WebDriver driver) {\n        this.driver = driver;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Driver Service Log Console Output\nDESCRIPTION: This code snippet shows how to configure the GeckoDriverService to send log output to the console in Java, Python, and Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nservice = FirefoxService(log_output=sys.stdout)\n```\n\n----------------------------------------\n\nTITLE: Navigate Back with Selenium (Ruby)\nDESCRIPTION: This snippet illustrates how to navigate back in the browser's history using Selenium WebDriver in Ruby.  It calls the `back` method on the driver instance. This requires an initialized Selenium WebDriver instance and a browser history.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.navigate.back\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtualAuthenticatorOptions in JavaScript\nDESCRIPTION: This code demonstrates how to initialize VirtualAuthenticatorOptions in JavaScript for configuring a virtual authenticator with specific settings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  protocol: 'ctap2',\n  domain: 'localhost',\n  userVerified: true,\n  transport: ['usb']\n};\n```\n\n----------------------------------------\n\nTITLE: Context Click with Selenium\nDESCRIPTION: Moves to the center of an element and performs a right-click (context click). It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('clickable'));\nawait actions.contextClick(element).perform();\n```\n\n----------------------------------------\n\nTITLE: Customized Driver Configuration\nDESCRIPTION: Demonstrates how to configure customized drivers for a Selenium Node, enabling the use of specific browser versions or alternate browser builds like Firefox Nightly or Chrome Beta. This configuration disables driver detection and defines custom driver configurations with stereotypes and executable paths.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.en.md#_snippet_4\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\ndetect-drivers = false\n[[node.driver-configuration]]\nmax-sessions = 100\ndisplay-name = \"Firefox Nightly\"\nstereotype = \"{\\\"browserName\\\": \\\"firefox\\\", \\\"browserVersion\\\": \\\"93\\\", \\\"platformName\\\": \\\"MAC\\\", \\\"moz:firefoxOptions\\\": {\\\"binary\\\": \\\"/Applications/Firefox Nightly.app/Contents/MacOS/firefox-bin\\\"}}\"\n[[node.driver-configuration]]\ndisplay-name = \"Chrome Beta\"\nstereotype = \"{\\\"browserName\\\": \\\"chrome\\\", \\\"browserVersion\\\": \\\"94\\\", \\\"platformName\\\": \\\"MAC\\\", \\\"goog:chromeOptions\\\": {\\\"binary\\\": \\\"/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta\\\"}}\"\n[[node.driver-configuration]]\ndisplay-name = \"Chrome Dev\"\nstereotype = \"{\\\"browserName\\\": \\\"chrome\\\", \\\"browserVersion\\\": \\\"95\\\", \\\"platformName\\\": \\\"MAC\\\", \\\"goog:chromeOptions\\\": {\\\"binary\\\": \\\"/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev\\\"}}\"\nwebdriver-executable = '/path/to/chromedriver/95/chromedriver'\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its index (position) using Selenium WebDriver. The `select_by(:index, 0)` method is used to select the option based on its index, starting from 0.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_33\n\nLANGUAGE: Ruby\nCODE:\n```\nselect.select_by(:index, 0)\n```\n\n----------------------------------------\n\nTITLE: Maximize Window - Selenium WebDriver - Python\nDESCRIPTION: This snippet maximizes the browser window using the Selenium WebDriver API in Python. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_36\n\nLANGUAGE: Python\nCODE:\n```\ndriver.maximize_window()\n```\n\n----------------------------------------\n\nTITLE: Setting Strict File Interactability with Python\nDESCRIPTION: This Python code snippet demonstrates how to set the strict file interactability option. Setting it to True enables stricter checks when interacting with file input elements, particularly when using `send_keys` on hidden file upload fields.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\noptions.strict_file_interactability = True\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi - Java\nDESCRIPTION: This code snippet demonstrates how to enable the WebSocket URL capability in Java, which is required for BiDirectional (BiDi) communication in Selenium. By setting the 'webSocketUrl' capability to true in the browser options, you enable the WebSocket connection needed for bidirectional communication, allowing you to use the WebDriver BiDi protocol.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\noptions.setCapability(\"webSocketUrl\", true);\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - Ruby\nDESCRIPTION: Demonstrates how to set the browser window's size to a specific width and height in Ruby using Selenium WebDriver. The code uses the `resize_to` method to set the window dimensions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.manage.window.resize_to(1024,768)\n```\n\n----------------------------------------\n\nTITLE: Fragment Navigated Event in JavaScript\nDESCRIPTION: This code snippet demonstrates how to listen for the 'browsingContext.fragmentNavigated' event using Selenium WebDriver's BiDi API in JavaScript. It subscribes to the event and checks if the url contains the navigated fragment. Requires Selenium version 4.15.0 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('browsingContext.fragmentNavigated', async () => {\n  let context;\n  let url;\n\n  await driver.on('browsingContext.fragmentNavigated', (event) => {\n    context = event.context.context;\n    url = event.url;\n  });\n\n  await driver.get('https://www.selenium.dev/selenium4/demos/blank.html#fragment');\n\n  expect(url).toContain('#fragment');\n});\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element with Selenium (JavaScript)\nDESCRIPTION: This JavaScript code snippet illustrates how to scroll to a specified element to make it visible in the viewport.  It leverages Selenium's Actions API. Requires Selenium WebDriver and the appropriate setup for JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet element = await driver.findElement(By.id('id-of-element'));\nawait driver.actions().scroll(element).perform();\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element by Class Name - JavaScript\nDESCRIPTION: This snippet demonstrates how to find the first element with a specific class name using the Selenium WebDriver in JavaScript. It uses the `findElement` method with `By.className` to locate the element. The result is stored in a constant variable for further interaction. This is an asynchronous operation, so it uses `await`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst vegetable = await driver.findElement(By.className('tomatoes'));\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes (Kotlin)\nDESCRIPTION: This Kotlin code snippet demonstrates how to add custom pointer event attributes to a Pen action in Selenium. It sets attributes like width, height, pressure, tangential pressure, tiltX, and tiltY to simulate more realistic pen behavior.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.ja.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval pen = Pen(\"pen1\")\nval attributes = mapOf(\n    \"width\" to 18,\n    \"height\" to 20,\n    \"pressure\" to 0.4,\n    \"tangentialPressure\" to -0.8,\n    \"tiltX\" to 70,\n    \"tiltY\" to -60\n)\n\nval element = driver.findElement(By.id(\"example\"))\n\nActions(driver)\n    .moveToElement(element)\n    .tick(pen.createPointerMove(Duration.ofMillis(1), PointerInput.Origin.fromElement(element), 0, 0, attributes))\n    .tick(pen.createPointerDown(PointerInput.MouseButton.LEFT.asArg()))\n    .tick(pen.createPointerUp(PointerInput.MouseButton.LEFT.asArg()))\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookies in Kotlin with Selenium\nDESCRIPTION: This Kotlin code demonstrates setting both Strict and Lax SameSite cookies using Selenium. It navigates to a URL, creates two cookies with different SameSite attributes, adds them to the browser, and prints their SameSite values to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"http://www.example.com\")\n        val cookie = Cookie.Builder(\"key\", \"value\").sameSite(\"Strict\").build()\n        val cookie1 = Cookie.Builder(\"key\", \"value\").sameSite(\"Lax\").build()\n        driver.manage().addCookie(cookie)\n        driver.manage().addCookie(cookie1)\n        println(cookie.getSameSite())\n        println(cookie1.getSameSite())\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Element Rectangle Selenium Java\nDESCRIPTION: This Java code snippet demonstrates how to retrieve the dimensions and coordinates of an element using Selenium WebDriver. It fetches the rectangle of the element and asserts that its height and width are greater than zero.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\");\nWebElement element = driver.findElement(By.name(\"range_input\"));\nRect rect = element.getRect();\nassertThat(rect.getHeight()).isGreaterThan(0);\nassertThat(rect.getWidth()).isGreaterThan(0);\n```\n\n----------------------------------------\n\nTITLE: Switching to IFrame by Name/ID - Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to switch to an IFrame using its name or ID. It switches the driver's focus to the frame using the IFrame's ID 'buttonframe' and the name 'myframe', and then clicks the button inside the IFrame.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\n//Using the ID\ndriver.switchTo().frame(\"buttonframe\")\n\n//Or using the name instead\ndriver.switchTo().frame(\"myframe\")\n\n//Now we can click the button\ndriver.findElement(By.tagName(\"button\")).click()\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Tag Name in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate a web element using its HTML tag name in Selenium. It initializes a WebDriver instance and uses the `By.tagName()` method to find the first element with the specified tag.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_25\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.TagName(\"a\"));\n```\n\n----------------------------------------\n\nTITLE: Get Window Position: Selenium WebDriver (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates how to fetch the position of the browser window using Selenium WebDriver. It accesses the x and y coordinates individually, and also shows how to retrieve them through the Point object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_52\n\nLANGUAGE: kotlin\nCODE:\n```\n// Access each dimension individually\nval x = driver.manage().window().position.x\nval y = driver.manage().window().position.y\n\n// Or store the dimensions and query them later\nval position = driver.manage().window().position\nval x1 = position.x\nval y1 = position.y\n\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium (Ruby)\nDESCRIPTION: This Ruby snippet demonstrates sending keys to a specific element using Selenium's Actions API. It finds the element using a CSS selector, creates an Actions object, uses the send_keys_to_element method to send the string \"Selenium!\" to the element, and calls perform to execute the action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nelement = driver.find_element(css: 'selector')\nactions = driver.action\nactions.send_keys_to_element(element, 'Selenium!').perform\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox Driver with Options\nDESCRIPTION: This snippet demonstrates how to initialize a Firefox WebDriver instance with basic options. It showcases the common approach across multiple languages. The core functionality involves creating FirefoxOptions and using them to instantiate a RemoteWebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\noptions = FirefoxOptions()\ndriver = FirefoxDriver(options=options)\n```\n\n----------------------------------------\n\nTITLE: Transforming Response - Ruby\nDESCRIPTION: Demonstrates how to transform a response using Selenium and CDP in Ruby. It intercepts requests, modifies the content of the response body, and continues the request with the modified body.  It requires Selenium WebDriver and CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\n@driver.register(url: %r{simple_page}) do |event|\n  new_body = Base64.strict_encode64('Altered content')\n  @driver.execute_cdp 'Fetch.continueRequest', requestId: event['requestId'], body: new_body\nend\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method (Mocha): Selenium WebDriver (JavaScript)\nDESCRIPTION: This JavaScript snippet shows using Mocha's `after` hook to execute a function that quits the WebDriver instance after all tests in a suite have finished. The asynchronous `await driver.quit()` call ensures the browser is closed, releasing resources.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Example using Mocha\n * https://mochajs.org/#hooks\n */\nafter('Tear down', async function () {\n  await driver.quit();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - Normal - Kotlin\nDESCRIPTION: This Kotlin code sets the page load strategy to NORMAL. It then navigates to google.com and quits the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.PageLoadStrategy\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.chrome.ChromeOptions\n\nfun main() {\n  val chromeOptions = ChromeOptions()\n  chromeOptions.setPageLoadStrategy(PageLoadStrategy.NORMAL)\n  val driver = ChromeDriver(chromeOptions)\n  try {\n    driver.get(\"https://www.google.com\")\n  }\n  finally {\n    driver.quit()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window - Selenium WebDriver - Java\nDESCRIPTION: This snippet sets the browser window to fullscreen mode using the Selenium WebDriver API in Java.  This typically fills the entire screen, similar to pressing F11 in most browsers. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_47\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().window().fullscreen();\n```\n\n----------------------------------------\n\nTITLE: Setting Supporting Files Path - Python\nDESCRIPTION: This Python snippet demonstrates setting the path to the supporting files for the Internet Explorer Driver. It uses `IeOptions` and sets the `extract_path` property. The driver is then initialized with the configured options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\noptions = IeOptions()\noptions.extract_path = '/path/to/IEdriverServer.exe'\ndriver = Ie(options=options)\n```\n\n----------------------------------------\n\nTITLE: Capturing Console Logs in Java\nDESCRIPTION: This Java snippet demonstrates how to capture console logs using Selenium's CDP capabilities. It involves creating a DevTools instance, enabling network interception, and registering to receive console events. It retrieves console logs from the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.zh-cn.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver = new ChromeDriver(options);\n        devTools = driver.getDevTools();\n\n        devTools.createSessionIfNecessary();\n        devTools.send(Log.enable());\n        devTools.addListener(Log.entryAdded(),\n                logEntry -> {\n                    System.out.println(\"===============\");\n                    System.out.println(\"level: \" + logEntry.getLevel());\n                    System.out.println(\"text: \" + logEntry.getText());\n                    System.out.println(\"url: \" + logEntry.getUrl());\n                    System.out.println(\"===============\");\n                    allLogs.add(logEntry.getText());\n                });\n        driver.get(\"https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html\");\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Class Name in Selenium (By Class)\nDESCRIPTION: This code snippet demonstrates how to locate a web element using its class name with the `By` class in Selenium.  It initializes a WebDriver and uses `By.className()` to locate an element with the class 'information'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_32\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.By;\n    WebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.className(\"information\"));\n```\n\n----------------------------------------\n\nTITLE: Listing Downloaded Files in Java\nDESCRIPTION: Lists the downloaded files for a RemoteWebDriver session in Java.  It retrieves the list of file names that are currently present in the download directory for the specific session. This requires a RemoteWebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nList<String> files = ((HasDownloads) driver).getDownloadedFiles();\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL service with Docker Compose in YAML\nDESCRIPTION: This YAML file defines a PostgreSQL service using Docker Compose. It specifies the image, restart policy, environment variables for user, password, and database name, port mapping, and volume mapping to initialize the database with the SQL script. This setup provides a containerized PostgreSQL instance for Selenium Grid session persistence.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.ja.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3.8'\nservices:\n  db:\n    image: postgres:9.6-bullseye\n    restart: always\n    environment:\n      - POSTGRES_USER=seluser\n      - POSTGRES_PASSWORD=seluser\n      - POSTGRES_DB=selenium_sessions\n    ports:\n      - \"5432:5432\"\n    volumes:\n    - ./init.sql:/docker-entrypoint-initdb.d/init.sql\n```\n\n----------------------------------------\n\nTITLE: Using Safari Technology Preview (Java)\nDESCRIPTION: This code snippet configures the SafariOptions to use the Safari Technology Preview browser in Java by setting the browser binary path.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.zh-cn.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nSafariOptions options = new SafariOptions();\noptions.setBinary(new File(\"/Applications/Safari Technology Preview.app/Contents/MacOS/Safari Technology Preview\"));\n```\n\n----------------------------------------\n\nTITLE: Removing Credential in C#\nDESCRIPTION: This C# code snippet removes a credential from the authenticator based on the credential ID. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_29\n\nLANGUAGE: CSharp\nCODE:\n```\nawait session.SendCommand(new RemoveCredentialCommandSettings()\n{\n    CredentialId = CREDENTIAL_ID\n});\n```\n\n----------------------------------------\n\nTITLE: Execute Script in Selenium\nDESCRIPTION: This code executes JavaScript code within the context of the browser using Selenium WebDriver. It demonstrates how to execute JavaScript to capture the innerText of an element and execute an alert.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_91\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Stores the header element\nval header = driver.findElement(By.cssSelector(\"h1\"))\n\n// Get return value from script\nval result = driver.executeScript(\"return arguments[0].innerText\", header)\n\n// Executing JavaScript directly\ndriver.executeScript(\"alert('hello world')\")\n```\n\n----------------------------------------\n\nTITLE: Continue Auth Request with Credentials - Selenium BiDi - Java\nDESCRIPTION: This Java snippet demonstrates how to continue a request blocked at the 'authRequired' phase using Selenium's BiDi API.  It sets credentials to proceed with the request. Requires Selenium 4.18 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nNetwork network = driver.getDevTools().getDomains().network();\nString intercept = network.addIntercept(\"https://example.com\",\n    new AddInterceptParameters()).getId();\nnetwork.onAuthRequired(event -> {\n  network.continueRequest(new ContinueParameters(event.getRequest().getRequestId(),\n      Optional.of(new Auth(Username.of(\"test\"), Password.of(\"test\")))));\n});\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Viewport in Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse pointer from the upper-left corner of the current viewport by a specified offset using Selenium WebDriver. It utilizes the `MoveByOffset` method to achieve this. No specific dependencies beyond the Selenium WebDriver library are needed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnew Actions(driver)\n    .MoveByOffset(30, 40)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Sending Logs to Console Output in JavaScript\nDESCRIPTION: This code snippet demonstrates how to send Selenium logs to the console output in JavaScript. This can be useful for debugging purposes. The logging object needs to be available.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlogging.installConsoleHandler()\n```\n\n----------------------------------------\n\nTITLE: Check Driver Version (Windows)\nDESCRIPTION: This command checks the version of the ChromeDriver executable on Windows, confirming it's accessible and working as expected.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.pt-br.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nchromedriver.exe --version\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver with Default Service - Python\nDESCRIPTION: This snippet demonstrates how to initialize a WebDriver instance using the default service in Python. The driver.quit() function ensures the browser closes after execution.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.ja.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Chrome()\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Using a Pen with Selenium - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to use the Pen class in Selenium to simulate a pen stylus interaction, focusing on moving the pen to a specific element. It requires Selenium 4.2 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'clickable')\n\npen = Selenium::WebDriver::Support::HasTouchScreen::Pen.new(@driver, 'pen1')\n\n@driver.action.move_to(element).tick(pen).perform\n```\n\n----------------------------------------\n\nTITLE: Retrieving JavaScript Exceptions using CDP - Python\nDESCRIPTION: This Python code snippet demonstrates how to retrieve JavaScript exceptions using Selenium's integration with Chrome DevTools Protocol (CDP). It requires Selenium WebDriver and CDP support in the Selenium version being used. The code is located at examples/python/tests/bidi/cdp/test_logs.py#L22-L23\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.pt-br.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# This example is located at examples/python/tests/bidi/cdp/test_logs.py#L22-L23\n```\n\n----------------------------------------\n\nTITLE: Setting Page Scale using PrintOptions in Java\nDESCRIPTION: This code snippet shows how to set the page scale using the PrintOptions class in Java. The `setScale()` method is used to specify the desired scale. The `getScale()` is used to confirm the setting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setScale(0.5);\n\nassertThat(printOptions.getScale()).isEqualTo(0.5);\n```\n\n----------------------------------------\n\nTITLE: Java Login Test with DSL\nDESCRIPTION: This Java code demonstrates how to use the loginAsUser DSL method within a test. It calls the method with specific credentials and then performs other actions using other DSL methods. This approach keeps the test code focused on the user's intent rather than the underlying UI interactions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/domain_specific_language.ja.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic void loginTest() {\n    loginAsUser(\"cbrown\", \"cl0wn3\");\n\n    // Now that we're logged in, do some other stuff--since we used a DSL to support\n    // our testers, it's as easy as choosing from available methods.\n    do.something();\n    do.somethingElse();\n    Assert.assertTrue(\"Something should have been done!\", something.wasDone());\n\n    // Note that we still haven't referred to a button or web control anywhere in this\n    // script...\n}\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium\nDESCRIPTION: Demonstrates how to perform a copy and paste action using Selenium's Actions API. It involves pressing and releasing control/command keys along with 'a', 'c', and 'v'. This example shows how to copy all text, and then paste it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nval element = driver.findElement(By.tagName(\"textarea\"))\nval selectAll = if (System.getProperty(\"os.name\").startsWith(\"Mac\")) Keys.COMMAND + \"a\" else Keys.CONTROL + \"a\"\nval copy = if (System.getProperty(\"os.name\").startsWith(\"Mac\")) Keys.COMMAND + \"c\" else Keys.CONTROL + \"c\"\nval paste = if (System.getProperty(\"os.name\").startsWith(\"Mac\")) Keys.COMMAND + \"v\" else Keys.CONTROL + \"v\"\nelement.sendKeys(\"Selenium\")\nelement.sendKeys(selectAll)\nelement.sendKeys(copy)\nelement.sendKeys(paste)\nelement.sendKeys(\"!\")\n```\n\n----------------------------------------\n\nTITLE: Minimize Window - Selenium\nDESCRIPTION: This snippet demonstrates how to minimize the current browser window using Selenium WebDriver. The exact behavior of this command is specific to the individual window manager. Requires Selenium 4 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_60\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().window().minimize();\n```\n\n----------------------------------------\n\nTITLE: Drain Node Directly\nDESCRIPTION: Drains a Selenium Grid node directly, preventing new sessions from being created and allowing existing sessions to complete before shutting down. Requires node URL and registration secret.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request POST 'http://localhost:5555/se/grid/node/drain' --header 'X-REGISTRATION-SECRET: <secret>'\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Exception Handler in WebDriver BiDi with Python\nDESCRIPTION: This code snippet demonstrates how to add a handler for JavaScript exceptions using WebDriver BiDi in Python.  It sets up a listener to capture and process JavaScript exception events from the browser. The code requires a WebDriver BiDi enabled browser session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.en.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nlog.add_javascript_exception_listener(browsing_context, print)\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to Eager in JavaScript\nDESCRIPTION: This snippet shows how to set the page load strategy to 'eager' in JavaScript using Selenium. WebDriver waits until the DOMContentLoaded event is fired.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nit('should wait for dom interactive', async () => {\n  let opts = {\n    pageLoadStrategy: 'eager'\n  };\n  let options = new Options(opts);\n  driver = await new Builder().withCapabilities(options).build();\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Title in Ruby\nDESCRIPTION: Retrieves the current page title using Selenium WebDriver in Ruby. The WebDriver instance must be initialized and pointed to the desired URL. The title is then asserted against the expected value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.get 'https://www.selenium.dev/selenium/web/web-form.html'\ntitle = driver.title\nexpect(title).to eq('Web form')\n```\n\n----------------------------------------\n\nTITLE: Calculating Test Execution Time with Selenium Grid\nDESCRIPTION: This snippet shows example calculations to demonstrate how Selenium Grid reduces overall test execution time by distributing tests across multiple nodes, allowing for parallel execution. The formula used is `Number of Tests * Average Test Time / Number of Nodes = Total Execution Time`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/applicability.zh-cn.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n15      *       45s        /        1        =      11m 15s   // Without Grid\n       15      *       45s        /        5        =      2m 15s    // Grid with 5 Nodes\n       15      *       45s        /        15       =      45s       // Grid with 15 Nodes\n      100      *       120s       /        15       =      13m 20s   // Would take over 3 hours without Grid\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Service Instance in Python\nDESCRIPTION: Shows how to start a driver with a default service instance in Python. The service class is initialized and passed to the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nservice = Service()\ndriver = webdriver.Chrome(service=service)\n```\n\n----------------------------------------\n\nTITLE: Comparing Color Objects\nDESCRIPTION: This snippet demonstrates how to directly compare a Color object (loginButtonBackgroundColour) with a predefined Color constant (HOTPINK) using the equals() method in Java, for asserting that the background color of a login button matches a specific color.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nassert loginButtonBackgroundColour.equals(HOTPINK);\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value - Ruby\nDESCRIPTION: This snippet demonstrates how to get a CSS property value of a web element using Selenium WebDriver in Ruby. It finds an element by ID and uses the css_value method to retrieve the value of the 'background-color' property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nlink = driver.find_element(id: 'namedColor')\nexpect(link.css_value('background-color')).to eq 'rgba(0, 0, 255, 1)'\n```\n\n----------------------------------------\n\nTITLE: Importing Color class for Selenium\nDESCRIPTION: This code snippet demonstrates how to import the Color class in different programming languages to use it with Selenium WebDriver. The Color class allows working with colors in web elements, such as converting and comparing them.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.support.Color\n```\n\n----------------------------------------\n\nTITLE: Scroll By Amount using Selenium Wheel Ruby\nDESCRIPTION: This snippet demonstrates how to scroll by a specific amount (deltaX and deltaY) using Selenium's Wheel actions in Ruby. Positive deltaX values scroll to the right, and positive deltaY values scroll down. Negative values scroll left and up respectively.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\n@driver.action.scroll_by(0, 100).perform\n```\n\n----------------------------------------\n\nTITLE: Minimize Window - Selenium WebDriver - Java\nDESCRIPTION: This snippet minimizes the browser window using the Selenium WebDriver API in Java. Minimizing typically hides the window in the system tray. Requires Selenium WebDriver dependency and Selenium 4 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_41\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().window().minimize();\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset in Java\nDESCRIPTION: This Java code snippet demonstrates moving the mouse by a relative offset from its current position. It utilizes the Actions class and requires a WebDriver instance to interact with the browser. The moveByOffset method takes x and y coordinates as parameters.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_54\n\nLANGUAGE: java\nCODE:\n```\nActions actions = new Actions(driver);\nactions.moveByOffset(30, -10).perform();\n```\n\n----------------------------------------\n\nTITLE: Call function in realm - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to call a function within a specific realm using its ID. It fetches realms associated with the browsing context and then calls the function.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('call function in a realm', async () => {\n    const browsingContext = await new BrowsingContext(driver, tabId);\n\n    let realms = await browsingContext.script.getRealms({context: browsingContext.context});\n\n    await browsingContext.script.callFunction({\n      functionDeclaration: '() => {return 1}',\n      target: {realm: realms[0].realm},\n      awaitPromise: true,\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Cancel Auth Required Request in JavaScript\nDESCRIPTION: This JavaScript code cancels a request that is blocked at the 'authRequired' phase using the Selenium BiDi API.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait bidiSession.network.cancelRequest({\n  requestId: event.request.requestId\n});\n```\n\n----------------------------------------\n\nTITLE: Remove Network Intercept - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to remove a network intercept previously added using Selenium BiDi. It requires the intercept ID to remove the specific intercept.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.removeNetworkInterceptor();\n```\n\n----------------------------------------\n\nTITLE: Click and Hold with Selenium\nDESCRIPTION: Moves the mouse to the center of an element and presses the left mouse button, useful for focusing an element. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"clickable\")\nactions = ActionChains(driver)\nactions.move_to_element(element).click_and_hold().perform()\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Safari Driver with Options (JavaScript)\nDESCRIPTION: This code snippet initializes the Safari Driver in JavaScript using SafariOptions, demonstrating how to set capabilities specific to the Safari browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.zh-cn.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { Builder, SafariOptions } = require('selenium-webdriver');\n\nlet options = new SafariOptions();\nlet driver = new Builder().forBrowser('safari').setSafariOptions(options).build();\n```\n\n----------------------------------------\n\nTITLE: Converting Colors to Formats for Assertion\nDESCRIPTION: This snippet demonstrates how to convert Color objects to different string formats (HEX, RGBA, RGB) and perform static validations using assertions in Ruby. It converts the login button's background color to different formats and verifies their values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_26\n\nLANGUAGE: Ruby\nCODE:\n```\nassert(login_button_background_colour.hex == '#ff69b4')\nassert(login_button_background_colour.rgba == 'rgba(255, 105, 180, 1)')\nassert(login_button_background_colour.rgb == 'rgb(255, 105, 180)')\n```\n\n----------------------------------------\n\nTITLE: Scroll By Amount using Selenium Wheel (Kotlin)\nDESCRIPTION: Scrolls the viewport by a specified amount in the x and y directions. Takes delta x and delta y values as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nActions(driver)\n  .scrollFromOrigin(WheelInput.Origin.viewport(), 20, 50)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Pausing Actions in Selenium (Ruby)\nDESCRIPTION: This code demonstrates how to pause between actions in Selenium using Ruby. It involves creating an `ActionBuilder` and adding pause actions to the sequence.  It requires a WebDriver instance and the ActionBuilder class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.zh-cn.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.action.pause(0.5).send_keys('First').pause(0.5).send_keys('Second').perform\n```\n\n----------------------------------------\n\nTITLE: Selenium Login with DSL - Java\nDESCRIPTION: This Java method implements a Domain Specific Language (DSL) for logging in a user. It takes a username and password as input, finds the relevant fields on the page, fills them out, and clicks the login button. It then returns an instance of the AccountPage, abstracting the underlying UI interactions from the test code. It assumes the `driver` object and the `AccountPage` class are pre-defined and available.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/domain_specific_language.en.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Takes a username and password, fills out the fields, and clicks \"login\".\n * @return An instance of the AccountPage\n */\npublic AccountPage loginAsUser(String username, String password) {\n  WebElement loginField = driver.findElement(By.id(\"loginField\"));\n  loginField.clear();\n  loginField.sendKeys(username);\n\n  // Fill out the password field. The locator we're using is \"By.id\", and we should\n  // have it defined elsewhere in the class.\n  WebElement passwordField = driver.findElement(By.id(\"password\"));\n  passwordField.clear();\n  passwordField.sendKeys(password);\n\n  // Click the login button, which happens to have the id \"submit\".\n  driver.findElement(By.id(\"submit\")).click();\n\n  // Create and return a new instance of the AccountPage (via the built-in Selenium\n  // PageFactory).\n  return PageFactory.newInstance(AccountPage.class);\n}\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium (Java)\nDESCRIPTION: This Java snippet uses Selenium's Actions API to send the keys \"Selenium!\" to the currently active element on the webpage. It creates an Actions object, uses the sendKeys method to input the string, and then calls perform() to execute the action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nActions actions = new Actions(driver);\nactions.sendKeys(\"Selenium!\").perform();\n```\n\n----------------------------------------\n\nTITLE: Customizing Wait - Ruby\nDESCRIPTION: This Ruby snippet demonstrates customizing a wait by rescuing specific exceptions. It sets a timeout and ignores `Selenium::WebDriver::Error::NoSuchElementError` during the wait.  This is useful when the element might not be immediately available and the code should retry until the timeout is reached.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.pt-br.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\nwait = Selenium::WebDriver::Wait.new(:timeout => 10, :ignore => Selenium::WebDriver::Error::NoSuchElementError)\nelement = wait.until { driver.find_element(:id => \"foo\") }\n```\n\n----------------------------------------\n\nTITLE: Running Standalone with max sessions and port configuration\nDESCRIPTION: This example shows how to start a Selenium Grid standalone server, configure the maximum number of sessions to 4, and set the port to 4444. It demonstrates the use of command-line flags for configuring the Grid.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar standalone --max-sessions 4 --port 4444\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value Selenium Python\nDESCRIPTION: This Python code snippet uses Selenium WebDriver to navigate to a webpage, locate an element, and retrieve its background color CSS value, asserting the background color style is rgba(0, 0, 0, 0).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/colorPage.html\")\nlink = driver.find_element(By.ID, \"namedColor\")\nassert link.value_of_css_property(\"background-color\") == \"rgba(0, 0, 0, 0)\"\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium (C#)\nDESCRIPTION: Demonstrates sending keys to a specific element using the Actions API in C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement input = driver.FindElement(By.TagName(\"input\"));\nActions actions = new Actions(driver);\nactions.SendKeys(input, \"text\")\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window in Selenium\nDESCRIPTION: This code puts the browser window into fullscreen mode using Selenium WebDriver, similar to pressing F11 in most browsers. This will fill the entire screen.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_71\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().window().fullscreen();\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Selenium Kotlin\nDESCRIPTION: This Kotlin code snippet uses Selenium WebDriver to navigate to a URL and retrieve the text of the element with the id 'justanotherlink'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_41\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Navigate to URL\ndriver.get(\"https://www.selenium.dev/selenium/web/linked_image.html\")\n\n// retrieves the text of the element\nval text = driver.findElement(By.id(\"justanotherlink\")).getText()\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window - Selenium\nDESCRIPTION: This snippet demonstrates how to set the browser window to fullscreen mode using Selenium WebDriver, similar to pressing F11 in most browsers.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_67\n\nLANGUAGE: Python\nCODE:\n```\ndriver.fullscreen_window()\n```\n\n----------------------------------------\n\nTITLE: Setting Log Truncation in Firefox with Selenium (Ruby)\nDESCRIPTION: This Ruby code snippet demonstrates how to disable log truncation in Firefox using Selenium. It sets the `log.truncate` preference to `false` within the Firefox options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\noptions['log.truncate'] = false\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to Eager in Kotlin\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'eager' in Kotlin. The WebDriver waits until the 'DOMContentLoaded' event fires.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.PageLoadStrategy\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.chrome.ChromeOptions\n\nfun main() {\n  val chromeOptions = ChromeOptions()\n  chromeOptions.setPageLoadStrategy(PageLoadStrategy.EAGER)\n  val driver = ChromeDriver(chromeOptions)\n  try {\n    driver.get(\"https://www.google.com\")\n  }\n  finally {\n    driver.quit()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Script Message Event - JavaScript\nDESCRIPTION: This snippet demonstrates how to listen for script message events using JavaScript and the WebDriver BiDi API. It utilizes the `script.on` method with the 'script.message' event to capture and process messages from the script. Requires a BiDi connection and event handling logic.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('message', async () => {\n  await connection.script.enable();\n  let callback = sinon.spy();\n  await connection.on('script.message', callback);\n  await driver.executeScript('window.dispatchEvent(new CustomEvent(\\'test\\', {detail: { test: \\'test\\'}}))');\n  await new Promise((resolve) => setTimeout(resolve, 500));\n\n  expect(callback).toHaveBeenCalledTimes(1);\n  const message = callback.getCall(0).args[0];\n  expect(message.channel).toBe('test');\n  expect(message.data.value.test).toBe('test');\n\n  await connection.script.disable();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting System Properties for Tracing in Java\nDESCRIPTION: Sets system properties required for enabling tracing in Java clients when using RemoteWebDriver.  This configuration specifies the Jaeger exporter and endpoint for tracing HTTP requests between the client, Selenium Grid, and WebDriver. Includes the name of the service.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_27\n\nLANGUAGE: Java\nCODE:\n```\nSystem.setProperty(\"otel.traces.exporter\", \"jaeger\");\nSystem.setProperty(\"otel.exporter.jaeger.endpoint\", \"http://localhost:14250\");\nSystem.setProperty(\"otel.resource.attributes\", \"service.name=selenium-java-client\");\n\nImmutableCapabilities capabilities = new ImmutableCapabilities(\"browserName\", \"chrome\");\n\nWebDriver driver = new RemoteWebDriver(new URL(\"http://www.example.com\"), capabilities);\n\ndriver.get(\"http://www.google.com\");\n\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Node (Shell)\nDESCRIPTION: This command starts a Node component of Selenium Grid, which registers with the Hub and provides browser instances for running tests.  The Node detects available drivers from the system PATH.  It's assumed the Node and Hub are on the same machine.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.en.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node\n```\n\n----------------------------------------\n\nTITLE: Updating Selenium Package via Pip - Shell\nDESCRIPTION: This shell command illustrates how to update the Selenium package in Python using pip to version 4.4.3.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\npip install selenium==4.4.3\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options in Python\nDESCRIPTION: Demonstrates how to retrieve selected options from a Select element in Python. It uses the all_selected_options attribute to return a list of WebElements representing the selected options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nselected_options = select.all_selected_options\n```\n\n----------------------------------------\n\nTITLE: Creating a Temporary Credential in Python\nDESCRIPTION: This snippet demonstrates creating a non-resident (temporary) credential using the virtual authenticator in Python.  It calls add_credential with empty rpId and user ID values, and PublicKeyCredentialType.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndevtools.security.add_credential(Credential(\"\", \"\", PublicKeyCredentialType.PUBLIC_KEY))\n```\n\n----------------------------------------\n\nTITLE: Initializing Chrome Driver with Default Options\nDESCRIPTION: This code snippet demonstrates how to initialize a Chrome browser session using Selenium with default options in different programming languages. It showcases the basic setup required to start a Chrome browser instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = new chrome.Options();\nlet service = new chrome.ServiceBuilder(pathToChromeDriver).build();\nlet driver = await new Builder()\n  .setChromeOptions(options)\n  .setService(service)\n  .forBrowser('chrome')\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Getting Page Title\nDESCRIPTION: This snippet demonstrates how to retrieve the title of the currently loaded web page using Selenium. The `title` method returns a string containing the page title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\ntitle = driver.title\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL Container with Docker Compose\nDESCRIPTION: This bash command starts the PostgreSQL container defined in the docker-compose.yml file in detached mode. The container runs in the background, allowing other commands to be executed. This command is used to launch the database needed for the Selenium Grid session map.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.en.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Disable Chrome Build Check - JavaScript\nDESCRIPTION: This snippet is a placeholder as there is no code provided. The goal is to disable Chrome build check by setting ChromeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\n// No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Call function in browsing context (JavaScript)\nDESCRIPTION: This JavaScript snippet illustrates how to call a function in a browsing context using Selenium BiDi. It connects to the WebDriver BiDi, navigates to a page, and then calls a function defined in the browsing context using `script.callFunction`. The browsing context ID is retrieved and used to target the function call.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('call function in browsing context', async () => {\n    let browsingContext = await getBrowsingContext(driver);\n\n    await driver.get(Pages.formPage);\n\n    let realm = await session.execute(\n      {\n        method: 'script.evaluate',\n        params: {\n          expression: `function hello(arg) { return 'Hello ' + arg; }`,\n          target: { browsingContext: browsingContext.context },\n        },\n      }\n    );\n\n    let result = await session.execute({\n      method: 'script.callFunction',\n      params: {\n        functionDeclaration: 'hello',\n        target: { realm: realm.result.realm },\n        arguments: [\n          {\n            type: 'string',\n            value: 'BiDi!',\n          },\n        ],\n      },\n    });\n\n    expect(result.result.result.value).toBe('Hello BiDi!');\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting up WebDriver in JavaScript\nDESCRIPTION: This code snippet demonstrates setting up a WebDriver instance using ChromeDriver in JavaScript. It initializes the driver and navigates to a specific URL using Mocha's `beforeEach` hook.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst {Builder, Browser, By, Key, until} = require('selenium-webdriver');\nconst assert = require('assert');\n\ndescribe('Running tests in Selenium', function () {\n    let driver;\n\n    beforeEach(async function () {\n        driver = await new Builder().forBrowser(Browser.CHROME).build();\n        await driver.get('https://www.selenium.dev');\n    });\n```\n\n----------------------------------------\n\nTITLE: Disable Chrome Build Check - Java\nDESCRIPTION: This snippet demonstrates how to disable the Chrome build check in Java using ChromeOptions. Disabling the build check allows the driver to work with potentially mismatched Chrome versions, but is an unsupported configuration.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_41\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setCapability(\"chromeOptions\", ImmutableMap.of(\"w3c\", false));\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins using PrintOptions in C#\nDESCRIPTION: This code snippet demonstrates how to set the page margins using the PrintOptions class in C#. The `Margin` property is set with desired margin sizes. The `Margin` property is retrieved and confirmed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.Margin = new PrintMargin { Top = 10, Bottom = 20, Left = 30, Right = 40, Units = PrintOptionsUnits.Millimeters };\n\nAssert.AreEqual(10, printOptions.Margin.Top);\nAssert.AreEqual(PrintOptionsUnits.Millimeters, printOptions.Margin.Units);\n```\n\n----------------------------------------\n\nTITLE: Context Click with Selenium\nDESCRIPTION: Moves to the center of an element and performs a right-click (context click). It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"clickable\"));\nActions actions = new Actions(driver);\nactions.ContextClick(element).Perform();\n```\n\n----------------------------------------\n\nTITLE: Creating a Resident Credential in JavaScript\nDESCRIPTION: This JavaScript code creates a resident credential using Selenium and DevTools. It is configured with an ID, public key, algorithm, sign count, userId, and username. It depends on Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait devtools.addCredential({\n  id: btoa(String.fromCharCode(...crypto.getRandomValues(new Uint8Array(16)))),\n  publicKey: btoa(String.fromCharCode(...crypto.getRandomValues(new Uint8Array(32)))),\n  algorithm: -7,\n  signCount: 0,\n  userId: btoa(String.fromCharCode(...crypto.getRandomValues(new Uint8Array(16)))),\n  userName: 'test'\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Driver with Options - Python\nDESCRIPTION: This Python snippet showcases how to initialize a WebDriver instance using ChromeOptions.  It configures the browser before starting the session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Chrome(options=options)\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Port - CSharp\nDESCRIPTION: This C# code snippet shows how to set the port number that the ChromeDriver service should use.  Useful when needing to avoid conflicts on the default port.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.ja.md#_snippet_10\n\nLANGUAGE: CSharp\nCODE:\n```\nvar service = ChromeDriverService.CreateDefaultService();\nservice.Port = 1234;\n```\n\n----------------------------------------\n\nTITLE: Retrieving JavaScript Exceptions using CDP - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to retrieve JavaScript exceptions using Selenium's integration with Chrome DevTools Protocol (CDP). It requires Selenium WebDriver and CDP support in the Selenium version being used. The code is located at examples/ruby/spec/bidi/cdp/logging_spec.rb#L26\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.pt-br.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# This example is located at examples/ruby/spec/bidi/cdp/logging_spec.rb#L26\n```\n\n----------------------------------------\n\nTITLE: Set Viewport Size in Java\nDESCRIPTION: This code snippet shows how to set the viewport size using Selenium WebDriver's BiDi API in Java. It creates a `Viewport` object with the desired width and height and then sets the viewport using the `setViewport` method of the `BrowsingContext` class. Requires Selenium version 4.14.1 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_34\n\nLANGUAGE: Java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(((HasDevTools) driver).getDevTools(),\n                                         ((RemoteWebDriver) driver).getWindowHandle());\n\n    browsingContext.setViewport(new Viewport(640, 480));\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi: Setting WebSocket URL in Ruby\nDESCRIPTION: This code snippet shows how to enable the WebSocket connection for bidirectional communication in Ruby by setting the `web_socket_url` to `true` in options. This allows full utilization of the WebDriver BiDi protocol features.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.ja.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.web_socket_url = true\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Slot Information for All Sessions\nDESCRIPTION: This curl command retrieves the slot information for each session in the grid, including the ID, stereotype, and last started time of the slot.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.pt-br.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ sessionsInfo { sessions { id, slot { id, stereotype, lastStarted } } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Getting Page Title with Selenium\nDESCRIPTION: This snippet shows how to retrieve the title of the currently loaded web page using the WebDriver's `getTitle` (or equivalent) method. It returns a string representing the title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.zh-cn.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nString title = driver.getTitle();\n```\n\nLANGUAGE: Python\nCODE:\n```\ntitle = driver.title\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nstring title = driver.Title;\n```\n\nLANGUAGE: Ruby\nCODE:\n```\ntitle = driver.title\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet title = await driver.getTitle();\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nval title = driver.title\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Location - Ruby\nDESCRIPTION: This snippet shows how to specify the driver location using Ruby.  It creates a `Selenium::WebDriver::Service` object and passes the path to the driver executable. Requires the selenium-webdriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.pt-br.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.chrome(path: '/path/to/chromedriver')\n```\n\n----------------------------------------\n\nTITLE: Setting User Verified in Python\nDESCRIPTION: Sets whether the authenticator will simulate success or failure in user verification using Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nauthenticator.set_user_verified(True)\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Title with Selenium\nDESCRIPTION: This snippet retrieves the title of the current webpage loaded in the browser. It uses the `title` method of the WebDriver instance.  Dependencies include a properly initialized WebDriver and a loaded webpage.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\ntitle = driver.title\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to retrieve the dimensions (width and height) of the browser window using Selenium WebDriver. It shows two approaches: accessing each dimension individually and storing the dimensions for later use.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nAccess each dimension individually\n```\n\nLANGUAGE: javascript\nCODE:\n```\n(or) store the dimensions and query them later\n```\n\n----------------------------------------\n\nTITLE: Chrome Casting - Java\nDESCRIPTION: This snippet demonstrates how to drive Chrome Cast devices including sharing tabs using Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_47\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.addArguments(\"--load-extension=\" + EXTENSION_PATH);\nWebDriver driver = new ChromeDriver(options);\nCast devTools = driver.getDevTools().getDomains().cast();\ndevTools.startDesktopMirroring(\"screen\");\ndevTools.startTabMirroring(\"tab\");\n```\n\n----------------------------------------\n\nTITLE: Setting W3C Capabilities (After) - Java\nDESCRIPTION: This snippet demonstrates how to set capabilities in Selenium 4 for Java using FirefoxOptions and cloud:options to be compatible with W3C standards. It sets platformName, browserVersion, build, and name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxOptions browserOptions = new FirefoxOptions();\nbrowserOptions.setPlatformName(\"Windows 10\");\nbrowserOptions.setBrowserVersion(\"92\");\nMap<String, Object> cloudOptions = new HashMap<>();\ncloudOptions.put(\"build\", myTestBuild);\ncloudOptions.put(\"name\", myTestName);\nbrowserOptions.setCapability(\"cloud:options\", cloudOptions);\nWebDriver driver = new RemoteWebDriver(new URL(cloudUrl), browserOptions);\n```\n\n----------------------------------------\n\nTITLE: TOML Configuration Section Example\nDESCRIPTION: Shows the general structure of a TOML configuration file with sections, options, and values. Illustrates different data types for values, including strings, arrays, and booleans.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.pt-br.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[section1]\noption1=\"value\"\n\n[section2]\noption2=[\"value1\",\"value2\"]\noption3=true\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Status - JavaScript\nDESCRIPTION: This snippet demonstrates how to check if a web element is enabled on the page using Selenium WebDriver in JavaScript. It finds an element by name and uses the isEnabled() method to determine if it is enabled, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst buttonInput = await driver.findElement(By.name('button_input'))\nexpect(await buttonInput.isEnabled()).toBe(true)\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - Python\nDESCRIPTION: Demonstrates how to set the browser window's position (top-left corner) to a specific x and y coordinate in Python using Selenium WebDriver. The code directly calls the `set_window_position` method with the desired x and y coordinates as arguments.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n    # Move the window to the top left of the primary monitor\ndriver.set_window_position(0, 0)\n```\n\n----------------------------------------\n\nTITLE: Setting Strict File Interactability with Java\nDESCRIPTION: This Java code snippet shows how to configure strict file interactability in Selenium. When enabled, strict checking is applied to file input elements. This affects how `sendKeys` interacts with hidden file upload elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_46\n\nLANGUAGE: java\nCODE:\n```\noptions.setStrictFileInteractability(true);\n```\n\n----------------------------------------\n\nTITLE: Key Up Action in Selenium (Kotlin)\nDESCRIPTION: Demonstrates how to simulate releasing a key using the Actions API in Kotlin. This example shows how to release the SHIFT key on an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval input = driver.findElement(By.tagName(\"input\"))\nval actions = Actions(driver)\nactions.keyDown(input, Keys.SHIFT)\n    .sendKeys(input, \"text\")\n    .keyUp(input, Keys.SHIFT)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Getting Performance Metrics - Python\nDESCRIPTION: Demonstrates how to retrieve performance metrics using Selenium and CDP in Python. It captures and prints the performance metrics. Requires Selenium WebDriver and CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nresult = driver.execute_cdp_cmd('Performance.getMetrics', {})\nfor entry in result['metrics']:\n    print(entry)\n```\n\n----------------------------------------\n\nTITLE: Browsing Context Created Event in JavaScript\nDESCRIPTION: This code snippet demonstrates how to listen for the 'browsingContext.contextCreated' event using Selenium WebDriver's BiDi API in JavaScript. It sets up a listener and asserts the context ID is defined when a browsing context is created. Requires Selenium version 4.9.2 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('browsingContext.contextCreated', async () => {\n  let contextId;\n\n  await driver.on('browsingContext.contextCreated', (event) => {\n    contextId = event.context.context;\n  });\n\n  await driver.executeScript('window.open(\"https://google.com\", \"_blank\");');\n\n  expect(contextId).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element By Amount - Selenium Wheel Kotlin\nDESCRIPTION: This snippet demonstrates how to scroll from a specific element by a given amount using Selenium's Wheel actions in Kotlin. The viewport will be scrolled so the bottom of the element is at the bottom of the screen, then the page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element = driver.findElement(By.id(\"target\"))\nActions(driver)\n  .scroll(element, 0, 100, 0, 0)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Getting All Options from Select Element\nDESCRIPTION: This code retrieves all options from a <select> element using Selenium's Select class. The `getOptions()` method returns a list of WebElements representing each option within the select list.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nList<WebElement> options = select.getOptions();\n```\n\n----------------------------------------\n\nTITLE: Relative Locators: Locating Element Below\nDESCRIPTION: This code demonstrates how to locate an element below another element using Relative Locators in Selenium 4. It uses `RelativeLocator.with(By.tagName(\"input\")).below(By.id(\"email\"))` to locate an input element below the element with the ID 'email'. This technique is valuable when direct element identification is challenging.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet passwordLocator = locateWith(By.tagName('input')).below(By.id('email'));\n```\n\n----------------------------------------\n\nTITLE: Basic Scroll Wheel Action Implementation - Python\nDESCRIPTION: This code snippet demonstrates a bare minimum implementation of scroll wheel actions in Python's Selenium WebDriver. It shows how to perform basic scrolling operations within a web page using the `move_to_element` and `scroll_by` methods. This is the base implementation that needs documentation and possible extensions for user-friendly methods.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/meetings/2022/tlc-03-02.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nhttps://github.com/SeleniumHQ/selenium/blob/trunk/py/selenium/webdriver/common/actions/wheel_actions.py#L32-L34\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Distributor (Shell)\nDESCRIPTION: This command starts the Distributor component, which queries the New Session Queue for new session requests and assigns them to a Node when the capabilities match in a Distributed Grid setup. The default port is 5553.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.en.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar distributor --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443 --sessions http://<sessions-ip>:5556 --sessionqueue http://<new-session-queue-ip>:5559 --port 5553 --bind-bus false\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Location - Ruby\nDESCRIPTION: This snippet demonstrates how to set the location of the driver executable in Ruby. It initializes Chrome::Service with the path to the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.zh-cn.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nservice = Selenium::WebDriver::Chrome::Service.new(path: '/path/to/chromedriver')\n```\n\n----------------------------------------\n\nTITLE: Minimize Window - Selenium WebDriver - Kotlin\nDESCRIPTION: This snippet minimizes the browser window using Selenium WebDriver in Kotlin. Requires Selenium WebDriver dependency and Selenium 4 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_46\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.manage().window().minimize()\n```\n\n----------------------------------------\n\nTITLE: Getting Named Cookie in Kotlin\nDESCRIPTION: This code snippet demonstrates how to retrieve a cookie by its name using Selenium WebDriver in Kotlin. It navigates to a website, adds a cookie named 'foo', and then retrieves the cookie by its name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://example.com\")\n        driver.manage().addCookie(Cookie(\"foo\", \"bar\"))\n\n        // Get cookie details with named cookie 'foo'\n        val cookie = driver.manage().getCookieNamed(\"foo\")\n        println(cookie)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse from Viewport Origin in JavaScript\nDESCRIPTION: This JavaScript code moves the mouse pointer relative to the top-left corner of the current viewport by a specified offset. It utilizes the Actions class to perform the move and requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nawait actions.move({x: 20, y: 100, duration: 0}).perform();\n```\n\n----------------------------------------\n\nTITLE: Listening to JS Exceptions - Java\nDESCRIPTION: Subscribes to JavaScript exception events using Selenium's BiDi API. This allows capturing and processing unhandled exceptions occurring in the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.ja.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nBiDi bidi = driver.getDevTools();\nbidi.getDomains().log().addJavascriptExceptionListener(entry -> {\n  System.out.println(\"----------------------------\");\n  System.out.println(\"Text: \" + entry.getText());\n  System.out.println(\"----------------------------\");\n});\n```\n\n----------------------------------------\n\nTITLE: Scroll By Amount using Selenium Wheel Python\nDESCRIPTION: This snippet demonstrates how to scroll by a specific amount (deltaX and deltaY) using Selenium's Wheel actions in Python. Positive deltaX values scroll to the right, and positive deltaY values scroll down. Negative values scroll left and up respectively.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nactions = ActionBuilder(driver)\nactions.scroll_by(0, 100)\nactions.perform()\n```\n\n----------------------------------------\n\nTITLE: Scroll By Amount using Selenium Wheel CSharp\nDESCRIPTION: This snippet demonstrates how to scroll by a specific amount (deltaX and deltaY) using Selenium's Wheel actions in C#. Positive deltaX values scroll to the right, and positive deltaY values scroll down. Negative values scroll left and up respectively.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\nnew Actions(driver)\n    .ScrollByAmount(0, 100)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Taking Full Page Screenshots in Firefox with Selenium (Ruby)\nDESCRIPTION: This Ruby snippet demonstrates how to take a full page screenshot in Firefox using Selenium.  It utilizes `full_page_screenshot` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.full_page_screenshot\n```\n\n----------------------------------------\n\nTITLE: Installing Add-ons in Firefox with Selenium (CSharp)\nDESCRIPTION: This C# snippet installs a signed Firefox add-on from a given file path. The `InstallAddon` method of the `driver` object is used to perform the installation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.InstallAddon(addonPath);\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element Selenium\nDESCRIPTION: This code snippet demonstrates how to perform a drag and drop operation from one element to another using Selenium WebDriver. The action is performed by clicking and holding the source element, moving to the target element, and then releasing the mouse. It is available in Java, Python, C#, Ruby, JavaScript and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_62\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement source = driver.FindElement(By.Id(\"draggable\"));\nIWebElement target = driver.FindElement(By.Id(\"droppable\"));\n\nnew Actions(driver)\n    .DragAndDrop(source, target)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Handle Prompt Popup in Ruby\nDESCRIPTION: This Ruby code snippet shows how to handle a JavaScript prompt popup in Selenium WebDriver. It sends text to the prompt and then accepts the prompt.  Clicking a link triggers the prompt.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.pt-br.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.find_element(:link_text, 'See a sample prompt').click\nwait = Selenium::WebDriver::Wait.new(:timeout => 10)\nalert = wait.until { driver.switch_to.alert }\nalert.send_keys \"Selenium\"\ntext = alert.text\nalert.accept\n```\n\n----------------------------------------\n\nTITLE: Relative Locators: Locating Element Below\nDESCRIPTION: This code demonstrates how to locate an element below another element using Relative Locators in Selenium 4. It uses `RelativeLocator.with(By.tagName(\"input\")).below(By.id(\"email\"))` to locate an input element below the element with the ID 'email'. This technique is valuable when direct element identification is challenging.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\npassword_locator = locate_with(By.TAG_NAME, \"input\").below({By.ID: \"email\"})\n```\n\n----------------------------------------\n\nTITLE: Release Actions in Browsing Context - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to release actions in a browsing context using WebDriver BiDi. It uses the `browsingContext.releaseActions` method to release all currently pressed keys and buttons. The snippet requires the `browsingContextId` and an array of action IDs as input.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/input.zh-cn.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n    await driver.browsingContext.releaseActions({ context: browsingContextId, actionIds: [] });\n```\n\n----------------------------------------\n\nTITLE: Setting the se:downloadsEnabled Capability\nDESCRIPTION: This Java code snippet shows how to set the `se:downloadsEnabled` capability to `true` in the test options. This capability informs the Grid to match this request with nodes that have managed downloads enabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\noptions.setCapability(\"se:downloadsEnabled\", true);\n```\n\n----------------------------------------\n\nTITLE: Add Gradle Dependency for Selenium in Java\nDESCRIPTION: This code snippet shows how to add the Selenium dependency to a Java project's `build.gradle` file using Gradle. The `testImplementation` configuration ensures Selenium is available for testing.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.en.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'org.seleniumhq.selenium:selenium-java:4.18.1'\n\n```\n\n----------------------------------------\n\nTITLE: Response Started Event - Selenium BiDi - Java\nDESCRIPTION: This Java snippet sets up a listener for the 'Response Started' network event using Selenium's BiDi API. It allows intercepting and examining responses as they begin to arrive. Requires Selenium 4.15 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\nNetwork network = driver.getDevTools().getDomains().network();\nnetwork.onResponseStarted(event -> {\n  String url = event.getRequest().getUrl();\n  System.out.println(\"Response started for \" + url);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Element Color Values\nDESCRIPTION: This code retrieves the 'color' and 'background-color' CSS values from a web element with the ID 'login' using Selenium's driver.findElement() and getCssValue() methods, and then converts these values into Color objects in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nColor loginButtonColour = Color.fromString(driver.findElement(By.id(\"login\")).getCssValue(\"color\"));\n\nColor loginButtonBackgroundColour = Color.fromString(driver.findElement(By.id(\"login\")).getCssValue(\"background-color\"));\n```\n\n----------------------------------------\n\nTITLE: Verifying Color Formats\nDESCRIPTION: This code converts a Color object to HEX, RGBA, and RGB formats and then compares the resulting strings with expected values using the equals() method in Java. This approach allows for static verification of color values in specific formats.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nassert loginButtonBackgroundColour.asHex().equals(\"#ff69b4\");\nassert loginButtonBackgroundColour.asRgba().equals(\"rgba(255, 105, 180, 1)\");\nassert loginButtonBackgroundColour.asRgb().equals(\"rgb(255, 105, 180)\");\n```\n\n----------------------------------------\n\nTITLE: Using Safari Technology Preview (Python)\nDESCRIPTION: This code snippet configures the SafariOptions in Python to use the Safari Technology Preview by specifying the browser's executable path.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.zh-cn.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\noptions = Options()\noptions.binary_location = \"/Applications/Safari Technology Preview.app/Contents/MacOS/Safari Technology Preview\"\ndriver = webdriver.Safari(options=options)\n```\n\n----------------------------------------\n\nTITLE: Working with Firefox Profiles\nDESCRIPTION: Demonstrates how to work with Firefox profiles. This includes creating a new profile and setting preferences.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxProfile profile = new FirefoxProfile();\nprofile.setPreference(\"dom.disable_beforeunload\", true);\nprofile.setPreference(\"browser.startup.homepage\", \"about:blank\");\nFirefoxOptions options = new FirefoxOptions();\noptions.setProfile(profile);\nWebDriver driver = new FirefoxDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium (C#)\nDESCRIPTION: This C# snippet demonstrates sending keys to a specific element using Selenium's Actions API. It finds the element using a CSS selector, creates an Actions object, uses the SendKeys method with the element and the string \"Selenium!\", and calls Perform() to execute the action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.CssSelector(\"selector\"));\nActions actions = new Actions(driver);\nactions.SendKeys(element, \"Selenium!\").Perform();\n```\n\n----------------------------------------\n\nTITLE: Adding Credential in Java\nDESCRIPTION: This Java code snippet demonstrates adding a credential to the authenticator. It constructs a credential with specific properties and adds it using the WebAuthn API. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\ndevTools.getDomains().getWebAuthn().addCredential(\n    Credential.builder()\n        .id(CREDENTIAL_ID)\n        .publicKey(PUBLIC_KEY)\n        .algorithm(Algorithm.ES256)\n        .signCount(0)\n        .userId(USER_ID)\n        .userName(USER_NAME)\n        .build());\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Binary Location\nDESCRIPTION: This code snippet shows how to specify the path to the Chrome binary to use a specific Chrome installation or a Chromium-based browser. This allows you to drive different Chromium-based browsers with ChromeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\noptions.setBinaryPath('/path/to/chrome/binary');\nlet service = new chrome.ServiceBuilder(pathToChromeDriver).build();\nlet driver = await new Builder()\n  .setChromeOptions(options)\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - Eager - Java\nDESCRIPTION: This Java snippet sets the page load strategy to 'eager' using ChromeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setPageLoadStrategy(PageLoadStrategy.EAGER);\n```\n\n----------------------------------------\n\nTITLE: Setting Log Output to File - C#\nDESCRIPTION: Demonstrates setting the log output to a file in C# using EdgeDriverService.\nThis allows capturing the Edge driver logs for debugging and analysis.\nDependencies: Selenium WebDriver, EdgeDriverService, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_28\n\nLANGUAGE: CSharp\nCODE:\n```\nvar service = EdgeDriverService.CreateDefaultService();\nservice.LogPath = \"edge.log\";\nEdgeDriver driver = new EdgeDriver(service, options);\n```\n\n----------------------------------------\n\nTITLE: Before Request Sent Event - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to listen for the 'beforeRequestSent' network event using Selenium BiDi and log the request information.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.on('network.beforeRequestSent', params => {\n  console.log(params.request);\n});\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element by Amount - CSharp\nDESCRIPTION: This CSharp code snippet demonstrates how to scroll from an element by a given amount using Selenium's Actions API and Wheel class. It takes an element, delta x, and delta y values as input. If the element is out of the viewport, it will first be scrolled into view. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"food\"));\nnew Actions(driver)\n    .ScrollFromOrigin(WheelInput.ScrollOrigin.FromElement(element, 0, 0), 50, 100)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset in Java\nDESCRIPTION: This Java snippet performs a drag and drop operation by a specified offset. It uses the Actions class and requires a WebDriver instance and the source element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_66\n\nLANGUAGE: java\nCODE:\n```\nWebElement source = driver.findElement(By.id(\"draggable\"));\n\nActions actions = new Actions(driver);\nactions.dragAndDropBy(source, 50, 20).perform();\n```\n\n----------------------------------------\n\nTITLE: Setting Background using PrintOptions in Java\nDESCRIPTION: This code snippet demonstrates how to set whether background colors and images appear using the PrintOptions class in Java. The `setBackground()` method is used to specify whether to include background. The `getBackground()` is used to confirm the setting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setBackground(true);\n\nassertThat(printOptions.getBackground()).isTrue();\n```\n\n----------------------------------------\n\nTITLE: Setting platformName Capability in Ruby\nDESCRIPTION: This code snippet illustrates how to set the 'platformName' capability in Selenium using Ruby. The `platformName` capability identifies the operating system on the remote end. Setting the platform name is relevant for configuring cloud-based testing environments.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\noptions = Selenium::WebDriver::Options.chrome\noptions.platform_name = 'linux'\n```\n\n----------------------------------------\n\nTITLE: Setting File Output for IE Driver Logs in Java\nDESCRIPTION: This Java code shows how to configure the InternetExplorerDriverService to log to a specific file. It creates a new InternetExplorerDriverService.Builder, sets the log file output, and then builds the service. Finally, it instantiates an InternetExplorerDriver using the configured service.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.ie.InternetExplorerDriver;\nimport org.openqa.selenium.ie.InternetExplorerDriverService;\n\nimport java.io.File;\nimport java.io.IOException;\n\npublic class InternetExplorerTest {\n    public static void main(String[] args) throws IOException {\n        InternetExplorerDriverService service = new InternetExplorerDriverService.Builder()\n                .withLogFile(new File(\"log.txt\"))\n                .build();\n        InternetExplorerDriver driver = new InternetExplorerDriver(service);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Find All Matching Elements - Java\nDESCRIPTION: This snippet finds all elements with the tag name \"li\" on the page and returns them as a list of `WebElement` objects using Selenium WebDriver with Java. If no matches are found, an empty list is returned.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\nList<WebElement> plants = driver.findElements(By.tagName(\"li\"));\n```\n\n----------------------------------------\n\nTITLE: Redirecting Logger Output to a File in Java\nDESCRIPTION: This code snippet demonstrates how to redirect Selenium logger output from the default `System.err` to a file in Java.  It involves adding a handler to the logger to write to a file.  No specific dependencies beyond the Selenium library are needed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nFileHandler handler = new FileHandler(\"selenium.log\");\nLogger.getLogger(\"\").addHandler(handler);\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Location - CSharp\nDESCRIPTION: This snippet demonstrates setting the driver location in C# using ChromeOptions and the ChromeService.DriverServicePath property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.zh-cn.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new ChromeOptions();\noptions.BinaryLocation = \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\";\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium (Python)\nDESCRIPTION: This Python snippet demonstrates sending keys to a specific element using Selenium's ActionChains API. It first finds the element using a CSS selector, then creates an ActionChains object and uses the send_keys_to_element method to send the string \"Selenium!\" to the element, and finally calls perform() to execute the action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nelement = driver.find_element(By.CSS_SELECTOR, \"selector\")\nactions = ActionChains(driver)\nactions.send_keys_to_element(element, \"Selenium!\").perform()\n```\n\n----------------------------------------\n\nTITLE: Enabling Managed Downloads in Ruby\nDESCRIPTION: Enables managed downloads for a RemoteWebDriver instance in Ruby, allowing Selenium to handle the location of downloaded files. Requires setting the 'se:downloadsEnabled' capability to true when defining ChromeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Chrome::Options.new(se: { downloadsEnabled: true })\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium (Kotlin)\nDESCRIPTION: Demonstrates sending keys to the currently active element using the Actions API in Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nval actions = Actions(driver)\nactions.sendKeys(\"text\")\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Current Pointer Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse cursor by a specified offset from its current position using Selenium WebDriver.  It's available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_54\n\nLANGUAGE: Java\nCODE:\n```\nnew Actions(driver)\n  .moveByOffset(30, -10)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Orientation in Selenium Java\nDESCRIPTION: This Java code snippet demonstrates how to set the page orientation to landscape using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setOrientation(PrintOptions.Orientation.LANDSCAPE);\n\nassertThat(printOptions.getOrientation()).isEqualTo(PrintOptions.Orientation.LANDSCAPE);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Color Objects\nDESCRIPTION: This code snippet demonstrates creating Color objects for basic color definitions like 'black', 'chocolate', and 'hotpink' in Ruby, using the Color.from_string() method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nBLACK = Color.from_string('black')\nCHOCOLATE = Color.from_string('chocolate')\nHOTPINK = Color.from_string('hotpink')\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions - Java\nDESCRIPTION: This Java snippet showcases how to release all currently depressed keys and pointer buttons using the `resetInputState` method. This ensures a clean state for subsequent actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.en.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\ndriver.resetInputState()\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Downloaded File using curl\nDESCRIPTION: This command uses `curl` to send a POST request to the `/session/<sessionId>/se/files` endpoint to retrieve a specific downloaded file. It specifies the filename in the request body. Requires an active session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Accept: application/json\" \\\n-H \"Content-Type: application/json; charset=utf-8\" \\\n-X POST -d '{\"name\":\"Red-blue-green-channel.jpg\"}' \\\n\"http://localhost:4444/session/18033434-fa4f-4d11-a7df-9e6d75920e19/se/files\"\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Manager to Manage Selenium Grid (bash)\nDESCRIPTION: This command invokes Selenium Manager to manage the Selenium Grid release. It discovers the latest version of Selenium Grid and stores the `selenium-server.jar` in the local cache. Assumes the selenium-manager executable is in the current directory.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.en.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./selenium-manager --grid\n```\n\n----------------------------------------\n\nTITLE: Setting Background - Python\nDESCRIPTION: This Python snippet sets whether to print background colors and images to true using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.print_options import PrintOptions\n\nprint_options = PrintOptions()\nprint_options.background = True\n```\n\n----------------------------------------\n\nTITLE: Minimize Window - Selenium\nDESCRIPTION: This snippet demonstrates how to minimize the current browser window using Selenium WebDriver. The exact behavior of this command is specific to the individual window manager. Requires Selenium 4 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_65\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.manage().window().minimize()\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to enable the WebSocket URL for BiDi communication. By setting the `web_socket_url` property of the options object to `true`, you enable the bidirectional communication features of the WebDriver BiDi protocol in Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.pt-br.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.web_socket_url = true\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Java\nDESCRIPTION: Demonstrates how to select an option in a Select element by its index in Java. It uses the selectByIndex() method. Index starts from 0. Throws NoSuchElementException if index is out of range.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nselect.selectByIndex(0);\n```\n\n----------------------------------------\n\nTITLE: Back Button Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to simulate a click on the back button of a mouse (button X1) using Selenium. It involves pressing and releasing mouse button 3 on the target element. Requires Selenium WebDriver and version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"my-element\"));\nActions actions = new Actions(driver);\nactions.moveToElement(element)\n  .press(MouseButton.BACK)\n  .release(MouseButton.BACK)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Drain Node Directly with cURL\nDESCRIPTION: This snippet drains a Node directly, causing it to finish ongoing sessions before stopping. It requires an `X-REGISTRATION-SECRET` header for authorization. The default Node URL is http://localhost:5555.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request POST 'http://localhost:5555/se/grid/node/drain' --header 'X-REGISTRATION-SECRET: <secret>'\n```\n\n----------------------------------------\n\nTITLE: Get Browsing Context Realms - Java\nDESCRIPTION: This snippet retrieves realms associated with a browsing context using Java and the WebDriver BiDi API. It utilizes the `Script.getRealms` method, specifying the context, to fetch the realms.  The browsing context ID is required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nList<RealmInfo> contextRealms = bidi.script().getRealms(Optional.empty(), Optional.of(new BrowsingContext(contextId)));\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Get session information by ID\nDESCRIPTION: This command uses curl to execute a GraphQL query and retrieve the session information for a given session ID.  It fetches `id`, `capabilities`, `startTime`, `uri`, `nodeId`, `nodeUri`, `sessionDurationMillis`, and `slot` details.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.zh-cn.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ session (id: \\\"<session-id>\\\") { id, capabilities, startTime, uri, nodeId, nodeUri, sessionDurationMillis, slot { id, stereotype, lastStarted } } } \"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Context Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a context click action (right-click) on an element using Selenium. It combines moving the mouse to the center of an element with pressing and releasing the right mouse button (button 2). This opens the context menu. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nActions actions = new Actions(driver);\nWebElement element = driver.findElement(By.id(\"my-element\"));\nactions.contextClick(element)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies via CDP in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to set cookies using Chrome DevTools Protocol (CDP) with Selenium. It sets a cookie with a specific name, value, domain, and path. This snippet depends on Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nsession.send('Network.enable')\nsession.send('Network.setCookie', name: 'foo', value: 'bar', domain: 'localhost', path: '/')\n\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - Java\nDESCRIPTION: This Java snippet demonstrates how to retrieve the position (x and y coordinates) of the browser window using Selenium WebDriver. It shows two approaches: accessing each coordinate individually and storing the position in a `Point` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_39\n\nLANGUAGE: java\nCODE:\n```\n// Access each dimension individually\nint x = driver.manage().window().getPosition().getX();\nint y = driver.manage().window().getPosition().getY();\n\n// Or store the dimensions and query them later\nPoint position = driver.manage().window().getPosition();\nint x1 = position.getX();\nint y1 = position.getY();\n```\n\n----------------------------------------\n\nTITLE: Setting Ensure Clean Session (Python)\nDESCRIPTION: This code snippet shows how to ensure a clean session by clearing the cache, browser history, and cookies for all running instances of Internet Explorer using Python. It sets the `ensure_clean_session` option to `True`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.ie.options import Options\n\nie_options = Options()\nie_options.ensure_clean_session = True\ndriver = webdriver.Ie(options=ie_options)\n```\n\n----------------------------------------\n\nTITLE: Set Window Position: Selenium WebDriver (Java)\nDESCRIPTION: This Java snippet demonstrates how to move the browser window to the top-left corner of the primary monitor using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_53\n\nLANGUAGE: java\nCODE:\n```\n// Move the window to the top left of the primary monitor\ndriver.manage().window().setPosition(new Point(0, 0));\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Tag Name in Selenium\nDESCRIPTION: This code demonstrates how to locate a web element using its HTML tag name in Selenium WebDriver. It initializes a ChromeDriver instance and uses the `findElement` method with `By.tagName(\"a\")` to find the first link element on the page. The example is provided in multiple languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.tagName(\"a\"))\n```\n\n----------------------------------------\n\nTITLE: Directing Logger Output to a File in C#\nDESCRIPTION: This code snippet demonstrates how to direct Selenium logs to a file in C# by adding a FileLogHandler. This overrides the default behavior of sending logs to System.Console.Error. The Selenium.Support NuGet package is required for FileLogHandler.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nnew FileLogHandler(\"selenium.log\");\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Node with Max Sessions, Log Level, Port, and Drivers\nDESCRIPTION: This snippet shows how to start a Selenium Node with a custom maximum number of sessions, a specific log level, a particular port, and specifying the browser drivers to use (Firefox and Edge in this case).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.zh-cn.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njava -jar selenium-server-<version>.jar node --max-sessions 4 --log-level \"fine\" --port 7777 --driver-implementation \"firefox\" --driver-implementation \"edge\"\n```\n\n----------------------------------------\n\nTITLE: Execute JavaScript in Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to execute JavaScript code within the current browsing context using Selenium WebDriver in Python. It utilizes the `execute_script` method to execute JavaScript code. It retrieves the innerText of a header element. Dependencies: selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_64\n\nLANGUAGE: Python\nCODE:\n```\n    # Stores the header element\nheader = driver.find_element(By.CSS_SELECTOR, \"h1\")\n\n    # Executing JavaScript to capture innerText of header element\ndriver.execute_script('return arguments[0].innerText', header)\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its visible text using Selenium WebDriver. The `selectByVisibleText()` method is used to select the option based on the provided text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nselect.selectByVisibleText(\"One\")\n```\n\n----------------------------------------\n\nTITLE: Setting Log Output to File - Ruby\nDESCRIPTION: Demonstrates setting the log output to a file in Ruby using EdgeDriverService.\nThis allows capturing the Edge driver logs for debugging and analysis.\nDependencies: Selenium WebDriver, EdgeDriverService, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_29\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.edge(log_path: 'edge.log')\ndriver = Selenium::WebDriver.for :edge, service: service, options: options\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates scrolling from the viewport with an offset and a specified amount. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nActions(driver)\n    .scrollFromOrigin(WheelInput.WHEEL, 25, 25, 100, 200)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Initializing Internet Explorer with Options in Selenium\nDESCRIPTION: This code snippet demonstrates how to start a Microsoft Edge browser in Internet Explorer Compatibility mode with basic defined options using Selenium in various programming languages. It sets up the InternetExplorerOptions and uses them to create an InternetExplorerDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nvar options = new InternetExplorerOptions();\noptions.AttachToEdgeChrome = true;\noptions.EdgeExecutablePath = @\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\";\nvar driver = new InternetExplorerDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element By Amount - Selenium Wheel Java\nDESCRIPTION: This snippet demonstrates how to scroll from a specific element by a given amount using Selenium's Wheel actions in Java.  The viewport will be scrolled so the bottom of the element is at the bottom of the screen, then the page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"target\"));\nnew Actions(driver)\n  .scroll(element, 0, 100, 0, 0)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Get browsing context tree in JavaScript\nDESCRIPTION: This snippet demonstrates retrieving the browsing context tree using WebDriver BiDi in JavaScript. It retrieves all descendant browsing contexts, including the parent, using the `getTree` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet tree = await browsingContext.getTree();\nexpect(tree.contexts.length).toBeGreaterThan(0);\n```\n\n----------------------------------------\n\nTITLE: Setting Internet Explorer Driver Log Level - Java\nDESCRIPTION: This snippet demonstrates how to set the log level for the Internet Explorer Driver in Java using `InternetExplorerOptions`.  The log level determines the verbosity of the driver's output.  This can also be configured via system property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.setLogLevel(InternetExplorerDriverLogLevel.DEBUG);\nInternetExplorerDriver driver = new InternetExplorerDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait Timeout with Ruby\nDESCRIPTION: This code snippet demonstrates how to set the implicit wait timeout in Ruby using Selenium WebDriver's Options class. The `implicitly_wait=` method is used to specify the amount of time the driver should wait when searching for an element if it is not immediately present. The timeout is set to 10 seconds in this example.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.manage.timeouts.implicitly_wait = 10\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window - Selenium\nDESCRIPTION: This snippet demonstrates how to set the browser window to fullscreen mode using Selenium WebDriver, similar to pressing F11 in most browsers.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_66\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().window().fullscreen();\n```\n\n----------------------------------------\n\nTITLE: Taking Full Page Screenshots in Firefox with Selenium (Python)\nDESCRIPTION: This snippet shows how to take a full page screenshot using Selenium WebDriver in Python. The `get_screenshot_as_file` method is used to save the screenshot to a file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_48\n\nLANGUAGE: python\nCODE:\n```\ndriver.get_screenshot_as_file('screen.png')\n```\n\n----------------------------------------\n\nTITLE: Listening for Realm Destroyed Events in Java\nDESCRIPTION: This Java snippet illustrates how to register a listener for the 'realm destroyed' event using Selenium's BiDirectional API. It demonstrates how to create a BiDi object, subscribe to the event, and define a callback function that will be executed when the event is triggered. Requires Selenium 4.16 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.en.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n    bidi.on(BrowsingContext.realmDestroyed(contextId), event -> {\n      assertThat(event.getContext(), equalTo(contextId));\n      countDownLatch.countDown();\n    });\n\n    driver.get(\"https://example.com\");\n    driver.close();\n\n    countDownLatch.await(5, TimeUnit.SECONDS);\n```\n\n----------------------------------------\n\nTITLE: Setting IE Driver Supporting Files Path - Python\nDESCRIPTION: This Python snippet shows how to set the extract path when initializing the InternetExplorerService. It configures the service with a specific path to the directory containing supporting files.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\nservice = InternetExplorerService(extract_path=\"C:\\\\IEDriverServer\\\")\ndriver = Ie(service=service)\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Working with Firefox Profiles\nDESCRIPTION: Demonstrates how to work with Firefox profiles. This includes creating a new profile and setting preferences.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nprofile = FirefoxProfile()\nprofile.set_preference(\"dom.disable_beforeunload\", True)\nprofile.set_preference(\"browser.startup.homepage\", \"about:blank\")\noptions = FirefoxOptions()\noptions.profile = profile\ndriver = FirefoxDriver(options=options)\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Title in Python\nDESCRIPTION: Retrieves the title of the current web page using Selenium's WebDriver in Python. Requires a WebDriver instance to be initialized and navigated to a page. The title is returned as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/web-form.html\")\ntitle = driver.title\nassert title == \"Web form\"\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Distributor (Shell)\nDESCRIPTION: This command starts the Selenium Distributor, which consults the New Session Queue for new session requests and delivers them to a Node when it finds a matching capability. It uses port 5553 by default and interacts with the New Session Queue, Session Map, Event Bus, and Node(s).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.pt-br.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-<version>.jar distributor --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443 --sessions http://<sessions-ip>:5556 --sessionqueue http://<new-session-queue-ip>:5559 --port 5553 --bind-bus false\n```\n\n----------------------------------------\n\nTITLE: Key Up Action in Selenium (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates performing a key up action using Selenium's Actions API. An Actions object is created, a keyDown action is performed on the Shift key, then the 'a' key is sent, followed by a keyUp action on the Shift key and sending the 'a' key again. Finally, perform() is called to execute these actions, resulting in \"Aa\".\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = driver.actions();\nactions.keyDown(Key.SHIFT)\n  .sendKeys('a')\n  .keyUp(Key.SHIFT)\n  .sendKeys('a')\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Listening for Realm Destroyed Events in JavaScript\nDESCRIPTION: This JavaScript snippet showcases how to register a listener for the 'realm destroyed' event utilizing Selenium's BiDirectional API. The code illustrates the process of creating a BiDi object, subscribing to the event, and specifying a handler function to be executed when the event occurs. Requires Selenium 4.19 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.en.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n    bidi.on('browsingContext.realmDestroyed', (params) => {\n      expect(params.context).toBe(browsingContextId);\n      latch.resolve();\n    });\n\n    await driver.get('https://example.com');\n    await driver.close();\n\n    await latch;\n```\n\n----------------------------------------\n\nTITLE: Disown Handles in Browsing Context - Java\nDESCRIPTION: This snippet shows how to disown handles in a browsing context using Java and the WebDriver BiDi API. It uses the `Script.disown` method to release object handles within a given context. The object handles and the browsing context ID are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nbidi.script().disown(new BrowsingContext(contextId), List.of(\"handle\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Port - Python\nDESCRIPTION: This snippet demonstrates how to set the port the driver should run on in Python by specifying the port in the Service object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.zh-cn.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nservice = Service(port=1234)\n```\n\n----------------------------------------\n\nTITLE: Remove preloaded script - Java\nDESCRIPTION: This Java code removes a preloaded script using its id.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_26\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void removePreloadedScript() {\n        BrowsingContext browsingContext = new BrowsingContext(driver, driver.getWindowHandle());\n        browsingContext.removePreloadScript(\"test\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Enabled in Kotlin\nDESCRIPTION: This code snippet demonstrates how to check if a web element is enabled on a webpage using Selenium WebDriver in Kotlin. It uses the `isEnabled()` method of the WebElement interface. The method returns `true` if the element is enabled, and `false` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\n//navigates to url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n//returns true if element is enabled else returns false\nval attr = driver.findElement(By.name(\"button_input\")).isEnabled()\n```\n\n----------------------------------------\n\nTITLE: Getting Window Handle - Selenium WebDriver (CSharp)\nDESCRIPTION: Retrieves the unique identifier of the current browser window using Selenium WebDriver in C#. This handle is persistent throughout a single session and allows for switching between windows. No specific dependencies other than Selenium WebDriver are required. The returned value is a String representing the window handle.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nstring originalWindow = driver.CurrentWindowHandle;\n\nAssert.That(originalWindow, Is.Not.Null);\n\nConsole.WriteLine(originalWindow);\n\n```\n\n----------------------------------------\n\nTITLE: Setting ensureCleanSession for Internet Explorer\nDESCRIPTION: This code snippet demonstrates how to set the `ensureCleanSession` capability for Internet Explorer using Selenium. Setting this capability to `true` clears the cache, browser history, and cookies of all running instances of Internet Explorer.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::IE::Options.new\noptions.ensure_clean_session = true\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element Selenium\nDESCRIPTION: This code snippet demonstrates how to perform a drag and drop operation from one element to another using Selenium WebDriver. The action is performed by clicking and holding the source element, moving to the target element, and then releasing the mouse. It is available in Java, Python, C#, Ruby, JavaScript and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_65\n\nLANGUAGE: Kotlin\nCODE:\n```\nval source = driver.findElement(By.id(\"draggable\"))\nval target = driver.findElement(By.id(\"droppable\"))\n\nActions(driver)\n  .dragAndDrop(source, target)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Find Element by Class Name - JavaScript\nDESCRIPTION: This snippet demonstrates how to locate a web element using its class name in JavaScript. It initializes a ChromeDriver and uses the `findElement` method with `By.className` to find the element with the class 'information'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.className('information'));\n```\n\n----------------------------------------\n\nTITLE: Setting User Verification in Python\nDESCRIPTION: This Python code sets whether the user is verified or not on the virtual authenticator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ndevtools.security.set_user_verified(True)\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Driver Log File Output\nDESCRIPTION: This code snippet shows how to configure the ChromeDriver service to write its logs to a specific file. This is useful for debugging and troubleshooting issues with the ChromeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_30\n\nLANGUAGE: CSharp\nCODE:\n```\nvar service = ChromeDriverService.CreateDefaultService();\nservice.LogPath = \"chrome.log\";\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver Session in Selenium\nDESCRIPTION: This snippet initializes a WebDriver session, which is the starting point for interacting with a browser using Selenium. It creates an instance of the WebDriver (e.g., ChromeDriver) to control the browser. Dependencies include the Selenium WebDriver library and the corresponding browser driver executable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndriver = await new Builder().forBrowser('chrome').build();\n```\n\n----------------------------------------\n\nTITLE: Downloading a File in Ruby\nDESCRIPTION: Downloads a specific file for a RemoteWebDriver session in Ruby, transferring it from the remote directory to a specified local target directory. Takes a filename, and the target directory to download the file to.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\ndownloaded_file = driver.download_file('file_name', target_dir)\n```\n\n----------------------------------------\n\nTITLE: Executing a Ruby Script\nDESCRIPTION: This command executes a specific Ruby script.  The example script to be run is `example_script.rb`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/ruby/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nruby example_script.rb\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Tag Name in Selenium\nDESCRIPTION: This code demonstrates how to locate a web element using its HTML tag name in Selenium WebDriver. It initializes a ChromeDriver instance and uses the `findElement` method with `By.tagName(\"a\")` to find the first link element on the page. The example is provided in multiple languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_25\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.TagName(\"a\"));\n```\n\n----------------------------------------\n\nTITLE: Selenium Grid File Download in Java\nDESCRIPTION: This Java example demonstrates how to enable automatic managing of downloaded files in Selenium Grid, trigger a file download, list available files, and download a specific file from the remote node to the local machine.  It utilizes `ChromeOptions` to set the `se:downloadsEnabled` capability.  The example assumes the Selenium Grid is running locally and requires dependencies such as `com.google.common.collect.ImmutableMap`, `org.openqa.selenium`, `org.openqa.selenium.io.Zip`, and `org.openqa.selenium.json.Json`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.common.collect.ImmutableMap;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.io.Zip;\nimport org.openqa.selenium.json.Json;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.http.HttpClient;\nimport org.openqa.selenium.remote.http.HttpRequest;\nimport org.openqa.selenium.remote.http.HttpResponse;\n\nimport java.io.File;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.concurrent.TimeUnit;\n\nimport static org.openqa.selenium.remote.http.Contents.asJson;\nimport static org.openqa.selenium.remote.http.Contents.string;\nimport static org.openqa.selenium.remote.http.HttpMethod.GET;\nimport static org.openqa.selenium.remote.http.HttpMethod.POST;\n\npublic class DownloadsSample {\n\n  public static void main(String[] args) throws Exception {\n    // Assuming the Grid is running locally.\n    URL gridUrl = new URL(\"http://localhost:4444\");\n    ChromeOptions options = new ChromeOptions();\n    options.setCapability(\"se:downloadsEnabled\", true);\n    RemoteWebDriver driver = new RemoteWebDriver(gridUrl, options);\n    try {\n      demoFileDownloads(driver, gridUrl);\n    } finally {\n      driver.quit();\n    }\n  }\n\n\tprivate static void demoFileDownloads(RemoteWebDriver driver, URL gridUrl) throws Exception {\n\t\tdriver.get(\"https://www.selenium.dev/selenium/web/downloads/download.html\");\n\t\t// Download the two available files on the page\n\t\tdriver.findElement(By.id(\"file-1\")).click();\n\t\tdriver.findElement(By.id(\"file-2\")).click();\n\n\t\t// The download happens in a remote Node, which makes it difficult to know when the file\n\t\t// has been completely downloaded. For demonstration purposes, this example uses a\n\t\t// 10-second sleep which should be enough time for a file to be downloaded.\n\t\t// We strongly recommend to avoid hardcoded sleeps, and ideally, to modify your\n\t\t// application under test, so it offers a way to know when the file has been completely\n\t\t// downloaded.\n\t\tTimeUnit.SECONDS.sleep(10);\n\n\t\t//This is the endpoint which will provide us with list of files to download and also to\n\t\t//let us download a specific file.\n\t\tString downloadsEndpoint = String.format(\"/session/%s/se/files\", driver.getSessionId());\n\n\t\tString fileToDownload;\n\n\t\ttry (HttpClient client = HttpClient.Factory.createDefault().createClient(gridUrl)) {\n\t\t\t// To list all files that are were downloaded on the remote node for the current session\n\t\t\t// we trigger GET request.\n\t\t\tHttpRequest request = new HttpRequest(GET, downloadsEndpoint);\n\t\t\tHttpResponse response = client.execute(request);\n\t\t\tMap<String, Object> jsonResponse = new Json().toType(string(response), Json.MAP_TYPE);\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tMap<String, Object> value = (Map<String, Object>) jsonResponse.get(\"value\");\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tList<String> names = (List<String>) value.get(\"names\");\n\t\t\t// Let's say there were \"n\" files downloaded for the current session, we would like\n\t\t\t// to retrieve ONLY the first file.\n\t\t\tfileToDownload = names.get(0);\n\t\t}\n\n\t\t// Now, let's download the file\n\t\ttry (HttpClient client = HttpClient.Factory.createDefault().createClient(gridUrl)) {\n\t\t\t// To retrieve a specific file from one or more files that were downloaded by the current session\n\t\t\t// on a remote node, we use a POST request.\n\t\t\tHttpRequest request = new HttpRequest(POST, downloadsEndpoint);\n\t\t\trequest.setContent(asJson(ImmutableMap.of(\"name\", fileToDownload)));\n\t\t\tHttpResponse response = client.execute(request);\n\t\t\tMap<String, Object> jsonResponse = new Json().toType(string(response), Json.MAP_TYPE);\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tMap<String, Object> value = (Map<String, Object>) jsonResponse.get(\"value\");\n\t\t\t// The returned map would contain 2 keys,\n\t\t\t// filename - This represents the name of the file (same as what was provided by the test)\n\t\t\t// contents - Base64 encoded String which contains the zipped file.\n\t\t\tString zippedContents = value.get(\"contents\").toString();\n\t\t\t// The file contents would always be a zip file and has to be unzipped.\n\t\t\tFile downloadDir = Zip.unzipToTempDir(zippedContents, \"download\", \"\");\n\t\t\t// Read the file contents\n\t\t\tFile downloadedFile = Optional.ofNullable(downloadDir.listFiles()).orElse(new File[]{})[0];\n\t\t\tString fileContent = String.join(\"\", Files.readAllLines(downloadedFile.toPath()));\n\t\t\tSystem.out.println(\"The file which was \"\n\t\t\t\t\t+ \"downloaded in the node is now available in the directory: \"\n\t\t\t\t\t+ downloadDir.getAbsolutePath() + \" and has the contents: \" + fileContent);\n\t\t}\n\t}\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Colors to Formats for Assertion\nDESCRIPTION: This snippet demonstrates how to convert Color objects to different string formats (HEX, RGBA, RGB) and perform static validations using assertions in Python. It converts the login button's background color to different formats and verifies their values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nassert login_button_background_colour.hex == '#ff69b4'\nassert login_button_background_colour.rgba == 'rgba(255, 105, 180, 1)'\nassert login_button_background_colour.rgb == 'rgb(255, 105, 180)'\n```\n\n----------------------------------------\n\nTITLE: Getting Performance Metrics via CDP in Python\nDESCRIPTION: This Python code snippet demonstrates how to retrieve performance metrics using Chrome DevTools Protocol (CDP) with Selenium. It retrieves metrics related to CPU time and JavaScript memory.  This snippet depends on the Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsession.execute(Performance.enable())\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Hub with Custom Ports (Shell)\nDESCRIPTION: This command starts the Hub component with custom ports for publishing and subscribing to events, as well as for the main port.  This is needed when the default ports are not available or desired.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.en.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar hub --publish-events tcp://<hub-ip>:8886 --subscribe-events tcp://<hub-ip>:8887 --port 8888\n```\n\n----------------------------------------\n\nTITLE: Spawning SessionMap with Redis Extension\nDESCRIPTION: This Bash script spawns a SessionMap process with the Redis extension. It uses coursier to fetch the necessary selenium-session-map-redis dependency. The SessionMap is configured using the sessions.toml file and communicates with the event bus for distributed operation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.en.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nexport SE_VERSION=<current_selenium_version>\njava -jar selenium-server-${SE_VERSION}.jar \\\n--ext $(coursier fetch -p org.seleniumhq.selenium:selenium-session-map-redis:${SE_VERSION}) \\\nsessions --publish-events tcp://localhost:4442 \\\n--subscribe-events tcp://localhost:4443 \\\n--port 5556 --config sessions.toml \n```\n\n----------------------------------------\n\nTITLE: Intercepting Request via CDP in C#\nDESCRIPTION: This C# code snippet shows how to intercept network requests using the Chrome DevTools Protocol (CDP) in Selenium.  It checks the request URL and modifies the HTTP method to `POST` if the URL contains \"example\".  This snippet depends on Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nsession.Network.RequestIntercepted += (sender, e) =>\n{\n    if (e.Request.Url.Contains(\"example\"))\n    {\n        e.Request.Method = \"POST\";\n        session.Network.ContinueInterceptedRequest(new NetworkContinueInterceptedRequestParameters { InterceptionId = e.InterceptionId });\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Remove All Credentials in Python\nDESCRIPTION: This python code removes all credentials from the authenticator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ndev_tools.webauthn.remove_all_credentials()\n\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window in Selenium\nDESCRIPTION: This code puts the browser window into fullscreen mode using Selenium WebDriver, similar to pressing F11 in most browsers. This will fill the entire screen.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_75\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.manage().window().fullscreen();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins - Python\nDESCRIPTION: This Python snippet sets the page margins using PrintOptions and PageMargin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.print_options import PrintOptions, PageMargin\n\nprint_options = PrintOptions()\nmargin = PageMargin()\nmargin.top = 1.0\nmargin.bottom = 1.0\nmargin.left = 1.0\nmargin.right = 1.0\nprint_options.page_margin = margin\n```\n\n----------------------------------------\n\nTITLE: Basic Page Object Creation in Selenium (Java)\nDESCRIPTION: Demonstrates the creation of a basic Page Object for the GitHub new issue page using Selenium WebDriver in Java. It includes methods for setting various fields on the issue creation form and submitting the form.  It uses `driver.findElement` to locate elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.webdriver;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\n\npublic class EditIssue {\n\n  private final WebDriver driver;\n\n  public EditIssue(WebDriver driver) {\n    this.driver = driver;\n  }\n\n  public void setTitle(String title) {\n    WebElement field = driver.findElement(By.id(\"issue_title\")));\n    clearAndType(field, title);\n  }\n\n  public void setBody(String body) {\n    WebElement field = driver.findElement(By.id(\"issue_body\"));\n    clearAndType(field, body);\n  }\n\n  public void setHowToReproduce(String howToReproduce) {\n    WebElement field = driver.findElement(By.id(\"issue_form_repro-command\"));\n    clearAndType(field, howToReproduce);\n  }\n\n  public void setLogOutput(String logOutput) {\n    WebElement field = driver.findElement(By.id(\"issue_form_logs\"));\n    clearAndType(field, logOutput);\n  }\n\n  public void setOperatingSystem(String operatingSystem) {\n    WebElement field = driver.findElement(By.id(\"issue_form_operating-system\"));\n    clearAndType(field, operatingSystem);\n  }\n\n  public void setSeleniumVersion(String seleniumVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_selenium-version\"));\n    clearAndType(field, logOutput);\n  }\n\n  public void setBrowserVersion(String browserVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_browser-versions\"));\n    clearAndType(field, browserVersion);\n  }\n\n  public void setDriverVersion(String driverVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_browser-driver-versions\"));\n    clearAndType(field, driverVersion);\n  }\n\n  public void setUsingGrid(String usingGrid) {\n    WebElement field = driver.findElement(By.id(\"issue_form_selenium-grid-version\"));\n    clearAndType(field, usingGrid);\n  }\n\n  public IssueList submit() {\n    driver.findElement(By.cssSelector(\"button[type='submit']\")).click();\n    return new IssueList(driver);\n  }\n\n  private void clearAndType(WebElement field, String text) {\n    field.clear();\n    field.sendKeys(text);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Elements By Tag Name - Kotlin\nDESCRIPTION: This code snippet demonstrates how to find all elements with a specific tag name using Selenium WebDriver in Kotlin. It initializes a WebDriver instance, navigates to a URL, finds all 'p' elements, and prints their text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_28\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.By\nimport org.openqa.selenium.firefox.FirefoxDriver\n\nfun main() {\n    val driver = FirefoxDriver()\n    try {\n        driver.get(\"https://example.com\")\n        // Get all the elements available with tag name 'p'\n        val elements = driver.findElements(By.tagName(\"p\"))\n        for (element in elements) {\n            println(\"Paragraph text:\" + element.text)\n        }\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Check Element Selected Status - Java\nDESCRIPTION: This snippet demonstrates how to check if a web element is selected on the page using Selenium WebDriver in Java. It finds an element by name and uses the isSelected() method to determine if it is selected, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"checkbox_input\"));\nboolean isSelected = element.isSelected();\nassertThat(isSelected).isTrue()\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to None in JavaScript\nDESCRIPTION: This snippet shows how to set the page load strategy to 'none' in JavaScript using Selenium. WebDriver waits until the initial page is downloaded.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nit('should not wait for page load', async () => {\n  let opts = {\n    pageLoadStrategy: 'none'\n  };\n  let options = new Options(opts);\n  driver = await new Builder().withCapabilities(options).build();\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Session Information for a Given Session\nDESCRIPTION: This example shows how to retrieve the session information for a given session ID using a GraphQL query.  The `curl` command sends the query to the Selenium Grid's GraphQL endpoint.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.en.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ session (id: \\\"<session-id>\\\") { id, capabilities, startTime, uri, nodeId, nodeUri, sessionDurationMillis, slot { id, stereotype, lastStarted } } } \"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Driver with Options - CSharp\nDESCRIPTION: This C# code demonstrates how to initialize a ChromeDriver with specific ChromeOptions. These options allow customization of the browser's behavior during the session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.zh-cn.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nChromeOptions options = new ChromeOptions();\ndriver = new ChromeDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Getting All Options in Kotlin\nDESCRIPTION: Demonstrates how to retrieve all options from a Select element in Kotlin. It uses the options property to return a list of WebElements representing the options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval options: List<WebElement> = select.options\n```\n\n----------------------------------------\n\nTITLE: Dotnet Add Package Selenium.WebDriver C#\nDESCRIPTION: This snippet shows the command to add the Selenium.WebDriver package to a C# project using the .NET CLI. It directly adds the Selenium WebDriver dependency, simplifying the process of including Selenium in .NET projects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.pt-br.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Selenium.WebDriver\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtualAuthenticatorOptions in Java\nDESCRIPTION: This snippet shows how to initialize VirtualAuthenticatorOptions in Java to configure a virtual authenticator with specific properties such as protocol, transport, and whether it's resident key-supported or user-verifiable. These options are used when creating a virtual authenticator instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nVirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions()\n    .setProtocol(Protocol.CTAP2)\n    .setTransport(Transport.USB)\n    .setResidentKeySupported(true)\n    .setUserVerification(true);\n```\n\n----------------------------------------\n\nTITLE: Click and Release Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a click and release action (a standard click) on an element using Selenium. It combines moving the mouse to the center of an element with pressing and then releasing the left mouse button. This is the standard way to click an element. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\nActions actions = new Actions(driver);\nIWebElement element = driver.FindElement(By.Id(\"my-element\"));\nactions.Click(element).Perform();\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs in Python\nDESCRIPTION: This Python code snippet shows how to specify different logging levels for different modules.  It uses the `logging.getLogger()` method with the module name to get a specific module's logger. Standard Python logging library is used.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nlogger = logging.getLogger('selenium.webdriver.remote.remote_connection')\nlogger.setLevel(logging.WARNING)\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to Normal in JavaScript\nDESCRIPTION: This snippet shows how to set the page load strategy to 'normal' in JavaScript using Selenium. WebDriver waits until the load event is fired.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nit('should wait for full page load', async () => {\n  let opts = {\n    pageLoadStrategy: 'normal'\n  };\n  let options = new Options(opts);\n  driver = await new Builder().withCapabilities(options).build();\n});\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - Python\nDESCRIPTION: This Python snippet demonstrates how to retrieve the position (x and y coordinates) of the browser window using Selenium WebDriver. It shows two approaches: accessing each coordinate individually and storing the position in a dictionary.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n    # Access each dimension individually\nx = driver.get_window_position().get('x')\ny = driver.get_window_position().get('y')\n\n    # Or store the dimensions and query them later\nposition = driver.get_window_position()\nx1 = position.get('x')\ny1 = position.get('y')\n```\n\n----------------------------------------\n\nTITLE: Getting Credential in C#\nDESCRIPTION: This code snippet returns the list of credentials that the authenticator possesses in C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nbyte[] bytes = new byte[16];\nRandom rand = new Random();\nrand.NextBytes(bytes);\nCredential cred = new Credential()\n{\n    Id = bytes,\n    Algorithm = Algorithm.Es256,\n    UserHandle = bytes,\n    ResidentKey = true\n};\n\n((IHasAuthentication)driver).AddVirtualAuthenticatorCredential(authenticator, cred);\nList<Credential> credentials = ((IHasAuthentication)driver).GetVirtualAuthenticatorCredentials(authenticator);\nAssert.That(credentials.Count, Is.GreaterThan(0));\n```\n\n----------------------------------------\n\nTITLE: Check Element Displayed Status - CSharp\nDESCRIPTION: Demonstrates how to check if a web element is displayed on a webpage using C# and Selenium WebDriver. The `Displayed` property returns a boolean indicating the visibility of the element. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"email_input\"));\nAssert.That(element.Displayed, Is.True);\n\n```\n\n----------------------------------------\n\nTITLE: Find All Elements by Tag Name in C#\nDESCRIPTION: This snippet retrieves all web elements with the tag name 'li' in C# using Selenium WebDriver. The `FindElements` method returns a read-only list of all matching elements. An empty list is returned if no matching elements are found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_21\n\nLANGUAGE: CSharp\nCODE:\n```\nIReadOnlyList<IWebElement> plants = driver.FindElements(By.TagName(\"li\"));\n```\n\n----------------------------------------\n\nTITLE: Disable Log Truncation in Firefox with Selenium (Python)\nDESCRIPTION: This Python code snippet shows how to disable log truncation in Firefox using Selenium.  By setting the 'log.truncate' preference to False, complete logs will be captured.  Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\noptions.set_preference(\"log.truncate\", False)\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value - JavaScript\nDESCRIPTION: This snippet demonstrates how to get a CSS property value of a web element using Selenium WebDriver in JavaScript. It finds an element by ID and uses the getCssValue() method to retrieve the value of the 'background-color' property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst link = await driver.findElement(By.id('namedColor'))\nexpect(await link.getCssValue('background-color')).toBe('rgba(0, 0, 255, 1)')\n```\n\n----------------------------------------\n\nTITLE: Setting Background using PrintOptions in Python\nDESCRIPTION: This code snippet demonstrates how to set whether background colors and images appear using the PrintOptions class in Python. The `background` attribute is set to `True`. The `background` is confirmed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.background = True\nassert print_options.background is True\n```\n\n----------------------------------------\n\nTITLE: De-selecting Option by Value in Select List - Java\nDESCRIPTION: This Java snippet demonstrates how to de-select an option in a multiple select list by its value using Selenium WebDriver. It assumes that you have already initialized the WebDriver and located the select element. The code creates a `Select` object from the `WebElement` and calls `deselectByValue()` with the value of the option to de-select. Before de-selecting, the list is cleared.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_42\n\nLANGUAGE: java\nCODE:\n```\nselect.deselectAll();\nselect.deselectByValue(\"Volvo\");\n```\n\n----------------------------------------\n\nTITLE: Iterating Through WebElements Collection - CSharp\nDESCRIPTION: This C# snippet uses Selenium to find all elements with the tag name 'p' on a webpage and then iterates through the resulting list, printing the text content of each element.  It initializes a FirefoxDriver, navigates to a specified URL, retrieves the elements using `driver.FindElements`, and prints the text content of each element in a loop.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing System.Collections.Generic;\n\nnamespace FindElementsExample {\n class FindElementsExample {\n  public static void Main(string[] args) {\n   IWebDriver driver = new FirefoxDriver();\n   try {\n    // Navegar até a URL\n    driver.Navigate().GoToUrl(\"https://example.com\");\n\n    // Obtém todos os elementos disponiveis com o nome da tag 'p'\n    IList < IWebElement > elements = driver.FindElements(By.TagName(\"p\"));\n    foreach(IWebElement e in elements) {\n     System.Console.WriteLine(e.Text);\n    }\n\n   } finally {\n    driver.Quit();\n   }\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot - Selenium WebDriver - C#\nDESCRIPTION: This snippet takes a screenshot of the current browser window using the Selenium WebDriver API in C# and saves it to a file.  Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_55\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\nusing OpenQA.Selenium.Support.UI;\n\n    var driver = new ChromeDriver();\n    driver.Navigate().GoToUrl(\"http://www.example.com\");\n    Screenshot screenshot = (driver as ITakesScreenshot).GetScreenshot();\n    screenshot.SaveAsFile(\"screenshot.png\", ScreenshotImageFormat.Png); // Format values are Bmp, Gif, Jpeg, Png, Tiff\n```\n\n----------------------------------------\n\nTITLE: Pausing Actions API in Python\nDESCRIPTION: This code snippet demonstrates how to pause between actions using the Actions API in Python. It creates an ActionChains object, moves to an element, pauses for a specified duration, and then performs the actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.pt-br.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nactions = ActionChains(driver)\nactions.move_to_element(element)\n    .pause(1)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to Eager in CSharp\nDESCRIPTION: This snippet shows how to set the page load strategy to 'eager' in C# using Selenium. WebDriver waits until the DOMContentLoaded event is fired.\nDependencies: Selenium WebDriver and Chrome driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace pageLoadStrategy {\n  class pageLoadStrategy {\n    public static void Main(string[] args) {\n      var chromeOptions = new ChromeOptions();\n      chromeOptions.PageLoadStrategy = PageLoadStrategy.Eager;\n      IWebDriver driver = new ChromeDriver(chromeOptions);\n      try {\n        driver.Navigate().GoToUrl(\"https://example.com\");\n      } finally {\n        driver.Quit();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Credential in JavaScript\nDESCRIPTION: This code adds a credential to the virtual authenticator in JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst credential = {\n  id: Buffer.from('some_credential_id', 'utf8'),\n  type: 'public-key',\n  // Other credential properties can be set here\n};\n\nawait driver.addVirtualAuthenticatorCredential(authenticator, credential);\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Tag Name in Selenium\nDESCRIPTION: This code demonstrates how to locate a web element using its HTML tag name in Selenium WebDriver. It initializes a ChromeDriver instance and uses the `findElement` method with `By.tagName(\"a\")` to find the first link element on the page. The example is provided in multiple languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.tagName(\"a\"));\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element in Java\nDESCRIPTION: This Java snippet performs a drag and drop operation from a source element to a target element. It uses the Actions class and requires a WebDriver instance, along with WebElement instances for the source and target.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_60\n\nLANGUAGE: java\nCODE:\n```\nWebElement source = driver.findElement(By.id(\"draggable\"));\nWebElement target = driver.findElement(By.id(\"droppable\"));\n\nActions actions = new Actions(driver);\nactions.dragAndDrop(source, target).perform();\n```\n\n----------------------------------------\n\nTITLE: Context Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a context click action (right-click) on an element using Selenium. It combines moving the mouse to the center of an element with pressing and releasing the right mouse button (button 2). This opens the context menu. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"my-element\"))\nActions(driver).contextClick(element)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Color Objects with from_string\nDESCRIPTION: This snippet shows how to create Color objects using basic color names in Ruby with the from_string method. It covers creating color objects for black, chocolate, and hotpink.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nBLACK = Color.from_string('black')\nCHOCOLATE = Color.from_string('chocolate')\nHOTPINK = Color.from_string('hotpink')\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid with Java 11 HTTP Client (Java)\nDESCRIPTION: This command starts Selenium Grid in standalone mode using the Java 11 HTTP client. It requires downloading the selenium-http-jdk-client jar file and making it available in the Grid jar's classpath using the --ext parameter.  It also sets the webdriver.http.factory property to jdk-http-client.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.zh-cn.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\njava -Dwebdriver.http.factory=jdk-http-client -jar selenium-server-<version>.jar --ext selenium-http-jdk-client-<version>.jar standalone\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element by Amount - Python\nDESCRIPTION: This Python code snippet demonstrates how to scroll from an element by a given amount using Selenium's Actions API and Wheel class. It takes an element, delta x, and delta y values as input. If the element is out of the viewport, it will first be scrolled into view. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.NAME, \"food\")\nactions = ActionBuilder(driver)\nactions.scroll_from_origin(origin=element, x=50, y=100).perform()\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Event Bus (Shell)\nDESCRIPTION: This command starts the Event Bus component, which enables internal communication between different Grid components in a Distributed Grid setup. Default ports are 4442, 4443, and 5557.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.en.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar event-bus --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443 --port 5557\n```\n\n----------------------------------------\n\nTITLE: Setting Silent Mode for Internet Explorer in JavaScript\nDESCRIPTION: This snippet illustrates how to set the 'silent' capability for Internet Explorer using JavaScript with Selenium WebDriver.  The capability is set on a Capabilities object before building the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {Builder,By, Capabilities} = require('selenium-webdriver');\nlet caps = Capabilities.ie();\ncaps.set('silent', true);\n\n(async function example() {\n    let driver = await new Builder()\n        .forBrowser('internet explorer')\n        .withCapabilities(caps)\n        .build();\n    try {\n        await driver.get('http://www.google.com/ncr');\n    }\n    finally {\n        await driver.quit();\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Get Selenium Grid Session Map Configuration Help\nDESCRIPTION: This command retrieves information on how to configure session storage for Selenium Grid, including options like Redis and JDBC-SQL databases. It uses the 'info sessionmap' command to guide the setup process.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.zh-cn.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar info sessionmap\n```\n\n----------------------------------------\n\nTITLE: Full JavaScript Example (Mocha)\nDESCRIPTION: This full JavaScript example demonstrates a Selenium test using Mocha and Chai. It navigates to a website and asserts the title. Requires selenium-webdriver, mocha, and chai.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst {Builder} = require('selenium-webdriver');\nconst chrome = require('selenium-webdriver/chrome');\nconst {expect} = require('chai');\n\nlet driver;\n\nbeforeEach(async function() {\n  driver = await new Builder().forBrowser('chrome').setChromeOptions(new chrome.Options()).build();\n});\n\nit('works', async function() {\n  await driver.get('https://www.selenium.dev/selenium/web/index.html');\n  expect(await driver.getTitle()).to.eq('SeleniumHQ Browser Automation');\n});\n\nafterEach(async function() {\n  await driver.quit();\n});\n```\n\n----------------------------------------\n\nTITLE: Starting a Safari Session (Python)\nDESCRIPTION: This code shows how to start a Safari session in Python with basic defined options. It initializes options and then creates a Safari driver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.en.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\noptions = Options()\ndriver = webdriver.Safari(options=options)\n```\n\n----------------------------------------\n\nTITLE: Executing Selenium Manager with Chrome Beta and Debug Mode (Shell)\nDESCRIPTION: This snippet shows how to use Selenium Manager to manage the Chrome beta version.  The `--browser-version beta` flag tells Selenium Manager to locate and manage the beta version of Chrome and its corresponding ChromeDriver.  Debug flag is used to print more information about the execution. If Chrome beta is not found, Selenium Manager will download it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.pt-br.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ ./selenium-manager --browser chrome --browser-version beta --debug\n```\n\n----------------------------------------\n\nTITLE: Disown Handles in Browsing Context - JavaScript\nDESCRIPTION: This snippet shows how to disown handles in a browsing context using JavaScript and the WebDriver BiDi API. It uses the `script.disown` method to release object handles within a given context. The object handles and the browsing context ID are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('disown handles in browsing context', async () => {\n  await connection.script.disown({\n    handles: ['handle'],\n    target: { context: contextId },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options from Select Element\nDESCRIPTION: This code retrieves all selected options from a <select> element using Selenium's Select class. The `getAllSelectedOptions()` method returns a list of WebElements representing the selected options within the select list.  For single selects, this will be a list with one element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nList<WebElement> selectedOptions = select.getAllSelectedOptions();\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Driver Log Level\nDESCRIPTION: This code demonstrates how to set the logging level for the ChromeDriver service. The available levels are: ALL, DEBUG, INFO, WARNING, SEVERE, and OFF. Setting the log level allows for filtering the verbosity of the logs.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_36\n\nLANGUAGE: Python\nCODE:\n```\nservice = Service(log_level=\"DEBUG\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Permanent Credential in C#\nDESCRIPTION: This snippet demonstrates creating a permanent credential in C# using the AddCredential method. It sets the Relying Party ID, user ID, and public key credential type.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nawait session.Security.AddCredential(\n    new Credential(\"rpId\", \"user1\", PublicKeyCredentialType.PublicKey));\n```\n\n----------------------------------------\n\nTITLE: Excluding Switches in Edge Options - JavaScript\nDESCRIPTION: Shows how to exclude specific switches from Edge options in JavaScript.\nThis is useful for overriding default behavior or disabling certain features.\nDependencies: Selenium WebDriver, EdgeDriver, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nopts.excludeSwitches = ['enable-automation'];\n```\n\n----------------------------------------\n\nTITLE: Get realm by type - Java\nDESCRIPTION: This Java code retrieves a realm by its type.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void getRealmByType() {\n        BrowsingContext browsingContext = new BrowsingContext(driver, driver.getWindowHandle());\n        List<RealmInfo> realmInfo = browsingContext.getRealms(null, \"window\");\n        assertTrue(realmInfo.size() > 0);\n    }\n```\n\n----------------------------------------\n\nTITLE: Node Configuration with Browser and Session Limits TOML\nDESCRIPTION: Configures a Selenium Grid node to only use Chrome and Firefox drivers, limiting the maximum number of concurrent sessions to 3. This TOML snippet demonstrates how to restrict the available drivers and set a session limit.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.zh-cn.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\ndrivers = [\"chrome\", \"firefox\"]\nmax-sessions = 3\n```\n\n----------------------------------------\n\nTITLE: Setting Log Truncation in Firefox with Selenium (Python)\nDESCRIPTION: This Python code snippet demonstrates how to disable log truncation in Firefox using Selenium. It sets the `log.truncate` preference to `False` within the Firefox options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\noptions.set_preference(\"log.truncate\", False)\n```\n\n----------------------------------------\n\nTITLE: Finding Elements by Tag Name in JavaScript\nDESCRIPTION: This JavaScript code snippet finds all elements with a given tag name on a webpage using Selenium WebDriver. It navigates to a URL, finds all elements with the CSS selector 'p', and prints the text of each element to the console. It requires the selenium-webdriver npm package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {Builder, By} = require('selenium-webdriver');\n(async function example() {\n    let driver = await new Builder().forBrowser('firefox').build();\n    try {\n        // Navigate to Url\n        await driver.get('https://www.example.com');\n\n        // Get all the elements available with tag 'p'\n        let elements = await driver.findElements(By.css('p'));\n        for(let e of elements) {\n            console.log(await e.getText());\n        }\n    }\n    finally {\n        await driver.quit();\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript Tests with Mocha\nDESCRIPTION: This command shows how to execute JavaScript tests using Mocha.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nmocha runningTests.spec.js\n```\n\n----------------------------------------\n\nTITLE: Intercepting Response Information - CSharp\nDESCRIPTION: Demonstrates how to intercept response information using Selenium and CDP in C#.  This registers a FetchHandler to intercept requests containing 'simple_page' and retrieve the response body for logging. It depends on Selenium WebDriver with CDP support.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\nEventHandler<Fetch.RequestPausedEventArgs> requestPausedHandler = (sender, e) =>\n            {\n                Fetch.GetResponseBodyResponse body = ((IHasCdp)driver).ExecuteCdpCommand<Fetch.GetResponseBodyResponse>(\"Fetch.getResponseBody\", new Dictionary<string, object>() { { \"requestId\", e.RequestId } });\n                Console.WriteLine(body.Body);\n                ((IHasCdp)driver).ExecuteCdpCommand(\"Fetch.continueRequest\", new Dictionary<string, object>() { { \"requestId\", e.RequestId } });\n            };\n            session.Fetch.RequestPaused += requestPausedHandler;\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Add-ons in Firefox with Selenium (CSharp)\nDESCRIPTION: This C# snippet uninstalls a Firefox add-on given its ID.  The `RemoveAddon` method is used to uninstall the addon.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.RemoveAddon(\"addon@id\");\n```\n\n----------------------------------------\n\nTITLE: Printing with BrowsingContext in Selenium Java\nDESCRIPTION: This Java code snippet demonstrates how to print a page using BrowsingContext and retrieve the base64 encoded PDF.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\nBiDi bidi = driver.getDevTools();\nBrowsingContext context = bidi.getBrowsingContext();\nString pdf = context.print(new PrintOptions(), Optional.empty());\n\nassertNotNull(pdf);\nassertFalse(pdf.isEmpty());\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Driver Service Log Level\nDESCRIPTION: This code snippet demonstrates how to set the log level for the Firefox driver service, allowing control over the verbosity of the logs.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_23\n\nLANGUAGE: Java\nCODE:\n```\nGeckoDriverService service = new GeckoDriverService.Builder()\n    .withLogLevel(FirefoxDriverLogLevel.DEBUG)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method with driver.quit() - JUnit (Kotlin)\nDESCRIPTION: This Kotlin code snippet demonstrates how to use the `@AfterAll` annotation in JUnit to define a tear-down method that calls `driver.quit()`. This ensures that the browser session is properly closed after all tests in a class have been executed, preventing resource leaks. JUnit is a common framework for testing Kotlin code as well.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\n/**\n * Example using JUnit\n * https://junit.org/junit5/docs/current/api/org/junit/jupiter/api/AfterAll.html\n */\n@AfterAll\nfun tearDown() {\n    driver.quit()\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset in Python\nDESCRIPTION: This Python code snippet demonstrates moving the mouse by a relative offset from its current position. It utilizes the ActionChains class and requires a WebDriver instance. The move_by_offset method takes x and y coordinates as parameters.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_55\n\nLANGUAGE: python\nCODE:\n```\naction = ActionChains(driver)\naction.move_by_offset(30, -10).perform()\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox Driver with Options\nDESCRIPTION: This code snippet demonstrates how to initialize a Firefox driver with basic options in Ruby. It shows the essential steps to create a FirefoxOptions object and use it when instantiating the FirefoxDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Firefox::Options.new\ndriver = Selenium::WebDriver.for :firefox, options: options\n```\n\n----------------------------------------\n\nTITLE: Implementing load() and isLoaded() methods in Selenium Java\nDESCRIPTION: This Java code snippet shows the implementation of the `load()` and `isLoaded()` methods required when extending the `LoadableComponent` in Selenium. The `load()` method navigates to the specified URL, while the `isLoaded()` method uses assertions to verify that the page has loaded correctly by checking the current URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.pt-br.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  @Override\n  protected void load() {\n    driver.get(\"https://github.com/SeleniumHQ/selenium/issues/new?assignees=&labels=I-defect%2Cneeds-triaging&projects=&template=bug-report.yml&title=%5B%F0%9F%90%9B+Bug%5D%3A+\");\n  }\n\n  @Override\n  protected void isLoaded() throws Error {\n    String url = driver.getCurrentUrl();\n    assertTrue(\"Not on the issue entry page: \" + url, url.endsWith(\"/new\"));\n  }\n```\n\n----------------------------------------\n\nTITLE: DOM Mutation Handlers in Python\nDESCRIPTION: This Python snippet demonstrates handling DOM mutations using Chrome DevTools Protocol (CDP) through Selenium.  It enables network tracking via CDP and sets up listeners for `requestWillBeSent` events.  A Selenium WebDriver instance connected to a Chrome browser is required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.zh-cn.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndriver.execute_cdp_cmd('Network.enable', {})\ndriver.execute_cdp_cmd('Network.setRequestInterception', {'patterns': [{'urlPattern': '*'}]})\n```\n\n----------------------------------------\n\nTITLE: Installing Add-ons in Firefox with Selenium (Java)\nDESCRIPTION: This Java snippet installs a signed Firefox add-on from a given file path. The `installExtension` method of the `driver` object is used to perform the installation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_32\n\nLANGUAGE: java\nCODE:\n```\ndriver.installExtension(Paths.get(\"/path/to/extension.xpi\"));\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element using Selenium Wheel (Python)\nDESCRIPTION: Scrolls from a specified element by a given amount.  Requires the element, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"idOfMyElement\")\nactions = ActionBuilder(driver)\nactions.scroll_from_origin(WheelInput.ORIGIN_ELEMENT, 20, 50, element=element)\nactions.perform()\n```\n\n----------------------------------------\n\nTITLE: Evaluate script in realm (Java)\nDESCRIPTION: This Java code snippet demonstrates how to evaluate a script within a realm using Selenium BiDi. It retrieves a realm within a browsing context and then evaluates the expression '1 + 1' within that realm, confirming that the result is 2.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void evaluateScriptInRealm() {\n        try (Bidi bidi = new Bidi(driver)) {\n            BrowsingContext browsingContext = new BrowsingContext(bidi, driver);\n            browsingContext.navigate(getUrl(\"formPage.html\"));\n\n            EvaluateResult realmResult = bidi.script().evaluate(\n                EvaluateParameters.builder()\n                    .setExpression(\"() => 1\")\n                    .setTarget(browsingContext.getId())\n                    .build(),\n                EvaluateResult.class);\n\n            String realm = ((StringHandle) realmResult.getResult()).getValue();\n\n            EvaluateResult result = bidi.script().evaluate(\n                EvaluateParameters.builder().setExpression(\"1 + 1\").setTarget(realm).build(),\n                EvaluateResult.class);\n\n            assertEquals(2L, result.getResult().getValue());\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Evaluate script in sandbox - Java\nDESCRIPTION: This Java code snippet evaluates a script within a specific sandbox using Selenium's BiDi API.  It sets a sandbox name and then executes the javascript code within that sandbox.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void evaluateScriptInSandbox() {\n        String url = getHtmlPage();\n        driver.get(url);\n        BrowsingContext browsingContext = new BrowsingContext(driver, driver.getWindowHandle());\n        ScriptResult result = browsingContext.evaluateFunction(\"1+1\", false, \"test\");\n        assertEquals(result.getResult().getNumber(), 2);\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Detach Option in Chrome\nDESCRIPTION: This code snippet demonstrates how to set the `detach` option to `true` in Chrome options, which keeps the browser open after the WebDriver session is closed. This is useful for debugging purposes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\noptions.detach = true;\nlet service = new chrome.ServiceBuilder(pathToChromeDriver).build();\nlet driver = await new Builder()\n  .setChromeOptions(options)\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Prompt in Java\nDESCRIPTION: This Java code snippet demonstrates how to interact with a JavaScript prompt dialog using Selenium WebDriver. It switches to the alert, sends keys to the prompt, and then accepts the alert.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nAlert alert = wait.until(ExpectedConditions.alertIsPresent());\nalert.sendKeys(\"Selenium\");\nalert.accept();\n```\n\n----------------------------------------\n\nTITLE: Matching Node A with Custom Capability in Selenium\nDESCRIPTION: This Java code creates ChromeOptions and sets a custom capability. It then creates a RemoteWebDriver instance, connects to the specified Selenium Grid Hub URL, and executes a simple test by navigating to a website and quitting the driver. Requires selenium-java dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.zh-cn.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setCapability(\"gsg:customcap\", true);\nWebDriver driver = new RemoteWebDriver(new URL(\"http://localhost:4444\"), options);\ndriver.get(\"https://selenium.dev\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Add-ons in Firefox with Selenium (JavaScript)\nDESCRIPTION: This snippet demonstrates how to uninstall a Firefox add-on using Selenium WebDriver in JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.uninstallAddon(extensionId);\nexpect(await driver.getAllAddons()).toEqual([])\n```\n\n----------------------------------------\n\nTITLE: Fetching Attribute Value JavaScript\nDESCRIPTION: This JavaScript snippet shows how to fetch the 'value' attribute of an element using Selenium WebDriver.  It finds the element by its name and uses the `getAttribute` method to retrieve the attribute value. The code asserts if the attribute value is as expected. Requires an initialized WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet element = await driver.findElement(By.name('email_input'));\nlet attribute = await element.getAttribute('value');\nexpect(attribute).toBe('');\nconsole.log(attribute);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Inventory Item\nDESCRIPTION: This HTML snippet represents a single inventory item within the products page. It includes the item's name, price, and an \"Add to cart\" button. This is the structure for the product component object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.ja.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Inventory Item -->\n<div class=\"inventory_item\">\n    <div class=\"inventory_item_name\">Backpack</div>\n    <div class=\"pricebar\">\n        <div class=\"inventory_item_price\">$29.99</div>\n        <button id=\"add-to-cart-backpack\">Add to cart</button>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop on Element with Selenium\nDESCRIPTION: This code performs a drag-and-drop operation from one element to another using Selenium WebDriver. It first clicks and holds the source element, then moves to the target element's location, and finally releases the mouse. It leverages the `dragAndDrop` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst draggable = await driver.findElement(By.id('draggable'));\nconst droppable = await driver.findElement(By.id('droppable'));\nawait driver.actions().dragAndDrop(draggable, droppable).perform();\n```\n\n----------------------------------------\n\nTITLE: Setting setWindowRect Capability in Python\nDESCRIPTION: This Python snippet sets the `setWindowRect` capability, which determines whether the remote end supports window resizing and repositioning commands. The capability is set using desired capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_44\n\nLANGUAGE: Python\nCODE:\n```\noptions = Options()\noptions.set_capability(\"setWindowRect\", True)\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Name with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a web element on a page using its NAME attribute with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.name()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.name(\"newsletter\"));\n```\n\n----------------------------------------\n\nTITLE: Message event - JavaScript\nDESCRIPTION: This JavaScript code snippet listens for script messages sent using `dispatchEvent`. It adds a listener and dispatches a custom event from the page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('message event', async () => {\n    const browsingContext = await new BrowsingContext(driver, tabId);\n    let message;\n    await browsingContext.script.on('message', (event) => {\n      message = event;\n    });\n\n    await driver.executeScript(\"window.dispatchEvent(new CustomEvent('message', {detail: 'hello'}));\", []);\n\n    await until(() => message !== undefined, 5000, 'Message wasn\\'t received');\n    expect(message.detail.value).toBe('hello');\n  });\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - JavaScript\nDESCRIPTION: Demonstrates how to set the browser window's position (top-left corner) to a specific x and y coordinate in JavaScript using Selenium WebDriver. The code uses the `setRect` function to define the new window rectangle.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// Move the window to the top left of the primary monitor\nawait driver.manage().window().setRect({ x: 0, y: 0 });\n```\n\n----------------------------------------\n\nTITLE: Setting Page Size in Selenium C#\nDESCRIPTION: This C# code snippet demonstrates how to set the page size to \"A4\" using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.PageSize = \"A4\";\n\nAssert.That(printOptions.PageSize, Is.EqualTo(\"A4\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Resident Credential in JavaScript\nDESCRIPTION: This JavaScript code creates a resident credential with specified user parameters and adds it to the virtual authenticator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst devtools = await driver.getDevTools()\nawait devtools.attachSession()\nconst params = {\n  userId: btoa('user1'),\n  userName: btoa('User 1'),\n  displayName: 'User One',\n}\n\nawait devtools.send('WebAuthn.addCredential', params)\n\n```\n\n----------------------------------------\n\nTITLE: Removing All Credentials in JavaScript\nDESCRIPTION: This snippet removes all credentials using JavaScript and the Selenium's DevTools API. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait devtools.removeAllCredentials()\n```\n\n----------------------------------------\n\nTITLE: Full Java Example (JUnit)\nDESCRIPTION: This full Java example demonstrates a Selenium test using JUnit.  It navigates to a website and asserts the title.  Requires WebDriverManager and JUnit dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_23\n\nLANGUAGE: java\nCODE:\n```\npackage dev.selenium.getting_started;\n\nimport io.github.bonigarcia.wdm.WebDriverManager;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class UsingSeleniumTest {\n\n    private WebDriver driver;\n\n    @BeforeEach\n    public void setup() {\n        WebDriverManager.chromedriver().setup();\n        driver = new ChromeDriver();\n    }\n\n    @AfterEach\n    public void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    public void eightComponents() {\n        driver.get(\"https://www.selenium.dev/selenium/web/index.html\");\n        Assertions.assertEquals(\"SeleniumHQ Browser Automation\", driver.getTitle());\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Drain Node (No Secret)\nDESCRIPTION: Drains a node in the Selenium Grid, allowing it to gracefully shut down after all running sessions have completed, when no registration secret was configured. No new sessions will be accepted.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.ja.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request POST 'http://<Router-URL>/se/grid/distributor/node/<node-id>/drain' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Comparing Color Objects\nDESCRIPTION: This snippet demonstrates how to compare two Color objects for equality in Ruby using the == operator. It shows how to verify if the background color of a login button matches a predefined color (HOTPINK).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_22\n\nLANGUAGE: Ruby\nCODE:\n```\nassert(login_button_background_colour == HOTPINK)\n```\n\n----------------------------------------\n\nTITLE: Safari Driver Logging (Python)\nDESCRIPTION: This code demonstrates how to enable Safari driver logging in Python. The log path is specified when initializing the Safari service.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.en.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nservice = service.Service(log_path=\"safari.log\")\n```\n\n----------------------------------------\n\nTITLE: Deselecting Options in JavaScript\nDESCRIPTION: Demonstrates how to deselect all selected options in a multi-select element using JavaScript. It calls the deselectAll() method on the Select object. This only works for multi-select lists.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nawait select.deselectAll();\n```\n\n----------------------------------------\n\nTITLE: Minimize Window - Selenium WebDriver - JavaScript\nDESCRIPTION: This snippet minimizes the browser window using the Selenium WebDriver API in JavaScript. It requires an await since it is asynchronous. Requires Selenium WebDriver package and Selenium 4 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.manage().window().minimize();\n```\n\n----------------------------------------\n\nTITLE: Getting All Options in Selenium CSharp\nDESCRIPTION: This snippet illustrates how to retrieve all options from a Select element in C#. It uses the `Options` property of the SelectElement object, returning a list of IWebElements representing each option.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\nReadOnlyCollection<IWebElement> options = select.Options;\n```\n\n----------------------------------------\n\nTITLE: Capturing JavaScript Exceptions Python\nDESCRIPTION: This Python snippet demonstrates how to capture JavaScript exceptions using Chrome DevTools Protocol (CDP) in Selenium.  It listens for `Runtime.exceptionThrown` events to retrieve exception details.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.ja.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n        driver.devtools.send(Runtime.enable())\n        driver.devtools.add_listener(Runtime.exception_thrown, lambda exception: print(exception))\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies via CDP in Java\nDESCRIPTION: This Java code snippet demonstrates how to set cookies using Chrome DevTools Protocol (CDP) with Selenium. It sets a cookie with a specific name, value, domain, path, and expiry. This snippet depends on Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nsession.sendCommand(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));\nsession.sendCommand(Network.setCookie(\n    SetCookie.create(\"foo\", \"bar\", Optional.of(\"localhost\"), Optional.of(\"/\"),\n        Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(),\n        Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(),\n        Optional.empty())));\n```\n\n----------------------------------------\n\nTITLE: Switch to Context (Java)\nDESCRIPTION: This Java code demonstrates how to switch to a specific context in Firefox using Selenium.  It retrieves a JavascriptExecutor and then executes a script to set the context. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_49\n\nLANGUAGE: java\nCODE:\n```\nJavascriptExecutor js = (JavascriptExecutor) driver;\njs.executeScript(\"Services.prefs.setStringPref('browser.content.context', arguments[0]);\", \"CHROME\");\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects\nDESCRIPTION: This code demonstrates how to create Color objects from various string representations such as HEX, RGB, RGBA, HSL, and HSLA in Kotlin. It shows how to define colors using the Color.fromString() method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nprivate val HEX_COLOUR = Color.fromString(\"#2F7ED8\")\nprivate val RGB_COLOUR = Color.fromString(\"rgb(255, 255, 255)\")\nprivate val RGB_COLOUR_PERCENT = Color.fromString(\"rgb(40%, 20%, 40%)\")\nprivate val RGBA_COLOUR = Color.fromString(\"rgba(255, 255, 255, 0.5)\")\nprivate val RGBA_COLOUR_PERCENT = Color.fromString(\"rgba(40%, 20%, 40%, 0.5)\")\nprivate val HSL_COLOUR = Color.fromString(\"hsl(100, 0%, 50%)\")\nprivate val HSLA_COLOUR = Color.fromString(\"hsla(100, 0%, 50%, 0.5)\")\n```\n\n----------------------------------------\n\nTITLE: Using Pen Actions in Selenium - Kotlin\nDESCRIPTION: This code snippet demonstrates how to use the Pen class in Selenium with Kotlin to simulate stylus input. It finds an element, then uses Actions to move the pen to the element, perform pen down, move by a specified offset, and then pen up.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.zh-cn.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"example\"))\n\nActions(driver).moveToElement(element)\n    .clickAndHold()\n    .moveByOffset(50, 50)\n    .release()\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - Kotlin\nDESCRIPTION: Demonstrates how to retrieve the browser window's position (top-left corner coordinates) in Kotlin using Selenium WebDriver. The code retrieves the x and y coordinates individually and also demonstrates storing the position in a `position` object for later use, allowing for flexibility in handling window position data.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_47\n\nLANGUAGE: kotlin\nCODE:\n```\n// Access each dimension individually\nval x = driver.manage().window().position.x\nval y = driver.manage().window().position.y\n\n// Or store the dimensions and query them later\nval position = driver.manage().window().position\nval x1 = position.x\nval y1 = position.y\n```\n\n----------------------------------------\n\nTITLE: Get All Realms - Java\nDESCRIPTION: This snippet retrieves all realms using Java and the WebDriver BiDi API. It utilizes the `Script.getAllRealms` method to obtain a list of all available realms. No specific input parameters are needed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nList<RealmInfo> allRealms = bidi.script().getAllRealms();\n```\n\n----------------------------------------\n\nTITLE: Capture Full Page Screenshot (Java)\nDESCRIPTION: This Java code snippet takes a full page screenshot using Firefox and Selenium. It casts the WebDriver to `Augmentable` to access the `getFullPageScreenshotAs` method, and saves the screenshot to a file.  Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_46\n\nLANGUAGE: java\nCODE:\n```\nFile output = ((Augmentable) driver).getFullPageScreenshotAs(OutputType.FILE);\n```\n\n----------------------------------------\n\nTITLE: Java Teardown Example (JUnit)\nDESCRIPTION: This Java snippet demonstrates tearing down a Selenium WebDriver instance after each test execution in JUnit. The `@AfterEach` annotation ensures that the `teardown` method is executed after each test, closing the WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nimport org.junit.jupiter.api.AfterEach;\n\n@AfterEach\npublic void teardown() {\n    driver.quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium CSharp\nDESCRIPTION: This snippet illustrates how to select an option in a Select element by its index in C#. It uses the `SelectByIndex()` method of the SelectElement object. The index is zero-based. It throws NoSuchElementException if the index is out of bounds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_32\n\nLANGUAGE: CSharp\nCODE:\n```\nselect.SelectByIndex(2);\n```\n\n----------------------------------------\n\nTITLE: DOM Mutation Handlers in Python using CDP\nDESCRIPTION: This Python code uses Chrome DevTools Protocol (CDP) to add a script that evaluates on new documents. It showcases using CDP to modify and handle DOM mutations, requiring a Selenium WebDriver instance with access to the CDP interface.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.en.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n        script_id = self.devtools.execute_cdp(\"Page.addScriptToEvaluateOnNewDocument\", {\n            'source': \"document.title='Python CDP'\"})\n\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtualAuthenticatorOptions in Java\nDESCRIPTION: This code snippet demonstrates how to initialize VirtualAuthenticatorOptions in Java. It sets various properties like protocol, domain, and flags to configure the virtual authenticator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nVirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions()\n  .setProtocol(Protocol.CTAP2)\n  .setDomain(\"localhost\")\n  .setResidentKeyRequired(true)\n  .setUserVerificationRequired(true);\n\n```\n\n----------------------------------------\n\nTITLE: Getting Element Colors in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to retrieve the color and background color of a web element using Selenium WebDriver and the Color class. It gets the CSS value of the 'color' and 'background-color' properties and converts them into Color objects for further comparison or conversion.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nval loginButtonColour = Color.fromString(driver.findElement(By.id(\"login\")).getCssValue(\"color\"))\n\nval loginButtonBackgroundColour = Color.fromString(driver.findElement(By.id(\"login\")).getCssValue(\"background-color\"))\n```\n\n----------------------------------------\n\nTITLE: Get Attribute Value Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates fetching the 'value' property of an email input element using Selenium WebDriver.  It navigates to a URL, finds the element by its name, and retrieves the attribute's value. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_47\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Navigate to URL\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n//fetch the value property associated with the textbox\nval attr = driver.findElement(By.name(\"email_input\")).getAttribute(\"value\")\n```\n\n----------------------------------------\n\nTITLE: Removing All Credentials in Python\nDESCRIPTION: This python code removes all credentials. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\ndevtools.remove_all_credentials()\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium Ruby\nDESCRIPTION: This snippet shows how to initialize a Select object in Ruby using a WebElement representing the select element. It requires the Selenium WebDriver gem. The `find_element` method is used to locate the select element before creating the Select object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nselect_element = @driver.find_element(name: 'selectomatic')\nselect = Selenium::WebDriver::Support::Select.new(select_element)\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies in Java\nDESCRIPTION: This code snippet demonstrates how to retrieve all cookies from the current browser context using Selenium WebDriver in Java. It navigates to a website, adds two cookies, and then retrieves all available cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\ndriver.get(\"https://www.example.com\");\nCookie cookie1 = new Cookie(\"test1\", \"cookie1\");\ndriver.manage().addCookie(cookie1);\nCookie cookie2 = new Cookie(\"test2\", \"cookie2\");\ndriver.manage().addCookie(cookie2);\n\n// Get all available cookies\nSet<Cookie> cookies = driver.manage().getCookies();\nfor (Cookie cookie : cookies) {\n    System.out.println(cookie.getName() + \":\" + cookie.getValue());\n}\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - JavaScript\nDESCRIPTION: Demonstrates how to retrieve the browser window's size in JavaScript using Selenium WebDriver. The code snippets show how to access the width and height individually and store the dimensions for later use, offering flexibility in how window size is handled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nAccess each dimension individually\nawait driver.manage().window().getRect().then(rect => {\n  console.log(rect.width);\n  console.log(rect.height);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n(or) store the dimensions and query them later\nawait driver.manage().window().getRect().then(rect => {\n  let size = rect\n  console.log(size.width);\n  console.log(size.height);\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Color Objects in Kotlin\nDESCRIPTION: This snippet shows how to directly compare two Color objects in Kotlin using the .equals() method. In this case, it compares the background color of a login button with a predefined 'HOTPINK' color.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nassert(loginButtonBackgroundColour.equals(HOTPINK))\n```\n\n----------------------------------------\n\nTITLE: Selenium Logger in Ruby\nDESCRIPTION: This snippet shows how to obtain the Selenium logger in Ruby using the `Selenium::WebDriver` module's class method. The logger class wraps the default `Logger` class and provides additional features. Requires the `selenium-webdriver` gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nlogger = Selenium::WebDriver.logger\n```\n\n----------------------------------------\n\nTITLE: Adding a Credential in C#\nDESCRIPTION: This C# code demonstrates adding a credential to a virtual authenticator instance. It uses `IDevTools` and `DevToolsSession` to call the AddCredential function, setting parameters like the Relying Party ID, user ID, and public key credential type.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nIDevTools devTools = ((IHasDevTools)driver).GetDevTools();\nDevToolsSession session = devTools.GetDevToolsSession();\n\nCredential credential = new Credential(\"rpId\", \"user1\", PublicKeyCredentialType.PublicKey);\nawait session.Security.AddCredential(credential);\n```\n\n----------------------------------------\n\nTITLE: Defining SecuredPage LoadableComponent in Selenium (Java)\nDESCRIPTION: This code defines `SecuredPage`, which inherits from `LoadableComponent`. It takes a WebDriver, a parent LoadableComponent, username, and password as input. The `load()` method first calls `get()` on the parent component, then navigates to the Google login page, enters the username and password, submits the form, and finally returns to the original URL.  The `isLoaded()` method checks for the presence of a \"multilogin-dropdown\" element to verify successful login.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.ja.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.webdriver;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\n\nimport static org.junit.Assert.fail;\n\npublic class SecuredPage extends LoadableComponent<SecuredPage> {\n\n  private final WebDriver driver;\n  private final LoadableComponent<?> parent;\n  private final String username;\n  private final String password;\n\n  public SecuredPage(WebDriver driver, LoadableComponent<?> parent, String username, String password) {\n    this.driver = driver;\n    this.parent = parent;\n    this.username = username;\n    this.password = password;\n  }\n\n  @Override\n  protected void load() {\n    parent.get();\n\n    String originalUrl = driver.getCurrentUrl();\n\n    // Sign in\n    driver.get(\"https://www.google.com/accounts/ServiceLogin?service=code\");\n    driver.findElement(By.name(\"Email\")).sendKeys(username);\n    WebElement passwordField = driver.findElement(By.name(\"Passwd\"));\n    passwordField.sendKeys(password);\n    passwordField.submit();\n\n    // Now return to the original URL\n    driver.get(originalUrl);\n  }\n\n  @Override\n  protected void isLoaded() throws Error {\n    // If you're signed in, you have the option of picking a different login.\n    // Let's check for the presence of that.\n\n    try {\n      WebElement div = driver.findElement(By.id(\"multilogin-dropdown\"));\n    } catch (NoSuchElementException e) {\n      fail(\"Cannot locate user name link\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ChromeOptions Headless After - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates setting headless mode using the `--headless=new` argument in Selenium. It initializes a Chrome driver with the specified headless option, navigates to selenium.dev, and quits the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/headless-is-going-away.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await env\n  .builder()\n  .setChromeOptions(options.addArguments('--headless=new'))\n  .build();\nawait driver.get('https://selenium.dev');\nawait driver.quit();\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Manager with Chrome and Debug Flag (bash)\nDESCRIPTION: This command invokes Selenium Manager to manage chromedriver for the Chrome browser. The `--debug` flag provides detailed output, showing the steps Selenium Manager takes to detect the browser, discover the appropriate driver version, download it, and identify the paths for both the driver and the browser. Assumes the selenium-manager executable is in the current directory.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.en.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./selenium-manager --browser chrome --debug\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes - Java\nDESCRIPTION: This Java snippet shows how to add pointer event attributes such as width, height, pressure, and tilt to a Pen action in Selenium. This allows for more realistic pen simulations. It requires Selenium 4.2 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.en.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"writable\"));\n\nPen pen = new Pen(driver, \"pen1\").width(20).height(30).pressure(0.8f).tiltX(45).tiltY(-60);\n\nnew Actions(driver)\n    .moveToElement(element, ElementOptions.offset(10, 10))\n    .pointerDown(pen)\n    .moveToElement(element, ElementOptions.offset(80, 40))\n    .pointerMove(pen)\n    .pointerUp(pen)\n    .perform();\n```\n\n----------------------------------------\n\nTITLE: Node Configuration TOML (Enabling Managed Downloads)\nDESCRIPTION: Enables managed downloads by the Node, causing the Node to save all files that were downloaded for a particular session into a temp directory, which can later be retrieved from the node.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.pt-br.md#_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[node]\nenable-managed-downloads = true\n```\n\n----------------------------------------\n\nTITLE: Scrolling Element into View with JavaScript - Selenium\nDESCRIPTION: This snippet uses `WebDriver.executeScript()` to scroll an element into view by executing a JavaScript function. This is useful when elements are obscured or outside the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/_index.zh-cn.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nWebDriver.executeScript('window.scrollBy(0,-250)')\n```\n\n----------------------------------------\n\nTITLE: Comparing Color Objects - Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to directly compare Color objects in Python using the `==` operator. It checks if the background color of a login button is equal to the predefined HOTPINK color.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nassert login_button_background_colour == HOTPINK\n```\n\n----------------------------------------\n\nTITLE: Removing JavaScript Exception Handler in Ruby\nDESCRIPTION: This snippet demonstrates how to remove a previously added JavaScript exception handler in Ruby using WebDriver BiDi. The stored listener id is used to remove the event listener using `remove_event_listener`.  It assumes that `add_event_listener` method was used before and returned handler_id.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.pt-br.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nlistener = driver.add_event_listener('script.exception_thrown') do |params, context|\n  pp params\nend\ndriver.remove_event_listener(listener)\n```\n\n----------------------------------------\n\nTITLE: Creating Resident Credential in Python\nDESCRIPTION: This code shows how to create a resident credential in Python, setting the user ID, name, and display name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndev_tools = driver.devtools\ndev_tools.create_session()\noptions = VirtualAuthenticatorOptions(protocol=Protocol.CTAP2)\nauthenticator = dev_tools.webauthn.add_virtual_authenticator(options)\n\nparams = PublicKeyCredentialParams(\n    user_id=base64.b64encode(b\"user1\").decode(\"utf-8\"),\n    user_name=base64.b64encode(b\"User 1\").decode(\"utf-8\"),\n    display_name=\"User One\",\n)\ndev_tools.webauthn.add_credential(params)\n\n```\n\n----------------------------------------\n\nTITLE: Querying Current Requests in New Session Queue\nDESCRIPTION: This example demonstrates how to query the number of current requests in the New Session Queue.  The request is sent to the GraphQL endpoint using `curl`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.en.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ sessionsInfo { sessionQueueRequests } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - Selenium WebDriver - Ruby\nDESCRIPTION: This snippet retrieves the x and y coordinates of the top-left corner of the browser window using the Selenium WebDriver API in Ruby.  Requires the selenium-webdriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\n    #Access each dimension individually\nx = driver.manage.window.position.x\ny = driver.manage.window.position.y\n\n    # Or store the dimensions and query them later\nrect  = driver.manage.window.rect\nx1 = rect.x\ny1 = rect.y\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Edge Options - Python\nDESCRIPTION: Shows how to add command-line arguments to the Edge options in Python.\nThis snippet allows customizing the Edge browser's behavior by setting specific arguments.\nDependencies: Selenium WebDriver, Edge, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\noptions.add_argument(\"--start-maximized\")\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset - Selenium Wheel Java\nDESCRIPTION: This snippet demonstrates how to scroll from an offset of the viewport using Selenium's Wheel actions in Java.  An offset is specified from the upper left corner of the current viewport. After the origin point is determined, the page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nnew Actions(driver)\n  .scroll(WheelInput.ScrollOrigin.viewport(), 10, 10, 0, 0)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Get Element Location and Size - Ruby\nDESCRIPTION: This snippet demonstrates how to get the location and size of a web element using Selenium WebDriver in Ruby. It finds an element by name and uses the rect method to retrieve a struct containing its x, y, width, and height.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nrange_input = driver.find_element(name: 'range_input')\nexpect(range_input.rect.x).to eq 8\n```\n\n----------------------------------------\n\nTITLE: Setting acceptInsecureCerts Capability in Java\nDESCRIPTION: This code snippet demonstrates how to set the `acceptInsecureCerts` capability to true in Java using ChromeOptions. This allows the browser to trust invalid or expired TLS certificates during the session. This capability affects the entire session once set.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_27\n\nLANGUAGE: Java\nCODE:\n```\noptions.setAcceptInsecureCerts(true);\n```\n\n----------------------------------------\n\nTITLE: Closing Window and Switching Back - Selenium WebDriver\nDESCRIPTION: Illustrates how to close the current window or tab and switch back to the previously active window using Selenium WebDriver. It's crucial to switch back to a valid window handle to avoid a 'No Such Window Exception'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\n//Close the tab or window\ndriver.close()\n\n//Switch back to the old tab or window\ndriver.switchTo().window(originalWindow)\n\n```\n\n----------------------------------------\n\nTITLE: Enable BiDi in JavaScript\nDESCRIPTION: This code snippet shows how to enable BiDi in JavaScript. The 'enableBidi()' function is called on the Options object to enable the functionality needed for bidirectional communication.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.zh-cn.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nOptions().enableBidi();\n```\n\n----------------------------------------\n\nTITLE: Set User Verified in Java\nDESCRIPTION: This Java code sets whether the authenticator will simulate success or failure on user verification.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_35\n\nLANGUAGE: java\nCODE:\n```\ndevTools.getDomains().webAuthn().setUserVerified(true);\n\n```\n\n----------------------------------------\n\nTITLE: Standalone Server Configuration TOML\nDESCRIPTION: Configures a standalone Selenium Grid server with a specific port (4449) and session request timeout (500 seconds).  This example demonstrates how to set server and session queue options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.pt-br.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[server]\nport = 4449\n\n[sessionqueue]\nsession-request-timeout = 500\n```\n\n----------------------------------------\n\nTITLE: Ruby Selenium WebDriver Installation\nDESCRIPTION: Installs the selenium-webdriver gem version 4.4.0 using gem, the Ruby package manager. This command is executed from the command line or terminal.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ngem install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Add-ons in Firefox with Selenium (Ruby)\nDESCRIPTION: This snippet demonstrates how to uninstall a Firefox add-on using Selenium WebDriver in Ruby. The `uninstall_addon` method is used with the addon's id.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\n@driver.uninstall_addon(id)\n```\n\n----------------------------------------\n\nTITLE: Evaluate Script in Realm - Java\nDESCRIPTION: This snippet demonstrates how to evaluate a script within a realm using Java and the WebDriver BiDi API. It employs the `Script.evaluate` method to execute a JavaScript expression within a specified realm. A valid realm ID is required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nBiDi bidi = ((HasBiDi) driver).getBiDi();\n\n        BrowsingContext browsingContext = new BrowsingContext(contextId);\n        Script.EvaluateOptions options = new Script.EvaluateOptions();\n        options.setRealm(realmId);\n\n        Script.EvaluateResult result = bidi.script().evaluate(browsingContext, \"1+1\", options);\n\n        assertEquals(2, result.getResult().getValue());\n```\n\n----------------------------------------\n\nTITLE: Key Up Action in Selenium (Java)\nDESCRIPTION: Demonstrates how to simulate releasing a key using the Actions API in Java. This example shows how to release the SHIFT key on an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nWebElement input = driver.findElement(By.tagName(\"input\"));\nActions actions = new Actions(driver);\nactions.keyDown(input, Keys.SHIFT)\n    .sendKeys(input, \"text\")\n    .keyUp(input, Keys.SHIFT)\n    .perform();\n```\n\n----------------------------------------\n\nTITLE: Setting acceptInsecureCerts - Python\nDESCRIPTION: This Python snippet demonstrates how to set the acceptInsecureCerts capability to true.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\noptions = ChromeOptions()\noptions.accept_insecure_certs = True\n```\n\n----------------------------------------\n\nTITLE: Delete Session on Node (No Secret)\nDESCRIPTION: This snippet deletes a session directly on a node, terminating the WebDriver session.  Used when no registration secret is configured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.zh-cn.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://<node-URL>/se/grid/node/session/<session-id>' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Launching Selenium Grid with HtmlUnit Remote Extension\nDESCRIPTION: This snippet demonstrates how to launch a Selenium Grid using the `selenium-server` JAR and including the `htmlunit-remote` grid extension. It specifies the `--ext` option to add the necessary artifacts to the grid class path, enabling Selenium 4 Grid to provide remote sessions of HtmlUnitDriver. The configuration file `htmlunit.toml` is also referenced.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2024/htmlunit-remote-for-selenium-4-grid.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava -jar selenium-server-<version>.jar --ext htmlunit-remote-<version>-grid-extension.jar standalone --config htmlunit.toml\n```\n\n----------------------------------------\n\nTITLE: Key Down Action in Selenium (JavaScript)\nDESCRIPTION: Demonstrates how to simulate pressing a key using the Actions API in JavaScript. This example shows how to press the SHIFT key on an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst element = await driver.findElement(By.tagName('input'));\nconst actions = driver.actions({async: true});\nawait actions.keyDown(Key.SHIFT, element)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset - Selenium Wheel CSharp\nDESCRIPTION: This snippet demonstrates how to scroll from an offset of the viewport using Selenium's Wheel actions in C#. An offset is specified from the upper left corner of the current viewport. After the origin point is determined, the page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nnew Actions(driver)\n    .ScrollFromOrigin(WheelInput.ScrollOrigin.FromViewport(), 10, 10)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - Normal - Python\nDESCRIPTION: This Python snippet shows how to set the page load strategy to 'normal' using ChromeOptions. An options instance is created and the page load strategy configured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\noptions = ChromeOptions()\noptions.page_load_strategy = PageLoadStrategy.NORMAL\n```\n\n----------------------------------------\n\nTITLE: Python Selenium Manager Usage (With)\nDESCRIPTION: This Python code snippet shows how to use Selenium Manager to manage ChromeDriver in Python. Selenium Manager automates the process of driver discovery and setup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.ja.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\n\ndriver = webdriver.Chrome()\ndriver.get(\"https://www.selenium.dev/\")\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Finding Elements From Element in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to find child elements within a specific parent element using Selenium WebDriver. It initializes a ChromeDriver, navigates to a URL, finds an element with the tag name 'div', then finds all 'p' elements within that 'div', and prints their text content. It requires the Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_33\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.By\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://example.com\")\n\n        // Get element with tag name 'div'\n        val element = driver.findElement(By.tagName(\"div\"))\n\n        // Get all the elements available with tag name 'p'\n        val elements = element.findElements(By.tagName(\"p\"))\n        for (e in elements) {\n            println(e.text)\n        }\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait with Selenium Ruby\nDESCRIPTION: This code snippet shows how to set an implicit wait in Selenium using Ruby. The `implicitly_wait` method is called on the WebDriver instance with the number of seconds to wait.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.ja.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.timeouts.implicit_wait = 10\n```\n\n----------------------------------------\n\nTITLE: Get Element Text in Ruby\nDESCRIPTION: This code snippet demonstrates how to retrieve the text of a web element using Selenium WebDriver in Ruby. It uses the `text` method of the WebElement class. The method returns the visible text of the element as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_39\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'get text' do\n  expect(driver.find_element(id: 'justanotherlink').text).to eq 'just another link'\nend\n```\n\n----------------------------------------\n\nTITLE: Creating and Logging in a User (Java)\nDESCRIPTION: This snippet demonstrates how to create a user with specific permissions using a UserFactory and then log in as that user. It assumes the existence of a UserFactory and related classes. The loginAs method returns an AccountPage object for further interaction.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// Create a user who has read-only permissions--they can configure a unicorn,\n// but they do not have payment information set up, nor do they have\n// administrative privileges. At the time the user is created, its email\n// address and password are randomly generated--you don't even need to\n// know them.\nUser user = UserFactory.createCommonUser(); //This method is defined elsewhere.\n\n// Log in as this user.\n// Logging in on this site takes you to your personal \"My Account\" page, so the\n// AccountPage object is returned by the loginAs method, allowing you to then\n// perform actions from the AccountPage.\nAccountPage accountPage = loginAs(user.getEmail(), user.getPassword());\n```\n\n----------------------------------------\n\nTITLE: Deleting a Named Cookie - CSharp\nDESCRIPTION: This code snippet demonstrates how to delete a cookie by name using Selenium WebDriver in C#. It adds a cookie and then deletes it using `driver.Manage().Cookies.DeleteCookieNamed()`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\nCookie cookie = new Cookie(\"test1\", \"cookie1\");\ndriver.Manage().Cookies.AddCookie(cookie);\ndriver.Manage().Cookies.DeleteCookieNamed(\"test1\");\n```\n\n----------------------------------------\n\nTITLE: Getting a Named Cookie - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to retrieve a specific cookie by its name in Selenium WebDriver. It navigates to a URL, adds a cookie, and then retrieves it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.get('https://www.example.com/');\nawait driver.manage().addCookie({name: 'foo', value: 'bar'});\nawait driver.manage().getCookie('foo');\n```\n\n----------------------------------------\n\nTITLE: Setting Page Range in Selenium Java\nDESCRIPTION: This Java code snippet demonstrates how to set the page range to \"2-4\" using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setPageRanges(\"2-4\");\n\nassertThat(printOptions.getPageRanges()).isEqualTo(\"2-4\");\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies with Selenium WebDriver (Ruby)\nDESCRIPTION: This code snippet demonstrates how to delete all cookies in the current browser context using Selenium WebDriver in Ruby. It requires the 'selenium-webdriver' gem. The code navigates to a specific URL, adds two cookies, and then deletes all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  driver.manage.add_cookie(name: \"test1\", value: \"cookie1\")\n  driver.manage.add_cookie(name: \"test2\", value: \"cookie2\")\n\n  # deletes all cookies\n  driver.manage.delete_all_cookies\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Unsigned Add-ons in Firefox with Selenium (CSharp)\nDESCRIPTION: This C# snippet installs an unsigned Firefox add-on from a directory.  The `InstallAddon` method is used with the `temporary=True` parameter.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.InstallAddon(addonFolder, true);\n```\n\n----------------------------------------\n\nTITLE: Clear Element with Selenium WebDriver in Java\nDESCRIPTION: This Java code snippet demonstrates how to locate an element by name and clear its content using Selenium WebDriver. It requires a WebDriver instance already initialized and a web page loaded.  The element must be editable and resettable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\");\nWebElement element = driver.findElement(By.name(\"email_input\"));\nelement.clear();\n\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to release all currently depressed keys and pointer buttons using the `clearActions` method, cleaning up the input state.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.en.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.actions().clearActions();\n```\n\n----------------------------------------\n\nTITLE: Using LoadableComponent get() method in Selenium (Java)\nDESCRIPTION: Illustrates how to use the `get()` method provided by the `LoadableComponent` to retrieve a page object instance, which automatically handles loading the page if it isn't already loaded. It encapsulates page loading logic.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.ja.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nEditIssue page = new EditIssue(driver).get();\n```\n\n----------------------------------------\n\nTITLE: Scroll by Amount with Selenium (Java)\nDESCRIPTION: This code demonstrates how to scroll by a specified amount using Selenium's Actions API in Java.  It scrolls horizontally by 100 pixels and vertically by 200 pixels. Requires Selenium WebDriver and Actions class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nnew Actions(driver)\n  .scrollByAmount(100, 200)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Forward Button Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to simulate a click on the forward button of a mouse (button X2) using Selenium. It involves pressing and releasing mouse button 4 on the target element. Requires Selenium WebDriver and version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'my-element')\n@driver.action.move_to(element).click(button: :forward).perform\n```\n\n----------------------------------------\n\nTITLE: Tearing Down WebDriver in Ruby\nDESCRIPTION: This code snippet demonstrates how to tear down the WebDriver after the test execution in Ruby using RSpec.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.quit\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Test Framework\nDESCRIPTION: This article discusses building a basic test framework using C#. It provides a starting point for creating a test automation framework.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2013/a-smattering-of-selenium-141.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Move by Offset from Element with Selenium\nDESCRIPTION: This snippet demonstrates how to move the mouse by a specified offset from the center of an element using Selenium. The initial mouse position is the center of the element. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_45\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'my-element')\n@driver.action.move_to(element, x: 10, y: 20).perform\n```\n\n----------------------------------------\n\nTITLE: Click and Release Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a click and release action (a standard click) on an element using Selenium. It combines moving the mouse to the center of an element with pressing and then releasing the left mouse button. This is the standard way to click an element. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nActions actions = new Actions(driver);\nWebElement element = driver.findElement(By.id(\"my-element\"));\nactions.click(element)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Get browsing context tree in Java\nDESCRIPTION: This snippet demonstrates how to retrieve the browsing context tree using WebDriver BiDi in Java. It fetches all descendant browsing contexts from a parent, including the parent itself. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(driver, null);\nString id = browsingContext.getId();\n\nList<BrowsingContextInfo> contextInfoList = browsingContext.getTree();\n\nassertThat(contextInfoList.stream().map(BrowsingContextInfo::getId))\n  .toIterable()\n  .contains(id);\n```\n\n----------------------------------------\n\nTITLE: Execute JavaScript - Selenium\nDESCRIPTION: This C# snippet demonstrates how to execute JavaScript code within the current browser context using Selenium WebDriver. It finds an element by name, clicks it using JavaScript, retrieves its innerText, and executes a console log statement. Requires Selenium.WebDriver and Selenium.Chrome NuGet packages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_84\n\nLANGUAGE: CSharp\nCODE:\n```\n    //creating Chromedriver instance\n\tIWebDriver driver = new ChromeDriver();\n\t//Creating the JavascriptExecutor interface object by Type casting\n\tIJavaScriptExecutor js = (IJavaScriptExecutor) driver;\n\t//Button Element\n\tIWebElement button = driver.FindElement(By.Name(\"btnLogin\"));\n\t//Executing JavaScript to click on element\n\tjs.ExecuteScript(\"arguments[0].click();\", button);\n\t//Get return value from script\n\tString text = (String)js.ExecuteScript(\"return arguments[0].innerText\", button);\n\t//Executing JavaScript directly\n\tjs.ExecuteScript(\"console.log('hello world')\");\n```\n\n----------------------------------------\n\nTITLE: Selenium Dependency Configuration in CSProj (C#)\nDESCRIPTION: Configures the Selenium.WebDriver dependency in the 'csproj' file for a C# project. This specifies the package reference, version, and other metadata related to the dependency. This is the XML configuration that defines the project's dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.ja.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Selenium.WebDriver\" Version=\"4.18.1\" />\n```\n\n----------------------------------------\n\nTITLE: Check Session Owner\nDESCRIPTION: This snippet checks if a specific session belongs to a given node. The response will be either true or false. Requires the registration secret.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.zh-cn.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://localhost:5555/se/grid/node/owner/<session-id>' --header 'X-REGISTRATION-SECRET: <secret>'\n```\n\n----------------------------------------\n\nTITLE: Retrieve Downloaded File via Curl\nDESCRIPTION: This curl command demonstrates how to retrieve a downloaded file named `Red-blue-green-channel.jpg` from a Selenium Grid node using the `/session/{session_id}/se/files` endpoint.  It sends a POST request with the filename as JSON to retrieve the file content.  Requires the session ID and the file name to be accurate. The response contains the filename and the base64 encoded zipped file contents.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Accept: application/json\" \\\n-H \"Content-Type: application/json; charset=utf-8\" \\\n-X POST -d '{\"name\":\"Red-blue-green-channel.jpg\"}' \\\n\"http://localhost:4444/session/18033434-fa4f-4d11-a7df-9e6d75920e19/se/files\"\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Firefox Options - JavaScript\nDESCRIPTION: Demonstrates how to add command-line arguments to Firefox options in JavaScript. This is useful for configuring browser behavior, such as running in headless mode. Requires the Selenium WebDriver library and `firefox.Options`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\noptions.addArguments('--headless');\n```\n\n----------------------------------------\n\nTITLE: Listening to JS Logs in Java\nDESCRIPTION: This Java code snippet demonstrates how to listen to all JS logs at all levels using the BiDirectional API in Selenium. It registers a callback to process the log entries. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.pt-br.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nBiDi bidi = ((HasBiDi) driver).getBiDi();\nbidi.getLog().addLogListener(System.out::println);\n\ndriver.get(\"https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html\");\nWebElement element = driver.findElement(By.id(\"logging\"));\nelement.click();\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Binary Location\nDESCRIPTION: This code snippet demonstrates how to set the binary location of the Firefox browser. This is useful when you want to use a specific version of Firefox, such as Firefox Nightly, instead of the default installation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\noptions.setBinary(new FirefoxBinary(new File(\"/Applications/Firefox Nightly.app/Contents/MacOS/firefox\")));\n```\n\n----------------------------------------\n\nTITLE: Safari Technology Preview (Ruby)\nDESCRIPTION: This code shows how to use Safari Technology Preview in Ruby. It sets the technology_preview capability to true when creating Safari options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.en.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Safari::Options.new(technology_preview: true)\ndriver = Selenium::WebDriver.for :safari, options: options\n```\n\n----------------------------------------\n\nTITLE: Get Credential in Python\nDESCRIPTION: This python code returns a list of credentials owned by the authenticator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndev_tools.webauthn.get_credentials()\n\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot in Selenium\nDESCRIPTION: This code takes a screenshot of the current browser window using Selenium WebDriver and saves it as a PNG file. It demonstrates how to initialize a ChromeDriver, navigate to a URL, take the screenshot, and save it to a file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_79\n\nLANGUAGE: CSharp\nCODE:\n```\n  using OpenQA.Selenium;\n  using OpenQA.Selenium.Chrome;\n  using OpenQA.Selenium.Support.UI;\n\n  var driver = new ChromeDriver();\n  driver.Navigate().GoToUrl(\"http://www.example.com\");\n  Screenshot screenshot = (driver as ITakesScreenshot).GetScreenshot();\n  screenshot.SaveAsFile(\"screenshot.png\", ScreenshotImageFormat.Png); // Format values are Bmp, Gif, Jpeg, Png, Tiff\n```\n\n----------------------------------------\n\nTITLE: Getting Element Color Values\nDESCRIPTION: This code retrieves the 'color' and 'background-color' CSS values from a web element with the ID 'login' using Selenium's driver.findElement() and getCssValue() methods, and then converts these values into Color objects in Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nval loginButtonColour = Color.fromString(driver.findElement(By.id(\"login\")).getCssValue(\"color\"))\n\nval loginButtonBackgroundColour = Color.fromString(driver.findElement(By.id(\"login\")).getCssValue(\"background-color\"))\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value Selenium CSharp\nDESCRIPTION: This C# code snippet demonstrates how to retrieve the computed style property 'color' of linktext element using Selenium WebDriver. It asserts that the background color is 'rgba(0, 0, 0, 0)'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_32\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/colorPage.html\");\nIWebElement link = driver.FindElement(By.Id(\"namedColor\"));\n\nAssert.That(link.GetCssValue(\"background-color\"), Is.EqualTo(\"rgba(0, 0, 0, 0)\"));\n```\n\n----------------------------------------\n\nTITLE: DOM Mutation Handlers in C# with Selenium CDP\nDESCRIPTION: This C# code snippet shows how to use Chrome DevTools Protocol (CDP) to handle DOM mutation events.  It sets up request interception, modifies the request headers, and continues the request with the updated headers.  Requires a running Selenium WebDriver instance connected to a Chrome browser, and appropriate namespace imports like `OpenQA.Selenium`, `OpenQA.Selenium.DevTools`, etc.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.ja.md#_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\nstring requestId = devTools.Fetch.Enable(new Fetch.EnableCommandSettings()\n{\n    Patterns = new Fetch.RequestPattern[] { new Fetch.RequestPattern() { RequestStage = Fetch.RequestStage.Response } }\n}).Result;\n\ndevTools.Fetch.RequestPaused += async (sender, e) =>\n{\n    Dictionary<string, string> headers = new Dictionary<string, string>();\n    headers.Add(\"Foo\", \"Bar\");\n\n    await devTools.Fetch.ContinueRequest(new Fetch.ContinueRequestCommandSettings()\n    {\n        RequestId = e.RequestId,\n        Headers = headers\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Traverse History in Java\nDESCRIPTION: This code snippet demonstrates how to traverse the browsing history using Selenium WebDriver's BiDi API in Java.  It navigates to two URLs, then traverses back one step. Requires Selenium version 4.16.0 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_42\n\nLANGUAGE: Java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(((HasDevTools) driver).getDevTools(),\n                                         ((RemoteWebDriver) driver).getWindowHandle());\n\n    browsingContext.navigate(\"https://www.selenium.dev/\", WaitUntil.LOAD);\n    browsingContext.navigate(\"https://google.com/\", WaitUntil.LOAD);\n    browsingContext.traverse(-1, WaitUntil.LOAD);\n```\n\n----------------------------------------\n\nTITLE: Full Ruby Example (RSpec)\nDESCRIPTION: This Ruby example demonstrates a Selenium test using RSpec. It navigates to a website and verifies the title. It uses `selenium-webdriver` and RSpec.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'selenium-webdriver'\n\nRSpec.describe 'First script' do\n  before(:each) do\n    @driver = Selenium::WebDriver.for :chrome\n  end\n\n  it 'has correct title' do\n    @driver.get 'https://www.selenium.dev/selenium/web/index.html'\n    expect(@driver.title).to eq('SeleniumHQ Browser Automation')\n  end\n\n  after(:each) do\n    @driver.quit\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Listening to JS Logs - Java\nDESCRIPTION: Registers a listener for all JavaScript logs at all levels using Selenium's BiDi API. It receives all log messages and prints their level and text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.ja.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nBiDi bidi = driver.getDevTools();\nbidi.getDomains().log().addLogListener(entry -> {\n  System.out.println(\"----------------------------\");\n  System.out.println(\"Level: \" + entry.getLevel());\n  System.out.println(\"Text: \" + entry.getText());\n  System.out.println(\"----------------------------\");\n});\n```\n\n----------------------------------------\n\nTITLE: Check Element Display Selenium Ruby\nDESCRIPTION: This Ruby code snippet shows how to verify if an element is displayed using Selenium WebDriver. It navigates to a URL, finds an element by name and checks whether the element is displayed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.get 'https://www.selenium.dev/selenium/web/inputs.html'\nemail_input = driver.find_element(name: 'email_input')\nexpect(email_input.displayed?).to be true\n```\n\n----------------------------------------\n\nTITLE: Adding a directory to PATH in Zsh\nDESCRIPTION: This snippet adds a specified directory to the PATH environment variable in a Zsh shell. It uses the `export` command to update the PATH variable, appends the new directory to the existing PATH, and saves the change to the `~/.zshenv` file, ensuring persistence across sessions. The `source` command then reloads the environment to apply the changes immediately.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.en.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho 'export PATH=$PATH:/path/to/driver' >> ~/.zshenv\nsource ~/.zshenv\n```\n\n----------------------------------------\n\nTITLE: Sending Keys to an Element\nDESCRIPTION: This snippet demonstrates how to simulate typing text into an input field using Selenium. The `send_keys` method is used to send a sequence of characters to the specified element. The `\\n` parameter simulates pressing the Enter key.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_33\n\nLANGUAGE: Ruby\nCODE:\n```\nsearch_box.send_keys 'Selenium'\nsearch_box.send_keys :return\n```\n\n----------------------------------------\n\nTITLE: Setting strictFileInteractability in Java\nDESCRIPTION: This Java snippet shows how to configure the `strictFileInteractability` capability in Selenium. This capability controls whether strict interactability checks are applied to `input type=file` elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_46\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setStrictFileInteractability(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Unhandled Prompt Behavior with Python\nDESCRIPTION: This code snippet demonstrates how to set the unhandled prompt behavior in Python using Selenium WebDriver's Options class. The `unhandled_prompt_behavior` property is used to define the action to take when a user prompt appears. In this example, the behavior is set to `accept`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\noptions.unhandled_prompt_behavior = 'accept'\n```\n\n----------------------------------------\n\nTITLE: Get Element Rectangle in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve the rectangle (dimensions and coordinates) of a web element using Selenium WebDriver in Python. It uses the `rect` attribute of the WebElement class. The attribute returns a `Rect` object containing the element's x, y, width, and height.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nrange_input = driver.find_element(By.NAME, \"range_input\")\nassert range_input.rect.height == 15\n```\n\n----------------------------------------\n\nTITLE: Starting a custom Node with JAR\nDESCRIPTION: This command shows how to start a Selenium Grid Node using a standard JAR file, specifying the external JAR containing the custom node implementation and the implementation class. It requires the selenium-server and the custom JAR file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/customize_node.pt-br.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava -jar selenium-server-4.6.0.jar \\\n--ext custom_node-1.0-SNAPSHOT.jar node \\\n--node-implementation org.seleniumhq.samples.DecoratedLoggingNode\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle dependencies for Selenium Java\nDESCRIPTION: This snippet demonstrates updating the Gradle build file to use Selenium Java version 4.4.0. It updates the `implementation` dependency for `org.seleniumhq.selenium:selenium-java`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_11\n\nLANGUAGE: jsonpath\nCODE:\n```\nplugins {\n    id 'java'\n}\ngroup 'org.example'\nversion '1.0-SNAPSHOT'\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'\n    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'\n}\ntest {\n    useJUnitPlatform()\n}\n```\n\nLANGUAGE: jsonpath\nCODE:\n```\nplugins {\n    id 'java'\n}\ngroup 'org.example'\nversion '1.0-SNAPSHOT'\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'\n    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.4.0'\n}\ntest {\n    useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox Driver with Options - Ruby\nDESCRIPTION: Demonstrates how to initialize a Firefox WebDriver instance with basic options using Ruby. It requires the Selenium WebDriver gem. The `Selenium::WebDriver::Firefox::Options` class is used to specify Firefox-specific configurations.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Firefox::Options.new\ndriver = Selenium::WebDriver.for :firefox, options: options\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Current Pointer Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse cursor by a specified offset from its current position using Selenium WebDriver.  It's available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_59\n\nLANGUAGE: Kotlin\nCODE:\n```\nActions(driver)\n  .moveByOffset(30, -10)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Output in Python to Console\nDESCRIPTION: This snippet configures the python logger to output to the console, using a StreamHandler.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nhandler = logging.StreamHandler()\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Get Element Location and Size - C#\nDESCRIPTION: This snippet demonstrates how to get the location and size of a web element using Selenium WebDriver in C#. It finds an element by name and uses the Rect property to retrieve a Rect object containing its x, y, width, and height.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"range_input\"));\nRectangle rect = element.Rect;\nAssert.That(rect.X, Is.EqualTo(8));\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookie Attribute Kotlin\nDESCRIPTION: This Kotlin code illustrates setting the SameSite attribute for cookies in Selenium.  The code navigates to a website, creates two cookies with 'Strict' and 'Lax' SameSite attributes, adds them to the browser, and prints their SameSite values.  Requires Selenium and ChromeDriver dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"http://www.example.com\")\n        val cookie = Cookie.Builder(\"key\", \"value\").sameSite(\"Strict\").build()\n        val cookie1 = Cookie.Builder(\"key\", \"value\").sameSite(\"Lax\").build()\n        driver.manage().addCookie(cookie)\n        driver.manage().addCookie(cookie1)\n        println(cookie.getSameSite())\n        println(cookie1.getSameSite())\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Console Logs with BiDi API in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to listen to console.log events and process them. It demonstrates the usage of the BiDi API for capturing console logs within a Selenium JavaScript test.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.zh-cn.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait bidiSession.on('log.entryAdded', (event) => {\n  if (event.entry.source.realm === undefined) {\n    console.log(event.entry);\n  }\n  console.log(event.entry.text);\n  console.log(event.entry.args);\n  console.log(event.entry.level);\n});\n```\n\n----------------------------------------\n\nTITLE: Get Element Size and Position - Java\nDESCRIPTION: Demonstrates how to retrieve the size and position of a web element using Java and Selenium WebDriver. The `getRect()` method returns a `Rectangle` object containing the element's x, y coordinates, width, and height. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"range_input\"));\nRectangle rect = element.getRect();\nSystem.out.println(rect);\n```\n\n----------------------------------------\n\nTITLE: Find Element within a DOM Subset\nDESCRIPTION: This snippet shows how to find an element within a specific DOM subset. It first locates the parent element with the ID \"fruits\", and then searches within that element for the first element with the class name \"tomatoes\". This approach is useful when there are multiple elements with the same locator, but you want to target a specific one.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nval fruits = driver.findElement(By.id(\"fruits\"))\nval fruit = fruits.findElement(By.className(\"tomatoes\"))\n```\n\n----------------------------------------\n\nTITLE: Customizing Waits with FluentWait - Java\nDESCRIPTION: This Java code snippet demonstrates how to customize waits using FluentWait.  It shows how to configure the polling interval, ignore specific exceptions, and provide a custom timeout message. This allows for more fine-grained control over the waiting behavior.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.zh-cn.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nWait<WebDriver> wait = new FluentWait<>(driver)\n    .withTimeout(Duration.ofSeconds(10))\n    .pollingEvery(Duration.ofMillis(100))\n    .ignoreAll(Collections.singleton(NoSuchElementException.class))\n    .withMessage(\"Timed out after 10 seconds waiting for element.\");\n\nWebElement foo = wait.until(driver -> driver.findElement(By.id(\"foo\")));\n```\n\n----------------------------------------\n\nTITLE: Get Active Element Attribute - C#\nDESCRIPTION: This C# code snippet retrieves the 'title' attribute of the currently active element on a webpage after entering text into Google's search box.  It navigates to Google, enters text into the search box, and then retrieves the attribute.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_36\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace ActiveElement {\n class ActiveElement {\n  public static void Main(string[] args) {\n   IWebDriver driver = new ChromeDriver();\n   try {\n    // Navigate to Url\n    driver.Navigate().GoToUrl(\"https://www.google.com\");\n    driver.FindElement(By.CssSelector(\"[name='q']\")).SendKeys(\"webElement\");\n\n    // Get attribute of current active element\n    string attr = driver.SwitchTo().ActiveElement().GetAttribute(\"title\");\n    System.Console.WriteLine(attr);\n   } finally {\n    driver.Quit();\n   }\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unhandled Prompt Behavior with Java\nDESCRIPTION: This code snippet demonstrates how to set the unhandled prompt behavior in Java using Selenium WebDriver's Options class. The `setUnhandledPromptBehavior` method is used to define the action to take when a user prompt appears. In this example, the behavior is set to `ACCEPT`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_40\n\nLANGUAGE: java\nCODE:\n```\noptions.setUnhandledPromptBehavior(UnexpectedAlertBehaviour.ACCEPT);\n```\n\n----------------------------------------\n\nTITLE: Maximize Window - JavaScript\nDESCRIPTION: Demonstrates how to maximize the browser window in JavaScript using Selenium WebDriver. The `maximize()` method expands the window to fill the screen without blocking the operating system's menu and toolbars.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.manage().window().maximize();\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions to Edge Options - Ruby\nDESCRIPTION: Demonstrates adding extensions to the Edge options in Ruby.\nThis allows loading extensions when launching Edge with Selenium.\nDependencies: Selenium WebDriver, EdgeDriver, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_17\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.add_extension('/path/to/extension.crx')\n```\n\n----------------------------------------\n\nTITLE: Setting Page Size using PrintOptions in C#\nDESCRIPTION: This code snippet demonstrates how to set the page size to A4 using the PrintOptions class in C#. The `PageSize` property is set to the desired page size. The `PageSize` property is retrieved and confirmed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.PageSize = \"A4\";\n\nAssert.AreEqual(\"A4\", printOptions.PageSize);\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Driver Log Level\nDESCRIPTION: This code demonstrates how to set the logging level for the ChromeDriver service. The available levels are: ALL, DEBUG, INFO, WARNING, SEVERE, and OFF. Setting the log level allows for filtering the verbosity of the logs.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_37\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.chrome(log_level: :debug)\n```\n\n----------------------------------------\n\nTITLE: Setting Detach Option to Keep Browser Open - Python\nDESCRIPTION: Demonstrates setting the detach option in Python to keep the Edge browser open after the script finishes.\nThis allows inspecting the browser state after the test.\nDependencies: Selenium WebDriver, Edge, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\noptions.add_experimental_option(\"detach\", True)\n```\n\n----------------------------------------\n\nTITLE: Handle Alert Popup in Java\nDESCRIPTION: This code snippet demonstrates how to handle a JavaScript alert popup using Selenium WebDriver in Java. It finds the alert, retrieves its text, and accepts it. The alert is activated by clicking a link.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.pt-br.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver.findElement(By.linkText(\"See an example alert\")).click();\nWait<WebDriver> wait = new FluentWait<>(driver).withTimeout(Duration.ofSeconds(10));\nAlert alert = wait.until(ExpectedConditions.alertIsPresent());\nString text = alert.getText();\nalert.accept();\n```\n\n----------------------------------------\n\nTITLE: De-selecting Option by Value in Select List - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to de-select an option in a multiple select list by its value using Selenium WebDriver. It assumes that you have already initialized the WebDriver and located the select element. The code creates a `Selenium::WebDriver::Support::Select` object and uses the `deselect_by` method with the `:value` selector and the value of the option to de-select.  Before de-selecting, all options are cleared.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nselect.deselect_all\nselect.deselect_by(:value, 'volvocar')\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Level in C#\nDESCRIPTION: This snippet shows how to set the logger level in C# using the `OpenQA.Selenium.Internal.Logging` namespace. It configures the verbosity of logs. Requires the `OpenQA.Selenium.Internal.Logging` namespace.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nLog.Level = LogLevel.Debug;\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes (Ruby)\nDESCRIPTION: This Ruby code snippet demonstrates how to add custom pointer event attributes to a Pen action in Selenium. It sets attributes like width, height, pressure, tangential pressure, tiltX, and tiltY to simulate more realistic pen behavior.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.ja.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\npen = Selenium::WebDriver::Interactions::Pen.new('pen1')\nattributes = {\n  width: 18,\n  height: 20,\n  pressure: 0.4,\n  tangentialPressure: -0.8,\n  tiltX: 70,\n  tiltY: -60\n}\n\nelement = @driver.find_element(id: 'example')\n\n@driver.action\n  .move_to(element)\n  .tick(pen.create_pointer_move(duration: 1, x: 0, y: 0, origin: element, options: attributes))\n  .tick(pen.create_pointer_down(button: :left))\n  .tick(pen.create_pointer_up(button: :left))\n  .perform\n```\n\n----------------------------------------\n\nTITLE: Reload a browsing context in Java\nDESCRIPTION: This snippet shows how to reload a browsing context using WebDriver BiDi in Java. Requires Selenium 4.13.0 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(driver, null);\nbrowsingContext.reload();\n```\n\n----------------------------------------\n\nTITLE: Continue Auth Request with Credentials - Selenium BiDi - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to continue a network request blocked at the `authRequired` phase in Selenium BiDi, providing username and password.  It uses `Network.continueRequest` to proceed after authentication. Requires Selenium 4.18 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait bidiNetwork.continueRequest({\n  requestId: event.request.requestId,\n  auth: { username: 'test', password: 'test' }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Name with Options - Python\nDESCRIPTION: This code snippet shows how to set the browser name using Options in Python.  It creates a ChromeOptions instance and asserts the browser name is 'chrome'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\noptions = ChromeOptions()\nassert options.browser_name == 'chrome'\n```\n\n----------------------------------------\n\nTITLE: Create a stream handler in Python to display logs in the console\nDESCRIPTION: This snippet shows how to create a handler to display logs in the console in Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nhandler = logging.StreamHandler()\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element in Ruby\nDESCRIPTION: This Ruby snippet performs a drag and drop operation from a source element to a target element using #drag_and_drop. It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_63\n\nLANGUAGE: ruby\nCODE:\n```\nsource = driver.find_element(id: 'draggable')\ntarget = driver.find_element(id: 'droppable')\n\ndriver.action.drag_and_drop(source, target).perform\n```\n\n----------------------------------------\n\nTITLE: Gathering Performance Metrics using CDP in Java\nDESCRIPTION: This Java code snippet demonstrates how to gather performance metrics using the Chrome DevTools Protocol (CDP) in Selenium. It enables the Performance domain and retrieves metrics such as CPU usage, memory usage, and frame rate.  This allows you to monitor and analyze the performance of your web applications.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_13\n\nLANGUAGE: java\nCODE:\n```\ncdp.send(Performance.enable(Optional.empty()));\nList<Metric> metricList = cdp.send(Performance.getMetrics());\n```\n\n----------------------------------------\n\nTITLE: Asserting with Selenium in JavaScript\nDESCRIPTION: This code snippet demonstrates how to make assertions within a Selenium test using Mocha in JavaScript. It retrieves the title of a webpage and asserts that it matches the expected title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst title = await driver.getTitle();\nassert.equal(title, 'SeleniumHQ Browser Automation');\n```\n\n----------------------------------------\n\nTITLE: Find Element by Link Text - Kotlin\nDESCRIPTION: This snippet shows how to locate a link element using its exact link text in Kotlin. It initializes a ChromeDriver and uses the `findElement` method with `By.linkText` to find the link with the text 'Selenium Official Page'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.linkText(\"Selenium Official Page\"))\n```\n\n----------------------------------------\n\nTITLE: DOM Mutation Handler Python\nDESCRIPTION: This Python code snippet shows how to use Chrome DevTools Protocol (CDP) to handle DOM mutations. It is part of a test suite for Selenium's BiDi implementation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.pt-br.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nresult = execute(driver, get_execution_context(driver), script)\nassert result[\"result\"][\"value\"] == 'hello'\n```\n\n----------------------------------------\n\nTITLE: Ignoring Zoom Setting (Ruby)\nDESCRIPTION: This code snippet demonstrates how to ignore the browser zoom level setting using Ruby. It sets the `ignore_zoom_setting` option to `true`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.ignore_zoom_setting = true\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions with FluentWait in Selenium (Java)\nDESCRIPTION: This Java code demonstrates how FluentWait handles exceptions related to element identification in Selenium.  It configures FluentWait to ignore specific exceptions like NoSuchElementException, StaleElementReferenceException, ElementNotInteractableException, and InvalidElementStateException during the wait. The code attempts to locate an element using an invalid XPath expression, leading to an InvalidSelectorException in newer Selenium versions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/invalid-selector-exception-has-changed.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nArrayList<Class<? extends Exception>> expectedExceptions = new ArrayList<>();\n        expectedExceptions.add(org.openqa.selenium.NoSuchElementException.class);\n        expectedExceptions.add(org.openqa.selenium.StaleElementReferenceException.class);\n        expectedExceptions.add(org.openqa.selenium.ElementNotInteractableException.class);\n        expectedExceptions.add(org.openqa.selenium.InvalidElementStateException.class);\n        \nreturn new FluentWait<>(driver)\n      .withTimeout(Duration.ofMillis(ELEMENT_IDENTIFICATION_TIMEOUT))\n      .pollingEvery(Duration.ofMillis(ELEMENT_IDENTIFICATION_POLLING_DELAY))\n      .ignoreAll(expectedExceptions)\n      .until(nestedDriver -> {\n         nestedDriver.findElement(By.xpath(\"invalid-xpath\")).click;\n      });\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - None - JavaScript\nDESCRIPTION: This JavaScript code snippet sets the page load strategy to 'none' and navigates to example.com.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('should not wait for anything to load', async () => {\n  let opts = new chrome.Options().setPageLoadStrategy('none');\n  let driver = await new ChromeDriver(opts).build();\n\n  await driver.get('https://example.com');\n  await driver.quit();\n});\n```\n\n----------------------------------------\n\nTITLE: Delete Session\nDESCRIPTION: Terminates a WebDriver session by closing the driver and removing it from the active session map. Any further requests using the session ID will result in an error. This command is used to clean up sessions after they are no longer needed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://localhost:4444/session/<session-id>'\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to Normal in Kotlin\nDESCRIPTION: This snippet shows how to set the page load strategy to 'normal' in Kotlin using Selenium. WebDriver waits until the load event is fired.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.PageLoadStrategy\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.chrome.ChromeOptions\n\nfun main() {\n  val chromeOptions = ChromeOptions()\n  chromeOptions.setPageLoadStrategy(PageLoadStrategy.NORMAL)\n  val driver = ChromeDriver(chromeOptions)\n  try {\n    driver.get(\"https://www.google.com\")\n  }\n  finally {\n    driver.quit()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Ruby\nDESCRIPTION: Demonstrates how to initialize a Select object in Ruby using a WebElement representing the select element. Requires selenium-webdriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nselect_element = driver.find_element(name: 'selectomatic')\nselect = Selenium::WebDriver::Support::Select.new(select_element)\n```\n\n----------------------------------------\n\nTITLE: Get Element Text in JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve the text of a web element using Selenium WebDriver in JavaScript. It uses the `getText()` method. The method returns the visible text of the element as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('get text', async () => {\n  expect(await driver.findElement(By.id('justanotherlink')).getText()).toBe('just another link');\n});\n```\n\n----------------------------------------\n\nTITLE: Create Unicorn and Submit Form (JavaScript)\nDESCRIPTION: This snippet demonstrates creating a Unicorn object with specific attributes and submitting the form using the addUnicornPage object. It shows how the Unicorn object is passed to the createUnicorn() method to fill out the form and click submit. It assumes Unicorn, UnicornColors, UnicornAccessories, UnicornAdornments, AddUnicornPage, AccountPage, and UnicornConfirmationPage are defined elsewhere.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The Unicorn is a top-level Object--it has attributes, which are set here.\n// This only stores the values; it does not fill out any web forms or interact\n// with the browser in any way.\nvar sparkles = new Unicorn(\"Sparkles\", UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS);\n\n// Since we are already \"on\" the account page, we have to use it to get to the\n// actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n// takes us there.\n\nvar addUnicornPage = accountPage.addUnicorn();\n\n// Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n// its createUnicorn() method. This method will take Sparkles' attributes,\n// fill out the form, and click submit.\nvar unicornConfirmationPage = addUnicornPage.createUnicorn(sparkles);\n```\n\n----------------------------------------\n\nTITLE: Working with Firefox Profiles\nDESCRIPTION: This example demonstrates how to use Firefox profiles with Selenium.  It shows how to create a FirefoxProfile object and associate it with the FirefoxOptions. The profile can be an empty one or point to an existing profile directory.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\nprofile = Selenium::WebDriver::Firefox::Profile.new\noptions = Selenium::WebDriver::Firefox::Options.new(profile: profile)\ndriver = Selenium::WebDriver.for :firefox, options: options\n```\n\n----------------------------------------\n\nTITLE: Setting Log Output to File\nDESCRIPTION: This code snippet shows how to configure the FirefoxDriver service to output logs to a specific file.  This is useful for debugging and troubleshooting. A File object representing the desired log file is passed to the `withLogOutput` method of the GeckoDriverService builder.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\nGeckoDriverService service = new GeckoDriverService.Builder().withLogOutput(new File(\"geckodriver.log\")).build();\nWebDriver driver = new FirefoxDriver(service, new FirefoxOptions());\n```\n\n----------------------------------------\n\nTITLE: Executing Python Tests\nDESCRIPTION: This command shows how to execute the tests in Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Adding Credential in Python\nDESCRIPTION: Registers a credential with the authenticator using Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nauthenticator.add_credential(credential)\n```\n\n----------------------------------------\n\nTITLE: Evaluate Shadow DOM - Ruby\nDESCRIPTION: This snippet demonstrates how to access and interact with elements within a Shadow DOM using Selenium WebDriver with Ruby. It finds the shadow host, gets the shadow root, and then finds an element within the shadow root.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\nshadow_host = @driver.find_element(css: '#shadow_host')\nshadow_root = shadow_host.shadow_root\nshadow_content = shadow_root.find_element(css: '#shadow_content')\n```\n\n----------------------------------------\n\nTITLE: Selenium Google Search with Fluent API in Java\nDESCRIPTION: This snippet demonstrates how to interact with a Google search page using a fluent API. It navigates to the Google homepage, creates a GoogleSearchPage object, sets the search string, and clicks the search button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/consider_using_a_fluent_api.pt-br.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver.get( \"http://www.google.com/webhp?hl=en&amp;tab=ww\" );\nGoogleSearchPage gsp = new GoogleSearchPage(driver);\ngsp.setSearchString().clickSearchButton();\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Location - Java\nDESCRIPTION: This snippet demonstrates how to specify the location of the ChromeDriver executable using ChromeService in Java. This is useful when the driver is not in the system's PATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.ja.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nChromeService service = new ChromeService.Builder().usingDriverExecutable(new File(\"/path/to/chromedriver\")).build();\n```\n\n----------------------------------------\n\nTITLE: Call function in realm (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to call a function within a realm using Selenium BiDi. It retrieves a browsing context, evaluates a script to get a realm, and then calls a function in that realm, asserting that the function returns 1.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('call function in realm', async () => {\n    let browsingContext = await getBrowsingContext(driver);\n\n    let realm = await session.execute({\n      method: 'script.evaluate',\n      params: {\n        expression: '() => 1',\n        target: { browsingContext: browsingContext.context },\n      },\n    });\n\n    let result = await session.execute({\n      method: 'script.callFunction',\n      params: {\n        functionDeclaration: '() => 1',\n        target: { realm: realm.result.realm },\n        arguments: [],\n      },\n    });\n\n    expect(result.result.result.value).toBe(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait Timeout in Ruby\nDESCRIPTION: This code demonstrates how to set the implicit wait timeout in Ruby. This defines the amount of time the driver will wait when searching for elements that are not immediately available.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_39\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.timeouts.implicit_wait = 10\n```\n\n----------------------------------------\n\nTITLE: Printing webpage with page ranges in Python\nDESCRIPTION: This snippet demonstrates how to print a webpage using Selenium's `print_page` method in Python.  It sets the page ranges to ['1-2'] and retrieves the base64 encoded content of the printed page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_88\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.common.print_page_options import PrintOptions\n\nprint_options = PrintOptions()\nprint_options.page_ranges = ['1-2']\n\ndriver.get(\"printPage.html\")\n\nbase64code = driver.print_page(print_options)\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Version - Python\nDESCRIPTION: This Python snippet shows how to set the browser version using ChromeOptions.  It initializes options and sets the browser version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\noptions = ChromeOptions()\noptions.browser_version = '105.0.5195.52'\n```\n\n----------------------------------------\n\nTITLE: DOM Mutation Handlers in C# using CDP\nDESCRIPTION: This C# snippet illustrates handling DOM mutations using Chrome DevTools Protocol (CDP) within Selenium. It demonstrates adding a script that's evaluated on new documents, enabling the manipulation of the DOM. A Selenium WebDriver with CDP access is required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.en.md#_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\n            string scriptId = cdp.ExecuteCdpCommandWithResult(\"Page.addScriptToEvaluateOnNewDocument\", new Dictionary<string, object>()\n            {{\"source\", \"document.title='CSharp CDP'\"}})[\"identifier\"].ToString();\n\n            driver.Navigate().GoToUrl(testServer.MapPath(\"blank.html\"));\n            Assert.AreEqual(\"CSharp CDP\", driver.Title);\n\n            cdp.ExecuteCdpCommand(\"Page.removeScriptToEvaluateOnNewDocument\", new Dictionary<string, object>()\n            {{\"identifier\", scriptId}});\n\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects\nDESCRIPTION: This code demonstrates how to create Color objects from various string representations such as HEX, RGB, RGBA, HSL, and HSLA in Python. It shows how to define colors using the Color.from_string() method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nHEX_COLOUR = Color.from_string('#2F7ED8')\nRGB_COLOUR = Color.from_string('rgb(255, 255, 255)')\nRGB_COLOUR = Color.from_string('rgb(40%, 20%, 40%)')\nRGBA_COLOUR = Color.from_string('rgba(255, 255, 255, 0.5)')\nRGBA_COLOUR = Color.from_string('rgba(40%, 20%, 40%, 0.5)')\nHSL_COLOUR = Color.from_string('hsl(100, 0%, 50%)')\nHSLA_COLOUR = Color.from_string('hsla(100, 0%, 50%, 0.5)')\n```\n\n----------------------------------------\n\nTITLE: Setting browserName with ChromeOptions in Java\nDESCRIPTION: This snippet demonstrates how to set the browserName capability using ChromeOptions in Java for Selenium 4. This is required for remote driver sessions to determine the browser to be used. It shows creating ChromeOptions and setting the browser name, though the name is implicitly set when using ChromeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setBrowserVersion(\"Chrome\");\n```\n\n----------------------------------------\n\nTITLE: Simple Log Event Example in Selenium Grid\nDESCRIPTION: This JSON shows a sample log event in Selenium Grid. It provides detailed information about an action performed, including the trace ID, span ID, event time, event name, and attributes. This is logged at FINE level.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/observability.pt-br.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nFINE [LoggingOptions$1.lambda$export$1] - {\n  \"traceId\": \"fc8aef1d44b3cc8bc09eb8e581c4a8eb\",\n  \"spanId\": \"b7d3b9865d3ddd45\",\n  \"spanKind\": \"INTERNAL\",\n  \"eventTime\": 1597819675128886121,\n  \"eventName\": \"Session request execution complete\",\n  \"attributes\": {\n    \"http.status_code\": 200,\n    \"http.handler_class\": \"org.openqa.selenium.grid.router.HandleSession\",\n    \"http.url\": \"\\u002fsession\\u002fdd35257f104bb43fdfb06242953f4c85\",\n    \"http.method\": \"DELETE\",\n    \"session.id\": \"dd35257f104bb43fdfb06242953f4c85\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Binary Location\nDESCRIPTION: This snippet shows how to set the binary location for the Firefox browser, allowing you to specify a particular Firefox installation. This is useful when you have multiple Firefox versions installed and want to use a specific one for testing. The path to the Firefox executable is passed to the `binary` property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.binary = '/Applications/Firefox Nightly.app/Contents/MacOS/firefox'\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Hub\nDESCRIPTION: This command starts a Selenium Hub instance, which acts as the central point for managing and distributing tests to available nodes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar hub\n```\n\n----------------------------------------\n\nTITLE: Intercepting Response Information - Java\nDESCRIPTION: Demonstrates how to intercept and log response information using Selenium and CDP in Java. It captures response headers and body after matching a specific URL pattern. Requires Selenium WebDriver and CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n((HasAuthentication) driver).register(Predicate.match(req -> req.getUri().contains(\"simple_page\")),\n        new FetchHandler() {\n          @Override\n          public Optional<Fetch.ContinueResponseRequest> apply(Fetch.Request request) {\n            Fetch.GetResponseBodyResponse body = driver.getDevTools().send(new Fetch.GetResponseBody(request.getRequestId()));\n            System.out.println(body.getBody());\n            return Optional.of(new Fetch.ContinueResponseRequest(request.getRequestId()));\n          }\n        });\n```\n\n----------------------------------------\n\nTITLE: Sample Custom Selenium Node Implementation\nDESCRIPTION: This Java code demonstrates a customized Selenium Grid Node that logs messages to the console before and after key events such as session creation, command execution, and session deletion.  It extends the `org.openqa.selenium.grid.node.Node` class and overrides several methods to add the logging functionality. It depends on selenium-api, selenium-grid, and slf4j-api.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/customize_node.ja.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage org.seleniumhq.samples;\n\nimport java.net.URI;\nimport java.util.UUID;\nimport org.openqa.selenium.Capabilities;\nimport org.openqa.selenium.NoSuchSessionException;\nimport org.openqa.selenium.WebDriverException;\nimport org.openqa.selenium.grid.config.Config;\nimport org.openqa.selenium.grid.data.CreateSessionRequest;\nimport org.openqa.selenium.grid.data.CreateSessionResponse;\nimport org.openqa.selenium.grid.data.NodeId;\nimport org.openqa.selenium.grid.data.NodeStatus;\nimport org.openqa.selenium.grid.data.Session;\nimport org.openqa.selenium.grid.log.LoggingOptions;\nimport org.openqa.selenium.grid.node.HealthCheck;\nimport org.openqa.selenium.grid.node.Node;\nimport org.openqa.selenium.grid.node.local.LocalNodeFactory;\nimport org.openqa.selenium.grid.security.Secret;\nimport org.openqa.selenium.grid.security.SecretOptions;\nimport org.openqa.selenium.grid.server.BaseServerOptions;\nimport org.openqa.selenium.internal.Either;\nimport org.openqa.selenium.remote.SessionId;\nimport org.openqa.selenium.remote.http.HttpRequest;\nimport org.openqa.selenium.remote.http.HttpResponse;\nimport org.openqa.selenium.remote.tracing.Tracer;\n\npublic class DecoratedLoggingNode extends Node {\n\n  private Node node;\n\n  protected DecoratedLoggingNode(Tracer tracer, NodeId nodeId, URI uri, Secret registrationSecret, Duration sessionTimeout) {\n    super(tracer, nodeId, uri, registrationSecret, sessionTimeout);\n  }\n\n  public static Node create(Config config) {\n    LoggingOptions loggingOptions = new LoggingOptions(config);\n    BaseServerOptions serverOptions = new BaseServerOptions(config);\n    URI uri = serverOptions.getExternalUri();\n    SecretOptions secretOptions = new SecretOptions(config);\n    NodeOptions nodeOptions = new NodeOptions(config);\n    Duration sessionTimeout = nodeOptions.getSessionTimeout();\n\n    // Refer to the foot notes for additional context on this line.\n    Node node = LocalNodeFactory.create(config);\n\n    DecoratedLoggingNode wrapper = new DecoratedLoggingNode(loggingOptions.getTracer(),\n        node.getId(),\n        uri,\n        secretOptions.getRegistrationSecret(),\n        sessionTimeout);\n    wrapper.node = node;\n    return wrapper;\n  }\n\n  @Override\n  public Either<WebDriverException, CreateSessionResponse> newSession(\n      CreateSessionRequest sessionRequest) {\n    System.out.println(\"Before newSession()\");\n    try {\n      return this.node.newSession(sessionRequest);\n    } finally {\n      System.out.println(\"After newSession()\");\n    }\n  }\n\n  @Override\n  public HttpResponse executeWebDriverCommand(HttpRequest req) {\n    try {\n      System.out.println(\"Before executeWebDriverCommand(): \" + req.getUri());\n      return node.executeWebDriverCommand(req);\n    } finally {\n      System.out.println(\"After executeWebDriverCommand()\");\n    }\n  }\n\n  @Override\n  public Session getSession(SessionId id) throws NoSuchSessionException {\n    try {\n      System.out.println(\"Before getSession()\");\n      return node.getSession(id);\n    } finally {\n      System.out.println(\"After getSession()\");\n    }\n  }\n\n  @Override\n  public HttpResponse uploadFile(HttpRequest req, SessionId id) {\n    try {\n      System.out.println(\"Before uploadFile()\");\n      return node.uploadFile(req, id);\n    } finally {\n      System.out.println(\"After uploadFile()\");\n    }\n  }\n\n  @Override\n  public void stop(SessionId id) throws NoSuchSessionException {\n    try {\n      System.out.println(\"Before stop()\");\n      node.stop(id);\n    } finally {\n      System.out.println(\"After stop()\");\n    }\n  }\n\n  @Override\n  public boolean isSessionOwner(SessionId id) {\n    try {\n      System.out.println(\"Before isSessionOwner()\");\n      return node.isSessionOwner(id);\n    } finally {\n      System.out.println(\"After isSessionOwner()\");\n    }\n  }\n\n  @Override\n  public boolean isSupporting(Capabilities capabilities) {\n    try {\n      System.out.println(\"Before isSupporting\");\n      return node.isSupporting(capabilities);\n    } finally {\n      System.out.println(\"After isSupporting()\");\n    }\n  }\n\n  @Override\n  public NodeStatus getStatus() {\n    try {\n      System.out.println(\"Before getStatus()\");\n      return node.getStatus();\n    } finally {\n      System.out.println(\"After getStatus()\");\n    }\n  }\n\n  @Override\n  public HealthCheck getHealthCheck() {\n    try {\n      System.out.println(\"Before getHealthCheck()\");\n      return node.getHealthCheck();\n    } finally {\n      System.out.println(\"After getHealthCheck()\");\n    }\n  }\n\n  @Override\n  public void drain() {\n    try {\n      System.out.println(\"Before drain()\");\n      node.drain();\n    } finally {\n      System.out.println(\"After drain()\");\n    }\n\n  }\n\n  @Override\n  public boolean isReady() {\n    try {\n      System.out.println(\"Before isReady()\");\n      return node.isReady();\n    } finally {\n      System.out.println(\"After isReady()\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Standalone Configuration Help\nDESCRIPTION: This command displays component-specific configuration information for the Standalone role. It leverages the `--help` option after specifying the standalone role.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.en.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar standalone --help\n```\n\n----------------------------------------\n\nTITLE: Move Mouse by Offset - Selenium\nDESCRIPTION: Moves the mouse cursor from its current position by a specified offset. Positive X values move the cursor right, positive Y values move the cursor down. The origin is the top-left corner of the viewport if the cursor hasn't been moved before.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nnew Actions(driver)\n    .MoveByOffset(30, -10)\n    .Pause(TimeSpan.FromSeconds(1))\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Going Forward in Browser History (Ruby)\nDESCRIPTION: Demonstrates how to navigate forward in the browser history using Selenium WebDriver in Ruby. The `forward` method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.forward\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel JavaScript\nDESCRIPTION: This snippet demonstrates how to scroll to a specific element within a web page using Selenium's Wheel actions in JavaScript. It takes a WebElement as input and scrolls the viewport such that the bottom of the element is at the bottom of the screen. This is often needed before interacting with an element that might not be initially visible in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('target'));\nawait driver.actions().scroll(element, 0, 0).perform();\n```\n\n----------------------------------------\n\nTITLE: Setting ignoreZoomSetting for Internet Explorer\nDESCRIPTION: This code snippet illustrates how to set the `ignoreZoomSetting` capability for Internet Explorer using Selenium.  By default, the Internet Explorer driver expects the browser's zoom level to be 100%. Setting `ignoreZoomSetting` to `true` disables this check.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::IE::Options.new\noptions.ignore_zoom_setting = true\n```\n\n----------------------------------------\n\nTITLE: Set Logger Level in Ruby\nDESCRIPTION: This snippet demonstrates how to change the level of the logger in Ruby using the `#level=` method. It sets the logger level to `:debug`. Note that the default is `:info` as of Selenium v4.9.1.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nSelenium::WebDriver.logger.level = :debug\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Node with Managed Downloads\nDESCRIPTION: This command starts a Selenium node with managed downloads enabled. This allows tests to access files downloaded during the session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar node --enable-managed-downloads true\n```\n\n----------------------------------------\n\nTITLE: Setting Page Size - Java\nDESCRIPTION: This Java snippet sets the page size to \"A4\" using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setPageSize(\"A4\");\n\nassertThat(printOptions.getPageSize()).isEqualTo(\"A4\");\n```\n\n----------------------------------------\n\nTITLE: Setting Detach Option in Chrome\nDESCRIPTION: This code snippet demonstrates how to set the `detach` option to `true` in Chrome options, which keeps the browser open after the WebDriver session is closed. This is useful for debugging purposes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\noptions.add_experimental_option(\"detach\", True)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested LoadableComponents Usage (Java)\nDESCRIPTION: This code demonstrates how to use the nested `LoadableComponent` setup. It initializes a `ProjectPage`, a `SecuredPage` (which depends on `ProjectPage`), and an `EditIssue` (which depends on `SecuredPage`).  The `demonstrateNestedLoadableComponents` test method calls `editIssue.get()` which loads all dependent components. Subsequently it simulates filling out a form on the Edit Issue page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.ja.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class FooTest {\n  private EditIssue editIssue;\n\n  @Before\n  public void prepareComponents() {\n    WebDriver driver = new FirefoxDriver();\n\n    ProjectPage project = new ProjectPage(driver, \"selenium\");\n    SecuredPage securedPage = new SecuredPage(driver, project, \"example\", \"top secret\");\n    editIssue = new EditIssue(driver, securedPage);\n  }\n\n  @Test\n  public void demonstrateNestedLoadableComponents() {\n    editIssue.get();\n\n    editIssue.title.sendKeys('Title');\n    editIssue.body.sendKeys('What Happened');\n    editIssue.setHowToReproduce('How to Reproduce');\n    editIssue.setLogOutput('Log Output');\n    editIssue.setOperatingSystem('Operating System');\n    editIssue.setSeleniumVersion('Selenium Version');\n    editIssue.setBrowserVersion('Browser Version');\n    editIssue.setDriverVersion('Driver Version');\n    editIssue.setUsingGrid('I Am Using Grid');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid with Redis session map in Bash\nDESCRIPTION: This bash script starts a distributed Selenium Grid using the Redis session map.  It sets up the event bus, session queue, session map, distributor, router, and node components. It uses Coursier to fetch the required dependency (selenium-session-map-redis) and configures the session map using the specified TOML configuration file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.ja.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nSE_VERSION=<current_selenium_version>\nJAR_NAME=selenium-server-${SE_VERSION}.jar\nPUBLISH=\"--publish-events tcp://localhost:4442\"\nSUBSCRIBE=\"--subscribe-events tcp://localhost:4443\"\nSESSIONS=\"--sessions http://localhost:5556\"\nSESSIONS_QUEUE=\"--sessionqueue http://localhost:5559\"\necho 'Starting Event Bus'\njava -jar $JAR_NAME event-bus $PUBLISH $SUBSCRIBE --port 5557 &\necho 'Starting New Session Queue'\njava -jar $JAR_NAME sessionqueue --port 5559 &\necho 'Starting Session Map'\njava -jar $JAR_NAME \\\n--ext $(coursier fetch -p org.openqa.selenium:selenium-session-map-redis:${SE_VERSION}) \\\nsessions $PUBLISH $SUBSCRIBE --port 5556 --config sessions.toml &\necho 'Starting Distributor'\njava -jar $JAR_NAME  distributor $PUBLISH $SUBSCRIBE $SESSIONS $SESSIONS_QUEUE --port 5553 --bind-bus false &\necho 'Starting Router'\njava -jar $JAR_NAME router $SESSIONS --distributor http://localhost:5553 $SESSIONS_QUEUE --port 4444 &\necho 'Starting Node'\njava -jar $JAR_NAME node $PUBLISH $SUBSCRIBE &\n```\n\n----------------------------------------\n\nTITLE: Getting Performance Metrics via CDP in C#\nDESCRIPTION: This C# code snippet demonstrates how to retrieve performance metrics using Chrome DevTools Protocol (CDP) with Selenium. This snippet depends on the Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nawait session.Performance.Enable(new PerformanceEnableParameters());\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects\nDESCRIPTION: This code demonstrates how to create Color objects from various string representations such as HEX, RGB, RGBA, HSL, and HSLA in Ruby. It shows how to define colors using the Color.from_string() method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nHEX_COLOUR = Color.from_string('#2F7ED8')\nRGB_COLOUR = Color.from_string('rgb(255, 255, 255)')\nRGB_COLOUR = Color.from_string('rgb(40%, 20%, 40%)')\nRGBA_COLOUR = Color.from_string('rgba(255, 255, 255, 0.5)')\nRGBA_COLOUR = Color.from_string('rgba(40%, 20%, 40%, 0.5)')\nHSL_COLOUR = Color.from_string('hsl(100, 0%, 50%)')\nHSLA_COLOUR = Color.from_string('hsla(100, 0%, 50%, 0.5)')\n```\n\n----------------------------------------\n\nTITLE: Capture Full Page Screenshot (Python)\nDESCRIPTION: This Python code snippet takes a full page screenshot using Firefox and Selenium. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ndriver.get_full_page_screenshot_as_file(\"screenshot.png\")\n```\n\n----------------------------------------\n\nTITLE: Locating Element to the Right of Another (JavaScript)\nDESCRIPTION: This snippet demonstrates how to locate a button element to the right of the element with the ID 'cancel' using Selenium's relative locators in JavaScript.  It makes use of `locateWith` and `toRightOf` methods.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet submitLocator = locateWith(By.tagName('button')).toRightOf(By.id('cancel'));\n```\n\n----------------------------------------\n\nTITLE: Java - Matching Node with Custom Capabilities\nDESCRIPTION: Shows a Java example of how to match a specific Selenium Grid node using custom capabilities. It sets the `networkname:applicationName` and `nodename:applicationName` capabilities in the FirefoxOptions to target a node with the corresponding configuration.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.pt-br.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nFirefoxOptions options = new FirefoxOptions();\noptions.setCapability(\"networkname:applicationName\", \"node_1\");\noptions.setCapability(\"nodename:applicationName\", \"app_1\");\noptions.setBrowserVersion(\"96\");\noptions.setPlatformName(\"macOS\");\nWebDriver driver = new RemoteWebDriver(new URL(\"http://localhost:4444\"), options);\ndriver.get(\"https://selenium.dev\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Defining PostGreSQL Docker Compose Configuration\nDESCRIPTION: This YAML file defines a Docker Compose configuration for setting up a PostGreSQL database. It specifies the image, restart policy, environment variables for user, password, and database name, port mapping, and volume mapping to initialize the database with the `init.sql` script.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.pt-br.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  db:\n    image: postgres:9.6-bullseye\n    restart: always\n    environment:\n      - POSTGRES_USER=seluser\n      - POSTGRES_PASSWORD=seluser\n      - POSTGRES_DB=selenium_sessions\n    ports:\n      - \"5432:5432\"\n    volumes:\n    - ./init.sql:/docker-entrypoint-initdb.d/init.sql\n```\n\n----------------------------------------\n\nTITLE: Chrome Casting - JavaScript\nDESCRIPTION: This snippet is a placeholder as there is no code provided. The goal is to drive Chrome Cast devices with Javascript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\n// No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Find Elements from Element in Selenium WebDriver - JavaScript\nDESCRIPTION: This JavaScript code demonstrates finding child 'p' elements within a parent 'div' element using Selenium WebDriver. It uses the 'selenium-webdriver' npm package. The code initializes a ChromeDriver, navigates to a website, finds a parent 'div' element using CSS selector, and then retrieves all 'p' elements within that 'div'. The text content of each 'p' element is then printed to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {Builder, By} = require('selenium-webdriver');\n\n  (async function example() {\n      let driver = new Builder()\n          .forBrowser('chrome')\n          .build();\n\n      await driver.get('https://www.example.com');\n\n      // Get element with tag name 'div'\n      let element = driver.findElement(By.css(\"div\"));\n\n      // Get all the elements available with tag name 'p'\n      let elements = await element.findElements(By.css(\"p\"));\n      for(let e of elements) {\n          console.log(await e.getText());\n      }\n  })();\n```\n\n----------------------------------------\n\nTITLE: Preload a script (Java)\nDESCRIPTION: This Java snippet showcases how to preload a script using Selenium BiDi. The preloaded script is associated with a specific browsing context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\n            bidi.script().preload(new PreloadScriptParameters(browsingContext.getId(), \"test\", \"//nothing to do\"));\n```\n\n----------------------------------------\n\nTITLE: Importing Color Class\nDESCRIPTION: This snippet shows how to import the Color class in different programming languages to work with colors in Selenium WebDriver. The Color class allows you to create color objects and perform operations like comparing and converting colors.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ninclude Selenium::WebDriver::Support\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Timeout with Ruby\nDESCRIPTION: This code snippet demonstrates how to set the page load timeout in Ruby using Selenium WebDriver's Options class. The `page_load_timeout=` method is used to specify the maximum time a page is allowed to load before a TimeoutException is thrown. The timeout is set to 30 seconds in this example.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.manage.timeouts.page_load_timeout = 30\n```\n\n----------------------------------------\n\nTITLE: Check Session Ownership\nDESCRIPTION: Checks if a given session belongs to a specific node. Returns true if the session is owned by the node, and false otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.ja.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://localhost:5555/se/grid/node/owner/<session-id>' --header 'X-REGISTRATION-SECRET: <secret>'\n```\n\n----------------------------------------\n\nTITLE: Script Pinning in C# with Selenium CDP\nDESCRIPTION: This C# snippet demonstrates how to pin a script using Chrome DevTools Protocol (CDP) in Selenium. It establishes a CDP connection, pins a script, and verifies that breakpoints can be set. Requires a running Selenium WebDriver instance connected to a Chrome browser and uses namespaces such as `OpenQA.Selenium`, `OpenQA.Selenium.DevTools`, and `System.Threading.Tasks`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.ja.md#_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nstring scriptId = cdp.Domains.Script.Pin(\"Object.getOwnPropertyDescriptors(window)\").Result;\nAssert.That(cdp.Domains.Script.GetPossibleBreakpoints(scriptId).Result, Is.Not.Empty);\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Node with a Specific Hub (Shell)\nDESCRIPTION: This command starts a Selenium Grid Node and registers it with a Hub running on a different machine. It uses the `--hub` flag to specify the Hub's address.  It assumes the hub is using the default port.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.ja.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --hub http://<hub-ip>:4444\n```\n\n----------------------------------------\n\nTITLE: Refresh Page with Selenium (CSharp)\nDESCRIPTION: This snippet demonstrates how to refresh the current page using Selenium WebDriver in C#. It uses the `Navigate().Refresh()` method. The code assumes that the WebDriver instance has already been created and a page is loaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().Refresh();\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Version in Java\nDESCRIPTION: This snippet demonstrates how to set the browser version using Selenium in Java.  It retrieves the current browser version.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setBrowserVersion(\"100.0\");\noptions.getBrowserVersion();\n```\n\n----------------------------------------\n\nTITLE: Managing Edge with admin rights on Windows\nDESCRIPTION: This command demonstrates Selenium Manager managing the Edge beta browser with administrator rights on Windows.  It shows the full process of discovering, downloading, and installing both the Edge browser and its corresponding driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/status_of_selenium_manager_in_october_2023.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./selenium-manager --debug --browser edge --browser-version beta\n\nDEBUG   msedgedriver not found in PATH\nDEBUG   edge not found in PATH\nDEBUG   edge beta not found in the system\nDEBUG   Checking edge releases on https://edgeupdates.microsoft.com/api/products\nDEBUG   Required browser: edge 118.0.2088.17\nDEBUG   Downloading edge 118.0.2088.17 from https://msedge.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/7adec542-f34c-4dea-8e2a-f8c6fab4d2f3/MicrosoftEdgeBetaEnterpriseX64.msi\nDEBUG   Installing MicrosoftEdgeBetaEnterpriseX64.msi\nDEBUG   edge 118.0.2088.17 is available at C:\\Program Files (x86)\\Microsoft\\Edge Beta\\Application\\msedge.exe\nDEBUG   Required driver: msedgedriver 118.0.2088.17\nDEBUG   msedgedriver 118.0.2088.17 already in the cache\nINFO    Driver path: C:\\Users\\boni\\.cache\\selenium\\msedgedriver\\win64\\118.0.2088.17\\msedgedriver.exe\nINFO    Browser path: C:\\Program Files (x86)\\Microsoft\\Edge Beta\\Application\\msedge.exe\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency After Upgrade - XML\nDESCRIPTION: This XML code shows the Maven dependency configuration for Selenium Java after upgrading to Selenium 4. The version number for the selenium-java dependency is updated to a version 4.x.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <!-- more dependencies ... -->\n    <dependency>\n        <groupId>org.seleniumhq.selenium</groupId>\n        <artifactId>selenium-java</artifactId>\n        <version>4.4.0</version>\n    </dependency>\n    <!-- more dependencies ... -->\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to None in CSharp\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'none' in C#. The WebDriver waits until the initial page is downloaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_22\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace pageLoadStrategy {\n  class pageLoadStrategy {\n    public static void Main(string[] args) {\n      var chromeOptions = new ChromeOptions();\n      chromeOptions.PageLoadStrategy = PageLoadStrategy.None;\n      IWebDriver driver = new ChromeDriver(chromeOptions);\n      try {\n        driver.Navigate().GoToUrl(\"https://example.com\");\n      } finally {\n        driver.Quit();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to Normal in Ruby\nDESCRIPTION: This snippet shows how to set the page load strategy to 'normal' in Ruby using Selenium. WebDriver waits until the load event is fired.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nit 'normal' do\n  expect { options.page_load_strategy = 'normal' }.to_not raise_error\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Shrink To Fit in Selenium C#\nDESCRIPTION: This C# code snippet demonstrates how to enable shrink-to-fit using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_19\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.ShrinkToFit = true;\n\nAssert.That(printOptions.ShrinkToFit, Is.True);\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi: Enabling BiDi in JavaScript\nDESCRIPTION: This code snippet demonstrates how to enable BiDi in JavaScript using Selenium's options.  Calling the `enableBidi()` method on the Options object enables the WebSocket connection, necessary for bidirectional communication with WebDriver BiDi.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.ja.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nOptions().enableBidi();\n```\n\n----------------------------------------\n\nTITLE: Move To Element with Selenium\nDESCRIPTION: Moves the mouse to the center of the element, simulating a hover. Requires a WebDriver instance and that the element is in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_39\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(:id, 'clickable')\n@driver.action.move_to(element).perform\n```\n\n----------------------------------------\n\nTITLE: Evaluate script in browsing context - Java\nDESCRIPTION: This Java snippet evaluates a script in the browsing context using `evaluateFunction`. It navigates to a URL and executes the provided JavaScript code.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void evaluateScriptInBrowsingContext() {\n        String url = getHtmlPage();\n        driver.get(url);\n        BrowsingContext browsingContext = new BrowsingContext(driver, driver.getWindowHandle());\n        ScriptResult result = browsingContext.evaluateFunction(\"1+1\", false, null);\n        assertEquals(result.getResult().getNumber(), 2);\n    }\n```\n\n----------------------------------------\n\nTITLE: Get All Top level browsing contexts in Java\nDESCRIPTION: This snippet demonstrates how to retrieve all top-level browsing contexts using WebDriver BiDi in Java. It fetches a list of all top-level contexts and asserts that the list is not empty. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nList<BrowsingContextInfo> contextInfoList = browsingContext.getAllTopLevelContexts();\n\nassertThat(contextInfoList.stream().map(BrowsingContextInfo::getId))\n  .isNotEmpty();\n```\n\n----------------------------------------\n\nTITLE: Creating Named Color Objects - Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to create Color objects from named color strings like \"black\", \"chocolate\", and \"hotpink\" in Kotlin. The `Color.fromString()` method is used to parse these predefined color names.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nprivate val BLACK = Color.fromString(\"black\")\nprivate val CHOCOLATE = Color.fromString(\"chocolate\")\nprivate val HOTPINK = Color.fromString(\"hotpink\")\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions to Edge Options - Python\nDESCRIPTION: Demonstrates adding extensions to Edge options in Python.\nThis allows the user to load extensions at browser startup.\nDependencies: Selenium WebDriver, Edge, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\noptions.add_extension('/path/to/extension.crx')\n```\n\n----------------------------------------\n\nTITLE: Print Page in JavaScript\nDESCRIPTION: This code snippet demonstrates how to print a page to PDF using Selenium WebDriver's BiDi API in JavaScript. It uses the `browsingContext.print` method with various options for paper size, margins, and page ranges. Requires Selenium version 4.10 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('print the page', async () => {\n  const browsingContext = await getBrowsingContext(driver);\n  let result = await browsingContext.print({\n    margin: {\n      top: 1,\n      bottom: 1,\n      left: 1,\n      right: 1\n    },\n    pageRanges: [\n      '1-2'\n    ],\n    paperHeight: 8.5,\n    paperWidth: 11\n  });\n  expect(result).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Page Size - C#\nDESCRIPTION: This C# snippet sets the paper size to A4 using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.PageSize = PaperSize.A4;\n\nAssert.That(printOptions.PageSize, Is.EqualTo(PaperSize.A4));\nAssert.That(printOptions.PageSize.ToString(), Is.EqualTo(\"A4\"));\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies with Selenium WebDriver (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to delete all cookies in the current browser context using Selenium WebDriver in JavaScript. It assumes the webdriver is already initiated. The code navigates to a specific URL, adds two cookies, and then deletes all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.example.com/');\nawait driver.manage().deleteAllCookies();\n```\n\n----------------------------------------\n\nTITLE: Java Authentication Example\nDESCRIPTION: Demonstrates how to create a Selenium session in Java using a username and password to authenticate with a Grid instance configured with basic authentication.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.ja.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nClientConfig clientConfig = ClientConfig.defaultConfig()\n  .baseUrl(new URL(\"http://localhost:4444\"))\n  .authenticateAs(new UsernameAndPassword(\"admin\", \"myStrongPassword\"));\nHttpCommandExecutor executor = new HttpCommandExecutor(clientConfig);\nRemoteWebDriver driver = new RemoteWebDriver(executor, new ChromeOptions());\n```\n\n----------------------------------------\n\nTITLE: Failing Button Click (No Frame Switch)\nDESCRIPTION: This code snippet shows an example of how an attempt to click a button within an IFrame will fail without first switching to the IFrame. It demonstrates the need to change the driver's focus to the frame before interacting with the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n//This won't work\ndriver.findElement(By.tagName(\"button\")).click();\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Hub with Custom Session Timeout, Port, and Tracing\nDESCRIPTION: This snippet demonstrates starting a Selenium Hub with a custom session request timeout, a specific port number, and disabling tracing.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.zh-cn.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njava -jar selenium-server-<version>.jar hub --session-request-timeout 500 --port 3333 --tracing false\n```\n\n----------------------------------------\n\nTITLE: Removing JavaScript Exception Handler with WebDriver BiDi in Ruby\nDESCRIPTION: This code snippet shows how to remove a previously added JavaScript exception handler using WebDriver BiDi in Ruby. It uses the `remove_event_listener` method with the handler ID obtained when adding the handler.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.ja.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.bidi.script.remove_event_listener(\n  event: 'script.exception',\n  listener: add_listener['result']['handle']\n)\n```\n\n----------------------------------------\n\nTITLE: Relative Locator - Above in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate an element above another element using Relative Locators in Selenium.  It locates an input element above the element with the id 'password'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_39\n\nLANGUAGE: CSharp\nCODE:\n```\nvar emailLocator = RelativeBy.WithLocator(By.TagName(\"input\")).Above(By.Id(\"password\"));\n```\n\n----------------------------------------\n\nTITLE: Use existing window handle using WebDriver BiDi in Java\nDESCRIPTION: This snippet demonstrates how to create a browsing context for an existing tab/window to run commands using the WebDriver BiDi API in Java. It retrieves the current window handle and creates a `BrowsingContext` instance using it. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nString windowHandle = driver.getWindowHandle();\n\nBrowsingContext browsingContext = new BrowsingContext(driver, windowHandle);\nString id = browsingContext.getId();\nassertThat(windowHandle).isEqualTo(id);\n```\n\n----------------------------------------\n\nTITLE: Executing CDP commands with Selenium in Java\nDESCRIPTION: This Java snippet demonstrates how to execute a CDP command using Selenium's `executeCdpCommand` method. It requires a WebDriver instance connected to a Chrome or Edge browser. The example retrieves the browser version using the 'Browser.getVersion' command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/_index.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nMap<String, Object> commandParams = ImmutableMap.of(\"expression\", \"navigator.userAgent.toLowerCase()\");\nMap<String, Object> commandResult = driver.executeCdpCommand(\"Runtime.evaluate\", commandParams);\n\nassertNotNull(commandResult);\nassertThat(commandResult.get(\"result\"), instanceOf(Map.class));\n\nMap<String, Object> result = (Map<String, Object>) commandResult.get(\"result\");\n```\n\n----------------------------------------\n\nTITLE: Removing JavaScript Exception Handler with WebDriver BiDi in Python\nDESCRIPTION: This code snippet demonstrates how to remove a previously added JavaScript exception handler using WebDriver BiDi in Python. It uses the `remove_event_listener` method with the handler ID obtained when adding the handler.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.ja.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nbidi.script.remove_event_listener(\n    event='script.exception',\n    listener=add_listener['result']['handle'])\n```\n\n----------------------------------------\n\nTITLE: Set Page Scale Java\nDESCRIPTION: This code snippet demonstrates how to set the page scale (zoom) for printing in Java with Selenium, using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setScale(0.5);\n\nbyte[] pdfContent = ((PrintsPage) driver).print(printOptions);\n```\n\n----------------------------------------\n\nTITLE: Fluent API Usage in Page Object - Java\nDESCRIPTION: Demonstrates how to use a Fluent API within a Page Object in Selenium. It shows how to chain method calls to interact with the Google search page, setting a search string and then clicking the search button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/consider_using_a_fluent_api.zh-cn.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver.get( \"http://www.google.com/webhp?hl=en&amp;tab=ww\" );\nGoogleSearchPage gsp = new GoogleSearchPage(driver);\ngsp.setSearchString().clickSearchButton();\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Binary Location - Java\nDESCRIPTION: Demonstrates setting the path to the Edge browser executable in Java.\nThis allows Selenium to use a specific version or installation of Edge.\nDependencies: Selenium WebDriver, EdgeDriver, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\noptions.setBinary(\"/path/to/edge/msedge\");\n```\n\n----------------------------------------\n\nTITLE: Setting Log Output to Console (STDOUT) - Python\nDESCRIPTION: Demonstrates how to set the log output to the console (STDOUT) in Python using EdgeService.\nThis enables viewing the Edge driver logs directly in the console during test execution.\nDependencies: Selenium WebDriver, Edge, EdgeService.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nservice = EdgeService(log_output=sys.stdout)\ndriver = Edge(service=service, options=options)\n```\n\n----------------------------------------\n\nTITLE: Adding Virtual Authenticator in Java\nDESCRIPTION: This code snippet demonstrates adding a virtual authenticator with specified options to the Selenium WebDriver in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nVirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions()\n    .setProtocol(Protocol.CTAP2)\n    .setDomain(\"localhost\")\n    .setUserVerified(true);\noptions.addTransport(Transport.USB);\nauthenticator = ((HasAuthentication) driver).addVirtualAuthenticator(options);\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Logs in Ruby\nDESCRIPTION: This Ruby code retrieves browser logs from the Edge driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.manage.logs.get(:browser)\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Java\nDESCRIPTION: This Java snippet demonstrates configuring the HTTP client for Selenium. It's used to customize various parameters of the HTTP library. The exact code is retrieved from an external file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/http_client.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n{{< gh-codeblock path=\"examples/java/src/test/java/dev/selenium/drivers/HttpClientTest.java\" >}}\n```\n\n----------------------------------------\n\nTITLE: Example se-config.toml Configuration\nDESCRIPTION: This TOML configuration file configures various aspects of Selenium Manager, such as specifying the browser and driver versions, paths, mirror URLs, proxy settings, timeouts, and avoiding stats or downloads. It also demonstrates setting browser-specific versions and paths.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.pt-br.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[settings]\n# Avoid sending usage statistics to plausible.io\navoid_stats = true\n\n[selenium-manager]\n# Browser name: chrome, firefox, edge, iexplorer, safari, safaritp, webview2\nbrowser = \"chrome\"\n\n# Major browser version (e.g., 105, 106, etc. Also: beta, dev, canary -or nightly-, and esr -in Firefox- are accepted)\nbrowser_version = \"115\"\n\n# Driver name: chromedriver, geckodriver, msedgedriver, IEDriverServer, safaridriver\ndriver = \"chromedriver\"\n\n# Driver version (e.g., 106.0.5249.61, 0.31.0, etc.)\ndriver_version = \"115.0.5790.102\"\n\n# Set the path for the cache\ncache_path = \"tmp/cache\"\n\n```\n\n----------------------------------------\n\nTITLE: Get Element Attribute - C#\nDESCRIPTION: This snippet demonstrates how to get an attribute value of a web element using Selenium WebDriver in C#. It finds an element by name and uses the GetAttribute() method to retrieve the value of the 'value' attribute.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"email_input\"));\nString attributeValue = element.GetAttribute(\"value\");\nConsole.WriteLine(\"Attribute value: \" + attributeValue);\nAssert.That(attributeValue, Is.EqualTo(String.Empty));\n```\n\n----------------------------------------\n\nTITLE: Capturing Console Logs Python\nDESCRIPTION: This Python snippet shows how to capture console logs using Chrome DevTools Protocol (CDP) in Selenium. It uses the `devtools` property to access the CDP and listen for `Log.entryAdded` events to retrieve console log messages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.ja.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n        driver.devtools.send(Log.enable())\n        driver.devtools.add_listener(Log.entry_added, lambda log: print(log))\n```\n\n----------------------------------------\n\nTITLE: Evaluate script in browsing context - JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to evaluate a script in a browsing context using `script.evaluate`. The script simply returns the result of `1+1`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('evaluate script in browsing context', async () => {\n    const browsingContext = await new BrowsingContext(driver, tabId);\n    const result = await browsingContext.script.evaluate({\n      expression: '1+1',\n      target: {context: browsingContext.context},\n      awaitPromise: true,\n    });\n\n    expect(result.result.value).toBe(2);\n  });\n```\n\n----------------------------------------\n\nTITLE: Get Browser Title - JavaScript\nDESCRIPTION: This JavaScript snippet retrieves the title of the current web page using Selenium WebDriver. It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.pt-br.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ndriver.getTitle()\n```\n\n----------------------------------------\n\nTITLE: Initializing CDP Connection in Python\nDESCRIPTION: This Python code snippet shows how to connect to the Chrome DevTools Protocol (CDP) using Selenium.  It initializes the driver, gets the DevTools, creates a session and sends a command. It's a fundamental step for executing CDP commands directly.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/_index.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef test_get_session_id(driver):\n    dev_tools = driver.devtools\n    dev_tools.create_session()\n    session_id = dev_tools.session_id\n    assert isinstance(session_id, str)\n    assert len(session_id) > 0\n```\n\n----------------------------------------\n\nTITLE: Initializing IE Driver without IE present (Python)\nDESCRIPTION: This code snippet demonstrates how to initialize the Internet Explorer Driver when IE is not present on the system (Windows 11 default) using Python.  It uses default options, relying on the driver to locate Edge.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\n\ndriver = webdriver.Ie()\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element with Offset - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to scroll from an element with an offset using Selenium's Actions API and Wheel class. It takes an element, x offset, y offset, delta x, and delta y values as input. It scrolls from the origin point calculated from the center of the specified element, offset by given x and y values. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(name: 'meal')\n@driver.action.scroll_from(element, 25, 25, 50, 100).perform\n```\n\n----------------------------------------\n\nTITLE: GoogleSearchPage Fluent API Implementation in Java\nDESCRIPTION: This Java code defines a GoogleSearchPage class that extends a BasePage class and implements a fluent interface for interacting with the Google search page. The `setSearchString` method returns the GoogleSearchPage instance, allowing for method chaining. It depends on the WebDriver and By classes from Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/consider_using_a_fluent_api.ja.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class BasePage {\n    protected WebDriver driver;\n\n    public BasePage(WebDriver driver) {\n        this.driver = driver;\n    }\n}\n\npublic class GoogleSearchPage extends BasePage {\n    public GoogleSearchPage(WebDriver driver) {\n        super(driver);\n        // Generally do not assert within pages or components.\n        // Effectively throws an exception if the lambda condition is not met.\n        new WebDriverWait(driver, Duration.ofSeconds(3)).until(d -> d.findElement(By.id(\"logo\")));\n    }\n\n    public GoogleSearchPage setSearchString(String sstr) {\n        driver.findElement(By.id(\"gbqfq\")).sendKeys(sstr);\n        return this;\n    }\n\n    public void clickSearchButton() {\n        driver.findElement(By.id(\"gbqfb\")).click();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting CSS Color Values\nDESCRIPTION: This snippet retrieves the color and background color of a login button using Selenium WebDriver in Kotlin, then converts them to Color objects using the fromString method. It demonstrates how to fetch color values from web elements for testing purposes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nval loginButtonColour = Color.fromString(driver.findElement(By.id(\"login\")).getCssValue(\"color\"))\n\nval loginButtonBackgroundColour = Color.fromString(driver.findElement(By.id(\"login\")).getCssValue(\"background-color\"))\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Node (Distributed) (Java)\nDESCRIPTION: This command starts a Node component in a distributed Grid setup. This is equivalent to a regular node setup, but needs to be started independently. Default node port is 5555.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.zh-cn.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Node with Custom Capability (Java) - Node A\nDESCRIPTION: This snippet demonstrates how to start a Selenium node with a custom capability. It disables driver detection, configures the driver with a display name and maximum sessions, and sets a custom stereotype with a boolean capability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar node --detect-drivers false --driver-configuration display-name=\"Chrome (custom capability true)\" max-sessions=1 stereotype='{\"browserName\":\"chrome\",\"gsg:customcap\":true}' --port 6161\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set the size of the browser window to 1024x768 pixels using Selenium WebDriver. The `setRect` method is called with the desired width and height within an object. Asynchronous execution is required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.manage().window().setRect({ width: 1024, height: 768 });\n```\n\n----------------------------------------\n\nTITLE: Setting Command Line Arguments in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set command line switches for Internet Explorer using Selenium WebDriver.  It adds the `-k` and `-private` switches and forces the CreateProcess API before building the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ie = require('selenium-webdriver/ie');\nlet options = new ie.Options();\noptions.addBrowserCommandSwitches('-k');\noptions.addBrowserCommandSwitches('-private');\noptions.forceCreateProcessApi(true);\n\ndriver = await env.builder()\n          .setIeOptions(options)\n          .build();\n```\n\n----------------------------------------\n\nTITLE: Setting unhandledPromptBehavior in Ruby\nDESCRIPTION: This Ruby code shows how to set the `unhandledPromptBehavior` capability, determining the action taken when a user prompt appears. Available behaviors include 'dismiss', 'accept', 'dismiss and notify', 'accept and notify', and 'ignore'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_42\n\nLANGUAGE: Ruby\nCODE:\n```\nSelenium::WebDriver::Options.new(args: ['--unhandledPromptBehavior=accept'])\n```\n\n----------------------------------------\n\nTITLE: Setting ShrinkToFit using PrintOptions in Java\nDESCRIPTION: This code snippet demonstrates how to set whether the page will shrink-to-fit content on the page using the PrintOptions class in Java. The `setShrinkToFit()` method is used. The `getShrinkToFit()` is used to confirm the setting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setShrinkToFit(false);\n\nassertThat(printOptions.getShrinkToFit()).isFalse();\n```\n\n----------------------------------------\n\nTITLE: Removing Console Message Handler in WebDriver BiDi with Ruby\nDESCRIPTION: This Ruby code snippet removes a previously added console message handler. It leverages the handler ID obtained during the handler's initial creation, enabling dynamic control over console message monitoring. This code assumes `context` and `remove_console_listener` are properly defined.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.en.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\ncontext = driver.browsing_context\nlog.off_console(context)\n```\n\n----------------------------------------\n\nTITLE: Installing Unsigned Add-ons in Firefox with Selenium (JavaScript)\nDESCRIPTION: This Javascript snippet installs an unsigned add-on.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.installAddon('/path/to/unpacked/extension', true);\n```\n\n----------------------------------------\n\nTITLE: Setting Capabilities After Upgrade - JavaScript\nDESCRIPTION: This JavaScript code shows how to define capabilities, including cloud options, for Firefox after upgrading to Selenium 4. It sets browserName, browserVersion, platformName, and encapsulates build and name within a 'cloud:options' object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ncapabilities = {\n  browserName: 'firefox',\n  browserVersion: '92',\n  platformName: 'Windows 10',\n  'cloud:options': {\n     build: myTestBuild,\n     name: myTestName,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Safari Session (Ruby)\nDESCRIPTION: This code shows how to start a Safari session in Ruby with basic defined options. It initializes options and then creates a Safari driver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.en.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Safari::Options.new\ndriver = Selenium::WebDriver.for :safari, options: options\n```\n\n----------------------------------------\n\nTITLE: Ruby RSpec Execution\nDESCRIPTION: This snippet demonstrates how to run RSpec tests in Ruby. Navigate to the project directory and use `rspec` command to execute the tests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\n$ cd ruby\n$ rspec\n```\n\n----------------------------------------\n\nTITLE: Running Maven Tests\nDESCRIPTION: This code snippet demonstrates how to run tests using Maven from the command line.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean test\n```\n\n----------------------------------------\n\nTITLE: Set Window Size: Selenium WebDriver (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates how to set the size of the browser window to 1024x768 pixels using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_47\n\nLANGUAGE: kotlin\nCODE:\n```\ndriver.manage().window().size = Dimension(1024, 768)\n```\n\n----------------------------------------\n\nTITLE: Sample Customized Node - Java\nDESCRIPTION: This is a sample implementation of a customized Selenium Grid Node in Java. It extends the `Node` class and overrides methods to print messages to the console before and after various actions, such as creating sessions, executing WebDriver commands, and stopping sessions. The `create` method is a factory method that creates the custom node, wrapping a standard `LocalNode` instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/customize_node.zh-cn.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage org.seleniumhq.samples;\n\nimport java.net.URI;\nimport java.util.UUID;\nimport org.openqa.selenium.Capabilities;\nimport org.openqa.selenium.NoSuchSessionException;\nimport org.openqa.selenium.WebDriverException;\nimport org.openqa.selenium.grid.config.Config;\nimport org.openqa.selenium.grid.data.CreateSessionRequest;\nimport org.openqa.selenium.grid.data.CreateSessionResponse;\nimport org.openqa.selenium.grid.data.NodeId;\nimport org.openqa.selenium.grid.data.NodeStatus;\nimport org.openqa.selenium.grid.data.Session;\nimport org.openqa.selenium.grid.log.LoggingOptions;\nimport org.openqa.selenium.grid.node.HealthCheck;\nimport org.openqa.selenium.grid.node.Node;\nimport org.openqa.selenium.grid.node.local.LocalNodeFactory;\nimport org.openqa.selenium.grid.security.Secret;\nimport org.openqa.selenium.grid.security.SecretOptions;\nimport org.openqa.selenium.grid.server.BaseServerOptions;\nimport org.openqa.selenium.internal.Either;\nimport org.openqa.selenium.remote.SessionId;\nimport org.openqa.selenium.remote.http.HttpRequest;\nimport org.openqa.selenium.remote.http.HttpResponse;\nimport org.openqa.selenium.remote.tracing.Tracer;\n\npublic class DecoratedLoggingNode extends Node {\n\n  private Node node;\n\n  protected DecoratedLoggingNode(Tracer tracer, NodeId nodeId, URI uri, Secret registrationSecret, Duration sessionTimeout) {\n    super(tracer, nodeId, uri, registrationSecret, sessionTimeout);\n  }\n\n  public static Node create(Config config) {\n    LoggingOptions loggingOptions = new LoggingOptions(config);\n    BaseServerOptions serverOptions = new BaseServerOptions(config);\n    URI uri = serverOptions.getExternalUri();\n    SecretOptions secretOptions = new SecretOptions(config);\n    NodeOptions nodeOptions = new NodeOptions(config);\n    Duration sessionTimeout = nodeOptions.getSessionTimeout();\n\n    // Refer to the foot notes for additional context on this line.\n    Node node = LocalNodeFactory.create(config);\n\n    DecoratedLoggingNode wrapper = new DecoratedLoggingNode(loggingOptions.getTracer(),\n        node.getId(),\n        uri,\n        secretOptions.getRegistrationSecret(),\n        sessionTimeout);\n    wrapper.node = node;\n    return wrapper;\n  }\n\n  @Override\n  public Either<WebDriverException, CreateSessionResponse> newSession(\n      CreateSessionRequest sessionRequest) {\n    System.out.println(\"Before newSession()\");\n    try {\n      return this.node.newSession(sessionRequest);\n    } finally {\n      System.out.println(\"After newSession()\");\n    }\n  }\n\n  @Override\n  public HttpResponse executeWebDriverCommand(HttpRequest req) {\n    try {\n      System.out.println(\"Before executeWebDriverCommand(): \" + req.getUri());\n      return node.executeWebDriverCommand(req);\n    } finally {\n      System.out.println(\"After executeWebDriverCommand()\");\n    }\n  }\n\n  @Override\n  public Session getSession(SessionId id) throws NoSuchSessionException {\n    try {\n      System.out.println(\"Before getSession()\");\n      return node.getSession(id);\n    } finally {\n      System.out.println(\"After getSession()\");\n    }\n  }\n\n  @Override\n  public HttpResponse uploadFile(HttpRequest req, SessionId id) {\n    try {\n      System.out.println(\"Before uploadFile()\");\n      return node.uploadFile(req, id);\n    } finally {\n      System.out.println(\"After uploadFile()\");\n    }\n  }\n\n  @Override\n  public void stop(SessionId id) throws NoSuchSessionException {\n    try {\n      System.out.println(\"Before stop()\");\n      node.stop(id);\n    } finally {\n      System.out.println(\"After stop()\");\n    }\n  }\n\n  @Override\n  public boolean isSessionOwner(SessionId id) {\n    try {\n      System.out.println(\"Before isSessionOwner()\");\n      return node.isSessionOwner(id);\n    } finally {\n      System.out.println(\"After isSessionOwner()\");\n    }\n  }\n\n  @Override\n  public boolean isSupporting(Capabilities capabilities) {\n    try {\n      System.out.println(\"Before isSupporting\");\n      return node.isSupporting(capabilities);\n    } finally {\n      System.out.println(\"After isSupporting()\");\n    }\n  }\n\n  @Override\n  public NodeStatus getStatus() {\n    try {\n      System.out.println(\"Before getStatus()\");\n      return node.getStatus();\n    } finally {\n      System.out.println(\"After getStatus()\");\n    }\n  }\n\n  @Override\n  public HealthCheck getHealthCheck() {\n    try {\n      System.out.println(\"Before getHealthCheck()\");\n      return node.getHealthCheck();\n    } finally {\n      System.out.println(\"After getHealthCheck()\");\n    }\n  }\n\n  @Override\n  public void drain() {\n    try {\n      System.out.println(\"Before drain()\");\n      node.drain();\n    } finally {\n      System.out.println(\"After drain()\");\n    }\n\n  }\n\n  @Override\n  public boolean isReady() {\n    try {\n      System.out.println(\"Before isReady()\");\n      return node.isReady();\n    } finally {\n      System.out.println(\"After isReady()\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Performance Metrics via CDP in Java\nDESCRIPTION: This Java code snippet demonstrates how to retrieve performance metrics using Chrome DevTools Protocol (CDP) with Selenium. It retrieves metrics related to CPU time and JavaScript memory.  This snippet depends on the Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nsession.sendCommand(Performance.enable(Optional.empty()));\n```\n\n----------------------------------------\n\nTITLE: Maximize Window - Java\nDESCRIPTION: Demonstrates how to maximize the browser window in Java using Selenium WebDriver. The `maximize()` method expands the window to fill the screen without blocking the operating system's menu and toolbars.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_54\n\nLANGUAGE: java\nCODE:\n```\ndriver.manage().window().maximize();\n```\n\n----------------------------------------\n\nTITLE: Capturing Console Logs in Java\nDESCRIPTION: This Java snippet demonstrates how to capture console logs using Chrome DevTools Protocol (CDP) with Selenium. It requires the Selenium library and a configured ChromeDriver instance. The code sets up a listener for console events and prints the log messages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// Requires implementation - content not directly available in the source\n```\n\n----------------------------------------\n\nTITLE: Pausing Actions API in Java\nDESCRIPTION: This code snippet demonstrates how to pause between actions using the Actions API in Java. It creates an Actions object, moves to an element, pauses for a specified duration, and then performs the actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.pt-br.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nActions actions = new Actions(driver);\nactions.moveToElement(element)\n  .pause(Duration.ofSeconds(1))\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Forward Click with Selenium\nDESCRIPTION: Performs a forward click by pressing and releasing mouse button 4.  It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait actions.move({origin: element}).click(MouseButton.FORWARD).perform();\n```\n\n----------------------------------------\n\nTITLE: Using Pen Actions in Selenium - C#\nDESCRIPTION: This code snippet demonstrates how to use the Pen class in Selenium with C# to simulate stylus input. It initializes a new Actions object, moves to an element, performs a pen down action, moves by a specified offset, and then performs a pen up action.  It requires a WebDriver instance and a target IWebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.zh-cn.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nActions performPen = new Actions(driver);\nIWebElement canvas = driver.FindElement(By.Id(\"example\"));\n\nperformPen.MoveToElement(canvas)\n    .ClickAndHold()\n    .MoveByOffset(50, 50)\n    .Release()\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Performing Actions with Selenium BiDi\nDESCRIPTION: This Java snippet shows how to perform actions using the Selenium BiDi API. It demonstrates creating a pointer action and then performing the action with the BiDi API.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/input.en.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n    PointerActions actions = new PointerActions(input);\n    actions.pointerDown(MouseButton.LEFT).pointerUp(MouseButton.LEFT);\n    input.perform(actions);\n```\n\n----------------------------------------\n\nTITLE: Refactored Page Object with LoadableComponent and PageFactory in Selenium Java\nDESCRIPTION: This Java code represents a refactored Page Object using the LoadableComponent and PageFactory classes in Selenium. It demonstrates the use of `@FindBy` annotations to locate elements and `PageFactory.initElements()` to initialize them, simplifying element access and improving code readability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.pt-br.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.webdriver;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\nimport org.openqa.selenium.support.PageFactory;\n\nimport static junit.framework.Assert.assertTrue;\n\npublic class EditIssue extends LoadableComponent<EditIssue> {\n\n  private final WebDriver driver;\n  \n  // By default the PageFactory will locate elements with the same name or id\n  // as the field. Since the issue_title element has an id attribute of \"issue_title\"\n  // we don't need any additional annotations.\n  private WebElement issue_title;\n  \n  // But we'd prefer a different name in our code than \"issue_body\", so we use the\n  // FindBy annotation to tell the PageFactory how to locate the element.\n  @FindBy(id = \"issue_body\") private WebElement body;\n  \n  public EditIssue(WebDriver driver) {\n    this.driver = driver;\n    \n    // This call sets the WebElement fields.\n    PageFactory.initElements(driver, this);\n  }\n\n  @Override\n  protected void load() {\n    driver.get(\"https://github.com/SeleniumHQ/selenium/issues/new?assignees=&labels=I-defect%2Cneeds-triaging&projects=&template=bug-report.yml&title=%5B%F0%9F%90%9B+Bug%5D%3A+\");\n  }\n\n  @Override\n  protected void isLoaded() throws Error {\n    String url = driver.getCurrentUrl();\n    assertTrue(\"Not on the issue entry page: \" + url, url.endsWith(\"/new\"));\n  }\n\n  public void setHowToReproduce(String howToReproduce) {\n    WebElement field = driver.findElement(By.id(\"issue_form_repro-command\"));\n    clearAndType(field, howToReproduce);\n  }\n\n  public void setLogOutput(String logOutput) {\n    WebElement field = driver.findElement(By.id(\"issue_form_logs\"));\n    clearAndType(field, logOutput);\n  }\n\n  public void setOperatingSystem(String operatingSystem) {\n    WebElement field = driver.findElement(By.id(\"issue_form_operating-system\"));\n    clearAndType(field, operatingSystem);\n  }\n\n  public void setSeleniumVersion(String seleniumVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_selenium-version\"));\n    clearAndType(field, logOutput);\n  }\n\n  public void setBrowserVersion(String browserVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_browser-versions\"));\n    clearAndType(field, browserVersion);\n  }\n\n  public void setDriverVersion(String driverVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_browser-driver-versions\"));\n    clearAndType(field, driverVersion);\n  }\n\n  public void setUsingGrid(String usingGrid) {\n    WebElement field = driver.findElement(By.id(\"issue_form_selenium-grid-version\"));\n    clearAndType(field, usingGrid);\n  }\n\n  public IssueList submit() {\n    driver.findElement(By.cssSelector(\"button[type='submit']\")).click();\n    return new IssueList(driver);\n  }\n\n  private void clearAndType(WebElement field, String text) {\n    field.clear();\n    field.sendKeys(text);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Add-ons in Firefox with Selenium (Ruby)\nDESCRIPTION: This Ruby snippet uninstalls a Firefox add-on given its ID. The `uninstall_addon` method is used to remove the add-on.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.uninstall_addon('addon@id')\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - Selenium WebDriver - JavaScript\nDESCRIPTION: This snippet sets the position of the browser window to the top-left corner (0, 0) of the primary display using the Selenium WebDriver API in JavaScript.  It uses the setRect method and requires an await since it is asynchronous. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 将窗口移动到主显示器的左上角\nawait driver.manage().window().setRect({x: 0, y: 0});\n```\n\n----------------------------------------\n\nTITLE: Initializing Safari Driver with Options (Kotlin)\nDESCRIPTION: This Kotlin code initializes the Safari driver with basic options. It creates a `SafariOptions` object and passes it to the `SafariDriver` constructor.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.ja.md#_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\nval options = SafariOptions()\nval driver = SafariDriver(options)\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Driver with Options - Java\nDESCRIPTION: This Java snippet demonstrates initializing a local Selenium ChromeDriver with specific options. It creates a new ChromeDriver instance using ChromeOptions to configure the browser behavior.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\ndriver = new ChromeDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Relative Locator - Left of in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate an element to the left of another element using Relative Locators in Selenium.  It locates a button element to the left of the element with the id 'submit'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet cancelLocator = locateWith(By.tagName('button')).toLeftOf(By.id('submit'));\n```\n\n----------------------------------------\n\nTITLE: Find All Matching Elements by Tag Name - JavaScript\nDESCRIPTION: This snippet demonstrates how to find all elements with a specific tag name using the Selenium WebDriver in JavaScript. It uses the `findElements` method with `By.tagName` to locate all matching elements. This is an asynchronous operation, so it uses `await`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst plants = await driver.findElements(By.tagName('li'));\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Viewport in Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse pointer from the upper-left corner of the current viewport by a specified offset using Selenium WebDriver. It utilizes the `moveByOffset` method to achieve this. No specific dependencies beyond the Selenium WebDriver library are needed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nActions(driver)\n  .moveByOffset(30, 40)\n  .pause(Duration.ofSeconds(1))\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Setting Append Log and Readable Timestamp for Edge in Java\nDESCRIPTION: These Java code snippets demonstrate how to enable appending to the log file and using readable timestamps when logging in EdgeDriverService. These configurations require specifying the log path and log level.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nEdgeDriverService service = new EdgeDriverService.Builder()\n  .withAppendLog(true).withReadableTimestamp(true).build();\n```\n\n----------------------------------------\n\nTITLE: Printing Page in Kotlin with Selenium\nDESCRIPTION: This snippet demonstrates how to print a page using Selenium in Kotlin. It retrieves the content of a PDF after setting print options for page ranges. Requires Selenium's PrintOptions and Pdf classes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_95\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.get(\"https://www.selenium.dev\")\n    val printer = driver as PrintsPage\n\n    val printOptions = PrintOptions()\n    printOptions.setPageRanges(\"1-2\")\n    \n    val pdf: Pdf = printer.print(printOptions)\n    val content = pdf.content\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element by Offset - Selenium\nDESCRIPTION: Drags an element by a specified offset. The action presses the left mouse button on the source element, moves the element by the specified x and y offsets, and then releases the mouse button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement source = driver.FindElement(By.Id(\"draggable\"));\nnew Actions(driver).ClickAndHold(source)\n    .MoveByOffset(150, 50)\n    .Release()\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Verifying Color Formats\nDESCRIPTION: This code converts a Color object to HEX, RGBA, and RGB formats and then compares the resulting strings with expected values using the equals() method in Kotlin. This approach allows for static verification of color values in specific formats.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\nassert(loginButtonBackgroundColour.asHex().equals(\"#ff69b4\"))\nassert(loginButtonBackgroundColour.asRgba().equals(\"rgba(255, 105, 180, 1)\"))\nassert(loginButtonBackgroundColour.asRgb().equals(\"rgb(255, 105, 180)\"))\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level - Ruby\nDESCRIPTION: Demonstrates how to configure the GeckoDriver service to set the log level in Ruby. This allows controlling the verbosity of the logs. Requires the Selenium WebDriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_25\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.firefox(log_level: :debug)\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Firefox Options\nDESCRIPTION: This code snippet demonstrates how to add arguments to Firefox options, commonly used for setting headless mode or specifying a profile. The `addArguments` method is used to pass command-line switches to the Firefox browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\noptions.addArguments(\"--headless\");\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Ruby\nDESCRIPTION: This Ruby snippet demonstrates configuring HTTP Client parameters in Selenium. It customizes parameters of the HTTP library. The exact code is retrieved from an external file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/http_client.ja.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n{{< gh-codeblock path=\"examples/ruby/spec/drivers/http_client_spec.rb#L7-L8\" >}}\n```\n\n----------------------------------------\n\nTITLE: Get Window Position: Selenium WebDriver (Python)\nDESCRIPTION: This Python snippet demonstrates how to fetch the position of the browser window using Selenium WebDriver. It accesses the x and y coordinates individually and also shows how to retrieve them through the dictionary object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n    # Access each dimension individually\nx = driver.get_window_position().get('x')\ny = driver.get_window_position().get('y')\n\n    # Or store the dimensions and query them later\nposition = driver.get_window_position()\nx1 = position.get('x')\ny1 = position.get('y')\n```\n\n----------------------------------------\n\nTITLE: Starting Distributor with Session Management - Java\nDESCRIPTION: This command starts the Selenium Grid distributor, configuring it to use a session map server at http://localhost:5556 and a session queue server at http://localhost:5559. It also disables the event bus.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.pt-br.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar distributor --sessions http://localhost:5556 --sessionqueue http://localhost:5559 --bind-bus false\n```\n\n----------------------------------------\n\nTITLE: Node Configuration TOML (Customized Drivers)\nDESCRIPTION: Configures a Selenium Grid node with customized drivers, including specific versions and binaries for Firefox Nightly, Chrome Beta, and Chrome Dev. It disables driver detection and explicitly defines driver configurations, including display names, stereotypes, and webdriver executables.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.pt-br.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[node]\ndetect-drivers = false\n[[node.driver-configuration]]\nmax-sessions = 100\ndisplay-name = \"Firefox Nightly\"\nstereotype = \"{\\\"browserName\\\": \\\"firefox\\\", \\\"browserVersion\\\": \\\"93\\\", \\\"platformName\\\": \\\"MAC\\\", \\\"moz:firefoxOptions\\\": {\\\"binary\\\": \\\"/Applications/Firefox Nightly.app/Contents/MacOS/firefox-bin\\\"}}\"\n[[node.driver-configuration]]\ndisplay-name = \"Chrome Beta\"\nstereotype = \"{\\\"browserName\\\": \\\"chrome\\\", \\\"browserVersion\\\": \\\"94\\\", \\\"platformName\\\": \\\"MAC\\\", \\\"goog:chromeOptions\\\": {\\\"binary\\\": \\\"/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta\\\"}}\"\n[[node.driver-configuration]]\ndisplay-name = \"Chrome Dev\"\nstereotype = \"{\\\"browserName\\\": \\\"chrome\\\", \\\"browserVersion\\\": \\\"95\\\", \\\"platformName\\\": \\\"MAC\\\", \\\"goog:chromeOptions\\\": {\\\"binary\\\": \\\"/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev\\\"}}\"\nwebdriver-executable = '/path/to/chromedriver/95/chromedriver'\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Code - Ruby\nDESCRIPTION: This HTML snippet demonstrates how to include a specific code block from a Ruby file in the Selenium GitHub repository within a tab. The `gh-codeblock` shortcode is used to link directly to the code in the repository.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.pt-br.md#_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n{{</* gh-codeblock path=\"examples/ruby/spec/getting_started/first_script.rb#L17-L18\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium\nDESCRIPTION: Demonstrates how to perform a copy and paste action using Selenium's Actions API. It involves pressing and releasing control/command keys along with 'a', 'c', and 'v'. This example shows how to copy all text, and then paste it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.TagName(\"textarea\"));\nstring selectAll = OperatingSystem.IsMacOS() ? Keys.Command + \"a\" : Keys.Control + \"a\";\nstring copy = OperatingSystem.IsMacOS() ? Keys.Command + \"c\" : Keys.Control + \"c\";\nstring paste = OperatingSystem.IsMacOS() ? Keys.Command + \"v\" : Keys.Control + \"v\";\nelement.SendKeys(\"Selenium\");\nelement.SendKeys(selectAll);\nelement.SendKeys(copy);\nelement.SendKeys(paste);\nelement.SendKeys(\"!\");\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid with Coursier and Java 11 HTTP Client\nDESCRIPTION: This command starts the Selenium Grid server in standalone mode, configuring it to use the Java 11 HTTP client. It uses Coursier to fetch the `selenium-http-jdk-client` JAR file and adds it to the classpath. Coursier must be installed and available in the system's PATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.en.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\njava -Dwebdriver.http.factory=jdk-http-client -jar selenium-server-<version>.jar --ext $(coursier fetch -p org.seleniumhq.selenium:selenium-http-jdk-client:<version>) standalone\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Version in Python\nDESCRIPTION: This snippet demonstrates how to set the browser version using Selenium in Python.  It retrieves the current browser version.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\noptions = Options()\noptions.browser_version = \"106.0\"\noptions.browser_version\n```\n\n----------------------------------------\n\nTITLE: Call function in sandbox - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to call a function in a specific sandbox. It retrieves the browsing context and calls a function within it using the `sandbox` option.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('call function in a sandbox', async () => {\n    const browsingContext = await new BrowsingContext(driver, tabId);\n\n    await browsingContext.script.callFunction({\n      functionDeclaration: '() => {return 1}',\n      target: {context: browsingContext.context, sandbox: 'test'},\n      awaitPromise: true,\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Alert Content Formatting HTML\nDESCRIPTION: This snippet shows how to format alert content in the documentation. It uses specific delimiters to denote the start and end of the alert content, which will be rendered as an alert box in the final documentation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.en.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{</* alert-content */>}}\nAdditional information about what specific content is needed\n{{</* /alert-content */>}}\n```\n\n----------------------------------------\n\nTITLE: Run Specific Python Test with Pytest\nDESCRIPTION: This command executes a specific test script using the pytest testing framework. It requires specifying the full path to the test file.  Replace `path/to/test_script.py` with the actual path to the test file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/python/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\npytest path/to/test_script.py\n```\n\n----------------------------------------\n\nTITLE: Network Conditions - Ruby\nDESCRIPTION: This snippet demonstrates how to simulate network conditions using Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_56\n\nLANGUAGE: Ruby\nCODE:\n```\ndev_tools.network.enable\n```\n\n----------------------------------------\n\nTITLE: Verify Unicorn Existence (Python)\nDESCRIPTION: This snippet demonstrates verifying the existence of the created unicorn using the `exists()` method of the UnicornConfirmationPage. It asserts that the 'Sparkles' unicorn has been created with all attributes intact by comparing the provided `sparkles` object with the data on the confirmation page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n# The exists() method from UnicornConfirmationPage will take the Sparkles\n# object--a specification of the attributes you want to see, and compare\n# them with the fields on the page.\nassert unicorn_confirmation_page.exists(sparkles), \"Sparkles should have been created, with all attributes intact\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Capabilities Before Selenium 4 - JavaScript\nDESCRIPTION: This JavaScript code shows how to define browser capabilities as a JavaScript object before Selenium 4. It specifies browserName, platform, version, build, and name, which are then used to configure the WebDriver session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncaps = {};\ncaps['browserName'] = 'Firefox';\ncaps['platform'] = 'Windows 10';\ncaps['version'] = '92';\ncaps['build'] = myTestBuild;\ncaps['name'] = myTestName;\n```\n\n----------------------------------------\n\nTITLE: Finding Elements From Element - Java\nDESCRIPTION: This code snippet shows how to find child elements within a parent element using Selenium WebDriver in Java. It retrieves a parent 'div' element and then finds all 'p' elements within that div, printing their text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_29\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport java.util.List;\n\npublic class findElementsFromElement {\n    public static void main(String[] args) {\n        WebDriver driver = new ChromeDriver();\n        try {\n            driver.get(\"https://example.com\");\n\n            // Get element with tag name 'div'\n            WebElement element = driver.findElement(By.tagName(\"div\"));\n\n            // Get all the elements available with tag name 'p'\n            List<WebElement> elements = element.findElements(By.tagName(\"p\"));\n            for (WebElement e : elements) {\n                System.out.println(e.getText());\n            }\n        } finally {\n            driver.quit();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookie Attribute in JavaScript\nDESCRIPTION: This JavaScript code snippet (using a testing framework like Jest) demonstrates how to verify the SameSite attribute of a cookie using Selenium WebDriver. It navigates to a URL, retrieves a cookie, and asserts that its SameSite attribute is set to 'Strict'.  Assumes a testing environment with Selenium setup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://example.com')\nconst cookie = await driver.manage().getCookie('key')\nexpect(cookie.sameSite).toBe('Strict')\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium WebDriver in C# via NuGet\nDESCRIPTION: This snippet shows how to install Selenium WebDriver version 4.4.0 in a C# project using the NuGet Package Manager console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nPM> Install-Package Selenium.WebDriver -Version 4.4.0\n```\n\n----------------------------------------\n\nTITLE: Setting Ensure Clean Session (Ruby)\nDESCRIPTION: This code snippet shows how to ensure a clean session by clearing the cache, browser history, and cookies for all running instances of Internet Explorer using Ruby. It sets the `ensure_clean_session` option to `true`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.ensure_clean_session = true\n```\n\n----------------------------------------\n\nTITLE: Querying Session, Node, and Grid Details\nDESCRIPTION: This example shows how to query details for the Grid, its Nodes and Sessions. The curl command sends a POST request with the GraphQL query in a JSON payload.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.en.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ grid { uri, maxSession, sessionCount }, nodesInfo { nodes { id, uri, status, sessions { id, capabilities, startTime, uri, nodeId, nodeUri, sessionDurationMillis, slot { id, stereotype, lastStarted } }, slotCount, sessionCount }} }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot - Selenium WebDriver - Kotlin\nDESCRIPTION: This snippet takes a screenshot using Selenium WebDriver in Kotlin and saves it to a file. It imports necessary classes for file handling and WebDriver functionality. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_57\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport com.oracle.tools.packager.IOUtils.copyFile\nimport org.openqa.selenium.*\nimport org.openqa.selenium.chrome.ChromeDriver\nimport java.io.File\n\nfun main(){\nval driver =  ChromeDriver()\ndriver.get(\"https://www.example.com\")\nval scrFile = (driver as TakesScreenshot).getScreenshotAs<File>(OutputType.FILE)\ncopyFile(scrFile, File(\"./image.png\"))\ndriver.quit()\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated setLegacy option in Firefox Java\nDESCRIPTION: This Java snippet illustrates the deprecation of the `setLegacy` option when using `FirefoxOptions`.  This option was used for automating older versions of Firefox.  The code shows how the `setLegacy` method is called on `FirefoxOptions`, which is now deprecated and should be removed to rely on GeckoDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_23\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxOptions options = new FirefoxOptions();\noptions.setLegacy(true);\n```\n\n----------------------------------------\n\nTITLE: Setting W3C Capabilities (After) - CSharp\nDESCRIPTION: This snippet demonstrates how to set capabilities in Selenium 4 for C# using FirefoxOptions and AddAdditionalOption for cloud:options to be compatible with W3C standards. It sets PlatformName, BrowserVersion, build, and name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\nvar browserOptions = new FirefoxOptions();\nbrowserOptions.PlatformName = \"Windows 10\";\nbrowserOptions.BrowserVersion = \"92\";\nvar cloudOptions = new Dictionary<string, object>();\ncloudOptions.Add(\"build\", myTestBuild);\ncloudOptions.Add(\"name\", myTestName);\nbrowserOptions.AddAdditionalOption(\"cloud:options\", cloudOptions);\nvar driver = new RemoteWebDriver(new Uri(CloudURL), browserOptions);\n```\n\n----------------------------------------\n\nTITLE: Force Create Process API in C#\nDESCRIPTION: This C# code snippet demonstrates how to force the use of the CreateProcess API when launching Internet Explorer. It achieves this by setting the `ForceCreateProcessApi` property to `true` on the `InternetExplorerOptions` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_25\n\nLANGUAGE: CSharp\nCODE:\n```\nusing System;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.IE;\n\nnamespace ieTest {\n class Program {\n  static void Main(string[] args) {\n   InternetExplorerOptions options = new InternetExplorerOptions();\n   options.ForceCreateProcessApi = true;\n   IWebDriver driver = new InternetExplorerDriver(options);\n   driver.Url = \"https://google.com/ncr\";\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium\nDESCRIPTION: This code snippet demonstrates how to initialize a Select object in Selenium WebDriver. It first locates a <select> element using a locator strategy (e.g., by ID) and then creates a Select object using the found element.  Note that as of Selenium 4.5, you can't create a `Select` object if the `<select>` element is disabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nval selectElement = driver.findElement(By.id(\"selectomatic\"))\nval select = Select(selectElement)\n```\n\n----------------------------------------\n\nTITLE: Forward Button Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to simulate a click on the forward button of a mouse (button X2) using Selenium. It involves pressing and releasing mouse button 4 on the target element. Requires Selenium WebDriver and version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"my-element\"));\nActions actions = new Actions(driver);\nactions.MoveToElement(element).Click(MouseButton.ForwardButton).Perform();\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Event Bus (Shell)\nDESCRIPTION: This command starts the Selenium Grid Event Bus, enabling internal communication between Grid components. It specifies the publish-events, subscribe-events, and main port for the Event Bus.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.ja.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar event-bus --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443 --port 5557\n```\n\n----------------------------------------\n\nTITLE: Downloaded File JSON Response\nDESCRIPTION: Example JSON response when retrieving a downloaded file. The `filename` key provides the filename, and the `contents` key contains the Base64 encoded zipped contents of the file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.zh-cn.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": {\n    \"filename\": \"Red-blue-green-channel.jpg\",\n    \"contents\": \"Base64EncodedStringContentsOfDownloadedFileAsZipGoesHere\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Drain Node Directly\nDESCRIPTION: This snippet directly drains a node, waiting for ongoing sessions to complete before stopping the node. Requires the registration secret.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.zh-cn.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request POST 'http://localhost:5555/se/grid/node/drain' --header 'X-REGISTRATION-SECRET: <secret>'\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Current Position in Selenium\nDESCRIPTION: This code snippet shows how to move the mouse pointer from its current position by a specified offset using Selenium WebDriver. It uses the `move` method. The position will be in the upper-left corner of the viewport if the mouse hasn't moved before. Note that pointer position does not change when the page is scrolled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.actions().move({x: 30, y: -10}).perform();\n```\n\n----------------------------------------\n\nTITLE: Set Page Ranges CSharp\nDESCRIPTION: This code snippet shows how to set the page ranges for printing in C# with Selenium, using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.PageRanges = new List<string> { \"1-2\" };\n\nvar print = (IPrintsPage)driver;\nstring base64Pdf = print.Print(printOptions);\n```\n\n----------------------------------------\n\nTITLE: Forward Click with Selenium\nDESCRIPTION: Performs a forward click by pressing and releasing mouse button 4.  It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"clickable\"));\nActions actions = new Actions(driver);\nactions.MoveToElement(element)\n    .Click(MouseButton.ForwardButton)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Files - Python Example\nDESCRIPTION: Shows the command to execute Selenium tests in Python using pytest.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.zh-cn.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\npytest -v --tb=line tests/getting_started/first_script.py\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Get stereotypes of each node\nDESCRIPTION: This command uses curl to execute a GraphQL query and retrieve the stereotypes of each node in the grid from the `nodesInfo` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.zh-cn.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\": \"{ nodesInfo { nodes { stereotypes } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Tag Name in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate a web element using its HTML tag name in Selenium. It initializes a WebDriver instance and uses the `By.tagName()` method to find the first element with the specified tag.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.tagName('a'));\n```\n\n----------------------------------------\n\nTITLE: Importing Color class for Selenium\nDESCRIPTION: This code snippet demonstrates how to import the Color class in different programming languages to use it with Selenium WebDriver. The Color class allows working with colors in web elements, such as converting and comparing them.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.support.color import Color\n```\n\n----------------------------------------\n\nTITLE: Creating a Pen Input Source Ruby\nDESCRIPTION: This code snippet demonstrates how to create a Pen input source in Ruby and use it to interact with a web element.  It defines a Pen, moves it to a specific element, and then performs a down and up action, simulating a tap or click. Requires Selenium version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.pt-br.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\npen = Pen.new(driver, 'pen1')\nelement = driver.find_element(id: 'my-element')\n\ndriver.action\n  .tick(pen.move_to(element))\n  .tick(pen.down(::Selenium::WebDriver::MouseButton::LEFT))\n  .tick(pen.up(::Selenium::WebDriver::MouseButton::LEFT))\n  .perform\n```\n\n----------------------------------------\n\nTITLE: GraphQL: Querying Current Requests in New Session Queue (curl)\nDESCRIPTION: This curl command retrieves the current requests present in the new session queue of the Selenium Grid. It requires `curl` and access to the Grid's GraphQL endpoint.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.ja.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ sessionsInfo { sessionQueueRequests } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Find First Element by Class Name in JavaScript\nDESCRIPTION: This snippet finds the first web element with the class name 'tomatoes' within the entire DOM using Selenium WebDriver in JavaScript. It uses the `findElement` method with `By.className` to locate the element.  It returns a promise that resolves to a `WebElement` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst vegetable = await driver.findElement(By.className('tomatoes'));\n```\n\n----------------------------------------\n\nTITLE: Listing Downloaded Files in Ruby\nDESCRIPTION: Lists the downloaded files for a RemoteWebDriver session in Ruby.  It retrieves a list of filenames from the designated download directory for that session.  This requires that the RemoteWebDriver has downloads enabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nfiles = driver.downloaded_files\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Level in Python\nDESCRIPTION: This snippet demonstrates how to set the logger level in Python using the `logging` module. This filters log messages based on their severity. Requires the `logging` module from Python's standard library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlogger.setLevel(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window - Selenium WebDriver - Ruby\nDESCRIPTION: This snippet sets the browser window to fullscreen mode using the Selenium WebDriver API in Ruby. Requires the selenium-webdriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_50\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.window.full_screen\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid with Java 11 HTTP Client\nDESCRIPTION: This command starts the Selenium Grid server in standalone mode, configuring it to use the Java 11 HTTP client and including the `selenium-http-jdk-client` JAR file in the classpath. It requires the `selenium-server` and `selenium-http-jdk-client` JAR files to be present in the same directory.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.en.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\njava -Dwebdriver.http.factory=jdk-http-client -jar selenium-server-<version>.jar --ext selenium-http-jdk-client-<version>.jar standalone\n```\n\n----------------------------------------\n\nTITLE: Get Element Size and Position - Kotlin\nDESCRIPTION: Demonstrates how to retrieve the size and position of a web element using Kotlin and Selenium WebDriver. The `rect` property returns a `Rectangle` object containing the element's x, y coordinates, width, and height. A WebDriver instance and an element locator are required. First navigate to the target URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Navigate to url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n// Returns height, width, x and y coordinates referenced element\nval res = driver.findElement(By.name(\"range_input\")).rect\n\n// Rectangle class provides getX,getY, getWidth, getHeight methods\nprintln(res.getX())\n\n```\n\n----------------------------------------\n\nTITLE: Java Capabilities Merging (After)\nDESCRIPTION: Demonstrates merging capabilities in Selenium Java *after* Selenium 4, where the result of the merge operation must be assigned to a new object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_27\n\nLANGUAGE: Java\nCODE:\n```\nMutableCapabilities capabilities = new MutableCapabilities();\ncapabilities.setCapability(\"platformVersion\", \"Windows 10\");\nFirefoxOptions options = new FirefoxOptions();\noptions.setHeadless(true);\noptions = options.merge(capabilities);\n\n// O resultado da chamada `merge`  precisa ser atribuído a um objeto.\n```\n\n----------------------------------------\n\nTITLE: Setting strictFileInteractability in Python\nDESCRIPTION: This Python code illustrates how to set the `strictFileInteractability` capability in Selenium. The `strictFileInteractability` capability indicates if strict interactability checks should be applied to file input elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\noptions = Options()\noptions.strict_file_interactability = True\n```\n\n----------------------------------------\n\nTITLE: Double Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a double click action on an element using Selenium. It combines moving the mouse to the center of an element with pressing and releasing the left mouse button twice. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"my-element\"))\nActions(driver).doubleClick(element)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Initializing Driver with Default Service - Ruby\nDESCRIPTION: This snippet illustrates how to start a driver with a default service using Ruby. It instantiates a ChromeDriver without providing explicit service configurations.  Requires the selenium-webdriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.pt-br.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :chrome\ndriver.quit\n```\n\n----------------------------------------\n\nTITLE: Adding a Virtual Authenticator in C#\nDESCRIPTION: This snippet demonstrates how to add a virtual authenticator in C# using DevTools. It uses configured VirtualAuthenticatorOptions to create the authenticator. The code depends on Selenium WebDriver and its DevTools interface.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\nIDevTools devTools = ((IHasDevTools)driver).GetDevTools();\nDevToolsSession session = devTools.GetDevToolsSession();\nawait session.SendCommand(new AddVirtualAuthenticatorCommandSettings()\n{\n    Options = options\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Level in Java\nDESCRIPTION: This snippet shows how to set the logging level in Java. It demonstrates changing both the level of the logger and the level of the handlers on the root logger.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\njava.util.logging.Logger logger = java.util.logging.Logger.getLogger(\"\");\nlogger.setLevel(java.util.logging.Level.FINE);\nfor (java.util.logging.Handler handler : logger.getHandlers()) {\n    handler.setLevel(java.util.logging.Level.FINE);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pause in Actions - Java\nDESCRIPTION: This Java snippet demonstrates how to introduce a pause between actions using the `pause` method with a specified duration. It uses the Actions API to perform a pause of 100 milliseconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nnew Actions(driver)\n  .pause(Duration.ofMillis(100))\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Displaying Tracing Information for Jaeger Setup\nDESCRIPTION: This command displays detailed instructions on how to visualize traces using Jaeger UI. It provides guidance on configuring and using Jaeger with Selenium Grid for tracing.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/observability.ja.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-4.0.0-<selenium-version>.jar info tracing\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication with Java\nDESCRIPTION: Java code example showing how to start a Selenium session with basic authentication configured in the Grid. It uses ClientConfig to set the base URL and authentication credentials before creating a RemoteWebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.en.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nClientConfig clientConfig = ClientConfig.defaultConfig()\n  .baseUrl(new URL(\"http://localhost:4444\"))\n  .authenticateAs(new UsernameAndPassword(\"admin\", \"myStrongPassword\"));\nHttpCommandExecutor executor = new HttpCommandExecutor(clientConfig);\nRemoteWebDriver driver = new RemoteWebDriver(executor, new ChromeOptions());\n```\n\n----------------------------------------\n\nTITLE: Deselecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to deselect an option in a multiple select element by its `value` attribute using Selenium WebDriver. The `deselectByValue()` method is used to deselect the option based on the provided value. This method only applies to multiple select lists.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_47\n\nLANGUAGE: Kotlin\nCODE:\n```\nselect.deselectByValue(\"eggs\")\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi with WebSocket URL Capability in Java\nDESCRIPTION: This snippet shows how to enable BiDi in Java by setting the 'webSocketUrl' capability to true in the browser options. This establishes a WebSocket connection for bidirectional communication, enabling access to the WebDriver BiDi protocol. Requires Selenium WebDriver and browser-specific driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\noptions.setCapability(\"webSocketUrl\", true);\n```\n\n----------------------------------------\n\nTITLE: Converting and Comparing Color Formats - Selenium WebDriver\nDESCRIPTION: This snippet shows how to convert a Color object to different formats (HEX, RGBA, RGB) and compare them to static values in Java. This allows for flexible color validation by ensuring the color matches the expected format and value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nassert loginButtonBackgroundColour.asHex().equals(\"#ff69b4\");\nassert loginButtonBackgroundColour.asRgba().equals(\"rgba(255, 105, 180, 1)\");\nassert loginButtonBackgroundColour.asRgb().equals(\"rgb(255, 105, 180)\");\n```\n\n----------------------------------------\n\nTITLE: Adding Alerts in Selenium Documentation HTML\nDESCRIPTION: This code snippet demonstrates how to add alerts in the Selenium documentation to direct potential contributors to specific missing content. Two variations are provided: one with minimal content and another with additional information.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.zh-cn.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{{</* alert-content /*/>}}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{{</* alert-content */>}}\nAdditional information about what specific content is needed\n{{</* /alert-content */>}}\n```\n\n----------------------------------------\n\nTITLE: Excluding Switches in Chrome Options\nDESCRIPTION: This code snippet shows how to exclude specific command-line switches from being added to Chrome's launch arguments. This can be useful for preventing unwanted behavior or conflicts.  A common use case is to disable the popup blocker.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_26\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.add_excluded_argument('enable-automation')\n```\n\n----------------------------------------\n\nTITLE: Create Unicorn and Submit Form (Kotlin)\nDESCRIPTION: This snippet demonstrates creating a Unicorn object with specific attributes and submitting the form using the addUnicornPage object. It shows how the Unicorn object is passed to the createUnicorn() method to fill out the form and click submit. It assumes Unicorn, UnicornColors, UnicornAccessories, UnicornAdornments, AddUnicornPage, AccountPage, and UnicornConfirmationPage are defined elsewhere.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\n// The Unicorn is a top-level Object--it has attributes, which are set here. \n// This only stores the values; it does not fill out any web forms or interact\n// with the browser in any way.\nval sparkles = Unicorn(\"Sparkles\", UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS)\n\n// Since we are already \"on\" the account page, we have to use it to get to the\n// actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n// takes us there.\nval addUnicornPage = accountPage.addUnicorn()\n\n// Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n// its createUnicorn() method. This method will take Sparkles' attributes,\n// fill out the form, and click submit.\nunicornConfirmationPage = addUnicornPage.createUnicorn(sparkles)\n```\n\n----------------------------------------\n\nTITLE: Getting the Logger in Ruby\nDESCRIPTION: This snippet retrieves the Selenium WebDriver logger in Ruby, using the #logger class method on the Selenium::WebDriver module. This provides access to Selenium's custom Logger class for more fine-tuned control over logging.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nlogger = Selenium::WebDriver.logger\n```\n\n----------------------------------------\n\nTITLE: Initializing Chrome Driver with Service in JavaScript\nDESCRIPTION: This JavaScript snippet showcases how to initialize a ChromeDriver using a service object.  It imports necessary modules from the selenium-webdriver package and configures the service with a specific port. The driver is then created using this service.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.pt-br.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {Browser, Builder, ServiceBuilder} = require('selenium-webdriver');\nconst chrome = require('selenium-webdriver/chrome');\n\ndescribe('Driver Service', function () {\n  it('can be configured with a port', async function () {\n    let service = new ServiceBuilder().setPort(1234).build();\n    let driver = await new Builder().forBrowser(Browser.CHROME).setChromeService(service).build();\n    await driver.quit();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Keys to an Element\nDESCRIPTION: This snippet demonstrates how to simulate typing text into an input field using Selenium. The `sendKeys` method is used to send a sequence of characters to the specified element. The `Key.RETURN` parameter simulates pressing the Enter key.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait searchBox.sendKeys('Selenium', Key.RETURN);\n```\n\n----------------------------------------\n\nTITLE: Adding a Virtual Authenticator in JavaScript\nDESCRIPTION: This snippet shows how to add a virtual authenticator with configured options in JavaScript. It retrieves the DevTools interface and calls addVirtualAuthenticator to create and register a new virtual authenticator for testing WebAuthn features.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst devtools = await driver.getDevTools();\nawait devtools.security.addVirtualAuthenticator(options);\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Selenium WebDriver in JavaScript\nDESCRIPTION: This snippet demonstrates how to update the package.json file to include Selenium WebDriver version 4.4.0 as a dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"selenium-tests\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"selenium-webdriver\": \"^4.4.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions - Kotlin\nDESCRIPTION: This Kotlin snippet showcases how to release all currently depressed keys and pointer buttons using the `resetInputState` method, ensuring a clean state for further interactions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.en.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.resetInputState()\n```\n\n----------------------------------------\n\nTITLE: Safari Technology Preview (Java)\nDESCRIPTION: This code shows how to use Safari Technology Preview in Java. It sets the 'technologyPreview' capability to true in SafariOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.en.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nSafariOptions options = new SafariOptions();\noptions.setUseTechnologyPreview(true);\n```\n\n----------------------------------------\n\nTITLE: Performing Actions in Selenium BiDi (JavaScript)\nDESCRIPTION: This snippet demonstrates how to perform actions using Selenium's BiDirectional API in JavaScript. It requires Selenium version 4.17 or later. It specifically shows how to send pointer down and up events.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/input.ja.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.executeScript('await window.cdc.input.performActions(arguments[0])', [\n  {type: 'pointer', id: 'mouse', actions: [{type: 'pointerDown', button: 0}, {type: 'pointerUp', button: 0}]},\n]);\n```\n\n----------------------------------------\n\nTITLE: Printing with PrintsPage - Java\nDESCRIPTION: This Java snippet demonstrates printing a page using the PrintsPage interface with configured PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setPageRanges(ImmutableList.of(\"1-1\"));\n\nPrintsPage printsPage = (PrintsPage) driver;\nString pdf = printsPage.print(printOptions);\n```\n\n----------------------------------------\n\nTITLE: Removing a Credential in C#\nDESCRIPTION: This C# code removes a specific credential from the virtual authenticator by first getting the list of existing credentials, retrieving the first credential's ID, and then using the RemoveCredential method to remove it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nIReadOnlyCollection<CredentialMetadata> credentials = await session.Security.GetCredentials();\n\nstring credentialId = credentials.First().CredentialId;\n\nawait session.Security.RemoveCredential(credentialId);\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name - Python\nDESCRIPTION: This snippet demonstrates how to get the tag name of a web element using Selenium WebDriver in Python. It finds an element by name and uses the tag_name property to retrieve its tag name as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nemail_input = driver.find_element(By.NAME, \"email_input\")\nassert email_input.tag_name == \"input\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Add-ons in Firefox with Selenium (Java)\nDESCRIPTION: This snippet shows how to uninstall a Firefox add-on using Selenium WebDriver in Java. The `uninstallAddon` method requires the add-on's ID, which can be obtained when installing the add-on.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_37\n\nLANGUAGE: java\nCODE:\n```\n((HasExtensions) driver).uninstallAddon(id);\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver with Default Service - CSharp\nDESCRIPTION: This snippet initializes a ChromeDriver using the default service in C#. The using statement ensures that the driver is properly disposed of after use.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.ja.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nusing var driver = new ChromeDriver();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Scale in Selenium Python\nDESCRIPTION: This Python code snippet demonstrates how to set the page scale to 0.5 using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.scale = 0.5\n```\n\n----------------------------------------\n\nTITLE: Installing libatk-bridge2.0-0 in Linux\nDESCRIPTION: This code snippet shows how to install the `libatk-bridge2.0-0` library in Linux using `apt-get`.  This is needed to resolve the 'error while loading shared libraries: libatk-1.0.so.0: cannot open shared object file' error when running Chrome for Testing.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.ja.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libatk-bridge2.0-0\n```\n\n----------------------------------------\n\nTITLE: Setting unhandledPromptBehavior in Java\nDESCRIPTION: This Java snippet demonstrates setting the `unhandledPromptBehavior` capability for Selenium. This capability configures how the browser should handle user prompts (e.g., alerts, confirms). The value should be one of 'dismiss', 'accept', 'dismiss and notify', 'accept and notify', or 'ignore'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_40\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setUnhandledPromptBehavior(UnexpectedAlertBehaviour.ACCEPT);\n```\n\n----------------------------------------\n\nTITLE: Finding an Element by Name\nDESCRIPTION: This snippet shows how to locate a specific element on a web page using its name attribute. The `FindElement` method with `By.Name` locator is used for this purpose. The `name` parameter specifies the value of the name attribute to search for.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement searchBox = driver.FindElement(By.Name(\"q\"));\n```\n\n----------------------------------------\n\nTITLE: Pausing Actions in Selenium (C#)\nDESCRIPTION: This code snippet shows how to pause between actions using C#. The `Pause` method is used to insert a pause. It requires a WebDriver instance and the Actions class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.zh-cn.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nnew Actions(driver)\n    .Pause(TimeSpan.FromSeconds(2))\n    .SendKeys(\"First\")\n    .Pause(TimeSpan.FromSeconds(2))\n    .SendKeys(\"Second\")\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Size - Python\nDESCRIPTION: This Python snippet sets the page size to A4 using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.print_options import PrintOptions\n\nprint_options = PrintOptions()\nprint_options.page_size = \"A4\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Driver Options - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to initialize and configure ChromeOptions to run the browser in headless mode. It then instantiates a ChromeDriver using these options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Chrome::Options.new\noptions.add_argument('--headless=new')\n@driver = Selenium::WebDriver.for :chrome, options: options\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Node and Grid URIs\nDESCRIPTION: This curl command retrieves the URIs of each node and the grid in the Selenium Grid setup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.pt-br.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\": \"{ nodesInfo { nodes { uri } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot - Selenium\nDESCRIPTION: This Kotlin snippet demonstrates how to capture a screenshot of the current browser window using Selenium WebDriver. It navigates to a website, takes a screenshot, saves it as a PNG image, and then closes the browser. Requires selenium-java and commons-io dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_76\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport com.oracle.tools.packager.IOUtils.copyFile\nimport org.openqa.selenium.*\nimport org.openqa.selenium.chrome.ChromeDriver\nimport java.io.File\n\nfun main(){\n    val driver =  ChromeDriver()\n    driver.get(\"https://www.example.com\")\n    val scrFile = (driver as TakesScreenshot).getScreenshotAs<File>(OutputType.FILE)\n    copyFile(scrFile, File(\"./image.png\"))\n    driver.quit()\n}\n```\n\n----------------------------------------\n\nTITLE: Selenium Javascript Example\nDESCRIPTION: This JavaScript code shows a basic Selenium test. It creates a WebDriver, opens a page, finds and interacts with elements, and validates the output. It requires the selenium-webdriver package to be installed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nconst {Builder, By, Key, until} = require('selenium-webdriver');\n\n(async function example() {\n  let driver = await new Builder().forBrowser('chrome').build();\n  try {\n    await driver.get('https://www.selenium.dev/selenium/web/web-form.html');\n\n    let textBox = await driver.findElement(By.name('my-text'));\n    let submitButton = await driver.findElement(By.css('button'));\n\n    await textBox.sendKeys('Selenium');\n    await submitButton.click();\n\n    let message = await driver.findElement(By.id('message'));\n    let value = await message.getText();\n    expect(value).toEqual('Received!');\n  } finally {\n    await driver.quit();\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Sending CDP Command - Java\nDESCRIPTION: This Java code snippet demonstrates how to send a basic CDP command using Selenium. It uses the `executeCdpCommand` method to interact with the Chrome DevTools Protocol. The snippet requires a Selenium WebDriver instance already initialized and connected to a Chrome browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/_index.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver = (ChromeDriver) new Augmenter().augment(driver);\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"url\", url);\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> result = driver.executeCdpCommand(\"Page.navigate\", parameters);\n```\n\n----------------------------------------\n\nTITLE: Defining Redis service with Docker Compose in YAML\nDESCRIPTION: This YAML file defines a Redis service using Docker Compose. It specifies the Redis image, a restart policy, and the port mapping for accessing the Redis instance. This setup provides a simple containerized Redis instance for use as a session store by Selenium Grid.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.ja.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3.8'\nservices:\n  redis:\n    image: redis:bullseye\n    restart: always\n    ports:\n      - \"6379:6379\"\n```\n\n----------------------------------------\n\nTITLE: Activate a browsing context in Java\nDESCRIPTION: This snippet shows how to activate a browsing context using WebDriver BiDi in Java. Requires Selenium 4.14.1 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(driver, null);\nbrowsingContext.activate();\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Inventory Item\nDESCRIPTION: This HTML snippet shows the structure for a single inventory item, with elements for the item name, price, and an 'Add to cart' button.  It's a component that's repeated within the product page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.pt-br.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Inventory Item -->\n<div class=\"inventory_item\">\n    <div class=\"inventory_item_name\">Backpack</div>\n    <div class=\"pricebar\">\n        <div class=\"inventory_item_price\">$29.99</div>\n        <button id=\"add-to-cart-backpack\">Add to cart</button>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Set Permissions - Java\nDESCRIPTION: This snippet shows how to set permissions in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_65\n\nLANGUAGE: Java\nCODE:\n```\ndriver.getDevTools().send(org.openqa.selenium.devtools.v112.browser.Browser.grantPermissions(ImmutableList.of(PermissionType.GEOLOCATION), Optional.of(\"https://example.com\"), Optional.empty()));\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Driver Log to Console Output\nDESCRIPTION: This code configures the ChromeDriver service to output logs to the console's standard output. This allows real-time monitoring of ChromeDriver's activity and can be useful for debugging.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_32\n\nLANGUAGE: Java\nCODE:\n```\nChromeDriverService service = new ChromeDriverService.Builder()\n    .withOutputStream(System.out)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Display Quick Config Help for Selenium Grid\nDESCRIPTION: This command provides a quick overview of configuration options for the Selenium Grid. It is executed by running the Selenium Server JAR file with the `info config` arguments.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.en.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar info config\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to scroll from an offset of the viewport using Selenium's Actions API and Wheel class. It takes an x offset, a y offset, delta x and delta y values. It scrolls from the origin point which is the upper left corner of the current viewport, offset by given x and y values. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\n@driver.action.scroll_from(:viewport, 25, 25, 50, 100).perform\n```\n\n----------------------------------------\n\nTITLE: Get Current URL - Ruby\nDESCRIPTION: This Ruby snippet gets the current URL of the web page using Selenium WebDriver. It assumes a `driver` instance is already initialized.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.pt-br.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.current_url\n```\n\n----------------------------------------\n\nTITLE: GraphQL: Querying Session, Node, and Grid Details (curl)\nDESCRIPTION: This curl command retrieves detailed information about the Selenium Grid, including grid URI, maximum sessions, session count, node details (ID, URI, status, sessions), slot count, and session count. It requires access to the GraphQL endpoint and the `curl` command-line tool.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.ja.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ grid { uri, maxSession, sessionCount }, nodesInfo { nodes { id, uri, status, sessions { id, capabilities, startTime, uri, nodeId, nodeUri, sessionDurationMillis, slot { id, stereotype, lastStarted } }, slotCount, sessionCount }} }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Listening to Generic Events with WebDriverEventListener (Java)\nDESCRIPTION: This snippet demonstrates how to listen to generic events using the `beforeAnyCall` method in the `WebDriverEventListener` interface. It allows for logging information or performing actions before any method call is made on the decorated WebDriver instance. Requires the `java.util.logging` and `java.util.Arrays` libraries.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/java-removal-of-deprecated-events-classes.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class Listener implements WebDriverEventListener {\n    private static final Logger LOGGER = Logger.getLogger(Listener.class.getName());\n\n    @Override\n    public void beforeAnyCall(Object target, Method method, Object[] args) {\n        logger.debug(\"Thread: \" + Thread.currentThread().getName() +\n                \" | Method Name: \" + method.getName() +\n                \" | Method Args: \" + Arrays.toString(args));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Authentication via CDP in C#\nDESCRIPTION: This C# code snippet demonstrates how to set basic authentication credentials for a Chrome browser session using the Chrome DevTools Protocol (CDP). It uses `AddAuthentication` to configure authentication.  The driver instance is essential for executing this code.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.AddAuthentication(\n    new UsernameAndPassword(\"test\", \"test\"));\n```\n\n----------------------------------------\n\nTITLE: Removing a Credential in Python\nDESCRIPTION: This Python code removes a credential from the virtual authenticator based on the passed credential ID.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndevtools.security.remove_credential('credentialId')\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - Normal - CSharp\nDESCRIPTION: This C# code sets the page load strategy to Normal for Chrome. It creates ChromeOptions, sets the PageLoadStrategy property to PageLoadStrategy.Normal, and then navigates to a URL using ChromeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace pageLoadStrategy {\n  class pageLoadStrategy {\n    public static void Main(string[] args) {\n      var chromeOptions = new ChromeOptions();\n      chromeOptions.PageLoadStrategy = PageLoadStrategy.Normal;\n      IWebDriver driver = new ChromeDriver(chromeOptions);\n      try {\n        driver.Navigate().GoToUrl(\"https://example.com\");\n      } finally {\n        driver.Quit();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current URL in Python\nDESCRIPTION: Retrieves the current URL from the browser's address bar using Selenium's WebDriver in Python. Requires an initialized WebDriver that has navigated to a page. The URL is returned as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.en.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/web-form.html\")\nurl = driver.current_url\nassert url == \"https://www.selenium.dev/selenium/web/web-form.html\"\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method with JUnit - Java\nDESCRIPTION: This Java snippet shows an example of a tear down method using JUnit's `@AfterAll` annotation. The `tearDown` method calls `driver.quit()` to close the browser session after all tests in the class have run. Requires JUnit 5.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Example using JUnit\n * https://junit.org/junit5/docs/current/api/org/junit/jupiter/api/AfterAll.html\n */\n@AfterAll\npublic static void tearDown() {\n    driver.quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Response Completed Event - Selenium BiDi - Java\nDESCRIPTION: This Java snippet sets up a listener for the 'Response Completed' network event using Selenium's BiDi API. It allows intercepting and examining responses after they are fully received. Requires Selenium 4.15 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\nNetwork network = driver.getDevTools().getDomains().network();\nnetwork.onResponseCompleted(event -> {\n  String url = event.getRequest().getUrl();\n  System.out.println(\"Response completed for \" + url);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait with Selenium C#\nDESCRIPTION: This code snippet demonstrates how to set an implicit wait in Selenium using C#. The `ImplicitWait` property of the `Timeouts` property of the WebDriver instance is set to a `TimeSpan` representing the duration to wait.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.ja.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);\n```\n\n----------------------------------------\n\nTITLE: Setting acceptInsecureCerts - JavaScript\nDESCRIPTION: This JavaScript code sets the `acceptInsecureCerts` capability to true, allowing the browser to trust invalid certificates.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('insecure certs should be accepted', async () => {\n  let opts = new chrome.Options().setAcceptInsecureCerts(true);\n  let driver = await new ChromeDriver(opts).build();\n  await driver.quit();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy in C#\nDESCRIPTION: This C# code configures a proxy server using ChromeOptions. It creates a Proxy object, sets the kind, disables auto-detection, and then assigns the SSL proxy. Replace <HOST:PORT> with the actual proxy address.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_51\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\npublic class ProxyTest{\npublic static void Main() {\nChromeOptions options = new ChromeOptions();\nProxy proxy = new Proxy();\nproxy.Kind = ProxyKind.Manual;\nproxy.IsAutoDetect = false;\nproxy.SslProxy = \"<HOST:PORT>\";\noptions.Proxy = proxy;\noptions.AddArgument(\"ignore-certificate-errors\");\nIWebDriver driver = new ChromeDriver(options);\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/\");\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Get Element Rectangle Selenium JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates retrieving the rectangle (dimensions and coordinates) of a range input element using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.selenium.dev/selenium/web/inputs.html')\n    const rect = await driver.findElement(By.name('range_input')).getRect()\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element using Selenium Wheel (JavaScript)\nDESCRIPTION: Scrolls from a specified element by a given amount.  Requires the element, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('idOfMyElement'));\nawait driver.actions()\n  .scroll(20, 50, WheelInput.Origin.element(element), 0, 0)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Creating a File Handler in Python\nDESCRIPTION: This snippet demonstrates how to create a file handler in Python's logging module to save logs to a file.  The path to the log file is specified, and the handler is added to the logger.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlog_path = '/path/to/log'\nhandler = logging.FileHandler(log_path)\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method with Visual Studio UnitTesting - CSharp\nDESCRIPTION: This C# snippet shows an example of a tear down method using Visual Studio's UnitTesting framework. The `TearDown` method calls `driver.Quit()` to close the browser session after each test has run. Requires the `Microsoft.VisualStudio.TestTools.UnitTesting` namespace.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n/*\n    Example using Visual Studio's UnitTesting\n    https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.aspx\n*/\n[TestCleanup]\npublic void TearDown()\n{\n    driver.Quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Casting with Edge in Java\nDESCRIPTION: This Java snippet shows how to initiate casting from Edge browser using the Edge DevTools protocol.  It demonstrates getting the DevTools, sending the `startDesktopMirroring` command, and stopping it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nHasCasting casting = (HasCasting) driver;\ncasting.getCastSinks().forEach(System.out::println);\ncasting.startCasting(casting.getCastSinks().stream().findFirst().get());\ncasting.stopCasting();\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Configuration\nDESCRIPTION: Demonstrates how to enable basic authentication for a Selenium Grid component (Router, Hub, or Standalone) by setting a username and password. This configuration restricts access to the Grid UI and requires authentication for new session requests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.en.md#_snippet_7\n\nLANGUAGE: TOML\nCODE:\n```\n[router]\nusername = \"admin\"\npassword = \"myStrongPassword\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Build Check for Edge in CSharp\nDESCRIPTION: This C# code disables the build check for Edge, allowing the driver to be used with mismatched versions of the Edge browser and msedgedriver. This is generally not recommended and unsupported.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nEdgeOptions options = new EdgeOptions();\noptions.AddAdditionalOption(\"disable-build-check\", true);\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset (Python)\nDESCRIPTION: This Python snippet demonstrates scrolling from a viewport offset by a given amount. Requires Selenium WebDriver and ActionChains.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\naction = ActionChains(driver)\naction.scroll_from_origin({\n    'origin': WheelInput.WHEEL,\n    'x': 25,\n    'y': 25\n}, 100, 200).perform()\n```\n\n----------------------------------------\n\nTITLE: Double Click with Selenium\nDESCRIPTION: Moves to the center of an element and performs a double click. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_33\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(:id, 'clickable')\n@driver.action.double_click(element).perform\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi: Setting WebSocket URL Capability in Java\nDESCRIPTION: This code snippet demonstrates how to enable the WebSocket connection for bidirectional communication in Java by setting the 'webSocketUrl' capability to true in the browser options. This is a necessary step to unlock the full potential of the WebDriver BiDi protocol.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\noptions.setCapability(\"webSocketUrl\", true);\n```\n\n----------------------------------------\n\nTITLE: Setting Console Output - Python\nDESCRIPTION: Demonstrates how to configure the GeckoDriver service to output logs to the console in Python. This is helpful for debugging Selenium tests. Requires the Selenium library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nservice = FirefoxService(log_output=sys.stdout)\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi: Setting WebSocket URL Capability in Kotlin\nDESCRIPTION: This code snippet demonstrates how to enable the WebSocket connection for bidirectional communication in Kotlin by setting the 'webSocketUrl' capability to true in the browser options. This is a necessary step to unlock the full potential of the WebDriver BiDi protocol.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.ja.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\noptions.setCapability(\"webSocketUrl\", true);\n```\n\n----------------------------------------\n\nTITLE: Querying New Session Queue Size\nDESCRIPTION: This example demonstrates how to query the size of the New Session Queue in the Selenium Grid. A `curl` command is used to send a GraphQL query.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.en.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ grid { sessionQueueSize } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element by Amount (Java)\nDESCRIPTION: This Java code demonstrates scrolling from a specific element by a specified amount using Selenium's Actions API. Requires Selenium WebDriver and Actions class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"id-of-element\"));\nnew Actions(driver)\n  .scrollFromOrigin(element, 100, 200)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Capturing Console Logs in C#\nDESCRIPTION: This C# snippet demonstrates capturing console logs using Chrome DevTools Protocol (CDP) with Selenium.  It requires the Selenium WebDriver and Chrome driver.  The code attaches to the `LogEntryAdded` event and outputs the log messages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\n[Test]\npublic async Task CanListenToConsoleLogs()\n{\n    await driver.GoToUrl(\"https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html\");\n    var tcs = new TaskCompletionSource<ConsoleEntry>();\n```\n\n----------------------------------------\n\nTITLE: Downloading and Retrieving Files from Remote Node in Java\nDESCRIPTION: This snippet demonstrates downloading files using Selenium and then retrieving them from the remote node where the download occurred.  It retrieves a list of downloaded files, downloads the first file in the list, unzips it, and then reads and prints the contents of the downloaded file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n\tprivate static void demoFileDownloads(RemoteWebDriver driver, URL gridUrl) throws Exception {\n\t\tdriver.get(\"https://www.selenium.dev/selenium/web/downloads/download.html\");\n\t\t// Download the two available files on the page\n\t\tdriver.findElement(By.id(\"file-1\")).click();\n\t\tdriver.findElement(By.id(\"file-2\")).click();\n\n\t\t// The download happens in a remote Node, which makes it difficult to know when the file\n\t\t// has been completely downloaded. For demonstration purposes, this example uses a\n\t\t// 10-second sleep which should be enough time for a file to be downloaded.\n\t\t// We strongly recommend to avoid hardcoded sleeps, and ideally, to modify your\n\t\t// application under test, so it offers a way to know when the file has been completely\n\t\t// downloaded.\n\t\tTimeUnit.SECONDS.sleep(10);\n\n\t\t//This is the endpoint which will provide us with list of files to download and also to\n\t\t//let us download a specific file.\n\t\tString downloadsEndpoint = String.format(\"/session/%s/se/files\", driver.getSessionId());\n\n\t\tString fileToDownload;\n\n\t\ttry (HttpClient client = HttpClient.Factory.createDefault().createClient(gridUrl)) {\n\t\t\t// To list all files that are were downloaded on the remote node for the current session\n\t\t\t// we trigger GET request.\n\t\t\tHttpRequest request = new HttpRequest(GET, downloadsEndpoint);\n\t\t\tHttpResponse response = client.execute(request);\n\t\t\tMap<String, Object> jsonResponse = new Json().toType(string(response), Json.MAP_TYPE);\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tMap<String, Object> value = (Map<String, Object>) jsonResponse.get(\"value\");\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tList<String> names = (List<String>) value.get(\"names\");\n\t\t\t// Let's say there were \"n\" files downloaded for the current session, we would like\n\t\t\t// to retrieve ONLY the first file.\n\t\t\tfileToDownload = names.get(0);\n\t\t}\n\n\t\t// Now, let's download the file\n\t\ttry (HttpClient client = HttpClient.Factory.createDefault().createClient(gridUrl)) {\n\t\t\t// To retrieve a specific file from one or more files that were downloaded by the current session\n\t\t\t// on a remote node, we use a POST request.\n\t\t\tHttpRequest request = new HttpRequest(POST, downloadsEndpoint);\n\t\t\trequest.setContent(asJson(ImmutableMap.of(\"name\", fileToDownload)));\n\t\t\tHttpResponse response = client.execute(request);\n\t\t\tMap<String, Object> jsonResponse = new Json().toType(string(response), Json.MAP_TYPE);\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tMap<String, Object> value = (Map<String, Object>) jsonResponse.get(\"value\");\n\t\t\t// The returned map would contain 2 keys,\n\t\t\t// filename - This represents the name of the file (same as what was provided by the test)\n\t\t\t// contents - Base64 encoded String which contains the zipped file.\n\t\t\tString zippedContents = value.get(\"contents\").toString();\n\t\t\t// The file contents would always be a zip file and has to be unzipped.\n\t\t\tFile downloadDir = Zip.unzipToTempDir(zippedContents, \"download\", \"\");\n\t\t\t// Read the file contents\n\t\t\tFile downloadedFile = Optional.ofNullable(downloadDir.listFiles()).orElse(new File[]{})[0];\n\t\t\tString fileContent = String.join(\"\", Files.readAllLines(downloadedFile.toPath()));\n\t\t\tSystem.out.println(\"The file which was \"\n\t\t\t\t\t+ \"downloaded in the node is now available in the directory: \"\n\t\t\t\t\t+ downloadDir.getAbsolutePath() + \" and has the contents: \" + fileContent);\n\t\t}\n\t}\n\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies with Selenium WebDriver (Java)\nDESCRIPTION: This code snippet demonstrates how to retrieve all cookies in the current browser context using Selenium WebDriver in Java. It requires the Selenium WebDriver dependency and assumes a WebDriver instance is already initialized. The code navigates to a specific URL, adds two cookies, and then retrieves all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.example.com\");\nCookie cookie1 = new Cookie(\"test1\", \"cookie1\");\ndriver.manage().addCookie(cookie1);\nCookie cookie2 = new Cookie(\"test2\", \"cookie2\");\ndriver.manage().addCookie(cookie2);\n\n// Get all available cookies\nSet<Cookie> cookies = driver.manage().getCookies();\n```\n\n----------------------------------------\n\nTITLE: Setting Log Output to Console (STDOUT) - Java\nDESCRIPTION: Demonstrates how to set the log output to the console (STDOUT) in Java using EdgeDriverService.\nThis enables viewing the Edge driver logs directly in the console during test execution.\nDependencies: Selenium WebDriver, EdgeDriverService, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\nEdgeDriverService service = new EdgeDriverService.Builder()\n    .withLogOutput(System.out)\n    .build();\nEdgeDriver driver = new EdgeDriver(service, options);\n```\n\n----------------------------------------\n\nTITLE: Ignoring Zoom Setting (Python)\nDESCRIPTION: This code snippet demonstrates how to ignore the browser zoom level setting using Python. It sets the `ignore_zoom_setting` option to `True`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.ie.options import Options\n\nie_options = Options()\nie_options.ignore_zoom_setting = True\ndriver = webdriver.Ie(options=ie_options)\n```\n\n----------------------------------------\n\nTITLE: Forward Button Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to simulate a click on the forward button of a mouse (button X2) using Selenium. It involves pressing and releasing mouse button 4 on the target element. Requires Selenium WebDriver and version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"my-element\"));\nActions actions = new Actions(driver);\nactions.moveToElement(element)\n  .press(MouseButton.FORWARD)\n  .release(MouseButton.FORWARD)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method with driver.quit() - Mocha (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `after` hook in Mocha to define a tear-down function that calls `await driver.quit()`. This ensures that the browser session is properly closed after all tests in a suite have been executed, preventing resource leaks. Mocha is a widely used JavaScript testing framework.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Example using Mocha\n * https://mochajs.org/#hooks\n */\nafter('Tear down', async function () {\n  await driver.quit();\n});\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset with Selenium\nDESCRIPTION: This code performs a drag-and-drop operation by a specified offset using Selenium WebDriver. It first clicks and holds the source element, moves the mouse by the offset, and then releases the mouse. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst draggable = await driver.findElement(By.id('draggable'));\nawait driver.actions().clickAndHold(draggable).move({x: 50, y: 50}).release().perform();\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset in Ruby\nDESCRIPTION: This Ruby snippet performs a drag and drop operation by a specified offset using #drag_and_drop_by. It requires a WebDriver instance and the source element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_69\n\nLANGUAGE: ruby\nCODE:\n```\nsource = driver.find_element(id: 'draggable')\n\ndriver.action.drag_and_drop_by(source, 50, 20).perform\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Content - Ruby\nDESCRIPTION: This snippet demonstrates how to get the text content of a web element using Selenium WebDriver in Ruby. It finds an element by ID and uses the text method to retrieve its text content as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nlink = driver.find_element(id: 'justanotherlink')\nexpect(link.text).to eq 'Just another link'\n```\n\n----------------------------------------\n\nTITLE: Create Unicorn and Submit Form (Python)\nDESCRIPTION: This snippet demonstrates creating a Unicorn object with specific attributes and submitting the form using the add_unicorn_page object. It shows how the Unicorn object is passed to the create_unicorn() method to fill out the form and click submit. It assumes Unicorn, UnicornColors, UnicornAccessories, UnicornAdornments, AddUnicornPage, AccountPage, and UnicornConfirmationPage are defined elsewhere.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# The Unicorn is a top-level Object--it has attributes, which are set here.\n# This only stores the values; it does not fill out any web forms or interact\n# with the browser in any way.\nsparkles = Unicorn.new('Sparkles', UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS)\n\n# Since we're already \"on\" the account page, we have to use it to get to the\n# actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n# takes us there.\nadd_unicorn_page = account_page.add_unicorn\n\n# Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n# its createUnicorn() method. This method will take Sparkles' attributes,\n# fill out the form, and click submit.\nunicorn_confirmation_page = add_unicorn_page.create_unicorn(sparkles)\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel Ruby\nDESCRIPTION: This snippet demonstrates how to scroll to a specific element within a web page using Selenium's Wheel actions in Ruby. It takes a WebElement as input and scrolls the viewport such that the bottom of the element is at the bottom of the screen. This is often needed before interacting with an element that might not be initially visible in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'target')\n@driver.action.scroll_to(element).perform\n```\n\n----------------------------------------\n\nTITLE: Adding Directory to PATH in Windows\nDESCRIPTION: This snippet adds a new directory containing the browser driver to the PATH environment variable in Windows using the `setx` command. It appends the specified path to the existing PATH variable, ensuring the change persists across sessions. Replace `C:\\WebDriver\\bin` with the actual directory path.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.zh-cn.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsetx PATH \"%PATH%;C:\\WebDriver\\bin\"\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - Java\nDESCRIPTION: Demonstrates how to set the browser window's size to a specific width and height in Java using Selenium WebDriver. The code creates a `Dimension` object with the desired dimensions and then uses the `setSize` method to apply the new size to the window.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_36\n\nLANGUAGE: java\nCODE:\n```\ndriver.manage().window().setSize(new Dimension(1024, 768));\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium with npm\nDESCRIPTION: Installs the Selenium WebDriver package using npm, the Node Package Manager.  This command installs Selenium locally within a Node.js project.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.zh-cn.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: Disabling Log Truncation in Firefox with Selenium (Python)\nDESCRIPTION: This snippet shows how to disable log truncation in Firefox when using Selenium WebDriver in Python. It initializes FirefoxOptions and sets the `log.truncate` preference to false. The options are then passed to the Firefox driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\noptions = FirefoxOptions()\noptions.set_preference('log.truncate', False)\ndriver = Firefox(options=options)\n```\n\n----------------------------------------\n\nTITLE: Adding Credential in C#\nDESCRIPTION: This C# code snippet adds a credential with specific properties to the authenticator. It defines the ID, public key, algorithm, sign count, user ID, and user name of the credential. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_21\n\nLANGUAGE: CSharp\nCODE:\n```\nawait session.SendCommand(new AddCredentialCommandSettings()\n{\n    Credential = new Credential()\n    {\n        Id = CREDENTIAL_ID, PublicKey = PUBLIC_KEY, Algorithm = AlgorithmType.Es256, SignCount = 0, UserId = USER_ID, UserName = USER_NAME\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Level in Python\nDESCRIPTION: This snippet demonstrates how to set the logging level in Python using the `setLevel` method. This allows filtering log messages based on their severity.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlogger.setLevel(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Configuring Git user name and email (Shell)\nDESCRIPTION: These commands configure the user name and email address in Git. This is important for tracking contributions and attributing changes to the correct author.  These configurations are stored globally.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.zh-cn.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n% git config --global user.name 'Santa Claus'\n% git config --global user.email 'santa@example.com'\n```\n\n----------------------------------------\n\nTITLE: Open a tab with a reference browsing context in JavaScript\nDESCRIPTION: This snippet demonstrates opening a new tab with a reference browsing context using WebDriver BiDi in JavaScript. It uses an existing browsing context to create a new tab. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await browsingContext.create({\n  type: 'tab',\n  referenceContext: driver.getWindowHandle()\n});\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element w/ Offset using Selenium Wheel (Python)\nDESCRIPTION: Scrolls from a specified element with an offset, by a given amount. Requires the element, x offset, y offset, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"idOfMyElement\")\nactions = ActionBuilder(driver)\nactions.scroll_from_origin(WheelInput.ORIGIN_ELEMENT, 20, 50, element=element, x_offset=15, y_offset=25)\nactions.perform()\n```\n\n----------------------------------------\n\nTITLE: Key Down Action in Selenium (Kotlin)\nDESCRIPTION: Demonstrates how to simulate pressing a key using the Actions API in Kotlin. This example shows how to press the SHIFT key on an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval input = driver.findElement(By.tagName(\"input\"))\nval actions = Actions(driver)\nactions.keyDown(input, Keys.SHIFT)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Running Hugo Server for Local Preview\nDESCRIPTION: These commands navigate to the website directory and start the Hugo server, enabling a local preview of the site with your changes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.en.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n% cd website_and_docs\n% hugo server\n```\n\n----------------------------------------\n\nTITLE: Querying Current Session Count in Grid\nDESCRIPTION: This example demonstrates how to query the current session count in the Selenium Grid. The `curl` command sends a POST request to the GraphQL endpoint with the specified query.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.en.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ grid { sessionCount } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Adding Cookie to Browser Context in C#\nDESCRIPTION: This code snippet demonstrates how to add a cookie to the current browser context using Selenium WebDriver in C#. It navigates to a website and then adds a cookie with the name 'key' and value 'value'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\ndriver.Manage().Cookies.AddCookie(new Cookie(\"key\", \"value\"));\n```\n\n----------------------------------------\n\nTITLE: Disable Chrome Build Check - Python\nDESCRIPTION: This snippet demonstrates how to disable the Chrome build check in Python using ChromeOptions.  Disabling build check is useful for forcing the driver to work with any Chrome version but is an unsupported feature.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_42\n\nLANGUAGE: Python\nCODE:\n```\nchrome_options.add_argument('--disable-build-check')\n```\n\n----------------------------------------\n\nTITLE: Working with Firefox Profiles\nDESCRIPTION: This example demonstrates how to use Firefox profiles with Selenium.  It shows how to create a FirefoxProfile object and associate it with the FirefoxOptions. The profile can be an empty one or point to an existing profile directory.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxOptions options = new FirefoxOptions();\nFirefoxProfile profile = new FirefoxProfile();\noptions.setProfile(profile);\nWebDriver driver = new FirefoxDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Comparing Color Objects in Java\nDESCRIPTION: This snippet shows how to directly compare two Color objects in Java using the .equals() method. In this case, it compares the background color of a login button with a predefined 'HOTPINK' color.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nassert loginButtonBackgroundColour.equals(HOTPINK);\n```\n\n----------------------------------------\n\nTITLE: Displaying Selenium Manager Help\nDESCRIPTION: This command displays the help information for Selenium Manager, listing all available command-line arguments and their descriptions. This is useful for understanding the available configuration options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.en.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ ./selenium-manager --help\n```\n\n----------------------------------------\n\nTITLE: Listing Selenium Sub-Commands\nDESCRIPTION: This command is used to display a list of available sub-commands for the Selenium server. These sub-commands include `standalone`, `hub`, `node`, and `info`, enabling users to manage the server's various functionalities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2021/a-tour-of-4-new-commands.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nselenium --help\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Elements After Selenium 4 - Java\nDESCRIPTION: This Java code illustrates the recommended way to find multiple elements in Selenium 4 using `findElements` method and `By` locators such as `By.className`, `By.cssSelector`, etc.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\ndriver.findElements(By.className(\"className\"));\ndriver.findElements(By.cssSelector(\".className\"));\ndriver.findElements(By.id(\"elementId\"));\ndriver.findElements(By.linkText(\"linkText\"));\ndriver.findElements(By.name(\"elementName\"));\ndriver.findElements(By.partialLinkText(\"partialText\"));\ndriver.findElements(By.tagName(\"elementTagName\"));\ndriver.findElements(By.xpath(\"xPath\"));\n```\n\n----------------------------------------\n\nTITLE: Get Distributor Component Help\nDESCRIPTION: This command displays configuration options specific to the 'distributor' component of Selenium Grid. It uses the '--help' flag with the 'distributor' argument.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.zh-cn.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar distributor --help\n```\n\n----------------------------------------\n\nTITLE: Setting Shrink To Fit - Python\nDESCRIPTION: This Python snippet sets the shrink-to-fit setting to false using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.print_options import PrintOptions\n\nprint_options = PrintOptions()\nprint_options.shrink_to_fit = False\n```\n\n----------------------------------------\n\nTITLE: Node Configuration TOML (Relaying Commands to WebDriver Service)\nDESCRIPTION: Configures a Selenium Grid node to relay commands to an external WebDriver service, such as an Appium server. It specifies the service URL, status endpoint, optional protocol version, and stereotypes supported by the service.  The initial number in configs array indicates \"max-sessions\" for that specific configuration.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.pt-br.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[node]\ndetect-drivers = false\n\n[relay]\n# Default Appium/Cloud server endpoint\nurl = \"http://localhost:4723/wd/hub\"\nstatus-endpoint = \"/status\"\n# Optional, enforce a specific protocol version in HttpClient when communicating with the endpoint service status (e.g. HTTP/1.1, HTTP/2)\nprotocol-version = \"HTTP/1.1\"\n# Stereotypes supported by the service. The initial number is \"max-sessions\", and will allocate \n# that many test slots to that particular configuration\nconfigs = [\n  \"5\", \"{\\\"browserName\\\": \\\"chrome\\\", \\\"platformName\\\": \\\"android\\\", \\\"appium:platformVersion\\\": \\\"11\\\"}\"\n]\n```\n\n----------------------------------------\n\nTITLE: KEDA ScaledObject with Edge Browser Configuration (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to configure a KEDA ScaledObject for scaling Selenium Grid with Microsoft Edge browser. It uses `sessionBrowserName: 'msedge'` to resolve name changes between the queue and active session, alongside the `browserName: 'MicrosoftEdge'` parameter, which is necessary for KEDA versions 2.8.0 and later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/scaling-grid-with-keda.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\ntriggers:\n    - type: selenium-grid\n      metadata:\n        url: 'https://selenium-grid-url-or-ip:4444/graphql'\n        browserName: 'MicrosoftEdge'\n        sessionBrowserName: 'msedge'\n```\n\n----------------------------------------\n\nTITLE: Find First Element by Class Name in Python\nDESCRIPTION: This snippet finds the first web element with the class name 'tomatoes' within the entire DOM using the Selenium WebDriver in Python. It uses the `find_element` method with `By.CLASS_NAME` to locate the element. The result is a `WebElement` object representing the located element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nvegetable = driver.find_element(By.CLASS_NAME, \"tomatoes\")\n```\n\n----------------------------------------\n\nTITLE: Driver incompatibility warning in PATH\nDESCRIPTION: This code snippet demonstrates the warning message displayed when an incompatible chromedriver version is detected in the system's PATH, compared to the detected Chrome version. This highlights a common issue addressed by driver managers.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/whats-new-in-selenium-manager-with-selenium-4.11.0.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nWARN    The chromedriver version (113.0.5672.63) detected in PATH at C:\\my-drivers\\chromedriver.exe might not be compatible with the detected chrome version (115.0.5790.110); currently, chromedriver 115.0.5790.102 is recommended for chrome 115.*, so it is advised to delete the driver in PATH and retry\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element with Offset - Selenium Wheel CSharp\nDESCRIPTION: This snippet demonstrates how to scroll from a specific element with an offset using Selenium's Wheel actions in C#. The origin of the scroll will be determined by adding the offset to the coordinates of the center of the element, and then page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"target\"));\nnew Actions(driver)\n    .ScrollFromOrigin(element, 10, 10)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Set Permissions - Ruby\nDESCRIPTION: This snippet shows how to set permissions using Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_68\n\nLANGUAGE: Ruby\nCODE:\n```\ndev_tools.browser.grant_permissions(permissions: ['geolocation'], origin: 'https://example.com')\ndev_tools.browser.reset_permissions(origin: 'https://example.com')\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions in Java\nDESCRIPTION: This code snippet shows how to release all pressed keys and pointer buttons in Java. It uses the `releaseAll` method on the WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.pt-br.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ndriver.releaseAll();\n```\n\n----------------------------------------\n\nTITLE: Setting fileUploadDialogTimeout for Internet Explorer\nDESCRIPTION: This code snippet shows how to set the `fileUploadDialogTimeout` capability for Internet Explorer using Selenium.  It configures the driver to wait for up to 2 seconds for the file upload dialog to appear. It uses InternetExplorerOptions in Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::IE::Options.new\noptions.file_upload_dialog_timeout = 2\n```\n\n----------------------------------------\n\nTITLE: Cancel Auth Required Request - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to cancel a network request blocked at the 'authRequired' phase using Selenium BiDi.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.cancelRequest();\n```\n\n----------------------------------------\n\nTITLE: Minimize Window in Selenium\nDESCRIPTION: This code minimizes the browser window using Selenium WebDriver. The exact behavior depends on the window manager and it typically hides the window in the system tray. Requires Selenium 4 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_66\n\nLANGUAGE: Python\nCODE:\n```\ndriver.minimize_window()\n```\n\n----------------------------------------\n\nTITLE: Setting strictFileInteractability in Python\nDESCRIPTION: This Python code sets the `strictFileInteractability` capability, dictating if strict interaction checks apply to file input elements. This affects the behavior when using 'Element Send Keys' with hidden file upload controls.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_47\n\nLANGUAGE: Python\nCODE:\n```\noptions = Options()\noptions.set_capability(\"strictFileInteractability\", True)\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Port - Ruby\nDESCRIPTION: This snippet demonstrates how to specify the port for the ChromeDriver service in Ruby.  This enables configuring the port the driver listens on.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.ja.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.chrome(port: 1234)\n```\n\n----------------------------------------\n\nTITLE: Scroll From Offset of Origin using Selenium Wheel (Java)\nDESCRIPTION: Scrolls from a specified offset of the viewport origin by a given amount. Requires x offset, y offset, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nnew Actions(driver)\n  .scrollFromOrigin(WheelInput.Origin.viewport(15, 25), 20, 50)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Clear New Session Queue with cURL\nDESCRIPTION: This snippet clears the New Session Request Queue, rejecting all pending requests. An `X-REGISTRATION-SECRET` header is required for authorization. The Grid URL depends on the deployment mode (Standalone, Hub-Node, or Router).  The response indicates the number of rejected requests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://localhost:4444/se/grid/newsessionqueue/queue' --header 'X-REGISTRATION-SECRET: <secret>'\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client with Java\nDESCRIPTION: This Java snippet demonstrates how to configure the HTTP client used by Selenium. It can be used to customize HTTP request parameters such as timeouts or proxy settings.  It uses HttpClientTest.java file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/http_client.zh-cn.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n{{< gh-codeblock path=\"examples/java/src/test/java/dev/selenium/drivers/HttpClientTest.java\" >}}\n```\n\n----------------------------------------\n\nTITLE: De-selecting Option in Select List - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to de-select an option from a multiple select list using Selenium WebDriver. It uses the `Select` class and the `deselectByVisibleText` method. The code assumes you have a Select element initialized.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait select.deselectByVisibleText('Cheese');\n```\n\n----------------------------------------\n\nTITLE: Initializing Safari Driver with Options - CSharp\nDESCRIPTION: This code snippet shows how to initialize a SafariDriver in C# with SafariOptions. An instance of SafariOptions is created and passed to the SafariDriver constructor, allowing for specific Safari configurations.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.pt-br.md#_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\nvar options = new SafariOptions();\nvar driver = new SafariDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method with driver.quit - Test::Unit (Ruby)\nDESCRIPTION: This Ruby code snippet demonstrates how to define a `teardown` method in a Test::Unit TestCase to call `@driver.quit`. This ensures that the browser session is properly closed after each test, preventing resource leaks. Test::Unit is a popular testing framework in Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\n    # UnitTest Teardown\n    # https://www.rubydoc.info/github/test-unit/test-unit/Test/Unit/TestCase\ndef teardown\n    @driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Set Firefox Profile Root Directory (Python)\nDESCRIPTION: This Python code snippet shows how to set the profile root directory in Firefox using Selenium. This allows you to specify where the Firefox profile is stored. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\noptions.set_preference(\"profile.root\", \"/tmp/profiles\")\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset in Python\nDESCRIPTION: This Python snippet performs a drag and drop operation by a specified offset. It uses the ActionChains class and requires a WebDriver instance and the source element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nsource = driver.find_element(By.ID, \"draggable\")\n\naction = ActionChains(driver)\naction.drag_and_drop_by_offset(source, 50, 20).perform()\n```\n\n----------------------------------------\n\nTITLE: Setting browserVersion in Ruby\nDESCRIPTION: This snippet demonstrates how to set the browserVersion capability using Selenium in Ruby.  It shows creating options and setting the browser version directly.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Options.new(browser_version: '100')\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Service Instance in Java\nDESCRIPTION: Demonstrates how to start a driver with a default service instance in Java. The service class is initialized and used to start the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nChromeDriverService service = new ChromeDriverService.Builder().build();\ndriver = new ChromeDriver(service);\n```\n\n----------------------------------------\n\nTITLE: Browsing Context Destroyed Event in Java\nDESCRIPTION: This code snippet demonstrates how to listen for the 'browsingContext.contextDestroyed' event using Selenium WebDriver's BiDi API in Java. It subscribes to the event and prints the context ID when a browsing context is destroyed. Requires Selenium version 4.18 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_55\n\nLANGUAGE: Java\nCODE:\n```\nWebDriverBiDi bidi = (WebDriverBiDi) driver;\n    BiDiSubscription<BrowsingContextModule.ContextDestroyedEvent> subscription = new BiDiSubscription<>(\n        BrowsingContextModule.EVENT_CONTEXT_DESTROYED,\n        e -> System.out.println(\"Context destroyed \" + e.getContext().getId()));\n\n    bidi.subscribe(subscription);\n    driver.get(\"https://www.selenium.dev/\");\n\n    JavascriptExecutor js = (JavascriptExecutor) driver;\n    js.executeScript(\"window.open('https://www.example.com', '_blank');\");\n    js.executeScript(\"window.close();\");\n    bidi.unsubscribe(subscription);\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtualAuthenticatorOptions in Python\nDESCRIPTION: This snippet shows how to initialize VirtualAuthenticatorOptions in Python to configure a virtual authenticator with specific parameters. It defines the protocol, transport, and various flags such as resident key support and user verification.  These options are used when creating a new virtual authenticator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\noptions = VirtualAuthenticatorOptions(\n    protocol=Protocol.CTAP2,\n    transport=Transport.USB,\n    resident_key=True,\n    user_verification=True\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium Kotlin\nDESCRIPTION: This snippet shows how to initialize a Select object in Kotlin using a WebElement representing the select element. It requires the Selenium WebDriver dependency. The `findElement` method is used to locate the select element before creating the Select object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nval selectElement: WebElement = driver.findElement(By.name(\"selectomatic\"))\nval select = Select(selectElement)\n```\n\n----------------------------------------\n\nTITLE: Getting Performance Metrics via CDP in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to retrieve performance metrics using Chrome DevTools Protocol (CDP) with Selenium. This snippet depends on the Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nsession.send('Performance.enable')\n```\n\n----------------------------------------\n\nTITLE: Chaining Relative Locators - CSharp\nDESCRIPTION: Chains relative locators in C# to locate a button element below the element with ID 'email' and to the right of the element with ID 'cancel'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_64\n\nLANGUAGE: CSharp\nCODE:\n```\nvar submitLocator = RelativeBy.WithLocator(By.tagName(\"button\")).Below(By.Id(\"email\")).RightOf(By.Id(\"cancel\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Window Rectangle with Python\nDESCRIPTION: This code snippet demonstrates how to set the window rectangle (position and size) in Python using Selenium WebDriver's Options class. The `set_window_rect` method is used to adjust the window's location and dimensions.  This enables control over the browser window's display.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\ndriver.set_window_rect(0, 0, 640, 480)\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Hub (Shell)\nDESCRIPTION: This command starts a Selenium Grid Hub, which acts as the central point for managing nodes and distributing tests. The Hub listens for RemoteWebDriver requests on http://localhost:4444 by default.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.ja.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar hub\n```\n\n----------------------------------------\n\nTITLE: Removing Credential in Python\nDESCRIPTION: Removes a credential from the authenticator based on the passed credential ID using Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nauthenticator.remove_credential(cred_id)\n```\n\n----------------------------------------\n\nTITLE: Creating Named Color Objects - Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to create Color objects from named color strings like \"black\", \"chocolate\", and \"hotpink\" in Java.  The `Color.fromString()` method is used to parse these predefined color names.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nprivate final Color BLACK = Color.fromString(\"black\");\nprivate final Color CHOCOLATE = Color.fromString(\"chocolate\");\nprivate final Color HOTPINK = Color.fromString(\"hotpink\");\n```\n\n----------------------------------------\n\nTITLE: Get Active Element Attribute - Python\nDESCRIPTION: This Python snippet retrieves the 'title' attribute of the currently active element after entering text into Google's search box.  It navigates to Google, enters text into the search box, and then retrieves the attribute.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Chrome()\ndriver.get(\"https://www.google.com\")\ndriver.find_element(By.CSS_SELECTOR, '[name=\"q\"]').send_keys(\"webElement\")\n\n    # Get attribute of current active element\nattr = driver.switch_to.active_element.get_attribute(\"title\")\nprint(attr)\n```\n\n----------------------------------------\n\nTITLE: Reproducing IE Session Issue in Selenium Grid 4\nDESCRIPTION: Instructions to reproduce the issue where Selenium Grid 4 restricts the number of Internet Explorer sessions to one. It details starting the hub and node with specific parameters and versions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2021/public-project-meeting-20210520.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n1. Start the hub using java -jar selenium-server-4.0.0-beta-3.jar hub\n2. Start the IE node using java -Dwebdriver.ie.driver=IEDriverServer-3.150.1.exe -jar selenium-server-4.0.0-beta-3.jar node --max-sessions 7 --override-max-sessions true\n```\n\n----------------------------------------\n\nTITLE: Setting Local File Detector in Ruby\nDESCRIPTION: Sets a local file detector for a RemoteWebDriver instance in Ruby to enable file uploads. Ruby includes a local file detector by default, but a user can implement their own version with a lambda. Requires the selenium-webdriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :remote, url: 'http://localhost:4444', options: Selenium::WebDriver::Chrome::Options.new\n        driver.file_detector = ->(params) { nil }\n```\n\n----------------------------------------\n\nTITLE: Evaluate Script in Browsing Context - Java\nDESCRIPTION: This snippet shows how to evaluate a script within a browsing context using Java and the WebDriver BiDi API.  It utilizes the `Script.evaluate` method to execute a JavaScript expression in a browsing context. It requires the WebDriver BiDi dependency and a valid browsing context ID.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nBiDi bidi = ((HasBiDi) driver).getBiDi();\n\n        BrowsingContext browsingContext = new BrowsingContext(contextId);\n        Script.EvaluateResult result = bidi.script().evaluate(browsingContext, \"1+1\");\n        assertEquals(2, result.getResult().getValue());\n```\n\n----------------------------------------\n\nTITLE: Take Element Screenshot - Selenium\nDESCRIPTION: This Java snippet demonstrates how to capture a screenshot of a specific element on the current browser window using Selenium WebDriver. It navigates to a website, finds the h1 element, takes a screenshot of it, saves it as a PNG image, and then closes the browser. Requires selenium-java and commons-io dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_77\n\nLANGUAGE: Java\nCODE:\n```\nimport org.apache.commons.io.FileUtils;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class SeleniumelementTakeScreenshot {\n  public static void main(String args[]) throws IOException {\n    WebDriver driver = new ChromeDriver();\n    driver.get(\"https://www.example.com\");\n    WebElement element = driver.findElement(By.cssSelector(\"h1\"));\n    File scrFile = element.getScreenshotAs(OutputType.FILE);\n    FileUtils.copyFile(scrFile, new File(\"./image.png\"));\n    driver.quit();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Resident Credential in Java\nDESCRIPTION: Creates a non-resident (stateless) credential with the required parameters in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nCredential cred = new Credential()\n    .setId(Base64.getDecoder().decode(\"dGhlcmUgbm8=\"));\nauthenticator.addCredential(cred);\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client with Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to configure the HTTP client within the Selenium framework using Ruby. This allows for specific customization and setting different parameters. It uses http_client_spec.rb file from line 7 to 8.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/http_client.zh-cn.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n{{< gh-codeblock path=\"examples/ruby/spec/drivers/http_client_spec.rb#L7-L8\" >}}\n```\n\n----------------------------------------\n\nTITLE: Handle user prompt in JavaScript\nDESCRIPTION: This snippet shows how to handle a user prompt using WebDriver BiDi in JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nawait browsingContext.handleUserPrompt({accept: true});\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium (Ruby)\nDESCRIPTION: Demonstrates sending keys to the currently active element using the Actions API in Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nactions = Selenium::WebDriver::Interactions.new(@driver)\nactions.send_keys('text')\nactions.perform\n```\n\n----------------------------------------\n\nTITLE: Exception Handling: Selenium WebDriver (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to use a `try...finally` block to ensure that the WebDriver instance is always quit, even if an exception occurs during the WebDriver interaction. The asynchronous `await driver.quit()` call in the `finally` block guarantees resource cleanup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n    //WebDriver code here...\n} finally {\n    await driver.quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Session from Node\nDESCRIPTION: Terminates a WebDriver session associated with a specific Selenium Grid node. Closes the driver and removes it from the active session map. Subsequent requests using the same session ID will result in an error. Requires node URL, session ID, and registration secret.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://localhost:5555/se/grid/node/session/<session-id>' --header 'X-REGISTRATION-SECRET: <secret>'\n```\n\n----------------------------------------\n\nTITLE: Registering a Node with a Hub using Custom Ports (Shell)\nDESCRIPTION: This command registers a Node with a Hub using custom ports for publishing and subscribing to events.  This matches the configuration of the Hub when it's not using the default ports.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.en.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --publish-events tcp://<hub-ip>:8886 --subscribe-events tcp://<hub-ip>:8887\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element by Amount - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to scroll from an element by a given amount using Selenium's Actions API and Wheel class. It takes an element, delta x, and delta y values as input. If the element is out of the viewport, it will first be scrolled into view. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.name('food'));\nawait driver.actions().scrollFromOrigin({ origin: element, x: 0, y: 0 }, {x: 50, y: 100}).perform();\n```\n\n----------------------------------------\n\nTITLE: Set Window Position: Selenium WebDriver (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to move the browser window to the top-left corner of the primary monitor using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// Move the window to the top left of the primary monitor\nawait driver.manage().window().setRect({ x: 0, y: 0 });\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid with JDK HTTP Client (Shell)\nDESCRIPTION: This command starts Selenium Grid in standalone mode, using the Java 11 HTTP client instead of AsyncHttpClient. It requires downloading the `selenium-http-jdk-client` JAR file and adding it to the classpath using the `--ext` flag.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.ja.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\njava -Dwebdriver.http.factory=jdk-http-client -jar selenium-server-<version>.jar --ext selenium-http-jdk-client-<version>.jar standalone\n```\n\n----------------------------------------\n\nTITLE: Handle Prompt Popup in JavaScript\nDESCRIPTION: This JavaScript code illustrates handling a JavaScript prompt with Selenium WebDriver. It sends text to the prompt and accepts the prompt. A link click triggers the prompt.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.pt-br.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.findElement(By.linkText('See a sample prompt')).click();\nawait driver.wait(until.alertIsPresent(), 10000);\nawait driver.switchTo().alert().sendKeys('Selenium');\nawait driver.switchTo().alert().accept();\n```\n\n----------------------------------------\n\nTITLE: Force Create Process API in JavaScript\nDESCRIPTION: This JavaScript code shows how to force the CreateProcess API when launching Internet Explorer. The code sets the `forceCreateProcessApi` option to true before building the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ie = require('selenium-webdriver/ie');\nlet options = new ie.Options();\noptions.forceCreateProcessApi(true);\n\ndriver = await env.builder()\n          .setIeOptions(options)\n          .build();\n```\n\n----------------------------------------\n\nTITLE: Back Click with Selenium\nDESCRIPTION: Performs a back click by pressing and releasing mouse button 3.  It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(:id, 'clickable')\n@driver.action.move_to(element).click(button: :back).perform\n```\n\n----------------------------------------\n\nTITLE: Installing Unsigned Add-ons (Temporary) in Firefox with Selenium (Python)\nDESCRIPTION: This snippet demonstrates how to install an unsigned Firefox add-on (as a temporary add-on) using Selenium WebDriver in Python. The addon is installed from a directory.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\ndriver.install_addon(resource_path('webextensions-selenium-example'), temporary=True)\n```\n\n----------------------------------------\n\nTITLE: Capturing Console Logs Java\nDESCRIPTION: This Java snippet demonstrates how to capture console logs using Chrome DevTools Protocol (CDP) in Selenium. It requires a Selenium WebDriver instance connected to a Chrome browser. The CDP is used to subscribe to console events and log them.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver = new ChromeDriver();\n        ((HasAuthentication) driver).register(\n            UsernameAndPassword.of(\"test\", \"test\"));\n\n        DevTools devTools = driver.getDevTools();\n        devTools.createSession();\n        devTools.send(Log.enable());\n        devTools.addListener(Log.entryAdded(),\n            logEntry -> {\n              System.out.println(\"log: \" + logEntry.getText());\n              System.out.println(\"level: \" + logEntry.getLevel());\n            });\n\n        driver.get(\"https://the-internet.herokuapp.com/basic_auth\");\n```\n\n----------------------------------------\n\nTITLE: Check Driver Version (Bash/Zsh)\nDESCRIPTION: This command checks the version of the ChromeDriver executable, verifying that it is accessible in the PATH and functioning correctly.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.pt-br.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nchromedriver --version\n```\n\n----------------------------------------\n\nTITLE: Realm Created event - Java\nDESCRIPTION: This Java code snippet demonstrates listening for realm creation events.  It sets up a listener that gets triggered when a realm is created in the BiDi session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void realmCreatedEvent() throws InterruptedException {\n        CountDownLatch countDownLatch = new CountDownLatch(1);\n        String url = getHtmlPage();\n        driver.get(url);\n\n        listener =\n            new ScriptEventListener(driver)\n                .onRealmCreated(realm -> countDownLatch.countDown());\n\n        new BrowsingContext(driver, driver.getWindowHandle());\n\n        countDownLatch.await(5, TimeUnit.SECONDS);\n        assertEquals(0, countDownLatch.getCount());\n    }\n```\n\n----------------------------------------\n\nTITLE: Scroll From Offset of Origin using Selenium Wheel (Ruby)\nDESCRIPTION: Scrolls from a specified offset of the viewport origin by a given amount. Requires x offset, y offset, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\n@driver.action.scroll_from(::Selenium::WebDriver::WheelInput::Origin.viewport(x: 15, y: 25), 20, 50).perform\n```\n\n----------------------------------------\n\nTITLE: Adding a Virtual Authenticator in Python\nDESCRIPTION: This snippet showcases adding a virtual authenticator in Python. It leverages DevTools and the VirtualAuthenticatorOptions to create the virtual authenticator for testing Web Authentication flows. It requires Selenium WebDriver and DevTools.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndevtools = driver.devtools\ndevtools.add_virtual_authenticator(options)\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Designated Element in Selenium (Kotlin)\nDESCRIPTION: Demonstrates sending keys to a specific element using the Actions API in Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nval input = driver.findElement(By.tagName(\"input\"))\nval actions = Actions(driver)\nactions.sendKeys(input, \"text\")\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Chrome Casting - Ruby\nDESCRIPTION: This snippet demonstrates how to drive Chrome Cast devices, including sharing tabs, using Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_50\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Chrome::Options.new\noptions.add_argument(\"--load-extension=#{EXTENSION_PATH}\")\ndriver = Selenium::WebDriver.for :chrome, options: options\ndev_tools = driver.devtools\ndev_tools.cast.start_desktop_mirroring(sink_name: 'screen')\ndev_tools.cast.start_tab_mirroring(sink_name: 'tab')\n```\n\n----------------------------------------\n\nTITLE: Creating Code Tabs with Selenium WebDriver in CSharp\nDESCRIPTION: This C# code snippet demonstrates how to initialize a Selenium WebDriver instance for Chrome.  It shows how to instantiate a ChromeDriver using the 'var' keyword.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.ja.md#_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Console Output - Java\nDESCRIPTION: This Java snippet demonstrates how to configure the Internet Explorer driver service to output logs to the console (STDOUT).  It utilizes `InternetExplorerDriverService.Builder` and redirects the logging output to `DriverService.LOG_STDOUT`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_29\n\nLANGUAGE: Java\nCODE:\n```\nInternetExplorerDriverService service = new InternetExplorerDriverService.Builder()\n        .withLogOutput(System.out)\n        .build();\nWebDriver driver = new InternetExplorerDriver(service);\n```\n\n----------------------------------------\n\nTITLE: Switching to IFrame by Name/ID - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to switch to an IFrame using its name or ID.  It shows switching by both the ID 'buttonframe' and the name 'myframe' then clicks the button inside the IFrame.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Using the ID\nawait driver.switchTo().frame('buttonframe');\n\n// Or using the name instead\nawait driver.switchTo().frame('myframe');\n\n// Now we can click the button\nawait driver.findElement(By.css('button')).click();\n```\n\n----------------------------------------\n\nTITLE: Setting ChromeOptions Headless After - CSharp\nDESCRIPTION: This C# snippet demonstrates setting headless mode using the `--headless=new` argument in Selenium. It initializes ChromeOptions, adds the argument for headless mode, creates a ChromeDriver instance with the options, navigates to selenium.dev, and closes the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/headless-is-going-away.md#_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\nvar options = new ChromeOptions();\noptions.AddArgument(\"--headless=new\");\nvar driver = new ChromeDriver(options);\ndriver.Navigate().GoToUrl(\"https://selenium.dev\");\ndriver.Quit();\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Driver Log File Output\nDESCRIPTION: This code snippet shows how to configure the ChromeDriver service to write its logs to a specific file. This is useful for debugging and troubleshooting issues with the ChromeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\nChromeDriverService service = new ChromeDriverService.Builder()\n    .withLogFile(new File(\"chrome.log\"))\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Get Sessions Component Help\nDESCRIPTION: This command displays configuration options specific to the 'sessions' component of Selenium Grid. It uses the '--help' flag with the 'sessions' argument.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.zh-cn.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar sessions --help\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to Normal in CSharp\nDESCRIPTION: This snippet shows how to set the page load strategy to 'normal' in C# using Selenium. WebDriver waits until the load event is fired.\nDependencies: Selenium WebDriver and Chrome driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace pageLoadStrategy {\n  class pageLoadStrategy {\n    public static void Main(string[] args) {\n      var chromeOptions = new ChromeOptions();\n      chromeOptions.PageLoadStrategy = PageLoadStrategy.Normal;\n      IWebDriver driver = new ChromeDriver(chromeOptions);\n      try {\n        driver.Navigate().GoToUrl(\"https://example.com\");\n      } finally {\n        driver.Quit();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Realm Destruction Event - Java\nDESCRIPTION: This Java snippet shows how to register a listener for realm destruction events using Selenium's BiDi API. It waits for the event to be triggered and then asserts that the event was received. Requires Selenium 4.16 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_32\n\nLANGUAGE: java\nCODE:\n```\n    browsingContext.on(\n        BrowsingContext.RealmDestroyed.class,\n        event -> {\n          realmId = event.getRealm();\n          latch.countDown();\n        });\n\n    driver.executeScript(\"window.destroy = function() { realm.destroy();}\\nwindow.destroy()\", realm);\n    assertThat(latch.await(5, TimeUnit.SECONDS)).isTrue();\n```\n\n----------------------------------------\n\nTITLE: Finding Elements By Tag Name - Java\nDESCRIPTION: This code snippet demonstrates how to find all elements with a specific tag name using Selenium WebDriver in Java. It initializes a WebDriver instance, navigates to a URL, finds all 'li' elements, and prints their text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nList<WebElement> elements = driver.findElements(By.tagName(\"li\"));\n\nfor (WebElement element : elements) {\n    System.out.println(\"Paragraph text:\" + element.getText());\n}\n```\n\n----------------------------------------\n\nTITLE: Click and Hold Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a click and hold action on an element using Selenium. It combines moving the mouse to the center of an element with pressing the left mouse button. This is useful for focusing on a specific element without releasing the click immediately. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nActions actions = new Actions(driver);\nIWebElement element = driver.FindElement(By.Id(\"my-element\"));\nactions.ClickAndHold(element).Perform();\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element by Amount - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to scroll from an element by a given amount using Selenium's Actions API and Wheel class. It takes an element, delta x, and delta y values as input. If the element is out of the viewport, it will first be scrolled into view. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(name: 'food')\n@driver.action.scroll_from(element, 50, 100).perform\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level for EdgeDriver in Java\nDESCRIPTION: This snippet demonstrates how to set the log level for the EdgeDriver in Java using EdgeDriverService. This allows you to control the verbosity of the driver's output.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nEdgeDriverService service = new EdgeDriverService.Builder()\n  .withLogLevel(EdgeDriverLogLevel.ALL).build();\n```\n\n----------------------------------------\n\nTITLE: Get Hub Configuration Help\nDESCRIPTION: This command displays component-specific configuration information for the Hub role. It uses the `--help` option after specifying the hub role.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.en.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar hub --help\n```\n\n----------------------------------------\n\nTITLE: Scroll by Amount using Selenium Wheel - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to scroll by a given amount using Selenium's Actions API and Wheel class. It takes delta x and delta y values as input, which represent the amount to scroll horizontally and vertically, respectively. Negative values indicate scrolling left and up. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\n@driver.action.scroll_by(x: 50, y: 100).perform\n```\n\n----------------------------------------\n\nTITLE: Executable Path Deprecation in Python\nDESCRIPTION: This Python snippet demonstrates how to initialize a Chrome driver using a service object instead of directly passing the executable path.  In Selenium 4, passing `executable_path` directly is deprecated, and a `Service` object should be used to set the driver's location. This ensures proper initialization and avoids deprecation warnings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\noptions = webdriver.ChromeOptions()\ndriver = webdriver.Chrome(\n    executable_path=CHROMEDRIVER_PATH, \n    options=options\n)\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service as ChromeService\noptions = webdriver.ChromeOptions()\nservice = ChromeService(executable_path=CHROMEDRIVER_PATH)\ndriver = webdriver.Chrome(service=service, options=options)\n```\n\n----------------------------------------\n\nTITLE: Creating Sessions Table SQL (PostgreSQL)\nDESCRIPTION: This SQL statement creates the sessions_map table in a PostgreSQL database. This table is used by Selenium Grid to store session information when the JdbcBackedSessionMap implementation is used.  It defines the schema for storing session IDs, capabilities, URIs, stereotypes, and start times.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.zh-cn.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE IF NOT EXISTS sessions_map(\n    session_ids varchar(256),\n    session_caps text,\n    session_uri varchar(256),\n    session_stereotype text,\n    session_start varchar(256)\n );\n```\n\n----------------------------------------\n\nTITLE: Set Permissions - Python\nDESCRIPTION: This snippet shows how to set permissions using Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_66\n\nLANGUAGE: Python\nCODE:\n```\ndriver.devtools.browser.grant_permissions(\n    permissions=['geolocation'], origin='https://example.com'\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata in Selenium Tests (Java)\nDESCRIPTION: This code snippet demonstrates how to add metadata to a Selenium test using ChromeOptions. Metadata can be used to provide additional information about the test, such as the browser version, platform, and test name.  This metadata can then be consumed via the Grid UI or GraphQL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.zh-cn.md#_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions chromeOptions = new ChromeOptions();\nchromeOptions.setCapability(\"browserVersion\", \"100\");\nchromeOptions.setCapability(\"platformName\", \"Windows\");\n// Showing a test name instead of the session id in the Grid UI\nchromeOptions.setCapability(\"se:name\", \"My simple test\"); \n// Other type of metadata can be seen in the Grid UI by clicking on the \n// session info or via GraphQL\nchromeOptions.setCapability(\"se:sampleMetadata\", \"Sample metadata value\"); \nWebDriver driver = new RemoteWebDriver(new URL(\"http://gridUrl:4444\"), chromeOptions);\ndriver.get(\"http://www.google.com\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Locating Element by XPath in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate a web element using an XPath expression in Selenium WebDriver. It initializes a ChromeDriver instance and uses the `findElement` method with `By.xpath` to find an input element with the attribute `value` equal to 'f', representing the female radio button.  The XPath expression `//input[@value='f']` is a relative XPath.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_29\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.Xpath(\"//input[@value='f']\"));\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using npm\nDESCRIPTION: This command installs the dependencies required for the JavaScript tests using Node Package Manager (npm). It reads the `package.json` file in the current directory and installs the listed packages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/javascript/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop on Element with Selenium\nDESCRIPTION: This code performs a drag-and-drop operation from one element to another using Selenium WebDriver. It first clicks and holds the source element, then moves to the target element's location, and finally releases the mouse. It leverages the `dragAndDrop` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nWebElement source = driver.findElement(By.id(\"draggable\"));\nWebElement target = driver.findElement(By.id(\"droppable\"));\nnew Actions(driver)\n  .dragAndDrop(source, target)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Printing a Page using PrintsPage in Java\nDESCRIPTION: This code snippet demonstrates how to print a webpage using the `PrintsPage` interface in Java and retrieve the PDF in base64 format. It first casts the WebDriver to `PrintsPage`, creates `PrintOptions`, and then calls `print()`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nPrintsPage printer = (PrintsPage) driver;\nPrintOptions options = new PrintOptions();\nString pdf = printer.print(options);\n```\n\n----------------------------------------\n\nTITLE: Creating Transparent Color Object\nDESCRIPTION: This snippet shows how to create a Color object for transparent color in Kotlin using the fromString method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nprivate val TRANSPARENT = Color.fromString(\"transparent\")\n```\n\n----------------------------------------\n\nTITLE: Listening to JavaScript Exceptions with BiDi API in JavaScript\nDESCRIPTION: This JavaScript snippet showcases how to listen to JavaScript exceptions and process them. It demonstrates the usage of the BiDi API for capturing exceptions within a Selenium JavaScript test.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.zh-cn.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait bidiSession.on('log.entryAdded', (event) => {\n  if (event.entry.level === 'error' && event.entry.source.realm !== undefined) {\n    console.log(event.entry.text);\n    console.log(event.entry.stackTrace);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Safari Driver with Options (Python)\nDESCRIPTION: This code snippet shows how to initialize the Safari Driver in Python using SafariOptions.  SafariOptions allows you to set Safari-specific capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.zh-cn.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\noptions = Options()\ndriver = webdriver.Safari(options=options)\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes (C#)\nDESCRIPTION: This C# code snippet demonstrates how to add custom pointer event attributes to a Pen action in Selenium. It sets attributes like width, height, pressure, tangential pressure, tiltX, and tiltY to simulate more realistic pen behavior.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.ja.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nPen pen = new(\"pen1\");\nDictionary<string, object> attributes = new() { { \"width\", 18 }, { \"height\", 20 }, { \"pressure\", 0.4 }, { \"tangentialPressure\", -0.8 }, { \"tiltX\", 70 }, { \"tiltY\", -60 } };\n\nIWebElement element = driver.FindElement(By.Id(\"example\"));\n\nnew Actions(driver)\n    .MoveToElement(element)\n    .Tick(pen.CreatePointerMove(TimeSpan.FromMilliseconds(1), PointerInputOrigin.FromElement(element), 0, 0, attributes))\n    .Tick(pen.CreatePointerDown(MouseButton.Left))\n    .Tick(pen.CreatePointerUp(MouseButton.Left))\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Directing Logger Output to a File - Ruby\nDESCRIPTION: This snippet shows how to store Selenium logs in a file in Ruby. It involves creating a logger instance and redirecting the output to the specified file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'logger'\n\nlogger = Logger.new('selenium.log')\n```\n\n----------------------------------------\n\nTITLE: Disable Chrome Search Engine Choice Screen\nDESCRIPTION: This snippet demonstrates how to disable the search engine selection screen in Chrome using a command-line argument. This is useful in automated testing scenarios where the prompt can interfere with test execution. The argument prevents Chrome from displaying the search engine selection prompt on every launch.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2024/chrome-browser-woes.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n--disable-search-engine-choice-screen\n```\n\n----------------------------------------\n\nTITLE: Install Selenium with Gem in Ruby\nDESCRIPTION: This command shows how to install the Selenium WebDriver gem in Ruby. It fetches and installs the Selenium WebDriver library, making it available for use in Ruby projects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.en.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngem install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Session Map (Shell)\nDESCRIPTION: This command starts the Session Map component, which maps session IDs to the Node where the session is running in a Distributed Grid setup.  The default port is 5556.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.en.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar sessions --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443 --port 5556\n```\n\n----------------------------------------\n\nTITLE: Checking ChromeDriver Version in Zsh\nDESCRIPTION: This snippet checks the version of the ChromeDriver executable using the `--version` flag. It verifies that the driver is correctly installed and accessible from the command line after being added to the PATH environment variable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.zh-cn.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nchromedriver --version\n```\n\n----------------------------------------\n\nTITLE: Initializing Safari Driver with Options - Ruby\nDESCRIPTION: This code snippet demonstrates how to initialize a Safari WebDriver instance in Ruby using SafariOptions.  A SafariOptions object is instantiated, and then used to initialize the SafariDriver. This enables the user to customize the Safari driver before starting the browser session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.pt-br.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Safari::Options.new\ndriver = Selenium::WebDriver.for :safari, options: options\n```\n\n----------------------------------------\n\nTITLE: Click and Hold Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a click and hold action on an element using Selenium. It combines moving the mouse to the center of an element with pressing the left mouse button. This is useful for focusing on a specific element without releasing the click immediately. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"my-element\")\nactions = ActionChains(driver)\nactions.click_and_hold(element).perform()\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - Selenium WebDriver - Kotlin\nDESCRIPTION: This snippet retrieves the width and height of the browser window using the Selenium WebDriver API in Kotlin. It demonstrates two approaches: accessing each dimension individually and storing the dimensions in a `Dimension` object for later use. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\n// 分别获取每个尺寸\nval width = driver.manage().window().size.width\nval height = driver.manage().window().size.height\n\n// 或者存储尺寸并在以后查询它们\nval size = driver.manage().window().size\nval width1 = size.width\nval height1 = size.height\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Partial Link Text with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a link element on a page using partial link text with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.partialLinkText()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.partialLinkText(\"Official Page\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies using CDP in Java\nDESCRIPTION: This Java code demonstrates how to set cookies using the Chrome DevTools Protocol (CDP) in Selenium. It constructs a cookie object with specified name, value, domain, and path, and then uses the `Network.setCookie` method to set the cookie in the browser. This is useful for managing cookies for testing purposes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nString name = \"foo\";\nString value = \"bar\";\nString domain = \"localhost\";\nString path = \"/\";\ncdp.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));\ncdp.send(Network.setCookie(name, value, Optional.of(domain), Optional.of(path), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty()));\nCookie cook = driver.manage().getCookieNamed(name);\nassertThat(cook.getValue()).isEqualTo(value);\n```\n\n----------------------------------------\n\nTITLE: Before Request Sent Event in JavaScript\nDESCRIPTION: This JavaScript code snippet listens for the 'beforeRequestSent' network event and logs the request URL using Selenium BiDi.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nbidiSession.network.onRequest(event => {\n  console.log(event.request.url);\n});\n```\n\n----------------------------------------\n\nTITLE: Deselecting Options in Kotlin\nDESCRIPTION: Demonstrates how to deselect all selected options in a multi-select element using Kotlin. It calls the deselectAll() method on the Select object. This only works for multi-select lists.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_47\n\nLANGUAGE: kotlin\nCODE:\n```\nselect.deselectAll()\n```\n\n----------------------------------------\n\nTITLE: Add Directory to PATH (Windows)\nDESCRIPTION: This snippet adds a new directory to the PATH environment variable in Windows.  It uses the `setx` command to permanently modify the PATH environment variable for the current user. Requires a restart of the command prompt or terminal to take effect.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.ja.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsetx PATH \"%PATH%;C:\\WebDriver\\bin\"\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window - Selenium\nDESCRIPTION: This snippet demonstrates how to set the browser window to fullscreen mode using Selenium WebDriver, similar to pressing F11 in most browsers.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_69\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.window.full_screen\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium using Pip (Python)\nDESCRIPTION: Installs the Selenium library using pip, the Python package installer. This command downloads and installs the latest version of the Selenium package and its dependencies from the Python Package Index (PyPI).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.ja.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install selenium\n```\n\n----------------------------------------\n\nTITLE: Get realm by type - JavaScript\nDESCRIPTION: This JavaScript code gets the realm by the provided type.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('get realm by type', async () => {\n    const browsingContext = await new BrowsingContext(driver, tabId);\n    let realms = await browsingContext.script.getRealms({context: browsingContext.context, type: 'window'});\n\n    expect(realms.length).toBeGreaterThan(0);\n  });\n```\n\n----------------------------------------\n\nTITLE: Getting Current URL with Selenium\nDESCRIPTION: This snippet retrieves the current URL of the webpage loaded in the browser using Selenium WebDriver. It demonstrates how to access the current URL in different programming languages. Dependencies: Selenium WebDriver library for the respective language.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.zh-cn.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Url\n```\n\n----------------------------------------\n\nTITLE: Realm Destroyed Event Handler - Java\nDESCRIPTION: This Java code snippet demonstrates how to register and handle the 'Realm Destroyed' event using Selenium's BiDi (Bidirectional) API. It sets up a WebDriver BiDi event listener to capture and process notifications related to destroyed realms. This is useful for tracking browser context lifecycles and managing resources accordingly.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_32\n\nLANGUAGE: java\nCODE:\n```\n    bidi.on(\"script.realmDestroyed\", Script.realmDestroyed((event) -> {\n      realms.remove(event.realm());\n    }));\n\n    driver.get(\"https://www.selenium.dev/selenium/web/blank.html\");\n    driver.close();\n    assertThat(realms).isEmpty();\n```\n\n----------------------------------------\n\nTITLE: Going Forward in Browser History (JavaScript)\nDESCRIPTION: Demonstrates how to navigate forward in the browser history using Selenium WebDriver in JavaScript. The `forward` method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.forward()\n```\n\n----------------------------------------\n\nTITLE: Add Maven Dependency for Selenium in Java\nDESCRIPTION: This XML snippet demonstrates how to add the Selenium dependency to a Java project's `pom.xml` file using Maven. This allows the project to access Selenium libraries for web automation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.en.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.seleniumhq.selenium</groupId>\n  <artifactId>selenium-java</artifactId>\n  <version>4.18.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Minimize Window - Selenium WebDriver - Ruby\nDESCRIPTION: This snippet minimizes the browser window using the Selenium WebDriver API in Ruby. Requires the selenium-webdriver gem and Selenium 4 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_44\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.window.minimize\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel (Python)\nDESCRIPTION: Scrolls the viewport so the bottom of the specified web element is at the bottom of the screen.  This method takes a web element as the sole argument. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"idOfMyElement\")\nactions = ActionBuilder(driver)\nactions.scroll_from_origin(WheelInput.ORIGIN_VIEWPORT, 0, element.rect['y'])\nactions.perform()\n```\n\n----------------------------------------\n\nTITLE: Waiting for Downloads via CDP in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to wait for downloads using Chrome DevTools Protocol (CDP) with Selenium. It listens for the `Network.loadingFinished` event to determine when a download is complete. This snippet depends on Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nfuture = Concurrent::Promises.resolvable_future\nsession.on(:loading_finished) do |event|\n  future.fulfill(event['requestId'])\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Root in Firefox with Selenium (Ruby)\nDESCRIPTION: This Ruby code snippet shows how to set a custom profile root directory for Firefox using Selenium. It sets the `profile_root` preference in the Firefox options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\noptions['profile_root'] = '/tmp/test'\n```\n\n----------------------------------------\n\nTITLE: Script Pinning in C# using CDP\nDESCRIPTION: This C# snippet demonstrates pinning a script using the Chrome DevTools Protocol (CDP) through Selenium. It relies on a Selenium WebDriver and the CDP interface to add a script that is evaluated on new documents. It sets a bespoke value on the window object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.en.md#_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\n            string scriptId = cdp.ExecuteCdpCommandWithResult(\"Page.addScriptToEvaluateOnNewDocument\", new Dictionary<string, object>()\n            {{\"source\", \"window.bespokeValue = 'from pinning'\"}})[\"identifier\"].ToString();\n```\n\n----------------------------------------\n\nTITLE: Continue Auth Request without Credentials - Selenium BiDi - Java\nDESCRIPTION: This Java snippet shows how to continue a network request blocked at the 'authRequired' phase without credentials using Selenium's BiDi API. It proceeds with the request without providing authentication details. Requires Selenium 4.18 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nNetwork network = driver.getDevTools().getDomains().network();\nString intercept = network.addIntercept(\"https://example.com\",\n    new AddInterceptParameters()).getId();\nnetwork.onAuthRequired(event -> {\n  network.continueRequest(new ContinueParameters(event.getRequest().getRequestId(),\n      Optional.empty()));\n});\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookie Attribute in Ruby\nDESCRIPTION: This Ruby code shows how to set the SameSite attribute of cookies using Selenium WebDriver. It creates two cookies, one with SameSite 'Strict' and another with SameSite 'Lax', and adds them to the current browser context. It also prints the cookie to console. Requires the selenium-webdriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_33\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  # Adds the cookie into current browser context with sameSite 'Strict' (or) 'Lax'\n  driver.manage.add_cookie(name: \"foo\", value: \"bar\", same_site: \"Strict\")\n  driver.manage.add_cookie(name: \"foo1\", value: \"bar\", same_site: \"Lax\")\n  puts driver.manage.cookie_named('foo')\n  puts driver.manage.cookie_named('foo1')\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value - Kotlin\nDESCRIPTION: Demonstrates how to retrieve the computed CSS value of a web element using Kotlin and Selenium WebDriver. The `getCssValue()` method returns the value of the specified CSS property as a string. A WebDriver instance, an element locator, and the CSS property name are required. First navigate to the target URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Navigate to Url\ndriver.get(\"https://www.selenium.dev/selenium/web/colorPage.html\")\n\n// Retrieves the computed style property 'color' of linktext\nval cssValue = driver.findElement(By.id(\"namedColor\")).getCssValue(\"background-color\")\n\n```\n\n----------------------------------------\n\nTITLE: Edge Installation Warning in Windows\nDESCRIPTION: This snippet displays the warning message shown by Selenium Manager when attempting to install Edge in Windows without administrator permissions. It highlights the requirement for administrator privileges to install Edge via Selenium Manager on Windows systems.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.pt-br.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nedge can only be installed in Windows with administrator permissions\n```\n\n----------------------------------------\n\nTITLE: Starting Distributed Selenium Grid (Redis)\nDESCRIPTION: This Bash script starts a distributed Selenium Grid with the session map backed by a Redis instance. It defines variables for the Selenium version, JAR name, and event bus addresses, then starts the event bus, session queue, session map (using RedisBackedSessionMap), distributor, router, and node. It uses coursier to fetch the selenium-session-map-redis dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.en.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\nSE_VERSION=<current_selenium_version>\nJAR_NAME=selenium-server-${SE_VERSION}.jar\nPUBLISH=\"--publish-events tcp://localhost:4442\"\nSUBSCRIBE=\"--subscribe-events tcp://localhost:4443\"\nSESSIONS=\"--sessions http://localhost:5556\"\nSESSIONS_QUEUE=\"--sessionqueue http://localhost:5559\"\necho 'Starting Event Bus'\njava -jar $JAR_NAME event-bus $PUBLISH $SUBSCRIBE --port 5557 &\necho 'Starting New Session Queue'\njava -jar $JAR_NAME sessionqueue --port 5559 &\necho 'Starting Session Map'\njava -jar $JAR_NAME \\\n--ext $(coursier fetch -p org.seleniumhq.selenium:selenium-session-map-redis:${SE_VERSION}) \\\nsessions $PUBLISH $SUBSCRIBE --port 5556 --config sessions.toml &\necho 'Starting Distributor'\njava -jar $JAR_NAME  distributor $PUBLISH $SUBSCRIBE $SESSIONS $SESSIONS_QUEUE --port 5553 --bind-bus false &\necho 'Starting Router'\njava -jar $JAR_NAME router $SESSIONS --distributor http://localhost:5553 $SESSIONS_QUEUE --port 4444 &\necho 'Starting Node'\njava -jar $JAR_NAME node $PUBLISH $SUBSCRIBE &\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Event Bus (Shell)\nDESCRIPTION: This command starts the Selenium Event Bus, which facilitates internal communication between the different components of a Distributed Grid. It uses ports 4442, 4443, and 5557 by default.  All necessary ports must be exposed for proper communication.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.pt-br.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-<version>.jar event-bus --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443 --port 5557\n```\n\n----------------------------------------\n\nTITLE: Finding Elements From Element in Java\nDESCRIPTION: This Java code snippet demonstrates how to find child elements within a specific parent element using Selenium WebDriver. It initializes a ChromeDriver, navigates to a URL, finds an element with the tag name 'div', then finds all 'p' elements within that 'div', and prints their text content.  It relies on the Selenium WebDriver and ChromeDriver dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_29\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport java.util.List;\n\npublic class findElementsFromElement {\n    public static void main(String[] args) {\n        WebDriver driver = new ChromeDriver();\n        try {\n            driver.get(\"https://example.com\");\n\n            // Get element with tag name 'div'\n            WebElement element = driver.findElement(By.tagName(\"div\"));\n\n            // Get all the elements available with tag name 'p'\n            List<WebElement> elements = element.findElements(By.tagName(\"p\"));\n            for (WebElement e : elements) {\n                System.out.println(e.getText());\n            }\n        } finally {\n            driver.quit();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Resident Credential in JavaScript\nDESCRIPTION: Creates a non-resident (stateless) credential with the required parameters using Javascript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst cred = {\n  id: Buffer.from('dGhlcmUgbm8=', 'base64'),\n};\nawait driver.addVirtualAuthenticatorCredential(authenticator, cred);\n```\n\n----------------------------------------\n\nTITLE: Get Page Title with Selenium\nDESCRIPTION: Retrieves the title of the current web page loaded in the browser using Selenium WebDriver. This functionality is demonstrated in Java, Python, C#, Ruby, and JavaScript. The `driver.title` property or method is used to access the title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.ja.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.title\n```\n\n----------------------------------------\n\nTITLE: ProductsPage Class in Java\nDESCRIPTION: This Java code defines the ProductsPage class, extending BasePage. It includes methods to retrieve a list of products and get a specific product based on a condition (Predicate). It uses WebDriverWait to ensure the header is loaded before proceeding.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.pt-br.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Page Object\npublic class ProductsPage extends BasePage {\n    public ProductsPage(WebDriver driver) {\n        super(driver);\n        // Sem afirmações, lança uma exceção se o elemento não for carregado\n        new WebDriverWait(driver, Duration.ofSeconds(3))\n            .until(d -> d.findElement(By.className​(\"header_container\")));\n    }\n\n    // Retornar uma lista de produtos é um serviço da página\n    public List<Product> getProducts() {\n        return driver.findElements(By.className​(\"inventory_item\"))\n            .stream()\n            .map(e -> new Product(e)) // Mapeia WebElement para um componente do produto\n            .toList();\n    }\n\n    // Retorna um produto específico usando uma função booleana (predicado)\n    // Este é o padrão de estratégia comportamental do GoF\n    public Product getProduct(Predicate<Product> condition) {\n        return getProducts()\n            .stream()\n            .filter(condition) // Filtra por nome de produto ou preço\n            .findFirst()\n            .orElseThrow();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting W3C Capabilities (Before) - CSharp\nDESCRIPTION: This snippet demonstrates how to set DesiredCapabilities in Selenium 3 for C#. It sets browserName, platform, version, build, and name capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nDesiredCapabilities caps = new DesiredCapabilities();\ncaps.SetCapability(\"browserName\", \"firefox\");\ncaps.SetCapability(\"platform\", \"Windows 10\");\ncaps.SetCapability(\"version\", \"92\");\ncaps.SetCapability(\"build\", myTestBuild);\ncaps.SetCapability(\"name\", myTestName);\nvar driver = new RemoteWebDriver(new Uri(CloudURL), caps);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Get current requests in New Session Queue\nDESCRIPTION: This command uses curl to execute a GraphQL query to fetch the current requests in the New Session Queue from the `sessionsInfo` object. This returns details about any session requests waiting to be processed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.zh-cn.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ sessionsInfo { sessionQueueRequests } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Set Page Size Java\nDESCRIPTION: This code snippet demonstrates how to set the page size for printing in Java with Selenium, using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setPageSize(\"A4\");\n\nbyte[] pdfContent = ((PrintsPage) driver).print(printOptions);\n```\n\n----------------------------------------\n\nTITLE: Capturing JavaScript Exceptions CSharp\nDESCRIPTION: This C# snippet captures JavaScript exceptions using Chrome DevTools Protocol (CDP) in Selenium. It enables the 'Runtime' domain and attaches a listener to the 'ExceptionThrown' event, printing exception details to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.ja.md#_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\n        using (var devTools = session.GetDevToolsSession())\n        {\n            await devTools.Runtime.Enable(new RuntimeEnableCommandSettings());\n            devTools.Runtime.ExceptionThrown += (sender, e) =>\n            {\n                Console.WriteLine(e.ExceptionDetails.Text);\n            };\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing WebElement Method Wrappers with EventFiringDecorator (Java)\nDESCRIPTION: This snippet demonstrates how to implement custom method wrappers for WebElement instances using EventFiringDecorator. It shows how to create a decorated WebElement that intercepts calls to methods like `findElement` and executes custom logic. The `createDecorated` method is overridden to target WebElement instances.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/java-removal-of-deprecated-events-classes.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class WebElementWrapper implements WebElement {\n    private final WebElement element;\n    WebElementWrapper(WebElement element) {\n        this.element = element;\n    }\n    @Override\n    public WebElement findElement(final By by) {\n        // custom implementation goes here\n        return element.findElement(by);\n    }\n}\n\npublic class WebElementDecorator extends EventFiringDecorator<WebDriver> {\n    @Override\n    public Decorated<WebElement> createDecorated(WebElement original) {\n        return new DefaultDecorated<>(original, this) {\n            @Override\n            public Object call(Method method, Object[] args) throws Throwable {\n                String methodName = method.getName();\n                if (\"findElement\".equals(methodName)) {\n                    // custom implementation goes here\n                    WebElementWrapper element = new WebElementWrapper(getOriginal());\n                    return element.findElement((By) args[0]);\n                }\n                return super.call(method, args);\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Preloaded Script - Java\nDESCRIPTION: This snippet demonstrates how to remove a preloaded script using Java and the WebDriver BiDi API. It uses the `Script.removePreloadScript` method to remove a preloaded script, identified by its ID. The ID of the preloaded script is required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_26\n\nLANGUAGE: Java\nCODE:\n```\nbidi.script().removePreloadScript(preloadScriptId);\n```\n\n----------------------------------------\n\nTITLE: Iterating Through WebElements Collection - Python\nDESCRIPTION: This Python snippet uses Selenium to find all elements with the tag name 'p' on a webpage and then iterates through the resulting list, printing the text content of each element. It initializes a Firefox WebDriver, navigates to a specified URL, retrieves the elements using `driver.find_elements`, and prints the text content of each element in a loop.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Firefox()\n\n    # Navegar até a URL\ndriver.get(\"https://www.example.com\")\n\n    # Obtém todos os elementos disponiveis com o nome da tag 'p'\nelements = driver.find_elements(By.TAG_NAME, 'p')\n\nfor e in elements:\n    print(e.text)\n```\n\n----------------------------------------\n\nTITLE: Ruby: Selenium Remote Driver Implementation\nDESCRIPTION: This code snippet links to the Ruby implementation of the Selenium Remote Driver, specifically highlighting the line where the CDP version is accessed from the capabilities. This demonstrates how the Ruby bindings are leveraging the CDP version information.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2021/public-project-meeting-20210520.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nhttps://github.com/SeleniumHQ/selenium/blob/411b883645023d1e1a629a3197d3552253b93f2f/rb/lib/selenium/webdriver/remote/driver.rb#L54\n```\n\n----------------------------------------\n\nTITLE: Set Window Position: Selenium WebDriver (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates how to move the browser window to the top-left corner of the primary monitor using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_58\n\nLANGUAGE: kotlin\nCODE:\n```\n// Move the window to the top left of the primary monitor\ndriver.manage().window().position = Point(0,0)\n```\n\n----------------------------------------\n\nTITLE: Creating Transparent Color Object\nDESCRIPTION: This snippet shows how to create a Color object for transparent color in Ruby using the from_string method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\nTRANSPARENT = Color.from_string('transparent')\n```\n\n----------------------------------------\n\nTITLE: Initializing Internet Explorer with Edge Attachment Option\nDESCRIPTION: This code demonstrates how to start Internet Explorer by attaching to Edge if IE is not present on the system, simplifying the configuration. It shows how to set only the `attachToEdgeChrome` option when IE is absent.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\noptions = webdriver.IeOptions()\noptions.attach_to_edge_chrome = True\n```\n\n----------------------------------------\n\nTITLE: Remote Storage Server-Side Implementation\nDESCRIPTION: The server-side of the remote storage mechanism is implemented in Java. This includes unit tests and a web interface for direct browser access. The system supports storing, retrieving, deleting test cases, and browsing the directory where test cases are stored. JSON is used for data representation in the communication protocol, and REST technology is utilized for simplicity by calling URLs with appropriate parameters.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/gsoc-2010-remote-storage.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// Example: Java code for handling remote storage requests (conceptual)\n// This is a placeholder and not actual project code\npublic class RemoteStorageHandler {\n  public String getTestCase(String testCaseId) {\n    // Retrieve test case from storage\n    return \"{}\"; // JSON representation of test case\n  }\n\n  public void saveTestCase(String testCaseId, String testCaseData) {\n    // Save test case to storage\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Printing with Selenium C#\nDESCRIPTION: This C# code snippet demonstrates how to print a page using IPrint and retrieve the base64 encoded PDF.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_23\n\nLANGUAGE: CSharp\nCODE:\n```\nIPrint print = (IPrint)driver;\nPrintOptions printOptions = new PrintOptions();\nstring encodedString = print.Print(printOptions);\n\nAssert.That(string.IsNullOrEmpty(encodedString), Is.False);\nbyte[] decodedBytes = Convert.FromBase64String(encodedString);\nFile.WriteAllBytes(\"test.pdf\", decodedBytes);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Console Logs using CDP - Python\nDESCRIPTION: This Python code snippet demonstrates how to retrieve console logs using Selenium's integration with Chrome DevTools Protocol (CDP). It requires Selenium WebDriver and CDP support in the Selenium version being used. The code is located at examples/python/tests/bidi/cdp/test_logs.py#L11-12\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.pt-br.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# This example is located at examples/python/tests/bidi/cdp/test_logs.py#L11-12\n```\n\n----------------------------------------\n\nTITLE: Finding Elements Before Upgrade - Java\nDESCRIPTION: This Java code demonstrates how to locate single and multiple web elements using various findElementBy* methods before upgrading to Selenium 4.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\ndriver.findElementByClassName(\"className\");\ndriver.findElementByCssSelector(\".className\");\ndriver.findElementById(\"elementId\");\ndriver.findElementByLinkText(\"linkText\");\ndriver.findElementByName(\"elementName\");\ndriver.findElementByPartialLinkText(\"partialText\");\ndriver.findElementByTagName(\"elementTagName\");\ndriver.findElementByXPath(\"xPath\");\n```\n\nLANGUAGE: Java\nCODE:\n```\ndriver.findElementsByClassName(\"className\");\ndriver.findElementsByCssSelector(\".className\");\ndriver.findElementsById(\"elementId\");\ndriver.findElementsByLinkText(\"linkText\");\ndriver.findElementsByName(\"elementName\");\ndriver.findElementsByPartialLinkText(\"partialText\");\ndriver.findElementsByTagName(\"elementTagName\");\ndriver.findElementsByXPath(\"xPath\");\n```\n\n----------------------------------------\n\nTITLE: Running Selenium tests in Java\nDESCRIPTION: This command is used to execute Selenium tests written in Java using Maven.  Maven is a build automation tool primarily used for Java projects. Requires Maven installed and configured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_48\n\nLANGUAGE: java\nCODE:\n```\nmvn test\n```\n\n----------------------------------------\n\nTITLE: Setting Silent Capability in Internet Explorer - Kotlin\nDESCRIPTION: This snippet demonstrates how to set the 'silent' capability to true for Internet Explorer using Kotlin. This capability suppresses diagnostic output from IEDriverServer. The code creates InternetExplorerOptions, sets the capability, and then initializes the WebDriver with these options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.Capabilities\nimport org.openqa.selenium.ie.InternetExplorerDriver\nimport org.openqa.selenium.ie.InternetExplorerOptions\n\nfun main() {\n    val options = InternetExplorerOptions()\n    options.setCapability(\"silent\", true)\n    val driver = InternetExplorerDriver(options)\n    try {\n        driver.get(\"https://google.com/ncr\")\n        val caps = driver.getCapabilities()\n        println(caps)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Color Objects\nDESCRIPTION: This code snippet demonstrates creating Color objects for basic color definitions like 'black', 'chocolate', and 'hotpink' in Python, using the Color.from_string() method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nBLACK = Color.from_string('black')\nCHOCOLATE = Color.from_string('chocolate')\nHOTPINK = Color.from_string('hotpink')\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset Selenium\nDESCRIPTION: This code snippet demonstrates how to perform a drag and drop operation by a specified offset using Selenium WebDriver.  The action starts with a click-and-hold on the source element, then moves the mouse by the given offset, and finally releases the mouse button. It is available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_69\n\nLANGUAGE: Ruby\nCODE:\n```\nsource = driver.find_element(id: 'draggable')\n\ndriver.action.click_and_hold(source).move_by(100, 50).release.perform\n```\n\n----------------------------------------\n\nTITLE: Configuration file example\nDESCRIPTION: This code block represents an example configuration file in TOML format. It contains key-value pairs that define various settings for Selenium Manager, such as browser and driver versions, paths, and other configurations. This TOML file (`se-config.toml`) is used by Selenium Manager to override default settings and customize its behavior.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.ja.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[cache]\n  # Time-to-live (TTL) in seconds for the cache entries.\n  # Default value is 3600 seconds (1 hour).\n  ttl = 86400\n  # Local folder used to store downloaded assets (drivers and browsers).\n  # Default value is $HOME/.cache/selenium.\n  path = \"/Users/example/my_selenium_cache\"\n\n[browser]\n  # Name of the browser to be used for testing.\n  # Valid values are: chrome, firefox, edge, iexplorer, safari, safaritp, webview2.\n  name = \"firefox\"\n  # Version of the browser to be used for testing.\n  # It can be a specific version (e.g., 115), or a release channel (beta, dev, canary).\n  version = \"115\"\n  # Absolute path to the browser executable.\n  path = \"/Applications/Firefox.app/Contents/MacOS/firefox\"\n\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Title with Selenium\nDESCRIPTION: This snippet retrieves the title of the current webpage loaded in the browser using Selenium WebDriver. It shows how to access the 'title' property in different programming languages.  Dependencies: Selenium WebDriver library for the respective language.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.zh-cn.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndriver.getTitle()\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Root in Firefox with Selenium (Java)\nDESCRIPTION: This Java code snippet shows how to set a custom profile root directory for Firefox using Selenium. It instantiates a Firefox profile and sets the `profile_root` preference, then sets this profile into the Firefox options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_29\n\nLANGUAGE: java\nCODE:\n```\nFirefoxProfile profile = new FirefoxProfile();\nprofile.setPreference(\"profile_root\", \"path to profile root directory\");\n```\n\n----------------------------------------\n\nTITLE: Asserting with Selenium in Kotlin\nDESCRIPTION: This code snippet demonstrates how to make assertions within a Selenium test using Kotest in Kotlin. It retrieves the title of a webpage and asserts that it matches the expected title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval title = driver.title\ntitle shouldBe \"SeleniumHQ Browser Automation\"\n```\n\n----------------------------------------\n\nTITLE: Clear New Session Queue\nDESCRIPTION: This snippet clears the new session request queue, rejecting all pending requests. Requires the registration secret.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.zh-cn.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://localhost:4444/se/grid/newsessionqueue/queue' --header 'X-REGISTRATION-SECRET: <secret>'\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to configure the HTTP client used by Selenium WebDriver in Ruby. It showcases setting up the HTTP client, potentially to adjust timeouts or specify proxy settings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/http_client.en.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n{{< gh-codeblock path=\"examples/ruby/spec/drivers/http_client_spec.rb#L7-L8\" >}}\n```\n\n----------------------------------------\n\nTITLE: Verifying Unicorn Configuration in Java\nDESCRIPTION: This snippet verifies that the unicorn was created with the specified attributes by comparing the attributes of the Unicorn object with the fields on the confirmation page. It asserts that the unicorn was created with all attributes intact. Dependencies include the UnicornConfirmationPage and Assert classes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\n// The exists() method from UnicornConfirmationPage will take the Sparkles \n// object--a specification of the attributes you want to see, and compare\n// them with the fields on the page.\nAssert.assertTrue(\"Sparkles should have been created, with all attributes intact\", unicornConfirmationPage.exists(sparkles));\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Title with Selenium\nDESCRIPTION: This snippet retrieves the title of the current webpage loaded in the browser using Selenium WebDriver. It shows how to access the 'title' property in different programming languages.  Dependencies: Selenium WebDriver library for the respective language.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.zh-cn.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver.getTitle();\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions in C#\nDESCRIPTION: This code snippet shows how to release all pressed keys and pointer buttons in C#. It uses the `ReleaseAllActions` method on the WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.pt-br.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.ReleaseAllActions();\n```\n\n----------------------------------------\n\nTITLE: Setting Log Output to File - Ruby\nDESCRIPTION: Demonstrates how to configure the GeckoDriver service to output logs to a specific file in Ruby. This is useful for debugging Selenium tests. Requires the Selenium WebDriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.firefox(log_path: 'geckodriver.log')\n```\n\n----------------------------------------\n\nTITLE: Finding Elements From Element - Kotlin\nDESCRIPTION: This code snippet illustrates how to find child elements within a parent element in Kotlin using Selenium WebDriver. It retrieves a parent 'div' element and finds all child 'p' elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_33\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.By\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://example.com\")\n\n        // Get element with tag name 'div'\n        val element = driver.findElement(By.tagName(\"div\"))\n\n        // Get all the elements available with tag name 'p'\n        val elements = element.findElements(By.tagName(\"p\"))\n        for (e in elements) {\n            println(e.text)\n        }\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Examples HTML\nDESCRIPTION: This snippet demonstrates how to reference code from the Selenium GitHub repository using the `gh-codeblock` shortcode. This approach ensures that the code examples in the documentation are always up to date and executable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.en.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{{</* tabpane text=true */>}}\n{{</* tab header=\"Java\" */>}}\n{{</* gh-codeblock path=\"examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L26-L27\" */>}}\n{{</* /tab */>}}\n{{</* tab header=\"Python\" */>}}\n{{</* gh-codeblock path=\"examples/python/tests/getting_started/first_script.py#L18-L19\" */>}}\n{{</* /tab */>}}\n{{</* tab header=\"CSharp\" */>}}\n{{</* gh-codeblock path=\"examples/dotnet/SeleniumDocs/GettingStarted/FirstScript.cs#L25-L26\" */>}}\n{{</* /tab */>}}\n{{</* tab header=\"Ruby\" */>}}\n{{</* gh-codeblock path=\"examples/ruby/spec/getting_started/first_script.rb#L17-L18\" */>}}\n{{</* /tab */>}}\n{{</* tab header=\"JavaScript\" */>}}\n{{</* gh-codeblock path=\"examples/javascript/test/getting_started/firstScript.spec.js#L22-L23\" */>}}\n{{</* /tab */>}}\n{{</* tab header=\"Kotlin\" */>}}\n{{</* gh-codeblock path=\"examples/kotlin/src/test/kotlin/dev/selenium/getting_started/FirstScriptTest.kt#L31-L32\" */>}}\n{{</* /tab */>}}\n{{</* /tabpane */>}}\n```\n\n----------------------------------------\n\nTITLE: Get Element Location and Size - Kotlin\nDESCRIPTION: This snippet demonstrates how to get the location and size of a web element using Selenium WebDriver in Kotlin. It navigates to a URL, finds an element by name, and uses the rect property to access a Rectangle object containing x, y, width, and height. It then prints the x coordinate.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\n// Navigate to url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n// Returns height, width, x and y coordinates referenced element\nval res = driver.findElement(By.name(\"range_input\")).rect\n\n// Rectangle class provides getX,getY, getWidth, getHeight methods\nprintln(res.getX())\n```\n\n----------------------------------------\n\nTITLE: Spawning SessionMap with JDBC Extension\nDESCRIPTION: This Bash script spawns a SessionMap process with the JDBC extension for PostgreSQL. It uses coursier to fetch the necessary dependencies, including the selenium-session-map-jdbc and postgresql drivers.  The SessionMap is configured using the sessions.toml file, and communicates with the event bus for distributed operation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.en.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nexport SE_VERSION=<current_selenium_version>\njava -jar selenium-server-${SE_VERSION}.jar \\\n--ext $(coursier fetch -p org.seleniumhq.selenium:selenium-session-map-jdbc:${SE_VERSION} org.postgresql:postgresql:42.3.1) \\\nsessions --publish-events tcp://localhost:4442 \\\n--subscribe-events tcp://localhost:4443 \\\n--port 5556 --config sessions.toml \n```\n\n----------------------------------------\n\nTITLE: Disable Chrome Build Check - Ruby\nDESCRIPTION: This snippet demonstrates how to disable the Chrome build check in Ruby using ChromeOptions. Disabling the build check enables the driver to work with any Chrome version.  However, this is an unsupported feature.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_44\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Chrome::Options.new(args: ['--disable-build-check'])\n```\n\n----------------------------------------\n\nTITLE: Defining ProjectPage LoadableComponent in Selenium (Java)\nDESCRIPTION: This code snippet defines a `ProjectPage` class extending `LoadableComponent`.  It initializes the WebDriver and project name, and implements the `load()` and `isLoaded()` methods.  The `load()` method navigates to the project's homepage, and the `isLoaded()` method verifies if the current URL contains the project name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.ja.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.webdriver;\n\nimport org.openqa.selenium.WebDriver;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class ProjectPage extends LoadableComponent<ProjectPage> {\n\n  private final WebDriver driver;\n  private final String projectName;\n\n  public ProjectPage(WebDriver driver, String projectName) {\n    this.driver = driver;\n    this.projectName = projectName;\n  }\n\n  @Override\n  protected void load() {\n    driver.get(\"http://\" + projectName + \".googlecode.com/\");\n  }\n\n  @Override\n  protected void isLoaded() throws Error {\n    String url = driver.getCurrentUrl();\n\n    assertTrue(url.contains(projectName));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decorating WebDriver with EventFiringDecorator (Java)\nDESCRIPTION: This snippet demonstrates how to decorate a WebDriver instance using the EventFiringDecorator, which replaces the old EventFiringWebDriver approach. The new approach involves creating an instance of EventFiringDecorator and calling its decorate method, passing the original WebDriver instance as an argument.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/java-removal-of-deprecated-events-classes.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nnew EventFiringWebDriver(driver); // Old approach\nnew EventFiringDecorator().decorate(driver); // New approach\n```\n\n----------------------------------------\n\nTITLE: Call Function in Realm - Java\nDESCRIPTION: This snippet illustrates how to call a function within a realm using Java and the WebDriver BiDi API. It employs the `Script.callFunction` method to execute a JavaScript function within a given realm and retrieve the result. The realm ID is necessary.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nBiDi bidi = ((HasBiDi) driver).getBiDi();\n\n        BrowsingContext browsingContext = new BrowsingContext(contextId);\n        Script.CallFunctionOptions options = new Script.CallFunctionOptions();\n        options.setRealm(realmId);\n        options.setThisOwning(true);\n\n        Script.EvaluateResult result = bidi.script().callFunction(\n            browsingContext, \"() => { return window.document.title }\", options);\n        assertEquals(\"\", result.getResult().getValue());\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Driver Log File Output\nDESCRIPTION: This code snippet shows how to configure the ChromeDriver service to write its logs to a specific file. This is useful for debugging and troubleshooting issues with the ChromeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nservice = Service(log_path=\"chrome.log\")\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Port in Ruby\nDESCRIPTION: Explains how to set the driver port in Ruby when initializing the Service.  This allows overriding the default port.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.en.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.chrome(port: 1234)\n```\n\n----------------------------------------\n\nTITLE: Evaluate script in sandbox (Java)\nDESCRIPTION: This Java snippet demonstrates how to evaluate a script inside a sandbox using Selenium BiDi. It creates a sandbox within a browsing context and evaluates the expression '1 + 1' inside that sandbox, asserting that the result is 2.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void evaluateScriptInSandbox() {\n        try (Bidi bidi = new Bidi(driver)) {\n            BrowsingContext browsingContext = new BrowsingContext(bidi, driver);\n            browsingContext.navigate(getUrl(\"formPage.html\"));\n\n            Sandbox sandbox = bidi.script().createSandbox(browsingContext.getId());\n            EvaluateResult result = bidi.script().evaluate(\n                EvaluateParameters.builder().setExpression(\"1 + 1\").setTarget(sandbox.getSandbox()).build(),\n                EvaluateResult.class);\n\n            assertEquals(2L, result.getResult().getValue());\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Deleting Downloaded Files in CSharp\nDESCRIPTION: Deletes downloaded files for a RemoteWebDriver session in C#, cleaning up the download directory. Requires the RemoteWebDriver instance to have download functionality.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_22\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.DeleteDownloadedFiles();\n```\n\n----------------------------------------\n\nTITLE: Setting Log Output to File\nDESCRIPTION: This code snippet shows how to configure the FirefoxDriver service to output logs to a specific file.  This is useful for debugging and troubleshooting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.firefox(log_path: 'geckodriver.log')\ndriver = Selenium::WebDriver.for :firefox, service: service\n```\n\n----------------------------------------\n\nTITLE: Adding Virtual Authenticator in Python\nDESCRIPTION: This snippet showcases adding a virtual authenticator in Python using Selenium, defining authenticator options beforehand.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\noptions = VirtualAuthenticatorOptions(\n    protocol=Protocol.CTAP2,\n    domain=\"localhost\",\n    user_verified=True\n)\noptions.add_transport(Transport.USB)\nauthenticator = driver.add_virtual_authenticator(options)\n```\n\n----------------------------------------\n\nTITLE: Starting a Custom Node with Uber Jar\nDESCRIPTION: This command starts a Selenium Grid Node using a custom implementation packaged as an uber JAR. It specifies the fully qualified class name of the custom Node implementation using the `--node-implementation` argument.  The `custom_node-server.jar` should contain all dependencies required by the custom node.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/customize_node.ja.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -jar custom_node-server.jar node \\\n--node-implementation org.seleniumhq.samples.DecoratedLoggingNode\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element with Offset - Selenium Wheel JavaScript\nDESCRIPTION: This snippet demonstrates how to scroll from a specific element with an offset using Selenium's Wheel actions in JavaScript. The origin of the scroll will be determined by adding the offset to the coordinates of the center of the element, and then page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('target'));\nawait driver.actions().scroll(element, 10, 10, 0, 0).perform();\n```\n\n----------------------------------------\n\nTITLE: Initialize Selenium WebDriver in CSharp\nDESCRIPTION: This C# code snippet demonstrates how to initialize a Selenium WebDriver instance using ChromeDriver. It navigates to the SeleniumHQ website and prints the title of the page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.pt-br.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\npublic class HelloSelenium\n{\n    public static void Main(string[] args)\n    {\n        using IWebDriver driver = new ChromeDriver();\n        driver.Navigate().GoToUrl(\"https://www.selenium.dev/\");\n        Console.WriteLine(driver.Title);\n        driver.Quit();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Name with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a web element on a page using its NAME attribute with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.name()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.name('newsletter'));\n```\n\n----------------------------------------\n\nTITLE: Listen for Realm Created events (Java)\nDESCRIPTION: This Java code showcases how to listen for 'realmCreated' events using Selenium BiDi.  It subscribes to the 'script.realmCreated' event and asserts that a realm is created.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void testRealmCreatedEvent() throws InterruptedException {\n        try (Bidi bidi = new Bidi(driver)) {\n            CountDownLatch latch = new CountDownLatch(1);\n\n            bidi.script().addEventHandler(RealmCreatedEvent.class, o -> latch.countDown());\n\n            bidi.script().subscribe(List.of(\"script.realmCreated\"), null, SubscribeParameters.class);\n\n            BrowsingContext browsingContext = new BrowsingContext(bidi, driver);\n            browsingContext.navigate(getUrl(\"formPage.html\"));\n\n            assertTrue(latch.await(5, TimeUnit.SECONDS));\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Performing Actions with Selenium BiDi\nDESCRIPTION: This JavaScript snippet shows how to perform actions using the Selenium BiDi API. It demonstrates creating pointer actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/input.en.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n    await bidi.input.perform({\n      actions: [pointerDown('mouse'), pointerUp('mouse')],\n    });\n```\n\n----------------------------------------\n\nTITLE: Traverse History in JavaScript\nDESCRIPTION: This code snippet demonstrates how to traverse the browsing history using Selenium WebDriver's BiDi API in JavaScript. It uses the `browsingContext.traverse` method. Requires Selenium version 4.17 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('traverse history', async () => {\n  const browsingContext = await getBrowsingContext(driver);\n  await browsingContext.traverse(-1);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Exception Handler in Python\nDESCRIPTION: This snippet demonstrates how to add a handler for JavaScript exceptions using WebDriver BiDi in Python. It uses the `add_event_listener` method to listen for JavaScript exception events.  It requires a WebDriver BiDi enabled Selenium driver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.pt-br.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndriver.add_event_listener(\n    Script.JavascriptException, lambda msg: print(f\"Javascript exception: {msg.exception.text}\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Console Message Handler in WebDriver BiDi with Python\nDESCRIPTION: This code snippet demonstrates how to add a handler for console messages using WebDriver BiDi in Python. It sets up a listener to capture and process console log events from the browser. The code requires a WebDriver BiDi enabled browser session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.en.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nbrowsing_context = driver.create_browsing_context()\nlog.add_console_listener(browsing_context, print)\n```\n\n----------------------------------------\n\nTITLE: Adding Console Message Handler in Ruby\nDESCRIPTION: This snippet demonstrates how to add a handler for console messages using WebDriver BiDi in Ruby. It utilizes the `add_event_listener` method to listen for console log events. Requires a WebDriver BiDi enabled Selenium driver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.pt-br.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.add_event_listener('log.entry_added') do |params, context|\n  pp params\nend\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value in JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve the value of a CSS property of a web element using Selenium WebDriver in JavaScript. It uses the `getCssValue()` method. The method takes the name of the CSS property as a parameter and returns its value as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('css value', async () => {\n  expect(await driver.findElement(By.id('namedColor')).getCssValue('background-color')).toBe('rgba(0, 0, 255, 1)');\n});\n```\n\n----------------------------------------\n\nTITLE: Find Element within Element in C#\nDESCRIPTION: This snippet demonstrates how to find a web element within another web element using Selenium WebDriver in C#. First, it finds an element with the ID 'fruits', and then it finds a child element within that element with the class name 'tomatoes'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement fruits = driver.FindElement(By.Id(\"fruits\"));\nIWebElement fruit = fruits.FindElement(By.ClassName(\"tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a Temporary Credential in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a temporary credential using the virtual authenticator in JavaScript. The rpId and userId are set to empty strings, which creates a temporary (non-resident) credential.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nawait devtools.security.addCredential({\n  rpId: '',\n  userId: '',\n  type: 'publicKey'\n});\n```\n\n----------------------------------------\n\nTITLE: Set User Verified in Python\nDESCRIPTION: This Python code sets whether the authenticator will simulate success or fail on user verification.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ndev_tools.webauthn.set_user_verified(True)\n\n```\n\n----------------------------------------\n\nTITLE: Relative Locators: Locating Element Above\nDESCRIPTION: This code demonstrates how to locate an element above another element using Relative Locators in Selenium 4. It uses the `RelativeLocator.with(By.tagName(\"input\")).above(By.id(\"password\"))` to find an input element that is located above the element with the ID \"password\". This is helpful when direct locators are difficult to create.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\nemail_locator = locate_with(By.TAG_NAME, \"input\").above({By.ID: \"password\"})\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element w/ Offset (JavaScript)\nDESCRIPTION: This JavaScript code shows how to scroll from an element with a specified offset and amount using Selenium's Actions API. Requires Selenium WebDriver and appropriate setup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet element = await driver.findElement(By.id('id-of-element'));\nawait driver.actions().scroll({origin: element, x: 100, y: 200,  duration: 0,  deltaX: 25, deltaY: 25}).perform();\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Hub (Java)\nDESCRIPTION: This snippet shows how to start Selenium hub using Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar hub\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Driver with Options - Ruby\nDESCRIPTION: This Ruby snippet shows how to initialize a Selenium WebDriver instance with Chrome options. The options object configures the ChromeDriver before the session starts.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.zh-cn.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n@driver = Selenium::WebDriver.for :chrome, options: @options\n```\n\n----------------------------------------\n\nTITLE: Creating and Logging in a User (CSharp)\nDESCRIPTION: This CSharp code snippet demonstrates creating a user with read-only permissions using a UserFactory and logging in as that user. It retrieves the user's email and password, logs in, and returns the AccountPage object for further actions. The UserFactory.CreateCommonUser() method is assumed to be defined elsewhere.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\n// Create a user who has read-only permissions--they can configure a unicorn,\n// but they do not have payment information set up, nor do they have\n// administrative privileges. At the time the user is created, its email\n// address and password are randomly generated--you don't even need to\n// know them.\nUser user = UserFactory.CreateCommonUser(); //This method is defined elsewhere.\n\n// Log in as this user.\n// Logging in on this site takes you to your personal \"My Account\" page, so the\n// AccountPage object is returned by the loginAs method, allowing you to then\n// perform actions from the AccountPage.\nAccountPage accountPage = LoginAs(user.Email, user.Password);\n```\n\n----------------------------------------\n\nTITLE: Enabling Managed Downloads in Python\nDESCRIPTION: Enables managed downloads for a RemoteWebDriver instance in Python, allowing Selenium to handle the location of downloaded files. Requires setting the 'se:downloadsEnabled' capability to True using options.set_capability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\noptions = webdriver.ChromeOptions()\noptions.set_capability(\"se:downloadsEnabled\", True)\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element w/ Offset (Python)\nDESCRIPTION: This Python snippet scrolls from an element with an offset (x_coord, y_coord) by a specific amount (x_delta, y_delta). Requires Selenium WebDriver and ActionChains.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"id-of-element\")\naction = ActionChains(driver)\naction.scroll_from_origin({\n    'origin': element,\n    'x': 25,\n    'y': 25\n}, 100, 200).perform()\n```\n\n----------------------------------------\n\nTITLE: Move By Offset from Element\nDESCRIPTION: Moves the mouse to the center point of the element, and then moves by the specified offset. It requires a WebDriver instance and a target WebElement that must be in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('clickable'));\nawait actions.move({origin: element, x:10, y:20}).perform();\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs in Ruby\nDESCRIPTION: These Ruby code snippets demonstrate how to allow or ignore log messages based on their IDs, including deprecation notices, using the `allow` and `ignore` methods on the Selenium logger. These methods accept symbols or arrays of symbols.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nSelenium::WebDriver.logger.ignore :browser_options\n```\n\nLANGUAGE: ruby\nCODE:\n```\nSelenium::WebDriver.logger.allow %i[capabilities browser_options]\n```\n\n----------------------------------------\n\nTITLE: Node Configuration with Specific Browsers and Max Sessions\nDESCRIPTION: Configures a Selenium Node to only allow sessions for Chrome and Firefox, limiting the maximum number of concurrent sessions to 3. It uses the `node` section to specify allowed drivers and the maximum session count.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.en.md#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\ndrivers = [\"chrome\", \"firefox\"]\nmax-sessions = 3\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtualAuthenticatorOptions in Python\nDESCRIPTION: This code snippet demonstrates initializing VirtualAuthenticatorOptions in Python. It sets protocol, domain, resident key requirement, and user verification requirement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\noptions = VirtualAuthenticatorOptions(\n    protocol=Protocol.CTAP2,\n    domain=\"localhost\",\n    resident_key_required=True,\n    user_verification_required=True\n)\n\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Files - JavaScript Example\nDESCRIPTION: Shows the command to execute Selenium tests in JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.zh-cn.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm test test/getting_started/firstScript.spec.js\n```\n\n----------------------------------------\n\nTITLE: Verifying Unicorn Existence - JavaScript\nDESCRIPTION: This JavaScript code snippet verifies that a unicorn object named 'Sparkles' exists on the unicorn confirmation page, ensuring all attributes are intact. It depends on a 'unicornConfirmationPage' object and an assertion library. The 'exists' method on the page object is used to compare the attributes of the 'sparkles' object with the fields on the page. Asserts the existence of the unicorn.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nassert(unicornConfirmationPage.exists(sparkles), \"Sparkles should have been created, with all attributes intact\");\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element by Offset - Selenium\nDESCRIPTION: Drags an element by a specified offset. The action presses the left mouse button on the source element, moves the element by the specified x and y offsets, and then releases the mouse button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nWebElement source = driver.findElement(By.id(\"draggable\"));\nactions.clickAndHold(source)\n    .moveByOffset(150, 50)\n    .release()\n    .perform();\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Enabled in Java\nDESCRIPTION: This code snippet demonstrates how to check if a web element is enabled on a webpage using Selenium WebDriver in Java. It uses the `isEnabled()` method of the WebElement interface. The method returns `true` if the element is enabled, and `false` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"button_input\"));\nboolean isEnabled = element.isEnabled();\nassertThat(isEnabled).isTrue();\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options in Ruby\nDESCRIPTION: Demonstrates how to retrieve selected options from a Select element in Ruby. It uses the selected_options method to return a list of WebElements representing the selected options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nselected_options = select.selected_options\n```\n\n----------------------------------------\n\nTITLE: Retrieving Console Logs using CDP - Java\nDESCRIPTION: This Java code snippet demonstrates how to retrieve console logs using Selenium's integration with Chrome DevTools Protocol (CDP). It requires Selenium WebDriver and CDP support in the Selenium version being used. The code is located at examples/java/src/test/java/dev/selenium/bidi/cdp/LoggingTest.java#L31\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.pt-br.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// This example is located at examples/java/src/test/java/dev/selenium/bidi/cdp/LoggingTest.java#L31\n```\n\n----------------------------------------\n\nTITLE: Back Button Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to simulate a click on the back button of a mouse (button X1) using Selenium. It involves pressing and releasing mouse button 3 on the target element. Requires Selenium WebDriver and version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'my-element')\n@driver.action.move_to(element).click(button: :back).perform\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Displayed in Kotlin\nDESCRIPTION: This code snippet demonstrates how to check if a web element is displayed on a webpage using Selenium WebDriver in Kotlin. It uses the `isDisplayed()` method of the WebElement interface. The method returns `true` if the element is displayed, and `false` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\n//navigates to url\n driver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n //returns true if element is displayed else returns false\n val flag = driver.findElement(By.name(\"email_input\")).isDisplayed()\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies in Java\nDESCRIPTION: This code snippet demonstrates how to delete all cookies from the current browser context using Selenium WebDriver in Java. It navigates to a website, adds two cookies, and then deletes all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\ndriver.get(\"https://www.example.com\");\nCookie cookie1 = new Cookie(\"test1\", \"cookie1\");\ndriver.manage().addCookie(cookie1);\nCookie cookie2 = new Cookie(\"test2\", \"cookie2\");\ndriver.manage().addCookie(cookie2);\n\n// deletes all cookies\ndriver.manage().deleteAllCookies();\n```\n\n----------------------------------------\n\nTITLE: Fetching and Rebasing with Git\nDESCRIPTION: These commands fetch the latest changes from the remote repository and rebase your current branch, ensuring your work is up-to-date.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.en.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n% git fetch origin\n% git rebase origin/trunk\n```\n\n----------------------------------------\n\nTITLE: Waiting for Downloads using CDP in Java\nDESCRIPTION: This Java code snippet demonstrates how to wait for downloads using the Chrome DevTools Protocol (CDP) in Selenium. It enables the Page domain and sets a download behavior to specify the download directory. Then it listens for the `Page.downloadWillBegin` and `Page.downloadProgress` events to monitor the download progress.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nString directory = System.getProperty(\"java.io.tmpdir\");\ncdp.send(Page.enable(Optional.empty()));\ncdp.send(Page.setDownloadBehavior(DownloadBehavior.ALLOW, Optional.of(directory), Optional.empty()));\ncdp.addListener(Page.downloadWillBegin(), download -> {\n    System.out.println(\"Download started: \" + download.getUrl());\n});\n```\n\n----------------------------------------\n\nTITLE: Gathering Performance Metrics using CDP in C#\nDESCRIPTION: This C# code snippet demonstrates how to gather performance metrics using the Chrome DevTools Protocol (CDP) in Selenium. It enables the Performance domain and retrieves metrics such as CPU usage, memory usage, and frame rate.  This allows you to monitor and analyze the performance of your web applications.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.ExecuteCdpCommand(\"Performance.enable\", new Dictionary<string, object>());\nvar metricList = driver.ExecuteCdpCommand(\"Performance.getMetrics\", new Dictionary<string, object>());\n```\n\n----------------------------------------\n\nTITLE: Clear Element with Selenium WebDriver in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to locate an element and clear its contents using Selenium WebDriver. The element is located by its name, and the `clear` method is called. The snippet assumes a `driver` instance is already initialized.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.find_element(name: 'email_input').clear\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Hub Component Help\nDESCRIPTION: This command displays configuration help specific to the Hub component of the Selenium Grid. Replace `<version>` with the actual Selenium server version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.pt-br.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar hub --help\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: New Session Queue Requests\nDESCRIPTION: This curl command retrieves the current requests in the New Session Queue of the Selenium Grid.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.pt-br.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ sessionsInfo { sessionQueueRequests } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: LoginPage Methods in Java\nDESCRIPTION: This Java code snippet demonstrates a LoginPage class with methods for successful and unsuccessful logins, along with a method to retrieve error messages.  It emphasizes that tests, not PageObjects, should make assertions about page state.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.ja.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class LoginPage {\n    public HomePage loginAs(String username, String password) {\n        // ... clever magic happens here\n    }\n    \n    public LoginPage loginAsExpectingError(String username, String password) {\n        //  ... failed login here, maybe because one or both of the username and password are wrong\n    }\n    \n    public String getErrorMessage() {\n        // So we can verify that the correct error is shown\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Lax Cookie in Python with Selenium\nDESCRIPTION: This Python code snippet illustrates how to create and add a cookie with the SameSite attribute set to Lax using Selenium. The code creates a dictionary representing the cookie and adds it to the browser's cookie manager.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/blank.html\")\n\ncookie = {\"name\": \"foo\", \"value\": \"bar\", \"sameSite\": \"Lax\", \"path\": \"/\"}\ndriver.add_cookie(cookie)\n\nretrieved_cookie = driver.get_cookie(\"foo\")\nassert retrieved_cookie['value'] == \"bar\"\nassert retrieved_cookie['sameSite'] == 'Lax'\n```\n\n----------------------------------------\n\nTITLE: Sending CDP Command - Ruby\nDESCRIPTION: This Ruby code snippet provides an example of sending a Chrome DevTools Protocol (CDP) command using Selenium. It utilizes the `execute_cdp` method to interact directly with the browser's debugging protocol. This code requires a running instance of Selenium WebDriver configured for Chrome.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/_index.pt-br.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndevtools.execute_cdp 'Network.enable', {}\ndevtools.execute_cdp 'Network.setUserAgentOverride',\n                       userAgent: 'Ruby'\n\nputs devtools.execute_cdp 'Network.disable', {}\n```\n\n----------------------------------------\n\nTITLE: Creating Transparent Color Object\nDESCRIPTION: This snippet demonstrates how to create a Color object for the 'transparent' color value in Kotlin, using the Color.fromString() method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nprivate val TRANSPARENT = Color.fromString(\"transparent\")\n```\n\n----------------------------------------\n\nTITLE: Release Key Action in Selenium\nDESCRIPTION: Demonstrates how to simulate releasing a pressed key using Selenium's Actions API. This involves creating an Actions object, using the keyUp method to release a key, and then performing the action.  It shows how to press and hold Shift key while typing some text, and then release the Shift key.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval actions = Actions(driver)\nactions.keyDown(Keys.SHIFT)\n    .sendKeys(\"text\")\n    .keyUp(Keys.SHIFT)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects with fromString\nDESCRIPTION: This snippet demonstrates how to create Color objects from different string representations of colors (HEX, RGB, RGBA, HSL, HSLA) using the fromString method in Kotlin. The Color class supports various color formats for creating color objects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nprivate val HEX_COLOUR = Color.fromString(\"#2F7ED8\")\nprivate val RGB_COLOUR = Color.fromString(\"rgb(255, 255, 255)\")\nprivate val RGB_COLOUR_PERCENT = Color.fromString(\"rgb(40%, 20%, 40%)\")\nprivate val RGBA_COLOUR = Color.fromString(\"rgba(255, 255, 255, 0.5)\")\nprivate val RGBA_COLOUR_PERCENT = Color.fromString(\"rgba(40%, 20%, 40%, 0.5)\")\nprivate val HSL_COLOUR = Color.fromString(\"hsl(100, 0%, 50%)\")\nprivate val HSLA_COLOUR = Color.fromString(\"hsla(100, 0%, 50%, 0.5)\")\n```\n\n----------------------------------------\n\nTITLE: JavaScript Setup Example (Mocha)\nDESCRIPTION: This snippet sets up the Selenium WebDriver instance before each test in JavaScript using Mocha. The `beforeEach` hook initializes the Chrome driver and assigns it to the `driver` variable, available in each `it` block.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst {Builder} = require('selenium-webdriver');\nconst chrome = require('selenium-webdriver/chrome');\n\nlet driver;\n\nbeforeEach(async function() {\n  driver = await new Builder().forBrowser('chrome').setChromeOptions(new chrome.Options()).build();\n});\n```\n\n----------------------------------------\n\nTITLE: Locating Element by ID with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a web element on a page using its ID attribute with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.id()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.id('lname'));\n```\n\n----------------------------------------\n\nTITLE: Installing Add-ons in Firefox with Selenium (JavaScript)\nDESCRIPTION: This JavaScript snippet installs a signed Firefox add-on from a given file path.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.installAddon('/path/to/extension.xpi');\n```\n\n----------------------------------------\n\nTITLE: Redirecting Logger Output in Python\nDESCRIPTION: This code snippet shows how to redirect Selenium logger output in Python to a file using a `FileHandler`. It also shows how to redirect the output to a stream. The standard `logging` module is used.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nhandler = logging.FileHandler('selenium.log')\nlogging.getLogger().addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Scroll By Amount using Selenium Wheel Java\nDESCRIPTION: This snippet demonstrates how to scroll by a specific amount (deltaX and deltaY) using Selenium's Wheel actions in Java. Positive deltaX values scroll to the right, and positive deltaY values scroll down. Negative values scroll left and up respectively.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nnew Actions(driver)\n  .scroll(0, 100, 0, 0)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Scrolling Element into View with Actions Class - Selenium\nDESCRIPTION: This snippet utilizes the Actions class with `Actions.moveToElement(element)` to scroll an element into view. This can be used when elements are obscured by overlapping elements, such as navbars.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/_index.zh-cn.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nActions.moveToElement(element)\n```\n\n----------------------------------------\n\nTITLE: Install Python Dependencies\nDESCRIPTION: This command installs the required Python packages for the Selenium examples using pip. It reads the 'requirements.txt' file, which lists the necessary packages and their versions.  The user may need to replace `pip` with `pip3` depending on their python version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/python/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Supporting Files Path - Java\nDESCRIPTION: This Java snippet illustrates setting the path to the supporting files for the Internet Explorer Driver. It involves using `InternetExplorerOptions` and the `withExtractPath` method to specify the directory.  It is also possible to set this via a system property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_34\n\nLANGUAGE: Java\nCODE:\n```\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.withExtractPath(\"/path/to/the/extracted/folder\");\nInternetExplorerDriver driver = new InternetExplorerDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Starting Multiple Selenium Nodes on the Same Machine (Shell)\nDESCRIPTION: These commands start multiple Selenium Nodes on the same machine, each listening on a different port. This allows running tests in parallel on the same machine using different browser configurations. Node 1 listens on port 5555 and Node 2 listens on port 6666.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.pt-br.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --port 5555\n```\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --port 6666\n```\n\n----------------------------------------\n\nTITLE: Quitting a WebDriver Session - Python\nDESCRIPTION: This Python snippet demonstrates how to end a WebDriver session correctly using the `quit()` method, ensuring all browser instances are closed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.zh-cn.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Initializing Driver with Default Service - Python\nDESCRIPTION: This snippet shows how to start a driver with a default service instance using Python.  It initializes a new ChromeDriver instance. Requires the Selenium library to be installed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Chrome()\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects from Strings in Java\nDESCRIPTION: This snippet demonstrates how to create Color objects in Java from various string representations, including HEX, RGB, RGBA, HSL, and HSLA color formats. These color objects can then be used for comparison and conversion in Selenium tests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nprivate final Color HEX_COLOUR = Color.fromString(\"#2F7ED8\");\nprivate final Color RGB_COLOUR = Color.fromString(\"rgb(255, 255, 255)\");\nprivate final Color RGB_COLOUR = Color.fromString(\"rgb(40%, 20%, 40%)\");\nprivate final Color RGBA_COLOUR = Color.fromString(\"rgba(255, 255, 255, 0.5)\");\nprivate final Color RGBA_COLOUR = Color.fromString(\"rgba(40%, 20%, 40%, 0.5)\");\nprivate final Color HSL_COLOUR = Color.fromString(\"hsl(100, 0%, 50%)\");\nprivate final Color HSLA_COLOUR = Color.fromString(\"hsla(100, 0%, 50%, 0.5)\");\n```\n\n----------------------------------------\n\nTITLE: Sending Logs to Console - JavaScript\nDESCRIPTION: This snippet provides the JavaScript code to send Selenium logs to the console. It uses the `logging.installConsoleHandler()` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nlogging.installConsoleHandler()\n```\n\n----------------------------------------\n\nTITLE: Move To Element with Selenium\nDESCRIPTION: Moves the mouse to the center of the element, simulating a hover. Requires a WebDriver instance and that the element is in the viewport.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_36\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"clickable\"));\nActions actions = new Actions(driver);\nactions.moveToElement(element).perform();\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox Driver with Options - Java\nDESCRIPTION: Demonstrates how to initialize a Firefox WebDriver instance with basic options using Java.  It requires the Selenium WebDriver dependency. The FirefoxOptions class is used to set browser-specific configurations.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxOptions options = new FirefoxOptions();\nWebDriver driver = new FirefoxDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Printing Page in Selenium Python\nDESCRIPTION: This Python code snippet demonstrates how to print a page using print_page() function and retrieve the base64 encoded PDF.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\npage = driver.print_page()\nassert type(page) == str\nassert len(page) > 0\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies with Selenium WebDriver (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to delete all cookies in the current browser context using Selenium WebDriver in Kotlin. It requires the Selenium WebDriver dependency. The code navigates to a specific URL, adds two cookies, and then deletes all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://www.example.com\")\n        driver.manage().addCookie(Cookie(\"test1\", \"cookie1\"))\n        driver.manage().addCookie(Cookie(\"test2\", \"cookie2\"))\n\n        // deletes all cookies\n        driver.manage().deleteAllCookies()\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Orientation - C#\nDESCRIPTION: This C# snippet demonstrates setting the page orientation to landscape using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.Orientation = PrintOrientation.Landscape;\n\nAssert.That(printOptions.Orientation, Is.EqualTo(PrintOrientation.Landscape));\nAssert.That(printOptions.Orientation.ToString(), Is.EqualTo(\"Landscape\"));\n```\n\n----------------------------------------\n\nTITLE: Find Element by CSS Selector in Java\nDESCRIPTION: This snippet uses a CSS selector to find a specific web element in Java with Selenium WebDriver. It finds the element with class 'tomatoes' that is a descendant of the element with id 'fruits'. This is done using a single command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nWebElement fruit = driver.findElement(By.cssSelector(\"#fruits .tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium Node with Max Sessions, Log Level, Port and Driver Implementations\nDESCRIPTION: This command configures a Selenium Node with a maximum of 4 sessions, sets the log level to \"fine\" for detailed debugging, specifies port 7777 for communication, and limits driver implementations to only Firefox and Edge. This allows for precise control over the Node's capabilities and logging behavior.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.pt-br.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar node --max-sessions 4 --log-level \"fine\" --port 7777 --driver-implementation \"firefox\" --driver-implementation \"edge\"\n```\n\n----------------------------------------\n\nTITLE: Setting Capabilities Before Upgrade - Java\nDESCRIPTION: This Java code demonstrates how to set DesiredCapabilities before upgrading to Selenium 4, including setting platform, version, build, and name. These capabilities are then used to initialize a RemoteWebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nDesiredCapabilities caps = DesiredCapabilities.firefox();\ncaps.setCapability(\"platform\", \"Windows 10\");\ncaps.setCapability(\"version\", \"92\");\ncaps.setCapability(\"build\", myTestBuild);\ncaps.setCapability(\"name\", myTestName);\nWebDriver driver = new RemoteWebDriver(new URL(cloudUrl), caps);\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Title with Selenium\nDESCRIPTION: This snippet retrieves the title of the current webpage loaded in the browser using Selenium WebDriver. It shows how to access the 'title' property in different programming languages.  Dependencies: Selenium WebDriver library for the respective language.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.zh-cn.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndriver.title\n```\n\n----------------------------------------\n\nTITLE: Removing All Credentials in JavaScript\nDESCRIPTION: Removes all credentials from the authenticator using JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.removeVirtualAuthenticatorCredentials(authenticator);\n```\n\n----------------------------------------\n\nTITLE: Checking driver version in Windows\nDESCRIPTION: This snippet demonstrates how to check the version of a ChromeDriver executable in a Windows Command Prompt. By running the `chromedriver.exe --version` command, the driver's version information is printed to the console, confirming that the driver is correctly installed and accessible via the PATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.en.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nchromedriver.exe --version\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Class Name in Selenium (By Class)\nDESCRIPTION: This code snippet demonstrates how to locate a web element using its class name with the `By` class in Selenium.  It initializes a WebDriver and uses `By.ClassName()` to locate an element with the class 'information'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_34\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.ClassName(\"information\"));\n```\n\n----------------------------------------\n\nTITLE: Initializing a Selenium Session\nDESCRIPTION: This snippet demonstrates how to initialize a Selenium WebDriver session in various programming languages. It shows the instantiation of the WebDriver object, which is the entry point for interacting with the browser. This is a fundamental step in any Selenium automation script.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebDriver driver = new ChromeDriver();\n```\n\n----------------------------------------\n\nTITLE: Removing Console Message Handler with WebDriver BiDi in Python\nDESCRIPTION: This code snippet demonstrates how to remove a previously added console message handler using WebDriver BiDi in Python. It uses the `remove_event_listener` method with the handler ID obtained when adding the handler.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.ja.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nbidi.script.remove_event_listener(\n    event='script.message',\n    listener=add_listener['result']['handle'])\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Title in JavaScript\nDESCRIPTION: Retrieves the title of the current web page using Selenium WebDriver in JavaScript. Requires the WebDriver to be initialized and navigated to a page. The title is extracted and compared against expected value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.en.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.selenium.dev/selenium/web/web-form.html');\nconst title = await driver.getTitle();\nassert.strictEqual(title, 'Web form');\n```\n\n----------------------------------------\n\nTITLE: Get browsing context realms by type (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates retrieving realms of a specific type associated with a given browsing context using Selenium BiDi and `script.getRealms`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n    let contextRealms = await session.execute({\n      method: 'script.getRealms',\n      params: { browsingContext: browsingContext.context, type: 'window' },\n    });\n```\n\n----------------------------------------\n\nTITLE: GraphQL: Querying Status of Each Node (curl)\nDESCRIPTION: This curl command queries the status of each node in the Selenium Grid using the GraphQL API. It requires `curl` to send the POST request. The response will contain the status (e.g., UP, DOWN) of each node.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.ja.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\": \"{ nodesInfo { nodes { status } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Rust Directory\nDESCRIPTION: This command changes the current directory to the `rust` directory within the cloned Selenium repository. This directory contains the source code for the Selenium Manager, which is written in Rust.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.pt-br.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd selenium/rust\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies using CDP in Ruby\nDESCRIPTION: This Ruby code demonstrates how to set cookies using the Chrome DevTools Protocol (CDP) in Selenium. It constructs a cookie object with specified name, value, domain, and path, and then uses the `Network.setCookie` method to set the cookie in the browser. This is useful for managing cookies for testing purposes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\ncookie = {name: 'foo', value: 'bar', domain: '.example.com', path: '/'}\n@driver.execute_cdp 'Network.enable'\n@driver.execute_cdp 'Network.setCookie', cookie\n```\n\n----------------------------------------\n\nTITLE: Refreshing the Current Page (Python)\nDESCRIPTION: Demonstrates how to refresh the current page using Selenium WebDriver in Python. The driver.refresh() method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndriver.refresh()\n```\n\n----------------------------------------\n\nTITLE: Adding Virtual Authenticator in C#\nDESCRIPTION: This code demonstrates adding a virtual authenticator using C# and setting its options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nVirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions()\n{\n    Protocol = Protocol.Ctap2,\n    Domain = \"localhost\",\n    UserVerification = true\n};\noptions.AddTransport(Transport.Usb);\nauthenticator = ((IHasAuthentication)driver).AddVirtualAuthenticator(options);\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Partial Link Text with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a link element on a page using partial link text with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.partialLinkText()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.partialLinkText('Official Page'));\n```\n\n----------------------------------------\n\nTITLE: Set Shrink to Fit Java\nDESCRIPTION: This code snippet demonstrates how to set whether to shrink the page to fit the content in Java with Selenium, using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setShrinkToFit(true);\n\nbyte[] pdfContent = ((PrintsPage) driver).print(printOptions);\n```\n\n----------------------------------------\n\nTITLE: Relay Configuration TOML\nDESCRIPTION: Configures a Selenium Grid node to relay commands to an external WebDriver service (e.g., Appium server), defining the service's URL, status endpoint, and supported stereotypes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.ja.md#_snippet_5\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\ndetect-drivers = false\n\n[relay]\n# Default Appium/Cloud server endpoint\nurl = \"http://localhost:4723/wd/hub\"\nstatus-endpoint = \"/status\"\n# Optional, enforce a specific protocol version in HttpClient when communicating with the endpoint service status (e.g. HTTP/1.1, HTTP/2)\nprotocol-version = \"HTTP/1.1\"\n# Stereotypes supported by the service. The initial number is \"max-sessions\", and will allocate\n# that many test slots to that particular configuration\nconfigs = [\n  \"5\", \"{\\\"browserName\\\": \\\"chrome\\\", \\\"platformName\\\": \\\"android\\\", \\\"appium:platformVersion\\\": \\\"11\\\"}\"\n]\n```\n\n----------------------------------------\n\nTITLE: Performing Actions in Browsing Context - JavaScript\nDESCRIPTION: This JavaScript snippet showcases how to perform actions in a browsing context using Selenium's BiDi API. It defines an origin and a sequence of actions to be executed. Requires Selenium 4.17 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/input.pt-br.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet result = await driver.execute(\n    input.perform(context, origin, actions));\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset (JavaScript)\nDESCRIPTION: This JavaScript code shows scrolling from a viewport offset by a specified amount using Selenium's Actions API. Requires Selenium WebDriver and appropriate setup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.actions().scroll({origin: 'viewport', x: 100, y: 200,  duration: 0,  deltaX: 25, deltaY: 25}).perform();\n```\n\n----------------------------------------\n\nTITLE: Deprecated Locator Methods in Selenium Python\nDESCRIPTION: This code snippet demonstrates the locator-specific methods that are being deprecated in newer versions of Selenium's Python bindings. These methods are being replaced by a more generic approach using `find_element` and `By` object. The code shows examples of finding elements by ID, name, tag name, CSS selector, class name, link text, partial link text, and XPath.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/python-locators-se4.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndriver.find_element_by_id(\"some_id\")\ndriver.find_element_by_name(\"some_name\")\ndriver.find_element_by_tag_name(\"some_tag\")\ndriver.find_element_by_css_selector(\"some_selector\")\ndriver.find_element_by_class_name(\"some_class\")\ndriver.find_element_by_link_text(\"some_text\")\ndriver.find_element_by_partial_link_text(\"some_other_text\")\ndriver.find_element_by_xpath(\"some_xpath\")\n```\n\n----------------------------------------\n\nTITLE: Element Submission with Selenium\nDESCRIPTION: This snippet demonstrates how to submit an HTML form element using Selenium WebDriver. The 'submit()' method is called on the identified element. Dependencies include an initialized WebDriver instance, a loaded webpage, and a found element (e.g., a search box).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nawait searchBox.submit();\n```\n\n----------------------------------------\n\nTITLE: Distributor Configuration with Selenium Grid\nDESCRIPTION: Configures the Selenium Grid distributor by setting the Session Map server URL, Session Queue server URL, and disabling the bus. This command is used to start the distributor with specific configurations.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.zh-cn.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njava -jar selenium-server-<version>.jar distributor --sessions http://localhost:5556 --sessionqueue http://localhost:5559 --bind-bus false\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox WebDriver in Java\nDESCRIPTION: This code snippet demonstrates how to initialize a new Firefox WebDriver instance in Java. The FirefoxDriver automatically starts with a clean, known state by using a new user profile, which helps ensure test isolation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/fresh_browser_per_test.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new FirefoxDriver();\n```\n\n----------------------------------------\n\nTITLE: JavaScript Teardown Example (Mocha)\nDESCRIPTION: This snippet shows the teardown of a Selenium WebDriver instance in JavaScript using Mocha. The `afterEach` hook is used to ensure that the browser is closed after each test case, using `driver.quit()`.  This prevents resource leaks.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nafterEach(async function() {\n  await driver.quit();\n});\n```\n\n----------------------------------------\n\nTITLE: Start Custom Node Uber Jar - Bash\nDESCRIPTION: This command starts a Selenium Grid Node using an uber jar, specifying a custom node implementation class. The `--node-implementation` argument tells the Grid to use the fully qualified name of the custom class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/customize_node.zh-cn.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -jar custom_node-server.jar node \\\n--node-implementation org.seleniumhq.samples.DecoratedLoggingNode\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Add-ons in Firefox with Selenium (Python)\nDESCRIPTION: This snippet demonstrates how to uninstall a Firefox add-on using Selenium WebDriver in Python. The `uninstall_addon` method requires the add-on's ID.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ndriver.uninstall_addon(addon_id)\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Current Pointer Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse cursor by a specified offset from its current position using Selenium WebDriver.  It's available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_56\n\nLANGUAGE: CSharp\nCODE:\n```\nnew Actions(driver)\n    .MoveByOffset(30, -10)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Java BrowserType Interface (After)\nDESCRIPTION: Demonstrates setting the browser name using the new `Browser` enum.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\nMutableCapabilities capabilities = new MutableCapabilities();\ncapabilities.setCapability(\"browserVersion\", \"92\");\ncapabilities.setCapability(\"browserName\", Browser.FIREFOX);\n```\n\n----------------------------------------\n\nTITLE: Locate Element in Shadow DOM\nDESCRIPTION: This snippet demonstrates how to access and locate an element within a Shadow DOM using Selenium. It first finds the shadow host element using CSS selector, then obtains the shadow root, and finally locates the desired element within the shadow root using another CSS selector. Requires Selenium 4.0 or greater.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nWebElement shadowHost = driver.findElement(By.cssSelector(\"#shadow_host\"));\nSearchContext shadowRoot = shadowHost.getShadowRoot();\nWebElement shadowContent = shadowRoot.findElement(By.cssSelector(\"#shadow_content\"));\n```\n\n----------------------------------------\n\nTITLE: Deselecting Options in Ruby\nDESCRIPTION: Demonstrates how to deselect all selected options in a multi-select element using Ruby. It calls the deselect_all method on the Select object. This only works for multi-select lists.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nselect.deselect_all\n```\n\n----------------------------------------\n\nTITLE: Handling Firefox Library Dependencies in Linux\nDESCRIPTION: When running Firefox in Linux, you might encounter an error related to missing shared libraries (e.g., `libdbus-glib-1.so.2`). This snippet shows how to install the required library using `apt-get`. This resolves the \"cannot open shared object file\" error, allowing Firefox to run correctly.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.en.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libdbus-glib-1-2\n```\n\n----------------------------------------\n\nTITLE: Back Click with Selenium\nDESCRIPTION: Performs a back click by pressing and releasing mouse button 3.  It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"clickable\"))\nval actions = Actions(driver)\nactions.moveToElement(element)\n    .buttonDown(MouseButton.BACK)\n    .buttonUp(MouseButton.BACK)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Customized FluentWait - Java\nDESCRIPTION: This Java snippet shows how to customize waits using FluentWait. It sets a timeout of 30 seconds, polls every 5 seconds, ignores specific exceptions, and defines a function to determine if the element is interactable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.en.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nWait<WebDriver> wait = new FluentWait<>(driver)\n        .withTimeout(Duration.ofSeconds(30))\n        .pollingEvery(Duration.ofSeconds(5))\n        .ignoring(NoSuchElementException.class)\n        .ignoring(ElementNotInteractableException.class)\n        .withMessage(\"Element is not interactable\");\n\n    WebElement element = wait.until(d -> {\n      WebElement ele = d.findElement(By.tagName(\"p\"));\n      System.out.println(ele.getText());\n      return ele.isDisplayed();\n    });\n```\n\n----------------------------------------\n\nTITLE: Importing Color Class\nDESCRIPTION: This snippet shows how to import the Color class in different programming languages to utilize it for color manipulation in Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.support.Color\n```\n\n----------------------------------------\n\nTITLE: Requirements.txt Entry Python\nDESCRIPTION: This snippet shows the entry to add to a `requirements.txt` file for specifying the Selenium dependency in a Python project. It allows pip to install Selenium when setting up the project's dependencies, ensuring the correct version of Selenium is used.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.pt-br.md#_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nselenium\n```\n\n----------------------------------------\n\nTITLE: Delete Session From Node (No Secret)\nDESCRIPTION: Deletes a WebDriver session from a specific node when no registration secret was configured. It terminates the session and removes it from the active session map on that node.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.ja.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://<node-URL>/se/grid/node/session/<session-id>' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Removing a Virtual Authenticator in C#\nDESCRIPTION: This C# snippet removes a virtual authenticator using DevTools. It retrieves the DevTools session and sends a command to remove the virtual authenticator by its ID.  It requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_9\n\nLANGUAGE: CSharp\nCODE:\n```\nIDevTools devTools = ((IHasDevTools)driver).GetDevTools();\nDevToolsSession session = devTools.GetDevToolsSession();\nawait session.SendCommand(new RemoveVirtualAuthenticatorCommandSettings()\n{\n    AuthenticatorId = authenticatorId\n});\n```\n\n----------------------------------------\n\nTITLE: Setting IE Driver Log Level - C#\nDESCRIPTION: This C# snippet shows how to set the log level when initializing the InternetExplorerDriver. It configures the driver with a specific log level for capturing diagnostic information during test execution.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_34\n\nLANGUAGE: CSharp\nCODE:\n```\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.LogLevel = InternetExplorerLogLevel.Debug;\nvar driver = new InternetExplorerDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Matching Node with Custom Capability - Java\nDESCRIPTION: This Java code snippet demonstrates how to create ChromeOptions and set a custom capability (`gsg:customcap`) to `true` to match a specific Selenium Node. It then creates a RemoteWebDriver instance and navigates to selenium.dev before quitting the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.pt-br.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setCapability(\"gsg:customcap\", true);\nWebDriver driver = new RemoteWebDriver(new URL(\"http://localhost:4444\"), options);\ndriver.get(\"https://selenium.dev\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Customizing Wait with FluentWait - Java\nDESCRIPTION: This Java snippet demonstrates how to customize a wait using `FluentWait`. It sets a timeout, polling interval, and ignores specific exceptions like `NoSuchElementException`. The `until` method is used with a lambda to define the condition to wait for, which is finding an element by ID and returning it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.pt-br.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nWait<WebDriver> wait = new FluentWait<>(driver)\n                .withTimeout(Duration.ofSeconds(10))\n                .pollingEvery(Duration.ofSeconds(1))\n                .ignoreAll(Collections.singleton(NoSuchElementException.class));\n\nWebElement foo = wait.until(new Function<WebDriver, WebElement>() {\n    public WebElement apply(WebDriver driver) {\n        return driver.findElement(By.id(\"foo\"));\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Get browsing context realms - JavaScript\nDESCRIPTION: This JavaScript code retrieves the realms for the current browsing context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('get browsing context realms', async () => {\n    const browsingContext = await new BrowsingContext(driver, tabId);\n    let realms = await browsingContext.script.getRealms({context: browsingContext.context});\n\n    expect(realms.length).toBeGreaterThan(0);\n  });\n```\n\n----------------------------------------\n\nTITLE: Use existing window handle using WebDriver BiDi in JavaScript\nDESCRIPTION: This snippet shows how to create a browsing context for an existing tab/window to run commands using the WebDriver BiDi API in JavaScript. It retrieves the window handle and creates a `BrowsingContext` instance using it. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet context = await getContext(driver);\nexpect(context.context).toBeDefined();\n```\n\n----------------------------------------\n\nTITLE: General TOML Configuration Structure\nDESCRIPTION: Illustrates the basic structure of a TOML configuration file, showing how to define sections, options, and values. It also shows different value types like strings, arrays, and booleans.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.en.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[section1]\noption1=\"value\"\n\n[section2]\noption2=[\"value1\",\"value2\"]\noption3=true\n```\n\n----------------------------------------\n\nTITLE: Press Key Action in Selenium\nDESCRIPTION: Demonstrates how to simulate pressing a specific key using Selenium's Actions API. This involves creating an Actions object, using the keyDown method to press a key, and then performing the action. The key to press is specified using the Keys enum/class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nActions actions = new Actions(driver);\nactions.KeyDown(Keys.Shift)\n    .SendKeys(\"text\")\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Set Logger Level in C#\nDESCRIPTION: This snippet demonstrates how to change the level of the logger in C# using the `OpenQA.Selenium.Internal.Logging` namespace.  Note that the default level is `Info`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nLog.Level = LogLevel.Debug;\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element by Amount (Ruby)\nDESCRIPTION: This Ruby code snippet demonstrates scrolling from a specified element by a specified amount (x_offset and y_offset) using Selenium's Actions API.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'id-of-element')\n@driver.action.scroll_from(element, 100, 200).perform\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its index (position) using Selenium WebDriver. The `selectByIndex()` method is used to select the option based on its index, starting from 0.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait select.selectByIndex(0);\n```\n\n----------------------------------------\n\nTITLE: Failing Button Click (No Frame Switch)\nDESCRIPTION: This code snippet shows an example of how an attempt to click a button within an IFrame will fail without first switching to the IFrame. It demonstrates the need to change the driver's focus to the frame before interacting with the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\n//This won't work\ndriver.findElement(By.tagName(\"button\")).click()\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes Java\nDESCRIPTION: This code snippet shows how to add pointer event attributes to a Pen input source in Java, specifically setting properties like width, height, pressure, and tilt. It involves creating a Pen object, defining a PointerInput.Origin, and then using the `feed` method to specify the pointer event properties. Requires Selenium version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.pt-br.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nPen pen = new Pen(driver, \"pen1\");\nPointerInput.Origin viewport = PointerInput.Origin.viewport();\n\nMap<String, Object> pointerAttributes = new HashMap<>();\npointerAttributes.put(\"width\", 20);\npointerAttributes.put(\"height\", 40);\npointerAttributes.put(\"pressure\", 0.8);\npointerAttributes.put(\"tiltX\", 10);\npointerAttributes.put(\"tiltY\", -10);\n\nSequence sequence = new Sequence(pen, 1);\nsequence.addAction(pen.createPointerMove(viewport, 0, 0, Duration.ofMillis(10), pointerAttributes));\nsequence.addAction(pen.createPointerDown(LEFT));\nsequence.addAction(pen.createPointerUp(LEFT));\n\ndriver.perform(List.of(sequence));\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions in JavaScript\nDESCRIPTION: This code snippet shows how to release all pressed keys and pointer buttons in JavaScript. It uses the `releaseActions` method on the WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.pt-br.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndriver.releaseActions();\n```\n\n----------------------------------------\n\nTITLE: Redirecting Logger Output to a File in Ruby\nDESCRIPTION: This code snippet illustrates how to redirect Selenium logger output to a file in Ruby. It utilizes the `Logger` class to create a new logger instance and set the log file path. No external dependencies are required beyond the standard Ruby library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nSelenium::WebDriver.logger.output = 'selenium.log'\n```\n\n----------------------------------------\n\nTITLE: Setting Capabilities After Upgrade - Java\nDESCRIPTION: This Java code demonstrates how to set browser options and cloud options to be W3C compliant after upgrading to Selenium 4.  It sets platform name, browser version, and encapsulates custom build and name options within a 'cloud:options' map before creating a RemoteWebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxOptions browserOptions = new FirefoxOptions();\nbrowserOptions.setPlatformName(\"Windows 10\");\nbrowserOptions.setBrowserVersion(\"92\");\nMap<String, Object> cloudOptions = new HashMap<>();\ncloudOptions.put(\"build\", myTestBuild);\ncloudOptions.put(\"name\", myTestName);\nbrowserOptions.setCapability(\"cloud:options\", cloudOptions);\nWebDriver driver = new RemoteWebDriver(new URL(cloudUrl), browserOptions);\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse from Viewport Origin in Python\nDESCRIPTION: This Python code moves the mouse pointer relative to the top-left corner of the current viewport by a specified offset. It relies on the ActionChains class to perform the move action, and requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\naction = ActionChains(driver)\naction.move_by_offset(20, 100).perform()\n```\n\n----------------------------------------\n\nTITLE: Initializing Safari Driver with Options - Java\nDESCRIPTION: This code snippet demonstrates how to initialize a SafariDriver instance in Java using SafariOptions. It creates a new SafariOptions object and then passes it to the SafariDriver constructor.  This allows you to configure Safari-specific settings before starting the browser session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.pt-br.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nSafariOptions options = new SafariOptions();\nWebDriver driver = new SafariDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Disown handles in realm (Java)\nDESCRIPTION: This Java snippet demonstrates how to disown handles within a realm using Selenium BiDi's `script.disown` command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\n            bidi.script().disown(new DisownParameters(realm, List.of()));\n```\n\n----------------------------------------\n\nTITLE: Executing CDP commands in CSharp\nDESCRIPTION: This C# snippet illustrates how to execute CDP commands using the `ExecuteCdpCommand` method. It sets up ChromeOptions, navigates to a URL, and executes a CDP command to retrieve response body details. Requires Selenium WebDriver and Chrome driver dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/_index.ja.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n        var parameters = new Dictionary<string, object>();\n        parameters.Add(\"url\", \"https://www.selenium.dev/\");\n        var response = driver.ExecuteCdpCommand(\"Network.getAllCookies\", parameters);\n```\n\n----------------------------------------\n\nTITLE: Asserting with Selenium in Java\nDESCRIPTION: This code snippet demonstrates how to make assertions within a Selenium test using JUnit in Java. It retrieves the title of a webpage and asserts that it matches the expected title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nString title = driver.getTitle();\nassertEquals(\"SeleniumHQ Browser Automation\", title);\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to Normal in Ruby\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'normal' in Ruby. The WebDriver waits until the 'load' event fires, meaning all resources are downloaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Options.new(page_load_strategy: :normal)\n```\n\n----------------------------------------\n\nTITLE: Initializing Edge Driver with Default Options - C#\nDESCRIPTION: Demonstrates initializing the Edge driver with basic, predefined options using C#.\nThis snippet showcases the most straightforward way to start an Edge session with Selenium.\nDependencies: Selenium WebDriver, EdgeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nEdgeDriver driver = new EdgeDriver();\n```\n\n----------------------------------------\n\nTITLE: Setting Supporting Files Path - C#\nDESCRIPTION: This C# snippet demonstrates setting the path to supporting files for the Internet Explorer Driver using the `WithExtractPath` method on the `InternetExplorerOptions` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_36\n\nLANGUAGE: CSharp\nCODE:\n```\nvar options = new InternetExplorerOptions();\noptions.WithExtractPath(\"C:\\\\IEDriver\");\ndriver = new InternetExplorerDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Install Selenium with Pip in Python\nDESCRIPTION: This command demonstrates how to install the Selenium library in Python using pip, the Python package installer.  This installs the latest version of Selenium from the Python Package Index (PyPI).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.en.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install selenium\n```\n\n----------------------------------------\n\nTITLE: Finding Elements By Tag Name - C#\nDESCRIPTION: This code snippet demonstrates how to find all elements with a specific tag name using Selenium WebDriver in C#. It initializes a WebDriver instance, navigates to a URL, finds all 'p' elements, and prints their text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing System.Collections.Generic;\n\nnamespace FindElementsExample {\n class FindElementsExample {\n  public static void Main(string[] args) {\n   IWebDriver driver = new FirefoxDriver();\n   try {\n    // Navigate to Url\n    driver.Navigate().GoToUrl(\"https://example.com\");\n\n    // Get all the elements available with tag name 'p'\n    IList < IWebElement > elements = driver.FindElements(By.TagName(\"p\"));\n    foreach(IWebElement e in elements) {\n     System.Console.WriteLine(e.Text);\n    }\n\n   } finally {\n    driver.Quit();\n   }\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Router (Java)\nDESCRIPTION: This command starts the Router component in a distributed Grid setup. The Router redirects new session requests to the queue and existing session requests to the Node running the session. It interacts with the New Session Queue, Session Map, and Distributor. The default port is 4444.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.zh-cn.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar router --sessions http://<sessions-ip>:5556 --distributor http://<distributor-ip>:5553 --sessionqueue http://<new-session-queue-ip>:5559 --port 4444\n```\n\n----------------------------------------\n\nTITLE: Enabling Log File Features in Chrome\nDESCRIPTION: This code snippet shows how to enable the features for appending logs and using readable timestamps when logging to a file in ChromeDriver. These features are only available when writing to a file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_38\n\nLANGUAGE: Java\nCODE:\n```\nChromeDriverService service = new ChromeDriverService.Builder()\n    .withAppendLog(true)\n    .withReadableTimestamp(true)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Starting a Safari Session (Java)\nDESCRIPTION: This code shows how to start a Safari session in Java with basic defined options. It initializes SafariOptions and then uses it to create a SafariDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.en.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nSafariOptions options = new SafariOptions();\nWebDriver driver = new SafariDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset - Selenium Wheel Ruby\nDESCRIPTION: This snippet demonstrates how to scroll from an offset of the viewport using Selenium's Wheel actions in Ruby. An offset is specified from the upper left corner of the current viewport. After the origin point is determined, the page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\n@driver.action.scroll_from(::Selenium::WebDriver::Interactions::Wheel::Origin.viewport, 10, 10).perform\n```\n\n----------------------------------------\n\nTITLE: BaseComponent Class in Java\nDESCRIPTION: This Java code defines an abstract BaseComponent class, serving as the base for all page component objects.  It takes a WebElement as input, representing the root element of the component.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.pt-br.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class BaseComponent {\n    protected WebElement root;\n\n    public BaseComponent(WebElement root) {\n        this.root = root;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Gathering Performance Metrics using CDP in Python\nDESCRIPTION: This Python code snippet demonstrates how to gather performance metrics using the Chrome DevTools Protocol (CDP) in Selenium. It enables the Performance domain and retrieves metrics such as CPU usage, memory usage, and frame rate.  This allows you to monitor and analyze the performance of your web applications.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ncdp.execute_cdp(\"Performance.enable\", {})\nmetrics = cdp.execute_cdp(\"Performance.getMetrics\", {})\n```\n\n----------------------------------------\n\nTITLE: Install Unsigned Firefox Extension (Python)\nDESCRIPTION: This Python code snippet installs an unsigned Firefox extension using Selenium.  The extension is installed from a directory containing the extension files. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\ndriver.install_addon(\"/path/to/unpacked/extension\", temporary=True)\n```\n\n----------------------------------------\n\nTITLE: Java Setup Example (JUnit)\nDESCRIPTION: This snippet shows a Java example for setting up a Selenium WebDriver instance before each test case using JUnit. The `@BeforeEach` annotation indicates that the annotated method will be executed before each test. The `WebDriverManager` is used to set up the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport org.junit.jupiter.api.BeforeEach;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport io.github.bonigarcia.wdm.WebDriverManager;\n\n@BeforeEach\npublic void setup() {\n    WebDriverManager.chromedriver().setup();\n    driver = new ChromeDriver();\n}\n```\n\n----------------------------------------\n\nTITLE: Scroll From Offset of Origin using Selenium Wheel (Python)\nDESCRIPTION: Scrolls from a specified offset of the viewport origin by a given amount. Requires x offset, y offset, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nactions = ActionBuilder(driver)\nactions.scroll_from_origin(WheelInput.ORIGIN_VIEWPORT, 20, 50, x_offset=15, y_offset=25)\nactions.perform()\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value Selenium Java\nDESCRIPTION: This Java code snippet retrieves the computed style property 'color' of a link text element using Selenium WebDriver. It asserts the background color style is rgba(0, 0, 0, 0).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/colorPage.html\");\nWebElement link = driver.findElement(By.id(\"namedColor\"));\nassertThat(link.getCssValue(\"background-color\")).isEqualTo(\"rgba(0, 0, 0, 0)\");\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element By Amount - Selenium Wheel Python\nDESCRIPTION: This snippet demonstrates how to scroll from a specific element by a given amount using Selenium's Wheel actions in Python. The viewport will be scrolled so the bottom of the element is at the bottom of the screen, then the page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ntarget = driver.find_element(By.ID, \"target\")\nactions = ActionBuilder(driver)\nactions.scroll_from_element(target, 0, 100)\nactions.perform()\n```\n\n----------------------------------------\n\nTITLE: Querying Session Details for All Nodes\nDESCRIPTION: This example shows how to retrieve all session details for all nodes in the Selenium Grid using a GraphQL query. A `curl` command is used to send the request to the GraphQL endpoint.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.en.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ sessionsInfo { sessions { id, capabilities, startTime, uri, nodeId, nodeId, sessionDurationMillis } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Ignoring Protected Mode Settings (Ruby)\nDESCRIPTION: This code snippet shows how to skip the Protected Mode check while launching a new IE session using Ruby. It sets the `ignore_protected_mode_settings` option to `true`. Note that this may cause instability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.ignore_protected_mode_settings = true\n```\n\n----------------------------------------\n\nTITLE: Waiting for Downloads using CDP in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to wait for downloads using the Chrome DevTools Protocol (CDP) in Selenium. It enables the Page domain and sets a download behavior to specify the download directory. Then it listens for the `Page.downloadWillBegin` and `Page.downloadProgress` events to monitor the download progress.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\ndirectory = Dir.tmpdir\n@driver.execute_cdp 'Page.enable'\n@driver.execute_cdp 'Page.setDownloadBehavior', behavior: 'allow', downloadPath: directory\n@driver.on_event 'Page.downloadWillBegin' do |params|\n  puts \"Download started: #{params['url']}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Binary Location\nDESCRIPTION: This code snippet demonstrates how to set the binary location of the Firefox browser. This is useful when you want to use a specific version of Firefox, such as Firefox Nightly, instead of the default installation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.binary = '/Applications/Firefox Nightly.app/Contents/MacOS/firefox'\n```\n\n----------------------------------------\n\nTITLE: Navigate Back in JavaScript\nDESCRIPTION: This code snippet demonstrates how to navigate back in the browsing history using Selenium WebDriver's BiDi API in JavaScript. It uses the `browsingContext.back` method. Requires Selenium version 4.17 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('navigate back', async () => {\n  const browsingContext = await getBrowsingContext(driver);\n  await browsingContext.back();\n});\n```\n\n----------------------------------------\n\nTITLE: Quitting WebDriver Session in Selenium\nDESCRIPTION: This snippet ends the WebDriver session, closing the browser instance and releasing associated resources.  It is essential to call this method at the end of a test to avoid resource leaks. Dependencies: Initialized WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.quit();\n```\n\n----------------------------------------\n\nTITLE: Setting Lax Cookie in JavaScript with Selenium\nDESCRIPTION: This JavaScript code snippet showcases adding a cookie with the SameSite attribute set to Lax using Selenium. It demonstrates the process of adding a cookie with specified name, value, domain, path and SameSite attribute.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.selenium.dev/selenium/web/blank.html');\nawait driver.manage().addCookie({name: 'foo', value:'bar', domain: 'selenium.dev', path: '/', sameSite: 'Lax'});\nexpect(await driver.manage().getCookie('foo')).toBeDefined();\n```\n\n----------------------------------------\n\nTITLE: Setting unhandledPromptBehavior in Ruby\nDESCRIPTION: This Ruby code demonstrates setting the `unhandledPromptBehavior` capability for Selenium. This capability configures how the browser should handle user prompts (e.g., alerts, confirms). The value must be one of: 'dismiss', 'accept', 'dismiss and notify', 'accept and notify', or 'ignore'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\noptions = Selenium::WebDriver::Options.chrome\noptions.unhandled_prompt_behavior = :accept\n```\n\n----------------------------------------\n\nTITLE: Deprecated setLegacy Option for Firefox (Java)\nDESCRIPTION: This code shows the deprecated `setLegacy` option for Firefox, which is no longer needed in Selenium 4 as it now relies solely on GeckoDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_26\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxOptions options = new FirefoxOptions();\noptions.setLegacy(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Binary Location\nDESCRIPTION: This code snippet demonstrates how to set the binary location of the Firefox browser. This is useful when you want to use a specific version of Firefox, such as Firefox Nightly, instead of the default installation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\noptions.binary = '/Applications/Firefox Nightly.app/Contents/MacOS/firefox'\n```\n\n----------------------------------------\n\nTITLE: Adding a Credential in Java\nDESCRIPTION: This Java code demonstrates adding a new credential to a virtual authenticator. It sets the Relying Party ID, user ID, and credential type, using the DevTools interface to interact with the browser's security settings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nCredential credential = new Credential(\"rpId\", \"user1\", PublicKeyCredentialType.PUBLIC_KEY);\ndevTools.getDomains().security().addCredential(credential);\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium\nDESCRIPTION: This code shows how to handle disabled options. Since Selenium 4.5, you cannot create a Select object from a disabled <select> element, and you cannot select a disabled <option>. Attempting to do so will result in an exception.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\ndisabled_select_element = driver.find_element(By.NAME, \"single_disabled\")\ndriver.find_element(By.ID, \"sinlge_disabled_1\").click()\n```\n\n----------------------------------------\n\nTITLE: Get Selenium Logger in Ruby\nDESCRIPTION: This snippet shows how to obtain the Selenium logger in Ruby. This allows for configuring logging specific to Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nSelenium::WebDriver.logger\n```\n\n----------------------------------------\n\nTITLE: Starting Session Map Command (PostgreSQL)\nDESCRIPTION: This bash command starts the Session Map service within Selenium Grid, configured to store session data in a PostgreSQL database. It uses coursier to download the selenium-session-map-jdbc and postgresql dependencies.  It publishes and subscribes to events, and uses the session.toml configuration file to configure the JDBC connection.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.zh-cn.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nexport SE_VERSION=<current_selenium_version>\njava -jar selenium-server-${SE_VERSION}.jar \\\n--ext $(coursier fetch -p org.seleniumhq.selenium:selenium-session-map-jdbc:${SE_VERSION} org.postgresql:postgresql:42.3.1) \\\nsessions --publish-events tcp://localhost:4442 \\\n--subscribe-events tcp://localhost:4443 \\\n--port 5556 --config sessions.toml \n```\n\n----------------------------------------\n\nTITLE: Selenium Python Example\nDESCRIPTION: This Python code snippet shows a simple Selenium test. It explains how to initialize a WebDriver, open a web page, interact with elements, and assert the expected output. It requires the Selenium library to be installed (e.g., via pip install selenium).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Chrome()\ndriver.get(\"https://www.selenium.dev/selenium/web/web-form.html\")\n\ntext_box = driver.find_element(by=By.NAME, value=\"my-text\")\nsubmit_button = driver.find_element(by=By.CSS_SELECTOR, value=\"button\")\n\ntext_box.send_keys(\"Selenium\")\nsubmit_button.click()\n\nmessage = driver.find_element(by=By.ID, value=\"message\")\nvalue = message.text\nassert value == \"Received!\"\n\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options in JavaScript\nDESCRIPTION: Demonstrates how to retrieve selected options from a Select element in JavaScript. It uses the getAllSelectedOptions() method to return a list of WebElements representing the selected options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst selectedOptions = await select.getAllSelectedOptions();\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel (JavaScript)\nDESCRIPTION: Scrolls the viewport so the bottom of the specified web element is at the bottom of the screen.  This method takes a web element as the sole argument. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('idOfMyElement'));\nawait driver.actions()\n  .scroll(0, element.y, WheelInput.Origin.viewport, 0, 0)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Setting Command Line Arguments in Java\nDESCRIPTION: This Java code shows how to set command-line arguments for Internet Explorer. It uses the `addCommandSwitches` method to pass the `-k` argument for kiosk mode and enables `forceCreateProcessApi`.  This requires the `useCreateProcessApiToLaunchIe()` method to be called.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.Capabilities;\nimport org.openqa.selenium.ie.InternetExplorerDriver;\nimport org.openqa.selenium.ie.InternetExplorerOptions;\n\npublic class ieTest {\n    public static void main(String[] args) {\n        InternetExplorerOptions options = new InternetExplorerOptions();\n        options.useCreateProcessApiToLaunchIe();\n        options.addCommandSwitches(\"-k\");\n        InternetExplorerDriver driver = new InternetExplorerDriver(options);\n        try {\n            driver.get(\"https://google.com/ncr\");\n            Capabilities caps = driver.getCapabilities();\n            System.out.println(caps);\n        } finally {\n            driver.quit();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions in Ruby\nDESCRIPTION: This code snippet shows how to release all pressed keys and pointer buttons in Ruby. It uses the `release_actions` method on the WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.pt-br.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.release_actions\n```\n\n----------------------------------------\n\nTITLE: Initializing Browser Name Option in Python\nDESCRIPTION: This snippet demonstrates how to initialize the browser name option in Python using Selenium.  The browser name is set by default when using option classes.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\noptions = Options()\noptions.browser_name\n```\n\n----------------------------------------\n\nTITLE: Initializing Submodules and Running Hugo Server (Shell)\nDESCRIPTION: This snippet demonstrates the commands necessary to initialize Git submodules, navigate to the website directory, and start the Hugo server for local development and previewing changes.  It ensures all dependencies are set up correctly.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.ja.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n% git submodule update --init --recursive\n% cd website_and_docs\n% hugo server\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Firefox Options\nDESCRIPTION: This code snippet demonstrates how to add command-line arguments to Firefox options.  It's useful for configuring the browser's behavior, such as running in headless mode. The `-add_argument` method is used to append arguments to the options object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.add_argument('-headless')\n```\n\n----------------------------------------\n\nTITLE: Node Configuration TOML (Custom Capabilities)\nDESCRIPTION: Configures a Selenium Grid node with custom capabilities, specifying `networkname:applicationName` and `nodename:applicationName` to enable matching with specific nodes. Important to set custom capabilities on all Nodes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.pt-br.md#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[node]\ndetect-drivers = false\n\n[[node.driver-configuration]]\ndisplay-name = \"firefox\"\nstereotype = '{\"browserName\": \"firefox\", \"platformName\": \"macOS\", \"browserVersion\":\"96\", \"networkname:applicationName\":\"node_1\", \"nodename:applicationName\":\"app_1\" }'\nmax-sessions = 5\n```\n\n----------------------------------------\n\nTITLE: Adding Selenium Dependency in Maven\nDESCRIPTION: This snippet demonstrates how to add the main Selenium dependency to a Maven `pom.xml` file. It includes all WebDriver implementations and support classes. It is useful when you don't know which specific WebDriver implementation you will be using.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/how-to-use-selenium-2-with-maven.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.seleniumhq.selenium</groupId>\n    <artifactId>selenium</artifactId>\n    <version>2.0a5</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Console Output for IE Driver Logs in Ruby\nDESCRIPTION: This Ruby code demonstrates configuring the Internet Explorer Driver to output logs to the console. It sets the log level to `:debug` which enables more detailed logging, and directs the logger output to `$stdout`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_31\n\nLANGUAGE: Ruby\nCODE:\n```\nSelenium::WebDriver.logger.level = :debug\nSelenium::WebDriver.logger.output = $stdout\n```\n\n----------------------------------------\n\nTITLE: Remove Network Intercept in Java\nDESCRIPTION: This code snippet shows how to remove a network intercept that was previously added using Selenium's BiDi API in Java.  It requires the Selenium WebDriver and BiDi dependencies.  The intercept ID is used to identify the intercept to remove.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nString intercept = Network.addIntercept(devTools, Pattern.compile(\".*\"),\n        new AddInterceptParameters().withPhase(Event.BEFORE_REQUEST_SENT));\n\nNetwork.removeIntercept(devTools, intercept);\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Logging in a User (Python)\nDESCRIPTION: This Python code snippet shows how to create a user with read-only permissions using a user_factory and log in as that user. It retrieves the user's email and password, logs in, and returns the AccountPage object. The user_factory.create_common_user() method is assumed to be defined elsewhere.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Create a user who has read-only permissions--they can configure a unicorn,\n# but they do not have payment information set up, nor do they have\n# administrative privileges. At the time the user is created, its email\n# address and password are randomly generated--you don't even need to\n# know them.\nuser = user_factory.create_common_user() #This method is defined elsewhere.\n\n# Log in as this user.\n# Logging in on this site takes you to your personal \"My Account\" page, so the\n# AccountPage object is returned by the loginAs method, allowing you to then\n# perform actions from the AccountPage.\naccount_page = login_as(user.get_email(), user.get_password())\n```\n\n----------------------------------------\n\nTITLE: Initializing Safari Driver with Options - Python\nDESCRIPTION: This code snippet demonstrates how to initialize a Safari WebDriver instance in Python using SafariOptions. It creates a SafariOptions object and initializes the driver with it. This allows configuring the Safari driver with specific capabilities before automation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.pt-br.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.safari.options import Options as SafariOptions\n\noptions = SafariOptions()\ndriver = webdriver.Safari(options=options)\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium\nDESCRIPTION: This code snippet demonstrates how to handle disabled options in a select element using Selenium WebDriver. It attempts to select a disabled option and verifies that a `NoSuchElementException` is thrown. This feature is available from Selenium 4.5 and later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_36\n\nLANGUAGE: Java\nCODE:\n```\nassertThrows(NoSuchElementException.class, () -> select.selectByValue(\"disabled\"));\n```\n\n----------------------------------------\n\nTITLE: Customizing Waits - Ruby\nDESCRIPTION: This code snippet demonstrates how to customize waits in Ruby, focusing on handling specific exceptions during the wait. It specifically handles the `Selenium::WebDriver::Error::NoSuchElementError`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.zh-cn.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\nwait = Selenium::WebDriver::Wait.new(timeout: 10, ignore: Selenium::WebDriver::Error::NoSuchElementError)\nelement = wait.until { driver.find_element(id: 'foo') }\n```\n\n----------------------------------------\n\nTITLE: Continue Auth Required Request Without Credentials in JavaScript\nDESCRIPTION: This JavaScript code continues a request blocked at the 'authRequired' phase without providing any credentials.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait bidiSession.network.continueRequest({\n  requestId: event.request.requestId\n});\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Tag Name in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate a web element using its HTML tag name in Selenium. It initializes a WebDriver instance and uses the `By.tagName()` method to find the first element with the specified tag.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.tagName(\"a\"))\n```\n\n----------------------------------------\n\nTITLE: Removing Console Message Handler using WebDriver BiDi in Python\nDESCRIPTION: This snippet showcases removing a previously added console message handler using WebDriver BiDi in Python. It uses the handler ID that was returned when the handler was initially added. This allows the user to stop recording or acting on `console.log` events.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nbidi.script.remove_console_listener(handler)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Console Logs using CDP - CSharp\nDESCRIPTION: This C# code snippet demonstrates how to retrieve console logs using Selenium's integration with Chrome DevTools Protocol (CDP). It requires Selenium WebDriver and CDP support in the Selenium version being used. The code is located at examples/dotnet/SeleniumDocs/BiDi/CDP/LoggingTest.cs#L19-L25\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.pt-br.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// This example is located at examples/dotnet/SeleniumDocs/BiDi/CDP/LoggingTest.cs#L19-L25\n```\n\n----------------------------------------\n\nTITLE: Setting acceptInsecureCerts Capability in Ruby\nDESCRIPTION: This code snippet illustrates how to set the 'acceptInsecureCerts' capability in Selenium using Ruby. The `acceptInsecureCerts` capability configures whether the browser should accept invalid or expired TLS certificates during navigation. Setting it to true enables the browser to trust insecure certificates.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\noptions = Selenium::WebDriver::Options.chrome\noptions.accept_insecure_certs = true\n```\n\n----------------------------------------\n\nTITLE: Minimize Window - Selenium WebDriver - C#\nDESCRIPTION: This snippet minimizes the browser window using the Selenium WebDriver API in C#. Requires Selenium WebDriver package and Selenium 4 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_43\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Manage().Window.Minimize();\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies - Kotlin\nDESCRIPTION: This Kotlin snippet shows how to delete all cookies using Selenium WebDriver. It adds two cookies and then calls `driver.manage().deleteAllCookies()` to remove them.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://www.example.com\")\n        driver.manage().addCookie(Cookie(\"test1\", \"cookie1\"))\n        driver.manage().addCookie(Cookie(\"test2\", \"cookie2\"))\n\n        // deletes all cookies\n        driver.manage().deleteAllCookies()\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium WebDriver in Python\nDESCRIPTION: This Python code snippet showcases a basic example of initializing Selenium WebDriver. It sets up a WebDriver instance and uses it to navigate to a webpage.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.zh-cn.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\n\n@pytest.fixture\ndef driver():\n    options = Options()\n    options.add_argument(\"headless=new\")\n\n    driver = webdriver.Chrome(options=options)\n    yield driver\n    driver.quit()\n\n\ndef test_google(driver):\n    driver.get(\"https://www.google.com\")\n    assert \"Google\" in driver.title\n```\n\n----------------------------------------\n\nTITLE: Finding Elements by Tag Name in Java\nDESCRIPTION: This Java code snippet demonstrates how to find all elements on a web page with a specific tag name using Selenium WebDriver. It initializes a WebDriver instance, navigates to a URL, finds all 'li' elements, and prints the text content of each element to the console. It requires the Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nList<WebElement> elements = driver.findElements(By.tagName(\"li\"));\n\nfor (WebElement element : elements) {\n    System.out.println(\"Paragraph text:\" + element.getText());\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Slot Information for All Sessions\nDESCRIPTION: This example demonstrates how to query slot information for all sessions in each Node in the Selenium Grid.  The GraphQL query is executed via a `curl` command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.en.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ sessionsInfo { sessions { id, slot { id, stereotype, lastStarted } } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Node Status\nDESCRIPTION: This curl command retrieves the status of each node in the Selenium Grid, indicating whether the node is up, draining, or unavailable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.pt-br.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\": \"{ nodesInfo { nodes { status } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Firefox Options - Java\nDESCRIPTION: Demonstrates how to add command-line arguments to Firefox options in Java. This is useful for configuring browser behavior like running in headless mode. Requires the Selenium WebDriver and FirefoxOptions classes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\noptions.addArguments(\"--headless\");\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element by Amount (JavaScript)\nDESCRIPTION: This JavaScript code shows how to scroll from a specified element by a specific amount using Selenium's Actions API. Requires Selenium WebDriver and appropriate setup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet element = await driver.findElement(By.id('id-of-element'));\nawait driver.actions().scroll({origin: element, x: 100, y: 200, duration: 0}).perform();\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Service with Docker Compose\nDESCRIPTION: This YAML file defines a Redis service using Docker Compose. It specifies the Redis image, restart policy, and port mapping. This configuration allows for easy setup and management of a Redis instance for Selenium Grid's session management.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.en.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3.8'\nservices:\n  redis:\n    image: redis:bullseye\n    restart: always\n    ports:\n      - \"6379:6379\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Output in Java\nDESCRIPTION: This snippet demonstrates how to configure logger output to a file in Java using the `java.util.logging` package. It adds a `FileHandler` to direct logs to a specific file. Requires the `java.util.logging` package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\njava.util.logging.FileHandler fh = new java.util.logging.FileHandler(\"myLog.log\");\nlogger.addHandler(fh);\n```\n\n----------------------------------------\n\nTITLE: Find Element within Another Element - C#\nDESCRIPTION: This snippet demonstrates how to find an element within another element in C# using Selenium WebDriver. First, it locates the parent element by its ID. Then, it uses the `FindElement` method on the parent element to find the desired element by its class name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement fruits = driver.FindElement(By.Id(\"fruits\"));\nIWebElement fruit = fruits.FindElement(By.ClassName(\"tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Quitting Driver Session - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to quit a Selenium driver session using the `quit` method. This closes all associated browser windows and terminates the session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.en.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\n@driver.quit\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element w/ Offset using Selenium Wheel (Java)\nDESCRIPTION: Scrolls from a specified element with an offset, by a given amount. Requires the element, x offset, y offset, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"idOfMyElement\"));\nnew Actions(driver)\n  .scrollFromOrigin(WheelInput.Origin.fromElement(element, 15, 25), 20, 50)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value - JavaScript\nDESCRIPTION: Demonstrates how to retrieve the computed CSS value of a web element using JavaScript and Selenium WebDriver. The `getCssValue()` method returns the value of the specified CSS property as a string. A WebDriver instance, an element locator, and the CSS property name are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst link = await driver.findElement(By.id('namedColor'))\nconst backgroundColor = await link.getCssValue('background-color')\n\n```\n\n----------------------------------------\n\nTITLE: Preload Script - Java\nDESCRIPTION: This snippet shows how to preload a script using Java and the WebDriver BiDi API. It employs the `Script.addPreloadScript` method to add a script that will be executed before any other script in a browsing context. The script content and optional browsing context ID are needed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nbidi.script().addPreloadScript(\"console.log('preload script')\");\n```\n\n----------------------------------------\n\nTITLE: Using a Pen with Selenium - Python\nDESCRIPTION: This Python snippet demonstrates how to use the Pen class in Selenium to interact with a web element, simulating a pen stylus's touch contact. It requires Selenium 4.2 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclickable = driver.find_element(By.ID, \"clickable\")\n\npen = Pen(driver, \"pen1\")\n\naction = ActionBuilder(driver)\n    .move_to_element(clickable)\n    .pointer_down(pen)\n    .pointer_up(pen)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Binary Location - Java\nDESCRIPTION: Demonstrates how to set the specific binary location for Firefox in Java. This is useful when you need to use a specific version of Firefox (e.g., nightly build). Requires Selenium WebDriver and FirefoxOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\noptions.setBinary(\"/Applications/Firefox Nightly.app/Contents/MacOS/firefox\");\n```\n\n----------------------------------------\n\nTITLE: Pausing Actions in Selenium (Java)\nDESCRIPTION: This code snippet demonstrates how to pause between actions in Selenium using Java. It creates a duration object and uses it to pause the action chain. The WebDriver instance and Actions class are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nDuration duration = Duration.ofSeconds(2);\n        new Actions(driver)\n            .pause(duration)\n            .sendKeys(\"First\")\n            .pause(duration)\n            .sendKeys(\"Second\")\n            .perform();\n```\n\n----------------------------------------\n\nTITLE: JSON Data Representation for Communication\nDESCRIPTION: JSON (JavaScript Object Notation) is used for representing data exchanged between the Selenium client and the remote storage server. This provides a simple and lightweight format for transmitting test case information. JSON facilitates easy parsing and generation of data on both the client and server sides.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/gsoc-2010-remote-storage.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n// Example: JSON representation of a test case\n{\n  \"testCaseId\": \"example_test\",\n  \"testSteps\": [\n    {\n      \"command\": \"open\",\n      \"target\": \"/\",\n      \"value\": \"\"\n    },\n    {\n      \"command\": \"assertTitle\",\n      \"target\": \"Selenium\",\n      \"value\": \"\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Named Cookie - Python\nDESCRIPTION: This code snippet demonstrates how to delete a cookie by its name using Selenium WebDriver in Python. It adds a cookie and then deletes it using the `delete_cookie` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://www.example.com\")\ncookie = { 'name' : 'test1', 'value' : 'cookie1' }\ndriver.add_cookie(cookie)\n\ndriver.delete_cookie(\"test1\")\n\nprint(driver.get_cookies())\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Update - XML\nDESCRIPTION: Demonstrates updating the Selenium Java dependency in a Maven `pom.xml` file. It shows the change from Selenium 3.141.59 to Selenium 4.4.0.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<dependencies>\n  <!-- more dependencies ... -->\n  <dependency>\n    <groupId>org.seleniumhq.selenium</groupId>\n    <artifactId>selenium-java</artifactId>\n    <version>3.141.59</version>\n  </dependency>\n  <!-- more dependencies ... -->\n</dependencies>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dependencies>\n    <!-- more dependencies ... -->\n    <dependency>\n        <groupId>org.seleniumhq.selenium</groupId>\n        <artifactId>selenium-java</artifactId>\n        <version>4.4.0</version>\n    </dependency>\n    <!-- more dependencies ... -->\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions in Python\nDESCRIPTION: This Python code shows how to set permissions for specific features in Edge.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_53\n\nLANGUAGE: python\nCODE:\n```\noptions.add_argument('--mute-audio')\n```\n\n----------------------------------------\n\nTITLE: Click and Release with Selenium\nDESCRIPTION: Moves to the center of an element, presses, and releases the left mouse button, simulating a standard click.  It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"clickable\"));\nActions actions = new Actions(driver);\nactions.moveToElement(element).click().perform();\n```\n\n----------------------------------------\n\nTITLE: Python Setup Example (pytest)\nDESCRIPTION: This snippet shows the setup process for a Selenium WebDriver using Python and pytest.  The `pytest.fixture` decorator defines a fixture named `driver` that will be used by test functions.  The WebDriver is initialized and returned for use.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom selenium import webdriver\n\n@pytest.fixture\ndef driver():\n    driver = webdriver.Chrome()\n    yield driver\n```\n\n----------------------------------------\n\nTITLE: Continue Auth Required Request with Credentials in Java\nDESCRIPTION: This Java code snippet demonstrates how to continue a request blocked at the authRequired phase with the provided credentials using Selenium BiDi. It utilizes Network.continueRequest to supply username and password.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nNetwork.addIntercept(devTools, Pattern.compile(\".*\"),\n        new AddInterceptParameters().withPhase(Event.AUTH_REQUIRED))\n    .then(interceptId -> devTools.addListener(Network.authRequired, req -> {\n      Network.continueRequest(devTools, req.getEvent().getRequest().getRequestId(),\n          new ContinueRequestParameters().withAuth(new Auth().withUsername(\"test\")\n              .withPassword(\"test\")));\n    }));\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtualAuthenticatorOptions in JavaScript\nDESCRIPTION: This snippet demonstrates initializing VirtualAuthenticatorOptions in JavaScript. Properties like protocol, domain, crossOrigin, and residentKeyRequired are configured. It is necessary for setting the virtual authenticator's parameters prior to use. It requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = new VirtualAuthenticatorOptions()\n  .setProtocol(VirtualAuthenticatorOptions.Protocol.HTTPS)\n  .setDomain('example.com')\n  .setCrossOrigin(false)\n  .setResidentKeyRequired(true);\n```\n\n----------------------------------------\n\nTITLE: Delete Session on Node without Secret cURL\nDESCRIPTION: This snippet deletes a session on a node without using the X-REGISTRATION-SECRET. It assumes no registration secret has been configured. The default Node URL is dynamically resolved.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://<node-URL>/se/grid/node/session/<session-id>' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: DOM Mutation Handlers in CSharp\nDESCRIPTION: This C# snippet demonstrates DOM mutation handling with Chrome DevTools Protocol (CDP) in Selenium. It uses `ExecuteCdpCommand` to enable the debugger and set breakpoints. Requires a running Selenium WebDriver instance connected to Chrome. The breakpoint is intended to trigger upon DOM mutations.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.zh-cn.md#_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.ExecuteCdpCommand(\"Debugger.enable\", new Dictionary<string, object>());\ndriver.ExecuteCdpCommand(\"DOM.enable\", new Dictionary<string, object>());\ndriver.ExecuteCdpCommand(\"DOM.getDocument\", new Dictionary<string, object>());\ndriver.ExecuteCdpCommand(\"DOM.requestChildNodes\", new Dictionary<string, object>());\ndriver.ExecuteCdpCommand(\"DOM.setAttributeValue\", new Dictionary<string, object>());\ndriver.ExecuteCdpCommand(\"Debugger.setBreakpointByCallFrameId\", new Dictionary<string, object>());\ndriver.ExecuteCdpCommand(\"DOM.removeNode\", new Dictionary<string, object>());\n```\n\n----------------------------------------\n\nTITLE: Querying Element Color - Selenium WebDriver\nDESCRIPTION: This snippet retrieves the 'color' and 'background-color' CSS properties of an element with the ID 'login' using Selenium WebDriver in Python, and converts them to Color objects. The code uses `value_of_css_property` method to extract CSS values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nlogin_button_colour = Color.from_string(driver.find_element(By.ID,'login').value_of_css_property('color'))\n\nlogin_button_background_colour = Color.from_string(driver.find_element(By.ID,'login').value_of_css_property('background-color'))\n```\n\n----------------------------------------\n\nTITLE: Adding a Virtual Authenticator in JavaScript\nDESCRIPTION: This snippet shows how to add a virtual authenticator using JavaScript with Selenium. It adds a new virtual authenticator instance to the browser. It requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst devtools = await driver.getDevTools()\nawait devtools.addVirtualAuthenticator(options)\n```\n\n----------------------------------------\n\nTITLE: Switch to Context (Ruby)\nDESCRIPTION: This Ruby code snippet demonstrates how to switch context in Firefox using Selenium and executing JavaScript. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.execute_script(\"Services.prefs.setStringPref('browser.content.context', arguments[0]);\", 'CHROME')\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium using Gem (Ruby)\nDESCRIPTION: Installs the selenium-webdriver gem using the gem command. This downloads and installs the gem and its dependencies from RubyGems.org, making the Selenium library available for Ruby projects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.ja.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngem install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: Fluent API Google Search Query in Java\nDESCRIPTION: This Java code snippet shows how to interact with a Google search page using a fluent interface. It navigates to the Google homepage, instantiates a GoogleSearchPage object, sets the search string, and clicks the search button using chained method calls.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/consider_using_a_fluent_api.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver.get( \"http://www.google.com/webhp?hl=en&amp;tab=ww\" );\nGoogleSearchPage gsp = new GoogleSearchPage(driver);\ngsp.setSearchString().clickSearchButton();\n```\n\n----------------------------------------\n\nTITLE: Deselecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to deselect an option in a multiple select element by its `value` attribute using Selenium WebDriver. The `deselectByValue()` method is used to deselect the option based on the provided value. This method only applies to multiple select lists.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait select.deselectByValue('eggs');\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Service Instance - Ruby\nDESCRIPTION: This snippet demonstrates how to initialize a driver using the default service instance in Ruby. It relies on Selenium's driver management to locate the driver executable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.zh-cn.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :chrome\ndriver.quit\n```\n\n----------------------------------------\n\nTITLE: WebDriver Initialization Ruby\nDESCRIPTION: This snippet shows how to initialize a WebDriver instance for Chrome using Ruby. It uses Selenium::WebDriver.for to create a Chrome driver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.en.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :chrome\n```\n\n----------------------------------------\n\nTITLE: Taking Full Page Screenshots in Firefox with Selenium (Java)\nDESCRIPTION: This Java snippet demonstrates how to take a full page screenshot in Firefox using Selenium. It uses the `getFullPageScreenshotAs` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_47\n\nLANGUAGE: java\nCODE:\n```\nFile output = driver.getFullPageScreenshotAs(OutputType.FILE);\n```\n\n----------------------------------------\n\nTITLE: Disabling Build Check for Edge in Python\nDESCRIPTION: This Python code disables the build check for Edge, allowing the driver to be used with mismatched versions of the Edge browser and msedgedriver. This is generally not recommended and unsupported.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\noptions.add_argument('--disable-build-check')\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository\nDESCRIPTION: This command clones the SeleniumHQ's seleniumhq.github.io repository, which contains example code and documentation. It downloads the entire repository to your local machine.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/python/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/SeleniumHQ/seleniumhq.github.io.git\n```\n\n----------------------------------------\n\nTITLE: Find Element by Partial Link Text - Java\nDESCRIPTION: This snippet shows how to locate a link element using a partial match of its link text in Java. It initializes a ChromeDriver and uses the `findElement` method with `By.partialLinkText` to find the link containing the text 'Official Page'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.partialLinkText(\"Official Page\"));\n```\n\n----------------------------------------\n\nTITLE: Using begin/ensure for driver.quit - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to use a `begin/ensure` block to ensure that `driver.quit` is always called, even if an exception occurs in the `begin` block. This is a robust way to guarantee that the browser session is properly closed, preventing resource leaks in various scenarios. This is used outside of a test context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nbegin\n    #WebDriver code here...\nensure\n    driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Shadow DOM in Ruby\nDESCRIPTION: This snippet shows how to access elements inside a shadow DOM using Selenium in Ruby. It finds the shadow host element, gets the shadow root, and then finds an element within the shadow root.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\nshadow_host = @driver.find_element(css: '#shadow_host')\nshadow_root = shadow_host.shadow_root\nshadow_content = shadow_root.find_element(css: '#shadow_content')\n```\n\n----------------------------------------\n\nTITLE: Using WebDriverWait in Python\nDESCRIPTION: This resource points to a blog post discussing the usage of `WebDriverWait` in Python.  `WebDriverWait` is part of the Selenium WebDriver API and is used for explicit waiting, allowing a script to pause execution until a certain condition is met. This is crucial for handling dynamic web pages where elements may not be immediately available.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/a-smattering-of-selenium-101.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Using the LoadableComponent in a test with Java\nDESCRIPTION: This code demonstrates how to use the `LoadableComponent` in a test. Calling the `get()` method on the `EditIssue` Page Object will ensure that the page is loaded before any interactions occur. If the page isn't loaded the `load()` method will be called.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.en.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nEditIssue page = new EditIssue(driver).get();\n```\n\n----------------------------------------\n\nTITLE: JSON Response: Retrieving a Downloaded File\nDESCRIPTION: This JSON snippet represents a sample response when retrieving a downloaded file. The `filename` key contains the filename, and the `contents` key contains the Base64 encoded, zipped contents of the file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"value\": {\n\t\t\"filename\": \"Red-blue-green-channel.jpg\",\n\t\t\"contents\": \"UEsDBBQACAgIAJpagVYAAAAAAAAAAAAAAAAaAAAAUmVkLWJsAAAAAAAAAAAAUmVkLWJsdWUtZ3JlZW4tY2hhbm5lbC5qcGdQSwUGAAAAAAEAAQBIAAAAcNkAAAAA\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Open a new tab using WebDriver BiDi in Java\nDESCRIPTION: This snippet demonstrates how to open a new browsing context in a new tab using the WebDriver BiDi API in Java. It utilizes the `BrowsingContext` class to create a new tab and verifies that a browsing context ID is returned. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(driver, null, BrowsingContext.TypeHint.TAB);\nString id = browsingContext.getId();\n\nassertThat(id).isNotBlank();\n```\n\n----------------------------------------\n\nTITLE: Adding a Virtual Authenticator in Java\nDESCRIPTION: This snippet adds a virtual authenticator to the browser context in Java using the previously defined VirtualAuthenticatorOptions. The authenticator is added through the DevTools interface. It requires Selenium WebDriver and the configured options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nDevTools devTools = ((HasDevTools) driver).getDevTools();\ndevTools.createSessionIfNecessary();\ndevTools.getDomains().getWebAuthn().addVirtualAuthenticator(options);\n\n```\n\n----------------------------------------\n\nTITLE: Adding Selenium WebDriver to Gemfile in Ruby\nDESCRIPTION: This snippet demonstrates how to add Selenium WebDriver version 4.4.0 to a Gemfile in Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ngem 'selenium-webdriver', '~> 4.4.0'\n```\n\n----------------------------------------\n\nTITLE: Cloning the SeleniumHQ Repository\nDESCRIPTION: This command clones the seleniumhq.github.io repository to your local machine. It uses Git to download the repository's contents, including the JavaScript examples.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/javascript/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/SeleniumHQ/seleniumhq.github.io.git\n```\n\n----------------------------------------\n\nTITLE: Force Create Process API in Java\nDESCRIPTION: This Java code demonstrates how to force the launching of Internet Explorer using the CreateProcess API by calling the `useCreateProcessApiToLaunchIe()` method on the `InternetExplorerOptions` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.Capabilities;\nimport org.openqa.selenium.ie.InternetExplorerDriver;\nimport org.openqa.selenium.ie.InternetExplorerOptions;\n\npublic class ieTest {\n    public static void main(String[] args) {\n        InternetExplorerOptions options = new InternetExplorerOptions();\n        options.useCreateProcessApiToLaunchIe();\n        InternetExplorerDriver driver = new InternetExplorerDriver(options);\n        try {\n            driver.get(\"https://google.com/ncr\");\n            Capabilities caps = driver.getCapabilities();\n            System.out.println(caps);\n        } finally {\n            driver.quit();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning SeleniumHQ repository using Git (Shell)\nDESCRIPTION: This code snippet demonstrates how to clone the SeleniumHQ documentation repository from GitHub to a local machine using Git, and then change the current directory to the cloned repository. This is the first step in the contribution process, allowing contributors to make changes locally before submitting them.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.zh-cn.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n% git clone git@github.com:seleniumhq/seleniumhq.github.io.git\n% cd seleniumhq.github.io\n```\n\n----------------------------------------\n\nTITLE: Using a Pen with Selenium (Java)\nDESCRIPTION: This Java code snippet demonstrates how to create and use a Pen input source in Selenium to interact with a web page. It creates a pen device and moves it to a specific element, then performs a pen down and pen up action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nPen pen = new Pen(\"pen1\");\nWebElement element = driver.findElement(By.id(\"example\"));\n\nnew Actions(driver)\n  .moveToElement(element)\n  .tick(pen.createPointerMove(Duration.ofMillis(1), PointerInput.Origin.fromElement(element), 0, 0))\n  .tick(pen.createPointerDown(PointerInput.MouseButton.LEFT.asArg()))\n  .tick(pen.createPointerUp(PointerInput.MouseButton.LEFT.asArg()))\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates moving the mouse by a relative offset from its current position. It utilizes the Actions class and requires a WebDriver instance to interact with the browser. The moveByOffset method takes x and y coordinates as parameters.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_59\n\nLANGUAGE: kotlin\nCODE:\n```\nval actions = Actions(driver)\nactions.moveByOffset(30, -10).perform()\n```\n\n----------------------------------------\n\nTITLE: Create Unicorn and Submit Form (Ruby)\nDESCRIPTION: This snippet demonstrates creating a Unicorn object with specific attributes and submitting the form using the add_unicorn_page object. It shows how the Unicorn object is passed to the create_unicorn() method to fill out the form and click submit. It assumes Unicorn, UnicornColors, UnicornAccessories, UnicornAdornments, AddUnicornPage, AccountPage, and UnicornConfirmationPage are defined elsewhere.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\n# The Unicorn is a top-level Object--it has attributes, which are set here.\n# This only stores the values; it does not fill out any web forms or interact\n# with the browser in any way.\nsparkles = Unicorn.new('Sparkles', UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS)\n\n# Since we're already \"on\" the account page, we have to use it to get to the\n# actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n# takes us there.\nadd_unicorn_page = account_page.add_unicorn\n\n# Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n# its createUnicorn() method. This method will take Sparkles' attributes,\n# fill out the form, and click submit.\nunicorn_confirmation_page = add_unicorn_page.create_unicorn(sparkles)\n```\n\n----------------------------------------\n\nTITLE: IE Command Line Options - CSharp\nDESCRIPTION: This snippet demonstrates how to use command line arguments with Internet Explorer using C#. It forces the CreateProcess API to be used and sets the browser command line arguments to '-k' (kiosk mode). It requires setting ForceCreateProcessApi to true for the command line arguments to function correctly.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_21\n\nLANGUAGE: CSharp\nCODE:\n```\nusing System;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.IE;\n\nnamespace ieTest {\n class Program {\n  static void Main(string[] args) {\n   InternetExplorerOptions options = new InternetExplorerOptions();\n   options.ForceCreateProcessApi = true;\n   options.BrowserCommandLineArguments = \"-k\";\n   IWebDriver driver = new InternetExplorerDriver(options);\n   driver.Url = \"https://google.com/ncr\";\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Background CSharp\nDESCRIPTION: This code snippet demonstrates how to set whether to print background colors and images in C# with Selenium, using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_16\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.BackgroundsEnabled = true;\n\nvar print = (IPrintsPage)driver;\nstring base64Pdf = print.Print(printOptions);\n```\n\n----------------------------------------\n\nTITLE: BELLATRIX C# Assertion Examples\nDESCRIPTION: This C# code snippet showcases how to use the Validate methods of BELLATRIX for assertions. It demonstrates validating if an element is disabled, validating inner text with timeout, and validating if an element is not visible. It utilizes the element's Validate methods to handle the complexity of waiting for some condition to happen.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/bellatrix-test-automation-framework/index.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nupdateCart.ValidateIsDisabled();\ntotalSpan.ValidateInnerTextIs(\"120.00€\", timeout: 30, sleepInterval: 2);\nmessageAlert.ValidateIsNotVisible();\n```\n\n----------------------------------------\n\nTITLE: Ruby Selenium WebDriver Gemfile Configuration\nDESCRIPTION: Adds the selenium-webdriver gem with version constraint '~> 4.4.0' to the Gemfile, specifying the Selenium WebDriver dependency for a Ruby project.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ngem 'selenium-webdriver', '~> 4.4.0'\n```\n\n----------------------------------------\n\nTITLE: Remove Node without Secret with cURL\nDESCRIPTION: This snippet removes a Node without using the X-REGISTRATION-SECRET. It assumes no registration secret has been configured. The Grid URL depends on the deployment mode (Standalone, Hub-Node, or Router).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://<Router-URL>/se/grid/distributor/node/<node-id>' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Get standalone component configuration help\nDESCRIPTION: This command retrieves component-specific configuration information for the standalone Selenium Grid role. It details available options and settings for the standalone component.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.ja.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar standalone --help\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies in Python\nDESCRIPTION: This code snippet demonstrates how to delete all cookies from the current browser context using Selenium WebDriver in Python. It navigates to a website, adds two cookies, and then deletes all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://www.example.com\")\ncookie1 = { 'name' : 'test1', 'value' : 'cookie1' }\ndriver.add_cookie(cookie1)\ncookie2 = { 'name' : 'test2', 'value' : 'cookie2' }\ndriver.add_cookie(cookie2)\n\n# deletes all cookies\ndriver.delete_all_cookies()\n```\n\n----------------------------------------\n\nTITLE: Release Key Action in Selenium\nDESCRIPTION: Demonstrates how to simulate releasing a pressed key using Selenium's Actions API. This involves creating an Actions object, using the keyUp method to release a key, and then performing the action.  It shows how to press and hold Shift key while typing some text, and then release the Shift key.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nActions actions = new Actions(driver);\nactions.KeyDown(Keys.Shift)\n    .SendKeys(\"text\")\n    .KeyUp(Keys.Shift)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - None - Python\nDESCRIPTION: This Python snippet shows how to set the page load strategy to 'none' using ChromeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\noptions = ChromeOptions()\noptions.page_load_strategy = PageLoadStrategy.NONE\n```\n\n----------------------------------------\n\nTITLE: Remove Credential in Java\nDESCRIPTION: This java code gets credential by User ID and removes a credential from the authenticator based on the passed credential id.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nList<GetCredentialResponse> credentials = devTools.getDomains().webAuthn().getCredentials();\nString credId = null;\nfor (GetCredentialResponse credential : credentials) {\n  if (credential.getUserId().equals(Base64.getEncoder().encodeToString(\"user4\".getBytes(StandardCharsets.UTF_8)))) {\n    credId = credential.getCredentialId();\n    break;\n  }\n}\ndevTools.getDomains().webAuthn().removeCredential(credId);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Output in Ruby\nDESCRIPTION: This snippet demonstrates how to configure logger output to a file in Ruby using the `Logger` class. It redirects the logger output to a specified file path. Requires the `selenium-webdriver` gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nSelenium::WebDriver.logger.output = 'selenium.log'\n```\n\n----------------------------------------\n\nTITLE: Comparing Color Objects\nDESCRIPTION: This snippet demonstrates how to directly compare a Color object (login_button_background_colour) with a predefined Color constant (HOTPINK) using the equality operator (==) in Python, for asserting that the background color of a login button matches a specific color.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nassert login_button_background_colour == HOTPINK\n```\n\n----------------------------------------\n\nTITLE: Remove Network Intercept - Java\nDESCRIPTION: This Java snippet demonstrates how to remove a network intercept previously established with Selenium BiDi. It uses the intercept ID to identify and remove the specific intercept, allowing the application to stop monitoring the associated network traffic.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\ndriver.getDevTools().createSession();\nNetwork network = new Network(driver.getDevTools());\nString intercept = network.addIntercept(\"*.example.com/*\", new AddInterceptParameters()).getId();\nnetwork.removeIntercept(intercept);\n\n```\n\n----------------------------------------\n\nTITLE: Relay Configuration to External WebDriver Service\nDESCRIPTION: Shows how to configure a Selenium Node to relay commands to an external WebDriver service, such as an Appium server. It specifies the URL of the external service, its status endpoint, and the supported stereotypes, defining the number of slots (max-sessions) for each stereotype.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.en.md#_snippet_6\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\ndetect-drivers = false\n\n[relay]\n# Default Appium/Cloud server endpoint\nurl = \"http://localhost:4723/wd/hub\"\nstatus-endpoint = \"/status\"\n# Optional, enforce a specific protocol version in HttpClient when communicating with the endpoint service status (e.g. HTTP/1.1, HTTP/2)\nprotocol-version = \"HTTP/1.1\"\n# Stereotypes supported by the service. The initial number is \"max-sessions\", and will allocate \n# that many test slots to that particular configuration\nconfigs = [\n  \"5\", \"{\\\"browserName\\\": \\\"chrome\\\", \\\"platformName\\\": \\\"android\\\", \\\"appium:platformVersion\\\": \\\"11\\\"}\"\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Authentication via CDP in Python\nDESCRIPTION: This Python code snippet demonstrates how to set basic authentication credentials for a Chrome browser session using the Chrome DevTools Protocol (CDP). It uses `add_listener` to intercept network requests and sets the `Authorization` header with the provided username and password. The driver instance and network domain are essential for executing this code.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndriver.register(\n    UsernameAndPassword('test', 'test'))\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element by Class Name\nDESCRIPTION: This snippet demonstrates how to find the first element matching a specific class name within the entire DOM using Selenium WebDriver. It uses the `findElement` method with `By.className` to locate the first element with the class 'tomatoes'. The result is a WebElement object representing the located element, which can be used for further actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst vegetable = await driver.findElement(By.className('tomatoes'));\n```\n\n----------------------------------------\n\nTITLE: Delete Node (No Secret)\nDESCRIPTION: Removes a node from the Selenium Grid when no registration secret was configured. This does not stop any running sessions on the node, but prevents new sessions from being routed to it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.ja.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://<Router-URL>/se/grid/distributor/node/<node-id>' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi - JavaScript\nDESCRIPTION: This code snippet shows how to enable BiDi in JavaScript using Selenium. The `enableBidi()` method on the `Options` object enables the WebSocket connection for bidirectional communication, allowing you to use the WebDriver BiDi protocol.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.pt-br.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nOptions().enableBidi();\n```\n\n----------------------------------------\n\nTITLE: Network Conditions - CSharp\nDESCRIPTION: This snippet is a placeholder as there is no code provided. The goal is to show how to simulate Network Conditions with C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_55\n\nLANGUAGE: CSharp\nCODE:\n```\n// No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Levels in Python\nDESCRIPTION: This snippet demonstrates how to change the level of the logger in Python. The logging level is set to DEBUG, which ensures that all debugging information is captured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlogger.setLevel(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Disown Handles in Realm - Java\nDESCRIPTION: This snippet demonstrates how to disown handles in a realm using Java and the WebDriver BiDi API. It employs the `Script.disown` method to release object handles within the specified realm. The object handles and realm ID are necessary.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nbidi.script().disown(new Realm(realmId), List.of(\"handle\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins - Java\nDESCRIPTION: This Java snippet demonstrates setting page margins using PrintOptions and PageMargin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nPageMargin margin = new PageMargin();\nmargin.setTop(1.0);\nmargin.setBottom(1.0);\nmargin.setLeft(1.0);\nmargin.setRight(1.0);\nprintOptions.setPageMargin(margin);\n```\n\n----------------------------------------\n\nTITLE: Remove Network Intercept - Selenium BiDi - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to remove a network intercept using Selenium's BiDi API. It removes an intercept using `Network.removeIntercept` with its ID, disabling the intercept. Requires Selenium 4.18 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait bidiNetwork.removeIntercept(interceptionId);\n```\n\n----------------------------------------\n\nTITLE: Creating and Logging in a User (Ruby)\nDESCRIPTION: This Ruby code snippet shows how to create a user with read-only permissions using a UserFactory and log in as that user. It does not show the call to log in as the user.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n# Create a user who has read-only permissions--they can configure a unicorn,\n# but they do not have payment information set up, nor do they have\n# administrative privileges. At the time the user is created, its email\n# address and password are randomly generated--you don't even need to\n# know them.\nuser = UserFactory.create_common_user #This method is defined elsewhere.\n\n# Log in as this user.\n# Logging in on this site takes you to your personal \"My Account\" page, so the\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in JavaScript\nDESCRIPTION: Demonstrates how to select an option in a Select element by its value attribute in JavaScript. It uses the selectByValue() method. Throws NoSuchElementException if matching option is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nawait select.selectByValue('one');\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Exception Handler in Ruby\nDESCRIPTION: This snippet demonstrates how to add a handler for JavaScript exceptions using WebDriver BiDi in Ruby. It uses the `add_event_listener` method to listen for JavaScript exception events.  It requires a WebDriver BiDi enabled Selenium driver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.pt-br.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.add_event_listener('script.exception_thrown') do |params, context|\n  pp params\nend\n```\n\n----------------------------------------\n\nTITLE: Querying Element Color - Selenium WebDriver\nDESCRIPTION: This snippet retrieves the 'color' and 'background-color' CSS properties of an element with the ID 'login' using Selenium WebDriver in Ruby, and converts them to Color objects. The `css_value` method is used to extract CSS values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\nlogin_button_colour = Color.from_string(driver.find_element(id: 'login').css_value('color'))\n\nlogin_button_background_colour = Color.from_string(driver.find_element(id: 'login').css_value('background-color'))\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Listing Downloaded Files\nDESCRIPTION: This JSON snippet shows the format of response after GET request to `/session/<sessionId>/se/files` with a `names` key with array of file names.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": {\n    \"names\": [\n      \"Red-blue-green-channel.jpg\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Completed Event - Selenium BiDi - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to listen for the 'Response Completed' event using Selenium BiDi. It captures and logs the URL after the response has completely loaded using `Network.onResponseCompleted`. Requires Selenium 4.18 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait bidiNetwork.onResponseCompleted(event => {\n  console.log(event.response.url);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Pause in Actions - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to add a pause between actions using the `pause` method with a specified duration. It uses the Actions API to perform a pause of 100 milliseconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.en.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nActions(driver)\n  .pause(Duration.ofMillis(100))\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its `value` attribute using Selenium WebDriver. The `select_by(:value, 'one')` method is used to select the option based on the provided value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\nselect.select_by(:value, 'one')\n```\n\n----------------------------------------\n\nTITLE: Force Create Process API - JavaScript\nDESCRIPTION: This snippet demonstrates forcing the CreateProcess API in JavaScript for Internet Explorer. The `forceCreateProcessApi(true)` method is called on the `ie.Options` object before building the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ie = require('selenium-webdriver/ie');\nlet options = new ie.Options();\noptions.forceCreateProcessApi(true);\n\ndriver = await env.builder()\n          .setIeOptions(options)\n          .build();\n```\n\n----------------------------------------\n\nTITLE: GraphQL: Querying All Session Details for All Nodes (curl)\nDESCRIPTION: This curl command retrieves session details (ID, capabilities, start time, URI, node ID, session duration) for all sessions on all nodes in the Selenium Grid. It uses the GraphQL API and requires the `curl` tool.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.ja.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ sessionsInfo { sessions { id, capabilities, startTime, uri, nodeId, nodeId, sessionDurationMillis } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - Selenium WebDriver - Ruby\nDESCRIPTION: This snippet sets the position of the browser window to the top-left corner (0, 0) of the primary display using the Selenium WebDriver API in Ruby. Requires the selenium-webdriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_32\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.window.move_to(0,0)\n```\n\n----------------------------------------\n\nTITLE: Get browsing context realms by type - Java\nDESCRIPTION: This Java code retrieves the realms by type for the current browsing context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void getBrowsingContextRealmsByType() {\n        BrowsingContext browsingContext = new BrowsingContext(driver, driver.getWindowHandle());\n        List<RealmInfo> realmInfo = browsingContext.getRealms(null, \"window\");\n        assertTrue(realmInfo.size() > 0);\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Unsigned Add-ons (Temporary) in Firefox with Selenium (Ruby)\nDESCRIPTION: This snippet shows how to install an unsigned (temporary) add-on using Selenium WebDriver in Ruby. It specifies the directory containing the addon.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nid = @driver.install_addon('webextensions-selenium-example', temporary: true)\n```\n\n----------------------------------------\n\nTITLE: Setting Log Output to File - Java\nDESCRIPTION: Demonstrates how to configure the GeckoDriver service to output logs to a specific file in Java. This helps in debugging Selenium tests. Requires Selenium WebDriver and GeckoDriverService.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\nGeckoDriverService service = new GeckoDriverService.Builder()\n    .withLogFile(new File(\"geckodriver.log\"))\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Colors in Kotlin\nDESCRIPTION: This code shows how to define Color objects from basic color names like 'black', 'chocolate', and 'hotpink' using the Color.fromString() method in Kotlin. This is useful for comparing against predefined color values in web elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nprivate val BLACK = Color.fromString(\"black\")\nprivate val CHOCOLATE = Color.fromString(\"chocolate\")\nprivate val HOTPINK = Color.fromString(\"hotpink\")\n```\n\n----------------------------------------\n\nTITLE: Managing Chrome beta with Selenium Manager\nDESCRIPTION: This snippet shows how to use Selenium Manager to specifically manage the Chrome beta version and its corresponding ChromeDriver. It demonstrates the automatic downloading of the Chrome beta browser and the matching ChromeDriver to the local cache.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/whats-new-in-selenium-manager-with-selenium-4.11.0.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n> selenium-manager --browser chrome --debug --browser-version beta\nDEBUG   Checking chromedriver in PATH\nDEBUG   Running command: chromedriver --version\nDEBUG   Output: \"\"\nDEBUG   chromedriver not found in PATH\nDEBUG   Checking chrome in PATH\nDEBUG   Running command: where chrome\nDEBUG   Output: \"\"\nDEBUG   chrome not found in PATH\nDEBUG   chrome has not been discovered in the system\nDEBUG   Reading metadata from https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json\nDEBUG   Required browser: chrome 116.0.5845.49\nDEBUG   Downloading chrome 116.0.5845.49 from https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/116.0.5845.49/win64/chrome-win64.zip\nDEBUG   chrome 116.0.5845.49 has been downloaded at C:\\Users\\boni\\.cache\\selenium\\chrome\\win64\\116.0.5845.49\\chrome.exe\nDEBUG   Reading metadata from https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json\nDEBUG   Required driver: chromedriver 116.0.5845.49\nDEBUG   Driver URL: https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/116.0.5845.49/win64/chromedriver-win64.zip\nINFO    Driver path: C:\\Users\\boni\\.cache\\selenium\\chromedriver\\win64\\116.0.5845.49\\chromedriver.exe\nINFO    Browser path: C:\\Users\\boni\\.cache\\selenium\\chrome\\win64\\116.0.5845.49\\chrome.exe\n```\n\n----------------------------------------\n\nTITLE: Uninstall Firefox Extension (C#)\nDESCRIPTION: This C# code snippet demonstrates how to uninstall a Firefox extension.  It retrieves the driver as an `IAddsExtensions` interface in order to uninstall the extension. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\n((IAddsExtensions) driver).UninstallExtension(\"extension@example.com\");\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to None in Ruby\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'none' in Ruby. The WebDriver waits until the initial page is downloaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_20\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Options.new(page_load_strategy: :none)\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element with Offset - CSharp\nDESCRIPTION: This CSharp code snippet demonstrates how to scroll from an element with an offset using Selenium's Actions API and Wheel class. It takes an element, x offset, y offset, delta x, and delta y values as input. It scrolls from the origin point calculated from the center of the specified element, offset by given x and y values. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"meal\"));\nnew Actions(driver)\n    .ScrollFromOrigin(WheelInput.ScrollOrigin.FromElement(element, 25, 25), 50, 100)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Before Request Sent Event in Java\nDESCRIPTION: This Java code snippet listens for the 'beforeRequestSent' network event using Selenium BiDi. It requires setting up a listener on the BiDi devTools.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\ndevTools.addListener(Network.beforeRequestSent, event -> {\n  String url = event.getEvent().getRequest().getUrl();\n  Matcher matcher = pattern.matcher(url);\n  if (matcher.find()) {\n    Network.continueRequest(devTools, event.getEvent().getRequest().getRequestId(), new ContinueRequestParameters());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Console Message Handler with WebDriver BiDi in Ruby\nDESCRIPTION: This code snippet shows how to remove a previously added console message handler using WebDriver BiDi in Ruby. It uses the `remove_event_listener` method with the handler ID obtained when adding the handler.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.ja.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.bidi.script.remove_event_listener(\n  event: 'script.message',\n  listener: add_listener['result']['handle']\n)\n```\n\n----------------------------------------\n\nTITLE: Open a new window using WebDriver BiDi in JavaScript\nDESCRIPTION: This snippet demonstrates how to open a new browsing context in a new window using the WebDriver BiDi API in JavaScript. It uses the `BrowsingContext` to create a new window and asserts that a context ID is returned. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await browsingContext.create();\nexpect(context.context).toBeDefined();\n```\n\n----------------------------------------\n\nTITLE: Install Unsigned Firefox Extension (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to install an unsigned Firefox extension using Selenium. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.installAddon('/path/to/unpacked/extension', true);\n```\n\n----------------------------------------\n\nTITLE: Remove All Credentials in Java\nDESCRIPTION: This snippet removes all credentials from the authenticator in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nList<GetCredentialResponse> credentials = devTools.getDomains().webAuthn().getCredentials();\nfor (GetCredentialResponse credential : credentials) {\n  devTools.getDomains().webAuthn().removeCredential(credential.getCredentialId());\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Element Attribute\nDESCRIPTION: This snippet demonstrates how to retrieve the value of a specific attribute of an element using Selenium. The `getAttribute` method is used to fetch the value of the `title` attribute of the located element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_41\n\nLANGUAGE: Kotlin\nCODE:\n```\nval title = searchBox.getAttribute(\"title\")\n```\n\n----------------------------------------\n\nTITLE: Disown handles in realm - JavaScript\nDESCRIPTION: This JavaScript code disowns specified handles in a realm. It fetches all the available realms and disowns the handles from the first one.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('disown handles in a realm', async () => {\n    const browsingContext = await new BrowsingContext(driver, tabId);\n    let realms = await browsingContext.script.getRealms({context: browsingContext.context});\n\n    await browsingContext.script.disown({\n      handles: ['1:1'],\n      target: {realm: realms[0].realm},\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions in Kotlin\nDESCRIPTION: This code snippet shows how to release all pressed keys and pointer buttons in Kotlin. It uses the `releaseAll` method on the WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.pt-br.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\ndriver.releaseAll()\n```\n\n----------------------------------------\n\nTITLE: Sending CDP Command - Python\nDESCRIPTION: This Python code snippet shows how to send a CDP command using Selenium. The `execute_cdp_cmd` method of the WebDriver is used. The example requires an active Selenium WebDriver session with a Chrome browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/_index.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nresult = driver.execute_cdp_cmd('Network.enable', {})\n        driver.execute_cdp_cmd('Network.setUserAgentOverride',\n                                 {\n                                     'userAgent': 'python-selenium'\n                                 })\n        print(result)\n```\n\n----------------------------------------\n\nTITLE: Take Element Screenshot - Selenium\nDESCRIPTION: This C# snippet demonstrates how to capture a screenshot of a specific element on the current browser window using Selenium WebDriver. It navigates to a website, finds the h1 element using CSS selector, takes a screenshot of the element, and saves it as a PNG image. Requires the Selenium.WebDriver and Selenium.Chrome NuGet packages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_79\n\nLANGUAGE: CSharp\nCODE:\n```\n    using OpenQA.Selenium;\n    using OpenQA.Selenium.Chrome;\n    using OpenQA.Selenium.Support.UI;\n\n    // Webdriver\n    var driver = new ChromeDriver();\n    driver.Navigate().GoToUrl(\"http://www.example.com\");\n\n    // Fetch element using FindElement\n    var webElement = driver.FindElement(By.CssSelector(\"h1\"));\n\n    // Screenshot for the element\n    var elementScreenshot = (webElement as ITakesScreenshot).GetScreenshot();\n    elementScreenshot.SaveAsFile(\"screenshot_of_element.png\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Pause in Actions API - Kotlin\nDESCRIPTION: This Kotlin snippet shows how to create a pause between actions using Selenium's Actions API. It navigates to a specific URL, creates an Actions object, pauses for 5 seconds using pause(Duration.ofSeconds(5)), and executes the action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.ja.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.get(\"https://selenium.dev/selenium/web/mouse_interaction.html\")\n\nval actions = Actions(driver)\nactions.pause(Duration.ofSeconds(5))\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Setting acceptInsecureCerts Capability in Python\nDESCRIPTION: This code snippet demonstrates how to set the `acceptInsecureCerts` capability to true in Python using ChromeOptions. This will configure the browser to accept insecure certificates. It shows the instantiation of options and setting the desired capability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\noptions = Options()\noptions.accept_insecure_certs = True\n```\n\n----------------------------------------\n\nTITLE: Navigate to a URL using WebDriver BiDi in Java\nDESCRIPTION: This snippet demonstrates how to navigate to a specific URL using WebDriver BiDi in Java. It uses the `BrowsingContext` class to navigate to the desired URL and verifies the resulting URL. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(driver, null);\nString url = joining(getServerUrl(), \"/empty.html\");\nbrowsingContext.navigate(url);\n\neventWaiter.wait(NavigationStartedEvent.class);\nNavigationInfo completeEvent = eventWaiter.wait(NavigationInfo.class);\n\nassertThat(completeEvent.getUrl()).isEqualTo(url);\n```\n\n----------------------------------------\n\nTITLE: Parallel Browser Testing with PHP, Selenium, and Sauce OnDemand\nDESCRIPTION: This article details how to perform parallel automated browser testing using PHP, Selenium, and Sauce OnDemand. It's mentioned that while focused on Sauce OnDemand, the concepts might be applicable elsewhere.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/a-smattering-of-selenium-28.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Setting User Verified in Python\nDESCRIPTION: This python code sets whether the user is verified. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\ndevtools.set_user_verified(True)\n```\n\n----------------------------------------\n\nTITLE: Getting All Options from Select in Selenium\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of all options available in a <select> element using Selenium WebDriver. The `options` method is used to obtain the list of WebElement objects representing the options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = select.options\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium in Java\nDESCRIPTION: This snippet demonstrates how to start a Selenium WebDriver session in Java, navigate to a webpage, and close the browser. It requires the Selenium WebDriver dependency to be configured in the project.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class HelloSelenium {\n    public static void main(String[] args) {\n        WebDriver driver = new ChromeDriver();\n\n        driver.get(\"https://www.selenium.dev/selenium/web/index.html\");\n\n        driver.quit();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RedisBackedSessionMap with TOML\nDESCRIPTION: This TOML configuration file sets up the RedisBackedSessionMap for Selenium Grid. It specifies the scheme, implementation class, hostname, and port for connecting to the Redis server. This configuration enables the Grid to store session information in Redis, leveraging its speed and in-memory storage capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.en.md#_snippet_8\n\nLANGUAGE: TOML\nCODE:\n```\n[sessions]\nscheme = \"redis\"\nimplementation = \"org.openqa.selenium.grid.sessionmap.redis.RedisBackedSessionMap\"\nhostname = \"localhost\"\nport = 6379\n```\n\n----------------------------------------\n\nTITLE: Creating Transparent Color Object\nDESCRIPTION: This snippet demonstrates how to create a Color object for the 'transparent' color value in Ruby, using the Color.from_string() method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\nTRANSPARENT = Color.from_string('transparent')\n```\n\n----------------------------------------\n\nTITLE: Failing Button Click (No Frame Switch)\nDESCRIPTION: This code snippet shows an example of how an attempt to click a button within an IFrame will fail without first switching to the IFrame. It demonstrates the need to change the driver's focus to the frame before interacting with the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This won't work\nawait driver.findElement(By.css('button')).click();\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Elements Before Selenium 4 - Java\nDESCRIPTION: This Java code shows how to find multiple elements using specific methods like `findElementsByClassName`, `findElementsByCssSelector`, etc., which are deprecated in Selenium 4. These methods are part of the `FindsBy` interface and return a list of elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\ndriver.findElementsByClassName(\"className\");\ndriver.findElementsByCssSelector(\".className\");\ndriver.findElementsById(\"elementId\");\ndriver.findElementsByLinkText(\"linkText\");\ndriver.findElementsByName(\"elementName\");\ndriver.findElementsByPartialLinkText(\"partialText\");\ndriver.findElementsByTagName(\"elementTagName\");\ndriver.findElementsByXPath(\"xPath\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Resident Credential in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a non-resident (stateless) credential in JavaScript. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait devtools.addCredential()\n```\n\n----------------------------------------\n\nTITLE: Close a tab/window in Java\nDESCRIPTION: This snippet demonstrates how to close a tab or window using WebDriver BiDi in Java. It creates a new window, retrieves its ID, and then closes it.  It verifies that the browsing context is successfully closed. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(driver, null);\nString id = browsingContext.getId();\n\nbrowsingContext.close();\n\nWait<WebDriver> wait = new FluentWait<>(driver).withTimeout(Duration.ofSeconds(5));\n\nwait.until(d -> {\n  try {\n    new BrowsingContext(driver, id).getId();\n    return false;\n  } catch (Exception e) {\n    return true;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element w/ Offset (CSharp)\nDESCRIPTION: This C# code snippet shows scrolling from an element with a specified offset and amount. Requires Selenium WebDriver and Actions class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"id-of-element\"));\nnew Actions(driver)\n    .ScrollFromOrigin(element, 25, 25, 100, 200)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Getting Credential in C#\nDESCRIPTION: This C# code snippet retrieves the credentials from the authenticator and prints out each of credential ID. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_25\n\nLANGUAGE: CSharp\nCODE:\n```\nGetCredentialsResponse response = await session.SendCommand(new GetCredentialsCommandSettings());\nList<Credential> credentials = response.Credentials;\ncredentials.ForEach(credential =>\n{\n    Console.WriteLine(credential.Id);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy in Ruby\nDESCRIPTION: This Ruby code configures a proxy server. Replace '<HOST:PORT>' with the actual proxy address.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_52\n\nLANGUAGE: Ruby\nCODE:\n```\nSelenium::WebDriver::Options.new(args: ['--proxy-server=http://<HOST:PORT>'])\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its index (position) using Selenium WebDriver. The `select_by_index()` method is used to select the option based on its index, starting from 0.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nselect.select_by_index(0)\n```\n\n----------------------------------------\n\nTITLE: Navigating to a URL in Selenium WebDriver (JavaScript)\nDESCRIPTION: Demonstrates how to open a website using Selenium WebDriver in JavaScript. The `get` method navigates to the specified URL.  Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.get('https://www.selenium.dev/')\n```\n\n----------------------------------------\n\nTITLE: Displaying Selenium Grid Tracing Configuration Information\nDESCRIPTION: This command retrieves and displays information on how to configure and use tracing with OpenTelemetry and Jaeger.  Tracing is enabled by default. Replace `<version>` with the actual Selenium server version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.pt-br.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar info tracing\n```\n\n----------------------------------------\n\nTITLE: Set Page Margins CSharp\nDESCRIPTION: This code snippet demonstrates how to set the page margins for printing in C# with Selenium, using PrintOptions and PageMargin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_10\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nPageMargin pageMargin = new PageMargin { Top = 10 };\nprintOptions.PageMargins = pageMargin;\n\nvar print = (IPrintsPage)driver;\nstring base64Pdf = print.Print(printOptions);\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium WebDriver in JavaScript using npm\nDESCRIPTION: This snippet shows how to install Selenium WebDriver in a JavaScript project using npm.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nnpm install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: DOM Mutation Handler Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to use Chrome DevTools Protocol (CDP) in Selenium to handle DOM mutations. It enables the debugger and then disables it. The approach will be replaced by WebDriver BiDi in the future.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.pt-br.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\ndebugger.enable\n```\n\n----------------------------------------\n\nTITLE: Scroll by Amount using Selenium Wheel - Java\nDESCRIPTION: This Java code snippet demonstrates how to scroll by a given amount using Selenium's Actions API and Wheel class. It takes delta x and delta y values as input, which represent the amount to scroll horizontally and vertically, respectively. Negative values indicate scrolling left and up. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nnew Actions(driver)\n  .scrollByAmount(50, 100)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Call function in browsing context - Java\nDESCRIPTION: This code snippet demonstrates how to call a function within a browsing context using Selenium's BiDi API in Java. It sets up a BiDi session, navigates to a URL, defines a function in the browsing context, and then calls that function using `callFunction`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void callFunctionInBrowsingContext() {\n        String url = getHtmlPage();\n        driver.get(url);\n\n        BrowsingContext browsingContext = new BrowsingContext(driver, driver.getWindowHandle());\n        String functionDefinition =\n            \"() => {\" +\n            \"  window.testVariable = 'here I am';\" +\n            \"  return window.testVariable;\" +\n            \"}\";\n        FunctionRealmInfo info = browsingContext.callFunction(functionDefinition, false, null);\n        assertEquals(info.getResult().getString(), \"here I am\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element using Selenium Wheel (Kotlin)\nDESCRIPTION: Scrolls from a specified element by a given amount.  Requires the element, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"idOfMyElement\"))\nActions(driver)\n  .scrollFromOrigin(WheelInput.Origin.fromElement(element), 20, 50)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Get Current URL with Selenium\nDESCRIPTION: Retrieves the current URL from the browser's address bar using Selenium WebDriver. Examples are provided in Java, Python, C#, Ruby, and JavaScript, demonstrating how to access the `driver.getCurrentUrl()` method or equivalent property to get the URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.ja.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ndriver.getCurrentUrl()\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins in Selenium Java\nDESCRIPTION: This Java code snippet demonstrates how to set the page margins using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nPrintOptions.PageMargin pageMargin = new PrintOptions.PageMargin(1.0, 2.0, 3.0, 4.0);\nprintOptions.setPageMargin(pageMargin);\n\nassertThat(printOptions.getPageMargin()).isEqualTo(pageMargin);\n```\n\n----------------------------------------\n\nTITLE: Continue Auth Required Request - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to continue a network request blocked at the 'authRequired' phase using Selenium BiDi. It provides credentials (username and password) to proceed with the request.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.continueRequest({\n  auth: {username: 'user', password: 'password'}\n});\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element using Selenium Wheel (CSharp)\nDESCRIPTION: Scrolls from a specified element by a given amount.  Requires the element, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"idOfMyElement\"));\nnew Actions(driver)\n    .ScrollFromOrigin(WheelInput.Origin.FromElement(element), 20, 50)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Ruby\nDESCRIPTION: Demonstrates how to select an option in a Select element by its visible text in Ruby. It uses the select_by(:text, text) method. Throws NoSuchElementException if matching option is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nselect.select_by(:text, 'One')\n```\n\n----------------------------------------\n\nTITLE: Setting acceptInsecureCerts Capability in Java\nDESCRIPTION: This code snippet demonstrates how to set the 'acceptInsecureCerts' capability in Selenium using Java. This capability configures whether the browser should accept insecure TLS certificates during a session. Setting it to 'true' allows the browser to trust invalid certificates.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setAcceptInsecureCerts(true);\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Title with Selenium\nDESCRIPTION: This snippet retrieves the title of the current webpage loaded in the browser using Selenium WebDriver. It shows how to access the 'title' property in different programming languages.  Dependencies: Selenium WebDriver library for the respective language.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.zh-cn.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Title\n```\n\n----------------------------------------\n\nTITLE: Initializing IE Driver without IE present (Java)\nDESCRIPTION: This code snippet demonstrates how to initialize the Internet Explorer Driver when IE is not present on the system (Windows 11 default) using Java.  It uses default options, relying on the driver to locate Edge.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nInternetExplorerOptions options = new InternetExplorerOptions();\nWebDriver driver = new InternetExplorerDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium WebDriver in Ruby using gem\nDESCRIPTION: This snippet demonstrates how to install the latest version of the selenium-webdriver gem in Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngem install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: Getting the Logger in Python\nDESCRIPTION: This snippet shows how to get a logger for the selenium module in Python.  All submodules are matched by referencing the top level module. The logger is then configured with a handler.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlogger = logging.getLogger('selenium')\nlogger.setLevel(logging.INFO)\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Prompt in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to interact with a JavaScript prompt dialog using Selenium WebDriver. It waits for the alert, sends keys to the alert, and then accepts it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/alerts.en.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nalert = wait.until { driver.switch_to.alert }\nalert.send_keys('Selenium')\nalert.accept\n```\n\n----------------------------------------\n\nTITLE: Converting and Comparing Color Formats - Selenium WebDriver\nDESCRIPTION: This snippet shows how to convert a Color object to different formats (HEX, RGBA, RGB) and compare them to static values in Python. This allows for flexible color validation by ensuring the color matches the expected format and value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nassert login_button_background_colour.hex == '#ff69b4'\nassert login_button_background_colour.rgba == 'rgba(255, 105, 180, 1)'\nassert login_button_background_colour.rgb == 'rgb(255, 105, 180)'\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Selected in Kotlin\nDESCRIPTION: This code snippet demonstrates how to check if a web element is selected on a webpage using Selenium WebDriver in Kotlin. It uses the `isSelected()` method of the WebElement interface. The method returns `true` if the element is selected, and `false` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\n //navigates to url\n driver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n //returns true if element is checked else returns false\n val attr =  driver.findElement(By.name(\"checkbox_input\")).isSelected()\n```\n\n----------------------------------------\n\nTITLE: Setting W3C Capabilities After Upgrade - CSharp\nDESCRIPTION: Shows how to define capabilities in C# for Selenium 4 using FirefoxOptions and adding the vendor prefixed 'cloud:options'.  It sets the PlatformName, BrowserVersion, and includes a dictionary for cloud options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\nvar browserOptions = new FirefoxOptions();\nbrowserOptions.PlatformName = \"Windows 10\";\nbrowserOptions.BrowserVersion = \"92\";\nvar cloudOptions = new Dictionary<string, object>();\ncloudOptions.Add(\"build\", myTestBuild);\ncloudOptions.Add(\"name\", myTestName);\nbrowserOptions.AddAdditionalOption(\"cloud:options\", cloudOptions);\nvar driver = new RemoteWebDriver(new Uri(CloudURL), browserOptions);\n```\n\n----------------------------------------\n\nTITLE: Disown Handles in Realm - JavaScript\nDESCRIPTION: This snippet demonstrates how to disown handles in a realm using JavaScript and the WebDriver BiDi API. It uses the `script.disown` method to release object handles within the specified realm.  The object handles and realm ID are necessary.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('disown handles in realm', async () => {\n  await connection.script.disown({\n    handles: ['handle'],\n    target: { realm: realmId },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Find Elements within an Element - Kotlin\nDESCRIPTION: This Kotlin code finds a 'div' element and then finds all child elements with tag name 'p' within the parent 'div', printing each element's text. It initializes a ChromeDriver, navigates to a URL, finds the parent element using `driver.findElement`, gets the child elements using `element.findElements`, and prints the text of the child elements in a loop using `e.text`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_33\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.By\n  import org.openqa.selenium.chrome.ChromeDriver\n\n  fun main() {\n      val driver = ChromeDriver()\n      try {\n          driver.get(\"https://example.com\")\n\n           // Obtém o elemento com o nome da tag 'div'\n          val element = driver.findElement(By.tagName(\"div\"))\n\n          // Obtém todos os elementos disponíveis com o nome da tag 'p'\n          val elements = element.findElements(By.tagName(\"p\"))\n          for (e in elements) {\n              println(e.text)\n          }\n      } finally {\n          driver.quit()\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Enabling the Safari Driver via Shell\nDESCRIPTION: This command enables the safaridriver, which is necessary for automating Safari using Selenium.  It needs to be executed in the terminal before running Selenium tests with Safari.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.pt-br.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsafaridriver --enable\n```\n\n----------------------------------------\n\nTITLE: Asserting with Selenium in CSharp\nDESCRIPTION: This code snippet demonstrates how to make assertions within a Selenium test using MSTest in C#. It retrieves the title of a webpage and asserts that it matches the expected title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstring title = driver.Title;\nAssert.AreEqual(\"SeleniumHQ Browser Automation\", title);\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Firefox Options\nDESCRIPTION: This code snippet demonstrates how to add command-line arguments to Firefox options.  It's useful for configuring the browser's behavior, such as running in headless mode. The `add_argument` method is used to append arguments to the options object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\noptions.add_argument(\"-headless\")\n```\n\n----------------------------------------\n\nTITLE: Defining Unicorn Attributes in Kotlin\nDESCRIPTION: This snippet defines the attributes of a Unicorn object and then uses the accountPage and addUnicornPage objects to configure the unicorn. It takes the sparkles object, fills out a web form, and clicks submit. Dependencies include the Unicorn, UnicornColors, UnicornAccessories, UnicornAdornments, accountPage, and addUnicornPage classes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\n// The Unicorn is a top-level Object--it has attributes, which are set here. \n// This only stores the values; it does not fill out any web forms or interact\n// with the browser in any way.\nval sparkles = Unicorn(\"Sparkles\", UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS)\n\n// Since we are already \"on\" the account page, we have to use it to get to the\n// actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n// takes us there.\nval addUnicornPage = accountPage.addUnicorn()\n\n// Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n// its createUnicorn() method. This method will take Sparkles' attributes,\n// fill out the form, and click submit.\nunicornConfirmationPage = addUnicornPage.createUnicorn(sparkles)\n```\n\n----------------------------------------\n\nTITLE: Get Node Status\nDESCRIPTION: Retrieves the status of a specific node in the Selenium Grid, including information about its health, sessions, and available slots. Used for health checks and monitoring.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.ja.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://localhost:5555/status'\n```\n\n----------------------------------------\n\nTITLE: Setting W3C Capabilities After Upgrade - JavaScript\nDESCRIPTION: Illustrates the updated way of setting capabilities in JavaScript for Selenium 4, including vendor prefixes. It sets the browserName, browserVersion, platformName, and 'cloud:options' with build and name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ncapabilities = {\n  browserName: 'firefox',\n  browserVersion: '92',\n  platformName: 'Windows 10',\n  'cloud:options': {\n     build: myTestBuild,\n     name: myTestName,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Code Tabs with Selenium WebDriver in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to initialize a Selenium WebDriver instance for Chrome using the Selenium WebDriver gem. It uses the `for` method to specify the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.ja.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :chrome\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Name - Java\nDESCRIPTION: This Java snippet demonstrates how to get the platform name using ChromeOptions.  It initializes options and retrieves the platform name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\nString platformName = options.getPlatformName();\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver in Ruby\nDESCRIPTION: This Ruby snippet initializes a Chrome WebDriver.  It requires the 'selenium-webdriver' gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.pt-br.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :chrome\n```\n\n----------------------------------------\n\nTITLE: Capture Full Page Screenshot in JavaScript\nDESCRIPTION: This code snippet demonstrates how to capture a full-page screenshot using Selenium WebDriver's BiDi API in JavaScript. It uses the `browsingContext.captureScreenshot` method with the `full` parameter set to `true`. Requires Selenium version 4.15 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('capture a full page screenshot', async () => {\n  const browsingContext = await getBrowsingContext(driver);\n  let result = await browsingContext.captureScreenshot({\n    full: true\n  });\n  expect(result).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy with Ruby\nDESCRIPTION: This Ruby code snippet demonstrates setting up a proxy with Selenium. The `proxy=` option is used to configure the desired proxy server address. This ensures that all browser traffic will be routed via the given proxy.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\noptions.proxy = '<HOST:PORT>'\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Get New Session Queue size\nDESCRIPTION: This command uses curl to execute a GraphQL query to get the size of the New Session Queue from the `grid` object, showing how many session requests are currently waiting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.zh-cn.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ grid { sessionQueueSize } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information (Shell)\nDESCRIPTION: This snippet shows how to configure your Git user name and email address globally.  These settings are essential for attributing your commits correctly. The `git config --global` command sets these values for all Git repositories on your system.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.ja.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n% git config --global user.name 'Santa Claus'\n% git config --global user.email 'santa@example.com'\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by Class in C#\nDESCRIPTION: This C# code snippet shows how to configure logging on a per-class level, setting the desired log level for specific classes. This provides fine-grained control over log output.  It's important to correctly reference the class's logger.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nILogger logger = Log.CreateLogger<LoggingTest>();\nLog.SetLevel(logger, Level.Debug);\n```\n\n----------------------------------------\n\nTITLE: Browsing Context Destroyed Event in JavaScript\nDESCRIPTION: This code snippet demonstrates how to listen for the 'browsingContext.contextDestroyed' event using Selenium WebDriver's BiDi API in JavaScript. It subscribes to the event and asserts the context ID is defined when a browsing context is destroyed. Requires Selenium version 4.18.0 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_56\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('browsingContext.contextDestroyed', async () => {\n  let contextId;\n\n  await driver.on('browsingContext.contextDestroyed', (event) => {\n    contextId = event.context.context;\n  });\n\n  await driver.executeScript('window.open(\"https://google.com\", \"_blank\");');\n  await driver.close();\n\n  expect(contextId).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window - Selenium WebDriver - C#\nDESCRIPTION: This snippet sets the browser window to fullscreen mode using the Selenium WebDriver API in C#. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_49\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Manage().Window.FullScreen();\n```\n\n----------------------------------------\n\nTITLE: Parallel Testing in C# with Selenium\nDESCRIPTION: This resource explains how to run Selenium tests in parallel using C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/a-smattering-of-selenium-28.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: GraphQL Query: New Session Queue Size\nDESCRIPTION: This curl command retrieves the size of the New Session Queue in the Selenium Grid.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.pt-br.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ grid { sessionQueueSize } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Selenium Manager call example using mirror URL in shell\nDESCRIPTION: This example shows how to call Selenium Manager from the shell, specifying the browser, browser version, and a custom mirror URL for the chromedriver repository. This allows users to download drivers from a specific location instead of the default one.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/novelties_in_selenium_manager_0.4.15.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./selenium-manager --debug --browser chrome --browser-version 100 --avoid-browser-download --driver-mirror-url=https://registry.npmmirror.com/-/binary/chromedriver/\nDEBUG   chromedriver not found in PATH\nDEBUG   chrome detected at C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nDEBUG   Running command: wmic datafile where name='C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe' get Version /value\nDEBUG   Output: \"\\r\\r\\n\\r\\r\\nVersion=117.0.5938.150\\r\\r\\n\\r\\r\\n\\r\\r\\n\\r\"\nDEBUG   Detected browser: chrome 117.0.5938.150\nDEBUG   Discovered chrome version (117) different to specified browser version (100)\nDEBUG   Required driver: chromedriver 100.0.4896.60\nDEBUG   Downloading chromedriver 100.0.4896.60 from https://registry.npmmirror.com/-/binary/chromedriver/100.0.4896.60/chromedriver_win32.zip\nINFO    Driver path: C:\\Users\\boni\\.cache\\selenium\\chromedriver\\win64\\100.0.4896.60\\chromedriver.exe\nINFO    Browser path: C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\n```\n\n----------------------------------------\n\nTITLE: Check Element Display Selenium JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to check if an element is displayed using Selenium WebDriver. It locates an element by name and verifies its display status using `toBeDisplayed`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.selenium.dev/selenium/web/inputs.html')\n    expect(await driver.findElement(By.name('email_input')).isDisplayed()).toBe(true)\n```\n\n----------------------------------------\n\nTITLE: Set Logger Level in Python\nDESCRIPTION: This snippet shows how to change the level of the logger in Python using the `logging` module. It sets the logger level to `DEBUG`, allowing all debug messages to be displayed.  Note that the default is `WARNING`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlogger.setLevel(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions in Ruby\nDESCRIPTION: This Ruby code shows how to set permissions for specific features in Edge.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\noptions.add_argument('--mute-audio')\ndriver = Selenium::WebDriver.for :edge, options: options\n```\n\n----------------------------------------\n\nTITLE: Setting Page Scale in Selenium Java\nDESCRIPTION: This Java code snippet demonstrates how to set the page scale to 0.5 using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setScale(0.5);\n\nassertThat(printOptions.getScale()).isEqualTo(0.5);\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Python\nDESCRIPTION: Demonstrates how to select an option in a Select element by its index in Python. It uses the select_by_index() method. Index starts from 0. Throws NoSuchElementException if index is out of range.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nselect.select_by_index(0)\n```\n\n----------------------------------------\n\nTITLE: Downloading a File in Java\nDESCRIPTION: Downloads a specific file for a RemoteWebDriver session in Java. It takes a filename, retrieves the file from the remote directory, and downloads it to a specified local target directory. Requires specifying the filename and target directory.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nFile downloadedFile = ((HasDownloads) driver).downloadFile(\"file_name\", targetDir);\n```\n\n----------------------------------------\n\nTITLE: Starting a Custom Node with Regular Jar\nDESCRIPTION: This command starts a Selenium Grid Node with a custom implementation packaged as a regular JAR along with the Selenium Server JAR. The `--ext` parameter is used to include the custom JAR file, and `--node-implementation` specifies the fully qualified class name of the custom Node implementation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/customize_node.ja.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava -jar selenium-server-4.6.0.jar \\\n--ext custom_node-1.0-SNAPSHOT.jar node \\\n--node-implementation org.seleniumhq.samples.DecoratedLoggingNode\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in Python Multiprocessing\nDESCRIPTION: This snippet refers to handling exceptions when running Python scripts in parallel using multiprocessing. It highlights the importance of understanding how exceptions in one thread affect other threads' finally blocks and mentions the Global Interpreter Lock (GIL).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2011/a-smattering-of-selenium-65.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Navigation Started Event in Java\nDESCRIPTION: This code snippet demonstrates how to listen for the 'browsingContext.navigationStarted' event using Selenium WebDriver's BiDi API in Java. It subscribes to the event and prints the context ID and URL when a navigation starts. Requires Selenium version 4.15 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_50\n\nLANGUAGE: Java\nCODE:\n```\nWebDriverBiDi bidi = (WebDriverBiDi) driver;\n\n    BiDiSubscription<BrowsingContextModule.NavigationStartedEvent> subscription =\n        new BiDiSubscription<>(BrowsingContextModule.EVENT_NAVIGATION_STARTED,\n            e -> System.out.println(\"Context \" + e.getContext().getId() +\n                \" navigated to \" + e.getUrl()));\n\n    bidi.subscribe(subscription);\n    driver.get(\"https://www.google.com\");\n    bidi.unsubscribe(subscription);\n```\n\n----------------------------------------\n\nTITLE: Setting Page Range in Selenium Python\nDESCRIPTION: This Python code snippet demonstrates how to set the page range to \"2-4\" using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.page_ranges = [\"2-4\"]\nassert print_options.page_ranges == [\"2-4\"]\n```\n\n----------------------------------------\n\nTITLE: Set Up Session Map Storage for Selenium Grid\nDESCRIPTION: This command provides instructions on setting up different session storage options for the Selenium Grid, such as Redis and JDBC-SQL supported databases. It leverages the `info sessionmap` arguments.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.en.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar info sessionmap\n```\n\n----------------------------------------\n\nTITLE: Check Element Selection Status - Java\nDESCRIPTION: Demonstrates how to check if a web element is selected on a webpage using Java and Selenium WebDriver.  The `isSelected()` method returns a boolean indicating whether the element is selected (e.g., checkbox, radio button). A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"checkbox_input\"));\nboolean selected = element.isSelected();\nassertThat(selected).isTrue();\n```\n\n----------------------------------------\n\nTITLE: Fetch Element Attribute Selenium Java\nDESCRIPTION: This Java code snippet uses Selenium WebDriver to fetch the value attribute of an email input field. It asserts that the attribute has the expected value, which is an empty string in this case.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_42\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\");\nWebElement element = driver.findElement(By.name(\"email_input\"));\nString value = element.getAttribute(\"value\");\n\nassertThat(value).isEqualTo(\"\");\n```\n\n----------------------------------------\n\nTITLE: KEDA ScaledObject Complete Example (YAML)\nDESCRIPTION: This YAML configuration defines a KEDA ScaledObject to manage the scaling of a Selenium Grid deployment. It specifies the target deployment (`selenium-chrome-node-deployment`), the minimum and maximum number of replicas, and the triggers for scaling based on Selenium Grid metrics. The `url`, `browserName`, and `platformName` parameters are required for the Selenium Grid scaler.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/scaling-grid-with-keda.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: selenium-chrome-scaledobject\n  namespace: <namespace of your browser pods>\n  labels:\n    deploymentName: selenium-chrome-node-deployment\nspec:\n  minReplicaCount: 0\n  maxReplicaCount: 80\n  scaleTargetRef:\n    name: selenium-chrome-node-deployment\n  triggers:\n    - type: selenium-grid\n      metadata:\n        url: 'http://selenium-grid-url-or-ip:4444/graphql'\n        browserName: 'chrome'\n        platformName: 'Linux'\n```\n\n----------------------------------------\n\nTITLE: User Creation and Login with Selenium (Python)\nDESCRIPTION: This Python snippet demonstrates user creation and login using a similar approach as the Java example. It uses a user_factory to create a user and then logs in, returning an AccountPage object. The user_factory.create_common_user() method is assumed to be defined elsewhere, and the login_as function returns an AccountPage object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Create a user who has read-only permissions--they can configure a unicorn,\n# but they do not have payment information set up, nor do they have\n# administrative privileges. At the time the user is created, its email\n# address and password are randomly generated--you don't even need to\n# know them.\nuser = user_factory.create_common_user() #This method is defined elsewhere.\n\n# Log in as this user.\n# Logging in on this site takes you to your personal \"My Account\" page, so the\n# AccountPage object is returned by the loginAs method, allowing you to then\n# perform actions from the AccountPage.\naccount_page = login_as(user.get_email(), user.get_password())\n```\n\n----------------------------------------\n\nTITLE: Using Pen Actions in Selenium - Python\nDESCRIPTION: This code snippet demonstrates how to use the Pen class in Selenium with Python to simulate stylus input. It initializes a new Pen object using the ActionBuilder, moves to an element, performs a pen down action, moves by a specified offset, and then performs a pen up action. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"example\")\n\naction = ActionBuilder(driver)\npen = action.add_pointer_input(PointerInput.PEN, \"pen\")\naction.move_to(element)\naction.pointer_down(PointerInput.MouseButton.LEFT)\naction.move_by(50, 50)\naction.pointer_up(PointerInput.MouseButton.LEFT)\naction.perform()\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element By Amount - Selenium Wheel CSharp\nDESCRIPTION: This snippet demonstrates how to scroll from a specific element by a given amount using Selenium's Wheel actions in C#. The viewport will be scrolled so the bottom of the element is at the bottom of the screen, then the page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"target\"));\nnew Actions(driver)\n    .ScrollFromOrigin(element, 0, 100)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options in Selenium Java\nDESCRIPTION: This snippet shows how to retrieve the selected options from a Select element in Java. It uses the `getAllSelectedOptions()` method of the Select object, returning a list of WebElements representing the selected options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nList<WebElement> selectedOptions = select.getAllSelectedOptions();\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies - Kotlin\nDESCRIPTION: This Kotlin snippet retrieves all cookies using Selenium WebDriver. It adds two cookies and retrieves the collection of all cookies with `driver.manage().cookies`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://example.com\")\n        driver.manage().addCookie(Cookie(\"test1\", \"cookie1\"))\n        driver.manage().addCookie(Cookie(\"test2\", \"cookie2\"))\n\n        // Get All available cookies\n        val cookies = driver.manage().cookies\n        println(cookies)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting W3C Capabilities (Before) - Java\nDESCRIPTION: This snippet demonstrates how to set DesiredCapabilities in Selenium 3 for Java, which is not fully compatible with W3C standards. It sets platform, version, build, and name capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nDesiredCapabilities caps = DesiredCapabilities.firefox();\ncaps.setCapability(\"platform\", \"Windows 10\");\ncaps.setCapability(\"version\", \"92\");\ncaps.setCapability(\"build\", myTestBuild);\ncaps.setCapability(\"name\", myTestName);\nWebDriver driver = new RemoteWebDriver(new URL(cloudUrl), caps);\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch (Shell)\nDESCRIPTION: This snippet shows how to create a new feature branch in Git and switch to it.  The `git checkout -b` command creates a new branch named 'my-feature-branch' and immediately switches to it, allowing you to isolate your changes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.ja.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n% git checkout -b my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Disabling Log Truncation in Firefox with Selenium (Ruby)\nDESCRIPTION: This snippet shows how to disable log truncation in Firefox when using Selenium WebDriver in Ruby.  It sets a capability named `log.truncate` to false via Firefox options. This ensures that logs aren't truncated.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\noptions = Selenium::WebDriver::Firefox::Options.new\noptions.add_preference('log.truncate', false)\n@driver = Selenium::WebDriver.for :firefox, options: options\n```\n\n----------------------------------------\n\nTITLE: Click and Hold Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a click and hold action on an element using Selenium. It combines moving the mouse to the center of an element with pressing the left mouse button. This is useful for focusing on a specific element without releasing the click immediately. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"my-element\"))\nActions(driver).clickAndHold(element)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Installing Add-ons in Firefox with Selenium (CSharp)\nDESCRIPTION: This snippet shows how to install a Firefox add-on (.xpi file) using Selenium WebDriver in C#. The `InstallAddon` method of the `IHasExtensions` interface is used to install the addon.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nstring id = ((IHasExtensions)driver).InstallAddon(Path.Combine(TestContext.CurrentContext.TestDirectory, \"add.xpi\"));\n```\n\n----------------------------------------\n\nTITLE: Listen for Message events (Java)\nDESCRIPTION: This Java code showcases how to listen for and handle 'message' events using Selenium BiDi. It subscribes to the 'script.message' event and then sends a message to trigger the event.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void testMessageEvent() throws InterruptedException {\n        try (Bidi bidi = new Bidi(driver)) {\n            CountDownLatch latch = new CountDownLatch(1);\n            BrowsingContext browsingContext = new BrowsingContext(bidi, driver);\n            browsingContext.navigate(getUrl(\"formPage.html\"));\n\n            bidi.script().addEventHandler(MessageEvent.class, o -> latch.countDown());\n\n            bidi.script().subscribe(List.of(\"script.message\"), null, SubscribeParameters.class);\n\n            EvaluateResult result = bidi.script().evaluate(\n                EvaluateParameters.builder().setExpression(\"console.log('hi')\").setTarget(browsingContext.getId()).build(),\n                EvaluateResult.class);\n\n            assertTrue(latch.await(5, TimeUnit.SECONDS));\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Java\nDESCRIPTION: This Java snippet demonstrates how to configure an HTTP client in Selenium. It allows setting various parameters for the HTTP library to customize the interaction with the browser. The full code is in HttpClientTest.java\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/http_client.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n{{< gh-codeblock path=\"examples/java/src/test/java/dev/selenium/drivers/HttpClientTest.java\" >}}\n```\n\n----------------------------------------\n\nTITLE: Install Selenium in Python using pip\nDESCRIPTION: This command installs or upgrades the Selenium package in Python using the pip package manager. The -U flag ensures that the package is upgraded to the latest version if it's already installed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2011/selenium-2-0b2-released.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U selenium\n```\n\n----------------------------------------\n\nTITLE: Adding Credential in C#\nDESCRIPTION: The C# code registers the credential with the authenticator using defined parameters.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nstring userId = Convert.ToBase64String(Encoding.UTF8.GetBytes(\"user4\"));\nstring userName = Convert.ToBase64String(Encoding.UTF8.GetBytes(\"User 4\"));\nstring displayName = \"User Four\";\nPublicKeyCredentialParams publicKeyCredentialParams = new PublicKeyCredentialParams()\n{\n  UserId = userId,\n  UserName = userName,\n  DisplayName = displayName\n};\nawait session.WebAuthn.AddCredentialAsync(publicKeyCredentialParams);\n\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Binary Location\nDESCRIPTION: This snippet shows how to set the binary location for the Firefox browser, allowing you to specify a particular Firefox installation. This is useful when you have multiple Firefox versions installed and want to use a specific one for testing. The path to the Firefox executable is passed to the `binary_location` property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\noptions.binary_location = '/Applications/Firefox Nightly.app/Contents/MacOS/firefox'\n```\n\n----------------------------------------\n\nTITLE: Directing Logger Output - CSharp\nDESCRIPTION: This snippet illustrates how to redirect Selenium logs in C# using a FileLogHandler. It overrides the default output to System.Console.Error. The handler directs the logs to a file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Logging;\n```\n\n----------------------------------------\n\nTITLE: Fluent API Usage in Selenium with Java\nDESCRIPTION: This code snippet demonstrates how to use a Fluent API in Selenium to interact with a Google search page.  It initializes the driver, navigates to Google, creates an instance of the GoogleSearchPage object, sets the search string, and clicks the search button.  Dependencies include Selenium WebDriver and a GoogleSearchPage class implementing the Fluent API.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/consider_using_a_fluent_api.en.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver.get( \"http://www.google.com/webhp?hl=en&amp;tab=ww\" );\nGoogleSearchPage gsp = new GoogleSearchPage(driver);\ngsp.setSearchString().clickSearchButton();\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value Selenium JavaScript\nDESCRIPTION: This JavaScript code snippet retrieves the 'background-color' CSS property value of the namedColor element and asserts that it equals 'rgba(0, 0, 0, 0)' using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.selenium.dev/selenium/web/colorPage.html')\n    expect(await driver.findElement(By.id('namedColor')).getCssValue('background-color'))\n        .toEqual('rgba(0, 0, 0, 0)')\n```\n\n----------------------------------------\n\nTITLE: WebDriver Instance Management with pytest (Python)\nDESCRIPTION: This snippet suggests using pytest fixtures to manage WebDriver instances.  Each test gets its own driver instance, ensuring isolation.  The fixture handles driver creation and quitting after the test, regardless of pass or fail.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/avoid_sharing_state.pt-br.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npytest fixture example is not explicitly provided in text but implied.  A pytest fixture would be defined to yield a WebDriver instance.\n\nExample:\nimport pytest\nfrom selenium import webdriver\n\n@pytest.fixture(scope=\"function\")\ndef driver():\n    driver = webdriver.Chrome() # Or other driver\n    yield driver\n    driver.quit()\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in CSharp\nDESCRIPTION: Demonstrates how to initialize a Select object in C# using a WebElement representing the select element. Requires Selenium.Support.UI dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement selectElement = driver.FindElement(By.Name(\"selectomatic\"));\nSelectElement select = new SelectElement(selectElement);\n```\n\n----------------------------------------\n\nTITLE: Pausing Actions API in Ruby\nDESCRIPTION: This code snippet demonstrates how to pause between actions using the Actions API in Ruby. It creates an ActionBuilder object, moves to an element, pauses for a specified duration, and then performs the actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.pt-br.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nactions = driver.action\nactions.move_to(element)\n       .pause(1)\n       .perform\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency\nDESCRIPTION: Adds Selenium dependency to a Java project's `pom.xml` file using Maven. This snippet defines the necessary dependency for using Selenium with Java, specifying the groupId, artifactId, and version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.zh-cn.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.seleniumhq.selenium</groupId>\n  <artifactId>selenium-java</artifactId>\n  <version>4.18.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: PackageReference Selenium.WebDriver C#\nDESCRIPTION: This snippet shows how to specify the Selenium.WebDriver dependency in the `csproj` file of a C# project using `<PackageReference>`. It allows the .NET build system to manage the Selenium WebDriver package and its dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.pt-br.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Selenium.WebDriver\" Version=\"4.18.1\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies in C#\nDESCRIPTION: This code snippet demonstrates how to retrieve all cookies from the current browser context using Selenium WebDriver in C#. It navigates to a website, adds two cookies, and then retrieves all available cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\ndriver.Manage().Cookies.AddCookie(new Cookie(\"test1\", \"cookie1\"));\ndriver.Manage().Cookies.AddCookie(new Cookie(\"test2\", \"cookie2\"));\n\n// Get All available cookies\nvar cookies = driver.Manage().Cookies.AllCookies;\nforeach (var cookie in cookies)\n{\n    Console.WriteLine(cookie.Name + \":\" + cookie.Value);\n}\n```\n\n----------------------------------------\n\nTITLE: Check Element Displayed Status - Kotlin\nDESCRIPTION: This snippet demonstrates how to check if a web element is displayed on the page using Selenium WebDriver in Kotlin. It navigates to a URL, finds an element by name, and uses the isDisplayed() method to determine its visibility, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n//navigates to url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n//returns true if element is displayed else returns false\nval flag = driver.findElement(By.name(\"email_input\")).isDisplayed()\n```\n\n----------------------------------------\n\nTITLE: Sending Logs to Console in JavaScript\nDESCRIPTION: This Javascript snippet shows how to send logs to console output. This involves installing a console handler. No dependencies other than Selenium are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlogging.installConsoleHandler()\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium CSharp\nDESCRIPTION: This snippet demonstrates how to check if a disabled option can be selected in C#. It attempts to select a disabled option and asserts that an exception is thrown. Requires Selenium 4.5 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_38\n\nLANGUAGE: CSharp\nCODE:\n```\nAssert.Throws<InvalidElementStateException>(() => select.SelectByText(\"disabled\"));\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options from Select in Selenium\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of selected options in a <select> element using Selenium WebDriver. The `getAllSelectedOptions()` method is used to get the currently selected options.  For a single select list this will be a list with one element; for a multiple select list, it can contain zero or many elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nList<WebElement> selectedOptions = select.getAllSelectedOptions();\n```\n\n----------------------------------------\n\nTITLE: Forward Click with Selenium\nDESCRIPTION: Performs a forward click by pressing and releasing mouse button 4.  It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"clickable\"))\nval actions = Actions(driver)\nactions.moveToElement(element)\n    .buttonDown(MouseButton.FORWARD)\n    .buttonUp(MouseButton.FORWARD)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait Timeout in Ruby\nDESCRIPTION: This Ruby code sets the implicit wait timeout for a Selenium session. The implicit wait defines the maximum time WebDriver waits when trying to locate an element, when it is not immediately available. The duration is in seconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\noptions = Selenium::WebDriver::Options.chrome\noptions.implicit_wait_timeout = 50\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions in Edge with Java\nDESCRIPTION: This Java snippet demonstrates how to set permissions for Edge using the DevTools protocol. This example sets the permission for camera.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\ndriver.getDevTools().send(Browser.grantPermissions(ImmutableList.of(\"camera\"), Optional.of(driver.getCurrentUrl())));\n```\n\n----------------------------------------\n\nTITLE: Cloning Selenium Repository\nDESCRIPTION: This command clones the Selenium repository from GitHub with a depth of 1 to reduce the download size. This is a prerequisite for building a custom Selenium Manager, as it provides the source code for the Selenium Manager component.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.pt-br.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/SeleniumHQ/selenium.git --depth 1\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions in Selenium (Kotlin)\nDESCRIPTION: This code snippet shows how to release all currently pressed keys and pointer buttons using Kotlin. It calls the `resetActions()` method on the WebDriver. This method does not use perform().\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.zh-cn.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.resetActions()\n```\n\n----------------------------------------\n\nTITLE: Starting a Distributed Selenium Grid with Redis\nDESCRIPTION: This Bash script starts a distributed Selenium Grid with components like Event Bus, Session Queue, Sessions Map, Distributor, Router, and Node. It uses Coursier to fetch the `selenium-session-map-redis` dependency. The Sessions Map component is configured to use Redis for session storage using the `sessions.toml` file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.pt-br.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nSE_VERSION=<current_selenium_version>\nJAR_NAME=selenium-server-${SE_VERSION}.jar\nPUBLISH=\"--publish-events tcp://localhost:4442\"\nSUBSCRIBE=\"--subscribe-events tcp://localhost:4443\"\nSESSIONS=\"--sessions http://localhost:5556\"\nSESSIONS_QUEUE=\"--sessionqueue http://localhost:5559\"\necho 'Starting Event Bus'\njava -jar $JAR_NAME event-bus $PUBLISH $SUBSCRIBE --port 5557 &\necho 'Starting New Session Queue'\njava -jar $JAR_NAME sessionqueue --port 5559 &\necho 'Starting Session Map'\njava -jar $JAR_NAME \\\n--ext $(coursier fetch -p org.openqa.selenium:selenium-session-map-redis:${SE_VERSION}) \\\nsessions $PUBLISH $SUBSCRIBE --port 5556 --config sessions.toml &\necho 'Starting Distributor'\njava -jar $JAR_NAME  distributor $PUBLISH $SUBSCRIBE $SESSIONS $SESSIONS_QUEUE --port 5553 --bind-bus false &\necho 'Starting Router'\njava -jar $JAR_NAME router $SESSIONS --distributor http://localhost:5553 $SESSIONS_QUEUE --port 4444 &\necho 'Starting Node'\njava -jar $JAR_NAME node $PUBLISH $SUBSCRIBE &\n```\n\n----------------------------------------\n\nTITLE: Getting Page Title\nDESCRIPTION: This snippet demonstrates how to retrieve the title of the currently loaded web page using Selenium. The `Title` property returns a string containing the page title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\nstring title = driver.Title;\n```\n\n----------------------------------------\n\nTITLE: Get Browsing Context Realms By Type - Java\nDESCRIPTION: This snippet retrieves realms of a specific type within a browsing context using Java and the WebDriver BiDi API. It uses the `Script.getRealms` method, specifying both the type and context, to fetch the realms. The browsing context ID and the realm type are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\nList<RealmInfo> contextRealms = bidi.script().getRealms(Optional.of(Realm.RealmType.WINDOW), Optional.of(new BrowsingContext(contextId)));\n```\n\n----------------------------------------\n\nTITLE: Add Selenium to requirements.txt in Python\nDESCRIPTION: This line demonstrates how to specify Selenium as a dependency in a Python project's `requirements.txt` file.  This allows for easy installation of all project dependencies using `pip install -r requirements.txt`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.en.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nselenium\n```\n\n----------------------------------------\n\nTITLE: GraphQL: Querying Current Session Count (curl)\nDESCRIPTION: This curl command retrieves the current session count from the Selenium Grid's GraphQL endpoint. It requires `curl` and access to the GraphQL endpoint. The output will be a JSON object containing the `sessionCount`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.ja.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ grid { sessionCount } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Importing Color class for Selenium\nDESCRIPTION: This code snippet demonstrates how to import the Color class in different programming languages to use it with Selenium WebDriver. The Color class allows working with colors in web elements, such as converting and comparing them.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\ninclude Selenium::WebDriver::Support\n```\n\n----------------------------------------\n\nTITLE: Handling Chrome for Testing Library Dependencies in Linux\nDESCRIPTION: When running Chrome for Testing in Linux, you might encounter an error related to missing shared libraries (e.g., `libatk-1.0.so.0`). This snippet demonstrates how to install the necessary library using `apt-get`. This resolves the shared library loading error, ensuring Chrome for Testing can be executed properly.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.en.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libatk-bridge2.0-0\n```\n\n----------------------------------------\n\nTITLE: Executing a Specific Example\nDESCRIPTION: Runs a specific Selenium Java example using Maven's exec plugin. Requires the fully qualified name of the main class for the example to be executed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/java/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -D\"exec.mainClass\"=\"dev.selenium.getting_started.FirstScript\" -D\"exec.classpathScope\"=test\n```\n\n----------------------------------------\n\nTITLE: Implicit Wait and Timeouts After Selenium 4 (Java)\nDESCRIPTION: This code shows the updated way to set implicit wait, script timeout, and page load timeout in Selenium 4. It uses `Duration` instead of `TimeUnit`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\ndriver.manage().timeouts().scriptTimeout(Duration.ofMinutes(2));\ndriver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(10));\n```\n\n----------------------------------------\n\nTITLE: Running wget with sudo\nDESCRIPTION: This snippet shows a command-line instruction to download a resource ('coffee') using `wget` with superuser privileges (`sudo`) and redirect the output to a file named 'adam'. It's a whimsical, likely non-functional example.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/a-smattering-of-selenium-94.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# sudo wget coffee > adam\n```\n\n----------------------------------------\n\nTITLE: Tearing down WebDriver in JavaScript\nDESCRIPTION: This code snippet tears down a WebDriver instance after each test using Mocha's `afterEach` hook in JavaScript.  It quits the driver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nafterEach(async function () {\n        await driver.quit();\n    });\n```\n\n----------------------------------------\n\nTITLE: Inbox Test Assertion Example in Java\nDESCRIPTION: This Java code provides an example illustrating that test classes should handle assertions, not page objects themselves. It shows how to verify if messages in an Inbox are read or unread.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.ja.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic void testMessagesAreReadOrUnread() {\n    Inbox inbox = new Inbox(driver);\n    assertTrue(inbox.isMessageWithSubjectIsUnread(\"I like cheese\"));\n    assertFalse(inbox.isMessageWithSubjectIsUnread(\"I'm not fond of tofu\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Full CSharp Example (NUnit)\nDESCRIPTION: This C# example demonstrates a Selenium test using NUnit.  It navigates to the Selenium website and asserts the page title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace SeleniumDocs.GettingStarted\n{\n    public class UsingSeleniumTest\n    {\n        private IWebDriver driver;\n\n        [SetUp]\n        public void Setup()\n        {\n            driver = new ChromeDriver();\n        }\n\n        [TearDown]\n        public void TearDown()\n        {\n            driver.Quit();\n        }\n\n        [Test]\n        public void EightComponents()\n        {\n            driver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/index.html\");\n            Assert.That(driver.Title, Is.EqualTo(\"SeleniumHQ Browser Automation\"));\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Selenate JS 1.6 Runner for Selenium\nDESCRIPTION: Selenate is a JavaScript 1.6 runner specifically designed for Selenium tests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/a-smattering-of-selenium-28.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Setting ignoreProtectedModeSettings for Internet Explorer\nDESCRIPTION: This code snippet demonstrates how to set the `ignoreProtectedModeSettings` capability for Internet Explorer using Selenium. Setting this capability to `true` skips the protected mode check during the launch of a new IE session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\noptions = webdriver.IeOptions()\noptions.ignore_protected_mode_settings = True\n```\n\n----------------------------------------\n\nTITLE: Key Up Action in Selenium (Ruby)\nDESCRIPTION: This Ruby code snippet demonstrates performing a key up action using Selenium's Actions API. An Actions object is created, a key_down action is performed on the Shift key, then the 'a' key is sent, followed by a key_up action on the Shift key and sending the 'a' key again. Finally, perform is called to execute these actions, resulting in \"Aa\".\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nactions = driver.action\nactions.key_down(Selenium::WebDriver::Keys::SHIFT)\n  .send_keys('a')\n  .key_up(Selenium::WebDriver::Keys::SHIFT)\n  .send_keys('a')\n  .perform\n```\n\n----------------------------------------\n\nTITLE: Release Key Action in Selenium\nDESCRIPTION: Demonstrates how to simulate releasing a pressed key using Selenium's Actions API. This involves creating an Actions object, using the keyUp method to release a key, and then performing the action.  It shows how to press and hold Shift key while typing some text, and then release the Shift key.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nActions actions = new Actions(driver);\nactions.keyDown(Keys.SHIFT)\n    .sendKeys(\"text\")\n    .keyUp(Keys.SHIFT)\n    .perform();\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Service with Docker Compose\nDESCRIPTION: This YAML file defines a PostgreSQL service using Docker Compose for Selenium Grid session management. It configures the database image, restart policy, environment variables for user credentials, port mapping, and volume mounting to initialize the database using an SQL script. This facilitates easy setup and management of the PostgreSQL database.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.en.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3.8'\nservices:\n  db:\n    image: postgres:9.6-bullseye\n    restart: always\n    environment:\n      - POSTGRES_USER=seluser\n      - POSTGRES_PASSWORD=seluser\n      - POSTGRES_DB=selenium_sessions\n    ports:\n      - \"5432:5432\"\n    volumes:\n    - ./init.sql:/docker-entrypoint-initdb.d/init.sql\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Ruby\nDESCRIPTION: Demonstrates how to handle disabled options in a Select element in Ruby. It attempts to select a disabled option and expects an exception to be thrown.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nexpect { select.select_by(:value, 'disabled') }.to raise_error(Selenium::WebDriver::Error::InvalidElementState)\n```\n\n----------------------------------------\n\nTITLE: Setting ChromeOptions Headless Before - Ruby\nDESCRIPTION: This Ruby snippet shows how to set headless mode using the `headless!` method, which is now a deprecated convenience method. It initializes ChromeOptions, sets the headless property, creates a ChromeDriver instance, navigates to selenium.dev, and closes the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/headless-is-going-away.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Chrome::Options.new\noptions.headless!\ndriver = Selenium::WebDriver.for :chrome, options: options\ndriver.get('https://selenium.dev')\ndriver.quit\n```\n\n----------------------------------------\n\nTITLE: Removing a Virtual Authenticator in Java\nDESCRIPTION: This Java snippet demonstrates how to remove a previously added virtual authenticator. This involves obtaining the DevTools and using its WebAuthn domain to remove the authenticator.  It depends on Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\ndevTools.getDomains().getWebAuthn().removeVirtualAuthenticator(authenticatorId);\n```\n\n----------------------------------------\n\nTITLE: Initializing IE Driver without IE present (Ruby)\nDESCRIPTION: This code snippet demonstrates how to initialize the Internet Explorer Driver when IE is not present on the system (Windows 11 default) using Ruby. It uses default options, relying on the driver to locate Edge.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :ie\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium CSharp\nDESCRIPTION: This snippet illustrates how to initialize a Select object in C# using a WebElement representing the select element. It requires the Selenium WebDriver dependency. The `FindElement` method is used to locate the select element before creating the Select object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement selectElement = driver.FindElement(By.Name(\"selectomatic\"));\nSelectElement select = new SelectElement(selectElement);\n```\n\n----------------------------------------\n\nTITLE: Listening to Specific Generic Events with WebDriverEventListener (Java)\nDESCRIPTION: This snippet shows how to listen to specific generic events related to WebDriver and WebElement calls. The `beforeAnyWebDriverCall` and `beforeAnyWebElementCall` methods in the `WebDriverEventListener` interface allow for performing actions before any method call on WebDriver or WebElement instances, respectively. Requires the `java.util.logging` and `java.util.Arrays` libraries.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/java-removal-of-deprecated-events-classes.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class Listener implements WebDriverEventListener {\n    private static final Logger LOGGER = Logger.getLogger(Listener.class.getName());\n\n    @Override\n    public void beforeAnyWebDriverCall(WebDriver driver, Method method, Object[] args) {\n        logger.debug(\"Thread: \" + Thread.currentThread().getName() +\n                \" | Method Name: \" + method.getName() +\n                \" | Method Args: \" + Arrays.toString(args));\n    }\n\n    @Override\n    public void beforeAnyWebElementCall(WebElement element, Method method, Object[] args) {\n        logger.debug(\"Thread: \" + Thread.currentThread().getName() +\n                \" | Method Name: \" + method.getName() +\n                \" | Method Args: \" + Arrays.toString(args));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Selenium Grid Commands\nDESCRIPTION: This command lists all available commands for the Selenium Grid, along with a description of each command. Replace `<version>` with the actual Selenium server version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.pt-br.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar --config-help\n```\n\n----------------------------------------\n\nTITLE: Removing Console Message Handler in WebDriver BiDi with Python\nDESCRIPTION: This code snippet shows how to remove a previously added console message handler in Python using WebDriver BiDi. It requires the handler ID returned when the handler was initially added. This allows for dynamic control over which console messages are being monitored.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nbrowsing_context = driver.create_browsing_context()\nlog.remove_console_listener(browsing_context)\n```\n\n----------------------------------------\n\nTITLE: Start Custom Node Regular Jar - Bash\nDESCRIPTION: This command starts a Selenium Grid Node using a regular jar, specifying the jar as an extension and pointing to a custom node implementation class.  The `--ext` parameter loads the custom jar, and `--node-implementation` specifies the implementing class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/customize_node.zh-cn.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava -jar selenium-server-4.6.0.jar \\\n--ext custom_node-1.0-SNAPSHOT.jar node \\\n--node-implementation org.seleniumhq.samples.DecoratedLoggingNode\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Total and Used Slots\nDESCRIPTION: This curl command sends a GraphQL query to retrieve the total number of slots (`maxSession`) and the number of slots currently in use (`sessionCount`) from the Selenium Grid.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.pt-br.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\": \"{ grid { maxSession, sessionCount } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Name - Ruby\nDESCRIPTION: This Ruby snippet demonstrates setting the platform name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_26\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'can set the platform name' do\n  expect { options.platform_name = :windows }.to_not raise_error\nend\n```\n\n----------------------------------------\n\nTITLE: Using try/finally for driver.quit() - Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to use a `try/finally` block to ensure that `driver.quit()` is always called, even if an exception occurs in the `try` block. This is a robust way to guarantee that the browser session is properly closed, preventing resource leaks in various scenarios. This is used outside of a test context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    //WebDriver code here...\n} finally {\n    driver.quit()\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for Selenium (Java)\nDESCRIPTION: Defines the Selenium dependency within a Maven 'pom.xml' file. It specifies the groupId, artifactId, and version of the Selenium Java library. This is a standard way to manage project dependencies in Java using Maven.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.ja.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.seleniumhq.selenium</groupId>\n  <artifactId>selenium-java</artifactId>\n  <version>4.18.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset - CSharp\nDESCRIPTION: This CSharp code snippet demonstrates how to scroll from an offset of the viewport using Selenium's Actions API and Wheel class. It takes an x offset, a y offset, delta x and delta y values. It scrolls from the origin point which is the upper left corner of the current viewport, offset by given x and y values. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nnew Actions(driver)\n    .ScrollFromOrigin(WheelInput.ScrollOrigin.FromViewport(25, 25), 50, 100)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Getting All Options from Select in Selenium\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of all options available in a <select> element using Selenium WebDriver. The `options` property is used to obtain the list of WebElement objects representing the options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\noptions = select.options\n```\n\n----------------------------------------\n\nTITLE: Initializing Internet Explorer with Edge Attachment Option\nDESCRIPTION: This code demonstrates how to start Internet Explorer by attaching to Edge if IE is not present on the system, simplifying the configuration. It shows how to set only the `attachToEdgeChrome` option when IE is absent.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::IE::Options.new\noptions.attach_to_edge_chrome = true\n```\n\n----------------------------------------\n\nTITLE: Initializing Safari Driver with Options (CSharp)\nDESCRIPTION: This code initializes the Safari driver with basic options in C#. It creates a `SafariOptions` object and passes it to the `SafariDriver` constructor. It requires the Selenium C# bindings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.ja.md#_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\nvar options = new SafariOptions();\nvar driver = new SafariDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options in Selenium Kotlin\nDESCRIPTION: This snippet shows how to retrieve the selected options from a Select element in Kotlin. It uses the `allSelectedOptions` property of the Select object, returning a list of WebElements representing the selected options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nval selectedOptions: List<WebElement> = select.allSelectedOptions\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Level in Python\nDESCRIPTION: This Python snippet illustrates how to set different logging levels for different modules within Selenium. Instead of just using \"selenium\", you can specify the level for specific parts, allowing for more granular logging control.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nlogging.getLogger(\"selenium.webdriver.remote.remote_connection\").setLevel(logging.WARNING)\nlogging.getLogger(\"selenium.webdriver.common.http\").setLevel(logging.WARNING)\n```\n\n----------------------------------------\n\nTITLE: Failing Button Click (No Frame Switch)\nDESCRIPTION: This code snippet shows an example of how an attempt to click a button within an IFrame will fail without first switching to the IFrame. It demonstrates the need to change the driver's focus to the frame before interacting with the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\n# This won't work\ndriver.find_element(:tag_name,'button').click\n```\n\n----------------------------------------\n\nTITLE: `AddAdditionalCapability` deprecation in C#\nDESCRIPTION: This snippet shows how to update the deprecated `AddAdditionalCapability` method to the recommended `AddAdditionalOption` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_23\n\nLANGUAGE: CS\nCODE:\n```\nvar browserOptions = new ChromeOptions();\nbrowserOptions.PlatformName = \"Windows 10\";\nbrowserOptions.BrowserVersion = \"latest\";\nvar cloudOptions = new Dictionary<string, object>();\nbrowserOptions.AddAdditionalCapability(\"cloud:options\", cloudOptions, true);\n```\n\nLANGUAGE: CS\nCODE:\n```\nvar browserOptions = new ChromeOptions();\nbrowserOptions.PlatformName = \"Windows 10\";\nbrowserOptions.BrowserVersion = \"latest\";\nvar cloudOptions = new Dictionary<string, object>();\nbrowserOptions.AddAdditionalOption(\"cloud:options\", cloudOptions);\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtualAuthenticatorOptions in Java\nDESCRIPTION: This code snippet demonstrates how to initialize VirtualAuthenticatorOptions in Java. It sets properties like protocol, domain, and whether cross-origin requests are allowed.  This is necessary to configure the virtual authenticator before it's created and used in tests. The dependencies are Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nVirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions()\n    .setProtocol(Protocol.HTTPS)\n    .setDomain(\"example.com\")\n    .setCrossOrigin(false)\n    .setIsResidentKeyRequired(true);\n```\n\n----------------------------------------\n\nTITLE: List Selenium Grid commands with descriptions\nDESCRIPTION: This command lists all available Selenium Grid commands along with their descriptions. It's useful for discovering the full range of available commands and their purposes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.ja.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar --config-help\n```\n\n----------------------------------------\n\nTITLE: Print Page in Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to print a page using Selenium WebDriver in Ruby. It utilizes the `print_page` method to print current browser within the page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_70\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.navigate_to 'https://www.selenium.dev'\n\n    base64encodedContent = driver.print_page(orientation: 'landscape')\n```\n\n----------------------------------------\n\nTITLE: Updating Java timeouts using Duration\nDESCRIPTION: This snippet shows how to update timeout settings in Java to use `Duration` objects instead of `long` and `TimeUnit` as parameters.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\ndriver.manage().timeouts().setScriptTimeout(2, TimeUnit.MINUTES);\ndriver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);\n```\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\ndriver.manage().timeouts().scriptTimeout(Duration.ofMinutes(2));\ndriver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(10));\n```\n\n----------------------------------------\n\nTITLE: Listening for Console Logs with BiDi API in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to listen for console log events using Selenium's BiDi API. It uses the `bidi.on` function to register a listener for the `log.entryAdded` event, processes the log entry, and asserts the log level and text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.en.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('should get all the console logs', async () => {\n  let messages = [];\n  await bidi.on('log.entryAdded', (entry) => {\n    messages.push(entry.params.entry);\n  });\n  await driver.get(testPage);\n  await driver.findElement(By.id('consoleLog')).click();\n  await expect(messages.length).toBe(1);\n  await expect(messages[0].level).toBe('info');\n  await expect(messages[0].text).toBe('Hello, world!');\n});\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Selected in Ruby\nDESCRIPTION: This code snippet demonstrates how to check if a web element is selected on a webpage using Selenium WebDriver in Ruby. It uses the `selected?` method of the WebElement class. The method returns `true` if the element is selected, and `false` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'element is selected' do\n  expect(driver.find_element(name: 'checkbox_input').selected?).to be true\nend\n```\n\n----------------------------------------\n\nTITLE: Setting ChromeOptions Headless After - Ruby\nDESCRIPTION: This Ruby snippet shows how to set headless mode using the `--headless=new` argument when initializing the Chrome options.  It initializes ChromeOptions, adds the argument for headless mode, creates a ChromeDriver instance, navigates to selenium.dev, and closes the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/headless-is-going-away.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Options.chrome(args: ['--headless=new'])\ndriver = Selenium::WebDriver.for :chrome, options: options\ndriver.get('https://selenium.dev')\ndriver.quit\n```\n\n----------------------------------------\n\nTITLE: Java WebDriverWait Configuration (After)\nDESCRIPTION: Configures WebDriverWait using Duration.ofSeconds and ExpectedConditions.elementToBeClickable.  FluentWait is configured with Duration for timeout and polling interval.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_25\n\nLANGUAGE: Java\nCODE:\n```\nnew WebDriverWait(driver, Duration.ofSeconds(3))\n  .until(ExpectedConditions.elementToBeClickable(By.cssSelector(\"#id\")));\n\n  Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)\n  .withTimeout(Duration.ofSeconds(30))\n  .pollingEvery(Duration.ofSeconds(5))\n  .ignoring(NoSuchElementException.class);\n```\n\n----------------------------------------\n\nTITLE: Logging in with User Credentials\nDESCRIPTION: This snippet demonstrates how to log in to a website using a user's email and password. It creates a user with read-only permissions and logs in as that user, returning the AccountPage object to perform subsequent actions. Dependencies include the UserFactory and AccountPage classes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Create a user who has read-only permissions--they can configure a unicorn,\n// but they do not have payment information set up, nor do they have\n// administrative privileges. At the time the user is created, its email\n// address and password are randomly generated--you don't even need to\n// know them.\nval user = UserFactory.createCommonUser() //This method is defined elsewhere.\n\n// Log in as this user.\n// Logging in on this site takes you to your personal \"My Account\" page, so the\n// AccountPage object is returned by the loginAs method, allowing you to then\n// perform actions from the AccountPage.\nval accountPage = loginAs(user.getEmail(), user.getPassword())\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method with driver.quit() - JUnit (Java)\nDESCRIPTION: This Java code snippet demonstrates how to use the `@AfterAll` annotation in JUnit to define a tear-down method that calls `driver.quit()`. This ensures that the browser session is properly closed after all tests in a class have been executed, preventing resource leaks. JUnit is a common framework for testing Java code.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Example using JUnit\n * https://junit.org/junit5/docs/current/api/org/junit/jupiter/api/AfterAll.html\n */\n@AfterAll\npublic static void tearDown() {\n    driver.quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Node Configuration TOML\nDESCRIPTION: Configures a Selenium Grid node to run sessions in Docker containers, specifying Docker images and stereotypes. It also shows how to map device files from the host to the container.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.ja.md#_snippet_4\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\ndetect-drivers = false\nmax-sessions = 2\n\n[docker]\nconfigs = [\n    \"selenium/standalone-chrome:93.0\", \"{\\\"browserName\\\": \\\"chrome\\\", \\\"browserVersion\\\": \\\"91\\\"}\",\n    \"selenium/standalone-firefox:92.0\", \"{\\\"browserName\\\": \\\"firefox\\\", \\\"browserVersion\\\": \\\"92\\\"}\"\n]\n#Optionally define all device files that should be mapped to docker containers\n#devices = [\n#    \"/dev/kvm:/dev/kvm\"\n#]\nurl = \"http://localhost:2375\"\nvideo-image = \"selenium/video:latest\"\n```\n\n----------------------------------------\n\nTITLE: Drain Node Without Secret cURL\nDESCRIPTION: This snippet drains a node without using the X-REGISTRATION-SECRET. It assumes no registration secret has been configured. The Grid URL depends on the deployment mode (Standalone, Hub-Node, or Router).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request POST 'http://<Router-URL>/se/grid/distributor/node/<node-id>/drain' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Downloading Files\nDESCRIPTION: This JSON snippet shows the format of response after POST request to `/session/<sessionId>/se/files` with `filename` and `contents` key with Base64 encoded zip of file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": {\n    \"filename\": \"Red-blue-green-channel.jpg\",\n    \"contents\": \"Base64EncodedStringContentsOfDownloadedFileAsZipGoesHere\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name - JavaScript\nDESCRIPTION: This snippet demonstrates how to get the tag name of a web element using Selenium WebDriver in JavaScript. It finds an element by name and uses the getTagName() method to retrieve its tag name as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst emailInput = await driver.findElement(By.name('email_input'))\nexpect(await emailInput.getTagName()).toBe('input')\n```\n\n----------------------------------------\n\nTITLE: Extending LoadableComponent in Selenium Java\nDESCRIPTION: This Java code extends the LoadableComponent class to implement a more robust Page Object. It demonstrates how to define the `load()` and `isLoaded()` methods to handle page navigation and verification, ensuring the page is fully loaded before interacting with its elements. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.pt-br.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class EditIssue extends LoadableComponent<EditIssue> {\n  // rest of class ignored for now\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Products Page\nDESCRIPTION: This HTML snippet defines the structure for a products page, including a header container and a list of inventory items. It serves as the UI structure for the example page object implementation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.ja.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Products Page -->\n<div class=\"header_container\">\n    <span class=\"title\">Products</span>\n</div>\n\n<div class=\"inventory_list\">\n    <div class=\"inventory_item\">\n    </div>\n    <div class=\"inventory_item\">\n    </div>\n    <div class=\"inventory_item\">\n    </div>\n    <div class=\"inventory_item\">\n    </div>\n    <div class=\"inventory_item\">\n    </div>\n    <div class=\"inventory_item\">\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Get Selenium Grid Configuration Help\nDESCRIPTION: This command retrieves general configuration help information for Selenium Grid. It uses the 'info config' command to display details related to configuring Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.zh-cn.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar info config\n```\n\n----------------------------------------\n\nTITLE: Adding Console Message Handler using WebDriver BiDi in Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to add a console message handler. It uses the `add_console_listener` method on the bidi script to start listening for console messages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.zh-cn.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nhandler = bidi.script.add_console_listener { |params| puts params }\n```\n\n----------------------------------------\n\nTITLE: Getting Named Cookie in Ruby\nDESCRIPTION: This code snippet demonstrates how to retrieve a cookie by its name using Selenium WebDriver in Ruby.  It navigates to a website, adds a cookie named 'foo', and then retrieves the cookie by its name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  driver.manage.add_cookie(name: \"foo\", value: \"bar\")\n\n  # Get cookie details with named cookie 'foo'\n  puts driver.manage.cookie_named('foo')\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Java JUnit Dependency (Gradle)\nDESCRIPTION: This snippet shows how to add JUnit as a dependency to a Java project using Gradle. It should be included in the `build.gradle` file within the `dependencies` block.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  testImplementation(\"org.junit.jupiter:junit-jupiter-api:5.10.0\")\n  testRuntimeOnly(\"org.junit.jupiter:junit-jupiter-engine:5.10.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Example Git Commit Message (Text)\nDESCRIPTION: This shows the recommended format for a git commit message. It explains how to structure the commit message with a short summary in the first line, a blank second line, and a detailed explanation in the following lines. It also shows how to reference an issue that is being fixed by the commit.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.zh-cn.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nexplain commit normatively in one line\n\nBody of commit message is a few lines of text, explaining things\nin more detail, possibly giving some background about the issue\nbeing fixed, etc.\n\nThe body of the commit message can be several paragraphs, and\nplease do proper word-wrap and keep columns shorter than about\n72 characters or so. That way `git log` will show things\nn nicely even when it is indented.\n\nFixes #141\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Table for Selenium Sessions\nDESCRIPTION: This SQL script creates a table named `sessions_map` in the PostGreSQL database to store session information. The table includes columns for session IDs, capabilities, URIs, stereotypes, and start times.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.pt-br.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS sessions_map(\n    session_ids varchar(256),\n    session_caps text,\n    session_uri varchar(256),\n    session_stereotype text,\n    session_start varchar(256)\n );\n```\n\n----------------------------------------\n\nTITLE: Setting Background using PrintOptions in C#\nDESCRIPTION: This code snippet demonstrates how to set whether background colors and images appear using the PrintOptions class in C#. The `Background` property is set. The `Background` property is retrieved and confirmed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.Background = true;\n\nAssert.AreEqual(true, printOptions.Background);\n```\n\n----------------------------------------\n\nTITLE: Force Create Process API - Java\nDESCRIPTION: This Java snippet demonstrates how to force the use of the CreateProcess API when launching Internet Explorer. This is achieved by calling the `useCreateProcessApiToLaunchIe()` method on the `InternetExplorerOptions` object.  This ensures that Internet Explorer is launched using the CreateProcess API.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.Capabilities;\nimport org.openqa.selenium.ie.InternetExplorerDriver;\nimport org.openqa.selenium.ie.InternetExplorerOptions;\n\npublic class ieTest {\n    public static void main(String[] args) {\n        InternetExplorerOptions options = new InternetExplorerOptions();\n        options.useCreateProcessApiToLaunchIe();\n        InternetExplorerDriver driver = new InternetExplorerDriver(options);\n        try {\n            driver.get(\"https://google.com/ncr\");\n            Capabilities caps = driver.getCapabilities();\n            System.out.println(caps);\n        } finally {\n            driver.quit();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in JavaScript\nDESCRIPTION: Demonstrates how to select an option in a Select element by its visible text in JavaScript. It uses the selectByVisibleText() method. Throws NoSuchElementException if matching option is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nawait select.selectByVisibleText('One');\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listeners with EventFiringDecorator (Java)\nDESCRIPTION: This snippet shows how to register event listeners using the EventFiringDecorator. It replaces the old approach of registering listeners directly with EventFiringWebDriver. Multiple listeners can be passed as arguments to the EventFiringDecorator constructor.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/java-removal-of-deprecated-events-classes.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nnew EventFiringWebDriver(driver).register(listener1).register(listener2); // Old approach\nnew EventFiringDecorator(listener1, listener2); // New approach\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Session Map (Java)\nDESCRIPTION: This command starts the Session Map component in a distributed Grid setup. The Session Map maps session IDs to the Nodes running those sessions.  It interacts with the Event Bus. The default port is 5556.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.zh-cn.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar sessions --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443 --port 5556\n```\n\n----------------------------------------\n\nTITLE: JavaScript Mocha Test Execution (npx)\nDESCRIPTION: This command executes JavaScript Mocha tests using npx, which ensures that the locally installed version of Mocha is used.  `runningTests.spec.js` is the name of the test file to be executed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nnpx mocha runningTests.spec.js\n```\n\n----------------------------------------\n\nTITLE: DOM Mutation Handlers in Ruby\nDESCRIPTION: This Ruby snippet shows how to handle DOM mutations using Chrome DevTools Protocol (CDP) within Selenium. It assumes a Selenium setup connected to a Chrome browser. The snippet sends a command to enable the DOM.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.zh-cn.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.execute_cdp 'DOM.enable', {}\n```\n\n----------------------------------------\n\nTITLE: Creating and Logging in a User (Java)\nDESCRIPTION: This Java code snippet demonstrates creating a user with read-only permissions using a UserFactory and logging in as that user. It retrieves the user's email and password, logs in, and returns the AccountPage object for further actions. The UserFactory.createCommonUser() method is assumed to be defined elsewhere.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// Create a user who has read-only permissions--they can configure a unicorn,\n// but they do not have payment information set up, nor do they have\n// administrative privileges. At the time the user is created, its email\n// address and password are randomly generated--you don't even need to\n// know them.\nUser user = UserFactory.createCommonUser(); //This method is defined elsewhere.\n\n// Log in as this user.\n// Logging in on this site takes you to your personal \"My Account\" page, so the\n// AccountPage object is returned by the loginAs method, allowing you to then\n// perform actions from the AccountPage.\nAccountPage accountPage = loginAs(user.getEmail(), user.getPassword());\n```\n\n----------------------------------------\n\nTITLE: Simulating Network Conditions in Ruby\nDESCRIPTION: This Ruby code shows how to simulate various network conditions using the Edge DevTools protocol.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.network_emulation.offline = true\n```\n\n----------------------------------------\n\nTITLE: Initializing IE Driver with Edge Compatibility Mode (Ruby)\nDESCRIPTION: This code snippet demonstrates how to initialize the Internet Explorer Driver to run Microsoft Edge in IE Compatibility Mode using Ruby. It sets the `attach_to_edge_chrome` and `edge_executable_path` options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::IE::Options.new\noptions.attach_to_edge_chrome = true\noptions.edge_executable_path = ENV['EDGE_EXECUTABLE_PATH']\ndriver = Selenium::WebDriver.for :ie, options: options\n```\n\n----------------------------------------\n\nTITLE: Updating Selenium Java Dependency (Before) - Maven\nDESCRIPTION: This XML snippet shows how the Selenium Java dependency was defined in a Maven `pom.xml` file before upgrading to Selenium 4. It uses version 3.141.59.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <!-- more dependencies ... -->\n  <dependency>\n    <groupId>org.seleniumhq.selenium</groupId>\n    <artifactId>selenium-java</artifactId>\n    <version>3.141.59</version>\n  </dependency>\n  <!-- more dependencies ... -->\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Remove Network Intercept - Selenium BiDi - Java\nDESCRIPTION: This Java snippet demonstrates how to remove a network intercept using Selenium's BiDi API. It removes an existing intercept using its ID to stop monitoring and modifying matching network requests. Requires Selenium 4.18 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nNetwork network = driver.getDevTools().getDomains().network();\nString intercept = network.addIntercept(\"https://example.com\",\n    new AddInterceptParameters()).getId();\nnetwork.removeIntercept(intercept);\n```\n\n----------------------------------------\n\nTITLE: Default Code Tabs Implementation HTML\nDESCRIPTION: This snippet demonstrates the implementation of default code tabs in the Selenium documentation. The `tabpane` shortcode with `langEqualsHeader=true` is used to automatically format the code based on the header name, ensuring consistency across tabs.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.en.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{</* tabpane langEqualsHeader=true */>}}\n  {{</* tab header=\"Java\" */>}}\n    WebDriver driver = new ChromeDriver();\n  {{</* /tab */>}}\n  {{</* tab header=\"Python\" */>}}\n    driver = webdriver.Chrome()\n  {{</* /tab */>}}\n  {{</* tab header=\"CSharp\" */>}}\n    var driver = new ChromeDriver();\n  {{</* /tab */>}}\n  {{</* tab header=\"Ruby\" */>}}\n    driver = Selenium::WebDriver.for :chrome\n  {{</* /tab */>}}\n  {{</* tab header=\"JavaScript\" */>}}\n    let driver = await new Builder().forBrowser('chrome').build();\n  {{</* /tab */>}}\n  {{</* tab header=\"Kotlin\" */>}}\n    val driver = ChromeDriver()\n  {{</* /tab */>}}\n{{</* /tabpane */>}}\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Class Name with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a web element on a page using its class name attribute with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.className()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.className('information'));\n```\n\n----------------------------------------\n\nTITLE: Find Element by CSS Selector in Python\nDESCRIPTION: This snippet uses a CSS selector to find a specific web element in Python with Selenium WebDriver. It finds the element with class 'tomatoes' that is a descendant of the element with id 'fruits'. This is done using a single command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nfruit = driver.find_element(By.CSS_SELECTOR,\"#fruits .tomatoes\")\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset with Selenium\nDESCRIPTION: This code performs a drag-and-drop operation by a specified offset using Selenium WebDriver. It first clicks and holds the source element, moves the mouse by the offset, and then releases the mouse. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nsource = @driver.find_element(id: 'draggable')\n@driver.action.click_and_hold(source).move_by(50, 50).release.perform\n```\n\n----------------------------------------\n\nTITLE: Get Current Window Handle - Selenium\nDESCRIPTION: Retrieves the current window handle, which is a unique identifier for the window within the current session. This identifier can be used to switch back to the window later. This code snippet shows how to retrieve the current window handle in different languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver.getWindowHandle();\n```\n\n----------------------------------------\n\nTITLE: Creating Default Code Tabs in Selenium Documentation\nDESCRIPTION: This snippet shows how to create default code tabs for different programming languages (Java, Python, CSharp, Ruby, JavaScript, Kotlin) within the Selenium documentation. It leverages the Docsy code tab functionality with `langEqualsHeader=true` for automatic code formatting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.zh-cn.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n{{</* tabpane langEqualsHeader=true */>}}\n  {{</* tab header=\"Java\" */>}}\n    WebDriver driver = new ChromeDriver();\n  {{</* /tab */>}}\n  {{</* tab header=\"Python\" */>}}\n    driver = webdriver.Chrome()\n  {{</* /tab */>}}\n  {{</* tab header=\"CSharp\" */>}}\n    var driver = new ChromeDriver();\n  {{</* /tab */>}}\n  {{</* tab header=\"Ruby\" */>}}\n    driver = Selenium::WebDriver.for :chrome\n  {{</* /tab */>}}\n  {{</* tab header=\"JavaScript\" */>}}\n    let driver = await new Builder().forBrowser('chrome').build();\n  {{</* /tab */>}}\n  {{</* tab header=\"Kotlin\" */>}}\n    val driver = ChromeDriver()\n  {{</* /tab */>}}\n{{</* /tabpane */>}}\n```\n\n----------------------------------------\n\nTITLE: Tearing down WebDriver in Python\nDESCRIPTION: This code snippet demonstrates how to tear down a WebDriver instance after a test in Python. It closes the browser and quits the driver instance. This is handled within the fixture in Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: GoogleSearchPage with Fluent API - Java\nDESCRIPTION: This Java code defines a `GoogleSearchPage` class that extends a `BasePage` and implements a Fluent API for setting the search string. The `setSearchString` method returns the `GoogleSearchPage` instance, allowing method chaining.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/consider_using_a_fluent_api.zh-cn.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class BasePage {\n    protected WebDriver driver;\n\n    public BasePage(WebDriver driver) {\n        this.driver = driver;\n    }\n}\n\npublic class GoogleSearchPage extends BasePage {\n    public GoogleSearchPage(WebDriver driver) {\n        super(driver);\n        // Generally do not assert within pages or components.\n        // Effectively throws an exception if the lambda condition is not met.\n        new WebDriverWait(driver, Duration.ofSeconds(3)).until(d -> d.findElement(By.id(\"logo\")));\n    }\n\n    public GoogleSearchPage setSearchString(String sstr) {\n        driver.findElement(By.id(\"gbqfq\")).sendKeys(sstr);\n        return this;\n    }\n\n    public void clickSearchButton() {\n        driver.findElement(By.id(\"gbqfb\")).click();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Logging in a User (Ruby)\nDESCRIPTION: This snippet demonstrates how to create a user with specific permissions using a UserFactory and then log in as that user. It assumes the existence of a UserFactory and related classes. The login_as method returns an account_page object for further interaction.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n# Create a user who has read-only permissions--they can configure a unicorn,\n# but they do not have payment information set up, nor do they have\n# administrative privileges. At the time the user is created, its email\n# address and password are randomly generated--you don't even need to\n# know them.\nuser = UserFactory.create_common_user #This method is defined elsewhere.\n\n# Log in as this user.\n# Logging in on this site takes you to your personal \"My Account\" page, so the\n// AccountPage object is returned by the loginAs method, allowing you to then\n# perform actions from the AccountPage.\naccount_page = login_as(user.email, user.password)\n```\n\n----------------------------------------\n\nTITLE: Execute JavaScript in Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to execute JavaScript code within the current browsing context using Selenium WebDriver in C#. It utilizes the `IJavaScriptExecutor` interface to execute JavaScript code. The example shows how to click on an element, retrieve text from an element, and execute JavaScript directly. Dependencies: OpenQA.Selenium, OpenQA.Selenium.Chrome.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_65\n\nLANGUAGE: CSharp\nCODE:\n```\n//creating Chromedriver instance\n\tIWebDriver driver = new ChromeDriver();\n\t//Creating the JavascriptExecutor interface object by Type casting\n\tIJavaScriptExecutor js = (IJavaScriptExecutor) driver;\n\t//Button Element\n\tIWebElement button = driver.FindElement(By.Name(\"btnLogin\"));\n\t//Executing JavaScript to click on element\n\tjs.ExecuteScript(\"arguments[0].click();\", button);\n\t//Get return value from script\n\tString text = (String)js.ExecuteScript(\"return arguments[0].innerText\", button);\n\t//Executing JavaScript directly\n\tjs.ExecuteScript(\"console.log('hello world')\");\n```\n\n----------------------------------------\n\nTITLE: Quitting a Selenium Driver Session in Kotlin\nDESCRIPTION: This Kotlin code snippet shows how to quit a Selenium WebDriver session using the `driver.quit()` method. It ensures that the browser instance is closed properly and all related resources are released, leading to a clean exit after the test execution.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.pt-br.md#_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.chrome.ChromeOptions\nimport kotlin.test.assertEquals\nimport org.junit.jupiter.api.AfterEach\nimport org.junit.jupiter.api.BeforeEach\nimport org.junit.jupiter.api.Test\nimport org.openqa.selenium.WebDriver\n\nclass FirstScriptTest {\n\n    lateinit var driver: WebDriver\n\n    @BeforeEach\n    fun setup() {\n        val options = ChromeOptions()\n        options.addArguments(\"--headless=new\")\n        driver = ChromeDriver(options)\n    }\n\n    @Test\n    fun firstScript() {\n        driver.get(\"https://www.google.com/\")\n        assertEquals(\"Google\", driver.title)\n    }\n\n    @AfterEach\n    fun teardown() {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Google Search Page Object with Fluent API in Java\nDESCRIPTION: This snippet shows the implementation of a GoogleSearchPage object with a fluent API. The `setSearchString` method returns the page object instance, allowing for method chaining. It also includes a base page class and a constructor with an explicit wait.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/consider_using_a_fluent_api.pt-br.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class BasePage {\n    protected WebDriver driver;\n\n    public BasePage(WebDriver driver) {\n        this.driver = driver;\n    }\n}\n\npublic class GoogleSearchPage extends BasePage {\n    public GoogleSearchPage(WebDriver driver) {\n        super(driver);\n        // Generally do not assert within pages or components.\n        // Effectively throws an exception if the lambda condition is not met.\n        new WebDriverWait(driver, Duration.ofSeconds(3)).until(d -> d.findElement(By.id(\"logo\")));\n    }\n\n    public GoogleSearchPage setSearchString(String sstr) {\n        driver.findElement(By.id(\"gbqfq\")).sendKeys(sstr);\n        return this;\n    }\n\n    public void clickSearchButton() {\n        driver.findElement(By.id(\"gbqfb\")).click();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Take Element Screenshot - Selenium\nDESCRIPTION: This Python snippet demonstrates how to capture a screenshot of a specific element on the current browser window using Selenium WebDriver. It navigates to a website, finds the h1 element, takes a screenshot of it, saves it as a PNG image, and then closes the browser. Requires the selenium package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_78\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Chrome()\n\n    # Navigate to url\ndriver.get(\"http://www.example.com\")\n\nele = driver.find_element(By.CSS_SELECTOR, 'h1')\n\n    # Returns and base64 encoded string into image\nele.screenshot('./image.png')\n\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid in Standalone Mode (Shell)\nDESCRIPTION: This command starts Selenium Grid in standalone mode, combining all grid components into a single process. It is the simplest way to start a Grid for local development and testing. The server listens for RemoteWebDriver requests on http://localhost:4444 by default.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.ja.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar standalone\n```\n\n----------------------------------------\n\nTITLE: Script Pinning in Ruby\nDESCRIPTION: This Ruby snippet demonstrates script pinning using the Chrome DevTools Protocol (CDP) within a Selenium environment. The snippet relies on a pre-existing Selenium setup connected to a Chrome browser instance.  It utilizes `execute_cdp` to enable the debugger and set the script source.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.zh-cn.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.execute_cdp 'Debugger.enable', {}\ndriver.execute_cdp 'Debugger.setScriptSource', scriptId: '', scriptSource: ''\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Driver Service Log File Output\nDESCRIPTION: This code snippet demonstrates how to configure the Firefox driver service to output logs to a specific file. This is useful for debugging and troubleshooting issues with the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nservice = FirefoxService(log_path=\"geckodriver.log\")\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Resident Credential in Python\nDESCRIPTION: Creates a non-resident (stateless) credential using python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ncred = Credential(\n    id=base64.b64decode(\"dGhlcmUgbm8=\")\n)\nauthenticator.add_credential(cred)\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium Grid Node for HtmlUnit Driver\nDESCRIPTION: This snippet shows how to configure a Selenium Grid node using a `htmlunit.toml` file to support HtmlUnitDriver.  It specifies the driver's display name and stereotype, indicating that the browser name is \"htmlunit\". The `slot-matcher` is also defined to use a custom class for matching slots.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2024/htmlunit-remote-for-selenium-4-grid.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[node]\ndetect-drivers = false\n[[node.driver-configuration]]\ndisplay-name = \"HtmlUnit\"\nstereotype = \"{\\\"browserName\\\": \\\"htmlunit\\\"}\"\n\n[distributor]\nslot-matcher = \"org.openqa.selenium.htmlunit.remote.HtmlUnitSlotMatcher\"\n```\n\n----------------------------------------\n\nTITLE: Running Edge Beta in Standalone Mode\nDESCRIPTION: This command runs a Docker container with Edge Beta in standalone mode. It maps ports 4444 and 7900 for Selenium and VNC access, respectively, and allocates 2GB of shared memory. The container is removed after it stops.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/dev-and-beta-channel-browsers-via-docker-selenium.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-edge:beta\n```\n\n----------------------------------------\n\nTITLE: Gem Install Selenium-Webdriver Ruby\nDESCRIPTION: This snippet shows the command to install the Selenium WebDriver gem using `gem install`. This command downloads and installs the Selenium WebDriver gem, enabling Ruby scripts to automate web browsers.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.pt-br.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngem install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: Double Click with Selenium\nDESCRIPTION: Moves to the center of an element and performs a double click. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"clickable\"));\nActions actions = new Actions(driver);\nactions.doubleClick(element).perform();\n```\n\n----------------------------------------\n\nTITLE: Scroll From Offset of Origin using Selenium Wheel (Kotlin)\nDESCRIPTION: Scrolls from a specified offset of the viewport origin by a given amount. Requires x offset, y offset, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nActions(driver)\n  .scrollFromOrigin(WheelInput.Origin.viewport(15, 25), 20, 50)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Hub - Java\nDESCRIPTION: This command starts the Selenium Grid Hub, which is the central point for managing and distributing tests across available nodes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.pt-br.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar hub\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - Ruby\nDESCRIPTION: Demonstrates how to set the browser window's position (top-left corner) to a specific x and y coordinate in Ruby using Selenium WebDriver. The code uses the `move_to` method to move the window.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.manage.window.move_to(0,0)\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium WebDriver in Kotlin\nDESCRIPTION: This Kotlin code snippet presents a basic initialization of Selenium WebDriver. It navigates to a webpage.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.zh-cn.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\npackage dev.selenium.hello\n\nimport org.openqa.selenium.WebDriver\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver: WebDriver = ChromeDriver()\n\n    driver.get(\"https://www.google.com\")\n\n    driver.quit()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Resident Credential in C#\nDESCRIPTION: This C# code snippet adds a non-resident key credential using the provided parameters.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nawait session.WebAuthn.AddCredentialAsync(new PublicKeyCredentialParams()\n{\n    UserId = \"user2\",\n    UserName = \"User 2\",\n    DisplayName = \"User Two\"\n});\n\n```\n\n----------------------------------------\n\nTITLE: User Creation and Login with Selenium (CSharp)\nDESCRIPTION: This C# snippet demonstrates how to create a user and log in. It utilizes UserFactory.CreateCommonUser() for user creation and LoginAs() for logging in, retrieving an AccountPage object.  The CreateCommonUser() method is assumed to be defined elsewhere.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\n// Create a user who has read-only permissions--they can configure a unicorn,\n// but they do not have payment information set up, nor do they have\n// administrative privileges. At the time the user is created, its email\n// address and password are randomly generated--you don't even need to\n// know them.\nUser user = UserFactory.CreateCommonUser(); //This method is defined elsewhere.\n\n// Log in as this user.\n// Logging in on this site takes you to your personal \"My Account\" page, so the\n// AccountPage object is returned by the loginAs method, allowing you to then\n// perform actions from the AccountPage.\nAccountPage accountPage = LoginAs(user.Email, user.Password);\n```\n\n----------------------------------------\n\nTITLE: Pip Install Selenium from Wheel Python\nDESCRIPTION: This snippet demonstrates how to install Selenium from a downloaded .whl file using pip.  It specifies the path to the .whl file.  The x.x.x will be replaced with the version number.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.pt-br.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install selenium-x.x.x.-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Switching to IFrame by Index - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to switch to an IFrame using its index.  It switches to the second frame (index 1).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\n# Switch to the second frame\ndriver.switch_to.frame(1)\n```\n\n----------------------------------------\n\nTITLE: Getting Element Attribute\nDESCRIPTION: This snippet demonstrates how to retrieve the value of a specific attribute of an element using Selenium. The `getAttribute` method is used to fetch the value of the `title` attribute of the located element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_36\n\nLANGUAGE: Java\nCODE:\n```\nString title = searchBox.getAttribute(\"title\");\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Get URI of each node and grid\nDESCRIPTION: This command uses curl to execute a GraphQL query and retrieve the URI of each node in the grid from the `nodesInfo` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.zh-cn.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\": \"{ nodesInfo { nodes { uri } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Install Selenium WebDriver via gem - Ruby\nDESCRIPTION: This shell command demonstrates how to install the Selenium WebDriver gem using gem in Ruby. It installs the latest version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ngem install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: Removing a Virtual Authenticator in JavaScript\nDESCRIPTION: This snippet shows how to remove a previously created virtual authenticator using JavaScript. It uses the removeVirtualAuthenticator method with the authenticator ID to delete it from the browser context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait devtools.security.removeVirtualAuthenticator(authenticator.id);\n```\n\n----------------------------------------\n\nTITLE: Asserting Title with Selenium\nDESCRIPTION: This code snippet shows how to assert the title of a webpage using Selenium with RSpec in Ruby. It retrieves the title and asserts that it matches the expected value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ntitle = @driver.title\nexpect(title).to eq(\"SeleniumHQ Browser Automation\")\n```\n\n----------------------------------------\n\nTITLE: Setting User Verified in Java\nDESCRIPTION: This Java snippet configures the authenticator to simulate user verification either successfully or unsuccessfully. This is done using the WebAuthn API. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_35\n\nLANGUAGE: Java\nCODE:\n```\ndevTools.getDomains().getWebAuthn().setUserVerified(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Background - Java\nDESCRIPTION: This Java snippet sets whether to print background colors and images to true using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setBackground(true);\n\nassertThat(printOptions.getBackground()).isTrue();\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element in Kotlin\nDESCRIPTION: This Kotlin snippet performs a drag and drop operation from a source element to a target element. It uses the Actions class and requires a WebDriver instance, along with WebElement instances for the source and target.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_65\n\nLANGUAGE: kotlin\nCODE:\n```\nval source = driver.findElement(By.id(\"draggable\"))\nval target = driver.findElement(By.id(\"droppable\"))\n\nval actions = Actions(driver)\nactions.dragAndDrop(source, target).perform()\n```\n\n----------------------------------------\n\nTITLE: Defining Unicorn Attributes in Python\nDESCRIPTION: This snippet defines the attributes of a Unicorn object and then uses the account_page and add_unicorn_page objects to configure the unicorn. It takes the sparkles object, fills out a web form, and clicks submit. Dependencies include the Unicorn, UnicornColors, UnicornAccessories, UnicornAdornments, account_page, and add_unicorn_page objects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# The Unicorn is a top-level Object--it has attributes, which are set here.\n# This only stores the values; it does not fill out any web forms or interact\n# with the browser in any way.\nsparkles = Unicorn(\"Sparkles\", UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS)\n\n# Since we're already \"on\" the account page, we have to use it to get to the\n# actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n# takes us there.\nadd_unicorn_page = account_page.add_unicorn()\n\n# Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n# its createUnicorn() method. This method will take Sparkles' attributes,\n# fill out the form, and click submit.\nunicorn_confirmation_page = add_unicorn_page.create_unicorn(sparkles)\n```\n\n----------------------------------------\n\nTITLE: Removing Credential in Java\nDESCRIPTION: This Java code snippet removes a credential from the authenticator based on a provided credential ID. It uses the WebAuthn API for this operation. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\ndevTools.getDomains().getWebAuthn().removeCredential(CREDENTIAL_ID);\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by Class in Java\nDESCRIPTION: This Java code snippet illustrates how to configure logging on a per-class level, setting the desired log level for specific classes instead of using the root logger. This allows for more granular control over the verbosity of logs. It uses the standard Java logging API.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nLogger logger = Logger.getLogger(LoggingTest.class.getName());\nlogger.setLevel(Level.FINE);\n```\n\n----------------------------------------\n\nTITLE: Defining Transparent Color in Python\nDESCRIPTION: This snippet shows how to define the 'transparent' color using the Color.from_string() method in Python. Browsers may return 'transparent' as the color value for elements without a defined color, and this allows you to handle that case.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nTRANSPARENT = Color.from_string('transparent')\n```\n\n----------------------------------------\n\nTITLE: Move Mouse by Offset - Selenium\nDESCRIPTION: Moves the mouse cursor from its current position by a specified offset. Positive X values move the cursor right, positive Y values move the cursor down. The origin is the top-left corner of the viewport if the cursor hasn't been moved before.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nactions.moveByOffset(30, -10)\n    .pause(Duration.ofSeconds(1))\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Node B with Custom Capability\nDESCRIPTION: This command starts a Selenium Node with a custom capability set to `false` for Chrome. It disables driver detection, configures the display name, sets the maximum sessions to 1, and defines the stereotype with the custom capability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar node --detect-drivers false --driver-configuration display-name=\"Chrome (custom capability true)\" max-sessions=1 stereotype='{\"browserName\":\"chrome\",\"gsg:customcap\":false}' --port 6262\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Java Example\nDESCRIPTION: A Java code snippet demonstrating how to create a Selenium session with basic authentication by authenticating with the configured username and password. It uses `ClientConfig` to set the base URL and authentication credentials.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.zh-cn.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nClientConfig clientConfig = ClientConfig.defaultConfig()\n  .baseUrl(new URL(\"http://localhost:4444\"))\n  .authenticateAs(new UsernameAndPassword(\"admin\", \"myStrongPassword\"));\nHttpCommandExecutor executor = new HttpCommandExecutor(clientConfig);\nRemoteWebDriver driver = new RemoteWebDriver(executor, new ChromeOptions());\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Location - Ruby\nDESCRIPTION: This Ruby code snippet illustrates setting the driver path using the `Selenium::WebDriver::Service` class.  This ensures the correct driver executable is used.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.ja.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.chrome(path: '/path/to/chromedriver')\n```\n\n----------------------------------------\n\nTITLE: Get Current URL with Selenium\nDESCRIPTION: Retrieves the current URL from the browser's address bar using Selenium WebDriver. Examples are provided in Java, Python, C#, Ruby, and JavaScript, demonstrating how to access the `driver.getCurrentUrl()` method or equivalent property to get the URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.ja.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.current_url\n```\n\n----------------------------------------\n\nTITLE: Working with Firefox Profiles - Ruby\nDESCRIPTION: Demonstrates how to create and use Firefox profiles in Ruby. This involves creating a `Selenium::WebDriver::Firefox::Profile` object and assigning it to the `Selenium::WebDriver::Firefox::Options`. Requires the Selenium WebDriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\nprofile = Selenium::WebDriver::Firefox::Profile.new\n# Add custom preferences to the profile here\noptions = Selenium::WebDriver::Firefox::Options.new(profile: profile)\n```\n\n----------------------------------------\n\nTITLE: Find Element by CSS Selector - Java\nDESCRIPTION: This snippet shows how to locate a web element using a CSS selector in Java. It initializes a ChromeDriver and utilizes the `findElement` method with `By.cssSelector` to find the element with the id 'fname'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.cssSelector(\"#fname\"));\n```\n\n----------------------------------------\n\nTITLE: Enabling Safari Automation (Shell)\nDESCRIPTION: This command enables automation on Safari. It must be run from the terminal before any Selenium tests can be executed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.ja.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsafaridriver --enable\n```\n\n----------------------------------------\n\nTITLE: Delete Session with cURL\nDESCRIPTION: This snippet terminates a WebDriver session using its session ID. This operation quits the driver and removes it from the active sessions map. Subsequent requests with the same session ID will result in an error.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://localhost:4444/session/<session-id>'\n```\n\n----------------------------------------\n\nTITLE: Get Node Status\nDESCRIPTION: This snippet retrieves the status of a specific node in the Selenium Grid. The status includes information about availability, sessions, and slots.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.zh-cn.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://localhost:5555/status'\n```\n\n----------------------------------------\n\nTITLE: Verifying Unicorn Existence - Java\nDESCRIPTION: This Java snippet demonstrates how to verify the existence of a Unicorn using the `exists()` method on the `unicornConfirmationPage` object. It takes the `sparkles` object as input, which specifies the attributes to check. `Assert.assertTrue()` is used to assert that the Unicorn exists with all specified attributes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\n// The exists() method from UnicornConfirmationPage will take the Sparkles\n// object--a specification of the attributes you want to see, and compare\n// them with the fields on the page.\nAssert.assertTrue(\"Sparkles should have been created, with all attributes intact\", unicornConfirmationPage.exists(sparkles));\n```\n\n----------------------------------------\n\nTITLE: Print Page in Java\nDESCRIPTION: This code snippet demonstrates how to print a page to PDF using Selenium WebDriver's BiDi API in Java.  It utilizes the `print` method from the `BrowsingContext` class.  Requires Selenium version 4.14.1 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_36\n\nLANGUAGE: Java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(((HasDevTools) driver).getDevTools(),\n                                         ((RemoteWebDriver) driver).getWindowHandle());\n\n    String pdf = browsingContext.print();\n    assertNotNull(pdf);\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element w/ Offset (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates scrolling from an element with an offset and a specified amount using Selenium's Actions API. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"id-of-element\"))\nActions(driver)\n    .scrollFromOrigin(element, 25, 25, 100, 200)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Importing Color class for Selenium\nDESCRIPTION: This code snippet demonstrates how to import the Color class in different programming languages to use it with Selenium WebDriver. The Color class allows working with colors in web elements, such as converting and comparing them.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.support.Color;\n```\n\n----------------------------------------\n\nTITLE: Iterating Through WebElements Collection - Kotlin\nDESCRIPTION: This Kotlin snippet finds all elements with the tag name 'p' on a webpage and prints the text content of each element. It initializes a FirefoxDriver, navigates to a URL, finds the elements using `driver.findElements`, and prints the text using `element.text` in a loop.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_28\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.By\nimport org.openqa.selenium.firefox.FirefoxDriver\n\nfun main() {\n    val driver = FirefoxDriver()\n    try {\n        driver.get(\"https://example.com\")\n        // Obtém todos os elementos disponiveis com o nome da tag 'p'\n        val elements = driver.findElements(By.tagName(\"p\"))\n        for (element in elements) {\n            println(\"Paragraph text:\" + element.text)\n        }\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Edge Installation Warning\nDESCRIPTION: This snippet shows the warning message displayed by Selenium Manager when attempting to automatically install Edge in Windows without administrator permissions. It highlights the limitation of installing Edge using Selenium Manager in Windows environments without admin privileges.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.en.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nedge can only be installed in Windows with administrator permissions\n```\n\n----------------------------------------\n\nTITLE: Using Java 11 HTTP Client with Selenium Grid\nDESCRIPTION: This command configures Selenium Grid to use the Java 11 HTTP client by setting the `webdriver.http.factory` system property and loading the `selenium-http-jdk-client` extension. It starts the Grid in standalone mode.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.pt-br.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\njava -Dwebdriver.http.factory=jdk-http-client -jar selenium-server-<version>.jar --ext selenium-http-jdk-client-<version>.jar standalone\n```\n\n----------------------------------------\n\nTITLE: Running Chrome Beta in Standalone Mode\nDESCRIPTION: This command runs a Docker container with Chrome Beta in standalone mode.  It maps ports 4444 and 7900 for Selenium and VNC access, respectively, and allocates 2GB of shared memory. The container is removed after it stops.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/dev-and-beta-channel-browsers-via-docker-selenium.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-chrome:beta\n```\n\n----------------------------------------\n\nTITLE: Start Selenium Grid Node with Managed Downloads\nDESCRIPTION: Starts a Selenium Grid Node with managed downloads enabled using the `--enable-managed-downloads true` flag. This allows the node to manage and provide access to files downloaded during test sessions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.zh-cn.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\njava -jar selenium-server-<version>.jar node --enable-managed-downloads true\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element by Class Name\nDESCRIPTION: This snippet demonstrates how to find the first element matching a specific class name within the entire DOM using Selenium WebDriver. It uses the `findElement` method with `By.className` to locate the first element with the class \"tomatoes\". The result is a WebElement object representing the located element, which can be used for further actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebElement vegetable = driver.findElement(By.className(\"tomatoes\"));\n```\n\n----------------------------------------\n\nTITLE: Testing EdgeHTML with MutableCapabilities in Selenium\nDESCRIPTION: This snippet suggests using MutableCapabilities to test EdgeHTML with Selenium. It highlights a specific approach for handling EdgeHTML testing, particularly relevant in the context of evolving browser support within Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/meetings/2021/public-project-meeting-20210211.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSo, you can test EdgeHTML with MutableCapabilities if you need to\n```\n\n----------------------------------------\n\nTITLE: Initializing IE Driver without IE present (CSharp)\nDESCRIPTION: This code snippet demonstrates how to initialize the Internet Explorer Driver when IE is not present on the system (Windows 11 default) using C#. It uses default options, relying on the driver to locate Edge.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\nvar options = new InternetExplorerOptions();\nvar driver = new InternetExplorerDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Setting Silent Mode for Internet Explorer in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates setting the 'silent' capability for Internet Explorer.  This suppresses the diagnostic output of the IEDriverServer by setting the capability on the options before creating the InternetExplorerDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.Capabilities\nimport org.openqa.selenium.ie.InternetExplorerDriver\nimport org.openqa.selenium.ie.InternetExplorerOptions\n\nfun main() {\n    val options = InternetExplorerOptions()\n    options.setCapability(\"silent\", true)\n    val driver = InternetExplorerDriver(options)\n    try {\n        driver.get(\"https://google.com/ncr\")\n        val caps = driver.getCapabilities()\n        println(caps)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java JUnit Dependency (Maven)\nDESCRIPTION: This snippet shows how to add JUnit as a dependency to a Java project using Maven. It should be included in the `pom.xml` file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.junit.jupiter</groupId>\n  <artifactId>junit-jupiter-api</artifactId>\n  <version>5.10.0</version>\n  <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Specific WebDriver Dependency in Maven\nDESCRIPTION: This snippet shows how to add a specific WebDriver implementation, such as the FirefoxDriver, to your Maven `pom.xml` file. This is useful when you know exactly which driver you will be using and want to avoid unnecessary dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/how-to-use-selenium-2-with-maven.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.seleniumhq.selenium</groupId>\n    <artifactId>selenium-firefox-driver</artifactId>\n    <version>2.0a5</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Internet Explorer Driver Log Level - Ruby\nDESCRIPTION: This code snippet demonstrates how to set the log level for the Internet Explorer Driver in Ruby. It utilizes the `Selenium::WebDriver::IE::Options` class and its `log_level` attribute to configure the desired log level. The driver is then initialized using these options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_33\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::IE::Options.new\noptions[:log_level] = :debug\ndriver = Selenium::WebDriver.for :ie, options: options\n```\n\n----------------------------------------\n\nTITLE: Navigating to Rust Directory\nDESCRIPTION: This command changes the current directory to the `rust` directory within the cloned Selenium repository, preparing for the build process.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.ja.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd selenium/rust\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Enabled in JavaScript\nDESCRIPTION: This code snippet demonstrates how to check if a web element is enabled on a webpage using Selenium WebDriver in JavaScript. It uses the `isEnabled()` method. The method returns `true` if the element is enabled, and `false` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('element is enabled', async () => {\n  expect(await driver.findElement(By.name('button_input')).isEnabled()).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Logging in a User (CSharp)\nDESCRIPTION: This snippet demonstrates how to create a user with specific permissions using a UserFactory and then log in as that user. It assumes the existence of a UserFactory and related classes. The LoginAs method returns an AccountPage object for further interaction.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\n// Create a user who has read-only permissions--they can configure a unicorn,\n// but they do not have payment information set up, nor do they have\n// administrative privileges. At the time the user is created, its email\n// address and password are randomly generated--you don't even need to\n// know them.\nUser user = UserFactory.CreateCommonUser(); //This method is defined elsewhere.\n\n// Log in as this user.\n// Logging in on this site takes you to your personal \"My Account\" page, so the\n// AccountPage object is returned by the loginAs method, allowing you to then\n// perform actions from the AccountPage.\nAccountPage accountPage = LoginAs(user.Email, user.Password);\n```\n\n----------------------------------------\n\nTITLE: Get Grid Status\nDESCRIPTION: Retrieves the current status of the Selenium Grid, including details of all registered nodes, their availability, sessions, and slots.  Requires the Grid to be running. The output is a JSON representation of the Grid's state.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.ja.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncURL GET 'http://localhost:4444/status'\n```\n\n----------------------------------------\n\nTITLE: Getting Current URL with Selenium\nDESCRIPTION: This snippet retrieves the current URL of the webpage loaded in the browser using Selenium WebDriver. It demonstrates how to access the current URL in different programming languages. Dependencies: Selenium WebDriver library for the respective language.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.zh-cn.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndriver.current_url\n```\n\n----------------------------------------\n\nTITLE: Selenium Dependency in requirements.txt (Python)\nDESCRIPTION: Adds Selenium as a dependency in the 'requirements.txt' file for a Python project. This file lists all the required packages for the project. Using `pip install -r requirements.txt` will install all these dependencies including Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.ja.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nselenium\n```\n\n----------------------------------------\n\nTITLE: Install Unsigned Firefox Extension (C#)\nDESCRIPTION: This C# code snippet installs an unsigned Firefox extension from a directory. The driver is cast to the IAddsExtensions interface. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\n((IAddsExtensions)driver).InstallExtension(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"unpacked_extension\"), true);\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel - JavaScript\nDESCRIPTION: This code snippet demonstrates how to scroll to a specific web element using Selenium's Actions API and Wheel class in JavaScript. It takes a WebElement as input and scrolls the viewport until the bottom of the element is at the bottom of the screen. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.name('cheese'));\nawait driver.actions().scrollToElement(element).perform();\n```\n\n----------------------------------------\n\nTITLE: Call function in sandbox (Java)\nDESCRIPTION: This Java code demonstrates how to call a function within a sandbox using Selenium BiDi. It creates a sandbox, defines a JavaScript function within it, and then calls the function using `script.callFunction`. The sandbox ID is essential for targeting the function call to the correct isolated context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void callFunctionInSandbox() {\n        try (Bidi bidi = new Bidi(driver)) {\n            BrowsingContext browsingContext = new BrowsingContext(bidi, driver);\n            browsingContext.navigate(getUrl(\"formPage.html\"));\n\n            Sandbox sandbox = bidi.script().createSandbox(browsingContext.getId());\n            CallFunctionResult result = bidi.script().callFunction(\n                new CallFunctionParameters(\"() => 1\", sandbox.getSandbox(),\n                    Collections.emptyList()),\n                CallFunctionResult.class);\n\n            assertEquals(1L, result.getResult().getValue());\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Locate Element in Shadow DOM\nDESCRIPTION: This snippet demonstrates how to access and locate an element within a Shadow DOM using Selenium. It first finds the shadow host element using CSS selector, then obtains the shadow root, and finally locates the desired element within the shadow root using another CSS selector. Requires Selenium 4.0 or greater.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_12\n\nLANGUAGE: CSharp\nCODE:\n```\nvar shadowHost = _driver.FindElement(By.CssSelector(\"#shadow_host\"));\nvar shadowRoot = shadowHost.GetShadowRoot();\nvar shadowContent = shadowRoot.FindElement(By.CssSelector(\"#shadow_content\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Binary Location - C#\nDESCRIPTION: Demonstrates how to set the browser binary location for Edge in C#.\nThis allows specifying a non-standard path to the Edge browser executable.\nDependencies: Selenium WebDriver, EdgeDriver, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_12\n\nLANGUAGE: CSharp\nCODE:\n```\noptions.BinaryLocation = \"/path/to/edge/msedge\";\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot - Selenium WebDriver - Java\nDESCRIPTION: This snippet takes a screenshot of the current browser window using the Selenium WebDriver API in Java and saves it to a file.  It requires the Apache Commons IO library to copy the screenshot file. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_53\n\nLANGUAGE: Java\nCODE:\n```\nimport org.apache.commons.io.FileUtils;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport java.io.*;\nimport org.openqa.selenium.*;\n\npublic class SeleniumTakeScreenshot {\n\tpublic static void main(String args[]) throws IOException {\n\t\tWebDriver driver = new ChromeDriver();\n\t\tdriver.get(\"http://www.example.com\");\n\t\tFile scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);\n\t\tFileUtils.copyFile(scrFile, new File(\"./image.png\"));\n\t\tdriver.quit();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Converting and Comparing Color Formats - Selenium WebDriver\nDESCRIPTION: This snippet shows how to convert a Color object to different formats (HEX, RGBA, RGB) and compare them to static values in Kotlin. This allows for flexible color validation by ensuring the color matches the expected format and value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\nassert(loginButtonBackgroundColour.asHex().equals(\"#ff69b4\"))\nassert(loginButtonBackgroundColour.asRgba().equals(\"rgba(255, 105, 180, 1)\"))\nassert(loginButtonBackgroundColour.asRgb().equals(\"rgb(255, 105, 180)\"))\n```\n\n----------------------------------------\n\nTITLE: Get New Session Queue Requests with cURL\nDESCRIPTION: This snippet retrieves the current requests in the New Session Request Queue, returning the total number of requests and their payloads. No authorization is required. The Grid URL depends on the deployment mode (Standalone, Hub-Node, or Router).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://localhost:4444/se/grid/newsessionqueue/queue'\n```\n\n----------------------------------------\n\nTITLE: Setting Page Orientation using PrintOptions in Java\nDESCRIPTION: This code snippet demonstrates how to set the page orientation to landscape using the PrintOptions class in Java. The `setOrientation()` method is used to specify the desired orientation. The `getOrientation()` is used to confirm the setting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setOrientation(PrintOptions.Orientation.LANDSCAPE);\n\nassertThat(printOptions.getOrientation()).isEqualTo(PrintOptions.Orientation.LANDSCAPE);\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Node A with Custom Capability\nDESCRIPTION: This command starts a Selenium Node with a custom capability set to `true` for Chrome.  It disables driver detection, configures the display name, sets the maximum sessions to 1, and defines the stereotype with the custom capability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar node --detect-drivers false --driver-configuration display-name=\"Chrome (custom capability true)\" max-sessions=1 stereotype='{\"browserName\":\"chrome\",\"gsg:customcap\":true}' --port 6161\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Authentication - CSharp\nDESCRIPTION: Demonstrates how to set basic authentication credentials using Selenium and CDP in C#. This sets the 'Authorization' header in the request to bypass authentication prompts, achieved through CDP command execution. It depends on Selenium WebDriver and Base64 encoding.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nstring credentials = Convert.ToBase64String(Encoding.UTF8.GetBytes(string.Format(\"{0}:{1}\", user, password)));\n            Dictionary<string, object> headers = new Dictionary<string, object>\n            {\n                { \"headers\", new Dictionary<string, string>() { { \"Authorization\", string.Format(\"Basic {0}\", credentials) } } }\n            };\n            ((IHasCdp)driver).ExecuteCdpCommand(\"Network.setExtraHTTPHeaders\", headers);\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Selected in C#\nDESCRIPTION: This code snippet demonstrates how to check if a web element is selected on a webpage using Selenium WebDriver in C#. It uses the `Selected` property of the IWebElement interface. The property returns `true` if the element is selected, and `false` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"checkbox_input\"));\nAssert.That(element.Selected, Is.True);\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes Kotlin\nDESCRIPTION: This code snippet demonstrates how to add pointer event attributes to a Pen input source in Kotlin, specifically setting properties like width, height, pressure, and tilt. It involves creating a Pen object and then configuring and performing a sequence of actions. Requires Selenium version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.pt-br.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval pen = Pen(driver, \"pen1\")\nval viewport = PointerInput.Origin.viewport()\n\nval pointerAttributes: MutableMap<String, Any> = HashMap()\npointerAttributes[\"width\"] = 20\npointerAttributes[\"height\"] = 40\npointerAttributes[\"pressure\"] = 0.8\npointerAttributes[\"tiltX\"] = 10\npointerAttributes[\"tiltY\"] = -10\n\nval sequence = Sequence(pen, 1)\nsequence.addAction(pen.createPointerMove(viewport, 0, 0, Duration.ofMillis(10), pointerAttributes))\nsequence.addAction(pen.createPointerDown(MouseButton.LEFT))\nsequence.addAction(pen.createPointerUp(MouseButton.LEFT))\n\ndriver.perform(listOf(sequence))\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium\nDESCRIPTION: This code shows how to handle disabled options. Since Selenium 4.5, you cannot create a Select object from a disabled <select> element, and you cannot select a disabled <option>. Attempting to do so will result in an exception.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_36\n\nLANGUAGE: Java\nCODE:\n```\nWebElement disabledSelectElement = driver.findElement(By.name(\"single_disabled\"));\nSelect select2 = new Select(disabledSelectElement);\nselect2.selectByVisibleText(\"Enabled\");\n```\n\n----------------------------------------\n\nTITLE: SecuredPage LoadableComponent Implementation (Java)\nDESCRIPTION: This code defines a SecuredPage class that extends LoadableComponent.  It handles authentication by navigating to a login page, entering credentials, and returning to the original URL. The constructor takes a WebDriver, a parent LoadableComponent, a username, and a password as parameters. Dependencies: WebDriver, LoadableComponent, org.openqa.selenium.By, org.openqa.selenium.NoSuchElementException, org.openqa.selenium.WebElement, org.junit.Assert.fail.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.pt-br.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.webdriver;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\n\nimport static org.junit.Assert.fail;\n\npublic class SecuredPage extends LoadableComponent<SecuredPage> {\n\n  private final WebDriver driver;\n  private final LoadableComponent<?> parent;\n  private final String username;\n  private final String password;\n\n  public SecuredPage(WebDriver driver, LoadableComponent<?> parent, String username, String password) {\n    this.driver = driver;\n    this.parent = parent;\n    this.username = username;\n    this.password = password;\n  }\n\n  @Override\n  protected void load() {\n    parent.get();\n\n    String originalUrl = driver.getCurrentUrl();\n\n    // Sign in\n    driver.get(\"https://www.google.com/accounts/ServiceLogin?service=code\");\n    driver.findElement(By.name(\"Email\")).sendKeys(username);\n    WebElement passwordField = driver.findElement(By.name(\"Passwd\"));\n    passwordField.sendKeys(password);\n    passwordField.submit();\n\n    // Now return to the original URL\n    driver.get(originalUrl);\n  }\n\n  @Override\n  protected void isLoaded() throws Error {\n    // If you're signed in, you have the option of picking a different login.\n    // Let's check for the presence of that.\n\n    try {\n      WebElement div = driver.findElement(By.id(\"multilogin-dropdown\"));\n    } catch (NoSuchElementException e) {\n      fail(\"Cannot locate user name link\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Relative Locator - Above in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate an element above another element using Relative Locators in Selenium.  It locates an input element above the element with the id 'password'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\nemail_locator = locate_with(By.TAG_NAME, \"input\").above({By.ID: \"password\"})\n```\n\n----------------------------------------\n\nTITLE: Getting Performance Metrics - CSharp\nDESCRIPTION: Demonstrates how to retrieve performance metrics using Selenium and CDP in C#. It executes a CDP command to retrieve the metrics and prints their names and values to the console. It depends on Selenium WebDriver with CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_15\n\nLANGUAGE: CSharp\nCODE:\n```\nvar metrics = ((IHasCdp)driver).ExecuteCdpCommand<Performance.GetMetricsResponse>(\"Performance.getMetrics\", new Dictionary<string, object>());\n            foreach (var metric in metrics.Metrics)\n            {\n                Console.WriteLine(metric.Name + \" = \" + metric.Value);\n            }\n```\n\n----------------------------------------\n\nTITLE: Waiting for Watir-Webdriver Downloads\nDESCRIPTION: This resource provides a solution for handling file downloads when using Watir-Webdriver. The solution likely includes methods to monitor the download process and determine the file name after the download is complete.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/a-smattering-of-selenium-88.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Setting Script Timeout in Java\nDESCRIPTION: This Java code snippet demonstrates setting the script timeout for a Selenium session. The script timeout specifies the maximum time an executing script is allowed to run before being interrupted. The timeout is defined in seconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\nDuration duration = Duration.ofSeconds(50);\noptions.setScriptTimeout(duration);\n```\n\n----------------------------------------\n\nTITLE: Enable Logs - Kotlin\nDESCRIPTION: This snippet is a placeholder as there is no code provided. The goal is to show how to enable logs with Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_64\n\nLANGUAGE: Kotlin\nCODE:\n```\n// No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Pausing Actions API in C#\nDESCRIPTION: This code snippet demonstrates how to pause between actions using the Actions API in C#. It creates an Actions object, moves to an element, pauses for a specified duration, and then performs the actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.pt-br.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nActions actions = new Actions(driver);\nactions.MoveToElement(element)\n    .Pause(TimeSpan.FromSeconds(1))\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Monkey Patching in PHP with Patchwork\nDESCRIPTION: Patchwork is a PHP library that allows for monkey patching. This means it enables modifying or extending existing code at runtime. The author hasn't found a specific use case yet but anticipates needing it in the future.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2011/a-smattering-of-selenium-65.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Setting Background - C#\nDESCRIPTION: This C# snippet shows how to set whether background colors and images are printed using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_16\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.BackgroundsEnabled = true;\n\nAssert.That(printOptions.BackgroundsEnabled, Is.EqualTo(true));\n```\n\n----------------------------------------\n\nTITLE: Take Element Screenshot - Selenium\nDESCRIPTION: This Ruby snippet demonstrates how to capture a screenshot of a specific element on the current browser window using Selenium WebDriver. It navigates to a website, finds the h1 element, takes a screenshot of it, saves it as a JPG image, and then closes the browser.  Requires the selenium-webdriver gem and Selenium4-alpha7 Ruby bindings or above.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_80\n\nLANGUAGE: Ruby\nCODE:\n```\n    # Works with Selenium4-alpha7 Ruby bindings and above\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://example.com/'\n  ele = driver.find_element(:css, 'h1')\n\n    # Takes and Stores the element screenshot in specified path\n  ele.save_screenshot('./image.jpg')\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to None in Python\nDESCRIPTION: This snippet shows how to set the page load strategy to 'none' in Python using Selenium. WebDriver waits until the initial page is downloaded.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\noptions = Options()\noptions.page_load_strategy = \"none\"\ndriver = webdriver.Chrome(options=options)\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes - Java\nDESCRIPTION: This code snippet demonstrates how to add pointer event attributes like width, height, pressure, and tilt to a Pen action in Selenium with Java. It initializes a new Pen object, moves to an element, sets the pointer properties using PointerInput.Origin.viewport(), and then performs a pen down action. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.zh-cn.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nPen pen = new Pen(driver, \"pen1\");\nWebElement element = driver.findElement(By.id(\"example\"));\n\npen.moveTo(PointerInput.Origin.viewport(), element.getLocation().getX() + 1, element.getLocation().getY() + 1)\n  .pointerMove(Duration.ofMillis(10), PointerInput.Origin.viewport(), 100, 100, 1, 1, 50, true, 10, 10, PointerInput.Pressure.of(0.5f), PointerInput.TangentialPressure.of(0.5f), PointerInput.TiltX.of(0), PointerInput.TiltY.of(0), PointerInput.Twist.of(0))\n  .penDown(LEFT)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Install Selenium WebDriver in Ruby using gem\nDESCRIPTION: This command installs the Selenium WebDriver gem in Ruby using the gem package manager. It fetches and installs the latest version of the selenium-webdriver gem, making it available for use in Ruby projects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2011/selenium-2-0b2-released.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngem install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: Querying URI of Each Node and Grid\nDESCRIPTION: This example demonstrates how to query the URI of each node and the grid. The GraphQL query is sent using a `curl` command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.en.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\": \"{ nodesInfo { nodes { uri } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium from Wheel File\nDESCRIPTION: Installs the Selenium Python library from a downloaded wheel file using pip. This approach is useful when direct internet access is limited.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.zh-cn.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install selenium-x.x.x.-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Excluding Switches in Edge Options - Ruby\nDESCRIPTION: Demonstrates how to exclude specific switches in Edge options using Ruby.\nThis allows you to override default browser behavior or disable specific features.\nDependencies: Selenium WebDriver, Edge, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_24\n\nLANGUAGE: Ruby\nCODE:\n```\noptions['excludeSwitches'] = ['enable-automation']\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Event Bus (Java)\nDESCRIPTION: This command starts the Event Bus component in a distributed Grid setup. The Event Bus enables internal communication between different Grid components. Default ports are 4442, 4443 and 5557.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.zh-cn.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar event-bus --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443 --port 5557\n```\n\n----------------------------------------\n\nTITLE: Chrome Casting - Kotlin\nDESCRIPTION: This snippet is a placeholder as there is no code provided. The goal is to drive Chrome Cast devices with Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_52\n\nLANGUAGE: Kotlin\nCODE:\n```\n// No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Setting ensureCleanSession for Internet Explorer\nDESCRIPTION: This code snippet demonstrates how to set the `ensureCleanSession` capability for Internet Explorer using Selenium. Setting this capability to `true` clears the cache, browser history, and cookies of all running instances of Internet Explorer.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\noptions = webdriver.IeOptions()\noptions.ensure_clean_session = True\n```\n\n----------------------------------------\n\nTITLE: Listing Git Commits in Java\nDESCRIPTION: This command is used to retrieve a list of commit logs in the Java portion of the Selenium project.  It filters commits made after the 'selenium-4.0.0-alpha-5' tag up to the current HEAD, displaying each commit on a single line. It helps assess recent changes and contributions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/meetings/2020/public-project-meeting-20200423.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log selenium-4.0.0-alpha-5..HEAD --oneline java\n```\n\n----------------------------------------\n\nTITLE: Adding nuget.org as a package source\nDESCRIPTION: Adds nuget.org to the nuget.config file. This ensures that nuget is properly configured to use the official nuget package repository.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.zh-cn.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <packageSources>\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n    <add key=\"nuget.org\" value=\"https://www.nuget.org/api/v2/\" />   \n  </packageSources>\n...\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: NettyClient Class Declaration (Java)\nDESCRIPTION: This code snippet shows the context of AsyncHttpClient implementation in NettyClient class of selenium-4.0.0-alpha-7 version.  It relates to the discussion around memory leaks and using a single instance of AsyncHttpClient.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/meetings/2021/public-project-meeting-20210225.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nhttps://github.com/SeleniumHQ/selenium/blob/selenium-4.0.0-alpha-7/java/client/src/org/openqa/selenium/remote/http/netty/NettyClient.java#L41\n```\n\n----------------------------------------\n\nTITLE: Initializing IE Driver with Edge Compatibility Mode (Python)\nDESCRIPTION: This code snippet demonstrates how to initialize the Internet Explorer Driver to run Microsoft Edge in IE Compatibility Mode using Python. It sets the `edge_executable_path` option.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.ie.options import Options\n\nie_options = Options()\nie_options.edge_executable_path = '/path/to/msedge.exe'\ndriver = webdriver.Ie(options=ie_options)\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Repository\nDESCRIPTION: This command pushes your local branch to the remote repository on GitHub, enabling you to create a pull request.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.en.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n% git push origin my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: TOML Configuration Example\nDESCRIPTION: Illustrates a general configuration pattern with sections, options, and values within a TOML file. This is a basic structure that applies to various configuration settings in Selenium Grid.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.ja.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[section1]\noption1=\"value\"\n\n[section2]\noption2=[\"value1\",\"value2\"]\noption3=true\n```\n\n----------------------------------------\n\nTITLE: Importing Color Class\nDESCRIPTION: This snippet shows how to import the Color class in different programming languages to work with colors in Selenium WebDriver. The Color class allows you to create color objects and perform operations like comparing and converting colors.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.support.color import Color\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element - Selenium\nDESCRIPTION: Drags an element from its original location and drops it onto another target element. The action involves pressing the left mouse button on the source element, moving to the target element, and then releasing the mouse button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nWebElement source = driver.findElement(By.id(\"draggable\"));\nWebElement target = driver.findElement(By.id(\"droppable\"));\nactions.dragAndDrop(source, target).perform();\n```\n\n----------------------------------------\n\nTITLE: Excluding Switches in Chrome Options\nDESCRIPTION: This code snippet shows how to exclude specific command-line switches from being added to Chrome's launch arguments. This can be useful for preventing unwanted behavior or conflicts.  A common use case is to disable the popup blocker.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\noptions.excludeSwitches = ['enable-automation'];\nlet service = new chrome.ServiceBuilder(pathToChromeDriver).build();\nlet driver = await new Builder()\n  .setChromeOptions(options)\n```\n\n----------------------------------------\n\nTITLE: DOM Mutation Handler in Java using CDP\nDESCRIPTION: This Java snippet uses Chrome DevTools Protocol (CDP) to intercept network requests. It shows how to listen for network events and modify request headers. It relies on a Selenium WebDriver instance and CDP access.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.en.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n    cdp.send(\"Network.enable\", Map.of());\n```\n\n----------------------------------------\n\nTITLE: Configuring EdgeDriver Log File in Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to configure EdgeDriver to write logs to a file and append to it. This requires specifying both the log path and log level.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :edge, service_args: ['--append-log', '--log-path=edge.log'], log_level: :debug\n```\n\n----------------------------------------\n\nTITLE: WebDriver Quit with try/ensure - Ruby\nDESCRIPTION: This Ruby snippet uses a `begin/ensure` block to ensure that the WebDriver session is always closed, even if an exception occurs within the `begin` block. The `driver.quit` method is called in the `ensure` block.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nbegin\n    #WebDriver code here...\nensure\n    driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Verify Unicorn Existence (Ruby)\nDESCRIPTION: This snippet demonstrates verifying the existence of the created unicorn using the `exists?()` method of the UnicornConfirmationPage. It expects that the `exists?()` method returns `true`, indicating that the 'Sparkles' unicorn has been successfully created with all attributes intact, comparing the provided `sparkles` object with the data on the confirmation page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_17\n\nLANGUAGE: Ruby\nCODE:\n```\n# The exists() method from UnicornConfirmationPage will take the Sparkles\n# object--a specification of the attributes you want to see, and compare\n# them with the fields on the page.\nexpect(unicorn_confirmation_page.exists?(sparkles)).to be, 'Sparkles should have been created, with all attributes intact'\n```\n\n----------------------------------------\n\nTITLE: Creating a Pen Input Source Kotlin\nDESCRIPTION: This code snippet demonstrates how to create a Pen input source in Kotlin and use it to interact with a web element.  It defines a Pen, moves it to a specific element, and then performs a down and up action, simulating a tap or click. Requires Selenium version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.pt-br.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval pen = Pen(driver, \"pen1\")\nval element = driver.findElement(By.id(\"my-element\"))\n\nActions(driver)\n    .tick(pen.moveTo(element))\n    .tick(pen.down(MouseButton.LEFT))\n    .tick(pen.up(MouseButton.LEFT))\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Driver Service Log Console Output\nDESCRIPTION: This code snippet shows how to configure the GeckoDriverService to send log output to the console in Java, Python, and Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nGeckoDriverService service = new GeckoDriverService.Builder()\n    .usingStandardOutput()\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi with WebSocket URL in Ruby\nDESCRIPTION: This snippet shows how to enable BiDi in Ruby by setting the `web_socket_url` option to `true`. This establishes a WebSocket connection for bidirectional communication, enabling access to the WebDriver BiDi protocol. Requires Selenium WebDriver and browser-specific driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.web_socket_url = true\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset (Java)\nDESCRIPTION: This Java code snippet shows how to scroll from a viewport offset by a given amount using Selenium's Actions API. Requires Selenium WebDriver and Actions class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nnew Actions(driver)\n  .scrollFromOrigin(WheelInput.WHEEL, 25, 25, 100, 200)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Functional Testing with Arquillian\nDESCRIPTION: Arquillian is a testing framework, primarily for Java, that facilitates functional testing. The mentioned link leads to a blog post about using Arquillian for functional testing in Java environments. The author notes seeing a lot of Java in this framework.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2011/a-smattering-of-selenium-65.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Printing webpage with landscape orientation in Ruby\nDESCRIPTION: This snippet demonstrates how to print a webpage using Selenium in Ruby. It navigates to a URL and sets the print orientation to 'landscape', retrieving the base64 encoded content.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_89\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.navigate_to 'https://www.selenium.dev'\n\nbase64encodedContent = driver.print_page(orientation: 'landscape')\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - Python\nDESCRIPTION: This Python snippet demonstrates how to set the position of the browser window to the top-left corner of the primary monitor (0, 0) using Selenium WebDriver. The `set_window_position()` method is called with the desired x and y coordinates as arguments.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n    # Move the window to the top left of the primary monitor\ndriver.set_window_position(0, 0)\n```\n\n----------------------------------------\n\nTITLE: Filtering Logger Output - Python\nDESCRIPTION: This snippet shows how to manage logging in Python by module. Instead of only working with \"selenium\", different levels can be specified for different modules, providing more flexibility in managing log verbosity.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogger = logging.getLogger('selenium.webdriver.remote.remote_connection')\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium\nDESCRIPTION: This code snippet demonstrates how to handle disabled options in a select element using Selenium WebDriver. It attempts to select a disabled option and verifies that a `NoSuchElementException` is thrown. This feature is available from Selenium 4.5 and later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_41\n\nLANGUAGE: Kotlin\nCODE:\n```\nassertThrows<NoSuchElementException> { select.selectByValue(\"disabled\") }\n```\n\n----------------------------------------\n\nTITLE: Printing Page in Java with Selenium\nDESCRIPTION: This snippet demonstrates how to print a page using Selenium in Java. It retrieves the content of a PDF after setting print options for page ranges. Requires Selenium's PrintOptions and Pdf classes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_92\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.print.PrintOptions;\n\n    driver.get(\"https://www.selenium.dev\");\n    printer = (PrintsPage) driver;\n\n    PrintOptions printOptions = new PrintOptions();\n    printOptions.setPageRanges(\"1-2\");\n\n    Pdf pdf = printer.print(printOptions);\n    String content = pdf.getContent();\n```\n\n----------------------------------------\n\nTITLE: Pushing Git branch to remote repository (Shell)\nDESCRIPTION: This code pushes the current local branch to the remote origin repository. This makes the local changes available on the remote repository. After pushing the branch to the remote repository, a pull request can be created.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.zh-cn.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n% git push origin my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Starting Multiple Selenium Grid Nodes on the Same Machine (Shell)\nDESCRIPTION: These commands start multiple Node components on the same machine, each listening on a different port. This allows for increased parallel execution of tests. Node 1 listens on port 5555, and Node 2 listens on port 6666.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.en.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --port 5555\n```\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --port 6666\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Exception Handler using WebDriver BiDi in Python\nDESCRIPTION: This snippet demonstrates how to add a handler for JavaScript exception events using WebDriver BiDi in Python. It allows the user to record or take actions on JavaScript exceptions occurring within the browser. Requires a WebDriver instance with BiDi enabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.zh-cn.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nexception_handler = bidi.script.add_exception_listener(print)\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodules and starting Hugo server (Shell)\nDESCRIPTION: This code snippet shows how to initialize Git submodules, navigate to the website directory, and start the Hugo development server.  This allows for local development and preview of changes to the Selenium documentation website.  Hugo is used to build and render the website.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.zh-cn.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n% git submodule update --init --recursive\n% cd website_and_docs\n% hugo server\n```\n\n----------------------------------------\n\nTITLE: Taking Full Page Screenshots in Firefox with Selenium (Java)\nDESCRIPTION: This snippet shows how to take a full page screenshot using Selenium WebDriver in Java. It casts the WebDriver instance to a `TakesScreenshot` interface and calls the `getScreenshotAs` method to capture the screenshot as a file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_47\n\nLANGUAGE: java\nCODE:\n```\nFile screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);\n```\n\n----------------------------------------\n\nTITLE: Getting Element Attribute\nDESCRIPTION: This snippet demonstrates how to retrieve the value of a specific attribute of an element using Selenium. The `getAttribute` method is used to fetch the value of the `title` attribute of the located element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet title = await searchBox.getAttribute('title');\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Authentication using CDP in Java\nDESCRIPTION: This Java code snippet demonstrates how to set basic authentication credentials using the Chrome DevTools Protocol (CDP) within Selenium. It uses the `Network.enable` and `Network.setExtraHTTPHeaders` methods to insert the credentials into the header of network requests. This is useful for accessing pages that require authentication.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> headers = new HashMap<>();\nString encodedCredentials = Base64.getEncoder().encodeToString(\"username:password\".getBytes());\nheaders.put(\"Authorization\", \"Basic \" + encodedCredentials);\n```\n\n----------------------------------------\n\nTITLE: Creating Code Tabs with Selenium WebDriver in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to initialize a Selenium WebDriver instance for Chrome. It provides a concise way to create a ChromeDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.ja.md#_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n```\n\n----------------------------------------\n\nTITLE: Removing Virtual Authenticator in Java\nDESCRIPTION: Removes the previously added virtual authenticator from the Selenium WebDriver in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n((HasAuthentication) driver).removeVirtualAuthenticator(authenticator);\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects from Strings in Python\nDESCRIPTION: This snippet demonstrates how to create Color objects in Python from various string representations, including HEX, RGB, RGBA, HSL, and HSLA color formats. These color objects can then be used for comparison and conversion in Selenium tests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nHEX_COLOUR = Color.from_string('#2F7ED8')\nRGB_COLOUR = Color.from_string('rgb(255, 255, 255)')\nRGB_COLOUR = Color.from_string('rgb(40%, 20%, 40%)')\nRGBA_COLOUR = Color.from_string('rgba(255, 255, 255, 0.5)')\nRGBA_COLOUR = Color.from_string('rgba(40%, 20%, 40%, 0.5)')\nHSL_COLOUR = Color.from_string('hsl(100, 0%, 50%)')\nHSLA_COLOUR = Color.from_string('hsla(100, 0%, 50%, 0.5)')\n```\n\n----------------------------------------\n\nTITLE: Using Safari Technology Preview (Python)\nDESCRIPTION: This Python code demonstrates how to use Safari Technology Preview by directly setting the binary location. It requires the selenium package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.ja.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.safari.options import Options as SafariOptions\n\noptions = SafariOptions()\noptions.binary_location = \"/Applications/Safari Technology Preview.app/Contents/MacOS/Safari Technology Preview\"\ndriver = webdriver.Safari(options=options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium Grid for PostGreSQL Session Storage\nDESCRIPTION: This TOML configuration file specifies the settings for using a JDBC-backed session map with Selenium Grid, connecting to a PostGreSQL database. It includes the JDBC URL, username, and password for database authentication.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.pt-br.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[sessions]\nimplementation = \"org.openqa.selenium.grid.sessionmap.jdbc.JdbcBackedSessionMap\"\njdbc-url = \"jdbc:postgresql://localhost:5432/selenium_sessions\"\njdbc-user = \"seluser\"\njdbc-password = \"seluser\"\n```\n\n----------------------------------------\n\nTITLE: Clear New Session Queue\nDESCRIPTION: Clears the new session queue in the Selenium Grid, rejecting all pending session requests. The server returns an error response to each client whose request was rejected. The result of the command is the total number of requests deleted. Requires queue URL and registration secret.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://localhost:4444/se/grid/newsessionqueue/queue' --header 'X-REGISTRATION-SECRET: <secret>'\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window - Selenium\nDESCRIPTION: This snippet demonstrates how to set the browser window to fullscreen mode using Selenium WebDriver, similar to pressing F11 in most browsers.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_68\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Manage().Window.FullScreen();\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bundler\nDESCRIPTION: This command installs the required dependencies for the Selenium Ruby examples using Bundler.  Bundler manages gem dependencies defined in the Gemfile.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/ruby/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbundler install\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License Copyright Notice\nDESCRIPTION: This snippet shows the standard copyright notice required when applying the Apache License 2.0 to your work.  You must replace `[yyyy]` with the copyright year and `[name of copyright owner]` with the name of the copyright owner. The notice should be placed within appropriate comment syntax for the file format.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/copyright.zh-cn.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n```\n\n----------------------------------------\n\nTITLE: Creating Transparent Color Object - Selenium WebDriver\nDESCRIPTION: This snippet shows how to create a Color object representing the \"transparent\" color in Python. This handles cases where no color is explicitly set on an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nTRANSPARENT = Color.from_string('transparent')\n```\n\n----------------------------------------\n\nTITLE: Augmenting RemoteWebDriver in Java\nDESCRIPTION: Uses the Augmenter class in Java to automatically incorporate the implementation of all interfaces that match the capabilities of the RemoteWebDriver, enabling browser-specific features.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nEventFiringWebDriver augmentedDriver = (EventFiringWebDriver) new Augmenter().augment(driver);\n```\n\n----------------------------------------\n\nTITLE: Casting with Edge in Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to initiate casting from Edge. It shows how to get casting sinks, start casting to the first sink, and stop casting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.cast_sinks.each { |sink| puts sink }\ndriver.start_casting(driver.cast_sinks.first)\ndriver.stop_casting\n```\n\n----------------------------------------\n\nTITLE: Comparing Color Objects\nDESCRIPTION: This snippet demonstrates how to compare two Color objects for equality in Kotlin using the equals method. It shows how to verify if the background color of a login button matches a predefined color (HOTPINK).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nassert(loginButtonBackgroundColour.equals(HOTPINK))\n```\n\n----------------------------------------\n\nTITLE: Configuring ChromeDriver Using Selenium Manager (CLI)\nDESCRIPTION: This command-line example shows how Selenium Manager can be used to configure ChromeDriver for the Chrome browser. It demonstrates how Selenium Manager automatically finds and sets up the correct ChromeDriver version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/introducing-selenium-manager.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ./selenium-manager --browser chrome\nINFO\t/home/boni/.cache/selenium/chromedriver/linux64/106.0.5249.61/chromedriver\n```\n\n----------------------------------------\n\nTITLE: Forward Button Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to simulate a click on the forward button of a mouse (button X2) using Selenium. It involves pressing and releasing mouse button 4 on the target element. Requires Selenium WebDriver and version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"my-element\")\nactions = ActionChains(driver)\nactions.move_to_element(element).click(MouseButton.FORWARD).perform()\n```\n\n----------------------------------------\n\nTITLE: Get Current URL with Selenium\nDESCRIPTION: Retrieves the current URL from the browser's address bar using Selenium WebDriver. Examples are provided in Java, Python, C#, Ruby, and JavaScript, demonstrating how to access the `driver.getCurrentUrl()` method or equivalent property to get the URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.ja.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndriver.current_url\n```\n\n----------------------------------------\n\nTITLE: Uninstall Firefox Extension (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to uninstall a Firefox extension using Selenium. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.uninstallAddon('extension@example.com');\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - Selenium WebDriver - Java\nDESCRIPTION: This snippet sets the position of the browser window to the top-left corner (0, 0) of the primary display using the Selenium WebDriver API in Java. It uses the Point class to specify the new window position. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_29\n\nLANGUAGE: Java\nCODE:\n```\n// 将窗口移动到主显示器的左上角\ndriver.manage().window().setPosition(new Point(0, 0));\n```\n\n----------------------------------------\n\nTITLE: Printing a Page in Python\nDESCRIPTION: This code snippet demonstrates how to print a webpage using the `print_page` method in Python and retrieve the PDF in base64 format. The `print_page` method requires `PrintOptions` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\npage = driver.print_page()\n\npage = driver.print_page(PrintOptions())\n```\n\n----------------------------------------\n\nTITLE: Find All Elements by Tag Name\nDESCRIPTION: This snippet demonstrates how to find all elements on a page that match a specific tag name. It uses the `findElements` method with `By.tagName` to locate all `<li>` elements. The result is a list of WebElement objects, representing all the list items on the page. If no elements are found it returns an empty list.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nval plants: List<WebElement> = driver.findElements(By.tagName(\"li\"))\n```\n\n----------------------------------------\n\nTITLE: Updating Selenium WebDriver in package.json - JSON\nDESCRIPTION: This JSON snippet shows how to update the Selenium WebDriver dependency in a `package.json` file for a JavaScript project, setting the version to ^4.4.0.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\":  \"selenium-tests\",\n  \"version\":  \"1.0.0\",\n  \"dependencies\":  {\n    \"selenium-webdriver\":  \"^4.4.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Console Logs in Ruby\nDESCRIPTION: This Ruby snippet demonstrates capturing console logs using Selenium and CDP. The code uses `execute_cdp` to enable logging and retrieve the log entries.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.zh-cn.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.execute_cdp 'Log.enable'\nputs driver.execute_cdp('Log.getEntries')\n```\n\n----------------------------------------\n\nTITLE: Finding Element(s) Before Upgrade - Java\nDESCRIPTION: Demonstrates the deprecated way of finding elements in Selenium 3 using Java's `findElementBy*` and `findElements*` methods. These methods are removed in Selenium 4.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\ndriver.findElementByClassName(\"className\");\ndriver.findElementByCssSelector(\".className\");\ndriver.findElementById(\"elementId\");\ndriver.findElementByLinkText(\"linkText\");\ndriver.findElementByName(\"elementName\");\ndriver.findElementByPartialLinkText(\"partialText\");\ndriver.findElementByTagName(\"elementTagName\");\ndriver.findElementByXPath(\"xPath\");\n```\n\nLANGUAGE: Java\nCODE:\n```\ndriver.findElementsByClassName(\"className\");\ndriver.findElementsByCssSelector(\".className\");\ndriver.findElementsById(\"elementId\");\ndriver.findElementsByLinkText(\"linkText\");\ndriver.findElementsByName(\"elementName\");\ndriver.findElementsByPartialLinkText(\"partialText\");\ndriver.findElementsByTagName(\"elementTagName\");\ndriver.findElementsByXPath(\"xPath\");\n```\n\n----------------------------------------\n\nTITLE: Sample Customized Node (Java)\nDESCRIPTION: This Java code demonstrates a customized Selenium Grid Node that extends the `org.openqa.selenium.grid.node.Node` class. It overrides several methods to add logging before and after the execution of key operations such as `newSession`, `executeWebDriverCommand`, `getSession`, etc.  It requires Selenium Grid dependencies and is designed to be built into a jar and used with the `--node-implementation` flag.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/customize_node.en.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage org.seleniumhq.samples;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.util.UUID;\nimport java.util.function.Supplier;\nimport org.openqa.selenium.Capabilities;\nimport org.openqa.selenium.NoSuchSessionException;\nimport org.openqa.selenium.WebDriverException;\nimport org.openqa.selenium.grid.config.Config;\nimport org.openqa.selenium.grid.data.CreateSessionRequest;\nimport org.openqa.selenium.grid.data.CreateSessionResponse;\nimport org.openqa.selenium.grid.data.NodeId;\nimport org.openqa.selenium.grid.data.NodeStatus;\nimport org.openqa.selenium.grid.data.Session;\nimport org.openqa.selenium.grid.log.LoggingOptions;\nimport org.openqa.selenium.grid.node.HealthCheck;\nimport org.openqa.selenium.grid.node.Node;\nimport org.openqa.selenium.grid.node.local.LocalNodeFactory;\nimport org.openqa.selenium.grid.security.Secret;\nimport org.openqa.selenium.grid.security.SecretOptions;\nimport org.openqa.selenium.grid.server.BaseServerOptions;\nimport org.openqa.selenium.internal.Either;\nimport org.openqa.selenium.io.TemporaryFilesystem;\nimport org.openqa.selenium.remote.SessionId;\nimport org.openqa.selenium.remote.http.HttpRequest;\nimport org.openqa.selenium.remote.http.HttpResponse;\nimport org.openqa.selenium.remote.tracing.Tracer;\n\npublic class DecoratedLoggingNode extends Node {\n\n  private Node node;\n\n  protected DecoratedLoggingNode(Tracer tracer, NodeId nodeId, URI uri, Secret registrationSecret, Duration sessionTimeout) {\n    super(tracer, nodeId, uri, registrationSecret, sessionTimeout);\n  }\n\n  public static Node create(Config config) {\n    LoggingOptions loggingOptions = new LoggingOptions(config);\n    BaseServerOptions serverOptions = new BaseServerOptions(config);\n    URI uri = serverOptions.getExternalUri();\n    SecretOptions secretOptions = new SecretOptions(config);\n    NodeOptions nodeOptions = new NodeOptions(config);\n    Duration sessionTimeout = nodeOptions.getSessionTimeout();\n\n    // Refer to the foot notes for additional context on this line.\n    Node node = LocalNodeFactory.create(config);\n\n    DecoratedLoggingNode wrapper = new DecoratedLoggingNode(loggingOptions.getTracer(),\n        node.getId(),\n        uri,\n        secretOptions.getRegistrationSecret(),\n        sessionTimeout);\n    wrapper.node = node;\n    return wrapper;\n  }\n\n  @Override\n  public Either<WebDriverException, CreateSessionResponse> newSession(\n      CreateSessionRequest sessionRequest) {\n    return perform(() -> node.newSession(sessionRequest), \"newSession\");\n  }\n\n  @Override\n  public HttpResponse executeWebDriverCommand(HttpRequest req) {\n    return perform(() -> node.executeWebDriverCommand(req), \"executeWebDriverCommand\");\n  }\n\n  @Override\n  public Session getSession(SessionId id) throws NoSuchSessionException {\n    return perform(() -> node.getSession(id), \"getSession\");\n  }\n\n  @Override\n  public HttpResponse uploadFile(HttpRequest req, SessionId id) {\n    return perform(() -> node.uploadFile(req, id), \"uploadFile\");\n  }\n\n  @Override\n  public HttpResponse downloadFile(HttpRequest req, SessionId id) {\n    return perform(() -> node.downloadFile(req, id), \"downloadFile\");\n  }\n\n  @Override\n  public TemporaryFilesystem getDownloadsFilesystem(UUID uuid) {\n    return perform(() -> {\n      try {\n        return node.getDownloadsFilesystem(uuid);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }, \"downloadsFilesystem\");\n  }\n\n  @Override\n  public TemporaryFilesystem getUploadsFilesystem(SessionId id) throws IOException {\n    return perform(() -> {\n      try {\n        return node.getUploadsFilesystem(id);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }, \"uploadsFilesystem\");\n\n  }\n\n  @Override\n  public void stop(SessionId id) throws NoSuchSessionException {\n    perform(() -> node.stop(id), \"stop\");\n  }\n\n  @Override\n  public boolean isSessionOwner(SessionId id) {\n    return perform(() -> node.isSessionOwner(id), \"isSessionOwner\");\n  }\n\n  @Override\n  public boolean isSupporting(Capabilities capabilities) {\n    return perform(() -> node.isSupporting(capabilities), \"isSupporting\");\n  }\n\n  @Override\n  public NodeStatus getStatus() {\n    return perform(() -> node.getStatus(), \"getStatus\");\n  }\n\n  @Override\n  public HealthCheck getHealthCheck() {\n    return perform(() -> node.getHealthCheck(), \"getHealthCheck\");\n  }\n\n  @Override\n  public void drain() {\n    perform(() -> node.drain(), \"drain\");\n  }\n\n  @Override\n  public boolean isReady() {\n    return perform(() -> node.isReady(), \"isReady\");\n  }\n\n  private void perform(Runnable function, String operation) {\n    try {\n      System.err.printf(\"[COMMENTATOR] Before %s()%n\", operation);\n      function.run();\n    } finally {\n      System.err.printf(\"[COMMENTATOR] After %s()%n\", operation);\n    }\n  }\n\n  private <T> T perform(Supplier<T> function, String operation) {\n    try {\n      System.err.printf(\"[COMMENTATOR] Before %s()%n\", operation);\n      return function.get();\n    } finally {\n      System.err.printf(\"[COMMENTATOR] After %s()%n\", operation);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method with UnitTest - Ruby\nDESCRIPTION: This Ruby snippet shows an example of a tear down method using the `Test::Unit` framework. The `teardown` method calls `@driver.quit` to close the browser session after each test has run.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\n    # UnitTest Teardown\n    # https://www.rubydoc.info/github/test-unit/test-unit/Test/Unit/TestCase\ndef teardown\n    @driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Actionscript Javascript Communication with ExternalInterface\nDESCRIPTION: Demonstrates how to use ExternalInterface to facilitate communication between ActionScript and JavaScript, specifically within the context of Selenium for interacting with Flash/Flex applications.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/a-smattering-of-selenium-28.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Setting browserVersion with ChromeOptions in Java\nDESCRIPTION: This snippet demonstrates how to set the browserVersion capability using ChromeOptions in Java for Selenium 4. This allows specifying a particular browser version for the remote session. The example shows creating ChromeOptions and setting the desired browser version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setBrowserVersion(\"105\");\n```\n\n----------------------------------------\n\nTITLE: Refresh Page with Selenium (Kotlin)\nDESCRIPTION: This snippet demonstrates how to refresh the current page using Selenium WebDriver in Kotlin. It calls the `navigate().refresh()` method. It requires an initialized WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.navigate().refresh()\n```\n\n----------------------------------------\n\nTITLE: Relative Locators: Locating Element Left Of\nDESCRIPTION: This code demonstrates how to locate an element to the left of another element using Relative Locators in Selenium 4.  It uses `RelativeLocator.with(By.tagName(\"button\")).toLeftOf(By.id(\"submit\"))` to find a button element located to the left of the element with ID 'submit'. This is useful when spatial relationships between elements are known.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_47\n\nLANGUAGE: Java\nCODE:\n```\nBy cancelLocator = RelativeLocator.with(By.tagName(\"button\")).toLeftOf(By.id(\"submit\"));\n```\n\n----------------------------------------\n\nTITLE: Remove a preloaded script (Java)\nDESCRIPTION: This Java snippet illustrates how to remove a preloaded script using Selenium BiDi. The script is identified by its ID.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_26\n\nLANGUAGE: Java\nCODE:\n```\n            bidi.script().removePreloadScript(new RemovePreloadScriptParameters(preloadId));\n```\n\n----------------------------------------\n\nTITLE: Selenium WebDriver Tutorial in Python\nDESCRIPTION: This entry refers to a Python WebDriver tutorial focused on Selenium.  It aims to guide users through the process of setting up and using Selenium WebDriver with Python for automated web testing.  The tutorial likely covers basic interactions with web elements and test case construction.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/a-smattering-of-selenium-101.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Get Credential in JavaScript\nDESCRIPTION: This Javascript code retrieves a list of credentials owned by the authenticator and asserts a User Id.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst devtools = await driver.getDevTools()\nawait devtools.attachSession()\nconst credentials = await devtools.send('WebAuthn.getCredentials')\n\nexpect(credentials.result.find((cred) => cred.userId === btoa('user4'))).toBeDefined()\n\n```\n\n----------------------------------------\n\nTITLE: Using Markdown in a Tab - Java Example\nDESCRIPTION: This HTML snippet shows how to use markdown syntax inside a tab, combined with `gh-codeblock` shortcodes to reference code snippets from the Selenium GitHub repository. It includes numbered steps with code examples, demonstrating how to write detailed documentation with executable code references.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.pt-br.md#_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n{{%/* tab header=\"Java\" */%}}\n1. Start the driver\n   {{</* gh-codeblock path=\"examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L12\" */>}}\n2. Navigate to a page\n   {{</* gh-codeblock path=\"examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L14\" */>}}\n3. Quit the driver\n   {{</* gh-codeblock path=\"examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L29\" */>}}\n   {{%/* /tab */%}}\n```\n\n----------------------------------------\n\nTITLE: Finding Element (Before) - Java\nDESCRIPTION: This Java snippet illustrates the old way of finding elements using `findElementBy*` methods in Selenium 3.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\ndriver.findElementByClassName(\"className\");\ndriver.findElementByCssSelector(\".className\");\ndriver.findElementById(\"elementId\");\ndriver.findElementByLinkText(\"linkText\");\ndriver.findElementByName(\"elementName\");\ndriver.findElementByPartialLinkText(\"partialText\");\ndriver.findElementByTagName(\"elementTagName\");\ndriver.findElementByXPath(\"xPath\");\n```\n\n----------------------------------------\n\nTITLE: Printing with PrintsPage in Selenium Java\nDESCRIPTION: This Java code snippet demonstrates how to print a page using PrintsPage and retrieve the base64 encoded PDF.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\nPrintsPage p = (PrintsPage) driver;\nString content = p.print(new PrintOptions());\n\nassertNotNull(content);\nassertFalse(content.isEmpty());\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method with Mocha - JavaScript\nDESCRIPTION: This JavaScript snippet shows an example of a tear down method using Mocha. The `after` hook calls `await driver.quit()` to close the browser session after all tests in the describe block have run. Requires Mocha.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Example using Mocha\n * https://mochajs.org/#hooks\n */\nafter('Tear down', async function () {\n  await driver.quit();\n});\n```\n\n----------------------------------------\n\nTITLE: Check Element Selected Status - Kotlin\nDESCRIPTION: This snippet demonstrates how to check if a web element is selected on the page using Selenium WebDriver in Kotlin. It navigates to a URL, finds an element by name, and uses the isSelected() method to determine if it is selected, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\n//navigates to url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n//returns true if element is checked else returns false\nval attr =  driver.findElement(By.name(\"checkbox_input\")).isSelected()\n```\n\n----------------------------------------\n\nTITLE: Get Current URL with Selenium\nDESCRIPTION: Retrieves the current URL from the browser's address bar using Selenium WebDriver. Examples are provided in Java, Python, C#, Ruby, and JavaScript, demonstrating how to access the `driver.getCurrentUrl()` method or equivalent property to get the URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.ja.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Url\n```\n\n----------------------------------------\n\nTITLE: Tearing Down WebDriver in JavaScript\nDESCRIPTION: This code snippet demonstrates how to tear down the WebDriver after the test execution in JavaScript using Mocha.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.quit();\n```\n\n----------------------------------------\n\nTITLE: Setting Command Line Arguments in Kotlin\nDESCRIPTION: This Kotlin code snippet shows how to add command-line arguments to the Internet Explorer driver.  It sets `useCreateProcessApiToLaunchIe()` and then adds the `-k` switch, before initializing the driver and navigating to a URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.Capabilities\nimport org.openqa.selenium.ie.InternetExplorerDriver\nimport org.openqa.selenium.ie.InternetExplorerOptions\n\nfun main() {\n    val options = InternetExplorerOptions()\n    options.useCreateProcessApiToLaunchIe()\n    options.addCommandSwitches(\"-k\")\n    val driver = InternetExplorerDriver(options)\n    try {\n        driver.get(\"https://google.com/ncr\")\n        val caps = driver.getCapabilities()\n        println(caps)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot - Selenium\nDESCRIPTION: This Ruby snippet demonstrates how to capture a screenshot of the current browser window using Selenium WebDriver. It navigates to a website, takes a screenshot, saves it as a PNG image, and then closes the browser. Requires the selenium-webdriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_75\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://example.com/'\n\n    # Takes and Stores the screenshot in specified path\n  driver.save_screenshot('./image.png')\n\nend\n```\n\n----------------------------------------\n\nTITLE: Fetch Element Attribute Selenium Kotlin\nDESCRIPTION: This Kotlin code snippet uses Selenium WebDriver to navigate to a URL and fetch the value property associated with the textbox with name 'email_input'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_47\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Navigate to URL\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n//fetch the value property associated with the textbox\nval attr = driver.findElement(By.name(\"email_input\")).getAttribute(\"value\")\n```\n\n----------------------------------------\n\nTITLE: Python list-like wrapper around WebDriver Select\nDESCRIPTION: This entry describes a custom Python class that wraps Selenium WebDriver's `support.select.Select` class. This wrapper provides a list-like interface for interacting with HTML select elements. It aims to simplify common operations performed on select elements in web testing, potentially providing a more intuitive API.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/a-smattering-of-selenium-101.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Safari Specific Capabilities - JavaScript\nDESCRIPTION: This JavaScript example shows how to initialize the Safari driver with specified capabilities using the `SafariOptions` class. This enables setting browser-specific arguments before initiating the automation session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.pt-br.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { Builder, SafariOptions } = require('selenium-webdriver');\n\nlet options = new SafariOptions();\nlet driver = new Builder().forBrowser('safari').setSafariOptions(options).build();\n```\n\n----------------------------------------\n\nTITLE: Listening to console logs - Java\nDESCRIPTION: Registers a listener for console.log events using the BiDi API in Selenium. The code snippet shows how to add a console listener and process the received log entries.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nBiDi bidi = driver.getDevTools();\nbidi.getDomains().log().addConsoleListener(entry -> {\n  System.out.println(\"----------------------------\");\n  System.out.println(\"Level: \" + entry.getLevel());\n  System.out.println(\"Text: \" + entry.getText());\n  System.out.println(\"----------------------------\");\n});\n```\n\n----------------------------------------\n\nTITLE: Scroll by Amount using Selenium Wheel - CSharp\nDESCRIPTION: This CSharp code snippet demonstrates how to scroll by a given amount using Selenium's Actions API and Wheel class. It takes delta x and delta y values as input, which represent the amount to scroll horizontally and vertically, respectively. Negative values indicate scrolling left and up. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\nnew Actions(driver)\n    .ScrollByAmount(50, 100)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Setting ChromeOptions Headless Before - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates setting headless mode using the now-deprecated `headless()` method in Selenium's JavaScript bindings. It initializes a Chrome driver with headless options, navigates to selenium.dev, and quits the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/headless-is-going-away.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await env\n  .builder()\n  .setChromeOptions(new chrome.Options().headless())\n  .build();\nawait driver.get('https://selenium.dev');\nawait driver.quit();\n```\n\n----------------------------------------\n\nTITLE: Scroll by Amount with Selenium (JavaScript)\nDESCRIPTION: This JavaScript code shows how to scroll by a specific amount using Selenium's Actions API. Requires Selenium WebDriver and appropriate setup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.actions().scroll({x: 100, y: 200,  duration: 0}).perform();\n```\n\n----------------------------------------\n\nTITLE: Scroll By Amount using Selenium Wheel (Java)\nDESCRIPTION: Scrolls the viewport by a specified amount in the x and y directions. Takes delta x and delta y values as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nnew Actions(driver)\n  .scrollFromOrigin(WheelInput.Origin.viewport(), 20, 50)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Node (Distributed Mode) (Shell)\nDESCRIPTION: This command starts a Node in Distributed mode, registering with the Event Bus.  The Node will then be available to execute tests distributed by the Distributor component.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.en.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443\n```\n\n----------------------------------------\n\nTITLE: Locating Element by XPath in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate a web element using an XPath expression in Selenium WebDriver. It initializes a ChromeDriver instance and uses the `findElement` method with `By.xpath` to find an input element with the attribute `value` equal to 'f', representing the female radio button.  The XPath expression `//input[@value='f']` is a relative XPath.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_31\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.xpath('//input[@value='f']'))\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Name - Python\nDESCRIPTION: This Python snippet demonstrates how to get the platform name using ChromeOptions.  It initializes options and retrieves the platform name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\noptions = ChromeOptions()\nplatform_name = options.platform_name\n```\n\n----------------------------------------\n\nTITLE: Disabling Build Check for Edge in Ruby\nDESCRIPTION: This Ruby code disables the build check for Edge, allowing the driver to be used with mismatched versions of the Edge browser and msedgedriver. This is generally not recommended and unsupported.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.edge(args: ['--disable-build-check'])\n```\n\n----------------------------------------\n\nTITLE: Find Element within a DOM Subset\nDESCRIPTION: This snippet shows how to find an element within a specific DOM subset. It first locates the parent element with the ID \"fruits\", and then searches within that element for the first element with the class name \"tomatoes\". This approach is useful when there are multiple elements with the same locator, but you want to target a specific one.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfruits = driver.find_element(By.ID, \"fruits\")\nfruit = fruits.find_element(By.CLASS_NAME,\"tomatoes\")\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - Kotlin\nDESCRIPTION: Demonstrates how to set the browser window's position (top-left corner) to a specific x and y coordinate in Kotlin using Selenium WebDriver. The code creates a `Point` object and assigns it to the `window.position` property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_53\n\nLANGUAGE: kotlin\nCODE:\n```\n// Move the window to the top left of the primary monitor\ndriver.manage().window().position = Point(0,0)\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Distributor with Options (Java)\nDESCRIPTION: This snippet shows how to start a Selenium distributor using Java, specifying the sessions and session queue URLs, and disabling the bus.  It demonstrates how to connect the distributor to session management services.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar distributor --sessions http://localhost:5556 --sessionqueue http://localhost:5559 --bind-bus false\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodules and Starting Hugo Server (Shell)\nDESCRIPTION: This snippet shows how to update the Git submodules required for the website and documentation, and then starts the Hugo server to preview the website locally. The Hugo server will use the website_and_docs folder.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.pt-br.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n% git submodule update --init --recursive\n% cd website_and_docs\n% hugo server\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects with fromString\nDESCRIPTION: This snippet demonstrates how to create Color objects from different string representations of colors (HEX, RGB, RGBA, HSL, HSLA) using the from_string method in Ruby. The Color class supports various color formats for creating color objects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nHEX_COLOUR = Color.from_string('#2F7ED8')\nRGB_COLOUR = Color.from_string('rgb(255, 255, 255)')\nRGB_COLOUR = Color.from_string('rgb(40%, 20%, 40%)')\nRGBA_COLOUR = Color.from_string('rgba(255, 255, 255, 0.5)')\nRGBA_COLOUR = Color.from_string('rgba(40%, 20%, 40%, 0.5)')\nHSL_COLOUR = Color.from_string('hsl(100, 0%, 50%)')\nHSLA_COLOUR = Color.from_string('hsla(100, 0%, 50%, 0.5)')\n```\n\n----------------------------------------\n\nTITLE: Finding Elements After Upgrade - Java\nDESCRIPTION: This Java code demonstrates how to locate single and multiple web elements using various By.* methods after upgrading to Selenium 4. These methods use the `By` class to specify different element selection criteria.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\ndriver.findElement(By.className(\"className\"));\ndriver.findElement(By.cssSelector(\".className\"));\ndriver.findElement(By.id(\"elementId\"));\ndriver.findElement(By.linkText(\"linkText\"));\ndriver.findElement(By.name(\"elementName\"));\ndriver.findElement(By.partialLinkText(\"partialText\"));\ndriver.findElement(By.tagName(\"elementTagName\"));\ndriver.findElement(By.xpath(\"xPath\"));\n```\n\nLANGUAGE: Java\nCODE:\n```\ndriver.findElements(By.className(\"className\"));\ndriver.findElements(By.cssSelector(\".className\"));\ndriver.findElements(By.id(\"elementId\"));\ndriver.findElements(By.linkText(\"linkText\"));\ndriver.findElements(By.name(\"elementName\"));\ndriver.findElements(By.partialLinkText(\"partialText\"));\ndriver.findElements(By.tagName(\"elementTagName\"));\ndriver.findElements(By.xpath(\"xPath\"));\n```\n\n----------------------------------------\n\nTITLE: Checking for Absence of Boolean Attribute in Selenium IDE\nDESCRIPTION: This snippet demonstrates how to check for the absence of a boolean attribute (in this case, 'multiple') on a select element using assertEval.  It retrieves the attribute value using JavaScript and asserts that it is null.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/atoms-have-come-to-selenium-ide.md#_snippet_2\n\nLANGUAGE: selenium\nCODE:\n```\nassertEval | this.browserbot.findElement(\"css=select[name=elephants]\").getAttribute(\"multiple\"); | null\n```\n\n----------------------------------------\n\nTITLE: Listing Java commits since alpha-5 release with Git\nDESCRIPTION: This command is used to display a concise list of all Java-related commits made to the Selenium project since the alpha-5 release. It's used to assess the quantity of changes since the last release to help determine if a new release is warranted.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2020/public-project-meeting-20200423.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit log selenium-4.0.0-alpha-5..HEAD --oneline java\n```\n\n----------------------------------------\n\nTITLE: Creating and Logging in a User (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a user with specific permissions using a userFactory and then log in as that user. It assumes the existence of a userFactory and related classes. The loginAs method returns an accountPage object for further interaction.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create a user who has read-only permissions--they can configure a unicorn,\n// but they do not have payment information set up, nor do they have\n// administrative privileges. At the time the user is created, its email\n// address and password are randomly generated--you don't even need to\n// know them.\nvar user = userFactory.createCommonUser(); //This method is defined elsewhere.\n\n// Log in as this user.\n// Logging in on this site takes you to your personal \"My Account\" page, so the\n// AccountPage object is returned by the loginAs method, allowing you to then\n// perform actions from the AccountPage.\nvar accountPage = loginAs(user.email, user.password);\n```\n\n----------------------------------------\n\nTITLE: Selenium Grid Session Configuration (Redis)\nDESCRIPTION: This TOML configuration file sets up Selenium Grid to use a Redis-backed session map. It includes the scheme (redis), implementation class, hostname, and port of the Redis server.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.zh-cn.md#_snippet_6\n\nLANGUAGE: TOML\nCODE:\n```\n[sessions]\nscheme = \"redis\"\nimplementation = \"org.openqa.selenium.grid.sessionmap.redis.RedisBackedSessionMap\"\nhostname = \"localhost\"\nport = 6379\n```\n\n----------------------------------------\n\nTITLE: Displaying Security Information for Selenium Server (Java)\nDESCRIPTION: This command is used to display security-related information about the Selenium Server.  It requires Java to be installed and the Selenium Server JAR file to be available. It's designed to provide details on security configurations.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2024/protecting-unsecured-selenium-grid.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -jar selenium-server-<version>.jar info security\n```\n\n----------------------------------------\n\nTITLE: Printing webpage with page ranges in Java\nDESCRIPTION: This snippet demonstrates how to print a webpage using Selenium's `PrintsPage` interface in Java. It sets the page ranges to \"1-2\" and retrieves the content of the printed PDF.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_87\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.print.PrintOptions;\n\ndriver.get(\"https://www.selenium.dev\");\nprinter = (PrintsPage) driver;\n\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setPageRanges(\"1-2\");\n\nPdf pdf = printer.print(printOptions);\nString content = pdf.getContent();\n```\n\n----------------------------------------\n\nTITLE: Locator Method with String Identifiers in Selenium Python\nDESCRIPTION: This code illustrates using string identifiers directly within the `find_element` method. While functional, this is not the recommended approach as it lacks the clarity and maintainability of using the `By` object. This is a less preferred fallback option if the `By` object isn't readily available.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/python-locators-se4.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndriver.find_element('id', \"submit_button\").click()\ndriver.find_element('css selector', '.myelement child').text\n```\n\n----------------------------------------\n\nTITLE: Install Selenium WebDriver via NuGet - CSharp\nDESCRIPTION: This shell command shows how to install a specific version of the Selenium WebDriver package using NuGet in C#. It targets Selenium.WebDriver version 4.4.0.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nPM> Install-Package Selenium.WebDriver -Version 4.4.0\n```\n\n----------------------------------------\n\nTITLE: Get Active Element Attribute - JavaScript\nDESCRIPTION: This JavaScript code retrieves the 'title' attribute of the currently active element.  It initializes a ChromeDriver, navigates to Google, enters \"webElement\" into the search field, and then retrieves the 'title' attribute of the active element using `driver.switchTo().activeElement().getAttribute`. The retrieved attribute is then logged to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {Builder, By} = require('selenium-webdriver');\n\n  (async function example() {\n      let driver = await new Builder().forBrowser('chrome').build();\n      await driver.get('https://www.google.com');\n      await  driver.findElement(By.css('[name=\"q\"]')).sendKeys(\"webElement\");\n\n      // Obter atributo do elemento atualmente ativo\n      let attr = await driver.switchTo().activeElement().getAttribute(\"title\");\n      console.log(`${attr}`)\n  })();\n```\n\n----------------------------------------\n\nTITLE: Initializing RemoteWebDriver in CSharp\nDESCRIPTION: Initializes a RemoteWebDriver instance in C#, specifying the URL of the Selenium Grid and the desired browser capabilities.  This allows running tests on a remote machine, and requires Selenium WebDriver NuGet package. URL specifies the grid and capabilities the browser to initiate.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nRemoteWebDriver driver = new RemoteWebDriver(new Uri(\"http://localhost:4444\"), new ChromeOptions());\n```\n\n----------------------------------------\n\nTITLE: Disown handles in realm - Java\nDESCRIPTION: This Java code demonstrates disowning handles within a specific realm.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void disownHandlesInRealm() {\n        BrowsingContext browsingContext = new BrowsingContext(driver, driver.getWindowHandle());\n        List<RealmInfo> realmInfo = browsingContext.getRealms();\n        browsingContext.disownHandles(Collections.singletonList(\"1:1\"), realmInfo.get(0).getRealm());\n    }\n```\n\n----------------------------------------\n\nTITLE: ThreadGuard Exception Output\nDESCRIPTION: This is the exception output that ThreadGuard throws when it detects a thread safety violation.  It indicates the thread that created the WebDriver instance and the thread that is attempting to access it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/thread_guard.ja.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nException in thread \"Thread-1\" org.openqa.selenium.WebDriverException:\nThread safety error; this instance of WebDriver was constructed\non thread main (id 1)and is being accessed by thread Thread-1 (id 24)\nThis is not permitted and *will* cause undefined behaviour\n```\n\n----------------------------------------\n\nTITLE: Registering Selenium Grid Node with Hub using custom ports (Java)\nDESCRIPTION: This command registers a Node with a Hub when the Hub is using custom ports for event publishing and subscribing. The Node needs to specify these same ports for successful registration.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.zh-cn.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --publish-events tcp://<hub-ip>:8886 --subscribe-events tcp://<hub-ip>:8887\n```\n\n----------------------------------------\n\nTITLE: Initializing Safari Driver with Options (Ruby)\nDESCRIPTION: This code snippet initializes the Safari Driver in Ruby using SafariOptions, allowing for Safari-specific configurations to be set.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.zh-cn.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Safari::Options.new\ndriver = Selenium::WebDriver.for :safari, options: options\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: All Session Details\nDESCRIPTION: This curl command retrieves details for all sessions within the Grid. It fetches the session ID, capabilities, start time, URI, node ID, and session duration.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.pt-br.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ sessionsInfo { sessions { id, capabilities, startTime, uri, nodeId, nodeId, sessionDurationMillis } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Removing a Virtual Authenticator in C#\nDESCRIPTION: This snippet demonstrates how to remove a virtual authenticator in C#. It gets the DevTools session and then calls RemoveVirtualAuthenticator with the `authenticatorId` to delete the specified authenticator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nIDevTools devTools = ((IHasDevTools)driver).GetDevTools();\nDevToolsSession session = devTools.GetDevToolsSession();\n\nawait session.Security.RemoveVirtualAuthenticator(authenticatorId);\n```\n\n----------------------------------------\n\nTITLE: Find Elements from Element in Selenium WebDriver - Java\nDESCRIPTION: This Java code demonstrates how to find all child elements with a specific tag name within a parent element using Selenium WebDriver. It initializes a ChromeDriver, navigates to a website, finds a parent 'div' element, and then retrieves all 'p' elements within that 'div'. The text content of each 'p' element is then printed to the console.  It depends on the Selenium WebDriver Java bindings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_29\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport java.util.List;\n\npublic class findElementsFromElement {\n    public static void main(String[] args) {\n        WebDriver driver = new ChromeDriver();\n        try {\n            driver.get(\"https://example.com\");\n\n            // Get element with tag name 'div'\n            WebElement element = driver.findElement(By.tagName(\"div\"));\n\n            // Get all the elements available with tag name 'p'\n            List<WebElement> elements = element.findElements(By.tagName(\"p\"));\n            for (WebElement e : elements) {\n                System.out.println(e.getText());\n            }\n        } finally {\n            driver.quit();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Level in Java\nDESCRIPTION: This Java snippet shows how to set the logging level for a specific class. It is recommended to avoid using the root logger and instead configure logging on a per-class basis for better control and clarity.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\nLogger logger = Logger.getLogger(LoggingTest.class.getName());\nlogger.setLevel(Level.FINEST);\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method (UnitTesting): Selenium WebDriver (C#)\nDESCRIPTION: This C# snippet illustrates the use of the `[TestCleanup]` attribute in Visual Studio's UnitTesting framework to define a tear down method. The `TearDown` method calls `driver.Quit()` to close the browser after each test, which releases resources and maintains test isolation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\n/*\n    Example using Visual Studio's UnitTesting\n    https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.aspx\n*/\n[TestCleanup]\npublic void TearDown()\n{\n    driver.Quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium WebDriver in Java\nDESCRIPTION: This Java snippet demonstrates a basic Selenium WebDriver initialization and usage. It sets up the ChromeDriver, navigates to a website, and prints the title. It requires the Selenium WebDriver Java bindings and ChromeDriver to be properly configured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class HelloSelenium {\n    private WebDriver driver;\n\n    @BeforeEach\n    public void setup() {\n        ChromeOptions options = new ChromeOptions();\n        options.addArguments(\"--remote-allow-origins=*\");\n        driver = new ChromeDriver(options);\n    }\n\n    @AfterEach\n    public void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    public void testHelloSelenium() {\n        driver.get(\"https://www.selenium.dev/selenium/web/web-form.html\");\n        assertEquals(\"Web form\", driver.getTitle());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting and Comparing Colors in Ruby\nDESCRIPTION: This Ruby snippet shows how to convert a Color object to different formats (Hex, RGBA, RGB) and then compare the string representation with a static value. It converts the login button background color to hex, rgba and rgb format and makes static assertions. This allows for explicit format checking.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_26\n\nLANGUAGE: Ruby\nCODE:\n```\nassert(login_button_background_colour.hex == '#ff69b4')\nassert(login_button_background_colour.rgba == 'rgba(255, 105, 180, 1)')\nassert(login_button_background_colour.rgb == 'rgb(255, 105, 180)')\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium Distributor\nDESCRIPTION: This command configures the Selenium Distributor by setting the URLs for the Session Map server and the Session Queue server, and disabling the message bus.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar distributor --sessions http://localhost:5556 --sessionqueue http://localhost:5559 --bind-bus false\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Binary Location\nDESCRIPTION: This code snippet shows how to specify the path to the Chrome binary to use a specific Chrome installation or a Chromium-based browser. This allows you to drive different Chromium-based browsers with ChromeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_12\n\nLANGUAGE: CSharp\nCODE:\n```\noptions.BinaryLocation = \"/path/to/chrome/binary\";\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Color Objects with fromString\nDESCRIPTION: This snippet shows how to create Color objects using basic color names in Kotlin with the fromString method. It covers creating color objects for black, chocolate, and hotpink.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nprivate val BLACK = Color.fromString(\"black\")\nprivate val CHOCOLATE = Color.fromString(\"chocolate\")\nprivate val HOTPINK = Color.fromString(\"hotpink\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Console Logs using CDP - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to retrieve console logs using Selenium's integration with Chrome DevTools Protocol (CDP). It requires Selenium WebDriver and CDP support in the Selenium version being used. The code is located at examples/ruby/spec/bidi/cdp/logging_spec.rb#L12\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.pt-br.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# This example is located at examples/ruby/spec/bidi/cdp/logging_spec.rb#L12\n```\n\n----------------------------------------\n\nTITLE: Accessing Browser Logs in Edge with Ruby\nDESCRIPTION: This Ruby snippet shows how to retrieve browser logs from Edge using `manage.logs.get` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.logs.get(:browser)\n```\n\n----------------------------------------\n\nTITLE: Intercepting Requests using CDP in Ruby\nDESCRIPTION: This Ruby code demonstrates intercepting network requests using the Chrome DevTools Protocol (CDP) in Selenium. It sets up a network intercept to capture requests matching a specific pattern, modifies the request URL, and continues the request with the modified URL. This allows you to control and manipulate outgoing network requests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n@driver.execute_cdp 'Network.enable'\n@driver.execute_cdp 'Network.setRequestInterception', patterns: [{'urlPattern': '*.example.com*', 'resourceType': 'Document', 'interceptionStage': 'HeadersReceived'}]\n@driver.execute_cdp 'Network.requestIntercepted', url: 'https://www.example.com', newUrl: 'https://www.selenium.dev'\n```\n\n----------------------------------------\n\nTITLE: Locating Element to the Right of Another (CSharp)\nDESCRIPTION: This snippet demonstrates how to locate a button element to the right of the element with the ID 'cancel' using Selenium's relative locators in C#. It utilizes `RelativeBy.WithLocator` and `RightOf` methods.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_54\n\nLANGUAGE: CSharp\nCODE:\n```\nvar submitLocator = RelativeBy.WithLocator(By.tagName(\"button\")).RightOf(By.Id(\"cancel\"));\n```\n\n----------------------------------------\n\nTITLE: Evaluate script in browsing context (Java)\nDESCRIPTION: This Java code demonstrates how to evaluate a script within a browsing context using Selenium BiDi. It navigates to a webpage and evaluates the expression '1 + 1', asserting that the result is 2.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void evaluateScriptInBrowsingContext() {\n        try (Bidi bidi = new Bidi(driver)) {\n            BrowsingContext browsingContext = new BrowsingContext(bidi, driver);\n            browsingContext.navigate(getUrl(\"formPage.html\"));\n\n            EvaluateResult result = bidi.script().evaluate(\n                EvaluateParameters.builder().setExpression(\"1 + 1\").setTarget(browsingContext.getId()).build(),\n                EvaluateResult.class);\n\n            assertEquals(2L, result.getResult().getValue());\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Executing Selenium Manager to Manage Selenium Grid\nDESCRIPTION: This command executes Selenium Manager to discover and cache the latest version of Selenium Grid, storing the `selenium-server.jar` file in the local cache.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.ja.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ ./selenium-manager --grid\n```\n\n----------------------------------------\n\nTITLE: Check Session Owner with cURL\nDESCRIPTION: This snippet checks if a specific session belongs to a particular Node. It requires an `X-REGISTRATION-SECRET` header for authorization. The default Node URL is http://localhost:5555.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://localhost:5555/se/grid/node/owner/<session-id>' --header 'X-REGISTRATION-SECRET: <secret>'\n```\n\n----------------------------------------\n\nTITLE: Call function in sandbox - Java\nDESCRIPTION: This Java code shows how to call a function within a sandbox using Selenium's BiDi API.  It first creates a browsing context and then uses the `callFunction` method to execute a function within that context, specifying a sandbox.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void callFunctionInSandbox() {\n        String url = getHtmlPage();\n        driver.get(url);\n\n        BrowsingContext browsingContext = new BrowsingContext(driver, driver.getWindowHandle());\n        FunctionRealmInfo info = browsingContext.callFunction(\"() => {return 1}\", false, \"test\");\n        assertEquals(info.getResult().getNumber(), 1);\n    }\n```\n\n----------------------------------------\n\nTITLE: Login Test without Page Object Model in Java\nDESCRIPTION: This code demonstrates a login test without using the Page Object Model. It directly interacts with web elements using Selenium WebDriver. This approach leads to code duplication and makes maintenance difficult when UI changes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n/***\n * Tests login feature\n */\npublic class Login {\n\n  public void testLogin() {\n    // fill login data on sign-in page\n    driver.findElement(By.name(\"user_name\")).sendKeys(\"userName\");\n    driver.findElement(By.name(\"password\")).sendKeys(\"my supersecret password\");\n    driver.findElement(By.name(\"sign-in\")).click();\n\n    // verify h1 tag is \"Hello userName\" after login\n    driver.findElement(By.tagName(\"h1\")).isDisplayed();\n    assertThat(driver.findElement(By.tagName(\"h1\")).getText(), is(\"Hello userName\"));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Switches in Edge Options - Java\nDESCRIPTION: Shows how to exclude specific switches from Edge options in Java.\nThis is useful for overriding default behavior or disabling certain features.\nDependencies: Selenium WebDriver, EdgeDriver, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\noptions.setExperimentalOption(\"excludeSwitches\", Collections.singletonList(\"enable-automation\"));\n```\n\n----------------------------------------\n\nTITLE: Copy and Paste Action in Selenium (Kotlin)\nDESCRIPTION: Demonstrates how to perform a copy and paste action using the Actions API in Kotlin. It checks the OS to determine the correct key for copy/paste.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nval input = driver.findElement(By.tagName(\"input\"))\ninput.sendKeys(\"Selenium\")\nval selectAll = if (System.getProperty(\"os.name\").startsWith(\"Mac\")) Keys.COMMAND + \"a\" else Keys.CONTROL + \"a\"\nval copy = if (System.getProperty(\"os.name\").startsWith(\"Mac\")) Keys.COMMAND + \"c\" else Keys.CONTROL + \"c\"\nval paste = if (System.getProperty(\"os.name\").startsWith(\"Mac\")) Keys.COMMAND + \"v\" else Keys.CONTROL + \"v\"\ninput.sendKeys(selectAll)\ninput.sendKeys(copy)\ninput.sendKeys(paste)\ninput.sendKeys(Keys.chord(Keys.SHIFT, \"1\"))\n```\n\n----------------------------------------\n\nTITLE: Going Forward in Browser History (CSharp)\nDESCRIPTION: Demonstrates how to navigate forward in the browser history using Selenium WebDriver in C#. The driver.Navigate().Forward() method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().Forward();\n```\n\n----------------------------------------\n\nTITLE: Launching Selenium Session Map with PostGreSQL\nDESCRIPTION: This Bash command launches the Selenium Session Map component, configured to use a JDBC-backed session map with PostGreSQL. It utilizes Coursier to fetch the required `selenium-session-map-jdbc` and `postgresql` dependencies, and it specifies the publish and subscribe events along with port and configuration file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.pt-br.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport SE_VERSION=<current_selenium_version>\njava -jar selenium-server-${SE_VERSION}.jar \\\n--ext $(coursier fetch -p org.seleniumhq.selenium:selenium-session-map-jdbc:${SE_VERSION} org.postgresql:postgresql:42.3.1) \\\nsessions --publish-events tcp://localhost:4442 \\\n--subscribe-events tcp://localhost:4443 \\\n--port 5556 --config sessions.toml \n```\n\n----------------------------------------\n\nTITLE: Initializing IE Driver with Edge Compatibility Mode (Java)\nDESCRIPTION: This code snippet demonstrates how to initialize the Internet Explorer Driver to run Microsoft Edge in IE Compatibility Mode using Java. It sets the `attachToEdgeChrome` and `edgeExecutablePath` options to enable this mode.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.attachToEdgeChrome = true;\noptions.edgeExecutablePath = System.getProperty(\"webdriver.edge.driver\");\nWebDriver driver = new InternetExplorerDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Root Directory in Firefox with Selenium (Ruby)\nDESCRIPTION: This snippet shows how to set a profile root directory in Firefox using Selenium WebDriver in Ruby. The `profile_root` is set to a specified directory.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\noptions = Selenium::WebDriver::Firefox::Options.new\noptions.profile_root = '/tmp/profiles'\n@driver = Selenium::WebDriver.for :firefox, options: options\n```\n\n----------------------------------------\n\nTITLE: Using Safari Technology Preview (Ruby)\nDESCRIPTION: This Ruby code sets the technology preview capability for Safari. This will use the Safari Technology Preview browser for automation. Requires the Selenium Ruby gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.ja.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Options.safari(technology_preview: true)\ndriver = Selenium::WebDriver.for :safari, options: options\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Waits in Selenium WebDriver Java\nDESCRIPTION: This code snippet demonstrates how to use implicit waits in Selenium WebDriver with Java. It sets a timeout of 15 seconds, instructing the driver to wait for elements to appear before throwing an exception.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/selenium-2-0a5-released.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS)\n```\n\n----------------------------------------\n\nTITLE: Quitting a Selenium Driver Session in Java\nDESCRIPTION: This Java snippet demonstrates how to quit a Selenium WebDriver session.  The driver.quit() method is called after interacting with the browser to properly close the browser instance and release associated resources. This ensures a clean termination of the session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.pt-br.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class FirstScript {\n    public static void main(String[] args) {\n        WebDriver driver = new ChromeDriver();\n\n        driver.get(\"https://www.google.com/\");\n\n        System.out.println(driver.getTitle());\n\n        driver.quit();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Product Page\nDESCRIPTION: This HTML snippet defines the structure of a product page, containing a header and a list of inventory items. The inventory list contains several inventory_item divs representing individual product items.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.pt-br.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Página de Produtos -->\n<div class=\"header_container\">\n    <span class=\"title\">Products</span>\n</div>\n\n<div class=\"inventory_list\">\n    <div class=\"inventory_item\">\n    </div>\n    <div class=\"inventory_item\">\n    </div>\n    <div class=\"inventory_item\">\n    </div>\n    <div class=\"inventory_item\">\n    </div>\n    <div class=\"inventory_item\">\n    </div>\n    <div class=\"inventory_item\">\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Resident Credential in C#\nDESCRIPTION: This C# code creates a resident credential and registers it with the virtual authenticator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nawait session.WebAuthn.AddCredentialAsync(new PublicKeyCredentialParams()\n{\n    UserId = Convert.ToBase64String(Encoding.UTF8.GetBytes(\"user1\")),\n    UserName = Convert.ToBase64String(Encoding.UTF8.GetBytes(\"User 1\")),\n    DisplayName = \"User One\"\n});\n\n```\n\n----------------------------------------\n\nTITLE: ActionBot Implementation (Java)\nDESCRIPTION: This code defines an ActionBot class, which provides action-oriented abstractions over the WebDriver API. It includes methods for clicking, submitting, and typing into elements.  Dependencies: WebDriver, org.openqa.selenium.By, org.openqa.selenium.WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.pt-br.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class ActionBot {\n  private final WebDriver driver;\n\n  public ActionBot(WebDriver driver) {\n    this.driver = driver;\n  }\n\n  public void click(By locator) {\n    driver.findElement(locator).click();\n  }\n\n  public void submit(By locator) {\n    driver.findElement(locator).submit();\n  }\n\n  /** \n   * Type something into an input field. WebDriver doesn't normally clear these\n   * before typing, so this method does that first. It also sends a return key\n   * to move the focus out of the element.\n   */\n  public void type(By locator, String text) { \n    WebElement element = driver.findElement(locator);\n    element.clear();\n    element.sendKeys(text + \"\\n\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting and Comparing Colors in Kotlin\nDESCRIPTION: This Kotlin snippet shows how to convert a Color object to different formats (Hex, RGBA, RGB) and then compare the string representation with a static value. It converts the login button background color to hex, rgba and rgb format and makes static assertions. This allows for explicit format checking.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\nassert(loginButtonBackgroundColour.asHex().equals(\"#ff69b4\"))\nassert(loginButtonBackgroundColour.asRgba().equals(\"rgba(255, 105, 180, 1)\"))\nassert(loginButtonBackgroundColour.asRgb().equals(\"rgb(255, 105, 180)\"))\n```\n\n----------------------------------------\n\nTITLE: Page Object with LoadableComponent and PageFactory (Java)\nDESCRIPTION: Demonstrates a Page Object in Selenium WebDriver that extends `LoadableComponent` and uses `PageFactory` for element initialization. It shows how to use `@FindBy` annotations to map elements and encapsulates the page loading and verification logic within the `load()` and `isLoaded()` methods. The `EditIssue` class inherits from `LoadableComponent` and utilizes `PageFactory` for WebElement injection. Includes dependency on `junit.framework.Assert.assertTrue`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.ja.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.webdriver;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\nimport org.openqa.selenium.support.PageFactory;\n\nimport static junit.framework.Assert.assertTrue;\n\npublic class EditIssue extends LoadableComponent<EditIssue> {\n\n  private final WebDriver driver;\n  \n  // By default the PageFactory will locate elements with the same name or id\n  // as the field. Since the issue_title element has an id attribute of \"issue_title\"\n  // we don't need any additional annotations.\n  private WebElement issue_title;\n  \n  // But we'd prefer a different name in our code than \"issue_body\", so we use the\n  // FindBy annotation to tell the PageFactory how to locate the element.\n  @FindBy(id = \"issue_body\") private WebElement body;\n  \n  public EditIssue(WebDriver driver) {\n    this.driver = driver;\n    \n    // This call sets the WebElement fields.\n    PageFactory.initElements(driver, this);\n  }\n\n  @Override\n  protected void load() {\n    driver.get(\"https://github.com/SeleniumHQ/selenium/issues/new?assignees=&labels=I-defect%2Cneeds-triaging&projects=&template=bug-report.yml&title=%5B%F0%9F%90%9B+Bug%5D%3A+\");\n  }\n\n  @Override\n  protected void isLoaded() throws Error {\n    String url = driver.getCurrentUrl();\n    assertTrue(\"Not on the issue entry page: \" + url, url.endsWith(\"/new\"));\n  }\n\n  public void setHowToReproduce(String howToReproduce) {\n    WebElement field = driver.findElement(By.id(\"issue_form_repro-command\"));\n    clearAndType(field, howToReproduce);\n  }\n\n  public void setLogOutput(String logOutput) {\n    WebElement field = driver.findElement(By.id(\"issue_form_logs\"));\n    clearAndType(field, logOutput);\n  }\n\n  public void setOperatingSystem(String operatingSystem) {\n    WebElement field = driver.findElement(By.id(\"issue_form_operating-system\"));\n    clearAndType(field, operatingSystem);\n  }\n\n  public void setSeleniumVersion(String seleniumVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_selenium-version\"));\n    clearAndType(field, logOutput);\n  }\n\n  public void setBrowserVersion(String browserVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_browser-versions\"));\n    clearAndType(field, browserVersion);\n  }\n\n  public void setDriverVersion(String driverVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_browser-driver-versions\"));\n    clearAndType(field, driverVersion);\n  }\n\n  public void setUsingGrid(String usingGrid) {\n    WebElement field = driver.findElement(By.id(\"issue_form_selenium-grid-version\"));\n    clearAndType(field, usingGrid);\n  }\n\n  public IssueList submit() {\n    driver.findElement(By.cssSelector(\"button[type='submit']\")).click();\n    return new IssueList(driver);\n  }\n\n  private void clearAndType(WebElement field, String text) {\n    field.clear();\n    field.sendKeys(text);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Driver with Default Service - CSharp\nDESCRIPTION: This snippet demonstrates starting a driver with a default service in C#. It creates a new ChromeDriver instance without specific service configurations. Requires the Selenium.WebDriver NuGet package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.pt-br.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nnew ChromeDriver().Quit();\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Before Upgrade - XML\nDESCRIPTION: This XML code shows the Maven dependency configuration for Selenium Java before upgrading to Selenium 4. It specifies the groupId, artifactId, and version of the selenium-java dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <!-- more dependencies ... -->\n  <dependency>\n    <groupId>org.seleniumhq.selenium</groupId>\n    <artifactId>selenium-java</artifactId>\n    <version>3.141.59</version>\n  </dependency>\n  <!-- more dependencies ... -->\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - Selenium WebDriver - Python\nDESCRIPTION: This snippet retrieves the x and y coordinates of the top-left corner of the browser window using the Selenium WebDriver API in Python. It demonstrates accessing each coordinate individually using the get method on the dictionary returned by get_window_position and storing the position in a variable. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\n    # 分别获取每个尺寸\nx = driver.get_window_position().get('x')\ny = driver.get_window_position().get('y')\n\n    # 或者存储尺寸并在以后查询它们\nposition = driver.get_window_position()\nx1 = position.get('x')\ny1 = position.get('y')\n```\n\n----------------------------------------\n\nTITLE: Click and Hold Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a click and hold action on an element using Selenium. It combines moving the mouse to the center of an element with pressing the left mouse button. This is useful for focusing on a specific element without releasing the click immediately. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nActions actions = new Actions(driver);\nWebElement element = driver.findElement(By.id(\"my-element\"));\nactions.clickAndHold(element)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Continue Auth Required Request with Credentials in JavaScript\nDESCRIPTION: This JavaScript code continues a request blocked at the 'authRequired' phase, providing username and password credentials using the Selenium BiDi API.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait bidiSession.network.continueRequest({\n  requestId: event.request.requestId,\n  auth: {username: 'test', password: 'test'}\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Realm Destruction Event - JavaScript\nDESCRIPTION: This JavaScript example showcases how to handle realm destruction events with Selenium's BiDi API.  It defines the listening and assertion logic required to verify that the realm destruction event occurs as expected. Requires Selenium 4.19 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n    await browsingContext.on(\n      BrowsingContext.RealmDestroyed, async (event) => {\n        realmId = event.realm;\n        await latch.resolve();\n      });\n\n    await driver.executeScript('window.destroy = function() { realm.destroy();}\\nwindow.destroy()', realm);\n    await expect(latch).toResolve();\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium WebDriver in C#\nDESCRIPTION: This C# code snippet illustrates how to initialize and use Selenium WebDriver with Chrome. It navigates to a website and asserts its title. The snippet requires the Selenium.WebDriver NuGet package and ChromeDriver to be properly installed and configured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.ja.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\nusing Xunit;\n\npublic class HelloSelenium \n{\n    private readonly IWebDriver driver;\n\n    public HelloSelenium()\n    {\n        driver = new ChromeDriver();\n    }\n\n    [Fact]\n    public void TestHelloSelenium()\n    {\n        driver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/web-form.html\");\n        Assert.Equal(\"Web form\", driver.Title);\n        driver.Quit();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Location - Java\nDESCRIPTION: This snippet shows how to specify the location of the driver executable in Java. It uses ChromeService.Builder to set the path to the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.zh-cn.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nChromeService service = new ChromeService.Builder().usingDriverExecutable(new File(\"/path/to/chromedriver\")).build();\n```\n\n----------------------------------------\n\nTITLE: Using a Pen with Selenium (Ruby)\nDESCRIPTION: This Ruby code snippet demonstrates how to create and use a Pen input source in Selenium to interact with a web page. It creates a pen device and moves it to a specific element, then performs a pen down and pen up action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.ja.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\npen = Selenium::WebDriver::Interactions::Pen.new('pen1')\nelement = @driver.find_element(id: 'example')\n\n@driver.action\n  .move_to(element)\n  .tick(pen.create_pointer_move(duration: 1, x: 0, y: 0, origin: element))\n  .tick(pen.create_pointer_down(button: :left))\n  .tick(pen.create_pointer_up(button: :left))\n  .perform\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium Kotlin\nDESCRIPTION: This snippet demonstrates how to check if a disabled option can be selected in Kotlin. It attempts to select a disabled option and asserts that an exception is thrown. Requires Selenium 4.5 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_41\n\nLANGUAGE: Kotlin\nCODE:\n```\nassertThrows<InvalidElementStateException> {\n    select.selectByVisibleText(\"disabled\")\n}\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - CSharp\nDESCRIPTION: This C# snippet demonstrates how to set the size of the browser window to 1024x768 pixels using Selenium WebDriver. A new `Size` object is created with the desired width and height, and then assigned to the `Size` property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Manage().Window.Size = new Size(1024, 768);\n```\n\n----------------------------------------\n\nTITLE: Using Pen Actions in Selenium - Java\nDESCRIPTION: This code snippet demonstrates how to use the Pen class in Selenium with Java to simulate stylus input. It initializes a new Pen object, moves to an element, performs a pen down action, moves by a specified offset, and then performs a pen up action. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nPen pen = new Pen(driver);\nWebElement element = driver.findElement(By.id(\"example\"));\n\npen.moveTo(element)\n  .penDown()\n  .moveBy(50, 50)\n  .penUp()\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Capturing Console Logs Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to capture console logs using Chrome DevTools Protocol (CDP) in Selenium. It enables the 'Log' domain and attaches a listener to the 'Log.entryAdded' event, printing the log entry to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.ja.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n    driver.devtools.log.enable\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Port - Ruby\nDESCRIPTION: This snippet shows how to specify the port the driver runs on using Ruby. It configures the `Selenium::WebDriver::Service` with a specific port. Requires the selenium-webdriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.pt-br.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.chrome(port: 1234)\n```\n\n----------------------------------------\n\nTITLE: Java Maven Test Execution\nDESCRIPTION: This shell command executes Maven clean and test goals. It is used to compile, run tests, and generate reports for Java projects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean test\n```\n\n----------------------------------------\n\nTITLE: Response Started Event in Java\nDESCRIPTION: This Java code snippet listens for the 'responseStarted' network event using Selenium BiDi.  It logs the response status.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\ndevTools.addListener(Network.responseStarted, event -> {\n  int status = event.getEvent().getResponse().getStatus();\n  Matcher matcher = pattern.matcher(Integer.toString(status));\n  if (matcher.find()) {\n    Network.continueRequest(devTools, event.getEvent().getRequest().getRequestId(), new ContinueRequestParameters());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning SeleniumHQ Repository using Git\nDESCRIPTION: This command clones the SeleniumHQ GitHub repository to your local machine, allowing you to contribute to the project.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.en.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n% git clone git@github.com:seleniumhq/seleniumhq.github.io.git\n% cd seleniumhq.github.io\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset with Selenium\nDESCRIPTION: This code performs a drag-and-drop operation by a specified offset using Selenium WebDriver. It first clicks and holds the source element, moves the mouse by the offset, and then releases the mouse. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement source = driver.FindElement(By.Id(\"draggable\"));\nnew Actions(driver)\n    .ClickAndHold(source)\n    .MoveByOffset(50, 50)\n    .Release()\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: De-selecting Option by Value in Select List - Python\nDESCRIPTION: This Python snippet demonstrates how to de-select an option in a multiple select list by its value using Selenium WebDriver. It assumes that you have already initialized the WebDriver and located the select element. The code creates a `Select` object from the `WebElement` and calls `deselect_by_value()` with the value of the option to de-select. Before de-selecting, all options are cleared.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nselect.deselect_all()\nselect.deselect_by_value(\"Orange\")\n```\n\n----------------------------------------\n\nTITLE: Set Page Ranges Java\nDESCRIPTION: This code snippet shows how to set the page ranges for printing in Java with Selenium, using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setPageRanges(\"1-2\");\n\nbyte[] pdfContent = ((PrintsPage) driver).print(printOptions);\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - Selenium WebDriver - C#\nDESCRIPTION: This snippet retrieves the width and height of the browser window using the Selenium WebDriver API in C#. It shows two ways to get the dimensions: getting each dimension separately or storing the dimensions in a Size object and querying them later. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_15\n\nLANGUAGE: CSharp\nCODE:\n```\n// 分别获取每个尺寸\nint width = driver.Manage().Window.Size.Width;\nint height = driver.Manage().Window.Size.Height;\n\n// 或者存储尺寸并在以后查询它们\nSystem.Drawing.Size size = driver.Manage().Window.Size;\nint width1 = size.Width;\nint height1 = size.Height;\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset - Selenium Wheel Kotlin\nDESCRIPTION: This snippet demonstrates how to scroll from an offset of the viewport using Selenium's Wheel actions in Kotlin. An offset is specified from the upper left corner of the current viewport. After the origin point is determined, the page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nActions(driver)\n  .scroll(WheelInput.ScrollOrigin.viewport(), 10, 10, 0, 0)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Disabling EdgeDriver Build Check in C#\nDESCRIPTION: This C# snippet demonstrates how to disable the build check for EdgeDriver using `AddArgument`. Note that this is an unsupported feature.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\noptions.AddArgument(\"--disable-build-check\");\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name - Python\nDESCRIPTION: Demonstrates how to retrieve the tag name of a web element using Python and Selenium WebDriver. The `tag_name` attribute returns the tag name as a string. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nemail_input = driver.find_element(By.NAME, \"email_input\")\nassert email_input.tag_name == \"input\"\n```\n\n----------------------------------------\n\nTITLE: Executing Maven Tests\nDESCRIPTION: This command shows how to execute the tests in Java using Maven.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean test\n```\n\n----------------------------------------\n\nTITLE: Creating a new Firefox WebDriver instance in Java\nDESCRIPTION: This Java code snippet demonstrates how to create a new instance of the Firefox WebDriver. This ensures each test starts with a clean browser profile, as GeckoDriver typically provides a fresh user profile by default. No external dependencies are explicitly declared in the provided snippet; however, it relies on the Selenium WebDriver library and GeckoDriver being correctly set up in the environment.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/fresh_browser_per_test.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new FirefoxDriver();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - None - Java\nDESCRIPTION: This Java snippet demonstrates setting the page load strategy to 'none' using ChromeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setPageLoadStrategy(PageLoadStrategy.NONE);\n```\n\n----------------------------------------\n\nTITLE: Back Button Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to simulate a click on the back button of a mouse (button X1) using Selenium. It involves pressing and releasing mouse button 3 on the target element. Requires Selenium WebDriver and version 4.5.0 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('selectable'));\nawait actions.moveToElement(element).click(MouseButton.BACK).perform();\n```\n\n----------------------------------------\n\nTITLE: Navigating to a URL in Selenium WebDriver (Ruby)\nDESCRIPTION: Demonstrates how to open a website using Selenium WebDriver in Ruby. The `get` method is used to navigate to the specified URL.  Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.get(\"https://www.selenium.dev\")\n```\n\n----------------------------------------\n\nTITLE: Java Capabilities Merging (Before)\nDESCRIPTION: Demonstrates merging capabilities in Selenium Java *before* Selenium 4, where the merge operation modified the object being called.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_26\n\nLANGUAGE: Java\nCODE:\n```\nMutableCapabilities capabilities = new MutableCapabilities();\ncapabilities.setCapability(\"platformVersion\", \"Windows 10\");\nFirefoxOptions options = new FirefoxOptions();\noptions.setHeadless(true);\noptions.merge(capabilities);\n\n//Como resultado, o objeto `options` estava sendo modificado.\n```\n\n----------------------------------------\n\nTITLE: Scroll by Amount using Selenium Wheel - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to scroll by a given amount using Selenium's Actions API and Wheel class. It takes delta x and delta y values as input, which represent the amount to scroll horizontally and vertically, respectively. Negative values indicate scrolling left and up. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.actions().scrollByAmount({x: 50, y: 100}).perform();\n```\n\n----------------------------------------\n\nTITLE: Intercepting Requests using CDP in Java\nDESCRIPTION: This Java code demonstrates intercepting network requests using the Chrome DevTools Protocol (CDP) in Selenium. It sets up a network intercept to capture requests matching a specific pattern, modifies the request URL, and continues the request with the modified URL. This allows you to control and manipulate outgoing network requests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\ncdp.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));\ncdp.addListener(Network.requestIntercepted(), intercept -> {\n    if (intercept.getRequest().getUrl().contains(\"example\")) {\n        String newUrl = \"https://www.selenium.dev\";\n        cdp.send(Network.continueInterceptedRequest(intercept.getInterceptionId(), Optional.of(newUrl), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty()));\n    }\n});\ncdp.send(Network.setRequestInterception(true, Optional.of(List.of(new InterceptionPattern(\"*.example.com*\", ResourceType.Document, InterceptionStage.HeadersReceived))));\ndriver.get(\"https://www.example.com\");\n```\n\n----------------------------------------\n\nTITLE: Get Browser Title - Python\nDESCRIPTION: This Python snippet retrieves the title of the current web page using Selenium WebDriver. It assumes a WebDriver instance named `driver` is already initialized.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndriver.title\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset Selenium\nDESCRIPTION: This code snippet demonstrates how to perform a drag and drop operation by a specified offset using Selenium WebDriver.  The action starts with a click-and-hold on the source element, then moves the mouse by the given offset, and finally releases the mouse button. It is available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_71\n\nLANGUAGE: Kotlin\nCODE:\n```\nval source = driver.findElement(By.id(\"draggable\"))\n\nActions(driver)\n  .clickAndHold(source)\n  .moveByOffset(100, 50)\n  .release()\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Release Key Action in Selenium\nDESCRIPTION: Demonstrates how to simulate releasing a pressed key using Selenium's Actions API. This involves creating an Actions object, using the keyUp method to release a key, and then performing the action.  It shows how to press and hold Shift key while typing some text, and then release the Shift key.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nactions = ActionChains(driver)\nactions.key_down(Keys.SHIFT)\n    .send_keys(\"text\")\n    .key_up(Keys.SHIFT)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: WebDriver Initialization JavaScript\nDESCRIPTION: This snippet shows how to initialize a WebDriver instance for Chrome using JavaScript. It uses the Builder class to create a new Chrome driver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.en.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n```\n\n----------------------------------------\n\nTITLE: Upgrading Selenium in Python using pip\nDESCRIPTION: This snippet demonstrates how to upgrade the Selenium package to version 4.4.3 in Python using pip.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npip install selenium==4.4.3\n```\n\n----------------------------------------\n\nTITLE: Verifying Unicorn Existence - Ruby\nDESCRIPTION: This Ruby code snippet verifies that a unicorn object named 'Sparkles' exists on the unicorn confirmation page, ensuring all attributes are intact. It depends on a 'unicorn_confirmation_page' object and an expectation library (e.g., RSpec). The 'exists?' method on the page object is used to compare the attributes of the 'sparkles' object with the fields on the page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nexpect(unicorn_confirmation_page.exists?(sparkles)).to be, 'Sparkles should have been created, with all attributes intact'\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset Selenium\nDESCRIPTION: This code snippet demonstrates how to perform a drag and drop operation by a specified offset using Selenium WebDriver.  The action starts with a click-and-hold on the source element, then moves the mouse by the given offset, and finally releases the mouse button. It is available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_67\n\nLANGUAGE: Python\nCODE:\n```\nsource = driver.find_element(By.ID, \"draggable\")\n\nActionChains(driver).click_and_hold(source).move_by_offset(100, 50).release().perform()\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - Selenium WebDriver - Ruby\nDESCRIPTION: This snippet retrieves the width and height of the browser window using the Selenium WebDriver API in Ruby. It shows two ways to get the dimensions: getting each dimension separately or storing the dimensions in a variable and querying them later. Requires the selenium-webdriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\n    # 分别获取每个尺寸\nwidth = driver.manage.window.size.width\nheight = driver.manage.window.size.height\n\n    # 或者存储尺寸并在以后查询它们\nsize = driver.manage.window.size\nwidth1 = size.width\nheight1 = size.height\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot - Selenium\nDESCRIPTION: This Java snippet demonstrates how to capture a screenshot of the current browser window using Selenium WebDriver. It navigates to a website, takes a screenshot, saves it as a PNG image, and then closes the browser. Requires selenium-java and commons-io dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_72\n\nLANGUAGE: Java\nCODE:\n```\nimport org.apache.commons.io.FileUtils;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport java.io.*;\nimport org.openqa.selenium.*;\n\npublic class SeleniumTakeScreenshot {\n    public static void main(String args[]) throws IOException {\n        WebDriver driver = new ChromeDriver();\n        driver.get(\"http://www.example.com\");\n        File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);\n        FileUtils.copyFile(scrFile, new File(\"./image.png\"));\n        driver.quit();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Find First Matching Element by Class Name\nDESCRIPTION: This snippet demonstrates how to find the first element matching a specific class name within the entire DOM using Selenium WebDriver. It uses the `find_element` method with `By.CLASS_NAME` to locate the first element with the class \"tomatoes\". The result is a WebElement object representing the located element, which can be used for further actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nvegetable = driver.find_element(By.CLASS_NAME, \"tomatoes\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium\nDESCRIPTION: This code snippet demonstrates how to initialize a Select object in Selenium WebDriver. It first locates a <select> element using a locator strategy (e.g., by ID) and then creates a Select object using the found element.  Note that as of Selenium 4.5, you can't create a `Select` object if the `<select>` element is disabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nvar selectElement = driver.FindElement(By.Id(\"selectomatic\"));\nvar select = new SelectElement(selectElement);\n```\n\n----------------------------------------\n\nTITLE: Extending LoadableComponent in Selenium (Java)\nDESCRIPTION: Demonstrates extending the `LoadableComponent` class in Selenium WebDriver using Java. It overrides the `load()` and `isLoaded()` methods to encapsulate the logic for navigating to the page and verifying that the page has loaded correctly. It relies on JUnit's `Assert` class within the `isLoaded` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.ja.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class EditIssue extends LoadableComponent<EditIssue> {\n  // rest of class ignored for now\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to Eager in Java\nDESCRIPTION: This snippet shows how to set the page load strategy to 'eager' in Java using Selenium. WebDriver waits until the DOMContentLoaded event is fired.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setPageLoadStrategy(PageLoadStrategy.EAGER);\nWebDriver driver = new ChromeDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Login Functionality Test Without Page Object - Java\nDESCRIPTION: This snippet demonstrates a test of login functionality without using the Page Object model.  It fills in login details, clicks the sign-in button, and verifies the welcome message directly within the test method. The disadvantage is that UI changes require modifications in all tests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n/***\n * Testes da funcionalidade de login\n */\npublic class Login {\n\n  public void testLogin() {\n    // preencha os dados de login na página de entrada\n    driver.findElement(By.name(\"user_name\")).sendKeys(\"userName\");\n    driver.findElement(By.name(\"password\")).sendKeys(\"my supersecret password\");\n    driver.findElement(By.name(\"sign-in\")).click();\n\n    // verifique se a tag h1 é \"Hello userName\" após o login\n    driver.findElement(By.tagName(\"h1\")).isDisplayed();\n    assertThat(driver.findElement(By.tagName(\"h1\")).getText(), is(\"Hello userName\"));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Driver with Options - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to initialize a local Chrome WebDriver with ChromeOptions. It initializes a new Chrome driver instance with given options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.ja.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\noptions = Selenium::WebDriver::Chrome::Options.new\n@driver = Selenium::WebDriver.for :chrome, options: options\n```\n\n----------------------------------------\n\nTITLE: Getting Named Cookie in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve a cookie by its name using Selenium WebDriver in Python. It navigates to a website, adds a cookie named 'foo', and then retrieves the cookie by its name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://www.example.com\")\ncookie = { 'name' : 'foo', 'value' : 'bar' }\ndriver.add_cookie(cookie)\n\n#Get cookie details with named cookie 'foo'\nprint(driver.get_cookie('foo'))\n```\n\n----------------------------------------\n\nTITLE: Get Active Element Attribute - Python\nDESCRIPTION: This Python code retrieves the 'title' attribute of the currently active element on a webpage. It initializes a Chrome WebDriver, navigates to Google, enters \"webElement\" into the search field, and then retrieves the 'title' attribute of the active element using `driver.switch_to.active_element.get_attribute`. The attribute is printed to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\n  from selenium.webdriver.common.by import By\n\n  driver = webdriver.Chrome()\n  driver.get(\"https://www.google.com\")\n  driver.find_element(By.CSS_SELECTOR, '[name=\"q\"]').send_keys(\"webElement\")\n\n    # Obter atributo do elemento atualmente ativo\n  attr = driver.switch_to.active_element.get_attribute(\"title\")\n  print(attr)\n```\n\n----------------------------------------\n\nTITLE: Python Selenium Setup Without Selenium Manager\nDESCRIPTION: This Python code snippet showcases the conventional Selenium setup before Selenium Manager.  It involves explicitly specifying the path to the ChromeDriver executable. It instantiates a Chrome webdriver using the Service class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.pt-br.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\n\nservice = Service(executable_path=\"/path/to/chromedriver\")\ndriver = webdriver.Chrome(service=service)\ndriver.get(\"https://www.selenium.dev\")\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Configuring a Unicorn (Python)\nDESCRIPTION: This snippet demonstrates how to configure a unicorn with specific attributes using a Unicorn object and Page Object Model. It assumes the existence of Unicorn, UnicornColors, UnicornAccessories, and UnicornAdornments classes. It creates a Unicorn object with specified attributes and then uses the add_unicorn and create_unicorn methods to fill out a form and submit it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# The Unicorn is a top-level Object--it has attributes, which are set here.\n# This only stores the values; it does not fill out any web forms or interact\n# with the browser in any way.\nsparkles = Unicorn(\"Sparkles\", UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS)\n\n# Since we're already \"on\" the account page, we have to use it to get to the\n# actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n# takes us there.\nadd_unicorn_page = account_page.add_unicorn()\n\n# Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n# its createUnicorn() method. This method will take Sparkles' attributes,\n# fill out the form, and click submit.\nunicorn_confirmation_page = add_unicorn_page.create_unicorn(sparkles)\n```\n\n----------------------------------------\n\nTITLE: Configuring Capabilities After Selenium 4 - Java\nDESCRIPTION: This Java code demonstrates how to configure browser options and capabilities in Selenium 4 using FirefoxOptions and a map for cloud options. It sets platform name, browser version, and custom options, and then uses them when creating a RemoteWebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxOptions browserOptions = new FirefoxOptions();\nbrowserOptions.setPlatformName(\"Windows 10\");\nbrowserOptions.setBrowserVersion(\"92\");\nMap<String, Object> cloudOptions = new HashMap<>();\ncloudOptions.put(\"build\", myTestBuild);\ncloudOptions.put(\"name\", myTestName);\nbrowserOptions.setCapability(\"cloud:options\", cloudOptions);\nWebDriver driver = new RemoteWebDriver(new URL(cloudUrl), browserOptions);\n```\n\n----------------------------------------\n\nTITLE: Accessing Shadow DOM in Java\nDESCRIPTION: This snippet shows how to access elements inside a shadow DOM using Selenium in Java. It finds the shadow host element, gets the shadow root, and then finds an element within the shadow root.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nWebElement shadowHost = driver.findElement(By.cssSelector(\"#shadow_host\"));\nSearchContext shadowRoot = shadowHost.getShadowRoot();\nWebElement shadowContent = shadowRoot.findElement(By.cssSelector(\"#shadow_content\"));\n```\n\n----------------------------------------\n\nTITLE: Initializing Safari Driver with Options (Java)\nDESCRIPTION: This code snippet initializes the Safari Driver in Java using SafariOptions.  The SafariOptions class is used to set specific capabilities for the Safari browser instance before the driver is initialized.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.zh-cn.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nSafariOptions options = new SafariOptions();\nWebDriver driver = new SafariDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Setting Supporting Files Path - Ruby\nDESCRIPTION: This Ruby snippet shows how to set the path to the extracted Internet Explorer driver server.  It uses the `extract_path` key within the options hash passed to the driver initialization.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_37\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::IE::Options.new\noptions[:extract_path] = '/path/to/dir'\ndriver = Selenium::WebDriver.for :ie, options: options\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript Tests with npx Mocha\nDESCRIPTION: This command shows how to execute JavaScript tests using npx Mocha.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nnpx mocha runningTests.spec.js\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element with Offset - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to scroll from an element with an offset using Selenium's Actions API and Wheel class. It takes an element, x offset, y offset, delta x, and delta y values as input. It scrolls from the origin point calculated from the center of the specified element, offset by given x and y values. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.name('meal'));\nawait driver.actions().scrollFromOrigin({ origin: element, x: 25, y: 25 }, {x: 50, y: 100}).perform();\n```\n\n----------------------------------------\n\nTITLE: Implicit Wait and Timeouts Before Selenium 4 (Java)\nDESCRIPTION: This code demonstrates how implicit wait, script timeout, and page load timeout were set before Selenium 4. It uses `TimeUnit` to define the time unit.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\ndriver.manage().timeouts().setScriptTimeout(2, TimeUnit.MINUTES);\ndriver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);\n```\n\n----------------------------------------\n\nTITLE: Running pytest in Python\nDESCRIPTION: This code snippet shows how to execute Python tests using pytest from the command line.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Custom Capabilities Java Example\nDESCRIPTION: Java example showing how to set custom capabilities (`networkname:applicationName`, `nodename:applicationName`) in the `FirefoxOptions` to match the node configured with the custom capabilities. This allows routing sessions to specific nodes based on matching the requested capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.zh-cn.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxOptions options = new FirefoxOptions();\noptions.setCapability(\"networkname:applicationName\", \"node_1\");\noptions.setCapability(\"nodename:applicationName\", \"app_1\");\noptions.setBrowserVersion(\"96\");\noptions.setPlatformName(\"macOS\");\nWebDriver driver = new RemoteWebDriver(new URL(\"http://localhost:4444\"), options);\ndriver.get(\"https://selenium.dev\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Getting a Named Cookie with Selenium WebDriver (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to retrieve a cookie by name using Selenium WebDriver in Kotlin. It requires the Selenium WebDriver dependency. The code navigates to a specific URL, adds a cookie named 'foo' with the value 'bar', and then retrieves the cookie by name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://example.com\")\n        driver.manage().addCookie(Cookie(\"foo\", \"bar\"))\n\n        // Get cookie details with named cookie 'foo'\n        val cookie = driver.manage().getCookieNamed(\"foo\")\n        println(cookie)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Login Test Without Page Object - Java\nDESCRIPTION: This code snippet demonstrates a login test without using the Page Object Model.  It directly interacts with web elements using their locators within the test method. If UI elements or locators change, all tests using these locators need to be modified.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/***\n * Tests login feature\n */\npublic class Login {\n\n  public void testLogin() {\n    // fill login data on sign-in page\n    driver.findElement(By.name(\"user_name\")).sendKeys(\"userName\");\n    driver.findElement(By.name(\"password\")).sendKeys(\"my supersecret password\");\n    driver.findElement(By.name(\"sign-in\")).click();\n\n    // verify h1 tag is \"Hello userName\" after login\n    driver.findElement(By.tagName(\"h1\")).isDisplayed();\n    assertThat(driver.findElement(By.tagName(\"h1\")).getText(), is(\"Hello userName\"));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Manager with Chrome Beta and Debug Flag (bash)\nDESCRIPTION: This command invokes Selenium Manager to manage chromedriver for the Chrome beta browser. The `--browser-version beta` flag tells Selenium Manager to use the beta version of Chrome. The `--debug` flag provides detailed output, showing the process of downloading both the browser and the driver. Assumes the selenium-manager executable is in the current directory.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.en.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./selenium-manager --browser chrome --browser-version beta --debug\n```\n\n----------------------------------------\n\nTITLE: Evaluate script in realm (JavaScript)\nDESCRIPTION: This JavaScript example shows how to evaluate a script inside a specific realm using Selenium BiDi. It gets a realm for a browsing context and evaluates the expression '1 + 1', asserting that the result is 2.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('evaluate script in realm', async () => {\n    let browsingContext = await getBrowsingContext(driver);\n\n    let realm = await session.execute({\n      method: 'script.evaluate',\n      params: {\n        expression: '() => 1',\n        target: { browsingContext: browsingContext.context },\n      },\n    });\n\n    let result = await session.execute({\n      method: 'script.evaluate',\n      params: {\n        expression: '1 + 1',\n        target: { realm: realm.result.realm },\n      },\n    });\n\n    expect(result.result.result.value).toBe(2);\n  });\n```\n\n----------------------------------------\n\nTITLE: Deleting Named Cookie in Kotlin\nDESCRIPTION: This code snippet demonstrates how to delete a cookie by its name using Selenium WebDriver in Kotlin. It navigates to a website, adds two cookies, and then deletes a cookie with the name 'test1'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://www.example.com\")\n        driver.manage().addCookie(Cookie(\"test1\", \"cookie1\"))\n        val cookie1 = Cookie(\"test2\", \"cookie2\")\n        driver.manage().addCookie(cookie1)\n\n        // delete a cookie with name 'test1'\n        driver.manage().deleteCookieNamed(\"test1\")\n\n        // delete cookie by passing cookie object of current browsing context.\n        driver.manage().deleteCookie(cookie1)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Take Element Screenshot in Selenium\nDESCRIPTION: This code takes a screenshot of a specific element on the page using Selenium WebDriver and saves it as a JPG file. It demonstrates how to find an element by CSS selector, and take the element's screenshot, and saves it to a file. Works with Selenium4-alpha7 Ruby bindings and above.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_85\n\nLANGUAGE: Ruby\nCODE:\n```\n    # Works with Selenium4-alpha7 Ruby bindings and above\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://example.com/'\n  ele = driver.find_element(:css, 'h1')\n\n    # Takes and Stores the element screenshot in specified path\n  ele.save_screenshot('./image.jpg')\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Page Ranges - C#\nDESCRIPTION: This C# snippet shows how to set the range of pages to print using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.PageRanges = new List<string>() { \"1-2\" };\n\nAssert.That(printOptions.PageRanges, Is.EqualTo(new List<string>() { \"1-2\" }));\nAssert.That(printOptions.PageRanges.First(), Is.EqualTo(\"1-2\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a Permanent Credential in JavaScript\nDESCRIPTION: This snippet shows how to create a permanent resident key credential using the virtual authenticator in JavaScript. It uses the addCredential method with specified rpId, userId, and type.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nawait devtools.security.addCredential({\n  rpId: 'rpId',\n  userId: 'user1',\n  type: 'publicKey'\n});\n```\n\n----------------------------------------\n\nTITLE: Checking driver version in Bash\nDESCRIPTION: This snippet demonstrates how to check the version of a ChromeDriver executable in a Bash terminal. By running the `chromedriver --version` command, the driver's version information is printed to the console, confirming that the driver is correctly installed and accessible via the PATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.en.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nchromedriver --version\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium WebDriver in Python\nDESCRIPTION: This Python snippet shows how to initialize and use Selenium WebDriver with Chrome. It navigates to the Selenium website and asserts the page title. It depends on the `selenium` package being installed and ChromeDriver being available in the system's PATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.ja.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options as ChromeOptions\n\n@pytest.fixture(scope=\"session\")\ndef driver():\n    chrome_options = ChromeOptions()\n    chrome_options.add_argument(\"--headless\")\n    driver = webdriver.Chrome(options=chrome_options)\n    yield driver\n    driver.quit()\n\ndef test_hello_selenium(driver):\n    driver.get(\"https://www.selenium.dev/selenium/web/web-form.html\")\n    assert driver.title == \"Web form\"\n```\n\n----------------------------------------\n\nTITLE: Starting a Custom Node as Uber Jar (Bash)\nDESCRIPTION: This command starts a Selenium Grid node using a custom implementation packaged as an uber jar. The `--node-implementation` argument specifies the fully qualified name of the custom node class. This setup assumes that `custom_node-server.jar` is the name of the uber jar containing the custom node implementation, and that the class `org.seleniumhq.samples.DecoratedLoggingNode` is the custom node's implementation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/customize_node.en.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -jar custom_node-server.jar node \\\n--node-implementation org.seleniumhq.samples.DecoratedLoggingNode\n```\n\n----------------------------------------\n\nTITLE: Get Element Rectangle in Kotlin\nDESCRIPTION: This code snippet demonstrates how to retrieve the rectangle (dimensions and coordinates) of a web element using Selenium WebDriver in Kotlin. It uses the `rect` property of the WebElement interface.  The code then prints the x coordinate of the rectangle.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Navigate to url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n// Returns height, width, x and y coordinates referenced element\nval res = driver.findElement(By.name(\"range_input\")).rect\n\n// Rectangle class provides getX,getY, getWidth, getHeight methods\nprintln(res.getX())\n```\n\n----------------------------------------\n\nTITLE: Script Pinning in Ruby with Selenium CDP\nDESCRIPTION: This Ruby snippet demonstrates pinning a script using Chrome DevTools Protocol (CDP) with Selenium. It gets the script ID and asserts that the list of breakpoints is not empty. Requires a running Selenium WebDriver instance connected to a Chrome browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.ja.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nscript_id = cdp.script.pin(expression: 'Object.getOwnPropertyDescriptors(window)')['result']['scriptId']\nexpect(cdp.script.get_possible_breakpoints(script_id: script_id)['result']['breakpoints']).not_to be_empty\n```\n\n----------------------------------------\n\nTITLE: Waiting for Downloads - Ruby\nDESCRIPTION: Demonstrates waiting for a download to complete using Selenium and CDP in Ruby. It defines a directory, sets the download behavior, triggers a download and verifies if file exists within the set timeout. Requires Selenium WebDriver and CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_22\n\nLANGUAGE: Ruby\nCODE:\n```\ndownload_dir = Dir.pwd + '/downloads'\n@driver.execute_cdp 'Browser.setDownloadBehavior', { behavior: 'allow',  downloadPath: download_dir }\n@driver.get 'http://localhost:8080/download'\nwait = Selenium::WebDriver::Wait.new timeout: 20\nwait.until { File.exist?(\"#{download_dir}/download.txt\") }\n```\n\n----------------------------------------\n\nTITLE: Listening for Realm Destroyed Event - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to listen for 'realm destroyed' events using Selenium's WebDriver BiDi API. It creates a browsing context, adds a listener for 'realm.destroyed' events, destroys the realm, and verifies that the listener is triggered. This example requires Selenium 4.19 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\n    it('can listen to realm destroyed events', async () => {\n      const browsingContext = await driver.browsingContext.create({\n        type: 'tab',\n      });\n\n      const realmEvents = await driver.script.onRealmDestroyed();\n\n      await driver.browsingContext.close({\n        context: browsingContext.context,\n      });\n\n      const realm = await realmEvents.next();\n      expect(realm.realm.context).toBeDefined();\n    });\n```\n\n----------------------------------------\n\nTITLE: Starting Grid Component with TOML Configuration\nDESCRIPTION: Shows the command-line instruction to start a Selenium Grid component (e.g., standalone, node) using a TOML configuration file. This command specifies the path to the TOML file using the `--config` option.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.en.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-<version>.jar <component> --config /path/to/file/<file-name>.toml\n```\n\n----------------------------------------\n\nTITLE: Creating Transparent Color Object\nDESCRIPTION: This snippet demonstrates how to create a Color object for the 'transparent' color value in Python, using the Color.from_string() method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nTRANSPARENT = Color.from_string('transparent')\n```\n\n----------------------------------------\n\nTITLE: Using a Pen with Selenium (C#)\nDESCRIPTION: This C# code snippet demonstrates how to create and use a Pen input source in Selenium to interact with a web page. It creates a pen device and moves it to a specific element, then performs a pen down and pen up action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.ja.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nPen pen = new(\"pen1\");\nIWebElement element = driver.FindElement(By.Id(\"example\"));\n\nnew Actions(driver)\n    .MoveToElement(element)\n    .Tick(pen.CreatePointerMove(TimeSpan.FromMilliseconds(1), PointerInputOrigin.FromElement(element), 0, 0))\n    .Tick(pen.CreatePointerDown(MouseButton.Left))\n    .Tick(pen.CreatePointerUp(MouseButton.Left))\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Color Objects\nDESCRIPTION: This code snippet demonstrates creating Color objects for basic color definitions like 'black', 'chocolate', and 'hotpink' in Kotlin, using the Color.fromString() method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nprivate val BLACK = Color.fromString(\"black\")\nprivate val CHOCOLATE = Color.fromString(\"chocolate\")\nprivate val HOTPINK = Color.fromString(\"hotpink\")\n```\n\n----------------------------------------\n\nTITLE: Verifying Unicorn Existence - Python\nDESCRIPTION: This Python snippet demonstrates how to verify the existence of a Unicorn using the `exists()` method on the `unicorn_confirmation_page` object. It takes the `sparkles` object as input, which specifies the attributes to check. The `assert` statement checks that the Unicorn exists with the expected attributes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n# The exists() method from UnicornConfirmationPage will take the Sparkles\n# object--a specification of the attributes you want to see, and compare\n# them with the fields on the page.\nassert unicorn_confirmation_page.exists(sparkles), \"Sparkles should have been created, with all attributes intact\"\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Node (Shell)\nDESCRIPTION: This command starts a Selenium Grid Node, which registers with the Hub and executes tests. It assumes the Node is running on the same machine as the Hub. The Node detects available drivers on the system path during startup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.ja.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node\n```\n\n----------------------------------------\n\nTITLE: Find Element by Name - JavaScript\nDESCRIPTION: This snippet shows how to locate a web element using its name attribute in JavaScript. It initializes a ChromeDriver and uses the `findElement` method with `By.name` to find the element with the name 'newsletter'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.name('newsletter'));\n```\n\n----------------------------------------\n\nTITLE: Release All Actions - Kotlin\nDESCRIPTION: This Kotlin snippet releases all currently depressed keys and pointer buttons by calling the releaseAllActions() method on the WebDriver object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.ja.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.releaseAllActions()\n```\n\n----------------------------------------\n\nTITLE: ThreadGuard Example: Detecting Thread Conflicts (Java)\nDESCRIPTION: This code demonstrates how ThreadGuard can be used to detect thread conflicts when a WebDriver instance is accessed from multiple threads. It creates a ChromeDriver instance protected by ThreadGuard and then attempts to access it from a separate thread, triggering an exception.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/thread_guard.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class DriverClash {\n  //thread main (id 1) created this driver\n  private WebDriver protectedDriver = ThreadGuard.protect(new ChromeDriver());\n\n  static {\n    System.setProperty(\"webdriver.chrome.driver\", \"<Set path to your Chromedriver>\");\n  }\n\n  //Thread-1 (id 24) is calling the same driver causing the clash to happen\n  Runnable r1 = () -> {protectedDriver.get(\"https://selenium.dev\");};\n  Thread thr1 = new Thread(r1);\n\n  void runThreads(){\n    thr1.start();\n  }\n\n  public static void main(String[] args) {\n    new DriverClash().runThreads();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Credential in Java\nDESCRIPTION: Removes a specific credential from the authenticator based on its ID in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nbyte[] bytes = new byte[16];\nnew Random().nextBytes(bytes);\nCredential cred = new Credential()\n    .setId(bytes)\n    .setAlgorithm(Algorithm.ES256)\n    .setUserHandle(bytes)\n    .setResidentKey(true);\nauthenticator.addCredential(cred);\nauthenticator.removeCredential(cred.getId());\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium\nDESCRIPTION: This snippet sets an implicit wait time for the WebDriver instance.  This tells the driver to wait a specified amount of time when trying to find an element if it is not immediately available.  Requires an initialized WebDriver instance. Not recommended as best practice for waiting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ndriver.manage().setTimeouts({ implicit: 10000 });\n```\n\n----------------------------------------\n\nTITLE: Running RSpec tests in Ruby\nDESCRIPTION: This code snippet shows how to execute Ruby tests using RSpec from the command line.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nrspec\n```\n\n----------------------------------------\n\nTITLE: Docker Compose for Selenium Grid with Beta Browsers\nDESCRIPTION: This docker-compose file sets up a Selenium Grid with Chrome, Firefox, and Edge nodes all running the Beta versions. It defines services for each browser node and a selenium-hub. The nodes connect to the hub via environment variables, and the hub exposes ports for external access.  Requires docker-compose to be installed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/dev-and-beta-channel-browsers-via-docker-selenium.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# To execute this docker-compose yml file use `docker-compose -f docker-compose-v3-beta-channel.yml up`\n# Add the `-d` flag at the end for detached execution\n# To stop the execution, hit Ctrl+C, and then `docker-compose -f docker-compose-v3-beta-channel.yml down`\nversion: \"3\"\nservices:\n  chrome:\n    image: selenium/node-chrome:beta\n    shm_size: 2gb\n    depends_on:\n      - selenium-hub\n    environment:\n      - SE_EVENT_BUS_HOST=selenium-hub\n      - SE_EVENT_BUS_PUBLISH_PORT=4442\n      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443\n\n  edge:\n    image: selenium/node-edge:beta\n    shm_size: 2gb\n    depends_on:\n      - selenium-hub\n    environment:\n      - SE_EVENT_BUS_HOST=selenium-hub\n      - SE_EVENT_BUS_PUBLISH_PORT=4442\n      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443\n\n  firefox:\n    image: selenium/node-firefox:beta\n    shm_size: 2gb\n    depends_on:\n      - selenium-hub\n    environment:\n      - SE_EVENT_BUS_HOST=selenium-hub\n      - SE_EVENT_BUS_PUBLISH_PORT=4442\n      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443\n\n  selenium-hub:\n    image: selenium/hub:latest\n    container_name: selenium-hub\n    ports:\n      - \"4442:4442\"\n      - \"4443:4443\"\n      - \"4444:4444\"\n\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Viewport Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse cursor to a specific offset from the top-left corner of the current viewport using Selenium WebDriver. The action is performed using the `MoveByOffset` method of the Actions class, and it's available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_50\n\nLANGUAGE: CSharp\nCODE:\n```\nnew Actions(driver)\n    .MoveByOffset(15, 20)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Get session slot information\nDESCRIPTION: This command uses curl to execute a GraphQL query and retrieve session slot information (`id`, `stereotype`, `lastStarted`) for each session from the `sessionsInfo` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.zh-cn.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ sessionsInfo { sessions { id, slot { id, stereotype, lastStarted } } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Binary Location\nDESCRIPTION: This snippet shows how to set the binary location for the Firefox browser, allowing you to specify a particular Firefox installation. This is useful when you have multiple Firefox versions installed and want to use a specific one for testing.  The path to the Firefox executable is passed to the `setBinary` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\noptions.setBinary(new FirefoxBinary(new File(\"/Applications/Firefox Nightly.app/Contents/MacOS/firefox\")));\n```\n\n----------------------------------------\n\nTITLE: Setting Capabilities After Upgrade - Python\nDESCRIPTION: This Python code demonstrates how to set browser version, platform name, and custom cloud options using FirefoxOptions after upgrading to Selenium 4. It utilizes set_capability to define cloud-specific options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.firefox.options import Options as FirefoxOptions\noptions = FirefoxOptions()\noptions.browser_version = '92'\noptions.platform_name = 'Windows 10'\ncloud_options = {}\ncloud_options['build'] = my_test_build\ncloud_options['name'] = my_test_name\noptions.set_capability('cloud:options', cloud_options)\ndriver = webdriver.Remote(cloud_url, options=options)\n```\n\n----------------------------------------\n\nTITLE: Enabling Safari Driver via Shell\nDESCRIPTION: This command enables the Safari driver, which is required for automating Safari through Selenium. This needs to be run from the terminal before automation can occur.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.zh-cn.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsafaridriver --enable\n```\n\n----------------------------------------\n\nTITLE: Disabling EdgeDriver Build Check in Java\nDESCRIPTION: This Java snippet demonstrates how to disable the build check for EdgeDriver. Note that this is an unsupported feature.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nEdgeDriverService service = new EdgeDriverService.Builder().withBuildCheckDisabled(true).build();\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - Selenium WebDriver - Ruby\nDESCRIPTION: This snippet sets the size of the browser window to 1024x768 pixels using the Selenium WebDriver API in Ruby. Requires the selenium-webdriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.window.resize_to(1024,768)\n```\n\n----------------------------------------\n\nTITLE: Tearing Down WebDriver in Python\nDESCRIPTION: This code snippet demonstrates how to tear down the WebDriver after test execution in Python using pytest.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to Eager in Kotlin\nDESCRIPTION: This snippet shows how to set the page load strategy to 'eager' in Kotlin using Selenium. WebDriver waits until the DOMContentLoaded event is fired.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.PageLoadStrategy\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.chrome.ChromeOptions\n\nfun main() {\n  val chromeOptions = ChromeOptions()\n  chromeOptions.setPageLoadStrategy(PageLoadStrategy.EAGER)\n  val driver = ChromeDriver(chromeOptions)\n  try {\n    driver.get(\"https://www.google.com\")\n  }\n  finally {\n    driver.quit()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get browsing context realms by type (Java)\nDESCRIPTION: This Java snippet demonstrates how to retrieve realms of a specific type within a specific browsing context using Selenium BiDi. It sets both the browsing context and the realm type in the `GetRealmsParameters`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\n            List<RealmInfo> contextRealms = bidi.script().getRealms(GetRealmsParameters.builder().setBrowsingContext(browsingContext.getId()).setType(RealmType.window).build());\n```\n\n----------------------------------------\n\nTITLE: Finding an Element by Name\nDESCRIPTION: This snippet shows how to locate a specific element on a web page using its name attribute. The `find_element` method with `By.NAME` locator is used for this purpose. The `name` parameter specifies the value of the name attribute to search for.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nsearch_box = driver.find_element(By.NAME, \"q\")\n```\n\n----------------------------------------\n\nTITLE: Install Unsigned Firefox Extension (Java)\nDESCRIPTION: This Java code snippet installs an unsigned (temporary) Firefox extension from a directory. This is useful for developing and testing extensions before they are signed.  Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_41\n\nLANGUAGE: java\nCODE:\n```\n((AddHasExtensions) driver).installExtension(new File(\"/path/to/unpacked/extension\"));\n```\n\n----------------------------------------\n\nTITLE: Register Authentication - Ruby\nDESCRIPTION: Registers a username and password for authentication using the `register` method.  Every time the driver loads a page that requires authentication, it will use the provided credentials.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2021/a-tour-of-4-authentication.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.register(username: 'admin', password: 'admin')\n```\n\n----------------------------------------\n\nTITLE: Getting Element Attribute\nDESCRIPTION: This snippet demonstrates how to retrieve the value of a specific attribute of an element using Selenium. The `get_attribute` method is used to fetch the value of the `title` attribute of the located element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\ntitle = search_box.get_attribute('title')\n```\n\n----------------------------------------\n\nTITLE: Comparing Color Objects\nDESCRIPTION: This snippet demonstrates how to directly compare a Color object (login_button_background_colour) with a predefined Color constant (HOTPINK) using the equality operator (==) in Ruby, for asserting that the background color of a login button matches a specific color.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_22\n\nLANGUAGE: Ruby\nCODE:\n```\nassert(login_button_background_colour == HOTPINK)\n```\n\n----------------------------------------\n\nTITLE: Get sessions component configuration help\nDESCRIPTION: This command retrieves component-specific configuration information for the sessions Selenium Grid role. It details available options and settings for the sessions component.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.ja.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar sessions --help\n```\n\n----------------------------------------\n\nTITLE: Setting Script Timeout in Ruby\nDESCRIPTION: This code snippet demonstrates setting the script timeout in Ruby, which determines the maximum execution time for scripts. The `script_timeout` method is used to set the duration in seconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_33\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.timeouts.script_timeout = 30\n```\n\n----------------------------------------\n\nTITLE: Get Current URL - CSharp\nDESCRIPTION: This C# snippet demonstrates retrieving the current URL of the web page using Selenium WebDriver. It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.pt-br.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Url;\n```\n\n----------------------------------------\n\nTITLE: Initializing RemoteWebDriver in Ruby\nDESCRIPTION: Initializes a RemoteWebDriver instance in Ruby, specifying the URL of the Selenium Grid and the desired browser capabilities. Allows executing tests on a remote machine using Selenium Grid. Requires the selenium-webdriver gem. URL specifies the grid and capabilities the browser to initiate.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :remote, url: 'http://localhost:4444', options: Selenium::WebDriver::Chrome::Options.new\n```\n\n----------------------------------------\n\nTITLE: Filtering Logger Output - CSharp\nDESCRIPTION: This snippet shows how to manage .NET logging on a per class level, allowing you to set the desired logging level for each class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Logging;\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to a New Window in Selenium (Javascript)\nDESCRIPTION: Opens a new window using Selenium 4's `newWindow` functionality and switches the driver's focus to it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.switchTo().newWindow('window');\nawait driver.get('https://www.selenium.dev/');\n```\n\n----------------------------------------\n\nTITLE: Adding Directory to PATH in Zsh\nDESCRIPTION: This snippet adds a new directory containing the browser driver to the PATH environment variable in Zsh. It appends the specified path to the existing PATH variable and updates the `~/.zshenv` file, ensuring the change persists across sessions. Then, it sources the environment file to apply the changes to the current shell. Replace `/path/to/driver` with the actual directory path.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.zh-cn.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho 'export PATH=$PATH:/path/to/driver' >> ~/.zshenv\nsource ~/.zshenv\n```\n\n----------------------------------------\n\nTITLE: Filtering Log Messages in Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to filter log messages by opting in or out of specific log IDs. It allows control over deprecation notices as well, using symbols or arrays of symbols to specify the log messages to allow or ignore.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\nallow :browser_options\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium with .NET CLI\nDESCRIPTION: Installs the Selenium WebDriver package using the .NET command-line interface (CLI).  This is a cross-platform method for adding Selenium to C# projects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.zh-cn.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Selenium.WebDriver\n```\n\n----------------------------------------\n\nTITLE: Comparing Color Objects - Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to directly compare Color objects in Java using the `equals()` method. It checks if the background color of a login button is equal to the predefined HOTPINK color.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nassert loginButtonBackgroundColour.equals(HOTPINK);\n```\n\n----------------------------------------\n\nTITLE: Going Back in Browser History (Ruby)\nDESCRIPTION: Demonstrates how to navigate back in the browser history using Selenium WebDriver in Ruby. The `back` method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.back\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes CSharp\nDESCRIPTION: This code snippet demonstrates how to add pointer event attributes to a Pen input source in C#, specifically setting properties like width, height, pressure, and tilt.  It involves creating a Pen object, defining a PointerInput.Origin, and then using the `Feed` method to specify the pointer event properties.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.pt-br.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nPen pen = new Pen(driver, \"pen1\");\nPointerInput.Origin viewport = PointerInput.Origin.Viewport;\n\nDictionary<string, object> pointerAttributes = new Dictionary<string, object>();\npointerAttributes.Add(\"width\", 20);\npointerAttributes.Add(\"height\", 40);\npointerAttributes.Add(\"pressure\", 0.8);\npointerAttributes.Add(\"tiltX\", 10);\npointerAttributes.Add(\"tiltY\", -10);\n\nSequence sequence = new Sequence(pen, 1);\nsequence.AddAction(pen.CreatePointerMove(viewport, 0, 0, TimeSpan.FromMilliseconds(10), pointerAttributes));\nsequence.AddAction(pen.CreatePointerDown(MouseButton.Left));\nsequence.AddAction(pen.CreatePointerUp(MouseButton.Left));\n\ndriver.Perform(new List<Sequence> { sequence });\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Driver Log File Output\nDESCRIPTION: This code snippet shows how to configure the ChromeDriver service to write its logs to a specific file. This is useful for debugging and troubleshooting issues with the ChromeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_31\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.chrome(log_path: 'chrome.log')\n```\n\n----------------------------------------\n\nTITLE: Scroll by Amount using Selenium Wheel - Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to scroll by a given amount using Selenium's Actions API and Wheel class. It takes delta x and delta y values as input, which represent the amount to scroll horizontally and vertically, respectively. Negative values indicate scrolling left and up. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nActions(driver)\n  .scrollByAmount(50, 100)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset - Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to scroll from an offset of the viewport using Selenium's Actions API and Wheel class. It takes an x offset, a y offset, delta x and delta y values. It scrolls from the origin point which is the upper left corner of the current viewport, offset by given x and y values. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nActions(driver).scrollFromOrigin(WheelInput.ScrollOrigin.viewport(25, 25), 50, 100)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Setting Internet Explorer Driver Log Level - C#\nDESCRIPTION: This snippet demonstrates setting the Internet Explorer Driver log level in C# using `InternetExplorerOptions`.  The `LogLevel` property accepts a value from the `InternetExplorerDriverLogLevel` enumeration. The options are then used when creating the `InternetExplorerDriver` instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_32\n\nLANGUAGE: CSharp\nCODE:\n```\nvar options = new InternetExplorerOptions();\noptions.LogLevel = InternetExplorerDriverLogLevel.Debug;\ndriver = new InternetExplorerDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Levels in Java\nDESCRIPTION: This snippet shows how to set the logger level and handler level in Java using the `java.util.logging` package. This configures the verbosity of logs based on severity. Requires the `java.util.logging` package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nlogger.setLevel(java.util.logging.Level.FINE);\njava.util.logging.ConsoleHandler handler = new java.util.logging.ConsoleHandler();\nhandler.setLevel(java.util.logging.Level.FINE);\nlogger.addHandler(handler);\n```\n\n----------------------------------------\n\nTITLE: Removing a Virtual Authenticator in JavaScript\nDESCRIPTION: This snippet shows how to remove a virtual authenticator using JavaScript and Selenium. It uses the authenticator ID to remove the specified virtual authenticator instance. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst devtools = await driver.getDevTools()\nawait devtools.removeVirtualAuthenticator(authenticatorId)\n```\n\n----------------------------------------\n\nTITLE: Verify Unicorn Existence (JavaScript)\nDESCRIPTION: This snippet demonstrates verifying the existence of the created unicorn using the `exists()` method of the UnicornConfirmationPage. It asserts that the 'Sparkles' unicorn has been created with all attributes intact by comparing the provided `sparkles` object with the data on the confirmation page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The exists() method from UnicornConfirmationPage will take the Sparkles\n// object--a specification of the attributes you want to see, and compare\n// them with the fields on the page.\nassert(unicornConfirmationPage.exists(sparkles), \"Sparkles should have been created, with all attributes intact\");\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Current Position in Selenium\nDESCRIPTION: This code snippet shows how to move the mouse pointer from its current position by a specified offset using Selenium WebDriver. It uses the `MoveByOffset` method. The position will be in the upper-left corner of the viewport if the mouse hasn't moved before. Note that pointer position does not change when the page is scrolled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nnew Actions(driver).MoveByOffset(30, -10).Perform();\n```\n\n----------------------------------------\n\nTITLE: EditIssue LoadableComponent Load Method (Java)\nDESCRIPTION: This code snippet shows the load method for an EditIssue LoadableComponent. It first calls `securedPage.get()` to ensure the user is authenticated, and then navigates to the edit issue URL.  Dependencies: securedPage, WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.pt-br.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n  @Override\n  protected void load() {\n    securedPage.get();\n\n    driver.get(\"https://github.com/SeleniumHQ/selenium/issues/new?assignees=&labels=I-defect%2Cneeds-triaging&projects=&template=bug-report.yml&title=%5B%F0%9F%90%9B+Bug%5D%3A+\");\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Manager for Chrome\nDESCRIPTION: This command executes Selenium Manager to automatically manage the ChromeDriver for the Chrome browser. The `--debug` flag provides verbose output for troubleshooting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.zh-cn.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./selenium-manager --browser chrome --debug\n```\n\n----------------------------------------\n\nTITLE: Setting User Verification in C#\nDESCRIPTION: This C# code snippet sets the user verified status on the virtual authenticator, simulating a successful or failed user verification step.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\nawait session.Security.SetUserVerified(true);\n```\n\n----------------------------------------\n\nTITLE: Product Component Class in Java\nDESCRIPTION: This Java code defines the Product class, extending BaseComponent. It includes methods to get the product name, price, and add the product to the cart. It demonstrates how to locate elements within the component's root element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.pt-br.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// Objeto Componente da Página (Page Component Object)\npublic class Product extends BaseComponent {\n    // O elemento raiz contém todo o componente\n    public Product(WebElement root) {\n        super(root); // inventory_item\n    }\n\n    public String getName() {\n        // A localização de um elemento começa na raiz do componente\n        return root.findElement(By.className(\"inventory_item_name\")).getText();\n    }\n\n    public BigDecimal getPrice() {\n        return new BigDecimal(\n                root.findElement(By.className(\"inventory_item_price\"))\n                    .getText()\n                    .replace(\"$\", \"\")\n            ).setScale(2, RoundingMode.UNNECESSARY); // Higienização e formatação\n    }\n\n    public void addToCart() {\n        root.findElement(By.id(\"add-to-cart-backpack\")).click();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL: Querying Max Session Count (curl)\nDESCRIPTION: This curl command queries the Selenium Grid's GraphQL endpoint to fetch the maximum allowed session count. It uses `curl` to send a POST request with the GraphQL query. The response will contain the `maxSession` value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.ja.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ grid { maxSession } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: WebDriver Initialization Java\nDESCRIPTION: This snippet shows how to initialize a WebDriver instance for Chrome using Java. It creates a new ChromeDriver object, which is used to control the Chrome browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.en.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n```\n\n----------------------------------------\n\nTITLE: Apache 2.0 License (Markdown)\nDESCRIPTION: This snippet shows the Apache 2.0 license in Markdown format, detailing terms for use, reproduction, and distribution of software. It covers definitions, copyright and patent licenses, redistribution terms, contribution submission, trademark usage, warranty disclaimer, liability limitation, and accepting warranty or additional liability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/copyright.ja.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n                                 Apache License\n                           Version 2.0, 2004年1月\n                        http://www.apache.org/licenses/\n\n   使用、複製、および頒布に関する条項\n\n   1. 定義 　\n\n      「ライセンス」とは、このドキュメントの第1項から第9項までで定義している、\n      使用、複製、および頒布に関する条項を指します。\n\n      「ライセンサー」とは、著作権所有者、あるいは著作権所有者が\n      ライセンス付与対象として認めた者を指します。\n\n      「法人」とは、行為者と、行為者を管理するか行為者により管理されるか\n      行為者共通の管理下にある他のすべての者とから成る連合体を指します。\n      この定義における「管理」とは、\n      (i) 契約またはその他により、直接または間接的にこの法人の指揮・経営を行う権限、または\n      (ii) この法人の50%以上の株式の所有権 または\n      (iii) 受益所有権を有することを指します。\n\n      「あなた」とは、本ライセンスにより付与される権利を行使する個人または法人を指します。\n\n      「ソース」形式とは、ソフトウェアのソースコード、ドキュメントソース、\n      設定ファイルといった、変更を加えるのに好都合な形式を指します。\n\n      「オブジェクト」形式とは、コンパイルされたオブジェクトコード、生成されたドキュメント、\n      他のメディアへの変換物といった、ソース形式の機械的な変換により生じる形式を指します。\n\n      「成果物」とは、ソース形式であるとオブジェクト形式であるとを問わず、\n      製作物に挿入または添付される（後出の付録に例がある）著作権表示で示された著作物で、\n      本ライセンスに基づいて利用が許されるものを指します。\n\n      「派生成果物」とは、編集上の改訂、注解、推敲など、\n      成果物を基にしていて全体としてオリジナル著作物と呼べるような製作物全般を指します。\n      本ライセンスでは、成果物や派生成果物から分離できる製作物や、\n      成果物や派生成果物のインタフェースへの単なるリンク（または名前によるバインド）を、\n      派生成果物に含めません。\n\n      「コントリビューション」とは、成果物のオリジナルバージョンならびに成果物\n      または派生成果物への変更や追加も含めて、著作権所有者あるいは著作権所有者が認めた\n      個人または法人による成果物への組み込みを意図してライセンサーに提出される\n      著作物全般を指します。\n      この定義における「提出」とは、成果物を論じたり改良するためにライセンサー\n      またはその代理者により管理される電子的メーリングリスト、ソースコード管理システム、\n      問題追跡システムといった、電子的方法、口頭、または書面で、\n      ライセンサーまたはその代理者に情報を送ることを指します。\n      ただし、著作権所有者が書面で「コントリビューションでない」と明示したものは除きます。\n\n      「コントリビューター」とは、ライセンサーおよびその代理を務める個人または法人で、\n      自分のコントリビューションがライセンサーに受領されて成果物に組み込まれた者を指します。\n\n   2. 著作権ライセンスの付与  \n      本ライセンスの条項に従って、各コントリビューターはあなたに対し、\n      ソース形式であれオブジェクト形式であれ、成果物および派生成果物を複製したり、\n      派生成果物を作成したり、公に表示したり、公に実行したり、サブライセンスしたり、\n      頒布したりする、無期限で世界規模で非独占的で使用料無料で取り消し不能な\n      著作権ライセンスを付与します。\n\n   3. 特許ライセンスの付与  \n      本ライセンスの条項に従って、各コントリビューターはあなたに対し、\n      成果物を作成したり、使用したり、販売したり、販売用に提供したり、\n      インポートしたり、その他の方法で移転したりする、\n      無期限で世界規模で非独占的で使用料無料で取り消し不能な\n      （この項で明記したものは除く）特許ライセンスを付与します。\n      ただし、このようなライセンスは、コントリビューターによって\n      ライセンス可能な特許申請のうち、当該コントリビューターのコントリビューションを\n      単独または該当する成果物と組み合わせて用いることで必然的に侵害されるものにのみ\n      適用されます。\n      あなたが誰かに対し、交差請求や反訴を含めて、\n      成果物あるいは成果物に組み込まれたコントリビューションが\n      直接または間接的な特許侵害に当たるとして特許訴訟を起こした場合、\n      本ライセンスに基づいてあなたに付与された特許ライセンスは、\n      そうした訴訟が正式に起こされた時点で終了するものとします。\n\n   4. 再頒布  \n      あなたは、ソース形式であれオブジェクト形式であれ、変更の有無に関わらず、\n      以下の条件をすべて満たす限りにおいて、成果物またはその派生成果物のコピーを\n      複製したり頒布したりすることができます。\n\n      (a) 成果物または派生成果物の他の受領者に本ライセンスのコピーも渡すこと。\n\n      (b) 変更を加えたファイルについては、あなたが変更したということが\n      よくわかるような告知を入れること。\n\n      (c) ソース形式の派生成果物を頒布する場合は、ソース形式の成果物に含まれている著作権、\n      特許、商標、および帰属についての告知を、派生成果物のどこにも関係しないものは除いて、\n      すべて派生成果物に入れること。\n\n      (d) 成果物の一部として「NOTICE」に相当するテキストファイルが含まれている場合は、\n      そうしたNOTICEファイルに含まれている帰属告知のコピーを、\n      派生成果物のどこにも関係しないものは除いて、頒布する派生成果物に入れること。\n      その際、次のうちの少なくとも1箇所に挿入すること。\n      (i) 派生成果物の一部として頒布するNOTICEテキストファイル、\n      (ii) ソース形式またはドキュメント（派生成果物と共にドキュメントを頒布する場合）、\n      (iii) 派生成果物によって生成される表示\n      （こうした第三者告知を盛り込むことが標準的なやり方になっている場合）。\n      NOTICEファイルの内容はあくまで情報伝達用であって、\n      本ライセンスを修正するものであってはなりません。\n      あなたは頒布する派生成果物に自分の帰属告知を\n      （成果物からのNOTICEテキストに並べて、またはその付録として）追加できますが、\n      これはそうした追加の帰属告知が本ライセンスの修正と\n      解釈されるおそれがない場合に限られます。\n\n      あなたは自分の修正物に自らの著作権表示を追加することができ、\n      自分の修正物の使用、複製、または頒布について、あるいはそうした派生成果物の全体について、\n      付加的なライセンス条項または異なるライセンス条項を設けることができます。\n      ただし、これは成果物についてのあなたの使用、複製、および頒布が、\n      それ以外の点で本ライセンスの条項に従っている場合に限られます。\n\n   5. コントリビューションの提出  \n      特に断りがない限り、あなたが成果物への組み込みを意図してライセンサーに\n      提出したコントリビューションは、付加的な条項がなければ、\n      本ライセンスの条項に従うものとします。\n      上述の規定にかかわらず、そうしたコントリビューションに関してあなたがライセンサーと\n      結んだかもしれない別のライセンス契約の条項を、ここで無効にしたり\n      修正したりすることはありません。\n\n   6. 商標  \n      本ライセンスでは、成果物の出所を記述したりNOTICEファイルの内容を複製するときに\n      必要になる妥当で慣習的な使い方は別として、ライセンサーの商号、商標、サービスマーク、\n      または製品名の使用権を付与しません。\n\n   7. 保証の否認  \n      適用される法律または書面での同意によって命じられない限り、\n      ライセンサーは成果物を（そしてコントリビューターは各自のコントリビューションを）\n      「現状のまま」提供するものとし、明示黙示を問わず、タイトル、非侵害性、\n      商業的な使用可能性、および特定の目的に対する適合性を含め、\n      いかなる保証も条件も提供しません。\n      あなたは成果物の使用や再頒布の適切性を自分で判断する責任を持つと共に、\n      本ライセンスにより付与される権利を行使することに伴うすべてのリスクを負うことになります。\n\n   8. 責任の制限  \n      いかなる条件および法理論においても、不法行為（過失を含む）、契約、\n      またはその他いかなる場合でも、適用される法律または書面での同意によって命じられない限り、\n      コントリビューターは本ライセンスまたは成果物の使い方に関連して生じる直接損害、\n      間接損害、偶発的な損害、特別損害、懲罰的損害、または結果損害を含め、\n      営業権の損失、業務の停止、コンピューター障害または誤作動、\n      その他の商業上の損害や損失など、いかなる損害に対しても、\n      たとえそうした損害の可能性をたとえ知らされていたとしても、\n      あなたに責任を負わないものとします。\n\n   9. 保証または追加的責任の引き受け  \n      成果物またはその派生成果物を再頒布する際、あなたはサポート、保証、損害補償、\n      またはその他の責任や、本ライセンスに矛盾しない権利を提示し、\n      これを有料にすることができます。\n      ただし、そうした責任を引き受ける場合、あなたはそれを自分自身のためにだけ\n      自己責任として行えるのであって、他のコントリビューターのために行うことはできません。\n      また、あなたはそうした保証や追加的責任のせいで他のコントリビューターに\n      責任が降りかかったり賠償要求が出されたとしても、それらのコントリビューターに\n      損害が及ぶのを防ぐと共に各コントリビューターの損害を補償することに同意しなければなりません。\n\n   使用、複製、および頒布に関する条項の終わり\n\n   付録： Apache Licenseの適用の仕方\n\n      あなたの製作物にApache Licenseを適用するときは、次の定型文を添付してください。\n      ただし、\"[]\"で囲まれている部分は、あなた自身の識別情報に置き換えてください\n      （その際、角括弧は取り除きます）。\n      また、この文言を該当するファイル形式に合ったコメント構文で囲んでください。\n      さらに、第三者アーカイブ内での識別を容易にするため、\n      ファイル名またはクラス名ならびに趣旨説明が著作権表示と同じ「印刷ページ」に\n      現れるようにすることをお勧めします。\n\n   Copyright [yyyy] [著作権所有者の名前]\n\n   Apache License Version 2.0（「本ライセンス」）に基づいてライセンスされます。\n   あなたがこのファイルを使用するためには、本ライセンスに従わなければなりません。\n   本ライセンスのコピーは下記の場所から入手できます。\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   適用される法律または書面での同意によって命じられない限り、\n   本ライセンスに基づいて頒布されるソフトウェアは、明示黙示を問わず、\n   いかなる保証も条件もなしに「現状のまま」頒布されます。\n   本ライセンスでの権利と制限を規定した文言については、本ライセンスを参照してください。\n\n```\n\n----------------------------------------\n\nTITLE: Realm Created Event - Java\nDESCRIPTION: This snippet shows how to listen for realm creation events using Java and the WebDriver BiDi API. It subscribes to the `Script.RealmCreated` event. Requires the WebDriver BiDi dependency and event handling.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\nBiDi bidi = ((HasBiDi) driver).getBiDi();\n        try (Subscription<Script.RealmCreated> subscription = bidi.script().onRealmCreated(realmInfo -> {\n\n            BrowsingContext browsingContext = new BrowsingContext(contextId);\n            Script.CallFunctionOptions options = new Script.CallFunctionOptions();\n            options.setThisOwning(true);\n            options.setArguments(List.of(new RemoteValueArgument(\"arg1\", RemoteValue.create())));\n\n            Script.EvaluateResult result = bidi.script().callFunction(\n                browsingContext, \"() => { return window.document.title }\", options);\n            assertEquals(\"\", result.getResult().getValue());\n        })){\n\n        }\n```\n\n----------------------------------------\n\nTITLE: C# Additional Capability (Before)\nDESCRIPTION: Demonstrates adding an additional capability using `AddAdditionalCapability` in C#. This is deprecated in favor of `AddAdditionalOption`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_31\n\nLANGUAGE: CS\nCODE:\n```\nvar browserOptions = new ChromeOptions();\nbrowserOptions.PlatformName = \"Windows 10\";\nbrowserOptions.BrowserVersion = \"latest\";\nvar cloudOptions = new Dictionary<string, object>();\nbrowserOptions.AddAdditionalCapability(\"cloud:options\", cloudOptions, true);\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Log File Output - Java\nDESCRIPTION: This snippet shows how to configure the Internet Explorer driver service to output logs to a specific file in Java. It uses `InternetExplorerDriverService.Builder` to create a service builder and directs the output to the specified file path.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\nInternetExplorerDriverService service = new InternetExplorerDriverService.Builder()\n        .withLogFile(new File(\"log.txt\"))\n        .build();\nWebDriver driver = new InternetExplorerDriver(service);\n```\n\n----------------------------------------\n\nTITLE: Continue Auth Required Request - Java\nDESCRIPTION: This Java code snippet demonstrates how to continue a network request blocked at the 'authRequired' phase using Selenium BiDi. It provides credentials (username and password) to proceed with the request. This is useful when dealing with HTTP authentication challenges.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\ndriver.getDevTools().createSession();\nNetwork network = new Network(driver.getDevTools());\nnetwork.addIntercept(\"*.example.com/*\", new AddInterceptParameters());\nContinueParameters params = new ContinueParameters();\nparams.setAuth(new Auth(\"user\", \"password\"));\nnetwork.continueRequest(params);\n```\n\n----------------------------------------\n\nTITLE: Adding a Cookie to Browser Context - JavaScript\nDESCRIPTION: This JavaScript snippet showcases how to add a cookie in the current browser context using Selenium WebDriver. It accesses a URL and adds a cookie.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.get('https://www.example.com/');\nawait driver.manage().addCookie({name: 'key', value: 'value'});\n```\n\n----------------------------------------\n\nTITLE: Python Assertion Example\nDESCRIPTION: This snippet demonstrates how to perform an assertion in Python using pytest to verify the page title. It verifies if the title of the webpage matches the expected value using `assert`. It assumes `driver` is a Selenium WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_eight_components():\n    assert driver.title == \"SeleniumHQ Browser Automation\"\n```\n\n----------------------------------------\n\nTITLE: Capture Element Screenshot in Java\nDESCRIPTION: This code snippet demonstrates capturing a screenshot of a specific element using Selenium WebDriver's BiDi API in Java. It finds an element on the page and then uses the `captureScreenshot` method to capture a screenshot of that element. Requires Selenium version 4.14.0 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_32\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.tagName(\"h1\"));\n    String elementShot = browsingContext.captureScreenshot(element, true);\n    assertNotNull(elementShot);\n    element = driver.findElement(By.tagName(\"p\"));\n    elementShot = browsingContext.captureScreenshot(element, true);\n```\n\n----------------------------------------\n\nTITLE: Finding Elements by Tag Name in Kotlin\nDESCRIPTION: This Kotlin code finds all elements with a given tag name on a web page. It uses Selenium WebDriver to navigate to a URL, finds all elements with the tag name 'p', and prints the text content of each element. It requires the Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_28\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.By\nimport org.openqa.selenium.firefox.FirefoxDriver\n\nfun main() {\n    val driver = FirefoxDriver()\n    try {\n        driver.get(\"https://example.com\")\n        // Get all the elements available with tag name 'p'\n        val elements = driver.findElements(By.tagName(\"p\"))\n        for (element in elements) {\n            println(\"Paragraph text:\" + element.text)\n        }\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtualAuthenticatorOptions in C#\nDESCRIPTION: This snippet shows how to initialize VirtualAuthenticatorOptions in C# to configure a virtual authenticator.  It sets the protocol, transport, resident key support, and user verification requirements. These options are then used to create a virtual authenticator instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions()\n    {\n        Protocol = Protocol.Ctap2,\n        Transport = Transport.Usb,\n        IsResidentKeySupported = true,\n        IsUserVerificationSupported = true\n    };\n```\n\n----------------------------------------\n\nTITLE: User Creation and Login with Selenium (Kotlin)\nDESCRIPTION: This Kotlin snippet creates a user using UserFactory.createCommonUser() (assumed to be defined elsewhere) and logs in with loginAs(), returning an AccountPage object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Create a user who has read-only permissions--they can configure a unicorn,\n// but they do not have payment information set up, nor do they have\n// administrative privileges. At the time the user is created, its email\n// address and password are randomly generated--you don't even need to\n// know them.\nval user = UserFactory.createCommonUser() //This method is defined elsewhere.\n\n// Log in as this user.\n// Logging in on this site takes you to your personal \"My Account\" page, so the\n// AccountPage object is returned by the loginAs method, allowing you to then\n// perform actions from the AccountPage.\nval accountPage = loginAs(user.getEmail(), user.getPassword())\n```\n\n----------------------------------------\n\nTITLE: Printing Page with Options in Python\nDESCRIPTION: This Python snippet demonstrates how to print a web page using Selenium and sets the page range. It imports necessary modules, defines print options, navigates to a specified page, and retrieves the base64 encoded string of the printed page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_52\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.common.print_page_options import PrintOptions\n\n    print_options = PrintOptions()\n    print_options.page_ranges = ['1-2']\n\n    driver.get(\"printPage.html\")\n\n    base64code = driver.print_page(print_options)\n```\n\n----------------------------------------\n\nTITLE: Creating Transparent Color Object - Selenium WebDriver\nDESCRIPTION: This snippet shows how to create a Color object representing the \"transparent\" color in Kotlin. This handles cases where no color is explicitly set on an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nprivate val TRANSPARENT = Color.fromString(\"transparent\")\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes - C#\nDESCRIPTION: This code snippet demonstrates how to add pointer event attributes to a Pen action in Selenium with C#. It initializes a new Actions object, creates a pen input source, moves to a specific location with attributes like width, height, pressure, tangential pressure, tilt X, tilt Y and twist, and then performs a pen down action. It requires a WebDriver instance and a target IWebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.zh-cn.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nActions performPen = new Actions(driver);\nIWebElement canvas = driver.FindElement(By.Id(\"example\"));\n\nvar pen = new PointerInput(PointerKind.Pen, \"pen1\");\nvar origin = Origin.FromElement(canvas);\n\nperformPen.MoveToElement(canvas)\n    .MoveToLocation(pen.CreatePointerMove(origin, 0, 0, 5, 5, 0.5f, 0.5f, 10, -10, 0))\n    .PointerDown(PointerButton.Touch)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element with Selenium (Java)\nDESCRIPTION: This code snippet demonstrates how to scroll until the target element is visible in the viewport using Selenium's Actions API. The target element is passed as an argument to the `scrollToElement` method. This ensures the element is in view before further actions are performed. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"id-of-element\"));\nnew Actions(driver)\n  .scrollToElement(element)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Navigate Back with Selenium (CSharp)\nDESCRIPTION: This snippet demonstrates how to navigate back in the browser's history using Selenium WebDriver in C#. It uses the `Navigate().Back()` method. The code assumes that the WebDriver instance has already been created and there is a browser history to navigate back to.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.en.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().Back();\n```\n\n----------------------------------------\n\nTITLE: Introducing PHP WebDriver Bindings\nDESCRIPTION: This snippet is about introducing PHP WebDriver bindings. It's inferred from the context that the author is about to work on a larger fork of the Facebook bindings, likely related to the mentioned Requests for PHP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/a-smattering-of-selenium-80.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// Placeholder for PHP WebDriver bindings code\n?>\n```\n\n----------------------------------------\n\nTITLE: Java: WebDriver Initialization (Previously)\nDESCRIPTION: This Java code snippet shows the previous way of initializing a WebDriver before the integration of Selenium Manager.  It required specifying the path to the driver executable, which could lead to errors if the driver was not correctly set up or if the driver version was incompatible with the browser. The snippet depends on the `org.openqa.selenium.chrome.ChromeDriver` class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.en.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nSystem.setProperty(\"webdriver.chrome.driver\", \"/path/to/chromedriver\");\n        ChromeOptions options = new ChromeOptions();\n        options.addArguments(\"--remote-allow-origins=*\");\n        WebDriver driver = new ChromeDriver(options);\n        driver.get(\"https://www.selenium.dev/\");\n```\n\n----------------------------------------\n\nTITLE: Get Grid Status with cURL\nDESCRIPTION: This snippet retrieves the current status of the Selenium Grid, providing details about each registered Node, including availability, sessions, and slots. It uses a GET request to the `/status` endpoint.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncURL GET 'http://localhost:4444/status'\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element with Offset - Python\nDESCRIPTION: This Python code snippet demonstrates how to scroll from an element with an offset using Selenium's Actions API and Wheel class. It takes an element, x offset, y offset, delta x, and delta y values as input. It scrolls from the origin point calculated from the center of the specified element, offset by given x and y values. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.NAME, \"meal\")\nactions = ActionBuilder(driver)\nactions.scroll_from_origin(origin=element, x=25, y=25, delta_x=50, delta_y=100).perform()\n```\n\n----------------------------------------\n\nTITLE: NuGet Configuration for Selenium (C#)\nDESCRIPTION: Adds NuGet package sources to the 'nuget.config' file. This configuration ensures that NuGet can find and retrieve the Selenium.WebDriver package from the official NuGet feeds. It is crucial for resolving dependencies in .NET projects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.ja.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <packageSources>\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n    <add key=\"nuget.org\" value=\"https://www.nuget.org/api/v2/\" />   \n  </packageSources>\n...</configuration>\n```\n\n----------------------------------------\n\nTITLE: Importing Color Class\nDESCRIPTION: This snippet shows how to import the Color class in different programming languages to work with colors in Selenium WebDriver. The Color class allows you to create color objects and perform operations like comparing and converting colors.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.support.Color\n```\n\n----------------------------------------\n\nTITLE: Initializing Safari Driver with Options (JavaScript)\nDESCRIPTION: This JavaScript code initializes the Safari driver with specific capabilities.  It sets the 'browserName' and 'platformName' capabilities.  It requires the Selenium JavaScript bindings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.ja.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst safari = new SafariDriver({\n  capabilities: {\n    browserName: 'safari',\n    platformName: 'mac'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Transparent Color Object\nDESCRIPTION: This snippet shows how to create a Color object for transparent color in Java using the fromString method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nprivate final Color TRANSPARENT = Color.fromString(\"transparent\");\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - Python\nDESCRIPTION: Demonstrates how to retrieve the browser window's size in Python using Selenium WebDriver. The code retrieves the width and height individually using dictionary access, and also demonstrates storing the dimensions in a dictionary for later use. This provides two alternative ways to access window dimensions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n    # Access each dimension individually\nwidth = driver.get_window_size().get(\"width\")\nheight = driver.get_window_size().get(\"height\")\n\n    # Or store the dimensions and query them later\nsize = driver.get_window_size()\nwidth1 = size.get(\"width\")\nheight1 = size.get(\"height\")\n```\n\n----------------------------------------\n\nTITLE: Key Up Action in Selenium (Kotlin)\nDESCRIPTION: This Kotlin code snippet demonstrates performing a key up action using Selenium's Actions API. An Actions object is created, a keyDown action is performed on the Shift key, then the 'a' key is sent, followed by a keyUp action on the Shift key and sending the 'a' key again. Finally, perform() is called to execute these actions, resulting in \"Aa\".\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval actions = Actions(driver)\nactions.keyDown(Keys.SHIFT)\n    .sendKeys(\"a\")\n    .keyUp(Keys.SHIFT)\n    .sendKeys(\"a\")\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: List Downloaded Files using cURL\nDESCRIPTION: Uses `curl` to send a GET request to the Selenium Grid endpoint for listing downloaded files for a specific session. Requires `curl` to be installed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.zh-cn.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:4444/session/90c0149a-2e75-424d-857a-e78734943d4c/se/files\"\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Port in CSharp\nDESCRIPTION: Illustrates how to set the driver port in C#. This allows specifying a specific port for the driver to listen on.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.en.md#_snippet_10\n\nLANGUAGE: CSharp\nCODE:\n```\nvar service = ChromeDriverService.CreateDefaultService();\nservice.Port = 1234;\n```\n\n----------------------------------------\n\nTITLE: List Selenium Grid Commands\nDESCRIPTION: This command lists all available commands and their descriptions for the Selenium Grid. It uses the '--config-help' flag to display the available commands and their usage.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.zh-cn.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar --config-help\n```\n\n----------------------------------------\n\nTITLE: Creating Code Tabs with Selenium WebDriver in Python\nDESCRIPTION: This Python code snippet demonstrates how to initialize a Selenium WebDriver instance for Chrome.  It showcases the basic syntax for creating a Chrome driver object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.ja.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Chrome()\n```\n\n----------------------------------------\n\nTITLE: Installing libdbus-glib-1-2 on Linux\nDESCRIPTION: This command installs the `libdbus-glib-1-2` library on Linux systems using apt-get, which is required for running Firefox in some cases.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.zh-cn.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libdbus-glib-1-2\n```\n\n----------------------------------------\n\nTITLE: Chaining Relative Locators (Python)\nDESCRIPTION: This snippet demonstrates how to chain relative locators to locate a button element that is below the element with the ID 'email' and to the right of the element with the ID 'cancel' using Selenium's relative locator in Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_63\n\nLANGUAGE: Python\nCODE:\n```\nsubmit_locator = locate_with(By.TAG_NAME, \"button\").below({By.ID: \"email\"}).to_right_of({By.ID: \"cancel\"})\n```\n\n----------------------------------------\n\nTITLE: Using a Pen with Selenium (Python)\nDESCRIPTION: This Python code snippet demonstrates how to create and use a Pen input source in Selenium to interact with a web page.  It creates a pen device and moves it to a specific element, then performs a pen down and pen up action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.ja.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npen = Pen(\"pen1\")\nelement = driver.find_element(By.ID, \"example\")\n\nActionBuilder(driver)\\\n    .move_to_element(element)\\\n    .tick(pen.create_pointer_move(duration=1, x=0, y=0, origin=element))\\\n    .tick(pen.create_pointer_down(button=MouseButton.LEFT))\\\n    .tick(pen.create_pointer_up(button=MouseButton.LEFT))\\\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Release All Actions - Java\nDESCRIPTION: This Java snippet releases all currently depressed keys and pointer buttons in Selenium.  It calls the releaseAll() method on the Actions object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.ja.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nnew Actions(driver).releaseAll();\n```\n\n----------------------------------------\n\nTITLE: Network Conditions - Python\nDESCRIPTION: This snippet demonstrates how to simulate various network conditions using Python for local webdrivers.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_54\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Chrome()\ndev_tools = driver.devtools\ndev_tools.network.enable()\ndev_tools.network.emulate_network_conditions(\n    offline=False,\n    latency=50,\n    download_throughput=2000,\n    upload_throughput=2000,\n    connection_type=ConnectionType.CELLULAR3G\n)\n```\n\n----------------------------------------\n\nTITLE: Navigate to a URL with readiness state in JavaScript\nDESCRIPTION: This snippet shows how to navigate to a URL with a specified readiness state using WebDriver BiDi in JavaScript. It uses the `BrowsingContext` object to navigate to the URL, specifying the readiness state.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait browsingContext.navigate(url, 'complete');\n```\n\n----------------------------------------\n\nTITLE: Going Forward in Browser History (Kotlin)\nDESCRIPTION: Demonstrates how to navigate forward in the browser history using Selenium WebDriver in Kotlin. The driver.navigate().forward() method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\ndriver.navigate().forward()\n```\n\n----------------------------------------\n\nTITLE: Auth Required Event in Java\nDESCRIPTION: This Java code snippet sets up a listener for the `authRequired` network event using Selenium BiDi.  It is used to handle authentication challenges.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\ndevTools.addListener(Network.authRequired, req -> {\n});\n```\n\n----------------------------------------\n\nTITLE: Setting browserName with ChromeOptions in Python\nDESCRIPTION: This snippet demonstrates how to set the browserName capability using ChromeOptions in Python for Selenium 4. This is required for remote driver sessions to determine the browser to be used. It showcases creating ChromeOptions and setting the browser name, which isn't explicitly needed when using ChromeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\noptions = Options()\noptions.browser_name = 'chrome'\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies in JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve all cookies from the current browser context using Selenium WebDriver in JavaScript. It navigates to a website, adds two cookies, and then retrieves all available cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.get('https://www.example.com/');\nawait driver.manage().addCookie({name: 'test1', value: 'cookie1'});\nawait driver.manage().addCookie({name: 'test2', value: 'cookie2'});\nconst cookies = await driver.manage().getCookies();\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions to Edge Options - Java\nDESCRIPTION: Shows how to add extensions to Edge options using Java.\nThis allows loading extensions when the Edge browser is launched.\nDependencies: Selenium WebDriver, EdgeDriver, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\noptions.addExtensions(new File(\"/path/to/extension.crx\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Code Tabs with Selenium WebDriver in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to initialize a Selenium WebDriver instance for Chrome. It uses the `Builder` class to configure and build the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.ja.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates adding pointer event attributes (width, height, pressure, tiltX, tiltY) to a Pen action in Selenium for simulating pen interactions. It requires Selenium 4.2 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.en.md#_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element = driver.findElement(By.id(\"writable\"))\n\nval pen = Pen(driver, \"pen1\").apply {\n    width = 20\n    height = 30\n    pressure = 0.8f\n    tiltX = 45\n    tiltY = -60\n}\n\nActions(driver)\n    .moveToElement(element, 10, 10)\n    .pointerDown(pen)\n    .moveToElement(element, 80, 40)\n    .pointerMove(pen)\n    .pointerUp(pen)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Evaluate Script in Browsing Context - JavaScript\nDESCRIPTION: This snippet shows how to evaluate a script within a browsing context using JavaScript and the WebDriver BiDi API.  It utilizes the `script.evaluate` method to execute a JavaScript expression in a browsing context. It requires a BiDi connection and a valid browsing context ID.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('evaluate script in browsing context', async () => {\n  let result = await connection.script.evaluate({\n    expression: '1+1',\n    target: { context: contextId },\n  });\n  expect(result.result.value).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting strictFileInteractability in Java\nDESCRIPTION: This Java code demonstrates setting the `strictFileInteractability` capability. This controls whether strict interaction checks should be applied to file input elements. By default, it's off.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_46\n\nLANGUAGE: Java\nCODE:\n```\noptions.setCapability(\"strictFileInteractability\", true);\n```\n\n----------------------------------------\n\nTITLE: Setting fileUploadDialogTimeout for Internet Explorer\nDESCRIPTION: This code snippet shows how to set the `fileUploadDialogTimeout` capability for Internet Explorer using Selenium.  It configures the driver to wait for up to 2 seconds for the file upload dialog to appear. It uses InternetExplorerOptions in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\noptions = webdriver.IeOptions()\noptions.file_upload_dialog_timeout = timedelta(seconds=2)\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's Select class, specifically by its index (position) within the list of options. The `select_by(:index, 'index')` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_33\n\nLANGUAGE: Ruby\nCODE:\n```\nselect.select_by(:index, 2)\n```\n\n----------------------------------------\n\nTITLE: Setting Background Printing in Selenium Python\nDESCRIPTION: This Python code snippet demonstrates how to enable background printing using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.background = True\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Python\nDESCRIPTION: Demonstrates how to initialize a Select object in Python using a WebElement representing the select element.  Requires the selenium.webdriver.support.ui.Select dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nselect_element = driver.find_element(By.NAME, \"selectomatic\")\nselect = Select(select_element)\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in CSharp\nDESCRIPTION: Demonstrates how to handle disabled options in a Select element in C#. It attempts to select a disabled option and expects an exception to be thrown.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nAssert.Throws<InvalidElementStateException>(() => select.SelectByValue(\"disabled\"));\n```\n\n----------------------------------------\n\nTITLE: Adding Credential in Java\nDESCRIPTION: This code snippet shows how to add a credential to the virtual authenticator in Java using Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nbyte[] bytes = new byte[16];\nnew Random().nextBytes(bytes);\nCredential cred = new Credential()\n    .setId(bytes)\n    .setAlgorithm(Algorithm.ES256)\n    .setUserHandle(bytes)\n    .setResidentKey(true);\nauthenticator.addCredential(cred);\n```\n\n----------------------------------------\n\nTITLE: Custom Capabilities Configuration TOML\nDESCRIPTION: Configures a node with a custom capability using `stereotype` to match a specific node with specified properties like `networkname:applicationName` and `nodename:applicationName`. These capabilities need to be present in both Node configuration and session requests for the node to be matched.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.zh-cn.md#_snippet_7\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\ndetect-drivers = false\n\n[[node.driver-configuration]]\ndisplay-name = \"firefox\"\nstereotype = '{\"browserName\": \"firefox\", \"platformName\": \"macOS\", \"browserVersion\":\"96\", \"networkname:applicationName\":\"node_1\", \"nodename:applicationName\":\"app_1\" }'\nmax-sessions = 5\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver with Default Service - Ruby\nDESCRIPTION: This snippet shows how to initialize a WebDriver instance using the default service in Ruby. The driver.quit ensures that the browser window closes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.ja.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :chrome\ndriver.quit\n```\n\n----------------------------------------\n\nTITLE: Removing All Credentials in Java\nDESCRIPTION: This Java code demonstrates how to remove all credentials from the virtual authenticator. It iterates through the list of credentials and removes them one by one using their credential IDs.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nList<CredentialMetadata> credentials = devTools.getDomains().security().getCredentials();\n\nfor (CredentialMetadata credential : credentials) {\n    devTools.getDomains().security().removeCredential(credential.credentialId());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Python\nDESCRIPTION: This Python snippet shows how to set up the HTTP client within Selenium. This allows for customization of the underlying HTTP connection settings. The exact code is retrieved from an external file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/http_client.ja.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{{< gh-codeblock path=\"examples/python/tests/drivers/test_http_client.py\" >}}\n```\n\n----------------------------------------\n\nTITLE: Fetch Element Attribute Selenium Ruby\nDESCRIPTION: This Ruby code snippet navigates to a webpage, locates an email input element, and asserts that the 'value' attribute of the element is an empty string using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_45\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.get 'https://www.selenium.dev/selenium/web/inputs.html'\nemail_input = driver.find_element(name: 'email_input')\nexpect(email_input.attribute('value')).to eq('')\n```\n\n----------------------------------------\n\nTITLE: Going Back in Browser History (CSharp)\nDESCRIPTION: Demonstrates how to navigate back in the browser history using Selenium WebDriver in C#. The driver.Navigate().Back() method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Navigate().Back();\n```\n\n----------------------------------------\n\nTITLE: Adding Pause in Actions - CSharp\nDESCRIPTION: This CSharp snippet shows how to introduce a pause between actions using `Pause` with a `TimeSpan`. It creates an `Actions` instance and adds a pause of 100 milliseconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nnew Actions(driver)\n    .Pause(TimeSpan.FromMilliseconds(100))\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Setting W3C Capabilities (After) - JavaScript\nDESCRIPTION: This snippet shows how to set capabilities in Selenium 4 for JavaScript using browserName, browserVersion, platformName, and 'cloud:options' for W3C compliance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ncapabilities = {\n  browserName: 'firefox',\n  browserVersion: '92',\n  platformName: 'Windows 10',\n  'cloud:options': {\n     build: myTestBuild,\n     name: myTestName,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Element Color - Selenium WebDriver\nDESCRIPTION: This snippet retrieves the 'color' and 'background-color' CSS properties of an element with the ID 'login' using Selenium WebDriver in Java, and converts them to Color objects. This demonstrates how to get the color of an element as a Color object for further analysis or comparison.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nColor loginButtonColour = Color.fromString(driver.findElement(By.id(\"login\")).getCssValue(\"color\"));\n\nColor loginButtonBackgroundColour = Color.fromString(driver.findElement(By.id(\"login\")).getCssValue(\"background-color\"));\n```\n\n----------------------------------------\n\nTITLE: Before Request Sent Event - Selenium BiDi - Java\nDESCRIPTION: This Java snippet sets up a listener for the 'Before Request Sent' network event using Selenium's BiDi API. It allows intercepting and examining requests before they are sent. Requires Selenium 4.15 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nNetwork network = driver.getDevTools().getDomains().network();\nnetwork.onBeforeRequestSent(event -> {\n  String url = event.getRequest().getUrl();\n  System.out.println(\"Request sent to \" + url);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Safari Technology Preview (Java)\nDESCRIPTION: This Java code specifies the Safari Technology Preview browser when creating the Safari options.  It uses the `setTechnologyPreview` method of `SafariOptions`. Requires Selenium Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.ja.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nSafariOptions options = new SafariOptions();\noptions.setTechnologyPreview(true);\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Firefox Options\nDESCRIPTION: This code snippet demonstrates how to add command-line arguments to Firefox options.  It's useful for configuring the browser's behavior, such as running in headless mode. The `addArguments` method is used to append arguments to the options object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\noptions.addArguments(\"-headless\");\n```\n\n----------------------------------------\n\nTITLE: Open a window with a reference browsing context in JavaScript\nDESCRIPTION: This snippet demonstrates opening a new window with a reference browsing context using WebDriver BiDi in JavaScript. It utilizes an existing browsing context to create a new one. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = await browsingContext.create({\n  referenceContext: driver.getWindowHandle()\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Temporary Credential in Java\nDESCRIPTION: This snippet shows how to create a temporary credential using the virtual authenticator in Java. It calls addCredential with the parameters for creating a non-resident credential.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_16\n\nLANGUAGE: java\nCODE:\n```\ndevTools.getDomains().security().addCredential(new Credential(\"\", \"\", PublicKeyCredentialType.PUBLIC_KEY));\n```\n\n----------------------------------------\n\nTITLE: Setting Lax Cookie in Java with Selenium\nDESCRIPTION: This Java code snippet demonstrates how to create and add a cookie with the SameSite attribute set to Lax using Selenium. It utilizes the `Cookie` class to set the cookie properties and adds it to the browser's cookie manager.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\ndriver.get(\"https://www.selenium.dev/selenium/web/blank.html\");\nCookie cookie = new Cookie.Builder(\"foo\", \"bar\")\n  .sameSite(\"Lax\")\n  .domain(\"selenium.dev\")\n  .path(\"/\")\n  .build();\ndriver.manage().addCookie(cookie);\n\nCookie retrievedCookie = driver.manage().getCookieNamed(\"foo\");\nassertThat(retrievedCookie.getValue()).isEqualTo(\"bar\");\nassertThat(retrievedCookie.getSameSite()).isEqualTo(\"Lax\");\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Viewport Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse cursor to a specific offset from the top-left corner of the current viewport using Selenium WebDriver. The action is performed using the `moveByOffset` method of the Actions class, and it's available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.actions().move({x: 15, y: 20}).perform();\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - Selenium WebDriver - Kotlin\nDESCRIPTION: This snippet retrieves the x and y coordinates of the browser window's top-left corner using Selenium WebDriver in Kotlin. It shows how to access the coordinates directly and how to store the position in a `Point` object. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_28\n\nLANGUAGE: Kotlin\nCODE:\n```\n// 分别获取每个尺寸\nval x = driver.manage().window().position.x\nval y = driver.manage().window().position.y\n\n// 或者存储尺寸并在以后查询它们\nval position = driver.manage().window().position\nval x1 = position.x\ny1 = position.y\n```\n\n----------------------------------------\n\nTITLE: Setting Silent Capability in Internet Explorer - Java\nDESCRIPTION: This snippet demonstrates how to set the 'silent' capability to true for Internet Explorer using Java. This capability suppresses diagnostic output from IEDriverServer. The code creates InternetExplorerOptions, sets the capability, and then initializes the WebDriver with these options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.setCapability(\"silent\", true);\nWebDriver driver = new InternetExplorerDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Setting Command Line Arguments in C#\nDESCRIPTION: This C# code shows how to set command line arguments for Internet Explorer. It enables `ForceCreateProcessApi` and sets the `BrowserCommandLineArguments` property to `-k` for kiosk mode, before creating the InternetExplorerDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_21\n\nLANGUAGE: CSharp\nCODE:\n```\nusing System;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.IE;\n\nnamespace ieTest {\n class Program {\n  static void Main(string[] args) {\n   InternetExplorerOptions options = new InternetExplorerOptions();\n   options.ForceCreateProcessApi = true;\n   options.BrowserCommandLineArguments = \"-k\";\n   IWebDriver driver = new InternetExplorerDriver(options);\n   driver.Url = \"https://google.com/ncr\";\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Element Tag Name with Selenium\nDESCRIPTION: This snippet demonstrates how to retrieve the tag name of an HTML element using Selenium WebDriver. The `tag_name` method is called on the identified element. This returns the HTML tag (e.g., 'input', 'div', 'a').  Dependencies include an initialized WebDriver instance, a loaded webpage, and a found element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\ntag_name = search_box.tag_name\n```\n\n----------------------------------------\n\nTITLE: Setting ChromeOptions Headless After - Java\nDESCRIPTION: This Java snippet shows how to set headless mode using the `--headless=new` argument in Selenium's ChromeOptions. It initializes ChromeOptions, adds the argument for headless mode, creates a ChromeDriver instance with the options, navigates to selenium.dev, and closes the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/headless-is-going-away.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.addArguments(\"--headless=new\");\nWebDriver driver = new ChromeDriver(options);\ndriver.get(\"https://selenium.dev\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Find Element by Name - Kotlin\nDESCRIPTION: This snippet shows how to locate a web element using its name attribute in Kotlin. It initializes a ChromeDriver and uses the `findElement` method with `By.name` to find the element with the name 'newsletter'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.name(\"newsletter\"))\n```\n\n----------------------------------------\n\nTITLE: Create Unicorn and Submit Form (Java)\nDESCRIPTION: This snippet demonstrates creating a Unicorn object with specific attributes and submitting the form using the addUnicornPage object. It shows how the Unicorn object is passed to the createUnicorn() method to fill out the form and click submit. It assumes Unicorn, UnicornColors, UnicornAccessories, UnicornAdornments, AddUnicornPage, AccountPage, and UnicornConfirmationPage are defined elsewhere.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n// The Unicorn is a top-level Object--it has attributes, which are set here.\n// This only stores the values; it does not fill out any web forms or interact\n// with the browser in any way.\nUnicorn sparkles = new Unicorn(\"Sparkles\", UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS);\n\n// Since we are already \"on\" the account page, we have to use it to get to the\n// actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n// takes us there.\nAddUnicornPage addUnicornPage = accountPage.AddUnicorn();\n\n// Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n// its createUnicorn() method. This method will take Sparkles' attributes,\n// fill out the form, and click submit.\nUnicornConfirmationPage unicornConfirmationPage = addUnicornPage.createUnicorn(sparkles);\n```\n\n----------------------------------------\n\nTITLE: Going Forward in Browser History (Java)\nDESCRIPTION: Demonstrates how to navigate forward in the browser history using Selenium WebDriver in Java.  The driver.navigate().forward() method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\ndriver.navigate().forward();\n```\n\n----------------------------------------\n\nTITLE: IE Command Line Options - JavaScript\nDESCRIPTION: This snippet shows how to use command-line switches and force the CreateProcess API in JavaScript for Internet Explorer. It adds switches for kiosk mode ('-k') and private browsing ('-private').  The CreateProcess API must be forced to enable the command line arguments.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ie = require('selenium-webdriver/ie');\nlet options = new ie.Options();\noptions.addBrowserCommandSwitches('-k');\noptions.addBrowserCommandSwitches('-private');\noptions.forceCreateProcessApi(true);\n\ndriver = await env.builder()\n          .setIeOptions(options)\n          .build();\n```\n\n----------------------------------------\n\nTITLE: Enable Managed Downloads TOML\nDESCRIPTION: Enables managed downloads on the Selenium Grid node. When enabled, the node automatically saves all downloaded files for a session into a temporary directory that can later be retrieved.  Use this configuration option within the `[node]` section.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.zh-cn.md#_snippet_9\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\nenable-managed-downloads = true\n```\n\n----------------------------------------\n\nTITLE: GraphQL: Querying Session Information for a Specific Session (curl)\nDESCRIPTION: This curl command retrieves detailed session information for a specific session ID. Replace `<session-id>` with the actual session ID. The command requires the `curl` utility and access to the Selenium Grid's GraphQL endpoint.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.ja.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ session (id: \\\"<session-id>\\\") { id, capabilities, startTime, uri, nodeId, nodeUri, sessionDurationMillis, slot { id, stereotype, lastStarted } } } \"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Getting All Options from Select Element\nDESCRIPTION: This code retrieves all options from a <select> element using Selenium's SelectElement class. The `Options` property returns a list of IWebElements representing each option within the select list.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\nIList<IWebElement> options = select.Options;\n```\n\n----------------------------------------\n\nTITLE: Java Selenium Manager Usage (Previously)\nDESCRIPTION: This Java code snippet illustrates the traditional way of setting up ChromeDriver without using Selenium Manager.  It involves manually specifying the path to the ChromeDriver executable. This approach requires manual driver management.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.ja.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nSystem.setProperty(\"webdriver.chrome.driver\", \"/path/to/chromedriver\");\nChromeOptions options = new ChromeOptions();\nWebDriver driver = new ChromeDriver(options);\ndriver.get(\"https://www.selenium.dev/\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Initializing Safari Driver with Options (CSharp)\nDESCRIPTION: This code snippet initializes the Safari Driver in CSharp using SafariOptions. This enables the configuration of Safari-specific settings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.zh-cn.md#_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\nvar options = new SafariOptions();\nvar driver = new SafariDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Deleting Named Cookie in Ruby\nDESCRIPTION: This code snippet demonstrates how to delete a cookie by its name using Selenium WebDriver in Ruby.  It navigates to a website, adds two cookies, and then deletes a cookie with the name 'test1'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  driver.manage.add_cookie(name: \"test1\", value: \"cookie1\")\n  driver.manage.add_cookie(name: \"test2\", value: \"cookie2\")\n\n  # delete a cookie with name 'test1'\n  driver.manage.delete_cookie('test1')\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Get Window Size: Selenium WebDriver (Ruby)\nDESCRIPTION: This Ruby snippet demonstrates how to fetch the size of the browser window in pixels using Selenium WebDriver. It shows accessing each dimension individually and storing the dimensions for later use.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\n    # Access each dimension individually\nwidth = driver.manage.window.size.width\nheight = driver.manage.window.size.height\n\n    # Or store the dimensions and query them later\nsize = driver.manage.window.size\nwidth1 = size.width\nheight1 = size.height\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait\nDESCRIPTION: This snippet demonstrates how to set an implicit wait in Selenium.  The `implicitlyWait` (Java/Kotlin/JavaScript) or `implicitly_wait` (Python/Ruby) or `Manage().Timeouts().ImplicitWait` (C#) method sets the amount of time the driver should wait when searching for an element if it is not immediately present.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Standalone Chromium\nDESCRIPTION: This command runs a Selenium Standalone Chromium container with port mappings for accessing the Selenium Grid, VNC, and noVNC. It also sets the shared memory size to 2GB, which is crucial for browser performance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2024/multi-arch-images-via-docker-selenium.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -it -p 4444:4444 -p 5900:5900 -p 7900:7900 --shm-size 2g selenium/standalone-chromium:latest\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies in Ruby\nDESCRIPTION: This code snippet demonstrates how to delete all cookies from the current browser context using Selenium WebDriver in Ruby.  It navigates to a website, adds two cookies, and then deletes all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  driver.manage.add_cookie(name: \"test1\", value: \"cookie1\")\n  driver.manage.add_cookie(name: \"test2\", value: \"cookie2\")\n\n  # deletes all cookies\n  driver.manage.delete_all_cookies\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Shadow DOM Elements - Ruby\nDESCRIPTION: This snippet shows how to access elements within a Shadow DOM in Ruby using Selenium. It first locates the shadow host element, then accesses its shadow root using the `shadow_root` property, and finally finds the desired element within the shadow root.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\nshadow_host = @driver.find_element(css: '#shadow_host')\nshadow_root = shadow_host.shadow_root\nshadow_content = shadow_root.find_element(css: '#shadow_content')\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox WebDriver in Java\nDESCRIPTION: This code snippet demonstrates how to initialize a Firefox WebDriver instance in Java. It creates a new instance of FirefoxDriver, which will start a new Firefox browser session with a clean user profile, by default. No specific profile is set, allowing GeckoDriver to use the default clean state.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/fresh_browser_per_test.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nWebDriver driver = new FirefoxDriver();\n```\n\n----------------------------------------\n\nTITLE: Dom Content Loaded Event in Java\nDESCRIPTION: This code snippet demonstrates how to listen for the 'browsingContext.domContentLoaded' event using Selenium WebDriver's BiDi API in Java. It subscribes to the event and prints the context ID and URL when the DOM content is loaded. Requires Selenium version 4.10 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_46\n\nLANGUAGE: Java\nCODE:\n```\nWebDriverBiDi bidi = (WebDriverBiDi) driver;\n    BiDiSubscription<BrowsingContextModule.DomContentLoadedEvent> subscription =\n        new BiDiSubscription<>(BrowsingContextModule.EVENT_DOM_CONTENT_LOADED,\n            e -> System.out.println(\"Context \" + e.getContext().getId() +\n                \" loaded \" + e.getUrl()));\n    bidi.subscribe(subscription);\n\n    driver.get(\"https://www.google.com\");\n\n    bidi.unsubscribe(subscription);\n```\n\n----------------------------------------\n\nTITLE: Zsh Completion for Selenium\nDESCRIPTION: This command enables tab completion for Selenium sub-commands and flags in the Zsh shell. By sourcing the output of `selenium completion zsh`, users can easily discover available options and their usage, simplifying command-line interaction with the Selenium server.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2021/a-tour-of-4-new-commands.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsource <(selenium completion zsh)\n```\n\n----------------------------------------\n\nTITLE: Setting Window Rectangle with Ruby\nDESCRIPTION: This code snippet demonstrates how to set the window rectangle (position and size) in Ruby using Selenium WebDriver's Options class. The `manage.window.resize_to` and `manage.window.move_to` methods are used to adjust the window's dimensions and location. This allows precise control over the browser window's display.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.manage.window.resize_to(640, 480)\n```\n\n----------------------------------------\n\nTITLE: Setting Log Output to Console (STDOUT) - Ruby\nDESCRIPTION: Demonstrates how to set the log output to the console (STDOUT) in Ruby using EdgeDriverService.\nThis enables viewing the Edge driver logs directly in the console during test execution.\nDependencies: Selenium WebDriver, EdgeDriverService, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_32\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.edge(log_output: $stdout)\ndriver = Selenium::WebDriver.for :edge, service: service, options: options\n```\n\n----------------------------------------\n\nTITLE: Setting IE Driver Supporting Files Path - Java\nDESCRIPTION: This Java snippet demonstrates how to set the path to the supporting files directory for the InternetExplorerDriver. It utilizes InternetExplorerOptions to specify the location where the necessary driver executables are located. The path can also be configured using a System Property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_36\n\nLANGUAGE: Java\nCODE:\n```\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.setExtractPath(\"/path/to/directory\");\n```\n\n----------------------------------------\n\nTITLE: Get Node Status\nDESCRIPTION: Performs a health check on a specific Selenium Grid node, providing information on its availability, sessions, and slots. This is used by the distributor to update the Grid model. Requires node URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://localhost:5555/status'\n```\n\n----------------------------------------\n\nTITLE: Set Logger Level in JavaScript\nDESCRIPTION: This snippet shows how to change the level of the logger in JavaScript using the `selenium-webdriver` library's `logging` module. This allows you to control the verbosity of log messages. The default is `OFF`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.setLevel(logging.Level.INFO)\n```\n\n----------------------------------------\n\nTITLE: Building Selenium Manager\nDESCRIPTION: This command builds the Selenium Manager binary using Cargo, the Rust package manager. The `--release` flag creates an optimized build suitable for distribution.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.ja.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to None in CSharp\nDESCRIPTION: This snippet shows how to set the page load strategy to 'none' in C# using Selenium. WebDriver waits until the initial page is downloaded.\nDependencies: Selenium WebDriver and Chrome driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace pageLoadStrategy {\n  class pageLoadStrategy {\n    public static void Main(string[] args) {\n      var chromeOptions = new ChromeOptions();\n      chromeOptions.PageLoadStrategy = PageLoadStrategy.None;\n      IWebDriver driver = new ChromeDriver(chromeOptions);\n      try {\n        driver.Navigate().GoToUrl(\"https://example.com\");\n      } finally {\n        driver.Quit();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Take Element Screenshot in Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to capture a screenshot of a specific element on a webpage using Selenium WebDriver. It utilizes the `getScreenshotAs` method to obtain the screenshot as a file, which is then saved to the local file system. Dependencies: org.apache.commons.io.FileUtils, org.openqa.selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_58\n\nLANGUAGE: Java\nCODE:\n```\nimport org.apache.commons.io.FileUtils;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class SeleniumelementTakeScreenshot {\npublic static void main(String args[]) throws IOException {\n\tWebDriver driver = new ChromeDriver();\n\t\tdriver.get(\"https://www.example.com\");\n\t\tWebElement element = driver.findElement(By.cssSelector(\"h1\"));\n\t\tFile scrFile = element.getScreenshotAs(OutputType.FILE);\n\t\tFileUtils.copyFile(scrFile, new File(\"./image.png\"));\n\t\tdriver.quit();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Background Printing in Selenium Java\nDESCRIPTION: This Java code snippet demonstrates how to enable background printing using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setBackground(true);\n\nassertThat(printOptions.getBackground()).isTrue();\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency Specification Java\nDESCRIPTION: This snippet demonstrates how to add the Selenium dependency to the `build.gradle` file when using Gradle for Java projects.  It uses `testImplementation` to add Selenium as a test dependency, and also includes the selenium version number.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.pt-br.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation(\n    'org.seleniumhq.selenium:selenium-java:4.18.1'\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Root Directory in Firefox with Selenium (Java)\nDESCRIPTION: This snippet demonstrates how to set a custom profile root directory for Firefox when using Selenium WebDriver in Java.  It specifies the directory where Firefox profiles will be created. This is achieved by setting the preference `GeckoDriverService.GECKO_DRIVER_PROFILE_ROOT`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_29\n\nLANGUAGE: java\nCODE:\n```\noptions.setPreference(\"GeckoDriverService.GECKO_DRIVER_PROFILE_ROOT\", \"/tmp/profiles\");\nWebDriver driver = new FirefoxDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Adding Java 11 HTTP Client Dependency to POM\nDESCRIPTION: This XML snippet demonstrates how to add the `selenium-http-jdk-client` dependency to a Maven project's `pom.xml` file, along with the core `selenium-java` dependency.  It is required to utilize the Java 11+ HTTP client in Selenium. Ensure the versions match the selenium-java dependency version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/using-java11-httpclient.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.seleniumhq.selenium</groupId>\n  <artifactId>selenium-java</artifactId>\n  <version>4.5.0</version>\n</dependency>\n<dependency>\n  <groupId>org.seleniumhq.selenium</groupId>\n  <artifactId>selenium-http-jdk-client</artifactId>\n  <version>4.5.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Installing Unsigned Add-ons in Firefox with Selenium (Python)\nDESCRIPTION: This Python snippet installs an unsigned Firefox add-on from a directory. The `install_addon` method is used with the `temporary=True` parameter to install the temporary addon.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\ndriver.install_addon(os.abspath(\"/path/to/unpacked/extension\"), temporary=True)\n```\n\n----------------------------------------\n\nTITLE: Filtering Logger Output - Ruby\nDESCRIPTION: Ruby's logger lets you control log messages based on their IDs, using `allow` or `ignore`.  It also allows turning on or off deprecation notices.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nallow(:browser_options)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nallow([:browser_options, :capabilities])\n```\n\n----------------------------------------\n\nTITLE: Executing a Single JavaScript Test\nDESCRIPTION: This command executes a specific JavaScript test file using Node.js.  It directly runs the specified script, in this case, 'example_script.spec.js', allowing you to test individual components or examples.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/javascript/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nnode example_script.spec.js\n```\n\n----------------------------------------\n\nTITLE: Python: WebDriver Initialization (Previously)\nDESCRIPTION: This Python code snippet shows the previous way of initializing a WebDriver using `webdriver_manager` before the direct integration of Selenium Manager. It required using the `webdriver_manager` package to download and manage the driver.  It depends on the `selenium` and `webdriver_manager` packages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.en.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\nfrom webdriver_manager.chrome import ChromeDriverManager\n\ndriver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\ndriver.get(\"https://www.selenium.dev/\")\n```\n\n----------------------------------------\n\nTITLE: Perform Actions in Browsing Context - Java\nDESCRIPTION: This Java snippet demonstrates how to perform a sequence of actions within a browsing context using WebDriver BiDi. It initializes a BiDi mapper and uses the input.performActions command to execute the specified actions. The actions are defined using the Actions API in Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/input.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n        BiDi mapper = new BiDi((HasDevTools) driver);\n        // Executes an action\n        mapper.performActions(List.of(getActionStructure(\"pointer\", \"pointerDown\", 0, 1, 1)));\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Named Cookie in Python\nDESCRIPTION: This code snippet demonstrates how to delete a cookie by its name using Selenium WebDriver in Python. It navigates to a website, adds two cookies, and then deletes a cookie with the name 'test1'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://www.example.com\")\ncookie1 = { 'name' : 'test1', 'value' : 'cookie1' }\ndriver.add_cookie(cookie1)\ncookie2 = { 'name' : 'test2', 'value' : 'cookie2' }\ndriver.add_cookie(cookie2)\n\n# delete a cookie with name 'test1'\ndriver.delete_cookie('test1')\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Get all session details\nDESCRIPTION: This command uses curl to execute a GraphQL query and retrieve the details of all sessions (`id`, `capabilities`, `startTime`, `uri`, `nodeId`, `nodeUri`, `sessionDurationMillis`) from the `sessionsInfo` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.zh-cn.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ sessionsInfo { sessions { id, capabilities, startTime, uri, nodeId, nodeId, sessionDurationMillis } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Manager for Chrome Beta\nDESCRIPTION: This command executes Selenium Manager to manage the ChromeDriver for the Chrome beta version. The `--browser-version beta` flag specifies the desired browser version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.zh-cn.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./selenium-manager --browser chrome --browser-version beta --debug\n```\n\n----------------------------------------\n\nTITLE: Configuring JdbcBackedSessionMap with TOML\nDESCRIPTION: This TOML configuration file configures the JdbcBackedSessionMap for Selenium Grid, specifying the JDBC URL, username, and password for connecting to a PostgreSQL database. The 'implementation' property defines the class responsible for storing sessions in the database.  It requires the postgresql JDBC driver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.en.md#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[sessions]\nimplementation = \"org.openqa.selenium.grid.sessionmap.jdbc.JdbcBackedSessionMap\"\njdbc-url = \"jdbc:postgresql://localhost:5432/selenium_sessions\"\njdbc-user = \"seluser\"\njdbc-password = \"seluser\"\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi with WebSocket URL in CSharp\nDESCRIPTION: This snippet shows how to enable BiDi in CSharp by setting the UseWebSocketUrl property to true. This property configures the driver to utilize a WebSocket connection for bidirectional communication. Requires Selenium WebDriver and browser-specific driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nUseWebSocketUrl = true,\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element By Amount - Selenium Wheel Ruby\nDESCRIPTION: This snippet demonstrates how to scroll from a specific element by a given amount using Selenium's Wheel actions in Ruby. The viewport will be scrolled so the bottom of the element is at the bottom of the screen, then the page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'target')\n@driver.action.scroll_from(element, 0, 100).perform\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions - Python\nDESCRIPTION: This Python snippet demonstrates how to release all currently depressed keys and pointer buttons using the `release_actions` method, ensuring a clean slate for future interactions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.en.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nActionChains(driver).release_actions()\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream Handler in Python\nDESCRIPTION: This snippet demonstrates how to create a stream handler in Python's logging module to display logs in the console.  The handler is added to the logger, allowing logs to be output to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhandler = logging.StreamHandler()\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Finding Elements by Tag Name in Python\nDESCRIPTION: This Python code snippet demonstrates finding all elements with a specific tag name on a web page. It uses Selenium WebDriver to navigate to a URL, finds all elements with the tag name 'p', and prints the text of each element. It depends on the Selenium library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Firefox()\n\n    # Navigate to Url\ndriver.get(\"https://www.example.com\")\n\n    # Get all the elements available with tag name 'p'\nelements = driver.find_elements(By.TAG_NAME, 'p')\n\nfor e in elements:\n    print(e.text)\n```\n\n----------------------------------------\n\nTITLE: Transforming Response - CSharp\nDESCRIPTION: Demonstrates how to transform a response using Selenium and CDP in C#. It intercepts requests, modifies the response body, and sends the updated content back to the browser using `Fetch.continueRequest`. It requires Selenium WebDriver with CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\nEventHandler<Fetch.RequestPausedEventArgs> requestPausedHandler = (sender, e) =>\n            {\n                string newBody = Convert.ToBase64String(Encoding.UTF8.GetBytes(\"Altered content\"));\n                Dictionary<string, object> requestParams = new Dictionary<string, object>()\n                    {\n                        { \"requestId\", e.RequestId },\n                        { \"body\", newBody }\n                    };\n                ((IHasCdp)driver).ExecuteCdpCommand(\"Fetch.continueRequest\", requestParams);\n            };\n            session.Fetch.RequestPaused += requestPausedHandler;\n```\n\n----------------------------------------\n\nTITLE: Getting Performance Metrics - Ruby\nDESCRIPTION: Demonstrates retrieving performance metrics using Selenium and CDP in Ruby.  It retrieves and prints the performance metrics for a given page. Requires Selenium WebDriver and CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\nmetrics = @driver.execute_cdp 'Performance.getMetrics'\nputs metrics\n```\n\n----------------------------------------\n\nTITLE: Get Element Attribute - Ruby\nDESCRIPTION: This snippet demonstrates how to get an attribute value of a web element using Selenium WebDriver in Ruby. It finds an element by name and uses the attribute method to retrieve the value of the 'value' attribute.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nemail_input = driver.find_element(name: 'email_input')\nexpect(email_input.attribute('value')).to eq ''\n```\n\n----------------------------------------\n\nTITLE: Verify Unicorn Existence (Java)\nDESCRIPTION: This snippet demonstrates verifying the existence of the created unicorn using the `exists()` method of the UnicornConfirmationPage. It asserts that the 'Sparkles' unicorn has been created with all attributes intact by comparing the provided `sparkles` object with the data on the confirmation page.  It requires JUnit's Assert library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\n// The exists() method from UnicornConfirmationPage will take the Sparkles \n// object--a specification of the attributes you want to see, and compare\n// them with the fields on the page.\nAssert.assertTrue(\"Sparkles should have been created, with all attributes intact\", unicornConfirmationPage.exists(sparkles));\n```\n\n----------------------------------------\n\nTITLE: Get Current URL - Python\nDESCRIPTION: This Python snippet retrieves the current URL of the web page using Selenium WebDriver. It assumes a WebDriver instance is already initialized.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.pt-br.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndriver.current_url\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium (C#)\nDESCRIPTION: This C# snippet uses Selenium's Actions API to send the keys \"Selenium!\" to the currently active element on the webpage. It creates an Actions object, uses the SendKeys method to input the string, and then calls Perform() to execute the action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nActions actions = new Actions(driver);\nactions.SendKeys(\"Selenium!\").Perform();\n```\n\n----------------------------------------\n\nTITLE: Adding a directory to PATH in Bash\nDESCRIPTION: This snippet adds a specified directory to the PATH environment variable in a Bash shell. It uses the `export` command to update the PATH variable, appends the new directory to the existing PATH, and saves the change to the `~/.bash_profile` file, ensuring persistence across sessions.  The `source` command then reloads the profile to apply the changes immediately.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.en.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho 'export PATH=$PATH:/path/to/driver' >> ~/.bash_profile\nsource ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Selenium Ruby Example\nDESCRIPTION: This Ruby code snippet illustrates a basic Selenium test. It shows how to start a WebDriver instance, load a webpage, interact with web elements, and check the result. Make sure the selenium-webdriver gem is installed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndriver = Selenium::WebDriver.for :chrome\ndriver.get 'https://www.selenium.dev/selenium/web/web-form.html'\n\ntext_box = driver.find_element(name: 'my-text')\nsubmit_button = driver.find_element(tag_name: 'button')\n\ntext_box.send_keys('Selenium')\nsubmit_button.click\n\nmessage = driver.find_element(id: 'message')\nvalue = message.text\nexpect(value).to eq('Received!')\n\ndriver.quit\n```\n\n----------------------------------------\n\nTITLE: Capturing Response Information using CDP in C#\nDESCRIPTION: This C# code snippet showcases how to capture response information using the Chrome DevTools Protocol (CDP) in Selenium. It enables network interception and sets up a listener for `Network.responseReceived` events to gather details about the responses. The code then navigates to a specific URL and retrieves the response information.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.ExecuteCdpCommand(\"Network.enable\", new Dictionary<string, object>());\ndriver.ExecuteCdpCommand(\"Network.responseReceived\", new Dictionary<string, object>()\n{\n    {\"url\", \"https://www.example.com\"}\n});\ndriver.Navigate().GoToUrl(\"https://www.example.com\");\n```\n\n----------------------------------------\n\nTITLE: Set Background Python\nDESCRIPTION: This code snippet demonstrates how to set whether to print background colors and images in Python with Selenium, using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.background = True\npdf = driver.print_page(print_options)\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait\nDESCRIPTION: This snippet demonstrates how to set an implicit wait in Selenium.  The `implicitlyWait` (Java/Kotlin/JavaScript) or `implicitly_wait` (Python/Ruby) or `Manage().Timeouts().ImplicitWait` (C#) method sets the amount of time the driver should wait when searching for an element if it is not immediately present.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\ndriver.implicitly_wait(10)\n```\n\n----------------------------------------\n\nTITLE: Double Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a double click action on an element using Selenium. It combines moving the mouse to the center of an element with pressing and releasing the left mouse button twice. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_33\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'my-element')\n@driver.action.double_click(element).perform\n```\n\n----------------------------------------\n\nTITLE: Enabling Log File Features in Chrome\nDESCRIPTION: This code snippet shows how to enable the features for appending logs and using readable timestamps when logging to a file in ChromeDriver. These features are only available when writing to a file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_40\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.chrome(append_log: true, readable_timestamp: true)\n```\n\n----------------------------------------\n\nTITLE: Delete Node\nDESCRIPTION: Removes a node from the Selenium Grid.  This does not stop any running sessions on the node; they will continue to execute.  The distributor will no longer forward new session requests to the node.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.ja.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://localhost:4444/se/grid/distributor/node/<node-id>' --header 'X-REGISTRATION-SECRET: <secret> '\n```\n\n----------------------------------------\n\nTITLE: Setting Shrink To Fit in Selenium Python\nDESCRIPTION: This Python code snippet demonstrates how to enable shrink-to-fit using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.shrink_to_fit = True\n```\n\n----------------------------------------\n\nTITLE: Going Back in Browser History (JavaScript)\nDESCRIPTION: Demonstrates how to navigate back in the browser history using Selenium WebDriver in JavaScript. The `back` method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.back()\n```\n\n----------------------------------------\n\nTITLE: Customizing Waits (Ruby)\nDESCRIPTION: This Ruby code demonstrates customizing explicit waits by setting a timeout and ignoring exceptions. It creates a `Selenium::WebDriver::Wait` instance with a timeout of 10 seconds and ignores `Selenium::WebDriver::Error::NoSuchElementError` exceptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.ja.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\nwait = Selenium::WebDriver::Wait.new(:timeout => 10, :ignore => Selenium::WebDriver::Error::NoSuchElementError)\nelement = wait.until { driver.find_element(:id => \"myDynamicElement\") }\n```\n\n----------------------------------------\n\nTITLE: JavaScript Selenium WebDriver Package.json Configuration\nDESCRIPTION: Configures the package.json file to include selenium-webdriver as a dependency with version '^4.4.0'. This ensures that the specified version of Selenium WebDriver is installed for the JavaScript project.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"selenium-tests\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"selenium-webdriver\": \"^4.4.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting IE Driver Supporting Files Path - Ruby\nDESCRIPTION: This Ruby snippet shows how to specify the extract path for the Internet Explorer driver service.  It uses the `extract_path` option to define the directory where the driver's support files are located.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_39\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.internet_explorer(extract_path: '/opt/selenium')\ndriver = Selenium::WebDriver.for :internet_explorer, service: service\n```\n\n----------------------------------------\n\nTITLE: Remove Preloaded Script - JavaScript\nDESCRIPTION: This snippet demonstrates how to remove a preloaded script using JavaScript and the WebDriver BiDi API. It uses the `script.removePreloadScript` method to remove a preloaded script, identified by its ID. The ID of the preloaded script is required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('remove a preloaded script', async () => {\n  await connection.script.removePreloadScript({ script: preloadScriptId });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies - Ruby\nDESCRIPTION: Demonstrates setting a cookie using Selenium and CDP in Ruby.  The code sets a cookie named 'foo' with the value 'bar' on localhost. It depends on Selenium WebDriver and CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_20\n\nLANGUAGE: Ruby\nCODE:\n```\n@driver.execute_cdp 'Network.setCookie', { 'name' => 'foo', 'value' => 'bar', 'domain' => 'localhost' }\n@driver.get 'http://localhost:8080/cookie'\nputs @driver.manage.cookie_named('foo')\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element by Amount - Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to scroll from an element by a given amount using Selenium's Actions API and Wheel class. It takes an element, delta x, and delta y values as input. If the element is out of the viewport, it will first be scrolled into view. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.name(\"food\"))\nActions(driver).scrollFromOrigin(WheelInput.ScrollOrigin.fromElement(element, 0, 0), 50, 100)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Fail Request - Java\nDESCRIPTION: This Java code snippet demonstrates how to fail a network request using Selenium BiDi. This is used to simulate a network failure.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\ndriver.getDevTools().createSession();\nNetwork network = new Network(driver.getDevTools());\nnetwork.addIntercept(\"*.example.com/*\", new AddInterceptParameters());\nnetwork.failRequest(FailParameters.of(ErrorCode.FAILED));\n```\n\n----------------------------------------\n\nTITLE: Getting Credentials in Java\nDESCRIPTION: This Java code snippet retrieves a list of credentials from the virtual authenticator. It iterates over the credentials and prints their properties, demonstrating how to access the credential data.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nList<CredentialMetadata> credentials = devTools.getDomains().security().getCredentials();\n\nfor (CredentialMetadata credential : credentials) {\n    System.out.println(\"Credential Id = \" + credential.credentialId());\n    System.out.println(\"User Id = \" + credential.userId());\n    System.out.println(\"Rp Id = \" + credential.rpId());\n}\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value in Ruby\nDESCRIPTION: This code snippet demonstrates how to retrieve the value of a CSS property of a web element using Selenium WebDriver in Ruby. It uses the `css_value` method of the WebElement class. The method takes the name of the CSS property as a parameter and returns its value as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_33\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'css value' do\n  expect(driver.find_element(id: 'namedColor').css_value('background-color')).to eq 'rgba(0, 0, 255, 1)'\nend\n```\n\n----------------------------------------\n\nTITLE: Finding an Element by ID using Selenium\nDESCRIPTION: This snippet shows how to find an HTML element on a webpage using its ID attribute. The `findElement` method (or equivalent) is used with the `By.id` locator strategy. Once found, the element can be interacted with.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.zh-cn.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nWebElement textBox = driver.findElement(By.id(\"my-text\"));\nWebElement submitButton = driver.findElement(By.tagName(\"button\"));\n```\n\nLANGUAGE: Python\nCODE:\n```\ntext_box = driver.find_element(By.ID, \"my-text\")\nsubmit_button = driver.find_element(By.TAG_NAME, \"button\")\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement textBox = driver.FindElement(By.Id(\"my-text\"));\nIWebElement submitButton = driver.FindElement(By.TagName(\"button\"));\n```\n\nLANGUAGE: Ruby\nCODE:\n```\ntext_box = driver.find_element(id: 'my-text')\nsubmit_button = driver.find_element(tag_name: 'button')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet textBox = await driver.findElement(By.id('my-text'));\nlet submitButton = await driver.findElement(By.tagName('button'));\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nval textBox = driver.findElement(By.id(\"my-text\"))\nval submitButton = driver.findElement(By.tagName(\"button\"))\n```\n\n----------------------------------------\n\nTITLE: Sending CDP Command - CSharp\nDESCRIPTION: This C# code snippet demonstrates sending a CDP command.  It leverages the `ExecuteCdpCommand` method on the `IWebDriver` instance, casting it to `IHasCdp` first. It requires an initialized WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/_index.pt-br.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nvar chromeDriver = (IHasCdp)driver;\n            var commandParams = new Dictionary<string, object>()\n            {\n                {\n                    \"url\", \"https://www.google.com\"\n                }\n            };\n            var result = chromeDriver.ExecuteCdpCommand(\"Page.navigate\", commandParams);\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Viewport in Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse pointer from the upper-left corner of the current viewport by a specified offset using Selenium WebDriver. It utilizes the `move_by` method to achieve this. No specific dependencies beyond the Selenium WebDriver library are needed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n@driver.action.move_by(30, 40).perform\n```\n\n----------------------------------------\n\nTITLE: Creating SeleniumServer Instance (Java)\nDESCRIPTION: This snippet indicates that after adding the `selenium-server` dependency, you can programmatically create and start a SeleniumServer instance within your Java code.  The details of the actual Java code are not provided in the source text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/how-to-use-selenium-2-with-maven.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nNow you can create a SeleniumServer instance yourself and start it.\n```\n\n----------------------------------------\n\nTITLE: Find Element within a Subset of DOM - JavaScript\nDESCRIPTION: This snippet first locates the element with the ID \"fruits\" and then finds the first element within it that has the class name \"tomatoes\". It demonstrates how to narrow the search scope using Selenium WebDriver with JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fruits = await driver.findElement(By.id('fruits'));\nconst fruit = fruits.findElement(By.className('tomatoes'));\n```\n\n----------------------------------------\n\nTITLE: Chaining Relative Locators - Java\nDESCRIPTION: Chains relative locators to locate a button element below the element with ID 'email' and to the right of the element with ID 'cancel'. This approach is used when an element's position is best described relative to multiple other elements. Uses `below` and `toRightOf` in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_62\n\nLANGUAGE: Java\nCODE:\n```\nBy submitLocator = RelativeLocator.with(By.tagName(\"button\")).below(By.id(\"email\")).toRightOf(By.id(\"cancel\"));\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions in Selenium (Python)\nDESCRIPTION: This code snippet shows how to release all currently pressed keys and pointer buttons using Python. It calls the `release_actions()` method on the WebDriver. This method does not use perform().\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.zh-cn.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndriver.release_actions()\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox Driver with Options - CSharp\nDESCRIPTION: Demonstrates how to initialize a Firefox WebDriver instance with basic options using C#. It requires the Selenium WebDriver dependency.  The `FirefoxOptions` class is used to configure Firefox-specific settings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nvar options = new FirefoxOptions();\nvar driver = new FirefoxDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Levels in C#\nDESCRIPTION: This snippet demonstrates how to set the logging level in C# using the OpenQA.Selenium.Internal.Logging namespace. The example sets the level to All, which ensures all messages are logged.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nLog.Level = LogLevel.All;\n```\n\n----------------------------------------\n\nTITLE: Scroll by Amount with Selenium (CSharp)\nDESCRIPTION: This C# code snippet demonstrates scrolling by a specific amount in x and y directions. It uses the `ScrollByAmount` method from the `Actions` class. Requires Selenium WebDriver and Actions class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\nnew Actions(driver)\n    .ScrollByAmount(100, 200)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level for EdgeDriver in Ruby\nDESCRIPTION: This snippet demonstrates how to set the log level for the EdgeDriver in Ruby using the `log_level` option. This controls the verbosity of the driver's output.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :edge, log_level: :debug\n```\n\n----------------------------------------\n\nTITLE: Initializing IE Driver with Edge Compatibility Mode (CSharp)\nDESCRIPTION: This code snippet demonstrates how to initialize the Internet Explorer Driver to run Microsoft Edge in IE Compatibility Mode using C#. It sets the `AttachToEdgeChrome` and `EdgeExecutablePath` properties.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nvar options = new InternetExplorerOptions();\noptions.AttachToEdgeChrome = true;\noptions.EdgeExecutablePath = Environment.GetEnvironmentVariable(\"EdgeDriver\");\nvar driver = new InternetExplorerDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Colors in Ruby\nDESCRIPTION: This code shows how to define Color objects from basic color names like 'black', 'chocolate', and 'hotpink' using the Color.from_string() method in Ruby. This is useful for comparing against predefined color values in web elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nBLACK = Color.from_string('black')\nCHOCOLATE = Color.from_string('chocolate')\nHOTPINK = Color.from_string('hotpink')\n```\n\n----------------------------------------\n\nTITLE: Initializing BiDi in .NET\nDESCRIPTION: This code snippet shows how to initialize the BiDi (Bidirectional WebDriver Protocol) API in .NET. It uses the `AsBiDiAsync()` method on the WebDriver instance to get started with BiDi functionality, providing access to browser contexts and real-time events.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2024/selenium-4-25-released.md#_snippet_0\n\nLANGUAGE: .NET\nCODE:\n```\nvar bidi = await driver.AsBiDiAsync();\n```\n\n----------------------------------------\n\nTITLE: Using a Pen with Selenium - C#\nDESCRIPTION: This C# snippet demonstrates how to use the Pen class in Selenium to move the pen to an element and then simulate a touch contact (left click equivalent). It requires Selenium 4.2 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"clickable\"));\n\nPen pen = new Pen(driver, \"pen1\");\n\nnew Actions(driver).MoveToElement(element).Tick(pen).Perform();\n```\n\n----------------------------------------\n\nTITLE: Finding an Element by Name\nDESCRIPTION: This snippet shows how to locate a specific element on a web page using its name attribute. The `find_element` method with `name` locator is used for this purpose. The `name` parameter specifies the value of the name attribute to search for.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\nsearch_box = driver.find_element(:name, 'q')\n```\n\n----------------------------------------\n\nTITLE: Context Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a context click action (right-click) on an element using Selenium. It combines moving the mouse to the center of an element with pressing and releasing the right mouse button (button 2). This opens the context menu. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\nActions actions = new Actions(driver);\nIWebElement element = driver.FindElement(By.Id(\"my-element\"));\nactions.ContextClick(element).Perform();\n```\n\n----------------------------------------\n\nTITLE: Send Keys to Active Element in Selenium\nDESCRIPTION: Demonstrates sending keys to the currently active element using Selenium's Actions API. This involves creating an Actions object, using the sendKeys method to send a string of characters, and then performing the action. This action sends the characters to whichever element currently has focus.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nactions = driver.action\nactions.send_keys('text').perform\n```\n\n----------------------------------------\n\nTITLE: Adding Cookie to Browser Context in Ruby\nDESCRIPTION: This code snippet demonstrates how to add a cookie to the current browser context using Selenium WebDriver in Ruby.  It navigates to a website and then adds a cookie with the name 'key' and value 'value'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  \n  # Adds the cookie into current browser context\n  driver.manage.add_cookie(name: \"key\", value: \"value\")\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Ruby Setup Example (RSpec)\nDESCRIPTION: This snippet shows how to set up a Selenium WebDriver instance using Ruby and RSpec. The `before` block will execute before each test. It sets up the ChromeDriver and assigns it to the `@driver` instance variable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'selenium-webdriver'\n\nRSpec.describe 'First script' do\n  before(:each) do\n    @driver = Selenium::WebDriver.for :chrome\n  end\n```\n\n----------------------------------------\n\nTITLE: Print Page in Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to print a page using Selenium WebDriver in Kotlin. It sets up print options, specifies page ranges, and retrieves the content as a PDF in base64 encoded format. Dependencies: org.openqa.selenium.print.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_71\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.get(\"https://www.selenium.dev\")\nval printer = driver as PrintsPage\n\nval printOptions = PrintOptions()\nprintOptions.setPageRanges(\"1-2\")\n\nval pdf: Pdf = printer.print(printOptions)\nval content = pdf.content\n```\n\n----------------------------------------\n\nTITLE: Get Element Rectangle in JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve the rectangle (dimensions and coordinates) of a web element using Selenium WebDriver in JavaScript. It uses the `getRect()` method. The method returns an object containing the element's x, y, width, and height.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('get rect', async () => {\n  expect((await driver.findElement(By.name('range_input')).getRect()).height).toBe(15);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing ChromeDriver in Java\nDESCRIPTION: This code snippet demonstrates how to initialize a ChromeDriver instance in Java for Selenium WebDriver automation. It creates a new instance of the ChromeDriver, enabling browser automation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.zh-cn.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n```\n\n----------------------------------------\n\nTITLE: Initializing Internet Explorer with Options in Selenium\nDESCRIPTION: This code snippet demonstrates how to start a Microsoft Edge browser in Internet Explorer Compatibility mode with basic defined options using Selenium in various programming languages. It sets up the InternetExplorerOptions and uses them to create an InternetExplorerDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\noptions = webdriver.IeOptions()\noptions.attach_to_edge_chrome = True\noptions.edge_executable_path = \"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\"\ndriver = webdriver.Ie(options=options)\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Name in Java\nDESCRIPTION: This snippet shows how to set the platform name using Selenium in Java. It retrieves the OS name.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setPlatformName(\"linux\");\noptions.getPlatformName();\n```\n\n----------------------------------------\n\nTITLE: Enabling Log File Features in Chrome\nDESCRIPTION: This code snippet shows how to enable the features for appending logs and using readable timestamps when logging to a file in ChromeDriver. These features are only available when writing to a file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_39\n\nLANGUAGE: Python\nCODE:\n```\nservice = Service(append_log=True, readable_timestamp=True)\n```\n\n----------------------------------------\n\nTITLE: Capturing JavaScript Exceptions in Ruby\nDESCRIPTION: This Ruby snippet demonstrates capturing Javascript Exceptions using Chrome DevTools Protocol (CDP) with Selenium. It assumes that a browser instance is already available.  It listens for the `log.entryAdded` event and filters the error messages which is the result of a javascript exception.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.en.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'listens to js exceptions' do\n  driver.get(\"https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html\")\n```\n\n----------------------------------------\n\nTITLE: Setting W3C Capabilities Before Upgrade - JavaScript\nDESCRIPTION: Shows how to define capabilities in JavaScript for Selenium 3. It sets the browserName, platform, version, build, and name. Like the Java example, these capabilities require vendor prefixes for Selenium 4 compliance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncaps = {};\ncaps['browserName'] = 'Firefox';\ncaps['platform'] = 'Windows 10';\ncaps['version'] = '92';\ncaps['build'] = myTestBuild;\ncaps['name'] = myTestName;\n```\n\n----------------------------------------\n\nTITLE: JavascriptExecutor in Selenium WebDriver\nDESCRIPTION: The JavascriptExecutor is mentioned as a powerful tool for interacting with web pages in Selenium WebDriver. It allows executing JavaScript code directly in the browser context. The snippet references a blog post illustrating its use.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2011/a-smattering-of-selenium-65.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Creating a feature branch using Git (Shell)\nDESCRIPTION: This snippet showcases creating a new feature branch using Git.  This allows developers to work on specific features or bug fixes in isolation from the main branch (trunk), preventing conflicts and keeping the main codebase stable.  The command switches to the newly created branch.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.zh-cn.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n% git checkout -b my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Navigate Forward in Java\nDESCRIPTION: This code snippet demonstrates how to navigate forward in the browsing history using Selenium WebDriver's BiDi API in Java. It navigates to a URL, goes back, then navigates forward. Requires Selenium version 4.16.0 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_40\n\nLANGUAGE: Java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(((HasDevTools) driver).getDevTools(),\n                                         ((RemoteWebDriver) driver).getWindowHandle());\n\n    browsingContext.navigate(\"https://www.selenium.dev/\", WaitUntil.LOAD);\n    browsingContext.back(WaitUntil.LOAD);\n    browsingContext.forward(WaitUntil.LOAD);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Current Session Count\nDESCRIPTION: This curl command retrieves the current number of active sessions within the Selenium Grid.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.pt-br.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ grid { sessionCount } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Set Viewport Size in JavaScript\nDESCRIPTION: This code snippet shows how to set the viewport size using Selenium WebDriver's BiDi API in JavaScript. It uses the `browsingContext.setViewport` method with specified width and height. Requires Selenium version 4.15 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('set the viewport', async () => {\n  const browsingContext = await getBrowsingContext(driver);\n  await browsingContext.setViewport({\n    width: 640,\n    height: 480\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Title with Selenium\nDESCRIPTION: This code snippet demonstrates how to assert the title of a webpage using Selenium in C#.  It gets the title and then compares it to an expected result.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nString title = driver.Title;\nAssert.That(title, Is.EqualTo(\"SeleniumHQ Browser Automation\"));\n```\n\n----------------------------------------\n\nTITLE: Getting a Named Cookie with Selenium WebDriver (Ruby)\nDESCRIPTION: This code snippet demonstrates how to retrieve a cookie by name using Selenium WebDriver in Ruby. It requires the 'selenium-webdriver' gem. The code navigates to a specific URL, adds a cookie named 'foo' with the value 'bar', and then retrieves the cookie by name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  driver.manage.add_cookie(name: \"foo\", value: \"bar\")\n\n  # Get cookie details with named cookie 'foo'\n  puts driver.manage.cookie_named('foo')\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: JavaScript Mocha Test Execution\nDESCRIPTION: This shell command shows how to run tests using Mocha in a JavaScript project. Replace `runningTests.spec.js` with the actual test file name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nmocha runningTests.spec.js\n```\n\n----------------------------------------\n\nTITLE: Setting Safari Logging Preference (Python)\nDESCRIPTION: This Python code sets the logging preference for the Safari driver service. It uses the `service_log_path` argument. Requires Selenium Python 4.26 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.ja.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Safari(service_log_path=\"/path/to/safari.log\")\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium\nDESCRIPTION: This snippet sets an implicit wait time for the WebDriver instance.  This tells the driver to wait a specified amount of time when trying to find an element if it is not immediately available.  Requires an initialized WebDriver instance. Not recommended as best practice for waiting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.manage.timeouts.implicit_wait = 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Unicorn Attributes (Python)\nDESCRIPTION: This Python snippet demonstrates how to set up Unicorn attributes. It creates a Unicorn object with specified attributes like color, accessories, and adornments. It simulates navigating to the AddUnicornPage from the account_page and uses createUnicorn() to create a Unicorn.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# The Unicorn is a top-level Object--it has attributes, which are set here.\n# This only stores the values; it does not fill out any web forms or interact\n# with the browser in any way.\nsparkles = Unicorn(\"Sparkles\", UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS)\n\n# Since we're already \"on\" the account page, we have to use it to get to the\n# actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n# takes us there.\nadd_unicorn_page = account_page.add_unicorn()\n\n# Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n# its createUnicorn() method. This method will take Sparkles' attributes,\n```\n\n----------------------------------------\n\nTITLE: Get Standalone Component Help\nDESCRIPTION: This command displays configuration options specific to the 'standalone' component of Selenium Grid.  It uses the '--help' flag with the 'standalone' argument.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.zh-cn.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar standalone --help\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium\nDESCRIPTION: This code snippet demonstrates how to initialize a Select object in Selenium after locating a <select> element. It covers multiple languages and shows the basic usage pattern. Note that the <select> element cannot be disabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nval selectElement = driver.findElement(By.name(\"selectomatic\"))\nval select = Select(selectElement)\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - Selenium WebDriver - Python\nDESCRIPTION: This snippet sets the size of the browser window to 1024x768 pixels using the Selenium WebDriver API in Python. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\ndriver.set_window_size(1024, 768)\n```\n\n----------------------------------------\n\nTITLE: Get Element Size and Position - Ruby\nDESCRIPTION: Demonstrates how to retrieve the size and position of a web element using Ruby and Selenium WebDriver. The `rect` method returns a `Selenium::WebDriver::Rectangle` object containing the element's x, y coordinates, width, and height. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\nputs(driver.find_element(name: 'range_input').rect)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Color Objects\nDESCRIPTION: This code snippet demonstrates creating Color objects for basic color definitions like 'black', 'chocolate', and 'hotpink' in Java, using the Color.fromString() method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nprivate final Color BLACK = Color.fromString(\"black\");\nprivate final Color CHOCOLATE = Color.fromString(\"chocolate\");\nprivate final Color HOTPINK = Color.fromString(\"hotpink\");\n```\n\n----------------------------------------\n\nTITLE: Getting Credential in Python\nDESCRIPTION: Returns the list of credentials that the authenticator has using Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nauthenticator.get_credentials()\n```\n\n----------------------------------------\n\nTITLE: Taking Full Page Screenshots in Firefox with Selenium (Python)\nDESCRIPTION: This Python snippet demonstrates how to take a full page screenshot in Firefox using Selenium. It uses the `get_full_page_screenshot_as` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_48\n\nLANGUAGE: python\nCODE:\n```\ndriver.get_full_page_screenshot_as(png)\n```\n\n----------------------------------------\n\nTITLE: Terminating Driver Session - Kotlin\nDESCRIPTION: This Kotlin snippet shows how to terminate a Selenium WebDriver session using the `quit()` method. This method closes all browser windows associated with the WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.ja.md#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Check Element Displayed Status - JavaScript\nDESCRIPTION: This snippet demonstrates how to check if a web element is displayed on the page using Selenium WebDriver in JavaScript. It finds an element by name and uses the isDisplayed() method to determine its visibility, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst emailInput = await driver.findElement(By.name('email_input'))\nexpect(await emailInput.isDisplayed()).toBe(true)\n```\n\n----------------------------------------\n\nTITLE: Managing Selenium Grid Version with Specific Version\nDESCRIPTION: This command uses Selenium Manager to download a specific version of Selenium Grid, storing the `selenium-server.jar` in the local cache.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.zh-cn.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ./selenium-manager --grid <GRID_VERSION>\n```\n\n----------------------------------------\n\nTITLE: Get Realm By Type - Java\nDESCRIPTION: This snippet retrieves a realm by its type using Java and the WebDriver BiDi API. It uses the `Script.getRealms` method with a specific type to fetch the desired realm.  Requires a realm type like 'window'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nList<RealmInfo> realms = bidi.script().getRealms(Optional.of(Realm.RealmType.WINDOW), Optional.empty());\n```\n\n----------------------------------------\n\nTITLE: Capturing Response Information via CDP in Java\nDESCRIPTION: This Java code snippet demonstrates how to intercept and capture response information using Chrome DevTools Protocol (CDP) with Selenium. It captures the response headers and body and prints it to standard output. This snippet depends on the Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nsession.addListener(Network.responseReceived(event -> {\n  if (event.getType().equals(ResourceType.XHR)) {\n    String body = session.sendCommand(Network.getResponseBody(\n        GetResponseBody.create(event.getRequestId()))).getBody();\n    System.out.println(body);\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: KEDA ScaledObject Configuration for Selenium Grid (YAML)\nDESCRIPTION: This YAML configuration defines a KEDA ScaledObject that scales a Selenium Grid deployment based on metrics from the grid. It uses the selenium-grid scaler to monitor the number of pending sessions and triggers scaling events. The `url`, `browserName`, and `platformName` parameters define the connection details and browser configuration.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/scaling-grid-with-keda.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ntriggers:\n  - type: selenium-grid\n    metadata:\n      url: 'http://selenium-grid-url-or-ip:4444/graphql'\n      browserName: 'chrome'\n      platformName: 'Linux'\n```\n\n----------------------------------------\n\nTITLE: Getting Tracing Information for Selenium Grid\nDESCRIPTION: This command retrieves detailed instructions on how to visualize traces using Jaeger UI. It provides the necessary steps for configuring and utilizing Jaeger with Selenium Grid for enhanced observability. The selenium-version placeholder should be substituted with the actual Selenium version being utilized.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/observability.zh-cn.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-4.0.0-<selenium-version>.jar info tracing\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Downloaded File - Bash\nDESCRIPTION: This curl command retrieves a specific file that has been downloaded during a session. It sends a POST request to the `/session/<sessionId>/se/files` endpoint with a JSON payload containing the filename.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.pt-br.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Accept: application/json\" \\\n-H \"Content-Type: application/json; charset=utf-8\" \\\n-X POST -d '{\"name\":\"Red-blue-green-channel.jpg\"}' \\\n\"http://localhost:4444/session/18033434-fa4f-4d11-a7df-9e6d75920e19/se/files\"\n```\n\n----------------------------------------\n\nTITLE: Using Safari Technology Preview (Ruby)\nDESCRIPTION: This code snippet configures the SafariOptions to use Safari Technology Preview in Ruby by setting the `path` option.  This example requires selenium-webdriver version 4.12.0 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.zh-cn.md#_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Safari::Options.new(path: '/Applications/Safari Technology Preview.app/Contents/MacOS/Safari Technology Preview')\ndriver = Selenium::WebDriver.for :safari, options: options\n```\n\n----------------------------------------\n\nTITLE: Adding Directory to PATH in Bash\nDESCRIPTION: This snippet adds a new directory containing the browser driver to the PATH environment variable in Bash. It appends the specified path to the existing PATH variable and updates the `~/.bash_profile` file, ensuring the change persists across sessions. Then, it sources the profile to apply the changes to the current shell. Replace `/path/to/driver` with the actual directory path.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.zh-cn.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho 'export PATH=$PATH:/path/to/driver' >> ~/.bash_profile\nsource ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies - Ruby\nDESCRIPTION: This Ruby snippet shows how to retrieve all available cookies using Selenium WebDriver. It adds two cookies and then uses `driver.manage.all_cookies` to retrieve a list of all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  driver.manage.add_cookie(name: \"test1\", value: \"cookie1\")\n  driver.manage.add_cookie(name: \"test2\", value: \"cookie2\")\n\n  # Get all available cookies\n  puts driver.manage.all_cookies\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element with Offset - Selenium Wheel Java\nDESCRIPTION: This snippet demonstrates how to scroll from a specific element with an offset using Selenium's Wheel actions in Java.  The origin of the scroll will be determined by adding the offset to the coordinates of the center of the element, and then page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"target\"));\nnew Actions(driver)\n  .scroll(element, 10, 10, 0, 0)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Continue Auth Required Request (No Credentials) - Java\nDESCRIPTION: This Java code snippet demonstrates how to continue a network request blocked at the 'authRequired' phase using Selenium BiDi without providing any credentials. This might be used when you want to send an empty authentication.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\ndriver.getDevTools().createSession();\nNetwork network = new Network(driver.getDevTools());\nnetwork.addIntercept(\"*.example.com/*\", new AddInterceptParameters());\nContinueParameters params = new ContinueParameters();\nnetwork.continueRequest(params);\n```\n\n----------------------------------------\n\nTITLE: Removing Credential in C#\nDESCRIPTION: This code shows how to remove a credential from the authenticator based on the credential id passed using C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nbyte[] bytes = new byte[16];\nRandom rand = new Random();\nrand.NextBytes(bytes);\nCredential cred = new Credential()\n{\n    Id = bytes,\n    Algorithm = Algorithm.Es256,\n    UserHandle = bytes,\n    ResidentKey = true\n};\n\n((IHasAuthentication)driver).AddVirtualAuthenticatorCredential(authenticator, cred);\n((IHasAuthentication)driver).RemoveVirtualAuthenticatorCredential(authenticator, cred.Id);\n```\n\n----------------------------------------\n\nTITLE: Press Key Action in Selenium\nDESCRIPTION: Demonstrates how to simulate pressing a specific key using Selenium's Actions API. This involves creating an Actions object, using the keyDown method to press a key, and then performing the action. The key to press is specified using the Keys enum/class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nactions = driver.action\nactions.key_down(:shift)\n  .send_keys('text')\n  .perform\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name - Kotlin\nDESCRIPTION: Demonstrates how to retrieve the tag name of a web element using Kotlin and Selenium WebDriver. The `getTagName()` method returns the tag name as a string. A WebDriver instance and an element locator are required. First navigate to the target URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\n//navigates to url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n//returns TagName of the element\nval attr =  driver.findElement(By.name(\"email_input\")).getTagName()\n```\n\n----------------------------------------\n\nTITLE: Locating Element by CSS Selector with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a web element using a CSS selector with Selenium WebDriver. It assumes a ChromeDriver instance is created and uses the `By.cssSelector()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.cssSelector(\"#fname\"));\n```\n\n----------------------------------------\n\nTITLE: Displaying Selenium Grid Session Map Configuration Information\nDESCRIPTION: This command retrieves and displays information on configuring the session map, including using Redis or JDBC SQL databases for session storage. Replace `<version>` with the actual Selenium server version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.pt-br.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar info sessionmap\n```\n\n----------------------------------------\n\nTITLE: Running SessionMap standalone using Redis in Bash\nDESCRIPTION: This Bash script demonstrates how to run only the SessionMap component of Selenium Grid with Redis persistence.  It fetches the required dependency using Coursier and then starts the SessionMap process, specifying the event bus connection details and the configuration file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.ja.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nexport SE_VERSION=<current_selenium_version>\njava -jar selenium-server-${SE_VERSION}.jar \\\n--ext $(coursier fetch -p org.openqa.selenium:selenium-session-map-redis:${SE_VERSION}) \\\nsessions --publish-events tcp://localhost:4442 \\\n--subscribe-events tcp://localhost:4443 \\\n--port 5556 --config sessions.toml\n```\n\n----------------------------------------\n\nTITLE: Call Function in Realm - JavaScript\nDESCRIPTION: This snippet demonstrates how to call a function within a realm using JavaScript and the WebDriver BiDi API. It uses the `script.callFunction` method to execute a function within a particular realm and verifies its outcome. The realm ID must be specified.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('call function in realm', async () => {\n  let result = await connection.script.callFunction({\n    functionDeclaration: '() => { return window.document.title }',\n    target: { realm: realmId },\n  });\n  expect(result.result.value).toBe('');\n});\n```\n\n----------------------------------------\n\nTITLE: Print Page BrowsingContext() Java\nDESCRIPTION: This code snippet demonstrates how to print a page using BrowsingContext in Java with Selenium and save the output as a PDF file. It requires Selenium BiDi to be enabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setPageRanges(\"1-2\");\nString pdf = ((HasBiDi) driver).getBrowsingContext().print(printOptions);\nFile pdfFile = new File(\"test.pdf\");\nFileUtils.writeStringToFile(pdfFile, pdf, StandardCharsets.UTF_8);\n```\n\n----------------------------------------\n\nTITLE: Setting Capabilities Before Upgrade - Python\nDESCRIPTION: This Python code defines desired capabilities for Firefox before upgrading to Selenium 4, including browserName, platform, version, build, and name. It then creates a Remote WebDriver instance using these capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ncaps = {}\ncaps['browserName'] = 'firefox'\ncaps['platform'] = 'Windows 10'\ncaps['version'] = '92'\ncaps['build'] = my_test_build\ncaps['name'] = my_test_name\ndriver = webdriver.Remote(cloud_url, desired_capabilities=caps)\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element - Selenium\nDESCRIPTION: Drags an element from its original location and drops it onto another target element. The action involves pressing the left mouse button on the source element, moving to the target element, and then releasing the mouse button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait actions.dragAndDrop(draggable, droppable).perform();\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Port - Java\nDESCRIPTION: This snippet demonstrates how to specify the port the driver should run on in Java using ChromeService.Builder.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.zh-cn.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nChromeService service = new ChromeService.Builder().usingPort(1234).build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Capabilities After Selenium 4 - CSharp\nDESCRIPTION: This C# code demonstrates how to configure browser options and capabilities using FirefoxOptions in Selenium 4. It sets PlatformName, BrowserVersion, and adds additional options for cloud capabilities using a dictionary.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\nvar browserOptions = new FirefoxOptions();\nbrowserOptions.PlatformName = \"Windows 10\";\nbrowserOptions.BrowserVersion = \"92\";\nvar cloudOptions = new Dictionary<string, object>();\ncloudOptions.Add(\"build\", myTestBuild);\ncloudOptions.Add(\"name\", myTestName);\nbrowserOptions.AddAdditionalOption(\"cloud:options\", cloudOptions);\nvar driver = new RemoteWebDriver(new Uri(CloudURL), browserOptions);\n```\n\n----------------------------------------\n\nTITLE: Closing a Window/Tab and Switching Back in Selenium\nDESCRIPTION: This snippet shows how to close the current window/tab and switch the WebDriver's focus back to the original window/tab. It assumes that the original window handle has been stored in a variable. It requires the Selenium WebDriver library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Close();\ndriver.SwitchTo().Window(originalWindow);\n\n```\n\n----------------------------------------\n\nTITLE: Comparing Color Objects\nDESCRIPTION: This snippet demonstrates how to directly compare a Color object (loginButtonBackgroundColour) with a predefined Color constant (HOTPINK) using the equals() method in Kotlin, for asserting that the background color of a login button matches a specific color.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nassert(loginButtonBackgroundColour.equals(HOTPINK))\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Firefox Options\nDESCRIPTION: This code snippet demonstrates how to add command-line arguments to Firefox options.  It's useful for configuring the browser's behavior, such as running in headless mode. The `AddArgument` method is used to append arguments to the options object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\noptions.AddArgument(\"-headless\");\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium\nDESCRIPTION: This code shows how to handle disabled options. Since Selenium 4.5, you cannot create a Select object from a disabled <select> element, and you cannot select a disabled <option>. Attempting to do so will result in an exception.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_41\n\nLANGUAGE: Kotlin\nCODE:\n```\nval disabledSelectElement = driver.findElement(By.name(\"single_disabled\"))\ndriver.findElement(By.id(\"sinlge_disabled_1\")).click()\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Selenium\nDESCRIPTION: This code snippet demonstrates how to initialize a Select object in Selenium after locating a <select> element. It covers multiple languages and shows the basic usage pattern. Note that the <select> element cannot be disabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst selectElement = await driver.findElement(By.name('selectomatic'));\nconst select = new Select(selectElement);\n```\n\n----------------------------------------\n\nTITLE: Back Button Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to simulate a click on the back button of a mouse (button X1) using Selenium. It involves pressing and releasing mouse button 3 on the target element. Requires Selenium WebDriver and version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"my-element\")\nactions = ActionChains(driver)\nactions.move_to_element(element).click(MouseButton.BACK).perform()\n```\n\n----------------------------------------\n\nTITLE: Before Request Sent Event - Java\nDESCRIPTION: This Java code snippet demonstrates how to listen for the 'beforeRequestSent' network event using Selenium BiDi.  It prints the request URL when the event is triggered, allowing you to monitor outgoing requests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nNetwork network = new Network(driver.getDevTools());\nnetwork.onBeforeRequestSent(event -> {\n  System.out.println(event.getRequest().getUrl());\n});\n```\n\n----------------------------------------\n\nTITLE: Move Mouse by Offset - Selenium\nDESCRIPTION: Moves the mouse cursor from its current position by a specified offset. Positive X values move the cursor right, positive Y values move the cursor down. The origin is the top-left corner of the viewport if the cursor hasn't been moved before.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n@driver.action.move_by(30, -10).pause(1).perform\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium WebDriver in Java\nDESCRIPTION: This Java code snippet demonstrates a basic example of initializing Selenium WebDriver to interact with a web browser. It sets up a WebDriver instance to automate browser actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.zh-cn.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage dev.selenium.hello;\n\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.edge.EdgeDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.ie.InternetExplorerDriver;\nimport org.openqa.selenium.safari.SafariDriver;\n\nimport java.time.Duration;\n\npublic class HelloSelenium {\n    public static void main(String[] args) {\n        WebDriver driver = new ChromeDriver();\n\n        driver.get(\"https://www.google.com\");\n\n        driver.quit();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Script Pinning Ruby\nDESCRIPTION: This Ruby snippet shows how to use Chrome DevTools Protocol (CDP) to pin a script within Selenium. It is intended for tasks like debugging or monitoring script behavior. The approach will be superseded by WebDriver BiDi.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.pt-br.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nscript.pin(expression: 'script-to-debug')\nscript.unpin(script_id: script.pin(expression: 'script-to-debug').script_id)\n```\n\n----------------------------------------\n\nTITLE: Downloading a File in CSharp\nDESCRIPTION: Downloads a specified file for a RemoteWebDriver session in C#. The file is retrieved from a directory on the remote machine and downloaded to a designated local directory. Parameters include the name of the file to be downloaded and the local directory to download to.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_18\n\nLANGUAGE: CSharp\nCODE:\n```\nvar downloadedFile = driver.DownloadFile(\"file_name\", targetDir);\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Node with Custom Capability (Java) - Node B\nDESCRIPTION: This snippet demonstrates how to start another Selenium node with a different custom capability value. It disables driver detection, configures the driver with a display name and maximum sessions, and sets a custom stereotype with a boolean capability set to false.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar node --detect-drivers false --driver-configuration display-name=\"Chrome (custom capability true)\" max-sessions=1 stereotype='{\"browserName\":\"chrome\",\"gsg:customcap\":false}' --port 6262\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to Normal in Java\nDESCRIPTION: This snippet shows how to set the page load strategy to 'normal' in Java using Selenium. WebDriver waits until the load event is fired.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setPageLoadStrategy(PageLoadStrategy.NORMAL);\nWebDriver driver = new ChromeDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Minimize Window - Selenium\nDESCRIPTION: This snippet demonstrates how to minimize the current browser window using Selenium WebDriver. The exact behavior of this command is specific to the individual window manager. Requires Selenium 4 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_61\n\nLANGUAGE: Python\nCODE:\n```\ndriver.minimize_window()\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method (JUnit): Selenium WebDriver (Java)\nDESCRIPTION: This Java snippet demonstrates how to use the `@AfterAll` annotation from JUnit to define a tear down method that quits the WebDriver instance after all tests have been executed. This ensures proper resource cleanup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Example using JUnit\n * https://junit.org/junit5/docs/current/api/org/junit/jupiter/api/AfterAll.html\n */\n@AfterAll\npublic static void tearDown() {\n    driver.quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling FINE Level Logging in Selenium Grid\nDESCRIPTION: This command starts the Selenium Grid server in standalone mode and sets the log level to FINE. This will output all traces and spans to the console at the FINE level, which includes detailed debugging information.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/observability.ja.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-4.0.0-<selenium-version>.jar standalone --log-level FINE\n```\n\n----------------------------------------\n\nTITLE: Importing Color Class - Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to import the Color class in various programming languages to use it within Selenium WebDriver tests.  This is a necessary first step to utilize the Color class's functionalities.  The package/module location varies depending on the language.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.support.color import Color\n```\n\n----------------------------------------\n\nTITLE: Element Submission with Selenium\nDESCRIPTION: This snippet demonstrates how to submit an HTML form element using Selenium WebDriver. The 'Submit()' method is called on the identified element. Dependencies include an initialized WebDriver instance, a loaded webpage, and a found element (e.g., a search box).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nsearchBox.Submit();\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Hub for Managed Downloads\nDESCRIPTION: This command starts a Selenium Hub instance, which is a prerequisite for enabling managed downloads by the Node.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar hub\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Class Name in Selenium (By Class)\nDESCRIPTION: This code snippet demonstrates how to locate a web element using its class name with the `By` class in Selenium.  It initializes a WebDriver and uses `By.className()` to locate an element with the class 'information'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_36\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.By\n    val driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.className(\"information\"))\n```\n\n----------------------------------------\n\nTITLE: Explicit Wait with Lambda - Python\nDESCRIPTION: This Python snippet shows how to implement an explicit wait using a lambda expression. A `WebDriverWait` instance is created, and the `until` method is used to wait for a condition. The lambda checks if the element with ID 'message' is displayed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.pt-br.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nelement = WebDriverWait(driver, 10).until(\n    lambda x: x.find_element(By.ID, \"message\").is_displayed())\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium using Package Manager (C#)\nDESCRIPTION: Installs the Selenium.WebDriver package using the Package Manager Console in Visual Studio. This command fetches and installs the specified NuGet package and its dependencies into the project.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.ja.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nInstall-Package Selenium.WebDriver\n```\n\n----------------------------------------\n\nTITLE: Setting Log Output to Console\nDESCRIPTION: This code snippet configures the FirefoxDriver service to direct log output to the console (STDOUT). This allows you to view the driver logs directly in your terminal.  The `service_log_path` is set to `stdout`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nservice = FirefoxService(service_log_path=subprocess.STDOUT)\ndriver = FirefoxDriver(service=service, options=options)\n```\n\n----------------------------------------\n\nTITLE: CSharp Assertion Example\nDESCRIPTION: This code demonstrates an assertion in C# using NUnit to verify that the title of the webpage matches the expected value. The `Assert.That` method is used to compare the actual title with the expected title. It requires NUnit testing framework.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing NUnit.Framework;\n\nAssert.That(driver.Title, Is.EqualTo(\"SeleniumHQ Browser Automation\"));\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Current Pointer Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse cursor by a specified offset from its current position using Selenium WebDriver.  It's available in Java, Python, C#, Ruby, JavaScript, and Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_57\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.action.move_by(30, -10).perform\n```\n\n----------------------------------------\n\nTITLE: Defining Transparent Color in Kotlin\nDESCRIPTION: This snippet shows how to define the 'transparent' color using the Color.fromString() method in Kotlin. Browsers may return 'transparent' as the color value for elements without a defined color, and this allows you to handle that case.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nprivate val TRANSPARENT = Color.fromString(\"transparent\")\n```\n\n----------------------------------------\n\nTITLE: BDD Tool for Node.js\nDESCRIPTION: Given When Then is a Behavior-Driven Development (BDD) tool for Node.js that uses WebDriver (Selenium 2) and Sauce Labs for post-conversion-magic runs. It enables developers to write tests in a more expressive and human-readable format.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/a-smattering-of-selenium-73.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nGiven When Then\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium in Python\nDESCRIPTION: This snippet demonstrates how to start a Selenium WebDriver session in Python, navigate to a webpage, and close the browser. It requires the Selenium WebDriver library to be installed using pip.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.en.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\n\ndef test_eight_components():\n    service = Service(executable_path='path/to/chromedriver')\n    driver = webdriver.Chrome(service=service)\n    driver.get(\"https://www.selenium.dev/selenium/web/index.html\")\n    driver.quit()\n```\n\n----------------------------------------\n\nTITLE: Initializing a Selenium Session\nDESCRIPTION: This snippet demonstrates how to initialize a Selenium WebDriver session in various programming languages. It shows the instantiation of the WebDriver object, which is the entry point for interacting with the browser. This is a fundamental step in any Selenium automation script.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to set the position of the browser window to the top-left corner of the primary monitor (0, 0) using Selenium WebDriver. The `move_to` method is called with the desired x and y coordinates as arguments.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.manage.window.move_to(0,0)\n```\n\n----------------------------------------\n\nTITLE: Setting Unhandled Prompt Behavior with Ruby\nDESCRIPTION: This code snippet demonstrates how to set the unhandled prompt behavior in Ruby using Selenium WebDriver's Options class. The `unhandled_prompt_behavior=` property is used to define the action to take when a user prompt appears. In this example, the behavior is set to `accept`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\noptions.unhandled_prompt_behavior = :accept\n```\n\n----------------------------------------\n\nTITLE: Initialize Selenium WebDriver in JavaScript\nDESCRIPTION: This JavaScript code snippet initializes a Selenium WebDriver instance using ChromeDriver. It navigates to the SeleniumHQ website and prints the title of the page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.pt-br.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {Builder, Browser, By, Key, until} = require('selenium-webdriver');\n\nasync function testHelloSelenium() {\n  let driver = await new Builder().forBrowser(Browser.CHROME).build();\n  try {\n    await driver.get('https://www.selenium.dev/');\n    console.log(await driver.getTitle());\n  } finally {\n    await driver.quit();\n  }\n}\n\ntestHelloSelenium();\n```\n\n----------------------------------------\n\nTITLE: Overriding load() Method in EditIssue (Java)\nDESCRIPTION: This code shows the `load()` method of the `EditIssue` class. It calls `get()` on the `securedPage` (a `SecuredPage` instance), ensuring that the user is logged in. Then, it navigates to the specified URL for creating a new issue on GitHub.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.ja.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n  @Override\n  protected void load() {\n    securedPage.get();\n\n    driver.get(\"https://github.com/SeleniumHQ/selenium/issues/new?assignees=&labels=I-defect%2Cneeds-triaging&projects=&template=bug-report.yml&title=%5B%F0%9F%90%9B+Bug%5D%3A+\");\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium Grid for Redis Session Storage\nDESCRIPTION: This TOML configuration file specifies the settings for using a Redis-backed session map with Selenium Grid. It includes the scheme, implementation class, hostname, and port number for connecting to the Redis server.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.pt-br.md#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[sessions]\nscheme = \"redis\"\nimplementation = \"org.openqa.selenium.grid.sessionmap.redis.RedisBackedSessionMap\"\nhostname = \"localhost\"\nport = 6379\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Manager Help Command\nDESCRIPTION: This code snippet demonstrates how to run the Selenium Manager with the `--help` flag. This command displays all the available arguments and options that can be used to configure Selenium Manager from the command line.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.ja.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ./selenium-manager --help\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Class Name in Selenium\nDESCRIPTION: This code demonstrates how to locate a web element using its class name in Selenium WebDriver. It initializes a ChromeDriver instance and uses the `findElement` method with `By.className(\"information\")` to find the element with the specified class. The example is provided in multiple languages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_32\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.By;\n WebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.className(\"information\"));\n```\n\n----------------------------------------\n\nTITLE: Take Element Screenshot in Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to capture a screenshot of a specific element on a webpage using Selenium WebDriver in C#. It utilizes `ITakesScreenshot` interface and `GetScreenshot` method to capture the screenshot and save it to a file. The element is located using `FindElement` method. Dependencies: OpenQA.Selenium, OpenQA.Selenium.Chrome.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_60\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\nusing OpenQA.Selenium.Support.UI;\n\n    // Webdriver\n    var driver = new ChromeDriver();\n    driver.Navigate().GoToUrl(\"http://www.example.com\");\n\n    // Fetch element using FindElement\n    var webElement = driver.FindElement(By.CssSelector(\"h1\"));\n\n    // Screenshot for the element\n    var elementScreenshot = (webElement as ITakesScreenshot).GetScreenshot();\n    elementScreenshot.SaveAsFile(\"screenshot_of_element.png\");\n```\n\n----------------------------------------\n\nTITLE: Set Firefox Profile Root Directory (Ruby)\nDESCRIPTION: This Ruby code snippet shows how to set the profile root directory for Firefox profiles using Selenium.  This allows for specifying a custom location for profiles. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\noptions['profile.root'] = '/tmp/profiles'\n```\n\n----------------------------------------\n\nTITLE: Example TOML Configuration File for Selenium Manager\nDESCRIPTION: This TOML configuration file demonstrates how to set various configuration options for Selenium Manager, such as browser, driver, browser-version, driver-version, browser-path, and cache-path. It showcases how these settings can be used to customize the behavior of Selenium Manager.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.zh-cn.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nbrowser = \"chrome\"\ndriver = \"chromedriver\"\nbrowser-version = \"115\"\ndriver-version = \"115.0.5790.170\"\nbrowser-path = \"/usr/bin/google-chrome\"\n\n# HTTP proxy for network connection (e.g., myproxy:port, myuser:mypass@myproxy:port)\nproxy = \"\"\n\n# Timeout for network requests (in seconds). Default: 300\ntimeout = 300\n\n# Offline mode (i.e., disabling network requests and downloads)\noffline = false\n\n# Display DEBUG messages\ndebug = true\n\n# Local folder used to store downloaded assets (drivers and browsers), local metadata, and configuration file.\n# Default: ~/.cache/selenium. For Windows paths, double backslashes are required (e.g., C:\\\\custom\\\\cache).\ncache-path = \"/custom/cache\"\n\n# Time-to-live in seconds. Default: 3600 (1 hour)\nttl = 3600\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions in Selenium (Java)\nDESCRIPTION: This code snippet demonstrates how to release all currently pressed keys and pointer buttons in Selenium using Java. It calls the `resetActions()` method on the WebDriver. This method does not use perform().\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.zh-cn.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\ndriver.resetActions();\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element by Amount (CSharp)\nDESCRIPTION: This C# code snippet demonstrates scrolling from an element by a specified amount. It uses the `ScrollFromOrigin` method. Requires Selenium WebDriver and Actions class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"id-of-element\"));\nnew Actions(driver)\n    .ScrollFromOrigin(element, 100, 200)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - Eager - Kotlin\nDESCRIPTION: This Kotlin code sets the page load strategy to EAGER and navigates to google.com.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.PageLoadStrategy\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.chrome.ChromeOptions\n\nfun main() {\n  val chromeOptions = ChromeOptions()\n  chromeOptions.setPageLoadStrategy(PageLoadStrategy.EAGER)\n  val driver = ChromeDriver(chromeOptions)\n  try {\n    driver.get(\"https://www.google.com\")\n  }\n  finally {\n    driver.quit()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Add-ons in Firefox with Selenium (Python)\nDESCRIPTION: This Python snippet uninstalls a Firefox add-on given its ID. The `uninstall_addon` method of the `driver` object is used to remove the add-on.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ndriver.uninstall_addon(\"addon@id\")\n```\n\n----------------------------------------\n\nTITLE: Back Click with Selenium\nDESCRIPTION: Performs a back click by pressing and releasing mouse button 3.  It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"clickable\"));\nActions actions = new Actions(driver);\nactions.MoveToElement(element)\n    .Click(MouseButton.BackButton)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Terminating Driver Session - CSharp\nDESCRIPTION: This C# snippet demonstrates how to terminate a Selenium WebDriver session using the `Quit()` method. This method closes all browser windows associated with the WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.ja.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Quit();\n```\n\n----------------------------------------\n\nTITLE: Remove preloaded script - JavaScript\nDESCRIPTION: This JavaScript code removes a preloaded script by its script id.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('remove a preloaded script', async () => {\n    const browsingContext = await new BrowsingContext(driver, tabId);\n\n    let scriptId = await browsingContext.script.addPreloadScript({\n      functionDeclaration: '() => {window.test = \\'test\\';}',\n    });\n\n    await browsingContext.script.removePreloadScript({script: scriptId.script});\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting Safari Logging Preference (Ruby)\nDESCRIPTION: This Ruby code sets the logging preference for the Safari driver service. It specifies the log path when initializing the driver. Requires Selenium Ruby 4.8 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.ja.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :safari, service_args: ['--log', '/path/to/safari.log']\n```\n\n----------------------------------------\n\nTITLE: Double Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a double click action on an element using Selenium. It combines moving the mouse to the center of an element with pressing and releasing the left mouse button twice. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('my-element'));\nawait actions.doubleClick(element).perform();\n```\n\n----------------------------------------\n\nTITLE: Getting Credential in JavaScript\nDESCRIPTION: Returns the list of credentials that the authenticator has using JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst credential = {\n  id: Buffer.from('credentialId', 'utf8'),\n  type: 'public-key',\n  // Other credential properties can be set here\n};\n\nawait driver.addVirtualAuthenticatorCredential(authenticator, credential);\nconst credentials = await driver.getVirtualAuthenticatorCredentials(authenticator);\nexpect(credentials.length).toBeGreaterThan(0);\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver in CSharp\nDESCRIPTION: This C# snippet shows how to initialize a ChromeDriver instance. It's a basic example of setting up Selenium with C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.pt-br.md#_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Selenium Ruby\nDESCRIPTION: This Ruby code snippet navigates to a specific webpage, locates an element by its ID, and asserts that the text of the element matches the expected text using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_39\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.get 'https://www.selenium.dev/selenium/web/linked_image.html'\nlink = driver.find_element(id: 'justanotherlink')\nexpect(link.text).to eq('link to a page with images')\n```\n\n----------------------------------------\n\nTITLE: Safari Technology Preview (Python)\nDESCRIPTION: This code shows how to use Safari Technology Preview in Python.  It sets the technology_preview capability to True when creating Safari options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.en.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\noptions = Options()\noptions.browser_version = \"technologyPreview\"\ndriver = webdriver.Safari(options=options)\n```\n\n----------------------------------------\n\nTITLE: Get All Top level browsing contexts in JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve all top-level browsing contexts using WebDriver BiDi in JavaScript. It uses `getAllTopLevelContexts` to get the top-level contexts.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst contexts = await browsingContext.getAllTopLevelContexts();\nexpect(contexts.contexts.length).toBeGreaterThan(0);\n```\n\n----------------------------------------\n\nTITLE: Get Grid Status\nDESCRIPTION: This snippet retrieves the current status of the Selenium Grid, providing details about registered nodes, their availability, sessions, and slots. The URL points to the Grid's status endpoint.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.zh-cn.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncURL GET 'http://localhost:4444/status'\n```\n\n----------------------------------------\n\nTITLE: Create a file handler in Python to save logs to a file\nDESCRIPTION: This snippet shows how to create a handler to save logs to a file in Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlog_path = '/path/to/log'\nhandler = logging.FileHandler(log_path)\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Navigate to a URL with readiness state in Java\nDESCRIPTION: This snippet demonstrates navigating to a URL with a specified readiness state using WebDriver BiDi in Java.  It utilizes the `BrowsingContext` to navigate and then verifies the final URL. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(driver, null);\nString url = joining(getServerUrl(), \"/empty.html\");\nbrowsingContext.navigate(url, ReadinessState.COMPLETE);\n\neventWaiter.wait(NavigationStartedEvent.class);\nNavigationInfo completeEvent = eventWaiter.wait(NavigationInfo.class);\n\nassertThat(completeEvent.getUrl()).isEqualTo(url);\n```\n\n----------------------------------------\n\nTITLE: Releasing Actions in Selenium BiDi (Java)\nDESCRIPTION: This snippet demonstrates how to release actions in Selenium using the BiDirectional API in Java. It requires Selenium version 4.17 or later. The code releases a held mouse button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/input.ja.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nnew Actions(driver)\n  .moveToElement(element, 10, 5)\n  .clickAndHold()\n  .moveByOffset(15, 20)\n  .release()\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by ID in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to filter logs based on their IDs using the `allow` method to include only specific log messages. It requires Selenium version 4.10 or higher. It shows single and multiple id examples.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nSelenium::WebDriver.logger.level = :debug\nSelenium::WebDriver.logger.ignore(:browser_options)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nSelenium::WebDriver.logger.level = :debug\nSelenium::WebDriver.logger.allow([:browser_options, :capabilities])\n```\n\n----------------------------------------\n\nTITLE: Add Directory to PATH (Zsh)\nDESCRIPTION: This command appends a new directory containing the driver to the PATH environment variable in the user's .zshenv. It ensures that the system can locate the driver executable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.pt-br.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho 'export PATH=$PATH:/path/to/driver' >> ~/.zshenv\nsource ~/.zshenv\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Authentication using CDP in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to set basic authentication credentials using the Chrome DevTools Protocol (CDP) within Selenium. It uses the `Network.enable` and `Network.setExtraHTTPHeaders` methods to insert the credentials into the header of network requests. This is useful for accessing pages that require authentication.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nencoded_credentials = Base64.strict_encode64('username:password')\nheaders = {'Authorization' => \"Basic #{encoded_credentials}\"}\n@driver.execute_cdp 'Network.setExtraHTTPHeaders', headers: headers\n```\n\n----------------------------------------\n\nTITLE: Check if Element is Enabled in Python\nDESCRIPTION: This code snippet demonstrates how to check if a web element is enabled on a webpage using Selenium WebDriver in Python. It uses the `is_enabled()` method of the WebElement class. The method returns `True` if the element is enabled, and `False` otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nbutton_input = driver.find_element(By.NAME, \"button_input\")\nassert button_input.is_enabled() is True\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Casting in Java\nDESCRIPTION: These Java code snippets demonstrate how to configure Edge to interact with Chrome Cast devices for sharing tabs.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_43\n\nLANGUAGE: java\nCODE:\n```\nEdgeOptions options = new EdgeOptions();\noptions.addArguments(\"--enable-features=CastMediaRouteProviderService\",\n    \"--media-router=cast-display-available-locally\");\nWebDriver driver = new EdgeDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Check Element Selection Status - CSharp\nDESCRIPTION: Demonstrates how to check if a web element is selected on a webpage using C# and Selenium WebDriver. The `Selected` property returns a boolean indicating whether the element is selected (e.g., checkbox, radio button). A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"checkbox_input\"));\nAssert.That(element.Selected, Is.True);\n\n```\n\n----------------------------------------\n\nTITLE: Getting Element Colors in Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to retrieve the color and background color of a web element using Selenium WebDriver and the Color class. It gets the CSS value of the 'color' and 'background-color' properties and converts them into Color objects for further comparison or conversion.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\nlogin_button_colour = Color.from_string(driver.find_element(id: 'login').css_value('color'))\n\nlogin_button_background_colour = Color.from_string(driver.find_element(id: 'login').css_value('background-color'))\n```\n\n----------------------------------------\n\nTITLE: Getting Current URL in CSharp\nDESCRIPTION: Retrieves the current URL from the browser's address bar using Selenium in C#. Requires an initialized WebDriver that has navigated to a page. Returns the URL as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.en.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://www.selenium.dev/selenium/web/web-form.html\");\nString url = driver.Url;\nAssert.That(url, Is.EqualTo(\"https://www.selenium.dev/selenium/web/web-form.html\"));\n```\n\n----------------------------------------\n\nTITLE: Quitting a WebDriver Session - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to terminate a WebDriver session using the `quit()` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.zh-cn.md#_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Key Up Action in Selenium (C#)\nDESCRIPTION: This C# code snippet demonstrates performing a key up action using Selenium's Actions API. An Actions object is created, a keyDown action is performed on the Shift key, then the 'a' key is sent, followed by a keyUp action on the Shift key and sending the 'a' key again. Finally, perform() is called to execute these actions, resulting in \"Aa\".\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.ja.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nActions actions = new Actions(driver);\nactions.KeyDown(Keys.Shift)\n    .SendKeys(\"a\")\n    .KeyUp(Keys.Shift)\n    .SendKeys(\"a\")\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse from Viewport Origin in C#\nDESCRIPTION: This C# code moves the mouse pointer relative to the top-left corner of the current viewport by a specified offset. It uses the Actions class to perform the move and requires a WebDriver instance to interact with the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_50\n\nLANGUAGE: csharp\nCODE:\n```\nActions actions = new Actions(driver);\nactions.MoveByOffset(20, 100).Perform();\n\nPoint position = driver.Manage().Window.Position;\nactions.MoveByOffset(position.X + 20, position.Y + 100).Perform();\n```\n\n----------------------------------------\n\nTITLE: JSON response for downloading file\nDESCRIPTION: The raw response looks like below when downloading a file\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.pt-br.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": {\n    \"filename\": \"Red-blue-green-channel.jpg\",\n    \"contents\": \"Base64EncodedStringContentsOfDownloadedFileAsZipGoesHere\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Root Logger in Java\nDESCRIPTION: This snippet demonstrates how to obtain the root logger in Java to work with all loggers in Selenium. It shows the basic code required to access the logger instance for further configuration and usage.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nLogger logger = Logger.getLogger(\"\");\n```\n\n----------------------------------------\n\nTITLE: Evaluate Script in Realm - JavaScript\nDESCRIPTION: This snippet demonstrates how to evaluate a script within a realm using JavaScript and the WebDriver BiDi API. It utilizes the `script.evaluate` method to execute a JavaScript expression in a realm. A valid realm ID is required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('evaluate script in realm', async () => {\n  let result = await connection.script.evaluate({\n    expression: '1+1',\n    target: { realm: realmId },\n  });\n  expect(result.result.value).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Check Element Selected Selenium Python\nDESCRIPTION: This Python code snippet uses Selenium WebDriver to check if a checkbox input element is selected, asserting that the result matches the expected selection state.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nassert driver.find_element(By.NAME, \"checkbox_input\").is_selected() is True\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name - Ruby\nDESCRIPTION: Demonstrates how to retrieve the tag name of a web element using Ruby and Selenium WebDriver. The `tag_name` method returns the tag name as a string. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nexpect(driver.find_element(name: 'email_input').tag_name).to eq 'input'\n```\n\n----------------------------------------\n\nTITLE: Executing Ruby Tests\nDESCRIPTION: This command shows how to execute the tests in Ruby using RSpec.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nrspec spec/getting_started/using_selenium_spec.rb\n```\n\n----------------------------------------\n\nTITLE: Printing Page in Ruby with Selenium\nDESCRIPTION: This snippet demonstrates how to print a page using Selenium in Ruby. It navigates to a URL and then uses the `print_page` method with the `orientation` option set to 'landscape' to get a base64 encoded representation of the page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_94\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.navigate_to 'https://www.selenium.dev'\n\n    base64encodedContent = driver.print_page(orientation: 'landscape')\n```\n\n----------------------------------------\n\nTITLE: Get Selenium Logger in JavaScript\nDESCRIPTION: This snippet shows how to retrieve the webdriver logger in JavaScript. This logger is used to capture and configure logging from the selenium-webdriver library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst logging = require('selenium-webdriver/lib/logging')\nlogger = logging.getLogger('webdriver')\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element with Selenium (CSharp)\nDESCRIPTION: This C# code snippet shows how to scroll to a specific element to make it visible. It uses the `ScrollToElement` method from the `Actions` class to ensure the element is in view. Requires Selenium WebDriver and Actions class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"id-of-element\"));\nnew Actions(driver)\n    .ScrollToElement(element)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Script Message Event - Java\nDESCRIPTION: This snippet shows how to listen for script message events using Java and the WebDriver BiDi API. It uses the `Script.onMessage` method to subscribe to script messages. Requires the WebDriver BiDi dependency and appropriate event handling logic.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\nBiDi bidi = ((HasBiDi) driver).getBiDi();\n        try (Subscription<Script.Message> subscription = bidi.script().onMessage(message -> {\n            Object someParam = message.getData();\n            assertNotNull(someParam);\n        })) {\n\n            BrowsingContext browsingContext = new BrowsingContext(contextId);\n            Script.CallFunctionOptions options = new Script.CallFunctionOptions();\n            options.setThisOwning(true);\n            options.setArguments(List.of(new RemoteValueArgument(\"arg1\", RemoteValue.create())));\n\n            Script.EvaluateResult result = bidi.script().callFunction(\n                browsingContext, \"() => { return window.document.title }\", options);\n            assertEquals(\"\", result.getResult().getValue());\n        }\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to Normal in Python\nDESCRIPTION: This snippet shows how to set the page load strategy to 'normal' in Python using Selenium. WebDriver waits until the load event is fired.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\noptions = Options()\noptions.page_load_strategy = \"normal\"\ndriver = webdriver.Chrome(options=options)\n```\n\n----------------------------------------\n\nTITLE: Force Create Process API - CSharp\nDESCRIPTION: This C# snippet shows how to force the usage of the CreateProcess API when launching Internet Explorer. By setting `ForceCreateProcessApi` to true on the `InternetExplorerOptions`, the browser will be launched using the CreateProcess API.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_25\n\nLANGUAGE: CSharp\nCODE:\n```\nusing System;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.IE;\n\nnamespace ieTest {\n class Program {\n  static void Main(string[] args) {\n   InternetExplorerOptions options = new InternetExplorerOptions();\n   options.ForceCreateProcessApi = true;\n   IWebDriver driver = new InternetExplorerDriver(options);\n   driver.Url = \"https://google.com/ncr\";\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Color Class\nDESCRIPTION: This snippet shows how to import the Color class in different programming languages to work with colors in Selenium WebDriver. The Color class allows you to create color objects and perform operations like comparing and converting colors.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.support.Color;\n```\n\n----------------------------------------\n\nTITLE: Initializing Internet Explorer with Edge Attachment Option\nDESCRIPTION: This code demonstrates how to start Internet Explorer by attaching to Edge if IE is not present on the system, simplifying the configuration. It shows how to set only the `attachToEdgeChrome` option when IE is absent.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.attachToEdgeChrome = true;\n```\n\n----------------------------------------\n\nTITLE: Run All Python Tests with Pytest\nDESCRIPTION: This command executes all tests within the current directory using the pytest testing framework. It automatically discovers and runs all files matching the test naming convention (e.g., test_*.py or *_test.py).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/python/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Initializing ChromeDriver in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a ChromeDriver instance in JavaScript for Selenium WebDriver automation. It utilizes the `Builder` class from the selenium-webdriver library to configure and build a Chrome driver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.zh-cn.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Node with Custom Ports for Hub (Shell)\nDESCRIPTION: This command starts a Selenium Grid Node and registers it with a Hub using custom ports. It specifies the publish-events and subscribe-events ports to match the Hub's configuration.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.ja.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --publish-events tcp://<hub-ip>:8886 --subscribe-events tcp://<hub-ip>:8887\n```\n\n----------------------------------------\n\nTITLE: Getting Named Cookie in Java\nDESCRIPTION: This code snippet demonstrates how to retrieve a cookie by its name using Selenium WebDriver in Java. It navigates to a website, adds a cookie named 'foo', and then retrieves the cookie by its name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ndriver.get(\"https://www.example.com\");\nCookie cookie = new Cookie(\"foo\", \"bar\");\ndriver.manage().addCookie(cookie);\nCookie retrievedCookie = driver.manage().getCookieNamed(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value - Python\nDESCRIPTION: This snippet demonstrates how to get a CSS property value of a web element using Selenium WebDriver in Python. It finds an element by ID and uses the value_of_css_property() method to retrieve the value of the 'background-color' property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nlink = driver.find_element(By.ID, \"namedColor\")\nbackground_color = link.value_of_css_property('background-color')\nassert background_color == \"rgba(0, 0, 255, 1)\"\n```\n\n----------------------------------------\n\nTITLE: Initialize Selenium WebDriver in Ruby\nDESCRIPTION: This Ruby code snippet initializes a Selenium WebDriver instance using ChromeDriver. It navigates to the SeleniumHQ website and prints the title of the page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.pt-br.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nrequire 'selenium-webdriver'\nrequire 'webdrivers'\n\nRSpec.describe 'Hello' do\n  it 'Selenium' do\n    driver = Selenium::WebDriver.for :chrome\n    driver.get 'https://www.selenium.dev'\n    expect(driver.title).to include('Selenium')\n    driver.quit\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium WebDriver in CSharp\nDESCRIPTION: This CSharp code snippet shows a basic usage of Selenium WebDriver, demonstrating how to initialize a browser driver and navigate to a webpage.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.zh-cn.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\npublic class HelloSelenium\n{\n    public static void Main(string[] args)\n    {\n        // Create a new instance of the Chrome driver\n        IWebDriver driver = new ChromeDriver();\n\n        // Navigate to Google\n        driver.Navigate().GoToUrl(\"https://www.google.com/\");\n\n        // Close the browser\n        driver.Quit();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Sessions (Shell)\nDESCRIPTION: This command starts the Selenium Grid Sessions component, which maintains a map of session IDs to the Nodes executing those sessions. It communicates with the Event Bus.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.ja.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar sessions --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443 --port 5556\n```\n\n----------------------------------------\n\nTITLE: Capturing JavaScript Exceptions Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to capture JavaScript exceptions using Chrome DevTools Protocol (CDP) in Selenium. It enables the 'Runtime' domain, and attaches a listener to the 'Runtime.exceptionThrown' event, printing the exception to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.ja.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\n    driver.devtools.runtime.enable\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium in Ruby\nDESCRIPTION: This snippet demonstrates how to start a Selenium WebDriver session in Ruby, navigate to a webpage, and close the browser. It requires the Selenium WebDriver gem to be installed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'selenium-webdriver'\nrequire 'webdrivers'\n\ndescribe 'Hello' do\n  it 'works' do\n    driver = Selenium::WebDriver.for :chrome\n    driver.navigate.to 'https://www.selenium.dev/selenium/web/index.html'\n    driver.quit\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Safari Driver Logging - Java\nDESCRIPTION: This Java code sets the SafariDriver's logging level. It initializes a SafariDriver with the ability to turn logging on or off. Note: the logging location can't be configured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.pt-br.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nSafariOptions options = new SafariOptions();\nSafariDriverService service = new SafariDriverService.Builder().withLogLevel(Level.FINE).build();\nWebDriver driver = new SafariDriver(service, options);\n```\n\n----------------------------------------\n\nTITLE: Get Element Text in Kotlin\nDESCRIPTION: This code snippet demonstrates how to retrieve the text of a web element using Selenium WebDriver in Kotlin. It uses the `getText()` method of the WebElement interface. The method returns the visible text of the element as a String.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_41\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Navigate to URL\ndriver.get(\"https://www.selenium.dev/selenium/web/linked_image.html\")\n\n// retrieves the text of the element\nval text = driver.findElement(By.id(\"justanotherlink\")).getText()\n```\n\n----------------------------------------\n\nTITLE: Get Root Logger in Java\nDESCRIPTION: This snippet demonstrates how to obtain the root logger in Java, which can be used to work with all loggers. The root logger provides a central point for configuring and managing logging across the application.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njava.util.logging.Logger logger = java.util.logging.Logger.getLogger(\"\");\n```\n\n----------------------------------------\n\nTITLE: Check Element Selected Status - Ruby\nDESCRIPTION: This snippet demonstrates how to check if a web element is selected on the page using Selenium WebDriver in Ruby. It finds an element by name and uses the selected? method to determine if it is selected, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\ncheckbox_input = driver.find_element(name: 'checkbox_input')\nexpect(checkbox_input.selected?).to be true\n```\n\n----------------------------------------\n\nTITLE: Setting Silent Capability in Internet Explorer - CSharp\nDESCRIPTION: This snippet demonstrates how to set the 'silent' capability to true for Internet Explorer using C#.  This capability suppresses diagnostic output from IEDriverServer. The code creates InternetExplorerOptions, adds the additional option, and then initializes the WebDriver with these options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_17\n\nLANGUAGE: CSharp\nCODE:\n```\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.AddAdditionalInternetExplorerOption(\"silent\", true);\nIWebDriver driver = new InternetExplorerDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Setting Page Scale - Java\nDESCRIPTION: This Java snippet sets the page scale to 0.5 (50%) using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setScale(0.5);\n\nassertThat(printOptions.getScale()).isEqualTo(0.5);\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions in Selenium (Ruby)\nDESCRIPTION: This code snippet shows how to release all currently pressed keys and pointer buttons using Ruby. It calls the `release_actions` method on the WebDriver. This method does not use perform().\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.zh-cn.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.release_actions\n```\n\n----------------------------------------\n\nTITLE: Printing webpage with page ranges in Kotlin\nDESCRIPTION: This snippet demonstrates how to print a webpage using Selenium's `PrintsPage` interface in Kotlin. It sets the page ranges to \"1-2\" and retrieves the content of the printed PDF.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_90\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.get(\"https://www.selenium.dev\")\nval printer = driver as PrintsPage\n\nval printOptions = PrintOptions()\nprintOptions.setPageRanges(\"1-2\")\n    \nval pdf: Pdf = printer.print(printOptions)\nval content = pdf.content\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element w/ Offset using Selenium Wheel (Ruby)\nDESCRIPTION: Scrolls from a specified element with an offset, by a given amount. Requires the element, x offset, y offset, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'idOfMyElement')\n@driver.action.scroll_from(::Selenium::WebDriver::WheelInput::Origin.element(element, x: 15, y: 25), 20, 50).perform\n```\n\n----------------------------------------\n\nTITLE: Setting Script Timeout in Java\nDESCRIPTION: This code snippet demonstrates how to set the script timeout in Java. This specifies how long a script running in the current browsing context can execute before being interrupted. The default timeout is 30,000 milliseconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_31\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().scriptTimeout(Duration.ofSeconds(30));\n```\n\n----------------------------------------\n\nTITLE: Quitting the Selenium Session\nDESCRIPTION: This snippet demonstrates how to properly close the Selenium WebDriver session. The `quit()` method closes all browser windows and ends the WebDriver process. It is important to call this method at the end of the script to release resources.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Quitting the Selenium Session\nDESCRIPTION: This snippet demonstrates how to properly close the Selenium WebDriver session. The `quit()` method closes all browser windows and ends the WebDriver process. It is important to call this method at the end of the script to release resources.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_42\n\nLANGUAGE: Java\nCODE:\n```\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Navigating to Ruby Directory\nDESCRIPTION: This command changes the current directory to the `ruby` directory within the cloned repository.  This directory contains the Selenium Ruby examples.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/ruby/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd seleniumhq.github.io/examples/ruby\n```\n\n----------------------------------------\n\nTITLE: Pausing Actions in Selenium (Kotlin)\nDESCRIPTION: This code snippet shows how to pause between actions using Kotlin. It uses a Duration object for the pause.  Requires a WebDriver instance and Actions class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.zh-cn.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nval duration = Duration.ofSeconds(2)\n        Actions(driver)\n            .pause(duration)\n            .sendKeys(\"First\")\n            .pause(duration)\n            .sendKeys(\"Second\")\n            .perform()\n```\n\n----------------------------------------\n\nTITLE: Get Element Rectangle in C#\nDESCRIPTION: This code snippet demonstrates how to retrieve the rectangle (dimensions and coordinates) of a web element using Selenium WebDriver in C#. It uses the `Rect` property of the IWebElement interface. The property returns a `Rect` object containing the element's x, y, width, and height.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"range_input\"));\nSize size = element.Size;\nAssert.That(size.Height, Is.EqualTo(15));\n```\n\n----------------------------------------\n\nTITLE: Listening to JavaScript Exceptions with BiDi API in Java\nDESCRIPTION: This code snippet demonstrates how to listen to JS exceptions using the BiDirectional API in Java and register callbacks to process the exception details.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/log.zh-cn.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nBiDi biDi = new BiDi((HasDevTools) driver);\nbiDi.getBidi().log().addJavascriptExceptionListener(event -> {\n  System.out.println(event.getText());\n  System.out.println(event.getExceptionDetails().getText());\n});\n```\n\n----------------------------------------\n\nTITLE: Locating Element to the Right - Java\nDESCRIPTION: Locates a button element to the right of the element with ID 'cancel'.  This approach is useful when a submit button is not easily identifiable, but the cancel button is. It uses the `toRightOf` relative locator in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_52\n\nLANGUAGE: Java\nCODE:\n```\nBy submitLocator = RelativeLocator.with(By.tagName(\"button\")).toRightOf(By.id(\"cancel\"));\n```\n\n----------------------------------------\n\nTITLE: Excluding Switches in Edge Options - C#\nDESCRIPTION: Demonstrates how to exclude specific switches in Edge options using C#.\nThis allows you to override default browser behavior or disable specific features.\nDependencies: Selenium WebDriver, Edge, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_23\n\nLANGUAGE: CSharp\nCODE:\n```\noptions.AddExcludedSwitches(new List<string>() { \"enable-automation\" });\n```\n\n----------------------------------------\n\nTITLE: Python Class Definitions Under the Hood\nDESCRIPTION: This resource delves into the internal workings of Python class definitions, exploring the concepts of metaclasses and their significance.  Understanding this may be helpful in advanced software design or meta-programming scenarios.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/a-smattering-of-selenium-88.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Find Element by CSS Selector - C#\nDESCRIPTION: This snippet shows how to locate a web element using a CSS selector in C#. It initializes a ChromeDriver and utilizes the `FindElement` method with `By.CssSelector` to find the element with the id 'fname'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.CssSelector(\"#fname\"));\n```\n\n----------------------------------------\n\nTITLE: Move to Element Action with Selenium\nDESCRIPTION: This snippet demonstrates how to move the mouse to the center of an element using Selenium. This is often used for hovering over an element. The element must be within the viewport. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_41\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"my-element\"))\nActions(driver).moveToElement(element)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to Normal in JavaScript\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'normal' in JavaScript. The WebDriver waits until the 'load' event fires, meaning all resources are downloaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = new Options();\noptions.setPageLoadStrategy('normal');\nlet driver = await new Builder()\n  .forBrowser('chrome')\n  .setChromeOptions(options)\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - JavaScript\nDESCRIPTION: Demonstrates how to set the browser window's size to a specific width and height in JavaScript using Selenium WebDriver. The code uses `setRect` to define a rectangle with the new dimensions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.manage().window().setRect({ width: 1024, height: 768 });\n```\n\n----------------------------------------\n\nTITLE: Move to Element Action with Selenium\nDESCRIPTION: This snippet demonstrates how to move the mouse to the center of an element using Selenium. This is often used for hovering over an element. The element must be within the viewport. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_39\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'my-element')\n@driver.action.move_to(element).perform\n```\n\n----------------------------------------\n\nTITLE: Listing Downloaded Files in CSharp\nDESCRIPTION: Lists the downloaded files for a RemoteWebDriver session in C#. This action fetches the file names present in the download directory associated with a given session. Requires the RemoteWebDriver instance to have downloads enabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\nvar files = driver.GetDownloadedFiles();\n```\n\n----------------------------------------\n\nTITLE: Setting W3C Capabilities (Before) - JavaScript\nDESCRIPTION: This snippet shows how to set capabilities in Selenium 3 for JavaScript.  It sets browserName, platform, version, build, and name properties.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncaps = {};\ncaps['browserName'] = 'Firefox';\ncaps['platform'] = 'Windows 10';\ncaps['version'] = '92';\ncaps['build'] = myTestBuild;\ncaps['name'] = myTestName;\n```\n\n----------------------------------------\n\nTITLE: Get Selenium Logger in Python\nDESCRIPTION: This snippet shows how to retrieve the Selenium logger in Python, which is used for capturing logs generated by the Selenium library. You can match all submodules by referencing the top level module.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlogger = logging.getLogger('selenium')\n```\n\n----------------------------------------\n\nTITLE: Initialize Selenium WebDriver in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to initialize a Selenium WebDriver instance using ChromeDriver. It navigates to the SeleniumHQ website and prints the title of the page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.pt-br.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.WebDriver\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver: WebDriver = ChromeDriver()\n\n    driver.get(\"https://www.selenium.dev/\")\n    println(driver.title)\n\n    driver.quit()\n}\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Content - CSharp\nDESCRIPTION: Demonstrates how to retrieve the text content of a web element using C# and Selenium WebDriver. The `Text` property returns the rendered text of the element. A WebDriver instance and an element locator are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_38\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement link = driver.FindElement(By.Id(\"justanotherlink\"));\nAssert.That(link.Text, Is.EqualTo(\"Another link\"));\n\n```\n\n----------------------------------------\n\nTITLE: Get Element Rectangle Selenium Ruby\nDESCRIPTION: This Ruby code snippet uses Selenium WebDriver to navigate to a webpage, locate a range input element, and retrieve the dimensions (height and width) of the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.get 'https://www.selenium.dev/selenium/web/inputs.html'\nrange_input = driver.find_element(name: 'range_input')\nexpect(range_input.rect.height).to be > 0\nexpect(range_input.rect.width).to be > 0\n```\n\n----------------------------------------\n\nTITLE: Releasing Actions in Browsing Context - Java\nDESCRIPTION: This Java snippet demonstrates releasing actions within a browsing context using Selenium's BiDi API. It releases all currently pressed keys and buttons. Requires Selenium 4.17 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/input.pt-br.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nInput.release(driver, actions);\n        List<Event> events = server.getEvents();\n        assertThat(events.size()).isEqualTo(1);\n        assertThat(events.get(0).getMethod()).isEqualTo(\"input.inputDispatched\");\n        assertThat(events.get(0).getParams().toString()).contains(\"type=pointerUp\");\n        assertThat(events.get(0).getParams().toString()).contains(\"button=none\");\n```\n\n----------------------------------------\n\nTITLE: Dumping Selenium Configuration as JSON\nDESCRIPTION: The `--dump-config` flag, when used with server commands like `standalone` or `hub`, outputs the Grid's configuration options as a JSON blob. This is useful for debugging configuration issues, especially when environment variables are used for configuration.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2021/a-tour-of-4-new-commands.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nstandalone --dump-config\n```\n\nLANGUAGE: shell\nCODE:\n```\nhub --dump-config\n```\n\n----------------------------------------\n\nTITLE: Click and Release Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a click and release action (a standard click) on an element using Selenium. It combines moving the mouse to the center of an element with pressing and then releasing the left mouse button. This is the standard way to click an element. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('my-element'));\nawait actions.click(element).perform();\n```\n\n----------------------------------------\n\nTITLE: ProductsTest Class in Java\nDESCRIPTION: This Java code shows example tests using the ProductsPage and Product component. It verifies the number of products and the prices of specific products using lambda expressions (predicates) for filtering.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.pt-br.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class ProductsTest {\n    @Test\n    public void testProductInventory() {\n        var productsPage = new ProductsPage(driver); // page object\n        var products = productsPage.getProducts();\n        assertEquals(6, products.size()); // esperado, atual\n    }\n    \n    @Test\n    public void testProductPrices() {\n        var productsPage = new ProductsPage(driver);\n\n        // Passa uma expressão lambda (predicado) para filtrar a lista de produtos\n        // O predicado ou \"estratégia\" é o comportamento passado como parâmetro\n        var backpack = productsPage.getProduct(p -> p.getName().equals(\"Backpack\")); // page component object\n        var bikeLight = productsPage.getProduct(p -> p.getName().equals(\"Bike Light\"));\n\n        assertEquals(new BigDecimal(\"29.99\"), backpack.getPrice());\n        assertEquals(new BigDecimal(\"9.99\"), bikeLight.getPrice());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtualAuthenticatorOptions in JavaScript\nDESCRIPTION: This snippet shows how to initialize VirtualAuthenticatorOptions in JavaScript to configure a virtual authenticator with desired capabilities. It sets properties like protocol, transport, residentKey, and userVerification.  These settings determine how the virtual authenticator will behave during WebAuthn interactions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  protocol: 'ctap2',\n  transport: 'usb',\n  residentKey: true,\n  userVerification: true\n};\n```\n\n----------------------------------------\n\nTITLE: Get Element Attribute - Java\nDESCRIPTION: This snippet demonstrates how to get an attribute value of a web element using Selenium WebDriver in Java. It finds an element by name and uses the getAttribute() method to retrieve the value of the 'value' attribute.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_42\n\nLANGUAGE: java\nCODE:\n```\nWebElement element = driver.findElement(By.name(\"email_input\"));\nString attributeValue = element.getAttribute(\"value\");\nSystem.out.println(\"Attribute value: \" + attributeValue);\nassertThat(attributeValue).isEqualTo(\"\" );\n```\n\n----------------------------------------\n\nTITLE: Setting IE Driver Supporting Files Path - C#\nDESCRIPTION: This C# snippet demonstrates how to set the extract path option for the Internet Explorer driver. This is used to specify the location where the IEDriverServer.exe is extracted to.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_38\n\nLANGUAGE: CSharp\nCODE:\n```\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.ExtractPath = \"C:\\\\path\\\\to\\\\extract\\\\directory\";\nvar driver = new InternetExplorerDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's Select class, specifically by matching the visible text of the option. The `select_by_visible_text()` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nselect.select_by_visible_text(\"Four\")\n```\n\n----------------------------------------\n\nTITLE: Extend LoadableComponent Java\nDESCRIPTION: This Java code demonstrates extending the `LoadableComponent` class to create a more robust PageObject.  It requires implementing `load()` to navigate to the page and `isLoaded()` to verify the page has loaded correctly.  The `isLoaded()` method uses JUnit assertions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.zh-cn.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class EditIssue extends LoadableComponent<EditIssue> {\n  // rest of class ignored for now\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Page with Options in Java\nDESCRIPTION: This Java snippet demonstrates how to print a web page using Selenium, setting the page range to 1-2. It navigates to a URL, configures the print options, and retrieves the printed content as a PDF.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_51\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.print.PrintOptions;\n\n    driver.get(\"https://www.selenium.dev\");\n    printer = (PrintsPage) driver;\n\n    PrintOptions printOptions = new PrintOptions();\n    printOptions.setPageRanges(\"1-2\");\n\n    Pdf pdf = printer.print(printOptions);\n    String content = pdf.getContent();\n```\n\n----------------------------------------\n\nTITLE: Setting Strict File Interactability with Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to configure strict file interaction behavior. This setting determines whether strict checks are applied when interacting with file input elements, affecting `send_keys` behavior with hidden uploads.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\noptions.strict_file_interactability = true\n```\n\n----------------------------------------\n\nTITLE: Delete Session From Node\nDESCRIPTION: Deletes a WebDriver session from a specific node. It terminates the session and removes it from the active session map on that node. Attempting to use the deleted session ID will result in an error.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.ja.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://localhost:5555/se/grid/node/session/<session-id>' --header 'X-REGISTRATION-SECRET: <secret>'\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes (Python)\nDESCRIPTION: This Python code snippet demonstrates how to add custom pointer event attributes to a Pen action in Selenium. It sets attributes like width, height, pressure, tangential pressure, tiltX, and tiltY to simulate more realistic pen behavior.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.ja.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npen = Pen(\"pen1\")\n\nattributes = {\n    \"width\": 18,\n    \"height\": 20,\n    \"pressure\": 0.4,\n    \"tangentialPressure\": -0.8,\n    \"tiltX\": 70,\n    \"tiltY\": -60\n}\n\nelement = driver.find_element(By.ID, \"example\")\n\nActionBuilder(driver)\\\n    .move_to_element(element)\\\n    .tick(pen.create_pointer_move(duration=1, x=0, y=0, origin=element, options=attributes))\\\n    .tick(pen.create_pointer_down(button=MouseButton.LEFT))\\\n    .tick(pen.create_pointer_up(button=MouseButton.LEFT))\\\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Quitting a WebDriver Session - CSharp\nDESCRIPTION: This C# code snippet illustrates the correct way to terminate a WebDriver session using the `Quit()` method. This ensures that all associated browser processes are closed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.zh-cn.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Quit();\n```\n\n----------------------------------------\n\nTITLE: Navigate to a URL using WebDriver BiDi in JavaScript\nDESCRIPTION: This snippet demonstrates how to navigate to a specific URL using WebDriver BiDi in JavaScript. It uses the `BrowsingContext` to navigate to the specified URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait browsingContext.navigate(url);\n```\n\n----------------------------------------\n\nTITLE: Merging Capabilities in Java\nDESCRIPTION: This snippet shows how to correctly merge capabilities in Java, assigning the result of the merge operation to a new object, as the calling object is no longer mutated.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nMutableCapabilities capabilities = new MutableCapabilities();\ncapabilities.setCapability(\"platformVersion\", \"Windows 10\");\nFirefoxOptions options = new FirefoxOptions();\noptions.setHeadless(true);\noptions.merge(capabilities);\n\n// As a result, the `options` object was getting modified.\n```\n\nLANGUAGE: Java\nCODE:\n```\nMutableCapabilities capabilities = new MutableCapabilities();\ncapabilities.setCapability(\"platformVersion\", \"Windows 10\");\nFirefoxOptions options = new FirefoxOptions();\noptions.setHeadless(true);\noptions = options.merge(capabilities);\n\n// The result of the `merge` call needs to be assigned to an object.\n```\n\n----------------------------------------\n\nTITLE: Drain Node with cURL\nDESCRIPTION: This snippet drains a Node, gracefully shutting it down after all ongoing sessions are complete. It prevents the Node from accepting new session requests. An `X-REGISTRATION-SECRET` header is required for authorization. The Grid URL depends on the deployment mode (Standalone, Hub-Node, or Router).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request POST 'http://localhost:4444/se/grid/distributor/node/<node-id>/drain' --header 'X-REGISTRATION-SECRET: <secret> '\n```\n\n----------------------------------------\n\nTITLE: Setting Console Output - Ruby\nDESCRIPTION: Demonstrates how to configure the GeckoDriver service to output logs to the console in Ruby. This is helpful for debugging Selenium tests. Requires the Selenium WebDriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_22\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.firefox(log_output: $stdout)\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Exceptions in Ruby\nDESCRIPTION: This Ruby snippet demonstrates capturing JavaScript exceptions using Selenium and CDP. The code uses `execute_cdp` to enable the Runtime and retrieve the exception details.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.zh-cn.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.execute_cdp 'Runtime.enable'\nputs driver.execute_cdp('Runtime.getExceptionDetails')\n```\n\n----------------------------------------\n\nTITLE: Release All Actions - Ruby\nDESCRIPTION: This Ruby snippet releases all currently depressed keys and pointer buttons by calling the release_actions method on the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.ja.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.release_actions\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse from Viewport Origin in Ruby\nDESCRIPTION: This Ruby code moves the mouse pointer relative to the top-left corner of the current viewport by a specified offset. It uses the #move_by method on an instance of Selenium::WebDriver::ActionBuilder.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.action.move_by(20, 100).perform\n```\n\n----------------------------------------\n\nTITLE: Install Firefox Extension (Java)\nDESCRIPTION: This Java code snippet installs a Firefox extension (.xpi file) after the driver is initialized.  It retrieves the driver as an `AddHasExtensions` interface in order to install the extension.  Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_31\n\nLANGUAGE: java\nCODE:\n```\n((AddHasExtensions) driver).installExtension(new File(\"/path/to/extension.xpi\"));\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Add-ons in Firefox with Selenium (JavaScript)\nDESCRIPTION: This JavaScript snippet uninstalls a Firefox add-on given its ID.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.removeAddon('addon@id');\n```\n\n----------------------------------------\n\nTITLE: Starting Session Map Command (Redis)\nDESCRIPTION: This bash command starts the Session Map service within Selenium Grid, configured to store session data in a Redis cache. It uses coursier to download the selenium-session-map-redis dependency and uses a configuration file to specify the Redis connection details.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.zh-cn.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nexport SE_VERSION=<current_selenium_version>\njava -jar selenium-server-${SE_VERSION}.jar \\\n--ext $(coursier fetch -p org.openqa.selenium:selenium-session-map-redis:${SE_VERSION}) \\\nsessions --publish-events tcp://localhost:4442 \\\n--subscribe-events tcp://localhost:4443 \\\n--port 5556 --config sessions.toml \n```\n\n----------------------------------------\n\nTITLE: Response Started Event - Selenium BiDi - JavaScript\nDESCRIPTION: This JavaScript code listens for the 'Response Started' event using Selenium BiDi, logging the URL of the response as it starts. It utilizes `Network.onResponseStarted` for event handling. Requires Selenium 4.18 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait bidiNetwork.onResponseStarted(event => {\n  console.log(event.response.url);\n});\n```\n\n----------------------------------------\n\nTITLE: Drain Node\nDESCRIPTION: Drains a node in the Selenium Grid, allowing it to gracefully shut down after all running sessions have completed. No new sessions will be accepted by the node after this command is issued.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.ja.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request POST 'http://localhost:4444/se/grid/distributor/node/<node-id>/drain' --header 'X-REGISTRATION-SECRET: <secret> '\n```\n\n----------------------------------------\n\nTITLE: GraphQL: Querying URI of Each Node and Grid (curl)\nDESCRIPTION: This curl command fetches the URI of each node in the Selenium Grid using GraphQL. It sends a POST request to the GraphQL endpoint and retrieves the URI information.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.ja.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\": \"{ nodesInfo { nodes { uri } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtualAuthenticatorOptions in C#\nDESCRIPTION: This code snippet shows how to initialize VirtualAuthenticatorOptions in C#. It sets properties like protocol type, domain, and resident key and user verification requirements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions()\n{\n    ProtocolType = Protocol.Ctap2,\n    Domain = \"localhost\",\n    ResidentKeyRequired = true,\n    UserVerificationRequired = true\n};\n\n```\n\n----------------------------------------\n\nTITLE: Forward Click with Selenium\nDESCRIPTION: Performs a forward click by pressing and releasing mouse button 4.  It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"clickable\"));\nActions actions = new Actions(driver);\nactions.moveToElement(element)\n        .buttonDown(MouseButton.FORWARD)\n        .buttonUp(MouseButton.FORWARD)\n        .perform();\n```\n\n----------------------------------------\n\nTITLE: Starting Redis Container with Docker Compose\nDESCRIPTION: This bash command starts the Redis container defined in the docker-compose.yml file in detached mode. The container runs in the background, allowing other commands to be executed.  This command starts the Redis server.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.en.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshots with Selenium WebDriver\nDESCRIPTION: This entry discusses taking screenshots using Selenium WebDriver in C#. It references a blog post that likely provides code examples and instructions on how to implement screenshot functionality within C# Selenium tests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2011/a-smattering-of-selenium-65.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Creating Code Tabs with Selenium WebDriver in Java\nDESCRIPTION: This Java code snippet demonstrates how to initialize a Selenium WebDriver instance for Chrome. It's a simple example to show how to start a browser session using the ChromeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.ja.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n```\n\n----------------------------------------\n\nTITLE: Getting Root Logger in Java\nDESCRIPTION: This snippet demonstrates how to obtain the root logger in Java using the `java.util.logging` package. This provides access to all loggers. Requires the `java.util.logging` package. This is typically done to then configure the handler and formatter to adjust the logs generated.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njava.util.logging.Logger logger = java.util.logging.Logger.getLogger(\"\");\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - Python\nDESCRIPTION: This Python snippet demonstrates how to retrieve the dimensions (width and height) of the browser window using Selenium WebDriver. It shows two approaches: accessing each dimension individually and storing the dimensions in a dictionary.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n    # Access each dimension individually\nwidth = driver.get_window_size().get(\"width\")\nheight = driver.get_window_size().get(\"height\")\n\n    # Or store the dimensions and query them later\nsize = driver.get_window_size()\nwidth1 = size.get(\"width\")\nheight1 = size.get(\"height\")\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name in C#\nDESCRIPTION: This code snippet demonstrates how to retrieve the tag name of a web element using Selenium WebDriver in C#. It uses the `TagName` property of the IWebElement interface. The property returns the tag name as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Name(\"email_input\"));\nAssert.That(element.TagName, Is.EqualTo(\"input\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level - Ruby\nDESCRIPTION: Demonstrates setting the log level in Ruby for the Edge driver service.\nThis allows controlling the verbosity of the Edge driver's logs.\nDependencies: Selenium WebDriver, Edge, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_35\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.edge(log_level: :debug)\ndriver = Selenium::WebDriver.for :edge, service: service, options: options\n```\n\n----------------------------------------\n\nTITLE: Listing Downloaded Files - Bash\nDESCRIPTION: This curl command retrieves a list of files that have been downloaded during a specific session. It sends a GET request to the `/session/<sessionId>/se/files` endpoint.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.pt-br.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:4444/session/90c0149a-2e75-424d-857a-e78734943d4c/se/files\"\n```\n\n----------------------------------------\n\nTITLE: Using Safari Technology Preview - Java\nDESCRIPTION: This Java code snippet demonstrates how to configure the SafariDriver to use the Safari Technology Preview browser.  This is achieved using the `setTechnologyPreview` method on the `SafariOptions` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.pt-br.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nSafariOptions options = new SafariOptions();\noptions.setTechnologyPreview(true);\nWebDriver driver = new SafariDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Enable WebSocket URL in Java for BiDi\nDESCRIPTION: This code snippet demonstrates how to enable the WebSocket URL in Java when setting browser options to enable BiDi (Bidirectional) communication. Setting the 'webSocketUrl' capability to 'true' allows Selenium to establish a WebSocket connection for two-way communication with the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\noptions.setCapability(\"webSocketUrl\", true);\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Configuration TOML\nDESCRIPTION: Enables basic authentication for the Selenium Grid router by setting a username and password. These credentials will be required to access the Grid UI and start new sessions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.ja.md#_snippet_6\n\nLANGUAGE: TOML\nCODE:\n```\n[router]\nusername = \"admin\"\npassword = \"myStrongPassword\"\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Edge Options - Ruby\nDESCRIPTION: Demonstrates how to add command-line arguments to Edge options in Ruby.\nThis allows for customizing the Edge browser's launch behavior with Selenium.\nDependencies: Selenium WebDriver, EdgeDriver, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.add_argument('--start-maximized')\n```\n\n----------------------------------------\n\nTITLE: Defining ActionBot for Selenium Abstraction (Java)\nDESCRIPTION: This code defines an `ActionBot` class, which provides action-oriented abstractions over the raw Selenium API.  It encapsulates common actions like `click`, `submit`, and `type`.  The `type` method clears the input field before typing and sends a return key to move focus.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.ja.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class ActionBot {\n  private final WebDriver driver;\n\n  public ActionBot(WebDriver driver) {\n    this.driver = driver;\n  }\n\n  public void click(By locator) {\n    driver.findElement(locator).click();\n  }\n\n  public void submit(By locator) {\n    driver.findElement(locator).submit();\n  }\n\n  /** \n   * Type something into an input field. WebDriver doesn't normally clear these\n   * before typing, so this method does that first. It also sends a return key\n   * to move the focus out of the element.\n   */\n  public void type(By locator, String text) { \n    WebElement element = driver.findElement(locator);\n    element.clear();\n    element.sendKeys(text + \"\\n\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium with Gem\nDESCRIPTION: Installs the Selenium WebDriver gem for Ruby using the `gem install` command. This command installs the Selenium library and makes it available for use in Ruby projects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.zh-cn.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngem install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: Perform Actions in Browsing Context - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to perform actions in a browsing context using WebDriver BiDi. It uses the `browsingContext.performActions` method to simulate a key press. The snippet assumes that `driver` and `browsingContextId` are already defined and initialized with appropriate values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/input.zh-cn.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n    await driver.browsingContext.performActions({\n      context: browsingContextId,\n      actions: [keyPressAction],\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing load() and isLoaded() in LoadableComponent (Java)\nDESCRIPTION: Shows the implementation of the `load()` and `isLoaded()` methods when extending `LoadableComponent` in Selenium WebDriver using Java. The `load()` method navigates to the GitHub new issue page, and the `isLoaded()` method asserts that the current URL ends with \"/new\" to verify page load. It depends on JUnit's `assertTrue` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.ja.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  @Override\n  protected void load() {\n    driver.get(\"https://github.com/SeleniumHQ/selenium/issues/new?assignees=&labels=I-defect%2Cneeds-triaging&projects=&template=bug-report.yml&title=%5B%F0%9F%90%9B+Bug%5D%3A+\");\n  }\n\n  @Override\n  protected void isLoaded() throws Error {\n    String url = driver.getCurrentUrl();\n    assertTrue(\"Not on the issue entry page: \" + url, url.endsWith(\"/new\"));\n  }\n```\n\n----------------------------------------\n\nTITLE: Converting and Comparing Color Formats - Selenium WebDriver\nDESCRIPTION: This snippet shows how to convert a Color object to different formats (HEX, RGBA, RGB) and compare them to static values in Ruby. This allows for flexible color validation by ensuring the color matches the expected format and value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_26\n\nLANGUAGE: Ruby\nCODE:\n```\nassert(login_button_background_colour.hex == '#ff69b4')\nassert(login_button_background_colour.rgba == 'rgba(255, 105, 180, 1)')\nassert(login_button_background_colour.rgb == 'rgb(255, 105, 180)')\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtualAuthenticatorOptions in C#\nDESCRIPTION: This code snippet shows how to initialize VirtualAuthenticatorOptions in C#, setting protocol, domain, user verification, and transport properties.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions()\n{\n    Protocol = Protocol.Ctap2,\n    Domain = \"localhost\",\n    UserVerification = true\n};\noptions.AddTransport(Transport.Usb);\n```\n\n----------------------------------------\n\nTITLE: De-selecting Option in Select List - Java\nDESCRIPTION: This Java code snippet shows how to de-select an option from a multiple select list using the Selenium WebDriver's Select class. It assumes that you have already located the select element and have an instance of the Select class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_42\n\nLANGUAGE: Java\nCODE:\n```\nselect.deselectByVisibleText(\"Cheese\");\n```\n\n----------------------------------------\n\nTITLE: Defining Transparent Color in Java\nDESCRIPTION: This snippet shows how to define the 'transparent' color using the Color.fromString() method in Java. Browsers may return 'transparent' as the color value for elements without a defined color, and this allows you to handle that case.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nprivate final Color TRANSPARENT = Color.fromString(\"transparent\");\n```\n\n----------------------------------------\n\nTITLE: Displaying Standalone Component Help\nDESCRIPTION: This command displays configuration help specific to the standalone component of the Selenium Grid. Replace `<version>` with the actual Selenium server version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.pt-br.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar standalone --help\n```\n\n----------------------------------------\n\nTITLE: Enabling Managed Downloads in CSharp\nDESCRIPTION: Enables managed downloads for a RemoteWebDriver instance in C#, allowing Selenium to manage browser download locations. Requires setting the 'se:downloadsEnabled' capability to true using BrowserOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_10\n\nLANGUAGE: CSharp\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.AddAdditionalCapability(\"se:downloadsEnabled\", true, true);\nRemoteWebDriver driver = new RemoteWebDriver(new Uri(\"http://localhost:4444\"), options);\n```\n\n----------------------------------------\n\nTITLE: WebDriverWait After Selenium 4 (Java)\nDESCRIPTION: This snippet shows the updated way to use WebDriverWait in Selenium 4, using `Duration` to specify the timeout.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_23\n\nLANGUAGE: Java\nCODE:\n```\nnew WebDriverWait(driver, Duration.ofSeconds(3))\n  .until(ExpectedConditions.elementToBeClickable(By.cssSelector(\"#id\")));\n\n  Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)\n  .withTimeout(Duration.ofSeconds(30))\n  .pollingEvery(Duration.ofSeconds(5))\n  .ignoring(NoSuchElementException.class);\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - Eager - CSharp\nDESCRIPTION: This C# code snippet sets the page load strategy to Eager for Chrome. It navigates to example.com.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace pageLoadStrategy {\n  class pageLoadStrategy {\n    public static void Main(string[] args) {\n      var chromeOptions = new ChromeOptions();\n      chromeOptions.PageLoadStrategy = PageLoadStrategy.Eager;\n      IWebDriver driver = new ChromeDriver(chromeOptions);\n      try {\n        driver.Navigate().GoToUrl(\"https://example.com\");\n      } finally {\n        driver.Quit();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Python Example (pytest)\nDESCRIPTION: This full Python example demonstrates a Selenium test using pytest. It navigates to a website and asserts the title. Requires pytest and Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom selenium import webdriver\n\n@pytest.fixture\ndef driver():\n    driver = webdriver.Chrome()\n    yield driver\n    driver.quit()\n\ndef test_eight_components(driver):\n    driver.get(\"https://www.selenium.dev/selenium/web/index.html\")\n    assert driver.title == \"SeleniumHQ Browser Automation\"\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level - Java\nDESCRIPTION: Demonstrates how to configure the GeckoDriver service to set the log level in Java. This allows controlling the verbosity of the logs. Requires Selenium WebDriver and GeckoDriverService.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_23\n\nLANGUAGE: Java\nCODE:\n```\nGeckoDriverService service = new GeckoDriverService.Builder()\n    .withLogLevel(FirefoxDriverLogLevel.DEBUG)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Listing Downloaded Files via Curl (Bash)\nDESCRIPTION: This bash snippet shows how to list downloaded files for a session using `curl` by sending a GET request to `/session/<sessionId>/se/files` endpoint.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:4444/session/90c0149a-2e75-424d-857a-e78734943d4c/se/files\"\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Title with Selenium\nDESCRIPTION: This snippet retrieves the title of the current webpage loaded in the browser. It uses the `title` property of the WebDriver instance.  Dependencies include a properly initialized WebDriver and a loaded webpage.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nval title = driver.title\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name in JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve the tag name of a web element using Selenium WebDriver in JavaScript. It uses the `getTagName()` method. The method returns the tag name as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('get tag name', async () => {\n  expect(await driver.findElement(By.name('email_input')).getTagName()).toBe('input');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Detach Option to Keep Browser Open - JavaScript\nDESCRIPTION: Demonstrates setting the detach option in JavaScript to keep the Edge browser open after the script finishes.\nThis allows inspecting the browser state after the test.\nDependencies: Selenium WebDriver, Edge, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nopts.set('detach', true);\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium WebDriver in JavaScript\nDESCRIPTION: This Javascript code snippet is a simple Selenium WebDriver usage example. It navigates to a website and closes the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.zh-cn.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {Builder, Browser, By, Key, until} = require('selenium-webdriver');\n\nasync function helloSelenium() {\n  let driver = await new Builder().forBrowser(Browser.CHROME).build();\n  try {\n    await driver.get('https://www.google.com');\n    await driver.quit();\n  } finally {\n    await driver.quit();\n  }\n}\n\nhelloSelenium();\n```\n\n----------------------------------------\n\nTITLE: Add Selenium Dependency in CSProj file\nDESCRIPTION: This XML snippet shows how to manually add the Selenium.WebDriver dependency to a C# project's `.csproj` file. It specifies the package reference within an ItemGroup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.en.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Selenium.WebDriver\" Version=\"4.18.0\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium Python\nDESCRIPTION: This snippet demonstrates how to check if a disabled option can be selected in Python. It attempts to select a disabled option and asserts that an exception is thrown. Requires Selenium 4.5 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\nwith pytest.raises(InvalidElementStateException):\n    select.select_by_visible_text(\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Register Authentication for Specific Site - Java\nDESCRIPTION: Registers a username and password for authentication on a specific site using the `HasAuthentication` interface and the `register` method. The authentication will only be triggered if the URI's host contains \"mysite.com\".\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2021/a-tour-of-4-authentication.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n// Or use something different for specific sites\nauthentication.register(\n  uri -> uri.getHost().contains(\"mysite.com\"),\n  new UsernameAndPassword(\"AzureDiamond\", \"hunter2\"));\n```\n\n----------------------------------------\n\nTITLE: Quitting WebDriver Session in Selenium\nDESCRIPTION: This snippet ends the WebDriver session, closing the browser instance and releasing associated resources.  It is essential to call this method at the end of a test to avoid resource leaks. Dependencies: Initialized WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_47\n\nLANGUAGE: kotlin\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies in Kotlin\nDESCRIPTION: This code snippet demonstrates how to delete all cookies from the current browser context using Selenium WebDriver in Kotlin. It navigates to a website, adds two cookies, and then deletes all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://www.example.com\")\n        driver.manage().addCookie(Cookie(\"test1\", \"cookie1\"))\n        driver.manage().addCookie(Cookie(\"test2\", \"cookie2\"))\n\n        // deletes all cookies\n        driver.manage().deleteAllCookies()\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium WebDriver in Ruby\nDESCRIPTION: This Ruby code snippet presents a basic Selenium WebDriver initialization. It sets up a driver instance and navigates to a webpage.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.zh-cn.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nrequire 'selenium-webdriver'\nrequire 'rspec'\n\nRSpec.describe 'Hello' do\n  it 'works' do\n    driver = Selenium::WebDriver.for :chrome\n    driver.get 'https://www.google.com'\n    expect(driver.title).to eq('Google')\n    driver.quit\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Name in Python\nDESCRIPTION: This snippet shows how to set the platform name using Selenium in Python. It retrieves the OS name.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\noptions = Options()\noptions.platform_name = \"linux\"\noptions.platform_name\n```\n\n----------------------------------------\n\nTITLE: Get Selenium Grid Tracing Configuration Help\nDESCRIPTION: This command retrieves information on configuring tracing for Selenium Grid using OpenTelemetry and Jaeger. It uses the 'info tracing' command to provide instructions for exporting and visualizing traces.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.zh-cn.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar info tracing\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium Kotlin\nDESCRIPTION: This snippet demonstrates how to select an option in a Select element by its index in Kotlin. It uses the `selectByIndex()` method of the Select object. The index is zero-based. It throws NoSuchElementException if the index is out of bounds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\nselect.selectByIndex(2)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Get status of each node\nDESCRIPTION: This command uses curl to execute a GraphQL query and retrieve the status of each node in the grid from the `nodesInfo` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.zh-cn.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\": \"{ nodesInfo { nodes { status } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Install Selenium from Wheel File with Pip in Python\nDESCRIPTION: This command demonstrates how to install the Selenium library in Python using pip from a wheel file. This allows for installing a specific version of Selenium from a local file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.en.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install selenium-x.x.x.-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Name with Options - Java\nDESCRIPTION: This code snippet demonstrates how to set the browser name using the Options class in Java for Selenium. It creates an instance of ChromeOptions and asserts that the browser name is 'chrome'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\nassertThat(options.getBrowserName()).isEqualTo(\"chrome\");\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options in Selenium JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the selected options from a Select element in JavaScript. It uses the `getAllSelectedOptions()` method of the Select object, returning a list of WebElements representing the selected options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst selectedOptions = await select.getAllSelectedOptions();\n```\n\n----------------------------------------\n\nTITLE: Getting Element Attribute\nDESCRIPTION: This snippet demonstrates how to retrieve the value of a specific attribute of an element using Selenium. The `attribute` method is used to fetch the value of the `title` attribute of the located element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_39\n\nLANGUAGE: Ruby\nCODE:\n```\ntitle = search_box.attribute('title')\n```\n\n----------------------------------------\n\nTITLE: Adding Pause in Actions - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to insert a pause between actions using the `pause` method with a specified duration in seconds. It uses `action.pause` to pause for 0.1 seconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.action.pause(0.1).perform\n```\n\n----------------------------------------\n\nTITLE: Finding Elements (After) - Java\nDESCRIPTION: This Java snippet demonstrates the correct way of finding multiple elements using `findElements(By.*)` methods in Selenium 4.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\ndriver.findElements(By.className(\"className\"));\ndriver.findElements(By.cssSelector(\".className\"));\ndriver.findElements(By.id(\"elementId\"));\ndriver.findElements(By.linkText(\"linkText\"));\ndriver.findElements(By.name(\"elementName\"));\ndriver.findElements(By.partialLinkText(\"partialText\"));\ndriver.findElements(By.tagName(\"elementTagName\"));\ndriver.findElements(By.xpath(\"xPath\"));\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Selenium Kotlin\nDESCRIPTION: This snippet demonstrates how to select an option in a Select element by its value attribute in Kotlin. It uses the `selectByValue()` method of the Select object. It throws NoSuchElementException if no matching option is found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nselect.selectByValue(\"two\")\n```\n\n----------------------------------------\n\nTITLE: User Prompt Opened Event in Java\nDESCRIPTION: This code snippet demonstrates how to listen for the 'browsingContext.userPromptOpened' event using Selenium WebDriver's BiDi API in Java. Requires Selenium version 4.15 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_53\n\nLANGUAGE: Java\nCODE:\n```\nWebDriverBiDi bidi = (WebDriverBiDi) driver;\n\n    BiDiSubscription<BrowsingContextModule.FragmentNavigatedEvent> subscription =\n        new BiDiSubscription<>(BrowsingContextModule.EVENT_FRAGMENT_NAVIGATED,\n            e -> System.out.println(\"Context \" + e.getContext().getId() +\n                \" navigated to \" + e.getUrl()));\n\n    bidi.subscribe(subscription);\n    driver.get(\"https://www.selenium.dev/selenium4/demos/blank.html#fragment\");\n    bidi.unsubscribe(subscription);\n```\n\n----------------------------------------\n\nTITLE: Setting the Log Level\nDESCRIPTION: This code sets the log level for the FirefoxDriver. Available log levels include `fatal`, `error`, `warn`, `info`, `config`, `debug`, and `trace`. The desired log level is passed to the `log_level` argument.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nservice = FirefoxService(log_level=\"debug\")\ndriver = FirefoxDriver(service=service, options=options)\n```\n\n----------------------------------------\n\nTITLE: File Upload using sendKeys JavaScript\nDESCRIPTION: This JavaScript snippet shows how to upload a file by sending its path to the file input element using the sendKeys method. It assumes the element is an input of type 'file'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/file_upload.zh-cn.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst filePath = '/path/to/some/file.txt';\nawait driver.findElement(By.css('#file-upload')).sendKeys(filePath);\n```\n\n----------------------------------------\n\nTITLE: Java Selenium Setup Without Selenium Manager\nDESCRIPTION: This Java code snippet shows a typical setup for Selenium before the introduction of Selenium Manager. It involves manually setting the system property for the ChromeDriver executable, which is now automated by Selenium Manager.  It creates a ChromeOptions object and uses it to instantiate a ChromeDriver object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.pt-br.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nSystem.setProperty(\"webdriver.chrome.driver\", \"/path/to/chromedriver\");\nChromeOptions options = new ChromeOptions();\nWebDriver driver = new ChromeDriver(options);\ndriver.get(\"https://www.selenium.dev/\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Setting the Log Level\nDESCRIPTION: This code sets the log level for the GeckoDriverService. Available log levels include `fatal`, `error`, `warn`, `info`, `config`, `debug`, and `trace`. The desired log level is passed to the `withLogLevel` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_23\n\nLANGUAGE: Java\nCODE:\n```\nGeckoDriverService service = new GeckoDriverService.Builder().withLogLevel(FirefoxDriverLogLevel.DEBUG).build();\nWebDriver driver = new FirefoxDriver(service, new FirefoxOptions());\n```\n\n----------------------------------------\n\nTITLE: Chaining Relative Locators - JavaScript\nDESCRIPTION: Chains relative locators in JavaScript to locate a button element below the element with ID 'email' and to the right of the element with ID 'cancel'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_65\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet submitLocator = locateWith(By.tagName('button')).below(By.id('email')).toRightOf(By.id('cancel'));\n```\n\n----------------------------------------\n\nTITLE: Check Element Displayed Status - Ruby\nDESCRIPTION: This snippet demonstrates how to check if a web element is displayed on the page using Selenium WebDriver in Ruby. It finds an element by name and uses the displayed? method to determine its visibility, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nemail_input = driver.find_element(name: 'email_input')\nexpect(email_input.displayed?).to be true\n```\n\n----------------------------------------\n\nTITLE: Find All Elements by Tag Name in JavaScript\nDESCRIPTION: This snippet retrieves all web elements with the tag name 'li' in JavaScript using Selenium WebDriver. The `findElements` method returns a list of all matching elements. An empty list is returned if no matching elements are found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst plants = await driver.findElements(By.tagName('li'));\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Levels in Ruby\nDESCRIPTION: This snippet demonstrates how to change the level of the logger in Ruby. The logging level is set to :debug, which ensures that all debugging information is captured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nSelenium::WebDriver.logger.level = :debug\n```\n\n----------------------------------------\n\nTITLE: Click Element with Selenium WebDriver in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to navigate to a URL and click an element using Selenium WebDriver.  It first navigates to the specified URL, finds the element by its name, and then performs a click action on it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Navigate to Url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n// Click the element\ndriver.findElement(By.name(\"color_input\")).click();\n\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Firefox Options - Ruby\nDESCRIPTION: Demonstrates how to add command-line arguments to Firefox options in Ruby. This allows configuring browser behavior, such as running in headless mode. Requires the Selenium WebDriver gem and `Selenium::WebDriver::Firefox::Options`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.add_argument('--headless')\n```\n\n----------------------------------------\n\nTITLE: Getting All Options in Java\nDESCRIPTION: Demonstrates how to retrieve all options from a Select element in Java. It uses the getOptions() method to return a list of WebElements representing the options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nList<WebElement> options = select.getOptions();\n```\n\n----------------------------------------\n\nTITLE: Key Up Action in Selenium (Ruby)\nDESCRIPTION: Demonstrates how to simulate releasing a key using the Actions API in Ruby. This example shows how to release the SHIFT key on an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nelement = @driver.find_element(tag_name: 'input')\nactions = Selenium::WebDriver::Interactions.new(@driver)\nactions.key_down(element, :shift).send_keys('text').key_up(element, :shift)\nactions.perform\n```\n\n----------------------------------------\n\nTITLE: Iterate and Extract Text from Elements\nDESCRIPTION: This snippet demonstrates how to iterate through a list of WebElements obtained using `findElements` and extract the text content of each element. It navigates to a webpage, retrieves all `<p>` elements, and then prints the text of each element to the console. Dependencies: selenium-webdriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {Builder, By} = require('selenium-webdriver');\n(async function example() {\n    let driver = await new Builder().forBrowser('firefox').build();\n    try {\n        // Navigate to Url\n        await driver.get('https://www.example.com');\n\n        // Get all the elements available with tag 'p'\n        let elements = await driver.findElements(By.css('p'));\n        for(let e of elements) {\n            console.log(await e.getText());\n        }\n    }\n    finally {\n        await driver.quit();\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Managing Selenium Grid Version with Selenium Manager\nDESCRIPTION: This command uses Selenium Manager to discover and manage the version of Selenium Grid, storing the `selenium-server.jar` in the local cache.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.zh-cn.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./selenium-manager --grid\n```\n\n----------------------------------------\n\nTITLE: Setting Up WebDriver in Ruby\nDESCRIPTION: This code snippet demonstrates how to set up a WebDriver before the test execution in Ruby using RSpec. It initializes the ChromeDriver and navigates to a specific URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n  @driver = Selenium::WebDriver.for :chrome\n  @driver.get 'https://www.selenium.dev/selenium/web/web-form.html'\n```\n\n----------------------------------------\n\nTITLE: Creating a Unicorn Instance and Adding to Page - Kotlin\nDESCRIPTION: This Kotlin snippet shows how to create a new Unicorn object with specific attributes and add it to the page using the `addUnicorn()` method on an `accountPage` object. The `createUnicorn()` method on the `addUnicornPage` object is then called with the created Unicorn object to fill out the form and submit it. Finally, a `unicornConfirmationPage` object is assigned the result of the `createUnicorn()` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\n// The Unicorn is a top-level Object--it has attributes, which are set here. \n// This only stores the values; it does not fill out any web forms or interact\n// with the browser in any way.\nval sparkles = Unicorn(\"Sparkles\", UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS)\n\n// Since we are already \"on\" the account page, we have to use it to get to the\n// actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n// takes us there.\nval addUnicornPage = accountPage.addUnicorn()\n\n// Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n// its createUnicorn() method. This method will take Sparkles' attributes,\n// fill out the form, and click submit.\nunicornConfirmationPage = addUnicornPage.createUnicorn(sparkles)\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level - Java\nDESCRIPTION: Demonstrates setting the log level for EdgeDriverService in Java.\nThis allows controlling the verbosity of the logs.\nDependencies: Selenium WebDriver, EdgeDriverService, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_33\n\nLANGUAGE: Java\nCODE:\n```\nEdgeDriverService service = new EdgeDriverService.Builder()\n    .withLogLevel(ChromiumDriverLogLevel.DEBUG)\n    .build();\nEdgeDriver driver = new EdgeDriver(service, options);\n```\n\n----------------------------------------\n\nTITLE: Removing Virtual Authenticator in C#\nDESCRIPTION: This code snippet shows how to remove an existing virtual authenticator using C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nVirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions()\n{\n    Protocol = Protocol.Ctap2,\n    Domain = \"localhost\",\n    UserVerification = true\n};\noptions.AddTransport(Transport.Usb);\n\nauthenticator = ((IHasAuthentication)driver).AddVirtualAuthenticator(options);\n((IHasAuthentication)driver).RemoveVirtualAuthenticator(authenticator);\n```\n\n----------------------------------------\n\nTITLE: Removing JavaScript Exception Handler in WebDriver BiDi with Python\nDESCRIPTION: This code snippet shows how to remove a previously added JavaScript exception handler in Python using WebDriver BiDi. It requires the handler ID returned when the handler was initially added. This allows for dynamic control over which JavaScript exceptions are being monitored.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.en.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nlog.remove_javascript_exception_listener(browsing_context)\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Session Map (Shell)\nDESCRIPTION: This command starts the Selenium Session Map, which establishes a mapping between session IDs and the Node where the session is running. It uses port 5556 by default and interacts with the Event Bus.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.pt-br.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-<version>.jar sessions --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443 --port 5556\n```\n\n----------------------------------------\n\nTITLE: Setting Script Timeout in Python\nDESCRIPTION: This code snippet shows how to set the script timeout in Python, controlling how long scripts can run before being interrupted. The value is set using `set_script_timeout`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\ndriver.set_script_timeout(30)\n```\n\n----------------------------------------\n\nTITLE: GraphQL: Querying Capabilities of Each Node (curl)\nDESCRIPTION: This curl command retrieves the capabilities (stereotypes) of each node in the Selenium Grid. It utilizes the GraphQL endpoint and the `curl` tool to send the query.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.ja.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\": \"{ nodesInfo { nodes { stereotypes } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Evaluate script in browsing context (JavaScript)\nDESCRIPTION: This JavaScript snippet evaluates a script in a browsing context using Selenium BiDi. It gets a browsing context and evaluates the expression '1 + 1', expecting the result to be 2.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('evaluate script in browsing context', async () => {\n    let browsingContext = await getBrowsingContext(driver);\n\n    let result = await session.execute({\n      method: 'script.evaluate',\n      params: {\n        expression: '1 + 1',\n        target: { browsingContext: browsingContext.context },\n      },\n    });\n\n    expect(result.result.result.value).toBe(2);\n  });\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Add-ons in Firefox with Selenium (CSharp)\nDESCRIPTION: This snippet shows how to uninstall a Firefox add-on using Selenium WebDriver in C#. The `UninstallAddon` method of the `IHasExtensions` interface is used to remove the addon using its ID.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\n((IHasExtensions)driver).UninstallAddon(id);\n```\n\n----------------------------------------\n\nTITLE: WebDriver Initialization CSharp\nDESCRIPTION: This snippet shows how to initialize a WebDriver instance for Chrome using C#. It creates a new ChromeDriver object, which is used to control the Chrome browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.en.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar driver = new ChromeDriver();\n```\n\n----------------------------------------\n\nTITLE: Setting Console Output - Java\nDESCRIPTION: Demonstrates how to configure the GeckoDriver service to output logs to the console in Java. This is helpful for debugging Selenium tests. Requires Selenium WebDriver and GeckoDriverService.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nGeckoDriverService service = new GeckoDriverService.Builder()\n    .withLogOutput(System.out)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Timeout in Ruby\nDESCRIPTION: This snippet shows how to configure the page load timeout in Ruby, which sets the maximum wait time for a page to load.  If the page load exceeds this time, a TimeoutException will occur.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_36\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.timeouts.page_load = 30\n```\n\n----------------------------------------\n\nTITLE: Capture Viewport Screenshot in Java\nDESCRIPTION: This code snippet shows how to capture a viewport screenshot using Selenium WebDriver's BiDi API in Java. It obtains the viewport using `executeCdpCommand` and then takes a screenshot of that specific viewport. Requires Selenium version 4.14.0 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\nMap<String, Number> metrics = driver.executeCdpCommand(\"Emulation.getViewportMetrics\", Map.of()).orElse(null);\n    assert metrics != null;\n    long width = metrics.get(\"width\").longValue();\n    long height = metrics.get(\"height\").longValue();\n    String viewport = browsingContext.captureScreenshot(false);\n    assertNotNull(viewport);\n\n    Dimension dimension = new Dimension((int) width, (int) height);\n    driver.manage().window().setSize(dimension);\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes - Ruby\nDESCRIPTION: This Ruby snippet shows how to add pointer event attributes such as width, height, pressure, tilt_x, and tilt_y to a Pen object for detailed pen actions. It requires Selenium 4.2 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.en.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'writable')\n\npen = Selenium::WebDriver::Support::HasTouchScreen::Pen.new(@driver, 'pen1')\npen.width = 20\npen.height = 30\npen.pressure = 0.8\npen.tilt_x = 45\npen.tilt_y = -60\n\n@driver.action.move_to(element).pointer_down(pen).pointer_up(pen).perform\n```\n\n----------------------------------------\n\nTITLE: Get Webdriver Logger in JavaScript\nDESCRIPTION: This snippet shows how to obtain the webdriver logger in JavaScript using the `selenium-webdriver` library. This allows you to configure and utilize logging for debugging purposes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst logging = require('selenium-webdriver/lib/logging')\nlogger = logging.getLogger('webdriver')\n```\n\n----------------------------------------\n\nTITLE: Initialize Selenium WebDriver in Java\nDESCRIPTION: This Java code snippet demonstrates how to initialize a Selenium WebDriver instance using ChromeDriver. It navigates to the SeleniumHQ website and prints the title of the page.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.pt-br.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class HelloSelenium {\n  public static void main(String[] args) {\n    WebDriver driver = new ChromeDriver();\n\n    driver.get(\"https://www.selenium.dev/ \");\n    System.out.println(driver.getTitle());\n\n    driver.quit();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - Java\nDESCRIPTION: Demonstrates how to retrieve the browser window's size in Java using Selenium WebDriver.  The code retrieves the width and height individually and also demonstrates storing the dimensions in a `Dimension` object for later use. The example illustrates two equivalent ways to access the size of the browser window.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_30\n\nLANGUAGE: java\nCODE:\n```\n//Access each dimension individually\nint width = driver.manage().window().getSize().getWidth();\nint height = driver.manage().window().getSize().getHeight();\n\n//Or store the dimensions and query them later\nDimension size = driver.manage().window().getSize();\nint width1 = size.getWidth();\nint height1 = size.getHeight();\n```\n\n----------------------------------------\n\nTITLE: Setting platformName Capability in Java\nDESCRIPTION: This code snippet demonstrates how to set the 'platformName' capability in Selenium using Java. The 'platformName' capability identifies the operating system at the remote end. Setting this capability can be important for cloud-based providers to specify the desired OS.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setPlatformName(\"linux\");\n```\n\n----------------------------------------\n\nTITLE: Find Element within Element in Kotlin\nDESCRIPTION: This snippet demonstrates how to find a web element within another web element using Selenium WebDriver in Kotlin. First, it finds an element with the ID 'fruits', and then it finds a child element within that element with the class name 'tomatoes'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nval fruits = driver.findElement(By.id(\"fruits\"))\nval fruit = fruits.findElement(By.className(\"tomatoes\"))\n```\n\n----------------------------------------\n\nTITLE: DOM Mutation Handlers in Ruby using CDP\nDESCRIPTION: This Ruby example shows how to use Chrome DevTools Protocol (CDP) through Selenium to handle DOM mutations. The script sets a document title via CDP. It relies on having a Selenium WebDriver instance with CDP access.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.en.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\n      cdp.send_command(\"Runtime.evaluate\", expression: \"document.title='Ruby CDP'\" )\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions in Java\nDESCRIPTION: This Java code shows how to set permissions for specific features in Edge.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_52\n\nLANGUAGE: java\nCODE:\n```\noptions.addArguments(\"--mute-audio=true\");\n```\n\n----------------------------------------\n\nTITLE: Force Create Process API - Kotlin\nDESCRIPTION: This Kotlin snippet shows how to force the usage of the CreateProcess API when launching Internet Explorer. By calling the `useCreateProcessApiToLaunchIe()` method on the `InternetExplorerOptions`, the browser will be launched using the CreateProcess API.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.Capabilities\nimport org.openqa.selenium.ie.InternetExplorerDriver\nimport org.openqa.selenium.ie.InternetExplorerOptions\n\nfun main() {\n    val options = InternetExplorerOptions()\n    options.useCreateProcessApiToLaunchIe()\n    val driver = InternetExplorerDriver(options)\n    try {\n        driver.get(\"https://google.com/ncr\")\n        val caps = driver.getCapabilities()\n        println(caps)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Edge Options - JavaScript\nDESCRIPTION: Shows how to add command-line arguments to the Edge options in JavaScript.\nThis allows customization of the Edge browser's behavior.\nDependencies: Selenium WebDriver, EdgeDriver, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nopts.addArguments('--start-maximized');\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium with Package Manager (C#)\nDESCRIPTION: Installs the Selenium WebDriver package using the Package Manager Console in Visual Studio.  This provides a quick way to add Selenium to a C# project within the Visual Studio IDE.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.zh-cn.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nInstall-Package Selenium.WebDriver\n```\n\n----------------------------------------\n\nTITLE: Setting browserVersion with ChromeOptions in Python\nDESCRIPTION: This snippet demonstrates how to set the browserVersion capability using ChromeOptions in Python for Selenium 4. It specifies a particular browser version for the remote session. The example creates ChromeOptions and sets the browser version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\noptions = Options()\noptions.browser_version = '106'\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes - Python\nDESCRIPTION: This Python snippet shows how to add pointer event attributes (width, height, pressure, tiltX, tiltY) to a Pen action in Selenium to simulate more complex pen interactions.  It requires Selenium 4.2 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.en.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nwritable = driver.find_element(By.ID, \"writable\")\n\npen = Pen(driver, \"pen1\")\npen.width = 20\npen.height = 30\npen.pressure = 0.8\npen.tilt_x = 45\npen.tilt_y = -60\n\naction = ActionBuilder(driver)\n    .move_to_element(writable)\n    .pointer_down(pen)\n    .pointer_up(pen)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium from Wheel file using Pip (Python)\nDESCRIPTION: Installs the Selenium library from a downloaded wheel file using pip. This allows installing from a local file instead of downloading from PyPI.  Replace 'selenium-x.x.x.-py3-none-any.whl' with the actual filename.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.ja.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install selenium-x.x.x.-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Enable WebSocket URL in Kotlin for BiDi\nDESCRIPTION: This code snippet demonstrates how to enable the WebSocket URL in Kotlin when setting browser options to enable BiDi (Bidirectional) communication. Setting the 'webSocketUrl' capability to 'true' allows Selenium to establish a WebSocket connection for two-way communication with the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.zh-cn.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\noptions.setCapability(\"webSocketUrl\", true);\n```\n\n----------------------------------------\n\nTITLE: Before Request Sent Event - Selenium BiDi - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to listen for the 'Before Request Sent' network event in Selenium BiDi. It captures details of the request before it's sent using `Network.onRequest`. Requires Selenium 4.18 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait bidiNetwork.onRequest(({ request, response }) => {\n  console.log(request.url);\n});\n```\n\n----------------------------------------\n\nTITLE: Get Browsing Context Realms By Type - JavaScript\nDESCRIPTION: This snippet retrieves realms of a specific type within a browsing context using JavaScript and the WebDriver BiDi API. It leverages the `script.getRealms` method, specifying both the type and context, to fetch the realms. The browsing context ID and the realm type are required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('get browsing context realms by type', async () => {\n  await connection.script.getRealms({ context: contextId, type: 'window' });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Level in CSharp\nDESCRIPTION: This C# snippet demonstrates setting the logging level on a per-class basis in .NET. Similar to Java, managing logging at the class level provides better organization and control over log output.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_17\n\nLANGUAGE: CSharp\nCODE:\n```\nusing var logger = LogManager.GetCurrentClassLogger();\nlogger.Level = LogLevel.Debug;\n```\n\n----------------------------------------\n\nTITLE: Minimize Window - Selenium\nDESCRIPTION: This snippet demonstrates how to minimize the current browser window using Selenium WebDriver. The exact behavior of this command is specific to the individual window manager. Requires Selenium 4 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_62\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Manage().Window.Minimize();\n```\n\n----------------------------------------\n\nTITLE: Creating Transparent Color Object - Selenium WebDriver\nDESCRIPTION: This snippet shows how to create a Color object representing the \"transparent\" color in Ruby. This handles cases where no color is explicitly set on an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\nTRANSPARENT = Color.from_string('transparent')\n```\n\n----------------------------------------\n\nTITLE: Python Pytest Execution\nDESCRIPTION: This snippet demonstrates how to execute tests using pytest. Change the current directory to the `python` folder and execute the tests using `pytest`. Pytest will automatically discover and run tests in the directory.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n$ cd python\n$ pytest\n```\n\n----------------------------------------\n\nTITLE: Check Element Selected Selenium Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to use Selenium WebDriver to check if a checkbox input element is selected, returning true if selected and false otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\n//navigates to url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n//returns true if element is checked else returns false\nval attr =  driver.findElement(By.name(\"checkbox_input\")).isSelected()\n```\n\n----------------------------------------\n\nTITLE: Quitting a WebDriver Session - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to properly terminate a WebDriver session by using the `quit()` method. This is crucial for releasing resources and preventing orphaned browser processes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.zh-cn.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.quit();\n```\n\n----------------------------------------\n\nTITLE: Minimize Window - Selenium\nDESCRIPTION: This snippet demonstrates how to minimize the current browser window using Selenium WebDriver. The exact behavior of this command is specific to the individual window manager. Requires Selenium 4 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_63\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.window.minimize\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset in C#\nDESCRIPTION: This C# snippet performs a drag and drop operation by a specified offset. It uses the Actions class and requires a WebDriver instance and the source element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_68\n\nLANGUAGE: csharp\nCODE:\n```\nIWebElement source = driver.FindElement(By.Id(\"draggable\"));\n\nActions actions = new Actions(driver);\nactions.DragAndDropToOffset(source, 50, 20).Perform();\n```\n\n----------------------------------------\n\nTITLE: Customizing Waits - Python\nDESCRIPTION: This code snippet demonstrates customizing waits in Python by configuring polling interval and ignoring exceptions. It waits up to 10 seconds, polls every 0.1 seconds, and ignores NoSuchElementException.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.zh-cn.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nwait = WebDriverWait(driver, 10, poll_frequency=0.1, ignored_exceptions=[NoSuchElementException])\nelement = wait.until(lambda x: x.find_element(By.ID, \"foo\"))\n```\n\n----------------------------------------\n\nTITLE: Scroll by Amount with Selenium (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates scrolling by a specific amount (deltaX and deltaY) using Selenium's Actions API. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nActions(driver)\n    .scrollByAmount(100, 200)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Setting Script Timeout in Ruby\nDESCRIPTION: This Ruby code snippet sets the script timeout for a Selenium session.  The script timeout dictates the maximum time a script can run before being interrupted, measured in seconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\noptions = Selenium::WebDriver::Options.chrome\noptions.script_timeout = 50\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Driver with Options - CSharp\nDESCRIPTION: This C# snippet illustrates initializing a local ChromeDriver with ChromeOptions. It creates a new ChromeDriver instance using ChromeOptions to configure the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.ja.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nChromeOptions options = new ChromeOptions();\ndriver = new ChromeDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Get Selenium Logger in Python\nDESCRIPTION: This snippet retrieves the Selenium module's logger in Python, enabling logging for all submodules within Selenium. You'll also need to add handlers to manage the output.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlogger = logging.getLogger('selenium')\n```\n\n----------------------------------------\n\nTITLE: Listing Downloaded Files in Python\nDESCRIPTION: Lists the downloaded files for a RemoteWebDriver session in Python. It retrieves the list of filenames present in the designated directory for downloads. Requires that the RemoteWebDriver instance has downloads enabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfiles = driver.get_downloaded_files()\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtualAuthenticatorOptions in JavaScript\nDESCRIPTION: This code shows how to initialize VirtualAuthenticatorOptions in JavaScript, configuring the protocol, domain, and key requirements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  protocol: 'ctap2',\n  domain: 'localhost',\n  residentKey: 'required',\n  userVerification: 'required',\n};\n\n```\n\n----------------------------------------\n\nTITLE: Installing Add-ons in Firefox with Selenium (Ruby)\nDESCRIPTION: This Ruby snippet installs a signed Firefox add-on from a given file path. The `install_addon` method is used to install the addon.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.install_addon('/path/to/extension.xpi')\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to Eager in JavaScript\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'eager' in JavaScript. The WebDriver waits until the 'DOMContentLoaded' event fires.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = new Options();\noptions.setPageLoadStrategy('eager');\nlet driver = await new Builder()\n  .forBrowser('chrome')\n  .setChromeOptions(options)\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Maximize Window - Selenium WebDriver - JavaScript\nDESCRIPTION: This snippet maximizes the browser window using the Selenium WebDriver API in JavaScript.  It requires an await since it is asynchronous. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.manage().window().maximize();\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Status - Ruby\nDESCRIPTION: This snippet demonstrates how to check if a web element is enabled on the page using Selenium WebDriver in Ruby. It finds an element by name and uses the enabled? method to determine if it is enabled, returning a boolean value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nbutton_input = driver.find_element(name: 'button_input')\nexpect(button_input.enabled?).to be true\n```\n\n----------------------------------------\n\nTITLE: C# Selenium WebDriver Installation\nDESCRIPTION: Installs Selenium WebDriver version 4.4.0 in a C# project using NuGet Package Manager. This command is executed within the Visual Studio environment.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nPM> Install-Package Selenium.WebDriver -Version 4.4.0\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset (CSharp)\nDESCRIPTION: This C# code shows scrolling from a viewport offset by a specified amount. Requires Selenium WebDriver and Actions class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nnew Actions(driver)\n    .ScrollFromOrigin(WheelInput.Origin.Viewport, 25, 25, 100, 200)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Node Stereotypes\nDESCRIPTION: This curl command retrieves the stereotypes of each node in the Selenium Grid, which represents the capabilities supported by the node.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.pt-br.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\": \"{ nodesInfo { nodes { stereotypes } } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: WebDriver Initialization Kotlin\nDESCRIPTION: This snippet shows how to initialize a WebDriver instance for Chrome using Kotlin. It creates a new ChromeDriver object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.en.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval driver = ChromeDriver()\n```\n\n----------------------------------------\n\nTITLE: Deleting a Named Cookie - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to delete a cookie by name using Selenium WebDriver. It adds cookies and then deletes them with `driver.manage().deleteCookieNamed()` and `driver.manage().deleteCookie()`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://www.example.com\")\n        driver.manage().addCookie(Cookie(\"test1\", \"cookie1\"))\n        val cookie1 = Cookie(\"test2\", \"cookie2\")\n        driver.manage().addCookie(cookie1)\n\n        // delete a cookie with name 'test1'\n        driver.manage().deleteCookieNamed(\"test1\")\n        \n        // delete cookie by passing cookie object of current browsing context.\n        driver.manage().deleteCookie(cookie1)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Port - Java\nDESCRIPTION: This snippet demonstrates how to specify the port the driver runs on using Java. It uses ChromeService.Builder to set the port. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.pt-br.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nChromeService service = new ChromeService.Builder().usingPort(1234).build();\n```\n\n----------------------------------------\n\nTITLE: Get browsing context realms by type - JavaScript\nDESCRIPTION: This JavaScript code gets the realms by type, within the current browsing context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('get browsing context realms by type', async () => {\n    const browsingContext = await new BrowsingContext(driver, tabId);\n\n    await browsingContext.script.getRealms({context: browsingContext.context, type: 'window'});\n  });\n```\n\n----------------------------------------\n\nTITLE: Get realm by type (JavaScript)\nDESCRIPTION: This JavaScript code shows how to retrieve realms of a specific type using Selenium BiDi's `script.getRealms` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n    let realms = await session.execute({ method: 'script.getRealms', params: { type: 'window' } });\n```\n\n----------------------------------------\n\nTITLE: Setting strictFileInteractability in Ruby\nDESCRIPTION: This Ruby code sets the `strictFileInteractability` capability in Selenium. This capability determines whether strict interactability checks are applied to `input type=file` elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\noptions = Selenium::WebDriver::Options.chrome\noptions.strict_file_interactability = true\n```\n\n----------------------------------------\n\nTITLE: Context Click with Selenium\nDESCRIPTION: Moves to the center of an element and performs a right-click (context click). It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"clickable\"));\nActions actions = new Actions(driver);\nactions.contextClick(element).perform();\n```\n\n----------------------------------------\n\nTITLE: Getting the Logger in JavaScript\nDESCRIPTION: This snippet shows how to obtain a logger in JavaScript using the selenium-webdriver library. The code requires the selenium-webdriver logging module and then retrieves a logger instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst logging = require('selenium-webdriver/lib/logging')\nlogger = logging.getLogger('webdriver')\n```\n\n----------------------------------------\n\nTITLE: Merging Capabilities Before Selenium 4 (Java)\nDESCRIPTION: This code demonstrates how capabilities were merged before Selenium 4, modifying the `options` object directly.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nMutableCapabilities capabilities = new MutableCapabilities();\ncapabilities.setCapability(\"platformVersion\", \"Windows 10\");\nFirefoxOptions options = new FirefoxOptions();\noptions.setHeadless(true);\noptions.merge(capabilities);\nAs a result, the `options` object was getting modified.\n```\n\n----------------------------------------\n\nTITLE: Set Page Orientation Java\nDESCRIPTION: This code snippet demonstrates how to set the page orientation (portrait or landscape) using the PrintOptions class in Java with Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setOrientation(PrintOptions.PageOrientation.LANDSCAPE);\n\nbyte[] pdfContent = ((PrintsPage) driver).print(printOptions);\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium Grid with Selenium Manager\nDESCRIPTION: This command enables automatic driver configuration when setting up Selenium Grid. The `--selenium-manager true` parameter must be included in the Selenium Grid startup command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.zh-cn.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Installing Selenium WebDriver via npm\nDESCRIPTION: This command shows how to install the selenium-webdriver package using npm. It is used to manage dependencies for Selenium projects in JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nnpm install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: Setting setWindowRect Capability in Java\nDESCRIPTION: This Java code snippet demonstrates setting the `setWindowRect` capability for Selenium. This capability determines if the remote end supports resizing and repositioning windows.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_43\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setSetWindowRect(true);\n```\n\n----------------------------------------\n\nTITLE: Drain Node (No Secret)\nDESCRIPTION: This snippet gracefully shuts down a node in the Selenium Grid.  The node will stop accepting new session requests and will terminate after all ongoing sessions have completed. Used when no registration secret is configured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.zh-cn.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request POST 'http://<Router-URL>/se/grid/distributor/node/<node-id>/drain' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Getting Webdriver Logger in Javascript\nDESCRIPTION: This snippet demonstrates how to get the webdriver logger in Javascript using `selenium-webdriver`. The logging object is accessed via the `selenium-webdriver/lib/logging` import. Then the logger object can be instantiated. Requires the `selenium-webdriver` package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst logging = require('selenium-webdriver/lib/logging')\nlogger = logging.getLogger('webdriver')\n```\n\n----------------------------------------\n\nTITLE: Getting Element Color Values\nDESCRIPTION: This code retrieves the 'color' and 'background-color' CSS values from a web element with the ID 'login' using Selenium's driver.find_element() and css_value() methods, and then converts these values into Color objects in Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\nlogin_button_colour = Color.from_string(driver.find_element(id: 'login').css_value('color'))\n\nlogin_button_background_colour = Color.from_string(driver.find_element(id: 'login').css_value('background-color'))\n```\n\n----------------------------------------\n\nTITLE: Deselecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to deselect an option in a multiple select element by its `value` attribute using Selenium WebDriver. The `DeselectByValue()` method is used to deselect the option based on the provided value. This method only applies to multiple select lists.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_44\n\nLANGUAGE: CSharp\nCODE:\n```\nselect.DeselectByValue(\"eggs\");\n```\n\n----------------------------------------\n\nTITLE: Continue Auth Request without Credentials - Selenium BiDi - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to continue a network request blocked at the `authRequired` stage without providing credentials, using Selenium BiDi's `Network.continueRequest`. Requires Selenium 4.18 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait bidiNetwork.continueRequest({\n  requestId: event.request.requestId\n});\n```\n\n----------------------------------------\n\nTITLE: Switching to IFrame by Index - Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to switch to an IFrame using its index.  It switches to the second frame (index 1).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Switches to the second frame\ndriver.switchTo().frame(1)\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - Selenium WebDriver - Python\nDESCRIPTION: This snippet sets the position of the browser window to the top-left corner (0, 0) of the primary display using the Selenium WebDriver API in Python. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\n    # 将窗口移动到主显示器的左上角\ndriver.set_window_position(0, 0)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Unicorn (Ruby)\nDESCRIPTION: This snippet demonstrates how to configure a unicorn with specific attributes using a Unicorn object and Page Object Model. It assumes the existence of Unicorn, UnicornColors, UnicornAccessories, and UnicornAdornments classes. It creates a Unicorn object with specified attributes and then uses the add_unicorn method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\n# The Unicorn is a top-level Object--it has attributes, which are set here.\n# This only stores the values; it does not fill out any web forms or interact\n# with the browser in any way.\nsparkles = Unicorn.new('Sparkles', UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS)\n\n# Since we're already \"on\" the account page, we have to use it to get to the\n# actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n# takes us there.\nadd_unicorn_page = account_page.add_unicorn\n```\n\n----------------------------------------\n\nTITLE: Setting Capabilities Before Upgrade - JavaScript\nDESCRIPTION: This JavaScript code shows how to define desired capabilities for Firefox before upgrading to Selenium 4. It includes setting browserName, platform, version, build, and name within a capabilities object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncaps = {};\ncaps['browserName'] = 'Firefox';\ncaps['platform'] = 'Windows 10';\ncaps['version'] = '92';\ncaps['build'] = myTestBuild;\ncaps['name'] = myTestName;\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Resident Credential in C#\nDESCRIPTION: This code snippet shows how to create a non-resident credential using C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nCredential cred = new Credential()\n{\n    Id = Convert.FromBase64String(\"dGhlcmUgbm8=\")\n};\n((IHasAuthentication)driver).AddVirtualAuthenticatorCredential(authenticator, cred);\n```\n\n----------------------------------------\n\nTITLE: AddAdditionalCapability deprecation in C#\nDESCRIPTION: This C# code snippet illustrates the deprecation of `AddAdditionalCapability` and the suggestion to use `AddAdditionalOption` instead. It's necessary to update the code to align with Selenium 4's API changes for setting browser options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_25\n\nLANGUAGE: CS\nCODE:\n```\nvar browserOptions = new ChromeOptions();\nbrowserOptions.PlatformName = \"Windows 10\";\nbrowserOptions.BrowserVersion = \"latest\";\nvar cloudOptions = new Dictionary<string, object>();\nbrowserOptions.AddAdditionalCapability(\"cloud: options\", cloudOptions, true);\n```\n\nLANGUAGE: CS\nCODE:\n```\nvar browserOptions = new ChromeOptions();\nbrowserOptions.PlatformName = \"Windows 10\";\nbrowserOptions.BrowserVersion = \"latest\";\nvar cloudOptions = new Dictionary<string, object>();\nbrowserOptions.AddAdditionalOption(\"cloud: options\", cloudOptions);\n```\n\n----------------------------------------\n\nTITLE: Terminating Driver Session - Java\nDESCRIPTION: This Java snippet demonstrates how to terminate a Selenium WebDriver session using the `quit()` method. This ensures that all browser instances are closed and resources are released.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.ja.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: DOM Mutation Handlers in Java with Selenium CDP\nDESCRIPTION: This Java code snippet shows how to use Chrome DevTools Protocol (CDP) to handle DOM mutation events. The snippet retrieves the CDP session and uses `Event` interface to set up a network tracking event. Requires a running Selenium WebDriver instance connected to a Chrome browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.ja.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\ncdpInfo.getEvent().addEventHandler(Network.requestWillBeSent, x ->\n  System.out.println(x.getRequest().getUrl()));\n```\n\n----------------------------------------\n\nTITLE: Comparing Color Objects\nDESCRIPTION: This snippet demonstrates how to compare two Color objects for equality in Python using the == operator. It shows how to verify if the background color of a login button matches a predefined color (HOTPINK).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nassert login_button_background_colour == HOTPINK\n```\n\n----------------------------------------\n\nTITLE: Add Selenium to package.json in JavaScript\nDESCRIPTION: This JSON snippet demonstrates how to specify Selenium as a dependency in a JavaScript project's `package.json` file.  When `npm install` is run, the listed dependencies will be installed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.en.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n    \"selenium-webdriver\": \"^4.0.0\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects from Strings in Ruby\nDESCRIPTION: This snippet demonstrates how to create Color objects in Ruby from various string representations, including HEX, RGB, RGBA, HSL, and HSLA color formats. These color objects can then be used for comparison and conversion in Selenium tests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nHEX_COLOUR = Color.from_string('#2F7ED8')\nRGB_COLOUR = Color.from_string('rgb(255, 255, 255)')\nRGB_COLOUR = Color.from_string('rgb(40%, 20%, 40%)')\nRGBA_COLOUR = Color.from_string('rgba(255, 255, 255, 0.5)')\nRGBA_COLOUR = Color.from_string('rgba(40%, 20%, 40%, 0.5)')\nHSL_COLOUR = Color.from_string('hsl(100, 0%, 50%)')\nHSLA_COLOUR = Color.from_string('hsla(100, 0%, 50%, 0.5)')\n```\n\n----------------------------------------\n\nTITLE: Find Element by ID - Java\nDESCRIPTION: This snippet demonstrates locating a web element using its ID in Java. It initializes a ChromeDriver and uses the `findElement` method with `By.id` to locate the element with the ID 'lname'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\tdriver.findElement(By.id(\"lname\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Ruby\nDESCRIPTION: This Ruby snippet configures the HTTP client in Selenium.  It allows customization of how Selenium interacts with the browser via HTTP requests. The example is taken from line 7-8 of http_client_spec.rb.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/http_client.pt-br.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n{{< gh-codeblock path=\"examples/ruby/spec/drivers/http_client_spec.rb#L7-L8\" >}}\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium\nDESCRIPTION: This snippet sets an implicit wait time for the WebDriver instance.  This tells the driver to wait a specified amount of time when trying to find an element if it is not immediately available.  Requires an initialized WebDriver instance. Not recommended as best practice for waiting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\n```\n\n----------------------------------------\n\nTITLE: Capture Viewport Screenshot in JavaScript\nDESCRIPTION: This code snippet demonstrates how to capture a viewport screenshot using Selenium WebDriver's BiDi API in JavaScript. It uses the `browsingContext.captureScreenshot` method without specifying the `full` parameter, resulting in a viewport screenshot. Requires Selenium version 4.15 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('capture a viewport screenshot', async () => {\n  const browsingContext = await getBrowsingContext(driver);\n  let result = await browsingContext.captureScreenshot({});\n  expect(result).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies via CDP in Python\nDESCRIPTION: This Python code snippet demonstrates how to set cookies using Chrome DevTools Protocol (CDP) with Selenium. It sets a cookie with a specific name, value, domain, path, and expiry. This snippet depends on Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nsession.execute(Network.enable())\nsession.execute(Network.set_cookie(\n    name='foo',\n    value='bar',\n    domain='localhost',\n    path='/'\n))\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium\nDESCRIPTION: This snippet sets an implicit wait time for the WebDriver instance.  This tells the driver to wait a specified amount of time when trying to find an element if it is not immediately available.  Requires an initialized WebDriver instance. Not recommended as best practice for waiting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\ndriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);\n```\n\n----------------------------------------\n\nTITLE: Protecting WebDriver with ThreadGuard in Java\nDESCRIPTION: This code snippet demonstrates how to use ThreadGuard to protect a WebDriver instance from being accessed by multiple threads. It simulates a thread clash scenario where a different thread tries to access the WebDriver, causing ThreadGuard to throw an exception. This helps identify and prevent potential threading issues during parallel test execution. The example sets the chromedriver path, creates a WebDriver instance wrapped by ThreadGuard, and then spawns a new thread to access the driver. When the new thread tries to interact with the driver, ThreadGuard detects the conflict and throws an exception.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/thread_guard.en.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class DriverClash {\n  //thread main (id 1) created this driver\n  private WebDriver protectedDriver = ThreadGuard.protect(new ChromeDriver()); \n\n  static {\n    System.setProperty(\"webdriver.chrome.driver\", \"<Set path to your Chromedriver>\");\n  }\n  \n  //Thread-1 (id 24) is calling the same driver causing the clash to happen\n  Runnable r1 = () -> {protectedDriver.get(\"https://selenium.dev\");};\n  Thread thr1 = new Thread(r1);\n   \n  void runThreads(){\n    thr1.start();\n  }\n\n  public static void main(String[] args) {\n    new DriverClash().runThreads();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Port - CSharp\nDESCRIPTION: This snippet shows how to specify the port the driver runs on in C#. It sets the `Port` property of the `ChromeDriverService`. Requires Selenium.WebDriver NuGet package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.pt-br.md#_snippet_10\n\nLANGUAGE: CSharp\nCODE:\n```\nChromeDriverService service = ChromeDriverService.CreateDefaultService();\nservice.Port = 1234;\nnew ChromeDriver(service).Quit();\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element using Selenium Wheel (Java)\nDESCRIPTION: Scrolls from a specified element by a given amount.  Requires the element, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"idOfMyElement\"));\nnew Actions(driver)\n  .scrollFromOrigin(WheelInput.Origin.fromElement(element), 20, 50)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Getting Element Text with Selenium\nDESCRIPTION: This snippet shows how to retrieve the text content of a web element using the `getText` method (or equivalent). This is useful for verifying the state of the page or extracting data.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.zh-cn.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nWebElement message = driver.findElement(By.id(\"message\"));\nString value = message.getText();\n```\n\nLANGUAGE: Python\nCODE:\n```\nmessage = driver.find_element(By.ID, \"message\")\nvalue = message.text\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement message = driver.FindElement(By.Id(\"message\"));\nstring value = message.Text;\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nmessage = driver.find_element(id: 'message')\nvalue = message.text\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet message = await driver.findElement(By.id('message'));\nlet value = await message.getText();\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nval message = driver.findElement(By.id(\"message\"))\nval value = message.text\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element by Amount (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates scrolling from an element by a specific amount (deltaX and deltaY) using Selenium's Actions API. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element: WebElement = driver.findElement(By.id(\"id-of-element\"))\nActions(driver)\n    .scrollFromOrigin(element, 100, 200)\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes - Python\nDESCRIPTION: This code snippet demonstrates how to add pointer event attributes like width, height, pressure, and tilt to a Pen action in Selenium with Python. It creates a Pen object, moves to an element, sets the pointer properties, and then performs a pen down action. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.zh-cn.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"example\")\n\naction = ActionBuilder(driver)\npen = action.add_pointer_input(PointerInput.PEN, \"pen\")\naction.move_to(element)\npen.create_pointer_move(duration=0, x=element.location['x'], y=element.location['y'], width=5, height=5, pressure=0.5, tangential_pressure=0.5, tilt_x=10, tilt_y=-10, twist=0)\naction.pointer_down(PointerInput.MouseButton.LEFT)\naction.perform()\n```\n\n----------------------------------------\n\nTITLE: Cloning the Selenium Repository (Shell)\nDESCRIPTION: This snippet shows how to clone the Selenium website and documentation repository from GitHub to your local machine using the git command-line tool. It then changes the current directory to the cloned repository.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.pt-br.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n% git clone git@github.com:seleniumhq/seleniumhq.github.io.git\n% cd seleniumhq.github.io\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Port - CSharp\nDESCRIPTION: This snippet demonstrates how to set the driver port in C# using ChromeOptions and the Port property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.zh-cn.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new ChromeOptions() {Port = 1234};\n```\n\n----------------------------------------\n\nTITLE: Converting Colors to Formats for Assertion\nDESCRIPTION: This snippet demonstrates how to convert Color objects to different string formats (HEX, RGBA, RGB) and perform static validations using assertions in Java. It converts the login button's background color to different formats and verifies their values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nassert loginButtonBackgroundColour.asHex().equals(\"#ff69b4\");\nassert loginButtonBackgroundColour.asRgba().equals(\"rgba(255, 105, 180, 1)\");\nassert loginButtonBackgroundColour.asRgb().equals(\"rgb(255, 105, 180)\");\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Server in Standalone Mode\nDESCRIPTION: This snippet demonstrates how to start a Selenium server in standalone mode using Java. It's the traditional way to launch the server, making it ready to execute browser automation tests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2021/a-tour-of-4-new-commands.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-4.0.0.jar standalone\n```\n\n----------------------------------------\n\nTITLE: Using a Pen with Selenium - Java\nDESCRIPTION: This Java snippet demonstrates how to use the Pen class in Selenium to simulate a pen stylus interaction, specifically moving the pen to a specific element and performing a touch contact (left click equivalent). It requires Selenium 4.2 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"clickable\"));\n\nPen pen = new Pen(driver, \"pen1\");\n\nnew Actions(driver).moveToElement(element).tick(pen).perform();\n```\n\n----------------------------------------\n\nTITLE: Running SessionMap standalone using JDBC in Bash\nDESCRIPTION: This Bash script demonstrates how to run only the SessionMap component of Selenium Grid with JDBC persistence.  It fetches the required dependencies using Coursier and then starts the SessionMap process, specifying the event bus connection details and the configuration file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.ja.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nexport SE_VERSION=<current_selenium_version>\njava -jar selenium-server-${SE_VERSION}.jar \\\n--ext $(coursier fetch -p org.seleniumhq.selenium:selenium-session-map-jdbc:${SE_VERSION} org.postgresql:postgresql:42.3.1) \\\nsessions --publish-events tcp://localhost:4442 \\\n--subscribe-events tcp://localhost:4443 \\\n--port 5556 --config sessions.toml\n```\n\n----------------------------------------\n\nTITLE: Running Selenium tests in Python\nDESCRIPTION: This command is used to execute Selenium tests written in Python. It utilizes pytest, a popular testing framework. Requires pytest installed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - Eager - Python\nDESCRIPTION: This Python snippet shows how to set the page load strategy to 'eager' using ChromeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\noptions = ChromeOptions()\noptions.page_load_strategy = PageLoadStrategy.EAGER\n```\n\n----------------------------------------\n\nTITLE: Installing Unsigned Add-ons (Temporary) in Firefox with Selenium (JavaScript)\nDESCRIPTION: This snippet shows how to install an unsigned addon with selenium javascript\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst extension = path.join(__dirname, 'webextensions-selenium-example');\nconst extensionId = await driver.installAddon(extension, true);\nexpect(extensionId).toBeDefined()\n```\n\n----------------------------------------\n\nTITLE: Intercepting Request via CDP in Java\nDESCRIPTION: This Java code snippet shows how to intercept network requests using the Chrome DevTools Protocol (CDP) in Selenium.  It checks the request URL and modifies the HTTP method to `POST` if the URL contains \"example\".  This snippet depends on Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nsession.addListener(Network.requestIntercepted(event -> {\n  if (event.getRequest().getUrl().contains(\"example\")) {\n    Request modified = new Request(\"POST\", Optional.empty(), Optional.empty(),\n        Optional.empty(), Optional.empty(), Optional.empty(),\n        Optional.empty(), Optional.empty());\n    session.sendCommand(Network.continueInterceptedRequest(\n        ContinueInterceptedRequest.create(event.getInterceptionId(), Optional.empty(),\n            Optional.empty(), Optional.empty(), Optional.of(modified),\n            Optional.empty())));\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Set Page Size Python\nDESCRIPTION: This code snippet demonstrates how to set the page size for printing in Python with Selenium, using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.page_size = \"A4\"\npdf = driver.print_page(print_options)\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Commands in CSharp\nDESCRIPTION: Demonstrates how to execute custom commands on a RemoteWebDriver instance in C# using a custom command executor, which is used to run commands specific to a given browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_26\n\nLANGUAGE: CSharp\nCODE:\n```\nICommandExecutor executor = ((IHasCommandExecutor)driver).CommandExecutor;\nvar commandInfo = new CommandInfo(CommandInfo.PostCommand, CommandType.Post, \"/session/{sessionId}/browser_action\");\n((ICommandExecutor)executor).DefineCommand(\"browser_action\", commandInfo);\nResponse response = executor.Execute(new Command(driver.SessionId, \"browser_action\", null));\n```\n\n----------------------------------------\n\nTITLE: JSON Response: Listing Downloaded Files\nDESCRIPTION: This JSON snippet shows a sample response when listing downloaded files. The `names` array contains the names of the downloaded files.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": {\n    \"names\": [\n      \"Red-blue-green-channel.jpg\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Load and isLoaded Methods\nDESCRIPTION: This Java code implements the `load()` and `isLoaded()` methods required when extending `LoadableComponent`.  The `load()` method navigates the WebDriver to the edit issue page URL. The `isLoaded()` method checks if the current URL ends with \"/new\" and uses JUnit's `assertTrue` method to assert the condition. It throws an Error if the assertion fails.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.zh-cn.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  @Override\n  protected void load() {\n    driver.get(\"https://github.com/SeleniumHQ/selenium/issues/new?assignees=&labels=I-defect%2Cneeds-triaging&projects=&template=bug-report.yml&title=%5B%F0%9F%90%9B+Bug%5D%3A+\");\n  }\n\n  @Override\n  protected void isLoaded() throws Error {\n    String url = driver.getCurrentUrl();\n    assertTrue(\"Not on the issue entry page: \" + url, url.endsWith(\"/new\"));\n  }\n```\n\n----------------------------------------\n\nTITLE: Realm Created Event - JavaScript\nDESCRIPTION: This snippet demonstrates how to listen for realm creation events using JavaScript and the WebDriver BiDi API.  It uses `connection.on` to subscribe to 'script.realmCreated' events. Requires a BiDi connection and appropriate event handling logic.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('realm created', async () => {\n  const callback = sinon.spy();\n  await connection.on('script.realmCreated', callback);\n  await driver.browsingContext.create({ type: 'tab' });\n  await new Promise((resolve) => setTimeout(resolve, 500));\n\n  expect(callback).toHaveBeenCalledTimes(1);\n  const realm = callback.getCall(0).args[0];\n  expect(realm.origin).toBe('null');\n});\n```\n\n----------------------------------------\n\nTITLE: Script Pinning in Ruby using CDP\nDESCRIPTION: This Ruby snippet shows how to pin a script using CDP within Selenium.  It adds a script to be evaluated on new documents, effectively pinning it.  This requires a Selenium WebDriver instance with access to CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.en.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n      script_id = cdp.send_command(\"Page.addScriptToEvaluateOnNewDocument\", source: \"window.bespokeValue = 'from pinning'\")['identifier']\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependencies Configuration (After)\nDESCRIPTION: Defines project dependencies for Selenium 4.4.0 using Gradle build tool. It specifies JUnit 5 for testing and selenium-java for Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_15\n\nLANGUAGE: jsonpath\nCODE:\n```\nplugins {\n    id 'java'\n}\ngroup 'org.example'\nversion '1.0-SNAPSHOT'\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'\n    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.4.0'\n}\ntest {\n    useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi in Java Selenium\nDESCRIPTION: This snippet demonstrates how to enable the BiDi (BiDirectional) API in Java when using Selenium. It shows the usage of the `enableBiDi()` method on an Options class instance to activate BiDi communication.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2024/selenium-4-22-released.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Enabling BiDi in Java\noptions.enableBiDi();\n```\n\n----------------------------------------\n\nTITLE: Setting browserName in Ruby\nDESCRIPTION: This snippet demonstrates how to set the browserName capability using Selenium in Ruby.  It shows creating options and setting the browser name directly.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Options.new(browser_name: :chrome)\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in JavaScript\nDESCRIPTION: Demonstrates how to select an option in a Select element by its index in JavaScript. It uses the selectByIndex() method. Index starts from 0. Throws NoSuchElementException if index is out of range.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nawait select.selectByIndex(0);\n```\n\n----------------------------------------\n\nTITLE: Running Tests with RSpec\nDESCRIPTION: This command executes all the tests in the Selenium Ruby examples using RSpec.  It ensures that all examples are run in the proper context via bundler.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/ruby/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec rspec\n```\n\n----------------------------------------\n\nTITLE: Get distributor component configuration help\nDESCRIPTION: This command retrieves component-specific configuration information for the distributor Selenium Grid role. It details available options and settings for the distributor component.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.ja.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar distributor --help\n```\n\n----------------------------------------\n\nTITLE: Creating Transparent Color Object\nDESCRIPTION: This snippet demonstrates how to create a Color object for the 'transparent' color value in Java, using the Color.fromString() method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nprivate final Color TRANSPARENT = Color.fromString(\"transparent\");\n```\n\n----------------------------------------\n\nTITLE: Get router component configuration help\nDESCRIPTION: This command retrieves component-specific configuration information for the router Selenium Grid role. It details available options and settings for the router component.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.ja.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar router --help\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options in Kotlin\nDESCRIPTION: Demonstrates how to retrieve selected options from a Select element in Kotlin. It uses the allSelectedOptions property to return a list of WebElements representing the selected options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nval selectedOptions: List<WebElement> = select.allSelectedOptions\n```\n\n----------------------------------------\n\nTITLE: Removing Virtual Authenticator in JavaScript\nDESCRIPTION: This JavaScript code removes a virtual authenticator based on its assigned authenticatorId using the DevTools protocol.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst devtools = await driver.getDevTools()\nawait devtools.attachSession()\nawait devtools.send('WebAuthn.removeVirtualAuthenticator', { authenticatorId })\n\n```\n\n----------------------------------------\n\nTITLE: Get Root Logger in Java\nDESCRIPTION: This snippet demonstrates how to obtain the root logger in Java using the `java.util.logging` package. The root logger provides access to all loggers in the application.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njava.util.logging.Logger logger = java.util.logging.Logger.getLogger(\"\");\n```\n\n----------------------------------------\n\nTITLE: Get Node Component Help\nDESCRIPTION: This command displays configuration options specific to the 'node' component of Selenium Grid. It uses the '--help' flag with the 'node' argument.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.zh-cn.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --help\n```\n\n----------------------------------------\n\nTITLE: Get New Session Queue Requests\nDESCRIPTION: This snippet retrieves the current requests in the new session queue, returning the total number of requests and their content.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.zh-cn.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://localhost:4444/se/grid/newsessionqueue/queue'\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Viewport in Selenium\nDESCRIPTION: This code snippet demonstrates how to move the mouse pointer from the upper-left corner of the current viewport by a specified offset using Selenium WebDriver. It utilizes the `moveByOffset` method to achieve this. No specific dependencies beyond the Selenium WebDriver library are needed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.actions().move({x: 30, y: 40}).perform();\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name Selenium Python\nDESCRIPTION: This Python code snippet uses Selenium WebDriver to retrieve the tag name of a web element and asserts that it matches the expected tag name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nassert driver.find_element(By.NAME, \"email_input\").tag_name == \"input\"\n```\n\n----------------------------------------\n\nTITLE: Executing Selenium Manager for Selenium Grid (Shell)\nDESCRIPTION: This snippet demonstrates how to use Selenium Manager to automatically manage the Selenium Grid releases. The command downloads the latest version of Selenium Grid and stores the `selenium-server.jar` file in the local cache.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.pt-br.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ ./selenium-manager --grid\n```\n\n----------------------------------------\n\nTITLE: Refreshing the Current Page (Kotlin)\nDESCRIPTION: Demonstrates how to refresh the current page using Selenium WebDriver in Kotlin. The driver.navigate().refresh() method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\ndriver.navigate().refresh()\n```\n\n----------------------------------------\n\nTITLE: Converting and Comparing Colors in Java\nDESCRIPTION: This Java snippet shows how to convert a Color object to different formats (Hex, RGBA, RGB) and then compare the string representation with a static value.  It converts the login button background color to hex, rgba and rgb format and makes static assertions. This allows for explicit format checking.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nassert loginButtonBackgroundColour.asHex().equals(\"#ff69b4\");\nassert loginButtonBackgroundColour.asRgba().equals(\"rgba(255, 105, 180, 1)\");\nassert loginButtonBackgroundColour.asRgb().equals(\"rgb(255, 105, 180)\");\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Name in Ruby\nDESCRIPTION: This snippet shows how to set the platform name using Selenium in Ruby. It retrieves the OS name.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nit 'platform name' do\n  options.platform_name = 'linux'\n  expect(options.platform_name).to eq 'linux'\nend\n```\n\n----------------------------------------\n\nTITLE: Remove a preloaded script (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to remove a preloaded script using Selenium BiDi and the `script.removePreloadScript` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\n    await session.execute({\n      method: 'script.removePreloadScript',\n      params: { script: result.result.script },\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting User Verified in C#\nDESCRIPTION: This code snippet sets whether the authenticator will simulate success or failure in user verification using C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\n((IHasAuthentication)driver).SetVirtualAuthenticatorUserVerified(authenticator, true);\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Resident Credential in Python\nDESCRIPTION: This Python code adds a non-resident key credential with specified user details.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndev_tools.webauthn.add_credential(\n    PublicKeyCredentialParams(user_id=\"user2\", user_name=\"User 2\", display_name=\"User Two\")\n)\n\n```\n\n----------------------------------------\n\nTITLE: Updating Selenium WebDriver via NuGet - Shell\nDESCRIPTION: This shell command shows how to update the Selenium WebDriver package in a C# project using NuGet package manager to version 4.4.0.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nPM> Install-Package Selenium.WebDriver -Version 4.4.0\n```\n\n----------------------------------------\n\nTITLE: Maximize Window - Selenium WebDriver - Ruby\nDESCRIPTION: This snippet maximizes the browser window using the Selenium WebDriver API in Ruby. Requires the selenium-webdriver gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_38\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.window.maximize\n```\n\n----------------------------------------\n\nTITLE: Importing Color Class\nDESCRIPTION: This snippet shows how to import the Color class in different programming languages to utilize it for color manipulation in Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.support.Color;\n```\n\n----------------------------------------\n\nTITLE: Setting Shrink To Fit - C#\nDESCRIPTION: This C# snippet demonstrates setting the shrink-to-fit setting to false using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_19\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.ShrinkToFit = false;\n\nAssert.That(printOptions.ShrinkToFit, Is.EqualTo(false));\n```\n\n----------------------------------------\n\nTITLE: Locating Element to the Right - Kotlin\nDESCRIPTION: Locates a button element to the right of the element with ID 'cancel' using Kotlin. Uses `RelativeLocator.with` and `toRightOf` methods.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_56\n\nLANGUAGE: Kotlin\nCODE:\n```\nval submitLocator = RelativeLocator.with(By.tagName(\"button\")).toRightOf(By.id(\"cancel\"))\n```\n\n----------------------------------------\n\nTITLE: Installing libdbus-glib-1-2 in Linux\nDESCRIPTION: This code snippet shows how to install the `libdbus-glib-1-2` library in Linux using `apt-get`. This is needed to resolve the 'libdbus-glib-1.so.2: cannot open shared object file' error when running Firefox.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.ja.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libdbus-glib-1-2\n```\n\n----------------------------------------\n\nTITLE: Setting User Verification in JavaScript\nDESCRIPTION: This Javascript code sets the user verified status on the virtual authenticator, simulating successful user verification.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nawait devtools.security.setUserVerified(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Safari Logging (Python)\nDESCRIPTION: This code snippet shows how to set Safari driver logging to true in Python by using the `service` argument when instantiating the Safari driver. This enables logging to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.zh-cn.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Safari(service=Service(log_output=True))\n```\n\n----------------------------------------\n\nTITLE: Remove All Credentials in C#\nDESCRIPTION: This C# code snippet removes all credentials from a virtual authenticator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nList<GetCredentialResponse> credentials = await session.WebAuthn.GetCredentialsAsync();\nforeach (GetCredentialResponse credential in credentials)\n{\n    await session.WebAuthn.RemoveCredentialAsync(credential.CredentialId);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Tearing down WebDriver in Java\nDESCRIPTION: This code snippet demonstrates how to tear down a WebDriver instance after a test in Java. It closes the browser and quits the driver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@AfterEach\npublic void tearDown() {\n    driver.quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Capabilities After Selenium 4 - JavaScript\nDESCRIPTION: This JavaScript code illustrates how to define browser capabilities in Selenium 4 using an object that includes standard W3C capabilities and vendor-prefixed options.  It sets browserName, browserVersion, platformName, and a 'cloud:options' object for custom build and name properties.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ncapabilities = {\n  browserName: 'firefox',\n  browserVersion: '92',\n  platformName: 'Windows 10',\n  'cloud:options': {\n     build: myTestBuild,\n     name: myTestName,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cancel Auth Request - Selenium BiDi - Java\nDESCRIPTION: This Java snippet shows how to cancel a request blocked at the 'authRequired' phase using Selenium's BiDi API. It uses the `cancelRequest` method to terminate the request. Requires Selenium 4.18 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nNetwork network = driver.getDevTools().getDomains().network();\nString intercept = network.addIntercept(\"https://example.com\",\n    new AddInterceptParameters()).getId();\nnetwork.onAuthRequired(event -> {\n  network.cancelRequest(new CancelParameters(event.getRequest().getRequestId()));\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Relative Locators - Kotlin\nDESCRIPTION: Chains relative locators in Kotlin to locate a button element below the element with ID 'email' and to the right of the element with ID 'cancel'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_66\n\nLANGUAGE: Kotlin\nCODE:\n```\nval submitLocator = RelativeLocator.with(By.tagName(\"button\")).below(By.id(\"email\")).toRightOf(By.id(\"cancel\"))\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Port - Python\nDESCRIPTION: This snippet demonstrates how to specify the port for the driver in Python. It uses the `port` argument in `Service` to set the port number. Requires the Selenium library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.pt-br.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Chrome(service=Service(port=1234))\n```\n\n----------------------------------------\n\nTITLE: Getting Current Window Handle in Selenium\nDESCRIPTION: This snippet demonstrates how to retrieve the unique identifier (window handle) of the currently active browser window or tab using Selenium WebDriver. The window handle is a string that persists for the duration of the session and can be used to switch back to the window later. No specific dependencies are required beyond the standard Selenium WebDriver library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nstring originalWindow = driver.CurrentWindowHandle;\nAssert.IsNotNull(originalWindow);\n\nConsole.WriteLine(originalWindow);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects - Selenium WebDriver\nDESCRIPTION: This snippet shows how to create Color objects from string representations of various color formats such as HEX, RGB, RGBA, HSL, and HSLA in Python. The `Color.from_string()` method is used to parse the color string. This allows for a standard way to work with colors regardless of their initial representation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nHEX_COLOUR = Color.from_string('#2F7ED8')\nRGB_COLOUR = Color.from_string('rgb(255, 255, 255)')\nRGB_COLOUR = Color.from_string('rgb(40%, 20%, 40%)')\nRGBA_COLOUR = Color.from_string('rgba(255, 255, 255, 0.5)')\nRGBA_COLOUR = Color.from_string('rgba(40%, 20%, 40%, 0.5)')\nHSL_COLOUR = Color.from_string('hsl(100, 0%, 50%)')\nHSLA_COLOUR = Color.from_string('hsla(100, 0%, 50%, 0.5)')\n```\n\n----------------------------------------\n\nTITLE: Merging Capabilities After Selenium 4 (Java)\nDESCRIPTION: This code shows how capabilities are merged in Selenium 4. The `merge` operation's result needs to be assigned to an object, as it no longer modifies the caller object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_25\n\nLANGUAGE: Java\nCODE:\n```\nMutableCapabilities capabilities = new MutableCapabilities();\ncapabilities.setCapability(\"platformVersion\", \"Windows 10\");\nFirefoxOptions options = new FirefoxOptions();\noptions.setHeadless(true);\noptions = options.merge(capabilities);\nThe result of the `merge` call needs to be assigned to an object.\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Location - CSharp\nDESCRIPTION: This snippet illustrates how to specify the driver location in C#. It uses the `ChromeDriverService` to set the path to the ChromeDriver executable.  Requires Selenium.WebDriver NuGet package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.pt-br.md#_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\nnew ChromeDriver(ChromeDriverService.CreateDefaultService(\"/path/to/directory\")).Quit();\n```\n\n----------------------------------------\n\nTITLE: Registering Node with Hub using Non-Default Ports (Shell)\nDESCRIPTION: This command shows how to register a Selenium Node with a Hub that is using non-default ports for its Event Bus and Hub. It's crucial to specify the correct ports for `--publish-events`, `--subscribe-events`, and `--port` to ensure proper communication between the Node and Hub.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.pt-br.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-<version>.jar hub --publish-events tcp://<hub-ip>:8886 --subscribe-events tcp://<hub-ip>:8887 --port 8888\n```\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --publish-events tcp://<hub-ip>:8886 --subscribe-events tcp://<hub-ip>:8887\n```\n\n----------------------------------------\n\nTITLE: Take Element Screenshot - Selenium\nDESCRIPTION: This Kotlin snippet demonstrates how to capture a screenshot of a specific element on the current browser window using Selenium WebDriver. It navigates to a website, finds the h1 element, takes a screenshot of it, saves it as a PNG image, and then closes the browser. Requires selenium-java and commons-io dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_81\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.apache.commons.io.FileUtils\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.*\nimport java.io.File\n\nfun main() {\n    val driver = ChromeDriver()\n    driver.get(\"https://www.example.com\")\n    val element = driver.findElement(By.cssSelector(\"h1\"))\n    val scrFile: File = element.getScreenshotAs(OutputType.FILE)\n    FileUtils.copyFile(scrFile, File(\"./image.png\"))\n    driver.quit()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium with Pip\nDESCRIPTION: Installs the Selenium Python library using pip.  This is the most common way to install Selenium in a Python environment.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.zh-cn.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install selenium\n```\n\n----------------------------------------\n\nTITLE: Listening to Specific Events with WebDriverListener (Java)\nDESCRIPTION: This snippet illustrates how to listen to specific WebDriver events using the WebDriverListener interface.  The key difference from the older WebDriverEventListener is the use of `default` methods, allowing listeners to implement only the methods they need, rather than all methods in the interface.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/java-removal-of-deprecated-events-classes.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Old approach\npublic class AlertListener implements WebDriverEventListener {\n    @Override\n    public void beforeAlertAccept(final WebDriver driver) {\n        // custom implementation goes here\n    }\n// implement every method in interface\n}\n\n// New approach\npublic class AlertListener implements WebDriverListener {\n    @Override\n    public void beforeAccept(Alert alert) {\n        // custom implementation goes here\n    }\n// does not need to implement every method in interface\n}\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Selenium Python\nDESCRIPTION: This Python code snippet checks if a button input element is enabled using Selenium WebDriver, asserting that the result matches the expected enabled state.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nassert driver.find_element(By.NAME, \"button_input\").is_enabled() is False\n```\n\n----------------------------------------\n\nTITLE: Find Element by ID - JavaScript\nDESCRIPTION: This snippet demonstrates locating a web element using its ID in JavaScript. It initializes a ChromeDriver and uses the `findElement` method with `By.id` to locate the element with the ID 'lname'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.id('lname'));\n```\n\n----------------------------------------\n\nTITLE: Getting Credential in Java\nDESCRIPTION: Returns the list of credentials that the authenticator has in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nbyte[] bytes = new byte[16];\nnew Random().nextBytes(bytes);\nCredential cred = new Credential()\n    .setId(bytes)\n    .setAlgorithm(Algorithm.ES256)\n    .setUserHandle(bytes)\n    .setResidentKey(true);\nauthenticator.addCredential(cred);\nList<Credential> credentials = authenticator.getCredentials();\nassertThat(credentials).isNotEmpty();\n```\n\n----------------------------------------\n\nTITLE: Configuring a Unicorn (CSharp)\nDESCRIPTION: This snippet demonstrates how to configure a unicorn with specific attributes using a Unicorn object and Page Object Model. It assumes the existence of Unicorn, UnicornColors, UnicornAccessories, and UnicornAdornments classes. It creates a Unicorn object with specified attributes and then uses the AddUnicorn and CreateUnicorn methods to fill out a form and submit it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\n// The Unicorn is a top-level Object--it has attributes, which are set here. \n// This only stores the values; it does not fill out any web forms or interact\n// with the browser in any way.\nUnicorn sparkles = new Unicorn(\"Sparkles\", UnicornColors.Purple, UnicornAccessories.Sunglasses, UnicornAdornments.StarTattoos);\n\n// Since we are already \"on\" the account page, we have to use it to get to the\n// actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n// takes us there.\nAddUnicornPage addUnicornPage = accountPage.AddUnicorn();\n\n// Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n// its createUnicorn() method. This method will take Sparkles' attributes,\n// fill out the form, and click submit.\nUnicornConfirmationPage unicornConfirmationPage = addUnicornPage.CreateUnicorn(sparkles);\n```\n\n----------------------------------------\n\nTITLE: De-selecting Option by Value in Select List - CSharp\nDESCRIPTION: This C# snippet demonstrates how to de-select an option in a multiple select list by its value using Selenium WebDriver. It assumes that you have already initialized the WebDriver and located the select element. The code creates a `SelectElement` object from the `IWebElement` and calls `DeselectByValue()` with the value of the option to de-select. Prior to de-selecting, all options are cleared.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\nselect.DeselectAll();\nselect.DeselectByValue(\"Volvo\");\n```\n\n----------------------------------------\n\nTITLE: Remove All Credentials in JavaScript\nDESCRIPTION: This Javascript code removes all credentials from the authenticator using the DevTools protocol.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst devtools = await driver.getDevTools()\nawait devtools.attachSession()\nawait devtools.send('WebAuthn.removeAllCredentials')\n\n```\n\n----------------------------------------\n\nTITLE: Releasing Actions in Selenium BiDi (JavaScript)\nDESCRIPTION: This snippet demonstrates how to release actions using Selenium's BiDirectional API in JavaScript. It requires Selenium version 4.17 or later. The code calls `performActions` with an empty list of actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/input.ja.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.executeScript('await window.cdc.input.performActions([])');\n```\n\n----------------------------------------\n\nTITLE: Maximize Window - Kotlin\nDESCRIPTION: Demonstrates how to maximize the browser window in Kotlin using Selenium WebDriver. The `maximize()` method expands the window to fill the screen without blocking the operating system's menu and toolbars.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_59\n\nLANGUAGE: kotlin\nCODE:\n```\ndriver.manage().window().maximize()\n```\n\n----------------------------------------\n\nTITLE: Removing All Credentials in C#\nDESCRIPTION: This C# code snippet removes all the credentials from the virtual authenticator. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_32\n\nLANGUAGE: CSharp\nCODE:\n```\nawait session.SendCommand(new RemoveAllCredentialsCommandSettings());\n```\n\n----------------------------------------\n\nTITLE: Evaluate script in sandbox (JavaScript)\nDESCRIPTION: This JavaScript code evaluates a script in a sandbox environment using Selenium BiDi. It creates a sandbox within a browsing context and then evaluates the expression '1 + 1' inside the sandbox, verifying that the result is 2.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('evaluate script in sandbox', async () => {\n    let browsingContext = await getBrowsingContext(driver);\n\n    let sandbox = await session.execute({\n      method: 'script.createSandbox',\n      params: { browsingContext: browsingContext.context },\n    });\n\n    let result = await session.execute({\n      method: 'script.evaluate',\n      params: {\n        expression: '1 + 1',\n        target: { sandbox: sandbox.result.sandbox },\n      },\n    });\n\n    expect(result.result.result.value).toBe(2);\n  });\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Driver with Options - Java\nDESCRIPTION: This Java snippet demonstrates how to initialize a local WebDriver instance using ChromeOptions. It sets browser-specific configurations before creating the WebDriver session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\nWebDriver driver = new ChromeDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Chrome Casting - CSharp\nDESCRIPTION: This snippet is a placeholder as there is no code provided. The goal is to show how to drive Chrome Cast devices in C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_49\n\nLANGUAGE: CSharp\nCODE:\n```\n// No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Create Unicorn and Submit Form (CSharp)\nDESCRIPTION: This snippet demonstrates creating a Unicorn object with specific attributes and submitting the form using the addUnicornPage object. It shows how the Unicorn object is passed to the CreateUnicorn() method to fill out the form and click submit. It assumes Unicorn, UnicornColors, UnicornAccessories, UnicornAdornments, AddUnicornPage, AccountPage, and UnicornConfirmationPage are defined elsewhere.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_10\n\nLANGUAGE: CSharp\nCODE:\n```\n// The Unicorn is a top-level Object--it has attributes, which are set here. \n// This only stores the values; it does not fill out any web forms or interact\n// with the browser in any way.\nUnicorn sparkles = new Unicorn(\"Sparkles\", UnicornColors.Purple, UnicornAccessories.Sunglasses, UnicornAdornments.StarTattoos);\n\n// Since we are already \"on\" the account page, we have to use it to get to the\n// actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n// takes us there.\nAddUnicornPage addUnicornPage = accountPage.AddUnicorn();\n\n// Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n// its createUnicorn() method. This method will take Sparkles' attributes,\n// fill out the form, and click submit.\nUnicornConfirmationPage unicornConfirmationPage = addUnicornPage.CreateUnicorn(sparkles);\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium\nDESCRIPTION: This code shows how to handle disabled options. Since Selenium 4.5, you cannot create a Select object from a disabled <select> element, and you cannot select a disabled <option>. Attempting to do so will result in an exception.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_38\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement disabledSelectElement = driver.FindElement(By.Name(\"single_disabled\"));\n```\n\n----------------------------------------\n\nTITLE: Verify Unicorn Existence (Kotlin)\nDESCRIPTION: This snippet demonstrates verifying the existence of the created unicorn using the `exists()` method of the UnicornConfirmationPage. It asserts that the 'Sparkles' unicorn has been created with all attributes intact by comparing the provided `sparkles` object with the data on the confirmation page. It relies on JUnit's `assertTrue` function.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\n// The exists() method from UnicornConfirmationPage will take the Sparkles \n// object--a specification of the attributes you want to see, and compare\n// them with the fields on the page.\nassertTrue(\"Sparkles should have been created, with all attributes intact\", unicornConfirmationPage.exists(sparkles))\n```\n\n----------------------------------------\n\nTITLE: Defining Unicorn Attributes in Java\nDESCRIPTION: This snippet defines the attributes of a Unicorn object and then uses the AccountPage and AddUnicornPage objects to configure the unicorn. It takes the sparkles object, fills out a web form, and clicks submit. Dependencies include the Unicorn, UnicornColors, UnicornAccessories, UnicornAdornments, AccountPage, and AddUnicornPage classes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n// The Unicorn is a top-level Object--it has attributes, which are set here. \n// This only stores the values; it does not fill out any web forms or interact\n// with the browser in any way.\nUnicorn sparkles = new Unicorn(\"Sparkles\", UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS);\n\n// Since we are already \"on\" the account page, we have to use it to get to the\n// actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n// takes us there.\nAddUnicornPage addUnicornPage = accountPage.addUnicorn();\n\n// Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n// its createUnicorn() method. This method will take Sparkles' attributes,\n// fill out the form, and click submit.\nUnicornConfirmationPage unicornConfirmationPage = addUnicornPage.createUnicorn(sparkles);\n```\n\n----------------------------------------\n\nTITLE: Drain Node Directly\nDESCRIPTION: Drains a node directly, allowing it to gracefully shut down after all running sessions are completed. This command is equivalent to issuing the drain command through the distributor.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.ja.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request POST 'http://localhost:5555/se/grid/node/drain' --header 'X-REGISTRATION-SECRET: <secret>'\n```\n\n----------------------------------------\n\nTITLE: WebDriver Quit with try/finally - Java\nDESCRIPTION: This Java snippet uses a `try/finally` block to ensure that the WebDriver session is always closed, even if an exception occurs within the `try` block. The `driver.quit()` method is called in the `finally` block.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_20\n\nLANGUAGE: java\nCODE:\n```\ntry {\n    //WebDriver code here...\n} finally {\n    driver.quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Iterate and Extract Text from Elements\nDESCRIPTION: This snippet demonstrates how to iterate through a list of WebElements obtained using `findElements` and extract the text content of each element. It navigates to a webpage, retrieves all `<p>` elements, and then prints the text of each element to the console. Dependencies: org.openqa.selenium.By, org.openqa.selenium.firefox.FirefoxDriver\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_28\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.By\nimport org.openqa.selenium.firefox.FirefoxDriver\n\nfun main() {\n    val driver = FirefoxDriver()\n    try {\n        driver.get(\"https://example.com\")\n        // Get all the elements available with tag name 'p'\n        val elements = driver.findElements(By.tagName(\"p\"))\n        for (element in elements) {\n            println(\"Paragraph text:\" + element.text)\n        }\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Silent Capability in Internet Explorer - JavaScript\nDESCRIPTION: This snippet shows how to set the 'silent' capability in JavaScript for Internet Explorer. This disables diagnostic outputs of the IEDriverServer. The code creates capabilities, sets the 'silent' option, and then uses these capabilities when building the WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {Builder,By, Capabilities} = require('selenium-webdriver');\nlet caps = Capabilities.ie();\ncaps.set('silent', true);\n\n(async function example() {\n    let driver = await new Builder()\n        .forBrowser('internet explorer')\n        .withCapabilities(caps)\n        .build();\n    try {\n        await driver.get('http://www.google.com/ncr');\n    }\n    finally {\n        await driver.quit();\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Custom Driver Configuration TOML\nDESCRIPTION: Demonstrates customizing driver configurations for Firefox Nightly, Chrome Beta, and Chrome Dev, including specifying browser versions, platform names, and binary locations.  The `webdriver-executable` property must be specified and point to the location of the chromedriver executable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.ja.md#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\ndetect-drivers = false\n[[node.driver-configuration]]\nmax-sessions = 100\ndisplay-name = \"Firefox Nightly\"\nstereotype = \"{\\\"browserName\\\": \\\"firefox\\\", \\\"browserVersion\\\": \\\"93\\\", \\\"platformName\\\": \\\"MAC\\\", \\\"moz:firefoxOptions\\\": {\\\"binary\\\": \\\"/Applications/Firefox Nightly.app/Contents/MacOS/firefox-bin\\\"}}\"\n[[node.driver-configuration]]\ndisplay-name = \"Chrome Beta\"\nstereotype = \"{\\\"browserName\\\": \\\"chrome\\\", \\\"browserVersion\\\": \\\"94\\\", \\\"platformName\\\": \\\"MAC\\\", \\\"goog:chromeOptions\\\": {\\\"binary\\\": \\\"/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta\\\"}}\"\n[[node.driver-configuration]]\ndisplay-name = \"Chrome Dev\"\nstereotype = \"{\\\"browserName\\\": \\\"chrome\\\", \\\"browserVersion\\\": \\\"95\\\", \\\"platformName\\\": \\\"MAC\\\", \\\"goog:chromeOptions\\\": {\\\"binary\\\": \\\"/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev\\\"}}\"\nwebdriver-executable = '/path/to/chromedriver/95/chromedriver'\n```\n\n----------------------------------------\n\nTITLE: Asserting Title with Selenium\nDESCRIPTION: This code snippet shows how to assert the title of a webpage using Selenium with Mocha in JavaScript. It retrieves the title and asserts that it matches the expected value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.ja.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst title = await driver.getTitle();\nexpect(title).to.equal('SeleniumHQ Browser Automation');\n```\n\n----------------------------------------\n\nTITLE: Clear New Session Queue\nDESCRIPTION: Clears the new session queue, rejecting all pending requests and returning an error response to each client. The result is the number of requests removed from the queue.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.ja.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://localhost:4444/se/grid/newsessionqueue/queue' --header 'X-REGISTRATION-SECRET: <secret>'\n```\n\n----------------------------------------\n\nTITLE: Setting Append Log and Readable Timestamp for Edge in Python\nDESCRIPTION: This Python code demonstrates how to enable appending to the log file and using readable timestamps when logging in Edge. Requires specifying the log path and log level.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\noptions.add_argument('--append-log')\noptions.add_argument('--readable-timestamp')\n```\n\n----------------------------------------\n\nTITLE: Get browsing context tree with depth in JavaScript\nDESCRIPTION: This snippet shows how to retrieve the browsing context tree with a specified depth using WebDriver BiDi in JavaScript. It retrieves all descendant browsing contexts up to the specified depth, including the parent.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nlet tree = await browsingContext.getTree({depth: 1});\nexpect(tree.contexts.length).toBeGreaterThan(0);\n```\n\n----------------------------------------\n\nTITLE: Setting Background Printing in Selenium C#\nDESCRIPTION: This C# code snippet demonstrates how to enable background printing using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_16\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.Background = true;\n\nAssert.That(printOptions.Background, Is.True);\n```\n\n----------------------------------------\n\nTITLE: Set Background Java\nDESCRIPTION: This code snippet demonstrates how to set whether to print background colors and images in Java with Selenium, using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setBackground(true);\n\nbyte[] pdfContent = ((PrintsPage) driver).print(printOptions);\n```\n\n----------------------------------------\n\nTITLE: Kotlin Assertion Example\nDESCRIPTION: This snippet demonstrates how to perform an assertion in Kotlin using JUnit 5 to check the title of the webpage. It expects the title to match 'SeleniumHQ Browser Automation'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.junit.jupiter.api.Assertions\n\nAssertions.assertEquals(\"SeleniumHQ Browser Automation\", driver.title)\n```\n\n----------------------------------------\n\nTITLE: Running Mocha Tests with npx\nDESCRIPTION: This code snippet demonstrates running tests using Mocha through npx from the command line, specifying the test file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nnpx mocha runningTests.spec.js\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - Selenium WebDriver - Java\nDESCRIPTION: This snippet retrieves the x and y coordinates of the top-left corner of the browser window using the Selenium WebDriver API in Java. It demonstrates accessing each coordinate individually and storing the position in a Point object. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\n// 分别获取每个尺寸\nint x = driver.manage().window().getPosition().getX();\nint y = driver.manage().window().getPosition().getY();\n\n// 或者存储尺寸并在以后查询它们\nPoint position = driver.manage().window().getPosition();\nint x1 = position.getX();\nint y1 = position.getY();\n```\n\n----------------------------------------\n\nTITLE: De-selecting Option in Select List - CSharp\nDESCRIPTION: This C# code snippet shows how to de-select an option from a multiple select list using Selenium WebDriver. It utilizes the `SelectElement` class and the `DeselectByText` method. The code assumes that the Select element has been properly initialized.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_44\n\nLANGUAGE: CSharp\nCODE:\n```\nselect.DeselectByText(\"Cheese\");\n```\n\n----------------------------------------\n\nTITLE: Call function in realm (Java)\nDESCRIPTION: This Java code snippet illustrates calling a function within a specific realm using Selenium BiDi. It evaluates a JavaScript expression to obtain a realm and subsequently calls a function within that realm using `script.callFunction`. The realm is identified by its handle.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void callFunctionInRealm() {\n        try (Bidi bidi = new Bidi(driver)) {\n            BrowsingContext browsingContext = new BrowsingContext(bidi, driver);\n            browsingContext.navigate(getUrl(\"formPage.html\"));\n\n            EvaluateResult realmResult = bidi.script().evaluate(\n                EvaluateParameters.builder()\n                    .setExpression(\"() => 1\")\n                    .setTarget(browsingContext.getId())\n                    .build(),\n                EvaluateResult.class);\n\n            String realm = ((StringHandle) realmResult.getResult()).getValue();\n\n            CallFunctionResult result = bidi.script().callFunction(\n                new CallFunctionParameters(\"() => 1\", realm,\n                    Collections.emptyList()),\n                CallFunctionResult.class);\n\n            assertEquals(1L, result.getResult().getValue());\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Get tracing configuration details for Selenium Grid\nDESCRIPTION: This command provides instructions on how to export tracing data and visualize it via Jaeger. Tracing is enabled by default, and this command assists in setting up the export and visualization components.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.ja.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar info tracing\n```\n\n----------------------------------------\n\nTITLE: Release Actions in Browsing Context - Java\nDESCRIPTION: This Java snippet demonstrates how to release previously performed actions within a browsing context using WebDriver BiDi. It uses the `input.releaseActions` command to release all pressed keys or pointer buttons. This ensures that the browser returns to its default state after performing actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/input.zh-cn.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n        BiDi mapper = new BiDi((HasDevTools) driver);\n\n        // Release the action\n        mapper.releaseActions(List.of(getActionStructure(\"pointer\", \"pointerUp\", 0, 1, 1).getId()));\n\n```\n\n----------------------------------------\n\nTITLE: Setting User Verified in C#\nDESCRIPTION: This C# code snippet configures the virtual authenticator to indicate if the user is verified or not. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_36\n\nLANGUAGE: CSharp\nCODE:\n```\nawait session.SendCommand(new SetUserVerifiedCommandSettings()\n{\n    IsUserVerified = true\n});\n```\n\n----------------------------------------\n\nTITLE: Maximize Window - Selenium WebDriver - C#\nDESCRIPTION: This snippet maximizes the browser window using the Selenium WebDriver API in C#. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_37\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Manage().Window.Maximize();\n```\n\n----------------------------------------\n\nTITLE: Network Conditions - JavaScript\nDESCRIPTION: This snippet is a placeholder as there is no code provided. The goal is to show how to simulate Network Conditions with Javascript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_57\n\nLANGUAGE: JavaScript\nCODE:\n```\n// No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Install Firefox Extension (Ruby)\nDESCRIPTION: This Ruby code snippet shows how to install a Firefox extension (.xpi file) using Selenium.  Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.install_addon('/path/to/extension.xpi')\n```\n\n----------------------------------------\n\nTITLE: Install Firefox Extension (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to install a Firefox extension (.xpi file) using Selenium. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.installAddon('/path/to/extension.xpi');\n```\n\n----------------------------------------\n\nTITLE: Get Browser Title - Java\nDESCRIPTION: This Java snippet shows how to retrieve the title of the current web page using Selenium WebDriver. It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver.getTitle();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins in Selenium Python\nDESCRIPTION: This Python code snippet demonstrates how to set the page margins using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nprint_options = PrintOptions()\npage_margins = {\"top\": 1, \"bottom\": 2, \"left\": 3, \"right\": 4}\nprint_options.margin = page_margins\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Version - Java\nDESCRIPTION: This Java snippet sets the browser version using ChromeOptions.  It creates an options instance and sets the browser version to '105.0.5195.52'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setBrowserVersion(\"105.0.5195.52\");\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Kotlin\nDESCRIPTION: Demonstrates how to handle disabled options in a Select element in Kotlin. It attempts to select a disabled option and expects an exception to be thrown.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_41\n\nLANGUAGE: kotlin\nCODE:\n```\nassertThrows<InvalidElementStateException> {\n    select.selectByValue(\"disabled\")\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstall Firefox Extension (Ruby)\nDESCRIPTION: This Ruby code snippet shows how to uninstall a Firefox extension given its ID using Selenium. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.uninstall_addon('extension@example.com')\n```\n\n----------------------------------------\n\nTITLE: Get Browser Title - Kotlin\nDESCRIPTION: This Kotlin code retrieves the current page title using Selenium WebDriver. Requires an initialized WebDriver instance named `driver`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.pt-br.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.title\n```\n\n----------------------------------------\n\nTITLE: Back Click with Selenium\nDESCRIPTION: Performs a back click by pressing and releasing mouse button 3.  It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"clickable\"));\nActions actions = new Actions(driver);\nactions.moveToElement(element)\n        .buttonDown(MouseButton.BACK)\n        .buttonUp(MouseButton.BACK)\n        .perform();\n```\n\n----------------------------------------\n\nTITLE: HTML IFrame Example\nDESCRIPTION: This HTML snippet shows an example of an IFrame embedded within a div. The IFrame has an ID, name, and source URL. It contains a button element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"modal\">\n  <iframe id=\"buttonframe\" name=\"myframe\"  src=\"https://seleniumhq.github.io\">\n   <button>Click here</button>\n </iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes - Kotlin\nDESCRIPTION: This code snippet demonstrates how to add pointer event attributes to a Pen action in Selenium with Kotlin.  It creates a pen input source and performs actions to simulate a touch with specific properties.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.zh-cn.md#_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element = driver.findElement(By.id(\"example\"))\nval pen = PointerInput(PointerInput.Kind.PEN, \"pen1\")\nval origin = Origin.fromElement(element)\nActions(driver)\n    .tick(pen.createPointerMove(origin, 0, 0, 5, 5, 0.5f, 0.5f, 10, -10, 0))\n    .tick(pen.createPointerDown(MouseButton.LEFT.asArg()))\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Set Permissions - JavaScript\nDESCRIPTION: This snippet is a placeholder as there is no code provided. The goal is to show how to set permissions with Javascript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_69\n\nLANGUAGE: JavaScript\nCODE:\n```\n// No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Get Window Size - CSharp\nDESCRIPTION: This C# snippet demonstrates how to retrieve the dimensions (width and height) of the browser window using Selenium WebDriver. It shows two approaches: accessing each dimension individually and storing the dimensions in a `System.Drawing.Size` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\n//Access each dimension individually\nint width = driver.Manage().Window.Size.Width;\nint height = driver.Manage().Window.Size.Height;\n\n//Or store the dimensions and query them later\nSystem.Drawing.Size size = driver.Manage().Window.Size;\nint width1 = size.Width;\nint height1 = size.Height;\n```\n\n----------------------------------------\n\nTITLE: Intercepting Request - Java\nDESCRIPTION: Demonstrates intercepting requests using Selenium and CDP in Java.  It monitors and logs the URI of each outgoing request that matches a certain predicate (in this case, any request).  It requires Selenium WebDriver and CDP.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n((HasAuthentication) driver).register(Predicate.matchAllRequests(),\n        new FetchHandler() {\n          @Override\n          public Optional<Fetch.ContinueResponseRequest> apply(Fetch.Request request) {\n            System.out.println(request.getUri());\n            return Optional.of(new Fetch.ContinueResponseRequest(request.getRequestId()));\n          }\n        });\n```\n\n----------------------------------------\n\nTITLE: Converting Colors to Formats for Assertion\nDESCRIPTION: This snippet demonstrates how to convert Color objects to different string formats (HEX, RGBA, RGB) and perform static validations using assertions in Kotlin. It converts the login button's background color to different formats and verifies their values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\nassert(loginButtonBackgroundColour.asHex().equals(\"#ff69b4\"))\nassert(loginButtonBackgroundColour.asRgba().equals(\"rgba(255, 105, 180, 1)\"))\nassert(loginButtonBackgroundColour.asRgb().equals(\"rgb(255, 105, 180)\"))\n```\n\n----------------------------------------\n\nTITLE: Set Logger Level in CSharp\nDESCRIPTION: This snippet shows how to set the logging level in .NET. This controls the verbosity of log messages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nOpenQA.Selenium.Internal.Logging.Log.Level = OpenQA.Selenium.Internal.Logging.LogLevel.Debug;\n```\n\n----------------------------------------\n\nTITLE: Uninstall Firefox Extension (Python)\nDESCRIPTION: This Python code snippet uninstalls a Firefox extension given its ID. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ndriver.uninstall_addon(\"extension@example.com\")\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Element in JavaScript\nDESCRIPTION: This JavaScript code performs a drag and drop operation from a source element to a target element. It requires a WebDriver instance and the source and target elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nawait actions.dragAndDrop(draggable, droppable).perform();\n```\n\n----------------------------------------\n\nTITLE: Using Browser Enum After Selenium 4 (Java)\nDESCRIPTION: This code shows the updated way to specify the browser name capability in Selenium 4, using the Browser enum instead of BrowserType.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\nMutableCapabilities capabilities = new MutableCapabilities();\ncapabilities.setCapability(\"browserVersion\", \"92\");\ncapabilities.setCapability(\"browserName\", Browser.FIREFOX);\n```\n\n----------------------------------------\n\nTITLE: Setting Page Scale - Python\nDESCRIPTION: This Python snippet sets the page scale to 0.5 using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.print_options import PrintOptions\n\nprint_options = PrintOptions()\nprint_options.scale = 0.5\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Authentication - Ruby\nDESCRIPTION: Demonstrates setting basic authentication credentials using Selenium and CDP in Ruby. The Authorization header is set in the request to skip authentication challenges. Requires Selenium WebDriver and Base64 encoding.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nencoded_credentials = Base64.strict_encode64('username:password')\nheaders = {\n  'headers' => { 'Authorization' => \"Basic #{encoded_credentials}\" }\n}\n@driver.execute_cdp 'Network.setExtraHTTPHeaders', headers\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Add-ons in Firefox with Selenium (Java)\nDESCRIPTION: This Java snippet uninstalls a Firefox add-on given its ID. The `uninstallExtension` method of the `driver` object is used to remove the add-on.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_37\n\nLANGUAGE: java\nCODE:\n```\ndriver.uninstallExtension(\"addon@id\");\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset - Java\nDESCRIPTION: This Java code snippet demonstrates how to scroll from an offset of the viewport using Selenium's Actions API and Wheel class. It takes an x offset, a y offset, delta x and delta y values. It scrolls from the origin point which is the upper left corner of the current viewport, offset by given x and y values. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nnew Actions(driver).scrollFromOrigin(WheelInput.ScrollOrigin.viewport(25, 25), 50, 100)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Get Grid Status\nDESCRIPTION: Retrieves the current status of the Selenium Grid, including details about registered nodes, their availability, sessions, and slots. This endpoint is useful for monitoring the health and capacity of the grid.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncURL GET 'http://localhost:4444/status'\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi - Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to enable the WebSocket URL capability for BiDi communication. Setting the `webSocketUrl` capability to `true` in the browser options enables the WebSocket connection required for the WebDriver BiDi protocol in Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/_index.pt-br.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\noptions.setCapability(\"webSocketUrl\", true);\n```\n\n----------------------------------------\n\nTITLE: Element Submission with Selenium\nDESCRIPTION: This snippet demonstrates how to submit an HTML form element using Selenium WebDriver. The 'submit()' method is called on the identified element. Dependencies include an initialized WebDriver instance, a loaded webpage, and a found element (e.g., a search box).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nsearchBox.submit()\n```\n\n----------------------------------------\n\nTITLE: Creating Transparent Color Object\nDESCRIPTION: This snippet shows how to create a Color object for transparent color in Python using the from_string method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nTRANSPARENT = Color.from_string('transparent')\n```\n\n----------------------------------------\n\nTITLE: Adding Selenium as PackageReference in CSProj\nDESCRIPTION: Adds Selenium as a `PackageReference` to a C# project's `csproj` file.  This configures Selenium as a dependency that will be restored when the project is built.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.zh-cn.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Selenium.WebDriver\" Version=\"4.18.1\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing ChromeDriver in Python\nDESCRIPTION: This code snippet demonstrates how to initialize a ChromeDriver instance in Python for Selenium WebDriver automation. It imports the webdriver module and creates a Chrome driver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.zh-cn.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Chrome()\n```\n\n----------------------------------------\n\nTITLE: Verify Unicorn Existence (CSharp)\nDESCRIPTION: This snippet demonstrates verifying the existence of the created unicorn using the `Exists()` method of the UnicornConfirmationPage. It asserts that the 'Sparkles' unicorn has been created with all attributes intact by comparing the provided `sparkles` object with the data on the confirmation page. It requires NUnit's Assert library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_16\n\nLANGUAGE: CSharp\nCODE:\n```\n// The exists() method from UnicornConfirmationPage will take the Sparkles \n// object--a specification of the attributes you want to see, and compare\n// them with the fields on the page.\nAssert.True(unicornConfirmationPage.Exists(sparkles), \"Sparkles should have been created, with all attributes intact\");\n```\n\n----------------------------------------\n\nTITLE: Minimize Window in Selenium\nDESCRIPTION: This code minimizes the browser window using Selenium WebDriver. The exact behavior depends on the window manager and it typically hides the window in the system tray. Requires Selenium 4 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_68\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.window.minimize\n```\n\n----------------------------------------\n\nTITLE: Enabling Managed Downloads Configuration\nDESCRIPTION: Shows how to enable managed downloads on a Selenium Node.  When enabled, the Node will automatically save downloaded files into a temporary directory for later retrieval.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.en.md#_snippet_11\n\nLANGUAGE: TOML\nCODE:\n```\n[node]\nenable-managed-downloads = true\n```\n\n----------------------------------------\n\nTITLE: Getting Credential in Java\nDESCRIPTION: This Java snippet retrieves the list of credentials owned by the authenticator using the WebAuthn API. It then iterates over the credentials and prints their IDs. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nList<Credential> credentials = devTools.getDomains().getWebAuthn().getCredentials();\n\ncredentials.forEach(credential -> {\n  System.out.println(credential.getId());\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Python\nDESCRIPTION: This Python snippet demonstrates how to configure an HTTP client in Selenium. It sets different parameters for the HTTP library to customize how Selenium interacts with the browser during automation. The full code is in test_http_client.py.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/http_client.pt-br.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n{{< gh-codeblock path=\"examples/python/tests/drivers/test_http_client.py\" >}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Pen Input Source Python\nDESCRIPTION: This code snippet demonstrates how to create a Pen input source in Python and use it to interact with a web element. It defines a Pen, moves it to a specific element, and then performs a down and up action, simulating a tap or click. Requires Selenium version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.pt-br.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npen = Pen(driver, \"pen1\")\nelement = driver.find_element(By.ID, \"my-element\")\n\nactions = ActionBuilder(driver)\nactions.tick(pen.move_to(element))\nactions.tick(pen.down(MouseButton.LEFT))\nactions.tick(pen.up(MouseButton.LEFT))\nactions.perform()\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to scroll from an offset of the viewport using Selenium's Actions API and Wheel class. It takes an x offset, a y offset, delta x and delta y values. It scrolls from the origin point which is the upper left corner of the current viewport, offset by given x and y values. Dependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.zh-cn.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.actions().scrollFromOrigin({ origin: 'viewport', x: 25, y: 25 }, {x: 50, y: 100}).perform();\n```\n\n----------------------------------------\n\nTITLE: Finding Elements After Selenium 4 - Java\nDESCRIPTION: This Java code shows the recommended way to find single elements in Selenium 4, using the `findElement` method with `By` locators.  It demonstrates using `By.className`, `By.cssSelector`, etc.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\ndriver.findElement(By.className(\"className\"));\ndriver.findElement(By.cssSelector(\".className\"));\ndriver.findElement(By.id(\"elementId\"));\ndriver.findElement(By.linkText(\"linkText\"));\ndriver.findElement(By.name(\"elementName\"));\ndriver.findElement(By.partialLinkText(\"partialText\"));\ndriver.findElement(By.tagName(\"elementTagName\"));\ndriver.findElement(By.xpath(\"xPath\"));\n```\n\n----------------------------------------\n\nTITLE: Installing Add-ons in Firefox with Selenium (JavaScript)\nDESCRIPTION: This snippet demonstrates how to install a Firefox add-on using Selenium WebDriver in JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst extension = path.join(__dirname, 'webextensions-selenium-example.xpi');\nconst extensionId = await driver.installAddon(extension, true);\nexpect(extensionId).toBeDefined()\n```\n\n----------------------------------------\n\nTITLE: BasePage Class in Java\nDESCRIPTION: This Java code defines an abstract BasePage class that all page objects inherit from. It initializes the WebDriver instance, providing a foundation for interacting with web elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.pt-br.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class BasePage {\n    protected WebDriver driver;\n\n    public BasePage(WebDriver driver) {\n        this.driver = driver;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Elements Before Selenium 4 - Java\nDESCRIPTION: This Java code demonstrates how to find single elements using specific methods like `findElementByClassName`, `findElementByCssSelector`, etc., which are deprecated in Selenium 4. These methods are part of the `FindsBy` interface.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\ndriver.findElementByClassName(\"className\");\ndriver.findElementByCssSelector(\".className\");\ndriver.findElementById(\"elementId\");\ndriver.findElementByLinkText(\"linkText\");\ndriver.findElementByName(\"elementName\");\ndriver.findElementByPartialLinkText(\"partialText\");\ndriver.findElementByTagName(\"elementTagName\");\ndriver.findElementByXPath(\"xPath\");\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level - Python\nDESCRIPTION: Demonstrates setting the log level for the Edge driver in Python.\nThis example sets the log level to 'DEBUG', enabling verbose logging.\nDependencies: Selenium WebDriver, Edge, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\nservice = EdgeService(log_level=\"DEBUG\")\ndriver = Edge(service=service, options=options)\n```\n\n----------------------------------------\n\nTITLE: Pausing Actions API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to pause between actions using the Actions API in JavaScript. It creates an Actions object, moves to an element, pauses for a specified duration, and then performs the actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.pt-br.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = driver.actions();\nactions.move({origin:element})\n  .pause(1000)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Setting IE Driver Log Level - Python\nDESCRIPTION: This Python snippet shows how to set the log level when initializing the InternetExplorerService. It configures the service with a specific log level for capturing diagnostic information during test execution.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nservice = InternetExplorerService(log_level=\"DEBUG\")\ndriver = Ie(service=service)\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Get Router Configuration Help\nDESCRIPTION: This command displays component-specific configuration information for the Router role. It uses the `--help` option after specifying the router role.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.en.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar router --help\n```\n\n----------------------------------------\n\nTITLE: Installing Maven Dependencies\nDESCRIPTION: Installs the necessary dependencies for the Selenium Java tests using Maven. Requires Maven to be installed and configured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/java/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn test-compile\n```\n\n----------------------------------------\n\nTITLE: Using a Pen with Selenium (Kotlin)\nDESCRIPTION: This Kotlin code snippet demonstrates how to create and use a Pen input source in Selenium to interact with a web page. It creates a pen device and moves it to a specific element, then performs a pen down and pen up action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.ja.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval pen = Pen(\"pen1\")\nval element = driver.findElement(By.id(\"example\"))\n\nActions(driver)\n    .moveToElement(element)\n    .tick(pen.createPointerMove(Duration.ofMillis(1), PointerInput.Origin.fromElement(element), 0, 0))\n    .tick(pen.createPointerDown(PointerInput.MouseButton.LEFT.asArg()))\n    .tick(pen.createPointerUp(PointerInput.MouseButton.LEFT.asArg()))\n    .perform()\n```\n\n----------------------------------------\n\nTITLE: Locating Element to the Right - Python\nDESCRIPTION: Locates a button element to the right of the element with ID 'cancel' in Python. The `locate_with` function and `to_right_of` method are used to find the element relative to the cancel button.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_53\n\nLANGUAGE: Python\nCODE:\n```\nsubmit_locator = locate_with(By.TAG_NAME, \"button\").to_right_of({By.ID: \"cancel\"})\n```\n\n----------------------------------------\n\nTITLE: Get browsing context realms (Java)\nDESCRIPTION: This Java snippet demonstrates how to retrieve realms associated with a specific browsing context using Selenium BiDi. It utilizes the `GetRealmsParameters` builder to specify the browsing context ID.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\n            List<RealmInfo> contextRealms = bidi.script().getRealms(GetRealmsParameters.builder().setBrowsingContext(browsingContext.getId()).build());\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies using CDP in C#\nDESCRIPTION: This C# code demonstrates how to set cookies using the Chrome DevTools Protocol (CDP) in Selenium. It constructs a cookie object with specified name, value, domain, and path, and then uses the `Network.setCookie` method to set the cookie in the browser. This is useful for managing cookies for testing purposes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nstring name = \"foo\";\nstring value = \"bar\";\nstring domain = \".example.com\";\nstring path = \"/\";\nDictionary<string, object> cookie = new Dictionary<string, object>()\n{\n    { \"name\", name },\n    { \"value\", value },\n    { \"domain\", domain },\n    { \"path\", path }\n};\ndriver.ExecuteCdpCommand(\"Network.enable\", new Dictionary<string, object>());\ndriver.ExecuteCdpCommand(\"Network.setCookie\", cookie);\nCookie addedCookie = driver.Manage().Cookies.GetCookieNamed(name);\n```\n\n----------------------------------------\n\nTITLE: Setting Append Log and Readable Timestamp for Edge in Ruby\nDESCRIPTION: These Ruby code snippets demonstrate how to enable appending to the log file and using readable timestamps when logging in Edge. Requires specifying the log path and log level.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.edge(args: ['--append-log', '--readable-timestamp'])\n```\n\n----------------------------------------\n\nTITLE: Using Coursier to Fetch Selenium HTTP JDK Client\nDESCRIPTION: This command uses Coursier to fetch the `selenium-http-jdk-client` JAR and then starts Selenium Grid with the Java 11 HTTP client enabled. The `webdriver.http.factory` system property is set, and the fetched JAR is added as an extension.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.pt-br.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\njava -Dwebdriver.http.factory=jdk-http-client -jar selenium-server-<version>.jar --ext $(coursier fetch -p org.seleniumhq.selenium:selenium-http-jdk-client:<version>) standalone\n```\n\n----------------------------------------\n\nTITLE: DOM Mutation Handler Java\nDESCRIPTION: This Java code snippet demonstrates how to use the Chrome DevTools Protocol (CDP) in Selenium to handle DOM mutations. This involves capturing network activity related to DOM changes. The functionality will be replaced by WebDriver BiDi in the future.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.pt-br.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\ncdp.getDomains().enableNetwork();\n```\n\n----------------------------------------\n\nTITLE: Running All Tests with npm\nDESCRIPTION: This command runs all the tests defined in the `package.json` file using npm. It executes the script specified under the 'test' key, typically running a test runner like Mocha or Jest.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/javascript/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Cloning Selenium Repository\nDESCRIPTION: This command clones the Selenium repository from GitHub to the local machine. The `--depth 1` flag limits the clone to the latest commit to speed up the process.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.ja.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/SeleniumHQ/selenium.git --depth 1\n```\n\n----------------------------------------\n\nTITLE: Locating Element to the Right - JavaScript\nDESCRIPTION: Locates a button element to the right of the element with ID 'cancel' using JavaScript. It uses `locateWith` and `toRightOf` relative locators.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet submitLocator = locateWith(By.tagName('button')).toRightOf(By.id('cancel'));\n```\n\n----------------------------------------\n\nTITLE: Setting Safari Logging (Ruby)\nDESCRIPTION: This code snippet demonstrates how to enable Safari driver logging in Ruby by setting the `Safari.driver_service.log_path` option. This specifies the path for the log file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.zh-cn.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nSelenium::WebDriver::Safari.driver_service.log_path = '/tmp/safari_driver.log'\n```\n\n----------------------------------------\n\nTITLE: Get Current URL - Kotlin\nDESCRIPTION: This Kotlin snippet retrieves the current URL of the page using Selenium WebDriver. It requires an initialized WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.pt-br.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.currentUrl\n```\n\n----------------------------------------\n\nTITLE: Get All Realms - JavaScript\nDESCRIPTION: This snippet retrieves all realms using JavaScript and the WebDriver BiDi API. It leverages the `script.getAllRealms` method to get a list of all available realms. No specific input parameters are needed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('get all realms', async () => {\n  let realms = await connection.script.getAllRealms({});\n  expect(realms.realms.length).toBeGreaterThan(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Exceptions in Python\nDESCRIPTION: This Python code snippet demonstrates capturing JavaScript exceptions using Selenium and CDP. It sets up the driver and uses `execute_cdp_cmd` to enable the 'Runtime' domain and retrieve exception details.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.zh-cn.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndriver.execute_cdp_cmd('Runtime.enable', {})\nprint(driver.execute_cdp_cmd('Runtime.getExceptionDetails', {}))\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency Before Upgrade - JSONPath\nDESCRIPTION: This JSONPath code shows the Gradle dependency configuration for Selenium Java before upgrading to Selenium 4.  It includes the selenium-java version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_12\n\nLANGUAGE: jsonpath\nCODE:\n```\nplugins {\n    id 'java'\n}\ngroup 'org.example'\nversion '1.0-SNAPSHOT'\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'\n    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'\n}\ntest {\n    useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset with Selenium\nDESCRIPTION: This code performs a drag-and-drop operation by a specified offset using Selenium WebDriver. It first clicks and holds the source element, moves the mouse by the offset, and then releases the mouse. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nval source = driver.findElement(By.id(\"draggable\"))\nActions(driver)\n  .clickAndHold(source)\n  .moveByOffset(50, 50)\n  .release()\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to Eager in Ruby\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'eager' in Ruby. The WebDriver waits until the 'DOMContentLoaded' event fires.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::Options.new(page_load_strategy: :eager)\n```\n\n----------------------------------------\n\nTITLE: Setting Page Ranges - Python\nDESCRIPTION: This Python snippet sets the page ranges to print using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.print_options import PrintOptions\n\nprint_options = PrintOptions()\nprint_options.page_ranges = [\"1-2\"]\n```\n\n----------------------------------------\n\nTITLE: PHP Sauce Integration\nDESCRIPTION: This snippet represents another integration between PHP and Sauce OnDemand.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/a-smattering-of-selenium-28.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes Ruby\nDESCRIPTION: This code snippet shows how to add pointer event attributes to a Pen input source in Ruby, specifically setting properties like width, height, pressure, and tilt. Requires Selenium version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.pt-br.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\npen = Pen.new(driver, 'pen1')\nviewport = ::Selenium::WebDriver::PointerInput::Origin.viewport\n\npointer_attributes = {\n  width: 20,\n  height: 40,\n  pressure: 0.8,\n  tiltX: 10,\n  tiltY: -10\n}\n\nsequence = ::Selenium::WebDriver::ActionBuilder::Sequence.new(pen, 1)\nsequence.add_action(pen.create_pointer_move(viewport, 0, 0, duration: 0.01, parameters: pointer_attributes))\nsequence.add_action(pen.create_pointer_down(::Selenium::WebDriver::MouseButton::LEFT))\nsequence.add_action(pen.create_pointer_up(::Selenium::WebDriver::MouseButton::LEFT))\n\ndriver.perform([sequence])\n```\n\n----------------------------------------\n\nTITLE: Verifying Unicorn Configuration in Python\nDESCRIPTION: This snippet verifies that the unicorn was created with the specified attributes by comparing the attributes of the Unicorn object with the fields on the confirmation page. It asserts that the unicorn was created with all attributes intact. Dependencies include the unicorn_confirmation_page object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n# The exists() method from UnicornConfirmationPage will take the Sparkles\n# object--a specification of the attributes you want to see, and compare\n# them with the fields on the page.\nassert unicorn_confirmation_page.exists(sparkles), \"Sparkles should have been created, with all attributes intact\"\n```\n\n----------------------------------------\n\nTITLE: Iterating Through WebElements Collection - JavaScript\nDESCRIPTION: This JavaScript code finds all elements with the CSS selector 'p' on a webpage and iterates through them, printing the text content of each element.  It initializes a Firefox WebDriver, navigates to a URL, finds the elements using `driver.findElements`, and prints each element's text using `e.getText()` in a loop.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {Builder, By} = require('selenium-webdriver');\n(async function example() {\n    let driver = await new Builder().forBrowser('firefox').build();\n    try {\n        // Navegar até a URL\n        await driver.get('https://www.example.com');\n\n        // Obtém todos os elementos disponiveis com o nome da tag 'p'\n        let elements = await driver.findElements(By.css('p'));\n        for(let e of elements) {\n            console.log(await e.getText());\n        }\n    }\n    finally {\n        await driver.quit();\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Python Selenium Installation\nDESCRIPTION: Updates or installs Selenium version 4.4.3 using pip, the Python package installer. This command is executed from the command line or terminal.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\npip install selenium==4.4.3\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - Eager - Ruby\nDESCRIPTION: This Ruby snippet demonstrates setting page load strategy to 'eager'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'page load strategy eager' do\n  expect { options.page_load_strategy = 'eager' }.to_not raise_error\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - Normal - Ruby\nDESCRIPTION: This Ruby snippet demonstrates setting page load strategy to 'normal'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'page load strategy normal' do\n  expect { options.page_load_strategy = 'normal' }.to_not raise_error\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to initialize a ChromeDriver. It's a basic example to start using Selenium with Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.pt-br.md#_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n```\n\n----------------------------------------\n\nTITLE: Displaying Router Component Help\nDESCRIPTION: This command displays configuration help specific to the Router component of the Selenium Grid. Replace `<version>` with the actual Selenium server version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.pt-br.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar router --help\n```\n\n----------------------------------------\n\nTITLE: Installing libatk-bridge2.0-0 on Linux\nDESCRIPTION: This command installs the `libatk-bridge2.0-0` library on Linux using the `apt-get` package manager. This library is required by Chrome for Testing in certain Linux environments. It fixes the \"error while loading shared libraries: libatk-1.0.so.0\" issue.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.pt-br.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libatk-bridge2.0-0\n```\n\n----------------------------------------\n\nTITLE: Java Timeout Configuration (Before)\nDESCRIPTION: Configures timeouts for Selenium WebDriver using TimeUnit.SECONDS and TimeUnit.MINUTES.  The driver's manage() method is used to set implicit wait, script timeout, and page load timeout.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\ndriver.manage().timeouts().setScriptTimeout(2, TimeUnit.MINUTES);\ndriver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to Eager in Ruby\nDESCRIPTION: This snippet shows how to set the page load strategy to 'eager' in Ruby using Selenium. WebDriver waits until the DOMContentLoaded event is fired.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nit 'eager' do\n  expect { options.page_load_strategy = 'eager' }.to_not raise_error\nend\n```\n\n----------------------------------------\n\nTITLE: Display PATH Variable (Windows)\nDESCRIPTION: This command displays the directories currently included in the PATH environment variable on Windows. It allows you to check if the driver's location is already present in the system's PATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.pt-br.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho %PATH%\n```\n\n----------------------------------------\n\nTITLE: Initializing ChromeDriver in Kotlin\nDESCRIPTION: This code snippet demonstrates how to initialize a ChromeDriver instance in Kotlin for Selenium WebDriver automation. It creates a new instance of the ChromeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.zh-cn.md#_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n```\n\n----------------------------------------\n\nTITLE: Get New Session Queue Requests with cURL (Router)\nDESCRIPTION: This snippet retrieves the current requests in the New Session Request Queue, returning the total number of requests and their payloads. No authorization is required. The Grid URL depends on the deployment mode (Router).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://localhost:4444/se/grid/newsessionqueue/queue'\n```\n\n----------------------------------------\n\nTITLE: Java WebDriverWait Configuration (Before)\nDESCRIPTION: Configures WebDriverWait using a long timeout and ExpectedConditions.elementToBeClickable.  FluentWait is configured with TimeUnit for timeout and polling interval.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nnew WebDriverWait(driver, 3)\n.until(ExpectedConditions.elementToBeClickable(By.cssSelector(\"#id\")));\n\nWait<WebDriver> wait = new FluentWait<WebDriver>(driver)\n  .withTimeout(30, TimeUnit.SECONDS)\n  .pollingEvery(5, TimeUnit.SECONDS)\n  .ignoring(NoSuchElementException.class);\n```\n\n----------------------------------------\n\nTITLE: Add Selenium to Gemfile in Ruby\nDESCRIPTION: This line adds the Selenium WebDriver gem to a Ruby project's Gemfile.  Bundler will then install the gem when `bundle install` is run.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.en.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'selenium-webdriver'\n```\n\n----------------------------------------\n\nTITLE: Adding Cookie to Browser Context in Kotlin\nDESCRIPTION: This code snippet demonstrates how to add a cookie to the current browser context using Selenium WebDriver in Kotlin. It navigates to a website and then adds a cookie with the name 'key' and value 'value'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.Cookie\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://example.com\")\n\n        // Adds the cookie into current browser context\n        driver.manage().addCookie(Cookie(\"key\", \"value\"))\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deselecting Option by Value in Selenium\nDESCRIPTION: This code snippet demonstrates how to deselect an option in a multiple select element by its `value` attribute using Selenium WebDriver. The `deselect_by(:value, 'eggs')` method is used to deselect the option based on the provided value. This method only applies to multiple select lists.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_45\n\nLANGUAGE: Ruby\nCODE:\n```\nselect.deselect_by(:value, 'eggs')\n```\n\n----------------------------------------\n\nTITLE: Chaining Relative Locators (Kotlin)\nDESCRIPTION: This snippet demonstrates how to chain relative locators to locate a button element that is below the element with the ID 'email' and to the right of the element with the ID 'cancel' using Selenium's RelativeLocator in Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_66\n\nLANGUAGE: Kotlin\nCODE:\n```\nval submitLocator = RelativeLocator.with(By.tagName(\"button\")).below(By.id(\"email\")).toRightOf(By.id(\"cancel\"))\n```\n\n----------------------------------------\n\nTITLE: Displaying PATH environment variable in Zsh\nDESCRIPTION: This snippet shows how to display the current PATH environment variable in a Zsh terminal. It uses the `echo` command to print the value of the PATH variable, allowing users to see the directories currently included in the search path for executables.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.en.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho $PATH\n```\n\n----------------------------------------\n\nTITLE: Get Credential in C#\nDESCRIPTION: This C# code retrieves the list of credentials owned by the authenticator and verifies one against a given User Id.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nList<GetCredentialResponse> credentials = await session.WebAuthn.GetCredentialsAsync();\nbool found = false;\nforeach (GetCredentialResponse credential in credentials)\n{\n    if (credential.UserId.Equals(Convert.ToBase64String(Encoding.UTF8.GetBytes(\"user4\"))))\n    {\n        found = true;\n        break;\n    }\n}\nAssert.That(found, Is.True);\n\n```\n\n----------------------------------------\n\nTITLE: Sending Keys to an Element\nDESCRIPTION: This snippet demonstrates how to simulate typing text into an input field using Selenium. The `send_keys` method is used to send a sequence of characters to the specified element. The `Keys.RETURN` parameter simulates pressing the Enter key.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nsearch_box.send_keys(\"Selenium\")\nsearch_box.send_keys(Keys.RETURN)\n```\n\n----------------------------------------\n\nTITLE: Enable Logs - Java\nDESCRIPTION: This snippet shows how to enable logging in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_59\n\nLANGUAGE: Java\nCODE:\n```\nLog entries = driver.manage().logs().get(LogType.BROWSER);\n```\n\n----------------------------------------\n\nTITLE: Displaying New Session Queue Component Help\nDESCRIPTION: This command displays configuration help specific to the New Session Queue component of the Selenium Grid. Replace `<version>` with the actual Selenium server version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.pt-br.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar sessionqueue --help\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Levels in Java\nDESCRIPTION: This snippet shows how to set the logger level for both the logger and its handlers in Java. Setting the level helps filter logs based on severity. The example sets the level to ALL, allowing all log messages to be displayed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nlogger.setLevel(Level.ALL);\nfor (Handler handler : logger.getHandlers()) {\n    handler.setLevel(Level.ALL);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Hub with Custom Ports (Shell)\nDESCRIPTION: This command starts a Selenium Grid Hub using custom ports for event publishing, subscribing, and the main port. It specifies ports 8886, 8887, and 8888 for publish-events, subscribe-events, and port, respectively.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.ja.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar hub --publish-events tcp://<hub-ip>:8886 --subscribe-events tcp://<hub-ip>:8887 --port 8888\n```\n\n----------------------------------------\n\nTITLE: Capture Element Screenshot in JavaScript\nDESCRIPTION: This code snippet demonstrates how to capture an element screenshot using Selenium WebDriver's BiDi API in JavaScript. It finds an element using its ID and then captures a screenshot of it using `browsingContext.captureScreenshot`. Requires Selenium version 4.15 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('capture a element screenshot', async () => {\n  let element = await driver.findElement(By.id('header'));\n  const browsingContext = await getBrowsingContext(driver);\n  let result = await browsingContext.captureScreenshot(element);\n  expect(result).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Using BrowserType Before Selenium 4 (Java)\nDESCRIPTION: This code demonstrates how BrowserType was used before Selenium 4. It uses BrowserType.FIREFOX to set the browser name capability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_27\n\nLANGUAGE: Java\nCODE:\n```\nMutableCapabilities capabilities = new MutableCapabilities();\ncapabilities.setCapability(\"browserVersion\", \"92\");\ncapabilities.setCapability(\"browserName\", BrowserType.FIREFOX);\n```\n\n----------------------------------------\n\nTITLE: Simulating Network Conditions in Edge with Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to simulate network conditions in Edge using execute_script. It disables network emulation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.execute_script('navigator.connection.emulateNetworkConditions = {offline: false, latency: 50, download_throughput: 500 * 1024 / 8, upload_throughput: 500 * 1024 / 8};')\n```\n\n----------------------------------------\n\nTITLE: Key Down Action in Selenium (Java)\nDESCRIPTION: Demonstrates how to simulate pressing a key using the Actions API in Java. This example shows how to press the SHIFT key on an element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.en.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nWebElement input = driver.findElement(By.tagName(\"input\"));\nActions actions = new Actions(driver);\nactions.keyDown(input, Keys.SHIFT)\n    .perform();\n```\n\n----------------------------------------\n\nTITLE: Delete Session on Node with cURL\nDESCRIPTION: This snippet deletes a specific session on a Node, terminating the WebDriver session and removing it from the active sessions map. It requires an `X-REGISTRATION-SECRET` header for authorization. The default Node URL is http://localhost:5555.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://localhost:5555/se/grid/node/session/<session-id>' --header 'X-REGISTRATION-SECRET: <secret>'\n```\n\n----------------------------------------\n\nTITLE: Printing a Page in C#\nDESCRIPTION: This code snippet shows how to print a webpage using the IPrint interface in C# and retrieve the PDF in base64 format. It first casts the WebDriver to IPrint, creates PrintOptions, and then calls Print().\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nIPrint print = (IPrint)driver;\nPrintOptions options = new PrintOptions();\nvar pdf = print.Print(options);\n```\n\n----------------------------------------\n\nTITLE: Python Executable Path (Before)\nDESCRIPTION: Demonstrates initializing a Chrome WebDriver instance with an executable path. In Selenium 4, using `executable_path` directly is deprecated.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\noptions = webdriver.ChromeOptions()\ndriver = webdriver.Chrome(\n    executable_path=CHROMEDRIVER_PATH, \n    options=options\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize a Chrome WebDriver using Selenium. It uses the Builder class to configure and build the driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.pt-br.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Java\nDESCRIPTION: Demonstrates how to handle disabled options in a Select element in Java. It attempts to select a disabled option and expects an exception to be thrown.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nAssertions.assertThrows(InvalidElementStateException.class, () ->\n    select.selectByValue(\"disabled\")\n);\n```\n\n----------------------------------------\n\nTITLE: Set Logger Level in Java\nDESCRIPTION: This snippet demonstrates how to change the logger level and handler level in Java. It imports the necessary classes from `java.util.logging` and sets both logger and handler to the `ALL` level.  Note that the default level is `INFO`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\njava.util.logging.Logger logger = java.util.logging.Logger.getLogger(\"\");\nlogger.setLevel(java.util.logging.Level.ALL);\njava.util.logging.ConsoleHandler ch = new java.util.logging.ConsoleHandler();\nch.setLevel(java.util.logging.Level.ALL);\n```\n\n----------------------------------------\n\nTITLE: Displaying Selenium Grid Configuration Information\nDESCRIPTION: This command retrieves and displays detailed documentation about Selenium Grid configuration. It provides information based on the current code implementation, offering more up-to-date details than the general documentation. Replace `<version>` with the actual Selenium server version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.pt-br.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar info config\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Max Session Count\nDESCRIPTION: This curl command fetches the maximum allowed number of sessions that can run concurrently in the Selenium Grid.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.pt-br.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ grid { maxSession } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Fetching Attribute Value Ruby\nDESCRIPTION: This Ruby snippet fetches the 'value' attribute of a named element using Selenium WebDriver. The code locates the element by name and then uses the `attribute` method to retrieve the attribute's value. Assumes a running Selenium driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.en.md#_snippet_45\n\nLANGUAGE: Ruby\nCODE:\n```\nemail = @driver.find_element(name: 'email_input')\nattribute = email.attribute('value')\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - None - Ruby\nDESCRIPTION: This Ruby snippet demonstrates setting page load strategy to 'none'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'page load strategy none' do\n  expect { options.page_load_strategy = 'none' }.to_not raise_error\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Context in Firefox with Selenium (Python)\nDESCRIPTION: This Python snippet demonstrates how to switch to a specific context in Firefox using Selenium. It uses the `context` method to switch to the 'chrome' context. Note that geckodriver needs to be started with the argument `--allow-system-access` to switch to `CHROME` context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_51\n\nLANGUAGE: python\nCODE:\n```\ndriver.execute_script('return window')\ndriver.context = 'chrome'\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid with Java 11 HTTP Client using Coursier (Java)\nDESCRIPTION: This command starts Selenium Grid in standalone mode using the Java 11 HTTP client and Coursier to download the required jar. It requires setting the webdriver.http.factory property and using --ext to include the downloaded jar in the classpath.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.zh-cn.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\njava -Dwebdriver.http.factory=jdk-http-client -jar selenium-server-<version>.jar --ext $(coursier fetch -p org.seleniumhq.selenium:selenium-http-jdk-client:<version>) standalone\n```\n\n----------------------------------------\n\nTITLE: Add Directory to PATH (Zsh)\nDESCRIPTION: This snippet adds a new directory to the PATH environment variable in Zsh. It appends the specified path to the existing PATH and updates the ~/.zshenv file. This makes the driver executable available system-wide.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.ja.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho 'export PATH=$PATH:/path/to/driver' >> ~/.zshenv\nsource ~/.zshenv\n```\n\n----------------------------------------\n\nTITLE: Setting File Upload Dialog Timeout (Ruby)\nDESCRIPTION: This code snippet demonstrates how to set the file upload dialog timeout using Ruby. It sets the `file_upload_dialog_timeout` option to 2000 milliseconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.file_upload_dialog_timeout = 2000\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name in Kotlin\nDESCRIPTION: This code snippet demonstrates how to retrieve the tag name of a web element using Selenium WebDriver in Kotlin. It uses the `getTagName()` method of the WebElement interface. The method returns the tag name as a String.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\n//navigates to url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n//returns TagName of the element\nval attr =  driver.findElement(By.name(\"email_input\")).getTagName()\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in CSharp\nDESCRIPTION: Demonstrates how to select an option in a Select element by its visible text in C#. It uses the SelectByText() method. Throws NoSuchElementException if matching option is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nselect.SelectByText(\"One\");\n```\n\n----------------------------------------\n\nTITLE: Initializing RemoteWebDriver in Java\nDESCRIPTION: Initializes a RemoteWebDriver instance in Java, specifying the URL of the Selenium Grid and the desired browser capabilities. This allows you to run tests on a remote machine using Selenium Grid.  Requires importing necessary Selenium classes. URL specifies the grid and capabilities the browser to initiate.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new RemoteWebDriver(new URL(\"http://localhost:4444\"), new ChromeOptions());\n```\n\n----------------------------------------\n\nTITLE: Setting Internet Explorer Driver Log Level - Python\nDESCRIPTION: This snippet shows how to set the log level for the Internet Explorer Driver in Python using `IeOptions`. The `log_level` parameter accepts a string representing the desired log level. The driver is initialized with the specified options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\noptions = IeOptions()\noptions.log_level = 'DEBUG'\ndriver = Ie(options=options)\n```\n\n----------------------------------------\n\nTITLE: Print Page CSharp\nDESCRIPTION: This code snippet shows how to print the current page to a base64 encoded string in C# using Selenium's IPrintsPage interface and PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_23\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.PageRanges = new List<string> { \"1-2\" };\n\nvar print = (IPrintsPage)driver;\nstring base64Pdf = print.Print(printOptions);\nFile.WriteAllBytes(\"test.pdf\", Convert.FromBase64String(base64Pdf));\n```\n\n----------------------------------------\n\nTITLE: Response Started Event in JavaScript\nDESCRIPTION: This JavaScript code snippet listens for the 'responseStarted' event using Selenium BiDi and logs the response status.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nbidiSession.network.onResponseStarted(event => {\n  console.log(event.response.status);\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Color Objects\nDESCRIPTION: This snippet demonstrates how to compare two Color objects for equality in Java using the equals method. It shows how to verify if the background color of a login button matches a predefined color (HOTPINK).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nassert loginButtonBackgroundColour.equals(HOTPINK);\n```\n\n----------------------------------------\n\nTITLE: Ruby Teardown Example (RSpec)\nDESCRIPTION: This Ruby snippet demonstrates how to teardown a Selenium WebDriver instance in RSpec after each test case.  It closes the browser after each test.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n    config.after(:each) do\n      @driver.quit\n    end\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Version - Ruby\nDESCRIPTION: This snippet demonstrates setting the browser version using options in Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'can set the browser version' do\n  expect { options.browser_version = '106' }.to_not raise_error\nend\n```\n\n----------------------------------------\n\nTITLE: Safari Logging - Ruby\nDESCRIPTION: This code snippet configures Safari Driver logging using Ruby. It sets the log path to `/tmp/safari.log` which is where the safari driver logs will be stored.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.pt-br.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.safari(log: '/tmp/safari.log')\ndriver = Selenium::WebDriver.for :safari, service: service\n```\n\n----------------------------------------\n\nTITLE: Adding Credential in Java\nDESCRIPTION: This snippet shows how to add credential parameters like User ID, User Name, and Display name for WebAuthn in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nString userId = Base64.getEncoder().encodeToString(\"user4\".getBytes(StandardCharsets.UTF_8));\nString userName = Base64.getEncoder().encodeToString(\"User 4\".getBytes(StandardCharsets.UTF_8));\nString displayName = \"User Four\";\nPublicKeyCredentialParams publicKeyCredentialParams = new PublicKeyCredentialParams(userId, userName, displayName);\ndevTools.getDomains().webAuthn().addCredential(publicKeyCredentialParams);\n\n```\n\n----------------------------------------\n\nTITLE: Executing Selenium Manager Help Command (Bash)\nDESCRIPTION: This command displays the available command-line arguments and options for the Selenium Manager tool. It is used to understand the different parameters that can be used to customize the behavior of Selenium Manager.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.zh-cn.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./selenium-manager --help\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its index (position) using Selenium WebDriver. The `SelectByIndex()` method is used to select the option based on its index, starting from 0.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_32\n\nLANGUAGE: CSharp\nCODE:\n```\nselect.SelectByIndex(0);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Capability in ChromeOptions (Java)\nDESCRIPTION: This Java snippet configures ChromeOptions with a custom capability, demonstrating how to specify browser-specific settings for a RemoteWebDriver session.  It showcases setting the `gsg:customcap` to `true`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setCapability(\"gsg:customcap\", true);\nWebDriver driver = new RemoteWebDriver(new URL(\"http://localhost:4444\"), options);\ndriver.get(\"https://selenium.dev\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Install Unsigned Firefox Extension (Ruby)\nDESCRIPTION: This Ruby code snippet shows how to install an unsigned Firefox extension from a directory. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.install_addon('/path/to/unpacked/extension', temporary: true)\n```\n\n----------------------------------------\n\nTITLE: Set Window Position: Selenium WebDriver (Ruby)\nDESCRIPTION: This Ruby snippet demonstrates how to move the browser window to the top-left corner of the primary monitor using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.manage.window.move_to(0,0)\n```\n\n----------------------------------------\n\nTITLE: Setting Log Output to File - Python\nDESCRIPTION: Demonstrates setting the log output to a file in Python using EdgeService.\nThis allows capturing the Edge driver logs for debugging and analysis.\nDependencies: Selenium WebDriver, Edge, EdgeService.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nservice = EdgeService(log_path=\"edge.log\")\ndriver = Edge(service=service, options=options)\n```\n\n----------------------------------------\n\nTITLE: Relative Locator - Below in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate an element below another element using Relative Locators in Selenium.  It locates an input element below the element with the id 'email'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_42\n\nLANGUAGE: Java\nCODE:\n```\nBy passwordLocator = RelativeLocator.with(By.tagName(\"input\")).below(By.id(\"email\"));\n```\n\n----------------------------------------\n\nTITLE: Initializing Firefox WebDriver in Java\nDESCRIPTION: This code snippet demonstrates how to initialize a Firefox WebDriver instance in Java. It creates a new driver object that will start a new Firefox browser instance for testing. This helps ensure a clean state for each test.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/fresh_browser_per_test.zh-cn.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nWebDriver driver = new FirefoxDriver();\n```\n\n----------------------------------------\n\nTITLE: Move Mouse by Offset - Selenium\nDESCRIPTION: Moves the mouse cursor from its current position by a specified offset. Positive X values move the cursor right, positive Y values move the cursor down. The origin is the top-left corner of the viewport if the cursor hasn't been moved before.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.zh-cn.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait actions.move({x: 30, y: -10}).pause(1000).perform();\n```\n\n----------------------------------------\n\nTITLE: Selenium Dependency in Gemfile (Ruby)\nDESCRIPTION: Declares selenium-webdriver as a dependency in the Gemfile for a Ruby project. The Gemfile manages project dependencies, and running 'bundle install' will install the specified gems, including Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.ja.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'selenium-webdriver'\n```\n\n----------------------------------------\n\nTITLE: ProjectPage LoadableComponent Implementation (Java)\nDESCRIPTION: This code defines a ProjectPage class that extends LoadableComponent.  It handles loading the project page and verifying that the expected project name is present in the URL.  It takes a WebDriver and the project name as parameters. Dependencies: WebDriver, org.junit.Assert.assertTrue.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.pt-br.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.webdriver;\n\nimport org.openqa.selenium.WebDriver;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class ProjectPage extends LoadableComponent<ProjectPage> {\n\n  private final WebDriver driver;\n  private final String projectName;\n\n  public ProjectPage(WebDriver driver, String projectName) {\n    this.driver = driver;\n    this.projectName = projectName;\n  }\n\n  @Override\n  protected void load() {\n    driver.get(\"http://\" + projectName + \".googlecode.com/\");\n  }\n\n  @Override\n  protected void isLoaded() throws Error {\n    String url = driver.getCurrentUrl();\n\n    assertTrue(url.contains(projectName));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Selenium Rust Implementation\nDESCRIPTION: This command changes the current directory to the rust implementation of Selenium after cloning the repository.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.zh-cn.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd selenium/rust\n```\n\n----------------------------------------\n\nTITLE: Find Element by Partial Link Text - JavaScript\nDESCRIPTION: This snippet shows how to locate a link element using a partial match of its link text in JavaScript. It initializes a ChromeDriver and uses the `findElement` method with `By.partialLinkText` to find the link containing the text 'Official Page'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet driver = await new Builder().forBrowser('chrome').build();\n\tconst loc = await driver.findElement(By.partialLinkText('Official Page'));\n```\n\n----------------------------------------\n\nTITLE: Setting ChromeOptions Headless Before - Python\nDESCRIPTION: This Python snippet shows the deprecated way of setting headless mode using the `headless` attribute.  It initializes ChromeOptions, sets the headless attribute to True, creates a ChromeDriver instance with the options, navigates to selenium.dev, and closes the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/headless-is-going-away.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\noptions = ChromeOptions()\noptions.headless = True\ndriver = webdriver.Chrome(options=options)\ndriver.get('http://selenium.dev')\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Resident Credential in JavaScript\nDESCRIPTION: This JavaScript code adds a non-resident key credential to the virtual authenticator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst devtools = await driver.getDevTools()\nawait devtools.attachSession()\nconst params = {\n  userId: 'user2',\n  userName: 'User 2',\n  displayName: 'User Two',\n}\nawait devtools.send('WebAuthn.addCredential', params)\n\n```\n\n----------------------------------------\n\nTITLE: Removing JavaScript Exception Handler using WebDriver BiDi in Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to remove a JavaScript exception handler. It uses the `remove_exception_listener` to stop capturing JavaScript exceptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.zh-cn.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nbidi.script.remove_exception_listener handler\n```\n\n----------------------------------------\n\nTITLE: Displaying Sessions Component Help\nDESCRIPTION: This command displays configuration help specific to the Sessions component of the Selenium Grid. Replace `<version>` with the actual Selenium server version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.pt-br.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar sessions --help\n```\n\n----------------------------------------\n\nTITLE: Clear New Session Queue (No Secret)\nDESCRIPTION: Clears the new session queue when no registration secret was configured, rejecting all pending requests and returning an error response to each client.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.ja.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://<Router-URL>/se/grid/newsessionqueue/queue' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Output to Console in Javascript\nDESCRIPTION: This snippet shows how to direct the javascript logger output to the console. Requires the `selenium-webdriver` package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlogging.installConsoleHandler()\n```\n\n----------------------------------------\n\nTITLE: Creating Resident Credential in Python\nDESCRIPTION: This code snippet demonstrates creating a resident credential using Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ncred = Credential(\n    id=base64.b64decode(\"YS5jdWJlLg==\"),\n    type=\"public-key\"\n)\nauthenticator.add_credential(cred)\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium\nDESCRIPTION: This code snippet demonstrates how to handle disabled options in a select element using Selenium WebDriver. It attempts to select a disabled option and verifies that a `Selenium::WebDriver::Error::NoSuchElementError` is thrown. This feature is available from Selenium 4.5 and later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_39\n\nLANGUAGE: Ruby\nCODE:\n```\nexpect { select.select_by(:value, 'disabled') }.to raise_error(Selenium::WebDriver::Error::NoSuchElementError)\n```\n\n----------------------------------------\n\nTITLE: Drain Node (No Secret)\nDESCRIPTION: Initiates the draining process for a Selenium Grid node, preventing new sessions from being created while allowing existing sessions to complete. This facilitates a graceful shutdown of the node, when no registration secret has been configured. Requires distributor URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request POST 'http://<Router-URL>/se/grid/distributor/node/<node-id>/drain' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Manager Help Command\nDESCRIPTION: This command displays the available arguments supported by Selenium Manager. It is used to understand the configurable options for the tool.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.pt-br.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ ./selenium-manager --help\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Binary Location - CSharp\nDESCRIPTION: Demonstrates how to set the specific binary location for Firefox in C#.  This is useful when you need to use a specific version of Firefox (e.g., nightly build). Requires Selenium WebDriver and FirefoxOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_12\n\nLANGUAGE: CSharp\nCODE:\n```\noptions.BinaryLocation = \"/Applications/Firefox Nightly.app/Contents/MacOS/firefox\";\n```\n\n----------------------------------------\n\nTITLE: WebDriver Initialization Python\nDESCRIPTION: This snippet shows how to initialize a WebDriver instance for Chrome using Python. It creates a new webdriver.Chrome object, which is used to control the Chrome browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.en.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndriver = webdriver.Chrome()\n```\n\n----------------------------------------\n\nTITLE: Disown handles in browsing context (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to disown handles in a browsing context using Selenium BiDi's `script.disown` command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n    await session.execute({\n      method: 'script.disown',\n      params: { target: { browsingContext: browsingContext.context }, handles: [] },\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting W3C Capabilities (After) - Python\nDESCRIPTION: This snippet demonstrates how to set capabilities in Selenium 4 for Python using FirefoxOptions and set_capability for 'cloud:options' to be compatible with W3C standards. It sets browser_version, platform_name, build, and name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.firefox.options import Options as FirefoxOptions\noptions = FirefoxOptions()\noptions.browser_version = '92'\noptions.platform_name = 'Windows 10'\ncloud_options = {}\ncloud_options['build'] = my_test_build\ncloud_options['name'] = my_test_name\noptions.set_capability('cloud:options', cloud_options)\ndriver = webdriver.Remote(cloud_url, options=options)\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options in Java\nDESCRIPTION: Demonstrates how to retrieve selected options from a Select element in Java. It uses the getAllSelectedOptions() method to return a list of WebElements representing the selected options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nList<WebElement> selectedOptions = select.getAllSelectedOptions();\n```\n\n----------------------------------------\n\nTITLE: Starting a Custom Node as Regular Jar (Bash)\nDESCRIPTION: This command starts a Selenium Grid node with a custom node implementation packaged as a regular JAR.  It uses the `--ext` parameter to add the custom JAR to the classpath. The `--node-implementation` argument points to the custom node's implementation class, which is `org.seleniumhq.samples.DecoratedLoggingNode` in this example. This command requires the Selenium server jar and the custom node jar.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/customize_node.en.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava -jar selenium-server-4.6.0.jar \\\n--ext custom_node-1.0-SNAPSHOT.jar node \\\n--node-implementation org.seleniumhq.samples.DecoratedLoggingNode\n```\n\n----------------------------------------\n\nTITLE: De-selecting Option in Select List - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to de-select an option from a multiple select list using Selenium WebDriver. It uses the `select` method and specifies the text of the option to de-select.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_45\n\nLANGUAGE: Ruby\nCODE:\n```\nselect.deselect_by_text('Cheese')\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions in Edge with Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to set permissions for Edge. This example sets the camera permission.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.execute_script('navigator.permissions.grant(\"camera\")')\ndriver.get('https://webcamtests.com/')\n```\n\n----------------------------------------\n\nTITLE: Creating a Pause in Actions API - C#\nDESCRIPTION: This C# snippet shows how to create a pause between actions using Selenium's Actions API. It navigates to a specific URL, creates an Actions object, defines a pause using Pause(TimeSpan.FromSeconds(5)), and executes the action.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.ja.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Navigate().GoToUrl(\"https://selenium.dev/selenium/web/mouse_interaction.html\");\n\nActions actions = new Actions(driver);\nactions.Pause(TimeSpan.FromSeconds(5)).Perform();\n```\n\n----------------------------------------\n\nTITLE: Finding Element(s) After Upgrade - Java\nDESCRIPTION: Illustrates the correct way of finding elements in Selenium 4 using Java's `findElement(By.*)` and `findElements(By.*)` methods.  This is the standard and supported way in Selenium 4.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\ndriver.findElement(By.className(\"className\"));\ndriver.findElement(By.cssSelector(\".className\"));\ndriver.findElement(By.id(\"elementId\"));\ndriver.findElement(By.linkText(\"linkText\"));\ndriver.findElement(By.name(\"elementName\"));\ndriver.findElement(By.partialLinkText(\"partialText\"));\ndriver.findElement(By.tagName(\"elementTagName\"));\ndriver.findElement(By.xpath(\"xPath\"));\n```\n\nLANGUAGE: Java\nCODE:\n```\ndriver.findElements(By.className(\"className\"));\ndriver.findElements(By.cssSelector(\".className\"));\ndriver.findElements(By.id(\"elementId\"));\ndriver.findElements(By.linkText(\"linkText\"));\ndriver.findElements(By.name(\"elementName\"));\ndriver.findElements(By.partialLinkText(\"partialText\"));\ndriver.findElements(By.tagName(\"elementTagName\"));\ndriver.findElements(By.xpath(\"xPath\"));\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element using Selenium Wheel (Java)\nDESCRIPTION: Scrolls the viewport so the bottom of the specified web element is at the bottom of the screen.  This method takes a web element as the sole argument. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWebElement element = driver.findElement(By.id(\"idOfMyElement\"));\nnew Actions(driver)\n  .scrollFromOrigin(WheelInput.Origin.viewport(), 0, element.getRect().y)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Get Element Rectangle Selenium Python\nDESCRIPTION: This Python code snippet uses Selenium WebDriver to retrieve the rectangle (dimensions and coordinates) of a range input element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nelement_rectangle = driver.find_element(By.NAME, \"range_input\").rect\n```\n\n----------------------------------------\n\nTITLE: Relative Locators: Locating Element Left Of\nDESCRIPTION: This code demonstrates how to locate an element to the left of another element using Relative Locators in Selenium 4.  It uses `RelativeLocator.with(By.tagName(\"button\")).toLeftOf(By.id(\"submit\"))` to find a button element located to the left of the element with ID 'submit'. This is useful when spatial relationships between elements are known.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_51\n\nLANGUAGE: Kotlin\nCODE:\n```\nval cancelLocator = RelativeLocator.with(By.tagName(\"button\")).toLeftOf(By.id(\"submit\"))\n```\n\n----------------------------------------\n\nTITLE: Setting setWindowRect Capability in Ruby\nDESCRIPTION: This code sets the `setWindowRect` capability in Ruby to true, indicating that the remote end supports resizing and repositioning of windows.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_45\n\nLANGUAGE: Ruby\nCODE:\n```\nSelenium::WebDriver::Options.new(args: ['--setWindowRect=true'])\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates moving the mouse by a relative offset from its current position using #move_by. It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.action.move_by(30, -10).perform\n```\n\n----------------------------------------\n\nTITLE: Add Directory to PATH (Bash)\nDESCRIPTION: This snippet adds a new directory to the PATH environment variable in Bash. It appends the specified path to the existing PATH and updates the ~/.bash_profile file. This makes the driver executable available system-wide.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.ja.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho 'export PATH=$PATH:/path/to/driver' >> ~/.bash_profile\nsource ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Safari Driver Logging (Ruby)\nDESCRIPTION: This code demonstrates how to enable Safari driver logging in Ruby.  A service is instantiated with a specified log path.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.en.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.safari(log_path: 'safari.log')\n```\n\n----------------------------------------\n\nTITLE: Fail Request - Selenium BiDi - Java\nDESCRIPTION: This Java snippet demonstrates how to fail a network request using Selenium's BiDi API. It blocks a request and returns a specific error type. Requires Selenium 4.18 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nNetwork network = driver.getDevTools().getDomains().network();\nString intercept = network.addIntercept(\"https://example.com\",\n    new AddInterceptParameters()).getId();\nnetwork.failRequest(new FailParameters(intercept, ErrorType.FAILED));\n```\n\n----------------------------------------\n\nTITLE: Scroll from Viewport Offset (Ruby)\nDESCRIPTION: This Ruby code snippet demonstrates scrolling from the viewport with an offset using Selenium's Actions API.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\n@driver.action.scroll_from(:viewport, x: 25, y: 25, delta_x: 100, delta_y: 200).perform\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop by Offset in JavaScript\nDESCRIPTION: This JavaScript code performs a drag and drop operation by a specified offset. It requires a WebDriver instance and the source element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nawait actions.dragAndDrop(draggable, {x: 50, y: 20}).perform();\n```\n\n----------------------------------------\n\nTITLE: Script Pinning in Java with Selenium CDP\nDESCRIPTION: This Java snippet demonstrates how to pin a script using Chrome DevTools Protocol (CDP) and Selenium.  It retrieves the CDP session, registers a handler, and sends a command to the DevTools to execute the script. The code requires a running Selenium WebDriver instance connected to a Chrome browser and imports from the `dev.selenium.bidi.cdp` package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nCdpInfo cdpInfo = driver.getDevTools().getDomains();\nString scriptId = cdpInfo.getScript().pin(\"Object.getOwnPropertyDescriptors(window)\").get();\nassertThat(cdpInfo.getScript().getPossibleBreakpoints(scriptId).get(), is(not(empty())));\n```\n\n----------------------------------------\n\nTITLE: Managing Edge without admin rights on Windows\nDESCRIPTION: This command demonstrates Selenium Manager attempting to manage the Edge beta browser version on Windows without administrator privileges. It shows the warning message indicating that Edge installation requires administrator permissions, and falls back to using the driver found in the cache.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/status_of_selenium_manager_in_october_2023.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./selenium-manager --debug --browser edge --browser-version beta\n\nDEBUG   msedgedriver not found in PATH\nDEBUG   edge not found in PATH\nDEBUG   edge beta not found in the system\nWARN    There was an error managing edge (edge can only be installed in Windows with administrator permissions); using driver found in the cache\nINFO    Driver path: C:\\Users\\boni\\.cache\\selenium\\msedgedriver\\win64\\118.0.2088.17\\msedgedriver.exe\n```\n\n----------------------------------------\n\nTITLE: Verifying Unicorn Existence - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to verify the existence of a Unicorn using the `exists()` method on the `unicornConfirmationPage` object. It takes the `sparkles` object as input, which specifies the attributes to check. `assertTrue()` is used to assert that the Unicorn exists with all specified attributes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\n// The exists() method from UnicornConfirmationPage will take the Sparkles \n// object--a specification of the attributes you want to see, and compare\n// them with the fields on the page.\nassertTrue(\"Sparkles should have been created, with all attributes intact\", unicornConfirmationPage.exists(sparkles))\n```\n\n----------------------------------------\n\nTITLE: Set Firefox Profile Root Directory (Java)\nDESCRIPTION: This Java code snippet demonstrates how to set a custom profile root directory for Firefox using Selenium. This allows you to specify a location other than the system temporary directory for Firefox profiles. The directory should be created before setting it as the profile root.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nFirefoxOptions options = new FirefoxOptions();\noptions.setPreference(\"profile.root\", \"/tmp/profiles\");\n```\n\n----------------------------------------\n\nTITLE: Script Pinning in Java\nDESCRIPTION: This Java snippet demonstrates how to pin a script using the Chrome DevTools Protocol (CDP) through Selenium. It is a part of a test case and requires a running Selenium WebDriver instance connected to a Chrome browser.  It uses `executeCdpCommand` to send a 'Debugger.enable' command and subsequently a 'Debugger.setScriptSource' command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ndriver.getDevTools().send(Debugger.enable(Optional.empty()));\nString id = driver.getDevTools().send(Debugger.setScriptSource(new Debugger.SetScriptSource(\"\", \"\", Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty())));\n```\n\n----------------------------------------\n\nTITLE: Basic Login Test with BELLATRIX C# and MSTest\nDESCRIPTION: This C# code snippet demonstrates a basic login test using the BELLATRIX framework with MSTest. It navigates to a login page, enters username and password, clicks the login button, validates successful login, and then logs out. All services are available through the main **App** class. The **Components** property provides various **Create** methods for finding elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/bellatrix-test-automation-framework/index.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class LoginTestsMSTest : MSTest.WebTest\n{\n    public override void TestInit()\n    {\n       App.Navigation.Navigate(\"http://demos.bellatrix.solutions/my-account/\");\n    }\n\n    [TestMethod]\n    public void SuccessfullyLoginToMyAccount()\n    {\n        var userNameField = App.Components.CreateById<TextField>(\"username\");\n        var passwordField = App.Components.CreateById<Password>(\"password\");\n        var loginButton = App.Components.CreateByXpath<Button>(\"//button[@name='login']\");\n\n        userNameField.SetText(\"info@yourverybusywebsite.com\");\n        passwordField.SetPassword(\"yourverysecretp4ssw0rd$\");\n        loginButton.Click();\n\n        var myAccountContentDiv = App.Components.CreateByClass<Div>(\"woocommerce-MyAccount-content\");\n        myAccountContentDiv.ValidateInnerTextContains(\"Hello John\");\n\n        var logoutLink = App.Components.CreateByInnerTextContaining<Anchor>(\"Log out\");\n\n        logoutLink.ValidateIsVisible();\n        logoutLink.Click();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Logs in Java\nDESCRIPTION: This Java code retrieves browser logs from the Edge driver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_49\n\nLANGUAGE: java\nCODE:\n```\ndriver.manage().logs().getAvailableLogTypes();\n```\n\n----------------------------------------\n\nTITLE: Running Edge Dev in Standalone Mode\nDESCRIPTION: This command runs a Docker container with Edge Dev in standalone mode. It maps ports 4444 and 7900 for Selenium and VNC access, respectively, and allocates 2GB of shared memory. The container is removed after it stops.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/dev-and-beta-channel-browsers-via-docker-selenium.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-edge:dev\n```\n\n----------------------------------------\n\nTITLE: Managing Chrome/chromedriver with Selenium Manager\nDESCRIPTION: This snippet demonstrates how to use Selenium Manager to detect a local Chrome installation and download the corresponding ChromeDriver version. The `--debug` flag provides verbose output to understand Selenium Manager's actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/whats-new-in-selenium-manager-with-selenium-4.11.0.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n> selenium-manager --browser chrome --debug\nDEBUG   Checking chromedriver in PATH\nDEBUG   Running command: chromedriver --version\nDEBUG   Output: \"\"\nDEBUG   chromedriver not found in PATH\nDEBUG   chrome detected at C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nDEBUG   Using shell command to find out chrome version\nDEBUG   Running command: wmic datafile where name='C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe' get Version /value\nDEBUG   Output: \"\\r\\r\\n\\r\\r\\nVersion=115.0.5790.110\\r\\r\\n\\r\\r\\n\\r\\r\\n\\r\"\nDEBUG   Detected browser: chrome 115.0.5790.110\nDEBUG   Reading metadata from https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json\nDEBUG   Required driver: chromedriver 115.0.5790.102\nDEBUG   Driver URL: https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/115.0.5790.102/win64/chromedriver-win64.zip\nINFO    Driver path: C:\\Users\\boni\\.cache\\selenium\\chromedriver\\win64\\115.0.5790.102\\chromedriver.exe\nINFO    Browser path: C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\n```\n\n----------------------------------------\n\nTITLE: Adding a Credential in JavaScript\nDESCRIPTION: This JavaScript code adds a new credential to the virtual authenticator using the `addCredential` method. It specifies the Relying Party ID, User ID, and public key type within the parameters.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nawait devtools.security.addCredential({\n  rpId: 'rpId',\n  userId: 'user1',\n  type: 'publicKey'\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid New Session Queue (Java)\nDESCRIPTION: This command starts the New Session Queue component in a distributed Grid setup. This component holds new session requests until they are processed by the Distributor. The default port is 5559.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.zh-cn.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar sessionqueue --port 5559\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes Python\nDESCRIPTION: This code snippet shows how to add pointer event attributes to a Pen input source in Python, specifically setting properties like width, height, pressure, and tilt. It uses the `feed` method to specify the pointer event properties. Requires Selenium version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.pt-br.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npen = Pen(driver, \"pen1\")\nviewport = PointerInput.origin.viewport\n\npointer_attributes = {\n    \"width\": 20,\n    \"height\": 40,\n    \"pressure\": 0.8,\n    \"tiltX\": 10,\n    \"tiltY\": -10\n}\n\nsequence = Sequence(pen, 1)\nsequence.add_action(pen.create_pointer_move(viewport, 0, 0, duration=0.01, parameters=pointer_attributes))\nsequence.add_action(pen.create_pointer_down(MouseButton.LEFT))\nsequence.add_action(pen.create_pointer_up(MouseButton.LEFT))\n\ndriver.perform([sequence])\n```\n\n----------------------------------------\n\nTITLE: Implementing WebDriver Method Wrappers with EventFiringDecorator (Java)\nDESCRIPTION: This snippet provides an example of implementing custom method wrappers using EventFiringDecorator. It demonstrates how to intercept calls to specific WebDriver methods, such as `findElement`, and execute custom logic before or after the original method is invoked. This example overrides the `call` method and checks the method name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/java-removal-of-deprecated-events-classes.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class WebDriverWrapper implements WebDriver {\n    private final WebDriver driver;\n    WebDriverWrapper(WebDriver driver) {\n        this.driver = driver;\n    }\n    // custom implementation goes here\n    @Override\n    public WebElement findElement(final By by) {\n        // custom implementation goes here\n        return driver.findElement(by);\n    }\n}\n\npublic class testDecorator extends EventFiringDecorator<WebDriver> {\n\n    @Override\n    public Object call(Decorated<?> target, Method method, Object[] args) throws Throwable {\n        String methodName = method.getName();\n        if (\"findElement\".equals(methodName)) {\n            WebDriverWrapper newDriver = new WebDriverWrapper((WebDriver) target.getOriginal());\n            return newDriver.findElement((By) args[0]);\n        }\n        return super.call(target, method, args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Safari Driver Logging - Python\nDESCRIPTION: This Python code configures the SafariDriver to set the logging.  Safari only allows for logging to be on or off. It is initialized by passing a `service_log_path` argument.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.pt-br.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\n\ndriver = webdriver.Safari(service_log_path='/tmp/safaridriver.log')\n```\n\n----------------------------------------\n\nTITLE: Defining Unicorn Attributes in Ruby\nDESCRIPTION: This snippet defines the attributes of a Unicorn object and then uses the account_page and add_unicorn_page objects to configure the unicorn. It takes the sparkles object, fills out a web form, and clicks submit. Dependencies include the Unicorn, UnicornColors, UnicornAccessories, UnicornAdornments, account_page, and add_unicorn_page objects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\n# The Unicorn is a top-level Object--it has attributes, which are set here.\n# This only stores the values; it does not fill out any web forms or interact\n# with the browser in any way.\nsparkles = Unicorn.new('Sparkles', UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS)\n\n# Since we're already \"on\" the account page, we have to use it to get to the\n# actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n# takes us there.\nadd_unicorn_page = account_page.add_unicorn\n\n# Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n# its createUnicorn() method. This method will take Sparkles' attributes,\n# fill out the form, and click submit.\nunicorn_confirmation_page = add_unicorn_page.create_unicorn(sparkles)\n```\n\n----------------------------------------\n\nTITLE: Cancel Auth Required Request in Java\nDESCRIPTION: This Java code demonstrates how to cancel a request blocked at the authRequired phase using Network.cancelRequest. It requires the requestId from the authRequired event.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nNetwork.addIntercept(devTools, Pattern.compile(\".*\"),\n        new AddInterceptParameters().withPhase(Event.AUTH_REQUIRED))\n    .then(interceptId -> devTools.addListener(Network.authRequired, req -> {\n      Network.cancelRequest(devTools, req.getEvent().getRequest().getRequestId());\n    }));\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Get sessionCount\nDESCRIPTION: This command uses curl to post a GraphQL query and fetch the total number of sessions (`sessionCount`) from the `grid` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.zh-cn.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ grid { sessionCount } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Setting ShrinkToFit using PrintOptions in Python\nDESCRIPTION: This code snippet demonstrates how to set whether the page will shrink-to-fit content on the page using the PrintOptions class in Python. The `shrink_to_fit` attribute is set to `False`. The `shrink_to_fit` is confirmed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.shrink_to_fit = False\nassert print_options.shrink_to_fit is False\n```\n\n----------------------------------------\n\nTITLE: Response Completed Event - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to listen for the 'network.responseCompleted' event and log information about the response.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.on('network.responseCompleted', params => {\n  console.log(params.response);\n});\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Server to get tracing info\nDESCRIPTION: This command runs the Selenium server and retrieves tracing information, which is useful for setting up Jaeger with the Selenium server for visualizing traces.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2021/selenium-4-observability.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -jar selenium-server-<selenium-version>.jar info tracing\n```\n\n----------------------------------------\n\nTITLE: Complete Download Sample - Java\nDESCRIPTION: This complete Java sample demonstrates how to use Selenium Grid to download files and retrieve them from the remote node. It includes setting the `se:downloadsEnabled` capability, triggering file downloads, listing the available files, and downloading a specific file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.pt-br.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.common.collect.ImmutableMap;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.io.Zip;\nimport org.openqa.selenium.json.Json;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.remote.http.HttpClient;\nimport org.openqa.selenium.remote.http.HttpRequest;\nimport org.openqa.selenium.remote.http.HttpResponse;\n\nimport java.io.File;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.concurrent.TimeUnit;\n\nimport static org.openqa.selenium.remote.http.Contents.asJson;\nimport static org.openqa.selenium.remote.http.Contents.string;\nimport static org.openqa.selenium.remote.http.HttpMethod.GET;\nimport static org.openqa.selenium.remote.http.HttpMethod.POST;\n\npublic class DownloadsSample {\n\n  public static void main(String[] args) throws Exception {\n    // Assuming the Grid is running locally.\n    URL gridUrl = new URL(\"http://localhost:4444\");\n    ChromeOptions options = new ChromeOptions();\n    options.setCapability(\"se:downloadsEnabled\", true);\n    RemoteWebDriver driver = new RemoteWebDriver(gridUrl, options);\n    try {\n      demoFileDownloads(driver, gridUrl);\n    } finally {\n      driver.quit();\n    }\n  }\n\n\tprivate static void demoFileDownloads(RemoteWebDriver driver, URL gridUrl) throws Exception {\n\t\tdriver.get(\"https://www.selenium.dev/selenium/web/downloads/download.html\");\n\t\t// Download the two available files on the page\n\t\tdriver.findElement(By.id(\"file-1\")).click();\n\t\tdriver.findElement(By.id(\"file-2\")).click();\n\n\t\t// The download happens in a remote Node, which makes it difficult to know when the file\n\t\t// has been completely downloaded. For demonstration purposes, this example uses a\n\t\t// 10-second sleep which should be enough time for a file to be downloaded.\n\t\t// We strongly recommend to avoid hardcoded sleeps, and ideally, to modify your\n\t\t// application under test, so it offers a way to know when the file has been completely\n\t\t// downloaded.\n\t\tTimeUnit.SECONDS.sleep(10);\n\n\t\t//This is the endpoint which will provide us with list of files to download and also to\n\t\t//let us download a specific file.\n\t\tString downloadsEndpoint = String.format(\"/session/%s/se/files\", driver.getSessionId());\n\n\t\tString fileToDownload;\n\n\t\ttry (HttpClient client = HttpClient.Factory.createDefault().createClient(gridUrl)) {\n\t\t\t// To list all files that are were downloaded on the remote node for the current session\n\t\t\t// we trigger GET request.\n\t\t\tHttpRequest request = new HttpRequest(GET, downloadsEndpoint);\n\t\t\tHttpResponse response = client.execute(request);\n\t\t\tMap<String, Object> jsonResponse = new Json().toType(string(response), Json.MAP_TYPE);\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tMap<String, Object> value = (Map<String, Object>) jsonResponse.get(\"value\");\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tList<String> names = (List<String>) value.get(\"names\");\n\t\t\t// Let's say there were \"n\" files downloaded for the current session, we would like\n\t\t\t// to retrieve ONLY the first file.\n\t\t\tfileToDownload = names.get(0);\n\t\t}\n\n\t\t// Now, let's download the file\n\t\ttry (HttpClient client = HttpClient.Factory.createDefault().createClient(gridUrl)) {\n\t\t\t// To retrieve a specific file from one or more files that were downloaded by the current session\n\t\t\t// on a remote node, we use a POST request.\n\t\t\tHttpRequest request = new HttpRequest(POST, downloadsEndpoint);\n\t\t\trequest.setContent(asJson(ImmutableMap.of(\"name\", fileToDownload)));\n\t\t\tHttpResponse response = client.execute(request);\n\t\t\tMap<String, Object> jsonResponse = new Json().toType(string(response), Json.MAP_TYPE);\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tMap<String, Object> value = (Map<String, Object>) jsonResponse.get(\"value\");\n\t\t\t// The returned map would contain 2 keys,\n\t\t\t// filename - This represents the name of the file (same as what was provided by the test)\n\t\t\t// contents - Base64 encoded String which contains the zipped file.\n\t\t\tString zippedContents = value.get(\"contents\").toString();\n\t\t\t// The file contents would always be a zip file and has to be unzipped.\n\t\t\tFile downloadDir = Zip.unzipToTempDir(zippedContents, \"download\", \"\");\n\t\t\t// Read the file contents\n\t\t\tFile downloadedFile = Optional.ofNullable(downloadDir.listFiles()).orElse(new File[]{})[0];\n\t\t\tString fileContent = String.join(\"\", Files.readAllLines(downloadedFile.toPath()));\n\t\t\tSystem.out.println(\"The file which was \"\n\t\t\t\t\t+ \"downloaded in the node is now available in the directory: \"\n\t\t\t\t\t+ downloadDir.getAbsolutePath() + \" and has the contents: \" + fileContent);\n\t\t}\n\t}\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Unicorn Existence - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to verify the existence of a Unicorn using the `exists()` method on the `unicornConfirmationPage` object. It takes the `sparkles` object as input, which specifies the attributes to check. The `assert()` function is used to assert that the Unicorn exists with the expected attributes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The exists() method from UnicornConfirmationPage will take the Sparkles\n// object--a specification of the attributes you want to see, and compare\n// them with the fields on the page.\nassert(unicornConfirmationPage.exists(sparkles), \"Sparkles should have been created, with all attributes intact\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Unicorn Instance and Adding to Page - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to create a new Unicorn object with specific attributes and add it to the page using the `addUnicorn()` method on an `accountPage` object. The `createUnicorn()` method on the `addUnicornPage` object is then called with the created Unicorn object to fill out the form and submit it. Finally, a new `unicornConfirmationPage` object is instantiated.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The Unicorn is a top-level Object--it has attributes, which are set here.\n// This only stores the values; it does not fill out any web forms or interact\n// with the browser in any way.\nvar sparkles = new Unicorn(\"Sparkles\", UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS);\n\n// Since we are already \"on\" the account page, we have to use it to get to the\n// actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n// takes us there.\n\nvar addUnicornPage = accountPage.addUnicorn();\n\n// Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n// its createUnicorn() method. This method will take Sparkles' attributes,\n// fill out the form, and click submit.\nvar unicornConfirmationPage = addUnicornPage.createUnicorn(sparkles);\n```\n\n----------------------------------------\n\nTITLE: Managing Edge browser and driver versions on macOS\nDESCRIPTION: This command demonstrates how to use Selenium Manager to download and manage the Edge browser and its corresponding driver on macOS. It forces the download of the browser and provides debug information about the process.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/status_of_selenium_manager_in_october_2023.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./selenium-manager --browser edge --debug --force-browser-download\n\nDEBUG\tmsedgedriver not found in PATH\nDEBUG\tChecking edge releases on https://edgeupdates.microsoft.com/api/products\nDEBUG\tRequired browser: edge 117.0.2045.40\nDEBUG\tDownloading edge 117.0.2045.40 from https://msedge.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/6e65d9ef-0bb9-4636-8d9e-2b1b9d16149d/MicrosoftEdge-117.0.2045.40.pkg\nDEBUG\tedge 117.0.2045.40 has been downloaded at /Users/boni/.cache/selenium/edge/mac64/117.0.2045.40/Microsoft Edge.app/Contents/MacOS/Microsoft Edge\nDEBUG\tReading msedgedriver version from https://msedgedriver.azureedge.net/LATEST_RELEASE_117_MACOS\nDEBUG\tRequired driver: msedgedriver 117.0.2045.40\nDEBUG\tDownloading msedgedriver 117.0.2045.40 from https://msedgedriver.azureedge.net/117.0.2045.40/edgedriver_mac64.zip\nINFO\tDriver path: /Users/boni/.cache/selenium/msedgedriver/mac64/117.0.2045.40/msedgedriver\nINFO\tBrowser path: /Users/boni/.cache/selenium/edge/mac64/117.0.2045.40/Microsoft Edge.app/Contents/MacOS/Microsoft Edge\n```\n\n----------------------------------------\n\nTITLE: Setting Page Orientation - Python\nDESCRIPTION: This Python snippet sets the page orientation to landscape using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.print_options import PrintOptions\n\nprint_options = PrintOptions()\nprint_options.orientation = \"landscape\"\n```\n\n----------------------------------------\n\nTITLE: Setting ChromeOptions Headless Before - Java\nDESCRIPTION: This Java snippet shows how to set headless mode using the deprecated `setHeadless()` method in Selenium's ChromeOptions. It initializes ChromeOptions, sets the headless property to true, creates a ChromeDriver instance with the options, navigates to selenium.dev, and closes the browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/headless-is-going-away.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setHeadless(true);\nWebDriver driver = new ChromeDriver(options);\ndriver.get(\"https://selenium.dev\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Release All Actions - Python\nDESCRIPTION: This Python snippet releases all currently depressed keys and pointer buttons using the `release_actions()` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.ja.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndriver.release_actions()\n```\n\n----------------------------------------\n\nTITLE: Base Component Class in Java\nDESCRIPTION: This Java code defines a base component class that initializes the WebElement representing the root of the component. It serves as a parent class for other component objects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.en.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class BaseComponent {\n    protected WebElement root;\n\n    public BaseComponent(WebElement root) {\n        this.root = root;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Casting in Ruby\nDESCRIPTION: This Ruby code demonstrates how to configure Edge to interact with Chrome Cast devices for sharing tabs.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\noptions.add_argument('--enable-features=CastMediaRouteProviderService')\noptions.add_argument('--media-router=cast-display-available-locally')\ndriver = Selenium::WebDriver.for :edge, options: options\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Ruby\nDESCRIPTION: Demonstrates how to select an option in a Select element by its value attribute in Ruby. It uses the select_by(:value, value) method. Throws NoSuchElementException if matching option is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nselect.select_by(:value, 'one')\n```\n\n----------------------------------------\n\nTITLE: Running All Selenium Tests\nDESCRIPTION: Executes all available Selenium Java tests using Maven. Ensures that the tests are compiled and dependencies are installed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/java/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn test\n```\n\n----------------------------------------\n\nTITLE: ASP.NET MVC + Selenium + IISExpress\nDESCRIPTION: This resource focuses on integrating Selenium with ASP.NET MVC applications running on IISExpress for automated testing. It likely demonstrates how to set up and configure the environment for end-to-end testing of web applications.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/a-smattering-of-selenium-88.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Switching back to Default Content - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to switch back to the main document content after interacting with an IFrame.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/frames.en.md#_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\n# Return to the top level\ndriver.switch_to.default_content\n```\n\n----------------------------------------\n\nTITLE: Setting se:downloadsEnabled Capability (Java)\nDESCRIPTION: This Java snippet shows how to set the `se:downloadsEnabled` capability to `true` in the ChromeOptions.  This is required to allow a node to manage downloads for a session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\noptions.setCapability(\"se:downloadsEnabled\", true);\n```\n\n----------------------------------------\n\nTITLE: Screenshot Decorator on Test Failure in Python\nDESCRIPTION: This resource describes a decorator to automatically take screenshots when a test fails in Python, enhancing debugging and reporting capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/a-smattering-of-selenium-28.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Removing Virtual Authenticator in JavaScript\nDESCRIPTION: Removes a virtual authenticator from the WebDriver instance using JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.removeVirtualAuthenticator(authenticator);\n```\n\n----------------------------------------\n\nTITLE: Creating a Temporary Credential in C#\nDESCRIPTION: This snippet creates a temporary credential in C# using the AddCredential method, setting empty strings for Relying Party ID and user ID, and specifying the public key credential type.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nawait session.Security.AddCredential(\n    new Credential(\"\", \"\", PublicKeyCredentialType.PublicKey));\n```\n\n----------------------------------------\n\nTITLE: Setting setWindowRect Capability in Python\nDESCRIPTION: This Python code shows how to set the `setWindowRect` capability in Selenium. The `setWindowRect` capability indicates whether the remote end supports resizing and repositioning window commands.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\noptions = Options()\noptions.set_window_rect = True\n```\n\n----------------------------------------\n\nTITLE: Get session map configuration details for Selenium Grid\nDESCRIPTION: This command provides setup instructions for configuring alternative session storage options like Redis or JDBC-SQL databases. By default, Grid uses a local session map, but this command helps configure external storage.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.ja.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar info sessionmap\n```\n\n----------------------------------------\n\nTITLE: Get Selenium Logger in Ruby\nDESCRIPTION: This snippet demonstrates how to obtain the Selenium logger in Ruby using the `Selenium::WebDriver` module. The logger provides additional features compared to the default Ruby Logger class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nlogger = Selenium::WebDriver.logger\n```\n\n----------------------------------------\n\nTITLE: Set Window Position - Selenium WebDriver - C#\nDESCRIPTION: This snippet sets the position of the browser window to the top-left corner (0, 0) of the primary display using the Selenium WebDriver API in C#. It uses the Point struct to specify the new window position. Requires Selenium WebDriver package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_31\n\nLANGUAGE: CSharp\nCODE:\n```\n// 将窗口移动到主显示器的左上角\ndriver.Manage().Window.Position = new Point(0, 0);\n```\n\n----------------------------------------\n\nTITLE: Delete Node from Grid (No Secret)\nDESCRIPTION: This snippet removes a node from the Selenium Grid, preventing new session requests from being forwarded to it.  The node will continue to run any existing sessions unless explicitly terminated. Used when no registration secret is configured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.zh-cn.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://<Router-URL>/se/grid/distributor/node/<node-id>' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Response Completed Event in Java\nDESCRIPTION: This Java code snippet listens for the 'responseCompleted' network event using Selenium BiDi.  It logs the response status.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\ndevTools.addListener(Network.responseCompleted, event -> {\n  int status = event.getEvent().getResponse().getStatus();\n  Matcher matcher = pattern.matcher(Integer.toString(status));\n  if (matcher.find()) {\n    Network.continueRequest(devTools, event.getEvent().getRequest().getRequestId(), new ContinueRequestParameters());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Casting in Python\nDESCRIPTION: This Python code demonstrates how to configure Edge to interact with Chrome Cast devices for sharing tabs.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\noptions.add_argument(\"--enable-features=CastMediaRouteProviderService\")\noptions.add_argument(\"--media-router=cast-display-available-locally\")\ndriver = Edge(options=options)\n```\n\n----------------------------------------\n\nTITLE: Script Pinning in Java using CDP\nDESCRIPTION: This snippet shows how to pin a script using Chrome DevTools Protocol (CDP) in Java. It requires a Selenium WebDriver instance and access to the CDP interface. The code snippet retrieves the CDP session and executes a script to pin it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n        String scriptId = cdp.send(\"Page.addScriptToEvaluateOnNewDocument\",\n            Map.of(\"source\", \"window.bespokeValue = 'from pinning'\")).get(\"identifier\").toString();\n\n```\n\n----------------------------------------\n\nTITLE: List Selenium Grid Commands\nDESCRIPTION: This command lists all available commands and their descriptions for the Selenium Grid. It uses the `--config-help` option to display the information.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.en.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar --config-help\n```\n\n----------------------------------------\n\nTITLE: Displaying PATH environment variable in Bash\nDESCRIPTION: This snippet shows how to display the current PATH environment variable in a Bash terminal. It uses the `echo` command to print the value of the PATH variable, allowing users to see the directories currently included in the search path for executables.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.en.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho $PATH\n```\n\n----------------------------------------\n\nTITLE: Configuring Capabilities Before Selenium 4 - Python\nDESCRIPTION: This Python code demonstrates how to set up desired capabilities as a dictionary in Selenium 3. It sets the browser name, platform, version, build, and name for the browser session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ncaps = {}\ncaps['browserName'] = 'firefox'\ncaps['platform'] = 'Windows 10'\ncaps['version'] = '92'\ncaps['build'] = my_test_build\ncaps['name'] = my_test_name\ndriver = webdriver.Remote(cloud_url, desired_capabilities=caps)\n```\n\n----------------------------------------\n\nTITLE: DOM Mutation Handler C#\nDESCRIPTION: This C# snippet demonstrates how to set breakpoints and evaluate expressions using Chrome DevTools Protocol (CDP) within Selenium. The code sets up a breakpoint, evaluates an expression, and then removes the breakpoint. This approach will be replaced by WebDriver BiDi in the future.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.pt-br.md#_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\nvar setBreakpoint = cdp.Debugger.SetBreakpointOnFunctionCall(script.EvaluateOnCallFrame);\ncdp.Debugger.RemoveBreakpoint(setBreakpoint.BreakpointId);\n\nsetBreakpoint = cdp.Debugger.SetBreakpoint(new Location\n{\n    ScriptId = scriptId,\n    LineNumber = 1\n});\n```\n\n----------------------------------------\n\nTITLE: Clear New Session Queue Without Secret cURL\nDESCRIPTION: This snippet clears the queue of new session requests, assuming no registration secret has been configured. The Grid URL depends on the deployment mode (Standalone, Hub-Node, or Router).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://<Router-URL>/se/grid/newsessionqueue/queue' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Find Elements within an Element - JavaScript\nDESCRIPTION: This JavaScript code finds a 'div' element and then locates all child elements with the CSS selector 'p' within that element, printing the text of each child.  It initializes a ChromeDriver, navigates to a URL, finds the parent element using `driver.findElement`, retrieves the child elements using `element.findElements`, and prints the text of each child in a loop using `e.getText()`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {Builder, By} = require('selenium-webdriver');\n\n  (async function example() {\n      let driver = new Builder()\n          .forBrowser('chrome')\n          .build();\n\n      await driver.get('https://www.example.com');\n\n      //  Obtém o elemento com o nome da tag 'div'\n      let element = driver.findElement(By.css(\"div\"));\n\n      // Obtém todos os elementos disponíveis com o nome da tag 'p'\n      let elements = await element.findElements(By.css(\"p\"));\n      for(let e of elements) {\n          console.log(await e.getText());\n      }\n  })();\n```\n\n----------------------------------------\n\nTITLE: Configuring Unicorn Attributes (Java)\nDESCRIPTION: This Java snippet demonstrates how to set up Unicorn attributes. It creates a Unicorn object with specified attributes like color, accessories, and adornments. It then simulates navigating to the 'Add Unicorn' page from the AccountPage and using the createUnicorn() method on the AddUnicornPage to submit the configured unicorn, receiving a UnicornConfirmationPage. The code avoids direct interaction with web forms within the test, delegating that to the Page objects.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n// The Unicorn is a top-level Object--it has attributes, which are set here. \n// This only stores the values; it does not fill out any web forms or interact\n// with the browser in any way.\nUnicorn sparkles = new Unicorn(\"Sparkles\", UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS);\n\n// Since we are already \"on\" the account page, we have to use it to get to the\n// actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n// takes us there.\nAddUnicornPage addUnicornPage = accountPage.addUnicorn();\n\n// Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n// its createUnicorn() method. This method will take Sparkles' attributes,\n// fill out the form, and click submit.\nUnicornConfirmationPage unicornConfirmationPage = addUnicornPage.createUnicorn(sparkles);\n```\n\n----------------------------------------\n\nTITLE: Setting File Upload Dialog Timeout (Python)\nDESCRIPTION: This code snippet demonstrates how to set the file upload dialog timeout using Python. It sets the `file_upload_dialog_timeout` option to 2000 milliseconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.ie.options import Options\n\nie_options = Options()\nie_options.file_upload_dialog_timeout = 2000\ndriver = webdriver.Ie(options=ie_options)\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Files - Ruby Example\nDESCRIPTION: Shows the command to execute Selenium tests in Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.zh-cn.md#_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nrspec spec/getting_started/first_script.rb\n```\n\n----------------------------------------\n\nTITLE: Creating a Permanent Credential in Python\nDESCRIPTION: This snippet shows how to create a resident (permanent) credential using the virtual authenticator in Python.  It calls add_credential with the rpId, user ID, and PublicKeyCredentialType to create the credential.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndevtools.security.add_credential(\n    credential=Credential(\"rpId\", \"user1\", PublicKeyCredentialType.PUBLIC_KEY)\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Actions in Browsing Context - Java\nDESCRIPTION: This Java snippet demonstrates how to perform actions within a browsing context using Selenium's BiDi API. It uses the `Input` class to construct and send a sequence of input commands to the browser. Requires Selenium 4.17 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/input.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nInput.perform(driver, origin, actions);\n        List<Event> events = server.getEvents();\n        assertThat(events.size()).isEqualTo(1);\n        assertThat(events.get(0).getMethod()).isEqualTo(\"input.inputDispatched\")\n```\n\n----------------------------------------\n\nTITLE: Browsing Context Created Event in Java\nDESCRIPTION: This code snippet demonstrates how to listen for the 'browsingContext.contextCreated' event using Selenium WebDriver's BiDi API in Java. It sets up a listener that prints the context ID when a new browsing context is created. Requires Selenium version 4.10 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_44\n\nLANGUAGE: Java\nCODE:\n```\nWebDriverBiDi bidi = (WebDriverBiDi) driver;\n    BiDiSubscription<BrowsingContextModule.ContextCreatedEvent> subscription =\n        new BiDiSubscription<>(BrowsingContextModule.EVENT_CONTEXT_CREATED,\n            e -> System.out.println(\"Context created \" + e.getContext().getId()));\n    bidi.subscribe(subscription);\n\n    driver.get(\"https://www.google.com\");\n\n    bidi.unsubscribe(subscription);\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Level in Ruby\nDESCRIPTION: This snippet demonstrates how to set the logger level in Ruby using the `level=` method. This configures the verbosity of logs. Requires the `selenium-webdriver` gem.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nSelenium::WebDriver.logger.level = :debug\n```\n\n----------------------------------------\n\nTITLE: Refactor EditIssue with LoadableComponent and PageFactory\nDESCRIPTION: This Java code refactors the EditIssue PageObject to extend `LoadableComponent` and use Selenium's PageFactory for element location. It initializes WebElements using `@FindBy` annotations and the PageFactory.initElements() method in the constructor. It includes `load()` and `isLoaded()` methods for page loading management.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/design_strategies.zh-cn.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.webdriver;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\nimport org.openqa.selenium.support.PageFactory;\n\nimport static junit.framework.Assert.assertTrue;\n\npublic class EditIssue extends LoadableComponent<EditIssue> {\n\n  private final WebDriver driver;\n  \n  // By default the PageFactory will locate elements with the same name or id\n  // as the field. Since the issue_title element has an id attribute of \"issue_title\"\n  // we don't need any additional annotations.\n  private WebElement issue_title;\n  \n  // But we'd prefer a different name in our code than \"issue_body\", so we use the\n  // FindBy annotation to tell the PageFactory how to locate the element.\n  @FindBy(id = \"issue_body\") private WebElement body;\n  \n  public EditIssue(WebDriver driver) {\n    this.driver = driver;\n    \n    // This call sets the WebElement fields.\n    PageFactory.initElements(driver, this);\n  }\n\n  @Override\n  protected void load() {\n    driver.get(\"https://github.com/SeleniumHQ/selenium/issues/new?assignees=&labels=I-defect%2Cneeds-triaging&projects=&template=bug-report.yml&title=%5B%F0%9F%90%9B+Bug%5D%3A+\");\n  }\n\n  @Override\n  protected void isLoaded() throws Error {\n    String url = driver.getCurrentUrl();\n    assertTrue(\"Not on the issue entry page: \" + url, url.endsWith(\"/new\"));\n  }\n\n  public void setHowToReproduce(String howToReproduce) {\n    WebElement field = driver.findElement(By.id(\"issue_form_repro-command\"));\n    clearAndType(field, howToReproduce);\n  }\n\n  public void setLogOutput(String logOutput) {\n    WebElement field = driver.findElement(By.id(\"issue_form_logs\"));\n    clearAndType(field, logOutput);\n  }\n\n  public void setOperatingSystem(String operatingSystem) {\n    WebElement field = driver.findElement(By.id(\"issue_form_operating-system\"));\n    clearAndType(field, operatingSystem);\n  }\n\n  public void setSeleniumVersion(String seleniumVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_selenium-version\"));\n    clearAndType(field, logOutput);\n  }\n\n  public void setBrowserVersion(String browserVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_browser-versions\"));\n    clearAndType(field, browserVersion);\n  }\n\n  public void setDriverVersion(String driverVersion) {\n    WebElement field = driver.findElement(By.id(\"issue_form_browser-driver-versions\"));\n    clearAndType(field, driverVersion);\n  }\n\n  public void setUsingGrid(String usingGrid) {\n    WebElement field = driver.findElement(By.id(\"issue_form_selenium-grid-version\"));\n    clearAndType(field, usingGrid);\n  }\n\n  public IssueList submit() {\n    driver.findElement(By.cssSelector(\"button[type='submit']\")).click();\n    return new IssueList(driver);\n  }\n\n  private void clearAndType(WebElement field, String text) {\n    field.clear();\n    field.sendKeys(text);\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Excluding Switches in Edge Options - Python\nDESCRIPTION: Demonstrates how to exclude specific switches in Edge options using Python.\nThis allows you to override default browser behavior or disable specific features.\nDependencies: Selenium WebDriver, Edge, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\noptions.add_experimental_option(\"excludeSwitches\", ['enable-automation'])\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Selenium WebDriver\nDESCRIPTION: This snippet shows how to include selenium-webdriver as a dependency in your project's package.json file.  It specifies the version of selenium-webdriver to be installed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"selenium-tests\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"selenium-webdriver\": \"^4.4.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Selenium Information\nDESCRIPTION: The `selenium info` command provides easy access to documentation on common tasks when using the Selenium server.  It offers information on topics like configuration, tracing, security, and session maps, helping users get started with more complex aspects of running a Selenium Grid.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2021/a-tour-of-4-new-commands.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nselenium info\n```\n\n----------------------------------------\n\nTITLE: Setting the Log Level\nDESCRIPTION: This code sets the log level for the FirefoxDriver. Available log levels include `fatal`, `error`, `warn`, `info`, `config`, `debug`, and `trace`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_25\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.firefox(log_level: :debug)\ndriver = Selenium::WebDriver.for :firefox, service: service\n```\n\n----------------------------------------\n\nTITLE: Java Assertion Example\nDESCRIPTION: This snippet shows an example of using assertions in Java with JUnit to verify that the title of a webpage matches the expected value. It requires the JUnit testing framework.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport org.junit.jupiter.api.Assertions;\n\nAssertions.assertEquals(\"SeleniumHQ Browser Automation\", driver.getTitle());\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver in Python\nDESCRIPTION: This Python snippet demonstrates how to initialize a Chrome webdriver instance. It uses the selenium library to create a new Chrome driver object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.pt-br.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Chrome()\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Version in Ruby\nDESCRIPTION: This snippet demonstrates how to set the browser version using Selenium in Ruby. It retrieves the current browser version.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nit 'browser version' do\n  options.browser_version = '106.0'\n  expect(options.browser_version).to eq '106.0'\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level to FINE for Tracing in Selenium Grid\nDESCRIPTION: This command sets the log level to FINE when running Selenium Grid in standalone mode.  This enables the printing of tracing information to the console. The selenium-version should be replaced with the actual version of the Selenium server jar file. This is necessary for viewing the traces.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/observability.pt-br.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-4.0.0-<selenium-version>.jar standalone --log-level FINE\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency After Upgrade - JSONPath\nDESCRIPTION: This JSONPath code demonstrates the updated Gradle configuration for Selenium Java after upgrading to Selenium 4. It includes the selenium-java version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_13\n\nLANGUAGE: jsonpath\nCODE:\n```\nplugins {\n    id 'java'\n}\ngroup 'org.example'\nversion '1.0-SNAPSHOT'\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'\n    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.4.0'\n}\ntest {\n    useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Ruby\nDESCRIPTION: Demonstrates how to select an option in a Select element by its index in Ruby. It uses the select_by(:index, index) method. Index starts from 0. Throws NoSuchElementException if index is out of range.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nselect.select_by(:index, 0)\n```\n\n----------------------------------------\n\nTITLE: Set Logger Level in JavaScript\nDESCRIPTION: This snippet demonstrates how to set the logging level in JavaScript. This controls the verbosity of the logs.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.setLevel(logging.Level.INFO)\n```\n\n----------------------------------------\n\nTITLE: Finding Elements From Element - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to find child elements within a parent element using Selenium WebDriver. It fetches a 'div' element and then locates and prints the text content of all 'p' elements nested inside it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {Builder, By} = require('selenium-webdriver');\n\n  (async function example() {\n      let driver = new Builder()\n          .forBrowser('chrome')\n          .build();\n\n      await driver.get('https://www.example.com');\n\n      // Get element with tag name 'div'\n      let element = driver.findElement(By.css(\"div\"));\n\n      // Get all the elements available with tag name 'p'\n      let elements = await element.findElements(By.css(\"p\"));\n      for(let e of elements) {\n          console.log(await e.getText());\n      }\n  })();\n```\n\n----------------------------------------\n\nTITLE: Removing JavaScript Exception Handler using WebDriver BiDi in Python\nDESCRIPTION: This snippet showcases removing a previously added JavaScript exception handler using WebDriver BiDi in Python. It uses the handler ID returned when the handler was added initially. This stops the recording of JavaScript exceptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.zh-cn.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nbidi.script.remove_exception_listener(exception_handler)\n```\n\n----------------------------------------\n\nTITLE: Forward Click with Selenium\nDESCRIPTION: Performs a forward click by pressing and releasing mouse button 4.  It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(:id, 'clickable')\n@driver.action.move_to(element).click(button: :forward).perform\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Products Page\nDESCRIPTION: This HTML snippet shows the basic structure of a products page, containing a header and an inventory list. It demonstrates how the page is organized into different sections.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.en.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Products Page -->\n<div class=\"header_container\">\n    <span class=\"title\">Products</span>\n</div>\n\n<div class=\"inventory_list\">\n    <div class=\"inventory_item\">\n    </div>\n    <div class=\"inventory_item\">\n    </div>\n    <div class=\"inventory_item\">\n    </div>\n    <div class=\"inventory_item\">\n    </div>\n    <div class=\"inventory_item\">\n    </div>\n    <div class=\"inventory_item\">\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Set User Verified in JavaScript\nDESCRIPTION: This JavaScript sets user verification to simulate success or failure using the DevTools protocol.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nawait devtools.send('WebAuthn.setUserVerified', { isUserVerified: true })\n\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to None in Java\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'none' in Java. The WebDriver waits until the initial page is downloaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nChromeOptions options = new ChromeOptions();\noptions.setPageLoadStrategy(PageLoadStrategy.NONE);\n```\n\n----------------------------------------\n\nTITLE: Listing Downloaded Files using curl\nDESCRIPTION: This command uses `curl` to send a GET request to the `/session/<sessionId>/se/files` endpoint to list all files downloaded during a specific session. Requires an active session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.en.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://localhost:4444/session/90c0149a-2e75-424d-857a-e78734943d4c/se/files\"\n```\n\n----------------------------------------\n\nTITLE: Enable Logs - CSharp\nDESCRIPTION: This snippet is a placeholder as there is no code provided. The goal is to show how to enable logs with C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_61\n\nLANGUAGE: CSharp\nCODE:\n```\n// No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Move by Offset from Element with Selenium\nDESCRIPTION: This snippet demonstrates how to move the mouse by a specified offset from the center of an element using Selenium. The initial mouse position is the center of the element. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('my-element'));\nawait actions.moveToElement(element, {x: 10, y: 20}).perform();\n```\n\n----------------------------------------\n\nTITLE: Setting Firefox Driver Service Log Level\nDESCRIPTION: This code snippet demonstrates how to set the log level for the Firefox driver service, allowing control over the verbosity of the logs.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nservice = FirefoxService(log_level=\"debug\")\n```\n\n----------------------------------------\n\nTITLE: Setting Local File Detector in Python\nDESCRIPTION: Sets a local file detector for a RemoteWebDriver instance in Python to enable file uploads. Although a local file detector is added by default, the user can implement their own version. Requires the selenium library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndriver = webdriver.Remote(command_executor='http://localhost:4444', options=webdriver.ChromeOptions())\n        driver.file_detector = UselessFileDetector()\n```\n\n----------------------------------------\n\nTITLE: Creating Named Color Objects - Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to create Color objects from named color strings like \"black\", \"chocolate\", and \"hotpink\" in Python.  The `Color.from_string()` method is used to parse these predefined color names.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nBLACK = Color.from_string('black')\nCHOCOLATE = Color.from_string('chocolate')\nHOTPINK = Color.from_string('hotpink')\n```\n\n----------------------------------------\n\nTITLE: Removing Credential in Python\nDESCRIPTION: This python code removes the credential based on credential ID. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\ndevtools.remove_credential()\n```\n\n----------------------------------------\n\nTITLE: Find Element by Link Text - C#\nDESCRIPTION: This snippet shows how to locate a link element using its exact link text in C#. It initializes a ChromeDriver and uses the `FindElement` method with `By.LinkText` to find the link with the text 'Selenium Official Page'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_17\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.LinkText(\"Selenium Official Page\"));\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs in CSharp\nDESCRIPTION: This C# code snippet demonstrates how to set the logging level on a per-class basis.  It leverages the LoggerFactory to configure the logging level for a specific category. It requires the Microsoft.Extensions.Logging library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddFilter(\"SeleniumDocs.Troubleshooting.LoggingTest\", LogLevel.Warning);\n\n```\n\n----------------------------------------\n\nTITLE: Getting Selenium Logger in Python\nDESCRIPTION: This snippet shows how to obtain the Selenium logger in Python using the `logging` module. It retrieves the top-level Selenium module's logger, allowing you to capture logs from all submodules. Requires the `logging` module from Python's standard library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlogger = logging.getLogger('selenium')\n```\n\n----------------------------------------\n\nTITLE: Adding Credential in Python\nDESCRIPTION: This Python code adds a public key credential to the virtual authenticator.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndev_tools.webauthn.add_credential(PublicKeyCredentialParams())\n\n```\n\n----------------------------------------\n\nTITLE: Verify Driver Installation (Windows)\nDESCRIPTION: This snippet checks the version of the chromedriver.exe to verify that it has been correctly added to the PATH environment variable in Windows.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.ja.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nchromedriver.exe --version\n```\n\n----------------------------------------\n\nTITLE: Initializing ChromeDriver in CSharp\nDESCRIPTION: This code snippet demonstrates how to initialize a ChromeDriver instance in C# for Selenium WebDriver automation. It uses the `var` keyword to create a new ChromeDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.zh-cn.md#_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n```\n\n----------------------------------------\n\nTITLE: Finding Elements From Element in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to find child elements within a specific parent element using Selenium WebDriver. It navigates to a URL, finds an element with the CSS selector 'div', then finds all 'p' elements within that 'div', and prints their text content to the console. It requires the selenium-webdriver npm package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.en.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {Builder, By} = require('selenium-webdriver');\n\n  (async function example() {\n      let driver = new Builder()\n          .forBrowser('chrome')\n          .build();\n\n      await driver.get('https://www.example.com');\n\n      // Get element with tag name 'div'\n      let element = driver.findElement(By.css(\"div\"));\n\n      // Get all the elements available with tag name 'p'\n      let elements = await element.findElements(By.css(\"p\"));\n      for(let e of elements) {\n          console.log(await e.getText());\n      }\n  })();\n```\n\n----------------------------------------\n\nTITLE: Set Page Scale CSharp\nDESCRIPTION: This code snippet demonstrates how to set the page scale (zoom) for printing in C# with Selenium, using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_13\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.Scale = 0.5;\n\nvar print = (IPrintsPage)driver;\nstring base64Pdf = print.Print(printOptions);\n```\n\n----------------------------------------\n\nTITLE: Enable Logs - Python\nDESCRIPTION: This snippet shows how to enable logging in Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_60\n\nLANGUAGE: Python\nCODE:\n```\ndriver.get_log('browser')\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element w/ Offset (Ruby)\nDESCRIPTION: This Ruby code snippet demonstrates scrolling from a specified element with an offset and scroll amount using Selenium's Actions API.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'id-of-element')\n@driver.action.scroll_from(element, x: 25, y: 25, delta_x: 100, delta_y: 200).perform\n```\n\n----------------------------------------\n\nTITLE: Find All Elements by Tag Name in Java\nDESCRIPTION: This snippet retrieves all web elements with the tag name 'li' in Java using Selenium WebDriver. The `findElements` method returns a list of all matching elements. An empty list is returned if no matching elements are found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\nList<WebElement> plants = driver.findElements(By.tagName(\"li\"));\n```\n\n----------------------------------------\n\nTITLE: Removing All Credentials in Java\nDESCRIPTION: This code snippet shows how to remove all credentials from the virtual authenticator in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nbyte[] bytes = new byte[16];\nnew Random().nextBytes(bytes);\nCredential cred = new Credential()\n    .setId(bytes)\n    .setAlgorithm(Algorithm.ES256)\n    .setUserHandle(bytes)\n    .setResidentKey(true);\nauthenticator.addCredential(cred);\nauthenticator.removeAllCredentials();\n```\n\n----------------------------------------\n\nTITLE: Get Active Element Attribute in Selenium WebDriver - Kotlin\nDESCRIPTION: This Kotlin code demonstrates how to retrieve an attribute from the currently active element using Selenium WebDriver. It navigates to Google, enters text in the search box, and retrieves the 'title' attribute of the active element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_38\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.By\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver = ChromeDriver()\n    try {\n        driver.get(\"https://www.google.com\")\n        driver.findElement(By.cssSelector(\"[name='q']\")).sendKeys(\"webElement\")\n\n        // Get attribute of current active element\n        val attr = driver.switchTo().activeElement().getAttribute(\"title\")\n        print(attr)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ChromeDriver in Ruby\nDESCRIPTION: This code snippet demonstrates how to initialize a ChromeDriver instance in Ruby for Selenium WebDriver automation. It uses the `Selenium::WebDriver.for` method to create a Chrome driver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.zh-cn.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :chrome\n```\n\n----------------------------------------\n\nTITLE: Accessing Shadow DOM Elements - C#\nDESCRIPTION: This snippet shows how to access elements within a Shadow DOM in C# using Selenium. It first locates the shadow host element, then accesses its shadow root using `GetShadowRoot()`, and finally finds the desired element within the shadow root.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_12\n\nLANGUAGE: CSharp\nCODE:\n```\nvar shadowHost = _driver.FindElement(By.CssSelector(\"#shadow_host\"));\nvar shadowRoot = shadowHost.GetShadowRoot();\nvar shadowContent = shadowRoot.FindElement(By.CssSelector(\"#shadow_content\"));\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Examples in Selenium Documentation\nDESCRIPTION: This code snippet demonstrates how to reference code examples from the Selenium GitHub repository using the `gh-codeblock` shortcode.  It sets `text=true` in the `tabpane` to disable automatic formatting, and shows how to point to specific lines of code in the repository.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.zh-cn.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n{{</* tabpane text=true */>}}\n{{</* tab header=\"Java\" */>}}\n{{</* gh-codeblock path=\"examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L26-L27\" */>}}\n{{</* /tab */>}}\n{{</* tab header=\"Python\" */>}}\n{{</* gh-codeblock path=\"examples/python/tests/getting_started/first_script.py#L18-L19\" */>}}\n{{</* /tab */>}}\n{{</* tab header=\"CSharp\" */>}}\n{{</* gh-codeblock path=\"examples/dotnet/SeleniumDocs/GettingStarted/FirstScript.cs#L25-L26\" */>}}\n{{</* /tab */>}}\n{{</* tab header=\"Ruby\" */>}}\n{{</* gh-codeblock path=\"examples/ruby/spec/getting_started/first_script.rb#L17-L18\" */>}}\n{{</* /tab */>}}\n{{</* tab header=\"JavaScript\" */>}}\n{{</* gh-codeblock path=\"examples/javascript/test/getting_started/firstScript.spec.js#L22-L23\" */>}}\n{{</* /tab */>}}\n{{</* tab header=\"Kotlin\" */>}}\n{{</* gh-codeblock path=\"examples/kotlin/src/test/kotlin/dev/selenium/getting_started/FirstScriptTest.kt#L31-L32\" */>}}\n{{</* /tab */>}}\n{{</* /tabpane */>}}\n```\n\n----------------------------------------\n\nTITLE: Capture Full Page Screenshot in Java\nDESCRIPTION: This code snippet demonstrates how to capture a full-page screenshot using Selenium WebDriver's BiDi API in Java. It utilizes the `captureScreenshot` method from the `BrowsingContext` class to encode the full page as a base64 string. Requires Selenium version 4.13.0 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(((HasDevTools) driver).getDevTools(),\n                                         ((RemoteWebDriver) driver).getWindowHandle());\n\n    String fullPage = browsingContext.captureScreenshot(true);\n    assertNotNull(fullPage);\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium - Ruby\nDESCRIPTION: This code snippet demonstrates how to set an implicit wait in Selenium using Ruby. Implicit waits are a global setting that applies to all element location calls during the session. The driver will wait for the specified duration before throwing an error if the element is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.zh-cn.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.timeouts.implicit_wait = 10\n```\n\n----------------------------------------\n\nTITLE: Defining Unicorn Attributes in JavaScript\nDESCRIPTION: This snippet defines the attributes of a Unicorn object and then uses the accountPage and addUnicornPage objects to configure the unicorn. It takes the sparkles object, fills out a web form, and clicks submit. Dependencies include the Unicorn, UnicornColors, UnicornAccessories, UnicornAdornments, accountPage, and addUnicornPage classes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The Unicorn is a top-level Object--it has attributes, which are set here.\n// This only stores the values; it does not fill out any web forms or interact\n// with the browser in any way.\nvar sparkles = new Unicorn(\"Sparkles\", UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS);\n\n// Since we are already \"on\" the account page, we have to use it to get to the\n// actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n// takes us there.\n\nvar addUnicornPage = accountPage.addUnicorn();\n\n// Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n// its createUnicorn() method. This method will take Sparkles' attributes,\n// fill out the form, and click submit.\nvar unicornConfirmationPage = addUnicornPage.createUnicorn(sparkles);\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium WebDriver via NPM - Shell\nDESCRIPTION: This shell command demonstrates how to install the Selenium WebDriver package using npm (Node Package Manager) in a JavaScript project.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nnpm install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: Creating Resident Credential in Java\nDESCRIPTION: This snippet creates a resident credential with specified parameters in Java, such as user ID, name, and display name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\ndevTools.getDomains().webAuthn().addCredential(\n    new PublicKeyCredentialParams(\n        Base64.getEncoder().encodeToString(\"user1\".getBytes(StandardCharsets.UTF_8)),\n        Base64.getEncoder().encodeToString(\"User 1\".getBytes(StandardCharsets.UTF_8)),\n        \"User One\"));\n\n```\n\n----------------------------------------\n\nTITLE: Login DSL Method in Java\nDESCRIPTION: This Java method demonstrates a DSL approach for logging in. It takes a username and password, fills the appropriate fields, clicks the login button, and returns an instance of the AccountPage. It uses Selenium's WebElement and PageFactory.newInstance for element interaction and page object creation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/domain_specific_language.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * Recebe um username e password, prrenche os campos, e clica em \"login\".\n * @return Uma instância de AccountPage\n */\npublic AccountPage loginAsUser(String username, String password) {\n  WebElement loginField = driver.findElement(By.id(\"loginField\"));\n  loginField.clear();\n  loginField.sendKeys(username);\n\n  // Preenche o campo password. O localizador que estamos usando é \"By.id\", e devemos\n  // definí-lo em algum outro lugar dentro da Classe.\n  WebElement passwordField = driver.findElement(By.id(\"password\"));\n  passwordField.clear();\n  passwordField.sendKeys(password);\n\n  // Clica o botão de login, que possui o id \"submit\".\n  driver.findElement(By.id(\"submit\")).click();\n\n  // Cria e retorna uma nova instância de AccountPage (via o Selenium\n  // PageFactory embutido).\n  return PageFactory.newInstance(AccountPage.class);\n}\n```\n\n----------------------------------------\n\nTITLE: Printing with BrowsingContext - Java\nDESCRIPTION: This Java snippet demonstrates printing a page using the BrowsingContext interface with configured PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setScale(0.8);\n\nString pdf = ((HasBiDi) driver).getDevTools().getDomains().browsingContext().print(printOptions);\n```\n\n----------------------------------------\n\nTITLE: Updating Selenium Dependency in Maven - XML\nDESCRIPTION: This XML snippet demonstrates how to update the Selenium Java dependency in a Maven `pom.xml` file from version 3.141.59 to version 4.4.0.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <!-- more dependencies ... -->\n  <dependency>\n    <groupId>org.seleniumhq.selenium</groupId>\n    <artifactId>selenium-java</artifactId>\n    <version>3.141.59</version>\n  </dependency>\n  <!-- more dependencies ... -->\n</dependencies>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <!-- more dependencies ... -->\n    <dependency>\n        <groupId>org.seleniumhq.selenium</groupId>\n        <artifactId>selenium-java</artifactId>\n        <version>4.4.0</version>\n    </dependency>\n    <!-- more dependencies ... -->\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Router (Shell)\nDESCRIPTION: This command starts the Selenium Grid Router, which forwards new session requests to the Session Queue and existing session requests to the Node executing the session. It communicates with the Session Queue, Sessions component, and Distributor.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.ja.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar router --sessions http://<sessions-ip>:5556 --distributor http://<distributor-ip>:5553 --sessionqueue http://<new-session-queue-ip>:5559 --port 4444\n```\n\n----------------------------------------\n\nTITLE: Setting Video Name Capability in Java Selenium Grid\nDESCRIPTION: This code snippet illustrates how to set the video file name in a Dynamic Grid environment using Java and Selenium. The `se:videoName` capability is used to specify the desired file name for the video recording.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2024/selenium-4-22-released.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Setting video file name in Dynamic Grid using Java\ncapabilities.setCapability(\"se:videoName\", \"my_video_name.mp4\");\n```\n\n----------------------------------------\n\nTITLE: Using Chromium installed via snap on Linux\nDESCRIPTION: This command showcases how Selenium Manager uses Chromium installed via `snap` on a Linux system when Chrome is not available. It demonstrates the process of detecting Chromium, identifying its version, and locating the appropriate ChromeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/status_of_selenium_manager_in_october_2023.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./selenium-manager --browser chrome --debug\nDEBUG   chromedriver not found in PATH\nDEBUG   Found chromium in PATH: /snap/bin/chromium\nDEBUG   Running command: /snap/bin/chromium --version\nDEBUG   Output: \"Chromium 117.0.5938.149 snap\"\nDEBUG   Detected browser: chrome 117.0.5938.149\nDEBUG   Required driver: chromedriver 117.0.5938.149\nDEBUG   chromedriver 117.0.5938.149 already in the cache\nINFO   Driver path: /home/user/.cache/selenium/chromedriver/linux64/117.0.5938.149/chromedriver\nINFO   Browser path: /snap/bin/chromium\n```\n\n----------------------------------------\n\nTITLE: Transforming Response via CDP in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to intercept and modify network responses using Chrome DevTools Protocol (CDP) with Selenium.  It intercepts responses based on URL and modifies the response body. This snippet depends on the Selenium WebDriver and CDP capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.zh-cn.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nsession.on(:request_intercepted) do |event|\n  if event['request']['url'].include?('example')\n    new_content = Base64.encode64('<h1>This is modified content</h1>')\n    session.send('Network.continueInterceptedRequest', interceptionId: event['interceptionId'], rawResponse: new_content)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating and Logging in a User (Kotlin)\nDESCRIPTION: This snippet demonstrates how to create a user with specific permissions using a UserFactory and then log in as that user. It assumes the existence of a UserFactory and related classes. The loginAs method returns an AccountPage object for further interaction.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Create a user who has read-only permissions--they can configure a unicorn,\n// but they do not have payment information set up, nor do they have\n// administrative privileges. At the time the user is created, its email\n// address and password are randomly generated--you don't even need to\n// know them.\nval user = UserFactory.createCommonUser() //This method is defined elsewhere.\n\n// Log in as this user.\n// Logging in on this site takes you to your personal \"My Account\" page, so the\n// AccountPage object is returned by the loginAs method, allowing you to then\n// perform actions from the AccountPage.\nval accountPage = loginAs(user.getEmail(), user.getPassword())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tracing Information from Selenium Grid\nDESCRIPTION: This command retrieves information about tracing from a running Selenium Grid server. This information typically includes instructions on how to configure and visualize traces using Jaeger UI. The selenium-version should be replaced with the actual version of the Selenium server jar file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/observability.pt-br.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-4.0.0-<selenium-version>.jar info tracing\n```\n\n----------------------------------------\n\nTITLE: Removing Virtual Authenticator in Java\nDESCRIPTION: This code snippet demonstrates how to remove a previously added virtual authenticator using its authenticatorId in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\ndevTools.getDomains().webAuthn().removeVirtualAuthenticator(authenticatorId);\n\n```\n\n----------------------------------------\n\nTITLE: Using Markdown in a Tab with Selenium Examples\nDESCRIPTION: This demonstrates how to incorporate Markdown formatting within code tabs in the Selenium documentation.  The `text=true` attribute in the tabpane is required, along with using `%` instead of `<` and `>` in the Hugo syntax for tabs. This enables including descriptive text alongside code snippets from GitHub.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.zh-cn.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n{{</* tabpane text=true */>}}\n{{%/* tab header=\"Java\" */%}}\n1. Start the driver\n{{</* gh-codeblock path=\"examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L12\" */>}}\n2. Navigate to a page\n{{</* gh-codeblock path=\"examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L14\" */>}}\n3. Quit the driver\n{{</* gh-codeblock path=\"examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L29\" */>}}\n{{%/* /tab */%}}\n< ... >\n{{</* /tabpane */>}}\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Node (Shell)\nDESCRIPTION: This command starts a Selenium Node, which executes the tests received from the Hub. It detects available drivers in the PATH upon startup and registers itself with the Hub. This example assumes the Node is running on the same machine as the Hub.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.pt-br.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium in JavaScript\nDESCRIPTION: This snippet demonstrates how to start a Selenium WebDriver session in JavaScript, navigate to a webpage, and close the browser. It requires the Selenium WebDriver library to be installed using npm or yarn.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.en.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { Builder } = require('selenium-webdriver');\nconst chrome = require('selenium-webdriver/chrome');\n\nasync function helloSelenium() {\n  let driver = await new Builder().forBrowser('chrome').setChromeOptions(new chrome.Options()).build();\n\n  await driver.get('https://www.selenium.dev/selenium/web/index.html');\n\n  await driver.quit();\n}\n\nhelloSelenium();\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name - Ruby\nDESCRIPTION: This snippet demonstrates how to get the tag name of a web element using Selenium WebDriver in Ruby. It finds an element by name and uses the tag_name method to retrieve its tag name as a string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.zh-cn.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nemail_input = driver.find_element(name: 'email_input')\nexpect(email_input.tag_name).to eq 'input'\n```\n\n----------------------------------------\n\nTITLE: Find All Elements by Tag Name in Kotlin\nDESCRIPTION: This snippet retrieves all web elements with the tag name 'li' in Kotlin using Selenium WebDriver. The `findElements` method returns a list of all matching elements. An empty list is returned if no matching elements are found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nval plants: List<WebElement> = driver.findElements(By.tagName(\"li\"))\n```\n\n----------------------------------------\n\nTITLE: Maximize Window - Selenium WebDriver - Kotlin\nDESCRIPTION: This snippet maximizes the browser window using Selenium WebDriver in Kotlin. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_40\n\nLANGUAGE: Kotlin\nCODE:\n```\ndriver.manage().window().maximize()\n```\n\n----------------------------------------\n\nTITLE: Adding Credential in C#\nDESCRIPTION: This code snippet demonstrates how to add a credential to the virtual authenticator using C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nbyte[] bytes = new byte[16];\nRandom rand = new Random();\nrand.NextBytes(bytes);\nCredential cred = new Credential()\n{\n    Id = bytes,\n    Algorithm = Algorithm.Es256,\n    UserHandle = bytes,\n    ResidentKey = true\n};\n((IHasAuthentication)driver).AddVirtualAuthenticatorCredential(authenticator, cred);\n```\n\n----------------------------------------\n\nTITLE: Back Click with Selenium\nDESCRIPTION: Performs a back click by pressing and releasing mouse button 3.  It requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.en.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait actions.move({origin: element}).click(MouseButton.BACK).perform();\n```\n\n----------------------------------------\n\nTITLE: Iterate and Extract Text from Elements\nDESCRIPTION: This snippet demonstrates how to iterate through a list of WebElements obtained using `find_elements` and extract the text content of each element. It navigates to a webpage, retrieves all `<p>` elements, and then prints the text of each element to the console.  Dependencies: selenium, webdriver_manager.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.ja.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Firefox()\n\n    # Navigate to Url\ndriver.get(\"https://www.example.com\")\n\n    # Get all the elements available with tag name 'p'\nelements = driver.find_elements(By.TAG_NAME, 'p')\n\nfor e in elements:\n    print(e.text)\n```\n\n----------------------------------------\n\nTITLE: DOM Mutation Handlers in Java\nDESCRIPTION: This Java snippet demonstrates handling DOM mutations using Chrome DevTools Protocol (CDP) through Selenium. It is part of a test case and requires a running Selenium WebDriver instance connected to a Chrome browser. It involves setting up network interception and listening for specific network events.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.zh-cn.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\ndriver.getDevTools().send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));\n```\n\n----------------------------------------\n\nTITLE: Adding a Cookie with Selenium WebDriver (Ruby)\nDESCRIPTION: This code snippet demonstrates how to add a cookie to the current browser context using Selenium WebDriver in Ruby. It requires the 'selenium-webdriver' gem. The code navigates to a specific URL and then adds a cookie with the name 'key' and the value 'value'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.zh-cn.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'selenium-webdriver'\ndriver = Selenium::WebDriver.for :chrome\n\nbegin\n  driver.get 'https://www.example.com'\n  \n  # Adds the cookie into current browser context\n  driver.manage.add_cookie(name: \"key\", value: \"value\")\nensure\n  driver.quit\nend\n```\n\n----------------------------------------\n\nTITLE: Cancel Auth Request - Selenium BiDi - JavaScript\nDESCRIPTION: This Javascript snippet demonstrates how to cancel a network request blocked at the `authRequired` event, utilizing Selenium BiDi and the `Network.cancelRequest` method. Requires Selenium 4.18 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait bidiNetwork.cancelRequest({\n  requestId: event.request.requestId\n});\n```\n\n----------------------------------------\n\nTITLE: Excluding TestNG from Selenium Dependency in Maven\nDESCRIPTION: This XML snippet shows how to configure your Maven pom.xml file to exclude the TestNG dependency from the Selenium dependency. This is required to resolve conflicts when using Selenium 2.0b1 with Maven. By excluding TestNG, Maven will correctly pick up your JUnit tests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2011/2-0b1-and-maven.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.seleniumhq.selenium</groupId>\n  <artifactId>selenium</artifactId>\n  <version>2.0b1</version>\n  <exclusions>\n    <exclusion>\n      <groupId>org.testng</groupId>\n      <artifactId>testng</artifactId>\n    </exclusion>\n  </exclusions>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Enable Logs - JavaScript\nDESCRIPTION: This snippet is a placeholder as there is no code provided. The goal is to show how to enable logs with Javascript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_63\n\nLANGUAGE: JavaScript\nCODE:\n```\n// No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Creating Resident Credential in Java\nDESCRIPTION: Creates a resident credential using VirtualAuthenticator in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nCredential cred = new Credential()\n    .setId(Base64.getDecoder().decode(\"YS5jdWJlLg==\"))\n    .setType(\"public-key\");\nauthenticator.addCredential(cred);\n```\n\n----------------------------------------\n\nTITLE: Get sessionqueue component configuration help\nDESCRIPTION: This command retrieves component-specific configuration information for the sessionqueue Selenium Grid role. It details available options and settings for the sessionqueue component.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.ja.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar sessionqueue --help\n```\n\n----------------------------------------\n\nTITLE: Check Session Owner Without Secret cURL\nDESCRIPTION: This snippet checks if a session belongs to a node without using the X-REGISTRATION-SECRET. It assumes no registration secret has been configured. The default Node URL is dynamically resolved.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://<node-URL>/se/grid/node/owner/<session-id>' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Defining Unicorn Attributes in CSharp\nDESCRIPTION: This snippet defines the attributes of a Unicorn object and then uses the AccountPage and AddUnicornPage objects to configure the unicorn. It takes the sparkles object, fills out a web form, and clicks submit. Dependencies include the Unicorn, UnicornColors, UnicornAccessories, UnicornAdornments, AccountPage, and AddUnicornPage classes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\n// The Unicorn is a top-level Object--it has attributes, which are set here. \n// This only stores the values; it does not fill out any web forms or interact\n// with the browser in any way.\nUnicorn sparkles = new Unicorn(\"Sparkles\", UnicornColors.Purple, UnicornAccessories.Sunglasses, UnicornAdornments.StarTattoos);\n\n// Since we are already \"on\" the account page, we have to use it to get to the\n// actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n// takes us there.\nAddUnicornPage addUnicornPage = accountPage.AddUnicorn();\n\n// Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n// its createUnicorn() method. This method will take Sparkles' attributes,\n// fill out the form, and click submit.\nUnicornConfirmationPage unicornConfirmationPage = addUnicornPage.CreateUnicorn(sparkles);\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse by Offset from Current Position in Selenium\nDESCRIPTION: This code snippet shows how to move the mouse pointer from its current position by a specified offset using Selenium WebDriver. It uses the `move_by` method. The position will be in the upper-left corner of the viewport if the mouse hasn't moved before. Note that pointer position does not change when the page is scrolled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.ja.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n@driver.action.move_by(30, -10).perform\n```\n\n----------------------------------------\n\nTITLE: Script Pinning Java\nDESCRIPTION: This Java snippet demonstrates how to perform script pinning using the Chrome DevTools Protocol (CDP) within Selenium. It utilizes the `pin` method to pin a script for debugging or other purposes. This approach will be replaced by WebDriver BiDi in the future.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nscript().pin(\"script-to-debug\");\nscript().unpin(\"script-to-debug\");\n//fails if the expression does not evaluate to a string.\n```\n\n----------------------------------------\n\nTITLE: Setting File Output for IE Driver Logs in Ruby\nDESCRIPTION: This Ruby code demonstrates how to configure logging output for the Internet Explorer Driver. It sets the `:log_level` and `:log_path` options to define where and how the driver logs are stored.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_29\n\nLANGUAGE: Ruby\nCODE:\n```\nSelenium::WebDriver.logger.level = :debug\nSelenium::WebDriver.logger.output = 'ie.log'\n```\n\n----------------------------------------\n\nTITLE: Cancel Auth Required Request - Java\nDESCRIPTION: This Java code snippet demonstrates how to cancel a network request blocked at the 'authRequired' phase using Selenium BiDi. It effectively stops the request from proceeding any further.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\ndriver.getDevTools().createSession();\nNetwork network = new Network(driver.getDevTools());\nnetwork.addIntercept(\"*.example.com/*\", new AddInterceptParameters());\nnetwork.cancelRequest();\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element using Selenium Wheel (Ruby)\nDESCRIPTION: Scrolls from a specified element by a given amount.  Requires the element, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'idOfMyElement')\n@driver.action.scroll_from(element, 20, 50).perform\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Node (Java)\nDESCRIPTION: This command starts a Node component of the Selenium Grid. Nodes are the machines that execute the WebDriver tests. This command assumes the Node is running on the same machine as the Hub.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.zh-cn.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Timeout in Ruby\nDESCRIPTION: This Ruby code sets the page load timeout for a Selenium session. The page load timeout determines how long WebDriver waits for a page to load completely. If exceeded, a TimeoutException is raised. Time is specified in seconds.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\noptions = Selenium::WebDriver::Options.chrome\noptions.page_load_timeout = 50\n```\n\n----------------------------------------\n\nTITLE: DOM Mutation Handlers in Python with Selenium CDP\nDESCRIPTION: This Python snippet shows how to handle DOM mutation events using Chrome DevTools Protocol (CDP) in Selenium.  The snippet gets a request and prints the request's url. Requires a running Selenium WebDriver instance connected to a Chrome browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.ja.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nrequest = await cdp.fetch.get_request(interceptionId)\nprint(request)\n```\n\n----------------------------------------\n\nTITLE: Auth Required Event - Selenium BiDi - Java\nDESCRIPTION: This Java snippet demonstrates how to listen for the 'Auth Required' network event using Selenium's BiDi API. It allows handling authentication challenges. Requires Selenium 4.17 or higher and the WebDriver BiDi library. No specific input or output is described in the snippet.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.pt-br.md#_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\nNetwork network = driver.getDevTools().getDomains().network();\nnetwork.onAuthRequired(event -> {\n  System.out.println(\"Auth is required for \" + event.getRequest().getUrl());\n});\n```\n\n----------------------------------------\n\nTITLE: Tear Down Method with driver.Quit() - MSTest (C#)\nDESCRIPTION: This C# code snippet demonstrates how to use the `[TestCleanup]` attribute in MSTest to define a tear-down method that calls `driver.Quit()`. This ensures that the browser session is properly closed after each test, preventing resource leaks. MSTest is the unit testing framework provided by Visual Studio.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n/*\n    Example using Visual Studio's UnitTesting\n    https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.aspx\n*/\n[TestCleanup]\npublic void TearDown()\n{\n    driver.Quit();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Binary Location\nDESCRIPTION: This code snippet shows how to specify the path to the Chrome binary to use a specific Chrome installation or a Chromium-based browser. This allows you to drive different Chromium-based browsers with ChromeDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.binary = '/path/to/chrome/binary'\n```\n\n----------------------------------------\n\nTITLE: Get Distributor Configuration Help\nDESCRIPTION: This command displays component-specific configuration information for the Distributor role. It uses the `--help` option after specifying the distributor role.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.en.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar distributor --help\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Docker Compose Configuration\nDESCRIPTION: This YAML file defines a Docker Compose configuration for setting up a Redis cache instance. It specifies the image, restart policy, and port mapping to expose the Redis service.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.pt-br.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  redis:\n    image: redis:bullseye\n    restart: always\n    ports:\n      - \"6379:6379\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium WebDriver in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates Selenium WebDriver initialization with Chrome. It navigates to a URL and asserts the title. It depends on the `selenium-webdriver` npm package and ChromeDriver being properly set up.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.ja.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Builder, Browser, } = require('selenium-webdriver');\nconst { suite } = require('selenium-webdriver/testing');\nconst assert = require('assert');\n\nsuite(function(env) {\n  describe('Hello Selenium', function() {\n    it('works', async function() {\n      let driver = await new Builder().forBrowser(Browser.CHROME).build();\n      await driver.get('https://www.selenium.dev/selenium/web/web-form.html');\n      assert.equal(\"Web form\", await driver.getTitle());\n      await driver.quit();\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Location - Python\nDESCRIPTION: This snippet demonstrates how to specify the location of the ChromeDriver executable using the Service class in Python.  This is needed when the driver is not automatically discoverable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.ja.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nservice = Service(executable_path=\"/path/to/chromedriver\")\n```\n\n----------------------------------------\n\nTITLE: Building Selenium Manager from Source\nDESCRIPTION: This command builds the Selenium Manager from source using cargo. The `--release` flag compiles the project in release mode.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.zh-cn.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Configuring Capabilities Before Selenium 4 - Java\nDESCRIPTION: This Java code demonstrates how to set up DesiredCapabilities in Selenium 3. It sets browser, platform, version, build and name capabilities for a Firefox browser using DesiredCapabilities class, which is the legacy approach prior to Selenium 4.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nDesiredCapabilities caps = DesiredCapabilities.firefox();\ncaps.setCapability(\"platform\", \"Windows 10\");\ncaps.setCapability(\"version\", \"92\");\ncaps.setCapability(\"build\", myTestBuild);\ncaps.setCapability(\"name\", myTestName);\nWebDriver driver = new RemoteWebDriver(new URL(cloudUrl), caps);\n```\n\n----------------------------------------\n\nTITLE: Cloning Selenium Repository\nDESCRIPTION: This command clones the Selenium repository from GitHub to the local machine. The `--depth 1` flag creates a shallow clone.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.zh-cn.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/SeleniumHQ/selenium.git --depth 1\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Selenium JavaScript\nDESCRIPTION: This JavaScript code checks if a button element is enabled using Selenium WebDriver. It asserts that the `isEnabled` method returns false, indicating the element is disabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.selenium.dev/selenium/web/inputs.html')\n    expect(await driver.findElement(By.name('button_input')).isEnabled()).toBe(false)\n```\n\n----------------------------------------\n\nTITLE: Finding Elements By Tag Name - Python\nDESCRIPTION: This code snippet demonstrates how to find all elements with a specific tag name using Selenium WebDriver in Python. It initializes a WebDriver instance, navigates to a URL, finds all 'p' elements, and prints their text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Firefox()\n\n    # Navigate to Url\ndriver.get(\"https://www.example.com\")\n\n    # Get all the elements available with tag name 'p'\nelements = driver.find_elements(By.TAG_NAME, 'p')\n\nfor e in elements:\n    print(e.text)\n```\n\n----------------------------------------\n\nTITLE: Force Create Process API in Kotlin\nDESCRIPTION: This Kotlin code snippet shows how to force the CreateProcess API when launching Internet Explorer. It achieves this by calling `useCreateProcessApiToLaunchIe()` on the `InternetExplorerOptions` instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.Capabilities\nimport org.openqa.selenium.ie.InternetExplorerDriver\nimport org.openqa.selenium.ie.InternetExplorerOptions\n\nfun main() {\n    val options = InternetExplorerOptions()\n    options.useCreateProcessApiToLaunchIe()\n    val driver = InternetExplorerDriver(options)\n    try {\n        driver.get(\"https://google.com/ncr\")\n        val caps = driver.getCapabilities()\n        println(caps)\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Index in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option from a <select> element using Selenium's Select class, specifically by its index (position) within the list of options. The `select_by_index()` method is used to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nselect.select_by_index(2)\n```\n\n----------------------------------------\n\nTITLE: IE Command Line Options - Java\nDESCRIPTION: This snippet demonstrates how to use command line options with Internet Explorer using Java. It enables the CreateProcess API and adds the '-k' command switch for kiosk mode.  This requires setting 'forceCreateProcessApi' to true to ensure the command line arguments are effective.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.Capabilities;\nimport org.openqa.selenium.ie.InternetExplorerDriver;\nimport org.openqa.selenium.ie.InternetExplorerOptions;\n\npublic class ieTest {\n    public static void main(String[] args) {\n        InternetExplorerOptions options = new InternetExplorerOptions();\n        options.useCreateProcessApiToLaunchIe();\n        options.addCommandSwitches(\"-k\");\n        InternetExplorerDriver driver = new InternetExplorerDriver(options);\n        try {\n            driver.get(\"https://google.com/ncr\");\n            Capabilities caps = driver.getCapabilities();\n            System.out.println(caps);\n        } finally {\n            driver.quit();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing CDP commands in Ruby\nDESCRIPTION: This Ruby snippet demonstrates executing CDP commands using `execute_cdp`. It initializes a Chrome driver and retrieves cookies. Requires Selenium and a Chrome driver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/_index.ja.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver = Selenium::WebDriver.for :chrome\n        params = { \"url\": 'https://www.selenium.dev/' }\n        command = 'Network.getCookies'\n        driver.execute_cdp(command, params)\n```\n\n----------------------------------------\n\nTITLE: Locating Element by ID with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a web element on a page using its ID attribute with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.id()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nval driver = ChromeDriver()\n\tval loc: WebElement = driver.findElement(By.id(\"lname\"))\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid with JDBC session map in Bash\nDESCRIPTION: This bash script starts a distributed Selenium Grid using the JDBC session map.  It sets up the event bus, session queue, session map, distributor, router, and node components. It uses Coursier to fetch the required dependencies (selenium-session-map-jdbc and postgresql) and configures the session map using the specified TOML configuration file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.ja.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nSE_VERSION=<current_selenium_version>\nJAR_NAME=selenium-server-${SE_VERSION}.jar\nPUBLISH=\"--publish-events tcp://localhost:4442\"\nSUBSCRIBE=\"--subscribe-events tcp://localhost:4443\"\nSESSIONS=\"--sessions http://localhost:5556\"\nSESSIONS_QUEUE=\"--sessionqueue http://localhost:5559\"\necho 'Starting Event Bus'\njava -jar $JAR_NAME event-bus $PUBLISH $SUBSCRIBE --port 5557 &\necho 'Starting New Session Queue'\njava -jar $JAR_NAME sessionqueue --port 5559 &\necho 'Starting Sessions Map'\njava -jar $JAR_NAME \\\n--ext $(coursier fetch -p org.seleniumhq.selenium:selenium-session-map-jdbc:${SE_VERSION} org.postgresql:postgresql:42.3.1) \\\nsessions $PUBLISH $SUBSCRIBE --port 5556 --config sessions.toml &\necho 'Starting Distributor'\njava -jar $JAR_NAME  distributor $PUBLISH $SUBSCRIBE $SESSIONS $SESSIONS_QUEUE --port 5553 --bind-bus false &\necho 'Starting Router'\njava -jar $JAR_NAME router $SESSIONS --distributor http://localhost:5553 $SESSIONS_QUEUE --port 4444 &\necho 'Starting Node'\njava -jar $JAR_NAME node $PUBLISH $SUBSCRIBE &\n```\n\n----------------------------------------\n\nTITLE: Get New Session Queue Requests (Distributed)\nDESCRIPTION: Retrieves the pending new session requests in the Selenium Grid's session queue in a fully distributed setup. Returns the total number of requests in the queue. Requires queue URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://localhost:4444/se/grid/newsessionqueue/queue'\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium WebDriver in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to initialize and use Selenium WebDriver with Chrome. It navigates to a website and verifies its title. It requires the Selenium WebDriver Kotlin bindings and ChromeDriver to be properly installed and configured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.ja.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.WebDriver\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.chrome.ChromeOptions\nimport org.junit.jupiter.api.AfterEach\nimport org.junit.jupiter.api.BeforeEach\nimport org.junit.jupiter.api.Test\nimport org.junit.jupiter.api.Assertions.assertEquals\n\nclass HelloSelenium {\n    private lateinit var driver: WebDriver\n\n    @BeforeEach\n    fun setup() {\n        val options = ChromeOptions()\n        options.addArguments(\"--remote-allow-origins=*\")\n        driver = ChromeDriver(options)\n    }\n\n    @AfterEach\n    fun teardown() {\n        driver.quit()\n    }\n\n    @Test\n    fun testHelloSelenium() {\n        driver.get(\"https://www.selenium.dev/selenium/web/web-form.html\")\n        assertEquals(\"Web form\", driver.title)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting with Selenium in Python\nDESCRIPTION: This code snippet demonstrates how to make assertions within a Selenium test using pytest in Python. It retrieves the title of a webpage and asserts that it matches the expected title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntitle = driver.title\nassert title == \"SeleniumHQ Browser Automation\"\n```\n\n----------------------------------------\n\nTITLE: Preload Script - JavaScript\nDESCRIPTION: This snippet demonstrates how to preload a script using JavaScript and the WebDriver BiDi API. It utilizes the `script.addPreloadScript` method to add a script that executes before any other script in a browsing context. The script content is required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('preload a script', async () => {\n  await connection.script.addPreloadScript({ functionDeclaration: '() => { window.example = \\'example\\'; }' });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to Firefox Options\nDESCRIPTION: This code snippet demonstrates how to add command-line arguments to Firefox options.  It's useful for configuring the browser's behavior, such as running in headless mode. The `addArguments` method is used to append arguments to the options object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.zh-cn.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\noptions.addArguments(\"-headless\");\n```\n\n----------------------------------------\n\nTITLE: Enabling FINE level logging for Selenium Grid Standalone\nDESCRIPTION: This command starts the Selenium Grid server in standalone mode and sets the logging level to FINE.  This ensures that trace information is logged to the console, allowing detailed debugging and analysis.  The selenium-version needs to be replaced with the actual version being used.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/observability.zh-cn.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-4.0.0-<selenium-version>.jar standalone --log-level FINE\n```\n\n----------------------------------------\n\nTITLE: Capture Full Page Screenshot (Ruby)\nDESCRIPTION: This Ruby code snippet takes a full page screenshot using Firefox and Selenium. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.get_full_page_screenshot_as(:png)\n```\n\n----------------------------------------\n\nTITLE: Adding Selenium Server Dependency in Maven\nDESCRIPTION: This snippet demonstrates how to add the Selenium Server dependency to your Maven `pom.xml` file.  This is necessary when using DefaultSelenium or RemoteWebDriver and allows embedding the server directly within your project.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/how-to-use-selenium-2-with-maven.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.seleniumhq.selenium</groupId>\n    <artifactId>selenium-server</artifactId>\n    <version>2.0a5</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running Firefox Beta in Standalone Mode\nDESCRIPTION: This command runs a Docker container with Firefox Beta in standalone mode. It maps ports 4444 and 7900 for Selenium and VNC access, respectively, and allocates 2GB of shared memory. The container is removed after it stops.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/dev-and-beta-channel-browsers-via-docker-selenium.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-firefox:beta\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Name with Options - Ruby\nDESCRIPTION: This code snippet demonstrates setting and verifying the browser name using options in Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'browser name is correct' do\n  expect(options.browser_name).to eq('chrome')\nend\n```\n\n----------------------------------------\n\nTITLE: Removing Console Message Handler using WebDriver BiDi in Ruby\nDESCRIPTION: This Ruby snippet demonstrates removing a previously added console message handler. The `remove_console_listener` method is called with the handler ID to stop listening for console messages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.zh-cn.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nbidi.script.remove_console_listener handler\n```\n\n----------------------------------------\n\nTITLE: Get Sessions Configuration Help\nDESCRIPTION: This command displays component-specific configuration information for the Sessions role. It utilizes the `--help` option after specifying the sessions role.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.en.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar sessions --help\n```\n\n----------------------------------------\n\nTITLE: NuGet Config Example C#\nDESCRIPTION: This snippet provides an example of a `nuget.config` file with a package source.  This ensures that NuGet can find and download packages from the official NuGet feed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.pt-br.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <packageSources>\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n    <add key=\"nuget.org\" value=\"https://www.nuget.org/api/v2/\" />   \n  </packageSources>\n...\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository with Git\nDESCRIPTION: This command clones the SeleniumHQ/seleniumhq.github.io repository from GitHub to your local machine. This is the first step in setting up the Selenium Ruby examples.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/ruby/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/SeleniumHQ/seleniumhq.github.io.git\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Session Queue (Shell)\nDESCRIPTION: This command starts the Selenium Grid Session Queue, which queues new session requests for the Distributor to retrieve. It specifies the port for the Session Queue.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.ja.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar sessionqueue --port 5559\n```\n\n----------------------------------------\n\nTITLE: Disabling EdgeDriver Build Check in Python\nDESCRIPTION: This Python snippet demonstrates how to disable the build check for EdgeDriver. Note that this is an unsupported feature.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.en.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndriver = Edge(capabilities=caps, service_args=['--disable-build-check'])\n```\n\n----------------------------------------\n\nTITLE: Disown handles in realm (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to disown handles within a realm using Selenium BiDi and the `script.disown` command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n    await session.execute({\n      method: 'script.disown',\n      params: { target: { realm: realm.result.realm }, handles: [] },\n    });\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Exception Handler using WebDriver BiDi in Ruby\nDESCRIPTION: This Ruby snippet shows how to add a handler for JavaScript exceptions. It uses the `add_exception_listener` method to begin capturing JavaScript exceptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.zh-cn.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nhandler = bidi.script.add_exception_listener { |params| puts params }\n```\n\n----------------------------------------\n\nTITLE: Setting IE Driver Log Level - Ruby\nDESCRIPTION: This Ruby snippet demonstrates setting the log level for the Internet Explorer driver service. It configures the service with the `:verbose` log level for capturing detailed debugging information.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_35\n\nLANGUAGE: Ruby\nCODE:\n```\nservice = Selenium::WebDriver::Service.internet_explorer(log_level: :verbose)\ndriver = Selenium::WebDriver.for :internet_explorer, service: service\n```\n\n----------------------------------------\n\nTITLE: Delete Session on Node\nDESCRIPTION: This snippet deletes a session directly on a node, terminating the WebDriver session. Requires the registration secret.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.zh-cn.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://localhost:5555/se/grid/node/session/<session-id>' --header 'X-REGISTRATION-SECRET: <secret>'\n```\n\n----------------------------------------\n\nTITLE: Creating Sessions Table in PostgreSQL\nDESCRIPTION: This SQL script creates the 'sessions_map' table in a PostgreSQL database to store session information for Selenium Grid. It defines the schema with columns for session IDs, capabilities, URIs, stereotypes, and start times. This table is used by the JdbcBackedSessionMap implementation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.en.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE IF NOT EXISTS sessions_map(\n    session_ids varchar(256),\n    session_caps text,\n    session_uri varchar(256),\n    session_stereotype text,\n    session_start varchar(256)\n );\n```\n\n----------------------------------------\n\nTITLE: Initializing Chrome Driver with Options in Ruby\nDESCRIPTION: This Ruby snippet illustrates how to initialize a Chrome driver with specific options. It sets the browser to run in headless mode for automated testing, and it uses RSpec for assertions and setup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/_index.pt-br.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n# frozen_string_literal: true\n\nrequire 'selenium-webdriver'\nrequire 'rspec'\n\ndescribe 'Driver Options' do\n  it 'basic chrome options' do\n    options = Selenium::WebDriver::Chrome::Options.new\n    options.add_argument('--headless=new')\n    driver = Selenium::WebDriver.for :chrome, options: options\n    driver.get 'https://www.google.com'\n    expect(driver.title).to include('Google')\n  ensure\n    driver.quit\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level - Python\nDESCRIPTION: Demonstrates how to configure the GeckoDriver service to set the log level in Python. This allows controlling the verbosity of the logs. Requires the Selenium library.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nservice = FirefoxService(log_level=\"debug\")\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC session map in TOML\nDESCRIPTION: This TOML file configures the JDBC-backed session map for Selenium Grid.  It specifies the implementation class, JDBC URL, username, and password to connect to a PostgreSQL database. It requires the `selenium-session-map-jdbc` and `postgresql` dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.ja.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[sessions]\nimplementation = \"org.openqa.selenium.grid.sessionmap.jdbc.JdbcBackedSessionMap\"\njdbc-url = \"jdbc:postgresql://localhost:5432/selenium_sessions\"\njdbc-user = \"seluser\"\njdbc-password = \"seluser\"\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions to Chrome Options\nDESCRIPTION: This code snippet demonstrates how to add Chrome extensions to the browser options. The `add_extension` method takes the path to a `.crx` file as input. For unpacked directories, the `load-extension` argument should be used instead, as described in the linked ChromeDriver documentation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\noptions.addExtensions('/path/to/extension.crx');\nlet service = new chrome.ServiceBuilder(pathToChromeDriver).build();\nlet driver = await new Builder()\n  .setChromeOptions(options)\n```\n\n----------------------------------------\n\nTITLE: Call Function in Browsing Context - JavaScript\nDESCRIPTION: This snippet illustrates how to call a function within a browsing context using JavaScript and the WebDriver BiDi API. It employs the `script.callFunction` method to execute a JavaScript function in the specified context and verify the outcome. It requires a BiDi connection and a browsing context ID.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('call function in browsing context', async () => {\n  const browsingContext = await driver.browsingContext.create({ type: 'tab' });\n  const contextId = browsingContext.context;\n  await driver.browsingContext.navigate(\n    { context: contextId, url: 'http://localhost:4444/blank.html' },\n    { wait: 'complete' }\n  );\n  let result = await connection.script.callFunction({\n    functionDeclaration: '() => { return window.document.title }',\n    target: { context: contextId },\n    this: { owning: true },\n  });\n\n  expect(result.result.value).toBe('');\n\n  result = await connection.script.callFunction({\n    functionDeclaration: '(arg) => { return arg }',\n    target: { context: contextId },\n    arguments: [\n      {\n        type: 'string',\n        value: 'arg1',\n      },\n    ],\n    this: { owning: true },\n  });\n\n  expect(result.result.value).toBe('arg1');\n});\n```\n\n----------------------------------------\n\nTITLE: Minimize Window - Selenium WebDriver - Python\nDESCRIPTION: This snippet minimizes the browser window using the Selenium WebDriver API in Python. Requires Selenium WebDriver package and Selenium 4 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.zh-cn.md#_snippet_42\n\nLANGUAGE: Python\nCODE:\n```\ndriver.minimize_window()\n```\n\n----------------------------------------\n\nTITLE: Docker Compose for PostgreSQL\nDESCRIPTION: This docker-compose.yml file defines a PostgreSQL service to be used as the external datastore for Selenium Grid session management. It sets up the database image, environment variables for user credentials and database name, port mapping and includes a volume to initialize the database using the init.sql script.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.zh-cn.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3.8'\nservices:\n  db:\n    image: postgres:9.6-bullseye\n    restart: always\n    environment:\n      - POSTGRES_USER=seluser\n      - POSTGRES_PASSWORD=seluser\n      - POSTGRES_DB=selenium_sessions\n    ports:\n      - \"5432:5432\"\n    volumes:\n    - ./init.sql:/docker-entrypoint-initdb.d/init.sql\n```\n\n----------------------------------------\n\nTITLE: Get Node Configuration Help\nDESCRIPTION: This command displays component-specific configuration information for the Node role. It utilizes the `--help` option after specifying the node role.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.en.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --help\n```\n\n----------------------------------------\n\nTITLE: Deleting Downloaded Files in Java\nDESCRIPTION: Deletes downloaded files for a RemoteWebDriver session in Java, removing all files from the designated download directory. This allows for cleanup of downloaded files during a session. Requires a RemoteWebDriver instance with the 'HasDownloads' interface.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\n((HasDownloads) driver).deleteDownloadedFiles();\n```\n\n----------------------------------------\n\nTITLE: Installing libdbus-glib-1-2 on Linux\nDESCRIPTION: This command is used to install the `libdbus-glib-1-2` library on Linux using the `apt-get` package manager. This library is required by Firefox in some Linux environments. It resolves the \"libdbus-glib-1.so.2: cannot open shared object file\" error.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.pt-br.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libdbus-glib-1-2\n```\n\n----------------------------------------\n\nTITLE: Setting SE_MANAGER_PATH Environment Variable\nDESCRIPTION: This command sets the `SE_MANAGER_PATH` environment variable to the location of the built Selenium Manager binary. This allows Selenium to use the custom-built Selenium Manager instead of the default one.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.ja.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nSE_MANAGER_PATH=~/selenium/rust/target/release/selenium-manager\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Server with Command-Line Flags\nDESCRIPTION: This snippet demonstrates the general syntax for running the Selenium Server with command-line flags. It shows how to specify the component and pass options with their corresponding values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.zh-cn.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -jar selenium-server-<version>.jar <component> --<option> value\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Name and Email\nDESCRIPTION: These commands configure your Git user name and email address globally, ensuring proper attribution of your commits.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.en.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n% git config --global user.name 'Santa Claus'\n% git config --global user.email 'santa@example.com'\n```\n\n----------------------------------------\n\nTITLE: AsyncHttpClient Single Instance in NettyClient (Java)\nDESCRIPTION: This Java code snippet shows how a single instance of AsyncHttpClient is created and used within the NettyClient class in Selenium. This pattern was attempted to mitigate memory leak issues by ensuring a single client instance is reused. This approach aims to reduce resource consumption, specifically the number of HTTP client instances.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2021/public-project-meeting-20210225.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate static final AsyncHttpClient httpClient =\n<https://github.com/SeleniumHQ/selenium|SeleniumHQ/selenium>SeleniumHQ/selenium\n```\n\n----------------------------------------\n\nTITLE: Creating a New Feature Branch using Git\nDESCRIPTION: This command creates a new feature branch in your local Git repository, allowing you to isolate your changes from the main development branch.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.en.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n% git checkout -b my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Move by Offset from Element with Selenium\nDESCRIPTION: This snippet demonstrates how to move the mouse by a specified offset from the center of an element using Selenium. The initial mouse position is the center of the element. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_47\n\nLANGUAGE: Kotlin\nCODE:\n```\nActions actions = Actions(driver)\nval element: WebElement = driver.findElement(By.id(\"my-element\"))\nactions.moveToElement(element, 10, 20)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Check Session Ownership (No Secret)\nDESCRIPTION: Verifies if a particular session belongs to a specific Selenium Grid node when no registration secret has been configured. Returns 'true' if the session is owned by the node, otherwise 'false'. Requires node URL and session ID.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://<node-URL>/se/grid/node/owner/<session-id>' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Using WebDriver with RC APIs in Selenium (Python)\nDESCRIPTION: This code snippet demonstrates how to use WebDriver with Selenium's RC (Remote Control) APIs in Python. It initializes a `RemoteWebDriver` instance and then uses it to start a `DefaultSelenium` instance. This allows for a gradual migration from RC to WebDriver APIs without rewriting all tests at once. Key parameters are the host, port, browser name (set to '*webdriver'), and base URL for the Selenium RC server. The `driver` parameter in the `start()` method passes the WebDriver instance to the Selenium RC.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/announcing-selenium-2-19-the-prancing-unicorn-release.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndriver = RemoteWebDriver(desired_capabilities = DesiredCapabilities.FIREFOX)\nselenium = DefaultSelenium('localhost', 4444', '*webdriver', 'http://www.google.com')\nselenium.start(driver = driver)\n```\n\n----------------------------------------\n\nTITLE: Initializing Internet Explorer with Edge Attachment Option\nDESCRIPTION: This code demonstrates how to start Internet Explorer by attaching to Edge if IE is not present on the system, simplifying the configuration. It shows how to set only the `attachToEdgeChrome` option when IE is absent.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\nvar options = new InternetExplorerOptions();\noptions.AttachToEdgeChrome = true;\n```\n\n----------------------------------------\n\nTITLE: Edge Installation Warning on Windows\nDESCRIPTION: This code snippet is a warning message displayed by Selenium Manager when attempting to install Edge on Windows without administrator permissions. It indicates that Edge can only be installed with administrator privileges due to the MSI installer requirements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.ja.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nedge can only be installed in Windows with administrator permissions\n```\n\n----------------------------------------\n\nTITLE: Verifying Unicorn Existence - Kotlin\nDESCRIPTION: This Kotlin code snippet verifies that a unicorn object named 'Sparkles' exists on the unicorn confirmation page, ensuring all attributes are intact. It depends on a 'unicornConfirmationPage' object and the 'assertTrue' assertion from JUnit or similar. The 'exists' method on the page object is used to compare the attributes of the 'sparkles' object with the fields on the page. Asserts that the unicorn exists.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nassertTrue(\"Sparkles should have been created, with all attributes intact\", unicornConfirmationPage.exists(sparkles))\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Colors in Java\nDESCRIPTION: This code shows how to define Color objects from basic color names like 'black', 'chocolate', and 'hotpink' using the Color.fromString() method in Java. This is useful for comparing against predefined color values in web elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nprivate final Color BLACK = Color.fromString(\"black\");\nprivate final Color CHOCOLATE = Color.fromString(\"chocolate\");\nprivate final Color HOTPINK = Color.fromString(\"hotpink\");\n```\n\n----------------------------------------\n\nTITLE: Verify Driver Installation (Bash/Zsh)\nDESCRIPTION: This snippet checks the version of the chromedriver to verify that it has been correctly added to the PATH environment variable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.ja.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nchromedriver --version\n```\n\n----------------------------------------\n\nTITLE: Creating a Pen Input Source CSharp\nDESCRIPTION: This code snippet demonstrates how to create a Pen input source in C# and use it to interact with a web element. It involves defining a Pen, moving it to a specific element, and then performing a down and up action, simulating a tap or click.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.pt-br.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nPen pen = new Pen(driver, \"pen1\");\nIWebElement element = driver.FindElement(By.Id(\"my-element\"));\n\nnew Actions(driver)\n    .Tick(pen.MoveTo(element))\n    .Tick(pen.Down(MouseButton.Left))\n    .Tick(pen.Up(MouseButton.Left))\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Get Sessionqueue Component Help\nDESCRIPTION: This command displays configuration options specific to the 'sessionqueue' component of Selenium Grid. It uses the '--help' flag with the 'sessionqueue' argument.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.zh-cn.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar sessionqueue --help\n```\n\n----------------------------------------\n\nTITLE: Cloning the SeleniumHQ Repository\nDESCRIPTION: Clones the SeleniumHQ/seleniumhq.github.io Git repository to the local machine. This repository contains Selenium Java examples.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/java/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/SeleniumHQ/seleniumhq.github.io.git\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Repository (Shell)\nDESCRIPTION: This snippet demonstrates how to push your local feature branch to your remote repository on GitHub.  This makes your changes available for review and merging. The `git push` command sends your changes to the specified remote and branch.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.ja.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n% git push origin my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Setting strictFileInteractability in Ruby\nDESCRIPTION: This code snippet sets the `strictFileInteractability` capability in Ruby. This capability determines if strict interaction checks should be applied to input type=file elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_48\n\nLANGUAGE: Ruby\nCODE:\n```\nSelenium::WebDriver::Options.new(args: ['--strictFileInteractability=true'])\n```\n\n----------------------------------------\n\nTITLE: Check Element Selected Selenium Ruby\nDESCRIPTION: This Ruby code snippet uses Selenium WebDriver to navigate to a webpage, locate a checkbox element, and assert that the checkbox is selected.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.get 'https://www.selenium.dev/selenium/web/inputs.html'\ncheckbox_input = driver.find_element(name: 'checkbox_input')\nexpect(checkbox_input.selected?).to be true\n```\n\n----------------------------------------\n\nTITLE: Output logs with PyTest\nDESCRIPTION: This snippet shows how to always output logs with PyTest.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlogging.basicConfig(level=logging.WARN)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Unicorn (Java)\nDESCRIPTION: This snippet demonstrates how to configure a unicorn with specific attributes using a Unicorn object and Page Object Model. It assumes the existence of Unicorn, UnicornColors, UnicornAccessories, UnicornAdornments, AddUnicornPage, and UnicornConfirmationPage classes. It creates a Unicorn object with specified attributes and then uses the addUnicorn and createUnicorn methods to fill out a form and submit it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n// The Unicorn is a top-level Object--it has attributes, which are set here.\n// This only stores the values; it does not fill out any web forms or interact\n// with the browser in any way.\nUnicorn sparkles = new Unicorn(\"Sparkles\", UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS);\n\n// Since we're already \"on\" the account page, we have to use it to get to the\n// actual place where you configure unicorns. Calling the \"Add Unicorn\" method\n// takes us there.\nAddUnicornPage addUnicornPage = accountPage.addUnicorn();\n\n// Now that we're on the AddUnicornPage, we will pass the \"sparkles\" object to\n// its createUnicorn() method. This method will take Sparkles' attributes,\n// fill out the form, and click submit.\nUnicornConfirmationPage unicornConfirmationPage = addUnicornPage.createUnicorn(sparkles);\n```\n\n----------------------------------------\n\nTITLE: Defining Transparent Color in Ruby\nDESCRIPTION: This snippet shows how to define the 'transparent' color using the Color.from_string() method in Ruby. Browsers may return 'transparent' as the color value for elements without a defined color, and this allows you to handle that case.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\nTRANSPARENT = Color.from_string('transparent')\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Get maxSession\nDESCRIPTION: This command uses curl to post a GraphQL query and fetch the maximum number of sessions (`maxSession`) that the grid can handle from the `grid` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.zh-cn.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ grid { maxSession } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Check Element Enabled Selenium Ruby\nDESCRIPTION: This Ruby code snippet uses Selenium WebDriver to navigate to a webpage, locate a button element, and assert that the button is not enabled.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.get 'https://www.selenium.dev/selenium/web/inputs.html'\nbutton_input = driver.find_element(name: 'button_input')\nexpect(button_input.enabled?).to be false\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver in Java\nDESCRIPTION: This Java snippet shows how to initialize a ChromeDriver instance. It is a basic example demonstrating how to start using Selenium with Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.pt-br.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n```\n\n----------------------------------------\n\nTITLE: Disown handles in browsing context - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to disown handles in the specified browsing context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('disown handles in browsing context', async () => {\n    const browsingContext = await new BrowsingContext(driver, tabId);\n\n    await browsingContext.script.disown({\n      handles: ['1:1'],\n      target: {context: browsingContext.context},\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Python Selenium Manager Usage (Previously)\nDESCRIPTION: This Python code snippet shows the traditional way of setting up ChromeDriver without Selenium Manager, similar to the Java example, where the driver path is set manually.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.ja.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom selenium import webdriver\n\nos.environ['PATH'] += os.pathsep + '/path/to/chromedriver'\ndriver = webdriver.Chrome()\ndriver.get(\"https://www.selenium.dev/\")\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Resident Credential in Java\nDESCRIPTION: This snippet creates a non-resident credential with user-defined parameters in Java.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_16\n\nLANGUAGE: java\nCODE:\n```\ndevTools.getDomains().webAuthn().addCredential(\n    new PublicKeyCredentialParams(\"user2\", \"User 2\", \"User Two\"));\n\n```\n\n----------------------------------------\n\nTITLE: Script Pinning C#\nDESCRIPTION: This C# snippet demonstrates how to perform script pinning using Chrome DevTools Protocol (CDP) in Selenium.  It uses the `Pin` and `Unpin` methods. This functionality will be replaced by WebDriver BiDi in future versions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/script.pt-br.md#_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nstring scriptId = cdp.Script.Pin(script: \"script-to-debug\");\ncdp.Script.Unpin(scriptId);\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies - Python\nDESCRIPTION: This code snippet demonstrates how to retrieve all cookies using Selenium WebDriver in Python. It adds two cookies and then retrieves all of them using the `get_cookies` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndriver.get(\"https://www.example.com\")\ncookie1 = { 'name' : 'test1', 'value' : 'cookie1' }\ncookie2 = { 'name' : 'test2', 'value' : 'cookie2' }\ndriver.add_cookie(cookie1)\ndriver.add_cookie(cookie2)\n\nall_cookies = driver.get_cookies()\nprint(all_cookies)\n```\n\n----------------------------------------\n\nTITLE: Enabling BiDi in Python Selenium\nDESCRIPTION: This snippet demonstrates how to enable the BiDi (BiDirectional) API in Python when using Selenium.  It shows how to set the `enable_bidi()` property of an Options class instance to `True` to activate BiDi communication.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2024/selenium-4-22-released.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Enabling BiDi in Python\noptions.enable_bidi = True\n```\n\n----------------------------------------\n\nTITLE: Quitting WebDriver Session in Selenium\nDESCRIPTION: This snippet ends the WebDriver session, closing the browser instance and releasing associated resources.  It is essential to call this method at the end of a test to avoid resource leaks. Dependencies: Initialized WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Ruby Assertion Example\nDESCRIPTION: This snippet demonstrates how to make an assertion in Ruby using RSpec to ensure that the title of a webpage matches the expected title.  Requires RSpec testing framework.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nit 'has correct title' do\n  expect(@driver.title).to eq('SeleniumHQ Browser Automation')\nend\n```\n\n----------------------------------------\n\nTITLE: Finding Elements (Before) - Java\nDESCRIPTION: This Java snippet illustrates the old way of finding multiple elements using `findElementsBy*` methods in Selenium 3.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\ndriver.findElementsByClassName(\"className\");\ndriver.findElementsByCssSelector(\".className\");\ndriver.findElementsById(\"elementId\");\ndriver.findElementsByLinkText(\"linkText\");\ndriver.findElementsByName(\"elementName\");\ndriver.findElementsByPartialLinkText(\"partialText\");\ndriver.findElementsByTagName(\"elementTagName\");\ndriver.findElementsByXPath(\"xPath\");\n```\n\n----------------------------------------\n\nTITLE: Firefox Legacy deprecation in Java\nDESCRIPTION: This code snippet demonstrates the deprecation of `setLegacy` option in FirefoxOptions, advising to rely only on GeckoDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxOptions options = new FirefoxOptions();\noptions.setLegacy(true);\n```\n\n----------------------------------------\n\nTITLE: Capturing JavaScript Exceptions in Python\nDESCRIPTION: This Python snippet demonstrates how to capture Javascript Exceptions using Chrome DevTools Protocol (CDP) with Selenium. It requires the Selenium library and a configured ChromeDriver instance. The code sets up a listener for javascript exceptions and prints the error messages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/logging.en.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef test_js_exceptions(driver):\n    driver.get(\"https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html\")\n```\n\n----------------------------------------\n\nTITLE: Clear New Session Queue (No Secret)\nDESCRIPTION: Clears the new session queue in the Selenium Grid, rejecting all pending session requests, when no registration secret has been configured. The server returns an error response to each client whose request was rejected. The result of the command is the total number of requests deleted. Requires queue URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://<Router-URL>/se/grid/newsessionqueue/queue' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Ignoring Protected Mode Settings (Python)\nDESCRIPTION: This code snippet shows how to skip the Protected Mode check while launching a new IE session using Python. It sets the `ignore_protected_mode_settings` option to `True`. Note that this may cause instability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.ie.options import Options\n\nie_options = Options()\nie_options.ignore_protected_mode_settings = True\ndriver = webdriver.Ie(options=ie_options)\n```\n\n----------------------------------------\n\nTITLE: Setting Page Scale using PrintOptions in C#\nDESCRIPTION: This code snippet shows how to set the page scale using the PrintOptions class in C#. The `Scale` property is set to the desired scale. The `Scale` property is retrieved and confirmed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.en.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.Scale = 0.5;\n\nAssert.AreEqual(0.5, printOptions.Scale);\n```\n\n----------------------------------------\n\nTITLE: Adding Selenium to Gemfile\nDESCRIPTION: Adds the Selenium WebDriver gem to a Ruby project's `Gemfile`. This ensures that Selenium is installed when using Bundler to manage dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.zh-cn.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'selenium-webdriver'\n```\n\n----------------------------------------\n\nTITLE: Get Security Configuration Details for Selenium Grid\nDESCRIPTION: This command displays detailed information on setting up the Selenium Grid servers for secure communication and node registration. It uses the `info security` arguments.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.en.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar info security\n```\n\n----------------------------------------\n\nTITLE: Get Element Tag Name Selenium Kotlin\nDESCRIPTION: This Kotlin code snippet uses Selenium WebDriver to navigate to a URL and retrieve the tag name of the email input element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\n//navigates to url\ndriver.get(\"https://www.selenium.dev/selenium/web/inputs.html\")\n\n//returns TagName of the element\nval attr =  driver.findElement(By.name(\"email_input\")).getTagName()\n```\n\n----------------------------------------\n\nTITLE: Set Page Orientation CSharp\nDESCRIPTION: This code snippet demonstrates how to set the page orientation (portrait or landscape) using the PrintOptions class in C# with Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.Orientation = PrintOrientation.Landscape;\n\nvar print = (IPrintsPage)driver;\nstring base64Pdf = print.Print(printOptions);\n```\n\n----------------------------------------\n\nTITLE: Release All Actions - JavaScript\nDESCRIPTION: This JavaScript snippet releases all currently depressed keys and pointer buttons by calling the releaseActions() method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.ja.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.releaseActions();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Named Cookie - Java\nDESCRIPTION: This code snippet demonstrates how to delete a cookie by its name using Selenium WebDriver in Java. It adds a cookie and then deletes it using `driver.manage().deleteCookieNamed()`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.pt-br.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\ndriver.get(\"https://www.example.com\");\nCookie cookie = new Cookie(\"test1\", \"cookie1\");\ndriver.manage().addCookie(cookie);\ndriver.manage().deleteCookieNamed(\"test1\");\n```\n\n----------------------------------------\n\nTITLE: Get Realm By Type - JavaScript\nDESCRIPTION: This snippet retrieves a realm by its type using JavaScript and the WebDriver BiDi API. It leverages the `script.getRealms` method, specifying the realm type, to fetch the realm. Requires a realm type such as 'window'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('get realm by type', async () => {\n  let realms = await connection.script.getRealms({ type: 'window' });\n  expect(realms.realms.length).toBeGreaterThan(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Locating Element to the Right - CSharp\nDESCRIPTION: Locates a button element to the right of the element with ID 'cancel' in C#. Uses `RelativeBy.WithLocator` and `RightOf` to achieve this.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_54\n\nLANGUAGE: CSharp\nCODE:\n```\nvar submitLocator = RelativeBy.WithLocator(By.tagName(\"button\")).RightOf(By.Id(\"cancel\"));\n```\n\n----------------------------------------\n\nTITLE: Setting acceptInsecureCerts Capability in Ruby\nDESCRIPTION: This code snippet demonstrates how to set the `acceptInsecureCerts` capability to true in Ruby.  This will configure the browser to accept insecure certificates for the entire session. The capability is set using `args`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_29\n\nLANGUAGE: Ruby\nCODE:\n```\nSelenium::WebDriver::Options.new(args: ['--acceptInsecureCerts=true'])\n```\n\n----------------------------------------\n\nTITLE: Navigate to Python Directory\nDESCRIPTION: This command navigates the user to the 'python' examples directory within the cloned 'seleniumhq.github.io' repository. It changes the current working directory in the terminal.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/python/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncd seleniumhq.github.io/examples/python\n```\n\n----------------------------------------\n\nTITLE: Set Logger Level in Ruby\nDESCRIPTION: This snippet demonstrates how to set the logging level in Ruby using the `level=` method on the logger object. This controls the detail of logs that will be outputted.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.ja.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nSelenium::WebDriver.logger.level = :debug\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Session Details by ID\nDESCRIPTION: This curl command retrieves details for a specific session based on its ID, including capabilities, start time, node URI, session duration and slot information.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.pt-br.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ session (id: \\\"<session-id>\\\") { id, capabilities, startTime, uri, nodeId, nodeUri, sessionDurationMillis, slot { id, stereotype, lastStarted } } } \"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Adding Console Message Handler with WebDriver BiDi in Ruby\nDESCRIPTION: This code snippet shows how to add a handler for console messages using WebDriver BiDi in Ruby.  It uses the `add_event_listener` method to listen for 'script.message' events and prints the received messages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.ja.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.bidi.script.add_event_listener(\n  event: 'script.message',\n  callback: lambda { |params, context| puts \"console.log: #{params}\" }\n)\n```\n\n----------------------------------------\n\nTITLE: Setting SE_MANAGER_PATH Environment Variable\nDESCRIPTION: This command sets the `SE_MANAGER_PATH` environment variable to the location of the built Selenium Manager executable. This tells Selenium to use the custom-built Selenium Manager instead of the default one. The tilde (~) represents the user's home directory.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.pt-br.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nSE_MANAGER_PATH=~/selenium/rust/target/release/selenium-manager\n```\n\n----------------------------------------\n\nTITLE: Ruby: Accessing CDP Version from Capabilities\nDESCRIPTION: This snippet demonstrates how Ruby bindings access the Chrome DevTools Protocol (CDP) version from the 'se:cdpVersion' capability. It extracts the major version number by splitting the string and taking the first element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2021/public-project-meeting-20210520.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\ncapabilities['se:cdpVersion'].split('.').first\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Branch (Shell)\nDESCRIPTION: This snippet shows how to create a new branch in your local Git repository. The branch is named 'my-feature-branch' and is used to isolate your changes from the main development branch.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.pt-br.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n% git checkout -b my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Defining Code Tabs HTML\nDESCRIPTION: This HTML snippet shows how to define a series of code tabs with the corresponding code using the Docsy shortcodes. It utilizes the tabpane and tab shortcodes for creating tabbed code examples in documentation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.pt-br.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n{{</* tabpane langEqualsHeader=true */>}}\n  {{</* tab header=\"Java\" */>}}\n    WebDriver driver = new ChromeDriver();\n  {{</* /tab */>}}\n  {{</* tab header=\"Python\" */>}}\n    driver = webdriver.Chrome()\n  {{</* /tab */>}}\n  {{</* tab header=\"CSharp\" */>}}\n    var driver = new ChromeDriver();\n  {{</* /tab */>}}\n  {{</* tab header=\"Ruby\" */>}}\n    driver = Selenium::WebDriver.for :chrome\n  {{</* /tab */>}}\n  {{</* tab header=\"JavaScript\" */>}}\n    let driver = await new Builder().forBrowser('chrome').build();\n  {{</* /tab */>}}\n  {{</* tab header=\"Kotlin\" */>}}\n    val driver = ChromeDriver()\n  {{</* /tab */>}}\n{{</* /tabpane */>}}\n```\n\n----------------------------------------\n\nTITLE: Importing Color Class - Selenium WebDriver\nDESCRIPTION: This snippet demonstrates how to import the Color class in various programming languages to use it within Selenium WebDriver tests.  This is a necessary first step to utilize the Color class's functionalities.  The package/module location varies depending on the language.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.en.md#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.support.Color\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium in Kotlin\nDESCRIPTION: This snippet demonstrates how to start a Selenium WebDriver session in Kotlin, navigate to a webpage, and close the browser. It requires the Selenium WebDriver dependency to be configured in the project.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.en.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.WebDriver\nimport org.openqa.selenium.chrome.ChromeDriver\n\nfun main() {\n    val driver: WebDriver = ChromeDriver()\n\n    driver.get(\"https://www.selenium.dev/selenium/web/index.html\")\n\n    driver.quit()\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected assertAttribute Example in Selenium IDE\nDESCRIPTION: This snippet shows the corrected version of the assertAttribute command for verifying a boolean attribute. It now checks if the attribute's value is 'true' instead of its literal name. This addresses the change in Selenium IDE 1.0.10 regarding boolean attribute handling.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/atoms-have-come-to-selenium-ide.md#_snippet_1\n\nLANGUAGE: selenium\nCODE:\n```\nassertAttribute | checkbox@checked | true\n```\n\n----------------------------------------\n\nTITLE: Removing JavaScript Exception Handler in Python\nDESCRIPTION: This snippet shows how to remove a previously added JavaScript exception handler in Python using WebDriver BiDi. It uses the `remove_event_listener` method with the stored listener ID.  It assumes that `add_event_listener` method was used before and returned handler_id.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.pt-br.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nhandler_id = driver.add_event_listener(\n    Script.JavascriptException, lambda msg: print(f\"Javascript exception: {msg.exception.text}\"))\ndriver.remove_event_listener(handler_id)\n```\n\n----------------------------------------\n\nTITLE: Close a tab/window in JavaScript\nDESCRIPTION: This snippet shows how to close a tab or window using WebDriver BiDi in JavaScript.  It creates a new browsing context and then closes it using the `close` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nawait browsingContext.close();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Orientation - Java\nDESCRIPTION: This Java snippet shows how to set the page orientation to landscape using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.setOrientation(PrintOptions.Orientation.LANDSCAPE);\n\nassertThat(printOptions.getOrientation()).isEqualTo(PrintOptions.Orientation.LANDSCAPE);\n```\n\n----------------------------------------\n\nTITLE: Preload script - JavaScript\nDESCRIPTION: This JavaScript code preloads a script using the provided parameters.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('preload a script', async () => {\n    const browsingContext = await new BrowsingContext(driver, tabId);\n\n    await browsingContext.script.addPreloadScript({\n      functionDeclaration: '() => {window.test = \\'test\\';}',\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Resident Credential in C#\nDESCRIPTION: This code shows how to create a resident credential using C#.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nCredential cred = new Credential()\n{\n    Id = Convert.FromBase64String(\"YS5jdWJlLg==\"),\n    Type = \"public-key\"\n};\n((IHasAuthentication)driver).AddVirtualAuthenticatorCredential(authenticator, cred);\n```\n\n----------------------------------------\n\nTITLE: Get browsing context realms (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to get the realms for a specific browsing context using Selenium BiDi and the `script.getRealms` method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n    let contextRealms = await session.execute({\n      method: 'script.getRealms',\n      params: { browsingContext: browsingContext.context },\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins in Selenium C#\nDESCRIPTION: This C# code snippet demonstrates how to set the page margins using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_10\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nPageMargin pageMargin = new PageMargin()\n{\n    Top = 1.0,\n    Bottom = 2.0,\n    Left = 3.0,\n    Right = 4.0\n};\nprintOptions.PageMargin = pageMargin;\n```\n\n----------------------------------------\n\nTITLE: Remove Network Intercept in JavaScript\nDESCRIPTION: This JavaScript snippet removes a previously added network intercept using its intercept ID. It requires Selenium WebDriver and BiDi capabilities.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.zh-cn.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait bidiSession.network.removeIntercept({\n  intercept: interceptId\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Silent Mode for Internet Explorer in Java\nDESCRIPTION: This code snippet demonstrates how to set the 'silent' capability to true for the InternetExplorerOptions in Java. Setting this capability suppresses the diagnostic output of the IEDriverServer. The option is set before creating an instance of the InternetExplorerDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.setCapability(\"silent\", true);\nWebDriver driver = new InternetExplorerDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes - C#\nDESCRIPTION: This C# snippet demonstrates how to add pointer event attributes to a Pen object in Selenium, including width, height, pressure, tiltX, and tiltY. It requires Selenium 4.2 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.en.md#_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"writable\"));\n\nPen pen = new Pen(driver, \"pen1\");\npen.Width = 20;\npen.Height = 30;\npen.Pressure = 0.8F;\npen.TiltX = 45;\npen.TiltY = -60;\n\nnew Actions(driver)\n    .MoveToElement(element, 10, 10)\n    .PointerDown(pen)\n    .MoveToElement(element, 80, 40)\n    .PointerMove(pen)\n    .PointerUp(pen)\n    .Perform();\n```\n\n----------------------------------------\n\nTITLE: Get Element CSS Value Selenium Ruby\nDESCRIPTION: This Ruby code snippet uses Selenium WebDriver to navigate to a webpage, locate a namedColor element, and retrieve the 'background-color' CSS property's value, asserting that it is 'rgba(0, 0, 0, 0)'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_33\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.get 'https://www.selenium.dev/selenium/web/colorPage.html'\nlink = driver.find_element(id: 'namedColor')\nexpect(link.css_value('background-color')).to eq('rgba(0, 0, 0, 0)')\n```\n\n----------------------------------------\n\nTITLE: Realm Created event - JavaScript\nDESCRIPTION: This JavaScript code listens for the realm created event and checks if the event is emitted.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('realm created event', async () => {\n    const browsingContext = await new BrowsingContext(driver, tabId);\n    let realmCreatedEvent;\n\n    await browsingContext.script.on('realmCreated', (event) => {\n      realmCreatedEvent = event;\n    });\n\n    await driver.executeScript('window.open()', []);\n\n    await until(() => realmCreatedEvent !== undefined, 5000, 'Realm wasn\\'t created');\n    expect(realmCreatedEvent.realm.type).toBe('window');\n  });\n```\n\n----------------------------------------\n\nTITLE: Package.json Dependency JavaScript\nDESCRIPTION: This snippet shows how to add the Selenium WebDriver dependency to the `package.json` file in a JavaScript project. It adds Selenium WebDriver as a dependency, ensuring that npm installs it when the project is set up, and records the specific version used.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.pt-br.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"selenium-webdriver\": \"^4.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting W3C Capabilities Before Upgrade - Java\nDESCRIPTION: Demonstrates setting up DesiredCapabilities in Selenium 3 using Java. It includes setting platform, version, build, and name capabilities. These capabilities are not W3C compliant and need vendor prefixes in Selenium 4.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nDesiredCapabilities caps = DesiredCapabilities.firefox();\ncaps.setCapability(\"platform\", \"Windows 10\");\ncaps.setCapability(\"version\", \"92\");\ncaps.setCapability(\"build\", myTestBuild);\ncaps.setCapability(\"name\", myTestName);\nWebDriver driver = new RemoteWebDriver(new URL(cloudUrl), caps);\n```\n\n----------------------------------------\n\nTITLE: Install-Package Selenium.WebDriver C#\nDESCRIPTION: This snippet provides the command to install Selenium.WebDriver using the Packet Manager.  It ensures that the necessary Selenium WebDriver package is added to the project.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.pt-br.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nInstall-Package Selenium.WebDriver\n```\n\n----------------------------------------\n\nTITLE: Creating and Logging in a User (Python)\nDESCRIPTION: This snippet demonstrates how to create a user with specific permissions using a user_factory and then log in as that user. It assumes the existence of a user_factory and related classes. The login_as function returns an account_page object for further interaction.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Create a user who has read-only permissions--they can configure a unicorn,\n# but they do not have payment information set up, nor do they have\n# administrative privileges. At the time the user is created, its email\n# address and password are randomly generated--you don't even need to\n# know them.\nuser = user_factory.create_common_user() #This method is defined elsewhere.\n\n# Log in as this user.\n# Logging in on this site takes you to your personal \"My Account\" page, so the\n# AccountPage object is returned by the loginAs method, allowing you to then\n# perform actions from the AccountPage.\naccount_page = login_as(user.get_email(), user.get_password())\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy with Python\nDESCRIPTION: This Python code snippet illustrates how to configure a proxy in Selenium using ChromeOptions. It sets the proxy using the `proxy` property, allowing you to route browser traffic through a specified proxy server.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_50\n\nLANGUAGE: python\nCODE:\n```\noptions.proxy = '<HOST:PORT>'\n```\n\n----------------------------------------\n\nTITLE: Rebasing Your Git Branch (Shell)\nDESCRIPTION: This snippet shows how to rebase your local Git branch with the latest changes from the remote 'trunk' branch.  This keeps your branch up to date and helps avoid merge conflicts.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.pt-br.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n% git fetch origin\n% git rebase origin/trunk\n```\n\n----------------------------------------\n\nTITLE: Tearing down WebDriver in Ruby\nDESCRIPTION: This code snippet shows a Ruby example of how to configure WebDriver using RSpec's `after` hook, ensuring resources are cleaned up after tests.  It closes the driver after each spec.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.configure do |config|\n  config.after(:each) do\n    @driver.quit\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Python Deployment Anti-Patterns\nDESCRIPTION: This resource identifies and explains common anti-patterns encountered during the deployment of Python applications. It likely covers issues such as dependency management, environment configuration, and server setup.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/a-smattering-of-selenium-88.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Verifying Unicorn Configuration in CSharp\nDESCRIPTION: This snippet verifies that the unicorn was created with the specified attributes by comparing the attributes of the Unicorn object with the fields on the confirmation page. It asserts that the unicorn was created with all attributes intact. Dependencies include the UnicornConfirmationPage and Assert classes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\n// The exists() method from UnicornConfirmationPage will take the Sparkles \n// object--a specification of the attributes you want to see, and compare\n// them with the fields on the page.\nAssert.True(unicornConfirmationPage.Exists(sparkles), \"Sparkles should have been created, with all attributes intact\");\n```\n\n----------------------------------------\n\nTITLE: User Creation and Login with Selenium (Ruby)\nDESCRIPTION: This Ruby snippet shows user creation with UserFactory.create_common_user (assumed to be defined elsewhere) and login via login_as, which returns an AccountPage object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n# Create a user who has read-only permissions--they can configure a unicorn,\n# but they do not have payment information set up, nor do they have\n# administrative privileges. At the time the user is created, its email\n# address and password are randomly generated--you don't even need to\n# know them.\nuser = UserFactory.create_common_user #This method is defined elsewhere.\n\n# Log in as this user.\n# Logging in on this site takes you to your personal \"My Account\" page, so the\n# AccountPage object is returned by the loginAs method, allowing you to then\n# perform actions from the AccountPage.\naccount_page = login_as(user.email, user.password)\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Deploy Configuration (YAML)\nDESCRIPTION: This snippet shows the configuration for deploying to GitHub Pages using a GitHub Actions workflow. It utilizes the `peaceiris/actions-gh-pages@v3` action for deployment.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/meetings/2020/public-project-meeting-20201119.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nuses: peaceiris/actions-gh-pages@v3\n```\n\n----------------------------------------\n\nTITLE: Setting Console Output for IE Driver Logs in Java\nDESCRIPTION: This Java code snippet demonstrates how to configure the InternetExplorerDriverService to output logs to the console (STDOUT). It creates a new InternetExplorerDriverService.Builder, sets the log output to the system's standard output stream, and then builds the service. An InternetExplorerDriver instance is then created using the configured service.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.en.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.ie.InternetExplorerDriver;\nimport org.openqa.selenium.ie.InternetExplorerDriverService;\n\nimport java.io.IOException;\n\npublic class InternetExplorerTest {\n    public static void main(String[] args) throws IOException {\n        InternetExplorerDriverService service = new InternetExplorerDriverService.Builder()\n                .withLogOutput(System.out)\n                .build();\n        InternetExplorerDriver driver = new InternetExplorerDriver(service);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element with Offset - Selenium Wheel Kotlin\nDESCRIPTION: This snippet demonstrates how to scroll from a specific element with an offset using Selenium's Wheel actions in Kotlin. The origin of the scroll will be determined by adding the offset to the coordinates of the center of the element, and then page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nval element = driver.findElement(By.id(\"target\"))\nActions(driver)\n  .scroll(element, 10, 10, 0, 0)\n  .perform()\n```\n\n----------------------------------------\n\nTITLE: Cloning SeleniumHQ GitHub Repository (Shell)\nDESCRIPTION: This snippet demonstrates how to clone the SeleniumHQ website and documentation repository from GitHub and navigate into the project directory. It uses the `git clone` command to download the repository and the `cd` command to change the current directory to the cloned repository.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.ja.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n% git clone git@github.com:seleniumhq/seleniumhq.github.io.git\n% cd seleniumhq.github.io\n```\n\n----------------------------------------\n\nTITLE: WebDriverWait Before Selenium 4 (Java)\nDESCRIPTION: This snippet shows how to use WebDriverWait before Selenium 4, specifying the timeout in seconds as a `long` value.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\nnew WebDriverWait(driver, 3)\n.until(ExpectedConditions.elementToBeClickable(By.cssSelector(\"#id\")));\n\nWait<WebDriver> wait = new FluentWait<WebDriver>(driver)\n  .withTimeout(30, TimeUnit.SECONDS)\n  .pollingEvery(5, TimeUnit.SECONDS)\n  .ignoring(NoSuchElementException.class);\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs in Java\nDESCRIPTION: This Java code snippet shows how to manage logging levels on a per-class basis by setting the desired logging level for specific class loggers.  It utilizes the `Logger.getLogger()` method with the class name. The standard Java logging library is used.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nLogger logger = Logger.getLogger(LoggingTest.class.getName());\nlogger.setLevel(Level.FINE);\n```\n\n----------------------------------------\n\nTITLE: List Downloaded Files JSON Response\nDESCRIPTION: Example JSON response when listing downloaded files for a session.  The `names` array contains the filenames of downloaded files.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.zh-cn.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": {\n    \"names\": [\n      \"Red-blue-green-channel.jpg\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Session\nDESCRIPTION: Deletes a WebDriver session from the Grid. It terminates the session and removes it from the active session map.  Attempting to use the deleted session ID will result in an error.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.ja.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://localhost:4444/session/<session-id>'\n```\n\n----------------------------------------\n\nTITLE: Creating Resident Credential in JavaScript\nDESCRIPTION: Creates a resident (stateful) credential with required parameters using Javascript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst cred = {\n  id: Buffer.from('YS5jdWJlLg==', 'base64'),\n  type: 'public-key',\n  // Other credential properties can be set here\n};\n\nawait driver.addVirtualAuthenticatorCredential(authenticator, cred);\n```\n\n----------------------------------------\n\nTITLE: Get browsing context tree with depth in Java\nDESCRIPTION: This snippet demonstrates retrieving a browsing context tree with a specific depth using WebDriver BiDi in Java. It fetches all descendant browsing contexts up to the specified depth from the parent, including the parent itself. Requires Selenium 4.8 or later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nBrowsingContext browsingContext = new BrowsingContext(driver, null);\nString id = browsingContext.getId();\n\nList<BrowsingContextInfo> contextInfoList = browsingContext.getTree(1);\n\nassertThat(contextInfoList.stream().map(BrowsingContextInfo::getId))\n  .toIterable()\n  .contains(id);\n```\n\n----------------------------------------\n\nTITLE: Removing Console Message Handler in Ruby\nDESCRIPTION: This snippet demonstrates how to remove a previously added console message handler in Ruby using WebDriver BiDi. The stored listener id is used to remove the event listener using `remove_event_listener`. It assumes that `add_event_listener` method was used before and returned handler_id.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/logging.pt-br.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nlistener = driver.add_event_listener('log.entry_added') do |params, context|\n  pp params\nend\ndriver.remove_event_listener(listener)\n```\n\n----------------------------------------\n\nTITLE: Add Selenium WebDriver to Gemfile - Ruby\nDESCRIPTION: This shell command demonstrates how to add the Selenium WebDriver gem to your Gemfile in Ruby. It specifies a version constraint.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ngem 'selenium-webdriver', '~> 4.4.0'\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Code - JavaScript\nDESCRIPTION: This HTML snippet demonstrates how to include a specific code block from a JavaScript file in the Selenium GitHub repository within a tab. The `gh-codeblock` shortcode is used to link directly to the code in the repository.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.pt-br.md#_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n{{</* gh-codeblock path=\"examples/javascript/test/getting_started/firstScript.spec.js#L22-L23\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Colors in Python\nDESCRIPTION: This code shows how to define Color objects from basic color names like 'black', 'chocolate', and 'hotpink' using the Color.from_string() method in Python. This is useful for comparing against predefined color values in web elements.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nBLACK = Color.from_string('black')\nCHOCOLATE = Color.from_string('chocolate')\nHOTPINK = Color.from_string('hotpink')\n```\n\n----------------------------------------\n\nTITLE: Back Button Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to simulate a click on the back button of a mouse (button X1) using Selenium. It involves pressing and releasing mouse button 3 on the target element. Requires Selenium WebDriver and version 4.2 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_20\n\nLANGUAGE: CSharp\nCODE:\n```\nIWebElement element = driver.FindElement(By.Id(\"my-element\"));\nActions actions = new Actions(driver);\nactions.MoveToElement(element).Click(MouseButton.BackButton).Perform();\n```\n\n----------------------------------------\n\nTITLE: Checking ChromeDriver Version in Bash\nDESCRIPTION: This snippet checks the version of the ChromeDriver executable using the `--version` flag. It verifies that the driver is correctly installed and accessible from the command line after being added to the PATH environment variable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.zh-cn.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nchromedriver --version\n```\n\n----------------------------------------\n\nTITLE: Get Selenium Grid Security Information\nDESCRIPTION: This command retrieves information related to security configurations for the Selenium Grid server, including secure communication and node registration. It uses the 'info security' command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.zh-cn.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar info security\n```\n\n----------------------------------------\n\nTITLE: Setting acceptInsecureCerts - Ruby\nDESCRIPTION: This Ruby snippet demonstrates setting the acceptInsecureCerts capability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_30\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'can accept insecure certs' do\n  expect { options.accept_insecure_certs = true }.to_not raise_error\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Page Scale - C#\nDESCRIPTION: This C# snippet demonstrates setting the page scale to 0.5 using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.ja.md#_snippet_13\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.Scale = 0.5;\n\nAssert.That(printOptions.Scale, Is.EqualTo(0.5));\n```\n\n----------------------------------------\n\nTITLE: Importing Color Class\nDESCRIPTION: This snippet shows how to import the Color class in different programming languages to utilize it for color manipulation in Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\ninclude Selenium::WebDriver::Support\n```\n\n----------------------------------------\n\nTITLE: Adding Selenium to package.json\nDESCRIPTION: Adds Selenium WebDriver as a dependency in a Node.js project's `package.json` file.  This ensures that Selenium is listed as a required dependency for the project.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.zh-cn.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n  \"dependencies\": {\n    \"selenium-webdriver\": \"^4.0.0\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Getting Page Title\nDESCRIPTION: This snippet demonstrates how to retrieve the title of the currently loaded web page using Selenium. The `title` property returns a string containing the page title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nval title = driver.title\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Inventory Item Component\nDESCRIPTION: This HTML snippet represents a single inventory item within the products page. It includes the item's name, price, and an \"Add to cart\" button, demonstrating the structure of a reusable component.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/encouraged/page_object_models.en.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Inventory Item -->\n<div class=\"inventory_item\">\n    <div class=\"inventory_item_name\">Backpack</div>\n    <div class=\"pricebar\">\n        <div class=\"inventory_item_price\">$29.99</div>\n        <button id=\"add-to-cart-backpack\">Add to cart</button>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Starting Multiple Selenium Grid Nodes on the Same Machine (Shell)\nDESCRIPTION: These commands start two Selenium Grid Nodes on the same machine, each using a different port. Node 1 uses port 5555, and Node 2 uses port 6666.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.ja.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --port 5555\n```\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --port 6666\n```\n\n----------------------------------------\n\nTITLE: Get New Session Queue Configuration Help\nDESCRIPTION: This command displays component-specific configuration information for the New Session Queue role. It employs the `--help` option after specifying the sessionqueue role.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.en.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar sessionqueue --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Capabilities Before Selenium 4 - CSharp\nDESCRIPTION: This C# code snippet illustrates how to configure DesiredCapabilities for Selenium 3 using C#. It sets the browserName, platform, version, build, and name for the Firefox browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nDesiredCapabilities caps = new DesiredCapabilities();\ncaps.SetCapability(\"browserName\", \"firefox\");\ncaps.SetCapability(\"platform\", \"Windows 10\");\ncaps.SetCapability(\"version\", \"92\");\ncaps.SetCapability(\"build\", myTestBuild);\ncaps.SetCapability(\"name\", myTestName);\nvar driver = new RemoteWebDriver(new Uri(CloudURL), caps);\n```\n\n----------------------------------------\n\nTITLE: Adding Alerts with Information to Documentation HTML\nDESCRIPTION: This snippet demonstrates how to add alerts with additional information to the Selenium documentation using HTML. It uses shortcodes to insert alert content along with supporting details about what content is needed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.ja.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n{{</* alert-content */>}}\nAdditional information about what specific content is needed\n{{</* /alert-content */>}}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example\nDESCRIPTION: This JSON example showcases the structure of the response returned by the Selenium Grid node when retrieving a file. The `value` object contains the `filename` and `contents`. The `contents` field is a base64 encoded string representing the zipped file. This needs to be decoded and unzipped to access the original file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.ja.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": {\n    \"filename\": \"Red-blue-green-channel.jpg\",\n    \"contents\": \"UEsDBBQACAgIAJpagVYAAAAAAAAAAAAAAAAaAAAAUmVkLWJsAAAAAAAAAAAAUmVkLWJsdWUtZ3JlZW4tY2hhbm5lbC5qcGdQSwUGAAAAAAEAAQBIAAAAcNkAAAAA\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: loadable_component Gem\nDESCRIPTION: loadable_component is a Ruby gem that implements the LoadableComponent pattern for Selenium. This pattern helps to ensure that a web page or component is fully loaded before interacting with it.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/a-smattering-of-selenium-73.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nloadable_component\n```\n\n----------------------------------------\n\nTITLE: Setting W3C Capabilities Before Upgrade - CSharp\nDESCRIPTION: Illustrates defining capabilities in C# for Selenium 3, setting the browserName, platform, version, build, and name. Similar to Java and JavaScript, these capabilities are not W3C compliant.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nDesiredCapabilities caps = new DesiredCapabilities();\ncaps.SetCapability(\"browserName\", \"firefox\");\ncaps.SetCapability(\"platform\", \"Windows 10\");\ncaps.SetCapability(\"version\", \"92\");\ncaps.SetCapability(\"build\", myTestBuild);\ncaps.SetCapability(\"name\", myTestName);\nvar driver = new RemoteWebDriver(new Uri(CloudURL), caps);\n```\n\n----------------------------------------\n\nTITLE: Installing libatk-bridge2.0-0 on Linux\nDESCRIPTION: This command installs the `libatk-bridge2.0-0` library on Linux systems using apt-get, which is required for running Chrome for Testing in some cases.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.zh-cn.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libatk-bridge2.0-0\n```\n\n----------------------------------------\n\nTITLE: Java Capabilities Example\nDESCRIPTION: Demonstrates how to set custom capabilities in Java when creating a Selenium session to match the custom capabilities configured on a Grid node.  This ensures that sessions are routed to the appropriate nodes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.ja.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxOptions options = new FirefoxOptions();\noptions.setCapability(\"networkname:applicationName\", \"node_1\");\noptions.setCapability(\"nodename:applicationName\", \"app_1\");\noptions.setBrowserVersion(\"96\");\noptions.setPlatformName(\"macOS\");\nWebDriver driver = new RemoteWebDriver(new URL(\"http://localhost:4444\"), options);\ndriver.get(\"https://selenium.dev\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cookies in JavaScript\nDESCRIPTION: This code snippet demonstrates how to delete all cookies from the current browser context using Selenium WebDriver in JavaScript. It navigates to a website, adds two cookies, and then deletes all cookies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.get('https://www.example.com/');\nawait driver.manage().addCookie({name: 'test1', value: 'cookie1'});\nawait driver.manage().deleteAllCookies()\n```\n\n----------------------------------------\n\nTITLE: Docker Compose for Redis\nDESCRIPTION: This docker-compose.yml file defines a Redis service. It sets up the Redis image, configures restart policy, and exposes the default Redis port (6379).\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.zh-cn.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3.8'\nservices:\n  redis:\n    image: redis:bullseye\n    restart: always\n    ports:\n      - \"6379:6379\"\n```\n\n----------------------------------------\n\nTITLE: Parallel Cucumber Tests on Sauce Labs using Cucumber Sauce (Ruby)\nDESCRIPTION: Cucumber Sauce is a framework to run Cucumber tests in parallel on Sauce Labs infrastructure. The post mentions that it might be general enough to be used outside of Sauce Labs as well.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/a-smattering-of-selenium-28.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Scroll from Element with Offset - Selenium Wheel Ruby\nDESCRIPTION: This snippet demonstrates how to scroll from a specific element with an offset using Selenium's Wheel actions in Ruby. The origin of the scroll will be determined by adding the offset to the coordinates of the center of the element, and then page will be scrolled by the provided delta x and delta y values.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.ja.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'target')\n@driver.action.scroll_from(element, x_offset: 10, y_offset: 10).perform\n```\n\n----------------------------------------\n\nTITLE: Driver Initialization Before Selenium 4 (Python)\nDESCRIPTION: This code shows how to initialize the Chrome driver using executable_path before Selenium 4. This method is now deprecated.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\noptions = webdriver.ChromeOptions()\ndriver = webdriver.Chrome(\n    executable_path=CHROMEDRIVER_PATH, \n    options=options\n)\n```\n\n----------------------------------------\n\nTITLE: Display PATH Environment Variable (Windows)\nDESCRIPTION: This snippet displays the directories listed in the PATH environment variable in Windows. This helps to determine if the driver executable's directory is already included.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.ja.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho %PATH%\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Distributor (Shell)\nDESCRIPTION: This command starts the Selenium Grid Distributor, which queries the Session Queue for new session requests and assigns them to Nodes. It communicates with the Session Queue, Sessions component, Event Bus, and Nodes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.ja.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar distributor --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443 --sessions http://<sessions-ip>:5556 --sessionqueue http://<new-session-queue-ip>:5559 --port 5553 --bind-bus false\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Event Attributes - Ruby\nDESCRIPTION: This code snippet demonstrates how to add pointer event attributes like width, height, pressure, and tilt to a Pen action in Selenium with Ruby. It initializes a new Actions object, moves to an element, sets the pointer properties, and then performs a pen down action. It requires a WebDriver instance and a target WebElement.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/pen.zh-cn.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nelement = @driver.find_element(id: 'example')\n\n@driver.action.move_to(element)\n  .pointer_move(x: element.location[:x], y: element.location[:y], width: 5, height: 5, pressure: 0.5, tangential_pressure: 0.5, tilt_x: 10, tilt_y: -10, twist: 0)\n  .pointer_down(:left)\n  .perform\n```\n\n----------------------------------------\n\nTITLE: Setting setWindowRect Capability in Ruby\nDESCRIPTION: This Ruby code sets the `setWindowRect` capability in Selenium. This capability determines if the remote end supports commands for resizing and repositioning the browser window.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\noptions = Selenium::WebDriver::Options.chrome\noptions.set_window_rect = true\n```\n\n----------------------------------------\n\nTITLE: Going Forward in Browser History (Python)\nDESCRIPTION: Demonstrates how to navigate forward in the browser history using Selenium WebDriver in Python.  The driver.forward() method is used. Requires a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/navigation.ja.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndriver.forward()\n```\n\n----------------------------------------\n\nTITLE: Displaying PATH Environment Variable in Zsh\nDESCRIPTION: This snippet displays the current directories listed in the PATH environment variable using the `echo` command in a Zsh terminal. This allows users to check if the directory containing their browser driver is already included in the system's PATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.zh-cn.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho $PATH\n```\n\n----------------------------------------\n\nTITLE: `BrowserType` deprecation in Java\nDESCRIPTION: This snippet shows how to update the `BrowserType` interface to the new `Browser` interface.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\nMutableCapabilities capabilities = new MutableCapabilities();\ncapabilities.setCapability(\"browserVersion\", \"92\");\ncapabilities.setCapability(\"browserName\", BrowserType.FIREFOX);\n```\n\nLANGUAGE: Java\nCODE:\n```\nMutableCapabilities capabilities = new MutableCapabilities();\ncapabilities.setCapability(\"browserVersion\", \"92\");\ncapabilities.setCapability(\"browserName\", Browser.FIREFOX);\n```\n\n----------------------------------------\n\nTITLE: NettyClient AsyncHttpClient Instance (Java)\nDESCRIPTION: This code snippet shows the declaration of a static `AsyncHttpClient` instance within the `NettyClient` class in the Selenium Java client. It highlights the attempt to use a single instance of AsyncHttpClient to potentially mitigate memory leak issues.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/meetings/2021/public-project-meeting-20210225.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nprivate static final AsyncHttpClient httpClient =\n```\n\n----------------------------------------\n\nTITLE: Navigating to the JavaScript Directory\nDESCRIPTION: This command changes the current directory to the 'javascript' directory within the cloned repository.  This is a necessary step to run the JavaScript-specific tests and install the necessary dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/javascript/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncd seleniumhq.github.io/examples/javascript\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium\nDESCRIPTION: This code shows how to handle disabled options. Since Selenium 4.5, you cannot create a Select object from a disabled <select> element, and you cannot select a disabled <option>. Attempting to do so will result in an exception.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst disabledSelectElement = await driver.findElement(By.name('single_disabled'));\nawait driver.findElement(By.id('sinlge_disabled_1')).click();\n\n```\n\n----------------------------------------\n\nTITLE: Get browsing context realms - Java\nDESCRIPTION: This Java code demonstrates how to retrieve realms associated with a specific browsing context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void getBrowsingContextRealms() {\n        BrowsingContext browsingContext = new BrowsingContext(driver, driver.getWindowHandle());\n        List<RealmInfo> realmInfo = browsingContext.getRealms();\n        assertTrue(realmInfo.size() > 0);\n    }\n```\n\n----------------------------------------\n\nTITLE: Get realm by type (Java)\nDESCRIPTION: This Java snippet demonstrates how to retrieve a realm by its type using Selenium BiDi. It builds a `GetRealmsParameters` object to specify the type of realm to retrieve.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\n            List<RealmInfo> realms = bidi.script().getRealms(GetRealmsParameters.builder().setType(RealmType.window).build());\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Color Objects with fromString\nDESCRIPTION: This snippet shows how to create Color objects using basic color names in Java with the fromString method. It covers creating color objects for black, chocolate, and hotpink.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nprivate final Color BLACK = Color.fromString(\"black\");\nprivate final Color CHOCOLATE = Color.fromString(\"chocolate\");\nprivate final Color HOTPINK = Color.fromString(\"hotpink\");\n```\n\n----------------------------------------\n\nTITLE: Finding Element (After) - Java\nDESCRIPTION: This Java snippet demonstrates the correct way of finding elements using `findElement(By.*)` methods in Selenium 4.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\ndriver.findElement(By.className(\"className\"));\ndriver.findElement(By.cssSelector(\".className\"));\ndriver.findElement(By.id(\"elementId\"));\ndriver.findElement(By.linkText(\"linkText\"));\ndriver.findElement(By.name(\"elementName\"));\ndriver.findElement(By.partialLinkText(\"partialText\"));\ndriver.findElement(By.tagName(\"elementTagName\"));\ndriver.findElement(By.xpath(\"xPath\"));\n```\n\n----------------------------------------\n\nTITLE: Get Browser Title - CSharp\nDESCRIPTION: This C# snippet shows how to get the title of the current web page using Selenium WebDriver. It needs a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/_index.pt-br.md#_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\ndriver.Title;\n```\n\n----------------------------------------\n\nTITLE: Markdown in Tab HTML\nDESCRIPTION: This demonstrates using Markdown with code in a tab. It combines Markdown text (like numbered steps) with code fetched via `gh-codeblock`, requiring the use of `%` delimiters instead of `<` and `>` in the Hugo tab syntax.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.en.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{{</* tabpane text=true */>}}\n{{%/* tab header=\"Java\" */%}}\n1. Start the driver\n{{</* gh-codeblock path=\"examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L12\" */>}}\n2. Navigate to a page\n{{</* gh-codeblock path=\"examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L14\" */>}}\n3. Quit the driver\n{{</* gh-codeblock path=\"examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L29\" */>}}\n{{%/* /tab */%}}\n< ... >\n{{</* /tabpane */>}}\n```\n\n----------------------------------------\n\nTITLE: Delete Session from Node (No Secret)\nDESCRIPTION: Terminates a WebDriver session associated with a specific Selenium Grid node, when no registration secret has been configured. Closes the driver and removes it from the active session map. Subsequent requests using the same session ID will result in an error. Requires node URL and session ID.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://<node-URL>/se/grid/node/session/<session-id>' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Adding a directory to PATH in Windows\nDESCRIPTION: This snippet adds a specified directory to the PATH environment variable in Windows. It uses the `setx` command to permanently update the PATH system variable, appending the new directory to the existing PATH. This ensures that the driver can be found by Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.en.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsetx PATH \"%PATH%;C:\\WebDriver\\bin\"\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Hub (Shell)\nDESCRIPTION: This command starts the Selenium Hub, which acts as a central point for managing and distributing tests to nodes.  It listens for RemoteWebDriver session requests on http://localhost:4444 by default. The Hub consists of Router, Distributor, Session Map, New Session Queue, and Event Bus components.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.pt-br.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-<version>.jar hub\n```\n\n----------------------------------------\n\nTITLE: Disable Log Truncation in Firefox with Selenium (Java)\nDESCRIPTION: This code snippet shows how to disable log truncation in Firefox using Selenium with Java. By setting the `setPreference` for `log.truncate` to `false`, the logs won't be truncated.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nFirefoxOptions options = new FirefoxOptions();\noptions.setPreference(\"log.truncate\", false);\n```\n\n----------------------------------------\n\nTITLE: Defining Alert Content HTML\nDESCRIPTION: This HTML snippet demonstrates how to define an alert within the Selenium documentation. The alert-content shortcode is used to highlight missing or important information for potential contributors.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.pt-br.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{{</* alert-content */>}}\nAdditional information about what specific content is needed\n{{</* /alert-content */>}}\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to None in Kotlin\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'none' in Kotlin. The WebDriver waits until the initial page is downloaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.PageLoadStrategy\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.chrome.ChromeOptions\n\nfun main() {\n  val chromeOptions = ChromeOptions()\n  chromeOptions.setPageLoadStrategy(PageLoadStrategy.NONE)\n  val driver = ChromeDriver(chromeOptions)\n  try {\n    driver.get(\"https://www.google.com\")\n  }\n  finally {\n    driver.quit()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Window Position: Selenium WebDriver (Ruby)\nDESCRIPTION: This Ruby snippet demonstrates how to fetch the position of the browser window using Selenium WebDriver. It accesses the x and y coordinates individually, and also shows how to retrieve them through the rect object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\n    #Access each dimension individually\nx = driver.manage.window.position.x\ny = driver.manage.window.position.y\n\n    # Or store the dimensions and query them later\nrect  = driver.manage.window.rect\nx1 = rect.x\ny1 = rect.y\n```\n\n----------------------------------------\n\nTITLE: Directing Logger Output to a File in Python\nDESCRIPTION: This code snippet demonstrates how to direct Selenium logs to a file in Python by adding a FileHandler to the root logger. This overrides the default behavior of sending logs to sys.stderr. The 'logging' module is required.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.en.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfh = logging.FileHandler('selenium.log')\nlogging.getLogger().addHandler(fh)\n```\n\n----------------------------------------\n\nTITLE: Drain Node Directly Without Secret with cURL\nDESCRIPTION: This snippet drains a node directly without using the X-REGISTRATION-SECRET. It assumes no registration secret has been configured. The default Node URL is dynamically resolved.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.en.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request POST 'http://<node-URL>/se/grid/node/drain' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Rebasing Changes (Shell)\nDESCRIPTION: This snippet demonstrates how to rebase your feature branch with the latest changes from the trunk branch.  Rebasing keeps your branch up-to-date and helps avoid merge conflicts. The `git fetch` command retrieves the latest changes, and `git rebase` applies your changes on top of them.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.ja.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n% git fetch origin\n% git rebase origin/trunk\n```\n\n----------------------------------------\n\nTITLE: Custom Capabilities Matching with Java\nDESCRIPTION: Java code example showing how to match a Node based on custom capabilities. It sets the required capabilities in the FirefoxOptions and then creates a RemoteWebDriver with those options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.en.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxOptions options = new FirefoxOptions();\noptions.setCapability(\"networkname:applicationName\", \"node_1\");\noptions.setCapability(\"nodename:applicationName\", \"app_1\");\noptions.setBrowserVersion(\"96\");\noptions.setPlatformName(\"macOS\");\nWebDriver driver = new RemoteWebDriver(new URL(\"http://localhost:4444\"), options);\ndriver.get(\"https://selenium.dev\");\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Start Selenium Grid Node with Custom Capabilities (False)\nDESCRIPTION: Starts a Selenium Grid Node with custom capabilities set to `false`. The `--detect-drivers false` flag disables automatic driver detection, `--driver-configuration` sets the display name, `max-sessions` limits the number of concurrent sessions, and `stereotype` defines the browser and custom capability. The `--port` specifies the port for the node.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.zh-cn.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\njava -jar selenium-server-<version>.jar node --detect-drivers false --driver-configuration display-name=\"Chrome (custom capability true)\" max-sessions=1 stereotype='{\"browserName\":\"chrome\",\"gsg:customcap\":false}' --port 6262\n```\n\n----------------------------------------\n\nTITLE: Setting Page Range in Selenium C#\nDESCRIPTION: This C# code snippet demonstrates how to set the page range to \"2-4\" using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\nPrintOptions printOptions = new PrintOptions();\nprintOptions.PageRanges = \"2-4\";\n\nAssert.That(printOptions.PageRanges, Is.EqualTo(\"2-4\"));\nAssert.That(printOptions.PageRanges, Is.Not.Null);\nAssert.That(printOptions.PageRanges, Is.Not.Empty);\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in JavaScript\nDESCRIPTION: Demonstrates how to handle disabled options in a Select element in JavaScript. It attempts to select a disabled option and expects an exception to be thrown.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nawait assertThrows(\n    async () => await select.selectByValue('disabled'),\n    InvalidElementStateError);\n\n```\n\n----------------------------------------\n\nTITLE: Setting setWindowRect Capability in Java\nDESCRIPTION: This code demonstrates enabling or disabling the `setWindowRect` capability in Java. This capability indicates whether the remote end supports resizing and repositioning windows.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_43\n\nLANGUAGE: Java\nCODE:\n```\noptions.setCapability(\"setWindowRect\", true);\n```\n\n----------------------------------------\n\nTITLE: Running Chrome Dev in Standalone Mode\nDESCRIPTION: This command runs a Docker container with Chrome Dev in standalone mode.  It maps ports 4444 and 7900 for Selenium and VNC access, respectively, and allocates 2GB of shared memory. The container is removed after it stops.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/dev-and-beta-channel-browsers-via-docker-selenium.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-chrome:dev\n```\n\n----------------------------------------\n\nTITLE: Adding Selenium WebDriver to Gemfile - Shell\nDESCRIPTION: This shell snippet shows how to add the Selenium WebDriver gem to a Gemfile in Ruby, specifying version 4.4.0.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ngem 'selenium-webdriver', '~> 4.4.0'\n```\n\n----------------------------------------\n\nTITLE: Scroll from Element by Amount (Python)\nDESCRIPTION: This Python snippet demonstrates scrolling from an element by a specific amount horizontally (x_delta) and vertically (y_delta) using Selenium. Requires Selenium WebDriver and ActionChains.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.pt-br.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nelement = driver.find_element(By.ID, \"id-of-element\")\naction = ActionChains(driver)\naction.scroll_from_origin(element, 100, 200).perform()\n```\n\n----------------------------------------\n\nTITLE: Getting CSS Color Values\nDESCRIPTION: This snippet retrieves the color and background color of a login button using Selenium WebDriver in Java, then converts them to Color objects using the fromString method. It demonstrates how to fetch color values from web elements for testing purposes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.pt-br.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nColor loginButtonColour = Color.fromString(driver.findElement(By.id(\"login\")).getCssValue(\"color\"));\n\nColor loginButtonBackgroundColour = Color.fromString(driver.findElement(By.id(\"login\")).getCssValue(\"background-color\"));\n```\n\n----------------------------------------\n\nTITLE: Edge Installation Warning (Windows)\nDESCRIPTION: This code snippet displays a warning message when Selenium Manager attempts to install Edge on Windows without administrator privileges.  Due to the use of MSI installers, Edge installation requires elevated permissions on Windows, unlike Chrome and Firefox which can be installed to the local cache.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.zh-cn.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nedge can only be installed in Windows with administrator permissions\n```\n\n----------------------------------------\n\nTITLE: Get all realms - JavaScript\nDESCRIPTION: This JavaScript code snippet retrieves all the available realms.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n  it('get all realms', async () => {\n    const browsingContext = await new BrowsingContext(driver, tabId);\n    let realms = await browsingContext.script.getRealms({context: browsingContext.context});\n\n    expect(realms.length).toBeGreaterThan(0);\n  });\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Window in Selenium\nDESCRIPTION: This code puts the browser window into fullscreen mode using Selenium WebDriver, similar to pressing F11 in most browsers. This will fill the entire screen.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_74\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.manage.window.full_screen\n```\n\n----------------------------------------\n\nTITLE: Set Shrink to Fit Python\nDESCRIPTION: This code snippet demonstrates how to set whether to shrink the page to fit the content in Python with Selenium, using PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.shrink_to_fit = True\npdf = driver.print_page(print_options)\n```\n\n----------------------------------------\n\nTITLE: Remove Node from Distributor\nDESCRIPTION: Removes a node from the Selenium Grid distributor. This action does not interrupt ongoing sessions on the node, but prevents new sessions from being routed to it.  The node continues to run unless explicitly stopped. Requires distributor URL and registration secret.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://localhost:4444/se/grid/distributor/node/<node-id>' --header 'X-REGISTRATION-SECRET: <secret> '\n```\n\n----------------------------------------\n\nTITLE: Enabling Safari Driver (Shell)\nDESCRIPTION: This command enables automation for Safari.  It needs to be run from the terminal before using SafariDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.en.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsafaridriver --enable\n```\n\n----------------------------------------\n\nTITLE: Get Element Rectangle in Ruby\nDESCRIPTION: This code snippet demonstrates how to retrieve the rectangle (dimensions and coordinates) of a web element using Selenium WebDriver in Ruby. It uses the `rect` method of the WebElement class. The method returns a `Selenium::WebDriver::Rectangle` object containing the element's x, y, width, and height.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.pt-br.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\nit 'get rect' do\n  expect(driver.find_element(name: 'range_input').rect.height).to eq 15\nend\n```\n\n----------------------------------------\n\nTITLE: Project Dependencies List\nDESCRIPTION: This snippet shows the dependencies for the Selenium project and the specific versions required. These dependencies are essential for the project to function correctly. The dependencies include selenium, pytest, trio, pytest-trio, pytest-rerunfailures, flake8, and requests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/python/requirements.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nselenium==4.31.0\npytest==8.3.5\ntrio==0.30.0\npytest-trio==0.8.0\npytest-rerunfailures==15.0\nflake8==7.2.0\nrequests==2.32.3\n```\n\n----------------------------------------\n\nTITLE: Register Authentication for All Sites - Java\nDESCRIPTION: Registers a username and password for authentication on all sites using the `HasAuthentication` interface and the `register` method. This example provides credentials that will be used whenever authentication is required, regardless of the site's domain.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2021/a-tour-of-4-authentication.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// This \"HasAuthentication\" interface is the key!\nHasAuthentication authentication (HasAuthentication) driver;\n\n// You can either register something for all sites\nauthentication.register(() -> new UsernameAndPassword(\"admin\", \"admin\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy - None - Kotlin\nDESCRIPTION: This Kotlin code sets the page load strategy to NONE and navigates to google.com.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.PageLoadStrategy\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.chrome.ChromeOptions\n\nfun main() {\n  val chromeOptions = ChromeOptions()\n  chromeOptions.setPageLoadStrategy(PageLoadStrategy.NONE)\n  val driver = ChromeDriver(chromeOptions)\n  try {\n    driver.get(\"https://www.google.com\")\n  }\n  finally {\n    driver.quit()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Window Position: Selenium WebDriver (C#)\nDESCRIPTION: This C# snippet demonstrates how to move the browser window to the top-left corner of the primary monitor using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_55\n\nLANGUAGE: csharp\nCODE:\n```\n// Move the window to the top left of the primary monitor\ndriver.Manage().Window.Position = new Point(0, 0);\n```\n\n----------------------------------------\n\nTITLE: `executable_path` deprecation in Python\nDESCRIPTION: This snippet demonstrates how to use a Service object instead of `executable_path` when instantiating a WebDriver in Python to avoid deprecation warnings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\noptions = webdriver.ChromeOptions()\ndriver = webdriver.Chrome(\n    executable_path=CHROMEDRIVER_PATH, \n    options=options\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service as ChromeService\noptions = webdriver.ChromeOptions()\nservice = ChromeService(executable_path=CHROMEDRIVER_PATH)\ndriver = webdriver.Chrome(service=service, options=options)\n```\n\n----------------------------------------\n\nTITLE: Removing Virtual Authenticator in Python\nDESCRIPTION: This code snippet shows how to remove a virtual authenticator in Python using the authenticator ID.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndev_tools = driver.devtools\ndev_tools.create_session()\noptions = VirtualAuthenticatorOptions(protocol=Protocol.CTAP2)\nauthenticator = dev_tools.webauthn.add_virtual_authenticator(options)\ndev_tools.webauthn.remove_virtual_authenticator(authenticator['authenticator']['authenticatorId'])\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Object in Kotlin\nDESCRIPTION: Demonstrates how to initialize a Select object in Kotlin using a WebElement representing the select element. Requires org.openqa.selenium.WebElement and org.openqa.selenium.support.ui.Select dependencies.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval selectElement = driver.findElement(By.name(\"selectomatic\"))\nval select = Select(selectElement)\n```\n\n----------------------------------------\n\nTITLE: Drain Node Directly (No Secret)\nDESCRIPTION: Drains a Selenium Grid node directly, preventing new sessions from being created and allowing existing sessions to complete before shutting down when no registration secret has been configured. Requires node URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request POST 'http://<node-URL>/se/grid/node/drain' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Setting User Verified in JavaScript\nDESCRIPTION: Set whether the authenticator will simulate success or failure in user verification using JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nawait driver.setVirtualAuthenticatorUserVerified(authenticator, true);\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Python\nDESCRIPTION: Demonstrates how to handle disabled options in a Select element in Python. It attempts to select a disabled option and expects an exception to be thrown.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nwith pytest.raises(InvalidElementStateException):\n    select.select_by_value(\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Getting Page Title\nDESCRIPTION: This snippet demonstrates how to retrieve the title of the currently loaded web page using Selenium. The `getTitle()` method returns a promise that resolves to a string containing the page title.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet title = await driver.getTitle();\n```\n\n----------------------------------------\n\nTITLE: Setting pageLoadStrategy to None in Python\nDESCRIPTION: This snippet demonstrates setting the page load strategy to 'none' in Python. The WebDriver waits until the initial page is downloaded.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.pt-br.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\noptions = Options()\noptions.page_load_strategy = PageLoadStrategy.NONE\n```\n\n----------------------------------------\n\nTITLE: Releasing Actions with Selenium BiDi\nDESCRIPTION: This JavaScript snippet demonstrates how to release actions using the Selenium BiDi API.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/input.en.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  await bidi.input.release({sources: ['keyboard']});\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions to Chrome Options\nDESCRIPTION: This code snippet demonstrates how to add Chrome extensions to the browser options. The `add_extension` method takes the path to a `.crx` file as input. For unpacked directories, the `load-extension` argument should be used instead, as described in the linked ChromeDriver documentation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\noptions.addExtensions(new File(\"/path/to/extension.crx\"));\n```\n\n----------------------------------------\n\nTITLE: Disown handles in browsing context - Java\nDESCRIPTION: This Java code demonstrates how to disown handles within a browsing context.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.zh-cn.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void disownHandlesInBrowsingContext() {\n        BrowsingContext browsingContext = new BrowsingContext(driver, driver.getWindowHandle());\n        browsingContext.disownHandles(Collections.singletonList(\"1:1\"), null);\n    }\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Node with Custom Capability - Java\nDESCRIPTION: This command starts a Selenium Grid Node with a custom capability. The `--detect-drivers false` flag disables automatic driver detection, and `--driver-configuration` sets the display name and stereotype, defining the browser capabilities. The `gsg:customcap` is set to `true` in this node.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.pt-br.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\njava -jar selenium-server-<version>.jar node --detect-drivers false --driver-configuration display-name=\"Chrome (custom capability true)\" max-sessions=1 stereotype='{\"browserName\":\"chrome\",\"gsg:customcap\":true}' --port 6161\n```\n\n----------------------------------------\n\nTITLE: Find All Matching Elements by Tag Name - Python\nDESCRIPTION: This snippet demonstrates how to find all elements with a specific tag name using the Selenium WebDriver in Python. It uses the `find_elements` method with `By.TAG_NAME` to locate all matching elements and returns them as a list.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.zh-cn.md#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nplants = driver.find_elements(By.TAG_NAME, \"li\")\n```\n\n----------------------------------------\n\nTITLE: Comparing Color Objects in Python\nDESCRIPTION: This snippet shows how to directly compare two Color objects in Python using the == operator. In this case, it compares the background color of a login button with a predefined 'HOTPINK' color.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.ja.md#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nassert login_button_background_colour == HOTPINK\n```\n\n----------------------------------------\n\nTITLE: Redirecting Logger Output in CSharp\nDESCRIPTION: This code snippet demonstrates how to redirect Selenium logger output in C# to a file using `FileLogHandler`. It requires the `FileLogHandler` to be added to the logger.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.pt-br.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nprovider.AddFile(Path.Combine(Directory.GetCurrentDirectory(), \"selenium.log\"));\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Tests\nDESCRIPTION: This code snippet demonstrates how to run tests using Gradle from the command line.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ngradle clean test\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Port in Python\nDESCRIPTION: Shows how to set the port for the driver in Python using the `port` argument in the Service constructor.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.en.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nservice = Service(port=1234)\n```\n\n----------------------------------------\n\nTITLE: Protecting WebDriver with ThreadGuard in Java\nDESCRIPTION: This code demonstrates how to protect a WebDriver instance using ThreadGuard to prevent access from different threads. It creates a ChromeDriver instance and protects it using ThreadGuard.protect(). A separate thread then attempts to access the protected driver, which causes a WebDriverException to be thrown.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/thread_guard.zh-cn.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class DriverClash {\n  //thread main (id 1) created this driver\n  private WebDriver protectedDriver = ThreadGuard.protect(new ChromeDriver());\n\n  static {\n    System.setProperty(\"webdriver.chrome.driver\", \"<Set path to your Chromedriver>\");\n  }\n\n  //Thread-1 (id 24) is calling the same driver causing the clash to happen\n  Runnable r1 = () -> {protectedDriver.get(\"https://selenium.dev\");};\n  Thread thr1 = new Thread(r1);\n\n  void runThreads(){\n    thr1.start();\n  }\n\n  public static void main(String[] args) {\n    new DriverClash().runThreads();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid with Coursier and Java 11 HTTP Client\nDESCRIPTION: This bash command provides an alternative method to start Selenium Grid with the Java 11+ HTTP client, using Coursier to fetch the `selenium-http-jdk-client` JAR.  It dynamically resolves the dependency path using Coursier and adds it to the classpath.  The version of the selenium-server and selenium-http-jdk-client jar files should match.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/using-java11-httpclient.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njava -Dwebdriver.http.factory=jdk-http-client -jar selenium-server-4.5.0.jar —-ext $(coursier fetch -p org.seleniumhq.selenium:selenium-http-jdk-client:4.5.0) standalone\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium New Session Queue (Shell)\nDESCRIPTION: This command starts the Selenium New Session Queue, which adds new session requests to a queue that is consulted by the Distributor. It uses port 5559 by default.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.pt-br.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\njava -jar selenium-server-<version>.jar sessionqueue --port 5559\n```\n\n----------------------------------------\n\nTITLE: Disable Chrome Language Plugin Downloads\nDESCRIPTION: This snippet demonstrates how to disable the automatic downloading of language plugins in Chrome using command-line arguments.  This prevents Chrome from unnecessarily downloading .crx files, which can consume bandwidth and disk space, especially in environments where drivers are frequently created and destroyed. This improves performance and reduces resource usage during automated testing.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2024/chrome-browser-woes.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n--disable-features=OptimizationGuideModelDownloading,OptimizationHintsFetching,OptimizationTargetPrediction,OptimizationHints\n```\n\n----------------------------------------\n\nTITLE: Setting W3C Capabilities Before Upgrade - Python\nDESCRIPTION: Shows how to define capabilities in Python for Selenium 3. It sets the browserName, platform, version, build, and name. These capabilities require vendor prefixes for Selenium 4 compliance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.en.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ncaps = {}\ncaps['browserName'] = 'firefox'\ncaps['platform'] = 'Windows 10'\ncaps['version'] = '92'\ncaps['build'] = my_test_build\ncaps['name'] = my_test_name\ndriver = webdriver.Remote(cloud_url, desired_capabilities=caps)\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects\nDESCRIPTION: This code demonstrates how to create Color objects from various string representations such as HEX, RGB, RGBA, HSL, and HSLA in Java. It shows how to define colors using the Color.fromString() method.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nprivate final Color HEX_COLOUR = Color.fromString(\"#2F7ED8\");\nprivate final Color RGB_COLOUR = Color.fromString(\"rgb(255, 255, 255)\");\nprivate final Color RGB_COLOUR = Color.fromString(\"rgb(40%, 20%, 40%)\");\nprivate final Color RGBA_COLOUR = Color.fromString(\"rgba(255, 255, 255, 0.5)\");\nprivate final Color RGBA_COLOUR = Color.fromString(\"rgba(40%, 20%, 40%, 0.5)\");\nprivate final Color HSL_COLOUR = Color.fromString(\"hsl(100, 0%, 50%)\");\nprivate final Color HSLA_COLOUR = Color.fromString(\"hsla(100, 0%, 50%, 0.5)\");\n```\n\n----------------------------------------\n\nTITLE: IE Command Line Options - Kotlin\nDESCRIPTION: This snippet demonstrates how to use command line options with Internet Explorer using Kotlin. It enables the CreateProcess API and adds the '-k' command switch for kiosk mode. This requires setting 'useCreateProcessApiToLaunchIe' to true to ensure the command line arguments are effective.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport org.openqa.selenium.Capabilities\nimport org.openqa.selenium.ie.InternetExplorerDriver\nimport org.openqa.selenium.ie.InternetExplorerOptions\n\nfun main() {\n    val options = InternetExplorerOptions()\n    options.useCreateProcessApiToLaunchIe()\n    options.addCommandSwitches(\"-k\")\n    val driver = InternetExplorerDriver(options)\n    try {\n        driver.get(\"https://google.com/ncr\")\n        val caps = driver.getCapabilities()\n        println(caps);\n    } finally {\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependencies Configuration (Before)\nDESCRIPTION: Defines project dependencies for Selenium 3.141.59 using Gradle build tool. It specifies JUnit 5 for testing and selenium-java for Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_14\n\nLANGUAGE: jsonpath\nCODE:\n```\nplugins {\n    id 'java'\n}\ngroup 'org.example'\nversion '1.0-SNAPSHOT'\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'\n    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'\n}\ntest {\n    useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Add Directory to PATH (Windows)\nDESCRIPTION: This command adds a new directory containing the driver to the PATH environment variable on Windows. It uses `setx` to make the change persistent across sessions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.pt-br.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsetx PATH \"%PATH%;C:\\WebDriver\\bin\"\n```\n\n----------------------------------------\n\nTITLE: Call function in browsing context (Java)\nDESCRIPTION: This Java snippet demonstrates how to call a function within a browsing context using Selenium BiDi. It establishes a BiDi connection, navigates to a webpage, defines a JavaScript function, and then calls it using `script.callFunction`. The browsing context ID is used to specify the target for the function call.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.pt-br.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n    @Test\n    void callFunctionInBrowsingContext() {\n        try (Bidi bidi = new Bidi(driver)) {\n            BrowsingContext browsingContext = new BrowsingContext(bidi, driver);\n            browsingContext.navigate(getUrl(\"formPage.html\"));\n\n            String jsFunction = \"function hello(arg) { return 'Hello ' + arg; }\";\n\n            EvaluateResult result = bidi.script().evaluate(\n                EvaluateParameters.builder()\n                    .setExpression(jsFunction)\n                    .setTarget(browsingContext.getId())\n                    .build(),\n                EvaluateResult.class);\n\n            assertNotNull(result.getResult());\n            StringHandle realm = (StringHandle) result.getResult();\n\n            CallFunctionResult callFunctionResult = bidi.script().callFunction(\n                new CallFunctionParameters(\"hello\", realm.getValue(),\n                    List.of(new Argument(\"BiDi!\"))),\n                CallFunctionResult.class);\n\n            assertEquals(\"Hello BiDi!\", callFunctionResult.getResult().getValue());\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Double Click Action with Selenium\nDESCRIPTION: This snippet demonstrates how to perform a double click action on an element using Selenium. It combines moving the mouse to the center of an element with pressing and releasing the left mouse button twice. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/mouse.pt-br.md#_snippet_32\n\nLANGUAGE: CSharp\nCODE:\n```\nActions actions = new Actions(driver);\nIWebElement element = driver.FindElement(By.Id(\"my-element\"));\nactions.DoubleClick(element).Perform();\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Value in Kotlin\nDESCRIPTION: Demonstrates how to select an option in a Select element by its value attribute in Kotlin. It uses the selectByValue() method. Throws NoSuchElementException if matching option is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nselect.selectByValue(\"one\")\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to retrieve the position (x and y coordinates) of the browser window using Selenium WebDriver. It shows two approaches: accessing each coordinate individually and storing the position in a `rect` object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\n    #Access each dimension individually\nx = driver.manage.window.position.x\ny = driver.manage.window.position.y\n\n    # Or store the dimensions and query them later\nrect  = driver.manage.window.rect\nx1 = rect.x\ny1 = rect.y\n```\n\n----------------------------------------\n\nTITLE: Take Screenshot - Selenium\nDESCRIPTION: This Python snippet demonstrates how to capture a screenshot of the current browser window using Selenium WebDriver. It navigates to a website, takes a screenshot, saves it as a PNG image, and then closes the browser. Requires the selenium package.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.ja.md#_snippet_73\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium import webdriver\n\ndriver = webdriver.Chrome()\n\n    # Navigate to url\ndriver.get(\"http://www.example.com\")\n\n    # Returns and base64 encoded string into image\ndriver.save_screenshot('./image.png')\n\ndriver.quit()\n\n```\n\n----------------------------------------\n\nTITLE: Getting Credential in JavaScript\nDESCRIPTION: This javascript code gets credentials, loops through it, and prints the credential ID. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {credentials} = await devtools.getCredentials()\n\nfor (const credential of credentials) {\n  console.log(credential.id)\n}\n```\n\n----------------------------------------\n\nTITLE: Release Key Action in Selenium\nDESCRIPTION: Demonstrates how to simulate releasing a pressed key using Selenium's Actions API. This involves creating an Actions object, using the keyUp method to release a key, and then performing the action.  It shows how to press and hold Shift key while typing some text, and then release the Shift key.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/keyboard.pt-br.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nactions = driver.action\nactions.key_down(:shift)\n  .send_keys('text')\n  .key_up(:shift)\n  .perform\n```\n\n----------------------------------------\n\nTITLE: Switching Context in Firefox with Selenium (Java)\nDESCRIPTION: This snippet demonstrates how to switch context to CHROME in Firefox using Selenium WebDriver in Java. As of Firefox 138, the geckodriver needs to be started with the argument `--allow-system-access`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.en.md#_snippet_50\n\nLANGUAGE: java\nCODE:\n```\n((JavascriptExecutor) driver).executeScript(\"return window.context\");\n((JavascriptExecutor) driver).executeScript(\"window.context = 'CHROME'\");\n```\n\n----------------------------------------\n\nTITLE: Using Test::Page for Page Objects in Ruby\nDESCRIPTION: Test::Page is a Ruby helper library for creating Page Objects. Page Objects are a design pattern used in automated testing to represent web pages as objects, making tests more maintainable and readable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/a-smattering-of-selenium-127.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# Example usage of Test::Page would go here\n# This is a conceptual example as no specific code\n# was provided in the original content.\n```\n\n----------------------------------------\n\nTITLE: Locating Element by Partial Link Text with Selenium\nDESCRIPTION: This snippet demonstrates how to locate a link element on a page using partial link text with Selenium WebDriver. It assumes a ChromeDriver instance is already created and uses the `By.PartialLinkText()` method to find the element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_21\n\nLANGUAGE: CSharp\nCODE:\n```\nvar driver = new ChromeDriver();\n\tdriver.FindElement(By.PartialLinkText(\"Official Page\"));\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Hub with Custom Ports (Java)\nDESCRIPTION: This command starts the Hub with custom ports for publishing and subscribing to events, and for the main port. This is necessary when the default ports are unavailable or need to be changed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/getting_started.zh-cn.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar hub --publish-events tcp://<hub-ip>:8886 --subscribe-events tcp://<hub-ip>:8887 --port 8888\n```\n\n----------------------------------------\n\nTITLE: Rebasing Git branch with upstream changes (Shell)\nDESCRIPTION: This snippet fetches the latest changes from the origin repository and rebases the current branch on top of the trunk branch.  Rebasing ensures that the local branch is up-to-date with the latest changes and helps to avoid merge conflicts when submitting a pull request. `git fetch` updates the local copy of the remote repository, and `git rebase` applies the changes to the current branch.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.zh-cn.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n% git fetch origin\n% git rebase origin/trunk\n```\n\n----------------------------------------\n\nTITLE: Pushing Your Git Branch (Shell)\nDESCRIPTION: This snippet shows how to push your local Git branch to the remote repository on GitHub. This makes your changes available for review and integration.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.pt-br.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n% git push origin my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium\nDESCRIPTION: This snippet sets an implicit wait time for the WebDriver instance.  This tells the driver to wait a specified amount of time when trying to find an element if it is not immediately available.  Requires an initialized WebDriver instance. Not recommended as best practice for waiting.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndriver.implicitly_wait(10)\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Code - CSharp\nDESCRIPTION: This HTML snippet demonstrates how to include a specific code block from a C# file in the Selenium GitHub repository within a tab. The `gh-codeblock` shortcode is used to link directly to the code in the repository.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.pt-br.md#_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n{{</* gh-codeblock path=\"examples/dotnet/SeleniumDocs/GettingStarted/FirstScript.cs#L25-L26\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Setting System Property for Java 11 HTTP Client\nDESCRIPTION: This Java code snippet shows how to set the `webdriver.http.factory` system property to `jdk-http-client`. This property tells Selenium to use the Java 11+ HTTP client instead of the default AsyncHttpClient. This needs to be set before creating a WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/using-java11-httpclient.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n System.setProperty(\"webdriver.http.factory\", \"jdk-http-client\");\n\n```\n\n----------------------------------------\n\nTITLE: Check Session Ownership\nDESCRIPTION: Verifies if a particular session belongs to a specific Selenium Grid node. Returns 'true' if the session is owned by the node, otherwise 'false'. Requires node URL, session ID, and registration secret.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://localhost:5555/se/grid/node/owner/<session-id>' --header 'X-REGISTRATION-SECRET: <secret>'\n```\n\n----------------------------------------\n\nTITLE: Check Session Owner (No Secret)\nDESCRIPTION: This snippet checks if a specific session belongs to a given node. The response will be either true or false.  Used when no registration secret is configured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.zh-cn.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://<node-URL>/se/grid/node/owner/<session-id>' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Setting Driver Port - Ruby\nDESCRIPTION: This snippet demonstrates how to set the port the driver should run on in Ruby using Chrome::Service.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/service.zh-cn.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nservice = Selenium::WebDriver::Chrome::Service.new(port: 1234)\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid with Java 11 HTTP Client\nDESCRIPTION: This bash command demonstrates how to start a Selenium Grid in standalone mode while using the Java 11+ HTTP client. It sets the `webdriver.http.factory` system property and uses the `--ext` flag to add the `selenium-http-jdk-client` JAR to the Grid's classpath.  The version of the selenium-server and selenium-http-jdk-client jar files should match.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/using-java11-httpclient.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njava -Dwebdriver.http.factory=jdk-http-client -jar selenium-server-4.5.0.jar -—ext selenium-http-jdk-client-4.5.0.jar standalone\n```\n\n----------------------------------------\n\nTITLE: Get Element Text Selenium JavaScript\nDESCRIPTION: This JavaScript code snippet retrieves the text of an element identified by its ID using Selenium WebDriver and asserts that it matches the expected text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.selenium.dev/selenium/web/linked_image.html')\n    expect(await driver.findElement(By.id('justanotherlink')).getText())\n        .toEqual('link to a page with images')\n```\n\n----------------------------------------\n\nTITLE: AddAdditionalCapability Before Selenium 4 (C#)\nDESCRIPTION: This code demonstrates the use of AddAdditionalCapability in C# before Selenium 4, which has been deprecated.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_29\n\nLANGUAGE: CS\nCODE:\n```\nvar browserOptions = new ChromeOptions();\nbrowserOptions.PlatformName = \"Windows 10\";\nbrowserOptions.BrowserVersion = \"latest\";\nvar cloudOptions = new Dictionary<string, object>();\nbrowserOptions.AddAdditionalCapability(\"cloud:options\", cloudOptions, true);\n```\n\n----------------------------------------\n\nTITLE: Verifying Unicorn Existence - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to verify the existence of a Unicorn using the `exists?()` method on the `unicorn_confirmation_page` object. It takes the `sparkles` object as input, which specifies the attributes to check. The `expect` statement is used to assert that the Unicorn exists with all specified attributes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.zh-cn.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\n# The exists() method from UnicornConfirmationPage will take the Sparkles\n# object--a specification of the attributes you want to see, and compare\n# them with the fields on the page.\nexpect(unicorn_confirmation_page.exists?(sparkles)).to be, 'Sparkles should have been created, with all attributes intact'\n```\n\n----------------------------------------\n\nTITLE: Displaying Selenium Grid Security Information\nDESCRIPTION: This command retrieves and displays information on configuring secure communication between Grid servers and node registration. Replace `<version>` with the actual Selenium server version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.pt-br.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar info security\n```\n\n----------------------------------------\n\nTITLE: JavaScript Selenium WebDriver Installation\nDESCRIPTION: Installs the selenium-webdriver package using npm, the Node package manager. This command is executed from the command line or terminal.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nnpm install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Code - Kotlin\nDESCRIPTION: This HTML snippet demonstrates how to include a specific code block from a Kotlin file in the Selenium GitHub repository within a tab. The `gh-codeblock` shortcode is used to link directly to the code in the repository.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.pt-br.md#_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n{{</* gh-codeblock path=\"examples/kotlin/src/test/kotlin/dev/selenium/getting_started/FirstScriptTest.kt#L31-L32\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Running Mocha Tests\nDESCRIPTION: This code snippet demonstrates running tests using Mocha from the command line, specifying the test file.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.pt-br.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nmocha runningTests.spec.js\n```\n\n----------------------------------------\n\nTITLE: Selenium Utility Functions in Python\nDESCRIPTION: This is a collection of Python helper functions for WebDriver, providing slightly more user-friendly names for common Selenium actions. These functions aim to simplify and streamline the writing of Selenium tests in Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/a-smattering-of-selenium-73.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nSelenium Utility Funcs\n```\n\n----------------------------------------\n\nTITLE: Generating Test Data for Ruby Automated Tests\nDESCRIPTION: This resource discusses three different approaches to generating test data within Ruby-based automated tests.  It's useful for creating diverse datasets for robust testing, and is likely related to Watir or Watir-WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/a-smattering-of-selenium-88.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Removing All Credentials in Python\nDESCRIPTION: Removes all credentials from the authenticator using Python.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nauthenticator.remove_all_credentials()\n```\n\n----------------------------------------\n\nTITLE: Find Element within Element in JavaScript\nDESCRIPTION: This snippet demonstrates how to find a web element within another web element using Selenium WebDriver in JavaScript. First, it finds an element with the ID 'fruits', and then it finds a child element within that element with the class name 'tomatoes'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/finders.pt-br.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fruits = await driver.findElement(By.id('fruits'));\nconst fruit = fruits.findElement(By.className('tomatoes'));\n```\n\n----------------------------------------\n\nTITLE: Get CDP Version from Capabilities - Ruby\nDESCRIPTION: This snippet demonstrates how the Ruby bindings for Selenium WebDriver retrieve the Chrome DevTools Protocol (CDP) version from the 'se:cdpVersion' capability. It splits the version string and extracts the first part, likely representing the major version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/meetings/2021/public-project-meeting-20210520.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ncapabilities['se:cdpVersion'].split('.').first\n```\n\n----------------------------------------\n\nTITLE: Filtering Log Messages in Ruby (Alternative)\nDESCRIPTION: This Ruby snippet demonstrates how to filter log messages by opting in or out of specific log IDs. It allows control over deprecation notices as well, using symbols or arrays of symbols to specify the log messages to allow or ignore.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/logging.zh-cn.md#_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\nignore %i[devtools_file_download invalid_argument]\n```\n\n----------------------------------------\n\nTITLE: Network Conditions - Kotlin\nDESCRIPTION: This snippet is a placeholder as there is no code provided. The goal is to show how to simulate Network Conditions with Kotlin.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/chrome.zh-cn.md#_snippet_58\n\nLANGUAGE: Kotlin\nCODE:\n```\n// No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Initializing Internet Explorer with Options in Selenium\nDESCRIPTION: This code snippet demonstrates how to start a Microsoft Edge browser in Internet Explorer Compatibility mode with basic defined options using Selenium in various programming languages. It sets up the InternetExplorerOptions and uses them to create an InternetExplorerDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.attachToEdgeChrome = true;\noptions.edgeExecutablePath = \"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\";\nWebDriver driver = new InternetExplorerDriver(options);\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Selenium Information Topics\nDESCRIPTION: This shows how to access specific documentation topics using the `selenium info` command. By adding a topic name (e.g., `security`), users can retrieve detailed information about that particular aspect of Selenium server configuration or functionality.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2021/a-tour-of-4-new-commands.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nselenium info security\n```\n\n----------------------------------------\n\nTITLE: Check Session Ownership (No Secret)\nDESCRIPTION: Checks if a given session belongs to a specific node, when no registration secret was configured. Returns true if the session is owned by the node, and false otherwise.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.ja.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request GET 'http://<node-URL>/se/grid/node/owner/<session-id>' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: BELLATRIX C# Grid Assertion Examples\nDESCRIPTION: This C# code snippet demonstrates how to assert grid cells using the BELLATRIX framework. It includes iterating through each cell to assert font size and accessing specific cells by column name and index or row and column index to validate inner text, also fetching cell based on the employee property.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/bellatrix-test-automation-framework/index.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nTestGrid.ForEachCell(cell => cell.AssertFontSize(\"14px\"));\nTestGrid.GetCell(\"Firstname\", 1).ValidateInnerTextIs(\"Mary\");\nTestGrid.GetCell(0, 1).ValidateInnerTextIs(\"John\");\nTestGrid.GetCell<Employee>(cell => cell.PersonalEmail, 1).ValidateInnerTextIs(\"mary@hotmail.com\");\n```\n\n----------------------------------------\n\nTITLE: Example Commit Message (Text)\nDESCRIPTION: This example shows the structure and format of a good commit message. The first line is a concise summary, followed by a blank line, and then a detailed explanation of the changes. It also includes a reference to the issue being fixed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.pt-br.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nexplain commit normatively in one line\n\nBody of commit message is a few lines of text, explaining things\nin more detail, possibly giving some background about the issue\nbeing fixed, etc.\n\nThe body of the commit message can be several paragraphs, and\nplease do proper word-wrap and keep columns shorter than about\n72 characters or so. That way `git log` will show things\nnicely even when it is indented.\n\nFixes #141\n```\n\n----------------------------------------\n\nTITLE: Install Firefox Extension (Python)\nDESCRIPTION: This Python code snippet installs a Firefox extension (.xpi file).  It uses the `install_addon` method of the driver. Requires Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/firefox.pt-br.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndriver.install_addon(\"/path/to/extension.xpi\")\n```\n\n----------------------------------------\n\nTITLE: Install Selenium via pip - Python\nDESCRIPTION: This shell command demonstrates how to install a specific version of Selenium using pip in Python. The target version is specified as 4.4.3.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.ja.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\npip install selenium==4.4.3\n```\n\n----------------------------------------\n\nTITLE: Running Firefox Dev in Standalone Mode\nDESCRIPTION: This command runs a Docker container with Firefox Dev in standalone mode. It maps ports 4444 and 7900 for Selenium and VNC access, respectively, and allocates 2GB of shared memory. The container is removed after it stops.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/dev-and-beta-channel-browsers-via-docker-selenium.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-firefox:dev\n```\n\n----------------------------------------\n\nTITLE: Importing Color Class\nDESCRIPTION: This snippet shows how to import the Color class in different programming languages to utilize it for color manipulation in Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom selenium.webdriver.support.color import Color\n```\n\n----------------------------------------\n\nTITLE: Executing CDP commands with Selenium in Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to execute a CDP command using Selenium's `execute_cdp` method. It requires a WebDriver instance connected to a Chrome or Edge browser. The example retrieves the browser version using the 'Browser.getVersion' command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/_index.en.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nresult = driver.execute_cdp('Browser.getVersion', {})\n\nexpect(result).not_to be_nil\nexpect(result).to be_a Hash\nexpect(result.keys).to include('userAgent')\n```\n\n----------------------------------------\n\nTITLE: Updating Selenium Java Dependency (After) - Maven\nDESCRIPTION: This XML snippet shows how the Selenium Java dependency should be defined in a Maven `pom.xml` file after upgrading to Selenium 4. It uses version 4.4.0.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <!-- more dependencies ... -->\n    <dependency>\n        <groupId>org.seleniumhq.selenium</groupId>\n        <artifactId>selenium-java</artifactId>\n        <version>4.4.0</version>\n    </dependency>\n    <!-- more dependencies ... -->\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Checking ChromeDriver Version in Windows\nDESCRIPTION: This snippet checks the version of the ChromeDriver executable using the `--version` flag. It verifies that the driver is correctly installed and accessible from the command line after being added to the PATH environment variable.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.zh-cn.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nchromedriver.exe --version\n```\n\n----------------------------------------\n\nTITLE: Displaying Node Component Help\nDESCRIPTION: This command displays configuration help specific to the Node component of the Selenium Grid. Replace `<version>` with the actual Selenium server version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.pt-br.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --help\n```\n\n----------------------------------------\n\nTITLE: Delete Node from Grid\nDESCRIPTION: This snippet removes a node from the Selenium Grid, preventing new session requests from being forwarded to it.  The node will continue to run any existing sessions unless explicitly terminated. Requires the registration secret.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.zh-cn.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://localhost:4444/se/grid/distributor/node/<node-id>' --header 'X-REGISTRATION-SECRET: <secret> '\n```\n\n----------------------------------------\n\nTITLE: Using Har-assert for HTTP Archive Validation in Java\nDESCRIPTION: Har-assert is a Java library that can be included in your project to validate HTTP Archive (HAR) files. It is mentioned in the context of using browsermob-proxy, which is a tool for capturing HAR files. The library helps to assert the correctness of the recorded HTTP traffic.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/a-smattering-of-selenium-127.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// Example usage of Har-assert would go here\n// This is a conceptual example as no specific code\n// was provided in the original content.\n```\n\n----------------------------------------\n\nTITLE: Getting All Options in JavaScript\nDESCRIPTION: Demonstrates how to retrieve all options from a Select element in JavaScript. It uses the getOptions() method to return a list of WebElements representing the options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = await select.getOptions();\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium WebDriver with Easy Install\nDESCRIPTION: This command is used to update or install the Selenium WebDriver library in Python using the 'easy_install' package manager. The -U flag ensures that the package is upgraded to the latest version.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/selenium-2-0a5-released.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neasy_install -U selenium\n```\n\n----------------------------------------\n\nTITLE: Locating Element Near Another (Java)\nDESCRIPTION: This snippet demonstrates how to locate an input element that is near the element with the ID 'lbl-email' using Selenium's RelativeLocator in Java. This is useful when the element is within a certain proximity to a known element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_57\n\nLANGUAGE: Java\nCODE:\n```\nBy emailLocator = RelativeLocator.with(By.tagName(\"input\")).near(By.id(\"lbl-email\"));\n```\n\n----------------------------------------\n\nTITLE: Updating Selenium Dependency in Gradle - JSONPATH\nDESCRIPTION: These JSONPATH snippets demonstrate how to update the Selenium Java dependency in a Gradle `build.gradle` file from version 3.141.59 to version 4.4.0.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_13\n\nLANGUAGE: jsonpath\nCODE:\n```\nplugins {\n    id 'java'\n}\ngroup 'org.example'\nversion '1.0-SNAPSHOT'\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    testImplementation 'org.junit.jupiter: junit-jupiter-api: 5.7.0'\n    testRuntimeOnly 'org.junit.jupiter: junit-jupiter-engine: 5.7.0'\n    implementation group:  'org.seleniumhq.selenium', name:  'selenium-java', version:  '3.141.59'\n}\ntest {\n    useJUnitPlatform()\n}\n```\n\nLANGUAGE: jsonpath\nCODE:\n```\nplugins {\n    id 'java'\n}\ngroup 'org.example'\nversion '1.0-SNAPSHOT'\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    testImplementation 'org.junit.jupiter: junit-jupiter-api: 5.7.0'\n    testRuntimeOnly 'org.junit.jupiter: junit-jupiter-engine: 5.7.0'\n    implementation group:  'org.seleniumhq.selenium', name:  'selenium-java', version:  '4.4.0'\n}\ntest {\n    useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Load Strategy to None in Kotlin\nDESCRIPTION: This snippet shows how to set the page load strategy to 'none' in Kotlin using Selenium. WebDriver waits until the initial page is downloaded.\nDependencies: Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.ja.md#_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.PageLoadStrategy\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.chrome.ChromeOptions\n\nfun main() {\n  val chromeOptions = ChromeOptions()\n  chromeOptions.setPageLoadStrategy(PageLoadStrategy.NONE)\n  val driver = ChromeDriver(chromeOptions)\n  try {\n    driver.get(\"https://www.google.com\")\n  }\n  finally {\n    driver.quit()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Edge browser beta version on Linux\nDESCRIPTION: This command configures Selenium Manager to download and manage the beta version of the Edge browser and its driver on a Linux system. It provides debug information to trace the steps involved in locating and downloading the necessary components.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2023/status_of_selenium_manager_in_october_2023.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./selenium-manager --browser edge --debug --browser-version beta\n\nDEBUG\tmsedgedriver not found in PATH\nDEBUG\tedge not found in PATH\nDEBUG\tedge beta not found in the system\nDEBUG\tChecking edge releases on https://edgeupdates.microsoft.com/api/products\nDEBUG\tRequired browser: edge 118.0.2088.11\nDEBUG\tDownloading edge 118.0.2088.11 from https://packages.microsoft.com/repos/edge/pool/main/m/microsoft-edge-beta/microsoft-edge-beta_118.0.2088.11-1_amd64.deb\nDEBUG\tedge 118.0.2088.11 has been downloaded at /home/user/.cache/selenium/edge/linux64/118.0.2088.11/msedge\nDEBUG\tReading msedgedriver version from https://msedgedriver.azureedge.net/LATEST_RELEASE_118_LINUX\nDEBUG\tRequired driver: msedgedriver 118.0.2088.11\nDEBUG\tDownloading msedgedriver 118.0.2088.11 from https://msedgedriver.azureedge.net/118.0.2088.11/edgedriver_linux64.zip\nINFO\tDriver path: /home/user/.cache/selenium/msedgedriver/linux64/118.0.2088.11/msedgedriver\nINFO\tBrowser path: /home/user/.cache/selenium/edge/linux64/118.0.2088.11/msedge\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium WebDriver via Gem - Shell\nDESCRIPTION: This shell command demonstrates how to install the Selenium WebDriver gem in Ruby.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ngem install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: rwebspec-webdriver Gem\nDESCRIPTION: rwebspec-webdriver is a Ruby gem for executable functional specification for web applications using RSpec syntax and Selenium-WebDriver. It allows developers to write tests in a more descriptive and readable format.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2012/a-smattering-of-selenium-73.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nrwebspec-webdriver\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Java Directory\nDESCRIPTION: Changes the current directory to the location of the Selenium Java examples within the cloned repository. Assumes the repository has been cloned.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/examples/java/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd seleniumhq.github.io/examples/java\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options in CSharp\nDESCRIPTION: Demonstrates how to retrieve selected options from a Select element in C#. It uses the AllSelectedOptions property to return a list of IWebElements representing the selected options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nReadOnlyCollection<IWebElement> selectedOptions = select.AllSelectedOptions;\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Files - Java Example\nDESCRIPTION: Shows the command to execute Selenium tests in Java using Maven.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.zh-cn.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nmvn test\n```\n\n----------------------------------------\n\nTITLE: Get Window Position - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to retrieve the position (x and y coordinates) of the browser window using Selenium WebDriver. It shows two approaches: accessing each coordinate individually and storing the coordinates for later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nAccess each dimension individually\n```\n\nLANGUAGE: javascript\nCODE:\n```\n(or) store the dimensions and query them later\n```\n\n----------------------------------------\n\nTITLE: User Extension for Boolean Attribute Assertion in Selenium IDE\nDESCRIPTION: This snippet illustrates a user-defined extension for Selenium IDE that simplifies the assertion of boolean attributes. It encapsulates the logic for checking the presence or absence of a boolean attribute into a reusable command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/atoms-have-come-to-selenium-ide.md#_snippet_3\n\nLANGUAGE: selenium\nCODE:\n```\nassertBooleanAttribute | css=select[name=elephants]@multiple | false\nassertBooleanAttribute | css=select[name=elephants]@multiple | true\n```\n\n----------------------------------------\n\nTITLE: Adding Credential in JavaScript\nDESCRIPTION: This Javascript code adds the publicKeyCredentialParams with User ID, User Name, and Display Name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst devtools = await driver.getDevTools()\nawait devtools.attachSession()\nconst userId = btoa('user4')\nconst userName = btoa('User 4')\nconst displayName = 'User Four'\nconst publicKeyCredentialParams = {\n  userId: userId,\n  userName: userName,\n  displayName: displayName,\n}\nawait devtools.send('WebAuthn.addCredential', publicKeyCredentialParams)\n\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Options in Selenium\nDESCRIPTION: This code snippet demonstrates how to handle disabled options in a select element using Selenium WebDriver. It attempts to select a disabled option and verifies that a `NoSuchElementException` is thrown. This feature is available from Selenium 4.5 and later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_38\n\nLANGUAGE: CSharp\nCODE:\n```\nAssert.Throws<NoSuchElementException>(() => select.SelectByValue(\"disabled\"));\n```\n\n----------------------------------------\n\nTITLE: Distributed Grid Startup Script (Redis)\nDESCRIPTION: This bash script starts a distributed Selenium Grid with the session information stored in Redis.  It starts the event bus, session queue, session map, distributor, router, and node components. It uses coursier to fetch the selenium-session-map-redis dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.zh-cn.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nSE_VERSION=<current_selenium_version>\nJAR_NAME=selenium-server-${SE_VERSION}.jar\nPUBLISH=\"--publish-events tcp://localhost:4442\"\nSUBSCRIBE=\"--subscribe-events tcp://localhost:4443\"\nSESSIONS=\"--sessions http://localhost:5556\"\nSESSIONS_QUEUE=\"--sessionqueue http://localhost:5559\"\necho 'Starting Event Bus'\njava -jar $JAR_NAME event-bus $PUBLISH $SUBSCRIBE --port 5557 &\necho 'Starting New Session Queue'\njava -jar $JAR_NAME sessionqueue --port 5559 &\necho 'Starting Session Map'\njava -jar $JAR_NAME \\\n--ext $(coursier fetch -p org.openqa.selenium:selenium-session-map-redis:${SE_VERSION}) \\\nsessions $PUBLISH $SUBSCRIBE --port 5556 --config sessions.toml &\necho 'Starting Distributor'\njava -jar $JAR_NAME  distributor $PUBLISH $SUBSCRIBE $SESSIONS $SESSIONS_QUEUE --port 5553 --bind-bus false &\necho 'Starting Router'\njava -jar $JAR_NAME router $SESSIONS --distributor http://localhost:5553 $SESSIONS_QUEUE --port 4444 &\necho 'Starting Node'\njava -jar $JAR_NAME node $PUBLISH $SUBSCRIBE &\n```\n\n----------------------------------------\n\nTITLE: Adding Virtual Authenticator in JavaScript\nDESCRIPTION: This code demonstrates adding a virtual authenticator in JavaScript, setting up DevTools and specifying the authenticator's protocol.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.ja.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst devtools = await driver.getDevTools()\nawait devtools.attachSession()\nconst options = {\n  protocol: 'ctap2',\n}\nawait devtools.send('WebAuthn.addVirtualAuthenticator', options)\n\n```\n\n----------------------------------------\n\nTITLE: Get Hub Component Help\nDESCRIPTION: This command displays configuration options specific to the 'hub' component of Selenium Grid. It uses the '--help' flag with the 'hub' argument.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.zh-cn.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar hub --help\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium WebDriver in Ruby\nDESCRIPTION: This Ruby code initializes Selenium WebDriver, navigates to a webpage, and asserts its title. It requires the `selenium-webdriver` gem to be installed and ChromeDriver to be available for Chrome browser automation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/_index.ja.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'selenium-webdriver'\nrequire 'rspec'\n\ndescribe 'Hello Selenium' do\n  it 'works' do\n    driver = Selenium::WebDriver.for :chrome\n    driver.navigate.to 'https://www.selenium.dev/selenium/web/web-form.html'\n    expect(driver.title).to eq('Web form')\n    driver.quit\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Getting Credentials in Python\nDESCRIPTION: This Python code retrieves a list of credentials from the virtual authenticator. The retrieved credentials can then be processed for testing purposes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndevtools.security.get_credentials()\n```\n\n----------------------------------------\n\nTITLE: Get node component configuration help\nDESCRIPTION: This command retrieves component-specific configuration information for the node Selenium Grid role. It details available options and settings for the node component.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.ja.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar node --help\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookies in C# with Selenium\nDESCRIPTION: This C# code demonstrates setting both Strict and Lax SameSite cookies using Selenium. It navigates to a URL, creates two cookies with different SameSite attributes using the Cookie.FromDictionary method, adds them to the browser, and prints their SameSite values to the console.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/cookies.ja.md#_snippet_32\n\nLANGUAGE: CSharp\nCODE:\n```\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nnamespace SameSiteCookie {\n  class SameSiteCookie {\n    static void Main(string[] args) {\n      IWebDriver driver = new ChromeDriver();\n      try {\n        driver.Navigate().GoToUrl(\"http://www.example.com\");\n\n        var cookie1Dictionary = new System.Collections.Generic.Dictionary<string, object>() {\n          { \"name\", \"test1\" }, { \"value\", \"cookie1\" }, { \"sameSite\", \"Strict\" } };\n        var cookie1 = Cookie.FromDictionary(cookie1Dictionary);\n\n        var cookie2Dictionary = new System.Collections.Generic.Dictionary<string, object>() {\n          { \"name\", \"test2\" }, { \"value\", \"cookie2\" }, { \"sameSite\", \"Lax\" } };\n        var cookie2 = Cookie.FromDictionary(cookie2Dictionary);\n\n        driver.Manage().Cookies.AddCookie(cookie1);\n        driver.Manage().Cookies.AddCookie(cookie2);\n\n        System.Console.WriteLine(cookie1.SameSite);\n        System.Console.WriteLine(cookie2.SameSite);\n      } finally {\n        driver.Quit();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: User-Friendly Scroll Wheel Action Methods - Ruby\nDESCRIPTION: This code snippet (referenced as a link) showcases a more user-friendly implementation of scroll wheel actions in the Ruby binding for Selenium WebDriver. It demonstrates how to create more intuitive methods for scrolling, improving the user experience. The goal is to provide examples for improving the base implementations.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/meetings/2022/tlc-03-02.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nhttps://github.com/SeleniumHQ/selenium/blob/trunk/rb/lib/selenium/webdriver/common/interactions/wheel_actions.rb\n```\n\n----------------------------------------\n\nTITLE: Setting ignoreProtectedModeSettings for Internet Explorer\nDESCRIPTION: This code snippet demonstrates how to set the `ignoreProtectedModeSettings` capability for Internet Explorer using Selenium. Setting this capability to `true` skips the protected mode check during the launch of a new IE session.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/internet_explorer.ja.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\noptions = Selenium::WebDriver::IE::Options.new\noptions.introduce_flakiness_by_ignoring_security_domains = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy with Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to set up a proxy in Selenium using ChromeOptions.  It creates a Proxy object, sets the HTTP proxy address, and then applies it to the ChromeOptions. This configures the WebDriver to route browser traffic through the specified proxy server.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/options.zh-cn.md#_snippet_54\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.openqa.selenium.Proxy\nimport org.openqa.selenium.WebDriver\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.chrome.ChromeOptions\n\nclass proxyTest {\nfun main() {\n\n        val proxy = Proxy()\n        proxy.setHttpProxy(\"<HOST:PORT>\")\n        val options = ChromeOptions()\n        options.setCapability(\"proxy\", proxy)\n        val driver: WebDriver = ChromeDriver(options)\n        driver[\"https://www.google.com/\"]\n        driver.manage().window().maximize()\n        driver.quit()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting W3C Capabilities (Before) - Python\nDESCRIPTION: This snippet demonstrates how to set capabilities in Selenium 3 for Python. It sets browserName, platform, version, build, and name.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ncaps = {}\ncaps['browserName'] = 'firefox'\ncaps['platform'] = 'Windows 10'\ncaps['version'] = '92'\ncaps['build'] = my_test_build\ncaps['name'] = my_test_name\ndriver = webdriver.Remote(cloud_url, desired_capabilities=caps)\n```\n\n----------------------------------------\n\nTITLE: Example Commit Message (Text)\nDESCRIPTION: This is an example of a well-formatted commit message, demonstrating how to structure the subject line, body, and footer. It includes a concise description, a detailed explanation, and a reference to an issue being fixed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.ja.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nexplain commit normatively in one line\n\nBody of commit message is a few lines of text, explaining things\nin more detail, possibly giving some background about the issue\nbeing fixed, etc.\n\nThe body of the commit message can be several paragraphs, and\nplease do proper word-wrap and keep columns shorter than about\n72 characters or so. That way `git log` will show things\nnicely even when it is indented.\n\nFixes #141\n```\n\n----------------------------------------\n\nTITLE: Clear Element with Selenium WebDriver in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to navigate to a URL, locate an element, and clear its content using Selenium WebDriver. It assumes `driver` is a WebDriver instance initialized with a browser.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/interactions.pt-br.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.selenium.dev/selenium/web/inputs.html')\nconst emailInput = await driver.findElement(By.name('email_input'))\nawait emailInput.clear()\n\n```\n\n----------------------------------------\n\nTITLE: Set Window Size - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to set the size of the browser window to 1024x768 pixels using Selenium WebDriver.  The `resize_to` method is called with the desired width and height as arguments.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.manage.window.resize_to(1024,768)\n```\n\n----------------------------------------\n\nTITLE: Getting Element Attribute\nDESCRIPTION: This snippet demonstrates how to retrieve the value of a specific attribute of an element using Selenium. The `GetAttribute` method is used to fetch the value of the `title` attribute of the located element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.pt-br.md#_snippet_38\n\nLANGUAGE: CSharp\nCODE:\n```\nstring title = searchBox.GetAttribute(\"title\");\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Code - Python\nDESCRIPTION: This HTML snippet demonstrates how to include a specific code block from a Python file in the Selenium GitHub repository within a tab. The `gh-codeblock` shortcode is used to link directly to the code in the repository.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.pt-br.md#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n{{</* gh-codeblock path=\"examples/python/tests/getting_started/first_script.py#L18-L19\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Selecting Option by Text in Selenium\nDESCRIPTION: This code snippet demonstrates how to select an option in a <select> element by its visible text using Selenium WebDriver. The `select_by(:text, 'One')` method is used to select the option based on the provided text.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.ja.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nselect.select_by(:text, 'One')\n```\n\n----------------------------------------\n\nTITLE: Standalone Server Configuration TOML\nDESCRIPTION: Configures a standalone Selenium Grid server running on port 4449 with a session request timeout of 500 seconds. This TOML snippet demonstrates setting the server port and the session request timeout.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/toml_options.zh-cn.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[server]\nport = 4449\n\n[sessionqueue]\nsession-request-timeout = 500\n```\n\n----------------------------------------\n\nTITLE: Pausing Actions in Selenium (JavaScript)\nDESCRIPTION: This code shows how to pause between actions in Selenium using JavaScript. The pause function takes milliseconds as an argument. Requires a WebDriver instance and Actions class.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.zh-cn.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait new Actions(driver)\n  .pause(2000)\n  .sendKeys('First')\n  .pause(2000)\n  .sendKeys('Second')\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Failing assertAttribute Example in Selenium IDE\nDESCRIPTION: This snippet demonstrates an assertAttribute command that fails in Selenium IDE 1.0.10 due to changes in how boolean attributes are handled. The script is trying to verify the value of the 'checked' attribute on a checkbox, which now returns true or null instead of 'checked'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/atoms-have-come-to-selenium-ide.md#_snippet_0\n\nLANGUAGE: selenium\nCODE:\n```\nassertAttribute | checkbox@checked | checked\n```\n\n----------------------------------------\n\nTITLE: Selenium Dependency in package.json (JavaScript)\nDESCRIPTION: Declares selenium-webdriver as a dependency in the 'package.json' file for a JavaScript project. This file lists project metadata, including dependencies.  Running `npm install` will install the listed packages.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/install_library.ja.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"selenium-webdriver\": \"^4.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Downloaded Files in Python\nDESCRIPTION: Deletes downloaded files for a RemoteWebDriver session in Python, cleaning up the download directory. Requires the RemoteWebDriver instance has download functionality.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\ndriver.delete_downloaded_files()\n```\n\n----------------------------------------\n\nTITLE: Clear New Session Queue (No Secret)\nDESCRIPTION: This snippet clears the new session request queue, rejecting all pending requests.  Used when no registration secret is configured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.zh-cn.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://<Router-URL>/se/grid/newsessionqueue/queue' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Java Gradle Test Execution\nDESCRIPTION: This shell command executes Gradle clean and test tasks. It cleans the project, compiles code, and runs unit and integration tests.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/using_selenium.zh-cn.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ngradle clean test\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Code - Java\nDESCRIPTION: This HTML snippet demonstrates how to include a specific code block from a Java file in the Selenium GitHub repository within a tab. The `gh-codeblock` shortcode is used to link directly to the code in the repository.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.pt-br.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n{{</* gh-codeblock path=\"examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L26-L27\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Java BrowserType Interface (Before)\nDESCRIPTION: Demonstrates setting the browser name using the deprecated `BrowserType` interface.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_29\n\nLANGUAGE: Java\nCODE:\n```\nMutableCapabilities capabilities = new MutableCapabilities();\ncapabilities.setCapability(\"browserVersion\", \"92\");\ncapabilities.setCapability(\"browserName\", BrowserType.FIREFOX);\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium WebDriver with Gem\nDESCRIPTION: This command is used to install or update the Selenium WebDriver gem in Ruby using the 'gem' package manager. It ensures that the latest version of the Selenium WebDriver is installed.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/selenium-2-0a5-released.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngem install selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: Set Window Size: Selenium WebDriver (Ruby)\nDESCRIPTION: This Ruby snippet demonstrates how to set the size of the browser window to 1024x768 pixels using Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.en.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\ndriver.manage.window.resize_to(1024,768)\n```\n\n----------------------------------------\n\nTITLE: Delete Session\nDESCRIPTION: This snippet terminates a WebDriver session, exiting the driver and removing it from the active session mapping.  Any attempt to use the deleted session ID or reuse the driver instance will result in an error.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.zh-cn.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://localhost:4444/session/<session-id>'\n```\n\n----------------------------------------\n\nTITLE: Call Function in Browsing Context - Java\nDESCRIPTION: This snippet demonstrates how to call a function within a browsing context using Java and the WebDriver BiDi API.  It uses the `Script.callFunction` method to execute a JavaScript function in a specific browsing context and retrieves the result. It requires the WebDriver BiDi dependency and a valid browsing context ID.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/script.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nBiDi bidi = ((HasBiDi) driver).getBiDi();\n        try (Subscription<Script.Message> subscription = bidi.script().onMessage(message -> {\n            Object someParam = message.getData();\n            assertNotNull(someParam);\n        })) {\n\n            BrowsingContext browsingContext = new BrowsingContext(contextId);\n            Script.CallFunctionOptions options = new Script.CallFunctionOptions();\n            options.setThisOwning(true);\n            options.setArguments(List.of(new RemoteValueArgument(\"arg1\", RemoteValue.create())));\n\n            Script.EvaluateResult result = bidi.script().callFunction(\n                browsingContext, \"() => { return window.document.title }\", options);\n            assertEquals(\"\", result.getResult().getValue());\n\n            Script.EvaluateResult result2 = bidi.script().callFunction(\n                browsingContext, \"(arg) => { return arg }\", options, List.of(new RemoteValueArgument(\"arg\", RemoteValue.create(\"arg1\"))));\n            assertEquals(\"arg1\", result2.getResult().getValue());\n        }\n```\n\n----------------------------------------\n\nTITLE: Java Timeout Configuration (After)\nDESCRIPTION: Configures timeouts for Selenium WebDriver using Duration.ofSeconds and Duration.ofMinutes. The driver's manage() method is used to set implicit wait, script timeout, and page load timeout.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_23\n\nLANGUAGE: Java\nCODE:\n```\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\ndriver.manage().timeouts().scriptTimeout(Duration.ofMinutes(2));\ndriver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(10));\n```\n\n----------------------------------------\n\nTITLE: Making Selenium Server Jar Executable (Linux/macOS)\nDESCRIPTION: These commands allow users on Linux or macOS to make the Selenium server jar executable, rename it, and place it on their `$PATH`. This simplifies running the server by allowing it to be invoked directly with the `selenium` command, rather than `java -jar ...`.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2021/a-tour-of-4-new-commands.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod 755 selenium-server-4.0.0.jar\n```\n\n----------------------------------------\n\nTITLE: Drain Node Directly (No Secret)\nDESCRIPTION: Drains a node directly, allowing it to gracefully shut down after all running sessions are completed, when no registration secret was configured.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.ja.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request POST 'http://<node-URL>/se/grid/node/drain' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Logging in with User Credentials\nDESCRIPTION: This snippet demonstrates how to log in to a website using a user's email and password. It creates a user with read-only permissions and logs in as that user, returning the AccountPage object to perform subsequent actions. Dependencies include the UserFactory and AccountPage classes.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.en.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create a user who has read-only permissions--they can configure a unicorn,\n// but they do not have payment information set up, nor do they have\n// administrative privileges. At the time the user is created, its email\n// address and password are randomly generated--you don't even need to\n// know them.\nvar user = userFactory.createCommonUser(); //This method is defined elsewhere.\n\n// Log in as this user.\n// Logging in on this site takes you to your personal \"My Account\" page, so the\n// AccountPage object is returned by the loginAs method, allowing you to then\n// perform actions from the AccountPage.\nvar accountPage = loginAs(user.email, user.password);\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL table for Selenium sessions in SQL\nDESCRIPTION: This SQL script creates a table named `sessions_map` in a PostgreSQL database. This table is used by Selenium Grid to store information about active sessions, including session IDs, capabilities, URIs, stereotypes, and start times. It is used in conjunction with the JDBC session map implementation.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/external_datastore.ja.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE IF NOT EXISTS sessions_map(\n    session_ids varchar(256),\n    session_caps text,\n    session_uri varchar(256),\n    session_stereotype text,\n    session_start varchar(256)\n );\n```\n\n----------------------------------------\n\nTITLE: GraphQL: Querying New Session Queue Size (curl)\nDESCRIPTION: This curl command retrieves the size of the new session queue from the Selenium Grid using its GraphQL API.  It uses `curl` to send a POST request with a GraphQL query.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/graphql_support.ja.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"query\":\"{ grid { sessionQueueSize } }\"}' -s <LINK_TO_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: User Creation and Login with Selenium (Java)\nDESCRIPTION: This Java snippet demonstrates how to create a user with specific permissions using a factory and then log in as that user, obtaining an AccountPage object for further interaction. It highlights the use of an API for user creation to minimize browser interaction. The UserFactory.createCommonUser() method is assumed to be defined elsewhere. The loginAs method navigates to the \"My Account\" page and returns an AccountPage object.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/test_practices/overview.ja.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// Create a user who has read-only permissions--they can configure a unicorn,\n// but they do not have payment information set up, nor do they have\n// administrative privileges. At the time the user is created, its email\n// address and password are randomly generated--you don't even need to\n// know them.\nUser user = UserFactory.createCommonUser(); //This method is defined elsewhere.\n\n// Log in as this user.\n// Logging in on this site takes you to your personal \"My Account\" page, so the\n// AccountPage object is returned by the loginAs method, allowing you to then\n// perform actions from the AccountPage.\nAccountPage accountPage = loginAs(user.getEmail(), user.getPassword());\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for Selenium Manager (CLI)\nDESCRIPTION: This command-line instruction shows how to get help and list available options when using Selenium Manager. It will output available parameters and options for the 'selenium-manager' command.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2022/introducing-selenium-manager.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ./selenium-manager --help\n```\n\n----------------------------------------\n\nTITLE: Get hub component configuration help\nDESCRIPTION: This command retrieves component-specific configuration information for the hub Selenium Grid role. It details available options and settings for the hub component.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/help.ja.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\njava -jar selenium-server-<version>.jar hub --help\n```\n\n----------------------------------------\n\nTITLE: Adding Alerts to Documentation HTML\nDESCRIPTION: This snippet demonstrates how to add alerts to the Selenium documentation using HTML. It uses shortcodes to insert alert content.  The alerts are used to highlight missing content or guide contributors.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/style.ja.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{{</* alert-content /*/>}}\n```\n\n----------------------------------------\n\nTITLE: Quitting WebDriver Session - Python\nDESCRIPTION: This snippet demonstrates how to properly quit a WebDriver session in Python using the `driver.quit()` method.  This ensures that all browser windows and associated processes are closed. It is recommended to use this at the end of a test or session to avoid resource leaks.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/windows.pt-br.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Scroll From Element w/ Offset using Selenium Wheel (JavaScript)\nDESCRIPTION: Scrolls from a specified element with an offset, by a given amount. Requires the element, x offset, y offset, delta x, and delta y as arguments. Requires Selenium WebDriver dependency.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/wheel.en.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst element = await driver.findElement(By.id('idOfMyElement'));\nawait driver.actions()\n  .scroll(20, 50, WheelInput.Origin.element(element, 15, 25), 0, 0)\n  .perform();\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions in Python\nDESCRIPTION: This code snippet shows how to release all pressed keys and pointer buttons in Python. It uses the `release_actions` method on the WebDriver instance.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.pt-br.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndriver.release_actions()\n```\n\n----------------------------------------\n\nTITLE: Relative Locator - Below in Selenium\nDESCRIPTION: This code snippet demonstrates how to locate an element below another element using Relative Locators in Selenium.  It locates an input element below the element with the id 'email'.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.ja.md#_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\npassword_locator = locate_with(By.TAG_NAME, \"input\").below({By.ID: \"email\"})\n```\n\n----------------------------------------\n\nTITLE: Releasing All Actions - Ruby\nDESCRIPTION: This Ruby snippet shows how to release all currently depressed keys and pointer buttons using the `key_up` method. It resets the input state for subsequent actions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/actions_api/_index.en.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.action.key_up(:shift).perform\n```\n\n----------------------------------------\n\nTITLE: Initializing VirtualAuthenticatorOptions in Java\nDESCRIPTION: This code snippet demonstrates how to create VirtualAuthenticatorOptions in Java, setting various properties like protocol, domain, and whether to require user verification.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.pt-br.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nVirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions()\n    .setProtocol(Protocol.CTAP2)\n    .setDomain(\"localhost\")\n    .setUserVerified(true);\noptions.addTransport(Transport.USB);\n```\n\n----------------------------------------\n\nTITLE: Fetch Element Attribute Selenium JavaScript\nDESCRIPTION: This JavaScript code snippet fetches the 'value' attribute of an email input element using Selenium WebDriver and asserts that it equals an empty string.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/information.ja.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.get('https://www.selenium.dev/selenium/web/inputs.html')\n    expect(await driver.findElement(By.name('email_input')).getAttribute('value'))\n        .toEqual('')\n```\n\n----------------------------------------\n\nTITLE: Selenium IDE Plugin Development\nDESCRIPTION: The Selenium IDE plugin is being developed using JavaScript, AJAX, and XUL technologies. It will provide seamless integration with the remote storage system, enabling users to save and retrieve test cases directly from the IDE. The plugin interacts with the remote storage API to perform CRUD (Create, Read, Update, Delete) operations on test cases.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2010/gsoc-2010-remote-storage.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example: JavaScript code for a Selenium IDE plugin (conceptual)\n// This is a placeholder and not actual project code\nfunction saveTestCaseToRemoteStorage(testCase) {\n  // Use AJAX to send testCase data to the remote storage API\n  var xhr = new XMLHttpRequest();\n  xhr.open(\"POST\", \"/remote_storage/save\", true);\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n  xhr.onload = function () {\n    // Handle response\n  };\n  xhr.send(JSON.stringify(testCase));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Binary Location - Ruby\nDESCRIPTION: Demonstrates setting the browser binary location for Edge in Ruby.\nThis allows specifying a non-standard path to the Edge browser executable.\nDependencies: Selenium WebDriver, EdgeDriver, EdgeOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/edge.ja.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\noptions.binary = '/path/to/edge/msedge'\n```\n\n----------------------------------------\n\nTITLE: Set Page Orientation Python\nDESCRIPTION: This code snippet demonstrates how to set the page orientation (portrait or landscape) using the PrintOptions class in Python with Selenium.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.zh-cn.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.orientation = PrintOrientation.LANDSCAPE\npdf = driver.print_page(print_options)\n```\n\n----------------------------------------\n\nTITLE: BiDi Java Imports (Before 4.19)\nDESCRIPTION: These import statements were used to access Selenium BiDi APIs in Java before version 4.19. They directly import classes from the `org.openqa.selenium.bidi` package. These imports will no longer work in Selenium 4.19 and later.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2024/bidi-java-breaking-change.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport org.openqa.selenium.bidi.LogInspector;\nimport org.openqa.selenium.bidi.BrowsingContextInspector;\nimport org.openqa.selenium.bidi.Input;\nimport org.openqa.selenium.bidi.Script;\nimport org.openqa.selenium.bidi.Network;\n```\n\n----------------------------------------\n\nTITLE: Adding a Virtual Authenticator in C#\nDESCRIPTION: This snippet demonstrates how to add a virtual authenticator using the configured options in C#.  It retrieves the DevTools interface and calls the AddVirtualAuthenticator method to register the virtual authenticator for WebAuthn testing.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.zh-cn.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nIDevTools devTools = ((IHasDevTools)driver).GetDevTools();\nDevToolsSession session = devTools.GetDevToolsSession();\n\nVirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions();\n\nawait session.Security.AddVirtualAuthenticator(options);\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Options in Selenium CSharp\nDESCRIPTION: This snippet illustrates how to retrieve the selected options from a Select element in C#. It uses the `AllSelectedOptions` property of the SelectElement object, returning a list of IWebElements representing the selected options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.en.md#_snippet_14\n\nLANGUAGE: CSharp\nCODE:\n```\nReadOnlyCollection<IWebElement> selectedOptions = select.AllSelectedOptions;\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Authentication using CDP in C#\nDESCRIPTION: This C# code snippet demonstrates how to set basic authentication credentials using the Chrome DevTools Protocol (CDP) within Selenium. It uses the `Network.enable` and `Network.setExtraHTTPHeaders` methods to insert the credentials into the header of network requests. This is useful for accessing pages that require authentication.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/cdp/network.pt-br.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstring encodedCredentials = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(\"username:password\"));\nDictionary<string, object> headers = new Dictionary<string, object>\n{\n    { \"Authorization\", $\"Basic {encodedCredentials}\" }\n};\ndriver.ExecuteCdpCommand(\"Network.enable\", new Dictionary<string, object>());\ndriver.ExecuteCdpCommand(\"Network.setExtraHTTPHeaders\", new Dictionary<string, object>()\n{\n    {\"headers\", headers}\n});\n```\n\n----------------------------------------\n\nTITLE: JSON response for Listing Files\nDESCRIPTION: The raw response looks like below when listing the files\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/configuration/cli_options.pt-br.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": {\n    \"names\": [\n      \"Red-blue-green-channel.jpg\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information (Shell)\nDESCRIPTION: This snippet shows how to configure your Git username and email address globally. This information is used to identify the author of commits.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/contributing.pt-br.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n% git config --global user.name 'Santa Claus'\n% git config --global user.email 'santa@example.com'\n```\n\n----------------------------------------\n\nTITLE: Getting Credential in Python\nDESCRIPTION: This python code returns a list of credentials. Requires Selenium WebDriver.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/virtual_authenticator.en.md#_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\ndevtools.get_credentials\n```\n\n----------------------------------------\n\nTITLE: Java Firefox Legacy Option\nDESCRIPTION: Shows the deprecated `setLegacy` option for FirefoxOptions. This is deprecated as the legacy Firefox driver implementation is no longer supported.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.pt-br.md#_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\nFirefoxOptions options = new FirefoxOptions();\noptions.setLegacy(true);\n```\n\n----------------------------------------\n\nTITLE: IME Route Definitions\nDESCRIPTION: These routes define the interaction with the IME (Input Method Editor). They include commands to check available engines, deactivate the current engine, and activate a specific engine.  These are currently only accessible via JsonHttpCommandHandler, making them legacy sessions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/meetings/2022/tlc-05-11.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'/session/:sessionId/ime/available_engines': {\n    GET: {command: 'availableIMEEngines'},\n  },\n  '/session/:sessionId/ime/deactivate': {\n    POST: {command: 'deactivateIMEEngine'},\n  },\n  '/session/:sessionId/ime/activate': {\n    POST: {command: 'activateIMEEngine', payloadParams: {required: ['engine']}},\n  },\n```\n\n----------------------------------------\n\nTITLE: Verifying Color Formats\nDESCRIPTION: This code converts a Color object to HEX, RGBA, and RGB formats and then compares the resulting strings with expected values using the equality operator (==) in Ruby. This approach allows for static verification of color values in specific formats.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/colors.zh-cn.md#_snippet_26\n\nLANGUAGE: Ruby\nCODE:\n```\nassert(login_button_background_colour.hex == '#ff69b4')\nassert(login_button_background_colour.rgba == 'rgba(255, 105, 180, 1)')\nassert(login_button_background_colour.rgb == 'rgb(255, 105, 180)')\n```\n\n----------------------------------------\n\nTITLE: Remove Node from Distributor (No Secret)\nDESCRIPTION: Removes a node from the Selenium Grid distributor when no registration secret has been configured. This action does not interrupt ongoing sessions on the node, but prevents new sessions from being routed to it.  The node continues to run unless explicitly stopped. Requires distributor URL.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/grid/advanced_features/endpoints.pt-br.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncURL --request DELETE 'http://<Router-URL>/se/grid/distributor/node/<node-id>' --header 'X-REGISTRATION-SECRET;'\n```\n\n----------------------------------------\n\nTITLE: Setting Safari Logging Preference (Java)\nDESCRIPTION: This Java code sets the logging preference for the Safari driver service.  It uses `SafariDriverService.Builder` to configure the service.  Requires Selenium Java 4.10 or higher.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/browsers/safari.ja.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nSafariDriverService service = new SafariDriverService.Builder().withLogging(true).build();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Size in Selenium Python\nDESCRIPTION: This Python code snippet demonstrates how to set the page size to \"A4\" using Selenium's PrintOptions.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/interactions/print_page.pt-br.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nprint_options = PrintOptions()\nprint_options.page_size = \"A4\"\n```\n\n----------------------------------------\n\nTITLE: Apache 2.0 License Text in Markdown\nDESCRIPTION: This snippet contains the complete text of the Apache 2.0 license, which governs the use, reproduction, and distribution of the Selenium project's code and documentation. It includes terms and conditions related to copyright, patent, redistribution, contributions, trademarks, warranty, and liability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/copyright.en.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of,\n      the Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n```\n\n----------------------------------------\n\nTITLE: Adding Selenium Legacy RC Dependency (Maven)\nDESCRIPTION: This snippet shows how to add the Selenium Legacy RC dependency to a Maven project. It is necessary for users who need to continue using the deprecated Selenium RC APIs.  It is strongly recommended to avoid using this unless absolutely necessary.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/blog/2016/selenium-3-is-coming.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.seleniumhq.selenium</groupId>\n  <artifactId>selenium-leg-rc</artifactId>\n  <version>3.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: De-selecting Option by Value in Select List - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to de-select an option in a multiple select list by its value using Selenium WebDriver. It assumes that you have already initialized the WebDriver and located the select element.  It uses the `Select` class' `deselectByValue` method to deselect an option. Before de-selecting, all options are cleared.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.pt-br.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nawait select.deselectAll();\nawait select.deselectByValue('option1');\n```\n\n----------------------------------------\n\nTITLE: Reload a browsing context in JavaScript\nDESCRIPTION: This snippet shows how to reload a browsing context using WebDriver BiDi in JavaScript.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/browsing_context.zh-cn.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nawait browsingContext.reload();\n```\n\n----------------------------------------\n\nTITLE: Getting Element Tag Name with Selenium\nDESCRIPTION: This snippet demonstrates how to retrieve the tag name of an HTML element using Selenium WebDriver. The `getTagName()` method is called on the identified element. This returns the HTML tag (e.g., 'input', 'div', 'a').  Dependencies include an initialized WebDriver instance, a loaded webpage, and a found element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nlet tagName = await searchBox.getTagName();\n```\n\n----------------------------------------\n\nTITLE: Apache 2.0 License\nDESCRIPTION: This snippet contains the complete text of the Apache 2.0 license, outlining the terms and conditions for using, reproducing, and distributing the Selenium project's code and documentation. It covers aspects such as copyright grants, patent grants, redistribution requirements, and limitations of liability.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/about/copyright.pt-br.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n```\n\n----------------------------------------\n\nTITLE: Getting Element Tag Name with Selenium\nDESCRIPTION: This snippet demonstrates how to retrieve the tag name of an HTML element using Selenium WebDriver. The `TagName` property is called on the identified element. This returns the HTML tag (e.g., 'input', 'div', 'a').  Dependencies include an initialized WebDriver instance, a loaded webpage, and a found element.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nString tagName = searchBox.TagName;\n```\n\n----------------------------------------\n\nTITLE: Getting All Options in Ruby\nDESCRIPTION: Demonstrates how to retrieve all options from a Select element in Ruby. It uses the options method to return a list of WebElements representing the options.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/support_features/select_lists.zh-cn.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\noptions = select.options\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Wait in Selenium - JavaScript\nDESCRIPTION: This code snippet demonstrates how to set an implicit wait in Selenium using JavaScript. Implicit waits are a global setting that applies to all element location calls during the session. The driver will wait for the specified duration before throwing an error if the element is not found.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/waits.zh-cn.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.manage().setTimeouts({ implicit: 10000 });\n```\n\n----------------------------------------\n\nTITLE: Checking driver version in Zsh\nDESCRIPTION: This snippet demonstrates how to check the version of a ChromeDriver executable in a Zsh terminal. By running the `chromedriver --version` command, the driver's version information is printed to the console, confirming that the driver is correctly installed and accessible via the PATH.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/errors/driver_location.en.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nchromedriver --version\n```\n\n----------------------------------------\n\nTITLE: Building Selenium Manager in Rust\nDESCRIPTION: This command builds the Selenium Manager in release mode using the Cargo build tool. This creates an optimized executable that can be used as a custom Selenium Manager. The resulting binary is placed in the `target/release` directory.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/selenium_manager.pt-br.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Continue Auth Required Request (No Credentials) - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to continue a network request blocked at the 'authRequired' phase using Selenium BiDi, but without providing authentication credentials.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/bidi/w3c/network.ja.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait driver.continueRequest({});\n```\n\n----------------------------------------\n\nTITLE: WebDriverWait and FluentWait Duration API Java\nDESCRIPTION: This snippet showcases how to update `WebDriverWait` and `FluentWait` with the `Duration` API in Selenium 4.  The previous versions accepted `long` values for timeout and polling intervals; now, `Duration` objects are required.  This change ensures consistency and improved type safety for timeout settings.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/troubleshooting/upgrade_to_selenium_4.zh-cn.md#_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\nnew WebDriverWait(driver, 3)\n.until(ExpectedConditions.elementToBeClickable(By.cssSelector(\"#id\")));\n\nWait<WebDriver> wait = new FluentWait<WebDriver>(driver)\n  .withTimeout(30, TimeUnit.SECONDS)\n  .pollingEvery(5, TimeUnit.SECONDS)\n  .ignoring(NoSuchElementException.class);\n```\n\nLANGUAGE: Java\nCODE:\n```\nnew WebDriverWait(driver, Duration.ofSeconds(3))\n  .until(ExpectedConditions.elementToBeClickable(By.cssSelector(\"#id\")));\n\n  Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)\n  .withTimeout(Duration.ofSeconds(30))\n  .pollingEvery(Duration.ofSeconds(5))\n  .ignoring(NoSuchElementException.class);\n```\n\n----------------------------------------\n\nTITLE: Running Selenium tests in Ruby\nDESCRIPTION: This command is used to execute Selenium tests written in Ruby using RSpec, a testing tool for Ruby. It assumes RSpec is configured and test files are written using RSpec syntax.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/getting_started/first_script.en.md#_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\nrspec\n```\n\n----------------------------------------\n\nTITLE: Deleting Downloaded Files in Ruby\nDESCRIPTION: Deletes downloaded files for a RemoteWebDriver session in Ruby, cleaning up the download directory.  Requires a RemoteWebDriver with the appropriate mixin included.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/drivers/remote_webdriver.ja.md#_snippet_23\n\nLANGUAGE: Ruby\nCODE:\n```\ndriver.delete_downloaded_files\n```\n\n----------------------------------------\n\nTITLE: Relative Locators: Locating Element Below\nDESCRIPTION: This code demonstrates how to locate an element below another element using Relative Locators in Selenium 4. It uses `RelativeLocator.with(By.tagName(\"input\")).below(By.id(\"email\"))` to locate an input element below the element with the ID 'email'. This technique is valuable when direct element identification is challenging.\nSOURCE: https://github.com/seleniumhq/seleniumhq.github.io/blob/trunk/website_and_docs/content/documentation/webdriver/elements/locators.pt-br.md#_snippet_46\n\nLANGUAGE: Kotlin\nCODE:\n```\nval passwordLocator = RelativeLocator.with(By.tagName(\"input\")).below(By.id(\"email\"))\n```"
  }
]