[
  {
    "owner": "crossplane-contrib",
    "repo": "function-shell",
    "content": "TITLE: Composition Using Function-Shell to Query Datadog Dashboards\nDESCRIPTION: YAML configuration for a Crossplane Composition that uses function-shell to retrieve dashboard IDs from Datadog. It loads credentials from a secret, sets environment variables, and executes a curl command piped to jq.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: shell.upbound.io\nspec:\n  compositeTypeRef:\n    apiVersion: upbound.io/v1alpha1\n    kind: XShell\n  mode: Pipeline\n  pipeline:\n    - step: shell\n      functionRef:\n        # When installed through a package manager, use\n        # name: crossplane-contrib-function-shell\n        name: function-shell\n      input:\n        apiVersion: shell.fn.crossplane.io/v1beta1\n        kind: Parameters\n        # Load shellEnvVarsRef from a Kubernetes secret\n        # through a deploymentRuntimeConfig into the\n        # function-shell pod.\n        shellEnvVarsRef:\n          name: DATADOG_SECRET\n          keys:\n            - DATADOG_API_KEY\n            - DATADOG_APP_KEY\n        shellEnvVars:\n          - key: DATADOG_API_URL\n            value: \"https://api.datadoghq.com/api/v1/dashboard\"\n        shellCommand: |\n          curl -X GET \"${DATADOG_API_URL}\" \\\n            -H \"Accept: application/json\" \\\n            -H \"DD-API-KEY: ${DATADOG_API_KEY}\" \\\n            -H \"DD-APPLICATION-KEY: ${DATADOG_APP_KEY}\"|jq '.dashboards[] .id'\n        stdoutField: status.atFunction.shell.stdout\n        stderrField: status.atFunction.shell.stderr\n```\n\n----------------------------------------\n\nTITLE: Configuring Function-Shell Deployment with DeploymentRuntimeConfig\nDESCRIPTION: YAML configuration for a DeploymentRuntimeConfig that sets up the function-shell deployment, including loading secrets as environment variables into the container.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: function-shell\nspec:\n  deploymentTemplate:\n    spec:\n      selector: {}\n      replicas: 1\n      template:\n        spec:\n          containers:\n            - name: package-runtime\n              args:\n                - --debug\n              env:\n                - name: DATADOG_SECRET\n                  valueFrom:\n                    secretKeyRef:\n                      key: credentials\n                      name: datadog-secret\n```\n\n----------------------------------------\n\nTITLE: XShell CompositeResourceDefinition (XRD)\nDESCRIPTION: YAML definition for the CompositeResourceDefinition (XRD) that defines the Shell API. It includes the status fields that will be populated by function-shell.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xshells.upbound.io\nspec:\n  group: upbound.io\n  names:\n    kind: XShell\n    plural: xshells\n  claimNames:\n    kind: Shell\n    plural: shells\n  defaultCompositionRef:\n    name: shell.upbound.io\n  versions:\n    - name: v1alpha1\n      served: true\n      referenceable: true\n      schema:\n        openAPIV3Schema:\n          properties:\n            spec:\n              properties:\n                cmd:\n                  type: string\n            status:\n              properties:\n                atFunction:\n                  type: object\n                  x-kubernetes-preserve-unknown-fields: true\n```\n\n----------------------------------------\n\nTITLE: XShell XR Instance Definition\nDESCRIPTION: YAML definition for creating an instance of the Shell composite resource (XR) that is used with the function-shell.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: upbound.io/v1alpha1\nkind: Shell\nmetadata:\n  name: shell-1\nspec: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider in Crossplane with AssumeRole Chain\nDESCRIPTION: This YAML configuration creates an AWS ProviderConfig in Crossplane that specifies the IRSA authentication method and an AssumeRole chain to access resources in another AWS account.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/example/aws/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  labels:\n    account: demo\n  name: demo\nspec:\n  assumeRoleChain:\n    - roleARN: arn:aws:iam::000000000001:role/eks-test-assume-role\n  credentials:\n    source: IRSA\n```\n\n----------------------------------------\n\nTITLE: Tracing Shell Resource with Crossplane CLI\nDESCRIPTION: Shell command and output demonstrating how to trace a Shell resource using the Crossplane CLI, showing the resource hierarchy and status.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace shell.upbound.io/datadog-dashboard-ids\nNAME                                    SYNCED   READY   STATUS\nShell/datadog-dashboard-ids (default)   True     True    Available\n└─ XShell/datadog-dashboard-ids-cbb6x   True     True    Available\n```\n\n----------------------------------------\n\nTITLE: XShell Resource with Datadog Dashboard IDs Output\nDESCRIPTION: YAML output showing an XShell resource with the Datadog dashboard IDs captured in the status fields after function-shell execution.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl get XShell/datadog-dashboard-ids-cbb6x -o yaml\napiVersion: upbound.io/v1alpha1\nkind: XShell\nmetadata:\n  creationTimestamp: \"2024-04-24T04:15:53Z\"\n  finalizers:\n  - composite.apiextensions.crossplane.io\n  generateName: datadog-dashboard-ids-\n  generation: 6\n  labels:\n    crossplane.io/claim-name: datadog-dashboard-ids\n    crossplane.io/claim-namespace: default\n    crossplane.io/composite: datadog-dashboard-ids-cbb6x\n  name: datadog-dashboard-ids-cbb6x\n  resourceVersion: \"167413\"\n  uid: 601d3f66-80df-4f1a-8917-533ea05255cc\nspec:\n  claimRef:\n    apiVersion: upbound.io/v1alpha1\n    kind: Shell\n    name: datadog-dashboard-ids\n    namespace: default\n  compositionRef:\n    name: shell.upbound.io\n  compositionRevisionRef:\n    name: shell.upbound.io-e981893\n  compositionUpdatePolicy: Automatic\n  resourceRefs: []\nstatus:\n  atFunction:\n    shell:\n      stderr: \"% Total    % Received % Xferd  Average Speed   Time    Time     Time\\n                                 Dload  Upload   Total   Spent    Left  Speed\\n\\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\\r100  4255  100  4255    0     0  10361      0 --:--:-- --:--:-- --:--:-- 10378\"\n      stdout: |-\n        \"vn4-agn-ftd\"\n        \"9pt-bhb-uwj\"\n        \"6su-nff-222\"\n        \"sm3-cxs-q98\"\n        \"ssx-sci-uvi\"\n        \"3fd-h4e-7w6\"\n        \"qth-94z-ip5\"\n  conditions:\n  - lastTransitionTime: \"2024-04-24T04:20:09Z\"\n    reason: ReconcileSuccess\n    status: \"True\"\n    type: Synced\n  - lastTransitionTime: \"2024-04-24T04:15:54Z\"\n    reason: Available\n    status: \"True\"\n    type: Ready\n```\n\n----------------------------------------\n\nTITLE: Running Crossplane Function Locally in Shell\nDESCRIPTION: This command runs the function locally with insecure and debug options enabled.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Run the function locally\n$ go run . --insecure --debug\n```\n\n----------------------------------------\n\nTITLE: Example YAML Manifests for Crossplane Function Testing\nDESCRIPTION: These YAML manifests represent an example XR (Composite Resource) and a Result object, which are used to test the Crossplane function.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: example.crossplane.io/v1\nkind: XR\nmetadata:\n  name: example-xr\n---\napiVersion: render.crossplane.io/v1beta1\nkind: Result\nmessage: I was run with input \"Hello world\"!\nseverity: SEVERITY_NORMAL\nstep: run-the-template\n```\n\n----------------------------------------\n\nTITLE: Testing Crossplane Function with Example Manifests\nDESCRIPTION: This shell command demonstrates how to use 'crossplane beta render' to test the function with example YAML manifests.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Then, in another terminal, call it with these example manifests\n$ crossplane beta render xr.yaml composition.yaml functions.yaml -r\n```\n\n----------------------------------------\n\nTITLE: Datadog API Credentials Secret Template\nDESCRIPTION: JSON template for a Datadog secret containing API and application keys required for authenticating with the Datadog API.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"DATADOG_API_KEY\": \"YOUR_API_KEY\",\n    \"DATADOG_APP_KEY\": \"YOIR_APP_KEY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Environment Variables Secret in JSON Format\nDESCRIPTION: Example JSON-formatted secret used to provide environment variables to the function-shell via deploymentRuntimeConfig. Contains key-value pairs for environment variables.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ENV_FOO\": \"foo value\",\n    \"ENV_BAR\": \"bar value\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Kubernetes Secret Credentials\nDESCRIPTION: This JSON structure shows the format for storing API and APP keys in a Kubernetes secret. The actual values are masked for security.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/example/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"API_KEY\": \"...masked.value.here...\",\n    \"APP_KEY\": \"...masked.value.here...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret from JSON Credentials in Shell\nDESCRIPTION: This shell command demonstrates how to create a Kubernetes secret named 'datadog-secret' in the 'upbound-system' namespace using JSON-formatted credentials stored in an environment variable.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/example/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n upbound-system \\\n    create secret generic datadog-secret \\\n    --from-literal=credentials=\"${DATADOG_ENV_VARS_JSON}\" \\\n    --dry-run=client \\\n    -o yaml|\\\n    kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Assuming AWS Role with STS in Bash\nDESCRIPTION: This bash command uses AWS STS to assume a role, storing the result in ASSUME_ROLE_OUTPUT variable. The command takes the role ARN from an environment variable and specifies a session name.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/example/aws/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nASSUME_ROLE_OUTPUT=$(aws sts assume-role --role-arn $AWS_ASSUME_ROLE_ARN --role-session-name \"function-shell\")\n```\n\n----------------------------------------\n\nTITLE: Extracting AWS Credentials from STS Response\nDESCRIPTION: These bash commands extract the temporary AWS credentials (access key, secret key, and session token) from the STS assume-role response using grep and cut commands.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/example/aws/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID=$(echo $ASSUME_ROLE_OUTPUT | grep -o '\"AccessKeyId\": \"[^\"]*\"' | cut -d'\"' -f4)\nexport AWS_SECRET_ACCESS_KEY=$(echo $ASSUME_ROLE_OUTPUT | grep -o '\"SecretAccessKey\": \"[^\"]*\"' | cut -d'\"' -f4)\nexport AWS_SESSION_TOKEN=$(echo $ASSUME_ROLE_OUTPUT | grep -o '\"SessionToken\": \"[^\"]*\"' | cut -d'\"' -f4)\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy for Cross-Account Access in AWS\nDESCRIPTION: This bash command creates an IAM policy named 'IAMRoleLister' that grants permissions to list IAM roles. The policy document defines the specific actions allowed.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/example/aws/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws iam create-policy \\\n    --policy-name IAMRoleLister \\\n    --policy-document \\\n'{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Action\": [\n                \"iam:ListRoles\"\n            ],\n            \"Resource\": \"*\",\n            \"Effect\": \"Allow\"\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Role with Trust Policy for Cross-Account Access\nDESCRIPTION: This bash command creates an IAM role with a trust policy that allows a role from another AWS account to assume this role, establishing the cross-account trust relationship.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/example/aws/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws iam create-role \\\n    --role-name eks-test-assume-role \\\n    --assume-role-policy-document \\\n'{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"arn:aws:iam::000000000000:role/eks-test-role\"\n            },\n            \"Action\": \"sts:AssumeRole\",\n            \"Condition\": {}\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Attaching IAM Policy to Role in AWS\nDESCRIPTION: This bash command attaches the previously created IAMRoleLister policy to the eks-test-assume-role, granting the role the permissions defined in the policy.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/example/aws/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws iam attach-role-policy \\\n    --policy-arn arn:aws:iam::000000000001:policy/IAMRoleLister \\\n    --role-name eks-test-assume-role\n```\n\n----------------------------------------\n\nTITLE: Function-Shell Development Commands\nDESCRIPTION: Collection of shell commands for developing, testing, and building the function-shell, including code generation, running tests, linting, and building Docker images and Crossplane packages.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Code generation\ngo generate ./...\n\n# Build Docker image\ndocker build . --tag=runtime\n\n# Render example function output\n# Terminal 1\ngo run . --insecure --debug\n\n# Terminal 2\ncrossplane beta render \\\n    example/out-of-cluster/xr.yaml \\\n    example/out-of-cluster/composition.yaml \\\n    example/out-of-cluster/functions.yaml\n\n# Lint code\ngolangci-lint run\n\n# Run tests\ngo test -v -cover .\n\n# Docker build amd64 image\ndocker build . --quiet --platform=linux/amd64 --tag runtime-amd64\n\n# Docker build arm64 image\ndocker build . --quiet --platform=linux/arm64 --tag runtime-arm64\n\n# Crossplane build amd64 package\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-amd64 \\\n    --package-file=function-amd64.xpkg\n\n# Crossplane build arm64 package\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-arm64 \\\n    --package-file=function-arm64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Listing IAM Roles with AWS CLI and JQ Filtering\nDESCRIPTION: This bash command uses the AWS CLI to list IAM roles and pipes the output to jq to extract just the ARN of each role, providing a clean list of role ARNs.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/example/aws/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naws iam list-roles | jq -r '.Roles[] .Arn'\n```\n\n----------------------------------------\n\nTITLE: Policy Creation Response in AWS IAM\nDESCRIPTION: This JSON response shows the result of creating an IAM policy with details like PolicyName, PolicyId, ARN, and creation timestamps.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/example/aws/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Policy\": {\n        \"PolicyName\": \"IAMRoleLister\",\n        \"PolicyId\": \"ANPAS43KCNAZNTZIWNOCU\",\n        \"Arn\": \"arn:aws:iam::000000000001:policy/IAMRoleLister\",\n        \"Path\": \"/\",\n        \"DefaultVersionId\": \"v1\",\n        \"AttachmentCount\": 0,\n        \"PermissionsBoundaryUsageCount\": 0,\n        \"IsAttachable\": true,\n        \"CreateDate\": \"2024-09-17T08:35:55+00:00\",\n        \"UpdateDate\": \"2024-09-17T08:35:55+00:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Role Creation Response in AWS IAM\nDESCRIPTION: This JSON response shows the result of creating an IAM role with details including the role ARN, name, ID, and the trust policy document that defines which principals can assume this role.\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/example/aws/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Role\": {\n        \"Path\": \"/\",\n        \"RoleName\": \"eks-test-assume-role\",\n        \"RoleId\": \"AROAS43KCNAZGWLU4RRHM\",\n        \"Arn\": \"arn:aws:iam::000000000001:role/eks-test-assume-role\",\n        \"CreateDate\": \"2024-09-17T08:48:30+00:00\",\n        \"AssumeRolePolicyDocument\": {\n            \"Version\": \"2012-10-17\",\n            \"Statement\": [\n                {\n                    \"Effect\": \"Allow\",\n                    \"Principal\": {\n                        \"AWS\": \"arn:aws:iam::000000000000:role/eks-test-role\"\n                    },\n                    \"Action\": \"sts:AssumeRole\",\n                    \"Condition\": {}\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Crossplane Function Shell Script Usage\nDESCRIPTION: Command to initialize a new Crossplane function by replacing the template name with a custom function name\nSOURCE: https://github.com/crossplane-contrib/function-shell/blob/main/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./init.sh <function-name>\n```"
  }
]