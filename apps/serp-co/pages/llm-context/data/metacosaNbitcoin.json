[
  {
    "owner": "metacosa",
    "repo": "nbitcoin",
    "content": "TITLE: Connecting to a Bitcoin Node via SOCKS5 Proxy\nDESCRIPTION: C# code demonstrating how to connect to a Bitcoin node using a SOCKS5 proxy (e.g., Tor) with NBitcoin. It sets up connection parameters and initiates a version handshake.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionParameters = new NodeConnectionParameters();\nconnectionParameters.TemplateBehaviors.Add(new SocksSettingsBehavior(Utils.ParseEndpoint(\"localhost\", 9050)));\nNode node = await Node.ConnectAsync(Network.Main, \"7xnmrhmkvptbcvpl.onion:8333\", connectionParameters);\nnode.VersionHandshake();\n```\n\n----------------------------------------\n\nTITLE: Basic NBitcoin Usage Example in C#\nDESCRIPTION: A simple C# program demonstrating how to generate a Bitcoin key and display its WIF (Wallet Import Format) representation on the Main network. This showcases the clean object-oriented API of NBitcoin.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/docs/api/index.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing NBitcoin;\n\nnamespace _125350929\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World! \" + new Key().GetWif(Network.Main));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Synchronizing Bitcoin Nodes with NBitcoin.TestFramework in C#\nDESCRIPTION: This example demonstrates how to create two Bitcoin nodes, start them, generate blocks on one node, and synchronize them. The code also verifies that both nodes have the same best block hash after synchronization, confirming they are in sync.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.TestFramework/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing(var builder = NodeBuilder.Create())\n{\n\tvar node1 = builder.CreateNode();\n\tvar node2 = builder.CreateNode();\n\tbuilder.StartAll();\n\tnode2.Generate(50);\n\tnode2.Sync(node1);\n\n\tvar bestblock1 = node1.CreateRPCClient().GetBestBlockHash();\n\tvar bestblock2 = node2.CreateRPCClient().GetBestBlockHash();\n\tAssert.Equal(bestblock1, bestblock2);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NBitcoin via .NET Core CLI\nDESCRIPTION: Command to add the NBitcoin package to a .NET Core project using the dotnet CLI.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package NBitcoin\n```\n\n----------------------------------------\n\nTITLE: Setting up NBitcoin in .NET Core Projects\nDESCRIPTION: Step-by-step commands to create a new .NET Core project and add the NBitcoin package as a dependency. This shows the complete workflow from project creation to package installation.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/docs/api/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir MyProject\ncd MyProject\ndotnet new console\ndotnet add package NBitcoin\ndotnet restore\n```\n\n----------------------------------------\n\nTITLE: NIST P-256 ECDSA Key Pair and Signatures\nDESCRIPTION: Test vector set for NIST P-256 curve showing private key, public key point coordinates, and signatures using different hash functions on 'sample' and 'test' messages\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncurve: NIST P-256\n\nq = FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\n\nprivate key:\nx = C9AFA9D845BA75166B5C215767B1D6934E50C3DB36E89B127B8A622B120F6721\n\npublic key: U = xG\nUx = 60FED4BA255A9D31C961EB74C6356D68C049B8923B61FA6CE669622E60F29FB6\nUy = 7903FE1008B8BC99A41AE9E95628BC64F2F1B20C2D7E9F5177A3C294D4462299\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic NBitcoin Console Application\nDESCRIPTION: Example of a simple C# console application using NBitcoin to generate a Bitcoin private key and display its WIF (Wallet Import Format).\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing NBitcoin;\n\nnamespace _125350929\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World! \" + new Key().GetWif(Network.Main));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: NIST P-384 ECDSA Key Pair and Signatures\nDESCRIPTION: Test vector set for NIST P-384 curve showing private key, public key point coordinates, and signatures using different hash functions on 'sample' and 'test' messages\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncurve: NIST P-384\n\nq = FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973\n\nprivate key:\nx = 6B9D3DAD2E1B8C1C05B19875B6659F4DE23C3B667BF297BA9AA47740787137D896D5724E4C70A825F872C9EA60D2EDF5\n\npublic key: U = xG\nUx = EC3A4E415B4E19A4568618029F427FA5DA9A8BC4AE92E02E06AAE5286B300C64DEF8F0EA9055866064A254515480BC13\nUy = 8015D9B72D7D57244EA8EF9AC0C621896708A59367F9DFB9F54CA84B3F1C9DB1288B231C3AE0D4FE7344FD2533264720\n```\n\n----------------------------------------\n\nTITLE: ECDSA Signature Test Vectors for NIST P-521 Curve\nDESCRIPTION: Test vectors for ECDSA signature generation using the NIST P-521 curve with various hash functions. The examples include key pair details (private key x, public key coordinates Ux and Uy), along with signatures for test messages using different hash algorithms.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n   Key pair:\n\n   curve: NIST P-521\n\n   q = 1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n       FFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386\n       409\n   (qlen = 521 bits)\n\n   private key:\n\n   x = 0FAD06DAA62BA3B25D2FB40133DA757205DE67F5BB0018FEE8C86E1B68C7E75C\n       AA896EB32F1F47C70855836A6D16FCC1466F6D8FBEC67DB89EC0C08B0E996B83\n       538\n\n   public key: U = xG\n\n   Ux = 1894550D0785932E00EAA23B694F213F8C3121F86DC97A04E5A7167DB4E5BCD3\n        71123D46E45DB6B5D5370A7F20FB633155D38FFA16D2BD761DCAC474B9A2F502\n        3A4\n\n   Uy = 0493101C962CD4D2FDDF782285E64584139C2F91B47F87FF82354D6630F746A2\n        8A0DB25741B5B34A828008B22ACC23F924FAAFBD4D33F81EA66956DFEAA2BFDF\n        CF5\n\n   Signatures:\n\n   With SHA-1, message = \"sample\":\n   k = 089C071B419E1C2820962321787258469511958E80582E95D8378E0C2CCDB3CB\n       42BEDE42F50E3FA3C71F5A76724281D31D9C89F0F91FC1BE4918DB1C03A5838D\n       0F9\n   r = 0343B6EC45728975EA5CBA6659BBB6062A5FF89EEA58BE3C80B619F322C87910\n       FE092F7D45BB0F8EEE01ED3F20BABEC079D202AE677B243AB40B5431D497C55D\n       75D\n   s = 0E7B0E675A9B24413D448B8CC119D2BF7B2D2DF032741C096634D6D65D0DBE3D\n       5694625FB9E8104D3B842C1B0E2D0B98BEA19341E8676AEF66AE4EBA3D5475D5\n       D16\n\n   With SHA-224, message = \"sample\":\n   k = 121415EC2CD7726330A61F7F3FA5DE14BE9436019C4DB8CB4041F3B54CF31BE0\n       493EE3F427FB906393D895A19C9523F3A1D54BB8702BD4AA9C99DAB2597B9211\n       3F3\n   r = 1776331CFCDF927D666E032E00CF776187BC9FDD8E69D0DABB4109FFE1B5E2A3\n       0715F4CC923A4A5E94D2503E9ACFED92857B7F31D7152E0F8C00C15FF3D87E2E\n       D2E\n   s = 050CB5265417FE2320BBB5A122B8E1A32BD699089851128E360E620A30C7E17B\n       A41A666AF126CE100E5799B153B60528D5300D08489CA9178FB610A2006C254B\n       41F\n\n   With SHA-256, message = \"sample\":\n   k = 0EDF38AFCAAECAB4383358B34D67C9F2216C8382AAEA44A3DAD5FDC9C3257576\n       1793FEF24EB0FC276DFC4F6E3EC476752F043CF01415387470BCBD8678ED2C7E\n       1A0\n   r = 1511BB4D675114FE266FC4372B87682BAECC01D3CC62CF2303C92B3526012659\n       D16876E25C7C1E57648F23B73564D67F61C6F14D527D54972810421E7D87589E\n       1A7\n   s = 04A171143A83163D6DF460AAF61522695F207A58B95C0644D87E52AA1A347916\n       E4F7A72930B1BC06DBE22CE3F58264AFD23704CBB63B29B931F7DE6C9D949A7E\n       CFC\n\n   With SHA-384, message = \"sample\":\n   k = 1546A108BC23A15D6F21872F7DED661FA8431DDBD922D0DCDB77CC878C8553FF\n       AD064C95A920A750AC9137E527390D2D92F153E66196966EA554D9ADFCB109C4\n       211\n   r = 1EA842A0E17D2DE4F92C15315C63DDF72685C18195C2BB95E572B9C5136CA4B4\n       B576AD712A52BE9730627D16054BA40CC0B8D3FF035B12AE75168397F5D50C67\n       451\n   s = 1F21A3CEE066E1961025FB048BD5FE2B7924D0CD797BABE0A83B66F1E35EEAF5\n       FDE143FA85DC394A7DEE766523393784484BDF3E00114A1C857CDE1AA203DB65\n       D61\n\n   With SHA-512, message = \"sample\":\n   k = 1DAE2EA071F8110DC26882D4D5EAE0621A3256FC8847FB9022E2B7D28E6F1019\n       8B1574FDD03A9053C08A1854A168AA5A57470EC97DD5CE090124EF52A2F7ECBF\n       FD3\n   r = 0C328FAFCBD79DD77850370C46325D987CB525569FB63C5D3BC53950E6D4C5F1\n       74E25A1EE9017B5D450606ADD152B534931D7D4E8455CC91F9B15BF05EC36E37\n       7FA\n   s = 0617CCE7CF5064806C467F678D3B4080D6F1CC50AF26CA209417308281B68AF2\n       82623EAA63E5B5C0723D8B8C37FF0777B1A20F8CCB1DCCC43997F1EE0E44DA4A\n       67A\n\n   With SHA-1, message = \"test\":\n   k = 0BB9F2BF4FE1038CCF4DABD7139A56F6FD8BB1386561BD3C6A4FC818B20DF5DD\n       BA80795A947107A1AB9D12DAA615B1ADE4F7A9DC05E8E6311150F47F5C57CE8B\n       222\n   r = 13BAD9F29ABE20DE37EBEB823C252CA0F63361284015A3BF430A46AAA80B87B0\n       693F0694BD88AFE4E661FC33B094CD3B7963BED5A727ED8BD6A3A202ABE009D0\n       367\n   s = 1E9BB81FF7944CA409AD138DBBEE228E1AFCC0C890FC78EC8604639CB0DBDC90\n       F717A99EAD9D272855D00162EE9527567DD6A92CBD629805C0445282BBC91679\n       7FF\n\n   With SHA-224, message = \"test\":\n   k = 040D09FCF3C8A5F62CF4FB223CBBB2B9937F6B0577C27020A99602C25A011369\n       87E452988781484EDBBCF1C47E554E7FC901BC3085E5206D9F619CFF07E73D6F\n       706\n   r = 1C7ED902E123E6815546065A2C4AF977B22AA8EADDB68B2C1110E7EA44D42086\n       BFE4A34B67DDC0E17E96536E358219B23A706C6A6E16BA77B65E1C595D43CAE1\n       7FB\n   s = 177336676304FCB343CE028B38E7B4FBA76C1C1B277DA18CAD2A8478B2A9A9F5\n       BEC0F3BA04F35DB3E4263569EC6AADE8C92746E4C82F8299AE1B8F1739F8FD51\n       9A4\n\n   With SHA-256, message = \"test\":\n   k = 01DE74955EFAABC4C4F17F8E84D881D1310B5392D7700275F82F145C61E84384\n       1AF09035BF7A6210F5A431A6A9E81C9323354A9E69135D44EBD2FCAA7731B909\n       258\n   r = 00E871C4A14F993C6C7369501900C4BC1E9C7B0B4BA44E04868B30B41D807104\n       2EB28C4C250411D0CE08CD197E4188EA4876F279F90B3D8D74A3C76E6F1E4656\n       AA8\n   s = 0CD52DBAA33B063C3A6CD8058A1FB0A46A4754B034FCC644766CA14DA8CA5CA9\n       FDE00E88C1AD60CCBA759025299079D7A427EC3CC5B619BFBC828E7769BCD694\n       E86\n\n   With SHA-384, message = \"test\":\n   k = 1F1FC4A349A7DA9A9E116BFDD055DC08E78252FF8E23AC276AC88B1770AE0B5D\n       CEB1ED14A4916B769A523CE1E90BA22846AF11DF8B300C38818F713DADD85DE0\n       C88\n   r = 14BEE21A18B6D8B3C93FAB08D43E739707953244FDBE924FA926D76669E7AC8C\n       89DF62ED8975C2D8397A65A49DCC09F6B0AC62272741924D479354D74FF60755\n       78C\n   s = 133330865C067A0EAF72362A65E2D7BC4E461E8C8995C3B6226A21BD1AA78F0E\n       D94FE536A0DCA35534F0CD1510C41525D163FE9D74D134881E35141ED5E8E95B\n       979\n\n   With SHA-512, message = \"test\":\n   k = 16200813020EC986863BEDFC1B121F605C1215645018AEA1A7B215A564DE9EB1\n       B38A67AA1128B80CE391C4FB71187654AAA3431027BFC7F395766CA988C964DC\n       56D\n   r = 13E99020ABF5CEE7525D16B69B229652AB6BDF2AFFCAEF38773B4B7D08725F10\n       CDB93482FDCC54EDCEE91ECA4166B2A7C6265EF0CE2BD7051B7CEF945BABD47E\n       E6D\n   s = 1FBD0013C674AA79CB39849527916CE301C66EA7CE8B80682786AD60F98F7E78\n       A19CA69EFF5C57400E3B3A0AD66CE0978214D13BAF4E9AC60752F7B155E2DE4D\n       CE3\n```\n\n----------------------------------------\n\nTITLE: Generating Cryptocurrency Address in C#\nDESCRIPTION: Demonstrates how to generate a cryptocurrency address using a network instance and a new key pair.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Altcoins/README.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nConsole.WriteLine(new Key().PubKey.GetAddress(network));\n```\n\n----------------------------------------\n\nTITLE: ECDSA Signature Test Vectors for NIST K-163 Curve\nDESCRIPTION: Test vectors for ECDSA signature generation using the NIST K-163 elliptic curve. The example includes key pair details, curve parameters, and signature values for test messages using different hash algorithms (SHA-1, SHA-224, SHA-256).\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n   Key pair:\n\n   curve: NIST K-163\n\n   q = 4000000000000000000020108A2E0CC0D99F8A5EF\n   (qlen = 163 bits)\n\n   private key:\n\n   x = 09A4D6792295A7F730FC3F2B49CBC0F62E862272F\n\n   public key: U = xG\n\n   Ux = 79AEE090DB05EC252D5CB4452F356BE198A4FF96F\n\n   Uy = 782E29634DDC9A31EF40386E896BAA18B53AFA5A3\n\n   Signatures:\n\n   With SHA-1, message = \"sample\":\n   k = 09744429FA741D12DE2BE8316E35E84DB9E5DF1CD\n   r = 30C45B80BA0E1406C4EFBBB7000D6DE4FA465D505\n   s = 38D87DF89493522FC4CD7DE1553BD9DBBA2123011\n\n   With SHA-224, message = \"sample\":\n   k = 323E7B28BFD64E6082F5B12110AA87BC0D6A6E159\n   r = 38A2749F7EA13BD5DA0C76C842F512D5A65FFAF32\n   s = 064F841F70112B793FD773F5606BFA5AC2A04C1E8\n\n   With SHA-256, message = \"sample\":\n   k = 23AF4074C90A02B3FE61D286D5C87F425E6BDD81B\n   r = 113A63990598A3828C407C0F4D2438D990DF99A7F\n```\n\n----------------------------------------\n\nTITLE: Initializing Litecoin Testnet Network in C#\nDESCRIPTION: Shows how to initialize a Litecoin testnet network instance using NBitcoin.Altcoins library.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Altcoins/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nNetwork network = NBitcoin.Altcoins.Litecoin.Instance.Testnet;\n```\n\n----------------------------------------\n\nTITLE: ECDSA Signatures with SHA-256 for Message \"test\"\nDESCRIPTION: Example of ECDSA signature generation using SHA-256 hash algorithm with the message \"test\". Includes the random value k, and the resulting signature components r and s.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-256, message = \"test\":\n   k = 06EBA3D58D0E0DFC406D67FC72EF0C943624CF40019D1E48C3B54CCAB0594AFD\n       5DEE30AEBAA22E693DBCFECAD1A85D774313DAD\n   r = 0BB27755B991D6D31757BCBF68CB01225A38E1CFA20F775E861055DD108ED7EA\n       455E4B96B2F6F7CD6C6EC2B3C70C3EDDEB9743B\n   s = 0C5BE90980E7F444B5F7A12C9E9AC7A04CA81412822DD5AD1BE7C45D5032555E\n       A070864245CF69266871FEB8CD1B7EDC30EF6D5\n```\n\n----------------------------------------\n\nTITLE: Installing NBitcoin via NuGet Package Manager Console\nDESCRIPTION: Command to install NBitcoin package using NuGet Package Manager Console in Visual Studio for legacy .NET Framework projects.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nInstall-Package NBitcoin\n```\n\n----------------------------------------\n\nTITLE: Parsing Bitcoin Raw Transaction Data in Hexadecimal Format\nDESCRIPTION: This code snippet contains raw Bitcoin transaction data in hexadecimal format. Each transaction includes inputs with references to previous transactions, signature scripts, output addresses, and amounts. The data follows the standard Bitcoin transaction serialization format.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/block169482.txt#2025-04-22_snippet_3\n\nLANGUAGE: hex\nCODE:\n```\n0001d56ccea1e9d8033cbe2adf31585670c995787f921d5c55c9a23a9e8f34ab2316010000008b4830450220577462bbd2765fb24fec84e7942441964377efaca0a3aab23b5c84ebfab11421022100932faf9a0bca3933a39ee9bad42e773ebfdd9d73c305b94691e72ac025078b9a0141047b4d70aaf945ba83efc4abb46fa10776617bf59e14bcf1eff09cab37eac3029040f13f5efb0ed75066d7a5fa6f30632f3098dc79f241ce15314f349650180773ffffffff0270c4ee4e010000001976a9145a259cee15e009227e27f6d1cb4e1bb426f440aa88ac00ca9a3b000000001976a9144687cc4348c91e66e914180cf74fb1940720433188ac0000000001000000016e465f3f779d99140b7bbecde705735ca99a5ec162f9750d77f35916fb900445000000006c4930460221008eb5636c95569353e0d6ac5e3b4d2dbad9e056eb9d5aef72aebe40d416604c4202210092064ec83afa289b8299df394f57cd30bf4e8e716deacb074f81803b61d68081012103f3780770ae21b9f1f7ac1ec6610573ac2f2aeb7a28daa0fd43b12d4f06589b4effffffff02560e9826000000001976a9146cf42c3a2d8c1555a7209949b3233fd70afbf06f88ac4694e001000000001976a9148f1d90c296a237db50b5da17c63a9dafdd68a78f88ac00000000010000000935065ad553ec98059c883ec5d9c20e5cb7d2de0a82b6944505d6034142ed028c070000008b4830450220105626f20a1a48cc654c3b6bac6b5d998fb3873bae74a625d7602a8b15135f23022100bccfd4753e290723429e110df2110c046acbe96f91b3e16903112b84835b930a0141045e5b6c51cea75e0a83436d45fe006d24ba86835279cc137f8e3a8930047f19a5383ce80c073b8907e9a7a18c8cbdf9dc5be35e906548be939d6e61aeb9145b46ffffffff0dd3f762f168da15471b3d418170b936d536830d37f39d07db11a4c2ec4377e8040000008b48304502207f69c65a2fd877dcdf0afe65f24b52446e65a0cee825575a3b8c748a30967471022100f3bc6d6da462ecbfa0657e439e70d17cebaf7d6d8ebe91b76ff2d1002a73dc2a014104d44e24d39e89d5d288926e359d2fb7f8823a437723773c2bd72db6a39d5c7519edb61aa2205728cd95c2ffa82ac116746f9fe6d72c3ecb779d7f0075efecb0f4ffffffff4ac14d431aa84047e4771941149aa013568ee0860da362ed014d4105b55dad25030000008b48304502206c14fa042d20a48e3f319684ff2abf6c452deef6757ff87a8454ae47d8c6c1f2022100cabe24b00706e59cc638b734da68cf41493a00c456c27ca4f162c1ee36ec6752014104614116bd8d63d085178c32e61a46a33c882e03abc8eefd87154e311c459b5d3b411b96d1326ff7290005c095566f5d9fb306a404def757e43b50adef7cc61041ffffffff4cc818c3cc51edefa54c54f69dcd13636f54409080eec597c741004f62878419040000008c493046022100bce4e972ba51650e70cd0c97ee26853cc27cf9aa7c2de3f37e1cf6a3d28fab62022100c35a2b4a64f8a361383d08af229d47d910dbed89d04066b391f4b977f01d2492014104b6df1923948573d2d87c20d0551c83b3f88af4bbce5e7b3bb40baa8a8a2036642eca67c38b2276cf5ede8d2d0a72050f6f1918b820a5522ed61f544bb623f98affffffff558cf02099e0cf8bb35ca533781ebd8eacfef45e82f768e7c0f102aa9c8898df090000008b483045022029f98e403cb81dc17d4f52f47c06933306e9193aeb80565e7b8c292836d0c87d022100872a324c18acded3e826b3b3cf76fee4d6f990e3e2d14f946c41b7b34a49d4c0014104614116bd8d63d085178c32e61a46a33c882e03abc8eefd87154e311c459b5d3b411b96d1326ff7290005c095566f5d9fb306a404def757e43b50adef7cc61041ffffffffaaff63dc11d2b023cf5abbd3a8cf071ea76e3f3a14f7375299125d517a513a0d060000008c493046022100f9c5a74a6e76ed58ef6d37168b9b990398981ff450aebbcfe0a76284fd955eeb022100a708f4166b879a45520aa665281e36f0d379ba5360b42c3e6c2d254651869e270141045e5b6c51cea75e0a83436d45fe006d24ba86835279cc137f8e3a8930047f19a5383ce80c073b8907e9a7a18c8cbdf9dc5be35e906548be939d6e61aeb9145b46ffffffffd6160d863cd0035a6b3357348071fa35f01b3d1761de68b0cdf1a1c3e09d2d2a070000008b483045022100a103d8ca6943aa42bea864a279e012bb7615b1f5dc5970fb4d9061c8db59a70802202eeeb2a2abf4ea194eb6807dca1dd70753f354b7fb7bf16f38ef6adb69046fe80141045e5b6c51cea75e0a83436d45fe006d24ba86835279cc137f8e3a8930047f19a5383ce80c073b8907e9a7a18c8cbdf9dc5be35e906548be939d6e61aeb9145b46ffffffffe6e3136b8356165c24318b9d47e5b39c1ce2a5e93a564155969f10b1dfffebea0b0000008a47304402201b17b9ef5dbff966b26f726ffc2a743c7f647c3b93f82dd2455a472c7668929a022039ab5314c2ffd37cdb3fbf6765092ec5987a1ac8f2fc779fdeffdf20a4b314880141045e5b6c51cea75e0a83436d45fe006d24ba86835279cc137f8e3a8930047f19a5383ce80c073b8907e9a7a18c8cbdf9dc5be35e906548be939d6e61aeb9145b46fffffffff26828f5fe527b1b167fee766b5453dec7f5ef3633d4ea0b30c52c7ef9a6e94d030000008c493046022100f5fb4dfe2482aaf9bcb2c571af30426dfc14288067effa13c16d080402a0622e02210096551a72ebf14f153d8dfd1222826f023359848eb53198cb71958260adb8db060141045e5b6c51cea75e0a83436d45fe006d24ba86835279cc137f8e3a8930047f19a5383ce80c073b8907e9a7a18c8cbdf9dc5be35e906548be939d6e61aeb9145b46ffffffff0228430f00000000001976a914d952cc64a43bd6e5a91777f46a70dae8229205ba88ac2d124801000000001976a9140ad585b64f95bc308bf53846c40bee28be12332d88ac000000000100000004f136e6a28a94627fdf326890fe0601363058abc59672993e3c3222458cbf9c0c000000008c493046022100aab028e4a0767c24f39907b983db595a3923cb66ad57aeb126e01373ccc93c0f022100df0acd419df04a7d148eafe07e12d058399b2f213f8d87f2094f50e13c7a53860141044ce5f85ecd818f4291e7d98af8f7c59cfce7a0631444c6200b828754099256d5abd18c6f4be9563165dffdd4af050632137e5989f287badb28a8777311f50f68ffffffff1c8bf190770b81e509bafcf3c7eb398bc5596fcc23151acbd59c179a628deedb000000008b4830450220509e9d577f5b6bd2d9e9153834270925616dde031ff1e7b2552bbc3cb2bc8790022100fc0b226a0a9f41d28dd310ad4819c188c09958a2c0ff2746a476140acc6932e901410464d8d67d3d35bf80c7ac43ec817e0055dde69973f6193569cc473a850f60e3657eac28f8e127bb7e54bd7f79ffe8c738d0907c63fe3719d7664c72b0385ebf90ffffffffff00e060608b070383cd8b09d455930807bcddcd0129d4aeec1a17e96f246147010000008c493046022100a86a52301d7d96fff0b9bfa7aa804789f794e3fa1fe66c5a3e476e14c4a201d6022100ce6d634e73facd484932af2a163193bf0a2a683f2517a3c0623ab7a028845111014104250c809d3937d70266788878727734c41fb9165f60d5cf2be70093895939dc1a641e537167d00cbc3eb14e7c5e81909b0576a1f1ade6ec0f376a009a41fdf914ffffffffb1f059f139321fc64982b108bd3ae3da221d6e676bf99b0d5bfc22c03dc6be30010000008b48304502204b9997f9df18516c66580a7d78ba14b5118502810231f55c814db510b880a52a02210095e08beada079e8650ec1755166227a49ca53da61739917eb3fc23c4a256eb78014104bc40933467729bd26c61dd44d0f805dce966f1e761d6648fc3633bb716e29627e8e92ac6acccd0146a045b07c3760bba963ed0c5ac9d0fc802ca8fb86381cf05ffffffff0240420f00000000001976a9141998d29efb48260027cfd476f8aabe84e267593988ac80969800000000001976a91400fa2253781a54e1bf09c320422d80e7ff6cfcf188ac000000000100000002e1b9fe53fc9cd6e9e901d890bd13d30c38088521d92518c349aa6be04f11f810000000008a473044022073ad31b44079b3cdab00cf93a94ad0c7d850d03b143a0bbc60e1e3e881b7d84302201acb2e22d7f863fee935f39300d0e64c511d40b8b40ebc5bb1d40d26bcbf2194014104972a44a033bb076768dbbde2087dbb70f4cf67251adaeedcfcf1b8a435b1d82be14dcb3db7c84018909dbf54cb3f2988d1bd1180bbab328d9d2c087e5f3cadb3ffffffffc726b2f27d7bbb167799ce24dcda439efba05f003954d077ed160abf9668e3a1000000008c493046022100afa7347ca6a51afe5a7b853e68c58c23656c320778230991741ad33fd9bb6734022100bdc0f166a55876af990e4d080ccf302f9bc07cacdacd93370d0920263283b96d014104711db19d5230b5d93cf5b5b9ceb7b66b2cb5e81fb31114830ca01ae88009f060d1dffc5580ee524ca66dc4acfbf8c4b1a4e2fe99a67f1df58eb5949108ab97daffffffff0294e41f00000000001976a914aad9ed59386606417181f6262d243b86ef4df27388ac7ed73d00000000001976a914ae9feccf7a0c4d8bd05cea5547b245b87ffe80dd88ac0000000001000000017d2eaff41a70e3a478b4e020d3c418f4dbabb19f905cd134a1fd829ee23b0f6c000000008b4830450220442b436b281482b60db9bfdb6ed62364f58fa442a2f3b8af0bb4d22abdabc723022100d15b87240a9ef719ba1f113bfafce73e2208aa6118aa13e89356668d69b6cf01014104682a1dde1b8664e47ce86bbc54147653c357e54c1aecfe1b48b7fb24891cb6e15a6841088548d4d046a7c42a257da5c91de41dab41b71b8b09074e404a21e73bffffffff02ecc20000000000001976a9140c4c7ce5bde0875ad379e06a1d77045f0bdd59e088ac64000000000000001976a9144e96b9359cebea9b510a1b1af4a9d7cb371bc46988ac00000000\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio Code for NBitcoin Debugging\nDESCRIPTION: JSON configuration for launch.json in Visual Studio Code to enable debugging into NBitcoin source code using SourceLink.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"justMyCode\": false,\n\"symbolOptions\": {\n    \"searchPaths\": [ \"https://symbols.nuget.org/download/symbols\" ],\n    \"searchMicrosoftSymbolServer\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NBitcoin.Secp256k1 in .NET Framework\nDESCRIPTION: Command to install the NBitcoin.Secp256k1 package in a .NET Framework project using the Package Manager Console in Visual Studio.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Secp256k1/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nInstall-Package NBitcoin.Secp256k1\n```\n\n----------------------------------------\n\nTITLE: Installing NBitcoin.Secp256k1 in .NET Core\nDESCRIPTION: Command to add the NBitcoin.Secp256k1 package to a .NET Core project using the dotnet CLI.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Secp256k1/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package NBitcoin.Secp256k1\n```\n\n----------------------------------------\n\nTITLE: ECDSA B-571 Signatures with SHA-1 for Message \"sample\"\nDESCRIPTION: Example of ECDSA signature generation on the B-571 curve using SHA-1 hash algorithm with the message \"sample\". Includes the random value k, and the resulting signature components r and s in their full 571-bit representation.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-1, message = \"sample\":\n   k = 2669FAFEF848AF67D437D4A151C3C5D3F9AA8BB66EDC35F090C9118F95BA0041\n       B0993BE2EF55DAAF36B5B3A737C40DB1F6E3D93D97B8419AD6E1BB8A5D4A0E9B\n       2E76832D4E7B862\n   r = 147D3EB0EDA9F2152DFD014363D6A9CE816D7A1467D326A625FC4AB0C786E1B7\n       4DDF7CD4D0E99541391B266C704BB6B6E8DCCD27B460802E0867143727AA4155\n       55454321EFE5CB6\n   s = 17319571CAF533D90D2E78A64060B9C53169AB7FC908947B3EDADC54C79CCF0A\n       7920B4C64A4EAB6282AFE9A459677CDA37FD6DD50BEF18709590FE18B923BDF7\n       4A66B189A850819\n```\n\n----------------------------------------\n\nTITLE: Installing NBitcoin in Unity 3.5 Projects\nDESCRIPTION: Command-line instructions for cloning the NBitcoin repository, checking out the Unity 3.5 compatible branch, and building the libraries. The resulting DLLs should be placed in the Unity project's asset folder.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/docs/api/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/MetacoSA/NBitcoin/\ncd NBitcoin\ngit checkout unity35\nbuild-unity.bat\n```\n\n----------------------------------------\n\nTITLE: ECDSA B-571 Signatures with SHA-224 for Message \"sample\"\nDESCRIPTION: Example of ECDSA signature generation on the B-571 curve using SHA-224 hash algorithm with the message \"sample\". Includes the random value k, and the resulting signature components r and s in their full 571-bit representation.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-224, message = \"sample\":\n   k = 2EAFAD4AC8644DEB29095BBAA88D19F31316434F1766AD4423E0B54DD2FE0C05\n       E307758581B0DAED2902683BBC7C47B00E63E3E429BA54EA6BA3AEC33A94C9A2\n       4A6EF8E27B7677A\n   r = 10F4B63E79B2E54E4F4F6A2DBC786D8F4A143ECA7B2AD97810F6472AC6AE2085\n       3222854553BE1D44A7974599DB7061AE8560DF57F2675BE5F9DD94ABAF3D47F1\n       582B318E459748B\n   s = 3BBEA07C6B269C2B7FE9AE4DDB118338D0C2F0022920A7F9DCFCB7489594C03B\n       536A9900C4EA6A10410007222D3DAE1A96F291C4C9275D75D98EB290DC0EEF17\n       6037B2C7A7A39A3\n```\n\n----------------------------------------\n\nTITLE: Configuring NodeBuilder for Altcoin Testing in C#\nDESCRIPTION: Example implementation of NodeBuilder.Create method for setting up altcoin testing environment with Litecoin configuration.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Altcoins/README.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static NodeBuilder Create([CallerMemberName] string caller = null)\n{\n\treturn NodeBuilder.Create(NodeDownloadData.Litecoin.v0_15_1, Altcoins.AltNetworkSets.Litecoin.Regtest, caller);\n}\n```\n\n----------------------------------------\n\nTITLE: ECDSA B-571 Signatures with SHA-512 for Message \"sample\"\nDESCRIPTION: Example of ECDSA signature generation on the B-571 curve using SHA-512 hash algorithm with the message \"sample\". Includes the random value k, and the resulting signature components r and s in their full 571-bit representation.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-512, message = \"sample\":\n   k = 3FF373833A06C791D7AD586AFA3990F6EF76999C35246C4AD0D519BFF180CA18\n       80E11F2FB38B764854A0AE3BECDDB50F05AC4FCEE542F207C0A6229E2E19652F\n       0E647B9C4882193\n   r = 1C26F40D940A7EAA0EB1E62991028057D91FEDA0366B606F6C434C361F04E545\n       A6A51A435E26416F6838FFA260C617E798E946B57215284182BE55F29A355E60\n       24FE32A47289CF0\n   s = 3691DE4369D921FE94EDDA67CB71FBBEC9A436787478063EB1CC778B3DCDC1C4\n       162662752D28DEEDF6F32A269C82D1DB80C87CE4D3B662E03AC347806E3F19D1\n       8D6D4DE7358DF7E\n```\n\n----------------------------------------\n\nTITLE: Running Altcoin Tests Command in .NET\nDESCRIPTION: Command line instruction for running altcoin-specific tests using dotnet test with specific filters and framework settings.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Altcoins/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet test NBitcoin.Tests.csproj --filter \"Altcoins=Altcoins\" -p:ParallelizeTestCollections=false --framework netcoreapp2.1\n```\n\n----------------------------------------\n\nTITLE: ECDSA B-571 Signatures with SHA-1 for Message \"test\"\nDESCRIPTION: Example of ECDSA signature generation on the B-571 curve using SHA-1 hash algorithm with the message \"test\". Includes the random value k, and the resulting signature components r and s in their full 571-bit representation.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-1, message = \"test\":\n   k = 019B506FD472675A7140E429AA5510DCDDC21004206EEC1B39B28A688A8FD324\n       138F12503A4EFB64F934840DFBA2B4797CFC18B8BD0B31BBFF3CA66A4339E4EF\n       9D771B15279D1DC\n   r = 133F5414F2A9BC41466D339B79376038A64D045E5B0F792A98E5A7AA87E0AD01\n       6419E5F8D176007D5C9C10B5FD9E2E0AB8331B195797C0358BA05ECBF24ACE59\n       C5F368A6C0997CC\n   s = 3D16743AE9F00F0B1A500F738719C5582550FEB64689DA241665C4CE4F328BA0\n       E34A7EF527ED13BFA5889FD2D1D214C11EB17D6BC338E05A56F41CAFF1AF7B8D\n       574DB62EF0D0F21\n```\n\n----------------------------------------\n\nTITLE: Calculating SHA3-224 Hash for 0-bit Message\nDESCRIPTION: Demonstrates the SHA3-224 hash value for an empty message (0 bits). The hash is represented as a sequence of hexadecimal values.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/SHA3TestVectors.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMsg as bit string\n    #(empty message)\n\nHash val is\n    6B 4E 03 42 36 67 DB B7 3B 6E 15 45 4F 0E B1 AB\n    D4 59 7F 9A 1B 07 8E 3F 5B 5A 6B C7\n```\n\n----------------------------------------\n\nTITLE: NIST P-224 ECDSA Key Pair and Signatures\nDESCRIPTION: Test vector set for NIST P-224 curve showing private key, public key point coordinates, and signatures using different hash functions on 'sample' and 'test' messages\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncurve: NIST P-224\n\nq = FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D\n\nprivate key:\nx = F220266E1105BFE3083E03EC7A3A654651F45E37167E88600BF257C1\n\npublic key: U = xG\nUx = 00CF08DA5AD719E42707FA431292DEA11244D64FC51610D94B130D6C\nUy = EEAB6F3DEBE455E3DBF85416F7030CBD94F34F2D6F232C69F3C1385A\n```\n\n----------------------------------------\n\nTITLE: ECDSA Signature Test Vectors for NIST P-384 Curve\nDESCRIPTION: Test vectors showing ECDSA signature generation using the NIST P-384 curve with various hash functions (SHA-1, SHA-224, SHA-256, SHA-384, SHA-512) and test messages. Each test case includes the random value k and resulting signature values r and s.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n   r = 21B13D1E013C7FA1392D03C5F99AF8B30C570C6F98D4EA8E354B63A21D3DAA33\n       BDE1E888E63355D92FA2B3C36D8FB2CD\n   s = F3AA443FB107745BF4BD77CB3891674632068A10CA67E3D45DB2266FA7D1FEEB\n       EFDC63ECCD1AC42EC0CB8668A4FA0AB0\n\n   With SHA-384, message = \"sample\":\n   k = 94ED910D1A099DAD3254E9242AE85ABDE4BA15168EAF0CA87A555FD56D10FBCA\n       2907E3E83BA95368623B8C4686915CF9\n   r = 94EDBB92A5ECB8AAD4736E56C691916B3F88140666CE9FA73D64C4EA95AD133C\n       81A648152E44ACF96E36DD1E80FABE46\n   s = 99EF4AEB15F178CEA1FE40DB2603138F130E740A19624526203B6351D0A3A94F\n       A329C145786E679E7B82C71A38628AC8\n\n   With SHA-512, message = \"sample\":\n   k = 92FC3C7183A883E24216D1141F1A8976C5B0DD797DFA597E3D7B32198BD35331\n       A4E966532593A52980D0E3AAA5E10EC3\n   r = ED0959D5880AB2D869AE7F6C2915C6D60F96507F9CB3E047C0046861DA4A799C\n       FE30F35CC900056D7C99CD7882433709\n   s = 512C8CCEEE3890A84058CE1E22DBC2198F42323CE8ACA9135329F03C068E5112\n       DC7CC3EF3446DEFCEB01A45C2667FDD5\n\n   With SHA-1, message = \"test\":\n   k = 66CC2C8F4D303FC962E5FF6A27BD79F84EC812DDAE58CF5243B64A4AD8094D47\n       EC3727F3A3C186C15054492E30698497\n   r = 4BC35D3A50EF4E30576F58CD96CE6BF638025EE624004A1F7789A8B8E43D0678\n       ACD9D29876DAF46638645F7F404B11C7\n   s = D5A6326C494ED3FF614703878961C0FDE7B2C278F9A65FD8C4B7186201A29916\n       95BA1C84541327E966FA7B50F7382282\n\n   With SHA-224, message = \"test\":\n   k = 18FA39DB95AA5F561F30FA3591DC59C0FA3653A80DAFFA0B48D1A4C6DFCBFF6E\n       3D33BE4DC5EB8886A8ECD093F2935726\n   r = E8C9D0B6EA72A0E7837FEA1D14A1A9557F29FAA45D3E7EE888FC5BF954B5E624\n       64A9A817C47FF78B8C11066B24080E72\n   s = 07041D4A7A0379AC7232FF72E6F77B6DDB8F09B16CCE0EC3286B2BD43FA8C614\n       1C53EA5ABEF0D8231077A04540A96B66\n\n   With SHA-256, message = \"test\":\n   k = 0CFAC37587532347DC3389FDC98286BBA8C73807285B184C83E62E26C401C0FA\n       A48DD070BA79921A3457ABFF2D630AD7\n   r = 6D6DEFAC9AB64DABAFE36C6BF510352A4CC27001263638E5B16D9BB51D451559\n       F918EEDAF2293BE5B475CC8F0188636B\n   s = 2D46F3BECBCC523D5F1A1256BF0C9B024D879BA9E838144C8BA6BAEB4B53B47D\n       51AB373F9845C0514EEFB14024787265\n\n   With SHA-384, message = \"test\":\n   k = 015EE46A5BF88773ED9123A5AB0807962D193719503C527B031B4C2D225092AD\n       A71F4A459BC0DA98ADB95837DB8312EA\n   r = 8203B63D3C853E8D77227FB377BCF7B7B772E97892A80F36AB775D509D7A5FEB\n       0542A7F0812998DA8F1DD3CA3CF023DB\n   s = DDD0760448D42D8A43AF45AF836FCE4DE8BE06B485E9B61B827C2F13173923E0\n       6A739F040649A667BF3B828246BAA5A5\n\n   With SHA-512, message = \"test\":\n   k = 3780C4F67CB15518B6ACAE34C9F83568D2E12E47DEAB6C50A4E4EE5319D1E8CE\n       0E2CC8A136036DC4B9C00E6888F66B6C\n   r = A0D5D090C9980FAF3C2CE57B7AE951D31977DD11C775D314AF55F76C676447D0\n       6FB6495CD21B4B6E340FC236584FB277\n   s = 976984E59B4C77B0E8E4460DCA3D9F20E07B9BB1F63BEEFAF576F6B2E8B22463\n       4A2092CD3792E0159AD9CEE37659C736\n```\n\n----------------------------------------\n\nTITLE: NIST P-192 ECDSA Key Pair and Signatures\nDESCRIPTION: Test vector set for NIST P-192 curve showing private key, public key point coordinates, and signatures using different hash functions on 'sample' and 'test' messages\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncurve: NIST P-192\n\nq = FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831\n\nprivate key:\nx = 6FAB034934E4C0FC9AE67F5B5659A9D7D1FEFD187EE09FD4\n\npublic key: U = xG\nUx = AC2C77F529F91689FEA0EA5EFEC7F210D8EEA0B9E047ED56\nUy = 3BC723E57670BD4887EBC732C523063D0A7C957BC97C1C43\n```\n\n----------------------------------------\n\nTITLE: Parsing Raw Bitcoin Transaction Data with NBitcoin\nDESCRIPTION: This snippet contains raw Bitcoin transaction data, including multiple inputs and outputs. Each line represents a transaction output with an amount (in satoshis) and a Bitcoin address. This data is typically used for testing or analysis with Bitcoin libraries like NBitcoin.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/block169482.txt#2025-04-22_snippet_1\n\nLANGUAGE: raw\nCODE:\n```\n149bde67c082ba576c08c07550dd672ab0d29bcdaa88acbeed5b01000000001976a914603f7e20daa5b485f7f3d65cced91debc1008d0c88ac9b8a5d01000000001976a914c60a6cdb3d387c0ad62abddb0a40ad637b95806988acf13f5e01000000001976a914a0b4a82b554e1246cef35fd097498122dc72a7e488ac9e565e01000000001976a9142c49c298699105f93580e60bb7b6c80c8fae1a6a88acc6105f01000000001976a9144d9af9defd15c0be2c655ad6439f0893a0baf21a88ac57e55f01000000001976a914f94bfd9d425d6c66f8d71c45402f7d3f26b9f7c988ac27e77701000000001976a914923f945a6f337c6fe6d4862ea92dcc12c0d13e5388accd657e01000000001976a914a46782b2365ef35c12d63740258ca8b29a550d4788ac24a37e01000000001976a914d9f4097a319c5c7d7ca9024776e84ac482fa127988acc84c9201000000001976a914386b1380de253b61c07c0fb26dc9ffedd5277f1088acb3c99801000000001976a914093064e56638d7d2b7f122d073f36f2adbddae3988ac0da39901000000001976a914fe8548ba52272233428c51268aca61f8b7046e8688ac65119d01000000001976a9140e395d4568e071968db0e8e775f891021d4c82f088acc6de9d01000000001976a914c7105289145e95e024bfae5c10f8970cf2de2c5388ac4d4da301000000001976a914647484ab81427b30333eeaae714ba08a0980a83288ac816fa901000000001976a914754f36491050c2cc39925b15182e0af97c9f724c88ac8ddfac01000000001976a9144a54a287afa5d094f233846407fba86b19dd84e988ace5d0b201000000001976a914dbd93093ff21bb585a5552eeadfb677eed3a183188ac62a3b601000000001976a91444e9f144795f2c3add12eb416db7a50ed2675e2888acddf8d301000000001976a91468212a9bc5becbc88fb79c69e72a55ef80049d1188ac04f3d401000000001976a9144ab732c2c219e018665ed2eea33cdbff254afa3088acd7dee501000000001976a9140aca7ad87e8ed090e2d8823028ea1b2253f2db9788ac50d4f401000000001976a914cef0bdba115a80124b7aa65ebbbb6fd3d0d52d1d88ac30571002000000001976a91493fc985a90cff6578bd9f9fda84b2b27ceb1aaeb88acf7b41502000000001976a9145ad5caeca9c718df0c27ed7c3756e18ba86ba6e788ac6b101c02000000001976a9140af27cf6a67f19572ab58189994866937284e13f88ac033f1e02000000001976a914245f92b93947b6fe9b5d933d22b6eef812f211d088ac60b12202000000001976a91480207c9f445b47ec5e2a4607861ea2d8fd87718188ac40bc2d02000000001976a91491bf8d466b9803625bd48ac340bedd79e207ab5788ac80592e02000000001976a914b66fdd1a724b6f654b0ab0ce0188800f12e5e73088acaad13b02000000001976a914a195addb09eb89eaa121cb9e1c271c06d7eb440788ac2f163c02000000001976a914a324583efbfee0e490947670012976bf8cf7700c88ac6e2d7202000000001976a914e2d0349044b68081a76c1019b4073cc31bb322bf88ac38177b02000000001976a914d20efa2a83be30474cb8f423d4f880fe8eee2f8d88ac49647d02000000001976a914514314f06c224a610054adcfc57b0378e6262e7888ac45849202000000001976a914e2561b22f7f00045e6dbdfc58cf26d15397511ba88acc0eac802000000001976a91467cb6e9ad1ea9e733fd97726d7cee29feddca90688ac8e7cd202000000001976a91482558652a6f8744aabb8662a3dbef9ce5f8a704c88ac4b76e402000000001976a914160767ea477550a19b9fbb7d91cc3047e8adac3588ac34120103000000001976a914bc10b9cdd3e340ba22ba1c8fb48606d133057e2b88ac3d801003000000001976a91414687bd0acd97ff2d8293b7c3a36b4cd44394f1088ac23ab2103000000001976a9149fe10fdcc48e8130b21270831073fee3f855c5b288ac27773403000000001976a914a3600299252d37146356e7adf57a7eaee5fedef888ac3b9b3603000000001976a9147c524c56243616edcf2f2e973420e293c82cbe2388acd33f4203000000001976a91418a99959bce205725051f5ead31c4b88379a4fcb88ac27746e03000000001976a914204c795b267971d159ff02d78e86194e04b1b5c588ac515c9303000000001976a914fac746327b5f62aa9aeffecdb6a3080b5a922cb788ace3259c03000000001976a91475378fd49cc4d38b4589a5d00fb7da7aabbc777688acb786b203000000001976a914952cdd75a1cab8791d147475ffa67f4137b7977b88ac4e7cdf03000000001976a91412e635803736b131d621a9d69f54cccf7ae1989e88ac3772f603000000001976a914188ae4c5c9f09bd7deb65dd113ac5ebf50207bb088acecd11504000000001976a9149b0551defdcbf45fd256b40557bcfb90d39ba73688ac96c52904000000001976a914d7fe10226d6ead808edd7d817ef01e11ae9bbbd788ac24012a04000000001976a9147c755030e4fe6386a9cb7aff8d6b3a5ed632d7ea88ac176b0105000000001976a9148465c5e6a3ade6b2a014ecea2463016aae7f8d1488ac8a887005000000001976a9142056277c04d878f25ab2c9a56be0ee54588cc23288ac86ab0806000000001976a914538790f005572bc8666fa3c80e3cb07211d4ea4a88ac4fcf4a06000000001976a914ba0b189cd808746a1efc9921665dfcfe301222e288ac0fb74c07000000001976a914faeb176dd2321e0c73e4276fbda3370507750ebb88ac8e9b9108000000001976a9141d0449d6713973a2312c30baf4b7e87c116e3c6488ac71439808000000001976a914e02e2d4c5fb28a189538c038aad5991a57a09ffa88ac0de4bc09000000001976a9148a6c9beaed2081357c188956a887a74aeddea5c188ace5941f0a000000001976a914f19638af957fad501fb867697b27c2e1bbaa88f788ac3eafb40a000000001976a91427cc7e0def9fb434d51d98ee523bcc1e7514390688aca876d817000000001976a9149c7a3ddca3446a6e36160495a78317fe1cb8f1cc88ac\n```\n\n----------------------------------------\n\nTITLE: Bitcoin Raw Transaction Hex Data\nDESCRIPTION: Complete raw Bitcoin transaction data in hexadecimal format. Contains multiple transaction inputs with scriptSigs, public keys, and signatures. Each input includes sequence numbers and script data.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/block169482.txt#2025-04-22_snippet_2\n\nLANGUAGE: hex\nCODE:\n```\n5f7045dfe69e97728f3fc1654fb9282fd8010000008a47304402200d7560806f2b9628e4f9e51188c6aa32fff83cf9ace5f75a11076fbaf515210f02203b54d382bba98b4cbd466cdb98a939bd8f1c729e189c558a4d89a794068c6c2901410477e479a91c6b01b47a1c00dc5551c51c1607d89bfba9719fd95ced86c926370f03f6bbae19382fd22e5610bf0ce239b4887ea95cf800b13d8fce2205f1fbdbadffffffff...\n```\n\n----------------------------------------\n\nTITLE: Raw Bitcoin Transaction Data in Hexadecimal Format\nDESCRIPTION: This hexadecimal data represents a complete Bitcoin transaction. The data includes transaction version, inputs, outputs, and script data. It appears to be a transaction with multiple payment outputs, possibly from a mining operation or a large distribution transaction.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/block169482.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\\n```\n\n----------------------------------------\n\nTITLE: NIST B-571 Curve Parameters and Key Pair Definition\nDESCRIPTION: Defines the parameters for the NIST B-571 elliptic curve including the curve order q, a private key x, and the corresponding public key U represented by coordinates Ux and Uy.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n   Key pair:\n\n   curve: NIST B-571\n\n   q = 3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n       FFFFFFFE661CE18FF55987308059B186823851EC7DD9CA1161DE93D5174D66E8\n       382E9BB2FE84E47\n   (qlen = 570 bits)\n\n   private key:\n\n   x = 028A04857F24C1C082DF0D909C0E72F453F2E2340CCB071F0E389BCA2575DA19\n       124198C57174929AD26E348CF63F78D28021EF5A9BF2D5CBEAF6B7CCB6C4DA82\n       4DD5C82CFB24E11\n\n   public key: U = xG\n\n   Ux = 4B4B3CE9377550140B62C1061763AA524814DDCEF37B00CD5CDE94F7792BB0E9\n        6758E55DA2E9FEA8FF2A8B6830AE1D57A9CA7A77FCB0836BF43EA5454CDD9FEA\n        D5CCFE7375C6A83\n\n   Uy = 4453B18F261E7A0E7570CD72F235EA750438E43946FBEBD2518B696954767AA7\n        7849C1719E18E1C51652C28CA853426F15C09AA4B579487338ABC7F33768FADD\n        61B5A3A6443A8189\n```\n\n----------------------------------------\n\nTITLE: NIST K-409 ECDSA Test Vectors\nDESCRIPTION: Test vectors for NIST K-409 curve including key pair, public key coordinates, and signatures using different SHA variants with 'sample' message.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ncurve: NIST K-409\n\nq = 7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE5F83B2D4EA20400EC4557D5ED3E3E7CA5B4B5C83B8E01E5FCF\n(qlen = 407 bits)\n\nprivate key:\nx = 29C16768F01D1B8A89FDA85E2EFD73A09558B92A178A2931F359E4D70AD853E569CDAF16DAA569758FB4E73089E4525D8BBFCF\n\npublic key: U = xG\nUx = 0CF923F523FE34A6E863D8BA45FB1FE6D784C8F219C414EEF4DB8362DBBD3CA71AEB28F568668D5D7A0093E2B84F6FAD759DB42\nUy = 13B1C374D5132978A1B1123EBBE9A5C54D1A9D56B09AFDB4ADE93CCD7C4D332E2916F7D4B9D18578EE3C2E2DE4D2ECE0DE63549\n```\n\n----------------------------------------\n\nTITLE: NIST K-283 ECDSA Test Vectors\nDESCRIPTION: Test vectors for NIST K-283 curve including key pair, public key coordinates, and signatures using different SHA variants with 'sample' and 'test' messages.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ncurve: NIST K-283\n\nq = 1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9AE2ED07577265DFF7F94451E061E163C61\n(qlen = 281 bits)\n\nprivate key:\nx = 06A0777356E87B89BA1ED3A3D845357BE332173C8F7A65BDC7DB4FAB3C4CC79ACC8194E\n\npublic key: U = xG\nUx = 25330D0A651D5A20DC6389BC02345117725640AEC3C126612CE444EDD19649BDECC03D6\nUy = 505BD60A4B67182474EC4D1C668A73140F70504A68F39EFCD972487E9530E0508A76193\n```\n\n----------------------------------------\n\nTITLE: NIST K-233 ECDSA Test Vectors\nDESCRIPTION: Test vectors for NIST K-233 curve including key pair, public key coordinates, and signatures using different SHA variants with 'sample' and 'test' messages.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ncurve: NIST K-233\n\nq = 8000000000000000000000000000069D5BB915BCD46EFB1AD5F173ABDF\n(qlen = 232 bits)\n\nprivate key:\nx = 103B2142BDC2A3C3B55080D09DF1808F79336DA2399F5CA7171D1BE9B0\n\npublic key: U = xG\nUx = 0682886F36C68473C1A221720C2B12B9BE13458BA907E1C4736595779F2\nUy = 1B20639B41BE0927090999B7817A3B3928D20503A39546044EC13A10309\n```\n\n----------------------------------------\n\nTITLE: NIST K-571 ECDSA Test Vector Set\nDESCRIPTION: Test vectors for ECDSA signatures on NIST curve K-571 using SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512 hash functions with 'sample' and 'test' messages. Includes curve parameters, key pair, and signature values.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\ncurve: NIST K-571\n\nq = 2000000000000000000000000000000000000000000000000000000000000000\n    0000000131850E1F19A63E4B391A8DB917F4138B630D84BE5D639381E91DEB45\n    CFE778F637C1001\n(qlen = 570 bits)\n\nprivate key:\nx = 0C16F58550D824ED7B95569D4445375D3A490BC7E0194C41A39DEB732C29396C\n    DF1D66DE02DD1460A816606F3BEC0F32202C7BD18A32D87506466AA92032F131\n    4ED7B19762B0D22\n```\n\n----------------------------------------\n\nTITLE: NIST B-163 ECDSA Test Vector Set\nDESCRIPTION: Test vectors for ECDSA signatures on NIST curve B-163 using SHA-1 and SHA-224 hash functions with 'sample' message. Includes curve parameters, key pair, and signature values.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\ncurve: NIST B-163\n\nq = 40000000000000000000292FE77E70C12A4234C33\n(qlen = 163 bits)\n\nprivate key:\nx = 35318FC447D48D7E6BC93B48617DDDEDF26AA658F\n\npublic key: U = xG\nUx = 126CF562D95A1D77D387BA75A3EA3A1407F23425A\nUy = 7D7CB5273C94DA8CA93049AFDA18721C24672BD71\n```\n\n----------------------------------------\n\nTITLE: ECDSA Signatures with SHA-384 for Message \"sample\"\nDESCRIPTION: Example of ECDSA signature generation using SHA-384 hash algorithm with the message \"sample\". Includes the random value k, and the resulting signature components r and s.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-384, message = \"sample\":\n   k = 0DA881BCE3BA851485879EF8AC585A63F1540B9198ECB8A1096D70CB25A104E2\n       F8A96B108AE76CB49CF34491ABC70E9D2AAD450\n   r = 07BC638B7E7CE6FEE5E9C64A0F966D722D01BB4BC3F3A35F30D4CDDA92DFC5F7\n       F0B4BBFE8065D9AD452FD77A1914BE3A2440C18\n   s = 06D904429850521B28A32CBF55C7C0FDF35DC4E0BDA2552C7BF68A171E970E67\n       88ACC0B9521EACB4796E057C70DD9B95FED5BFB\n```\n\n----------------------------------------\n\nTITLE: ECDSA Signatures with SHA-512 for Message \"sample\"\nDESCRIPTION: Example of ECDSA signature generation using SHA-512 hash algorithm with the message \"sample\". Includes the random value k, and the resulting signature components r and s.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-512, message = \"sample\":\n   k = 0750926FFAD7FF5DE85DF7960B3A4F9E3D38CF5A049BFC89739C48D42B34FBEE\n       03D2C047025134CC3145B60AFD22A68DF0A7FB2\n   r = 05D178DECAFD2D02A3DA0D8BA1C4C1D95EE083C760DF782193A9F7B4A8BE6FC5\n       C21FD60613BCA65C063A61226E050A680B3ABD4\n   s = 013B7581E98F6A63FBBCB3E49BCDA60F816DB230B888506D105DC229600497C3\n       B46588C784BE3AA9343BEF82F7C9C80AEB63C3B\n```\n\n----------------------------------------\n\nTITLE: ECDSA Signatures with SHA-1 for Message \"test\"\nDESCRIPTION: Example of ECDSA signature generation using SHA-1 hash algorithm with the message \"test\". Includes the random value k, and the resulting signature components r and s.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-1, message = \"test\":\n   k = 017E167EAB1850A3B38EE66BFE2270F2F6BFDAC5E2D227D47B20E75F0719161E\n       6C74E9F23088F0C58B1E63BC6F185AD2EF4EAE6\n   r = 049F54E7C10D2732B4638473053782C6919218BBEFCEC8B51640FC193E832291\n       F05FA12371E9B448417B3290193F08EE9319195\n   s = 0499E267DEC84E02F6F108B10E82172C414F15B1B7364BE8BFD66ADC0C5DE23F\n       EE3DF0D811134C25AFE0E05A6672F98889F28F1\n```\n\n----------------------------------------\n\nTITLE: ECDSA Signatures with SHA-224 for Message \"test\"\nDESCRIPTION: Example of ECDSA signature generation using SHA-224 hash algorithm with the message \"test\". Includes the random value k, and the resulting signature components r and s.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-224, message = \"test\":\n   k = 01ADEB94C19951B460A146B8275D81638C07735B38A525D76023AAF26AA8A058\n       590E1D5B1E78AB3C91608BDA67CFFBE6FC8A6CC\n   r = 0B1527FFAA7DD7C7E46B628587A5BEC0539A2D04D3CF27C54841C2544E1BBDB4\n       2FDBDAAF8671A4CA86DFD619B1E3732D7BB56F2\n   s = 0442C68C044868DF4832C807F1EDDEBF7F5052A64B826FD03451440794063F52\n       B022DF304F47403D4069234CA9EB4C964B37C02\n```\n\n----------------------------------------\n\nTITLE: ECDSA Signatures with SHA-384 for Message \"test\"\nDESCRIPTION: Example of ECDSA signature generation using SHA-384 hash algorithm with the message \"test\". Includes the random value k, and the resulting signature components r and s.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-384, message = \"test\":\n   k = 0A45B787DB44C06DEAB846511EEDBF7BFCFD3BD2C11D965C92FC195F67328F36\n       A2DC83C0352885DAB96B55B02FCF49DCCB0E2DA\n   r = 04EFEB7098772187907C87B33E0FBBA4584226C50C11E98CA7AAC6986F8D3BE0\n       44E5B52D201A410B852536527724CA5F8CE6549\n   s = 09574102FEB3EF87E6D66B94119F5A6062950FF4F902EA1E6BD9E2037F33FF99\n       1E31F5956C23AFE48FCDC557FD6F088C7C9B2B3\n```\n\n----------------------------------------\n\nTITLE: ECDSA Signatures with SHA-512 for Message \"test\"\nDESCRIPTION: Example of ECDSA signature generation using SHA-512 hash algorithm with the message \"test\". Includes the random value k, and the resulting signature components r and s.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-512, message = \"test\":\n   k = 0B90F8A0E757E81D4EA6891766729C96A6D01F9AEDC0D334932D1F81CC4E1973\n       A4F01C33555FF08530A5098CADB6EDAE268ABB5\n   r = 07E0249C68536AE2AEC2EC30090340DA49E6DC9E9EEC8F85E5AABFB234B6DA7D\n       2E9524028CF821F21C6019770474CC40B01FAF6\n   s = 08125B5A03FB44AE81EA46D446130C2A415ECCA265910CA69D55F2453E16CD7B\n       2DFA4E28C50FA8137F9C0C6CEE4CD37ABCCF6D8\n```\n\n----------------------------------------\n\nTITLE: ECDSA B-571 Signatures with SHA-256 for Message \"sample\"\nDESCRIPTION: Example of ECDSA signature generation on the B-571 curve using SHA-256 hash algorithm with the message \"sample\". Includes the random value k, and the resulting signature components r and s in their full 571-bit representation.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-256, message = \"sample\":\n   k = 15C2C6B7D1A070274484774E558B69FDFA193BDB7A23F27C2CD24298CE1B22A6\n       CC9B7FB8CABFD6CF7C6B1CF3251E5A1CDDD16FBFED28DE79935BB2C631B8B8EA\n       9CC4BCC937E669E\n   r = 213EF9F3B0CFC4BF996B8AF3A7E1F6CACD2B87C8C63820000800AC787F17EC99\n       C04BCEDF29A8413CFF83142BB88A50EF8D9A086AF4EB03E97C567500C21D8657\n       14D832E03C6D054\n   s = 3D32322559B094E20D8935E250B6EC139AC4AAB77920812C119AF419FB62B332\n       C8D226C6C9362AE3C1E4AABE19359B8428EA74EC8FBE83C8618C2BCCB6B43FBA\n       A0F2CCB7D303945\n```\n\n----------------------------------------\n\nTITLE: ECDSA B-571 Signatures with SHA-384 for Message \"sample\"\nDESCRIPTION: Example of ECDSA signature generation on the B-571 curve using SHA-384 hash algorithm with the message \"sample\". Includes the random value k, and the resulting signature components r and s in their full 571-bit representation.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-384, message = \"sample\":\n   k = 0FEF0B68CB49453A4C6ECBF1708DBEEFC885C57FDAFB88417AAEFA5B1C35017B\n       4B498507937ADCE2F1D9EFFA5FE8F5AEB116B804FD182A6CF1518FDB62D53F60\n       A0FF6EB707D856B\n   r = 375D8F49C656A0BBD21D3F54CDA287D853C4BB1849983CD891EF6CD6BB56A62B\n       687807C16685C2C9BCA2663C33696ACCE344C45F3910B1DF806204FF731ECB28\n       9C100EF4D1805EC\n   s = 1CDEC6F46DFEEE44BCE71D41C60550DC67CF98D6C91363625AC2553E4368D2DF\n       B734A8E8C72E118A76ACDB0E58697940A0F3DF49E72894BD799450FC9E550CC0\n       4B9FF9B0380021C\n```\n\n----------------------------------------\n\nTITLE: ECDSA B-571 Signatures with SHA-224 for Message \"test\"\nDESCRIPTION: Example of ECDSA signature generation on the B-571 curve using SHA-224 hash algorithm with the message \"test\". Includes the random value k, and the resulting signature components r and s in their full 571-bit representation.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-224, message = \"test\":\n   k = 333C711F8C62F205F926593220233B06228285261D34026232F6F729620C6DE1\n       2220F282F4206D223226705608688B20B8BA86D8DFE54F07A37EC48F253283AC\n       33C3F5102C8CC3E\n   r = 3048E76506C5C43D92B2E33F62B33E3111CEEB87F6C7DF7C7C01E3CDA28FA5E8\n       BE04B5B23AA03C0C70FEF8F723CBCEBFF0B7A52A3F5C8B84B741B4F6157E69A5\n       FB0524B48F31828\n   s = 2C99078CCFE5C82102B8D006E3703E020C46C87C75163A2CD839C885550BA5CB\n       501AC282D29A1C26D26773B60FBE05AAB62BFA0BA32127563D42F7669C97784C\n       8897C22CFB4B8FA\n```\n\n----------------------------------------\n\nTITLE: ECDSA B-571 Signatures with SHA-256 for Message \"test\"\nDESCRIPTION: Example of ECDSA signature generation on the B-571 curve using SHA-256 hash algorithm with the message \"test\". Includes the random value k, and the resulting signature components r and s in their full 571-bit representation.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-256, message = \"test\":\n   k = 328E02CF07C7B5B6D3749D8302F1AE5BFAA8F239398459AF4A2C859C7727A812\n       3A7FE9BE8B228413FC8DC0E9DE16AF3F8F43005107F9989A5D97A5C4455DA895\n       E81336710A3FB2C\n   r = 184BC808506E11A65D628B457FDA60952803C604CC7181B59BD25AEE1411A66D\n       12A777F3A0DC99E1190C58D0037807A95E5080FA1B2E5CCAA37B50D401CFFC34\n       17C005AEE963469\n   s = 27280D45F81B19334DBDB07B7E63FE8F39AC7E9AE14DE1D2A6884D2101850289\n       D70EE400F26ACA5E7D73F534A14568478E59D00594981ABE6A1BA18554C13EB5\n       E03921E4DC98333\n```\n\n----------------------------------------\n\nTITLE: ECDSA B-571 Signatures with SHA-384 for Message \"test\"\nDESCRIPTION: Example of ECDSA signature generation on the B-571 curve using SHA-384 hash algorithm with the message \"test\". Includes the random value k, and the resulting signature components r and s in their full 571-bit representation.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-384, message = \"test\":\n   k = 2A77E29EAD9E811A9FDA0284C14CDFA1D9F8FA712DA59D530A06CDE54187E250\n       AD1D4FB5788161938B8DE049616399C5A56B0737C9564C9D4D845A4C6A7CDFCB\n       FF0F01A82BE672E\n   r = 319EE57912E7B0FAA1FBB145B0505849A89C6DB1EC06EA20A6A7EDE072A6268A\n       F6FD9C809C7E422A5F33C6C3326EAD7402467DF3272A1B2726C1C20975950F0F\n       50D8324578F13EC\n   s = 2CF3EA27EADD0612DD2F96F46E89AB894B01A10DF985C5FC099CFFE0EA083EB4\n       4BE682B08BFE405DAD5F37D0A2C59015BA41027E24B99F8F75A70B6B7385BF39\n       BBEA02513EB880C\n```\n\n----------------------------------------\n\nTITLE: ECDSA B-571 Signatures with SHA-512 for Message \"test\"\nDESCRIPTION: Example of ECDSA signature generation on the B-571 curve using SHA-512 hash algorithm with the message \"test\". Includes the random value k, and the resulting signature components r and s in their full 571-bit representation.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/determiniticECDSA.txt#2025-04-22_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n   With SHA-512, message = \"test\":\n   k = 21CE6EE4A2C72C9F93BDB3B552F4A633B8C20C200F894F008643240184BE57BB\n       282A1645E47FBBE131E899B4C61244EFC2486D88CDBD1DD4A65EBDD837019D02\n       628D0DCD6ED8FB5\n   r = 2AA1888EAB05F7B00B6A784C4F7081D2C833D50794D9FEAF6E22B8BE728A2A90\n       BFCABDC803162020AA629718295A1489EE7ED0ECB8AAA197B9BDFC49D18DDD78\n       FC85A48F9715544\n   s = 0AA5371FE5CA671D6ED9665849C37F394FED85D51FEF72DA2B5F28EDFB2C6479\n       CA63320C19596F5E1101988E2C619E302DD05112F47E8823040CE540CD3E90DC\n       F41DBC461744EE9\n```\n\n----------------------------------------\n\nTITLE: Describing SHA-3 Test Vectors in Markdown\nDESCRIPTION: This snippet provides metadata and context for SHA-3 test vectors. It specifies the source of the vectors, the download date, and includes a note about corrections to the 1605-bit test vectors.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/SHA3TestVectors.txt#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Test vectors for FIPS 202 - SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions\n#\n# Downloaded 6th August, 2015 from http://csrc.nist.gov/groups/ST/toolkit/examples.html#aHashing\n#\n# NOTE: The 1605-bit test vectors were initially wrong. Corrections were published on 14th August, 2015\n```\n\n----------------------------------------\n\nTITLE: Calculating SHA3-224 Hash for 5-bit Message\nDESCRIPTION: Shows the SHA3-224 hash value for a 5-bit message '11001'. The hash is represented as a sequence of hexadecimal values.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/SHA3TestVectors.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nMsg as bit string\n    1 1 0 0 1\n\nHash val is\n    FF BA D5 DA 96 BA D7 17 89 33 02 06 DC 67 68 EC\n    AE B1 B3 2D CA 6B 33 01 48 96 74 AB\n```\n\n----------------------------------------\n\nTITLE: Calculating SHA3-224 Hash for 30-bit Message\nDESCRIPTION: Illustrates the SHA3-224 hash value for a 30-bit message. The hash is represented as a sequence of hexadecimal values.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/SHA3TestVectors.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nMsg as bit string\n    1 1 0 0 1 0 1 0 0 0 0 1 1 0 1 0 1 1 0 1 1 1 1 0 1 0 0 1 1 0\n\nHash val is\n    D6 66 A5 14 CC 9D BA 25 AC 1B A6 9E D3 93 04 60\n    DE AA C9 85 1B 5F 0B AA B0 07 DF 3B\n```\n\n----------------------------------------\n\nTITLE: Calculating SHA3-224 Hash for 1600-bit Message\nDESCRIPTION: Shows the SHA3-224 hash value for a 1600-bit message consisting of a repeating pattern. The hash is represented as a sequence of hexadecimal values.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/SHA3TestVectors.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nMsg as bit string\n    1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1\n    ... (1600 bits total) ...\n    1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1\n\nHash val is\n    93 76 81 6A BA 50 3F 72 F9 6C E7 EB 65 AC 09 5D\n    EE E3 BE 4B F9 BB C2 A1 CB 7E 11 E0\n```\n\n----------------------------------------\n\nTITLE: Calculating SHA3-224 Hash for 1605-bit Message\nDESCRIPTION: Demonstrates the SHA3-224 hash value for a 1605-bit message. The hash is represented as a sequence of hexadecimal values.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/SHA3TestVectors.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nMsg as bit string\n    1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1\n    ... (1605 bits total) ...\n    1 1 0 0 0\n\nHash val is\n    22 D2 F7 BB 0B 17 3F D8 C1 96 86 F9 17 31 66 E3\n    EE 62 73 80 47 D7 EA DD 69 EF B2 28\n```\n\n----------------------------------------\n\nTITLE: Calculating SHA3-224 Hash for 1630-bit Message\nDESCRIPTION: Shows the beginning of a 1630-bit message for SHA3-224 hashing. The full hash value is not provided in the given text.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/SHA3TestVectors.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nMsg as bit string\n    1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1\n    ... (1630 bits total) ...\n    1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1\n```\n\n----------------------------------------\n\nTITLE: Displaying SHA3-256 Hash Values for Various Bit-String Messages\nDESCRIPTION: This code snippet demonstrates SHA3-256 hash outputs for messages of different lengths. Each example includes the input bit string and the resulting 256-bit hash value in hexadecimal format, showing how the SHA3-256 algorithm processes inputs of varying sizes.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/SHA3TestVectors.txt#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nSHA3-256 sample of 0-bit message\n\nMsg as bit string\n    #(empty message)\n\nHash val is\n    A7 FF C6 F8 BF 1E D7 66 51 C1 47 56 A0 61 D6 62\n    F5 80 FF 4D E4 3B 49 FA 82 D8 0A 4B 80 F8 43 4A\n\nSHA3-256 sample of 5-bit message\n\nMsg as bit string\n    1 1 0 0 1\n\nHash val is\n    7B 00 47 CF 5A 45 68 82 36 3C BF 0F B0 53 22 CF\n    65 F4 B7 05 9A 46 36 5E 83 01 32 E3 B5 D9 57 AF\n\nSHA3-256 sample of 30-bit message\n\nMsg as bit string\n    1 1 0 0 1 0 1 0 0 0 0 1 1 0 1 0 1 1 0 1 1 1 1 0 1 0 0 1 1 0\n\nHash val is\n    C8 24 2F EF 40 9E 5A E9 D1 F1 C8 57 AE 4D C6 24\n    B9 2B 19 80 9F 62 AA 8C 07 41 1C 54 A0 78 B1 D0\n```\n\n----------------------------------------\n\nTITLE: SHA3-384 Empty Message Test\nDESCRIPTION: Test case showing SHA3-384 hash output for an empty (0-bit) message input\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/SHA3TestVectors.txt#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n0C 63 A7 5B 84 5E 4F 7D 01 10 7D 85 2E 4C 24 85\\nC5 1A 50 AA AA 94 FC 61 99 5E 71 BB EE 98 3A 2A\\nC3 71 38 31 26 4A DB 47 FB 6B D1 E0 58 D5 F0 04\n```\n\n----------------------------------------\n\nTITLE: SHA3-384 5-Bit Message Test\nDESCRIPTION: Test case showing SHA3-384 hash output for a 5-bit message input: 11001\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/SHA3TestVectors.txt#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n73 7C 9B 49 18 85 E9 BF 74 28 E7 92 74 1A 7B F8\\nDC A9 65 34 71 C3 E1 48 47 3F 2C 23 6B 6A 0A 64\\n55 EB 1D CE 9F 77 9B 4B 6B 23 7F EF 17 1B 1C 64\n```\n\n----------------------------------------\n\nTITLE: SHA3-384 30-Bit Message Test\nDESCRIPTION: Test case showing SHA3-384 hash output for a 30-bit message input\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/SHA3TestVectors.txt#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n95 5B 4D D1 BE 03 26 1B D7 6F 80 7A 7E FD 43 24\\n35 C4 17 36 28 11 B8 A5 0C 56 4E 7E E9 58 5E 1A\\nC7 62 6D DE 2F DC 03 0F 87 61 96 EA 26 7F 08 C3\n```\n\n----------------------------------------\n\nTITLE: SHA3-384 1600-Bit Message Test\nDESCRIPTION: Test case showing SHA3-384 hash output for a 1600-bit message input consisting of repeating pattern\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/SHA3TestVectors.txt#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n18 81 DE 2C A7 E4 1E F9 5D C4 73 2B 8F 5F 00 2B\\n18 9C C1 E4 2B 74 16 8E D1 73 26 49 CE 1D BC DD\\n76 19 7A 31 FD 55 EE 98 9F 2D 70 50 DD 47 3E 8F\n```\n\n----------------------------------------\n\nTITLE: SHA3-512 Hash Test Vector for 1630-bit Message\nDESCRIPTION: Sample test vector showing a 1630-bit message represented as a bit string (ones and zeros) and its corresponding SHA3-512 hash value in hexadecimal format. This pattern is used for validating SHA3-512 hash function implementations.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/SHA3TestVectors.txt#2025-04-22_snippet_12\n\nLANGUAGE: plain text\nCODE:\n```\nHash val is\n    FC 4A 16 7C CB 31 A9 37 D6 98 FD E8 2B 04 34 8C\n    95 39 B2 8F 0C 9D 3B 45 05 70 9C 03 81 23 50 E4\n    99 0E 96 22 97 4F 6E 57 5C 47 86 1C 0D 2E 63 8C\n    CF C2 02 3C 36 5B B6 0A 93 F5 28 55 06 98 78 6B\n```\n\n----------------------------------------\n\nTITLE: Second SHA3-512 Hash Test Vector with Identical Pattern\nDESCRIPTION: A second test vector showing the same repeating bit pattern but with a slightly different ending, producing a different SHA3-512 hash result. This provides multiple validation cases for the SHA3-512 implementation.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Tests/data/SHA3TestVectors.txt#2025-04-22_snippet_13\n\nLANGUAGE: plain text\nCODE:\n```\nHash val is\n    CF 9A 30 AC 1F 1F 6A C0 91 6F 9F EF 19 19 C5 95\n    DE BE 2E E8 0C 85 42 12 10 FD F0 5F 1C 6A F7 3A\n    A9 CA C8 81 D0 F9 1D B6 D0 34 A2 BB AD C1 CF 7F\n    BC B2 EC FA 9D 19 1D 3A 50 16 FB 3F AD 87 09 C9\n```\n\n----------------------------------------\n\nTITLE: Generating Flamegraph for NBitcoin Benchmarks using PowerShell\nDESCRIPTION: This PowerShell command runs a specific benchmark (GolombRiceFilters in this example) and generates a flamegraph using ETW profiler. It specifies the runtime as netcoreapp2.1 and runs in Release configuration.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.Bench/README.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet run -c Release -- --runtimes netcoreapp2.1 --filter *GolombRiceFilters* --profiler ETW\n```\n\n----------------------------------------\n\nTITLE: Installing NBitcoin.TestFramework via NuGet Package Manager in C#\nDESCRIPTION: NuGet command for installing the NBitcoin.TestFramework package in a .NET project. This package provides the Bitcoin node testing functionality shown in the example.\nSOURCE: https://github.com/metacosa/nbitcoin/blob/master/NBitcoin.TestFramework/README.md#2025-04-22_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Package NBitcoin.TestFramework\n```"
  }
]