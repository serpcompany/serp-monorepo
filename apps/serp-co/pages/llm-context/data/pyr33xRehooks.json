[
  {
    "owner": "pyr33x",
    "repo": "rehooks",
    "content": "TITLE: useFetch Hook API Definition\nDESCRIPTION: Type definition for the useFetch hook that shows its signature, generic types for data and error handling, and return value structure. The hook accepts a URL and optional request options.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useFetch.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useFetch<T, E = string>(\n  url: string,\n  reqOpt?: RequestInit,\n): UseFetchResult<T, E>;\n```\n\n----------------------------------------\n\nTITLE: useMap Hook Type Definition\nDESCRIPTION: TypeScript type definition for the useMap hook showing its parameters and return type. The hook accepts optional initial entries and returns a readonly Map with mutation methods.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useMap.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useMap<K, V>(\n  initialEntries?: Iterable<[K, V]> | [] | (() => Iterable<[K, V]>),\n): [ReadonlyMap<K, V>, MapActions<K, V>];\n```\n\n----------------------------------------\n\nTITLE: Using useDebounceCallback in a React Component\nDESCRIPTION: Example demonstrating how to implement the useDebounceCallback hook in a React component to debounce input handling. The hook delays the execution of the callback function until after a specified delay.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useDebounceCallback.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDebounceCallback } from \"~/hooks/useDebounceCallback\";\nimport { useState } from \"react\";\n\nfunction Component() {\n  const [inputValue, setInputValue] = useState<string>(\"\");\n\n  const debouncedLog = useDebounceCallback((value: string) => {\n    console.log(\"Debounced Input Value:\", value);\n  }, 500);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    setInputValue(value);\n    debouncedLog(value);\n  };\n\n  return (\n    <div>\n      <h2>Debounced Callback Example</h2>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleChange}\n        placeholder=\"Type something...\"\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFetch in a React Component\nDESCRIPTION: Example of implementing the useFetch hook in a React component to fetch and display a list of users from an API. Shows how to handle loading, error, and success states, as well as manual refetching.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useFetch.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetch } from \"~/hooks/useFetch\";\n\ntype User = {\n  id: number;\n  name: string;\n  email: string;\n};\n\ntype ApiError = {\n  message: string;\n};\n\nfunction Component() {\n  const { data, error, isPending, isSuccess, isError, refetch } = useFetch<\n    User[],\n    ApiError\n  >(\"https://jsonplaceholder.typicode.com/users\", {\n    method: \"GET\",\n  });\n\n  return (\n    <div>\n      <h1>User List</h1>\n\n      {isPending && <p>Loading...</p>}\n      {isError && error && (\n        <p style={{ color: \"red\" }}>Error: {error.message}</p>\n      )}\n\n      {isSuccess && data && (\n        <ul>\n          {data.map((user: User) => (\n            <li key={user.id}>\n              {user.name} - {user.email}\n            </li>\n          ))}\n        </ul>\n      )}\n\n      <button onClick={refetch} disabled={isPending}>\n        {isPending ? \"Fetching...\" : \"Refetch Data\"}\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useEventListener Hook API Definition\nDESCRIPTION: Type definition for the useEventListener hook showing its parameters and return type. The hook accepts an event name, handler function, and optional target element.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useEventListener.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useEventListener<K extends keyof WindowEventMap>(\n  eventName: K,\n  handler: (event: WindowEventMap[K]) => void,\n  element?: RefObject<HTMLElement> | Window,\n): void;\n```\n\n----------------------------------------\n\nTITLE: React Component Using useLocalStorage Hook\nDESCRIPTION: Example React component demonstrating the usage of useLocalStorage hook to maintain a name value in local storage. The component includes an input field that updates both the state and local storage.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useLocalStorage.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLocalStorage } from \"~/hooks/useLocalStorage\";\nimport React from \"react\";\n\nfunction Component() {\n  const [name, setName] = useLocalStorage(\"name\", \"John Doe\");\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n  };\n\n  return (\n    <div>\n      <h2>Local Storage Demo</h2>\n      <input\n        type=\"text\"\n        value={name}\n        onChange={handleChange}\n        placeholder=\"Enter your name\"\n      />\n      <p>Your name is: {name}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useToggle hook TypeScript signature\nDESCRIPTION: TypeScript function signature for the useToggle hook showing its parameters and return type. It returns a tuple with the current state value, a toggle function, and a state setter function.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useToggle.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useToggle(\n  defaultValue?: boolean,\n): [boolean, () => void, Dispatch<SetStateAction<boolean>>];\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounced Search with useDebounceValue\nDESCRIPTION: Example React component demonstrating how to use useDebounceValue hook to create a debounced search input. Shows integration with useState and useEffect for handling user input with a delay.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useDebounceValue.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDebounceValue } from \"~/hooks/useDebounceValue\";\nimport { useState, useEffect } from \"react\";\n\nfunction Component() {\n  const [searchInput, setSearchInput] = useState<string>(\"\");\n  const debouncedSearchInput = useDebounceValue(searchInput, 500);\n\n  useEffect(() => {\n    if (debouncedSearchInput)\n      console.log(\"Debounced Search Input:\", debouncedSearchInput);\n  }, [debouncedSearchInput]);\n\n  return (\n    <div>\n      <h2>Debounced Search</h2>\n      <input\n        type=\"text\"\n        value={searchInput}\n        onChange={(e) => setSearchInput(e.target.value)}\n        placeholder=\"Type something to search...\"\n      />\n      <p>Search Input: {searchInput}</p>\n      <p>Debounced Input: {debouncedSearchInput}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useInterval Hook TypeScript Definition\nDESCRIPTION: TypeScript function signature for the useInterval hook showing its parameters and return type. This defines how the hook accepts a callback function, delay value, and optional configuration options.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useInterval.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useInterval(\n  callback: () => void,\n  delay: number | null,\n  options?: IntervalOptions,\n): IntervalReturn;\n```\n\n----------------------------------------\n\nTITLE: Using useSessionStorage Hook in React Component\nDESCRIPTION: Example showing how to implement the useSessionStorage hook in a React component with an input field that persists data in session storage.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useSessionStorage.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSessionStorage } from \"~/hooks/useSessionStorage\";\nimport React from \"react\";\n\nfunction Component() {\n  const [name, setName] = useSessionStorage(\"name\", \"John Doe\");\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n  };\n\n  return (\n    <div>\n      <h2>Session Storage Demo</h2>\n      <input\n        type=\"text\"\n        value={name}\n        onChange={handleChange}\n        placeholder=\"Enter your name\"\n      />\n      <p>Your name is: {name}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useDebounceValue Hook Type Definition\nDESCRIPTION: TypeScript type definition for the useDebounceValue hook, showing its generic type parameter, input parameters, and return type.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useDebounceValue.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useDebounceValue<T>(value: T, delay: number): T;\n```\n\n----------------------------------------\n\nTITLE: Using useStep hook in a React component\nDESCRIPTION: Example showing how to implement useStep in a React component. This snippet demonstrates initializing the hook with configuration options and using the returned methods and state properties.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useStep.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useStep } from \"~/hooks/useStep\";\n\nfunction Component() {\n  const { currentStep, nextStep, prevStep, jumpTo, isFirstStep, isLastStep } =\n    useStep({\n      totalSteps: 5,\n      initialStep: 2,\n    });\n\n  return (\n    <div>\n      <div>Current step: {currentStep}</div>\n      <button onClick={prevStep}>Prev</button>\n      <button onClick={nextStep}>Next</button>\n      <button onClick={() => jumpTo(3)}>Jump to 3</button>\n      <button onClick={() => jumpTo(0)}>Jump to 0</button>\n      <button onClick={() => jumpTo(4)}>Jump to 4</button>\n      <div>Is first step: {isFirstStep ? \"yes\" : \"no\"}</div>\n      <div>Is last step: {isLastStep ? \"yes\" : \"no\"}</div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useLocalStorage Hook Type Definition\nDESCRIPTION: TypeScript type definition for the useLocalStorage hook, showing its generic type parameter, input parameters, and return type signature.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useLocalStorage.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useLocalStorage<T>(\n  key: string,\n  initialValue: T,\n): [T, (value: T) => void];\n```\n\n----------------------------------------\n\nTITLE: Using useEventListener Hook in a React Component\nDESCRIPTION: Example showing how to use the useEventListener hook to attach click events to the window and mouseenter events to a div element with proper cleanup.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useEventListener.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEventListener } from \"~/hooks/useEventListener\";\n\nfunction Component() {\n  const divRef = useRef<HTMLDivElement>(null);\n\n  useEventListener(\"click\", () => {\n    console.log(\"Clicked on window\");\n  });\n\n  useEventListener(\n    \"mouseenter\",\n    () => {\n      console.log(\"Mouse entered the div!\");\n    },\n    divRef,\n  );\n\n  return (\n    <div>\n      <div ref={divRef}>Hover over this div</div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useCountdown Hook TypeScript Definition\nDESCRIPTION: TypeScript definition for the useCountdown hook showing its parameters and return type. The hook accepts countStart, countStop, and intervalMs parameters and returns the current count value along with control functions.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useCountDown.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useCountdown({\n  countStart,\n  countStop = 0,\n  intervalMs = 1000,\n}: {\n  countStart: number;\n  countStop?: number;\n  intervalMs?: number;\n}): [\n  number,\n  {\n    startCountdown: () => void;\n    stopCountdown: () => void;\n    resetCountdown: () => void;\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Using useInterval in a React Component\nDESCRIPTION: Example showing how to import and use the useInterval hook in a React component. It demonstrates setting up an interval that logs a message every second and includes UI controls to start, stop, and toggle the interval.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useInterval.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useInterval } from \"~/hooks/useInterval\";\n\nfunction Component() {\n  const { start, stop, toggle, isRunning } = useInterval(\n    () => {\n      console.log(\"Interval tick!\");\n    },\n    1000,\n    { autoStart: true },\n  );\n\n  return (\n    <div>\n      <button onClick={start}>Start</button>\n      <button onClick={stop}>Stop</button>\n      <button onClick={toggle}>Toggle</button>\n      <p>Is running: {isRunning ? \"Yes\" : \"No\"}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useKeyPress Hook TypeScript Definition\nDESCRIPTION: TypeScript function signature for the useKeyPress hook, which takes a KeyConfig object and returns a boolean indicating if the key combination is pressed.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useKeyPress.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useKeyPress(options: KeyConfig): boolean;\n```\n\n----------------------------------------\n\nTITLE: useThrottle Hook TypeScript Definition\nDESCRIPTION: TypeScript definition of the useThrottle hook. It specifies the function signature, including the generic type for the callback function and the options parameter.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useThrottle.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useThrottle<T extends (...args: any[]) => any>(\n  fn: T,\n  options: ThrottleOptions = {},\n): (...args: Parameters<T>) => void;\n```\n\n----------------------------------------\n\nTITLE: Using the useCountdown Hook in a React Component\nDESCRIPTION: Example of implementing the useCountdown hook in a React component with start, stop, and reset countdown functionality. The example shows how to display the current count and provide user controls.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useCountDown.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCountdown } from \"~/hooks/useCountDown\";\n\nfunction Component() {\n  const [counter, { startCountdown, stopCountdown, resetCountdown }] =\n    useCountdown({\n      countStart: 10,\n      intervalMs: 1000,\n      countStop: 0,\n    });\n\n  return (\n    <div>\n      <h2>Countdown Demo</h2>\n      <p>Current Count: {counter}</p>\n      <button onClick={startCountdown}>Start Countdown</button>\n      <button onClick={stopCountdown}>Stop Countdown</button>\n      <button onClick={resetCountdown}>Reset Countdown</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useStep hook API definition\nDESCRIPTION: TypeScript type definition for the useStep hook, showing its function signature with generic typing support. Takes a configuration object and returns navigation controls and state.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useStep.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useStep<T = number>(config: UseStepProps<T>): UseStepReturn<T>;\n```\n\n----------------------------------------\n\nTITLE: Using useSleep Hook in a React Component\nDESCRIPTION: Example of how to use the useSleep hook in a React component. It demonstrates creating a button that triggers a sleep function and updates the component state.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useSleep.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSleep } from \"~/hooks/useSleep\";\nimport { useState } from \"react\";\n\nfunction Component() {\n  const [isSleeping, setIsSleeping] = useState(false);\n  const sleep = useSleep();\n\n  const handleClick = () => {\n    setIsSleeping(true);\n    sleep(2000).then(() => setIsSleeping(false));\n  };\n\n  return (\n    <div>\n      <p>Is sleeping: {isSleeping ? \"true\" : \"false\"}</p>\n      <button onClick={handleClick}>Sleep</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useScroll Hook TypeScript Definition\nDESCRIPTION: Type definition for the useScroll hook, showing its return type which includes the current scroll position and a scrollTo method.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useScroll.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useScroll(): {\n  position: ScrollPosition;\n  scrollTo: (options: ScrollToOptions) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useTitle Hook in React Component\nDESCRIPTION: Example showing how to use the useTitle hook within a React component to display and update the page title.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useTitle.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTitle } from \"~/hooks/useTitle\";\n\nfunction Component() {\n  const { title, changeTitle } = useTitle();\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <button onClick={() => changeTitle(\"New Title\")}>Change Title</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useFocus Hook TypeScript Definition\nDESCRIPTION: TypeScript definition of the useFocus hook. It specifies the function signature, including generic type parameter, optional callback parameter, and return type.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useFocus.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useFocus<T extends HTMLElement>(\n  callback?: UseFocusCallback,\n): [RefObject<T>, boolean];\n```\n\n----------------------------------------\n\nTITLE: Using useBattery Hook in React Component\nDESCRIPTION: Example of how to use the useBattery hook in a React component to display battery information.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useBattery.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBattery } from \"~/hooks/useBattery\";\n\nfunction Component() {\n  const batteryState = useBattery();\n\n  return (\n    <div>\n      <h1>Battery State</h1>\n      <p>Battery level: {batteryState.level}</p>\n      <p>Battery charging: {batteryState.charging ? \"yes\" : \"no\"}</p>\n      <p>Battery charging time: {batteryState.chargingTime}</p>\n      <p>Battery discharging time: {batteryState.dischargingTime}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the useIsomorphicLayoutEffect Hook\nDESCRIPTION: The implementation of the useIsomorphicLayoutEffect hook. It conditionally uses useLayoutEffect in browser environments and falls back to useEffect in server environments.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useIsmorphicLayoutEffect.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst useIsomorphicLayoutEffect =\n  typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\n```\n\n----------------------------------------\n\nTITLE: useWindowSize Hook API Definition\nDESCRIPTION: TypeScript definition for the useWindowSize hook, showing its function signature and return type.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useWindowSize.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useWindowSize(): WindowSize;\n```\n\n----------------------------------------\n\nTITLE: Using useDevice Hook in a React Component\nDESCRIPTION: Example of how to use the useDevice hook in a React component. It demonstrates accessing device type booleans and view toggle functions.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useDevice.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDevice } from \"~/hooks/useDevice\";\n\nfunction Component() {\n  const { isMobile, isDesktop, isTablet, DesktopView, MobileView, TabletView } =\n    useDevice();\n\n  return (\n    <div>\n      <div>\n        {isMobile && <div>Mobile View</div>}\n        {isDesktop && <div>Desktop View</div>}\n        {isTablet && <div>Tablet View</div>}\n      </div>\n      <button onClick={DesktopView}>\n        {isDesktop ? \"Hide\" : \"Show\"} Desktop View\n      </button>\n      <button onClick={MobileView}>\n        {isMobile ? \"Hide\" : \"Show\"} Mobile View\n      </button>\n      <button onClick={TabletView}>\n        {isTablet ? \"Hide\" : \"Show\"} Tablet View\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useMap Hook in React Component\nDESCRIPTION: Example React component demonstrating how to use the useMap hook for managing map state with operations like set, delete, clear, and initialize.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useMap.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMap } from \"~/hooks/useMap\";\n\nfunction Component() {\n  const map = useMap<string, number>([\n    [\"a\", 1],\n    [\"b\", 2],\n    [\"c\", 3],\n  ]);\n\n  const setValue = (key: string, value: number) => {\n    map.set(key, value);\n  };\n\n  const deleteValue = (key: string) => {\n    map.delete(key);\n  };\n\n  const clearValues = () => {\n    map.clear();\n  };\n\n  const initializeValues = () => {\n    map.initialize([\n      [\"a\", 1],\n      [\"b\", 2],\n      [\"c\", 3],\n    ]);\n  };\n\n  return (\n    <div>\n      <button onClick={() => setValue(\"d\", 4)}>Set value</button>\n      <button onClick={() => deleteValue(\"b\")}>Delete value</button>\n      <button onClick={clearValues}>Clear values</button>\n      <button onClick={initializeValues}>Initialize values</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useTitle Hook TypeScript Definition\nDESCRIPTION: TypeScript type definition for the useTitle hook showing its return type signature.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useTitle.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useTitle(): UseTitleResult;\n```\n\n----------------------------------------\n\nTITLE: Using useUnmount in a React Component\nDESCRIPTION: Example showing how to import and use the useUnmount hook in a React component to execute logic when the component unmounts.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useUnmount.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUnmount } from \"~/hooks/useUnmount\";\n\nfunction Component() {\n  useUnmount(() => {\n    // Do something when the component is unmounted\n  });\n\n  return <div>Component</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useToggle hook in a React component\nDESCRIPTION: Example showing how to use the useToggle hook in a React component to manage a boolean state with toggle functionality and direct state setting.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useToggle.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useToggle } from \"~/hooks/useToggle\";\n\nfunction Component() {\n  const [isOn, toggle, setToggle] = useToggle(false);\n\n  return (\n    <div>\n      <p>Current state: {isOn ? \"On\" : \"Off\"}</p>\n      <button onClick={toggle}>Toggle</button>\n      <button onClick={() => setToggle(true)}>Turn On</button>\n      <button onClick={() => setToggle(false)}>Turn Off</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLang Hook in React Component\nDESCRIPTION: Example showing how to implement the useLang hook in a React component to display the current browser language\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useLang.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLang } from \"~/hooks/useLang\";\n\nfunction Component() {\n  const lang = useLang();\n\n  return <p>Current Language: {lang}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFocus Hook in a React Component\nDESCRIPTION: Example of how to use the useFocus hook in a React component. It demonstrates creating an input element that tracks its focus state.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useFocus.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFocus } from \"~/hooks/useFocus\";\n\nfunction Component() {\n  const [ref, isFocused] = useFocus<HTMLInputElement>((focusState) => {\n    console.log(\"Focus state:\", focusState);\n  });\n\n  return (\n    <div>\n      <input ref={ref} type=\"text\" placeholder=\"Focus me!\" />\n      <p>The input is currently {isFocused ? \"focused\" : \"unfocused\"}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: API Definition of useSleep Hook\nDESCRIPTION: TypeScript definition of the useSleep hook. It returns a function that takes a number of milliseconds and returns a Promise that resolves after the specified delay.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useSleep.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useSleep(): (ms: number) => Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Using useIsMounted Hook in React Component\nDESCRIPTION: Example showing how to use the useIsMounted hook within a React component to check mount status in useEffect.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useIsMounted.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useIsMounted } from \"~/hooks/useIsMounted\";\n\nfunction Component() {\n  const isMounted = useIsMounted();\n\n  useEffect(() => {\n    if (isMounted()) {\n      // Do something when the component is mounted\n    }\n  }, [isMounted]);\n\n  return <div>Component</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useCountUp in a React Component\nDESCRIPTION: Example of how to implement the useCountUp hook in a React component with start, stop, and reset functionality.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useCountUp.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCountup } from \"~/hooks/useCountUp\";\n\nfunction Component() {\n  const [counter, { startCountup, stopCountup, resetCountup }] = useCountup({\n    countStart: 10,\n    intervalMs: 1000,\n    countStop: Infinity,\n  });\n\n  return (\n    <div>\n      <h2>Countup Demo</h2>\n      <p>Current Count: {counter}</p>\n      <button onClick={startCountup}>Start Countup</button>\n      <button onClick={stopCountup}>Stop Countup</button>\n      <button onClick={resetCountup}>Reset Countup</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useStatus Hook API Definition\nDESCRIPTION: Type definition for the useStatus hook, showing its parameter and return type. The hook accepts an optional callback function that runs on status change and returns a boolean indicating online status.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useStatus.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useStatus(callback?: (isOnline: boolean) => void): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using the useIsomorphicLayoutEffect Hook in a React Component\nDESCRIPTION: Example of importing and using the useIsomorphicLayoutEffect hook in a React component. The hook is used similarly to useEffect but works in both client and server environments.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useIsmorphicLayoutEffect.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useIsomorphicLayoutEffect } from \"~/hooks/useIsomorphicLayoutEffect\";\n\nfunction Component() {\n  useIsomorphicLayoutEffect(() => {\n    console.log(\"useIsomorphicLayoutEffect\");\n  }, []);\n\n  return <div>Component</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useScroll Hook in a React Component\nDESCRIPTION: Example of how to implement the useScroll hook in a React component to display current scroll position and provide a button to scroll back to the top.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useScroll.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useScroll } from \"~/hooks/useScroll\";\n\nfunction Component() {\n  const { position, scrollTo } = useScroll();\n\n  return (\n    <div>\n      <h1>Scroll Position</h1>\n      <p>X: {position.x}</p>\n      <p>Y: {position.y}</p>\n      <button onClick={() => scrollTo({ top: 0 })}>Scroll to top</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEventCallback in a React Component\nDESCRIPTION: Example of how to use the useEventCallback hook in a React component. It demonstrates creating a stable callback for a button click event.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useEventCallback.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEventCallback } from \"~/hooks/useEventCallback\";\n\nfunction Component() {\n  const handleClick = useEventCallback(() => {\n    console.log(\"Clicked!\");\n  });\n\n  return <button onClick={handleClick}>Click me</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useWindowSize Hook in a React Component\nDESCRIPTION: Example demonstrating how to implement the useWindowSize hook in a React component to display the current window dimensions.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useWindowSize.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWindowSize } from \"~/hooks/useWindowSize\";\n\nfunction Component() {\n  const { width, height } = useWindowSize();\n\n  return (\n    <div>\n      <h1>Window Size</h1>\n      <p>Width: {width}px</p>\n      <p>Height: {height}px</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useKeyPress in a React Component\nDESCRIPTION: Example of how to implement the useKeyPress hook in a React component to detect the Alt+S key combination for saving functionality.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useKeyPress.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyPress } from \"~/hooks/useKeyPress\";\n\nfunction Component() {\n  const altS = useKeyPress({ key: \"s\", alt: true });\n  return <div>{altS ? \"Saving document...\" : \"Type your text here...\"}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Hooks to Project\nDESCRIPTION: Command to add custom hooks to the project, prompting for selection from available hooks.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/getting-started/initialization.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli add\n```\n\n----------------------------------------\n\nTITLE: Using useClipboard in a React Component\nDESCRIPTION: Example showing how to use the useClipboard hook in a React component to copy text and display the copy status.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useClipboard.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useClipboard } from \"~/hooks/useClipboard\";\n\nfunction Component() {\n  const { copy, isCopied } = useClipboard();\n\n  return (\n    <div>\n      <button onClick={() => copy(\"Hello, world!\")}>\n        Copy \"Hello, world!\"\n      </button>\n      <p>Is copied: {isCopied ? \"Yes\" : \"No\"}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Hooks with Rehooks\nDESCRIPTION: Command to list and add available hooks to your project. This interactive command shows the hooks available through Rehooks and allows selecting which ones to add to your project.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add\n```\n\n----------------------------------------\n\nTITLE: Using useCounter Hook in a React Component\nDESCRIPTION: Example of how to use the useCounter hook in a React component. It demonstrates importing the hook, initializing it with a value, and using the returned functions to manipulate the counter.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useCounter.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCounter } from \"~/hooks/useCounter\";\n\nfunction Component() {\n  const [count, { increment, decrement, reset }] = useCounter(0);\n\n  return (\n    <div>\n      <h2>Counter Example</h2>\n      <p>Current Count: {count}</p>\n      <button onClick={increment}>Increment</button>\n      <button onClick={decrement}>Decrement</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Rehooks Configuration via CLI\nDESCRIPTION: This command initializes the Rehooks configuration in your project's directory. It uses the latest version of the Rehooks CLI to ensure you have the most up-to-date features and functionality.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/getting-started/index.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest init\n```\n\n----------------------------------------\n\nTITLE: Using useThrottle in a React Component\nDESCRIPTION: Example of how to use the useThrottle hook in a React component to throttle search API calls. It demonstrates setting up state, creating a mock search API, and using the throttled function for handling user input.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useThrottle.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThrottle } from \"~/hooks/useThrottle\";\n\nfunction Component() {\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\n  const [results, setResults] = useState<string[]>([]);\n\n  const searchAPI = async (term: string) => {\n    console.log(\"🔍 Searching for:\", term);\n    await new Promise((resolve) => setTimeout(resolve, 500));\n    return [\n      `Result 1 for ${term}`,\n      `Result 2 for ${term}`,\n      `Result 3 for ${term}`,\n    ];\n  };\n\n  const handleSearch = useThrottle(\n    async (term: string) => {\n      if (term.trim() === \"\") {\n        setResults([]);\n        return;\n      }\n      const searchResults = await searchAPI(term);\n      setResults(searchResults);\n    },\n    { wait: 1000 },\n  );\n\n  return (\n    <div>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Search...\"\n          value={searchTerm}\n          onChange={(e) => {\n            setSearchTerm(e.target.value);\n            handleSearch(e.target.value);\n          }}\n        />\n        <div>\n          Try typing quickly - the search is throttled to once per second\n        </div>\n      </div>\n\n      <div>\n        {results.map((result, index) => (\n          <div key={index}>{result}</div>\n        ))}\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Hooks\nDESCRIPTION: Command to add specific hooks to the project by passing their names as arguments.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/getting-started/initialization.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli add useFocus useFetch useWindowSize useEventListener\n```\n\n----------------------------------------\n\nTITLE: Using useHover Hook in a React Component\nDESCRIPTION: Example demonstrating how to implement the useHover hook in a React component. The component changes background color when hovered, using the boolean state returned by the hook.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useHover.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useHover } from \"~/hooks/useHover\";\n\nexport default function Component() {\n  const [ref, isHovered] = useHover<HTMLDivElement>();\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        width: \"200px\",\n        height: \"200px\",\n        backgroundColor: isHovered ? \"lightblue\" : \"lightcoral\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        transition: \"background-color 0.3s\",\n      }}\n    >\n      <p>{isHovered ? \"Hovered!\" : \"Hover over me!\"}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useIsClient Hook in a React Component\nDESCRIPTION: Example of how to import and use the useIsClient hook in a React component. The hook is used to conditionally render content based on whether it's running on the client or server.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useIsClient.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useIsClient } from \"~/hooks/useIsClient\";\n\nfunction Component() {\n  const isClient = useIsClient();\n\n  return <div>{isClient ? \"Client\" : \"Server\"}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Rehooks CLI Configuration\nDESCRIPTION: Command to initialize the Rehooks configuration in a project. This sets up the necessary configuration files to start using Rehooks in your React project.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/packages/cli/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx rehooks-cli@latest init\n```\n\n----------------------------------------\n\nTITLE: Using useStatus Hook in a React Component\nDESCRIPTION: Example of importing and implementing the useStatus hook in a React component to display the client's online status.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useStatus.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useStatus } from \"~/hooks/useStatus\";\n\nfunction Component() {\n  const isOnline = useStatus();\n  return <p>Is online: {isOnline ? \"Yes\" : \"No\"}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation for Rehooks List Hooks Endpoint\nDESCRIPTION: This code uses the APIPage component to render documentation for the GET /hooks endpoint from the Rehooks API. It references an OpenAPI specification file and configures the component to display only the specified operation path and method.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/api/list/list-hooks.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage\n  document={\"./rehooksapi.json\"}\n  operations={[{ path: \"/hooks\", method: \"get\" }]}\n  webhooks={[]}\n  hasHead={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useCounter Hook from Rehooks Library in React\nDESCRIPTION: Example demonstrating how to import and use the useCounter hook from the rehooks-ts library. The hook provides count value and increment/decrement functions for counter functionality.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/packages/core/README.md#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCounter } from 'rehooks-ts';\n\nfunction Component() {\n  const { count, increment, decrement } = useCounter(0);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Rehooks Configuration\nDESCRIPTION: Command to initialize the Rehooks configuration in the project directory.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/getting-started/initialization.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli init\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Cards in JSX\nDESCRIPTION: This code renders a set of navigation cards within a container div with maximum width. Each card links to different API endpoints for listing hooks or getting a specific hook by title.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/api/list/index.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"max-w-3xl\">\n  <Cards>\n    <Card title=\"List Hooks\" href=\"/docs/api/list/list-hooks\">\n      Get the list of available hooks.\n    </Card>\n    <Card title=\"Specific Hook\" href=\"/docs/api/list/specific-hook\">\n      Get a specific hook by its title.\n    </Card>\n  </Cards>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Legal Document Links using Cards in JSX\nDESCRIPTION: This code snippet creates a card-based layout to display links to legal documents for Rehooks. It uses custom Card components to render links to terms of service, privacy policy, and code policy pages.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/legal/index.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Cards className=\"max-w-3xl\">\n<Card title=\"Terms of Service\" href=\"/docs/cli/legal/terms\">\n  Read the terms of service for Rehooks.\n</Card>\n\n<Card title=\"Privacy Policy\" href=\"/docs/cli/legal/privacy-policy\">\n  Read the privacy policy for Rehooks.\n</Card>\n\n<Card title=\"Code Policy\" href=\"/docs/cli/legal/code-policy\">\n  Read the code policy for Rehooks.\n</Card>\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: API Definition for useDebounceCallback Hook\nDESCRIPTION: TypeScript type definition for the useDebounceCallback hook. The hook accepts a callback function and a delay in milliseconds, returning a debounced version of the provided callback.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useDebounceCallback.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useDebounceCallback<T extends (...args: any[]) => void>(\n  callback: T,\n  delay: number,\n): (...args: Parameters<T>) => void;\n```\n\n----------------------------------------\n\nTITLE: Rendering Hook Documentation with Steps Component\nDESCRIPTION: JSX code block showing the documentation structure for Rehooks library using the Steps and Cards components from fumadocs-ui. Each card represents a different hook with its title and brief description.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/index.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Steps>\n  <Step>\n    # Available Hooks\n    <div class=\"max-w-3xl\">\n      <Cards>\n        <Card title=\"useBattery\" href=\"/docs/cli/hooks/useBattery\">\n          Fetches and monitors device battery level and charging state.\n        </Card>\n        <Card title=\"useClipboard\" href=\"/docs/cli/hooks/useClipboard\">\n          Provides a function to copy text to the clipboard effortlessly.\n        </Card>\n        <Card title=\"useCountdown\" href=\"/docs/cli/hooks/useCountDown\">\n          Implements countdown functionality with configurable options.\n        </Card>\n        <Card title=\"useCounter\" href=\"/docs/cli/hooks/useCounter\">\n          Returns a tuple with counter value and increment, decrement, reset\n          functions.\n        </Card>\n        <Card title=\"useCountUp\" href=\"/docs/cli/hooks/useCountUp\">\n          Implements count-up functionality with customizable settings.\n        </Card>\n        <Card\n          title=\"useDebounceCallback\"\n          href=\"/docs/cli/hooks/useDebounceCallback\"\n        >\n          Debounces a callback, executing it only after a specified delay.\n        </Card>\n        <Card title=\"useDebounceValue\" href=\"/docs/cli/hooks/useDebounceValue\">\n          Debounces a value, updating it after a specified delay.\n        </Card>\n        <Card title=\"useDevice\" href=\"/docs/cli/hooks/useDevice\">\n          Detects device type and returns a boolean for each detected type.\n        </Card>\n      </Cards>\n      Explore more about the hooks available in Rehooks down below.\n    </div>\n  </Step>\n</Steps>\n```\n\n----------------------------------------\n\nTITLE: useSessionStorage Hook API TypeScript Definition\nDESCRIPTION: TypeScript type definition for the useSessionStorage hook, showing its parameter and return types.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useSessionStorage.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useSessionStorage<T>(\n  key: string,\n  initialValue: T,\n): [T, (value: T) => void];\n```\n\n----------------------------------------\n\nTITLE: Configuring APIPage Component with Hook Endpoint\nDESCRIPTION: Configuration of the APIPage React component to display API documentation for a specific hook endpoint. Uses GET method for the /hooks/{title} route.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/api/list/specific-hook.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<APIPage\n  document={\"./rehooksapi.json\"}\n  operations={[{ path: \"/hooks/{title}\", method: \"get\" }]}\n  webhooks={[]}\n  hasHead={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Cards Component in JSX\nDESCRIPTION: This snippet shows how to use the Cards and Card components to display links to the Rehooks CLI package on NPM and the GitHub repository. It includes icons and titles for each card.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/index.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n  <Card\n    icon={<PackageIcon />}\n    title=\"Official Rehooks CLI package\"\n    href=\"https://npmjs.com/package/rehooks-cli\"\n  >\n    Checkout on NPM\n  </Card>\n  <Card\n    icon={<GithubIcon />}\n    title=\"Want to contribute?\"\n    href=\"https://github.com/Pyr33x/rehooks\"\n  >\n    Report bugs, suggest features\n  </Card>\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: useDevice Hook API TypeScript Definition\nDESCRIPTION: TypeScript definition of the useDevice hook, showing its return type with boolean values for device types and functions to toggle views.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useDevice.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useDevice(): {\n  isMobile: boolean;\n  isDesktop: boolean;\n  isTablet: boolean;\n  DesktopView: () => void;\n  MobileView: () => void;\n  TabletView: () => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Rehooks with JSON\nDESCRIPTION: This JSON configuration specifies the directory for importing hooks and whether to force overwrite existing files. The 'directory' property sets the hooks directory, while 'forceOverwrite' determines if existing files should be overwritten without prompting.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/getting-started/configuration.mdx#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"directory\": \"src/hooks\",\n  \"forceOverwrite\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Rehooks CLI\nDESCRIPTION: Command to run the latest version of Rehooks CLI directly using npx.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/getting-started/initialization.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest\n```\n\n----------------------------------------\n\nTITLE: useCountUp Hook API Definition\nDESCRIPTION: TypeScript definition of the useCountUp hook function signature, showing its parameters and return value types.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useCountUp.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useCountup({\n  countStart,\n  countStop = Infinity,\n  intervalMs = 1000,\n}: CountupOptions): [number, CountupControllers];\n```\n\n----------------------------------------\n\nTITLE: Initializing Rehooks Configuration via CLI\nDESCRIPTION: This command initializes the Rehooks configuration by generating the rehooks.json file. It uses npx to run the latest version of the rehooks-cli.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/getting-started/configuration.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest init\n```\n\n----------------------------------------\n\nTITLE: useCounter Hook TypeScript Definition\nDESCRIPTION: TypeScript definition of the useCounter hook. It takes an optional initial value and returns a CounterReturnType, which includes the current count and functions to manipulate it.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useCounter.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useCounter(initialValue?: number): CounterReturnType;\n```\n\n----------------------------------------\n\nTITLE: Initializing Rehooks with Custom Path\nDESCRIPTION: Command to initialize Rehooks configuration with a custom path for the hooks directory.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/getting-started/initialization.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli init ./path/somewhere\n```\n\n----------------------------------------\n\nTITLE: useHover Hook Type Definition\nDESCRIPTION: TypeScript type definition for the useHover hook. It's a generic function that returns a tuple containing a ref and a boolean indicating hover state.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useHover.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useHover<T extends HTMLElement>(): [Ref<T>, boolean];\n```\n\n----------------------------------------\n\nTITLE: Adding Hooks with Rehooks CLI\nDESCRIPTION: Command to view and add available React hooks to your project using the Rehooks CLI. This allows you to browse and select from a library of pre-built custom hooks.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/packages/cli/README.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx rehooks-cli@latest add\n```\n\n----------------------------------------\n\nTITLE: useUnmount TypeScript Type Definition\nDESCRIPTION: TypeScript type definition for the useUnmount hook, showing its function signature and parameter types.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useUnmount.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useUnmount(fn: () => void): void;\n```\n\n----------------------------------------\n\nTITLE: Listing Available Hooks\nDESCRIPTION: Command to list all available hooks in the API with their descriptions.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/getting-started/initialization.mdx#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli list\n```\n\n----------------------------------------\n\nTITLE: Installing useSessionStorage Hook via Rehooks CLI\nDESCRIPTION: Command to install the useSessionStorage hook using the rehooks-cli tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useSessionStorage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useSessionStorage\n```\n\n----------------------------------------\n\nTITLE: useLang Hook Type Definition\nDESCRIPTION: TypeScript type definition for the useLang hook function that returns a string representing the browser language code\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useLang.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useLang(): string;\n```\n\n----------------------------------------\n\nTITLE: Initializing Rehooks Configuration\nDESCRIPTION: Command to initialize the Rehooks configuration in a project. This sets up the necessary configuration files to start using Rehooks in your React application.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest init\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of useIsClient Hook\nDESCRIPTION: TypeScript function signature for the useIsClient hook. It takes no parameters and returns a boolean indicating whether the component is mounted on the client.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useIsClient.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useIsClient(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Installing useFetch via CLI\nDESCRIPTION: Command to install the useFetch hook using the rehooks CLI tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useFetch.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useFetch\n```\n\n----------------------------------------\n\nTITLE: Installing useClipboard Hook via CLI\nDESCRIPTION: Command to install the useClipboard hook using the rehooks-cli tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useClipboard.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useClipboard\n```\n\n----------------------------------------\n\nTITLE: API Definition of useEventCallback\nDESCRIPTION: TypeScript definition of the useEventCallback hook. It takes a function as an argument and returns a memoized version of that function with the same type.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useEventCallback.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useEventCallback<T extends (...args: any[]) => any>(fn: T): T;\n```\n\n----------------------------------------\n\nTITLE: Installing useToggle hook with CLI\nDESCRIPTION: Command to install the useToggle hook using the rehooks CLI tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useToggle.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useToggle\n```\n\n----------------------------------------\n\nTITLE: useBattery Hook TypeScript Definition\nDESCRIPTION: TypeScript definition of the useBattery hook, showing its return type as BatteryState.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useBattery.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useBattery(): BatteryState;\n```\n\n----------------------------------------\n\nTITLE: Installing useEventListener Hook via CLI\nDESCRIPTION: Command to install the useEventListener hook using the rehooks-cli tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useEventListener.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useEventListener\n```\n\n----------------------------------------\n\nTITLE: Installing useDebounceValue via CLI\nDESCRIPTION: Command to install the useDebounceValue hook using the rehooks-cli tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useDebounceValue.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useDebounceValue\n```\n\n----------------------------------------\n\nTITLE: useClipboard Hook API Definition\nDESCRIPTION: TypeScript type definition for the useClipboard hook, showing its return type with the copy function and isCopied state.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useClipboard.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction useClipboard(): {\n  copy: (text: string) => void;\n  isCopied: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing useInterval Hook via CLI\nDESCRIPTION: Command to install the useInterval hook using the rehooks-cli tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useInterval.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useInterval\n```\n\n----------------------------------------\n\nTITLE: useIsMounted Hook Type Definition\nDESCRIPTION: TypeScript type definition for the useIsMounted hook, showing its function signature that returns a boolean check function.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useIsMounted.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useIsMounted(): () => boolean;\n```\n\n----------------------------------------\n\nTITLE: Installing useWindowSize Hook via CLI\nDESCRIPTION: Command to install the useWindowSize hook using the rehooks-cli tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useWindowSize.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useWindowSize\n```\n\n----------------------------------------\n\nTITLE: Installing useTitle Hook via CLI\nDESCRIPTION: Command to install the useTitle hook using the rehooks-cli package.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useTitle.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useTitle\n```\n\n----------------------------------------\n\nTITLE: Installing useEventCallback via CLI\nDESCRIPTION: Command to install the useEventCallback hook using the rehooks-cli.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useEventCallback.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useEventCallback\n```\n\n----------------------------------------\n\nTITLE: Installing useFocus Hook via CLI\nDESCRIPTION: Command to install the useFocus hook using the rehooks-cli.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useFocus.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useFocus\n```\n\n----------------------------------------\n\nTITLE: Installing useCounter Hook via CLI\nDESCRIPTION: Command to install the useCounter hook using the rehooks-cli.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useCounter.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useCounter\n```\n\n----------------------------------------\n\nTITLE: Installing useStep hook via CLI\nDESCRIPTION: Command to install the useStep hook using the rehooks CLI tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useStep.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useStep\n```\n\n----------------------------------------\n\nTITLE: Installing useDebounceCallback via CLI\nDESCRIPTION: Command to install the useDebounceCallback hook using the rehooks-cli tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useDebounceCallback.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useDebounceCallback\n```\n\n----------------------------------------\n\nTITLE: Installing useBattery Hook via CLI\nDESCRIPTION: Command to install the useBattery hook using the rehooks-cli.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useBattery.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useBattery\n```\n\n----------------------------------------\n\nTITLE: Installing useIsomorphicLayoutEffect via CLI\nDESCRIPTION: Command to install the useIsomorphicLayoutEffect hook using the rehooks-cli tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useIsmorphicLayoutEffect.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useIsomorphicLayoutEffect\n```\n\n----------------------------------------\n\nTITLE: Installing useDevice Hook via CLI\nDESCRIPTION: Command to install the useDevice hook using the rehooks-cli.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useDevice.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useDevice\n```\n\n----------------------------------------\n\nTITLE: Installing useLocalStorage Hook via CLI\nDESCRIPTION: Command to install the useLocalStorage hook using the rehooks-cli tool\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useLocalStorage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useLocalStorage\n```\n\n----------------------------------------\n\nTITLE: Installing useHover Hook via CLI\nDESCRIPTION: Command line instruction for adding the useHover hook to your project using the rehooks-cli tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useHover.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useHover\n```\n\n----------------------------------------\n\nTITLE: Installing useIsMounted Hook via CLI\nDESCRIPTION: Command to install the useIsMounted hook using the rehooks CLI tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useIsMounted.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useIsMounted\n```\n\n----------------------------------------\n\nTITLE: Installing useUnmount with CLI\nDESCRIPTION: Command to install the useUnmount hook using the rehooks-cli tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useUnmount.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useUnmount\n```\n\n----------------------------------------\n\nTITLE: Installing useLang Hook via CLI\nDESCRIPTION: Command to install the useLang hook using the rehooks CLI tool\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useLang.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useLang\n```\n\n----------------------------------------\n\nTITLE: Installing useStatus Hook via CLI\nDESCRIPTION: Command to install the useStatus hook using the rehooks-cli utility.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useStatus.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useStatus\n```\n\n----------------------------------------\n\nTITLE: Installing useKeyPress with CLI\nDESCRIPTION: Command to install the useKeyPress hook into your project using the rehooks-cli tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useKeyPress.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useKeyPress\n```\n\n----------------------------------------\n\nTITLE: Installing useScroll Hook via CLI\nDESCRIPTION: Command to install the useScroll hook using the rehooks CLI tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useScroll.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useScroll\n```\n\n----------------------------------------\n\nTITLE: Installing useCountUp with CLI\nDESCRIPTION: Command to install the useCountUp hook using the rehooks CLI tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useCountUp.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useCountUp\n```\n\n----------------------------------------\n\nTITLE: Installing useCountdown Hook via CLI\nDESCRIPTION: Command to install the useCountdown hook using the rehooks CLI tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useCountDown.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useCountDown\n```\n\n----------------------------------------\n\nTITLE: Installing useThrottle hook via CLI\nDESCRIPTION: Command to install the useThrottle hook using the rehooks-cli.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useThrottle.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useThrottle\n```\n\n----------------------------------------\n\nTITLE: Installing useSleep Hook via CLI\nDESCRIPTION: Command to install the useSleep hook using the rehooks-cli.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useSleep.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useSleep\n```\n\n----------------------------------------\n\nTITLE: Installing useMap Hook via CLI\nDESCRIPTION: Command to install the useMap hook using the rehooks-cli tool.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useMap.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useMap\n```\n\n----------------------------------------\n\nTITLE: Installing useIsClient Hook via CLI\nDESCRIPTION: Command to install the useIsClient hook using the rehooks-cli.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/hooks/useIsClient.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rehooks-cli@latest add useIsClient\n```\n\n----------------------------------------\n\nTITLE: Markdown Resource Documentation\nDESCRIPTION: A structured markdown document listing various resources including articles about React hooks, extensions like Rehooks Raycast, and related libraries such as Rehooks CLI\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/resources.mdx#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Resources\n\nThese are some useful resources that can help you build custom hooks. I've made it with rehooks in mind, so you can use it as a reference to build your own ones.\n\n## Articles\n\n- [Rules of Hooks](https://react.dev/reference/rules/rules-of-hooks)\n- [Built in Hooks](https://react.dev/reference/react/hooks)\n- [Reusing Logic with Custom Hooks](https://react.dev/learn/reusing-logic-with-custom-hooks)\n- [Guide to React Custom Hooks](https://dev.to/rasaf_ibrahim/a-guide-to-react-custom-hooks-2b4h)\n\n## Extensions\n\n- [Rehooks Raycast](https://www.raycast.com/Pyr33x/rehooks)\n\n## Libraries\n\n- [Rehooks CLI](https://github.com/pyr33x/rehooks)\n```\n\n----------------------------------------\n\nTITLE: Importing Icons in JSX\nDESCRIPTION: This snippet demonstrates how to import icon components from the @rehooks/ui/icons package. It's used to display icons in the documentation.\nSOURCE: https://github.com/pyr33x/rehooks/blob/main/apps/docs/content/docs/cli/index.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PackageIcon, GithubIcon } from \"@rehooks/ui/icons\";\n```"
  }
]