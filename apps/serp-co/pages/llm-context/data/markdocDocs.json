[
  {
    "owner": "markdoc",
    "repo": "docs",
    "content": "TITLE: Complete Markdoc Configuration Example\nDESCRIPTION: A comprehensive example showing a full Markdoc configuration object with custom nodes, tags, variables, functions, and partials. This demonstrates how to customize all aspects of the Markdoc rendering pipeline.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/config.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@markdoc/markdoc').Config} */\nconst config = {\n  nodes: {\n    heading: {\n      render: 'Heading',\n      attributes: {\n        id: { type: String },\n        level: { type: Number }\n      }\n    }\n  },\n  tags: {\n    callout: {\n      render: 'Callout',\n      attributes: {\n        title: {\n          type: String\n        }\n      }\n    }\n  },\n  variables: {\n    name: 'Dr. Mark',\n    frontmatter: {\n      title: 'Configuration options'\n    }\n  },\n  functions: {\n    includes: {\n      transform(parameters, config) {\n        const [array, value] = Object.values(parameters);\n\n        return Array.isArray(array) ? array.includes(value) : false;\n      }\n    }\n  },\n  partials: {\n    'header.md': Markdoc.parse(`# My header`)\n  }\n};\n\nconst content = Markdoc.transform(ast, config);\n```\n\n----------------------------------------\n\nTITLE: Basic Markdoc Usage in JavaScript\nDESCRIPTION: Demonstrates the core functionality of Markdoc by parsing, transforming, and rendering a simple Markdown document to HTML. This example shows the three main steps in the Markdoc processing pipeline.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/index.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Markdoc from '@markdoc/markdoc';\n\nconst doc = `\n# Hello world.\n> My first Markdoc page\n`;\n\nconst ast = Markdoc.parse(doc);\n\nconst content = Markdoc.transform(ast);\n\nconst html = Markdoc.renderers.html(content);\n```\n\n----------------------------------------\n\nTITLE: Basic Markdoc Rendering Pipeline in JavaScript\nDESCRIPTION: Complete example showing the Markdoc rendering pipeline: parsing source text into an AST, transforming the AST with an optional config, and rendering the transformed content to HTML.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst source = '# Markdoc';\n\nconst ast = Markdoc.parse(source);\n{% comment %}\n// prettier-ignore\n{% /comment %}\nconst content = Markdoc.transform(ast, /* [config](/docs/config) */);\n\nconst html = Markdoc.renderers.html(content);\n```\n\n----------------------------------------\n\nTITLE: Creating a custom Markdoc config in Next.js\nDESCRIPTION: Example of creating a custom Markdoc configuration file for advanced control and language server support in a Next.js project.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/nextjs.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// markdoc/config.js\n\nimport tags from './tags';\nimport nodes from './nodes';\nimport functions from './functions';\n\nexport default {\n  tags,\n  nodes,\n  functions\n  // add other stuff here\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Tag Definition in Markdoc\nDESCRIPTION: JavaScript code for defining a custom 'callout' tag with specific attributes and rendering options.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/tags.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// ./schema/Callout.markdoc.js\n\nexport const callout = {\n  render: 'Callout',\n  children: ['paragraph', 'tag', 'list'],\n  attributes: {\n    type: {\n      type: String,\n      default: 'note',\n      matches: ['caution', 'check', 'note', 'warning'],\n      errorLevel: 'critical'\n    },\n    title: {\n      type: String\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Passing Variables in Markdoc Config\nDESCRIPTION: This snippet demonstrates how to create a config object with a version variable and use it in the Markdoc rendering pipeline. It shows the complete flow from parsing to HTML rendering.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/config.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@markdoc/markdoc').Config} */\nconst config = { variables: { version: \"1.0\" }};\nconst ast = Markdoc.parse(\"This is version {% $version %}\");\nconst content = Markdoc.transform(ast, config);\nconst html = Markdoc.renderers.html(content);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Nodes in Markdoc (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define and use custom nodes in Markdoc by passing a custom Node to the config object. It shows the setup for parsing, transforming, and rendering Markdoc content with custom nodes.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/nodes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { heading } from './schema/Heading.markdoc';\nimport * as components from './components';\n\n/** @type {import('@markdoc/markdoc').Config} */\nconst config = {\n  nodes: {\n    heading\n  }\n};\n\nconst ast = Markdoc.parse(doc);\nconst content = Markdoc.transform(ast, config);\n\nconst children = Markdoc.renderers.react(content, React, { components });\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tag Validation in Markdoc Config\nDESCRIPTION: This example shows how to implement custom validation for a 'provider' tag in the Markdoc config. It checks if the tag has exactly one child and returns an error if not. This demonstrates how to extend Markdoc's validation capabilities for specific tags.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/validation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@markdoc/markdoc').Config} */\nconst config = {\n  tags: {\n    provider: {\n      render: 'Provider',\n      // ...\n      validate(node) {\n        if (node.children.length !== 1) {\n          return [\n            {\n              id: 'provider-children',\n              level: 'critical',\n              message: 'Providers must only have one child.'\n            }\n          ];\n        }\n        return [];\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting in Markdoc using Prism\nDESCRIPTION: This example demonstrates how to implement syntax highlighting for code blocks in Markdoc using Prism. It creates a custom 'fence' node and a React component for rendering highlighted code.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/index.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'prismjs';\nimport 'prismjs/themes/prism.css';\n\nimport Prism from 'react-prism';\n\nexport function Fence({ children, language }) {\n  return (\n    <Prism key={language} component=\"pre\" className={`language-${language}`}>\n      {children}\n    </Prism>\n  );\n}\n\nconst fence = {\n  render: 'Fence',\n  attributes: {\n    language: {\n      type: String\n    }\n  }\n};\n\nconst content = Markdoc.transform(ast, {\n  nodes: {\n    fence\n  }\n});\n\nMarkdoc.renderers.react(content, React, {\n  components: {\n    Fence\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Heading Node in Markdoc (JavaScript)\nDESCRIPTION: This code defines a custom heading node for Markdoc. It includes a function to generate IDs for headings and specifies the node's attributes and transform function. This custom node can be used to render headings with automatic ID generation.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/nodes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ./schema/Heading.markdoc.js\n\nimport { Tag } from '@markdoc/markdoc';\n\n// Or replace this with your own function\nfunction generateID(children, attributes) {\n  if (attributes.id && typeof attributes.id === 'string') {\n    return attributes.id;\n  }\n  return children\n    .filter((child) => typeof child === 'string')\n    .join(' ')\n    .replace(/[?]/g, '')\n    .replace(/\\s+/g, '-')\n    .toLowerCase();\n}\n\nexport const heading = {\n  children: ['inline'],\n  attributes: {\n    id: { type: String },\n    level: { type: Number, required: true, default: 1 }\n  },\n  transform(node, config) {\n    const attributes = node.transformAttributes(config);\n    const children = node.transformChildren(config);\n\n    const id = generateID(children, attributes);\n\n    return new Tag(\n      `h${node.attributes['level']}`,\n      { ...attributes, id },\n      children\n    );\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Custom DateTime Attribute Implementation\nDESCRIPTION: Shows how to create a custom DateTime attribute type with validation and transformation logic.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/attributes.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport class DateTime {\n  validate(value, config) {\n    if (typeof value !== 'string' || isNaN(Date.parse(value)))\n      return [\n        {\n          id: 'invalid-datetime-type',\n          level: 'critical',\n          message: 'Must be a string with a valid date format'\n        }\n      ];\n\n    return [];\n  }\n\n  transform(value, config) {\n    return Date.parse(value);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Attribute Validation in Markdoc\nDESCRIPTION: This example demonstrates how to create a custom attribute type 'ImageSrc' with its own validation logic. It checks if the image source starts with 'https://' and returns an error if not. The custom attribute is then used in the Markdoc config for an 'image' tag.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/validation.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport class ImageSrc {\n  validate(value, config) {\n    if (!value.startsWith('https://')) {\n      return [\n        {\n          id: 'image-src',\n          level: 'error',\n          message: 'All image srcs should contain fully qualified URLs.'\n        }\n      ];\n    }\n    return [];\n  }\n}\n\n/** @type {import('@markdoc/markdoc').Config} */\nconst config = {\n  image: {\n    render: 'img',\n    attributes: {\n      src: {\n        type: ImageSrc,\n        required: true\n        // ...\n      }\n      // ...\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdoc Content in React Client\nDESCRIPTION: React component that fetches transformed Markdoc content from the server based on the current URL path, then renders it using Markdoc's React renderer with custom components.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/react.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// src/App.js\n\nimport React from 'react';\nimport Markdoc from '@markdoc/markdoc';\n\nimport { Callout } from './Callout';\n\nexport default function App() {\n  const [content, setContent] = React.useState(null);\n\n  React.useEffect(() => {\n    (async () => {\n      const response = await fetch(\n        `/markdoc?` +\n          new URLSearchParams({ path: window.location.pathname }),\n        { headers: { Accept: 'application/json' } }\n      );\n\n      if (response.status === 404) {\n        setContent('404');\n        return;\n      }\n\n      const content = await response.json();\n      setContent(content);\n    })();\n  }, []);\n\n  if (content === '404') {\n    return <p>Page not found.</p>;\n  }\n\n  if (!content) {\n    return <p>Loading...</p>;\n  }\n\n  const components = {\n    Callout\n  };\n\n  return Markdoc.renderers.react(content, React, { components });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Callout Component Schema in Markdoc\nDESCRIPTION: Defines a Markdoc schema for a Callout component that can render different types of callouts (note, warning, error, check). Specifies rendering constraints and attribute validation.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/react.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// [schema/Callout.markdoc.js](https://github.com/markdoc/docs/blob/dcba1a62be92097e3fd50c21e05fd6d2ea709312/examples/react-nodejs/schema/Callout.markdoc.js#L1-L18)\n\nmodule.exports = {\n  render: 'Callout',\n  children: ['paragraph', 'tag', 'list'],\n  attributes: {\n    type: {\n      type: String,\n      default: 'note',\n      matches: ['check', 'error', 'note', 'warning']\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs in Markdoc\nDESCRIPTION: This snippet shows how to implement tabs functionality in Markdoc using custom tags and React components. It includes the Markdoc tag definitions and corresponding React components for rendering tabs.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/index.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tag } from '@markdoc/markdoc';\n\nconst tabs = {\n  render: 'Tabs',\n  attributes: {},\n  transform(node, config) {\n    const labels = node\n      .transformChildren(config)\n      .filter((child) => child && child.name === 'Tab')\n      .map((tab) => (typeof tab === 'object' ? tab.attributes.label : null));\n\n    return new Tag(this.render, { labels }, node.transformChildren(config));\n  }\n};\n\nconst tab = {\n  render: 'Tab',\n  attributes: {\n    label: {\n      type: String\n    }\n  }\n};\n\n/** @type {import('@markdoc/markdoc').Config} */\nconst config = {\n  tags: {\n    tabs,\n    tab\n  }\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nexport const TabContext = React.createContext();\n\nexport function Tabs({ labels, children }) {\n  const [\n    currentTab,\n    setCurrentTab\n  ] = React.useState(labels[0]);\n\n  return (\n    <TabContext.Provider value={currentTab}>\n      <ul role=\"tablist\">\n        {labels.map((label) => (\n          <li key={label}>\n            <button\n              role=\"tab\"\n              aria-selected={label === currentTab}\n              onClick={() => setCurrentTab(label)}\n            >\n              {label}\n            </button>\n          </li>\n        ))}\n      </ul>\n      {children}\n    </TabContext.Provider>\n  );\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { TabContext } from './Tabs';\n\nexport function Tab({ label, children }) {\n  const currentTab = React.useContext(TabContext);\n\n  if (label !== currentTab) {\n    return null;\n  }\n\n  return children;\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Markdoc AST on Express Server\nDESCRIPTION: Sets up an Express server endpoint that retrieves a Markdoc AST, applies a configuration with custom tags and nodes, and transforms it into a renderable content tree that can be sent to the client.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/react.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// [server.js](https://github.com/markdoc/docs/blob/main/examples/react-nodejs/server.js)\n\nconst express = require('express');\n\nconst app = express();\n\nconst callout = require('./schema/callout.markdoc');\nconst heading = require('./schema/heading.markdoc');\n\n// [...](https://github.com/markdoc/docs/blob/dcba1a62be92097e3fd50c21e05fd6d2ea709312/examples/react-nodejs/server.js#L8-L14)\n\napp.get('/markdoc', (req, res) => {\n  const ast = contentManifest[req.query.path];\n\n  const config = {\n    tags: {\n      callout\n    },\n    nodes: {\n      heading\n    },\n    variables: {}\n  };\n\n  const content = Markdoc.transform(ast, config);\n\n  return res.json(content);\n});\n\napp.listen(4242, () => {\n  console.log(`Example app listening on port ${4242}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents in Markdoc\nDESCRIPTION: This example demonstrates how to create a table of contents in Markdoc by collecting headings from the page content and rendering them in a list. It includes a function to collect headings and a React component to render the table of contents.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/index.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction collectHeadings(node, sections = []) {\n  if (node) {\n    // Match all h1, h2, h3… tags\n    if (node.name.match(/h\\d/)) {\n      const title = node.children[0];\n\n      if (typeof title === 'string') {\n        sections.push({\n          ...node.attributes,\n          title\n        });\n      }\n    }\n\n    if (node.children) {\n      for (const child of node.children) {\n        collectHeadings(child, sections);\n      }\n    }\n  }\n\n  return sections;\n}\n\nconst content = Markdoc.transform(ast);\nconst headings = collectHeadings(content);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TableOfContents({ headings }) {\n  const items = headings.filter((item) => [2, 3].includes(item.level));\n\n  return (\n    <nav>\n      <ul>\n        {items.map((item) => (\n          <li key={item.title}>\n            <a href={`#${item.id}`}>{item.title}</a>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component for Custom Markdoc Tag\nDESCRIPTION: JSX code for implementing a React component that can be used with a custom Markdoc tag, demonstrating the rendering step.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/tags.md#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Icon } from './Icon';\n\nfunction Callout({ title, icon, children }) {\n  return (\n    <div className=\"callout\">\n      <div className=\"content\">\n        <Icon icon={icon} />\n        <div className=\"copy\">\n          <span className=\"title\">{title}</span>\n          <span>{children}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nreturn Markdoc.renderers.react(content, React, {\n  components: {\n    // The key here is the same string as `tag` in the previous step\n    Callout: Callout\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdoc Documents on the Server\nDESCRIPTION: Code snippet showing how to read and parse Markdoc content files on the server using the Markdoc.parse method, which converts raw text into an abstract syntax tree (AST).\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/react.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// [...](https://github.com/markdoc/docs/blob/main/examples/react-nodejs/createContentManifest.js#L13)\nconst rawText = fs.readFileSync(file, 'utf-8');\nconst ast = Markdoc.parse(rawText);\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Statements in Markdoc\nDESCRIPTION: This snippet shows how to create custom 'switch' and 'case' tags in Markdoc to implement switch statement functionality. It uses custom tag transforms to handle the switch logic.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/index.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { transformer } from '@markdoc/markdoc';\n\n/** @type {import('@markdoc/markdoc').Config} */\nconst config = {\n  tags: {\n    switch: {\n      attributes: { primary: { render: false } },\n      transform(node, config) {\n        const attributes = node.transformAttributes(config);\n\n        const child = node.children.find(\n          (child) => child.attributes.primary === attributes.primary\n        );\n\n        return child ? transformer.node(child, config) : [];\n      }\n    },\n    case: {\n      attributes: { primary: { render: false } }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Renderable Tree for React with Custom Tags\nDESCRIPTION: Demonstrates how to parse and transform a Markdoc document with custom tags before rendering it with React.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/render.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst tags = {\n  callout: {\n    render: 'Callout',\n    attributes: {}\n  }\n};\n\nconst doc = `\n{% callout %}\nAttention, over here!\n{% /callout %}\n`;\n\nconst ast = Markdoc.parse(doc);\nconst content = Markdoc.transform(ast, { tags });\n```\n\n----------------------------------------\n\nTITLE: Extending Heading Node Schema in Markdoc\nDESCRIPTION: Extends the default heading node from Markdoc to include automatic ID generation based on content. This enables anchor links and navigation functionality for headings.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/react.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// [schema/heading.markdoc.js](https://github.com/markdoc/docs/blob/dcba1a62be92097e3fd50c21e05fd6d2ea709312/examples/react-nodejs/schema/heading.markdoc.js#L1-L22)\n\nconst { nodes } = require('@markdoc/markdoc');\n\nfunction generateID(children, attributes) {\n  if (attributes.id && typeof attributes.id === 'string') {\n    return attributes.id;\n  }\n  return children\n    .filter((child) => typeof child === 'string')\n    .join(' ')\n    .replace(/[?]/g, '')\n    .replace(/\\s+/g, '-')\n    .toLowerCase();\n}\n\nmodule.exports = {\n  ...nodes.heading,\n  transform(node, config) {\n    const base = nodes.heading.transform(node, config);\n    base.attributes.id = generateID(base.children, base.attributes);\n    return base;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing Frontmatter and Configuring Variables in Markdoc\nDESCRIPTION: JavaScript code showing how to parse frontmatter with yaml and add it to the Markdoc config as variables. This enables access to frontmatter values within the document.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/frontmatter.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport yaml from 'js-yaml'; // or 'toml', etc.\n\nconst frontmatter = ast.attributes.frontmatter\n  ? yaml.load(ast.attributes.frontmatter)\n  : {};\n\n/** @type {import('@markdoc/markdoc').Config} */\nconst config = {\n  variables: {\n    frontmatter\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: If/Else Conditionals in Markdoc\nDESCRIPTION: Shows how to use if/else conditionals in Markdoc, including multiple else statements with different conditions.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/tags.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{% if $myFunVar %}\nOnly appear if $myFunVar!\n{% else /%}\nThis appears if not $myFunVar!\n{% /if %}\n\n{% if $myFunVar %}\nOnly appear if $myFunVar!\n{% else $otherFunVar /%}\nThis appears if not $myFunVar and $otherFunVar!\n{% else /%}\nThis appears if not $myFunVar and not $otherFunVar\n{% /if %}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Tag in Markdoc Config\nDESCRIPTION: Shows how to register a custom tag in the Markdoc configuration and transform content.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/tags.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { callout } from './schema/Callout.markdoc';\nimport * as components from './components';\n\n/** @type {import('@markdoc/markdoc').Config} */\nconst config = {\n  tags: {\n    callout\n  }\n};\n\nconst doc = `\n# My first custom tag\n`;\n\nconst ast = Markdoc.parse(doc);\nconst content = Markdoc.transform(ast, config);\n\nconst children = Markdoc.renderers.react(content, React, { components });\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Functions in Markdoc\nDESCRIPTION: Shows how to configure and register custom functions in the Markdoc config object for use in templates.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/functions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@markdoc/markdoc').Config} */\nconst config = {\n  functions: {\n    includes,\n    uppercase\n  }\n};\n\nconst content = Markdoc.transform(ast, config);\n```\n\n----------------------------------------\n\nTITLE: Using Markdoc Validate Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the Markdoc validate function to check a parsed abstract syntax tree (AST) for errors. It parses a simple document, creates an AST, and then validates it using a config object.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/validation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = `# Heading`;\n\nconst ast = Markdoc.parse(doc);\n\nconst errors = Markdoc.validate(ast, config);\n\n// Do something with the errors\n```\n\n----------------------------------------\n\nTITLE: Implementing Loops in Markdoc using Custom Tag Transform\nDESCRIPTION: This snippet shows how to implement loops in Markdoc using a custom Tag transform function. It creates a 'group' tag that can iterate over an array of items.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tag } from '@markdoc/markdoc';\n\nexport const group = {\n  render: 'Group',\n  attributes: {\n    items: { type: Array }\n  },\n  transform(node, config) {\n    const attributes = node.transformAttributes(config);\n    const children = node.transformChildren(config);\n\n    for (const item of attributes.items) {\n      /* Do something with each item */\n    }\n\n    return new Tag('Group', attributes, children);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a custom layout for Markdoc pages in Next.js\nDESCRIPTION: Example of wrapping Markdoc pages with a custom layout component in the Next.js _app.js file.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/nextjs.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/_app.js\n\nimport Layout from '../components/Layout';\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <Layout frontmatter={pageProps.markdoc.frontmatter}>\n      <Component {...pageProps} />\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Functions in JavaScript\nDESCRIPTION: Demonstrates how to create custom function definitions for array inclusion checking and string uppercase conversion in Markdoc.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/functions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst includes = {\n  transform(parameters) {\n    const [array, value] = Object.values(parameters);\n\n    return Array.isArray(array) ? array.includes(value) : false;\n  }\n};\n\nconst uppercase = {\n  transform(parameters) {\n    const string = parameters[0];\n\n    return typeof string === 'string' ? string.toUpperCase() : string;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Express Server Setup for Markdoc\nDESCRIPTION: Express server configuration with Markdoc transformation and HTML rendering setup.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/html.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\n\nconst app = express();\n\nconst callout = require('./schema/callout.markdoc');\nconst heading = require('./schema/heading.markdoc');\n\napp.get('/markdoc', (req, res) => {\n  const ast = contentManifest[req.query.path];\n\n  const config = {\n    tags: {\n      callout\n    },\n    nodes: {\n      heading\n    },\n    variables: {}\n  };\n\n  const content = Markdoc.transform(ast, config);\n  const rendered = Markdoc.renderers.html(content) || '';\n  const html = TEMPLATE.replace(/{{ CONTENT }}/, rendered);\n  return res.send(html);\n});\n\napp.listen(4242, () => {\n  console.log(`Example app listening on port ${4242}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Partials in Markdoc Config\nDESCRIPTION: Shows how to define partials in the Markdoc configuration by mapping file names to AST nodes. It also demonstrates parsing and transforming a document with a partial.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/partials.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@markdoc/markdoc').Config} */\nconst config = {\n  partials: {\n    'header.md': Markdoc.parse(`# My header`)\n  }\n};\n\nconst doc = `\n{% partial file=\"header.md\" /%}\n`;\n\nconst ast = Markdoc.parse(doc);\n\nconst content = Markdoc.transform(ast, config);\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Tags in Markdoc\nDESCRIPTION: Example showing how to use nested and composable tags in Markdoc, specifically demonstrating conditionals with callouts.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/tags.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% if true %}\n\n{% callout type=\"note\" %}\nTags are composable!\n{% /callout %}\n\n{% else /%}\n\n{% callout type=\"warning\" %}\nTags aren't composable!\n{% /callout %}\n\n{% /if %}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdoc Node Elements from Markdown\nDESCRIPTION: Shows the basic Markdown elements that Markdoc inherits, including headers, bold and italic text, links, images, lists, quotes, inline code, and code fences.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/syntax.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Headers\n\n**Bold**\n\n_Italic_\n\n[Links](/docs/nodes)\n\n![Images](/logo.svg)\n\nLists\n- Item 1\n- Item 1\n- Item 1\n\n> Quotes\n\n`Inline code`\n\n```\nCode fences\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdoc Content with React Components\nDESCRIPTION: Shows how to render the transformed Markdoc content using React components, providing a mapping from tags to custom components.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/render.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Markdoc from '@markdoc/markdoc';\nimport React from 'react'; // or 'preact'\n\nfunction Callout({ children }) {\n  return <div className=\"callout\">{children}</div>;\n}\n\nfunction MyApp() {\n  return Markdoc.renderers.react(content, React, {\n    components: {\n      Callout: Callout\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining custom Markdoc tags in Next.js\nDESCRIPTION: Example of creating a custom Markdoc tag for a button component in a Next.js project.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/nextjs.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// markdoc/tags.js\n\nimport { Button } from '../components/Button';\n\nexport const button = {\n  render: Button,\n  attributes: {\n    href: {\n      type: String\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Markdoc Tags Syntax\nDESCRIPTION: Demonstrates the basic structure of Markdoc tags, which are enclosed with {% and %} and can contain content between opening and closing tags.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/syntax.md#2025-04-23_snippet_1\n\nLANGUAGE: markdoc\nCODE:\n```\n{% tag %}\nContent\n{% /tag %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Callout Tag Attributes\nDESCRIPTION: Example configuration for a Callout tag showing attribute type definition, validation, and error handling.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/attributes.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  render: 'Callout',\n  children: ['paragraph', 'tag', 'list'],\n  attributes: {\n    type: {\n      type: String,\n      default: 'note',\n      required: true,\n      matches: ['caution', 'check', 'note', 'warning'],\n      errorLevel: 'critical',\n    },\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdoc Content to React Components\nDESCRIPTION: Shows the React renderer function signature that converts renderable tree nodes into React elements.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/render.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nrenderers.react(RenderableTreeNode | RenderableTreeNode[]) => React.Node\n```\n\n----------------------------------------\n\nTITLE: Using Attributes in Markdoc Tags\nDESCRIPTION: Shows how to pass attributes to Markdoc tags using HTML-like syntax. Attributes can be numbers, strings, booleans, arrays, objects, or variables.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/syntax.md#2025-04-23_snippet_2\n\nLANGUAGE: markdoc\nCODE:\n```\n{% city\n   index=0\n   name=\"San Francisco\"\n   deleted=false\n   coordinates=[1, 4, 9]\n   meta={id: \"id_123\"} \n   color=$color /%}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Markdoc integration\nDESCRIPTION: Update the Next.js configuration file to include Markdoc support and specify page extensions.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/nextjs.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst withMarkdoc = require('@markdoc/next.js');\n\nmodule.exports = withMarkdoc(/* [options] */)({\n  pageExtensions: ['md', 'mdoc', 'js', 'jsx', 'ts', 'tsx']\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdoc Document with Frontmatter\nDESCRIPTION: JavaScript code that demonstrates how to parse a Markdoc document containing frontmatter. The example creates an AST (Abstract Syntax Tree) from a document with a title in the frontmatter.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/frontmatter.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst doc = `\n---\ntitle: My title\n---\n\n# {% $frontmatter.title %} \n`;\n\nconst ast = Markdoc.parse(doc);\n```\n\n----------------------------------------\n\nTITLE: Global Variables Configuration in Markdoc\nDESCRIPTION: Shows how to configure global variables using the config object, including feature flags and user data.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/variables.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = `\n{% if $flags.my_feature_flag %}\nUsername: {% $user.name %}\n{% /if %}\n`;\n\n/** @type {import('@markdoc/markdoc').Config} */\nconst config = {\n  variables: {\n    flags: {\n      my_feature_flag: true\n    },\n    user: {\n      name: 'Dr. Mark'\n    }\n  }\n};\n\nconst ast = Markdoc.parse(doc);\nconst content = Markdoc.transform(ast, config);\n```\n\n----------------------------------------\n\nTITLE: Converting JSON Data to Markdoc Using AST Nodes\nDESCRIPTION: JavaScript code that demonstrates how to build a Markdoc AST (Abstract Syntax Tree) from JSON data and convert it to formatted Markdoc source using Markdoc.format. The example creates an unordered list with each coordinate pair as a list item.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/format.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Markdoc = require('@markdoc/markdoc')\nconst DATA = require('./data.json')\n\nconst list = new Markdoc.Ast.Node(\n  'list',\n  {ordered: false},\n  DATA.map(point => new Markdoc.Ast.Node(\n    'item',\n    {},\n    [\n      new Markdoc.Ast.Node('inline', {}, [\n        new Markdoc.Ast.Node(\n          'text', \n          {content: point.join(', ')}, \n          []\n        )\n      ])\n    ]\n  ))\n)\n\nMarkdoc.format(list)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdoc Validation Error Output in JavaScript\nDESCRIPTION: This side-by-side example shows how to use the Markdoc validate function with an invalid document and what the resulting error output looks like. It demonstrates the structure of validation errors returned by Markdoc.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/validation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = `{% $invalid_code %}`;\n\nconst ast = Markdoc.parse(doc);\n\nconst errors = Markdoc.validate(ast, config);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// errors\n[\n  {\n    type: 'tag',\n    lines: [1, 2],\n    location: {\n      start: { line: 1 },\n      end: { line: 2 }\n    },\n    error: {\n      id: 'missing-closing',\n      level: 'critical',\n      message: \"Node 'callout' is missing closing\"\n    }\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Attribute Usage in Markdoc Tags\nDESCRIPTION: Demonstrates how to pass different types of attributes to a Markdoc tag including numbers, strings, booleans, arrays and objects.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/attributes.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% city\n   index=0\n   name=\"San Francisco\"\n   deleted=false\n   coordinates=[1, 4, 9]\n   meta={id: \"id_123\"}\n   color=$color /%}\n```\n\n----------------------------------------\n\nTITLE: Creating Lit-based Web Component for Callout\nDESCRIPTION: Web Component implementation using Lit framework for custom Markdoc callout rendering with styled templates.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/html.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html, css, LitElement } from 'lit';\n\nexport class MarkdocCallout extends LitElement {\n  static styles = css`\n    .note {\n      background-color: #8792a2;\n    }\n    .caution {\n      background-color: #d97917;\n    }\n    .check {\n      background-color: #000000;\n    }\n    .warning {\n      background-color: #ed5f74;\n    }\n  `;\n\n  static properties = {\n    type: { type: String }\n  };\n\n  constructor() {\n    super();\n    this.type = 'note';\n  }\n\n  render() {\n    return html`<p class=\"${this.type}\"><slot></slot></p>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Walking Through Markdoc AST Nodes\nDESCRIPTION: Demonstrates how to use the walk function to traverse and process each node in a Markdoc AST.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/render.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ast = Markdoc.parse(document);\n\nfor (const node of ast.walk()) {\n  // do something with each node\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Usage in Markdoc\nDESCRIPTION: Demonstrates how to render a custom variable within Markdoc syntax.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/variables.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nHere I am rendering a custom {% $variable %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdoc Heading Schema\nDESCRIPTION: Extended heading node configuration with custom ID generation for anchor links.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/html.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { nodes } = require('@markdoc/markdoc');\n\nfunction generateID(children, attributes) {\n  if (attributes.id && typeof attributes.id === 'string') {\n    return attributes.id;\n  }\n  return children\n    .filter((child) => typeof child === 'string')\n    .join(' ')\n    .replace(/[?]/g, '')\n    .replace(/\\s+/g, '-')\n    .toLowerCase();\n}\n\nmodule.exports = {\n  ...nodes.heading,\n  transform(node, config) {\n    const base = nodes.heading.transform(node, config);\n    base.attributes.id = generateID(base.children, base.attributes);\n    return base;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing YAML Frontmatter in Markdoc\nDESCRIPTION: Example of using YAML for frontmatter in a Markdoc document. Includes basic metadata like title, description, and date.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/frontmatter.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Authoring in Markdoc\ndescription: Quickly author amazing content with Markdoc syntax, a superset of Markdown.\ndate: 2022-04-01\n---\n```\n\n----------------------------------------\n\nTITLE: Variable Usage in Links (Correct Example)\nDESCRIPTION: Shows correct way of using variables in Markdoc link tags.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/variables.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n{% link href=$variable %}Link{% /link %}\n```\n\n----------------------------------------\n\nTITLE: Transforming AST to Renderable Tree\nDESCRIPTION: Shows the transform function signature that converts an AST node or array of nodes into a renderable tree structure, optionally using a configuration object.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/render.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntransform(AstNode | AstNode[], ?Config) => RenderableTreeNode | RenderableTreeNode[]\n```\n\n----------------------------------------\n\nTITLE: Accessing Frontmatter Values in Markdoc\nDESCRIPTION: Example of accessing frontmatter values in a Markdoc document using the $frontmatter variable. This demonstrates how to use parsed frontmatter data within your content.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/frontmatter.md#2025-04-23_snippet_6\n\nLANGUAGE: md\nCODE:\n```\n# {% $frontmatter.title %}\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Markdoc\nDESCRIPTION: Shows how to use variables in Markdoc, which have a $ prefix. Variables can be used directly in content or accessed using dot notation for nested values.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/syntax.md#2025-04-23_snippet_4\n\nLANGUAGE: markdoc\nCODE:\n```\nHere I am rendering a custom {% $variable %}\n```\n\nLANGUAGE: markdoc\nCODE:\n```\nHere's a deeply nested variable {% $markdoc.frontmatter.title %}\n```\n\nLANGUAGE: markdoc\nCODE:\n```\n© {% $currentYear %} Stripe\n```\n\n----------------------------------------\n\nTITLE: Defining custom Markdoc nodes in Next.js\nDESCRIPTION: Example of creating a custom Markdoc node for a link component in a Next.js project.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/nextjs.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// markdoc/nodes.js\n\nimport { Link } from 'next/link';\n\nexport const link = {\n  render: Link,\n  attributes: {\n    href: {\n      type: String\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Basic If Conditional in Markdoc\nDESCRIPTION: Demonstrates a simple if conditional tag that displays content based on a variable's value.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/tags.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nThis is shown no matter what.\n\n{% if $myFunVar %}\nOnly appear if $myFunVar!\n{% /if %}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Heading in Markdoc (Markdown)\nDESCRIPTION: This snippet shows how to use the custom heading node in Markdoc syntax. It demonstrates creating a level 4 header using Markdown syntax, which will be processed by the custom heading node implementation.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/nodes.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n#### My header\n```\n\n----------------------------------------\n\nTITLE: Defining custom Markdoc functions in Next.js\nDESCRIPTION: Example of creating a custom Markdoc function for text transformation in a Next.js project.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/nextjs.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// markdoc/functions.js\n\nexport const upper = {\n  transform(parameters) {\n    const string = parameters[0];\n\n    return typeof string === 'string' ? string.toUpperCase() : string;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Partial Tags in Markdoc\nDESCRIPTION: Shows how to include content from another markdown file using the partial tag.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/tags.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n{% partial file=\"header.md\" /%}\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Rendering in Markdoc\nDESCRIPTION: JavaScript configuration to customize how the default table node renders in Markdoc.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/tags.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { nodes } from '@markdoc/markdoc';\n\n/** @type {import('@markdoc/markdoc').Config} */\nconst config = {\n  nodes: {\n    table: {\n      ...nodes.table,\n      render: 'Table' // your custom component goes here\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Function Usage Example in Markdoc\nDESCRIPTION: Demonstrates the usage of a custom includes function for checking country codes in an array.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/functions.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n{% if includes($countries, \"AR\") %} 🇦🇷 {% /if %}\n{% if includes($countries, \"AU\") %} 🇦🇺 {% /if %}\n{% if includes($countries, \"ES\") %} 🇪🇸 {% /if %}\n{% if includes($countries, \"JP\") %} 🇯🇵 {% /if %}\n{% if includes($countries, \"NG\") %} 🇳🇬 {% /if %}\n{% if includes($countries, \"US\") %} 🇺🇸 {% /if %}\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdoc Documents\nDESCRIPTION: Server-side code for parsing Markdoc content into AST format.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/html.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst rawText = fs.readFileSync(file, 'utf-8');\nconst ast = Markdoc.parse(rawText);\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Markdoc Partials\nDESCRIPTION: Illustrates how to pass variables as attributes to a partial when including it in a Markdoc document.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/partials.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% partial file=\"header.md\" variables={name: \"My header name\"} /%}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdoc\nDESCRIPTION: Demonstrates how to embed a YouTube video using Markdoc's custom tag syntax. The tag includes attributes for the video source, title, and width.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% youtube\n  src=\"https://www.youtube-nocookie.com/embed/MAWK_VmjU1Y?controls=0\"\n  title=\"Introducing Markdoc\"\n  width=\"50%\" /%}\n```\n\n----------------------------------------\n\nTITLE: Self-closing Tag Example in Markdoc\nDESCRIPTION: Demonstrates the syntax for a self-closing tag in Markdoc, using an image tag with a width attribute.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/tags.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% image width=40 /%}\n```\n\n----------------------------------------\n\nTITLE: Implementing Markdoc Callout Schema\nDESCRIPTION: Schema configuration for custom Callout component defining render target and attributes with type validation.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/html.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  render: 'markdoc-callout',\n  children: ['paragraph'],\n  attributes: {\n    type: {\n      type: String,\n      default: 'note',\n      matches: ['check', 'error', 'note', 'warning']\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Renderable Tree for HTML\nDESCRIPTION: Demonstrates how to parse and transform a Markdoc document before rendering it as HTML.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/render.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = `\n# Getting started\n\nRun this command to install the Markdoc library:\n`;\n\nconst ast = Markdoc.parse(doc);\nconst content = Markdoc.transform(ast);\n```\n\n----------------------------------------\n\nTITLE: Serving Markdoc Content as HTML with Express\nDESCRIPTION: Shows how to use the HTML renderer in an Express server to serve Markdoc content as a complete HTML page.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/render.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst Markdoc = require('@markdoc/markdoc');\n\nconst app = express();\n\napp.get('/docs/getting-started', (req, res) => {\n  res.setHeader('Content-Type', 'text/html');\n  res.send(`\n    <!DOCTYPE html>\n    <html>\n      <body>\n        ${Markdoc.renderers.html(content)}\n      </body>\n    </html>\n  `);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Functions in Markdoc\nDESCRIPTION: Demonstrates functions in Markdoc which can be called from document body, inside annotations, or within tag attributes. Functions use JavaScript-like syntax with comma-separated parameters.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/syntax.md#2025-04-23_snippet_5\n\nLANGUAGE: markdoc\nCODE:\n```\n# {% titleCase($markdoc.frontmatter.title) %}\n\n{% if equals(1, 2) %}\nShow the password\n{% /if %}\n\n{% tag title=uppercase($key) /%}\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdoc Content to AST\nDESCRIPTION: Shows the parse function signature that transforms a raw string into an abstract syntax tree (AST) representing the Markdoc document.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/render.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparse(string) => AstNode\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables in Markdoc Partials\nDESCRIPTION: Shows how to access variables passed to a partial within the partial's content using Markdoc syntax.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/partials.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% $name %}\n```\n\n----------------------------------------\n\nTITLE: Variable Usage in Partials\nDESCRIPTION: Example showing how to pass variables to a partial file in Markdoc.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/variables.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% partial variables={sdk: \"Ruby\", version: 3} file=\"header.md\" /%}\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdoc Tokenizer with allowIndentation Option in JavaScript\nDESCRIPTION: Demonstrates how to configure the Markdoc tokenizer to allow arbitrary indentation in nested tags. This is an experimental feature that enables better readability for complex nested tag structures but disables indent-based code blocks.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst example = `\n{% foo %}\n  {% bar %}\n    This is content inside of nested tags\n  {% /bar %}\n{% /foo %}\n`;\n\nconst tokenizer = new markdoc.Tokenizer({allowIndentation: true}));\nconst tokens = tokenizer.tokenize(example);\nconst ast = markdoc.parse(tokens);\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Tag in Markdoc Content\nDESCRIPTION: Shows how to use a custom callout tag in Markdoc content with title and icon attributes.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/tags.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n{% callout title=\"Hey you!\" icon=\"note\" %}\nI have a message for you\n{% /callout %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables in Partials\nDESCRIPTION: Demonstrates how to access variables within a partial file.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/variables.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nSDK: {% $sdk %}\nVersion: {% $version %}\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Attributes in Markdoc Tags\nDESCRIPTION: Demonstrates how to define multiple attributes within a tag, including a string and an array value.\nSOURCE: https://github.com/markdoc/docs/blob/main/spec/index.md#2025-04-23_snippet_7\n\nLANGUAGE: example\nCODE:\n```\n{% foo=\"bar\" baz=[1, 2, 3] %}\n```\n\n----------------------------------------\n\nTITLE: Variable Interpolation in Markdoc\nDESCRIPTION: Demonstrates how to insert a variable's value into text using interpolation syntax.\nSOURCE: https://github.com/markdoc/docs/blob/main/spec/index.md#2025-04-23_snippet_12\n\nLANGUAGE: example\nCODE:\n```\nHello {% $username %}\n```\n\n----------------------------------------\n\nTITLE: Creating a basic Markdoc file in Next.js\nDESCRIPTION: Example of a simple Markdoc file with frontmatter and content for use in a Next.js project.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/nextjs.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Get started with Markdoc\ndescription: How to get started with Markdoc\n---\n\n# Get started with Markdoc\n```\n\n----------------------------------------\n\nTITLE: Using Primary Attribute with If Tag in Markdoc\nDESCRIPTION: Shows how to use a conditional tag with a primary attribute to control content display based on a variable.\nSOURCE: https://github.com/markdoc/docs/blob/main/spec/index.md#2025-04-23_snippet_2\n\nLANGUAGE: example\nCODE:\n```\n{% if $foo %}\nThis is a paragraph in an `if` tag.\n{% /if %}\n```\n\n----------------------------------------\n\nTITLE: Example Markdoc AST Structure\nDESCRIPTION: Shows an example of the AST structure generated by the parse phase, including document and paragraph nodes with their attributes, children, and location metadata.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/render.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"document\",\n  \"attributes\": {},\n  \"children\": [\n    {\n      \"type\": \"paragraph\",\n        \"attributes\": {},\n        \"children\": [...],\n        \"lines\": [0, 2],\n        \"location\": {\n          \"start\": {\n            \"line\": 0\n          },\n          \"end\": {\n            \"line\": 2\n          }\n        },\n        \"errors\": [],\n        \"inline\": false,\n    }\n  ],\n  \"lines\": [],\n  \"errors\": [],\n  \"inline\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdoc options in Next.js\nDESCRIPTION: Example of setting Markdoc options, such as mode, in the Next.js configuration file.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/nextjs.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = withMarkdoc({ mode: 'static' })({\n  pageExtensions: // [...](https://nextjs.org/docs/api-reference/next.config.js/custom-page-extensions)\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Tag Structure in Markdoc\nDESCRIPTION: Shows how to create a block-level tag in Markdoc that encloses a paragraph of content.\nSOURCE: https://github.com/markdoc/docs/blob/main/spec/index.md#2025-04-23_snippet_0\n\nLANGUAGE: example\nCODE:\n```\n{% example %}\nThis paragraph is nested within a Markdoc tag.\n{% /example %}\n```\n\n----------------------------------------\n\nTITLE: Using frontmatter in Markdoc with Next.js\nDESCRIPTION: Example of accessing frontmatter data within Markdoc content in a Next.js project.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/nextjs.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Using the Next.js plugin\ndescription: Integrate Markdoc into your Next.js app\n---\n\n# {% $markdoc.frontmatter.title %}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Usage in Markdoc\nDESCRIPTION: Example showing how to use variables in Markdoc with dot notation and array access. Shows a tag using a variable with multiple segment access patterns.\nSOURCE: https://github.com/markdoc/docs/blob/main/spec/index.md#2025-04-23_snippet_15\n\nLANGUAGE: example\nCODE:\n```\n{% foo=$bar.baz[10].qux %}\n```\n\n----------------------------------------\n\nTITLE: Using Annotations in Markdoc\nDESCRIPTION: Demonstrates annotations, which are a way to pass attributes to nodes or tags when the HTML-like syntax isn't suitable. Annotations are written after the element they modify.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/syntax.md#2025-04-23_snippet_3\n\nLANGUAGE: markdoc\nCODE:\n```\n{% table %}\n\n- Function {% width=\"25%\" %}\n- Returns  {% colspan=2 %}\n- Example  {% align=\"right\" %}\n\n{% /table %}\n```\n\n----------------------------------------\n\nTITLE: Defining Markdoc Validate Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Markdoc validate function, which takes an AstNode and an optional Config, returning an array of ValidateError objects.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/validation.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvalidate(AstNode, ?Config) => ValidateError[]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom DateTime Attribute\nDESCRIPTION: Demonstrates how to integrate a custom DateTime attribute type into the Markdoc configuration.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/attributes.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DateTime } from './attribute-types/DateTime';\n\n/** @type {import('@markdoc/markdoc').Config} */\nconst config = {\n  tags: {\n    'tag-name': {\n      render: 'YourComponent',\n      attributes: {\n        created: {\n          type: DateTime,\n          required: true\n        }\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Inline Tags in Markdoc\nDESCRIPTION: Shows how inline tags are handled in Markdoc, with multiple highlight tags displayed within a code block.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/tags.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% code %}\n\n{% highlight %}Inline tag 1{% /highlight %}\n{% highlight %}Inline tag 2{% /highlight %}\n\n{% /code %}\n```\n\n----------------------------------------\n\nTITLE: Creating Block-Level Tags in Markdoc\nDESCRIPTION: Demonstrates the proper syntax for a block-level tag where opening and closing markers appear on separate lines.\nSOURCE: https://github.com/markdoc/docs/blob/main/spec/index.md#2025-04-23_snippet_3\n\nLANGUAGE: example\nCODE:\n```\n{% foo %}\nThis is content inside of a block-level tag\n{% /foo %}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Flag Variables in Markdoc\nDESCRIPTION: This snippet demonstrates how to conditionally render content using the 'if' tag with a flag variable. The hidden text only appears when the '$flags.show_secret_feature' variable is set to true.\nSOURCE: https://github.com/markdoc/docs/blob/main/examples/react-nodejs/content/variables.md#2025-04-23_snippet_0\n\nLANGUAGE: markdoc\nCODE:\n```\n{% if $flags.show_secret_feature %}\nThis is special hidden text!\n{% /if %}\n```\n\n----------------------------------------\n\nTITLE: Default Function Example in Markdoc\nDESCRIPTION: Demonstrates using the default function to provide fallback values for potentially undefined variables.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/functions.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{% if default($showPrompt, true) %}\nHey there!\n{% /if %}\n```\n\n----------------------------------------\n\nTITLE: Equals Function Usage in Markdoc\nDESCRIPTION: Shows how to use the equals function for comparing variables with strict equality in Markdoc.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/functions.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% if equals($myVar, \"test\") %}\nThe variable $myVar is equal to the string \"test\".\n{% /if %}\n```\n\n----------------------------------------\n\nTITLE: Boolean Operations Example in Markdoc\nDESCRIPTION: Demonstrates the usage of boolean operations (and, not, or) in Markdoc templates for conditional rendering.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/functions.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nThis is always shown\n{% if and(not($a), or($b, $c)) %}\nThis is shown only if $a is falsy and either $b or $c is true.\n{% /if %}\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Attributes in Markdoc\nDESCRIPTION: Shows how to use the shorthand notation for id and class attributes in a tag.\nSOURCE: https://github.com/markdoc/docs/blob/main/spec/index.md#2025-04-23_snippet_8\n\nLANGUAGE: example\nCODE:\n```\n{% #foo .bar %}\n```\n\n----------------------------------------\n\nTITLE: Debug Function Usage in Markdoc\nDESCRIPTION: Shows how to use the debug function to output variable values as JSON for debugging purposes.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/functions.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n{% debug($myVar) %}\n```\n\n----------------------------------------\n\nTITLE: Creating Hash Objects in Markdoc\nDESCRIPTION: Demonstrates how to create a hash (object) with both standard and quoted keys, including variable values.\nSOURCE: https://github.com/markdoc/docs/blob/main/spec/index.md#2025-04-23_snippet_14\n\nLANGUAGE: example\nCODE:\n```\n{% foo={key: \"example value\", \"quoted key\": $variable} %}\n```\n\n----------------------------------------\n\nTITLE: Using Full Attribute Syntax in Markdoc\nDESCRIPTION: Demonstrates the equivalent full attribute syntax for id and class that matches the shorthand example.\nSOURCE: https://github.com/markdoc/docs/blob/main/spec/index.md#2025-04-23_snippet_9\n\nLANGUAGE: example\nCODE:\n```\n{% id=\"foo\" class=\"bar\" %}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Frontmatter in Markdoc\nDESCRIPTION: Example of using JSON format for frontmatter in a Markdoc document. Includes basic metadata like title, description, and date.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/frontmatter.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n---\n{\n  \"title\": \"Authoring in Markdown\",\n  \"description\": \"Quickly author amazing content with Markdoc syntax, a superset of Markdown.\",\n  \"date\": \"2022-04-01\"\n}\n---\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Markdoc Content\nDESCRIPTION: Base HTML template with content injection placeholder and script reference.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/html.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"description\" content=\"Web site created using Markdoc\" />\n    <title>Markdoc: Create HTML Example</title>\n  </head>\n  <body>\n    {{ CONTENT }}\n    <script src=\"./main.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Class Shorthand Attributes in Markdoc\nDESCRIPTION: Shows how to apply multiple CSS classes using the shorthand class notation.\nSOURCE: https://github.com/markdoc/docs/blob/main/spec/index.md#2025-04-23_snippet_10\n\nLANGUAGE: example\nCODE:\n```\n{% .foo .bar .baz %}\n```\n\n----------------------------------------\n\nTITLE: Implementing TOML Frontmatter in Markdoc\nDESCRIPTION: Example of using TOML format for frontmatter in a Markdoc document. Includes basic metadata like title, description, and date.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/frontmatter.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n---\ntitle       = \"Authoring in Markdoc\"\ndescription = \"Quickly author amazing content with Markdoc syntax, a superset of Markdown.\"\ndate        = \"2022-04-01\"\n---\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output from Express Server\nDESCRIPTION: Shows the final HTML document structure generated by the Express server using Markdoc's HTML renderer.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/render.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <body>\n    <h1>Getting started</h1>\n    <p>Run this command to install the Markdoc library:</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Example Markdoc Renderable Tree Structure\nDESCRIPTION: Shows an example of the renderable tree structure generated by the transform phase, including element names, attributes, and children.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/render.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"article\",\n  \"attributes\": {},\n  \"children\": [\n    {\n      \"name\": \"h1\",\n      \"attributes\": {},\n      \"children\": [\"Header\"],\n      \"$$mdtag\": true\n    }\n  ],\n  \"$$mdtag\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Including a Partial in Markdoc\nDESCRIPTION: Demonstrates how to include a partial file named 'header.md' in a Markdoc document.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/partials.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% partial file=\"header.md\" /%}\n```\n\n----------------------------------------\n\nTITLE: Implementing Self-Closing Tags in Markdoc\nDESCRIPTION: Demonstrates the syntax for a self-closing tag that contains no nested content.\nSOURCE: https://github.com/markdoc/docs/blob/main/spec/index.md#2025-04-23_snippet_1\n\nLANGUAGE: example\nCODE:\n```\n{% example /%}\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output from Markdoc\nDESCRIPTION: Shows an example of the HTML output generated by the render phase, with a heading and paragraph.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/render.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h1>Getting started</h1>\n\n<p>Run this command to install the Markdoc library:</p>\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Arrays in Markdoc\nDESCRIPTION: Shows how to create a complex array value that includes numbers, booleans, nested arrays, and variables.\nSOURCE: https://github.com/markdoc/docs/blob/main/spec/index.md#2025-04-23_snippet_13\n\nLANGUAGE: example\nCODE:\n```\n{% foo=[1, false, [\"bar\", $baz]] %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Tags in Markdoc\nDESCRIPTION: Shows how to create an inline tag within a paragraph where opening and closing tags appear on the same line.\nSOURCE: https://github.com/markdoc/docs/blob/main/spec/index.md#2025-04-23_snippet_4\n\nLANGUAGE: example\nCODE:\n```\nThis is a paragraph {% foo %}that contains a tag{% /foo %}\n```\n\n----------------------------------------\n\nTITLE: Generated Markdoc Output from JSON Data\nDESCRIPTION: The resulting Markdoc content after processing the JSON data through the AST construction and formatting. It shows how the coordinate pairs are rendered as an unordered list in Markdoc syntax.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/format.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- 34.0522, -118.2437\n- 40.7128, -74.006\n- 48.8566, 2.3522\n```\n\n----------------------------------------\n\nTITLE: Rich Content Table in Markdoc\nDESCRIPTION: Demonstrates a table with rich content including code samples, lists, and other nested elements.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/tags.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n{% table %}\n* Foo\n* Bar\n* Baz\n---\n*\n  ```\n  puts \"Some code here.\"\n  ```\n*\n  {% list type=\"checkmark\" %}\n  * Bulleted list in table\n  * Second item in bulleted list\n  {% /list %}\n* Text in a table\n---\n*\n  A \"loose\" list with\n\n  multiple line items\n* Test 2\n* Test 3\n---\n* Test 1\n* A cell that spans two columns {% colspan=2 %}\n{% /table %}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Frontmatter in Markdoc\nDESCRIPTION: Example of using GraphQL format for frontmatter in a Markdoc document. Shows how to structure page metadata using GraphQL syntax.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/frontmatter.md#2025-04-23_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n---\n{\n  page {\n    title\n    description\n    date\n  }\n}\n---\n```\n\n----------------------------------------\n\nTITLE: Enabling comments in Markdoc with Next.js\nDESCRIPTION: Example of configuring Markdoc to allow comments in Next.js content.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/nextjs.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst withMarkdoc = require('@markdoc/next.js');\n\nwithMarkdoc({ tokenizerOptions: { allowComments: true } });\n```\n\n----------------------------------------\n\nTITLE: Table with Column Span in Markdoc\nDESCRIPTION: Example of explicitly setting column span in a Markdoc table.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/tags.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n{% table %}\n---\n* foo\n* bar\n---\n* foo {% colspan=2 %}\n{% /table %}\n```\n\n----------------------------------------\n\nTITLE: Installing Markdoc with npm\nDESCRIPTION: Shows how to install the Markdoc core package using npm.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @markdoc/markdoc\n```\n\n----------------------------------------\n\nTITLE: Basic Table in Markdoc\nDESCRIPTION: Example of creating a basic table in Markdoc using list syntax with rows separated by three dashes.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/tags.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n{% table %}\n* Heading 1\n* Heading 2\n---\n* Row 1 Cell 1\n* Row 1 Cell 2\n---\n* Row 2 Cell 1\n* Row 2 cell 2\n{% /table %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdoc Content to HTML String\nDESCRIPTION: Shows the HTML renderer function signature that converts renderable tree nodes into an HTML string.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/render.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nrenderers.html(RenderableTreeNode | RenderableTreeNode[]) => string\n```\n\n----------------------------------------\n\nTITLE: Importing Markdoc with ES Modules\nDESCRIPTION: Code snippet showing how to import Markdoc using ES Modules import syntax.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Markdoc from '@markdoc/markdoc';\n```\n\n----------------------------------------\n\nTITLE: Table without Headings in Markdoc\nDESCRIPTION: Shows how to create a table without headers in Markdoc.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/tags.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n{% table %}\n---\n* foo\n* bar\n---\n* foo\n* bar\n{% /table %}\n```\n\n----------------------------------------\n\nTITLE: Defining Directory Structure for Markdoc Schema\nDESCRIPTION: Shows the directory structure for organizing Markdoc schema files, including Callout and heading components.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/react.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nschema/\n├── Callout.markdoc.js\n└── heading.markdoc.js\n```\n\n----------------------------------------\n\nTITLE: Using Custom Markdoc Tag in Markdown\nDESCRIPTION: This example shows how to use the custom 'item' tag within Markdoc content. It demonstrates the usage of the tag with a 'name' attribute and content.\nSOURCE: https://github.com/markdoc/docs/blob/main/markdoc/partials/header.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% item name=\"Markdoc\" %}\nA powerful, flexible, Markdown-based authoring framework\n{% /item %}\n```\n\n----------------------------------------\n\nTITLE: Table with Text Alignment in Markdoc\nDESCRIPTION: Demonstrates how to set text alignment in table columns and cells.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/tags.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n{% table %}\n* Column 1 {% align=\"center\" %}\n* Column 2\n* Column 3 {% align=\"right\" %}\n---\n* foo\n* bar\n* baz\n---\n* foo\n* bar {% align=\"right\" %}\n* baz\n---\n* foo {% align=\"center\" %}\n* bar\n* baz\n{% /table %}\n```\n\n----------------------------------------\n\nTITLE: Node Annotation Syntax in Markdoc\nDESCRIPTION: Shows how to use annotation syntax to pass attributes to Markdoc nodes within a table structure.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/attributes.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% table %}\n\n- Function {% width=\"25%\" %}\n- Returns  {% colspan=2 %}\n- Example  {% align=$side %}\n\n{% /table %}\n```\n\n----------------------------------------\n\nTITLE: Importing built-in Next.js tags for Markdoc\nDESCRIPTION: Example of importing and exporting built-in Next.js tags for use in Markdoc schema.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/nextjs.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// markdoc/tags/Next.markdoc.js\n\nexport { comment, head, link, script } from '@markdoc/next.js/tags';\n\n// or\n\nexport * from '@markdoc/next.js/tags';\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone Inline Tags in Markdoc\nDESCRIPTION: Demonstrates an inline tag that appears on a line by itself but is still treated as an inline element within an implied paragraph.\nSOURCE: https://github.com/markdoc/docs/blob/main/spec/index.md#2025-04-23_snippet_5\n\nLANGUAGE: example\nCODE:\n```\n{% foo %}This is content inside of an inline tag{% /foo %}\n```\n\n----------------------------------------\n\nTITLE: Installing Markdoc dependencies for Next.js\nDESCRIPTION: Install the required Markdoc packages for use with Next.js using npm.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/nextjs.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @markdoc/next.js @markdoc/markdoc\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Markdoc HTML Example\nDESCRIPTION: Series of commands to set up and run the Markdoc HTML example project. Includes installing dependencies, building components, and starting the server.\nSOURCE: https://github.com/markdoc/docs/blob/main/examples/html-nodejs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Importing Markdoc with CommonJS\nDESCRIPTION: Code snippet showing how to import Markdoc using CommonJS require syntax.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Markdoc = require('@markdoc/markdoc');\n```\n\n----------------------------------------\n\nTITLE: Applying Annotations to Headings in Markdoc\nDESCRIPTION: Shows how to use an annotation to add a CSS class attribute to a Markdown heading.\nSOURCE: https://github.com/markdoc/docs/blob/main/spec/index.md#2025-04-23_snippet_6\n\nLANGUAGE: example\nCODE:\n```\n# Heading {% .example %}\n```\n\n----------------------------------------\n\nTITLE: Installing Markdoc with npm\nDESCRIPTION: Command to install the Markdoc library using npm package manager.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @markdoc/markdoc\n```\n\n----------------------------------------\n\nTITLE: Installing Markdoc with yarn\nDESCRIPTION: Command to install the Markdoc library using yarn package manager.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @markdoc/markdoc\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data Structure for Markdoc Generation\nDESCRIPTION: A JSON file containing geographic coordinates that will be used as input data for generating a Markdoc document. The data is structured as an array of coordinate pairs.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/format.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// ./data.json\n[\n  [34.0522, -118.2437],\n  [40.7128, -74.0060],\n  [48.8566, 2.3522]\n]\n```\n\n----------------------------------------\n\nTITLE: Variable Usage in Links (Incorrect Example)\nDESCRIPTION: Shows incorrect way of using variables in Markdoc link nodes.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/variables.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[Link]({% $variable %})\n```\n\n----------------------------------------\n\nTITLE: Escaped Quotes in Markdoc Attributes\nDESCRIPTION: Demonstrates how to escape double quotes in attribute strings using backslashes.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/attributes.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% data delimiter=\"\\\"\" /%}\n```\n\n----------------------------------------\n\nTITLE: Starting the React Markdoc Example Project\nDESCRIPTION: Command to start the React application that demonstrates Markdoc integration. This command launches both the React frontend and Express.js backend that serves Markdoc ASTs.\nSOURCE: https://github.com/markdoc/docs/blob/main/examples/create-react-app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaScript Variable\nDESCRIPTION: This code snippet demonstrates how to declare and initialize a constant variable in JavaScript.\nSOURCE: https://github.com/markdoc/docs/blob/main/examples/html-nodejs/content/home.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = 'test';\n```\n\n----------------------------------------\n\nTITLE: Attribute Shorthand Syntax\nDESCRIPTION: Shows how to use shorthand syntax for class and id attributes in Markdoc.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/attributes.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# Examples {% #examples %}\n\n{% table .striped #exampletable %}\n- One \n- Two\n- Three\n{% /table %}\n```\n\n----------------------------------------\n\nTITLE: Starting Express Server for Markdoc Content\nDESCRIPTION: Command to start the Express server that processes and serves Markdoc content to the React client application.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/react.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start:server\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch in Git\nDESCRIPTION: Command to create and switch to a new Git branch for development purposes.\nSOURCE: https://github.com/markdoc/docs/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Next.js/Markdoc Project\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/markdoc/docs/blob/main/examples/simple-nextjs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Using Full Class Attribute Syntax in Markdoc\nDESCRIPTION: Shows the equivalent full syntax for combining multiple CSS classes into a single class attribute.\nSOURCE: https://github.com/markdoc/docs/blob/main/spec/index.md#2025-04-23_snippet_11\n\nLANGUAGE: example\nCODE:\n```\n{% class=\"foo bar baz\" %}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install the project dependencies using npm package manager.\nSOURCE: https://github.com/markdoc/docs/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the local development server using either npm or yarn. The server will make the site available at http://localhost:3000.\nSOURCE: https://github.com/markdoc/docs/blob/main/examples/simple-nextjs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Using Comments in Markdoc\nDESCRIPTION: Shows how to add comments in Markdoc using Markdown comment syntax. Comments won't appear in the rendered output but require setting allowComments: true in the Tokenizer configuration.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/syntax.md#2025-04-23_snippet_6\n\nLANGUAGE: markdoc\nCODE:\n```\n<!-- comment goes here -->\n```\n\n----------------------------------------\n\nTITLE: Starting React Client for Markdoc Application\nDESCRIPTION: Command to start the React client application that will connect to the Markdoc server for rendering content.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/docs/examples/react.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start:client\n```\n\n----------------------------------------\n\nTITLE: Implementing a Full-Height Sandbox in Markdoc\nDESCRIPTION: This code snippet demonstrates how to include a sandbox component with dynamic height calculation based on the viewport height minus the navigation height. The sandbox provides an interactive environment for testing Markdoc content.\nSOURCE: https://github.com/markdoc/docs/blob/main/pages/sandbox.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% sandbox height=\"calc(100vh - var(--nav-height))\" /%}\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the local development server on port 3000 for testing and development.\nSOURCE: https://github.com/markdoc/docs/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaScript Variable in Markdoc Documentation\nDESCRIPTION: A basic JavaScript code example that demonstrates variable declaration using const. This simple snippet shows the syntax for string assignment in JavaScript.\nSOURCE: https://github.com/markdoc/docs/blob/main/examples/create-react-app/content/home.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = 'test';\n```\n\n----------------------------------------\n\nTITLE: Declaring a JavaScript String Variable\nDESCRIPTION: A simple JavaScript code snippet that declares and initializes a constant variable named 'x' with the string value 'test'.\nSOURCE: https://github.com/markdoc/docs/blob/main/examples/react-nodejs/content/home.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst x = 'test';\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Markdoc Tag in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a custom Markdoc tag named 'item' using JavaScript. It specifies the render function and attributes for the tag.\nSOURCE: https://github.com/markdoc/docs/blob/main/markdoc/partials/header.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{% item name=\"Markdoc\" %}\nA powerful, flexible, Markdown-based authoring framework\n{% /item %}\n```\n\n----------------------------------------\n\nTITLE: Conditional Content Display with Markdoc Flag Variable\nDESCRIPTION: Shows how to conditionally render content using Markdoc's if statement and flag variables. The content will only be displayed if the show_secret_feature flag is set to true.\nSOURCE: https://github.com/markdoc/docs/blob/main/examples/create-react-app/content/variables.md#2025-04-23_snippet_0\n\nLANGUAGE: markdoc\nCODE:\n```\n{% if $flags.show_secret_feature %}\nThis is special hidden text!\n{% /if %}\n```"
  }
]