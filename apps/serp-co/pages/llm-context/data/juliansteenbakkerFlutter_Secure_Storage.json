[
  {
    "owner": "juliansteenbakker",
    "repo": "flutter_secure_storage",
    "content": "TITLE: Configuring Keychain Sharing for iOS in Entitlements File\nDESCRIPTION: This XML snippet shows how to add Keychain Sharing capability to the iOS runner. It needs to be added to both DebugProfile.entitlements and Release.entitlements files.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<key>keychain-access-groups</key>\n<array/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Keychain Sharing with App Groups for iOS\nDESCRIPTION: This XML snippet demonstrates how to configure Keychain Sharing when using App Groups in iOS. It includes the App Group name in the keychain-access-groups array.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<key>keychain-access-groups</key>\n<array>\n\t<string>$(AppIdentifierPrefix)aoeu</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Keychain Access Groups Entitlements\nDESCRIPTION: Basic configuration for Keychain Sharing capability in iOS/macOS entitlements files, required for both debug and release profiles.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_darwin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>keychain-access-groups</key>\n<array/>\n```\n\n----------------------------------------\n\nTITLE: Configuring App Group Keychain Access Entitlements\nDESCRIPTION: Extended configuration for Keychain Sharing capability when using App Groups, including the AppIdentifierPrefix variable for proper keychain access.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_darwin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>keychain-access-groups</key>\n<array>\n\t<string>$(AppIdentifierPrefix)aoeu</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build with CMake\nDESCRIPTION: This CMake script defines the build configuration for a Flutter Windows application. It specifies the source files to compile, sets build settings, adds preprocessor definitions for versioning, and configures dependencies including Flutter libraries. The script creates a Windows executable with proper linking to the Flutter framework.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Windows plugin dependencies with CMake\nDESCRIPTION: Configures the CMake build environment for a Flutter plugin on Windows. It sets up paths, includes configuration files, defines Flutter library locations, and creates necessary targets for plugin compilation and linking.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Flutter Secure Storage Windows Plugin\nDESCRIPTION: Sets up the CMake project for the Flutter Secure Storage Windows plugin. It defines the project name, creates a shared library, and configures compilation settings. The code also sets up a storage prefix for secure key generation, either using a default value or a custom one if provided.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nset(PROJECT_NAME \"flutter_secure_storage_windows\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\n# This value is used when generating builds using this plugin, so it must\n# not be changed\nset(PLUGIN_NAME \"flutter_secure_storage_windows_plugin\")\n\nadd_library(${PLUGIN_NAME} SHARED\n  \"flutter_secure_storage_windows_plugin.cpp\"\n)\napply_standard_settings(${PLUGIN_NAME})\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin)\n\n# List of absolute paths to libraries that should be bundled with the plugin\nset(flutter_secure_storage_bundled_libraries\n  \"\"\n  PARENT_SCOPE\n)\nif(NOT DEFINED STORAGE_PREFIX)\n  add_compile_definitions(SECURE_STORAGE_KEY_PREFIX=\"${BINARY_NAME}_VGhpcyBpcyB0aGUgcHJlZml4IGZv_\")\nelse()\n  add_compile_definitions(SECURE_STORAGE_KEY_PREFIX=\"${STORAGE_PREFIX}_VGhpcyBpcyB0aGUgcHJlZml4IGZv_\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Build and Installation\nDESCRIPTION: Sets up Flutter library build rules, plugin management, and installation configuration. Handles copying of runtime dependencies, assets, and AOT library to the appropriate locations.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\nadd_subdirectory(\"runner\")\ninclude(flutter/generated_plugins.cmake)\n\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Flutter Secure Storage Linux Plugin\nDESCRIPTION: Defines a CMake build configuration for the Linux implementation of Flutter Secure Storage. The configuration sets up the project, creates a shared library target, and links necessary dependencies including libsecret for secure storage functionality and Flutter's plugin infrastructure.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_linux/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nset(PROJECT_NAME \"flutter_secure_storage_linux\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\n# This value is used when generating builds using this plugin, so it must\n# not be changed\nset(PLUGIN_NAME \"flutter_secure_storage_linux_plugin\")\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\nadd_library(${PLUGIN_NAME} SHARED\n  \"flutter_secure_storage_linux_plugin.cc\"\n)\napply_standard_settings(${PLUGIN_NAME})\npkg_check_modules(LIBSECRET REQUIRED IMPORTED_TARGET libsecret-1>=0.18.4)\n\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\n\n\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n\"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ninclude_directories(${LIBSECRET_INCLUDE_DIRS})\n\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter)\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE PkgConfig::GTK)\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE PkgConfig::LIBSECRET)\n\n# List of absolute paths to libraries that should be bundled with the plugin\nset(flutter_secure_storage_bundled_libraries\n  \"\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake\nDESCRIPTION: Sets up the Flutter tool backend including custom commands to generate the Flutter library and headers. Creates a phony output to force the command to run every time and adds a custom target for Flutter assembly that depends on the generated files.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library in CMake for Windows\nDESCRIPTION: Sets up the Flutter library including its path, headers, and creates an interface library. It also publishes necessary variables to the parent scope for installation steps and sets up the include directories and linkage.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Build Target\nDESCRIPTION: Defines the executable target for the application, specifying source files, linking libraries, and dependencies. Sets output directory to prevent users from running the unbundled executable.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Application build\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Flutter Application Build with CMake\nDESCRIPTION: This CMake script sets up the build configuration for a Windows Flutter application. It defines the executable target with necessary source files, applies standard settings, adds compiler definitions, links against Flutter libraries, and establishes build dependencies.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake\nDESCRIPTION: Sets up a custom command and target to run the Flutter tool backend script which generates the necessary Flutter artifacts. It creates a phony target to ensure the command runs each time since there's no way to get a full input/output list from the Flutter tool.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers in CMake\nDESCRIPTION: Defines the list of Flutter library headers needed for the Linux implementation and prepends the ephemeral directory path to each header file. These headers are required for Flutter engine integration.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings for Windows Application\nDESCRIPTION: Sets up installation directories and configures Visual Studio's default build to include the install step. This creates the proper environment for running the Flutter application in Windows.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Compilation Flags and Standard Settings\nDESCRIPTION: Defines compilation flags for different build profiles and creates a function to apply standard compilation settings to targets. Includes C++17 standard, warning levels, and exception handling configuration.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets and AOT Library\nDESCRIPTION: Sets up installation of Flutter assets and the AOT library (for Release and Profile builds). Ensures assets are fully copied on each build and the AOT library is only installed for non-Debug builds.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/linux/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets and AOT Library\nDESCRIPTION: Configures the installation of Flutter assets by cleaning the destination directory first, then copies the built assets. Also installs the AOT library for Profile and Release builds only.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic CMake Settings for Flutter Windows App\nDESCRIPTION: Initial CMake configuration including project name, binary name, and build options. Sets up Unicode support and configures multiple build types (Debug, Profile, Release).\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Configure build options.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Creates a function that applies standard C++ compilation settings to targets, including C++17 standard, warning levels, exception handling configuration, and debug definitions.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter C++ Wrapper Sources in CMake\nDESCRIPTION: Prepares the C++ wrapper source files for the Flutter engine. These are organized into core, plugin, and app categories. Each source file path is properly transformed to include the wrapper root directory.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Build Configurations\nDESCRIPTION: Defines CMake policies and sets up build configurations (Debug, Profile, Release) for the project. This ensures the correct build behavior based on the selected configuration type.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Application Components\nDESCRIPTION: Defines installation rules for various components including the main executable, ICU data, Flutter library, and plugin libraries. Ensures all required components are correctly placed in the bundle.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/linux/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Plugin Wrapper Library in CMake\nDESCRIPTION: Creates a static library for the Flutter plugin wrapper using the core and plugin source files. It applies standard settings, position-independent code, hidden visibility preset, and links with the Flutter interface library.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for iOS Launch Screen Customization\nDESCRIPTION: Command to open the Xcode workspace for a Flutter project to customize the launch screen assets through the Xcode interface.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Installing Runtime Components for Windows Application\nDESCRIPTION: Installs necessary runtime components including the binary, ICU data file, Flutter library, and bundled plugin libraries to the appropriate installation directories.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Interface Library in CMake\nDESCRIPTION: Creates an interface library for Flutter, configures include directories, and links against the Flutter library and required system dependencies like GTK, GLIB, GIO, BLKID, and LZMA.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n  PkgConfig::BLKID\n  PkgConfig::LZMA\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Bundle Directory\nDESCRIPTION: Configures the installation directory structure and cleaning process. Sets up the bundle directory and ensures it starts clean with each build.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/linux/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Windows basic configuration in CMake\nDESCRIPTION: Initializes the basic Flutter Windows configuration including minimum CMake version, ephemeral directory setup, and configuration imports. This is the foundation for the Flutter Windows build process.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# This file controls Flutter-level build steps. It should not be edited.\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Flutter Application\nDESCRIPTION: Sets default build type to Debug if not specified and defines available build types (Debug, Profile, Release). This ensures proper build configuration selection during the build process.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Configure build options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Mode Flags\nDESCRIPTION: Configures linker and compiler flags for the Profile build mode, inheriting settings from Release mode to ensure optimized performance while allowing profiling capabilities.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Creates a function to apply consistent compilation settings across targets, including C++14 standard, compiler warnings as errors, and optimization settings for non-debug builds.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter App Wrapper Library in CMake\nDESCRIPTION: Creates a static library for the Flutter app wrapper using the core and app source files. Similar to the plugin wrapper, it applies standard settings and links with the Flutter interface library.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Library and Application Build Rules\nDESCRIPTION: Sets up the Flutter managed directory, adds subdirectories for Flutter and the runner application, and includes generated plugin build rules to handle plugin dependencies.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function in CMake\nDESCRIPTION: Custom function that prepends a prefix to each element in a list. It serves the same purpose as list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies with PkgConfig in CMake\nDESCRIPTION: Uses pkg_check_modules to find and configure GTK, GLIB, GIO, BLKID, and LZMA dependencies required by the Flutter Linux implementation.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\npkg_check_modules(BLKID REQUIRED IMPORTED_TARGET blkid)\npkg_check_modules(LZMA REQUIRED IMPORTED_TARGET liblzma)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Build Dependencies\nDESCRIPTION: Configures Flutter-specific build dependencies by adding the Flutter managed directory and finding system-level dependencies like GTK. Defines application ID for the build process.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Secure Storage Example\nDESCRIPTION: Sets up the basic CMake project configuration including project name, binary name, and application ID. Establishes minimum CMake version and project language requirements.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"flutter_secure_storage_example\")\nset(APPLICATION_ID \"com.it_nomads.flutter_secure_storage\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Windows Application\nDESCRIPTION: Sets up the basic CMake project configuration including minimum version, project name, and executable name for the Flutter Secure Storage Windows example application.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(flutter_secure_storage_windows_example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"flutter_secure_storage_windows_example\")\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Plugin Build Rules\nDESCRIPTION: Includes the generated plugins CMake file that manages building any plugins required by the application and adding them to the build.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/linux/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Enabling Unicode Support\nDESCRIPTION: Adds definitions to enable Unicode support for all projects in the solution, which is required for proper text handling in Windows applications.\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests in Flutter\nDESCRIPTION: Command to execute integration tests for the flutter_secure_storage example app using Flutter's test driver\nSOURCE: https://github.com/juliansteenbakker/flutter_secure_storage/blob/develop/flutter_secure_storage/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter drive --target=test_driver/app.dart\n```"
  }
]