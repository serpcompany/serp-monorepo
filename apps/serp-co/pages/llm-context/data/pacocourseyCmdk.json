[
  {
    "owner": "pacocoursey",
    "repo": "cmdk",
    "content": "TITLE: Basic Command Menu Implementation in React\nDESCRIPTION: A simple implementation of the Command menu component with input, list, and grouped items. Shows the basic structure with groups, items, and separators.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Command } from 'cmdk'\n\nconst CommandMenu = () => {\n  return (\n    <Command label=\"Command Menu\">\n      <Command.Input />\n      <Command.List>\n        <Command.Empty>No results found.</Command.Empty>\n\n        <Command.Group heading=\"Letters\">\n          <Command.Item>a</Command.Item>\n          <Command.Item>b</Command.Item>\n          <Command.Separator />\n          <Command.Item>c</Command.Item>\n        </Command.Group>\n\n        <Command.Item>Apple</Command.Item>\n      </Command.List>\n    </Command>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dialog-Based Command Menu with Keyboard Shortcut\nDESCRIPTION: Implementation of a command menu in a dialog that toggles visibility when ⌘K is pressed. Uses useEffect to add a global keyboard shortcut listener.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Command } from 'cmdk'\n\nconst CommandMenu = () => {\n  const [open, setOpen] = React.useState(false)\n\n  // Toggle the menu when ⌘K is pressed\n  React.useEffect(() => {\n    const down = (e) => {\n      if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n\n    document.addEventListener('keydown', down)\n    return () => document.removeEventListener('keydown', down)\n  }, [])\n\n  return (\n    <Command.Dialog open={open} onOpenChange={setOpen} label=\"Global Command Menu\">\n      <Command.Input />\n      <Command.List>\n        <Command.Empty>No results found.</Command.Empty>\n\n        <Command.Group heading=\"Letters\">\n          <Command.Item>a</Command.Item>\n          <Command.Item>b</Command.Item>\n          <Command.Separator />\n          <Command.Item>c</Command.Item>\n        </Command.Group>\n\n        <Command.Item>Apple</Command.Item>\n      </Command.List>\n    </Command.Dialog>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Preferred Approach: Component-Based Item Rendering\nDESCRIPTION: The preferred approach using compound components where each item is rendered as a dedicated component. This enables a more natural React composition model.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/ARCHITECTURE.md#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Yes\n<Item>My item</Item>\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Navigation Pages in Command Menu\nDESCRIPTION: Advanced example implementing nested navigation with \"pages\" in a command menu, allowing users to navigate deeper into hierarchical options.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nconst ref = React.useRef(null)\nconst [open, setOpen] = React.useState(false)\nconst [search, setSearch] = React.useState('')\nconst [pages, setPages] = React.useState([])\nconst page = pages[pages.length - 1]\n\nreturn (\n  <Command\n    onKeyDown={(e) => {\n      // Escape goes to previous page\n      // Backspace goes to previous page when search is empty\n      if (e.key === 'Escape' || (e.key === 'Backspace' && !search)) {\n        e.preventDefault()\n        setPages((pages) => pages.slice(0, -1))\n      }\n    }}\n  >\n    <Command.Input value={search} onValueChange={setSearch} />\n    <Command.List>\n      {!page && (\n        <>\n          <Command.Item onSelect={() => setPages([...pages, 'projects'])}>Search projects…</Command.Item>\n          <Command.Item onSelect={() => setPages([...pages, 'teams'])}>Join a team…</Command.Item>\n        </>\n      )}\n\n      {page === 'projects' && (\n        <>\n          <Command.Item>Project A</Command.Item>\n          <Command.Item>Project B</Command.Item>\n        </>\n      )}\n\n      {page === 'teams' && (\n        <>\n          <Command.Item>Team 1</Command.Item>\n          <Command.Item>Team 2</Command.Item>\n        </>\n      )}\n    </Command.List>\n  </Command>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Loading in React Command Menu\nDESCRIPTION: Demonstrates how to load and display items asynchronously in the command menu with loading state handling.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nconst [loading, setLoading] = React.useState(false)\nconst [items, setItems] = React.useState([])\n\nReact.useEffect(() => {\n  async function getItems() {\n    setLoading(true)\n    const res = await api.get('/dictionary')\n    setItems(res)\n    setLoading(false)\n  }\n\n  getItems()\n}, [])\n\nreturn (\n  <Command>\n    <Command.Input />\n    <Command.List>\n      {loading && <Command.Loading>Fetching words…</Command.Loading>}\n      {items.map((item) => {\n        return (\n          <Command.Item key={`word-${item}`} value={item}>\n            {item}\n          </Command.Item>\n        )\n      })}\n    </Command.List>\n  </Command>\n)\n```\n\n----------------------------------------\n\nTITLE: Controlled Command Component with Value State\nDESCRIPTION: Example of using the Command component in a controlled manner with value and onValueChange props to manage the selected value state.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst [value, setValue] = React.useState('apple')\n\nreturn (\n  <Command value={value} onValueChange={setValue}>\n    <Command.Input />\n    <Command.List>\n      <Command.Item>Orange</Command.Item>\n      <Command.Item>Apple</Command.Item>\n    </Command.List>\n  </Command>\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Function Implementation\nDESCRIPTION: Demonstrates how to provide a custom filter function to the Command component for controlling the search behavior.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Command\n  filter={(value, search) => {\n    if (value.includes(search)) return 1\n    return 0\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Advanced Filter Function with Keywords Support\nDESCRIPTION: Shows how to use a more advanced filter function that considers keywords as aliases for items, affecting their search ranking.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Command\n  filter={(value, search, keywords) => {\n    const extendValue = value + ' ' + keywords.join(' ')\n    if (extendValue.includes(search)) return 1\n    return 0\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Command Item with Custom Keywords for Filtering\nDESCRIPTION: Example of adding keywords to a Command.Item to help with filtering, providing additional search terms beyond the visible text.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Command.Item keywords={['fruit', 'apple']}>Apple</Command.Item>\n```\n\n----------------------------------------\n\nTITLE: Grouping Command Items with Headings\nDESCRIPTION: Example of grouping Command.Item components with a heading using the Command.Group component.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<Command.Group heading=\"Fruit\">\n  <Command.Item>Apple</Command.Item>\n</Command.Group>\n```\n\n----------------------------------------\n\nTITLE: Handling Loading State in Command Menu\nDESCRIPTION: Example of showing a loading indicator during asynchronous data fetching operations using the Command.Loading component.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nconst [loading, setLoading] = React.useState(false)\n\nreturn <Command.List>{loading && <Command.Loading>Hang on…</Command.Loading>}</Command.List>\n```\n\n----------------------------------------\n\nTITLE: Using useCommandState for Advanced Empty State\nDESCRIPTION: Example of using the useCommandState hook to access internal command state for creating a more detailed empty state that includes the search query.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nconst search = useCommandState((state) => state.search)\nreturn <Command.Empty>No results found for \"{search}\".</Command.Empty>\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Sub-Items in React Command Menu\nDESCRIPTION: Shows how to conditionally render nested command menu items based on search state using a custom SubItem component.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nconst SubItem = (props) => {\n  const search = useCommandState((state) => state.search)\n  if (!search) return null\n  return <Command.Item {...props} />\n}\n\nreturn (\n  <Command>\n    <Command.Input />\n    <Command.List>\n      <Command.Item>Change theme…</Command.Item>\n      <SubItem>Change theme to dark</SubItem>\n      <SubItem>Change theme to light</SubItem>\n    </Command.List>\n  </Command>\n)\n```\n\n----------------------------------------\n\nTITLE: Preferred Approach: Full Component Composition\nDESCRIPTION: The ideal implementation that enables full component composition, allowing for both component references and static items to be combined freely.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/ARCHITECTURE.md#2025-04-12_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// YES\n<>\n  <BlogItems />\n  {staticItems}\n</>\n```\n\n----------------------------------------\n\nTITLE: ⌘K Implementation: DOM-based Filtering\nDESCRIPTION: Illustrates how ⌘K keeps all items in the React tree but selectively renders them to the DOM. This approach enables the compound component pattern while still supporting filtering.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/ARCHITECTURE.md#2025-04-12_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<List>\n  {/* returns `null`, no DOM created */}\n  <Item>A</Item>\n  <Item>B</Item>\n</List>\n```\n\n----------------------------------------\n\nTITLE: Enabling Loop Navigation in Command Menu\nDESCRIPTION: Shows how to enable loop navigation where arrow keys wrap around from the last item back to the first item in the list.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Command loop />\n```\n\n----------------------------------------\n\nTITLE: Controlled Dialog Component with Open State\nDESCRIPTION: Example of using the Command.Dialog component in a controlled manner with open and onOpenChange props.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst [open, setOpen] = React.useState(false)\n\nreturn (\n  <Command.Dialog open={open} onOpenChange={setOpen}>\n    ...\n  </Command.Dialog>\n)\n```\n\n----------------------------------------\n\nTITLE: Controlled Input Component with Value State\nDESCRIPTION: Example of using the Command.Input component in a controlled manner with value and onValueChange props.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst [search, setSearch] = React.useState('')\n\nreturn <Command.Input value={search} onValueChange={setSearch} />\n```\n\n----------------------------------------\n\nTITLE: Command Item with onSelect Handler\nDESCRIPTION: Example of using a Command.Item component with an onSelect handler to capture selection events. The value is implicitly derived from item text content.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<Command.Item\n  onSelect={(value) => console.log('Selected', value)}\n  // Value is implicity \"apple\" because of the provided text content\n>\n  Apple\n</Command.Item>\n```\n\n----------------------------------------\n\nTITLE: Integrating Command Menu with Radix UI Popover\nDESCRIPTION: Shows how to integrate the command menu component within a Radix UI popover component.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Popover from '@radix-ui/react-popover'\n\nreturn (\n  <Popover.Root>\n    <Popover.Trigger>Toggle popover</Popover.Trigger>\n\n    <Popover.Content>\n      <Command>\n        <Command.Input />\n        <Command.List>\n          <Command.Item>Apple</Command.Item>\n        </Command.List>\n      </Command>\n    </Popover.Content>\n  </Popover.Root>\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Example: Input and List Interaction\nDESCRIPTION: Demonstrates how filtering works in ⌘K. When the input value is 'b', items not matching this filter remain in the React tree but are removed from the DOM.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/ARCHITECTURE.md#2025-04-12_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Input value=\"b\" />\n<List>\n  <Item>A</Item>\n  <Item>B</Item>\n</List>\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Filtering and Sorting\nDESCRIPTION: Example of disabling the built-in filtering and sorting behavior to manually handle filtered items display.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Command shouldFilter={false}>\n  <Command.List>\n    {filteredItems.map((item) => {\n      return (\n        <Command.Item key={item} value={item}>\n          {item}\n        </Command.Item>\n      )\n    })}\n  </Command.List>\n</Command>\n```\n\n----------------------------------------\n\nTITLE: Custom Container for Command Dialog\nDESCRIPTION: Shows how to specify a custom container element for the Command.Dialog component using the container prop.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst containerElement = React.useRef(null)\n\nreturn (\n  <>\n    <Command.Dialog container={containerElement.current} />\n    <div ref={containerElement} />\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Styling Command List Height with CSS Variables\nDESCRIPTION: CSS example for styling the Command.List component with dynamic height using the --cmdk-list-height CSS variable.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n[cmdk-list] {\n  min-height: 300px;\n  height: var(--cmdk-list-height);\n  max-height: 500px;\n  transition: height 100ms ease;\n}\n```\n\n----------------------------------------\n\nTITLE: Improving List Scrolling Experience with Scroll Padding\nDESCRIPTION: CSS example for improving the scrolling experience of the Command.List by adding scroll padding to start scrolling items into view earlier.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n[cmdk-list] {\n  scroll-padding-block-start: 8px;\n  scroll-padding-block-end: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach: Conditional Item Rendering\nDESCRIPTION: Shows a traditional approach to filtering where items are conditionally rendered based on a search term. This was rejected because it conflicts with the compound component model.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/ARCHITECTURE.md#2025-04-12_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n  {['A', 'B'].map((item) => {\n    if (matches(item, search)) {\n      return <Item>{item}</Item>\n    }\n  })}\n</>\n```\n\n----------------------------------------\n\nTITLE: Rejected Approach: Render Prop Pattern for Item Rendering\nDESCRIPTION: An example of the rejected render prop pattern where a callback function is provided to render each item. This approach was avoided to maintain component composability.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/ARCHITECTURE.md#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// No\nonItemRender={({ item }) => {\n  return <div>{item}</div>\n}}\n```\n\n----------------------------------------\n\nTITLE: Rejected Approach: Manual Item Mapping in React Component\nDESCRIPTION: An example of the rejected approach where items are manually mapped from an array. This pattern was avoided in favor of compound components for better composition.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/ARCHITECTURE.md#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// No\n<>\n  {items.map((item) => {\n    return <div>{item}</div>\n  })}\n</>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Testing Environment\nDESCRIPTION: Commands for installing dependencies, Playwright browsers, building the library and running tests.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm playwright install\npnpm build\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Popover Dependency\nDESCRIPTION: Command to install the Radix UI popover component dependency using pnpm.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm install @radix-ui/react-popover\n```\n\n----------------------------------------\n\nTITLE: Installing cmdk Package with PNPM\nDESCRIPTION: Command to install the cmdk package using the PNPM package manager.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install cmdk\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server using pnpm. This allows you to view and test your application locally.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/website/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Web Crawler Access in robots.txt\nDESCRIPTION: This robots.txt configuration allows all web crawlers to access the entire website without restrictions. It uses a wildcard user-agent and does not specify any disallowed paths.\nSOURCE: https://github.com/pacocoursey/cmdk/blob/main/website/public/robots.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow:\n```"
  }
]