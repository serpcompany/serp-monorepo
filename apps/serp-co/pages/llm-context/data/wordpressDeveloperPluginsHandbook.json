[
  {
    "owner": "wordpress",
    "repo": "developer-plugins-handbook",
    "content": "TITLE: Insecure Delete Post Implementation Without Capability Checking in WordPress\nDESCRIPTION: This code snippet demonstrates a security vulnerability by creating a delete link on the frontend that allows any user to trash posts without checking user capabilities. It includes a function to generate the delete link and a request handler to process the deletion.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/security/checking-user-capabilities/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Generate a Delete link based on the homepage url.\n *\n * @param string $content   Existing content.\n *\n * @return string|null\n */\nfunction wporg_generate_delete_link( $content ) {\n  // Run only for single post page.\n  if ( is_single() && in_the_loop() && is_main_query() ) {\n    // Add query arguments: action, post.\n    $url = add_query_arg(\n      [\n        'action' => 'wporg_frontend_delete',\n        'post'   => get_the_ID(),\n      ], home_url()\n    );\n\n    return $content . ' <a href=\"' . esc_url( $url ) . '\">' . esc_html__( 'Delete Post', 'wporg' ) . '</a>';\n  }\n\n  return null;\n}\n\n/**\n * Request handler\n */\nfunction wporg_delete_post() {\n  if ( isset( $_GET['action'] ) && 'wporg_frontend_delete' === $_GET['action'] ) {\n\n    // Verify we have a post id.\n    $post_id = ( isset( $_GET['post'] ) ) ? ( $_GET['post'] ) : ( null );\n\n    // Verify there is a post with such a number.\n    $post = get_post( (int) $post_id );\n    if ( empty( $post ) ) {\n      return;\n    }\n\n    // Delete the post.\n    wp_trash_post( $post_id );\n\n    // Redirect to admin page.\n    $redirect = admin_url( 'edit.php' );\n    wp_safe_redirect( $redirect );\n\n    // We are done.\n    die;\n  }\n}\n\n/**\n * Add the delete link to the end of the post content.\n */\nadd_filter( 'the_content', 'wporg_generate_delete_link' );\n\n/**\n * Register our request handler with the init hook.\n */\nadd_action( 'init', 'wporg_delete_post' );\n```\n\n----------------------------------------\n\nTITLE: Preventing Direct File Access in WordPress Plugins\nDESCRIPTION: Security check to prevent direct access to plugin PHP files. This code should be placed at the top of any plugin file that contains executable code to ensure it can only be accessed through WordPress.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/common-issues/index.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nif ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly\n```\n\n----------------------------------------\n\nTITLE: Implementing WordPress REST API Posts Controller Class\nDESCRIPTION: A complete example of a REST API controller class for handling post endpoints. Includes route registration, permission checks, response formatting, and schema definition. The class demonstrates proper handling of GET requests for both collections and individual posts.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/controller-classes/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass My_REST_Posts_Controller {\n\n\t// Here initialize our namespace and resource name.\n\tpublic function __construct() {\n\t\t$this->namespace     = '/my-namespace/v1';\n\t\t$this->resource_name = 'posts';\n\t}\n\n\t// Register our routes.\n\tpublic function register_routes() {\n\t\tregister_rest_route( $this->namespace, '/' . $this->resource_name, array(\n\t\t\t// Here we register the readable endpoint for collections.\n\t\t\tarray(\n\t\t\t\t'methods'   => 'GET',\n\t\t\t\t'callback'  => array( $this, 'get_items' ),\n\t\t\t\t'permission_callback' => array( $this, 'get_items_permissions_check' ),\n\t\t\t),\n\t\t\t// Register our schema callback.\n\t\t\t'schema' => array( $this, 'get_item_schema' ),\n\t\t) );\n\t\tregister_rest_route( $this->namespace, '/' . $this->resource_name . '/(?P<id>[\\d]+)', array(\n\t\t\t// Notice how we are registering multiple endpoints the 'schema' equates to an OPTIONS request.\n\t\t\tarray(\n\t\t\t\t'methods'   => 'GET',\n\t\t\t\t'callback'  => array( $this, 'get_item' ),\n\t\t\t\t'permission_callback' => array( $this, 'get_item_permissions_check' ),\n\t\t\t),\n\t\t\t// Register our schema callback.\n\t\t\t'schema' => array( $this, 'get_item_schema' ),\n\t\t) );\n\t}\n\n\t/**\n\t * Check permissions for the posts.\n\t *\n\t * @param WP_REST_Request $request Current request.\n\t */\n\tpublic function get_items_permissions_check( $request ) {\n\t\tif ( ! current_user_can( 'read' ) ) {\n\t\t\treturn new WP_Error( 'rest_forbidden', esc_html__( 'You cannot view the post resource.' ), array( 'status' => $this->authorization_status_code() ) );\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Grabs the five most recent posts and outputs them as a rest response.\n\t *\n\t * @param WP_REST_Request $request Current request.\n\t */\n\tpublic function get_items( $request ) {\n\t\t$args = array(\n\t\t\t'post_per_page' => 5,\n\t\t);\n\t\t$posts = get_posts( $args );\n\n\t\t$data = array();\n\n\t\tif ( empty( $posts ) ) {\n\t\t\treturn rest_ensure_response( $data );\n\t\t}\n\n\t\tforeach ( $posts as $post ) {\n\t\t\t$response = $this->prepare_item_for_response( $post, $request );\n\t\t\t$data[] = $this->prepare_response_for_collection( $response );\n\t\t}\n\n\t\t// Return all of our comment response data.\n\t\treturn rest_ensure_response( $data );\n\t}\n\n\t/**\n\t * Check permissions for the posts.\n\t *\n\t * @param WP_REST_Request $request Current request.\n\t */\n\tpublic function get_item_permissions_check( $request ) {\n\t\tif ( ! current_user_can( 'read' ) ) {\n\t\t\treturn new WP_Error( 'rest_forbidden', esc_html__( 'You cannot view the post resource.' ), array( 'status' => $this->authorization_status_code() ) );\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Grabs the five most recent posts and outputs them as a rest response.\n\t *\n\t * @param WP_REST_Request $request Current request.\n\t */\n\tpublic function get_item( $request ) {\n\t\t$id = (int) $request['id'];\n\t\t$post = get_post( $id );\n\n\t\tif ( empty( $post ) ) {\n\t\t\treturn rest_ensure_response( array() );\n\t\t}\n\n\t\t$response = prepare_item_for_response( $post );\n\n\t\t// Return all of our post response data.\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Matches the post data to the schema we want.\n\t *\n\t * @param WP_Post $post The comment object whose response is being prepared.\n\t */\n\tpublic function prepare_item_for_response( $post, $request ) {\n\t\t$post_data = array();\n\n\t\t$schema = $this->get_item_schema( $request );\n\n\t\t// We are also renaming the fields to more understandable names.\n\t\tif ( isset( $schema['properties']['id'] ) ) {\n\t\t\t$post_data['id'] = (int) $post->ID;\n\t\t}\n\n\t\tif ( isset( $schema['properties']['content'] ) ) {\n\t\t\t$post_data['content'] = apply_filters( 'the_content', $post->post_content, $post );\n\t\t}\n\n\t\treturn rest_ensure_response( $post_data );\n\t}\n\n\t/**\n\t * Prepare a response for inserting into a collection of responses.\n\t *\n\t * This is copied from WP_REST_Controller class in the WP REST API v2 plugin.\n\t *\n\t * @param WP_REST_Response $response Response object.\n\t * @return array Response data, ready for insertion into collection data.\n\t */\n\tpublic function prepare_response_for_collection( $response ) {\n\t\tif ( ! ( $response instanceof WP_REST_Response ) ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\t$data = (array) $response->get_data();\n\t\t$server = rest_get_server();\n\n\t\tif ( method_exists( $server, 'get_compact_response_links' ) ) {\n\t\t\t$links = call_user_func( array( $server, 'get_compact_response_links' ), $response );\n\t\t} else {\n\t\t\t$links = call_user_func( array( $server, 'get_response_links' ), $response );\n\t\t}\n\n\t\tif ( ! empty( $links ) ) {\n\t\t\t$data['_links'] = $links;\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Get our sample schema for a post.\n\t *\n\t * @param WP_REST_Request $request Current request.\n\t */\n\tpublic function get_item_schema( $request ) {\n\t\t$schema = array(\n\t\t\t// This tells the spec of JSON Schema we are using which is draft 4.\n\t\t\t'$schema'              => 'http://json-schema.org/draft-04/schema#',\n\t\t\t// The title property marks the identity of the resource.\n\t\t\t'title'                => 'post',\n\t\t\t'type'                 => 'object',\n\t\t\t// In JSON Schema you can specify object properties in the properties attribute.\n\t\t\t'properties'           => array(\n\t\t\t\t'id' => array(\n\t\t\t\t\t'description'  => esc_html__( 'Unique identifier for the object.', 'my-textdomain' ),\n\t\t\t\t\t'type'         => 'integer',\n\t\t\t\t\t'context'      => array( 'view', 'edit', 'embed' ),\n\t\t\t\t\t'readonly'     => true,\n\t\t\t\t),\n\t\t\t\t'content' => array(\n\t\t\t\t\t'description'  => esc_html__( 'The content for the object.', 'my-textdomain' ),\n\t\t\t\t\t'type'         => 'string',\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\treturn $schema;\n\t}\n\n\t// Sets up the proper HTTP status code for authorization.\n\tpublic function authorization_status_code() {\n\n\t\t$status = 401;\n\n\t\tif ( is_user_logged_in() ) {\n\t\t\t$status = 403;\n\t\t}\n\n\t\treturn $status;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using WPDB Prepare with Array Placeholders in WordPress\nDESCRIPTION: Demonstrates how to safely use wpdb::prepare when working with arrays of values in SQL queries. Creates placeholders dynamically based on array size and merges values for secure database operations.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/common-issues/index.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$wordcamp_id_placeholders = implode( ', ', array_fill( 0, count( $wordcamp_ids ), '%d' ) );\n$prepare_values = array_merge( array( $new_status ), $wordcamp_ids );\n$wpdb->query( $wpdb->prepare( \"\n    UPDATE `$table_name`\n    SET `post_status` = %s\n    WHERE ID IN ( $wordcamp_id_placeholders )\",\n    $prepare_values\n) );\n```\n\n----------------------------------------\n\nTITLE: Preventing Direct File Access in WordPress Plugins using PHP\nDESCRIPTION: This code snippet shows how to prevent direct access to a plugin file by checking for the ABSPATH constant, enhancing security.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/best-practices/index.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nif ( ! defined( 'ABSPATH' ) ) {\n  exit; // Exit if accessed directly\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Privacy Policy Content in WordPress Plugin\nDESCRIPTION: This snippet demonstrates how to use the wp_add_privacy_policy_content() function to add privacy-related information to the site's privacy policy page. This is crucial for plugins that handle personal data.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/privacy/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwp_add_privacy_policy_content()\n```\n\n----------------------------------------\n\nTITLE: Adding Action Hook for Settings Page Extension\nDESCRIPTION: Demonstrates how to create a custom action hook that allows other plugins to add content after settings page HTML. Uses the do_action() function with a prefixed hook name.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/hooks/custom-hooks/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'wporg_after_settings_page_html' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure REST API Endpoint with Permissions in WordPress\nDESCRIPTION: Demonstrates how to register a secure REST API endpoint with permissions checking. Includes callback functions for data retrieval and permissions verification, ensuring only authorized users can access private data.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/routes-endpoints/index.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * This is our callback function that embeds our resource in a WP_REST_Response\n */\nfunction prefix_get_private_data() {\n    // rest_ensure_response() wraps the data we want to return into a WP_REST_Response, and ensures it will be properly returned.\n    return rest_ensure_response( 'This is private data.' );\n}\n\n/**\n * This is our callback function that embeds our resource in a WP_REST_Response\n */\nfunction prefix_get_private_data_permissions_check() {\n    // Restrict endpoint to only users who have the edit_posts capability.\n    if ( ! current_user_can( 'edit_posts' ) ) {\n        return new WP_Error( 'rest_forbidden', esc_html__( 'OMG you can not view private data.', 'my-text-domain' ), array( 'status' => 401 ) );\n    }\n\n    // This is a black-listing approach. You could alternatively do this via white-listing, by returning false here and changing the permissions check.\n    return true;\n}\n\n/**\n * This function is where we register our routes for our example endpoint.\n */\nfunction prefix_register_example_routes() {\n    // register_rest_route() handles more arguments but we are going to stick to the basics for now.\n    register_rest_route( 'my-plugin/v1', '/private-data', array(\n        // By using this constant we ensure that when the WP_REST_Server changes our readable endpoints will work as intended.\n        'methods'  => WP_REST_Server::READABLE,\n        // Here we register our callback. The callback is fired when this endpoint is matched by the WP_REST_Server class.\n        'callback' => 'prefix_get_private_data',\n        // Here we register our permissions callback. The callback is fired before the main callback to check if the current user can access the endpoint.\n        'permissions_callback' => 'prefix_get_private_data_permissions_check',\n    ) );\n}\n\nadd_action( 'rest_api_init', 'prefix_register_example_routes' );\n```\n\n----------------------------------------\n\nTITLE: Creating a Class-based WordPress Plugin Structure in PHP\nDESCRIPTION: This example shows how to use a class-based approach for WordPress plugin development. It includes method definitions and class instantiation.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/best-practices/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nif ( ! class_exists( 'WPOrg_Plugin' ) ) {\n  class WPOrg_Plugin {\n    public static function init() {\n      register_setting( 'wporg_settings', 'wporg_option_foo' );\n    }\n\n    public static function get_foo() {\n      return get_option( 'wporg_option_foo' );\n    }\n  }\n\n  WPOrg_Plugin::init();\n  WPOrg_Plugin::get_foo();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating WordPress Custom Settings Page with Settings and Options API\nDESCRIPTION: Complete implementation of a WordPress settings page that creates a top-level menu named 'WPOrg' with custom options. Includes registration of settings, sections, and fields, along with callback functions for rendering the UI and handling form submissions. Uses Settings API for form handling and Options API for data storage.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/settings/custom-settings-page/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @internal never define functions inside callbacks.\n * these functions could be run multiple times; this would result in a fatal error.\n */\n\n/**\n * custom option and settings\n */\nfunction wporg_settings_init() {\n  // Register a new setting for \"wporg\" page.\n  register_setting( 'wporg', 'wporg_options' );\n\n  // Register a new section in the \"wporg\" page.\n  add_settings_section(\n    'wporg_section_developers',\n    __( 'The Matrix has you.', 'wporg' ), 'wporg_section_developers_callback',\n    'wporg'\n  );\n\n  // Register a new field in the \"wporg_section_developers\" section, inside the \"wporg\" page.\n  add_settings_field(\n    'wporg_field_pill', // As of WP 4.6 this value is used only internally.\n                        // Use $args' label_for to populate the id inside the callback.\n    __( 'Pill', 'wporg' ),\n    'wporg_field_pill_cb',\n    'wporg',\n    'wporg_section_developers',\n    array(\n      'label_for'         => 'wporg_field_pill',\n      'class'             => 'wporg_row',\n      'wporg_custom_data' => 'custom',\n    )\n  );\n}\n\n/**\n * Register our wporg_settings_init to the admin_init action hook.\n */\nadd_action( 'admin_init', 'wporg_settings_init' );\n\n/**\n * Custom option and settings:\n *  - callback functions\n */\n\n/**\n * Developers section callback function.\n *\n * @param array $args  The settings array, defining title, id, callback.\n */\nfunction wporg_section_developers_callback( $args ) {\n?>\n  <p id=\"<?php echo esc_attr( $args['id'] ); ?>\"><?php esc_html_e( 'Follow the white rabbit.', 'wporg' ); ?></p>\n<?php\n}\n\n/**\n * Pill field callbakc function.\n *\n * WordPress has magic interaction with the following keys: label_for, class.\n * - the \"label_for\" key value is used for the \"for\" attribute of the <label>.\n * - the \"class\" key value is used for the \"class\" attribute of the <tr> containing the field.\n * Note: you can add custom key value pairs to be used inside your callbacks.\n *\n * @param array $args\n */\nfunction wporg_field_pill_cb( $args ) {\n  // Get the value of the setting we've registered with register_setting()\n  $options = get_option( 'wporg_options' );\n  ?>\n  <select\n    id=\"<?php echo esc_attr( $args['label_for'] ); ?>\"\n    data-custom=\"<?php echo esc_attr( $args['wporg_custom_data'] ); ?>\"\n    name=\"wporg_options[<?php echo esc_attr( $args['label_for'] ); ?>]\">\n    <option value=\"red\" <?php echo isset( $options[ $args['label_for'] ] ) ? ( selected( $options[ $args['label_for'] ], 'red', false ) ) : ( '' ); ?>>\n      <?php esc_html_e( 'red pill', 'wporg' ); ?>\n    </option>\n    <option value=\"blue\" <?php echo isset( $options[ $args['label_for'] ] ) ? ( selected( $options[ $args['label_for'] ], 'blue', false ) ) : ( '' ); ?>>\n      <?php esc_html_e( 'blue pill', 'wporg' ); ?>\n    </option>\n  </select>\n  <p class=\"description\">\n    <?php esc_html_e( 'You take the blue pill and the story ends. You wake in your bed and you believe whatever you want to believe.', 'wporg' ); ?>\n  </p>\n  <p class=\"description\">\n    <?php esc_html_e( 'You take the red pill and you stay in Wonderland and I show you how deep the rabbit-hole goes.', 'wporg' ); ?>\n  </p>\n  <?php\n}\n\n/**\n * Add the top level menu page.\n */\nfunction wporg_options_page() {\n  add_menu_page(\n    'WPOrg',\n    'WPOrg Options',\n    'manage_options',\n    'wporg',\n    'wporg_options_page_html'\n  );\n}\n\n/**\n * Register our wporg_options_page to the admin_menu action hook.\n */\nadd_action( 'admin_menu', 'wporg_options_page' );\n\n/**\n * Top level menu callback function\n */\nfunction wporg_options_page_html() {\n  // check user capabilities\n  if ( ! current_user_can( 'manage_options' ) ) {\n    return;\n  }\n\n  // add error/update messages\n\n  // check if the user have submitted the settings\n  // WordPress will add the \"settings-updated\" $_GET parameter to the url\n  if ( isset( $_GET['settings-updated'] ) ) {\n    // add settings saved message with the class of \"updated\"\n    add_settings_error( 'wporg_messages', 'wporg_message', __( 'Settings Saved', 'wporg' ), 'updated' );\n  }\n\n  // show error/update messages\n  settings_errors( 'wporg_messages' );\n  ?>\n  <div class=\"wrap\">\n    <h1><?php echo esc_html( get_admin_page_title() ); ?></h1>\n    <form action=\"options.php\" method=\"post\">\n      <?php\n      // output security fields for the registered setting \"wporg\"\n      settings_fields( 'wporg' );\n      // output setting sections and their fields\n      // (sections are registered for \"wporg\", each field is registered to a specific section)\n      do_settings_sections( 'wporg' );\n      // output save settings button\n      submit_button( 'Save Settings' );\n      ?>\n    </form>\n  </div>\n  <?php\n}\n```\n\n----------------------------------------\n\nTITLE: Secure Delete Post Implementation With Capability Checking in WordPress\nDESCRIPTION: This code snippet demonstrates a secure implementation of the post deletion functionality by ensuring only users with the 'edit_others_posts' capability (Editors and above) can see and use the delete link. It wraps the functionality in a capability check using current_user_can().\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/security/checking-user-capabilities/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Generate a Delete link based on the homepage url.\n *\n * @param string $content   Existing content.\n *\n * @return string|null\n */\nfunction wporg_generate_delete_link( $content ) {\n  // Run only for single post page.\n  if ( is_single() && in_the_loop() && is_main_query() ) {\n    // Add query arguments: action, post.\n    $url = add_query_arg(\n      [\n        'action' => 'wporg_frontend_delete',\n        'post'   => get_the_ID(),\n      ], home_url()\n    );\n\n    return $content . ' <a href=\"' . esc_url( $url ) . '\">' . esc_html__( 'Delete Post', 'wporg' ) . '</a>';\n  }\n\n  return null;\n}\n\n/**\n * Request handler\n */\nfunction wporg_delete_post() {\n  if ( isset( $_GET['action'] ) && 'wporg_frontend_delete' === $_GET['action'] ) {\n\n    // Verify we have a post id.\n    $post_id = ( isset( $_GET['post'] ) ) ? ( $_GET['post'] ) : ( null );\n\n    // Verify there is a post with such a number.\n    $post = get_post( (int) $post_id );\n    if ( empty( $post ) ) {\n      return;\n    }\n\n    // Delete the post.\n    wp_trash_post( $post_id );\n\n    // Redirect to admin page.\n    $redirect = admin_url( 'edit.php' );\n    wp_safe_redirect( $redirect );\n\n    // We are done.\n    die;\n  }\n}\n\n/**\n * Add delete post ability\n */\nadd_action('plugins_loaded', 'wporg_add_delete_post_ability');\n\nfunction wporg_add_delete_post_ability() {    \n  if ( current_user_can( 'edit_others_posts' ) ) {\n    /**\n     * Add the delete link to the end of the post content.\n     */\n    add_filter( 'the_content', 'wporg_generate_delete_link' );\n\n    /**\n     * Register our request handler with the init hook.\n     */\n    add_action( 'init', 'wporg_delete_post' );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete WordPress Shortcode Implementation in PHP\nDESCRIPTION: This comprehensive example demonstrates a full implementation of a WordPress shortcode. It includes attribute parsing, content handling, output escaping, and shortcode registration. The shortcode accepts a 'title' parameter and can be used as both self-closing and enclosing.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/shortcodes/shortcodes-with-parameters/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * The [wporg] shortcode.\n *\n * Accepts a title and will display a box.\n *\n * @param array  $atts    Shortcode attributes. Default empty.\n * @param string $content Shortcode content. Default null.\n * @param string $tag     Shortcode tag (name). Default empty.\n * @return string Shortcode output.\n */\nfunction wporg_shortcode( $atts = [], $content = null, $tag = '' ) {\n  // normalize attribute keys, lowercase\n  $atts = array_change_key_case( (array) $atts, CASE_LOWER );\n\n  // override default attributes with user attributes\n  $wporg_atts = shortcode_atts(\n    array(\n      'title' => 'WordPress.org',\n    ), $atts, $tag\n  );\n\n  // start box\n  $o = '<div class=\"wporg-box\">';\n\n  // title\n  $o .= '<h2>' . esc_html( $wporg_atts['title'] ) . '</h2>';\n\n  // enclosing tags\n  if ( ! is_null( $content ) ) {\n    // $content here holds everything in between the opening and the closing tags of your shortcode. eg.g [my-shortcode]content[/my-shortcode].\n    // Depending on what your shortcode supports, you will parse and append the content to your output in different ways.\n    // In this example, we just secure output by executing the_content filter hook on $content.\n    $o .= apply_filters( 'the_content', $content );\n  }\n\n  // end box\n  $o .= '</div>';\n\n  // return output\n  return $o;\n}\n\n/**\n * Central location to create all shortcodes.\n */\nfunction wporg_shortcodes_init() {\n  add_shortcode( 'wporg', 'wporg_shortcode' );\n}\n\nadd_action( 'init', 'wporg_shortcodes_init' );\n```\n\n----------------------------------------\n\nTITLE: Basic Input Sanitization and Escaping in PHP\nDESCRIPTION: Demonstrates proper sanitization and escaping of POST data using WordPress built-in functions. Shows how to safely process and output user input.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/common-issues/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\necho esc_html(sanitize_text_field($_POST['example']));\n```\n\n----------------------------------------\n\nTITLE: Implementing REST API Argument Schema Validation in WordPress\nDESCRIPTION: This code demonstrates a complete implementation of argument schema validation for WordPress REST API endpoints. It includes route registration, schema definition, validation callbacks, and sanitization functions for handling string arguments securely.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/schema/index.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// Register our routes.\nfunction prefix_register_my_arg_route() {\n\tregister_rest_route( 'my-namespace/v1', '/schema-arg', array(\n\t\t// Here we register our endpoint.\n\t\tarray(\n\t\t\t'methods'  => 'GET',\n\t\t\t'callback' => 'prefix_get_item',\n\t\t\t'args' => prefix_get_endpoint_args(),\n\t\t),\n\t) );\n}\n\n// Hook registration into 'rest_api_init' hook.\nadd_action( 'rest_api_init', 'prefix_register_my_arg_route' );\n\n/**\n * Returns the request argument `my-arg` as a rest response.\n *\n * @param WP_REST_Request $request Current request.\n */\nfunction prefix_get_item( $request ) {\n\t// If we didn't use required in the schema this would throw an error when my arg is not set.\n\treturn rest_ensure_response( $request['my-arg'] );\n}\n\n/**\n * Get the argument schema for this example endpoint.\n */\nfunction prefix_get_endpoint_args() {\n\t$args = array();\n\n\t// Here we add our PHP representation of JSON Schema.\n\t$args['my-arg'] = array(\n\t\t'description'       => esc_html__( 'This is the argument our endpoint returns.', 'my-textdomain' ),\n\t\t'type'              => 'string',\n\t\t'validate_callback' => 'prefix_validate_my_arg',\n\t\t'sanitize_callback' => 'prefix_sanitize_my_arg',\n\t\t'required'          => true,\n\t);\n\n\treturn $args;\n}\n\n/**\n * Our validation callback for `my-arg` parameter.\n *\n * @param mixed           $value   Value of the my-arg parameter.\n * @param WP_REST_Request $request Current request object.\n * @param string          $param   The name of the parameter in this case, 'my-arg'.\n */\nfunction prefix_validate_my_arg( $value, $request, $param ) {\n\t$attributes = $request->get_attributes();\n\n\tif ( isset( $attributes['args'][ $param ] ) ) {\n\t\t$argument = $attributes['args'][ $param ];\n\t\t// Check to make sure our argument is a string.\n\t\tif ( 'string' === $argument['type'] && ! is_string( $value ) ) {\n\t\t\treturn new WP_Error( 'rest_invalid_param', sprintf( esc_html__( '%1$s is not of type %2$s', 'my-textdomain' ), $param, 'string' ), array( 'status' => 400 ) );\n\t\t}\n\t} else {\n\t\t// This code won't execute because we have specified this argument as required.\n\t\t// If we reused this validation callback and did not have required args then this would fire.\n\t\treturn new WP_Error( 'rest_invalid_param', sprintf( esc_html__( '%s was not registered as a request argument.', 'my-textdomain' ), $param ), array( 'status' => 400 ) );\n\t}\n\n\t// If we got this far then the data is valid.\n\treturn true;\n}\n\n/**\n * Our santization callback for `my-arg` parameter.\n *\n * @param mixed           $value   Value of the my-arg parameter.\n * @param WP_REST_Request $request Current request object.\n * @param string          $param   The name of the parameter in this case, 'my-arg'.\n */\nfunction prefix_sanitize_my_arg( $value, $request, $param ) {\n\t$attributes = $request->get_attributes();\n\n\tif ( isset( $attributes['args'][ $param ] ) ) {\n\t\t$argument = $attributes['args'][ $param ];\n\t\t// Check to make sure our argument is a string.\n\t\tif ( 'string' === $argument['type'] ) {\n\t\t\treturn sanitize_text_field( $value );\n\t\t}\n\t} else {\n\t\t// This code won't execute because we have specified this argument as required.\n\t\t// If we reused this validation callback and did not have required args then this would fire.\n\t\treturn new WP_Error( 'rest_invalid_param', sprintf( esc_html__( '%s was not registered as a request argument.', 'my-textdomain' ), $param ), array( 'status' => 400 ) );\n\t}\n\n\t// If we got this far then something went wrong don't use user input.\n\treturn new WP_Error( 'rest_api_sad', esc_html__( 'Something went terribly wrong.', 'my-textdomain' ), array( 'status' => 500 ) );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Meta Boxes to Post Edit Screens in WordPress\nDESCRIPTION: This PHP snippet demonstrates how to add custom meta boxes to the post and custom post type edit screens using the add_meta_box() function and the add_meta_boxes action hook.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/metadata/custom-meta-boxes/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_add_custom_box() {\n  $screens = [ 'post', 'wporg_cpt' ];\n  foreach ( $screens as $screen ) {\n    add_meta_box(\n      'wporg_box_id',                 // Unique ID\n      'Custom Meta Box Title',      // Box title\n      'wporg_custom_box_html',  // Content callback, must be of type callable\n      $screen                            // Post type\n    );\n  }\n}\nadd_action( 'add_meta_boxes', 'wporg_add_custom_box' );\n```\n\n----------------------------------------\n\nTITLE: Implementing WordPress Transients for Caching\nDESCRIPTION: Shows how to cache API responses using WordPress transients with expiration time.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/http-api/index.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$response = wp_remote_get( 'https://api.github.com/users/blobaugh' );\nset_transient( 'prefix_github_userinfo', $response, 60 * 60 );\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX Handlers and Enqueuing Scripts in WordPress Plugin (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to enqueue scripts, create nonces, localize script data, and handle AJAX requests in a WordPress plugin. It includes functions for enqueuing scripts, creating AJAX handlers, and updating user preferences based on AJAX requests.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/summary/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nadd_action( 'admin_enqueue_scripts', 'my_enqueue' );\nfunction my_enqueue( $hook ) {\n  if ( 'myplugin_settings.php' !== $hook ) {\n    return;\n  }\n\n  wp_enqueue_script(\n    'ajax-script',\n    plugins_url( '/js/myjquery.js', __FILE__ ),\n    array( 'jquery' ),\n    '1.0.0',\n    true\n  );\n\n  $title_nonce = wp_create_nonce( 'title_example' );\n  wp_localize_script(\n    'ajax-script',\n    'my_ajax_obj',\n    array(\n      'ajax_url' => admin_url( 'admin-ajax.php' ),\n      'nonce'    => $title_nonce,\n    )\n  );\n}\n\nadd_action( 'wp_ajax_my_tag_count', 'my_ajax_handler' );\nfunction my_ajax_handler() {\n  check_ajax_referer( 'title_example' );\n\n  $title = wp_unslash( $_POST['title'] );\n\n  update_user_meta( get_current_user_id(), 'title_preference', $title );\n\n  $args = array(\n    'tag' => $title,\n  );\n\n  $the_query = new WP_Query( $args );\n\n  echo esc_html( $title ) . ' (' . $the_query->post_count . ') ';\n\n  wp_die(); // all ajax handlers should die when finished\n}\n```\n\n----------------------------------------\n\nTITLE: WordPress Plugin Uninstall.php Implementation\nDESCRIPTION: Example implementation of uninstall.php file that safely removes plugin options and custom database tables. Includes security check for WP_UNINSTALL_PLUGIN constant and handles both single-site and multisite cleanup.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/uninstall-methods/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// if uninstall.php is not called by WordPress, die\nif ( ! defined( 'WP_UNINSTALL_PLUGIN' ) ) {\n  die;\n}\n\n$option_name = 'wporg_option';\n\ndelete_option( $option_name );\n\n// for site options in Multisite\ndelete_site_option( $option_name );\n\n// drop a custom database table\nglobal $wpdb;\n$wpdb->query( \"DROP TABLE IF EXISTS {$wpdb->prefix}mytable\" );\n```\n\n----------------------------------------\n\nTITLE: Implementing WordPress REST API Path Variables for Product Routes\nDESCRIPTION: Demonstrates setting up REST API routes with path variables for fetching single and multiple products. Includes error handling and route registration with dynamic path parameters.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/routes-endpoints/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * This is our callback function to return our products.\n *\n * @param WP_REST_Request $request This function accepts a rest request to process data.\n */\nfunction prefix_get_products( $request ) {\n    // In practice this function would fetch the desired data. Here we are just making stuff up.\n    $products = array(\n        '1' => 'I am product 1',\n        '2' => 'I am product 2',\n        '3' => 'I am product 3',\n    );\n\n    return rest_ensure_response( $products );\n}\n\n/**\n * This is our callback function to return a single product.\n *\n * @param WP_REST_Request $request This function accepts a rest request to process data.\n */\nfunction prefix_get_product( $request ) {\n    // In practice this function would fetch the desired data. Here we are just making stuff up.\n    $products = array(\n        '1' => 'I am product 1',\n        '2' => 'I am product 2',\n        '3' => 'I am product 3',\n    );\n\n    // Here we are grabbing the 'id' path variable from the $request object. WP_REST_Request implements ArrayAccess, which allows us to grab properties as though it is an array.\n    $id = (string) $request['id'];\n\n    if ( isset( $products[ $id ] ) ) {\n        // Grab the product.\n        $product = $products[ $id ];\n\n        // Return the product as a response.\n        return rest_ensure_response( $product );\n    } else {\n        // Return a WP_Error because the request product was not found. In this case we return a 404 because the main resource was not found.\n        return new WP_Error( 'rest_product_invalid', esc_html__( 'The product does not exist.', 'my-text-domain' ), array( 'status' => 404 ) );\n    }\n\n    // If the code somehow executes to here something bad happened return a 500.\n    return new WP_Error( 'rest_api_sad', esc_html__( 'Something went horribly wrong.', 'my-text-domain' ), array( 'status' => 500 ) );\n}\n\n/**\n * This function is where we register our routes for our example endpoint.\n */\nfunction prefix_register_product_routes() {\n    // Here we are registering our route for a collection of products.\n    register_rest_route( 'my-shop/v1', '/products', array(\n        // By using this constant we ensure that when the WP_REST_Server changes our readable endpoints will work as intended.\n        'methods'  => WP_REST_Server::READABLE,\n        // Here we register our callback. The callback is fired when this endpoint is matched by the WP_REST_Server class.\n        'callback' => 'prefix_get_products',\n    ) );\n    // Here we are registering our route for single products. The (?P<id>[\\d]+) is our path variable for the ID, which, in this example, can only be some form of positive number.\n    register_rest_route( 'my-shop/v1', '/products/(?P<id>[\\d]+)', array(\n        // By using this constant we ensure that when the WP_REST_Server changes our readable endpoints will work as intended.\n        'methods'  => WP_REST_Server::READABLE,\n        // Here we register our callback. The callback is fired when this endpoint is matched by the WP_REST_Server class.\n        'callback' => 'prefix_get_product',\n    ) );\n}\n\nadd_action( 'rest_api_init', 'prefix_register_product_routes' );\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request with wp_remote_get in PHP\nDESCRIPTION: Demonstrates how to use wp_remote_get() to make a GET request to the GitHub API and retrieve user information. The response includes headers, body, and other metadata.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/http-api/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$response = wp_remote_get( 'https://api.github.com/users/blobaugh' );\n```\n\n----------------------------------------\n\nTITLE: Implementing WordPress Shortcode Callback\nDESCRIPTION: Complete example of registering and implementing a WordPress shortcode named 'wporg'. Shows both the registration and callback function implementation with attribute and content handling.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/shortcodes/basic-shortcodes/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_shortcode( 'wporg', 'wporg_shortcode' );\nfunction wporg_shortcode( $atts = [], $content = null) {\n  // do something to $content\n  // always return\n  return $content;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Post Type Registration in WordPress\nDESCRIPTION: Demonstrates the minimal code required to register a custom post type named 'Products' with WordPress. Uses register_post_type() function hooked to 'init' action with basic configuration options.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/post-types/registering-custom-post-types/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_custom_post_type() {\n  register_post_type('wporg_product',\n    array(\n      'labels'      => array(\n        'name'          => __('Products', 'textdomain'),\n        'singular_name' => __('Product', 'textdomain'),\n      ),\n      'public'      => true,\n      'has_archive' => true,\n    )\n  );\n}\nadd_action('init', 'wporg_custom_post_type');\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Endpoint for WordPress REST API in PHP\nDESCRIPTION: This code snippet demonstrates how to create a batch endpoint for the WordPress REST API. It includes functions for registering the route, handling batch requests, processing individual requests, and validating input parameters. The implementation uses rest_do_request() to internally serve multiple requests in a single HTTP call, improving performance.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/requests/index.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// Register our mock batch endpoint.\nfunction prefix_register_batch_route() {\n    register_rest_route( 'my-namespace/v1', '/batch', array(\n        // Supported methods for this endpoint. WP_REST_Server::READABLE translates to GET.\n        'methods' => WP_REST_Server::READABLE,\n        // Register the callback for the endpoint.\n        'callback' => 'prefix_do_batch_request',\n        // Register args for the batch endpoint.\n        'args' => prefix_batch_request_parameters(),\n    ) );\n}\n\nadd_action( 'rest_api_init', 'prefix_register_batch_route' );\n\n/**\n * Our registered endpoint callback. Notice how we are passing in $request as an argument.\n * By default, the WP_REST_Server will pass in the matched request object to our callback.\n *\n * @param WP_REST_Request $request The current matched request object.\n */\nfunction prefix_do_batch_request( $request ) {\n    // Here we initialize the array that will hold our response data.\n    $data = array();\n\t$data = prefix_handle_batch_requests( $request['requests'] );\n\treturn $data;\n}\n\n/**\n * This handles the building of the response for the batch requests we make.\n *\n * @param array $requests An array of data to build WP_REST_Request objects from.\n * @return WP_REST_Response A collection of response data for batch endpoints.\n */\nfunction prefix_handle_batch_requests( $requests ) {\n\t$data = array();\n\n\t// Foreach request specified in the requests param run the endpoint.\n\tforeach ( $requests as $request_params ) {\n\t\t$response = prefix_handle_request( $request_params );\n\t\t$key = $request_params['method'] . ' ' . $request_params['route'];\n\t\t$data[ $key ] = prefix_prepare_for_collection( $response );\n\t}\n\n\treturn rest_ensure_response( $data );\n}\n\n/**\n * This handles the building of the response for the batch requests we make.\n *\n * @param array $request_params Data to build a WP_REST_Request object from.\n * @return WP_REST_Response Response data for the request.\n */\nfunction prefix_handle_request( $request_params ) {\n\t$request = new WP_REST_Request( $request_params['method'], $request_params['route'] );\n\n\t// Add specified request parameters into the request.\n\tif ( isset( $request_params['params'] ) ) {\n\t\tforeach ( $request_params['params'] as $param_name => $param_value ) {\n\t\t\t$request->set_param( $param_name, $param_value );\n\t\t}\n\t}\n\t$response = rest_do_request( $request );\n\treturn $response;\n}\n\n/**\n * Prepare a response for inserting into a collection of responses.\n *\n * This is lifted from WP_REST_Controller class in the WP REST API v2 plugin.\n *\n * @param WP_REST_Response $response Response object.\n * @return array Response data, ready for insertion into collection data.\n */\nfunction prefix_prepare_for_collection( $response ) {\n\tif ( ! ( $response instanceof WP_REST_Response ) ) {\n\t\treturn $response;\n\t}\n\n\t$data = (array) $response->get_data();\n\t$server = rest_get_server();\n\n\tif ( method_exists( $server, 'get_compact_response_links' ) ) {\n\t\t$links = call_user_func( array( $server, 'get_compact_response_links' ), $response );\n\t} else {\n\t\t$links = call_user_func( array( $server, 'get_response_links' ), $response );\n\t}\n\n\tif ( ! empty( $links ) ) {\n\t\t$data['_links'] = $links;\n\t}\n\n\treturn $data;\n}\n\n/**\n * Returns the JSON schema data for our registered parameters.\n *\n * @return array $params A PHP representation of JSON Schema data.\n */\nfunction prefix_batch_request_parameters() {\n    $params = array();\n\n    $params['requests'] = array(\n\t\t'description'        => esc_html__( 'An array of request objects arguments that can be built into WP_REST_Request instances.', 'my-text-domain' ),\n\t\t'type'               => 'array',\n\t\t'required'           => true,\n\t\t'validate_callback'  => 'prefix_validate_requests',\n\t\t'items'              => array(\n\t\t\tarray(\n\t\t\t\t'type' => 'object',\n\t\t\t\t'properties' => array(\n\t\t\t\t\t'method' => array(\n\t\t\t\t\t\t'description' => esc_html__( 'HTTP Method of the desired request.', 'my-text-domain' ),\n\t\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t\t'required'    => true,\n\t\t\t\t\t\t'enum'        => array(\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t'OPTIONS',\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t\t'route' => array(\n\t\t\t\t\t\t'description' => esc_html__( 'Desired route for the request.', 'my-text-domain' ),\n\t\t\t\t\t\t'required'    => true,\n\t\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t\t'format'      => 'uri',\n\t\t\t\t\t),\n\t\t\t\t\t'params' => array(\n\t\t\t\t\t\t'description' => esc_html__( 'Key value pairs of desired request parameters.', 'my-text-domain' ),\n\t\t\t\t\t\t'type' => 'object',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t),\n\t);\n\n\treturn $params;\n}\n\nfunction prefix_validate_requests( $requests, $request, $param_key ) {\n\t// If requests isn't an array of requests then we don't process the batch.\n\tif ( ! is_array( $requests ) ) {\n\t\treturn new WP_Error( 'rest_invald_param', esc_html__( 'The requests parameter must be an array of requests.' ), array( 'status' => 400 ) );\n\t}\n\n\tforeach ( $requests as $request ) {\n\t\t// If the method or route is not set then we do not run the requests.\n\t\tif ( ! isset( $request['method'] ) || ! isset( $request['route'] ) ) {\n\t\t\treturn new WP_Error( 'rest_invald_param', esc_html__( 'You must specify the method and route for each request.' ), array( 'status' => 400 ) );\n\t\t}\n\n\t\tif ( isset( $request['params'] ) && ! is_array( $request['params'] ) ) {\n\t\t\treturn new WP_Error( 'rest_invald_param', esc_html__( 'You must specify the params for each request as an array of named key value pairs.' ), array( 'status' => 400 ) );\n\t\t}\n\t}\n\n\t// This is a black listing approach to data validation.\n\treturn true;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Handling REST API Book Endpoint with URL Parameters\nDESCRIPTION: Complete example demonstrating how to register a REST API endpoint for retrieving individual books by ID. Shows route registration with path variables, callback function implementation, and parameter handling from the request object.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/requests/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Register our individual books endpoint.\nfunction prefix_register_book_route() {\n    register_rest_route( 'my-namespace/v1', '/books/(?P<id>\\d+)', array(\n        // Supported methods for this endpoint. WP_REST_Server::READABLE translates to GET.\n        'methods' => WP_REST_Server::READABLE,\n        // Register the callback for the endpoint.\n        'callback' => 'prefix_get_book',\n    ) );\n}\n\nadd_action( 'rest_api_init', 'prefix_register_book_route' ); \n\n/**\n * Our registered endpoint callback. Notice how we are passing in $request as an argument.\n * By default, the WP_REST_Server will pass in the matched request object to our callback.\n *\n * @param WP_REST_Request $request The current matched request object.\n */\nfunction prefix_get_book( $request ) {\n    // Here we are accessing the path variable 'id' from the $request.\n    $book = prefix_get_the_book( $request['id'] );\n    return rest_ensure_response( $book );\n}\n\n// A simple function that grabs a book title from our books by ID.\nfunction prefix_get_the_book( $id ) {\n    $books = array(\n        'Design Patterns',\n        'Clean Code',\n        'Refactoring',\n        'Structure and Interpretation of Computer Programs',\n    );\n\n    $book = '';\n    if ( isset( $books[ $id ] ) ) {\n        // Grab the matching book.\n        $book = $books[ $id ];\n    } else {\n        // Error handling.\n        return new WP_Error( 'rest_not_found', esc_html__( 'The book does not exist', 'my-text-domain' ), array( 'status' => 404 ) );\n    }\n\n    return $book;\n}\n```\n\n----------------------------------------\n\nTITLE: Enqueuing JavaScript in WordPress\nDESCRIPTION: Example of properly enqueuing a JavaScript file in WordPress using wp_enqueue_script(). Shows how to include jQuery dependency and set loading in footer.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/enqueuing/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nwp_enqueue_script(\n  'ajax-script',\n  plugins_url( '/js/myjquery.js', __FILE__ ),\n  array( 'jquery' ),\n  '1.0.,0',\n  array(\n    'in_footer' => true,\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: WordPress Plugin Deactivation Hook with Custom Post Type Cleanup\nDESCRIPTION: Demonstrates how to properly clean up a custom post type during plugin deactivation by unregistering the post type and flushing rewrite rules.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/activation-deactivation-hooks/index.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Deactivation hook.\n */\nfunction pluginprefix_deactivate() {\n  // Unregister the post type, so the rules are no longer in memory.\n  unregister_post_type( 'book' );\n  // Clear the permalinks to remove our post type's rules from the database.\n  flush_rewrite_rules();\n}\nregister_deactivation_hook( __FILE__, 'pluginprefix_deactivate' );\n```\n\n----------------------------------------\n\nTITLE: Complete WordPress AJAX Setup Example\nDESCRIPTION: Comprehensive example showing script enqueuing, nonce creation, and data localization in a single callback function.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/enqueuing/index.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nadd_action( 'admin_enqueue_scripts', 'my_enqueue' );\n\n/**\n * Enqueue my scripts and assets.\n *\n * @param $hook\n */\nfunction my_enqueue( $hook ) {\n  if ( 'myplugin_settings.php' !== $hook ) {\n    return;\n  }\n  wp_enqueue_script(\n    'ajax-script',\n    plugins_url( '/js/myjquery.js', __FILE__ ),\n    array( 'jquery' ),\n    '1.0.0',\n    true\n  );\n\n  wp_localize_script(\n    'ajax-script',\n    'my_ajax_obj',\n    array(\n      'ajax_url' => admin_url( 'admin-ajax.php' ),\n      'nonce'    => wp_create_nonce( 'title_example' ),\n    )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete jQuery AJAX Script for WordPress Plugins\nDESCRIPTION: This snippet shows a complete jQuery AJAX script for WordPress plugins. It includes event handling, nonce verification, data sending, and response handling. The script is designed to update content based on user interaction with radio buttons.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/ajax/index.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\njQuery(document).ready(function($) {         //wrapper\n  $(\".pref\").change(function() {          //event\n    var this2 = this;                  //use in callback\n    $.post(my_ajax_obj.ajax_url, {      //POST request\n      _ajax_nonce: my_ajax_obj.nonce, //nonce\n      action: \"my_tag_count\",         //action\n      title: this.value               //data\n      }, function(data) {            //callback\n        this2.nextSibling.remove(); //remove current title\n        $(this2).after(data);       //insert server response\n      }\n    );\n  } );\n} );\n```\n\n----------------------------------------\n\nTITLE: Querying Custom Post Types with WP_Query in PHP\nDESCRIPTION: This snippet demonstrates how to query posts of a specific custom post type using the WP_Query class. It retrieves 10 product posts and displays their title and content in a loop.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/post-types/working-with-custom-post-types/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$args = array(\n  'post_type'      => 'product',\n  'posts_per_page' => 10,\n);\n$loop = new WP_Query($args);\nwhile ( $loop->have_posts() ) {\n  $loop->the_post();\n  ?>\n  <div class=\"entry-content\">\n    <?php the_title(); ?>\n    <?php the_content(); ?>\n  </div>\n  <?php\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Filterable Custom Post Type Registration\nDESCRIPTION: Example of implementing a filter hook when registering a custom post type, allowing other plugins to modify the post type parameters before registration.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/hooks/custom-hooks/index.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction wporg_create_post_type() {\n  $post_type_params = [/* ... */];\n\n  register_post_type(\n    'post_type_slug',\n    apply_filters( 'wporg_post_type_params', $post_type_params )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New WordPress User with Random Password\nDESCRIPTION: This snippet demonstrates how to create a new WordPress user using wp_create_user(). It checks if the username is available, verifies the email is not already in use, generates a random password, and then creates the user.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/users/working-with-users/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// check if the username is taken\n$user_id = username_exists( $user_name );\n\n// check that the email address does not belong to a registered user\nif ( ! $user_id && email_exists( $user_email ) === false ) {\n  // create a random password\n  $random_password = wp_generate_password( 12, false );\n  // create the user\n  $user_id = wp_create_user(\n    $user_name,\n    $random_password,\n    $user_email\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation for WordPress REST API Endpoint Arguments\nDESCRIPTION: This snippet demonstrates how to implement a validation callback for the 'filter' argument in a WordPress REST API endpoint. It includes the main callback function, validation function, argument registration, and route registration.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/routes-endpoints/index.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * This is our callback function that embeds our resource in a WP_REST_Response\n */\nfunction prefix_get_colors( $request ) {\n    // In practice this function would fetch more practical data. Here we are just making stuff up.\n    $colors = array(\n        'blue',\n        'blue',\n        'red',\n        'red',\n        'green',\n        'green',\n    );\n\n    if ( isset( $request['filter'] ) ) {\n       $filtered_colors = array();\n       foreach ( $colors as $color ) {\n           if ( $request['filter'] === $color ) {\n               $filtered_colors[] = $color;\n           }\n       }\n       return rest_ensure_response( $filtered_colors );\n    }\n    return rest_ensure_response( $colors );\n}\n/**\n * Validate a request argument based on details registered to the route.\n *\n * @param  mixed            $value   Value of the 'filter' argument.\n * @param  WP_REST_Request  $request The current request object.\n * @param  string           $param   Key of the parameter. In this case it is 'filter'.\n * @return WP_Error|boolean\n */\nfunction prefix_filter_arg_validate_callback( $value, $request, $param ) {\n    // If the 'filter' argument is not a string return an error.\n    if ( ! is_string( $value ) ) {\n        return new WP_Error( 'rest_invalid_param', esc_html__( 'The filter argument must be a string.', 'my-text-domain' ), array( 'status' => 400 ) );\n    }\n\n    // Get the registered attributes for this endpoint request.\n    $attributes = $request->get_attributes();\n\n    // Grab the filter param schema.\n    $args = $attributes['args'][ $param ];\n\n    // If the filter param is not a value in our enum then we should return an error as well.\n    if ( ! in_array( $value, $args['enum'], true ) ) {\n        return new WP_Error( 'rest_invalid_param', sprintf( __( '%s is not one of %s' ), $param, implode( ', ', $args['enum'] ) ), array( 'status' => 400 ) );\n    }\n}\n\n/**\n * We can use this function to contain our arguments for the example product endpoint.\n */\nfunction prefix_get_color_arguments() {\n    $args = array();\n    // Here we are registering the schema for the filter argument.\n    $args['filter'] = array(\n        // description should be a human readable description of the argument.\n        'description' => esc_html__( 'The filter parameter is used to filter the collection of colors', 'my-text-domain' ),\n        // type specifies the type of data that the argument should be.\n        'type'        => 'string',\n        // enum specified what values filter can take on.\n        'enum'        => array( 'red', 'green', 'blue' ),\n        // Here we register the validation callback for the filter argument.\n        'validate_callback' => 'prefix_filter_arg_validate_callback',\n    );\n    return $args;\n}\n\n/**\n * This function is where we register our routes for our example endpoint.\n */\nfunction prefix_register_example_routes() {\n    // register_rest_route() handles more arguments but we are going to stick to the basics for now.\n    register_rest_route( 'my-colors/v1', '/colors', array(\n        // By using this constant we ensure that when the WP_REST_Server changes our readable endpoints will work as intended.\n        'methods'  => WP_REST_Server::READABLE,\n        // Here we register our callback. The callback is fired when this endpoint is matched by the WP_REST_Server class.\n        'callback' => 'prefix_get_colors',\n        // Here we register our permissions callback. The callback is fired before the main callback to check if the current user can access the endpoint.\n        'args' => prefix_get_color_arguments(),\n    ) );\n}\n\nadd_action( 'rest_api_init', 'prefix_register_example_routes' );\n```\n\n----------------------------------------\n\nTITLE: Implementing REST API Resource Linking in WordPress\nDESCRIPTION: Comprehensive example showing how to register REST API endpoints for posts and comments with HAL-compliant linking. Includes route registration, response preparation, and link generation for related resources with embedding support.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/responses-2/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Register our mock endpoints.\nfunction prefix_register_my_routes() {\n    register_rest_route( 'my-namespace/v1', '/posts/(?P<id>[\\d]+)', array(\n        // Supported methods for this endpoint. WP_REST_Server::READABLE translates to GET.\n        'methods' => WP_REST_Server::READABLE,\n        // Register the callback for the endpoint.\n        'callback' => 'prefix_get_rest_post',\n    ) );\n    register_rest_route( 'my-namespace/v1', '/comments', array(\n        // Supported methods for this endpoint. WP_REST_Server::READABLE translates to GET.\n        'methods' => WP_REST_Server::READABLE,\n        // Register the callback for the endpoint.\n        'callback' => 'prefix_get_rest_comments',\n        // Register the post argument to limit results to a specific post parent.\n        'args' => array(\n            'post' => array(\n                'description' => esc_html__( 'The post ID that the comment is assigned to.', 'my-textdomain' ),\n                'type'        => 'integer',\n                'required'    => true,\n            ),\n        ),\n    ) );\n    register_rest_route( 'my-namespace/v1', '/comments/(?P<id>[\\d]+)', array(\n        // Supported methods for this endpoint. WP_REST_Server::READABLE translates to GET.\n        'methods' => WP_REST_Server::READABLE,\n        // Register the callback for the endpoint.\n        'callback' => 'prefix_get_rest_comment',\n    ) );\n}\n\nadd_action( 'rest_api_init', 'prefix_register_my_routes' );\n\n// Grab a post.\nfunction prefix_get_rest_post( $request ) {\n    $id = (int) $request['id'];\n    $post = get_post( $id );\n\n    $response = rest_ensure_response( array( $post ) );\n\n    $response->add_links( prefix_prepare_post_links( $post ) );\n\n    return $response;\n}\n\n// Prepare post links.\nfunction prefix_prepare_post_links( $post ) {\n    $links = array();\n\n    $replies_url = rest_url( 'my-namespace/v1/comments' );\n    $replies_url = add_query_arg( 'post', $post->ID, $replies_url );\n    $links['replies'] = array(\n\t\t'href'         => $replies_url,\n\t\t'embeddable'   => true,\n    );\n\n    return $links;\n}\n\n// Grab a comments.\nfunction prefix_get_rest_comments( $request ) {\n    if ( ! isset( $request['post'] ) ) {\n        return new WP_Error( 'rest_bad_request', esc_html__( 'You must specify the post parameter for this request.', 'my-text-domain' ), array( 'status' => 400 ) );\n    }\n\n    $data = array();\n\n    $comments = get_comments( array( 'post__in' => $request['post'] ) );\n\n    if ( empty( $comments ) ) {\n        return array();\n    }\n\n    foreach( $comments as $comment ) {\n        $response = rest_ensure_response( $comment );\n        $response->add_links( prefix_prepare_comment_links( $comment ) );\n        $data[] = prefix_prepare_for_collection( $response );\n    }\n\n    $response = rest_ensure_response( $data );\n    return $response;\n}\n\n// Grab a comment.\nfunction prefix_get_rest_comment( $request ) {\n    $id = (int) $request['id'];\n    $post = get_comment( $id );\n\n    $response = rest_ensure_response( $comment );\n\n    $response->add_links( prefix_prepare_comment_links( $comment ) );\n\n    return $response;\n}\n\n// Prepare comment links.\nfunction prefix_prepare_comment_links( $comment ) {\n    $links = array();\n    if ( 0 !== (int) $comment->comment_post_ID ) {\n        $post = get_post( $comment->comment_post_ID );\n        if ( ! empty( $post->ID ) ) {\n        $links['up'] = array(\n                'href'       => rest_url( 'my-namespace/v1/posts/' . $comment->comment_post_ID ),\n                'embeddable' => true,\n                'post_type'  => $post->post_type,\n            );\n        }\n    }\n    return $links;\n}\n\n/**\n * Prepare a response for inserting into a collection of responses.\n *\n * This is lifted from WP_REST_Controller class in the WP REST API v2 plugin.\n *\n * @param WP_REST_Response $response Response object.\n * @return array Response data, ready for insertion into collection data.\n */\nfunction prefix_prepare_for_collection( $response ) {\n\tif ( ! ( $response instanceof WP_REST_Response ) ) {\n\t\treturn $response;\n\t}\n\n\t$data = (array) $response->get_data();\n\t$server = rest_get_server();\n\n\tif ( method_exists( $server, 'get_compact_response_links' ) ) {\n\t\t$links = call_user_func( array( $server, 'get_compact_response_links' ), $response );\n\t} else {\n\t\t$links = call_user_func( array( $server, 'get_response_links' ), $response );\n\t}\n\n\tif ( ! empty( $links ) ) {\n\t\t$data['_links'] = $links;\n\t}\n\n\treturn $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom 'Course' Taxonomy for WordPress Posts\nDESCRIPTION: This PHP code snippet demonstrates how to create a plugin that registers a custom 'Course' taxonomy for WordPress posts. It includes setting up labels, defining taxonomy arguments, and hooking the registration function to the 'init' action.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/taxonomies/working-with-custom-taxonomies/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/*\n * Plugin Name: Course Taxonomy\n * Description: A short example showing how to add a taxonomy called Course.\n * Version: 1.0\n * Author: developer.wordpress.org\n * Author URI: https://codex.wordpress.org/User:Aternus\n */\n\nfunction wporg_register_taxonomy_course() {\n  $labels = array(\n    'name'              => _x( 'Courses', 'taxonomy general name' ),\n    'singular_name'     => _x( 'Course', 'taxonomy singular name' ),\n    'search_items'      => __( 'Search Courses' ),\n    'all_items'         => __( 'All Courses' ),\n    'parent_item'       => __( 'Parent Course' ),\n    'parent_item_colon' => __( 'Parent Course:' ),\n    'edit_item'         => __( 'Edit Course' ),\n    'update_item'       => __( 'Update Course' ),\n    'add_new_item'      => __( 'Add New Course' ),\n    'new_item_name'     => __( 'New Course Name' ),\n    'menu_name'         => __( 'Course' ),\n  );\n  $args   = array(\n    'hierarchical'      => true, // make it hierarchical (like categories)\n    'labels'            => $labels,\n    'show_ui'           => true,\n    'show_admin_column' => true,\n    'query_var'         => true,\n    'rewrite'           => [ 'slug' => 'course' ],\n  );\n  register_taxonomy( 'course', [ 'post' ], $args );\n}\nadd_action( 'init', 'wporg_register_taxonomy_course' );\n```\n\n----------------------------------------\n\nTITLE: Managing Array-based WordPress Options\nDESCRIPTION: Shows how to store and retrieve multiple values as an array in WordPress options, including accessing individual array elements. This approach is more efficient for managing multiple related options.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/settings/options-api/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// array of options\n$data_r = array('title' => 'hello world!', 1, false );\n// add a new option\nadd_option('wporg_custom_option', $data_r);\n// get an option\n$options_r = get_option('wporg_custom_option');\n// output the title\necho esc_html($options_r['title']);\n```\n\n----------------------------------------\n\nTITLE: Saving Custom Meta Box Values in WordPress\nDESCRIPTION: This PHP function hooks into the save_post action to save the entered meta box values to the post meta table when a post is saved or updated.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/metadata/custom-meta-boxes/index.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_save_postdata( $post_id ) {\n  if ( array_key_exists( 'wporg_field', $_POST ) ) {\n    update_post_meta(\n      $post_id,\n      '_wporg_meta_key',\n      $_POST['wporg_field']\n    );\n  }\n}\nadd_action( 'save_post', 'wporg_save_postdata' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Personal Data Eraser Function in PHP for WordPress Plugin\nDESCRIPTION: This function removes stored location data from a user's comment meta for a given email address. It handles pagination to avoid timeouts and returns an array with information about the erasure process.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/privacy/adding-the-personal-data-eraser-to-your-plugin/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Removes any stored location data from a user's comment meta for the supplied email address.\n *\n * @param string $email_address   email address to manipulate\n * @param int    $page            pagination\n *\n * @return array\n */\nfunction wporg_remove_location_meta_from_comments_for_email( $email_address, $page = 1 ) {\n  $number = 500; // Limit us to avoid timing out\n  $page   = (int) $page;\n\n  $comments = get_comments(\n    array(\n      'author_email' => $email_address,\n      'number'       => $number,\n      'paged'        => $page,\n      'order_by'     => 'comment_ID',\n      'order'        => 'ASC',\n    )\n  );\n\n  $items_removed = false;\n\n  foreach ( (array) $comments as $comment ) {\n    $latitude  = get_comment_meta( $comment->comment_ID, 'latitude', true );\n    $longitude = get_comment_meta( $comment->comment_ID, 'longitude', true );\n\n    if ( ! empty( $latitude ) ) {\n      delete_comment_meta( $comment->comment_ID, 'latitude' );\n      $items_removed = true;\n    }\n\n    if ( ! empty( $longitude ) ) {\n      delete_comment_meta( $comment->comment_ID, 'longitude' );\n      $items_removed = true;\n    }\n  }\n\n  // Tell core if we have more comments to work on still\n  $done = count( $comments ) < $number;\n  return array(\n    'items_removed'  => $items_removed,\n    'items_retained' => false, // always false in this example\n    'messages'       => array(), // no messages in this example\n    'done'           => $done,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Anonymizing Personal Data in WordPress\nDESCRIPTION: This code snippet shows the usage of wp_privacy_anonymize_data() function, which can be used to minimize personal data in logs or other areas where full information is not necessary.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/privacy/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nwp_privacy_anonymize_data()\n```\n\n----------------------------------------\n\nTITLE: Adding a Top-Level Menu in WordPress Admin (PHP)\nDESCRIPTION: This snippet demonstrates how to add a new top-level menu called 'WPOrg' to the WordPress admin panel. It includes creating an HTML output function and registering the menu using add_menu_page().\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/administration-menus/top-level-menus/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_options_page_html() {\n?>\n  <div class=\"wrap\">\n    <h1><?php echo esc_html( get_admin_page_title() ); ?></h1>\n    <form action=\"options.php\" method=\"post\">\n      <?php\n      // output security fields for the registered setting \"wporg_options\"\n      settings_fields( 'wporg_options' );\n      // output setting sections and their fields\n      // (sections are registered for \"wporg\", each field is registered to a specific section)\n      do_settings_sections( 'wporg' );\n      // output save settings button\n      submit_button( __( 'Save Settings', 'textdomain' ) );\n      ?>\n    </form>\n  </div>\n<?php\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\nadd_action( 'admin_menu', 'wporg_options_page' );\nfunction wporg_options_page() {\n  add_menu_page(\n    'WPOrg',\n    'WPOrg Options',\n    'manage_options',\n    'wporg',\n    'wporg_options_page_html',\n    plugin_dir_url(__FILE__) . 'images/icon_wporg.png',\n    20\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Single Value WordPress Options\nDESCRIPTION: Demonstrates how to add and retrieve a single value option in WordPress using add_option() and get_option() functions.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/settings/options-api/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// add a new option\nadd_option('wporg_custom_option', 'hello world!');\n// get an option\n$option = get_option('wporg_custom_option');\n```\n\n----------------------------------------\n\nTITLE: Adding a Sub-Menu to WordPress Admin using add_submenu_page()\nDESCRIPTION: This snippet shows the basic structure of the add_submenu_page() function used to add a new sub-menu to WordPress administration. It includes parameters for parent slug, page title, menu title, capability, menu slug, and callback function.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/administration-menus/sub-menus/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nadd_submenu_page(\n  string $parent_slug,\n  string $page_title,\n  string $menu_title,\n  string $capability,\n  string $menu_slug,\n  callable $function = ''\n);\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Requests with jQuery in WordPress Plugin (JavaScript)\nDESCRIPTION: This jQuery code snippet shows how to handle AJAX requests on the client-side in a WordPress plugin. It listens for changes on elements with the 'pref' class, sends AJAX requests to update user preferences, and dynamically updates the DOM with the server response.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/summary/index.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\njQuery(document).ready(function($) { \t   //wrapper\n  $(\".pref\").change(function() { \t\t   //event\n    var this2 = this; \t\t           //use in callback\n    $.post(my_ajax_obj.ajax_url, { \t   //POST request\n      _ajax_nonce: my_ajax_obj.nonce, //nonce\n      action: \"my_tag_count\",        //action\n      title: this.value \t           //data\n    }, function(data) {\t\t           //callback\n      this2.nextSibling.remove();    //remove the current title\n      $(this2).after(data); \t       //insert server response\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing WordPress Settings API\nDESCRIPTION: Comprehensive example demonstrating how to register a setting, add a section, and add a field to the 'reading' page. Includes callback functions for rendering the section and field.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/settings/using-settings-api/index.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_settings_init() {\n  // register a new setting for \"reading\" page\n  register_setting('reading', 'wporg_setting_name');\n\n  // register a new section in the \"reading\" page\n  add_settings_section(\n    'wporg_settings_section',\n    'WPOrg Settings Section', 'wporg_settings_section_callback',\n    'reading'\n  );\n\n  // register a new field in the \"wporg_settings_section\" section, inside the \"reading\" page\n  add_settings_field(\n    'wporg_settings_field',\n    'WPOrg Setting', 'wporg_settings_field_callback',\n    'reading',\n    'wporg_settings_section'\n  );\n}\n\n/**\n * register wporg_settings_init to the admin_init action hook\n */\nadd_action('admin_init', 'wporg_settings_init');\n\n/**\n * callback functions\n */\n\n// section content cb\nfunction wporg_settings_section_callback() {\n  echo '<p>WPOrg Section Introduction.</p>';\n}\n\n// field content cb\nfunction wporg_settings_field_callback() {\n  // get the value of the setting we've registered with register_setting()\n  $setting = get_option('wporg_setting_name');\n  // output the field\n  ?>\n  <input type=\"text\" name=\"wporg_setting_name\" value=\"<?php echo isset( $setting ) ? esc_attr( $setting ) : ''; ?>\">\n  <?php\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Birthday Field to WordPress User Profile\nDESCRIPTION: Complete example of adding a birthday field to WordPress user profile pages, including form rendering and data saving functionality. Uses show_user_profile and edit_user_profile hooks to display the field and personal_options_update and edit_user_profile_update hooks to save the data.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/users/working-with-user-metadata/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * The field on the editing screens.\n *\n * @param $user WP_User user object\n */\nfunction wporg_usermeta_form_field_birthday( $user ) {\n  ?>\n  <h3>It's Your Birthday</h3>\n  <table class=\"form-table\">\n    <tr>\n      <th>\n        <label for=\"birthday\">Birthday</label>\n      </th>\n      <td>\n        <input type=\"date\"\n          class=\"regular-text ltr\"\n          id=\"birthday\"\n          name=\"birthday\"\n          value=\"<?= esc_attr( get_user_meta( $user->ID, 'birthday', true ) ) ?>\"\n          title=\"Please use YYYY-MM-DD as the date format.\"\n          pattern=\"(19[0-9][0-9]|20[0-9][0-9])-(1[0-2]|0[1-9])-(3[01]|[21][0-9]|0[1-9])\"\n          required>\n        <p class=\"description\">\n          Please enter your birthday date.\n        </p>\n      </td>\n    </tr>\n  </table>\n  <?php\n}\n\n/**\n * The save action.\n *\n * @param $user_id int the ID of the current user.\n *\n * @return bool Meta ID if the key didn't exist, true on successful update, false on failure.\n */\nfunction wporg_usermeta_form_field_birthday_update( $user_id ) {\n  // check that the current user have the capability to edit the $user_id\n  if ( ! current_user_can( 'edit_user', $user_id ) ) {\n    return false;\n  }\n\n  // create/update user meta for the $user_id\n  return update_user_meta(\n    $user_id,\n    'birthday',\n    $_POST['birthday']\n  );\n}\n\n// Add the field to user's own profile editing screen.\nadd_action(\n  'show_user_profile',\n  'wporg_usermeta_form_field_birthday'\n);\n\n// Add the field to user profile editing screen.\nadd_action(\n  'edit_user_profile',\n  'wporg_usermeta_form_field_birthday'\n);\n\n// Add the save action to user's own profile editing screen update.\nadd_action(\n  'personal_options_update',\n  'wporg_usermeta_form_field_birthday_update'\n);\n\n// Add the save action to user profile editing screen update.\nadd_action(\n  'edit_user_profile_update',\n  'wporg_usermeta_form_field_birthday_update'\n);\n```\n\n----------------------------------------\n\nTITLE: HTTP Methods for WordPress REST API\nDESCRIPTION: Core HTTP methods used in WordPress REST API for different operations. These methods define how to interact with WordPress resources through the API.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nGET - should be used for retrieving data from the API.\nPOST - should be used for creating new resources (i.e users, posts, taxonomies).\nPUT - should be used for updating resources.\nDELETE - should be used for deleting resources.\nOPTIONS - should be used to provide context about our resources.\n```\n\n----------------------------------------\n\nTITLE: Complete AJAX Handler Using JSON in WordPress\nDESCRIPTION: This is a complete example of an AJAX handler in WordPress that uses JSON for the response. It includes nonce verification, data processing, and sending a JSON response.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/enqueuing/index.md#2025-04-21_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * AJAX handler using JSON\n */\nfunction my_ajax_handler__json() {\n  check_ajax_referer( 'title_example' );\n  $title = wp_unslash( $_POST['title'] );\n\n  update_user_meta( get_current_user_id(), 'title_preference', sanitize_post_title( $title ) );\n\n  $args      = array(\n    'tag' => $title,\n  );\n  $the_query = new WP_Query( $args );\n  wp_send_json( esc_html( $title ) . ' (' . $the_query->post_count . ') ' );\n}\n```\n\n----------------------------------------\n\nTITLE: WordPress Nonce Verification with Sanitization\nDESCRIPTION: Demonstrates proper nonce verification with required sanitization using wp_unslash and sanitize_text_field functions.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/common-issues/index.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif ( ! isset( $_POST['prefix_nonce'] ) || ! wp_verify_nonce( sanitize_text_field( wp_unslash ( $_POST['prefix_nonce'] ) ) , 'prefix_nonce' ) )\n```\n\n----------------------------------------\n\nTITLE: Implementing REST API Endpoint with Arguments in WordPress\nDESCRIPTION: Shows how to create a REST API endpoint that accepts and validates arguments. Includes implementation of argument schema definition and filtering functionality based on query parameters.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/routes-endpoints/index.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * This is our callback function that embeds our resource in a WP_REST_Response\n */\nfunction prefix_get_colors( $request ) {\n    // In practice this function would fetch the desired data. Here we are just making stuff up.\n    $colors = array(\n        'blue',\n        'blue',\n        'red',\n        'red',\n        'green',\n        'green',\n    );\n\n    if ( isset( $request['filter'] ) ) {\n       $filtered_colors = array();\n       foreach ( $colors as $color ) {\n           if ( $request['filter'] === $color ) {\n               $filtered_colors[] = $color;\n           }\n       }\n       return rest_ensure_response( $filtered_colors );\n    }\n    return rest_ensure_response( $colors );\n}\n\n/**\n * We can use this function to contain our arguments for the example product endpoint.\n */\nfunction prefix_get_color_arguments() {\n    $args = array();\n    // Here we are registering the schema for the filter argument.\n    $args['filter'] = array(\n        // description should be a human readable description of the argument.\n        'description' => esc_html__( 'The filter parameter is used to filter the collection of colors', 'my-text-domain' ),\n        // type specifies the type of data that the argument should be.\n        'type'        => 'string',\n        // enum specified what values filter can take on.\n        'enum'        => array( 'red', 'green', 'blue' ),\n    );\n    return $args;\n}\n\n/**\n * This function is where we register our routes for our example endpoint.\n */\nfunction prefix_register_example_routes() {\n    // register_rest_route() handles more arguments but we are going to stick to the basics for now.\n    register_rest_route( 'my-colors/v1', '/colors', array(\n        // By using this constant we ensure that when the WP_REST_Server changes our readable endpoints will work as intended.\n        'methods'  => WP_REST_Server::READABLE,\n        // Here we register our callback. The callback is fired when this endpoint is matched by the WP_REST_Server class.\n        'callback' => 'prefix_get_colors',\n        // Here we register our permissions callback. The callback is fired before the main callback to check if the current user can access the endpoint.\n        'args' => prefix_get_color_arguments(),\n    ) );\n}\n\nadd_action( 'rest_api_init', 'prefix_register_example_routes' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Meta Boxes Using OOP in WordPress\nDESCRIPTION: This PHP class demonstrates an object-oriented approach to implementing custom meta boxes, including methods for adding, saving, and displaying the meta box.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/metadata/custom-meta-boxes/index.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nabstract class WPOrg_Meta_Box {\n\n  /**\n   * Set up and add the meta box.\n   */\n  public static function add() {\n    $screens = [ 'post', 'wporg_cpt' ];\n    foreach ( $screens as $screen ) {\n      add_meta_box(\n        'wporg_box_id',          // Unique ID\n        'Custom Meta Box Title', // Box title\n        [ self::class, 'html' ],   // Content callback, must be of type callable\n        $screen                  // Post type\n      );\n    }\n  }\n\n  /**\n   * Save the meta box selections.\n   *\n   * @param int $post_id  The post ID.\n   */\n  public static function save( int $post_id ) {\n    if ( array_key_exists( 'wporg_field', $_POST ) ) {\n      update_post_meta(\n        $post_id,\n        '_wporg_meta_key',\n        $_POST['wporg_field']\n      );\n    }\n  }\n\n  /**\n   * Display the meta box HTML to the user.\n   *\n   * @param WP_Post $post   Post object.\n   */\n  public static function html( $post ) {\n    $value = get_post_meta( $post->ID, '_wporg_meta_key', true );\n    ?>\n    <label for=\"wporg_field\">Description for this field</label>\n    <select name=\"wporg_field\" id=\"wporg_field\" class=\"postbox\">\n      <option value=\"\">Select something...</option>\n      <option value=\"something\" <?php selected( $value, 'something' ); ?>>Something</option>\n      <option value=\"else\" <?php selected( $value, 'else' ); ?>>Else</option>\n    </select>\n    <?php\n  }\n}\n\nadd_action( 'add_meta_boxes', [ 'WPOrg_Meta_Box', 'add' ] );\nadd_action( 'save_post', [ 'WPOrg_Meta_Box', 'save' ] );\n```\n\n----------------------------------------\n\nTITLE: Implementing Personal Data Export Callback Function in WordPress Plugins\nDESCRIPTION: This function exports user's location data stored in comment meta by retrieving comments associated with the user's email address and extracting latitude and longitude data. It supports pagination to avoid timeouts when handling large datasets and formats the data according to WordPress's personal data export requirements.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/privacy/adding-the-personal-data-exporter-to-your-plugin/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Export user meta for a user using the supplied email.\n *\n * @param string $email_address   email address to manipulate\n * @param int    $page            pagination\n *\n * @return array\n */\nfunction wporg_export_user_data_by_email( $email_address, $page = 1 ) {\n  $number = 500; // Limit us to avoid timing out\n  $page   = (int) $page;\n\n  $export_items = array();\n\n  $comments = get_comments(\n    array(\n      'author_email' => $email_address,\n      'number'       => $number,\n      'paged'        => $page,\n      'order_by'     => 'comment_ID',\n      'order'        => 'ASC',\n    )\n  );\n\n  foreach ( (array) $comments as $comment ) {\n    $latitude  = get_comment_meta( $comment->comment_ID, 'latitude', true );\n    $longitude = get_comment_meta( $comment->comment_ID, 'longitude', true );\n\n    // Only add location data to the export if it is not empty.\n    if ( ! empty( $latitude ) ) {\n      // Most item IDs should look like postType-postID. If you don't have a post, comment or other ID to work with,\n      // use a unique value to avoid having this item's export combined in the final report with other items\n      // of the same id.\n      $item_id = \"comment-{$comment->comment_ID}\";\n\n      // Core group IDs include 'comments', 'posts', etc. But you can add your own group IDs as needed\n      $group_id = 'comments';\n\n      // Optional group label. Core provides these for core groups. If you define your own group, the first\n      // exporter to include a label will be used as the group label in the final exported report.\n      $group_label = __( 'Comments', 'text-domain' );\n\n      // Plugins can add as many items in the item data array as they want.\n      $data = array(\n        array(\n          'name'  => __( 'Commenter Latitude', 'text-domain' ),\n          'value' => $latitude,\n        ),\n        array(\n          'name'  => __( 'Commenter Longitude', 'text-domain' ),\n          'value' => $longitude,\n        ),\n      );\n\n      $export_items[] = array(\n        'group_id'    => $group_id,\n        'group_label' => $group_label,\n        'item_id'     => $item_id,\n        'data'        => $data,\n      );\n    }\n  }\n\n  // Tell core if we have more comments to work on still.\n  $done = count( $comments ) > $number;\n  return array(\n    'data' => $export_items,\n    'done' => $done,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Privacy Policy Content in WordPress Plugins (PHP)\nDESCRIPTION: This PHP function demonstrates how to add suggested privacy policy content for a WordPress plugin. It uses wp_add_privacy_policy_content() to provide both tutorial text and suggested policy text, including proper formatting and internationalization.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/privacy/suggesting-text-for-the-site-privacy-policy/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Adds a privacy policy statement.\n */\nfunction wporg_add_privacy_policy_content() {\n  if ( ! function_exists( 'wp_add_privacy_policy_content' ) ) {\n    return;\n  }\n  $content = '<p class=\"privacy-policy-tutorial\">' . __( 'Some introductory content for the suggested text.', 'text-domain' ) . '</p>'\n  . '<strong class=\"privacy-policy-tutorial\">' . __( 'Suggested Text:', 'my_plugin_textdomain' ) . '</strong> '\n  . sprintf(\n    __( 'When you leave a comment on this site, we send your name, email address, IP address and comment text to example.com. Example.com does not retain your personal data. The example.com privacy policy is <a href=\"%1$s\" target=\"_blank\">here</a>.', 'text-domain' ),\n    'https://example.com/privacy-policy'\n  );\n  wp_add_privacy_policy_content( 'Example Plugin', wp_kses_post( wpautop( $content, false ) ) );\n}\n\nadd_action( 'admin_init', 'wporg_add_privacy_policy_content' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Sanitization for WordPress REST API Endpoint Arguments\nDESCRIPTION: This snippet shows how to implement a sanitization callback for the 'data' argument in a WordPress REST API endpoint. It includes the main callback function, validation function, sanitization function, argument registration, and route registration.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/routes-endpoints/index.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * This is our callback function that embeds our resource in a WP_REST_Response.\n *\n * The parameter is already sanitized by this point so we can use it without any worries.\n */\nfunction prefix_get_item( $request ) {\n    if ( isset( $request['data'] ) ) {\n        return rest_ensure_response( $request['data'] );\n    }\n\n    return new WP_Error( 'rest_invalid', esc_html__( 'The data parameter is required.', 'my-text-domain' ), array( 'status' => 400 ) );\n}\n\n/**\n * Validate a request argument based on details registered to the route.\n *\n * @param  mixed            $value   Value of the 'filter' argument.\n * @param  WP_REST_Request  $request The current request object.\n * @param  string           $param   Key of the parameter. In this case it is 'filter'.\n * @return WP_Error|boolean\n */\nfunction prefix_data_arg_validate_callback( $value, $request, $param ) {\n    // If the 'data' argument is not a string return an error.\n    if ( ! is_string( $value ) ) {\n        return new WP_Error( 'rest_invalid_param', esc_html__( 'The filter argument must be a string.', 'my-text-domain' ), array( 'status' => 400 ) );\n    }\n}\n\n/**\n * Sanitize a request argument based on details registered to the route.\n *\n * @param  mixed            $value   Value of the 'filter' argument.\n * @param  WP_REST_Request  $request The current request object.\n * @param  string           $param   Key of the parameter. In this case it is 'filter'.\n * @return WP_Error|boolean\n */\nfunction prefix_data_arg_sanitize_callback( $value, $request, $param ) {\n    // It is as simple as returning the sanitized value.\n    return sanitize_text_field( $value );\n}\n\n/**\n * We can use this function to contain our arguments for the example product endpoint.\n */\nfunction prefix_get_data_arguments() {\n    $args = array();\n    // Here we are registering the schema for the filter argument.\n    $args['data'] = array(\n        // description should be a human readable description of the argument.\n        'description' => esc_html__( 'The data parameter is used to be sanitized and returned in the response.', 'my-text-domain' ),\n        // type specifies the type of data that the argument should be.\n        'type'        => 'string',\n        // Set the argument to be required for the endpoint.\n        'required'    => true,\n        // We are registering a basic validation callback for the data argument.\n        'validate_callback' => 'prefix_data_arg_validate_callback',\n        // Here we register the validation callback for the filter argument.\n        'sanitize_callback' => 'prefix_data_arg_sanitize_callback',\n    );\n    return $args;\n}\n\n/**\n * This function is where we register our routes for our example endpoint.\n */\nfunction prefix_register_example_routes() {\n    // register_rest_route() handles more arguments but we are going to stick to the basics for now.\n    register_rest_route( 'my-plugin/v1', '/sanitized-data', array(\n        // By using this constant we ensure that when the WP_REST_Server changes our readable endpoints will work as intended.\n        'methods'  => WP_REST_Server::READABLE,\n        // Here we register our callback. The callback is fired when this endpoint is matched by the WP_REST_Server class.\n        'callback' => 'prefix_get_item',\n        // Here we register our permissions callback. The callback is fired before the main callback to check if the current user can access the endpoint.\n        'args' => prefix_get_data_arguments(),\n    ) );\n}\n\nadd_action( 'rest_api_init', 'prefix_register_example_routes' );\n```\n\n----------------------------------------\n\nTITLE: Processing Form Submissions for Custom Admin Page in WordPress (PHP)\nDESCRIPTION: This example demonstrates how to set up a function to process form submissions on a custom admin page, using the 'load-$hookname' action hook returned by add_menu_page().\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/administration-menus/top-level-menus/index.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nadd_action( 'admin_menu', 'wporg_options_page' );\nfunction wporg_options_page() {\n  $hookname = add_menu_page(\n    'WPOrg',\n    'WPOrg Options',\n    'manage_options',\n    'wporg',\n    'wporg_options_page_html',\n    plugin_dir_url(__FILE__) . 'images/icon_wporg.png',\n    20\n  );\n\n  add_action( 'load-' . $hookname, 'wporg_options_page_submit' );\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in WordPress REST API Endpoints\nDESCRIPTION: Shows how to create a custom REST API endpoint that returns a WP_Error object to handle error cases. This example demonstrates registering a route that intentionally returns an error response, including setting a custom error code, message, and HTTP status code.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/responses-2/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Register our mock batch endpoint.\nfunction prefix_register_broken_route() {\n    register_rest_route( 'my-namespace/v1', '/broken', array(\n        // Supported methods for this endpoint. WP_REST_Server::READABLE translates to GET.\n        'methods' => WP_REST_Server::READABLE,\n        // Register the callback for the endpoint.\n        'callback' => 'prefix_get_an_error',\n    ) );\n}\n\nadd_action( 'rest_api_init', 'prefix_register_broken_route' );\n\n/**\n * Our registered endpoint callback. Notice how we are passing in $request as an argument.\n * By default, the WP_REST_Server will pass in the matched request object to our callback.\n *\n * @param WP_REST_Request $request The current matched request object.\n */\nfunction prefix_get_an_error( $request ) {\n    return new WP_Error( 'oops', esc_html__( 'This endpoint is currently broken, try another endpoint, I promise the API is cool! EEEK!!!!', 'my-textdomain' ), array( 'status' => 400 ) );\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Encoding in WordPress\nDESCRIPTION: Shows proper usage of WordPress JSON encoding function for secure data output.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/common-issues/index.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\necho wp_json_encode($array_or_object);\n```\n\n----------------------------------------\n\nTITLE: Adding Capabilities to Existing Role\nDESCRIPTION: Demonstrates how to add new capabilities to an existing role using get_role() and add_cap(). The example adds the 'edit_others_posts' capability to 'simple_role'.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/users/roles-and-capabilities/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_simple_role_caps() {\n  // Gets the simple_role role object.\n  $role = get_role( 'simple_role' );\n\n  // Add a new capability.\n  $role->add_cap( 'edit_others_posts', true );\n}\n\n// Add simple_role capabilities, priority must be after the initial role definition.\nadd_action( 'init', 'wporg_simple_role_caps', 11 );\n```\n\n----------------------------------------\n\nTITLE: Verifying Nonce in WordPress AJAX Handler\nDESCRIPTION: This code snippet shows how to verify a nonce in a WordPress AJAX handler for security purposes using the check_ajax_referer() function.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/enqueuing/index.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\ncheck_ajax_referer( 'title_example' );\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Formatting Comments for REST API Response\nDESCRIPTION: This function retrieves the five most recent comments and formats them according to the defined schema for a REST API response.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/schema/index.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction prefix_get_comment_sample( $request ) {\n\t$args = array(\n\t\t'post_per_page' => 5,\n\t);\n\t$comments = get_comments( $args );\n\n\t$data = array();\n\n\tif ( empty( $comments ) ) {\n\t\treturn rest_ensure_response( $data );\n\t}\n\n\tforeach ( $comments as $comment ) {\n\t\t$response = prefix_rest_prepare_comment( $comment, $request );\n\t\t$data[] = prefix_prepare_for_collection( $response );\n\t}\n\n\t// Return all of our comment response data.\n\treturn rest_ensure_response( $data );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Comprehensive WordPress Plugin Header in PHP\nDESCRIPTION: Illustrates a complete plugin header comment with all available fields, including Plugin Name, URI, Description, Version, Requirements, Author information, License details, and Internationalization settings.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/header-requirements/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n/*\n * Plugin Name:       My Basics Plugin\n * Plugin URI:        https://example.com/plugins/the-basics/\n * Description:       Handle the basics with this plugin.\n * Version:           1.10.3\n * Requires at least: 5.2\n * Requires PHP:      7.2\n * Author:            John Smith\n * Author URI:        https://author.example.com/\n * License:           GPL v2 or later\n * License URI:       https://www.gnu.org/licenses/gpl-2.0.html\n * Text Domain:       my-basics-plugin\n * Domain Path:       /languages\n */\n```\n\n----------------------------------------\n\nTITLE: Registering WordPress Plugin Uninstall Hook\nDESCRIPTION: Example of using register_uninstall_hook() to set up a function that runs during plugin uninstallation. This method registers a callback function to handle cleanup when the plugin is deleted.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/uninstall-methods/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nregister_uninstall_hook(\n  __FILE__,\n  'pluginprefix_function_to_run'\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving HTTP Response Code in PHP\nDESCRIPTION: Shows how to use wp_remote_retrieve_response_code() to get the HTTP status code from a response. This is useful for checking if a request was successful before processing the response.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/http-api/index.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$response = wp_remote_get( 'https://api.github.com/users/blobaugh' );\n$http_code = wp_remote_retrieve_response_code( $response );\n```\n\n----------------------------------------\n\nTITLE: AJAX Request Data Structure\nDESCRIPTION: Demonstrates the structure of data object sent with jQuery AJAX request, including nonce for security, action identifier, and custom data.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/ajax/index.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  _ajax_nonce: my_ajax_obj.nonce, // nonce\n  action: \"my_tag_count\", // action\n  title: this.value // data\n}\n```\n\n----------------------------------------\n\nTITLE: Complete AJAX Handler Not Using JSON in WordPress\nDESCRIPTION: This is a complete example of an AJAX handler in WordPress that doesn't use JSON for the response. It includes nonce verification, data processing, and sending a raw HTML response.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/enqueuing/index.md#2025-04-21_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * AJAX handler not using JSON.\n */\nfunction my_ajax_handler() {\n  check_ajax_referer( 'title_example' );\n  $title = wp_unslash( $_POST['title'] );\n\n  update_user_meta( get_current_user_id(), 'title_preference', sanitize_post_title( $title ) );\n\n  $args      = array(\n    'tag' => $title,\n  );\n  $the_query = new WP_Query( $args );\n  echo esc_html( $title ) . ' (' . $the_query->post_count . ') ';\n  wp_die(); // All ajax handlers should die when finished\n}\n```\n\n----------------------------------------\n\nTITLE: AJAX Data Value Assignment\nDESCRIPTION: Shows how to include custom data in the AJAX request, using the value from a form element.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/ajax/index.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ntitle: this.value\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Classes to Body Tag with a Filter in WordPress\nDESCRIPTION: This example shows how to add a CSS class to the <body> tag using the 'body_class' filter. It checks if the current page is not an admin page before adding the class.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/hooks/filters/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_css_body_class( $classes ) {\n  if ( ! is_admin() ) {\n    $classes[] = 'wporg-is-awesome';\n  }\n  return $classes;\n}\nadd_filter( 'body_class', 'wporg_css_body_class' );\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Recurring WP Cron Event in PHP\nDESCRIPTION: This code demonstrates how to schedule a recurring WP Cron event using wp_schedule_event(). It sets the event to run every five seconds using a custom interval.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/cron/scheduling-wp-cron-events/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nwp_schedule_event( time(), 'five_seconds', 'bl_cron_hook' );\n```\n\n----------------------------------------\n\nTITLE: WordPress Custom Post Type Registration with Activation Hook\nDESCRIPTION: Example of registering a custom post type 'book' and implementing an activation hook to refresh permalinks. This prevents 404 errors when the plugin is activated.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/activation-deactivation-hooks/index.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Register the \"book\" custom post type\n */\nfunction pluginprefix_setup_post_type() {\n  register_post_type( 'book', ['public' => true ] ); \n} \nadd_action( 'init', 'pluginprefix_setup_post_type' );\n\n/**\n * Activate the plugin.\n */\nfunction pluginprefix_activate() { \n  // Trigger our function that registers the custom post type plugin.\n  pluginprefix_setup_post_type(); \n  // Clear the permalinks after the post type has been registered.\n  flush_rewrite_rules(); \n}\nregister_activation_hook( __FILE__, 'pluginprefix_activate' );\n```\n\n----------------------------------------\n\nTITLE: Multiple Endpoints on Single WordPress REST API Route\nDESCRIPTION: Shows how to register multiple endpoints (GET and POST) on a single route for product management. Demonstrates handling different HTTP methods with separate callbacks.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/routes-endpoints/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * This is our callback function to return our products.\n *\n * @param WP_REST_Request $request This function accepts a rest request to process data.\n */\nfunction prefix_get_products( $request ) {\n    // In practice this function would fetch the desired data. Here we are just making stuff up.\n    $products = array(\n        '1' => 'I am product 1',\n        '2' => 'I am product 2',\n        '3' => 'I am product 3',\n    );\n\n    return rest_ensure_response( $products );\n}\n\n/**\n * This is our callback function to return a single product.\n *\n * @param WP_REST_Request $request This function accepts a rest request to process data.\n */\nfunction prefix_create_product( $request ) {\n    // In practice this function would create a product. Here we are just making stuff up.\n   return rest_ensure_response( 'Product has been created' );\n}\n\n/**\n * This function is where we register our routes for our example endpoint.\n */\nfunction prefix_register_product_routes() {\n    // Here we are registering our route for a collection of products and creation of products.\n    register_rest_route( 'my-shop/v1', '/products', array(\n        array(\n            // By using this constant we ensure that when the WP_REST_Server changes, our readable endpoints will work as intended.\n            'methods'  => WP_REST_Server::READABLE,\n            // Here we register our callback. The callback is fired when this endpoint is matched by the WP_REST_Server class.\n            'callback' => 'prefix_get_products',\n        ),\n        array(\n            // By using this constant we ensure that when the WP_REST_Server changes, our create endpoints will work as intended.\n            'methods'  => WP_REST_Server::CREATABLE,\n            // Here we register our callback. The callback is fired when this endpoint is matched by the WP_REST_Server class.\n            'callback' => 'prefix_create_product',\n        ),\n    ) );\n}\n\nadd_action( 'rest_api_init', 'prefix_register_product_routes' );\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic Action in WordPress\nDESCRIPTION: Demonstrates how to create a callback function and hook it to the 'init' action using add_action(). This is the simplest form of adding an action in WordPress.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/hooks/actions/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_callback() {\n  // do something\n}\nadd_action( 'init', 'wporg_callback' );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Headers with WordPress HTTP API\nDESCRIPTION: Demonstrates how to retrieve specific headers from an HTTP response using wp_remote_get() and wp_remote_retrieve_header().\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/http-api/index.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$response      = wp_remote_get( 'https://api.github.com/users/blobaugh' );\n$last_modified = wp_remote_retrieve_header( $response, 'last-modified' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Hook Callback\nDESCRIPTION: Demonstrates how to add a filter callback that modifies custom post type parameters. Shows proper handling of filter input and return values.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/hooks/custom-hooks/index.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction myprefix_change_post_type_params( $post_type_params ) {\n  $post_type_params['hierarchical'] = true;\n  return $post_type_params;\n}\nadd_filter( 'wporg_post_type_params', 'myprefix_change_post_type_params' );\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX Request Handler for WordPress Meta Box in JavaScript\nDESCRIPTION: This JavaScript code sets up an event listener for changes to a form field, then sends an AJAX POST request to WordPress. It handles the response to perform success or failure logic based on the server's response.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/metadata/custom-meta-boxes/index.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*jslint browser: true, plusplus: true */\n(function ($, window, document) {\n  'use strict';\n  // execute when the DOM is ready\n  $(document).ready(function () {\n    // js 'change' event triggered on the wporg_field form field\n    $('#wporg_field').on('change', function () {\n      // jQuery post method, a shorthand for $.ajax with POST\n      $.post(wporg_meta_box_obj.url,                        // or ajaxurl\n        {\n          action: 'wporg_ajax_change',                // POST data, action\n          wporg_field_value: $('#wporg_field').val(), // POST data, wporg_field_value\n          post_ID: jQuery('#post_ID').val()           // The ID of the post currently being edited\n        }, function (data) {\n          // handle response data\n          if (data === 'success') {\n            // perform our success logic\n          } else if (data === 'failure') {\n            // perform our failure logic\n          } else {\n            // do nothing\n          }\n        }\n      );\n    });\n  });\n}(jQuery, window, document));\n```\n\n----------------------------------------\n\nTITLE: Processing Heartbeat Data on Server in PHP\nDESCRIPTION: This PHP function shows how to receive and process Heartbeat data on the server side. It demonstrates filtering the 'heartbeat_received' hook, checking for custom data, and adding a response to be sent back to the frontend.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/heartbeat-api/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction myplugin_receive_heartbeat( array $response, array $data ) {\n  // If we didn't receive our data, don't send any back.\n  if ( empty( $data['myplugin_customfield'] ) ) {\n    return $response;\n  }\n\n  // Calculate our data and pass it back. For this example, we'll hash it.\n  $received_data = $data['myplugin_customfield'];\n\n  $response['myplugin_customfield_hashed'] = sha1( $received_data );\n  return $response;\n}\nadd_filter( 'heartbeat_received', 'myplugin_receive_heartbeat', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Sending Data to Server with Heartbeat API in JavaScript\nDESCRIPTION: This snippet demonstrates how to add custom data to the Heartbeat API's send event in JavaScript. It shows how to attach additional fields to the data being sent to the server.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/heartbeat-api/index.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\njQuery( document ).on( 'heartbeat-send', function ( event, data ) {\n  // Add additional data to Heartbeat data.\n  data.myplugin_customfield = 'some_data';\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Hook for WP Cron in PHP\nDESCRIPTION: This snippet demonstrates how to add a custom hook for WP Cron using the add_action function. It creates a hook named 'bl_cron_hook' and associates it with the 'bl_cron_exec' function.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/cron/scheduling-wp-cron-events/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nadd_action( 'bl_cron_hook', 'bl_cron_exec' );\n```\n\n----------------------------------------\n\nTITLE: Processing POST Data in WordPress AJAX Handler\nDESCRIPTION: This snippet demonstrates how to safely retrieve and process POST data in a WordPress AJAX handler, including unslashing and sanitizing the input.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/enqueuing/index.md#2025-04-21_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$title = wp_unslash( $_POST['title'] );\n\nupdate_user_meta( get_current_user_id(), 'title_preference', sanitize_post_title( $title ) );\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Comment Route with Schema in WordPress\nDESCRIPTION: This PHP code demonstrates how to register a custom REST API route for comments, including the implementation of a schema callback function.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/schema/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Register our routes.\nfunction prefix_register_my_comment_route() {\n\tregister_rest_route( 'my-namespace/v1', '/comments', array(\n\t\t// Notice how we are registering multiple endpoints the 'schema' equates to an OPTIONS request.\n\t\tarray(\n\t\t\t'methods'  => 'GET',\n\t\t\t'callback' => 'prefix_get_comment_sample',\n\t\t),\n\t\t// Register our schema callback.\n\t\t'schema' => 'prefix_get_comment_schema',\n\t) );\n}\n\nadd_action( 'rest_api_init', 'prefix_register_my_comment_route' );\n```\n\n----------------------------------------\n\nTITLE: Inserting a New WordPress User with Custom Profile Data\nDESCRIPTION: This example shows how to insert a new user using wp_insert_user(). It takes a username, password, and website URL from POST data, constructs a user data array, and inserts the new user. It also checks for errors during the insertion process.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/users/working-with-users/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$username  = $_POST['username'];\n$password  = $_POST['password'];\n$website   = $_POST['website'];\n$user_data = [\n  'user_login' => $username,\n  'user_pass'  => $password,\n  'user_url'   => $website,\n];\n\n$user_id = wp_insert_user( $user_data );\n\n// success\nif ( ! is_wp_error( $user_id ) ) {\n  echo 'User created: ' . $user_id;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Heartbeat Response on Frontend in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to handle the response data received from the server via the Heartbeat API. It demonstrates listening to the 'heartbeat-tick' event and processing the custom data sent from the server.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/heartbeat-api/index.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\njQuery( document ).on( 'heartbeat-tick', function ( event, data ) {\n  // Check for our data, and use it.\n  if ( ! data.myplugin_customfield_hashed ) {\n    return;\n  }\n\n  alert( 'The hash is ' + data.myplugin_customfield_hashed );\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a New Setting in WordPress\nDESCRIPTION: Demonstrates how to register a new setting using register_setting(). This function creates an entry in the WordPress options table.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/settings/using-settings-api/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nregister_setting(\n  string $option_group,\n  string $option_name,\n  callable $sanitize_callback = ''\n);\n```\n\n----------------------------------------\n\nTITLE: Adding GPL License Block Comment in WordPress Plugin\nDESCRIPTION: A template for adding a GPL license block comment near the top of a WordPress plugin's main file. This comment indicates the plugin's licensing terms, including redistribution permissions and the disclaimer of warranty under the GNU General Public License.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/including-a-software-license/index.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/*\n{Plugin Name} is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 2 of the License, or\nany later version.\n\n{Plugin Name} is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with {Plugin Name}. If not, see {URI to Plugin License}.\n*/\n```\n\n----------------------------------------\n\nTITLE: Processing Enclosed Content in WordPress Shortcode\nDESCRIPTION: This code snippet shows how to define a shortcode handler function that processes enclosed content. It accepts attributes and content as parameters and returns the processed content.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/shortcodes/enclosing-shortcodes/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_shortcode( $atts = array(), $content = null ) {\n  // do something to $content\n  // always return\n  return $content;\n}\nadd_shortcode( 'wporg', 'wporg_shortcode' );\n```\n\n----------------------------------------\n\nTITLE: Registering Custom REST API Endpoint in WordPress\nDESCRIPTION: This code demonstrates how to register a custom REST API endpoint that returns a simple phrase. It includes a callback function that outputs the response and a registration function that hooks into rest_api_init to create the route.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/routes-endpoints/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * This is our callback function that embeds our phrase in a WP_REST_Response\n */\nfunction prefix_get_endpoint_phrase() {\n    // rest_ensure_response() wraps the data we want to return into a WP_REST_Response, and ensures it will be properly returned.\n    return rest_ensure_response( 'Hello World, this is the WordPress REST API' );\n}\n\n/**\n * This function is where we register our routes for our example endpoint.\n */\nfunction prefix_register_example_routes() {\n    // register_rest_route() handles more arguments but we are going to stick to the basics for now.\n    register_rest_route( 'hello-world/v1', '/phrase', array(\n        // By using this constant we ensure that when the WP_REST_Server changes our readable endpoints will work as intended.\n        'methods'  => WP_REST_Server::READABLE,\n        // Here we register our callback. The callback is fired when this endpoint is matched by the WP_REST_Server class.\n        'callback' => 'prefix_get_endpoint_phrase',\n    ) );\n}\n\nadd_action( 'rest_api_init', 'prefix_register_example_routes' );\n```\n\n----------------------------------------\n\nTITLE: Safely Scheduling a WP Cron Event in PHP\nDESCRIPTION: This snippet shows how to safely schedule a WP Cron event by first checking if it's already scheduled. This prevents multiple scheduling of the same event.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/cron/scheduling-wp-cron-events/index.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nif ( ! wp_next_scheduled( 'bl_cron_hook' ) ) {\n  wp_schedule_event( time(), 'five_seconds', 'bl_cron_hook' );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submissions in WordPress Admin Sub-Menu Pages\nDESCRIPTION: This snippet demonstrates how to set up form submission handling for a custom sub-menu page in WordPress admin. It uses the hookname returned by add_submenu_page() to attach a custom function to the appropriate action.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/administration-menus/sub-menus/index.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_options_page() {\n  $hookname = add_submenu_page(\n    'tools.php',\n    'WPOrg Options',\n    'WPOrg Options',\n    'manage_options',\n    'wporg',\n    'wporg_options_page_html'\n    );\n\n  add_action( 'load-' . $hookname, 'wporg_options_page_html_submit' );\n}\n\nadd_action( 'admin_menu', 'wporg_options_page' );\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Requests for WordPress Meta Box in PHP\nDESCRIPTION: This PHP code defines the server-side AJAX handler for the meta box. It checks for the presence of the 'wporg_field_value' in the POST data, verifies user capabilities, and updates the post meta accordingly.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/metadata/custom-meta-boxes/index.md#2025-04-21_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n// The piece after `wp_ajax_`  matches the action argument being sent in the POST request.\nadd_action( 'wp_ajax_wporg_ajax_change', 'my_ajax_handler' );\n\n/**\n * Handles my AJAX request.\n */\nfunction my_ajax_handler() {\n  // Handle the ajax request here\n  if ( array_key_exists( 'wporg_field_value', $_POST ) ) {\n    $post_id = (int) $_POST['post_ID'];\n    if ( current_user_can( 'edit_post', $post_id ) ) {\n      update_post_meta(\n        $post_id,\n        '_wporg_meta_key',\n        $_POST['wporg_field_value']\n      );\n    }\n  }\n\n  wp_die(); // All ajax handlers die when finished\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Prefixed Functions in PHP for WordPress Plugins\nDESCRIPTION: This snippet demonstrates how to create prefixed functions to avoid naming collisions in WordPress plugins. It includes checks to prevent function redefinition.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/best-practices/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Create a function called \"wporg_init\" if it doesn't already exist\nif ( ! function_exists( 'wporg_init' ) ) {\n  function wporg_init() {\n    register_setting( 'wporg_settings', 'wporg_option_foo' );\n  }\n}\n\n// Create a function called \"wporg_get_foo\" if it doesn't already exist\nif ( ! function_exists( 'wporg_get_foo' ) ) {\n  function wporg_get_foo() {\n    return get_option( 'wporg_option_foo' );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Main Query to Include Custom Post Types in PHP\nDESCRIPTION: This code uses the pre_get_posts action hook to modify the main WordPress query on the home page. It adds 'page' and 'movie' post types to display alongside the default 'post' type on the home page.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/post-types/working-with-custom-post-types/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_add_custom_post_types($query) {\n  if ( is_home() && $query->is_main_query() ) {\n    $query->set( 'post_type', array( 'post', 'page', 'movie' ) );\n  }\n  return $query;\n}\nadd_action('pre_get_posts', 'wporg_add_custom_post_types');\n```\n\n----------------------------------------\n\nTITLE: Checking Current User Capabilities\nDESCRIPTION: Demonstrates usage of current_user_can() function to check the current user's permissions.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/users/roles-and-capabilities/index.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\ncurrent_user_can( $capability );\n```\n\n----------------------------------------\n\nTITLE: Removing a Top-Level Menu in WordPress Admin (PHP)\nDESCRIPTION: This example demonstrates how to remove an existing top-level menu (in this case, the 'Tools' menu) from the WordPress admin panel using the remove_menu_page() function.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/administration-menus/top-level-menus/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nadd_action( 'admin_menu', 'wporg_remove_options_page', 99 );\nfunction wporg_remove_options_page() {\n  remove_menu_page( 'tools.php' );\n}\n```\n\n----------------------------------------\n\nTITLE: WordPress REST API Request Attributes Example\nDESCRIPTION: Example JSON structure showing the complete attributes object returned by $request->get_attributes() for a REST API endpoint. Includes method definitions, argument configurations, and callback registrations.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/requests/index.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"methods\": {\n    \"GET\": true\n  },\n  \"accept_json\": false,\n  \"accept_raw\": false,\n  \"show_in_index\": true,\n  \"args\": {\n    \"context\": {\n      \"description\": \"Scope under which the request is made; determines fields present in response.\",\n      \"type\": \"string\",\n      \"sanitize_callback\": \"sanitize_key\",\n      \"validate_callback\": \"rest_validate_request_arg\",\n      \"enum\": [\n        \"view\",\n        \"embed\",\n        \"edit\"\n      ],\n      \"default\": \"view\"\n    },\n    \"page\": {\n      \"description\": \"Current page of the collection.\",\n      \"type\": \"integer\",\n      \"default\": 1,\n      \"sanitize_callback\": \"absint\",\n      \"validate_callback\": \"rest_validate_request_arg\",\n      \"minimum\": 1\n    },\n    \"per_page\": {\n      \"description\": \"Maximum number of items to be returned in result set.\",\n      \"type\": \"integer\",\n      \"default\": 10,\n      \"minimum\": 1,\n      \"maximum\": 100,\n      \"sanitize_callback\": \"absint\",\n      \"validate_callback\": \"rest_validate_request_arg\"\n    },\n    \"search\": {\n      \"description\": \"Limit results to those matching a string.\",\n      \"type\": \"string\",\n      \"sanitize_callback\": \"sanitize_text_field\",\n      \"validate_callback\": \"rest_validate_request_arg\"\n    },\n    \"after\": {\n      \"description\": \"Limit response to resources published after a given ISO8601 compliant date.\",\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"validate_callback\": \"rest_validate_request_arg\"\n    },\n    \"author\": {\n      \"description\": \"Limit result set to posts assigned to specific authors.\",\n      \"type\": \"array\",\n      \"default\": [],\n      \"sanitize_callback\": \"wp_parse_id_list\",\n      \"validate_callback\": \"rest_validate_request_arg\"\n    },\n    \"author_exclude\": {\n      \"description\": \"Ensure result set excludes posts assigned to specific authors.\",\n      \"type\": \"array\",\n      \"default\": [],\n      \"sanitize_callback\": \"wp_parse_id_list\",\n      \"validate_callback\": \"rest_validate_request_arg\"\n    },\n    \"before\": {\n      \"description\": \"Limit response to resources published before a given ISO8601 compliant date.\",\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"validate_callback\": \"rest_validate_request_arg\"\n    },\n    \"exclude\": {\n      \"description\": \"Ensure result set excludes specific ids.\",\n      \"type\": \"array\",\n      \"default\": [],\n      \"sanitize_callback\": \"wp_parse_id_list\"\n    },\n    \"include\": {\n      \"description\": \"Limit result set to specific ids.\",\n      \"type\": \"array\",\n      \"default\": [],\n      \"sanitize_callback\": \"wp_parse_id_list\"\n    },\n    \"offset\": {\n      \"description\": \"Offset the result set by a specific number of items.\",\n      \"type\": \"integer\",\n      \"sanitize_callback\": \"absint\",\n      \"validate_callback\": \"rest_validate_request_arg\"\n    },\n    \"order\": {\n      \"description\": \"Order sort attribute ascending or descending.\",\n      \"type\": \"string\",\n      \"default\": \"desc\",\n      \"enum\": [\n        \"asc\",\n        \"desc\"\n      ],\n      \"validate_callback\": \"rest_validate_request_arg\"\n    },\n    \"orderby\": {\n      \"description\": \"Sort collection by object attribute.\",\n      \"type\": \"string\",\n      \"default\": \"date\",\n      \"enum\": [\n        \"date\",\n        \"relevance\",\n        \"id\",\n        \"include\",\n        \"title\",\n        \"slug\"\n      ],\n      \"validate_callback\": \"rest_validate_request_arg\"\n    },\n    \"slug\": {\n      \"description\": \"Limit result set to posts with a specific slug.\",\n      \"type\": \"string\",\n      \"validate_callback\": \"rest_validate_request_arg\"\n    },\n    \"status\": {\n      \"default\": \"publish\",\n      \"description\": \"Limit result set to posts assigned a specific status; can be comma-delimited list of status types.\",\n      \"enum\": [\n        \"publish\",\n        \"future\",\n        \"draft\",\n        \"pending\",\n        \"private\",\n        \"trash\",\n        \"auto-draft\",\n        \"inherit\",\n        \"any\"\n      ],\n      \"sanitize_callback\": \"sanitize_key\",\n      \"type\": \"string\",\n      \"validate_callback\": [\n        {},\n        \"validate_user_can_query_private_statuses\"\n      ]\n    },\n    \"filter\": {\n      \"description\": \"Use WP Query arguments to modify the response; private query vars require appropriate authorization.\"\n    },\n    \"categories\": {\n      \"description\": \"Limit result set to all items that have the specified term assigned in the categories taxonomy.\",\n      \"type\": \"array\",\n      \"sanitize_callback\": \"wp_parse_id_list\",\n      \"default\": []\n    },\n    \"tags\": {\n      \"description\": \"Limit result set to all items that have the specified term assigned in the tags taxonomy.\",\n      \"type\": \"array\",\n      \"sanitize_callback\": \"wp_parse_id_list\",\n      \"default\": []\n    }\n  },\n  \"callback\": [\n    {},\n    \"get_items\"\n  ],\n  \"permission_callback\": [\n    {},\n    \"get_items_permissions_check\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Function in WordPress\nDESCRIPTION: This snippet demonstrates the concept of a callback function in WordPress hooks. Callback functions are used with both actions and filters to extend or modify WordPress functionality.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/hooks/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`Callback`\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication with WordPress HTTP API\nDESCRIPTION: Shows how to make authenticated HTTP requests using Basic Auth by adding Authorization headers to wp_remote_get().\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/http-api/index.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$args = array(\n  'headers' => array(\n    'Authorization' => 'Basic ' . base64_encode( YOUR_USERNAME . ':' . YOUR_PASSWORD )\n  )\n);\nwp_remote_get( $url, $args );\n```\n\n----------------------------------------\n\nTITLE: Adding Update URI Header in WordPress Plugin\nDESCRIPTION: Demonstrates how to add the Update URI header to a WordPress plugin's main file to prevent automatic updates from WordPress.org. This method is effective for WordPress 5.8 and later versions.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/preventing-wordpress-from-updating-your-external-plugin/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Plugin Name: My Cool Plugin\n * Plugin URI: https://example.com/my-plugin/\n * Description: My Plugin does cool things.\n * Version: 1.0\n * Author: the team\n * Author URI: https://example.com/\n * Text Domain: my-plugin\n * License: GPLv2\n * License URI: https://opensource.org/licenses/gpl-2.0.php\n * Update URI: https://example.com/my-updater/\n */\n```\n\n----------------------------------------\n\nTITLE: Basic String Translation Example\nDESCRIPTION: Demonstrates the usage of __() function for basic string translation.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/how-to-internationalize-your-plugin/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n__( 'Blog Options', 'my-plugin' );\n```\n\n----------------------------------------\n\nTITLE: Removing an Action Hook in WordPress\nDESCRIPTION: Demonstrates how to properly remove an action after it has been registered. Uses after_setup_theme hook to ensure the removal happens after the original function was registered.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/hooks/advanced-topics/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction wporg_disable_slider() {\n  // Make sure all parameters match the add_action() call exactly.\n  remove_action( 'template_redirect', 'wporg_setup_slider', 9 );\n}\n// Make sure we call remove_action() after add_action() has been called.\nadd_action( 'after_setup_theme', 'wporg_disable_slider' );\n```\n\n----------------------------------------\n\nTITLE: Adding a Settings Field in WordPress\nDESCRIPTION: Illustrates how to add a new field to an existing settings section using add_settings_field(). This creates individual settings within a section.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/settings/using-settings-api/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nadd_settings_field(\n  string $id,\n  string $title,\n  callable $callback,\n  string $page,\n  string $section = 'default',\n  array $args = []\n);\n```\n\n----------------------------------------\n\nTITLE: Using WP_REST_Response Class in WordPress REST API\nDESCRIPTION: Demonstrates how to create a WP_REST_Response object and use its methods to access response data, HTTP status code, and headers. The WP_REST_Response class extends WordPress's WP_HTTP_Response class and provides additional functionality for REST API responses.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/responses-2/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// The following code will not do anything and just serves as a demonstration.\n$response = new WP_REST_Response( 'This is some data' );\n\n// To get the response data we can use this method. It should equal 'This is some data'.\n$our_data = $response->get_data();\n\n// To access the HTTP status code we can use this method. The most common status code is probably 200, which means OK!\n$our_status = $response->get_status();\n\n// To access the HTTP response headers we can use this method.\n$our_headers = $response->get_headers();\n```\n\n----------------------------------------\n\nTITLE: Enqueuing AJAX Script for WordPress Meta Box in PHP\nDESCRIPTION: This PHP function enqueues the JavaScript file containing the AJAX functionality on specific WordPress admin pages. It also localizes the script, providing the AJAX URL to the JavaScript code.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/metadata/custom-meta-boxes/index.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_meta_box_scripts() {\n  // get current admin screen, or null\n  $screen = get_current_screen();\n  // verify admin screen object\n  if (is_object($screen)) {\n    // enqueue only for specific post types\n    if (in_array($screen->post_type, ['post', 'wporg_cpt'])) {\n      // enqueue script\n      wp_enqueue_script('wporg_meta_box_script', plugin_dir_url(__FILE__) . 'admin/meta-boxes/js/admin.js', ['jquery']);\n      // localize script, create a custom js object\n      wp_localize_script(\n        'wporg_meta_box_script',\n        'wporg_meta_box_obj',\n        [\n          'url' => admin_url('admin-ajax.php'),\n        ]\n      );\n    }\n  }\n}\nadd_action('admin_enqueue_scripts', 'wporg_meta_box_scripts');\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Role in WordPress\nDESCRIPTION: Demonstrates how to create a new role with basic capabilities using add_role(). The example creates a 'simple_role' with read, edit_posts, and upload_files permissions.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/users/roles-and-capabilities/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_simple_role() {\n  add_role(\n    'simple_role',\n    'Simple Role',\n    array(\n      'read'         => true,\n      'edit_posts'   => true,\n      'upload_files' => true,\n    ),\n  );\n}\n\n// Add the simple_role.\nadd_action( 'init', 'wporg_simple_role' );\n```\n\n----------------------------------------\n\nTITLE: Complete POST Request Configuration\nDESCRIPTION: Demonstrates full POST request setup including timeout, redirection, and other HTTP parameters.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/http-api/index.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$args = array(\n  'body'        => $body,\n  'timeout'     => '5',\n  'redirection' => '5',\n  'httpversion' => '1.0',\n  'blocking'    => true,\n  'headers'     => array(),\n  'cookies'     => array(),\n);\n\n$response = wp_remote_post( 'https://example.com', $args );\n```\n\n----------------------------------------\n\nTITLE: Debugging WordPress Hooks with the 'all' Hook\nDESCRIPTION: Shows how to use the special 'all' hook to debug WordPress by displaying the name of every hook as it executes. Useful for debugging and determining execution order.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/hooks/advanced-topics/index.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction wporg_debug() {\n  echo '<p>' . current_action() . '</p>';\n}\nadd_action( 'all', 'wporg_debug' );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Response Body with wp_remote_retrieve_body in PHP\nDESCRIPTION: Shows how to extract just the body content from an HTTP response using wp_remote_retrieve_body(). This is useful when you only need the response data and not the headers or metadata.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/http-api/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$response = wp_remote_get( 'https://api.github.com/users/blobaugh' );\n$body     = wp_remote_retrieve_body( $response );\n```\n\n----------------------------------------\n\nTITLE: WordPress Admin Script Enqueuing with Page Check\nDESCRIPTION: Complete example of enqueuing a script only on specific admin pages using the admin_enqueue_scripts hook.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/enqueuing/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nadd_action( 'admin_enqueue_scripts', 'my_enqueue' );\nfunction my_enqueue( $hook ) {\n  if ( 'myplugin_settings.php' !== $hook ) {\n    return;\n  }\n  wp_enqueue_script(\n    'ajax-script',\n    plugins_url( '/js/myjquery.js', __FILE__ ),\n    array( 'jquery' ),\n    '1.0.0',\n    array(\n      'in_footer' => true,\n    )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Edit Link Display\nDESCRIPTION: Example of using current_user_can() to conditionally display an edit link in a template based on user permissions.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/users/roles-and-capabilities/index.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nif ( current_user_can( 'edit_posts' ) ) {\n  edit_post_link( esc_html__( 'Edit', 'wporg' ), '<p>', '</p>' );\n}\n```\n\n----------------------------------------\n\nTITLE: WordPress Translation Echo Functions with Escaping\nDESCRIPTION: Demonstrates proper usage of WordPress translation echo functions with escaping for secure output.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/common-issues/index.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<h2><?php esc_html_e('Settings page', 'plugin-slug'); ?></h2>\n<h2><?php echo esc_html(__('Settings page', 'plugin-slug')); ?></h2>\n<h2><?php echo esc_html(_x('Settings page', 'Settings page title', 'plugin-slug')); ?></h2>\n```\n\n----------------------------------------\n\nTITLE: Registering a Personal Data Exporter with WordPress\nDESCRIPTION: This code registers a personal data exporter callback with WordPress using the wp_privacy_personal_data_exporters filter. It specifies a friendly name for the exporter and the callback function that will handle the data export process for the plugin.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/privacy/adding-the-personal-data-exporter-to-your-plugin/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Registers all data exporters.\n *\n * @param array $exporters\n *\n * @return mixed\n */\nfunction wporg_register_user_data_exporters( $exporters ) {\n  $exporters['my-plugin-slug'] = array(\n    'exporter_friendly_name' => __( 'Comment Location Plugin', 'text-domain' ),\n    'callback'               => 'my_plugin_exporter',\n  );\n  return $exporters;\n}\n\nadd_filter( 'wp_privacy_personal_data_exporters', 'wporg_register_user_data_exporters' );\n```\n\n----------------------------------------\n\nTITLE: Modifying Post Titles with a Filter in WordPress\nDESCRIPTION: This snippet demonstrates how to create a filter that modifies post titles by adding text before and after the original title. It uses the 'the_title' hook to apply the filter.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/hooks/filters/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_filter_title( $title ) {\n  return 'The ' . $title . ' was filtered';\n}\nadd_filter( 'the_title', 'wporg_filter_title' );\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Actions with Different Priorities\nDESCRIPTION: Shows how to add multiple actions to the 'init' hook with different priorities. This example illustrates how priority affects the order of execution for actions.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/hooks/actions/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nadd_action( 'init', 'wporg_callback_run_me_late', 11 );\nadd_action( 'init', 'wporg_callback_run_me_normal' );\nadd_action( 'init', 'wporg_callback_run_me_early', 9 );\nadd_action( 'init', 'wporg_callback_run_me_later', 11 );\n```\n\n----------------------------------------\n\nTITLE: Checking for Scheduled WP Cron Event in PHP\nDESCRIPTION: This snippet shows how to use wp_next_scheduled() function to check if a particular hook is already scheduled. It takes the hook name as a parameter and returns either a timestamp or false.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/cron/scheduling-wp-cron-events/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nwp_next_scheduled( 'bl_cron_hook' );\n```\n\n----------------------------------------\n\nTITLE: Variable String Translation with Printf\nDESCRIPTION: Demonstrates proper translation of strings containing variables using printf.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/how-to-internationalize-your-plugin/index.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nprintf(\n  /* translators: %s: Name of a city */\n  __( 'Your city is %s.', 'my-plugin' ),\n  $city\n);\n```\n\n----------------------------------------\n\nTITLE: Registering AJAX Action Handler in WordPress\nDESCRIPTION: This snippet demonstrates how to register an AJAX action handler in WordPress using the 'wp_ajax_' hook. It includes a basic function structure for handling AJAX requests.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/enqueuing/index.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nadd_action( 'wp_ajax_my_tag_count', 'my_ajax_handler' );\n\n/**\n * Handles my AJAX request.\n */\nfunction my_ajax_handler() {\n  // Handle the ajax request here\n\n  wp_die(); // All ajax handlers die when finished\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a WordPress Admin Sub-Menu\nDESCRIPTION: This function registers a new sub-menu in the WordPress admin panel using add_submenu_page(). It's hooked to the admin_menu action to ensure proper timing in the WordPress execution flow.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/administration-menus/sub-menus/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_options_page() {\n  add_submenu_page(\n    'tools.php',\n    'WPOrg Options',\n    'WPOrg Options',\n    'manage_options',\n    'wporg',\n    'wporg_options_page_html'\n  );\n}\nadd_action( 'admin_menu', 'wporg_options_page' );\n```\n\n----------------------------------------\n\nTITLE: WordPress User Meta Function Signatures\nDESCRIPTION: Function signatures for the core WordPress user meta manipulation functions: add_user_meta(), update_user_meta(), delete_user_meta(), and get_user_meta(). These functions allow programmatic management of user metadata.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/users/working-with-user-metadata/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nadd_user_meta(\n  int $user_id,\n  string $meta_key,\n  mixed $meta_value,\n  bool $unique = false\n);\n```\n\nLANGUAGE: PHP\nCODE:\n```\nupdate_user_meta(\n  int $user_id,\n  string $meta_key,\n  mixed $meta_value,\n  mixed $prev_value = ''\n);\n```\n\nLANGUAGE: PHP\nCODE:\n```\ndelete_user_meta(\n  int $user_id,\n  string $meta_key,\n  mixed $meta_value = ''\n);\n```\n\nLANGUAGE: PHP\nCODE:\n```\nget_user_meta(\n  int $user_id,\n  string $key = '',\n  bool $single = false\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Post Metadata in WordPress\nDESCRIPTION: Collection of core WordPress functions used to retrieve post metadata and custom fields. These functions allow developers to access metadata associated with posts, including get_post_meta() for specific fields, get_post_custom() for all metadata, and get_post_custom_values() for custom field values.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/metadata/rendering-post-metadata/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nget_post_meta()\n```\n\nLANGUAGE: php\nCODE:\n```\nget_post_custom()\n```\n\nLANGUAGE: php\nCODE:\n```\nget_post_custom_values()\n```\n\n----------------------------------------\n\nTITLE: Internationalizing Dynamic Strings with Placeholders\nDESCRIPTION: The snippet demonstrates how to add dynamic values to translatable strings in WordPress plugins using `printf`. It uses placeholders within the string and replaces them after translation, allowing values like usernames to be incorporated into translated messages.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/common-issues/index.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nprintf(\n    /* translators: %s: First name of the user */\n    esc_html__( 'Hello %s, how are you?', 'plugin-slug' ),\n    esc_html( $user_firstname )\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling WP-Cron in wp-config.php\nDESCRIPTION: This snippet shows how to disable the default WP-Cron functionality by adding a constant definition to wp-config.php. This prevents WordPress from running cron jobs on each page load, reducing server resource usage when using a system scheduler instead.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/cron/hooking-wp-cron-into-the-system-task-scheduler/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'DISABLE_WP_CRON', true );\n```\n\n----------------------------------------\n\nTITLE: HTML Content Escaping in WordPress\nDESCRIPTION: Demonstrates proper HTML content escaping using wp_kses_post and wp_kses functions.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/common-issues/index.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\necho wp_kses_post($html_content);\necho wp_kses($html_content, array( 'a', 'div', 'span' ));\n```\n\n----------------------------------------\n\nTITLE: Input Sanitization Using PHP Filter Functions\nDESCRIPTION: Shows proper usage of PHP's filter_input function with explicit sanitization filter to process GET parameters safely.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/common-issues/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$post_id = filter_input(INPUT_GET, 'post_id', FILTER_SANITIZE_NUMBER_INT);\n```\n\n----------------------------------------\n\nTITLE: Unscheduling a WP Cron Event in PHP\nDESCRIPTION: This code demonstrates how to unschedule a WP Cron event using wp_unschedule_event(). It first finds the timestamp of the next scheduled occurrence using wp_next_scheduled().\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/cron/scheduling-wp-cron-events/index.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$timestamp = wp_next_scheduled( 'bl_cron_hook' );\nwp_unschedule_event( $timestamp, 'bl_cron_hook' );\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX Callback Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a callback function for handling AJAX responses in JavaScript. It removes the existing content and appends the new data received from the server.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/ajax/index.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction( data ) {\n  this2.nextSibling.remove();\n  $( this2 ).after( data );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Action with Multiple Arguments\nDESCRIPTION: Demonstrates how to add an action that accepts multiple arguments. This example uses the 'save_post' hook to receive both the post ID and the post object.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/hooks/actions/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nadd_action( 'save_post', 'wporg_custom', 10, 2 );\n```\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_custom( $post_id, $post ) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Basic WordPress Plugin Activation Hook Implementation\nDESCRIPTION: Demonstrates how to register a basic activation hook for a WordPress plugin using register_activation_hook(). The hook executes a specified function when the plugin is activated.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/activation-deactivation-hooks/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nregister_activation_hook(\n  __FILE__,\n  'pluginprefix_function_to_run'\n);\n```\n\n----------------------------------------\n\nTITLE: WordPress Translation Function Usage with Escaping\nDESCRIPTION: Shows proper usage of WordPress translation functions with appropriate escaping for secure output of translated strings.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/common-issues/index.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<h2><?php echo esc_html__('Settings page', 'plugin-slug'); ?></h2>\n<h2><?php echo esc_html(__('Settings page', 'plugin-slug')); ?></h2>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Output for WordPress Admin Sub-Menu Page\nDESCRIPTION: This function generates the HTML content for a WordPress admin sub-menu page. It includes security checks, form structure, and utilizes WordPress Settings API functions.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/administration-menus/sub-menus/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_options_page_html() {\n  // check user capabilities\n  if ( ! current_user_can( 'manage_options' ) ) {\n    return;\n  }\n  ?>\n  <div class=\"wrap\">\n    <h1><?php echo esc_html( get_admin_page_title() ); ?></h1>\n    <form action=\"options.php\" method=\"post\">\n      <?php\n      // output security fields for the registered setting \"wporg_options\"\n      settings_fields( 'wporg_options' );\n      // output setting sections and their fields\n      // (sections are registered for \"wporg\", each field is registered to a specific section)\n      do_settings_sections( 'wporg' );\n      // output save settings button\n      submit_button( __( 'Save Settings', 'textdomain' ) );\n      ?>\n    </form>\n  </div>\n  <?php\n}\n```\n\n----------------------------------------\n\nTITLE: Insecure URL Inclusion in Internationalized String in PHP\nDESCRIPTION: An example of insecure URL inclusion in an internationalized string, which could allow a malicious translator to change the URL to a harmful destination.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/security/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n_e(\n  'Please <a href=\"https://login.wordpress.org/register\"> register for a WordPress.org account</a>.',\n  'your-text-domain'\n);\n```\n\n----------------------------------------\n\nTITLE: Using gettext Functions Correctly in WordPress Plugins\nDESCRIPTION: This example demonstrates the correct usage of the `esc_html__` function in WordPress plugins to ensure internationalization by using string literals instead of variables for translatable strings. It highlights the importance of keeping the text and translation domain as static strings to be correctly parsed by translation tools.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/common-issues/index.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nesc_html__( 'Hello, how are you?' , 'plugin-slug' );\n```\n\n----------------------------------------\n\nTITLE: Registering a Deactivation Hook for WP Cron Cleanup in PHP\nDESCRIPTION: This snippet shows how to register a deactivation hook that cleans up scheduled WP Cron events when a plugin is deactivated. It uses register_deactivation_hook() to set up the cleanup function.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/cron/scheduling-wp-cron-events/index.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nregister_deactivation_hook( __FILE__, 'bl_deactivate' ); \n\nfunction bl_deactivate() {\n  $timestamp = wp_next_scheduled( 'bl_cron_hook' );\n  wp_unschedule_event( $timestamp, 'bl_cron_hook' );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Settings Section in WordPress\nDESCRIPTION: Shows how to add a new section to an existing settings page using add_settings_section(). This groups related settings under a shared heading.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/settings/using-settings-api/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nadd_settings_section(\n  string $id,\n  string $title,\n  callable $callback,\n  string $page\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom WP-Cron Interval in PHP\nDESCRIPTION: This PHP function adds a custom interval of five seconds to the WordPress cron schedules. It uses the 'cron_schedules' filter to inject a new schedule option.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/cron/understanding-wp-cron-scheduling/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nadd_filter( 'cron_schedules', 'example_add_cron_interval' );\nfunction example_add_cron_interval( $schedules ) { \n  $schedules['five_seconds'] = array(\n    'interval' => 5,\n    'display'  => esc_html__( 'Every Five Seconds' ),\n  );\n  return $schedules;\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring WordPress Plugin Readme Header in Markdown\nDESCRIPTION: This snippet demonstrates the standard format for the header section of a WordPress plugin readme.txt file. It includes fields for plugin name, contributors, donation link, tags, version requirements, and a short description.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/how-your-readme-txt-works/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n=== Plugin Name ===\nContributors: (this should be a list of wordpress.org userid's)\nDonate link: https://example.com/\nTags: tag1, tag2\nRequires at least: 4.7\nTested up to: 5.4\nStable tag: 4.3\nRequires PHP: 7.0\nLicense: GPLv2 or later\nLicense URI: https://www.gnu.org/licenses/gpl-2.0.html\nHere is a short description of the plugin.  This should be no more than 150 characters.  No markup here.\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Content for Custom Meta Boxes in WordPress\nDESCRIPTION: This PHP function generates the HTML content for a custom meta box, including form elements like a select dropdown.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/metadata/custom-meta-boxes/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_custom_box_html( $post ) {\n  ?>\n  <label for=\"wporg_field\">Description for this field</label>\n  <select name=\"wporg_field\" id=\"wporg_field\" class=\"postbox\">\n    <option value=\"\">Select something...</option>\n    <option value=\"something\">Something</option>\n    <option value=\"else\">Else</option>\n  </select>\n  <?php\n}\n```\n\n----------------------------------------\n\nTITLE: Custom HTTP Method Request\nDESCRIPTION: Demonstrates using wp_remote_request() for custom HTTP methods like DELETE.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/http-api/index.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$args     = array(\n  'method' => 'DELETE',\n);\n$response = wp_remote_request( 'http://some-api.com/object/to/delete', $args );\n```\n\n----------------------------------------\n\nTITLE: Handling JSON Escaping in WordPress Post Meta\nDESCRIPTION: Example showing how JSON data with escaped quotes breaks when stored directly in post meta due to WordPress's stripslashes() behavior.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/metadata/managing-post-metadata/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$escaped_json = '{\"key\":\"value with \\\"escaped quotes\\\"\"}';\\nupdate_post_meta( $id, 'escaped_json', $escaped_json );\\n$broken = get_post_meta( $id, 'escaped_json', true );\\n/*\\n$broken, after stripslashes(), ends up unparsable:\\n{\"key\":\"value with \"escaped quotes\"\"}\\\n*/\n```\n\n----------------------------------------\n\nTITLE: Using current_filter() to Determine Active WordPress Hook\nDESCRIPTION: Shows how to create a callback function that behaves differently depending on which hook triggered it. Uses the current_filter() function to identify the active hook.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/hooks/advanced-topics/index.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction wporg_modify_content( $content ) {\n  switch ( current_filter() ) {\n    case 'the_content':\n      // Do something.\n      break;\n    case 'the_excerpt':\n      // Do something.\n      break;\n  }\n  return $content;\n}\n\nadd_filter( 'the_content', 'wporg_modify_content' );\nadd_filter( 'the_excerpt', 'wporg_modify_content' );\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Custom Fields in WordPress\nDESCRIPTION: Example of creating a hidden custom field by prefixing the meta_key with an underscore, which prevents it from appearing in the default custom fields UI.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/metadata/managing-post-metadata/index.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_post_meta( 68, '_color', 'red', true );\n```\n\n----------------------------------------\n\nTITLE: Adding AJAX Functionality to Custom Meta Boxes in WordPress\nDESCRIPTION: This JavaScript snippet shows how to add AJAX functionality to a custom meta box by defining a trigger for the 'change' event on a form field.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/metadata/custom-meta-boxes/index.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*jslint browser: true, plusplus: true */\n(function ($, window, document) {\n  'use strict';\n  // execute when the DOM is ready\n  $(document).ready(function () {\n    // js 'change' event triggered on the wporg_field form field\n    $('#wporg_field').on('change', function () {\n      // our code\n    });\n  });\n}(jQuery, window, document));\n```\n\n----------------------------------------\n\nTITLE: Properly Escaping JSON in WordPress Post Meta\nDESCRIPTION: Solution for storing JSON in post meta using wp_slash() to properly handle escaped characters.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/metadata/managing-post-metadata/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$escaped_json = '{\"key\":\"value with \\\"escaped quotes\\\"\"}';\\nupdate_post_meta( $id, 'double_escaped_json', wp_slash( $escaped_json ) );\\n$fixed = get_post_meta( $id, 'double_escaped_json', true );\\n/*\\n$fixed, after stripslashes(), ends up as desired:\\n{\"key\":\"value with \\\"escaped quotes\\\"\"}\\\n*/\n```\n\n----------------------------------------\n\nTITLE: Shortcode Handler Function Signature in PHP\nDESCRIPTION: This snippet shows the basic structure of a shortcode handler function in PHP. It defines the parameters that WordPress passes to the function, including attributes, content, and the shortcode tag.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/shortcodes/shortcodes-with-parameters/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_shortcode( $atts = array(), $content = null, $tag = '' ) {}\n```\n\n----------------------------------------\n\nTITLE: Setting Form Action for Custom Admin Page in WordPress (PHP)\nDESCRIPTION: This snippet shows how to set the correct form action URL for a custom admin page form using the menu_page_url() function.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/administration-menus/top-level-menus/index.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<form action=\"<?php menu_page_url( 'wporg' ) ?>\" method=\"post\">\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Shortcodes in WordPress\nDESCRIPTION: This snippet demonstrates how to process nested shortcodes within an enclosing shortcode. It uses the do_shortcode() function to recursively parse any shortcodes within the enclosed content.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/shortcodes/enclosing-shortcodes/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_shortcode( $atts = array(), $content = null ) {\n  // do something to $content\n  // run shortcode parser recursively\n  $content = do_shortcode( $content );\n  // always return\n  return $content;\n}\nadd_shortcode( 'wporg', 'wporg_shortcode' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Loading for WordPress Admin in PHP\nDESCRIPTION: This snippet demonstrates how to conditionally load admin-specific code in a WordPress plugin using the is_admin() function.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/best-practices/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nif ( is_admin() ) {\n  // we are in admin mode\n  require_once __DIR__ . '/admin/plugin-name-admin.php';\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving WordPress Settings\nDESCRIPTION: Shows how to retrieve a setting value using get_option(). This function accepts the option name and an optional default value.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/settings/using-settings-api/index.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nget_option(\n  string $option,\n  mixed $default = false\n);\n```\n\n----------------------------------------\n\nTITLE: One-line GET Request and Body Retrieval in PHP\nDESCRIPTION: Demonstrates how to combine wp_remote_get() and wp_remote_retrieve_body() in a single line of code to make a GET request and immediately retrieve the response body.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/http-api/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$body = wp_remote_retrieve_body( wp_remote_get( 'https://api.github.com/users/blobaugh' ) );\n```\n\n----------------------------------------\n\nTITLE: Multiple Variables Translation with Argument Swapping\nDESCRIPTION: Shows how to handle multiple variables in translations with argument swapping.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/how-to-internationalize-your-plugin/index.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nprintf(\n  /* translators: 1: Name of a city 2: ZIP code */\n  __( 'Your city is %1$s, and your zip code is %2$s.', 'my-plugin' ),\n  $city,\n  $zipcode\n);\n```\n\n----------------------------------------\n\nTITLE: Advanced WordPress Plugin Preview Blueprint Configuration\nDESCRIPTION: A comprehensive blueprint.json example that demonstrates advanced features including plugin/theme installation, setting options, and running custom PHP code.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/previews-and-blueprints/index.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"landingPage\": \"/wp-admin/post.php?post=5&action=edit\",\n    \"preferredVersions\": {\n        \"php\": \"7.4\",\n        \"wp\": \"5.9\"\n    },\n    \"phpExtensionBundles\": [\n        \"kitchen-sink\"\n    ],\n    \"steps\": [\n        {\n            \"step\": \"login\",\n            \"username\": \"admin\",\n            \"password\": \"password\"\n        },\n        {\n            \"step\": \"installPlugin\",\n            \"pluginZipFile\": {\n                \"resource\": \"wordpress.org\\/plugins\",\n                \"slug\": \"my-imaginary-plugin-dependency\"\n            },\n            \"options\": {\n                \"activate\": true\n            }\n        },\n        {\n            \"step\": \"installPlugin\",\n            \"pluginZipFile\": {\n                \"resource\": \"wordpress.org\\/plugins\",\n                \"slug\": \"my-imaginary-plugin\"\n            },\n            \"options\": {\n                \"activate\": true\n            }\n        },\n        {\n            \"step\": \"installTheme\",\n            \"themeZipFile\": {\n                \"resource\": \"wordpress.org\\/themes\",\n                \"slug\": \"my-imaginary-theme\"\n            }\n        },\n        {\n            \"step\": \"setSiteOptions\",\n            \"options\": {\n                \"some_required_option_1\": \"your_favorite_values\",\n                \"some_required_option_2\": \"your_favorite_values\"\n            }\n        },\n        {\n            \"step\": \"runPHP\",\n            \"code\": \"<?php require_once 'wordpress/wp-load.php'; wp_insert_post(array('post_title' => 'wp-load.php required for WP functionality', 'post_status' => 'publish')); ?>\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a WordPress User's Website Profile Field\nDESCRIPTION: This snippet demonstrates how to update an existing user's profile data using wp_update_user(). Specifically, it updates the user's website URL and checks for any errors during the update process.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/users/working-with-users/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$user_id = 1;\n$website = 'https://wordpress.org';\n\n$user_id = wp_update_user(\n  array(\n    'ID'       => $user_id,\n    'user_url' => $website,\n  )\n);\n\nif ( is_wp_error( $user_id ) ) {\n  // error\n} else {\n  // success\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Retrieving a WordPress Setting\nDESCRIPTION: Demonstrates how to get the value of a previously registered setting using get_option().\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/settings/using-settings-api/index.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// Get the value of the setting we've registered with register_setting()\n$setting = get_option('wporg_setting_name');\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Refreshing Transient Data in WordPress\nDESCRIPTION: This snippet demonstrates how to get a cached object (transient) in WordPress, check if it has expired, and refresh the data if necessary. It uses the GitHub user profile as an example.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/http-api/index.md#2025-04-21_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$github_userinfo = get_transient( 'prefix_github_userinfo' );\nif ( false === $github_userinfo ) {\n  // Transient expired, refresh the data\n  $response = wp_remote_get( 'https://api.github.com/users/blobaugh' );\n  set_transient( 'prefix_github_userinfo', $response, HOUR_IN_SECONDS );\n}\n// Use $github_userinfo as you will\n```\n\n----------------------------------------\n\nTITLE: Removing Custom Role in WordPress\nDESCRIPTION: Shows how to remove a custom role using remove_role(). The function removes the previously created 'simple_role' from WordPress.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/users/roles-and-capabilities/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_simple_role_remove() {\n  remove_role( 'simple_role' );\n}\n\n// Remove the simple_role.\nadd_action( 'init', 'wporg_simple_role_remove' );\n```\n\n----------------------------------------\n\nTITLE: Getting Plugin JavaScript File URL in WordPress\nDESCRIPTION: Demonstrates how to get the full URL to a JavaScript file within a plugin using plugins_url() function. This approach handles symlinks correctly and respects custom wp-content locations.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/determining-plugin-and-content-directories/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nplugins_url( 'myscript.js', __FILE__ );\n```\n\n----------------------------------------\n\nTITLE: Localizing Script Data in WordPress\nDESCRIPTION: Example of localizing PHP data for use in JavaScript using wp_localize_script().\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/enqueuing/index.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nwp_localize_script(\n  'ajax-script',\n  'my_ajax_obj',\n  array(\n    'ajax_url' => admin_url( 'admin-ajax.php' ),\n    'nonce'    => $title_nonce,\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin Text Domain in WordPress\nDESCRIPTION: Implementation of loading translation files for a WordPress plugin using load_plugin_textdomain() hooked to init action.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/how-to-internationalize-your-plugin/index.md#2025-04-21_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nadd_action( 'init', 'wpdocs_load_textdomain' );\n\nfunction wpdocs_load_textdomain() {\n  load_plugin_textdomain( 'wpdocs_textdomain', false, dirname( plugin_basename( __FILE__ ) ) . '/languages' );\n}\n```\n\n----------------------------------------\n\nTITLE: POST Request Body Setup in WordPress\nDESCRIPTION: Example of structuring POST request data as an associative array for form submission.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/http-api/index.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$body = array(\n  'name'    => 'Jane Smith',\n  'email'   => 'some@email.com',\n  'subject' => 'Checkout this API stuff',\n  'comment' => 'I just read a great tutorial. You gotta check it out!',\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Shortcode Usage Example in WordPress\nDESCRIPTION: This snippet demonstrates how a shortcode with parameters can be used in WordPress content. It shows the syntax for an enclosing shortcode with a 'title' attribute.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/shortcodes/shortcodes-with-parameters/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n[wporg title=\"WordPress.org\"]\n  Having fun with WordPress.org shortcodes.\n[/wporg]\n```\n\n----------------------------------------\n\nTITLE: Accessing WordPress AJAX URL\nDESCRIPTION: Shows how to reference the WordPress AJAX URL using a localized script object. This URL is required for making AJAX requests to wp-admin/admin-ajax.php.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/ajax/index.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmy_ajax_obj.ajax_url\n```\n\n----------------------------------------\n\nTITLE: Deleting a Transient in WordPress\nDESCRIPTION: This snippet shows how to delete a cached object (transient) in WordPress. It demonstrates the simplicity of removing a transient by just passing the transient's name to the delete_transient() function.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/http-api/index.md#2025-04-21_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\ndelete_transient( 'blobaugh_github_userinfo' );\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Displaying Saved Meta Box Values in WordPress\nDESCRIPTION: This PHP function demonstrates how to retrieve saved meta box values using get_post_meta() and display them in a pre-populated form field.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/metadata/custom-meta-boxes/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_custom_box_html( $post ) {\n  $value = get_post_meta( $post->ID, '_wporg_meta_key', true );\n  ?>\n  <label for=\"wporg_field\">Description for this field</label>\n    <select name=\"wporg_field\" id=\"wporg_field\" class=\"postbox\">\n      <option value=\"\">Select something...</option>\n      <option value=\"something\" <?php selected( $value, 'something' ); ?>>Something</option>\n      <option value=\"else\" <?php selected( $value, 'else' ); ?>>Else</option>\n    </select>\n    <?php\n}\n```\n\n----------------------------------------\n\nTITLE: Echo Translated String Example\nDESCRIPTION: Shows how to use _e() function to echo translated strings.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/how-to-internationalize-your-plugin/index.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\necho __( 'WordPress is the best!', 'my-plugin' );\n_e( 'WordPress is the best!', 'my-plugin' );\n```\n\n----------------------------------------\n\nTITLE: Validating and Updating Featured Tags After Term Split in PHP\nDESCRIPTION: This code snippet demonstrates how to use the 'wp_get_split_term' function to validate and update featured tag IDs stored in an option. It checks if any of the stored tag IDs have been split and updates them with the new term IDs.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/taxonomies/split-terms-wp-4-2/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Retrieve information about split terms and udpates the featured_tags option with the new term IDs.\n *\n * @return void\n */\nfunction wporg_featured_tags_check_split() {\n  $featured_tag_ids = get_option( 'featured_tags', array() );\n\n  // check to see whether any IDs correspond to post_tag terms that have been split.\n  foreach ( $featured_tag_ids as $index => $featured_tag_id ) {\n    $new_term_id = wp_get_split_term( $featured_tag_id, 'post_tag' );\n\n    if ( $new_term_id ) {\n      $featured_tag_ids[ $index ] = $new_term_id;\n    }\n  }\n\n  // save\n  update_option( 'featured_tags', $featured_tag_ids );\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Timezone Configuration Conflicts in WordPress Plugins (PHP)\nDESCRIPTION: It's generally discouraged to define a default timezone in WordPress plugins because WordPress explicitly sets the default timezone to UTC in `settings.php`. Overriding this setting can cause unexpected behavior with date/time functions like `get_post_time()` or `get_post_modified_time()`, especially when trying to obtain GMT timestamps.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/common-issues/index.md#2025-04-21_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Custom Text Domain Loading Filter in WordPress\nDESCRIPTION: Custom implementation to override default WordPress text domain loading behavior using the load_textdomain_mofile filter.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/how-to-internationalize-your-plugin/index.md#2025-04-21_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nfunction my_plugin_load_my_own_textdomain( $mofile, $domain ) {\n  if ( 'my-domain' === $domain && false !== strpos( $mofile, WP_LANG_DIR . '/plugins/' ) ) {\n    $locale = apply_filters( 'plugin_locale', determine_locale(), $domain );\n    $mofile = WP_PLUGIN_DIR . '/' . dirname( plugin_basename( __FILE__ ) ) . '/languages/' . $domain . '-' . $locale . '.mo';\n  }\n  return $mofile;\n}\nadd_filter( 'load_textdomain_mofile', 'my_plugin_load_my_own_textdomain', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Querying Posts by Tag in WordPress AJAX Handler\nDESCRIPTION: This code shows how to create a WP_Query to fetch posts by a specific tag in a WordPress AJAX handler.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/enqueuing/index.md#2025-04-21_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$args      = array(\n  'tag' => $title,\n);\n$the_query = new WP_Query( $args );\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Comments in WordPress REST API\nDESCRIPTION: This function defines the JSON Schema for comments, specifying the structure and properties of comment objects in the REST API responses.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/schema/index.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction prefix_get_comment_schema( $request ) {\n\t$schema = array(\n\t\t// This tells the spec of JSON Schema we are using which is draft 4.\n\t\t'$schema'              => 'http://json-schema.org/draft-04/schema#',\n\t\t// The title property marks the identity of the resource.\n\t\t'title'                => 'comment',\n\t\t'type'                 => 'object',\n\t\t// In JSON Schema you can specify object properties in the properties attribute.\n\t\t'properties'           => array(\n\t\t\t'id' => array(\n\t\t\t\t'description'  => esc_html__( 'Unique identifier for the object.', 'my-textdomain' ),\n\t\t\t\t'type'         => 'integer',\n\t\t\t\t'context'      => array( 'view', 'edit', 'embed' ),\n\t\t\t\t'readonly'     => true,\n\t\t\t),\n\t\t\t'author' => array(\n\t\t\t\t'description'  => esc_html__( 'The id of the user object, if author was a user.', 'my-textdomain' ),\n\t\t\t\t'type'         => 'integer',\n\t\t\t),\n\t\t\t'content' => array(\n\t\t\t\t'description'  => esc_html__( 'The content for the object.', 'my-textdomain' ),\n\t\t\t\t'type'         => 'string',\n\t\t\t),\n\t\t),\n\t);\n\n\treturn $schema;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Capabilities for Specific Blog\nDESCRIPTION: Shows how to check user capabilities for a specific blog in a multisite installation using current_user_can_for_blog().\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/users/roles-and-capabilities/index.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\ncurrent_user_can_for_blog( $blog_id, $capability );\n```\n\n----------------------------------------\n\nTITLE: HEAD Request Implementation\nDESCRIPTION: Shows how to make HEAD requests to check resource status before retrieval using wp_remote_head().\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/http-api/index.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$response = wp_remote_head( 'https://api.github.com/users/blobaugh' );\n```\n\n----------------------------------------\n\nTITLE: Basic WordPress Plugin Deactivation Hook Implementation\nDESCRIPTION: Shows how to register a basic deactivation hook for a WordPress plugin using register_deactivation_hook(). The hook executes a specified function when the plugin is deactivated.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/activation-deactivation-hooks/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nregister_deactivation_hook(\n  __FILE__,\n  'pluginprefix_function_to_run'\n);\n```\n\n----------------------------------------\n\nTITLE: Creating WordPress AJAX Nonce\nDESCRIPTION: Example of creating a security nonce for AJAX requests in WordPress.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/enqueuing/index.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$title_nonce = wp_create_nonce( 'title_example' );\n```\n\n----------------------------------------\n\nTITLE: Registering a Slider Function in WordPress Theme\nDESCRIPTION: Example of a theme registering a slider function to the template_redirect hook with priority 9. This represents a function we might want to remove for performance optimization.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/hooks/advanced-topics/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction wporg_setup_slider() {\n  // ...\n}\nadd_action( 'template_redirect', 'wporg_setup_slider', 9 );\n```\n\n----------------------------------------\n\nTITLE: Registering Deferred Script Loading in WordPress\nDESCRIPTION: Example of registering a script with deferred loading strategy using wp_register_script() and the strategy argument.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/enqueuing/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nwp_register_script(\n  'ajax-script-two',\n  plugins_url( '/js/myscript.js', __FILE__ ),\n  array( ajax-script ),\n  '1.0.,0',\n  array(\n    'strategy' => 'defer',\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Checking User Capabilities\nDESCRIPTION: Shows how to check if a user has specific capabilities using user_can() function.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/users/roles-and-capabilities/index.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuser_can( $user, $capability );\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Hook Callback\nDESCRIPTION: Shows how to add a callback function to the custom settings page action hook using add_action(). Uses default priority of 10.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/hooks/custom-hooks/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'wporg_after_settings_page_html', 'myprefix_add_settings' );\n```\n\n----------------------------------------\n\nTITLE: Using a PHP File for Menu Page HTML in WordPress Admin (PHP)\nDESCRIPTION: This snippet shows an alternative method of adding a top-level menu by using a PHP file path as the menu_slug parameter and setting the function parameter to null.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/administration-menus/top-level-menus/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nadd_action( 'admin_menu', 'wporg_options_page' );\nfunction wporg_options_page() {\n  add_menu_page(\n    'WPOrg',\n    'WPOrg Options',\n    'manage_options',\n    plugin_dir_path(__FILE__) . 'admin/view.php',\n    null,\n    plugin_dir_url(__FILE__) . 'images/icon_wporg.png',\n    20\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Internationalization Example PHP\nDESCRIPTION: Demonstrates the proper usage of text domain for plugin internationalization using WordPress esc_html__ function.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/plugin-developer-faq/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nesc_html__('Hello', 'boaty-mcboatface');\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic WordPress Plugin Directory Structure in Terminal\nDESCRIPTION: These bash commands walk through the process of creating a new WordPress plugin directory structure, including navigating to the wp-content/plugins folder, creating a new plugin directory, and opening a file for editing.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd wp-content/\n$ cd plugins/\n$ mkdir plugin-name/\n$ cd plugin-name/\n$ vim plugin-name.php\n```\n\n----------------------------------------\n\nTITLE: Custom Post Type Registration with Custom Slug in WordPress\nDESCRIPTION: Shows how to register a custom post type with a custom URL slug using the rewrite parameter. Includes complete configuration with labels, public visibility, archive support, and custom URL structure.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/post-types/registering-custom-post-types/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wporg_custom_post_type() {\n  register_post_type('wporg_product',\n    array(\n      'labels'      => array(\n        'name'          => __( 'Products', 'textdomain' ),\n        'singular_name' => __( 'Product', 'textdomain' ),\n      ),\n      'public'      => true,\n      'has_archive' => true,\n      'rewrite'     => array( 'slug' => 'products' ), // my custom slug\n    )\n  );\n}\nadd_action('init', 'wporg_custom_post_type');\n```\n\n----------------------------------------\n\nTITLE: Adding WordPress Shortcode Function Signature\nDESCRIPTION: Function signature for registering a new shortcode using add_shortcode(). Takes a shortcode tag string and callback function as parameters.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/shortcodes/basic-shortcodes/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_shortcode(\n  string $tag,\n  callable $func\n);\n```\n\n----------------------------------------\n\nTITLE: Secure URL Placeholder in Internationalized String in PHP\nDESCRIPTION: A secure way to include URLs in internationalized strings using printf() and placeholders, preventing potential manipulation of URLs by translators.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/security/index.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nprintf(\n  esc_html__( 'Please %1$s register for a WordPress.org account %2$s.', 'your-text-domain' ),\n  '<a href=\"https://login.wordpress.org/register\">',\n  '</a>'\n);\n```\n\n----------------------------------------\n\nTITLE: Basic WordPress Plugin Preview Blueprint Configuration\nDESCRIPTION: A simple blueprint.json configuration that sets up a basic WordPress Playground environment with PHP 7.4, WordPress 5.9, and automatic admin login.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/previews-and-blueprints/index.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"landingPage\": \"\\/wp-admin\\/edit.php\",\n    \"preferredVersions\": {\n        \"php\": \"7.4\",\n        \"wp\": \"5.9\"\n    },\n    \"phpExtensionBundles\": [\n        \"kitchen-sink\"\n    ],\n    \"steps\": [\n        {\n            \"step\": \"login\",\n            \"username\": \"admin\",\n            \"password\": \"password\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete crontab entry for daily WP-Cron execution at midnight\nDESCRIPTION: A complete crontab entry that triggers WordPress Cron at midnight every day using wget. The entry follows the crontab syntax of minute, hour, day of month, month, day of week, followed by the command to execute.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/cron/hooking-wp-cron-into-the-system-task-scheduler/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n0 0 * * * wget --delete-after https://example.com/wp-cron.php\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cron Schedules with wp_get_schedules()\nDESCRIPTION: Core WordPress function that returns an array of all available cron schedule recurrence intervals. Used for inspecting the configured scheduling options.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/cron/simple-testing/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nwp_get_schedules()\n```\n\n----------------------------------------\n\nTITLE: Secure Internationalized String Output in PHP\nDESCRIPTION: A secure way to output internationalized strings in PHP using the esc_html_e() function, which escapes the translated text to prevent potential XSS attacks.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/security/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nesc_html_e( 'The REST API content endpoints were added in WordPress 4.7.', 'your-text-domain' );\n```\n\n----------------------------------------\n\nTITLE: AJAX Nonce Implementation\nDESCRIPTION: Shows how to include the WordPress nonce in the AJAX request data for security verification.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/ajax/index.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n_ajax_nonce: my_ajax_obj.nonce\n```\n\n----------------------------------------\n\nTITLE: Updating Featured Tags Option on Term Split in PHP\nDESCRIPTION: This code snippet demonstrates how to use the 'split_shared_term' hook to update a 'featured_tags' option when a shared term is split. It checks if the split term is a tag and updates the option accordingly.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/taxonomies/split-terms-wp-4-2/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Update featured_tags option when a shared term gets split.\n *\n * @param int    $term_id          ID of the formerly shared term.\n * @param int    $new_term_id      ID of the new term created for the $term_taxonomy_id.\n * @param int    $term_taxonomy_id ID for the term_taxonomy row affected by the split.\n * @param string $taxonomy         Taxonomy for the split term.\n */\nfunction wporg_featured_tags_split( int $term_id, int $new_term_id, int $term_taxonomy_id, string $taxonomy ): void {\n  // we only care about tags, so we'll first verify that the taxonomy is post_tag.\n  if ( 'post_tag' === $taxonomy ) {\n\n    // get the currently featured tags.\n    $featured_tags = get_option( 'featured_tags' );\n\n    // if the updated term is in the array, note the array key.\n    $found_term = array_search( $term_id, $featured_tags, true );\n    if ( false !== $found_term ) {\n\n      // the updated term is a featured tag! replace it in the array, save the new array.\n      $featured_tags[ $found_term ] = $new_term_id;\n      update_option( 'featured_tags', $featured_tags );\n    }\n  }\n}\nadd_action( 'split_shared_term', 'wporg_featured_tags_split', 10, 4 );\n```\n\n----------------------------------------\n\nTITLE: Required block.json Attributes\nDESCRIPTION: Mandatory attributes that must be included in a block plugin's block.json file for registration.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/block-specific-plugin-guidelines/index.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"\",\n  \"title\": \"\",\n  \"script\": \"\",\n  \"editorScript\": \"\",\n  \"style\": \"\",\n  \"editorStyle\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending AJAX Response in WordPress\nDESCRIPTION: This snippet demonstrates how to send a simple AJAX response in WordPress by echoing HTML content.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/enqueuing/index.md#2025-04-21_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\necho esc_html( $title ) . ' (' . $the_query->post_count . ') ';\n```\n\n----------------------------------------\n\nTITLE: Insecure Internationalized String Output in PHP\nDESCRIPTION: An example of insecure internationalized string output in PHP, which doesn't escape the translated text and could potentially lead to XSS vulnerabilities.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/security/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n_e( 'The REST API content endpoints were added in WordPress 4.7.', 'your-text-domain' );\n```\n\n----------------------------------------\n\nTITLE: AJAX Action Definition\nDESCRIPTION: Demonstrates how to specify the AJAX action identifier used to hook the server-side handler.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/javascript/ajax/index.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\naction: \"my_tag_count\"\n```\n\n----------------------------------------\n\nTITLE: Preparing Individual Comment Data for REST API Response\nDESCRIPTION: This function matches comment data to the defined schema, renaming fields for better understanding and applying filters where necessary.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/schema/index.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction prefix_rest_prepare_comment( $comment, $request ) {\n\t$comment_data = array();\n\n\t$schema = prefix_get_comment_schema( $request );\n\n\t// We are also renaming the fields to more understandable names.\n\tif ( isset( $schema['properties']['id'] ) ) {\n\t\t$comment_data['id'] = (int) $comment->comment_id;\n\t}\n\n\tif ( isset( $schema['properties']['author'] ) ) {\n\t\t$comment_data['author'] = (int) $comment->user_id;\n\t}\n\n\tif ( isset( $schema['properties']['content'] ) ) {\n\t\t$comment_data['content'] = apply_filters( 'comment_text', $comment->comment_content, $comment );\n\t}\n\n\treturn rest_ensure_response( $comment_data );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SVN Directory Structure\nDESCRIPTION: The default directory structure created for all SVN repositories in WordPress.org plugin hosting. Shows the three main directories: assets (for media files), tags (for releases), and trunk (for development).\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/how-to-use-subversion/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/assets/\n/tags/\n/trunk/\n```\n\n----------------------------------------\n\nTITLE: WordPress Video Shortcode\nDESCRIPTION: Shortcode for embedding a single video file in the WordPress editor\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/shortcodes/tinymce-enhanced-shortcodes/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[video]\n```\n\n----------------------------------------\n\nTITLE: Updating Related Posts Term ID for Pages on Term Split in PHP\nDESCRIPTION: This code snippet shows how to use the 'split_shared_term' hook to update the related posts term ID stored in post meta for pages when a term is split. It finds all pages with the old term ID and updates them with the new term ID.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/taxonomies/split-terms-wp-4-2/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Update related posts term ID for pages\n *\n * @param int    $term_id          ID of the formerly shared term.\n * @param int    $new_term_id      ID of the new term created for the $term_taxonomy_id.\n * @param int    $term_taxonomy_id ID for the term_taxonomy row affected by the split.\n * @param string $taxonomy         Taxonomy for the split term.\n */\nfunction wporg_page_related_posts_split( int $term_id, int $new_term_id, int $term_taxonomy_id, string $taxonomy ): void {\n  // find all the pages where meta_value matches the old term ID.\n  $page_ids = get_posts(\n    array(\n      'post_type'  => 'page',\n      'fields'     => 'ids',\n      'meta_key'   => 'meta_key',\n      'meta_value' => $term_id,\n    )\n  );\n\n  // if such pages exist, update the term ID for each page.\n  if ( $page_ids ) {\n    foreach ( $page_ids as $id ) {\n      update_post_meta( $id, 'meta_key', $new_term_id, $term_id );\n    }\n  }\n}\nadd_action( 'split_shared_term', 'wporg_page_related_posts_split', 10, 4 );\n```\n\n----------------------------------------\n\nTITLE: Checking Hook Execution Count with did_action()\nDESCRIPTION: Demonstrates how to use did_action() to ensure a callback function only runs once even if the hook it's attached to fires multiple times during execution.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/hooks/advanced-topics/index.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction wporg_custom() {\n  // If save_post has been run more than once, skip the rest of the code.\n  if ( did_action( 'save_post' ) !== 1 ) {\n    return;\n  }\n  // ...\n}\nadd_action( 'save_post', 'wporg_custom' );\n```\n\n----------------------------------------\n\nTITLE: Preparing REST API Response for Collection\nDESCRIPTION: This utility function prepares a response for inserting into a collection of responses, handling links and ensuring proper formatting.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/schema/index.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction prefix_prepare_for_collection( $response ) {\n\tif ( ! ( $response instanceof WP_REST_Response ) ) {\n\t\treturn $response;\n\t}\n\n\t$data = (array) $response->get_data();\n\t$server = rest_get_server();\n\n\tif ( method_exists( $server, 'get_compact_response_links' ) ) {\n\t\t$links = call_user_func( array( $server, 'get_compact_response_links' ), $response );\n\t} else {\n\t\t$links = call_user_func( array( $server, 'get_response_links' ), $response );\n\t}\n\n\tif ( ! empty( $links ) ) {\n\t\t$data['_links'] = $links;\n\t}\n\n\treturn $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Committing SVN Changes with Authentication in Bash\nDESCRIPTION: This command commits changes to the SVN repository with explicit username and password authentication.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/how-to-use-subversion/index.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsvn ci -m 'Adding first version of my plugin' --username your_username --password your_password\n```\n\n----------------------------------------\n\nTITLE: Example Block Name Registration Format\nDESCRIPTION: Examples of proper block name registration formats showing namespace conventions for block plugins.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/block-specific-plugin-guidelines/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"name: \\\"my-rainbow-block-plugin/rainbow\\\"\", or\n\"name: \\\"john-doe/rainbow\\\"\", or\n\"name: \\\"pluginco/rainbow\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Context-based Translation Example\nDESCRIPTION: Shows how to use _x() and _ex() for context-specific translations.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/how-to-internationalize-your-plugin/index.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n_x( 'Post', 'noun', 'my-plugin' );\n_x( 'Post', 'verb', 'my-plugin' );\n```\n\n----------------------------------------\n\nTITLE: Triggering WP-Cron using wget in Linux/MacOS crontab\nDESCRIPTION: This command uses wget to call the WordPress Cron script and delete the output after execution. It's suitable for use in a crontab entry on Linux or MacOS systems.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/cron/hooking-wp-cron-into-the-system-task-scheduler/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget --delete-after https://example.com/wp-cron.php\n```\n\n----------------------------------------\n\nTITLE: Tagging New Version in SVN Repository in Bash\nDESCRIPTION: These commands create a new tag for a version release in the SVN repository and commit the changes.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/how-to-use-subversion/index.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsvn cp trunk tags/2.0\nsvn ci -m \"tagging version 2.0\"\n```\n\n----------------------------------------\n\nTITLE: WordPress Content Directory Constants\nDESCRIPTION: Lists the core WordPress constants used for determining content and plugin directory paths. These constants should not be used directly by plugins but are provided for reference.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/determining-plugin-and-content-directories/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nWP_CONTENT_DIR  // no trailing slash, full paths only\nWP_CONTENT_URL  // full url \nWP_PLUGIN_DIR  // full path, no trailing slash\nWP_PLUGIN_URL  // full url, no trailing slash\n\n// Available per default in MS, not set in single site install\n// Can be used in single site installs (as usual: at your own risk)\nUPLOADS // (If set, uploads folder, relative to ABSPATH) (for e.g.: /wp-content/uploads)\n```\n\n----------------------------------------\n\nTITLE: Combining PHPDoc and WordPress Plugin Headers in PHP\nDESCRIPTION: Shows how to combine file-level PHPDoc DocBlock with WordPress plugin file headers, including package information, copyright, and license details alongside standard plugin header fields.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/header-requirements/index.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Plugin Name\n *\n * @package           PluginPackage\n * @author            Your Name\n * @copyright         2019 Your Name or Company Name\n * @license           GPL-2.0-or-later\n *\n * @wordpress-plugin\n * Plugin Name:       Plugin Name\n * Plugin URI:        https://example.com/plugin-name\n * Description:       Description of the plugin.\n * Version:           1.0.0\n * Requires at least: 5.2\n * Requires PHP:      7.2\n * Author:            Your Name\n * Author URI:        https://example.com\n * Text Domain:       plugin-slug\n * License:           GPL v2 or later\n * License URI:       https://www.gnu.org/licenses/gpl-2.0.txt\n */\n```\n\n----------------------------------------\n\nTITLE: Defining WordPress Plugin Domain Path Header\nDESCRIPTION: Example showing how to specify the translation files location using Domain Path in plugin header.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/how-to-internationalize-your-plugin/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n/*\n * Plugin Name: My Plugin\n * Author: Plugin Author\n * Text Domain: my-plugin\n * Domain Path: /languages\n */\n```\n\n----------------------------------------\n\nTITLE: WordPress Caption Shortcode\nDESCRIPTION: Shortcode for wrapping images with captions in a div container with proper caption styling\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/shortcodes/tinymce-enhanced-shortcodes/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[caption]\n```\n\n----------------------------------------\n\nTITLE: WordPress Playlist Shortcode\nDESCRIPTION: Shortcode for creating an HTML5 playlist with multiple media files\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/shortcodes/tinymce-enhanced-shortcodes/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[playlist]\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum Required WordPress Plugin Header in PHP\nDESCRIPTION: Demonstrates the minimum required header comment for a WordPress plugin, which includes only the Plugin Name field.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/plugin-basics/header-requirements/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/*\n * Plugin Name: YOUR PLUGIN NAME\n */\n```\n\n----------------------------------------\n\nTITLE: WordPress Gallery Shortcode\nDESCRIPTION: Shortcode for creating an image gallery with multiple embedded images in a div container\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/shortcodes/tinymce-enhanced-shortcodes/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[gallery]\n```\n\n----------------------------------------\n\nTITLE: Creating a WP_REST_Request Instance for GET Request\nDESCRIPTION: Example of manually creating a WP_REST_Request object for a GET request to a specific endpoint. This shows the basic syntax for instantiating a request object with method and route parameters.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/requests/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$request = new WP_REST_Request( 'GET', '/my-namespace/v1/examples' );\n```\n\n----------------------------------------\n\nTITLE: Formatting Search Results with Translation in PHP\nDESCRIPTION: Example of using printf() with gettext function to properly format and translate search result strings with variables.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/how-to-internationalize-your-plugin/index.md#2025-04-21_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nprintf(\n  __( 'Search results for: %s', 'my-plugin' ),\n  get_search_query()\n);\n```\n\n----------------------------------------\n\nTITLE: Defining WordPress Plugin Text Domain Header\nDESCRIPTION: Example of adding text domain in plugin header for internationalization support.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/how-to-internationalize-your-plugin/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/* \n * Plugin Name: My Plugin\n * Author: Plugin Author\n * Text Domain: my-plugin\n */\n```\n\n----------------------------------------\n\nTITLE: Removing WordPress Shortcode Function Signature\nDESCRIPTION: Function signature for removing a registered shortcode using remove_shortcode(). Takes the shortcode tag string as a parameter.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/shortcodes/basic-shortcodes/index.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nremove_shortcode(\n  string $tag\n);\n```\n\n----------------------------------------\n\nTITLE: Compiling .mo Files from .po Files using msgfmt\nDESCRIPTION: A command-line instruction for safely compiling .mo binary files from .po files using the msgfmt tool, ensuring the integrity of the compiled translations.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/security/index.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nmsgfmt -cv -o /path/to/output.mo /path/to/input.po\n```\n\n----------------------------------------\n\nTITLE: Basic Pluralization Example\nDESCRIPTION: Demonstrates how to handle plural forms using _n() function.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/how-to-internationalize-your-plugin/index.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nprintf(\n  _n(\n    '%s comment',\n    '%s comments',\n    get_comments_number(),\n    'my-plugin'\n  ),\n  number_format_i18n( get_comments_number() )\n);\n```\n\n----------------------------------------\n\nTITLE: Defining an Enclosing Shortcode in WordPress\nDESCRIPTION: This snippet demonstrates the basic structure of an enclosing shortcode in WordPress. It shows how to enclose content within a shortcode tag.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/shortcodes/enclosing-shortcodes/index.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n[wporg]content to manipulate[/wporg]\n```\n\n----------------------------------------\n\nTITLE: Translation with Description Comments\nDESCRIPTION: Example of adding translator comments for complex strings.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/how-to-internationalize-your-plugin/index.md#2025-04-21_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n/* translators: draft saved date format, see http://php.net/date */\n$saved_date_format = __( 'g:i:s a' );\n```\n\n----------------------------------------\n\nTITLE: Triggering WP-Cron using PowerShell in Windows Task Scheduler\nDESCRIPTION: This PowerShell command can be used in Windows Task Scheduler to trigger the WordPress Cron script via an HTTP request. It should be configured as a basic task with appropriate timing settings.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/cron/hooking-wp-cron-into-the-system-task-scheduler/index.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npowershell \"Invoke-WebRequest http://YOUR_SITE_URL/wp-cron.php\"\n```\n\n----------------------------------------\n\nTITLE: Committing SVN Changes with Message in Bash\nDESCRIPTION: This command commits changes to the SVN repository with a descriptive message.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/how-to-use-subversion/index.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsvn ci -m \"fancy new feature: now you can foo *and* bar at the same time\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cron Events with _get_cron_array()\nDESCRIPTION: Core WordPress function that returns an array of all scheduled cron events in the system. Used for inspecting the raw list of scheduled tasks.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/cron/simple-testing/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n_get_cron_array()\n```\n\n----------------------------------------\n\nTITLE: Navigating to Local SVN Directory in Bash\nDESCRIPTION: This command changes the current directory to the local copy of the SVN repository.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/how-to-use-subversion/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd my-local-dir\n```\n\n----------------------------------------\n\nTITLE: Checking SVN Status and Differences in Bash\nDESCRIPTION: These commands check the status of the local SVN copy and display differences between local and central repository versions.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/how-to-use-subversion/index.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsvn stat\nsvn diff\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid JSON Data Structure\nDESCRIPTION: This snippet shows an example of JSON data that is syntactically valid but semantically incorrect, highlighting the need for schema validation.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/schema/index.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"shouldBeArray\": 'LOL definitely not an array',\n    \"shouldBeInteger\": ['lolz', 'you', 'need', 'schema'],\n    \"shouldBeString\": 123456789\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Out WordPress Plugin SVN Repository in Bash\nDESCRIPTION: This command checks out the pre-built SVN repository for a WordPress plugin, creating a local copy with trunk, branches, and tags directories.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/how-to-use-subversion/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsvn co https://plugins.svn.wordpress.org/your-plugin-name my-local-dir\n```\n\n----------------------------------------\n\nTITLE: Windows Translation Command Execution\nDESCRIPTION: Command to execute the PO to MO conversion script on Windows using Cygwin.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/localization/index.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd C:/path/to/language/folder/my-plugin/languages & C:/cygwin/bin/bash -c /cygdrive/c/path/to/script/directory/potomo.sh\n```\n\n----------------------------------------\n\nTITLE: Demonstrating i18n Abbreviation\nDESCRIPTION: Shows the internationalization abbreviation i18n in code format\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ni18n\n```\n\n----------------------------------------\n\nTITLE: Adding Files to SVN Repository in Bash\nDESCRIPTION: These commands add new files to the SVN repository and commit the changes with a message.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/how-to-use-subversion/index.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd my-local-dir\nsvn add trunk/*\nsvn ci -m 'Adding first version of my plugin'\n```\n\n----------------------------------------\n\nTITLE: Referencing WordPress Users Table in Markdown\nDESCRIPTION: This snippet shows how to reference the WordPress users table in markdown format. It's used to indicate where user data is stored in the WordPress database.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/users/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`users`\n```\n\n----------------------------------------\n\nTITLE: Windows Batch Translation Script\nDESCRIPTION: Shell script for converting PO files to MO format on Windows systems using Cygwin.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/localization/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#! /bin/sh\n# Find PO files, process each with msgfmt and rename the result to MO\nfor file in `/usr/bin/find . -name '*.po'` ; do /usr/bin/msgfmt -o ${file/.po/.mo} $file ; done\n```\n\n----------------------------------------\n\nTITLE: Creating Local Directory for SVN Repository in Bash\nDESCRIPTION: This command creates a new local directory to house a copy of the SVN repository for a WordPress plugin.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/how-to-use-subversion/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-local-dir\n```\n\n----------------------------------------\n\nTITLE: Updating Local SVN Copy in Bash\nDESCRIPTION: This command updates the local copy of the SVN repository to match the central repository.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/how-to-use-subversion/index.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd my-local-dir/\nsvn up\n```\n\n----------------------------------------\n\nTITLE: Text Editor Translation Example\nDESCRIPTION: Example showing the format of translation strings in a PO file before and after translation to German.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/localization/index.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#: plugin-name.php:123\nmsgid \"Page Title\"\nmsgstr \"\"\n```\n\nLANGUAGE: text\nCODE:\n```\n#: plugin-name.php:123\nmsgid \"Page Title\"\nmsgstr \"Seitentitel\"\n```\n\n----------------------------------------\n\nTITLE: Unix Batch MO File Generation\nDESCRIPTION: Bash script for batch converting multiple PO files to MO format recursively.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/localization/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfor file in `find . -name \"*.po\"` ; do msgfmt -o ${file/.po/.mo} $file ; done\n```\n\n----------------------------------------\n\nTITLE: Unix MO File Generation Command\nDESCRIPTION: Command line instruction for generating MO files from PO files on Unix systems using msgfmt.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/internationalization/localization/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmsgfmt -o filename.mo filename.po\n```\n\n----------------------------------------\n\nTITLE: Registering WordPress REST API Routes\nDESCRIPTION: Function to register custom REST API routes by instantiating the controller class and calling its register_routes method. This is hooked into the rest_api_init action.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/rest-api/controller-classes/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Function to register our new routes from the controller.\nfunction prefix_register_my_rest_routes() {\n\t$controller = new My_REST_Posts_Controller();\n\t$controller->register_routes();\n}\n\nadd_action( 'rest_api_init', 'prefix_register_my_rest_routes' );\n```\n\n----------------------------------------\n\nTITLE: Filtering WordPress Plugin Update Requests\nDESCRIPTION: Implements a filter to intercept and modify WordPress plugin update requests, removing the current plugin from the list of plugins to be checked for updates. This method works for older versions of WordPress.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/preventing-wordpress-from-updating-your-external-plugin/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction example_hidden_plugin_12345( $r, $url ) {\n    if ( 0 !== strpos( $url, 'https://api.wordpress.org/plugins/update-check' ) )\n        return $r; // Not a plugin update request. Bail immediately.\n\n    $plugins = unserialize( $r['body']['plugins'] );\n    unset( $plugins->plugins[ plugin_basename( __FILE__ ) ] );\n    unset( $plugins->active[ array_search( plugin_basename( __FILE__ ), $plugins->active ) ] );\n    $r['body']['plugins'] = serialize( $plugins );\n    return $r;\n}\n\nadd_filter( 'http_request_args', 'example_hidden_plugin_12345', 5, 2 );\n```\n\n----------------------------------------\n\nTITLE: Plugin Team Contact Information\nDESCRIPTION: Email contact information for the WordPress Plugin Review team.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/plugin-developer-faq/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nplugins@wordpress.org\n```\n\n----------------------------------------\n\nTITLE: Markdown Alert Block for Plugin Adoption Process\nDESCRIPTION: A markdown alert block used to highlight that not all plugin adoption requests will be approved, even after a successful review.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/wordpress-org/take-over-an-existing-plugin/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[alert]Not all requests will be approved, even following a successful review.[/alert]\n```\n\n----------------------------------------\n\nTITLE: Registering Privacy Erasers in WordPress Plugin using PHP\nDESCRIPTION: This function registers the personal data eraser callback for a WordPress plugin. It uses the 'wp_privacy_personal_data_erasers' filter to add the eraser to the list of available erasers.\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/privacy/adding-the-personal-data-eraser-to-your-plugin/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Registers all data erasers.\n *\n * @param array $exporters\n *\n * @return mixed\n */\nfunction wporg_register_privacy_erasers( $erasers ) {\n  $erasers['my-plugin-slug'] = array(\n    'eraser_friendly_name' => __( 'Comment Location Plugin', 'text-domain' ),\n    'callback'             => 'wporg_remove_location_meta_from_comments_for_email',\n  );\n  return $erasers;\n}\n\nadd_filter( 'wp_privacy_personal_data_erasers', 'wporg_register_privacy_erasers' );\n```\n\n----------------------------------------\n\nTITLE: WordPress Audio Shortcode\nDESCRIPTION: Shortcode for embedding a single audio file in the WordPress editor\nSOURCE: https://github.com/wordpress/developer-plugins-handbook/blob/main/shortcodes/tinymce-enhanced-shortcodes/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[audio]\n```"
  }
]