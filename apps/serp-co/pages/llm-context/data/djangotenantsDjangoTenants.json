[
  {
    "owner": "django-tenants",
    "repo": "django-tenants",
    "content": "TITLE: Configuring Database Engine for Django-Tenants\nDESCRIPTION: Database configuration setting to use django-tenants PostgreSQL backend.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/install.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    'default': {\n        'ENGINE': 'django_tenants.postgresql_backend',\n        # ..\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Django Tenants Middleware\nDESCRIPTION: Adds the TenantMainMiddleware to the MIDDLEWARE setting in Django. This middleware is responsible for setting the correct schema for each request.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nMIDDLEWARE = (\n    'django_tenants.middleware.main.TenantMainMiddleware',\n    #...\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Public Tenant in Django-Tenants\nDESCRIPTION: This snippet demonstrates how to create a public tenant using the Client model. It sets up the main website by creating a tenant with the 'public' schema name and associates a domain with it.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom customers.models import Client, Domain\n\n# create your public tenant\ntenant = Client(schema_name='public',\n                name='Schemas Inc.',\n                paid_until='2016-12-05',\n                on_trial=False)\ntenant.save()\n\n# Add one or more domains for the tenant\ndomain = Domain()\ndomain.domain = 'my-domain.com' # don't add your port or www here! on a local server you'll want to use localhost here\ndomain.tenant = tenant\ndomain.is_primary = True\ndomain.save()\n```\n\n----------------------------------------\n\nTITLE: Creating Tenant and Domain Models\nDESCRIPTION: Example implementation of tenant and domain models using TenantMixin and DomainMixin.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/install.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django_tenants.models import TenantMixin, DomainMixin\n\nclass Client(TenantMixin):\n    name = models.CharField(max_length=100)\n    paid_until =  models.DateField()\n    on_trial = models.BooleanField()\n    created_on = models.DateField(auto_now_add=True)\n\n    # default true, schema will be automatically created and synced when it is saved\n    auto_create_schema = True\n\nclass Domain(DomainMixin):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Router for Django Tenants\nDESCRIPTION: Adds the TenantSyncRouter to the DATABASE_ROUTERS setting. This router ensures that the correct apps are synced depending on whether they are shared or tenant-specific.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/README.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDATABASE_ROUTERS = (\n    'django_tenants.routers.TenantSyncRouter',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Tenant and Domain Models\nDESCRIPTION: Defines the Client (tenant) and Domain models using the TenantMixin and DomainMixin from django_tenants. These models are used to manage tenants and their associated domains.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/README.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django_tenants.models import TenantMixin, DomainMixin\n\nclass Client(TenantMixin):\n    name = models.CharField(max_length=100)\n    paid_until = models.DateField()\n    on_trial = models.BooleanField()\n    created_on = models.DateField(auto_now_add=True)\n\nclass Domain(DomainMixin):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant and Domain Models in Settings\nDESCRIPTION: Specifies the tenant and domain models in the Django settings file. This tells django-tenants which models to use for managing tenants and domains.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/README.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nTENANT_MODEL = \"customers.Client\" # app.Model\nTENANT_DOMAIN_MODEL = \"customers.Domain\" # app.Model\n```\n\n----------------------------------------\n\nTITLE: Creating First Real Tenant in Django-Tenants\nDESCRIPTION: This code creates the first real tenant using the Client model. It sets up a tenant with a custom schema name, associates a domain with it, and automatically triggers schema migration.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom customers.models import Client, Domain\n\n# create your first real tenant\ntenant = Client(schema_name='tenant1',\n                name='Fonzy Tenant',\n                paid_until='2014-12-05',\n                on_trial=True)\ntenant.save() # migrate_schemas automatically called, your tenant is ready to be used!\n\n# Add one or more domains for the tenant\ndomain = Domain()\ndomain.domain = 'tenant.my-domain.com' # don't add your port or www here!\ndomain.tenant = tenant\ndomain.is_primary = True\ndomain.save()\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving Tenant and Domain Instances\nDESCRIPTION: Demonstrates how to create and save instances of the Client (tenant) and Domain models. This process automatically creates and syncs the schema for the new tenant.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/README.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom customers.models import Client, Domain\n\n# create your public tenant\ntenant = Client(schema_name='tenant1',\n                name='My First Tenant',\n                paid_until='2014-12-05',\n                on_trial=True)\ntenant.save()\n\n# Add one or more domains for the tenant\ndomain = Domain()\ndomain.domain = 'tenant.my-domain.com'\ndomain.tenant = tenant\ndomain.is_primary = True\ndomain.save()\n```\n\n----------------------------------------\n\nTITLE: Using Schema Context in Django-Tenants\nDESCRIPTION: This snippet demonstrates the usage of the schema_context utility function. It allows executing database queries against a specific schema using a context manager or decorator.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django_tenants.utils import schema_context\n\nwith schema_context(schema_name):\n    # All commands here are ran under the schema `schema_name`\n\n# Restores the `SEARCH_PATH` to its original value\n\n@schema_context(schema_name)\ndef my_func():\n  # All commands in this function are ran under the schema `schema_name`\n```\n\n----------------------------------------\n\nTITLE: Using Tenant Context in Django-Tenants\nDESCRIPTION: This code shows how to use the tenant_context utility function. It allows executing commands under a specific tenant's schema using a context manager or decorator.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django_tenants.utils import tenant_context\n\nwith tenant_context(tenant):\n    # All commands here are ran under the schema from the `tenant` object\n\n# Restores the `SEARCH_PATH` to its original value\n\n@tenant_context(tenant)\ndef my_func():\n  # All commands in this function are ran under the schema from the `tenant` object\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Engine for Django Tenants\nDESCRIPTION: Sets up the database engine in Django settings to use the django-tenants PostgreSQL backend. This is required for the library to function properly.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    'default': {\n        'ENGINE': 'django_tenants.postgresql_backend',\n        # ..\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Django-Tenants Signals\nDESCRIPTION: This code demonstrates how to handle various signals provided by django-tenants. It includes examples of connecting to signals like schema_needs_to_be_sync, post_schema_sync, schema_pre_migration, schema_migrated, and schema_migrate_message.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@receiver(schema_needs_to_be_sync, sender=TenantMixin)\ndef created_user_client_in_background(sender, **kwargs):\n    client = kwargs['tenant']\n    print (\"created_user_client_in_background %s\" % client.schema_name)\n    from clients.tasks import setup_tenant\n    task = setup_tenant.delay(client)\n\n@receiver(post_schema_sync, sender=TenantMixin)\ndef created_user_client(sender, **kwargs):\n\n    client = kwargs['tenant']\n\n    # send email to client to as tenant is ready to use\n\n@receiver(schema_pre_migration, sender=run_migrations)\ndef handle_schema_pre_migration(sender, **kwargs):\n    schema_name = kwargs['schema_name']\n\n    # write some logs\n\n@receiver(schema_migrated, sender=run_migrations)\ndef handle_schema_migrated(sender, **kwargs):\n    schema_name = kwargs['schema_name']\n\n    # recreate materialized views in the schema\n\n@receiver(schema_migrate_message, sender=run_migrations)\ndef handle_schema_migrate_message(**kwargs):\n    message = kwargs['message']\n    # recreate materialized views in the schema\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared and Tenant Apps\nDESCRIPTION: Settings configuration for defining shared and tenant-specific applications.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/install.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nSHARED_APPS = (\n    'django_tenants',  # mandatory\n    'customers', # you must list the app where your tenant model resides in\n\n    'django.contrib.contenttypes',\n\n    # everything below here is optional\n    'django.contrib.auth',\n    'django.contrib.sessions',\n    'django.contrib.sites',\n    'django.contrib.messages',\n    'django.contrib.admin',\n)\n\nTENANT_APPS = (\n    # your tenant-specific apps\n    'myapp.hotels',\n    'myapp.houses',\n)\n\nINSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant-Aware Caching in Django Tenants\nDESCRIPTION: This snippet demonstrates how to set up tenant-aware caching with django-tenants. It uses the make_key helper function to add the tenant's schema_name as the first key prefix, enabling proper cache isolation between tenants.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/install.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        ...\n        'KEY_FUNCTION': 'django_tenants.cache.make_key',\n        'REVERSE_KEY_FUNCTION': 'django_tenants.cache.reverse_key',\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant and Domain Model Paths\nDESCRIPTION: Configuration settings for specifying the location of tenant and domain models.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/install.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nTENANT_MODEL = \"customers.Client\" # app.Model\n\nTENANT_DOMAIN_MODEL = \"customers.Domain\"  # app.Model\n```\n\n----------------------------------------\n\nTITLE: Creating a New Tenant Schema\nDESCRIPTION: Using create_tenant command to create a new tenant schema with specified domain and other tenant information.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py create_tenant --domain-domain=newtenant.net --schema_name=new_tenant --name=new_tenant --description=\"New tenant\"\n```\n\n----------------------------------------\n\nTITLE: Using Tenant Migration Decorator in Django-Tenants\nDESCRIPTION: This snippet demonstrates the usage of the @tenant_migration decorator. It allows data migrations to be executed specifically under a tenant or public schema for apps in both tenant and public INSTALLED_APPS.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# <users/migrations/0012_datamigration.py>\nfrom django.db import migrations\nfrom django_tenants.utils import tenant_migration\n\n@tenant_migration\ndef create_dummy_users(apps, schema_editor):\n    User = apps.get_model(\"users\", \"User\")\n    User.objects.get_or_create(username='test_user1', email='test_user1@gmail.com')\n    # creates user only in tenant schemas if migration is in app available in both public/tenant schemas\n```\n\n----------------------------------------\n\nTITLE: Running Django Tenants Example with Docker Compose\nDESCRIPTION: Series of commands to start and configure the django-tenants tutorial using Docker Compose. This includes starting the container, migrating the database, creating a tenant, and running the development server.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/examples.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose run -p 8088:8088 web bash\n\ncd examples/tenant_tutorial\n\npython manage.py migrate\n\npython manage.py create_tenant\n\npython manage.py runserver 0.0.0.0:8088\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Type Tenants in Django-Tenants Settings\nDESCRIPTION: This snippet shows the configuration required in the settings file to enable multi-type tenants. It defines different tenant types with their respective apps and URL configurations.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nHAS_MULTI_TYPE_TENANTS = True\nMULTI_TYPE_DATABASE_FIELD = 'type'  # or whatever the name you call the database field\n\nTENANT_TYPES = {\n    \"public\": {  # this is the name of the public schema from get_public_schema_name\n        \"APPS\": ['django_tenants',\n                 'django.contrib.admin',\n                 'django.contrib.auth',\n                 'django.contrib.contenttypes',\n                 'django.contrib.sessions',\n                 'django.contrib.messages',\n                 'django.contrib.staticfiles',\n                  # shared apps here\n                  ],\n        \"URLCONF\": \"tenant_multi_types_tutorial.urls_public\", # url for the public type here\n    },\n    \"type1\": {\n        \"APPS\": ['django.contrib.contenttypes',\n                 'django.contrib.auth',\n                 'django.contrib.admin',\n                 'django.contrib.sessions',\n                 'django.contrib.messages',\n                 # type1 apps here\n                 ],\n        \"URLCONF\": \"tenant_multi_types_tutorial.urls_type1\",\n    },\n    \"type2\": {\n        \"APPS\": ['django.contrib.contenttypes',\n                 'django.contrib.auth',\n                 'django.contrib.admin',\n                 'django.contrib.sessions',\n                 'django.contrib.messages',\n                 # type1 apps here\n                 ],\n        \"URLCONF\": \"tenant_multi_types_tutorial.urls_type2\",\n    }\n}\n\nINSTALLED_APPS = []\nfor schema in TENANT_TYPES:\n    INSTALLED_APPS += [app for app in TENANT_TYPES[schema][\"APPS\"] if app not in INSTALLED_APPS]\n\nROOT_URLCONF = ''\n```\n\n----------------------------------------\n\nTITLE: Implementing Tenant Admin Interface\nDESCRIPTION: Example of admin class registration for tenant model using TenantAdminMixin.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/install.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django_tenants.admin import TenantAdminMixin\n\nfrom myapp.models import Client\n\n@admin.register(Client)\nclass ClientAdmin(TenantAdminMixin, admin.ModelAdmin):\n        list_display = ('name', 'paid_until')\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant Middleware\nDESCRIPTION: Adding the tenant middleware to handle schema selection per request.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/install.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nMIDDLEWARE = (\n    'django_tenants.middleware.main.TenantMainMiddleware',\n    #...\n)\n```\n\n----------------------------------------\n\nTITLE: Running Tenant Migrations in Parallel\nDESCRIPTION: Using the multiprocessing executor to run tenant migrations in parallel for improved performance.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py migrate_schemas --executor=multiprocessing\n```\n\n----------------------------------------\n\nTITLE: Running Code Across All Tenants\nDESCRIPTION: Utility code to execute specific operations across all tenants in the system using tenant context manager.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nfrom django_tenants.utils import tenant_context, get_tenant_model\n\nfor tenant in get_tenant_model().objects.all():\n    with tenant_context(tenant):\n        pass\n        # do whatever you want in that tenant\n```\n\n----------------------------------------\n\nTITLE: Running Command on Specific Tenant\nDESCRIPTION: Using tenant_command to run any Django management command on a specific tenant schema.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py tenant_command loaddata\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tenant from Request in Django\nDESCRIPTION: Shows how to access the tenant object using the request object in django-tenants. Returns None if no tenant is found.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom django_tenants.utils import get_tenant\n...\ntenant = get_tenant(request)\n```\n\n----------------------------------------\n\nTITLE: Creating Superuser for Specific Tenant\nDESCRIPTION: Using create_tenant_superuser command to create a superuser account for a specific tenant schema.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py create_tenant_superuser --username=admin --schema=customer1\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant-Specific Media File Storage\nDESCRIPTION: Setting up TenantFileSystemStorage to handle user-uploaded files so that each tenant will have a dedicated sub-directory for storing their media files.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/files.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# in settings.py\n\nDEFAULT_FILE_STORAGE = \"django_tenants.files.storage.TenantFileSystemStorage\"\n\nMULTITENANT_RELATIVE_MEDIA_ROOT = \"\"  # (default: create sub-directory for each tenant)\n```\n\n----------------------------------------\n\nTITLE: Running Initial Schema Migration\nDESCRIPTION: Command to create shared apps on the public schema.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/install.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py migrate_schemas --shared\n```\n\n----------------------------------------\n\nTITLE: Running Migrate Schemas Command for All Tenants\nDESCRIPTION: Basic usage of the migrate_schemas command to apply migrations to all tenant schemas.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py migrate_schemas\n```\n\n----------------------------------------\n\nTITLE: Running Migrate Schemas Command for Specific Tenant\nDESCRIPTION: Example of running the migrate_schemas command for a specific tenant schema using the --schema option.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py migrate_schemas --schema=customer1\n```\n\n----------------------------------------\n\nTITLE: Project Layout Structure for Tenant-Aware File Handling\nDESCRIPTION: A recommended project directory structure for organizing tenant-specific static files, templates, and media files alongside system-wide resources.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/files.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nabsolute/path/to/your_project_dir\n    ...\n    static              # System-wide static files\n    templates           # System-wide templates\n    # Tenant-specific files below will override pre-existing system-wide files with same name.\n    tenants\n        tenant_1        # Static files / templates for tenant_1\n            templates\n            static\n        tenant_2        # Static files / templates for tenant_2\n            templates\n            static\n    media               # Created automatically when users upload files\n        tenant_1\n        tenant_2\nstaticfiles             # Created automatically when collectstatic_schemas is run\n    tenant_1\n    tenant_2\n    ...\n```\n\n----------------------------------------\n\nTITLE: Excluding Public Tenant from Migrations\nDESCRIPTION: Using the --tenant flag with migrate_schemas to run migrations on all tenants except the public schema.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py migrate_schemas --tenant\n```\n\n----------------------------------------\n\nTITLE: Adding Type Field to Tenant Model for Multi-Type Tenants\nDESCRIPTION: This code snippet shows how to add a 'type' field to the Client model to support multi-type tenants. It uses the get_tenant_type_choices function to populate the choices for the field.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django_tenants.utils import get_tenant_type_choices\n\nclass Client(TenantMixin):\n    type = models.CharField(max_length=100, choices=get_tenant_type_choices())\n```\n\n----------------------------------------\n\nTITLE: Running Migrations on Single Tenant with Migrate Command\nDESCRIPTION: Alternative approach to run migrations on a single tenant using the standard migrate command with --schema option.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py migrate --schema=\"demo\"\n```\n\n----------------------------------------\n\nTITLE: Creating Public Tenant\nDESCRIPTION: Command to create the initial public tenant in the multi-tenant setup.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py create_tenant\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache for Subdomain Routing with Django Tenants\nDESCRIPTION: This Apache configuration routes all subdomains to the Django project implementing django-tenants. It uses ServerAlias with wildcard notation to capture all possible subdomains without manual setup.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/install.rst#2025-04-22_snippet_14\n\nLANGUAGE: apacheconf\nCODE:\n```\n<VirtualHost 127.0.0.1:8080>\n    ServerName mywebsite.com\n    ServerAlias *.mywebsite.com mywebsite.com\n    WSGIScriptAlias / \"/path/to/django/scripts/mywebsite.wsgi\"\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Installing Django-Tenants Package\nDESCRIPTION: Command to install django-tenants via pip package manager.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/install.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install django-tenants\n```\n\n----------------------------------------\n\nTITLE: Adding Domain to an Existing Tenant\nDESCRIPTION: Using create_domain command to add a new domain to an existing tenant with various option formats.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py create_domain     \n./manage.py create_domain --schema_name=tenant1 --domain-domain=tenant1.my-domain.com\n./manage.py create_domain -s=tenant1 -d=tenant1.my-domain.com --is_primary=True --no-input\n```\n\n----------------------------------------\n\nTITLE: Running Command on All Tenant Schemas\nDESCRIPTION: Using all_tenants_command to run a management command on every tenant schema in the system.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py all_tenants_command loaddata\n```\n\n----------------------------------------\n\nTITLE: Renaming a Tenant Schema\nDESCRIPTION: Using rename_schema command to change the name of an existing schema and update the associated client record.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py rename_schema\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant-Aware Static Files Storage\nDESCRIPTION: Setting up TenantStaticFilesStorage to handle the collection of static files for each tenant separately when collectstatic is run.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/files.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# in settings.py\n\nSTATICFILES_STORAGE = \"django_tenants.staticfiles.storage.TenantStaticFilesStorage\"\n\nMULTITENANT_RELATIVE_STATIC_ROOT = \"\"  # (default: create sub-directory for each tenant)\n```\n\n----------------------------------------\n\nTITLE: Customizing Tenant-Specific Static File Storage Paths\nDESCRIPTION: Example of configuring custom target directories for static files using string formatting with schema_name.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/files.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# in settings.py\n\nSTATIC_ROOT = \"absolute/path/to/your_project_dir/staticfiles\"\n\nMULTITENANT_RELATIVE_STATIC_ROOT = \"tenants/%s\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant-Aware Logging in Django\nDESCRIPTION: Setting up logging configuration to include tenant context information (schema_name and domain_url) in log messages.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\nLOGGING = {\n    'filters': {\n        'tenant_context': {\n            '()': 'django_tenants.log.TenantContextFilter'\n        },\n    },\n    'formatters': {\n        'tenant_context': {\n            'format': '[%(schema_name)s:%(domain_url)s] '\n            '%(levelname)-7s %(asctime)s %(message)s',\n        },\n    },\n    'handlers': {\n        'console': {\n            'filters': ['tenant_context'],\n```\n\n----------------------------------------\n\nTITLE: Exporting Database for Single to Multi-Tenant Migration\nDESCRIPTION: Command to export all data from existing single-tenant database in JSON format with proper indentation.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py dumpdata --all --indent 2 > database.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant-Aware Template Loaders\nDESCRIPTION: Setting up a tenant-aware template loader that looks for templates in tenant-specific directories first before falling back to the standard template locations.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/files.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        ...\n        \"DIRS\": [\"absolute/path/to/your_project_dir/templates\"],  # -> Dirs used by the standard template loader\n        \"OPTIONS\": {\n            ...\n            \"loaders\": [\n                \"django_tenants.template.loaders.filesystem.Loader\",  # Must be first\n                \"django.template.loaders.filesystem.Loader\",\n                \"django.template.loaders.app_directories.Loader\",\n            ],\n            ...\n        ...\n    }\n]\n\nMULTITENANT_TEMPLATE_DIRS = [\n    \"absolute/path/to/your_project_dir/tenants/%s/templates\"\n]\n```\n\n----------------------------------------\n\nTITLE: Loading Data into Multi-Tenant Database\nDESCRIPTION: Command to import previously exported JSON data into the new PostgreSQL multi-tenant database.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py loaddata --format json database.json\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tenant Commands in Django\nDESCRIPTION: Example of creating a custom management command that runs on tenant schemas by inheriting from BaseTenantCommand.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django_tenants.management.commands import BaseTenantCommand\n# rest of your imports\n\nclass Command(BaseTenantCommand):\n    COMMAND_NAME = 'awesome command'\n    # rest of your command\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Debug Toolbar URLs\nDESCRIPTION: Code to add django-debug-toolbar URLs to both public and tenant URL configurations when in debug mode.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.conf.urls import include\n\nif settings.DEBUG:\n    import debug_toolbar\n\n    urlpatterns += patterns(\n        '',\n        url(r'^__debug__/', include(debug_toolbar.urls)),\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Finders for Tenant-Specific Static Files\nDESCRIPTION: Configuring Django settings to use the TenantFileSystemFinder, which searches for tenant-specific static files before falling back to system-wide files.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/files.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# in settings.py\n\nSTATICFILES_FINDERS = [\n    \"django_tenants.staticfiles.finders.TenantFileSystemFinder\",  # Must be first\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n    \"compressor.finders.CompressorFinder\",\n]\n\n# or this way\n\nSTATICFILES_FINDERS.insert(0, \"django_tenants.staticfiles.finders.TenantFileSystemFinder\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Set Tenant Method\nDESCRIPTION: Setting up a custom method to be called when switching between tenants, useful for tasks like configuring read replicas.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nEXTRA_SET_TENANT_METHOD_PATH = 'tenant_multi_types_tutorial.set_tenant_utils.extra_set_tenant_stuff'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tenant-Specific Static File Directories\nDESCRIPTION: Configuring the MULTITENANT_STATICFILES_DIRS setting to tell TenantFileSystemFinder where to look for tenant-specific static files. The %s placeholder will be replaced with the tenant's schema_name.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/files.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# in settings.py\n\nMULTITENANT_STATICFILES_DIRS = [\n    os.path.join( \"absolute/path/to/your_project_dir\", \"tenants/%s/static\" ),\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Extra Set Tenant Method\nDESCRIPTION: Example implementation of a custom method called when switching tenants, taking the database wrapper and tenant as parameters.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ndef extra_set_tenant_stuff(wrapper_class, tenant):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Deleting a Tenant Schema\nDESCRIPTION: Using delete_tenant command to remove a tenant and its associated PostgreSQL schema from the database.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py delete_tenant\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Migration Executor Function\nDESCRIPTION: Example implementation of a custom function that returns a MigrationExecutor class based on a codename parameter.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom .custom_migration_executors import CustomMigrationExecutor\nfrom django_tenants.migrate_executors.standard import StandardExecutor\n\ndef get_custom_executor(codename=None):\n    codename = codename or os.environ.get('EXECUTOR', StandardExecutor.codename)\n\n    for klass in MigrationExecutor.__subclasses__():\n        if klass.codename == codename:\n            return klass\n\n    raise NotImplementedError('No executor with codename %s' % codename)\n```\n\n----------------------------------------\n\nTITLE: Cloning a Tenant Schema\nDESCRIPTION: Using clone_tenant command to duplicate an existing tenant schema with all its data.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py clone_tenant\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Search Paths\nDESCRIPTION: Setting additional schemas to be visible globally to all queries.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/install.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nPG_EXTRA_SEARCH_PATHS = ['extensions']\n```\n\n----------------------------------------\n\nTITLE: Setting Up Template Context Processors\nDESCRIPTION: Template configuration to make tenant available on request object.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/install.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        #...\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                #...\n            ],\n        },\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database Router for Django-Tenants\nDESCRIPTION: Configuration for database router to handle tenant and shared app synchronization.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/install.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDATABASE_ROUTERS = (\n    'django_tenants.routers.TenantSyncRouter',\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring WSGI for Separate Main Website in Django Tenants\nDESCRIPTION: This snippet shows how to create a separate WSGI file (wsgi_main_website.py) to run your main website as a separate application from tenant websites. It uses a different settings module specifically for the public site.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/install.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# wsgi_main_website.py\nimport os\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"project.settings_public\")\n\nfrom django.core.wsgi import get_wsgi_application\napplication = get_wsgi_application()\n```\n\n----------------------------------------\n\nTITLE: Configuring Subfolder Support\nDESCRIPTION: Settings for enabling subfolder-based tenant routing instead of subdomains.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/install.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nTENANT_SUBFOLDER_PREFIX = \"clients\"\n\nMIDDLEWARE = (\n    'django_tenants.middleware.TenantSubfolderMiddleware',\n    #...\n)\n```\n\n----------------------------------------\n\nTITLE: Running Command on Specific Tenant with Schema Argument\nDESCRIPTION: Specifying the schema directly when using tenant_command to avoid being prompted for a schema name.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py tenant_command loaddata --schema=customer1\n```\n\n----------------------------------------\n\nTITLE: Creating Missing Tenant Schemas\nDESCRIPTION: Using create_missing_schemas command to ensure all tenants in the database have corresponding PostgreSQL schemas.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py create_missing_schemas\n```\n\n----------------------------------------\n\nTITLE: Customizing Tenant-Specific Media File Storage Paths\nDESCRIPTION: Example of configuring custom target directories for media files using string formatting with schema_name.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/files.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# in settings.py\n\nMEDIA_ROOT = \"absolute/path/to/your_project_dir/apps_dir/media/\"\n\nMULTITENANT_RELATIVE_MEDIA_ROOT = \"%s/other_dir\"\n```\n\n----------------------------------------\n\nTITLE: Running Fake Migrations with Migrate Schemas\nDESCRIPTION: Example of running fake migrations for a specific app with migrate_schemas, useful when switching an app to use migrations.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py migrate_schemas myapp 0001_initial --fake\n```\n\n----------------------------------------\n\nTITLE: Running Migrations Only on Public Tenant\nDESCRIPTION: Using the --shared flag with migrate_schemas to run migrations only on the public tenant schema.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py migrate_schemas --shared\n```\n\n----------------------------------------\n\nTITLE: Collecting Static Files for All Tenants\nDESCRIPTION: Command for collecting static files for all tenants using the collectstatic_schemas management command with the --all-schemas option.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/files.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py collectstatic_schemas --all-schemas\n```\n\n----------------------------------------\n\nTITLE: Collecting Static Files for Specific Tenants\nDESCRIPTION: Command for collecting static files for a specific tenant using the collectstatic_schemas management command with the --schema option.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/files.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py collectstatic_schemas --schema=your_tenant_schema_name\n```\n\n----------------------------------------\n\nTITLE: Renaming Schema with Explicit Arguments\nDESCRIPTION: Using rename_schema command with arguments to specify the old and new schema names without being prompted.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py rename_schema --rename_from old_name --rename_to new_name\n```\n\n----------------------------------------\n\nTITLE: Running Command on All Tenants Excluding Public\nDESCRIPTION: Using the --no-public flag with all_tenants_command to exclude the public schema when running a command on all tenants.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py all_tenants_command --no-public loaddata\n```\n\n----------------------------------------\n\nTITLE: Deleting Domain from a Tenant\nDESCRIPTION: Using delete_domain command to remove a domain from a tenant with various option formats.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py delete_domain     \n./manage.py delete_domain --schema_name=tenant1 --domain-domain=tenant1.my-domain.com\n./manage.py delete_domain -s=tenant1 -d=tenant1.my-domain.com\n```\n\n----------------------------------------\n\nTITLE: Listing Migrations with Migrate Schemas Command\nDESCRIPTION: Using the --list option with migrate_schemas to display all migrations without applying them.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py migrate_schemas --list\n```\n\n----------------------------------------\n\nTITLE: Configuring PostGIS Support in Django Tenants\nDESCRIPTION: Setting the ORIGINAL_BACKEND configuration to enable PostGIS support in a multi-tenant application.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nORIGINAL_BACKEND = \"django.contrib.gis.db.backends.postgis\"\n```\n\n----------------------------------------\n\nTITLE: Optimizing Database Performance with TENANT_LIMIT_SET_CALLS\nDESCRIPTION: Setting the TENANT_LIMIT_SET_CALLS flag to true to reduce the frequency of search_path settings for better performance.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n#in settings.py:\nTENANT_LIMIT_SET_CALLS = True\n```\n\n----------------------------------------\n\nTITLE: Running Django Tenants Tutorial Server\nDESCRIPTION: Command to start the development server for the django-tenants tutorial example project. Before running this, you need to configure the DATABASES settings in the settings.py file.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/examples.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Migration Executor Function\nDESCRIPTION: Setting up a custom function to provide migration executors, allowing for customized migration behavior.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nGET_EXECUTOR_FUNCTION = 'tenant_multi_types_tutorial.set_tenant_utils.get_custom_executor'\n```\n\n----------------------------------------\n\nTITLE: Viewing Clone Tenant Command Options\nDESCRIPTION: Displaying help information for the clone_tenant command to see available options.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py clone_tenant -h\n```\n\n----------------------------------------\n\nTITLE: Disabling Tenant Admin App Coloring in Django\nDESCRIPTION: Configuration setting to disable the dark green coloring of tenant apps in the Django admin interface.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nTENANT_COLOR_ADMIN_APPS = False\n```\n\n----------------------------------------\n\nTITLE: Flushing PostgreSQL Database Tables\nDESCRIPTION: Command to ensure newly created tables in PostgreSQL database are empty during migration process.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/use.rst#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py sqlflush | ./manage.py dbshell\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Django Tenants\nDESCRIPTION: Lists the required Python packages and their versions for the Django Tenants project. It includes psycopg for PostgreSQL database adapter, gunicorn as the WSGI HTTP server, and coverage for code coverage measurement.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\npsycopg>=3.2.1,<3.3\ngunicorn==23.0.0\ncoverage\n```\n\n----------------------------------------\n\nTITLE: Documentation Dependencies Requirements\nDESCRIPTION: Specifies exact versions of Python packages needed for documentation generation. Includes Sphinx documentation generator and related packages for building documentation with version constraints.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbreathe==4.35.0\ndocutils==0.21.2\nPygments==2.19.1\npyparsing==3.2.3\nSphinx==8.1.3\nsphinxcontrib-bibtex==2.6.3\n```\n\n----------------------------------------\n\nTITLE: Building Documentation for Django Tenants\nDESCRIPTION: Commands for building the django-tenants documentation using Sphinx. This process creates HTML documentation from the source files in the docs directory.\nSOURCE: https://github.com/django-tenants/django-tenants/blob/master/docs/install.rst#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npip install Sphinx\ncd docs\nmake html\n```"
  }
]