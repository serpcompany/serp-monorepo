[
  {
    "owner": "electric-sql",
    "repo": "pglite",
    "content": "TITLE: IndexedDB Persistence Example\nDESCRIPTION: Shows how to initialize PGlite with IndexedDB persistence in browser environments\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = new PGlite(\"idb://my-pgdata\");\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent PGlite Database in Browser JavaScript\nDESCRIPTION: This snippet demonstrates how to create a PGlite database instance that persists data to indexedDB in browser environments.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = new PGlite(\"idb://my-pgdata\");\n```\n\n----------------------------------------\n\nTITLE: Executing a Parameterized Query with PGlite\nDESCRIPTION: Example of executing a parameterized SQL INSERT query using the query method. This demonstrates the use of positional parameters with the $n syntax.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/api.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait pg.query('INSERT INTO test (name) VALUES ($1);', ['test'])\n// { affectedRows: 1 },\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple SQL Statements with PGlite\nDESCRIPTION: Shows how to execute multiple SQL statements in a single operation using the exec method. This is useful for migrations or setup scripts that need to perform multiple operations.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/api.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait pg.exec(`\n  CREATE TABLE IF NOT EXISTS test (\n    id SERIAL PRIMARY KEY,\n    name TEXT\n  );\n  INSERT INTO test (name) VALUES ('test');\n  SELECT * FROM test;\n`)\n// [\n//   { affectedRows: 0 },\n//   { affectedRows: 1 },\n//   {\n//     rows: [\n//       { id: 1, name: 'test' }\n//     ]\n//     affectedRows: 0,\n//     fields: [\n//       { name: 'id', dataTypeID: '23' },\n//       { name: 'name', dataTypeID: '25' },\n//     ]\n//   }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Exporting Data from PGlite Using COPY Command\nDESCRIPTION: Demonstrates how to export data from a PGlite database using the SQL COPY command with a virtual /dev/blob device. The exported data is returned as a Blob object in the query results.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/api.md#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst ret = await pg.query(\"COPY my_table TO '/dev/blob';\")\n// ret.blob is a `Blob` object with the data from the copy.\n```\n\n----------------------------------------\n\nTITLE: Initializing PGlite Database and Executing Query\nDESCRIPTION: Demonstrates how to create a new PGlite database instance and execute a simple SQL query. The example shows the basic setup and query execution pattern, returning results in a structured format.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/about.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PGlite } from '@electric-sql/pglite'\n\nconst db = new PGlite()\nawait db.query(\"select 'Hello world' as message;\")\n// -> { rows: [ { message: \"Hello world\" } ] }\n```\n\n----------------------------------------\n\nTITLE: Setting up PGliteProvider in a React Application\nDESCRIPTION: Demonstrates how to initialize a PGlite database with the live query extension and provide it to child components using PGliteProvider. This makes the database instance available throughout the component tree.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/framework-hooks/react.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PGlite } from \"@electric-sql/pglite\"\nimport { live } from \"@electric-sql/pglite/live\"\nimport { PGliteProvider } from \"@electric-sql/pglite-react\"\n\nconst db = await PGlite.create({\n  extensions: { live }\n})\n\nconst App = () => {\n  // ...\n\n  return (\n    <PGliteProvider db={db}>\n      // ...\n    </PGliteProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Transactions with PGlite\nDESCRIPTION: Example of using the transaction method to perform multiple operations as an atomic unit. The transaction automatically commits when the callback resolves successfully and rolls back if an error occurs.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/api.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait pg.transaction(async (tx) => {\n  await tx.query(\n    'INSERT INTO test (name) VALUES ('$1');',\n    [ 'test' ]\n  );\n  return await ts.query('SELECT * FROM test;');\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Data to PGlite Using COPY Command\nDESCRIPTION: Shows how to import data into a PGlite database using the SQL COPY command with a virtual /dev/blob device. This method allows importing data from a File or Blob object.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/api.md#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait pg.query(\"COPY my_table FROM '/dev/blob';\", [], {\n  blob: MyBlob,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema and Sample Data\nDESCRIPTION: Using exec method to create a todo table and insert initial data.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/index.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait db.exec(`\n  CREATE TABLE IF NOT EXISTS todo (\n    id SERIAL PRIMARY KEY,\n    task TEXT,\n    done BOOLEAN DEFAULT false\n  );\n  INSERT INTO todo (task, done) VALUES ('Install PGlite from NPM', true);\n  INSERT INTO todo (task, done) VALUES ('Load PGlite', true);\n  INSERT INTO todo (task, done) VALUES ('Create a table', true);\n  INSERT INTO todo (task, done) VALUES ('Insert some data', true);\n  INSERT INTO todo (task) VALUES ('Update a task');\n`)\n```\n\n----------------------------------------\n\nTITLE: Using SQL Tagged Template Literals with PGlite\nDESCRIPTION: Demonstrates the use of the SQL tagged template literal for creating parameterized queries with interpolated values. This provides a more ergonomic alternative to using the query method with separate parameter arrays.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/api.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait pg.sql`SELECT * FROM test WHERE name = ${'test'}`\n// equivalent of pg.query('SELECT * FROM test WHERE name = $1', ['test'])\n```\n\n----------------------------------------\n\nTITLE: Using useLiveIncrementalQuery for Efficient Data Updates\nDESCRIPTION: Shows how to use the useLiveIncrementalQuery hook for optimized reactive queries. This hook leverages an incremental diffing algorithm based on a specified key column to efficiently update only changed records.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/framework-hooks/react.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLiveIncrementalQuery } from '@electric-sql/pglite-react'\n\nconst MyComponent = () => {\n  const maxNumber = 100\n  const items = useLiveIncrementalQuery(`\n    SELECT *\n    FROM my_table\n    WHERE number <= $1\n    ORDER BY number;\n  `, [maxNumber], 'id')\n\n  return (\n    <>\n      {\n        items.map((item) =>\n          <MyItem item={item} />\n        )\n      }\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Loading PGlite Extensions\nDESCRIPTION: Demonstrates how to load PGlite extensions like live queries and vector support. Extensions can include both WASM builds of PostgreSQL extensions and PGlite client plugins.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/api.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PGlite } from '@electric-sql/pglite'\nimport { live } from '@electric-sql/pglite/live'\nimport { vector } from '@electric-sql/pglite/vector'\n\nconst pg = await PGlite.create({\n  extensions: {\n    live, // Live query extension, is a PGlite client plugin\n    vector, // Postgres pgvector extension\n  },\n})\n\n// The `live` namespace is added by the use of the\n// `live` key in the `extensions` object.\npg.live.query('...')\n```\n\n----------------------------------------\n\nTITLE: Importing PGlite Constructor in TypeScript\nDESCRIPTION: Shows how to import the main PGlite constructor from the '@electric-sql/pglite' package. This is the entry point for creating a PGlite database instance.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/api.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PGlite } from '@electric-sql/pglite'\n```\n\n----------------------------------------\n\nTITLE: Initializing Persistent File System Database\nDESCRIPTION: Creating a PGlite instance with filesystem persistence.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/index.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = new PGlite('./path/to/pgdata')\n```\n\n----------------------------------------\n\nTITLE: Using the useLiveQuery Hook for Reactive Queries\nDESCRIPTION: Shows how to use the useLiveQuery hook to reactively fetch and display data from the database. The component will automatically re-render when query results change, with support for parameterized queries.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/framework-hooks/react.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLiveQuery } from '@electric-sql/pglite-react'\n\nconst MyComponent = () => {\n  const maxNumber = 100\n  const items = useLiveQuery(`\n    SELECT *\n    FROM my_table\n    WHERE number <= $1\n    ORDER BY number;\n  `, [maxNumber])\n\n  return (\n    <>\n      {\n        items.map((item) =>\n          <MyItem item={item} />\n        )\n      }\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Live Query Implementation\nDESCRIPTION: Example of using the basic live.query() method. Shows both simple query and windowed query with pagination support.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/live-queries.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ret = pg.live.query('SELECT * FROM test ORDER BY rand;', [], (res) => {\n  // res is the same as a standard query result object\n})\n```\n\n----------------------------------------\n\nTITLE: Incremental Live Query Implementation\nDESCRIPTION: Example of using live.incrementalQuery() for efficient state tracking using a temporary table for diffing changes.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/live-queries.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ret = pg.live.incrementalQuery(\n  'SELECT * FROM test ORDER BY rand;',\n  [],\n  'id',\n  (res) => {\n    // res is the same as a standard query result object\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Using Tagged Template Queries with PGlite in TypeScript\nDESCRIPTION: Demonstrates the use of tagged template literals for constructing SQL queries with PGlite. It shows various helper functions like 'identifier', 'raw', 'sql', and 'query' for creating complex and parameterized templated queries.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/api.md#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { identifier, raw, sql, query } from '@electric-sql/pglite/template'\n\nawait pg.sql`SELECT * FROM ${identifier`test`} WHERE name = ${'test'}`\n// equivalent of pg.query('SELECT * FROM \"test\" WHERE name = $1', ['test'])\n\nconst filterStmt = (filterVar?: string) =>\n  filterVar ? sql`WHERE name = ${filterVar}` : raw`WHERE 1=1`\n\nawait pg.sql`SELECT * FROM test ${filterStmt('test')}`\n// equivalent of pg.query('SELECT * FROM \"test\" WHERE name = $1', ['test'])\nawait pg.sql`SELECT * FROM test ${filterStmt(null)}`\n// equivalent of pg.query('SELECT * FROM \"test\" WHERE 1=1, [])\n\nquery`SELECT * FROM ${identifier`test`} WHERE name = ${'test'}`\n// { query: 'SELECT * FROM \"test\" WHERE name = $1', params: ['test'] }\n```\n\n----------------------------------------\n\nTITLE: Initializing In-Memory FileSystem in PGlite\nDESCRIPTION: Shows three different methods to initialize PGlite with an in-memory filesystem. This is the default implementation with no persistence.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/filesystems.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst pg = new PGlite()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst pg = new PGlite('memory://')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MemoryFS } from '@electric-sql/pglite'\nconst pg = new PGlite({\n  fs: new MemoryFS(),\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing PGlite with Live Query Extension\nDESCRIPTION: Setup code to create a PGlite instance with the live query extension enabled. This is required before using any live query functionality.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/live-queries.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PGlite } from '@electric-sql/pglite'\nimport { live } from '@electric-sql/pglite/live'\n\nconst pg = await PGlite.create({\n  extensions: {\n    live,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Filesystem Persistence Example\nDESCRIPTION: Demonstrates initializing PGlite with filesystem persistence in Node.js environments\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite/README.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = new PGlite(\"./path/to/pgdata\");\n```\n\n----------------------------------------\n\nTITLE: Change Tracking Implementation\nDESCRIPTION: Low-level change tracking API implementation with TypeScript interfaces for change objects.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/live-queries.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst ret = pg.live.changes(\n  'SELECT * FROM test ORDER BY rand;',\n  [],\n  'id',\n  (res) => {\n    // res is a change result object\n  },\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LiveChangesReturn<T = { [key: string]: any }> {\n  fields: { name: string; dataTypeID: number }[]\n  initialChanges: Array<Change<T>>\n  unsubscribe: () => Promise<void>\n  refresh: () => Promise<void>\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype ChangeInsert<T> = {\n  __changed_columns__: string[]\n  __op__: 'INSERT'\n  __after__: number\n} & T\n\ntype ChangeDelete<T> = {\n  __changed_columns__: string[]\n  __op__: 'DELETE'\n  __after__: undefined\n} & T\n\ntype ChangeUpdate<T> = {\n  __changed_columns__: string[]\n  __op__: 'UPDATE'\n  __after__: number\n} & T\n\ntype Change<T> = ChangeInsert<T> | ChangeDelete<T> | ChangeUpdate<T>\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Table Sync with Electric\nDESCRIPTION: Example of using syncShapeToTable method to sync a single table from Electric to PGlite with shape configuration.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/sync.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst shape = await pg.electric.syncShapeToTable({\n  shape: {\n    url: 'http://localhost:3000/v1/shape',\n    params: {\n      table: 'todo',\n    },\n  },\n  table: 'todo',\n  primaryKey: ['id'],\n  shapeKey: 'todo', // or null if the shape state does not need to be persisted\n})\n\n// Stop syncing when done\nshape.unsubscribe()\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Table Sync with ElectricSQL\nDESCRIPTION: Example of syncing multiple related tables simultaneously using syncShapesToTables method. Includes configuration for multiple tables, sync state persistence, and cleanup handling.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-sync/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst sync = await pg.electric.syncShapesToTables({\n  shapes: {\n    todos: {\n      shape: { url: 'http://localhost:3000/v1/shape', table: 'todo' },\n      table: 'todo',\n      primaryKey: ['id'],\n    },\n    users: {\n      shape: { url: 'http://localhost:3000/v1/shape', table: 'users' },\n      table: 'users',\n      primaryKey: ['id'],\n    }\n  },\n  key: 'my-sync', // or null if the sync state does not need to be persisted\n  onInitialSync: () => {\n    console.log('Initial sync complete')\n  }\n})\n\n// Unsubscribe when done\nsync.unsubscribe()\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM with PGlite\nDESCRIPTION: JavaScript code demonstrating how to initialize a TypeORM data source with PGlite as the database driver using the typeorm-pglite adapter.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/orm-support.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PGliteDriver, getPGliteInstance } from 'typeorm-pglite'\nimport { DataSource } from 'typeorm'\n\nconst PGliteDataSource = new DataSource({\n  type: 'postgres',\n  driver: new PGliteDriver().driver,\n})\n\n// You can access the internal PGlite instance using getPGliteInstance function\nconst pgliteDb = await getPGliteInstance()\n```\n\n----------------------------------------\n\nTITLE: Initializing PGlite with Electric Sync Extension\nDESCRIPTION: Setup code to initialize PGlite instance with Electric sync plugin and create a sample todo table.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/sync.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { electricSync } from '@electric-sql/pglite-sync'\n\nconst pg = await PGlite.create({\n  extensions: {\n    electric: electricSync(),\n  },\n})\n\nawait pg.exec(`\n  CREATE TABLE IF NOT EXISTS todo (\n    id SERIAL PRIMARY KEY,\n    task TEXT,\n    done BOOLEAN\n  );\n`)\n```\n\n----------------------------------------\n\nTITLE: Listening to Postgres Notifications in TypeScript\nDESCRIPTION: Demonstrates how to listen for notifications on a channel and send a notification using PGlite. It shows the usage of the 'listen' method and how to send a notification using a SQL query.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/api.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst unsub = await pg.listen('test', (payload) => {\n  console.log('Received:', payload)\n})\nawait pg.query(\"NOTIFY test, 'Hello, world!'\")\n```\n\n----------------------------------------\n\nTITLE: Using Live Query Hook for Reactive Database Queries in Vue\nDESCRIPTION: The useLiveQuery hook provides reactive results from a database query that updates automatically when the data changes. It accepts a SQL query and optional parameters that can be watch sources for dynamic queries.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/framework-hooks/vue.md#2025-04-11_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport { useLiveQuery } from '@electric-sql/pglite-vue'\n\nconst maxNumber = 100\nconst items = useLiveQuery(\n  `\n    SELECT *\n    FROM my_table\n    WHERE number <= $1\n    ORDER BY number;\n  `,\n  [maxNumber],\n)\n</script>\n\n<template>\n  <MyItem v-for=\"item in items\" :item=\"item\" :key=\"item.id\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing PGlite Worker Instance\nDESCRIPTION: Creates a worker file that initializes and exposes a PGlite instance to all tabs using the worker wrapper.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/multi-tab-worker.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// my-pglite-worker.js\nimport { PGlite } from '@electric-sql/pglite'\nimport { worker } from '@electric-sql/pglite/worker'\n\nworker({\n  async init() {\n    // Create and return a PGlite instance\n    return new PGlite()\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Table Sync with Electric\nDESCRIPTION: Example of using syncShapesToTables method to sync multiple tables simultaneously while maintaining transactional consistency.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/sync.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst sync = await pg.electric.syncShapesToTables({\n  shapes: {\n    todos: {\n      shape: {\n        url: 'http://localhost:3000/v1/shape',\n        params: { table: 'todo' },\n      },\n      table: 'todo',\n      primaryKey: ['id'],\n    },\n    users: {\n      shape: {\n        url: 'http://localhost:3000/v1/shape',\n        params: { table: 'users' },\n      },\n      table: 'users',\n      primaryKey: ['id'],\n    },\n  },\n  key: 'my-sync', // or null if the sync state does not need to be persisted\n  onInitialSync: () => {\n    console.log('Initial sync complete')\n  },\n})\n\n// Stop syncing when done\nsync.unsubscribe()\n```\n\n----------------------------------------\n\nTITLE: Configuring PGlite Worker with Options\nDESCRIPTION: Shows how to pass options and metadata to the worker process and handle them in the initialization function.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/multi-tab-worker.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// my-pglite-worker.js\nimport { PGlite } from '@electric-sql/pglite'\nimport { worker } from '@electric-sql/pglite/worker'\n\nworker({\n  async init(options) {\n    const meta = options.meta\n    // Do something with additional metadata.\n    // or even run your own code in the leader along side the PGlite\n    return new PGlite({\n      dataDir: options.dataDir,\n    })\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// my-app.js\nimport { PGliteWorker } from '@electric-sql/pglite/worker'\n\nconst pg = new PGliteWorker(\n  new Worker(new URL('./my-pglite-worker.js', import.meta.url), {\n    type: 'module',\n  }),\n  {\n    dataDir: 'idb://my-db',\n    meta: {\n      // additional metadata passed to `init`\n    },\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing PGlite with ElectricSQL Plugin\nDESCRIPTION: Setup code for initializing PGlite with the ElectricSQL sync plugin and creating a sample todo table schema. Demonstrates basic plugin configuration and table creation.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-sync/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { electricSync } from '@electric-sql/pglite-sync'\n\nconst pg = await PGlite.create({\n  extensions: {\n    electric: electricSync(),\n  },\n})\n\nawait pg.exec(`\n  CREATE TABLE IF NOT EXISTS todo (\n    id SERIAL PRIMARY KEY,\n    task TEXT,\n    done BOOLEAN\n  );\n`)\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Table Sync with ElectricSQL\nDESCRIPTION: Example of syncing a single table using the syncShapeToTable method. Shows configuration of sync shape, table details, and primary key specification.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-sync/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst shape = await pg.electric.syncShapeToTable({\n  shape: { url: 'http://localhost:3000/v1/shape', table: 'todo' },\n  shapeKey: 'todo', // or null if the shape state does not need to be persisted\n  table: 'todo',\n  primaryKey: ['id'],\n})\n```\n\n----------------------------------------\n\nTITLE: Using PGliteWorker with TypeScript and Extensions\nDESCRIPTION: Shows how to create a typed PGliteWorker instance with extension support using the static create method.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/multi-tab-worker.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PGliteWorker } from '@electric-sql/pglite/worker'\nimport { live } from '@electric-sql/pglite/live'\n\nconst pg = await PGliteWorker.create(\n  new Worker(new URL('./my-pglite-worker.js', import.meta.url), {\n    type: 'module',\n  }),\n  {\n    extensions: {\n      live,\n    },\n  },\n)\n\n// TypeScript is aware of the `pg.live` namespace:\npg.live.query(/* ... */)\n```\n\n----------------------------------------\n\nTITLE: Configuring Serializer Functions for PostgreSQL Data Types\nDESCRIPTION: Example of configuring custom serializer functions to transform JavaScript values into PostgreSQL data types when storing in the database. This example shows how to serialize numeric values.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/api.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PGlite, types } from '@electric-sql/pglite'\n\nconst pg = await PGlite.create({\n  serializers: {\n    [types.NUMERIC]: (value) => value.toString(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Describing a SQL Query with PGlite in TypeScript\nDESCRIPTION: Shows how to use the 'describeQuery' method to get type information about a query's parameters and result fields without executing it. This is useful for understanding the expected parameter types and the structure of the results.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/api.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait pg.describeQuery('SELECT * FROM test WHERE name = $1', ['test'])\n\n// returns:\n{\n  queryParams: [{ dataTypeID: 25, serializer: Function }],\n  resultFields: [{ name: \"id\", dataTypeID: 23, parser: Function }],\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tagged Template Syntax with useLiveQuery\nDESCRIPTION: Demonstrates using the SQL tagged template literal with useLiveQuery for more elegant query construction. This allows embedding values directly in the query string with proper parameterization handling.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/framework-hooks/react.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLiveQuery } from '@electric-sql/pglite-react'\n\nconst MyComponent = () => {\n  const maxNumber = 100\n  const items = useLiveQuery.sql`\n    SELECT *\n    FROM my_table\n    WHERE number <= ${maxNumber}\n    ORDER BY number;\n  `\n// ...\n```\n\n----------------------------------------\n\nTITLE: Querying Data\nDESCRIPTION: Example of querying data from the todo table using the query method.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/index.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ret = await db.query(`\n  SELECT * from todo WHERE id = 1;\n`)\nconsole.log(ret.rows)\n```\n\n----------------------------------------\n\nTITLE: Windowed Live Query Implementation\nDESCRIPTION: Implementation of a paginated live query with offset and limit parameters. Includes window position updates.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/live-queries.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ret = pg.live.query({\n  query: 'SELECT * FROM test ORDER BY rand;',\n  offset: 0,\n  limit: 10,\n  callback: (res) => {\n    // res includes:\n    // - rows: the rows for the current window\n    // - offset: the current offset\n    // - limit: the current limit\n    // - totalCount: total number of rows in the full result set\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Move to page 2\nawait ret.refresh(10, 10)\n```\n\n----------------------------------------\n\nTITLE: Configuring Query-Level Serializer Functions\nDESCRIPTION: Shows how to override instance-level serializers with query-specific serializer functions when executing a query. This example customizes the NUMERIC type serialization for a specific query.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/api.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { types } from '@electric-sql/pglite'\nawait pg.query(`INSERT INTO test (numeric) VALUES ($1);`, [100n], {\n  serializers: {\n    [types.NUMERIC]: (value: number | bigint) => value.toString(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Browser CDN Import Example\nDESCRIPTION: Shows how to import PGlite from a CDN in browser environments\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PGlite } from \"https://cdn.jsdelivr.net/npm/@electric-sql/pglite/dist/index.js\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Extension Support in PGlite Worker\nDESCRIPTION: Demonstrates how to implement Postgres extensions and PGlite plugins in the worker environment.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/multi-tab-worker.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// my-pglite-worker.js\nimport { PGlite } from '@electric-sql/pglite'\nimport { worker } from '@electric-sql/pglite/worker'\nimport { vector } from '@electric-sql/pglite/vector'\n\nworker({\n  async init() {\n    return new PGlite({\n      extensions: {\n        vector,\n      },\n    })\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PGliteWorker } from '@electric-sql/pglite/worker'\nimport { live } from '@electric-sql/pglite/live'\n\nconst pg = new PGliteWorker(\n  new Worker(new URL('./my-pglite-worker.js', import.meta.url), {\n    type: 'module',\n  }),\n  {\n    extensions: {\n      live,\n    },\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up IndexedDB FileSystem in PGlite\nDESCRIPTION: Shows two approaches to initialize PGlite with IndexedDB filesystem for browser-based persistence.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/filesystems.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst pg = new PGlite('idb://my-database')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IdbFs } from '@electric-sql/pglite'\nconst pg = new PGlite({\n  fs: new IdbFs('my-database'),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Drizzle with PGlite\nDESCRIPTION: TypeScript code demonstrating how to initialize a PGlite database connection and integrate it with Drizzle ORM. This setup enables using Drizzle's query API with PGlite.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/orm-support.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PGlite } from '@electric-sql/pglite';\nimport { drizzle } from 'drizzle-orm/pglite';\n\nconst client = new PGlite();\nconst db = drizzle(client);\n\nawait db.select().from(...);\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using PGlite Database in Vue Components\nDESCRIPTION: The injectPGlite API retrieves the provided PGlite instance for use within child components. This example demonstrates retrieving the database and executing an insert query via a button click.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/framework-hooks/vue.md#2025-04-11_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { onMounted, shallowRef } from 'vue'\nimport { injectPGlite } from '@electric-sql/pglite-vue'\n\nconst db = injectPGlite()\n\nconst insertItem = () => {\n  db.query(\"INSERT INTO my_table (name, number) VALUES ('Arthur', 42);\")\n}\n</script>\n\n<template>\n  // ...\n  <button @click=\"insertItem\">Insert item</button>\n  // ...\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Query-Level Parser Functions\nDESCRIPTION: Shows how to override instance-level parsers with query-specific parser functions when executing a query. This example customizes the TEXT type parsing for a specific query.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/api.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { types } from '@electric-sql/pglite'\nawait pg.query(`SELECT * FROM test WHERE name = $1;`, ['test'], {\n  parsers: {\n    [types.TEXT]: (value) => value.toUpperCase(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using pgDump with PGlite in TypeScript\nDESCRIPTION: Example of using the pgDump function to dump a PGlite database. It demonstrates creating a PGlite instance, executing SQL to create a table and insert data, and then using pgDump to create a database dump.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-tools/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PGlite } from '@electric-sql/pglite'\nimport { pgDump } from '@electric-sql/pglite-tools/pg_dump'\n\nconst pg = await PGlite.create()\n\n// Create a table and insert some data\nawait pg.exec(`\n  CREATE TABLE test (\n    id SERIAL PRIMARY KEY,\n    name TEXT\n  );\n`)\nawait pg.exec(`\n  INSERT INTO test (name) VALUES ('test');\n`)\n\n// Dump the database to a file\nconst dump = await pgDump({ pg })\n```\n\n----------------------------------------\n\nTITLE: Implementing PGlite REPL in React Component\nDESCRIPTION: Example of how to import and use the PGlite REPL component within a React functional component. It demonstrates creating a PGlite instance and passing it to the Repl component.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/repl.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PGlite } from '@electric-sql/pglite'\nimport { Repl } from '@electric-sql/pglite-repl'\n\nfunction MyComponent() {\n  const pg = new PGlite()\n\n  return (\n    <>\n      <Repl pg={pg} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Incremental Live Query Hook for Efficient Updates in Vue\nDESCRIPTION: The useLiveIncrementalQuery hook provides efficient updates by diffing query results. It requires a SQL query, optional parameters, and a key column name to track changes in the result set.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/framework-hooks/vue.md#2025-04-11_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport { useLiveInceremntalQuery } from '@electric-sql/pglite-vue'\n\nconst maxNumber = 100\nconst items = useLiveInceremntalQuery(\n  `\n    SELECT *\n    FROM my_table\n    WHERE number <= $1\n    ORDER BY number;\n  `,\n  [maxNumber],\n  'id',\n)\n</script>\n\n<template>\n  <MyItem v-for=\"item in items\" :item=\"item\" :key=\"item.id\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing PGlite REPL as Web Component\nDESCRIPTION: HTML and JavaScript code demonstrating how to include and use the PGlite REPL as a web component in a standard web page. It shows script inclusion, component placement, and PGlite instance creation.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/repl.md#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script\n  src=\"https://cdn.jsdelivr.net/npm/@electric-sql/pglite-repl/dist-webcomponent/Repl.js\"\n  type=\"module\"\n></script>\n\n<!-- Include the Repl web component in your page -->\n<pglite-repl id=\"repl\"></pglite-repl>\n\n<script type=\"module\">\n  import { PGlite } from 'https://cdn.jsdelivr.net/npm/@electric-sql/pglite/dist/index.js'\n\n  // Create a PGlite instance\n  const pg = new PGlite()\n\n  // Retrieve the Repl element\n  const repl = document.getElementById('repl')\n\n  // REPL to your PGlite instance\n  repl.pg = pg\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using the usePGlite Hook to Access the Database\nDESCRIPTION: Shows how to retrieve the PGlite instance within a component using the usePGlite hook. The example demonstrates inserting a record into a database table with a button click.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/framework-hooks/react.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePGlite } from \"@electric-sql/pglite-react\"\n\nconst MyComponent = () => {\n  const db = usePGlite()\n\n  const insertItem = () => {\n    db.query(\"INSERT INTO my_table (name, number) VALUES ('Arthur', 42);\")\n  }\n\n  return (\n    <>\n      <button onClick={insertItem}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parameterized Queries\nDESCRIPTION: Example of using parameterized queries for safe data updates.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/index.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst ret = await db.query(\n  'UPDATE todo SET task = $2, done = $3 WHERE id = $1',\n  [5, 'Update a task using parametrised queries', true],\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting PGliteWorker to Worker Process\nDESCRIPTION: Demonstrates how to connect the PGliteWorker to the worker process in the main script.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/multi-tab-worker.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PGliteWorker } from '@electric-sql/pglite/worker'\n\nconst pg = new PGliteWorker(\n  new Worker(new URL('./my-pglite-worker.js', import.meta.url), {\n    type: 'module',\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing In-Memory PGlite Database\nDESCRIPTION: Creating a new in-memory PGlite database instance in Node.js environment.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/index.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PGlite } from '@electric-sql/pglite'\n\nconst db = new PGlite()\n```\n\n----------------------------------------\n\nTITLE: ReplProps TypeScript Interface Definition\nDESCRIPTION: TypeScript interface that defines the available props for the Repl component, including pg (PGlite instance), border, theme options, and customization for light and dark themes.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-repl/README.md#2025-04-11_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// The theme to use, auto is auto switching based on the system\ntype ReplTheme = \"light\" | \"dark\" | \"auto\";\n\ninterface ReplProps {\n  pg: PGlite;  // PGlite db instance\n  border?: boolean;  // Outer border on the component, defaults to false\n  lightTheme?: Extension;\n  darkTheme?: Extension;\n  theme?: ReplTheme;  // Defaults to \"auto\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parser Functions for PostgreSQL Data Types\nDESCRIPTION: Example of configuring custom parser functions to transform PostgreSQL data types when retrieved from the database. This example shows how to make text values uppercase.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/api.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PGlite, types } from '@electric-sql/pglite'\n\nconst pg = await PGlite.create({\n  parsers: {\n    [types.TEXT]: (value) => value.toUpperCase(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating PGlite REPL Web Component with Vue.js\nDESCRIPTION: Vue.js component example showing how to use the PGlite REPL web component within a Vue application. It includes necessary imports and component usage in the template.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/repl.md#2025-04-11_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { PGlite } from '@electric-sql/pglite'\nimport '@electric-sql/pglite-repl/webcomponent'\n\nconst pg = new PGlite()\n</script>\n<template>\n  <pglite-repl :pg=\"pg\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Knex.js with PGlite\nDESCRIPTION: JavaScript code showing how to set up a Knex query builder instance with PGlite as the database client using the knex-pglite adapter.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/orm-support.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { knex } from 'knex'\nimport ClientPgLite from 'knex-pglite'\n\nexport const db = knex({\n  client: ClientPgLite,\n  dialect: 'postgres',\n  connection: { connectionString: 'idb://my-database' },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Template Literals with Live Query Hook in Vue\nDESCRIPTION: useLiveQuery.sql provides a tagged template literal approach to construct SQL queries with embedded parameters. This simplifies parameter binding and improves query readability in Vue components.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/framework-hooks/vue.md#2025-04-11_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nimport { useLiveQuery } from '@electric-sql/pglite-vue'\n\nconst maxNumber = 100\nconst items = useLiveQuery.sql`\n  SELECT *\n  FROM my_table\n  WHERE number <= ${maxNumber}\n  ORDER BY number;\n`\n</script>\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Typed PGliteProvider with Extensions\nDESCRIPTION: Demonstrates creating a custom PGliteProvider with TypeScript typing for extensions. This allows maintaining type information for any added extensions like live queries and vector functionality.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/framework-hooks/react.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PGlite, PGliteInterfaceExtensions } from '@electric-sql/pglite'\nimport { LiveNamespace } from '@electric-sql/pglite/live'\nimport { VectorNamespace } from '@electric-sql/pglite/vector'\nimport { makePGliteProvider } from '@electric-sql/pglite-react'\n\nconst { PGliteProvider, usePGlite } = makePGliteProvider<\n  PGlite &\n    PGliteInterfaceExtensions<{\n      live: typeof live\n      vector: typeof vector\n    }>\n>()\n\nexport { PGliteProvider, usePGlite }\n```\n\n----------------------------------------\n\nTITLE: Creating Typed PGlite Dependency Injector with Extensions\nDESCRIPTION: The makePGliteDependencyInjector function generates typed versions of providePGlite and injectPGlite that preserve type information for PGlite extensions. This enables TypeScript to recognize extension namespaces.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/framework-hooks/vue.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PGlite, PGliteInterfaceExtensions } from '@electric-sql/pglite'\nimport { live } from '@electric-sql/pglite/live'\nimport { vector } from '@electric-sql/pglite/vector'\nimport { makePGliteDependencyInjector } from '@electric-sql/pglite-vue'\n\nconst { providePGlite, injectPGlite } = makePGliteDependencyInjector<\n  PGlite &\n    PGliteInterfaceExtensions<{\n      live: typeof live\n      vector: typeof vector\n    }>\n>()\n\nexport { providePGlite, injectPGlite }\n```\n\n----------------------------------------\n\nTITLE: Installing TypeORM with PGlite\nDESCRIPTION: Command for installing the TypeORM ORM with the typeorm-pglite adapter and PGlite using npm.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/orm-support.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @electric-sql/pglite typeorm-pglite\n```\n\n----------------------------------------\n\nTITLE: Live Query Return Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of live query return values, including initial results and control methods.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/live-queries.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LiveQueryReturn<T> {\n  initialResults: Results<T> & {\n    offset?: number // Current offset (if windowed)\n    limit?: number // Current limit (if windowed)\n    totalCount?: number // Total row count (if windowed)\n  }\n  unsubscribe: () => Promise<void>\n  refresh: (options?: { offset?: number; limit?: number }) => Promise<void>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing PGlite Worker in Vite Environment\nDESCRIPTION: This snippet demonstrates how to import and initialize the PGlite worker in a Vite environment using the recommended '?worker' import method.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/bundler-support.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport PGWorker from './worker.js?worker'\n\nexport const pglite = new PGliteWorker(\n  new PGWorker({\n    type: 'module',\n      name: 'pglite-worker',\n    }),\n    {\n      // ...your options here\n    }\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Providing PGlite Database Instance in Vue Components\nDESCRIPTION: The providePGlite API enables initializing a PGlite database instance and making it available to all child components in the Vue application hierarchy.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/framework-hooks/vue.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { PGlite } from '@electric-sql/pglite'\nimport { providePGlite } from '@electric-sql/pglite-vue'\n\nconst db = new PGlite()\nprovidePGlite(db)\n</script>\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for PGlite Dependency Exclusion\nDESCRIPTION: This snippet shows how to configure Vite to exclude PGlite from dependency optimization. It uses the 'optimizeDeps' option in the Vite configuration file.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/bundler-support.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  optimizeDeps: {\n    exclude: ['@electric-sql/pglite'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing PGlite REPL in React Component\nDESCRIPTION: Example of how to import and use the PGlite REPL component in a React application. It shows how to instantiate PGlite and pass it to the Repl component.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-repl/README.md#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PGlite } from \"@electric-sql/pglite\";\nimport { Repl } from \"@electric-sql/pglite-repl\";\n\nfunction MyComponent() {\n  const pg = new PGlite();\n\n  return <>\n    <Repl pg={pg} />\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Filesystem in PGlite\nDESCRIPTION: Demonstrates two methods to initialize PGlite with Node.js filesystem implementation, available in Node and Bun environments.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/filesystems.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst pg = new PGlite('./path/to/datadir/')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeFS } from '@electric-sql/pglite'\nconst pg = new PGlite({\n  fs: new NodeFS('./path/to/datadir/'),\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Database\nDESCRIPTION: Establishes connection to the PostgreSQL database using psql CLI with specified credentials\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-sync/example/README.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npsql postgresql://postgres:password@localhost:54321/electric\n```\n\n----------------------------------------\n\nTITLE: Installing PGlite Package Managers\nDESCRIPTION: Package installation commands for different package managers including npm, pnpm, yarn, bun, and deno.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/index.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @electric-sql/pglite\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @electric-sql/pglite\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @electric-sql/pglite\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun install @electric-sql/pglite\n```\n\nLANGUAGE: bash\nCODE:\n```\ndeno add npm:@electric-sql/pglite\n```\n\n----------------------------------------\n\nTITLE: Implementing OPFS AHP FileSystem in PGlite\nDESCRIPTION: Demonstrates two methods to initialize PGlite with Origin Private FileSystem using access handle pool, designed for Web Worker environments.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/filesystems.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst pg = new PGlite('opfs-ahp://path/to/datadir/')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpfsAhpFS } from '@electric-sql/pglite/opfs-ahp'\nconst pg = new PGlite({\n  fs: new OpfsAhpFS('./path/to/datadir/'),\n})\n```\n\n----------------------------------------\n\nTITLE: Importing PGlite from CDN in JavaScript\nDESCRIPTION: This code shows how to import PGlite using a CDN (JSDeliver) for browser-based applications without a package manager.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PGlite } from \"https://cdn.jsdelivr.net/npm/@electric-sql/pglite/dist/index.js\";\n```\n\n----------------------------------------\n\nTITLE: Installing Drizzle with PGlite\nDESCRIPTION: Command for installing Drizzle ORM packages together with PGlite using npm.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/orm-support.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i drizzle-orm @electric-sql/pglite\nnpm i -D drizzle-kit\n```\n\n----------------------------------------\n\nTITLE: Using PGlite REPL as a Web Component\nDESCRIPTION: Example of how to use PGlite REPL as a Web Component in HTML, loading the component and PGlite library from CDN and connecting them together with JavaScript.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-repl/README.md#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@electric-sql/pglite/dist-webcomponent/Repl.js\" type=\"module\"></script>\n\n<!-- Include the Repl web component in your page -->\n<pglite-repl id=\"repl\"></pglite-repl>\n\n<script type=\"module\">\n  import { PGlite } from \"https://cdn.jsdelivr.net/npm/@electric-sql/pglite/dist/index.js\";\n\n  // Create a PGlite instance\n  const pg = new PGlite();\n\n  // Retrieve the Repl element\n  const repl = document.getElementById('repl');\n\n  // REPL to your PGlite instance\n  repl.pg = pg;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Knex.js with PGlite\nDESCRIPTION: Command for installing Knex.js query builder along with the knex-pglite adapter and PGlite using npm.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/orm-support.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @electric-sql/pglite knex knex-pglite\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for PGlite Multi-tab Worker\nDESCRIPTION: This configuration extends the Vite setup to support the Multi-tab Worker in PGlite. It sets the worker format to 'es' and excludes PGlite from dependency optimization.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/bundler-support.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  optimizeDeps: {\n    exclude: ['@electric-sql/pglite'],\n  },\n  worker: {\n    format: 'es',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing PGlite in Node.js using npm\nDESCRIPTION: This command installs the PGlite package in a Node.js project using npm.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @electric-sql/pglite\n```\n\n----------------------------------------\n\nTITLE: Installing PGlite React Hooks Package\nDESCRIPTION: Command to install the @electric-sql/pglite-react package via npm, which provides React hooks for integrating PGlite with React applications.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-react/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @electric-sql/pglite-react\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Components and Star Count Display\nDESCRIPTION: This Vue setup script imports necessary components, defines a client-side component for the REPL, and sets up the star count display functionality. It fetches the initial star count and animates its display on the page.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/index.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { onMounted } from 'vue'\nimport { defineClientComponent } from 'vitepress'\nimport { VPHomeHero } from 'vitepress/theme'\nimport { data as initialStarCount } from './count.data.ts'\nimport { starCount } from './components/starCount.ts'\n\nconst Repl = defineClientComponent(() => {\n  return import('./components/Repl.vue')\n})\n\nonMounted(async () => {\n  if (typeof window !== 'undefined' && document.querySelector) {\n    const linkEl = document.querySelector('.action a[href=\"https://github.com/electric-sql/pglite\"]')\n    let countEl = linkEl.querySelector('.count')\n    \n    if (!countEl) {\n      countEl = document.createElement('span')\n      countEl.classList.add('count')\n      countEl.innerText = `( ${initialStarCount.toLocaleString()} )`;\n\n      const icon = document.createElement('span')\n      icon.classList.add('vpi-social-github')\n      linkEl.prepend(icon)\n    }\n    \n    linkEl.append(countEl)\n\n    const count = await starCount(initialStarCount)\n\n    let currentCount = Math.max(count - 15, initialStarCount)\n    const animateCount = () => {\n      currentCount += 1;\n      if (currentCount >= count) {\n        currentCount = count;\n        clearInterval(intervalId);\n      }\n      countEl.innerText = `( ${currentCount.toLocaleString()} )`;\n    };\n    const intervalId = setInterval(animateCount, 64);\n  }\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Data Manipulation Examples\nDESCRIPTION: Demonstrates basic SQL operations (INSERT, UPDATE, DELETE) on the test table\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-sync/example/README.md#2025-04-11_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO test (name) VALUES ('Hello, World!');\nUPDATE test SET name = 'Hello, Electric!' WHERE id = 1;\nDELETE FROM test WHERE id = 1;\n```\n\n----------------------------------------\n\nTITLE: Browser CDN Import\nDESCRIPTION: Importing PGlite in browser environment using JSDelivr CDN.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/index.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PGlite } from 'https://cdn.jsdelivr.net/npm/@electric-sql/pglite/dist/index.js'\n```\n\n----------------------------------------\n\nTITLE: Installing PGlite ElectricSQL Sync Plugin\nDESCRIPTION: NPM installation command for the ElectricSQL sync plugin for PGlite.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-sync/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @electric-sql/pglite-sync\n```\n\n----------------------------------------\n\nTITLE: Vue Template for Extensions Directory Interface\nDESCRIPTION: Defines the HTML template for the component, which displays a filterable list of PGlite extensions. Includes tag filtering buttons, extension details with links to resources, and tag display for each extension.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/extensions/index.md#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n# PGlite Extensions\n\nPGlite supports both Postgres extensions, and has a plugin API to enable extensions to extend the public API of the PGlite interface.\n\nBelow is a list of available extensions.\n\n<div class=\"tags\">\n  <button\n    v-for=\"tag in tags\"\n    :key=\"tag.name\"\n    @click=\"\n      selectedTag == tag.name ?\n        selectedTag = null :\n        selectedTag = tag.name\n    \"\n    class=\"btn-tag\"\n    :class=\"{ selected: tag.name === selectedTag }\"\n  >\n    {{ tag.name }} <span class=\"count\">{{ tag.count }}</span>\n  </button>\n</div>\n\n<div class=\"extension\" v-for=\"ext in filteredExtensions\">\n\n<h2\n  :id=\"slugify(ext.name)\"\n  tabindex=\"-1\"\n>\n  <a :href=\"mainLink(ext)\">{{ ext.name }}</a>\n  <a \n    class=\"header-anchor\"\n    :href=\"`#${slugify(ext.name)}`\"\n    :aria-label=\"`Permalink to ${ext.name}`\"\n  >​</a>\n</h2>\n\n<div class=\"description\" v-html=\"ext.descriptionHtml\"></div>\n\n<div class=\"links\">\n  <a \n    v-if=\"ext.repo?.startsWith('https://github.com/')\" \n    :href=\"ext.repo\"\n    target=\"_blank\"\n  >Github</a>\n  <a v-else-if=\"ext.repo\" :href=\"ext.repo\" target=\"_blank\">Repo</a>\n  <a v-if=\"ext.docs\" :href=\"ext.docs\" target=\"_blank\">Documentation</a>\n  <a v-if=\"ext.homepage\" :href=\"ext.homepage\" target=\"_blank\">Homepage</a>\n  <span class=\"bundle-size\" v-if=\"ext.size\">\n    Bundle Size: {{ formatSize(ext.size) }}\n  </span>\n</div>\n<div class=\"tags\">\n  <span v-for=\"tag in ext.tags\" :key=\"tag\" class=\"tag\">{{ tag }}</span>\n</div>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Building PGlite WASM Module\nDESCRIPTION: This command builds the Postgres WASM module for PGlite using Docker.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/README.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm wasm:build\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue.js for Custom Elements\nDESCRIPTION: TypeScript configuration for Vue.js to recognize custom elements with the 'pglite-' prefix, allowing the use of the PGlite REPL web component.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/repl.md#2025-04-11_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\napp.config.compilerOptions.isCustomElement = (tag) => {\n  return tag.startsWith('pglite-')\n}\n```\n\n----------------------------------------\n\nTITLE: Building PGlite TypeScript Packages\nDESCRIPTION: This command builds all TypeScript packages for PGlite.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/README.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm ts:build\n```\n\n----------------------------------------\n\nTITLE: Vue Setup with Computed Properties and Utility Functions\nDESCRIPTION: Defines the component's data processing logic using Vue's composition API. Includes computed properties for filtering extensions and extracting tags, along with utility functions for link handling, string slugification, and file size formatting.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/extensions/index.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { computed, ref } from \"vue\";\nimport { data } from \"./extensions.data.ts\";\n\nconst filteredExtensions = computed(() => {\n  return data.extensions\n    .filter((ext) => !selectedTag.value || ext.tags.includes(selectedTag.value))\n    .sort((a, b) => {\n      if (a.featured && !b.featured) return -1;\n      if (!a.featured && b.featured) return 1;\n      return a.name.localeCompare(b.name);\n    });\n});\n\nfunction mainLink(ext) {\n  return ext.homepage || ext.repo || ext.docs;\n}\n\nfunction slugify(string) {\n  return string\n    .replace('/', '')\n    .replace(' ', '-')\n    .replace('_', '-')\n    .toLowerCase()\n}\n\nconst tags = computed(() => {\n  return data.tags.map((tag) => {\n    return {\n      name: tag,\n      count: data.extensions.filter((ext) => ext.tags.includes(tag)).length,\n    }\n  })\n})\n\nfunction formatSize(bytes) {\n  const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];\n  let i = 0;\n\n  while (bytes >= 1024 && i < units.length - 1) {\n    bytes /= 1024;\n    i++;\n  }\n\n  return `${bytes.toFixed(1)} ${units[i]}`;\n}\n\nconst selectedTag = ref(null)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Building Individual PGlite Package\nDESCRIPTION: These commands navigate to a specific package directory and build it.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/README.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/pglite\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Cloning PGlite Repository and Installing Dependencies\nDESCRIPTION: These commands clone the PGlite repository with submodules and install the project dependencies using pnpm.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/README.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recurse-submodules https://github.com/electric-sql/pglite\ncd pglite\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Component Styling with CSS\nDESCRIPTION: Defines the component's visual styling using scoped CSS. Includes styles for buttons, tags, links, and layout elements with variables that support dark/light theme compatibility.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/extensions/index.md#2025-04-11_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n.btn-tag {\n    border-color: var(--vp-button-alt-border);\n    color: var(--vp-button-alt-text);\n    background-color: var(--vp-button-alt-bg);\n    border-radius: 20px;\n    padding: 0 20px;\n    line-height: 38px;\n    font-size: 14.5px;\n    display: inline-block;\n    border: 1px solid transparent;\n    text-align: center;\n    font-weight: 600;\n    white-space: nowrap;\n    transition: color 0.25s, border-color 0.25s, background-color 0.25s;\n    margin-right: 0.5rem;\n}\n\n.btn-tag:hover {\n  border-color: var(--vp-button-alt-hover-border);\n  color: var(--vp-button-alt-hover-text);\n  background-color: var(--vp-button-alt-hover-bg);\n}\n\n.btn-tag.selected {\n  border-color: var(--vp-button-brand-border);\n  color: var(--vp-c-gray-3);\n  background-color: var(--vp-button-brand-bg);\n}\n\n.btn-tag.selected:hover {\n  border-color: var(--vp-button-brand-hover-border);\n  background-color: var(--vp-button-brand-hover-bg);\n}\n\n.btn-tag .count {\n  margin-left: 0.25rem;\n  margin-left: 0.25rem;\n  opacity: 0.5\n}\n\n.tags, .links {\n  margin-top: 1rem;\n}\n\n.tag {\n    border-color: var(--vp-button-alt-border);\n    color: var(--vp-button-alt-text);\n    background-color: var(--vp-button-alt-bg);\n    border-radius: 20px;\n    padding: 5px 10px;\n    line-height: 18px;\n    font-size: 14.5px;\n    display: inline-block;\n    border: 1px solid transparent;\n    text-align: center;\n    font-weight: 600;\n    white-space: nowrap;\n    transition: color 0.25s, border-color 0.25s, background-color 0.25s;\n    margin-right: 0.5rem;\n}\n\n.links a {\n  margin-right: 0.5rem;\n}\n\n.bundle-size {\n  float:right;\n  opacity: 0.5;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining PGlite REPL Component Props Interface\nDESCRIPTION: TypeScript interface defining the props for the PGlite REPL component. It includes options for PGlite instance, border, themes, and theme selection.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/repl.md#2025-04-11_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// The theme to use, auto is auto-switching based on the system\ntype ReplTheme = 'light' | 'dark' | 'auto'\n\ninterface ReplProps {\n  pg: PGlite // PGlite db instance\n  border?: boolean // Outer border on the component, defaults to false\n  lightTheme?: Extension\n  darkTheme?: Extension\n  theme?: ReplTheme // Defaults to \"auto\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Vite Project\nDESCRIPTION: Command to create a new Vite project with React and TypeScript when starting from scratch.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/examples/react/README.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm create vite\n```\n\n----------------------------------------\n\nTITLE: Setting Up a New Project\nDESCRIPTION: Commands to navigate to the newly created project directory, install dependencies, and start the development server.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/examples/react/README.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n  $ cd pglite-vite-react-project\n  $ pnpm install\n  $ pnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Structuring PGlite Documentation Homepage Content\nDESCRIPTION: This HTML structure defines the layout for the PGlite documentation homepage, including sections for showcasing PGlite with database.build and an interactive REPL for trying PGlite directly in the browser.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/index.md#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"vpi-social-github\"></span>\n\n<div class=\"row\">\n  <div class=\"postgres-new\">\n    <div class=\"info\">\n      <h3>Experience PGlite with <a href=\"https://database.build\">database.build</a></h3>\n      <p>\n        Create and publish a Postgres database using AI\n        <br class=\"hide-xs\" />\n        built on PGlite by <a href=\"https://supabase.com\">Supabase</a>:\n      </p>\n    </div>\n    <video controls poster=\"https://static.pglite.dev/videos/postgres-new-showcase-loop.png\">\n      <source src=\"https://static.pglite.dev/videos/postgres-new-showcase-loop-1080p.mp4\" type=\"video/mp4\" />\n    </video>\n    <a class=\"link-btn\" href=\"https://database.build\">\n      What would you like to create?</a>\n  </div>\n  <div class=\"try-it-now\">\n    <div class=\"info\">\n      <h3>Try PGlite Now</h3>\n      <p>\n        This is a full PGlite Postgres running in your browser.\n        <br class=\"hide-xs\" />\n        It even includes <a href=\"/extensions/#pgvector\">pgvector</a>!\n      </p>\n    </div>\n    <ClientOnly>\n      <Repl class=\"repl\" />\n    </ClientOnly>\n    <a class=\"link-btn\" href=\"/repl\">\n      Try more extensions in the playground</a>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install project dependencies using PNPM while ignoring workspace configuration, as this example is part of a PNPM workspace.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/examples/react/README.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm i --ignore-workspace\n```\n\n----------------------------------------\n\nTITLE: Cloning the PGlite Repository\nDESCRIPTION: Command to clone the PGlite repository from GitHub which contains the example project.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/examples/react/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/electric-sql/pglite\n```\n\n----------------------------------------\n\nTITLE: Installing PGlite Tools via npm\nDESCRIPTION: Command to install the PGlite tools package using npm.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-tools/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @electric-sql/pglite-tools\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands\nDESCRIPTION: Installation commands for different JavaScript runtimes including Node.js, Bun, and Deno\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @electric-sql/pglite\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun install @electric-sql/pglite\n```\n\nLANGUAGE: bash\nCODE:\n```\ndeno add npm:@electric-sql/pglite\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Example Directory\nDESCRIPTION: Command to change to the React example directory within the cloned repository.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/examples/react/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ./pglite/examples/react\n```\n\n----------------------------------------\n\nTITLE: Setting up and running PGlite benchmarks using npm and Python\nDESCRIPTION: This snippet shows the commands to install dependencies, build the project, and start a local server to run the benchmarks. It uses pnpm for package management and Python's http.server module.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/benchmark/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm build\ncd ./dist\npython3 -m http.server\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Container for Electric Server\nDESCRIPTION: Launches the Electric server using Docker Compose configuration\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-sync/example/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: PGlite REPL Development Setup Commands\nDESCRIPTION: Shell commands for setting up the development environment, including installing dependencies, running the development server, and building the library.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-repl/README.md#2025-04-11_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Install deps\npnpm install\n\n# Run dev server\npnpm dev\n# then open a browser to the url shown\n\n# Build the lib\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Version Updates in Markdown Format\nDESCRIPTION: Changelog entries documenting version updates, dependency changes and patches for the PGlite REPL component. Includes details about React version compatibility and bug fixes.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-repl/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @electric-sql/pglite-repl\n\n## 1.0.0-next.0\n\n### Patch Changes\n\n- Updated dependencies [97e52f7]\n  - @electric-sql/pglite@0.3.0-next.0\n  - @electric-sql/pglite-react@1.0.0-next.0\n\n## 0.2.17\n\n### Patch Changes\n\n- Updated dependencies [6bdd74e]\n- Updated dependencies [f94d591]\n  - @electric-sql/pglite@0.2.17\n  - @electric-sql/pglite-react@0.2.17\n```\n\n----------------------------------------\n\nTITLE: Build Commands\nDESCRIPTION: Commands for building PGlite from source and managing the development workflow\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite/README.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/electric-sql/pglite\ncd pglite\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing PGlite Vue Bindings Package\nDESCRIPTION: Command to install the PGlite Vue bindings package using npm, which provides Vue hooks for working with PGlite databases.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-vue/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @electric-sql/pglite-vue\n```\n\n----------------------------------------\n\nTITLE: Styling PGlite Documentation Homepage\nDESCRIPTION: This CSS snippet defines styles for various elements on the PGlite documentation homepage, including the GitHub star count display, interactive components layout, and responsive design adjustments.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/index.md#2025-04-11_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<style>\n  .actions a[href=\"https://github.com/electric-sql/pglite\"] {\n    display: flex;\n    align-items: center;\n  }\n  .actions a[href=\"https://github.com/electric-sql/pglite\"] .vpi-social-github {\n    display: block;\n    width: 1.42rem;\n    height: 1.42rem;\n    margin: 0 0.5rem 0 0;\n    position: relative;\n  }\n  .actions a[href=\"https://github.com/electric-sql/pglite\"] .count {\n    margin-left: 0.25rem;\n    min-width: 55px;\n  }\n</style>\n\n<style scoped>\n\n  .try-it-now,\n  .postgres-new {\n    margin-top: 3rem;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .try-it-now .repl {\n    display: block;\n    width: 100%;\n    margin-bottom: 1rem;\n    height: 350px;\n  }\n\n  .info {\n    text-align: center;\n  }\n\n  .postgres-new video {\n    display: block;\n    width: 100%;\n    border-radius: 12px;\n    margin-bottom: 1rem;\n    aspect-ratio: 1616 / 1080;\n  }\n\n  .link-btn {\n    border-color: var(--vp-button-alt-border);\n    color: var(--vp-button-alt-text);\n    background-color: var(--vp-button-alt-bg);\n    border-radius: 20px;\n    padding: 0 20px;\n    line-height: 38px;\n    font-size: 14.5px;\n    display: inline-block;\n    border: 1px solid transparent;\n    text-align: center;\n    font-weight: 600;\n    white-space: nowrap;\n    transition: color 0.25s, border-color 0.25s, background-color 0.25s;\n    text-decoration: none;\n  }\n\n  @media (min-width: 1000px) {\n    .row {\n      display: flex;\n    }\n\n    .try-it-now,\n    .postgres-new {\n      width: 50%;\n    }\n\n    .try-it-now {\n      padding-left: 1rem;\n    }\n\n    .postgres-new {\n      padding-right: 1rem;\n    }\n\n    .try-it-now .repl {\n      height: auto;\n      aspect-ratio: 1616 / 1080;\n    }\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for PGlite Transpilation\nDESCRIPTION: This configuration shows how to set up Next.js to transpile the PGlite package. It adds '@electric-sql/pglite' to the 'transpilePackages' array in the Next.js configuration file.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/bundler-support.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextConfig = {\n  swcMinify: false,\n  transpilePackages: [\n    '@electric-sql/pglite-react', // Optional\n    '@electric-sql/pglite',\n  ],\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Installing ElectricSQL PGlite Sync Plugin\nDESCRIPTION: NPM command to install the ElectricSQL PGlite sync plugin package.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/sync.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @electric-sql/pglite-sync\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue REPL Playground Component Import\nDESCRIPTION: Defines and imports a client-side Vue component for a REPL playground using VitePress's defineClientComponent utility\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/repl/index.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ReplPlayground = defineClientComponent(() => {\n  return import('./ReplPlayground.vue')\n})\n```\n\n----------------------------------------\n\nTITLE: Running Native Baseline Benchmarks\nDESCRIPTION: Commands to install dependencies and run the baseline performance tests in the PGlite monorepo using pnpm package manager.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/benchmarks.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd ./packages/benchmark\npnpm install\nnpx tsx baseline.ts\n```\n\n----------------------------------------\n\nTITLE: Installing PGlite REPL Component with NPM\nDESCRIPTION: Command to install the PGlite REPL component using NPM package manager.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/docs/repl.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @electric-sql/pglite-repl\n```\n\n----------------------------------------\n\nTITLE: Initializing PGlite and Querying in JavaScript\nDESCRIPTION: This snippet demonstrates how to import PGlite, create a new database instance, and execute a simple query. It works in browser, Node.js, Bun, and Deno environments.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PGlite } from \"@electric-sql/pglite\";\n\nconst db = new PGlite();\nawait db.query(\"select 'Hello world' as message;\");\n// -> { rows: [ { message: \"Hello world\" } ] }\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent PGlite Database in Node.js/Bun/Deno\nDESCRIPTION: This snippet shows how to create a PGlite database instance that persists data to the filesystem in Node.js, Bun, or Deno environments.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/README.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = new PGlite(\"./path/to/pgdata\");\n```\n\n----------------------------------------\n\nTITLE: Running native baseline script for wa-sqlite benchmark suite in TypeScript\nDESCRIPTION: This command executes a TypeScript script named 'baseline.ts' using npx and tsx, which generates a set of native baseline results for the wa-sqlite benchmark suite.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/benchmark/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx tsx baseline.ts\n```\n\n----------------------------------------\n\nTITLE: Installing PGlite REPL via NPM\nDESCRIPTION: Command to install the PGlite REPL component using npm package manager.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-repl/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @electric-sql/pglite-repl\n```\n\n----------------------------------------\n\nTITLE: Installing PGlite in Bun\nDESCRIPTION: This command installs the PGlite package in a Bun project.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbun install @electric-sql/pglite\n```\n\n----------------------------------------\n\nTITLE: Adding PGlite to Deno project\nDESCRIPTION: This command adds the PGlite package to a Deno project.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/README.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndeno add npm:@electric-sql/pglite\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version\nDESCRIPTION: Command to check the installed version of Node.js. The example requires at least version 18.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/examples/react/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ node --version\n```\n\n----------------------------------------\n\nTITLE: Installing PGlite Packages\nDESCRIPTION: Command to install the PGlite core and React integration packages using PNPM.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/examples/react/README.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm install @electric-sql/pglite @electric-sql/pglite-react\n```\n\n----------------------------------------\n\nTITLE: Starting Python HTTP Server\nDESCRIPTION: Initializes a simple Python HTTP server in the packages directory to serve the example files\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite-sync/example/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m http.server\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the Vite development server for the example project.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/examples/react/README.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Defining PGlite Extension Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for a PGlite extension, including the Extension interface, ExtensionSetup type, and ExtensionSetupResult interface. It shows the structure required to create a compatible PGlite extension with setup, initialization, and cleanup functions.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/docs/extensions/development.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Extension {\n  name: string\n  setup: ExtensionSetup\n}\n\nexport type ExtensionSetup = (\n  pg: PGliteInterface,\n  emscriptenOpts: any,\n  clientOnly?: boolean,\n) => Promise<ExtensionSetupResult>\n\nexport interface ExtensionSetupResult {\n  emscriptenOpts?: any\n  namespaceObj?: any\n  bundlePath?: URL\n  init?: () => Promise<void>\n  close?: () => Promise<void>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PGlite Changeset\nDESCRIPTION: This command creates a changeset for PGlite contributions.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/README.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm changeset\n```\n\n----------------------------------------\n\nTITLE: Checking PNPM Version\nDESCRIPTION: Command to check the installed version of the PNPM package manager.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/examples/react/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm --version\n```\n\n----------------------------------------\n\nTITLE: Checking Git Version\nDESCRIPTION: Command to check the installed version of Git version control system.\nSOURCE: https://github.com/electric-sql/pglite/blob/main/examples/react/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git --version\n```\n\n----------------------------------------\n\nTITLE: Basic PGlite Query Example\nDESCRIPTION: Demonstrates initializing PGlite and running a simple SQL query in JavaScript\nSOURCE: https://github.com/electric-sql/pglite/blob/main/packages/pglite/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PGlite } from \"@electric-sql/pglite\";\n\nconst db = new PGlite();\nawait db.query(\"select 'Hello world' as message;\");\n// -> { rows: [ { message: \"Hello world\" } ] }\n```"
  }
]