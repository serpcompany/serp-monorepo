[
  {
    "owner": "casesandberg",
    "repo": "react-color",
    "content": "TITLE: Importing and Using ColorPicker Component in React\nDESCRIPTION: This code demonstrates how to import the ColorPicker component from react-color and use it in a React application. It shows the basic setup for rendering a color picker and handling color changes.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/02-getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport { ColorPicker } from 'react-color'\n\nclass Component extends React.Component {\n\n  render() {\n    return <ColorPicker />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Picker Component\nDESCRIPTION: Example of importing and using the SketchPicker component from react-color in a React application. Shows basic component implementation pattern that can be used with any of the available picker variants.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport { SketchPicker } from 'react-color'\n\nclass Component extends React.Component {\n\n  render() {\n    return <SketchPicker />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using SketchPicker in React Component\nDESCRIPTION: This snippet demonstrates how to import the SketchPicker component from react-color and use it within a React component's render method. It shows the basic setup required to include a color picker in a React application.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/02.02-include.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { SketchPicker } from 'react-color';\n\nclass Component extends React.Component {\n\n  render() {\n    return <SketchPicker />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Control in React Color Picker\nDESCRIPTION: Example showing how to initialize a SketchPicker component with a color value and handle color changes. The component maintains the selected color in its state and updates it when the user makes a selection. Supports hex, rgb, hsl, and transparent color formats.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/03.01-color.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { SketchPicker } from 'react-color';\n\nclass Component extends React.Component {\n  state = {\n    background: '#fff',\n  };\n\n  handleChangeComplete = (color) => {\n    this.setState({ background: color.hex });\n  };\n\n  render() {\n    return (\n      <SketchPicker\n        color={ this.state.background }\n        onChangeComplete={ this.handleChangeComplete }\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onChange Handler with SwatchesPicker in React\nDESCRIPTION: A React component example showing how to implement the onChange handler with the SwatchesPicker from react-color. The onChange handler is called every time the color changes during user interaction and receives a color object with hex, rgb, and hsl representations.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/03.02-onChange.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { SwatchesPicker } from 'react-color';\n\nclass Component extends React.Component {\n\n  handleChange(color, event) {\n    // color = {\n    //   hex: '#333',\n    //   rgb: {\n    //     r: 51,\n    //     g: 51,\n    //     b: 51,\n    //     a: 1,\n    //   },\n    //   hsl: {\n    //     h: 0,\n    //     s: 0,\n    //     l: .20,\n    //     a: 1,\n    //   },\n    // }\n  }\n\n  render() {\n    return <SwatchesPicker onChange={ this.handleChange } />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Custom Color Picker with ColorWrap HOC in React\nDESCRIPTION: This example demonstrates how to create a custom color picker component using the ColorWrap higher-order component from React Color. The MyPicker component receives color handling props from ColorWrap and renders a simple div that displays the current color.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/04-create.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { ColorWrap } from 'react-color/lib/components/common'\n\nconst MyPicker = (props) => {\n  console.log(props)\n  return <div style={{ background: props.hex }}>My Picker</div>\n}\n\nexport default ColorWrap(MyPicker)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Color Picker with Multiple Inputs in React\nDESCRIPTION: This snippet shows a more complex custom color picker that includes hex, rgb, and hsl inputs. It demonstrates how to extract and use various color format properties and color change handlers provided by ColorWrap.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/04-create.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { ColorWrap, EditableInput } from 'react-color/lib/components/common'\n\nconst MyPicker = (props) => {\n  const styles = {\n    input: {\n      height: '34px',\n      border: `1px solid ${ props.hex }`,\n      paddingLeft: '10px',\n    },\n  }\n\n  // Access and render hex, rgb and hsl values\n  return (\n    <div>\n      <EditableInput\n        style={{ input: styles.input }}\n        value={ props.hex }\n        onChange={ (hex) => props.onChange({ hex }) }\n      />\n      <EditableInput\n        style={{ input: styles.input }}\n        value={ `${ props.rgb.r }, ${ props.rgb.g }, ${ props.rgb.b }` }\n        onChange={ (rgb) => props.onChange({ rgb }) }\n      />\n      <EditableInput\n        style={{ input: styles.input }}\n        value={ `${ Math.round(props.hsl.h) }, ${ Math.round(props.hsl.s * 100) }, ${ Math.round(props.hsl.l * 100) }` }\n        onChange={ (hsl) => props.onChange({ hsl }) }\n      />\n    </div>\n  )\n}\n\nexport default ColorWrap(MyPicker)\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Color Picker with React-Color HOC\nDESCRIPTION: Creates a basic custom color picker component using the CustomPicker higher-order component from react-color. The component receives hex, rgb, and hsl color values as props and an onChange handler for color updates.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/04.01-parent.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { CustomPicker } from 'react-color';\n\nclass MyColorPicker extends React.Component {\n  render() {\n    return <div>MyColorPicker</div>;\n  }\n}\n\nexport default CustomPicker(MyColorPicker);\n```\n\n----------------------------------------\n\nTITLE: Using Sketch Component API in React Color\nDESCRIPTION: The Sketch component API configures the Sketch-style color picker. Properties include disableAlpha flag, presetColors array, width, renderers for SSR, and an onSwatchHover event handler.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/03.04-individual.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Sketch />\n```\n\n----------------------------------------\n\nTITLE: Using Github Component API in React Color\nDESCRIPTION: The Github component API customizes the Github-style color picker. Properties include width, colors array, triangle position, and an onSwatchHover event handler.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/03.04-individual.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Github />\n```\n\n----------------------------------------\n\nTITLE: Using Chrome Component API in React Color\nDESCRIPTION: The Chrome component API enables configuration of the Chrome-style color picker. Properties include disableAlpha flag and renderers for server-side rendering support.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/03.04-individual.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Chrome />\n```\n\n----------------------------------------\n\nTITLE: Using Photoshop Component API in React Color\nDESCRIPTION: The Photoshop component API customizes the Photoshop-style color picker. Properties include header text, onAccept callback, and onCancel callback for the dialog buttons.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/03.04-individual.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Photoshop />\n```\n\n----------------------------------------\n\nTITLE: Using Swatches Component API in React Color\nDESCRIPTION: The Swatches component API configures the color swatches picker. Properties include width, height, colors (array of color groups), and an onSwatchHover event handler.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/03.04-individual.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Swatches />\n```\n\n----------------------------------------\n\nTITLE: Using Twitter Component API in React Color\nDESCRIPTION: The Twitter component API customizes the Twitter-style color picker. Properties include width, colors array, triangle position, and an onSwatchHover event handler.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/03.04-individual.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Twitter />\n```\n\n----------------------------------------\n\nTITLE: Using Alpha Component API in React Color\nDESCRIPTION: The Alpha component API provides options for customizing the alpha picker. Properties include width, height, direction, renderers for SSR, and a custom pointer component.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/03.04-individual.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Alpha />\n```\n\n----------------------------------------\n\nTITLE: Using Hue Component API in React Color\nDESCRIPTION: The Hue component API configures the hue slider. Properties include width, height, direction (horizontal or vertical), and a custom pointer component.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/03.04-individual.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Hue />\n```\n\n----------------------------------------\n\nTITLE: Using Slider Component API in React Color\nDESCRIPTION: The Slider component API provides a simple interface for customizing the slider color picker. The only property is pointer, which allows using a custom React component for the slider pointer.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/03.04-individual.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Slider />\n```\n\n----------------------------------------\n\nTITLE: Using Block Component API in React Color\nDESCRIPTION: The Block component API allows customization of the block color picker. Properties include width, color array, triangle position, and an onSwatchHover event handler.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/03.04-individual.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Block />\n```\n\n----------------------------------------\n\nTITLE: Using Circle Component API in React Color\nDESCRIPTION: The Circle component API provides customization for the circular color picker. Properties include width, colors array, circleSize, circleSpacing, and an onSwatchHover event handler.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/03.04-individual.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Circle />\n```\n\n----------------------------------------\n\nTITLE: Using Compact Component API in React Color\nDESCRIPTION: The Compact component API allows configuration of the compact color picker. Properties include a colors array with default color swatches and an onSwatchHover event handler.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/03.04-individual.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Compact />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Alpha Component in React Color\nDESCRIPTION: This snippet demonstrates how to import and use the Alpha component from react-color to create a slider for controlling alpha/opacity values. It shows how to pass props, specify a custom pointer, and handle change events.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/04.02-helpers.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nvar { Alpha } = require('react-color/lib/components/common');\n\n<Alpha\n  {...this.props}\n  pointer={ CustomPointer }\n  onChange={ this.handleChange } />\n```\n\n----------------------------------------\n\nTITLE: Implementing EditableInput Component with Custom Styling\nDESCRIPTION: This snippet shows how to use the EditableInput component to create a labeled input field for color values. It demonstrates custom styling of the input and label elements and how to handle input changes.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/04.02-helpers.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nvar { EditableInput } = require('react-color/lib/components/common');\n\nvar inputStyles = {\n  input: {\n    border: none,\n  },\n  label: {\n    fontSize: '12px',\n    color: '#999',\n  },\n};\n\n<EditableInput\n  style={ inputStyles }\n  label=\"hex\"\n  value={ this.props.hex }\n  onChange={ this.handleChange } />\n```\n\n----------------------------------------\n\nTITLE: Using the Hue Component for Color Selection\nDESCRIPTION: This code demonstrates how to implement the Hue component to create a slider for selecting hue values. It shows how to configure direction (horizontal or vertical) and implement a custom pointer component.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/04.02-helpers.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nvar { Hue } = require('react-color/lib/components/common');\n\n<Hue\n  {...this.props}\n  pointer={ CustomPointer }\n  onChange={ this.handleChange }\n  direction={ 'horizontal' || 'vertical' } />\n```\n\n----------------------------------------\n\nTITLE: Implementing Saturation Component for Color Selection\nDESCRIPTION: This snippet shows how to use the Saturation component to create a 2D drag area for selecting saturation and value. It demonstrates passing props, specifying a custom pointer, and handling change events.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/04.02-helpers.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nvar { Saturation } = require('react-color/lib/components/common');\n\n<Saturation\n  {...this.props}\n  pointer={ CustomPointer }\n  onChange={ this.handleChange }  />\n```\n\n----------------------------------------\n\nTITLE: Implementing onChangeComplete Handler with PhotoshopPicker in React\nDESCRIPTION: Demonstrates how to set up a React component that uses PhotoshopPicker from react-color library with onChangeComplete callback to update component state when color selection is completed. The handler receives color and event parameters, and updates the background state with the selected hex color value.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/03.03-onChangeComplete.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { PhotoshopPicker } from 'react-color';\n\nclass Component extends React.Component {\n  state = {\n    background: '#fff',\n  };\n\n  handleChangeComplete = (color, event) => {\n    this.setState({ background: color.hex });\n  };\n\n  render() {\n    return <PhotoshopPicker onChangeComplete={ this.handleChangeComplete } />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SketchPicker Styles in React Color\nDESCRIPTION: Shows how to customize the appearance of a SketchPicker component by passing a styles object to override default inline styles. The example demonstrates removing the box shadow from the picker component.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/03.05-customStyles.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { SketchPicker } from 'react-color'\n\nconst sketchPickerStyles = {\n  default: {\n    picker: { // See the individual picker source for which keys to use\n      boxShadow: 'none',\n    },\n  },\n}\n\nexport default class Component extends React.Component {\n  render() {\n    return (\n      <SketchPicker styles={sketchPickerStyles} />\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-color NPM Package\nDESCRIPTION: Command to install the react-color package and save it as a dependency in package.json\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/02.01-install.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-color --save\n```\n\n----------------------------------------\n\nTITLE: Installing react-color via npm\nDESCRIPTION: This snippet shows how to install the react-color package using npm. It's a prerequisite step for using the library in a React project.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/02-getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install react-color --save\n```\n\n----------------------------------------\n\nTITLE: Installing React Color Package\nDESCRIPTION: Command to install the react-color package using npm package manager\nSOURCE: https://github.com/casesandberg/react-color/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react-color --save\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Color Pickers for Bundle Optimization\nDESCRIPTION: This snippet shows how to import specific color picker components individually from react-color to optimize bundle size. It demonstrates importing SketchPicker and ChromePicker from their respective paths.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/02.02-include.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport SketchPicker from 'react-color/lib/Sketch';\nimport ChromePicker from 'react-color/lib/Chrome';\n```\n\n----------------------------------------\n\nTITLE: Using Checkboard Component for Transparency Visualization\nDESCRIPTION: This code shows how to implement the Checkboard component which provides a checkerboard background for visualizing transparency. It demonstrates how to customize the size and colors of the checkerboard pattern.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/04.02-helpers.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nvar { Checkboard } = require('react-color/lib/components/common');\n\n<Checkboard\n  size={ 12 }\n  white=\"#fff\"\n  grey=\"#333\"  />\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter for React-Color Documentation Page\nDESCRIPTION: YAML frontmatter that defines the metadata for a documentation page in the react-color project. It specifies the page ID as 'examples' and the title as 'More Examples'.\nSOURCE: https://github.com/casesandberg/react-color/blob/master/docs/documentation/05-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nid: examples\ntitle: More Examples\n---\n```"
  }
]